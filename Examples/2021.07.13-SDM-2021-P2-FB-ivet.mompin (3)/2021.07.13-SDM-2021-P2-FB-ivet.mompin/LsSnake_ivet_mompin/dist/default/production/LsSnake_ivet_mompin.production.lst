

Microchip MPLAB XC8 Assembler V2.32 build 20210201212658 
                                                                                               Tue Jul 13 17:00:11 2021

Microchip MPLAB XC8 C Compiler v2.32 (Pro license) build 20210201212658 Og9s 
     1                           	processor	18F4321
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	plic
     5                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	bssBIGRAM,global,class=BIGRAM,space=1,delta=1,noexec
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1
    41                           	psect	text27,global,reloc=2,class=CODE,delta=1
    42                           	psect	text28,global,reloc=2,class=CODE,delta=1
    43                           	psect	text29,global,reloc=2,class=CODE,delta=1
    44                           	psect	text30,global,reloc=2,class=CODE,delta=1
    45                           	psect	text31,global,reloc=2,class=CODE,delta=1
    46                           	psect	text32,global,reloc=2,class=CODE,delta=1
    47                           	psect	text33,global,reloc=2,class=CODE,delta=1
    48                           	psect	text34,global,reloc=2,class=CODE,delta=1,group=1
    49                           	psect	text35,global,reloc=2,class=CODE,delta=1,group=1
    50                           	psect	text36,global,reloc=2,class=CODE,delta=1
    51                           	psect	text37,global,reloc=2,class=CODE,delta=1
    52                           	psect	text38,global,reloc=2,class=CODE,delta=1
    53                           	psect	text39,global,reloc=2,class=CODE,delta=1
    54                           	psect	text40,global,reloc=2,class=CODE,delta=1
    55                           	psect	text41,global,reloc=2,class=CODE,delta=1
    56                           	psect	text42,global,reloc=2,class=CODE,delta=1
    57                           	psect	text43,global,reloc=2,class=CODE,delta=1
    58                           	psect	text44,global,reloc=2,class=CODE,delta=1
    59                           	psect	text45,global,reloc=2,class=CODE,delta=1
    60                           	psect	text46,global,reloc=2,class=CODE,delta=1
    61                           	psect	text47,global,reloc=2,class=CODE,delta=1
    62                           	psect	text48,global,reloc=2,class=CODE,delta=1
    63                           	psect	text49,global,reloc=2,class=CODE,delta=1
    64                           	psect	text50,global,reloc=2,class=CODE,delta=1
    65                           	psect	text51,global,reloc=2,class=CODE,delta=1
    66                           	psect	text52,global,reloc=2,class=CODE,delta=1
    67                           	psect	text53,global,reloc=2,class=CODE,delta=1
    68                           	psect	text54,global,reloc=2,class=CODE,delta=1
    69                           	psect	text55,global,reloc=2,class=CODE,delta=1
    70                           	psect	text56,global,reloc=2,class=CODE,delta=1
    71                           	psect	text57,global,reloc=2,class=CODE,delta=1
    72                           	psect	text58,global,reloc=2,class=CODE,delta=1
    73                           	psect	text59,global,reloc=2,class=CODE,delta=1
    74                           	psect	text60,global,reloc=2,class=CODE,delta=1
    75                           	psect	text61,global,reloc=2,class=CODE,delta=1
    76                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    77                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    78                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    79                           	psect	text64,global,reloc=2,class=CODE,delta=1
    80                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    81                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    82                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    83                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    84                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    85                           	psect	pa_nodes0,global,class=CODE,delta=1
    86  0000                     
    87                           ; Version 2.20
    88                           ; Generated 12/02/2020 GMT
    89                           ; 
    90                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    91                           ; All rights reserved.
    92                           ; 
    93                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    94                           ; 
    95                           ; Redistribution and use in source and binary forms, with or without modification, are
    96                           ; permitted provided that the following conditions are met:
    97                           ; 
    98                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    99                           ;        conditions and the following disclaimer.
   100                           ; 
   101                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   102                           ;        of conditions and the following disclaimer in the documentation and/or other
   103                           ;        materials provided with the distribution.
   104                           ; 
   105                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   106                           ;        software without specific prior written permission.
   107                           ; 
   108                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   109                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   110                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   111                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   112                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   113                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   114                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   115                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   116                           ; 
   117                           ; 
   118                           ; Code-generator required, PIC18F4321 Definitions
   119                           ; 
   120                           ; SFR Addresses
   121  0000                     
   122                           	psect	idataBANK0
   123  001DDA                     __pidataBANK0:
   124                           	callstack 0
   125                           
   126                           ;initializer for _chars
   127  001DDA  0C                 	db	12
   128  001DDB  15                 	db	21
   129  001DDC  0F                 	db	15
   130  001DDD  0D                 	db	13
   131  001DDE  0F                 	db	15
   132  001DDF  0E                 	db	14
   133  001DE0  0D                 	db	13
   134  001DE1  0E                 	db	14
   135  001DE2  0D                 	db	13
   136  001DE3  0F                 	db	15
   137                           
   138                           	psect	mediumconst
   139  001E14                     __pmediumconst:
   140                           	callstack 0
   141  001E14  00                 	db	0
   142  001E15                     _STRINGS:
   143                           	callstack 0
   144  001E15  31                 	db	49
   145  001E16  2E                 	db	46
   146  001E17  20                 	db	32
   147  001E18  4E                 	db	78
   148  001E19  65                 	db	101
   149  001E1A  77                 	db	119
   150  001E1B  20                 	db	32
   151  001E1C  47                 	db	71
   152  001E1D  61                 	db	97
   153  001E1E  6D                 	db	109
   154  001E1F  65                 	db	101
   155  001E20  20                 	db	32
   156  001E21  00                 	db	0
   157  001E22  00                 	db	0
   158  001E23  00                 	db	0
   159  001E24  00                 	db	0
   160  001E25  00                 	db	0
   161  001E26  00                 	db	0
   162  001E27  00                 	db	0
   163  001E28  00                 	db	0
   164  001E29  00                 	db	0
   165  001E2A  00                 	db	0
   166  001E2B  00                 	db	0
   167  001E2C  00                 	db	0
   168  001E2D  00                 	db	0
   169  001E2E  00                 	db	0
   170  001E2F  00                 	db	0
   171  001E30  00                 	db	0
   172  001E31  00                 	db	0
   173  001E32  00                 	db	0
   174  001E33  32                 	db	50
   175  001E34  2E                 	db	46
   176  001E35  20                 	db	32
   177  001E36  53                 	db	83
   178  001E37  68                 	db	104
   179  001E38  6F                 	db	111
   180  001E39  77                 	db	119
   181  001E3A  20                 	db	32
   182  001E3B  74                 	db	116
   183  001E3C  6F                 	db	111
   184  001E3D  70                 	db	112
   185  001E3E  20                 	db	32
   186  001E3F  35                 	db	53
   187  001E40  20                 	db	32
   188  001E41  73                 	db	115
   189  001E42  63                 	db	99
   190  001E43  6F                 	db	111
   191  001E44  72                 	db	114
   192  001E45  65                 	db	101
   193  001E46  73                 	db	115
   194  001E47  20                 	db	32
   195  001E48  00                 	db	0
   196  001E49  00                 	db	0
   197  001E4A  00                 	db	0
   198  001E4B  00                 	db	0
   199  001E4C  00                 	db	0
   200  001E4D  00                 	db	0
   201  001E4E  00                 	db	0
   202  001E4F  00                 	db	0
   203  001E50  00                 	db	0
   204  001E51  33                 	db	51
   205  001E52  2E                 	db	46
   206  001E53  20                 	db	32
   207  001E54  53                 	db	83
   208  001E55  68                 	db	104
   209  001E56  6F                 	db	111
   210  001E57  77                 	db	119
   211  001E58  20                 	db	32
   212  001E59  55                 	db	85
   213  001E5A  73                 	db	115
   214  001E5B  65                 	db	101
   215  001E5C  72                 	db	114
   216  001E5D  73                 	db	115
   217  001E5E  20                 	db	32
   218  001E5F  00                 	db	0
   219  001E60  00                 	db	0
   220  001E61  00                 	db	0
   221  001E62  00                 	db	0
   222  001E63  00                 	db	0
   223  001E64  00                 	db	0
   224  001E65  00                 	db	0
   225  001E66  00                 	db	0
   226  001E67  00                 	db	0
   227  001E68  00                 	db	0
   228  001E69  00                 	db	0
   229  001E6A  00                 	db	0
   230  001E6B  00                 	db	0
   231  001E6C  00                 	db	0
   232  001E6D  00                 	db	0
   233  001E6E  00                 	db	0
   234  001E6F  34                 	db	52
   235  001E70  2E                 	db	46
   236  001E71  20                 	db	32
   237  001E72  4D                 	db	77
   238  001E73  6F                 	db	111
   239  001E74  64                 	db	100
   240  001E75  69                 	db	105
   241  001E76  66                 	db	102
   242  001E77  79                 	db	121
   243  001E78  20                 	db	32
   244  001E79  55                 	db	85
   245  001E7A  73                 	db	115
   246  001E7B  65                 	db	101
   247  001E7C  72                 	db	114
   248  001E7D  73                 	db	115
   249  001E7E  20                 	db	32
   250  001E7F  00                 	db	0
   251  001E80  00                 	db	0
   252  001E81  00                 	db	0
   253  001E82  00                 	db	0
   254  001E83  00                 	db	0
   255  001E84  00                 	db	0
   256  001E85  00                 	db	0
   257  001E86  00                 	db	0
   258  001E87  00                 	db	0
   259  001E88  00                 	db	0
   260  001E89  00                 	db	0
   261  001E8A  00                 	db	0
   262  001E8B  00                 	db	0
   263  001E8C  00                 	db	0
   264  001E8D  35                 	db	53
   265  001E8E  2E                 	db	46
   266  001E8F  20                 	db	32
   267  001E90  53                 	db	83
   268  001E91  68                 	db	104
   269  001E92  6F                 	db	111
   270  001E93  77                 	db	119
   271  001E94  20                 	db	32
   272  001E95  54                 	db	84
   273  001E96  69                 	db	105
   274  001E97  6D                 	db	109
   275  001E98  65                 	db	101
   276  001E99  20                 	db	32
   277  001E9A  00                 	db	0
   278  001E9B  00                 	db	0
   279  001E9C  00                 	db	0
   280  001E9D  00                 	db	0
   281  001E9E  00                 	db	0
   282  001E9F  00                 	db	0
   283  001EA0  00                 	db	0
   284  001EA1  00                 	db	0
   285  001EA2  00                 	db	0
   286  001EA3  00                 	db	0
   287  001EA4  00                 	db	0
   288  001EA5  00                 	db	0
   289  001EA6  00                 	db	0
   290  001EA7  00                 	db	0
   291  001EA8  00                 	db	0
   292  001EA9  00                 	db	0
   293  001EAA  00                 	db	0
   294  001EAB  36                 	db	54
   295  001EAC  2E                 	db	46
   296  001EAD  20                 	db	32
   297  001EAE  4D                 	db	77
   298  001EAF  6F                 	db	111
   299  001EB0  64                 	db	100
   300  001EB1  69                 	db	105
   301  001EB2  66                 	db	102
   302  001EB3  79                 	db	121
   303  001EB4  20                 	db	32
   304  001EB5  54                 	db	84
   305  001EB6  69                 	db	105
   306  001EB7  6D                 	db	109
   307  001EB8  65                 	db	101
   308  001EB9  20                 	db	32
   309  001EBA  00                 	db	0
   310  001EBB  00                 	db	0
   311  001EBC  00                 	db	0
   312  001EBD  00                 	db	0
   313  001EBE  00                 	db	0
   314  001EBF  00                 	db	0
   315  001EC0  00                 	db	0
   316  001EC1  00                 	db	0
   317  001EC2  00                 	db	0
   318  001EC3  00                 	db	0
   319  001EC4  00                 	db	0
   320  001EC5  00                 	db	0
   321  001EC6  00                 	db	0
   322  001EC7  00                 	db	0
   323  001EC8  00                 	db	0
   324  001EC9  31                 	db	49
   325  001ECA  2E                 	db	46
   326  001ECB  20                 	db	32
   327  001ECC  53                 	db	83
   328  001ECD  65                 	db	101
   329  001ECE  6C                 	db	108
   330  001ECF  65                 	db	101
   331  001ED0  63                 	db	99
   332  001ED1  74                 	db	116
   333  001ED2  20                 	db	32
   334  001ED3  55                 	db	85
   335  001ED4  73                 	db	115
   336  001ED5  65                 	db	101
   337  001ED6  72                 	db	114
   338  001ED7  20                 	db	32
   339  001ED8  00                 	db	0
   340  001ED9  00                 	db	0
   341  001EDA  00                 	db	0
   342  001EDB  00                 	db	0
   343  001EDC  00                 	db	0
   344  001EDD  00                 	db	0
   345  001EDE  00                 	db	0
   346  001EDF  00                 	db	0
   347  001EE0  00                 	db	0
   348  001EE1  00                 	db	0
   349  001EE2  00                 	db	0
   350  001EE3  00                 	db	0
   351  001EE4  00                 	db	0
   352  001EE5  00                 	db	0
   353  001EE6  00                 	db	0
   354  001EE7  32                 	db	50
   355  001EE8  2E                 	db	46
   356  001EE9  20                 	db	32
   357  001EEA  4E                 	db	78
   358  001EEB  65                 	db	101
   359  001EEC  77                 	db	119
   360  001EED  20                 	db	32
   361  001EEE  55                 	db	85
   362  001EEF  73                 	db	115
   363  001EF0  65                 	db	101
   364  001EF1  72                 	db	114
   365  001EF2  20                 	db	32
   366  001EF3  00                 	db	0
   367  001EF4  00                 	db	0
   368  001EF5  00                 	db	0
   369  001EF6  00                 	db	0
   370  001EF7  00                 	db	0
   371  001EF8  00                 	db	0
   372  001EF9  00                 	db	0
   373  001EFA  00                 	db	0
   374  001EFB  00                 	db	0
   375  001EFC  00                 	db	0
   376  001EFD  00                 	db	0
   377  001EFE  00                 	db	0
   378  001EFF  00                 	db	0
   379  001F00  00                 	db	0
   380  001F01  00                 	db	0
   381  001F02  00                 	db	0
   382  001F03  00                 	db	0
   383  001F04  00                 	db	0
   384  001F05  31                 	db	49
   385  001F06  2E                 	db	46
   386  001F07  20                 	db	32
   387  001F08  45                 	db	69
   388  001F09  64                 	db	100
   389  001F0A  69                 	db	105
   390  001F0B  74                 	db	116
   391  001F0C  20                 	db	32
   392  001F0D  4E                 	db	78
   393  001F0E  61                 	db	97
   394  001F0F  6D                 	db	109
   395  001F10  65                 	db	101
   396  001F11  20                 	db	32
   397  001F12  00                 	db	0
   398  001F13  00                 	db	0
   399  001F14  00                 	db	0
   400  001F15  00                 	db	0
   401  001F16  00                 	db	0
   402  001F17  00                 	db	0
   403  001F18  00                 	db	0
   404  001F19  00                 	db	0
   405  001F1A  00                 	db	0
   406  001F1B  00                 	db	0
   407  001F1C  00                 	db	0
   408  001F1D  00                 	db	0
   409  001F1E  00                 	db	0
   410  001F1F  00                 	db	0
   411  001F20  00                 	db	0
   412  001F21  00                 	db	0
   413  001F22  00                 	db	0
   414  001F23  32                 	db	50
   415  001F24  2E                 	db	46
   416  001F25  20                 	db	32
   417  001F26  44                 	db	68
   418  001F27  65                 	db	101
   419  001F28  6C                 	db	108
   420  001F29  65                 	db	101
   421  001F2A  74                 	db	116
   422  001F2B  65                 	db	101
   423  001F2C  20                 	db	32
   424  001F2D  55                 	db	85
   425  001F2E  73                 	db	115
   426  001F2F  65                 	db	101
   427  001F30  72                 	db	114
   428  001F31  20                 	db	32
   429  001F32  00                 	db	0
   430  001F33  00                 	db	0
   431  001F34  00                 	db	0
   432  001F35  00                 	db	0
   433  001F36  00                 	db	0
   434  001F37  00                 	db	0
   435  001F38  00                 	db	0
   436  001F39  00                 	db	0
   437  001F3A  00                 	db	0
   438  001F3B  00                 	db	0
   439  001F3C  00                 	db	0
   440  001F3D  00                 	db	0
   441  001F3E  00                 	db	0
   442  001F3F  00                 	db	0
   443  001F40  00                 	db	0
   444  001F41                     __end_of_STRINGS:
   445                           	callstack 0
   446  001F41                     _SMS:
   447                           	callstack 0
   448  001F41  32                 	db	50
   449  001F42  61                 	db	97
   450  001F43  62                 	db	98
   451  001F44  63                 	db	99
   452  001F45  20                 	db	32
   453  001F46  00                 	db	0
   454  001F47  00                 	db	0
   455  001F48  33                 	db	51
   456  001F49  64                 	db	100
   457  001F4A  65                 	db	101
   458  001F4B  66                 	db	102
   459  001F4C  20                 	db	32
   460  001F4D  00                 	db	0
   461  001F4E  00                 	db	0
   462  001F4F  34                 	db	52
   463  001F50  67                 	db	103
   464  001F51  68                 	db	104
   465  001F52  69                 	db	105
   466  001F53  20                 	db	32
   467  001F54  00                 	db	0
   468  001F55  00                 	db	0
   469  001F56  35                 	db	53
   470  001F57  6A                 	db	106
   471  001F58  6B                 	db	107
   472  001F59  6C                 	db	108
   473  001F5A  20                 	db	32
   474  001F5B  00                 	db	0
   475  001F5C  00                 	db	0
   476  001F5D  36                 	db	54
   477  001F5E  6D                 	db	109
   478  001F5F  6E                 	db	110
   479  001F60  6F                 	db	111
   480  001F61  20                 	db	32
   481  001F62  00                 	db	0
   482  001F63  00                 	db	0
   483  001F64  37                 	db	55
   484  001F65  70                 	db	112
   485  001F66  71                 	db	113
   486  001F67  72                 	db	114
   487  001F68  73                 	db	115
   488  001F69  20                 	db	32
   489  001F6A  00                 	db	0
   490  001F6B  38                 	db	56
   491  001F6C  74                 	db	116
   492  001F6D  75                 	db	117
   493  001F6E  76                 	db	118
   494  001F6F  20                 	db	32
   495  001F70  00                 	db	0
   496  001F71  00                 	db	0
   497  001F72  39                 	db	57
   498  001F73  77                 	db	119
   499  001F74  78                 	db	120
   500  001F75  79                 	db	121
   501  001F76  7A                 	db	122
   502  001F77  20                 	db	32
   503  001F78  00                 	db	0
   504  001F79                     __end_of_SMS:
   505                           	callstack 0
   506  001F79                     _enterHour:
   507                           	callstack 0
   508  001F79  45                 	db	69
   509  001F7A  6E                 	db	110
   510  001F7B  74                 	db	116
   511  001F7C  65                 	db	101
   512  001F7D  72                 	db	114
   513  001F7E  20                 	db	32
   514  001F7F  4E                 	db	78
   515  001F80  65                 	db	101
   516  001F81  77                 	db	119
   517  001F82  20                 	db	32
   518  001F83  54                 	db	84
   519  001F84  69                 	db	105
   520  001F85  6D                 	db	109
   521  001F86  65                 	db	101
   522  001F87  20                 	db	32
   523  001F88  28                 	db	40
   524  001F89  48                 	db	72
   525  001F8A  48                 	db	72
   526  001F8B  3A                 	db	58
   527  001F8C  4D                 	db	77
   528  001F8D  4D                 	db	77
   529  001F8E  29                 	db	41
   530  001F8F  3A                 	db	58
   531  001F90  20                 	db	32
   532  001F91  00                 	db	0
   533  001F92                     __end_of_enterHour:
   534                           	callstack 0
   535  001F92                     _new2:
   536                           	callstack 0
   537  001F92  45                 	db	69
   538  001F93  6E                 	db	110
   539  001F94  74                 	db	116
   540  001F95  65                 	db	101
   541  001F96  72                 	db	114
   542  001F97  20                 	db	32
   543  001F98  4E                 	db	78
   544  001F99  65                 	db	101
   545  001F9A  77                 	db	119
   546  001F9B  20                 	db	32
   547  001F9C  4E                 	db	78
   548  001F9D  61                 	db	97
   549  001F9E  6D                 	db	109
   550  001F9F  65                 	db	101
   551  001FA0  3A                 	db	58
   552  001FA1  20                 	db	32
   553  001FA2  00                 	db	0
   554  001FA3  00                 	db	0
   555  001FA4  00                 	db	0
   556  001FA5  00                 	db	0
   557  001FA6  00                 	db	0
   558  001FA7                     __end_of_new2:
   559                           	callstack 0
   560  001FA7                     _new:
   561                           	callstack 0
   562  001FA7  45                 	db	69
   563  001FA8  6E                 	db	110
   564  001FA9  74                 	db	116
   565  001FAA  65                 	db	101
   566  001FAB  72                 	db	114
   567  001FAC  20                 	db	32
   568  001FAD  4E                 	db	78
   569  001FAE  61                 	db	97
   570  001FAF  6D                 	db	109
   571  001FB0  65                 	db	101
   572  001FB1  3A                 	db	58
   573  001FB2  20                 	db	32
   574  001FB3  00                 	db	0
   575  001FB4  00                 	db	0
   576  001FB5  00                 	db	0
   577  001FB6  00                 	db	0
   578  001FB7  00                 	db	0
   579  001FB8  00                 	db	0
   580  001FB9  00                 	db	0
   581  001FBA  00                 	db	0
   582  001FBB  00                 	db	0
   583  001FBC                     __end_of_new:
   584                           	callstack 0
   585  001FBC                     _HighScore@EUSART$F2138:
   586                           	callstack 0
   587  001FBC  48                 	db	72
   588  001FBD  69                 	db	105
   589  001FBE  67                 	db	103
   590  001FBF  68                 	db	104
   591  001FC0  20                 	db	32
   592  001FC1  73                 	db	115
   593  001FC2  63                 	db	99
   594  001FC3  6F                 	db	111
   595  001FC4  72                 	db	114
   596  001FC5  65                 	db	101
   597  001FC6  3A                 	db	58
   598  001FC7  20                 	db	32
   599  001FC8  00                 	db	0
   600  001FC9  00                 	db	0
   601  001FCA  00                 	db	0
   602  001FCB                     __end_of_HighScore@EUSART$F2138:
   603                           	callstack 0
   604  001FCB                     _HighScore@EUSART$F2016:
   605                           	callstack 0
   606  001FCB  48                 	db	72
   607  001FCC  69                 	db	105
   608  001FCD  67                 	db	103
   609  001FCE  68                 	db	104
   610  001FCF  20                 	db	32
   611  001FD0  73                 	db	115
   612  001FD1  63                 	db	99
   613  001FD2  6F                 	db	111
   614  001FD3  72                 	db	114
   615  001FD4  65                 	db	101
   616  001FD5  3A                 	db	58
   617  001FD6  20                 	db	32
   618  001FD7  00                 	db	0
   619  001FD8  00                 	db	0
   620  001FD9  00                 	db	0
   621  001FDA                     __end_of_HighScore@EUSART$F2016:
   622                           	callstack 0
   623  001FDA                     _showHour:
   624                           	callstack 0
   625  001FDA  43                 	db	67
   626  001FDB  75                 	db	117
   627  001FDC  72                 	db	114
   628  001FDD  72                 	db	114
   629  001FDE  65                 	db	101
   630  001FDF  6E                 	db	110
   631  001FE0  74                 	db	116
   632  001FE1  20                 	db	32
   633  001FE2  54                 	db	84
   634  001FE3  69                 	db	105
   635  001FE4  6D                 	db	109
   636  001FE5  65                 	db	101
   637  001FE6  3A                 	db	58
   638  001FE7  20                 	db	32
   639  001FE8  00                 	db	0
   640  001FE9                     __end_of_showHour:
   641                           	callstack 0
   642  001FE9                     _TABLE:
   643                           	callstack 0
   644  001FE9  31                 	db	49
   645  001FEA  32                 	db	50
   646  001FEB  33                 	db	51
   647  001FEC  34                 	db	52
   648  001FED  35                 	db	53
   649  001FEE  36                 	db	54
   650  001FEF  37                 	db	55
   651  001FF0  38                 	db	56
   652  001FF1  39                 	db	57
   653  001FF2  2A                 	db	42
   654  001FF3  30                 	db	48
   655  001FF4  23                 	db	35
   656  001FF5                     __end_of_TABLE:
   657                           	callstack 0
   658  001FF5                     _score:
   659                           	callstack 0
   660  001FF5  53                 	db	83
   661  001FF6  63                 	db	99
   662  001FF7  6F                 	db	111
   663  001FF8  72                 	db	114
   664  001FF9  65                 	db	101
   665  001FFA  3A                 	db	58
   666  001FFB  20                 	db	32
   667  001FFC  00                 	db	0
   668  001FFD  00                 	db	0
   669  001FFE  00                 	db	0
   670  001FFF                     __end_of_score:
   671                           	callstack 0
   672  0000                     _RCREG	set	4014
   673  0000                     _PIR1bits	set	3998
   674  0000                     _TXREG	set	4013
   675  0000                     _TXSTAbits	set	4012
   676  0000                     _TRISCbits	set	3988
   677  0000                     _BAUDCONbits	set	4024
   678  0000                     _RCSTA	set	4011
   679  0000                     _TXSTA	set	4012
   680  0000                     _TRISC	set	3988
   681  0000                     _SPBRG	set	4015
   682  0000                     _LATBbits	set	3978
   683  0000                     _ADRESH	set	4036
   684  0000                     _ADCON0bits	set	4034
   685  0000                     _ADCON2	set	4032
   686  0000                     _ADCON1	set	4033
   687  0000                     _ADCON0	set	4034
   688  0000                     _PORTDbits	set	3971
   689  0000                     _LATEbits	set	3981
   690  0000                     _LATAbits	set	3977
   691  0000                     _TRISEbits	set	3990
   692  0000                     _TRISAbits	set	3986
   693  0000                     _LATDbits	set	3980
   694  0000                     _PORTBbits	set	3969
   695  0000                     _TRISDbits	set	3989
   696  0000                     _TRISBbits	set	3987
   697  0000                     _T0CONbits	set	4053
   698  0000                     _TMR0L	set	4054
   699  0000                     _TMR0H	set	4055
   700  0000                     _T0CON	set	4053
   701  0000                     _INTCONbits	set	4082
   702  0000                     _RCONbits	set	4048
   703  001FFF  00                 	db	0	; dummy byte at the end
   704  0000                     
   705                           ; #config settings
   706                           
   707                           	psect	cinit
   708  0017B0                     __pcinit:
   709                           	callstack 0
   710  0017B0                     start_initialization:
   711                           	callstack 0
   712  0017B0                     __initialization:
   713                           	callstack 0
   714                           
   715                           ; Initialize objects allocated to BANK0 (10 bytes)
   716                           ; load TBLPTR registers with __pidataBANK0
   717  0017B0  0EDA               	movlw	low __pidataBANK0
   718  0017B2  6EF6               	movwf	tblptrl,c
   719  0017B4  0E1D               	movlw	high __pidataBANK0
   720  0017B6  6EF7               	movwf	tblptrh,c
   721  0017B8  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   722  0017BA  6EF8               	movwf	tblptru,c
   723  0017BC  EE00  F0C6         	lfsr	0,__pdataBANK0
   724  0017C0  EE10 F00A          	lfsr	1,10
   725  0017C4                     copy_data0:
   726  0017C4  0009               	tblrd		*+
   727  0017C6  CFF5 FFEE          	movff	tablat,postinc0
   728  0017CA  50E5               	movf	postdec1,w,c
   729  0017CC  50E1               	movf	fsr1l,w,c
   730  0017CE  E1FA               	bnz	copy_data0
   731                           
   732                           ; Clear objects allocated to BIGRAM (280 bytes)
   733  0017D0  EE00  F0D7         	lfsr	0,__pbssBIGRAM
   734  0017D4  EE11 F018          	lfsr	1,280
   735  0017D8                     clear_0:
   736  0017D8  6AEE               	clrf	postinc0,c
   737  0017DA  50E5               	movf	postdec1,w,c
   738  0017DC  50E1               	movf	fsr1l,w,c
   739  0017DE  E1FC               	bnz	clear_0
   740  0017E0  50E2               	movf	fsr1h,w,c
   741  0017E2  E1FA               	bnz	clear_0
   742                           
   743                           ; Clear objects allocated to BANK0 (70 bytes)
   744  0017E4  EE00  F080         	lfsr	0,__pbssBANK0
   745  0017E8  0E46               	movlw	70
   746  0017EA                     clear_1:
   747  0017EA  6AEE               	clrf	postinc0,c
   748  0017EC  06E8               	decf	wreg,f,c
   749  0017EE  E1FD               	bnz	clear_1
   750                           
   751                           ; Clear objects allocated to COMRAM (84 bytes)
   752  0017F0  EE00  F001         	lfsr	0,__pbssCOMRAM
   753  0017F4  0E54               	movlw	84
   754  0017F6                     clear_2:
   755  0017F6  6AEE               	clrf	postinc0,c
   756  0017F8  06E8               	decf	wreg,f,c
   757  0017FA  E1FD               	bnz	clear_2
   758  0017FC                     end_of_initialization:
   759                           	callstack 0
   760  0017FC                     __end_of__initialization:
   761                           	callstack 0
   762  0017FC  9079               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   763  0017FE  9279               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   764  001800  0E00               	movlw	low (__Lmediumconst shr (0+16))
   765  001802  6EF8               	movwf	tblptru,c
   766  001804  0100               	movlb	0
   767  001806  EF7E  F009         	goto	_main	;jump to C main() function
   768                           
   769                           	psect	bssCOMRAM
   770  000001                     __pbssCOMRAM:
   771                           	callstack 0
   772  000001                     _k@marqueeMenu$F2198:
   773                           	callstack 0
   774  000001                     	ds	2
   775  000003                     _i@marqueeMenu$F2197:
   776                           	callstack 0
   777  000003                     	ds	2
   778  000005                     _j@marqueeMenu$F2195:
   779                           	callstack 0
   780  000005                     	ds	2
   781  000007                     _i@marqueeMenu$F2144:
   782                           	callstack 0
   783  000007                     	ds	2
   784  000009                     _j@marqueeMenu$F2142:
   785                           	callstack 0
   786  000009                     	ds	2
   787  00000B                     _min:
   788                           	callstack 0
   789  00000B                     	ds	2
   790  00000D                     _sec:
   791                           	callstack 0
   792  00000D                     	ds	2
   793  00000F                     _Timer:
   794                           	callstack 0
   795  00000F                     	ds	2
   796  000011                     _h_Tics:
   797                           	callstack 0
   798  000011                     	ds	2
   799  000013                     _hours:
   800                           	callstack 0
   801  000013                     	ds	2
   802  000015                     _minutes:
   803                           	callstack 0
   804  000015                     	ds	2
   805  000017                     _timer_user:
   806                           	callstack 0
   807  000017                     	ds	1
   808  000018                     _num_users3@queueUser$F2171:
   809                           	callstack 0
   810  000018                     	ds	1
   811  000019                     _n@queueUser$F2169:
   812                           	callstack 0
   813  000019                     	ds	1
   814  00001A                     _m@queueUser$F2168:
   815                           	callstack 0
   816  00001A                     	ds	1
   817  00001B                     _num_users@TData$F2161:
   818                           	callstack 0
   819  00001B                     	ds	1
   820  00001C                     _stateEus:
   821                           	callstack 0
   822  00001C                     	ds	1
   823  00001D                     _keyEus:
   824                           	callstack 0
   825  00001D                     	ds	1
   826  00001E                     _timerEusart:
   827                           	callstack 0
   828  00001E                     	ds	1
   829  00001F                     _seconds_aux:
   830                           	callstack 0
   831  00001F                     	ds	1
   832  000020                     _times3:
   833                           	callstack 0
   834  000020                     	ds	1
   835  000021                     _data:
   836                           	callstack 0
   837  000021                     	ds	1
   838  000022                     _timerHour:
   839                           	callstack 0
   840  000022                     	ds	1
   841  000023                     _keyHour:
   842                           	callstack 0
   843  000023                     	ds	1
   844  000024                     _stateHour@TData$F1717:
   845                           	callstack 0
   846  000024                     	ds	1
   847  000025                     _key_data:
   848                           	callstack 0
   849  000025                     	ds	1
   850  000026                     _state_data:
   851                           	callstack 0
   852  000026                     	ds	1
   853  000027                     _fila:
   854                           	callstack 0
   855  000027                     	ds	1
   856  000028                     _num_users@TData$F1605:
   857                           	callstack 0
   858  000028                     	ds	1
   859  000029                     _cycles@TTimer$F1506:
   860                           	callstack 0
   861  000029                     	ds	1
   862  00002A                     _timerSpeaker2@TTimer$F1505:
   863                           	callstack 0
   864  00002A                     	ds	1
   865  00002B                     _timerSpeaker1@TTimer$F1504:
   866                           	callstack 0
   867  00002B                     	ds	1
   868  00002C                     getKey@key_on:
   869                           	callstack 0
   870  00002C                     	ds	1
   871  00002D                     _timer_SMS:
   872                           	callstack 0
   873  00002D                     	ds	1
   874  00002E                     _first:
   875                           	callstack 0
   876  00002E                     	ds	1
   877  00002F                     _key_SMS:
   878                           	callstack 0
   879  00002F                     	ds	1
   880  000030                     _stateSMS:
   881                           	callstack 0
   882  000030                     	ds	1
   883  000031                     _num_user:
   884                           	callstack 0
   885  000031                     	ds	1
   886  000032                     _keyGot:
   887                           	callstack 0
   888  000032                     	ds	1
   889  000033                     _final_key:
   890                           	callstack 0
   891  000033                     	ds	1
   892  000034                     _key_2:
   893                           	callstack 0
   894  000034                     	ds	1
   895  000035                     _key_aux:
   896                           	callstack 0
   897  000035                     	ds	1
   898  000036                     motorJoyStick@state:
   899                           	callstack 0
   900  000036                     	ds	1
   901  000037                     _y:
   902                           	callstack 0
   903  000037                     	ds	1
   904  000038                     _x:
   905                           	callstack 0
   906  000038                     	ds	1
   907  000039                     motorMenu@state_menu:
   908                           	callstack 0
   909  000039                     	ds	1
   910  00003A                     _keyMenu:
   911                           	callstack 0
   912  00003A                     	ds	1
   913  00003B                     _key2:
   914                           	callstack 0
   915  00003B                     	ds	1
   916  00003C                     _timer_menu@TData$F1116:
   917                           	callstack 0
   918  00003C                     	ds	1
   919  00003D                     _times_8@TData$F1114:
   920                           	callstack 0
   921  00003D                     	ds	1
   922  00003E                     _sub_opt@marqueeMenu$F1104:
   923                           	callstack 0
   924  00003E                     	ds	1
   925  00003F                     _option4@marqueeMenu$F1103:
   926                           	callstack 0
   927  00003F                     	ds	1
   928  000040                     _option3@marqueeMenu$F1102:
   929                           	callstack 0
   930  000040                     	ds	1
   931  000041                     _ColumnAct:
   932                           	callstack 0
   933  000041                     	ds	1
   934  000042                     _RowAct:
   935                           	callstack 0
   936  000042                     	ds	1
   937  000043                     _Columns:
   938                           	callstack 0
   939  000043                     	ds	1
   940  000044                     _Rows:
   941                           	callstack 0
   942  000044                     	ds	1
   943  000045                     motorMatrix@state:
   944                           	callstack 0
   945  000045                     	ds	1
   946  000046                     _key:
   947                           	callstack 0
   948  000046                     	ds	1
   949  000047                     _timer:
   950                           	callstack 0
   951  000047                     	ds	1
   952  000048                     _counter:
   953                           	callstack 0
   954  000048                     	ds	1
   955  000049                     _direction:
   956                           	callstack 0
   957  000049                     	ds	1
   958  00004A                     _state_speaker:
   959                           	callstack 0
   960  00004A                     	ds	1
   961  00004B                     _digit:
   962                           	callstack 0
   963  00004B                     	ds	1
   964  00004C                     _seconds:
   965                           	callstack 0
   966  00004C                     	ds	1
   967  00004D                     _user_selected:
   968                           	callstack 0
   969  00004D                     	ds	1
   970  00004E                     _startGame:
   971                           	callstack 0
   972  00004E                     	ds	1
   973  00004F                     _times_pressed:
   974                           	callstack 0
   975  00004F                     	ds	1
   976  000050                     _rowi:
   977                           	callstack 0
   978  000050                     	ds	1
   979  000051                     _pointer:
   980                           	callstack 0
   981  000051                     	ds	1
   982  000052                     _total_users:
   983                           	callstack 0
   984  000052                     	ds	1
   985  000053                     _row:
   986                           	callstack 0
   987  000053                     	ds	1
   988  000054                     _column:
   989                           	callstack 0
   990  000054                     	ds	1
   991                           
   992                           	psect	bssBANK0
   993  000080                     __pbssBANK0:
   994                           	callstack 0
   995  000080                     _s_Timers:
   996                           	callstack 0
   997  000080                     	ds	36
   998  0000A4                     _auxiliar:
   999                           	callstack 0
  1000  0000A4                     	ds	14
  1001  0000B2                     _current_score:
  1002                           	callstack 0
  1003  0000B2                     	ds	8
  1004  0000BA                     _time:
  1005                           	callstack 0
  1006  0000BA                     	ds	4
  1007  0000BE                     _r@marqueeMenu$F2196:
  1008                           	callstack 0
  1009  0000BE                     	ds	2
  1010  0000C0                     _k@marqueeMenu$F2145:
  1011                           	callstack 0
  1012  0000C0                     	ds	2
  1013  0000C2                     _r@marqueeMenu$F2143:
  1014                           	callstack 0
  1015  0000C2                     	ds	2
  1016  0000C4                     motorUser@state_user:
  1017                           	callstack 0
  1018  0000C4                     	ds	1
  1019  0000C5                     _key_user:
  1020                           	callstack 0
  1021  0000C5                     	ds	1
  1022                           
  1023                           	psect	dataBANK0
  1024  0000C6                     __pdataBANK0:
  1025                           	callstack 0
  1026  0000C6                     _chars:
  1027                           	callstack 0
  1028  0000C6                     	ds	10
  1029                           
  1030                           	psect	bssBIGRAM
  1031  0000D7                     __pbssBIGRAM:
  1032                           	callstack 0
  1033  0000D7                     _users:
  1034                           	callstack 0
  1035  0000D7                     	ds	280
  1036                           
  1037                           	psect	cstackBANK0
  1038  0000D0                     __pcstackBANK0:
  1039                           	callstack 0
  1040  0000D0                     ??_motorEusart:
  1041  0000D0                     ??_motorUser:
  1042  0000D0                     motor_hour@mode:
  1043                           	callstack 0
  1044                           
  1045                           ; 1 bytes @ 0x0
  1046  0000D0                     	ds	7
  1047                           
  1048                           	psect	cstackCOMRAM
  1049  000055                     __pcstackCOMRAM:
  1050                           	callstack 0
  1051  000055                     
  1052                           ; 1 bytes @ 0x0
  1053  000055                     	ds	1
  1054  000056                     ??_RSI_High:
  1055                           
  1056                           ; 1 bytes @ 0x1
  1057  000056                     	ds	4
  1058  00005A                     ??_RSI_Low:
  1059                           
  1060                           ; 1 bytes @ 0x5
  1061  00005A                     	ds	1
  1062  00005B                     ??_EscriuPrimeraOrdre:
  1063  00005B                     ??_CantaPartAlta:
  1064  00005B                     ??_CantaPartBaixa:
  1065  00005B                     ?_TiGetTics:
  1066                           	callstack 0
  1067  00005B                     ?___wmul:
  1068                           	callstack 0
  1069  00005B                     ?___awdiv:
  1070                           	callstack 0
  1071  00005B                     ?___awmod:
  1072                           	callstack 0
  1073  00005B                     TiResetTics@Handle:
  1074                           	callstack 0
  1075  00005B                     selectChar@row:
  1076                           	callstack 0
  1077  00005B                     calculate_dist@dist:
  1078                           	callstack 0
  1079  00005B                     getKey@key:
  1080                           	callstack 0
  1081  00005B                     initData@m:
  1082                           	callstack 0
  1083  00005B                     ___wmul@multiplier:
  1084                           	callstack 0
  1085  00005B                     ___awdiv@dividend:
  1086                           	callstack 0
  1087  00005B                     ___awmod@dividend:
  1088                           	callstack 0
  1089                           
  1090                           ; 2 bytes @ 0x6
  1091  00005B                     	ds	1
  1092  00005C                     ??_selectChar:
  1093  00005C                     CantaPartAlta@c:
  1094                           	callstack 0
  1095  00005C                     CantaPartBaixa@c:
  1096                           	callstack 0
  1097  00005C                     EscriuPrimeraOrdre@ordre:
  1098                           	callstack 0
  1099  00005C                     calculate_dist@num:
  1100                           	callstack 0
  1101                           
  1102                           ; 1 bytes @ 0x7
  1103  00005C                     	ds	1
  1104  00005D                     ??_motorJoyStick:
  1105  00005D                     ??_TiGetTics:
  1106  00005D                     CantaIR@IR:
  1107                           	callstack 0
  1108  00005D                     CantaData@Data:
  1109                           	callstack 0
  1110  00005D                     ___wmul@multiplicand:
  1111                           	callstack 0
  1112  00005D                     ___awdiv@divisor:
  1113                           	callstack 0
  1114  00005D                     ___awmod@divisor:
  1115                           	callstack 0
  1116                           
  1117                           ; 2 bytes @ 0x8
  1118  00005D                     	ds	1
  1119  00005E                     selectChar@column:
  1120                           	callstack 0
  1121                           
  1122                           ; 1 bytes @ 0x9
  1123  00005E                     	ds	1
  1124  00005F                     TiGetTics@Handle:
  1125                           	callstack 0
  1126  00005F                     ___awdiv@counter:
  1127                           	callstack 0
  1128  00005F                     ___awmod@counter:
  1129                           	callstack 0
  1130  00005F                     ___wmul@product:
  1131                           	callstack 0
  1132                           
  1133                           ; 2 bytes @ 0xA
  1134  00005F                     	ds	1
  1135  000060                     ___awdiv@sign:
  1136                           	callstack 0
  1137  000060                     ___awmod@sign:
  1138                           	callstack 0
  1139  000060                     TiGetTics@actual:
  1140                           	callstack 0
  1141                           
  1142                           ; 2 bytes @ 0xB
  1143  000060                     	ds	1
  1144  000061                     ___awdiv@quotient:
  1145                           	callstack 0
  1146                           
  1147                           ; 2 bytes @ 0xC
  1148  000061                     	ds	1
  1149  000062                     ??_motorMatrix:
  1150  000062                     ??_motorSpeaker:
  1151  000062                     WaitForBusy@Busy:
  1152                           	callstack 0
  1153  000062                     Espera@Timer:
  1154                           	callstack 0
  1155                           
  1156                           ; 2 bytes @ 0xD
  1157  000062                     	ds	1
  1158  000063                     ?_scoreReduce:
  1159                           	callstack 0
  1160  000063                     LcGotoXY@Row:
  1161                           	callstack 0
  1162  000063                     scoreReduce@score:
  1163                           	callstack 0
  1164                           
  1165                           ; 2 bytes @ 0xE
  1166  000063                     	ds	1
  1167  000064                     ??_LcGotoXY:
  1168  000064                     Espera@ms:
  1169                           	callstack 0
  1170                           
  1171                           ; 2 bytes @ 0xF
  1172  000064                     	ds	1
  1173  000065                     DivideScore@score:
  1174                           	callstack 0
  1175                           
  1176                           ; 2 bytes @ 0x10
  1177  000065                     	ds	1
  1178  000066                     ??_Espera:
  1179  000066                     _LcGotoXY$976:
  1180                           	callstack 0
  1181                           
  1182                           ; 2 bytes @ 0x11
  1183  000066                     	ds	1
  1184  000067                     LcInit@columns:
  1185                           	callstack 0
  1186                           
  1187                           ; 1 bytes @ 0x12
  1188  000067                     	ds	1
  1189  000068                     LcInit@rows:
  1190                           	callstack 0
  1191  000068                     LcGotoXY@Fisics:
  1192                           	callstack 0
  1193                           
  1194                           ; 2 bytes @ 0x13
  1195  000068                     	ds	1
  1196  000069                     LcInit@i:
  1197                           	callstack 0
  1198                           
  1199                           ; 2 bytes @ 0x14
  1200  000069                     	ds	1
  1201  00006A                     LcGotoXY@Column:
  1202                           	callstack 0
  1203                           
  1204                           ; 1 bytes @ 0x15
  1205  00006A                     	ds	1
  1206  00006B                     LcPutChar@c:
  1207                           	callstack 0
  1208                           
  1209                           ; 1 bytes @ 0x16
  1210  00006B                     	ds	1
  1211  00006C                     SMS_Print@chari:
  1212                           	callstack 0
  1213  00006C                     PrintData@f:
  1214                           	callstack 0
  1215  00006C                     marqueePlaceArrow@sub_opt:
  1216                           	callstack 0
  1217                           
  1218                           ; 1 bytes @ 0x17
  1219  00006C                     	ds	1
  1220  00006D                     PrintData@characters:
  1221                           	callstack 0
  1222  00006D                     UpDownUsers@fila:
  1223                           	callstack 0
  1224  00006D                     MenuDoMarquee@timer:
  1225                           	callstack 0
  1226                           
  1227                           ; 2 bytes @ 0x18
  1228  00006D                     	ds	1
  1229  00006E                     ?_motor_data:
  1230                           	callstack 0
  1231  00006E                     PrintData@yes:
  1232                           	callstack 0
  1233                           
  1234                           ; 1 bytes @ 0x19
  1235  00006E                     	ds	1
  1236  00006F                     PrintData@col:
  1237                           	callstack 0
  1238  00006F                     MenuDoMarquee@option3:
  1239                           	callstack 0
  1240                           
  1241                           ; 1 bytes @ 0x1A
  1242  00006F                     	ds	1
  1243  000070                     ??_motor_data:
  1244  000070                     PrintCouples@col1:
  1245                           	callstack 0
  1246  000070                     ScoreDigits@col1:
  1247                           	callstack 0
  1248  000070                     place_char@row:
  1249                           	callstack 0
  1250  000070                     MenuDoMarquee@option4:
  1251                           	callstack 0
  1252  000070                     motor_SMS@times_pressed:
  1253                           	callstack 0
  1254                           
  1255                           ; 2 bytes @ 0x1B
  1256  000070                     	ds	1
  1257  000071                     PrintCouples@col2:
  1258                           	callstack 0
  1259  000071                     ScoreDigits@col2:
  1260                           	callstack 0
  1261  000071                     place_char@character:
  1262                           	callstack 0
  1263  000071                     MenuDoMarquee@sub_opt:
  1264                           	callstack 0
  1265                           
  1266                           ; 1 bytes @ 0x1C
  1267  000071                     	ds	1
  1268  000072                     ??_motor_SMS:
  1269  000072                     ??_MenuDoMarquee:
  1270  000072                     ??_marqueeUsers:
  1271  000072                     PrintCouples@row:
  1272                           	callstack 0
  1273  000072                     ScoreDigits@col3:
  1274                           	callstack 0
  1275                           
  1276                           ; 1 bytes @ 0x1D
  1277  000072                     	ds	1
  1278  000073                     PrintCouples@character1:
  1279                           	callstack 0
  1280  000073                     ScoreDigits@row:
  1281                           	callstack 0
  1282                           
  1283                           ; 1 bytes @ 0x1E
  1284  000073                     	ds	1
  1285  000074                     ??_motorMenu:
  1286  000074                     PrintCouples@character2:
  1287                           	callstack 0
  1288  000074                     ScoreDigits@data2:
  1289                           	callstack 0
  1290                           
  1291                           ; 1 bytes @ 0x1F
  1292  000074                     	ds	1
  1293  000075                     PrintCouples@yes:
  1294                           	callstack 0
  1295                           
  1296                           ; 1 bytes @ 0x20
  1297  000075                     	ds	1
  1298  000076                     PrintCouples@mode:
  1299                           	callstack 0
  1300                           
  1301                           ; 1 bytes @ 0x21
  1302  000076                     	ds	1
  1303  000077                     ??_motor_hour:
  1304  000077                     marqueeUsers@times_pressed:
  1305                           	callstack 0
  1306                           
  1307                           ; 1 bytes @ 0x22
  1308  000077                     	ds	2
  1309  000079                     
  1310                           ; 1 bytes @ 0x24
  1311 ;;
  1312 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1313 ;;
  1314 ;; *************** function _main *****************
  1315 ;; Defined at:
  1316 ;;		line 49 in file "MAIN.c"
  1317 ;; Parameters:    Size  Location     Type
  1318 ;;		None
  1319 ;; Auto vars:     Size  Location     Type
  1320 ;;		None
  1321 ;; Return value:  Size  Location     Type
  1322 ;;                  1    wreg      void 
  1323 ;; Registers used:
  1324 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1325 ;; Tracked objects:
  1326 ;;		On entry : 0/0
  1327 ;;		On exit  : 0/0
  1328 ;;		Unchanged: 0/0
  1329 ;; Data sizes:     COMRAM   BANK0   BANK1
  1330 ;;      Params:         0       0       0
  1331 ;;      Locals:         0       0       0
  1332 ;;      Temps:          0       0       0
  1333 ;;      Totals:         0       0       0
  1334 ;;Total ram usage:        0 bytes
  1335 ;; Hardware stack levels required when called: 11
  1336 ;; This function calls:
  1337 ;;		_EusInit
  1338 ;;		_HourInit
  1339 ;;		_InitSpeaker
  1340 ;;		_JoyInit
  1341 ;;		_LcCursorOff
  1342 ;;		_LcInit
  1343 ;;		_TiInitTimer
  1344 ;;		_initData
  1345 ;;		_initMatrix
  1346 ;;		_initMenu
  1347 ;;		_initSMS
  1348 ;;		_initUser
  1349 ;;		_motorEusart
  1350 ;;		_motorJoyStick
  1351 ;;		_motorMatrix
  1352 ;;		_motorMenu
  1353 ;;		_motorUser
  1354 ;;		_motor_SMS
  1355 ;;		_motor_data
  1356 ;;		_motor_hour
  1357 ;; This function is called by:
  1358 ;;		Startup code after reset
  1359 ;; This function uses a non-reentrant model
  1360 ;;
  1361                           
  1362                           	psect	text0
  1363  0012FC                     __ptext0:
  1364                           	callstack 0
  1365  0012FC                     _main:
  1366                           	callstack 20
  1367                           
  1368                           ;MAIN.c: 50:             }
  1369                           
  1370                           ;incstack = 0
  1371  0012FC  EC76  F00D         	call	_TiInitTimer	;wreg free
  1372                           
  1373                           ;MAIN.c: 51:             else if(times_pressed==11||times_pressed>=16){
  1374  001300  EC65  F00E         	call	_initMatrix	;wreg free
  1375                           
  1376                           ;MAIN.c: 52:               motor_data(times_pressed);
  1377  001304  0E10               	movlw	16
  1378  001306  6E67               	movwf	LcInit@columns^0,c
  1379  001308  0E02               	movlw	2
  1380  00130A  EC19  F009         	call	_LcInit
  1381                           
  1382                           ;MAIN.c: 53:             }
  1383  00130E  ECFC  F00E         	call	_LcCursorOff	;wreg free
  1384                           
  1385                           ;MAIN.c: 54: 
  1386  001312  ECBF  F00E         	call	_initSMS	;wreg free
  1387                           
  1388                           ;MAIN.c: 55:            else if(times_pressed==14||times_pressed==13){
  1389  001316  ECC8  F00E         	call	_initMenu	;wreg free
  1390                           
  1391                           ;MAIN.c: 56:               motorUser();
  1392  00131A  ECA0  F00E         	call	_JoyInit	;wreg free
  1393                           
  1394                           ;MAIN.c: 57:           }
  1395  00131E  EC39  F00E         	call	_initData	;wreg free
  1396                           
  1397                           ;MAIN.c: 58:  }
  1398  001322  EC48  F00E         	call	_HourInit	;wreg free
  1399                           
  1400                           ;MAIN.c: 59: }
  1401  001326  ECE9  F00D         	call	_EusInit	;wreg free
  1402  00132A  EC01  F00F         	call	_initUser	;wreg free
  1403  00132E  ECD8  F00D         	call	_InitSpeaker	;wreg free
  1404  001332                     l8104:
  1405  001332  ECA7  F007         	call	_motorMatrix	;wreg free
  1406  001336  504F               	movf	_times_pressed^0,w,c
  1407  001338  EC25  F005         	call	_motor_hour
  1408  00133C  0E0F               	movlw	15
  1409  00133E  184F               	xorwf	_times_pressed^0,w,c
  1410  001340  E105               	bnz	l8114
  1411  001342  ECD3  F009         	call	_motorJoyStick	;wreg free
  1412  001346  EC15  F000         	call	_motorEusart	;wreg free
  1413  00134A  D7F3               	goto	l8104
  1414  00134C                     l8114:
  1415  00134C  0E02               	movlw	2
  1416  00134E  644F               	cpfsgt	_times_pressed^0,c
  1417  001350  D003               	goto	u8860
  1418  001352  0E09               	movlw	9
  1419  001354  184F               	xorwf	_times_pressed^0,w,c
  1420  001356  E103               	bnz	l8120
  1421  001358                     u8860:
  1422  001358  EC2E  F004         	call	_motorMenu	;wreg free
  1423  00135C  D7EA               	goto	l8104
  1424  00135E                     l8120:
  1425  00135E  0E08               	movlw	8
  1426  001360  184F               	xorwf	_times_pressed^0,w,c
  1427  001362  E006               	bz	u8890
  1428  001364  0E07               	movlw	7
  1429  001366  184F               	xorwf	_times_pressed^0,w,c
  1430  001368  E003               	bz	u8890
  1431  00136A  0E0A               	movlw	10
  1432  00136C  184F               	xorwf	_times_pressed^0,w,c
  1433  00136E  E106               	bnz	l8128
  1434  001370                     u8890:
  1435  001370  C04F  F070         	movff	_times_pressed,motor_SMS@times_pressed
  1436  001374  6A71               	clrf	(motor_SMS@times_pressed+1)^0,c
  1437  001376  ECC6  F001         	call	_motor_SMS	;wreg free
  1438  00137A  D7DB               	goto	l8104
  1439  00137C                     l8128:
  1440  00137C  0E0B               	movlw	11
  1441  00137E  184F               	xorwf	_times_pressed^0,w,c
  1442  001380  E003               	bz	u8910
  1443  001382  0E0F               	movlw	15
  1444  001384  644F               	cpfsgt	_times_pressed^0,c
  1445  001386  D006               	goto	l8134
  1446  001388                     u8910:
  1447  001388  C04F  F06E         	movff	_times_pressed,?_motor_data
  1448  00138C  6A6F               	clrf	(?_motor_data+1)^0,c
  1449  00138E  EC2F  F003         	call	_motor_data	;wreg free
  1450  001392  D7CF               	goto	l8104
  1451  001394                     l8134:
  1452  001394  0E0E               	movlw	14
  1453  001396  184F               	xorwf	_times_pressed^0,w,c
  1454  001398  E003               	bz	u8930
  1455  00139A  0E0D               	movlw	13
  1456  00139C  184F               	xorwf	_times_pressed^0,w,c
  1457  00139E  E1C9               	bnz	l8104
  1458  0013A0                     u8930:
  1459  0013A0  EC65  F008         	call	_motorUser	;wreg free
  1460  0013A4  D7C6               	goto	l8104
  1461  0013A6                     __end_of_main:
  1462                           	callstack 0
  1463                           
  1464 ;; *************** function _motor_hour *****************
  1465 ;; Defined at:
  1466 ;;		line 20 in file "THour.c"
  1467 ;; Parameters:    Size  Location     Type
  1468 ;;  mode            1    wreg     unsigned char 
  1469 ;; Auto vars:     Size  Location     Type
  1470 ;;  mode            1    0[BANK0 ] unsigned char 
  1471 ;; Return value:  Size  Location     Type
  1472 ;;                  1    wreg      void 
  1473 ;; Registers used:
  1474 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1475 ;; Tracked objects:
  1476 ;;		On entry : 0/0
  1477 ;;		On exit  : 0/0
  1478 ;;		Unchanged: 0/0
  1479 ;; Data sizes:     COMRAM   BANK0   BANK1
  1480 ;;      Params:         0       0       0
  1481 ;;      Locals:         0       1       0
  1482 ;;      Temps:          2       0       0
  1483 ;;      Totals:         2       1       0
  1484 ;;Total ram usage:        3 bytes
  1485 ;; Hardware stack levels used: 1
  1486 ;; Hardware stack levels required when called: 9
  1487 ;; This function calls:
  1488 ;;		_LcClear
  1489 ;;		_LcGotoXY
  1490 ;;		_LcPutChar
  1491 ;;		_PrintCouples
  1492 ;;		_PrintData
  1493 ;;		_TiGetTics
  1494 ;;		_TiResetTics
  1495 ;;		_UpdateCursor
  1496 ;;		_selectChar
  1497 ;; This function is called by:
  1498 ;;		_main
  1499 ;; This function uses a non-reentrant model
  1500 ;;
  1501                           
  1502                           	psect	text1
  1503  000A4A                     __ptext1:
  1504                           	callstack 0
  1505  000A4A                     _motor_hour:
  1506                           	callstack 21
  1507                           
  1508                           ;incstack = 0
  1509                           ;motor_hour@mode stored from wreg
  1510  000A4A  0100               	movlb	0	; () banked
  1511  000A4C  6FD0               	movwf	motor_hour@mode& (0+255),b
  1512                           
  1513                           ;THour.c: 22:     switch(stateHour){
  1514  000A4E  D0BB               	goto	l7288
  1515  000A50                     l7176:
  1516                           
  1517                           ;THour.c: 25:             if(mode!=12){
  1518  000A50  0E0C               	movlw	12
  1519  000A52  0100               	movlb	0	; () banked
  1520  000A54  19D0               	xorwf	motor_hour@mode& (0+255),w,b
  1521  000A56  E003               	bz	l7180
  1522  000A58                     u7230:
  1523                           
  1524                           ;THour.c: 26:                 stateHour=1;
  1525  000A58  0E01               	movlw	1
  1526  000A5A  6E24               	movwf	_stateHour@TData$F1717^0,c
  1527                           
  1528                           ;THour.c: 28:             }else{
  1529  000A5C  0C01               	retlw	1
  1530  000A5E                     l7180:
  1531                           
  1532                           ; BSR set to: 0
  1533                           ;THour.c: 30:                 LcGotoXY(rowi,0);
  1534  000A5E  6A63               	clrf	LcGotoXY@Row^0,c
  1535  000A60  5050               	movf	_rowi^0,w,c
  1536  000A62  EC75  F00A         	call	_LcGotoXY
  1537                           
  1538                           ;THour.c: 31:                 LcPutChar(showHour[pointer]);
  1539  000A66  D8C4               	call	PL52	;call to abstracted procedure
  1540  000A68  EC30  F00C         	call	_LcPutChar
  1541                           
  1542                           ;THour.c: 32:                 UpdateCursor();
  1543  000A6C  EC06  F00F         	call	_UpdateCursor	;wreg free
  1544                           
  1545                           ;THour.c: 34:                 if(showHour[pointer]=='\0'){
  1546  000A70  D8BF               	call	PL52	;call to abstracted procedure
  1547  000A72  E11E               	bnz	l1349
  1548                           
  1549                           ;THour.c: 35:                     stateHour=1;
  1550  000A74  0E01               	movlw	1
  1551  000A76  6E24               	movwf	_stateHour@TData$F1717^0,c
  1552                           
  1553                           ;THour.c: 36:                     PrintCouples(mode,0,1,1,hours[1],hours[0],1);
  1554  000A78  6A70               	clrf	PrintCouples@col1^0,c
  1555  000A7A  6E71               	movwf	PrintCouples@col2^0,c
  1556  000A7C  6E72               	movwf	PrintCouples@row^0,c
  1557  000A7E  C014  F073         	movff	_hours+1,PrintCouples@character1
  1558  000A82  C013  F074         	movff	_hours,PrintCouples@character2
  1559  000A86  D8BD               	call	PL86	;call to abstracted procedure
  1560  000A88  EC33  F00D         	call	_PrintCouples
  1561                           
  1562                           ;THour.c: 37:                      PrintData(2,1,':',0);
  1563  000A8C  ECAA  F001         	call	PL62	;call to abstracted procedure
  1564  000A90  0E02               	movlw	2
  1565  000A92  EC2A  F00E         	call	_PrintData
  1566                           
  1567                           ;THour.c: 38:                     PrintCouples(mode,3,4,1,minutes[1],minutes[0],1);
  1568  000A96  0E03               	movlw	3
  1569  000A98  6E70               	movwf	PrintCouples@col1^0,c
  1570  000A9A  0E04               	movlw	4
  1571  000A9C  6E71               	movwf	PrintCouples@col2^0,c
  1572  000A9E  0E01               	movlw	1
  1573  000AA0  6E72               	movwf	PrintCouples@row^0,c
  1574  000AA2  C016  F073         	movff	_minutes+1,PrintCouples@character1
  1575  000AA6  C015  F074         	movff	_minutes,PrintCouples@character2
  1576  000AAA  D8AB               	call	PL86	;call to abstracted procedure
  1577  000AAC  EF33  F00D         	goto	_PrintCouples
  1578  000AB0                     l1349:
  1579                           
  1580                           ;THour.c: 41:                     stateHour=0;
  1581  000AB0  6A24               	clrf	_stateHour@TData$F1717^0,c
  1582  000AB2  0012               	return	
  1583  000AB4                     l1352:
  1584                           
  1585                           ;THour.c: 46:             if(!(PORTBbits.RB5==1||PORTBbits.RB4==1||PORTBbits.RB3==1)){
  1586  000AB4  AA81               	btfss	129,5,c	;volatile
  1587  000AB6  B881               	btfsc	129,4,c	;volatile
  1588  000AB8  D024               	goto	l7216
  1589  000ABA  B681               	btfsc	129,3,c	;volatile
  1590  000ABC  D022               	goto	l7216
  1591                           
  1592                           ;THour.c: 47:                 if(seconds!=60){
  1593  000ABE  0E3C               	movlw	60
  1594  000AC0  184C               	xorwf	_seconds^0,w,c
  1595  000AC2  E00E               	bz	l1354
  1596                           
  1597                           ;THour.c: 48:                     if (TiGetTics(timerHour) >= 2000) {
  1598  000AC4  5022               	movf	_timerHour^0,w,c
  1599  000AC6  ECC5  F00D         	call	_TiGetTics
  1600  000ACA  BE5C               	btfsc	(?_TiGetTics+1)^0,7,c
  1601  000ACC  0012               	return	
  1602  000ACE  EC62  F00A         	call	PL44	;call to abstracted procedure
  1603  000AD2  A0D8               	btfss	status,0,c
  1604  000AD4  0012               	return	
  1605                           
  1606                           ;THour.c: 50:                         TiResetTics(timerHour);
  1607  000AD6  5022               	movf	_timerHour^0,w,c
  1608  000AD8  EC57  F00E         	call	_TiResetTics
  1609                           
  1610                           ;THour.c: 51:                         seconds=seconds+1;
  1611  000ADC  2A4C               	incf	_seconds^0,f,c
  1612  000ADE  0012               	return	
  1613  000AE0                     l1354:
  1614                           
  1615                           ;THour.c: 56:                     seconds = 0;
  1616  000AE0  6A4C               	clrf	_seconds^0,c
  1617                           
  1618                           ;THour.c: 57:                     minutes[0]=minutes[0]+1;
  1619  000AE2  2A15               	incf	_minutes^0,f,c
  1620                           
  1621                           ;THour.c: 58:                     if(mode==12){
  1622  000AE4  0E0C               	movlw	12
  1623  000AE6  0100               	movlb	0	; () banked
  1624  000AE8  19D0               	xorwf	motor_hour@mode& (0+255),w,b
  1625  000AEA  E108               	bnz	l7214
  1626                           
  1627                           ; BSR set to: 0
  1628                           ;THour.c: 59:                     PrintData(4,1,minutes[0],1);
  1629  000AEC  0E01               	movlw	1
  1630  000AEE  6E6C               	movwf	PrintData@f^0,c
  1631  000AF0  C015  F06D         	movff	_minutes,PrintData@characters
  1632  000AF4  6E6E               	movwf	PrintData@yes^0,c
  1633  000AF6  0E04               	movlw	4
  1634  000AF8  EC2A  F00E         	call	_PrintData
  1635  000AFC                     l7214:
  1636                           
  1637                           ;THour.c: 61:                     stateHour=2;
  1638  000AFC  0E02               	movlw	2
  1639  000AFE  6E24               	movwf	_stateHour@TData$F1717^0,c
  1640  000B00  0C02               	retlw	2
  1641  000B02                     l7216:
  1642                           
  1643                           ;THour.c: 65:                 stateHour=5;
  1644  000B02  0E05               	movlw	5
  1645  000B04  6E24               	movwf	_stateHour@TData$F1717^0,c
  1646  000B06  0C05               	retlw	5
  1647  000B08                     l7218:
  1648                           
  1649                           ;THour.c: 70:    if (minutes[0] == 10) {
  1650  000B08  0E0A               	movlw	10
  1651  000B0A  1815               	xorwf	_minutes^0,w,c
  1652  000B0C  E1A5               	bnz	u7230
  1653                           
  1654                           ;THour.c: 71:     minutes[0] = 0;
  1655  000B0E  6A15               	clrf	_minutes^0,c
  1656                           
  1657                           ;THour.c: 72:                 minutes[1]=minutes[1]+1;
  1658  000B10  2A16               	incf	(_minutes+1)^0,f,c
  1659                           
  1660                           ;THour.c: 73:                 PrintCouples(mode,4,3,1,0,minutes[1],1);
  1661  000B12  0E04               	movlw	4
  1662  000B14  6E70               	movwf	PrintCouples@col1^0,c
  1663  000B16  0E03               	movlw	3
  1664  000B18  6E71               	movwf	PrintCouples@col2^0,c
  1665  000B1A  0E01               	movlw	1
  1666  000B1C  6E72               	movwf	PrintCouples@row^0,c
  1667  000B1E  6A73               	clrf	PrintCouples@character1^0,c
  1668  000B20  C016  F074         	movff	_minutes+1,PrintCouples@character2
  1669  000B24  D86E               	call	PL86	;call to abstracted procedure
  1670  000B26  EC33  F00D         	call	_PrintCouples
  1671                           
  1672                           ;THour.c: 74:                 stateHour=3;
  1673  000B2A  0E03               	movlw	3
  1674  000B2C  6E24               	movwf	_stateHour@TData$F1717^0,c
  1675                           
  1676                           ;THour.c: 75:             }else{
  1677  000B2E  0C03               	retlw	3
  1678  000B30                     l7230:
  1679                           
  1680                           ;THour.c: 80:             if (minutes[1] == 6) {
  1681  000B30  0E06               	movlw	6
  1682  000B32  1816               	xorwf	(_minutes+1)^0,w,c
  1683  000B34  E191               	bnz	u7230
  1684                           
  1685                           ;THour.c: 81:                 minutes[1] = 0;
  1686  000B36  6A16               	clrf	(_minutes+1)^0,c
  1687                           
  1688                           ;THour.c: 82:                 hours[0]=hours[0]+1;
  1689  000B38  2A13               	incf	_hours^0,f,c
  1690                           
  1691                           ;THour.c: 83:                 PrintCouples(mode,3,1,1,0,hours[0],1);
  1692  000B3A  0E03               	movlw	3
  1693  000B3C  6E70               	movwf	PrintCouples@col1^0,c
  1694  000B3E  D865               	call	PL100	;call to abstracted procedure
  1695  000B40  C013  F074         	movff	_hours,PrintCouples@character2
  1696  000B44  D85E               	call	PL86	;call to abstracted procedure
  1697  000B46  EC33  F00D         	call	_PrintCouples
  1698                           
  1699                           ;THour.c: 84:                 stateHour=4;
  1700  000B4A  0E04               	movlw	4
  1701  000B4C  6E24               	movwf	_stateHour@TData$F1717^0,c
  1702                           
  1703                           ;THour.c: 85:             }else{
  1704  000B4E  0C04               	retlw	4
  1705  000B50                     l7242:
  1706                           
  1707                           ;THour.c: 90:             if (hours[0] == 10) {
  1708  000B50  0E0A               	movlw	10
  1709  000B52  1813               	xorwf	_hours^0,w,c
  1710  000B54  E10C               	bnz	l7250
  1711                           
  1712                           ;THour.c: 91:                   hours[0] = 0;
  1713  000B56  6A13               	clrf	_hours^0,c
  1714                           
  1715                           ;THour.c: 92:                   hours[1]=hours[1]+1;
  1716  000B58  2A14               	incf	(_hours+1)^0,f,c
  1717                           
  1718                           ;THour.c: 93:                   PrintCouples(mode,1,0,1,0,hours[1],1);
  1719  000B5A  0E01               	movlw	1
  1720  000B5C  6E70               	movwf	PrintCouples@col1^0,c
  1721  000B5E  6A71               	clrf	PrintCouples@col2^0,c
  1722  000B60  6E72               	movwf	PrintCouples@row^0,c
  1723  000B62  6A73               	clrf	PrintCouples@character1^0,c
  1724  000B64  C014  F074         	movff	_hours+1,PrintCouples@character2
  1725  000B68  D84C               	call	PL86	;call to abstracted procedure
  1726  000B6A  EC33  F00D         	call	_PrintCouples
  1727  000B6E                     l7250:
  1728                           
  1729                           ;THour.c: 94:                   stateHour=1;
  1730  000B6E  0E01               	movlw	1
  1731  000B70  6E24               	movwf	_stateHour@TData$F1717^0,c
  1732                           
  1733                           ;THour.c: 95:             }else{
  1734  000B72  0E04               	movlw	4
  1735  000B74  1813               	xorwf	_hours^0,w,c
  1736  000B76  A4D8               	btfss	status,2,c
  1737  000B78  0012               	return	
  1738  000B7A  0E02               	movlw	2
  1739  000B7C  1814               	xorwf	(_hours+1)^0,w,c
  1740  000B7E  A4D8               	btfss	status,2,c
  1741  000B80  0012               	return	
  1742                           
  1743                           ;THour.c: 98:                   hours[0] = 0;
  1744  000B82  6A13               	clrf	_hours^0,c
  1745                           
  1746                           ;THour.c: 99:                   hours[1] = 0;
  1747  000B84  6A14               	clrf	(_hours+1)^0,c
  1748                           
  1749                           ;THour.c: 100:                   PrintCouples(mode,0,1,1,0,0,1);
  1750  000B86  6A70               	clrf	PrintCouples@col1^0,c
  1751  000B88  D840               	call	PL100	;call to abstracted procedure
  1752  000B8A  6A74               	clrf	PrintCouples@character2^0,c
  1753  000B8C  D83A               	call	PL86	;call to abstracted procedure
  1754  000B8E  EC33  F00D         	call	_PrintCouples
  1755  000B92  D762               	goto	u7230
  1756  000B94                     l7264:
  1757                           
  1758                           ;THour.c: 106:             keyHour=selectChar(column,row);
  1759  000B94  EC15  F009         	call	PL80	;call to abstracted procedure
  1760  000B98  EC03  F00D         	call	_selectChar
  1761  000B9C  6E23               	movwf	_keyHour^0,c
  1762                           
  1763                           ;THour.c: 107:             if(!(PORTBbits.RB5==1||PORTBbits.RB4==1||PORTBbits.RB3==1)){
  1764  000B9E  AA81               	btfss	129,5,c	;volatile
  1765  000BA0  B881               	btfsc	129,4,c	;volatile
  1766  000BA2  0012               	return	
  1767  000BA4  B681               	btfsc	129,3,c	;volatile
  1768  000BA6  0012               	return	
  1769                           
  1770                           ;THour.c: 108:                 if(keyHour=='#'){
  1771  000BA8  0E23               	movlw	35
  1772  000BAA  1823               	xorwf	_keyHour^0,w,c
  1773  000BAC  E181               	bnz	l1349
  1774                           
  1775                           ;THour.c: 109:                     if(mode==12){
  1776  000BAE  0E0C               	movlw	12
  1777  000BB0  0100               	movlb	0	; () banked
  1778  000BB2  19D0               	xorwf	motor_hour@mode& (0+255),w,b
  1779  000BB4  E102               	bnz	l7278
  1780                           
  1781                           ; BSR set to: 0
  1782                           ;THour.c: 110:                         stateHour=0;
  1783  000BB6  6A24               	clrf	_stateHour@TData$F1717^0,c
  1784                           
  1785                           ;THour.c: 111:                     }else{
  1786  000BB8  D002               	goto	l7280
  1787  000BBA                     l7278:
  1788                           
  1789                           ; BSR set to: 0
  1790                           ;THour.c: 112:                         stateHour=1;
  1791  000BBA  0E01               	movlw	1
  1792  000BBC  6E24               	movwf	_stateHour@TData$F1717^0,c
  1793  000BBE                     l7280:
  1794                           
  1795                           ; BSR set to: 0
  1796                           ;THour.c: 114:                     LcClear();
  1797  000BBE  EC8A  F00E         	call	_LcClear	;wreg free
  1798                           
  1799                           ;THour.c: 115:                     times_pressed=0;
  1800  000BC2  6A4F               	clrf	_times_pressed^0,c
  1801                           
  1802                           ;THour.c: 117:                 }else{
  1803  000BC4  0012               	return	
  1804  000BC6                     l7288:
  1805  000BC6  5024               	movf	_stateHour@TData$F1717^0,w,c
  1806  000BC8  6E77               	movwf	??_motor_hour^0,c
  1807  000BCA  6A78               	clrf	(??_motor_hour+1)^0,c
  1808                           
  1809                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1810                           ; Switch size 1, requested type "space"
  1811                           ; Number of cases is 1, Range of values is 0 to 0
  1812                           ; switch strategies available:
  1813                           ; Name         Instructions Cycles
  1814                           ; simple_byte            4     3 (average)
  1815                           ;	Chosen strategy is simple_byte
  1816  000BCC  5078               	movf	(??_motor_hour+1)^0,w,c
  1817  000BCE  A4D8               	btfss	status,2,c
  1818  000BD0  0012               	return	
  1819                           
  1820                           ; Switch size 1, requested type "space"
  1821                           ; Number of cases is 6, Range of values is 0 to 5
  1822                           ; switch strategies available:
  1823                           ; Name         Instructions Cycles
  1824                           ; simple_byte           19    10 (average)
  1825                           ;	Chosen strategy is simple_byte
  1826  000BD2  5077               	movf	??_motor_hour^0,w,c
  1827  000BD4  E101 D73C          	bz	l7176
  1828  000BD8  0A01               	xorlw	1	; case 1
  1829  000BDA  E101 D76B          	bz	l1352
  1830  000BDE  0A03               	xorlw	3	; case 2
  1831  000BE0  E093               	bz	l7218
  1832  000BE2  0A01               	xorlw	1	; case 3
  1833  000BE4  E0A5               	bz	l7230
  1834  000BE6  0A07               	xorlw	7	; case 4
  1835  000BE8  E0B3               	bz	l7242
  1836  000BEA  0A01               	xorlw	1	; case 5
  1837  000BEC  E0D3               	bz	l7264
  1838  000BEE  0012               	return		;funcret
  1839  000BF0                     __end_of_motor_hour:
  1840                           	callstack 0
  1841  000BF0                     PL52:
  1842                           	callstack 21
  1843  000BF0  0EDA               	movlw	low _showHour
  1844  000BF2  2451               	addwf	_pointer^0,w,c
  1845  000BF4  6EF6               	movwf	tblptrl,c
  1846  000BF6  6AF7               	clrf	tblptrh,c
  1847  000BF8  0E1F               	movlw	high _showHour
  1848  000BFA  22F7               	addwfc	tblptrh,f,c
  1849  000BFC                     	if	0	;There are less than 3 active tblptr bytes
  1850  000BFC                     	endif
  1851  000BFC  0008               	tblrd		*
  1852  000BFE  50F5               	movf	tablat,w,c
  1853  000C00  0012               	return	
  1854  000C02                     __end_ofPL52:
  1855                           	callstack 0
  1856  000C02                     PL86:
  1857                           	callstack 21
  1858  000C02  6E75               	movwf	PrintCouples@yes^0,c
  1859  000C04  0100               	movlb	0	; () banked
  1860  000C06  51D0               	movf	motor_hour@mode& (0+255),w,b
  1861  000C08  0012               	return	
  1862  000C0A                     __end_ofPL86:
  1863                           	callstack 0
  1864  000C0A                     PL100:
  1865                           	callstack 21
  1866  000C0A  0E01               	movlw	1
  1867  000C0C  6E71               	movwf	PrintCouples@col2^0,c
  1868  000C0E  6E72               	movwf	PrintCouples@row^0,c
  1869  000C10  6A73               	clrf	PrintCouples@character1^0,c
  1870  000C12  0C01               	retlw	1
  1871  000C14                     __end_ofPL100:
  1872                           	callstack 0
  1873                           
  1874 ;; *************** function _PrintCouples *****************
  1875 ;; Defined at:
  1876 ;;		line 125 in file "THour.c"
  1877 ;; Parameters:    Size  Location     Type
  1878 ;;  mode            1    wreg     unsigned char 
  1879 ;;  col1            1   27[COMRAM] unsigned char 
  1880 ;;  col2            1   28[COMRAM] unsigned char 
  1881 ;;  row             1   29[COMRAM] unsigned char 
  1882 ;;  character1      1   30[COMRAM] unsigned char 
  1883 ;;  character2      1   31[COMRAM] unsigned char 
  1884 ;;  yes             1   32[COMRAM] unsigned char 
  1885 ;; Auto vars:     Size  Location     Type
  1886 ;;  mode            1   33[COMRAM] unsigned char 
  1887 ;; Return value:  Size  Location     Type
  1888 ;;                  1    wreg      void 
  1889 ;; Registers used:
  1890 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1891 ;; Tracked objects:
  1892 ;;		On entry : 3F/0
  1893 ;;		On exit  : 0/0
  1894 ;;		Unchanged: 0/0
  1895 ;; Data sizes:     COMRAM   BANK0   BANK1
  1896 ;;      Params:         6       0       0
  1897 ;;      Locals:         1       0       0
  1898 ;;      Temps:          0       0       0
  1899 ;;      Totals:         7       0       0
  1900 ;;Total ram usage:        7 bytes
  1901 ;; Hardware stack levels used: 1
  1902 ;; Hardware stack levels required when called: 8
  1903 ;; This function calls:
  1904 ;;		_PrintData
  1905 ;; This function is called by:
  1906 ;;		_motor_hour
  1907 ;; This function uses a non-reentrant model
  1908 ;;
  1909                           
  1910                           	psect	text2
  1911  001A66                     __ptext2:
  1912                           	callstack 0
  1913  001A66                     _PrintCouples:
  1914                           	callstack 21
  1915                           
  1916                           ;incstack = 0
  1917                           ;PrintCouples@mode stored from wreg
  1918  001A66  6E76               	movwf	PrintCouples@mode^0,c
  1919                           
  1920                           ;THour.c: 126:     if(mode==12){
  1921  001A68  0E0C               	movlw	12
  1922  001A6A  1876               	xorwf	PrintCouples@mode^0,w,c
  1923  001A6C  A4D8               	btfss	status,2,c
  1924  001A6E  0012               	return	
  1925                           
  1926                           ;THour.c: 127:           PrintData(col1,row,character1,yes);
  1927  001A70  C072  F06C         	movff	PrintCouples@row,PrintData@f
  1928  001A74  C073  F06D         	movff	PrintCouples@character1,PrintData@characters
  1929  001A78  C075  F06E         	movff	PrintCouples@yes,PrintData@yes
  1930  001A7C  5070               	movf	PrintCouples@col1^0,w,c
  1931  001A7E  EC2A  F00E         	call	_PrintData
  1932                           
  1933                           ;THour.c: 128:           PrintData(col2,row,character2,yes);
  1934  001A82  C072  F06C         	movff	PrintCouples@row,PrintData@f
  1935  001A86  C074  F06D         	movff	PrintCouples@character2,PrintData@characters
  1936  001A8A  C075  F06E         	movff	PrintCouples@yes,PrintData@yes
  1937  001A8E  5071               	movf	PrintCouples@col2^0,w,c
  1938  001A90  EF2A  F00E         	goto	_PrintData
  1939  001A94                     __end_of_PrintCouples:
  1940                           	callstack 0
  1941                           
  1942 ;; *************** function _motor_data *****************
  1943 ;; Defined at:
  1944 ;;		line 14 in file "data.c"
  1945 ;; Parameters:    Size  Location     Type
  1946 ;;		None
  1947 ;; Auto vars:     Size  Location     Type
  1948 ;;		None
  1949 ;; Return value:  Size  Location     Type
  1950 ;;                  1    wreg      void 
  1951 ;; Registers used:
  1952 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1953 ;; Tracked objects:
  1954 ;;		On entry : 0/0
  1955 ;;		On exit  : 0/0
  1956 ;;		Unchanged: 0/0
  1957 ;; Data sizes:     COMRAM   BANK0   BANK1
  1958 ;;      Params:         2       0       0
  1959 ;;      Locals:         0       0       0
  1960 ;;      Temps:          4       0       0
  1961 ;;      Totals:         6       0       0
  1962 ;;Total ram usage:        6 bytes
  1963 ;; Hardware stack levels used: 1
  1964 ;; Hardware stack levels required when called: 9
  1965 ;; This function calls:
  1966 ;;		_LcClear
  1967 ;;		_LcGotoXY
  1968 ;;		_LcPutChar
  1969 ;;		_UpDownUsers
  1970 ;;		_UpdateCursor
  1971 ;;		___wmul
  1972 ;;		_marqueePlaceArrow
  1973 ;;		_return_to_main
  1974 ;;		_selectChar
  1975 ;;		_start
  1976 ;; This function is called by:
  1977 ;;		_main
  1978 ;; This function uses a non-reentrant model
  1979 ;;
  1980                           
  1981                           	psect	text3
  1982  00065E                     __ptext3:
  1983                           	callstack 0
  1984  00065E                     _motor_data:
  1985                           	callstack 21
  1986                           
  1987                           ;data.c: 16:     switch(state_data){
  1988                           
  1989                           ;incstack = 0
  1990  00065E  D0BB               	goto	l8012
  1991  000660                     l7880:
  1992                           
  1993                           ;data.c: 20:             sub_opt=0;
  1994  000660  0E11               	movlw	17
  1995  000662  184F               	xorwf	_times_pressed^0,w,c
  1996  000664  E00B               	bz	l7892
  1997                           
  1998                           ;data.c: 21:             marqueePlaceArrow(fila);
  1999  000666  5027               	movf	_fila^0,w,c
  2000  000668  EC72  F00E         	call	_marqueePlaceArrow
  2001                           
  2002                           ;data.c: 22:             num_users=0;
  2003  00066C  6A28               	clrf	_num_users@TData$F1605^0,c
  2004                           
  2005                           ;data.c: 23:             state_data=1;
  2006  00066E  0E01               	movlw	1
  2007  000670  6E26               	movwf	_state_data^0,c
  2008                           
  2009                           ;data.c: 24:             LcGotoXY(rowi,fila);
  2010  000672  D8F0               	call	PL112	;call to abstracted procedure
  2011  000674  EC75  F00A         	call	_LcGotoXY
  2012                           
  2013                           ;data.c: 25:             key_data=0;
  2014  000678  6A25               	clrf	_key_data^0,c
  2015                           
  2016                           ;data.c: 27:             }else{
  2017  00067A  0012               	return	
  2018  00067C                     l7892:
  2019                           
  2020                           ;data.c: 28:                 state_data=5;
  2021  00067C  0E05               	movlw	5
  2022  00067E  6E26               	movwf	_state_data^0,c
  2023                           
  2024                           ;data.c: 29:                 num_users=user_selected;
  2025  000680  C04D  F028         	movff	_user_selected,_num_users@TData$F1605
  2026                           
  2027                           ;data.c: 31:             break;
  2028                           
  2029                           ;data.c: 30:             }
  2030  000684  0C05               	retlw	5
  2031  000686                     l1191:
  2032                           
  2033                           ;data.c: 35:                 user_selected=num_users;
  2034  000686  C028  F04D         	movff	_num_users@TData$F1605,_user_selected
  2035                           
  2036                           ;data.c: 37:                 if(users[num_users].username[pointer]!='\0'){
  2037  00068A  D8D1               	call	PL22	;call to abstracted procedure
  2038  00068C  D8BC               	call	PL12	;call to abstracted procedure
  2039  00068E  E007               	bz	l7904
  2040                           
  2041                           ;data.c: 39:                     LcPutChar(users[num_users].username[pointer]);
  2042  000690  D8CE               	call	PL22	;call to abstracted procedure
  2043  000692  D8B9               	call	PL12	;call to abstracted procedure
  2044  000694  EC30  F00C         	call	_LcPutChar
  2045                           
  2046                           ;data.c: 40:                     UpdateCursor();
  2047  000698  EC06  F00F         	call	_UpdateCursor	;wreg free
  2048  00069C  D01B               	goto	l7920
  2049  00069E                     l7904:
  2050                           
  2051                           ;data.c: 43:                      fila=fila+1;
  2052  00069E  2A27               	incf	_fila^0,f,c
  2053                           
  2054                           ;data.c: 44:                      rowi=2;
  2055  0006A0  0E02               	movlw	2
  2056  0006A2  6E50               	movwf	_rowi^0,c
  2057                           
  2058                           ;data.c: 45:                      LcGotoXY(rowi,fila);
  2059  0006A4  D8D7               	call	PL112	;call to abstracted procedure
  2060  0006A6  EC75  F00A         	call	_LcGotoXY
  2061                           
  2062                           ;data.c: 46:                      pointer=0;
  2063  0006AA  6A51               	clrf	_pointer^0,c
  2064                           
  2065                           ;data.c: 47:                      state_data=2;
  2066  0006AC  0E02               	movlw	2
  2067  0006AE  6E26               	movwf	_state_data^0,c
  2068  0006B0  0C02               	retlw	2
  2069  0006B2                     l7914:
  2070                           
  2071                           ;data.c: 52:             if(users[num_users+1].username[pointer]!='\0'){
  2072  0006B2  D8C7               	call	PL36	;call to abstracted procedure
  2073  0006B4  ECB2  F00D         	call	___wmul	;wreg free
  2074  0006B8  0ED7               	movlw	low _users
  2075  0006BA  D8AE               	call	PL16	;call to abstracted procedure
  2076  0006BC  D8A4               	call	PL12	;call to abstracted procedure
  2077  0006BE  E00D               	bz	l7922
  2078                           
  2079                           ;data.c: 53:                          LcPutChar(users[num_users+1].username[pointer]);
  2080  0006C0  D8C0               	call	PL36	;call to abstracted procedure
  2081  0006C2  ECB2  F00D         	call	___wmul	;wreg free
  2082  0006C6  0ED7               	movlw	low _users
  2083  0006C8  D8A7               	call	PL16	;call to abstracted procedure
  2084  0006CA  D89D               	call	PL12	;call to abstracted procedure
  2085  0006CC  EC30  F00C         	call	_LcPutChar
  2086                           
  2087                           ;data.c: 54:                          UpdateCursor();
  2088  0006D0  EC06  F00F         	call	_UpdateCursor	;wreg free
  2089  0006D4                     l7920:
  2090                           
  2091                           ;data.c: 55:                          LcGotoXY(rowi,fila);
  2092  0006D4  D8BF               	call	PL112	;call to abstracted procedure
  2093  0006D6  EF75  F00A         	goto	_LcGotoXY
  2094  0006DA                     l7922:
  2095                           
  2096                           ;data.c: 58:                state_data=3;
  2097  0006DA  0E03               	movlw	3
  2098  0006DC  6E26               	movwf	_state_data^0,c
  2099                           
  2100                           ;data.c: 59:                pointer=0;
  2101  0006DE  6A51               	clrf	_pointer^0,c
  2102  0006E0  0012               	return	
  2103  0006E2                     l1197:
  2104                           
  2105                           ;data.c: 63:             if((PORTBbits.RB5==1||PORTBbits.RB4==1||PORTBbits.RB3==1)){
  2106  0006E2  AA81               	btfss	129,5,c	;volatile
  2107  0006E4  B881               	btfsc	129,4,c	;volatile
  2108  0006E6  D002               	goto	u8550
  2109  0006E8  A681               	btfss	129,3,c	;volatile
  2110  0006EA  0012               	return	
  2111  0006EC                     u8550:
  2112                           
  2113                           ;data.c: 64:                 LcClear();
  2114  0006EC  EC8A  F00E         	call	_LcClear	;wreg free
  2115                           
  2116                           ;data.c: 65:                 state_data=4;
  2117  0006F0  0E04               	movlw	4
  2118  0006F2  6E26               	movwf	_state_data^0,c
  2119                           
  2120                           ;data.c: 66:             }else{
  2121  0006F4  0C04               	retlw	4
  2122  0006F6                     l7934:
  2123                           
  2124                           ;data.c: 72:             key_data=selectChar(column,row);
  2125  0006F6  EC15  F009         	call	PL80	;call to abstracted procedure
  2126  0006FA  EC03  F00D         	call	_selectChar
  2127  0006FE  6E25               	movwf	_key_data^0,c
  2128                           
  2129                           ;data.c: 74:             if(!(PORTBbits.RB5==1||PORTBbits.RB4==1||PORTBbits.RB3==1)){
  2130  000700  AA81               	btfss	129,5,c	;volatile
  2131  000702  B881               	btfsc	129,4,c	;volatile
  2132  000704  0012               	return	
  2133  000706  B681               	btfsc	129,3,c	;volatile
  2134  000708  0012               	return	
  2135                           
  2136                           ;data.c: 75:                 if(key_data=='#'){
  2137  00070A  0E23               	movlw	35
  2138  00070C  1825               	xorwf	_key_data^0,w,c
  2139  00070E  E107               	bnz	l7954
  2140                           
  2141                           ;data.c: 76:                     return_to_main();
  2142  000710  ECE7  F00E         	call	_return_to_main	;wreg free
  2143                           
  2144                           ;data.c: 77:                      times_pressed=0;
  2145  000714  6A4F               	clrf	_times_pressed^0,c
  2146                           
  2147                           ;data.c: 78:                      key_data=0;
  2148  000716  6A25               	clrf	_key_data^0,c
  2149                           
  2150                           ;data.c: 79:                      state_data=0;
  2151  000718  6A26               	clrf	_state_data^0,c
  2152                           
  2153                           ;data.c: 80:                      user_selected=0;
  2154  00071A  6A4D               	clrf	_user_selected^0,c
  2155                           
  2156                           ;data.c: 81:                 }else if(key_data=='2'){
  2157  00071C  0012               	return	
  2158  00071E                     l7954:
  2159  00071E  0E32               	movlw	50
  2160  000720  1825               	xorwf	_key_data^0,w,c
  2161  000722  E10F               	bnz	l7968
  2162                           
  2163                           ;data.c: 82:                     fila=UpDownUsers(fila);
  2164  000724  5027               	movf	_fila^0,w,c
  2165  000726  ECD1  F00E         	call	_UpDownUsers
  2166  00072A  6E27               	movwf	_fila^0,c
  2167                           
  2168                           ;data.c: 84:                     sub_opt=0;
  2169  00072C  0628               	decf	_num_users@TData$F1605^0,f,c
  2170                           
  2171                           ;data.c: 85:                     rowi=2;
  2172  00072E  0E02               	movlw	2
  2173  000730  6E50               	movwf	_rowi^0,c
  2174                           
  2175                           ;data.c: 86:                     if(num_users==-2){
  2176  000732  0EFE               	movlw	254
  2177  000734  1828               	xorwf	_num_users@TData$F1605^0,w,c
  2178  000736  E102               	bnz	l7966
  2179                           
  2180                           ;data.c: 87:                         num_users=total_users-1;
  2181  000738  0452               	decf	_total_users^0,w,c
  2182  00073A  6E28               	movwf	_num_users@TData$F1605^0,c
  2183  00073C                     l7966:
  2184                           
  2185                           ;data.c: 89:                     state_data=1;
  2186  00073C  0E01               	movlw	1
  2187  00073E  6E26               	movwf	_state_data^0,c
  2188                           
  2189                           ;data.c: 90:                 }
  2190  000740  0C01               	retlw	1
  2191  000742                     l7968:
  2192  000742  0E38               	movlw	56
  2193  000744  1825               	xorwf	_key_data^0,w,c
  2194  000746  E117               	bnz	l7982
  2195                           
  2196                           ;data.c: 92:                      fila=UpDownUsers(fila);
  2197  000748  5027               	movf	_fila^0,w,c
  2198  00074A  ECD1  F00E         	call	_UpDownUsers
  2199  00074E  6E27               	movwf	_fila^0,c
  2200                           
  2201                           ;data.c: 94:                      sub_opt=1;
  2202  000750  2A28               	incf	_num_users@TData$F1605^0,f,c
  2203                           
  2204                           ;data.c: 95:                      rowi=2;
  2205  000752  0E02               	movlw	2
  2206  000754  6E50               	movwf	_rowi^0,c
  2207                           
  2208                           ;data.c: 96:                       if(num_users==total_users){
  2209  000756  5052               	movf	_total_users^0,w,c
  2210  000758  6E70               	movwf	??_motor_data^0,c
  2211  00075A  6A71               	clrf	(??_motor_data+1)^0,c
  2212  00075C  C028  F072         	movff	_num_users@TData$F1605,??_motor_data+2
  2213  000760  6A73               	clrf	(??_motor_data+3)^0,c
  2214  000762  BE72               	btfsc	(??_motor_data+2)^0,7,c
  2215  000764  0673               	decf	(??_motor_data+3)^0,f,c
  2216  000766  5070               	movf	??_motor_data^0,w,c
  2217  000768  1872               	xorwf	(??_motor_data+2)^0,w,c
  2218  00076A  E1E8               	bnz	l7966
  2219  00076C  5071               	movf	(??_motor_data+1)^0,w,c
  2220  00076E  1873               	xorwf	(??_motor_data+3)^0,w,c
  2221  000770  E1E5               	bnz	l7966
  2222                           
  2223                           ;data.c: 97:                             num_users=0;
  2224  000772  6A28               	clrf	_num_users@TData$F1605^0,c
  2225  000774  D7E3               	goto	l7966
  2226  000776                     l7982:
  2227  000776  0E2A               	movlw	42
  2228  000778  1825               	xorwf	_key_data^0,w,c
  2229  00077A  A4D8               	btfss	status,2,c
  2230  00077C  0012               	return	
  2231                           
  2232                           ;data.c: 104:                      if(times_pressed==11){
  2233  00077E  0E0B               	movlw	11
  2234  000780  184F               	xorwf	_times_pressed^0,w,c
  2235  000782  E103               	bnz	l7990
  2236                           
  2237                           ;data.c: 105:                          start();
  2238  000784  ECF2  F00E         	call	_start	;wreg free
  2239                           
  2240                           ;data.c: 106:                          key_data=0;
  2241  000788  6A25               	clrf	_key_data^0,c
  2242  00078A                     l7990:
  2243  00078A  0E10               	movlw	16
  2244  00078C  184F               	xorwf	_times_pressed^0,w,c
  2245  00078E  E102               	bnz	l7994
  2246                           
  2247                           ;data.c: 109:                          times_pressed=9;
  2248  000790  0E09               	movlw	9
  2249  000792  6E4F               	movwf	_times_pressed^0,c
  2250  000794                     l7994:
  2251                           
  2252                           ;data.c: 111:                      return_to_main();
  2253  000794  ECE7  F00E         	call	_return_to_main	;wreg free
  2254                           
  2255                           ;data.c: 112:                      state_data=0;
  2256  000798  6A26               	clrf	_state_data^0,c
  2257  00079A  0012               	return	
  2258  00079C                     l7998:
  2259                           
  2260                           ;data.c: 121:             if(num_users<=total_users){
  2261  00079C  5052               	movf	_total_users^0,w,c
  2262  00079E  BE28               	btfsc	_num_users@TData$F1605^0,7,c
  2263  0007A0  D003               	goto	u8670
  2264  0007A2  0AFF               	xorlw	255
  2265  0007A4  2428               	addwf	_num_users@TData$F1605^0,w,c
  2266  0007A6  E212               	bc	l8004
  2267  0007A8                     u8670:
  2268                           
  2269                           ;data.c: 122:                 users[num_users]=users[num_users+1];
  2270  0007A8  D84C               	call	PL36	;call to abstracted procedure
  2271  0007AA  ECB2  F00D         	call	___wmul	;wreg free
  2272  0007AE  0EE5               	movlw	low (_users+14)
  2273  0007B0  245B               	addwf	?___wmul^0,w,c
  2274  0007B2  6ED9               	movwf	fsr2l,c
  2275  0007B4  0E00               	movlw	high (_users+14)
  2276  0007B6  205C               	addwfc	(?___wmul+1)^0,w,c
  2277  0007B8  6EDA               	movwf	fsr2h,c
  2278  0007BA  5028               	movf	_num_users@TData$F1605^0,w,c
  2279  0007BC  EC05  F009         	call	PL28	;call to abstracted procedure
  2280  0007C0                     u8681:
  2281  0007C0  CFDB FFE3          	movff	plusw2,plusw1
  2282  0007C4  06E8               	decf	wreg,f,c
  2283  0007C6  E2FC               	bc	u8681
  2284                           
  2285                           ;data.c: 123:                 num_users=num_users+1;
  2286  0007C8  2A28               	incf	_num_users@TData$F1605^0,f,c
  2287                           
  2288                           ;data.c: 124:             }else{
  2289  0007CA  0012               	return	
  2290  0007CC                     l8004:
  2291                           
  2292                           ;data.c: 125:                 total_users=total_users-1;
  2293  0007CC  0652               	decf	_total_users^0,f,c
  2294                           
  2295                           ;data.c: 126:                 state_data=0;
  2296  0007CE  6A26               	clrf	_state_data^0,c
  2297                           
  2298                           ;data.c: 127:                 times_pressed=18;
  2299  0007D0  0E12               	movlw	18
  2300  0007D2  6E4F               	movwf	_times_pressed^0,c
  2301  0007D4  0C12               	retlw	18
  2302  0007D6                     l8012:
  2303  0007D6  5026               	movf	_state_data^0,w,c
  2304  0007D8  6E70               	movwf	??_motor_data^0,c
  2305  0007DA  6A71               	clrf	(??_motor_data+1)^0,c
  2306                           
  2307                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2308                           ; Switch size 1, requested type "space"
  2309                           ; Number of cases is 1, Range of values is 0 to 0
  2310                           ; switch strategies available:
  2311                           ; Name         Instructions Cycles
  2312                           ; simple_byte            4     3 (average)
  2313                           ;	Chosen strategy is simple_byte
  2314  0007DC  5071               	movf	(??_motor_data+1)^0,w,c
  2315  0007DE  A4D8               	btfss	status,2,c
  2316  0007E0  0012               	return	
  2317                           
  2318                           ; Switch size 1, requested type "space"
  2319                           ; Number of cases is 6, Range of values is 0 to 5
  2320                           ; switch strategies available:
  2321                           ; Name         Instructions Cycles
  2322                           ; simple_byte           19    10 (average)
  2323                           ;	Chosen strategy is simple_byte
  2324  0007E2  5070               	movf	??_motor_data^0,w,c
  2325  0007E4  E101 D73C          	bz	l7880
  2326  0007E8  0A01               	xorlw	1	; case 1
  2327  0007EA  E101 D74C          	bz	l1191
  2328  0007EE  0A03               	xorlw	3	; case 2
  2329  0007F0  E101 D75F          	bz	l7914
  2330  0007F4  0A01               	xorlw	1	; case 3
  2331  0007F6  E101 D774          	bz	l1197
  2332  0007FA  0A07               	xorlw	7	; case 4
  2333  0007FC  E101 D77B          	bz	l7934
  2334  000800  0A01               	xorlw	1	; case 5
  2335  000802  E0CC               	bz	l7998
  2336  000804  0012               	return		;funcret
  2337  000806                     __end_of_motor_data:
  2338                           	callstack 0
  2339  000806                     PL12:
  2340                           	callstack 21
  2341  000806  2271               	addwfc	(??_motor_data+1)^0,f,c
  2342  000808  5051               	movf	_pointer^0,w,c
  2343  00080A  2470               	addwf	??_motor_data^0,w,c
  2344  00080C  6ED9               	movwf	fsr2l,c
  2345  00080E  0E00               	movlw	0
  2346  000810  2071               	addwfc	(??_motor_data+1)^0,w,c
  2347  000812  6EDA               	movwf	fsr2h,c
  2348  000814  50DF               	movf	indf2,w,c
  2349  000816  0012               	return	
  2350  000818                     __end_ofPL12:
  2351                           	callstack 0
  2352  000818                     PL16:
  2353                           	callstack 21
  2354  000818  6E70               	movwf	??_motor_data^0,c
  2355  00081A  0E00               	movlw	high _users
  2356  00081C  6E71               	movwf	(??_motor_data+1)^0,c
  2357  00081E  0E0E               	movlw	14
  2358  000820  2670               	addwf	??_motor_data^0,f,c
  2359  000822  0E00               	movlw	0
  2360  000824  2271               	addwfc	(??_motor_data+1)^0,f,c
  2361  000826  505B               	movf	?___wmul^0,w,c
  2362  000828  2670               	addwf	??_motor_data^0,f,c
  2363  00082A  505C               	movf	(?___wmul+1)^0,w,c
  2364  00082C  0012               	return	
  2365  00082E                     __end_ofPL16:
  2366                           	callstack 0
  2367  00082E                     PL22:
  2368                           	callstack 21
  2369  00082E  5028               	movf	_num_users@TData$F1605^0,w,c
  2370  000830  0D0E               	mullw	14
  2371  000832  0ED7               	movlw	low _users
  2372  000834  6E70               	movwf	??_motor_data^0,c
  2373  000836  0E00               	movlw	high _users
  2374  000838  6E71               	movwf	(??_motor_data+1)^0,c
  2375  00083A  50F3               	movf	243,w,c
  2376  00083C  2670               	addwf	??_motor_data^0,f,c
  2377  00083E  50F4               	movf	244,w,c
  2378  000840  0012               	return	
  2379  000842                     __end_ofPL22:
  2380                           	callstack 0
  2381  000842                     PL36:
  2382                           	callstack 21
  2383  000842  5028               	movf	_num_users@TData$F1605^0,w,c
  2384  000844  6E5B               	movwf	___wmul@multiplier^0,c
  2385  000846  6A5C               	clrf	(___wmul@multiplier+1)^0,c
  2386  000848  BE5B               	btfsc	___wmul@multiplier^0,7,c
  2387  00084A  065C               	decf	(___wmul@multiplier+1)^0,f,c
  2388  00084C  6A5E               	clrf	(___wmul@multiplicand+1)^0,c
  2389  00084E  0E0E               	movlw	14
  2390  000850  6E5D               	movwf	___wmul@multiplicand^0,c
  2391  000852  0C0E               	retlw	14
  2392  000854                     __end_ofPL36:
  2393                           	callstack 0
  2394  000854                     PL112:
  2395                           	callstack 21
  2396  000854  C027  F063         	movff	_fila,LcGotoXY@Row
  2397  000858  5050               	movf	_rowi^0,w,c
  2398  00085A  0012               	return	
  2399  00085C                     __end_ofPL112:
  2400                           	callstack 0
  2401                           
  2402 ;; *************** function ___wmul *****************
  2403 ;; Defined at:
  2404 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\Umul16.c"
  2405 ;; Parameters:    Size  Location     Type
  2406 ;;  multiplier      2    6[COMRAM] unsigned int 
  2407 ;;  multiplicand    2    8[COMRAM] unsigned int 
  2408 ;; Auto vars:     Size  Location     Type
  2409 ;;  product         2   10[COMRAM] unsigned int 
  2410 ;; Return value:  Size  Location     Type
  2411 ;;                  2    6[COMRAM] unsigned int 
  2412 ;; Registers used:
  2413 ;;		wreg, status,2, status,0, prodl, prodh
  2414 ;; Tracked objects:
  2415 ;;		On entry : 0/0
  2416 ;;		On exit  : 0/0
  2417 ;;		Unchanged: 0/0
  2418 ;; Data sizes:     COMRAM   BANK0   BANK1
  2419 ;;      Params:         4       0       0
  2420 ;;      Locals:         2       0       0
  2421 ;;      Temps:          0       0       0
  2422 ;;      Totals:         6       0       0
  2423 ;;Total ram usage:        6 bytes
  2424 ;; Hardware stack levels used: 1
  2425 ;; Hardware stack levels required when called: 3
  2426 ;; This function calls:
  2427 ;;		Nothing
  2428 ;; This function is called by:
  2429 ;;		_motor_data
  2430 ;; This function uses a non-reentrant model
  2431 ;;
  2432                           
  2433                           	psect	text4
  2434  001B64                     __ptext4:
  2435                           	callstack 0
  2436  001B64                     ___wmul:
  2437                           	callstack 26
  2438                           
  2439                           ;incstack = 0
  2440  001B64  505B               	movf	___wmul@multiplier^0,w,c
  2441  001B66  025D               	mulwf	___wmul@multiplicand^0,c
  2442  001B68  CFF3 F05F          	movff	prodl,___wmul@product
  2443  001B6C  CFF4 F060          	movff	prodh,___wmul@product+1
  2444  001B70  505B               	movf	___wmul@multiplier^0,w,c
  2445  001B72  025E               	mulwf	(___wmul@multiplicand+1)^0,c
  2446  001B74  50F3               	movf	243,w,c
  2447  001B76  2660               	addwf	(___wmul@product+1)^0,f,c
  2448  001B78  505C               	movf	(___wmul@multiplier+1)^0,w,c
  2449  001B7A  025D               	mulwf	___wmul@multiplicand^0,c
  2450  001B7C  50F3               	movf	243,w,c
  2451  001B7E  2660               	addwf	(___wmul@product+1)^0,f,c
  2452  001B80  C05F  F05B         	movff	___wmul@product,?___wmul
  2453  001B84  C060  F05C         	movff	___wmul@product+1,?___wmul+1
  2454  001B88  0012               	return		;funcret
  2455  001B8A                     __end_of___wmul:
  2456                           	callstack 0
  2457                           
  2458 ;; *************** function _UpDownUsers *****************
  2459 ;; Defined at:
  2460 ;;		line 163 in file "data.c"
  2461 ;; Parameters:    Size  Location     Type
  2462 ;;  fila            1    wreg     unsigned char 
  2463 ;; Auto vars:     Size  Location     Type
  2464 ;;  fila            1   24[COMRAM] unsigned char 
  2465 ;; Return value:  Size  Location     Type
  2466 ;;                  1    wreg      unsigned char 
  2467 ;; Registers used:
  2468 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2469 ;; Tracked objects:
  2470 ;;		On entry : 0/0
  2471 ;;		On exit  : 0/0
  2472 ;;		Unchanged: 0/0
  2473 ;; Data sizes:     COMRAM   BANK0   BANK1
  2474 ;;      Params:         0       0       0
  2475 ;;      Locals:         1       0       0
  2476 ;;      Temps:          0       0       0
  2477 ;;      Totals:         1       0       0
  2478 ;;Total ram usage:        1 bytes
  2479 ;; Hardware stack levels used: 1
  2480 ;; Hardware stack levels required when called: 8
  2481 ;; This function calls:
  2482 ;;		_LcGotoXY
  2483 ;;		_marqueePlaceArrow
  2484 ;; This function is called by:
  2485 ;;		_motor_data
  2486 ;; This function uses a non-reentrant model
  2487 ;;
  2488                           
  2489                           	psect	text5
  2490  001DA2                     __ptext5:
  2491                           	callstack 0
  2492  001DA2                     _UpDownUsers:
  2493                           	callstack 21
  2494                           
  2495                           ;data.c: 165:     marqueePlaceArrow(fila);
  2496                           
  2497                           ;incstack = 0
  2498  001DA2  0E00               	movlw	0
  2499  001DA4  EC72  F00E         	call	_marqueePlaceArrow
  2500                           
  2501                           ;data.c: 166:     LcGotoXY(2,fila);
  2502  001DA8  6A63               	clrf	LcGotoXY@Row^0,c
  2503  001DAA  0E02               	movlw	2
  2504  001DAC  EC75  F00A         	call	_LcGotoXY
  2505                           
  2506                           ;data.c: 167:     return fila;
  2507  001DB0  0C00               	retlw	0	;funcret
  2508  001DB2                     __end_of_UpDownUsers:
  2509                           	callstack 0
  2510                           
  2511 ;; *************** function _motor_SMS *****************
  2512 ;; Defined at:
  2513 ;;		line 30 in file "SMS.c"
  2514 ;; Parameters:    Size  Location     Type
  2515 ;;  times_presse    2   27[COMRAM] int 
  2516 ;; Auto vars:     Size  Location     Type
  2517 ;;		None
  2518 ;; Return value:  Size  Location     Type
  2519 ;;                  1    wreg      void 
  2520 ;; Registers used:
  2521 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2522 ;; Tracked objects:
  2523 ;;		On entry : 0/0
  2524 ;;		On exit  : 0/0
  2525 ;;		Unchanged: 0/0
  2526 ;; Data sizes:     COMRAM   BANK0   BANK1
  2527 ;;      Params:         2       0       0
  2528 ;;      Locals:         0       0       0
  2529 ;;      Temps:          2       0       0
  2530 ;;      Totals:         4       0       0
  2531 ;;Total ram usage:        4 bytes
  2532 ;; Hardware stack levels used: 1
  2533 ;; Hardware stack levels required when called: 8
  2534 ;; This function calls:
  2535 ;;		_LcClear
  2536 ;;		_LcCursorOff
  2537 ;;		_LcCursorOn
  2538 ;;		_LcGotoXY
  2539 ;;		_LcPutChar
  2540 ;;		_PrintData
  2541 ;;		_SMS_Print
  2542 ;;		_SMS_PrintReset
  2543 ;;		_SMS_Reset
  2544 ;;		_TiGetTics
  2545 ;;		_TiResetTics
  2546 ;;		_getKey
  2547 ;;		_selectChar
  2548 ;;		_start
  2549 ;; This function is called by:
  2550 ;;		_main
  2551 ;; This function uses a non-reentrant model
  2552 ;;
  2553                           
  2554                           	psect	text6
  2555  00038C                     __ptext6:
  2556                           	callstack 0
  2557  00038C                     _motor_SMS:
  2558                           	callstack 22
  2559                           
  2560                           ;SMS.c: 32:     switch(stateSMS){
  2561                           
  2562                           ;incstack = 0
  2563  00038C  D114               	goto	l7872
  2564  00038E                     l7684:
  2565                           
  2566                           ;SMS.c: 34:             if(times_pressed==8){
  2567  00038E  0E08               	movlw	8
  2568  000390  1870               	xorwf	motor_SMS@times_pressed^0,w,c
  2569  000392  1071               	iorwf	(motor_SMS@times_pressed+1)^0,w,c
  2570  000394  E102               	bnz	l7688
  2571                           
  2572                           ;SMS.c: 35:                 num_user=total_users;
  2573  000396  C052  F031         	movff	_total_users,_num_user
  2574  00039A                     l7688:
  2575                           
  2576                           ;SMS.c: 38:             LcCursorOn();
  2577  00039A  ECF7  F00E         	call	_LcCursorOn	;wreg free
  2578                           
  2579                           ;SMS.c: 39:             stateSMS=1;
  2580  00039E  0E01               	movlw	1
  2581  0003A0  6E30               	movwf	_stateSMS^0,c
  2582                           
  2583                           ;SMS.c: 40:             pointer=0;
  2584  0003A2  6A51               	clrf	_pointer^0,c
  2585                           
  2586                           ;SMS.c: 41:             break;
  2587  0003A4  0012               	return	
  2588  0003A6                     l7694:
  2589                           
  2590                           ;SMS.c: 44:             if(times_pressed!=10){
  2591  0003A6  0E0A               	movlw	10
  2592  0003A8  1870               	xorwf	motor_SMS@times_pressed^0,w,c
  2593  0003AA  1071               	iorwf	(motor_SMS@times_pressed+1)^0,w,c
  2594  0003AC  E01E               	bz	l7718
  2595                           
  2596                           ;SMS.c: 45:             LcGotoXY(rowi,0);
  2597  0003AE  6A63               	clrf	LcGotoXY@Row^0,c
  2598  0003B0  5050               	movf	_rowi^0,w,c
  2599  0003B2  EC75  F00A         	call	_LcGotoXY
  2600                           
  2601                           ;SMS.c: 47:             if(times_pressed==8){
  2602  0003B6  0E08               	movlw	8
  2603  0003B8  1870               	xorwf	motor_SMS@times_pressed^0,w,c
  2604  0003BA  1071               	iorwf	(motor_SMS@times_pressed+1)^0,w,c
  2605  0003BC  E10B               	bnz	l7708
  2606                           
  2607                           ;SMS.c: 48:              SMS_Print(new[pointer]);
  2608  0003BE  D946               	call	PL54	;call to abstracted procedure
  2609  0003C0  ECE1  F00E         	call	_SMS_Print
  2610                           
  2611                           ;SMS.c: 50:                 if(new[pointer]=='\0'){
  2612  0003C4  D943               	call	PL54	;call to abstracted procedure
  2613  0003C6  A4D8               	btfss	status,2,c
  2614  0003C8  0012               	return	
  2615  0003CA                     u8140:
  2616                           
  2617                           ;SMS.c: 51:                     SMS_PrintReset();
  2618  0003CA  ECAB  F00E         	call	_SMS_PrintReset	;wreg free
  2619  0003CE                     l7706:
  2620                           
  2621                           ;SMS.c: 52:                     stateSMS=2;
  2622  0003CE  0E02               	movlw	2
  2623  0003D0  6E30               	movwf	_stateSMS^0,c
  2624  0003D2  0C02               	retlw	2
  2625  0003D4                     l7708:
  2626  0003D4  0E07               	movlw	7
  2627  0003D6  1870               	xorwf	motor_SMS@times_pressed^0,w,c
  2628  0003D8  1071               	iorwf	(motor_SMS@times_pressed+1)^0,w,c
  2629  0003DA  A4D8               	btfss	status,2,c
  2630  0003DC  0012               	return	
  2631                           
  2632                           ;SMS.c: 57:                SMS_Print(new2[pointer]);
  2633  0003DE  D92D               	call	PL46	;call to abstracted procedure
  2634  0003E0  ECE1  F00E         	call	_SMS_Print
  2635                           
  2636                           ;SMS.c: 59:                 if(new2[pointer]=='\0'){
  2637  0003E4  D92A               	call	PL46	;call to abstracted procedure
  2638  0003E6  E0F1               	bz	u8140
  2639  0003E8  0012               	return	
  2640  0003EA                     l7718:
  2641                           
  2642                           ;SMS.c: 67:                SMS_Print(enterHour[pointer]);
  2643  0003EA  D91E               	call	PL30	;call to abstracted procedure
  2644  0003EC  ECE1  F00E         	call	_SMS_Print
  2645                           
  2646                           ;SMS.c: 69:                 if(enterHour[pointer]=='('){
  2647  0003F0  D91B               	call	PL30	;call to abstracted procedure
  2648  0003F2  0A28               	xorlw	40
  2649  0003F4  E102               	bnz	l7724
  2650                           
  2651                           ;SMS.c: 70:                     SMS_PrintReset();
  2652  0003F6  EFAB  F00E         	goto	_SMS_PrintReset	;wreg free
  2653  0003FA                     l7724:
  2654  0003FA  D916               	call	PL30	;call to abstracted procedure
  2655  0003FC  E0E8               	bz	l7706
  2656  0003FE  0012               	return	
  2657  000400                     l979:
  2658                           
  2659                           ;SMS.c: 81:                 if((PORTBbits.RB5==1||PORTBbits.RB4==1||PORTBbits.RB3==1)){
  2660  000400  AA81               	btfss	129,5,c	;volatile
  2661  000402  B881               	btfsc	129,4,c	;volatile
  2662  000404  D002               	goto	u8210
  2663  000406  A681               	btfss	129,3,c	;volatile
  2664  000408  D03B               	goto	l980
  2665  00040A                     u8210:
  2666                           
  2667                           ;SMS.c: 83:                     stateSMS=3;
  2668  00040A  0E03               	movlw	3
  2669  00040C  6E30               	movwf	_stateSMS^0,c
  2670                           
  2671                           ;SMS.c: 84:                     if(((key_2!=keyGot)||(TiGetTics(timer_SMS)>=1000))&&!fir
      +                          st&&keyGot!='*'&&keyGot!='#'){
  2672  00040E  5032               	movf	_keyGot^0,w,c
  2673  000410  1834               	xorwf	_key_2^0,w,c
  2674  000412  E10A               	bnz	u8230
  2675  000414  502D               	movf	_timer_SMS^0,w,c
  2676  000416  ECC5  F00D         	call	_TiGetTics
  2677  00041A  BE5C               	btfsc	(?_TiGetTics+1)^0,7,c
  2678  00041C  D02A               	goto	l7762
  2679  00041E  0EE8               	movlw	232
  2680  000420  5C5B               	subwf	?_TiGetTics^0,w,c
  2681  000422  0E03               	movlw	3
  2682  000424  585C               	subwfb	(?_TiGetTics+1)^0,w,c
  2683  000426  E325               	bnc	l7762
  2684  000428                     u8230:
  2685  000428  502E               	movf	_first^0,w,c
  2686  00042A  E123               	bnz	l7762
  2687  00042C  0E2A               	movlw	42
  2688  00042E  1832               	xorwf	_keyGot^0,w,c
  2689  000430  E020               	bz	l7762
  2690  000432  0E23               	movlw	35
  2691  000434  1832               	xorwf	_keyGot^0,w,c
  2692  000436  E01D               	bz	l7762
  2693                           
  2694                           ;SMS.c: 85:                         if(times_pressed==8){
  2695  000438  0E08               	movlw	8
  2696  00043A  1870               	xorwf	motor_SMS@times_pressed^0,w,c
  2697  00043C  1071               	iorwf	(motor_SMS@times_pressed+1)^0,w,c
  2698  00043E  E102               	bnz	l7748
  2699                           
  2700                           ;SMS.c: 86:                             users[num_user].username[digit]=final_key;
  2701  000440  5031               	movf	_num_user^0,w,c
  2702  000442  D005               	goto	L1
  2703  000444                     l7748:
  2704  000444  0E07               	movlw	7
  2705  000446  1870               	xorwf	motor_SMS@times_pressed^0,w,c
  2706  000448  1071               	iorwf	(motor_SMS@times_pressed+1)^0,w,c
  2707  00044A  E109               	bnz	l7752
  2708                           
  2709                           ;SMS.c: 88:                             users[user_selected].username[digit]=final_key;
  2710  00044C  504D               	movf	_user_selected^0,w,c
  2711  00044E                     L1:
  2712  00044E  0D0E               	mullw	14
  2713  000450  0ED7               	movlw	low _users
  2714  000452  6E72               	movwf	??_motor_SMS^0,c
  2715  000454  0E00               	movlw	high _users
  2716  000456  6E73               	movwf	(??_motor_SMS+1)^0,c
  2717  000458  D8D5               	call	PL20	;call to abstracted procedure
  2718  00045A  C033  FFDF         	movff	_final_key,indf2
  2719  00045E                     l7752:
  2720                           
  2721                           ;SMS.c: 90:                         rowi=rowi+1;
  2722  00045E  2A50               	incf	_rowi^0,f,c
  2723                           
  2724                           ;SMS.c: 91:                         digit=digit+1;
  2725  000460  2A4B               	incf	_digit^0,f,c
  2726                           
  2727                           ;SMS.c: 92:                         if(digit==10){
  2728  000462  0E0A               	movlw	10
  2729  000464  184B               	xorwf	_digit^0,w,c
  2730  000466  E102               	bnz	l989
  2731                           
  2732                           ;SMS.c: 93:                             digit=0;
  2733  000468  6A4B               	clrf	_digit^0,c
  2734                           
  2735                           ;SMS.c: 94:                             rowi=0;
  2736  00046A  6A50               	clrf	_rowi^0,c
  2737  00046C                     l989:
  2738                           
  2739                           ;SMS.c: 96:                         key_SMS=0;
  2740  00046C  6A2F               	clrf	_key_SMS^0,c
  2741                           
  2742                           ;SMS.c: 97:                         stateSMS=2;
  2743  00046E  0E02               	movlw	2
  2744  000470  6E30               	movwf	_stateSMS^0,c
  2745  000472                     l7762:
  2746                           
  2747                           ;SMS.c: 99:                     TiResetTics(timer_SMS);
  2748  000472  502D               	movf	_timer_SMS^0,w,c
  2749  000474  EC57  F00E         	call	_TiResetTics
  2750                           
  2751                           ;SMS.c: 100:                     LcGotoXY(rowi,1);
  2752  000478  ECC2  F001         	call	PL114	;call to abstracted procedure
  2753  00047C  EF75  F00A         	goto	_LcGotoXY
  2754  000480                     l980:
  2755                           
  2756                           ;SMS.c: 103:                   key_2=keyGot;
  2757  000480  C032  F034         	movff	_keyGot,_key_2
  2758  000484  0012               	return	
  2759  000486                     l7766:
  2760                           
  2761                           ;SMS.c: 109:             keyGot=selectChar(column,row);
  2762  000486  EC15  F009         	call	PL80	;call to abstracted procedure
  2763  00048A  EC03  F00D         	call	_selectChar
  2764  00048E  6E32               	movwf	_keyGot^0,c
  2765                           
  2766                           ;SMS.c: 110:             if(first){
  2767  000490  502E               	movf	_first^0,w,c
  2768  000492  E003               	bz	l992
  2769                           
  2770                           ;SMS.c: 111:                 key_2=keyGot;
  2771  000494  C032  F034         	movff	_keyGot,_key_2
  2772                           
  2773                           ;SMS.c: 112:                 first=0;
  2774  000498  6A2E               	clrf	_first^0,c
  2775  00049A                     l992:
  2776                           
  2777                           ;SMS.c: 114:             if(!(PORTBbits.RB5==1||PORTBbits.RB4==1||PORTBbits.RB3==1)){
  2778  00049A  AA81               	btfss	129,5,c	;volatile
  2779  00049C  B881               	btfsc	129,4,c	;volatile
  2780  00049E  0012               	return	
  2781  0004A0  B681               	btfsc	129,3,c	;volatile
  2782  0004A2  0012               	return	
  2783                           
  2784                           ;SMS.c: 115:                key_aux=getKey(keyGot);
  2785  0004A4  5032               	movf	_keyGot^0,w,c
  2786  0004A6  EC05  F00C         	call	_getKey
  2787  0004AA  6E35               	movwf	_key_aux^0,c
  2788                           
  2789                           ;SMS.c: 116:                 if(keyGot != '#' && keyGot !='*' ){
  2790  0004AC  0E23               	movlw	35
  2791  0004AE  1832               	xorwf	_keyGot^0,w,c
  2792  0004B0  E047               	bz	l7828
  2793  0004B2  0E2A               	movlw	42
  2794  0004B4  1832               	xorwf	_keyGot^0,w,c
  2795  0004B6  E044               	bz	l7828
  2796                           
  2797                           ;SMS.c: 117:                   if(keyGot !='0' &&keyGot!='1' && times_pressed!=10){
  2798  0004B8  0E30               	movlw	48
  2799  0004BA  1832               	xorwf	_keyGot^0,w,c
  2800  0004BC  E014               	bz	l7798
  2801  0004BE  0E31               	movlw	49
  2802  0004C0  1832               	xorwf	_keyGot^0,w,c
  2803  0004C2  E011               	bz	l7798
  2804  0004C4  0E0A               	movlw	10
  2805  0004C6  1870               	xorwf	motor_SMS@times_pressed^0,w,c
  2806  0004C8  1071               	iorwf	(motor_SMS@times_pressed+1)^0,w,c
  2807  0004CA  E00D               	bz	l7798
  2808                           
  2809                           ;SMS.c: 118:                       final_key=SMS[key_aux][key_SMS];
  2810  0004CC  D887               	call	PL14	;call to abstracted procedure
  2811  0004CE  CFF5 F033          	movff	tablat,_final_key
  2812                           
  2813                           ;SMS.c: 119:                       LcPutChar(final_key);
  2814  0004D2  5033               	movf	_final_key^0,w,c
  2815  0004D4  EC30  F00C         	call	_LcPutChar
  2816                           
  2817                           ;SMS.c: 120:                       key_SMS=key_SMS+1;
  2818  0004D8  2A2F               	incf	_key_SMS^0,f,c
  2819                           
  2820                           ;SMS.c: 121:                     if(SMS[key_aux][key_SMS]=='\0'){
  2821  0004DA  D880               	call	PL14	;call to abstracted procedure
  2822  0004DC  50F5               	movf	tablat,w,c
  2823  0004DE  E001 D776          	bnz	l7706
  2824                           
  2825                           ;SMS.c: 122:                         key_SMS=0;
  2826  0004E2  6A2F               	clrf	_key_SMS^0,c
  2827  0004E4  D774               	goto	l7706
  2828  0004E6                     l7798:
  2829                           
  2830                           ;SMS.c: 126:                      LcPutChar(keyGot);
  2831  0004E6  5032               	movf	_keyGot^0,w,c
  2832  0004E8  EC30  F00C         	call	_LcPutChar
  2833                           
  2834                           ;SMS.c: 127:                      final_key=keyGot;
  2835  0004EC  C032  F033         	movff	_keyGot,_final_key
  2836                           
  2837                           ;SMS.c: 129:                      if(times_pressed==10){
  2838  0004F0  0E0A               	movlw	10
  2839  0004F2  1870               	xorwf	motor_SMS@times_pressed^0,w,c
  2840  0004F4  1071               	iorwf	(motor_SMS@times_pressed+1)^0,w,c
  2841  0004F6  E001 D76A          	bnz	l7706
  2842                           
  2843                           ;SMS.c: 130:                             if(rowi==9){
  2844  0004FA  0E09               	movlw	9
  2845  0004FC  1850               	xorwf	_rowi^0,w,c
  2846  0004FE  E104               	bnz	l7808
  2847                           
  2848                           ;SMS.c: 131:                                 hours[1]= (keyGot-'0');
  2849  000500  5032               	movf	_keyGot^0,w,c
  2850  000502  0FD0               	addlw	208
  2851  000504  6E14               	movwf	(_hours+1)^0,c
  2852                           
  2853                           ;SMS.c: 132:                             }else if(rowi==10){
  2854  000506  D01A               	goto	l1002
  2855  000508                     l7808:
  2856  000508  0E0A               	movlw	10
  2857  00050A  1850               	xorwf	_rowi^0,w,c
  2858  00050C  E10A               	bnz	l7816
  2859                           
  2860                           ;SMS.c: 133:                                 hours[0]= (keyGot-'0');
  2861  00050E  5032               	movf	_keyGot^0,w,c
  2862  000510  0FD0               	addlw	208
  2863  000512  6E13               	movwf	_hours^0,c
  2864                           
  2865                           ;SMS.c: 134:                                 rowi=rowi+1;
  2866  000514  2A50               	incf	_rowi^0,f,c
  2867                           
  2868                           ;SMS.c: 135:                                 PrintData(rowi,1,':',0);
  2869  000516  ECAA  F001         	call	PL62	;call to abstracted procedure
  2870  00051A  5050               	movf	_rowi^0,w,c
  2871  00051C  EC2A  F00E         	call	_PrintData
  2872                           
  2873                           ;SMS.c: 138:                             }else if(rowi==12){
  2874  000520  D00D               	goto	l1002
  2875  000522                     l7816:
  2876  000522  0E0C               	movlw	12
  2877  000524  1850               	xorwf	_rowi^0,w,c
  2878  000526  E104               	bnz	l7820
  2879                           
  2880                           ;SMS.c: 139:                                 minutes[1]=(keyGot-'0');
  2881  000528  5032               	movf	_keyGot^0,w,c
  2882  00052A  0FD0               	addlw	208
  2883  00052C  6E16               	movwf	(_minutes+1)^0,c
  2884                           
  2885                           ;SMS.c: 140:                             }else if(rowi==13){
  2886  00052E  D006               	goto	l1002
  2887  000530                     l7820:
  2888  000530  0E0D               	movlw	13
  2889  000532  1850               	xorwf	_rowi^0,w,c
  2890  000534  E103               	bnz	l1002
  2891                           
  2892                           ;SMS.c: 141:                                 minutes[0]=(keyGot-'0');
  2893  000536  5032               	movf	_keyGot^0,w,c
  2894  000538  0FD0               	addlw	208
  2895  00053A  6E15               	movwf	_minutes^0,c
  2896  00053C                     l1002:
  2897                           
  2898                           ;SMS.c: 143:                             seconds=0;
  2899  00053C  6A4C               	clrf	_seconds^0,c
  2900  00053E  D747               	goto	l7706
  2901  000540                     l7828:
  2902                           
  2903                           ;SMS.c: 150:                     LcCursorOff();
  2904  000540  ECFC  F00E         	call	_LcCursorOff	;wreg free
  2905                           
  2906                           ;SMS.c: 151:                     if(keyGot=='*'){
  2907  000544  0E2A               	movlw	42
  2908  000546  1832               	xorwf	_keyGot^0,w,c
  2909  000548  E12C               	bnz	l7858
  2910                           
  2911                           ;SMS.c: 152:                         if(times_pressed==8){
  2912  00054A  0E08               	movlw	8
  2913  00054C  1870               	xorwf	motor_SMS@times_pressed^0,w,c
  2914  00054E  1071               	iorwf	(motor_SMS@times_pressed+1)^0,w,c
  2915  000550  E10E               	bnz	l7846
  2916                           
  2917                           ;SMS.c: 154:                             users[num_user].username[digit+1]='\0';
  2918  000552  5031               	movf	_num_user^0,w,c
  2919  000554  0D0E               	mullw	14
  2920  000556  0ED7               	movlw	low _users
  2921  000558  D860               	call	PL24	;call to abstracted procedure
  2922  00055A  D854               	call	PL20	;call to abstracted procedure
  2923  00055C  6ADF               	clrf	indf2,c
  2924                           
  2925                           ;SMS.c: 155:                             total_users=total_users+1;
  2926  00055E  2A52               	incf	_total_users^0,f,c
  2927                           
  2928                           ;SMS.c: 156:                             user_selected=num_user;
  2929  000560  C031  F04D         	movff	_num_user,_user_selected
  2930                           
  2931                           ;SMS.c: 157:                             num_user=num_user+1;
  2932  000564  2A31               	incf	_num_user^0,f,c
  2933                           
  2934                           ;SMS.c: 158:                             stateSMS=0;
  2935  000566  6A30               	clrf	_stateSMS^0,c
  2936                           
  2937                           ;SMS.c: 159:                             start();
  2938  000568  ECF2  F00E         	call	_start	;wreg free
  2939                           
  2940                           ;SMS.c: 162:                         }else if(times_pressed==7){
  2941  00056C  D020               	goto	l7866
  2942  00056E                     l7846:
  2943  00056E  0E07               	movlw	7
  2944  000570  1870               	xorwf	motor_SMS@times_pressed^0,w,c
  2945  000572  1071               	iorwf	(motor_SMS@times_pressed+1)^0,w,c
  2946  000574  E109               	bnz	l7852
  2947                           
  2948                           ;SMS.c: 163:                             users[user_selected].username[digit+1]='\0';
  2949  000576  504D               	movf	_user_selected^0,w,c
  2950  000578  0D0E               	mullw	14
  2951  00057A  0ED7               	movlw	low _users
  2952  00057C  D84E               	call	PL24	;call to abstracted procedure
  2953  00057E  D842               	call	PL20	;call to abstracted procedure
  2954  000580  6ADF               	clrf	indf2,c
  2955  000582                     l7850:
  2956                           
  2957                           ;SMS.c: 165:                             stateSMS=1;
  2958  000582  0E01               	movlw	1
  2959  000584  6E30               	movwf	_stateSMS^0,c
  2960                           
  2961                           ;SMS.c: 166:                         }else if(times_pressed==10){
  2962  000586  D013               	goto	l7866
  2963  000588                     l7852:
  2964  000588  0E0A               	movlw	10
  2965  00058A  1870               	xorwf	motor_SMS@times_pressed^0,w,c
  2966  00058C  1071               	iorwf	(motor_SMS@times_pressed+1)^0,w,c
  2967  00058E  E10F               	bnz	l7866
  2968                           
  2969                           ;SMS.c: 167:                             time[3]=hours[1];
  2970  000590  C014  F0BD         	movff	_hours+1,_time+3
  2971                           
  2972                           ;SMS.c: 168:                             time[2]=hours[0];
  2973  000594  C013  F0BC         	movff	_hours,_time+2
  2974                           
  2975                           ;SMS.c: 169:                             time[1]=minutes[1];
  2976  000598  C016  F0BB         	movff	_minutes+1,_time+1
  2977                           
  2978                           ;SMS.c: 170:                             time[0]=minutes[0];
  2979  00059C  C015  F0BA         	movff	_minutes,_time
  2980  0005A0  D7F0               	goto	l7850
  2981  0005A2                     l7858:
  2982  0005A2  0E23               	movlw	35
  2983  0005A4  1832               	xorwf	_keyGot^0,w,c
  2984  0005A6  E103               	bnz	l7866
  2985                           
  2986                           ;SMS.c: 175:                         LcClear();
  2987  0005A8  EC8A  F00E         	call	_LcClear	;wreg free
  2988                           
  2989                           ;SMS.c: 177:                         stateSMS=0;
  2990  0005AC  6A30               	clrf	_stateSMS^0,c
  2991  0005AE                     l7866:
  2992                           
  2993                           ;SMS.c: 179:                     SMS_Reset();
  2994  0005AE  ECD9  F00E         	call	_SMS_Reset	;wreg free
  2995  0005B2  EFAB  F00E         	goto	_SMS_PrintReset
  2996  0005B6                     l7872:
  2997  0005B6  5030               	movf	_stateSMS^0,w,c
  2998  0005B8  6E72               	movwf	??_motor_SMS^0,c
  2999  0005BA  6A73               	clrf	(??_motor_SMS+1)^0,c
  3000                           
  3001                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3002                           ; Switch size 1, requested type "space"
  3003                           ; Number of cases is 1, Range of values is 0 to 0
  3004                           ; switch strategies available:
  3005                           ; Name         Instructions Cycles
  3006                           ; simple_byte            4     3 (average)
  3007                           ;	Chosen strategy is simple_byte
  3008  0005BC  5073               	movf	(??_motor_SMS+1)^0,w,c
  3009  0005BE  A4D8               	btfss	status,2,c
  3010  0005C0  0012               	return	
  3011                           
  3012                           ; Switch size 1, requested type "space"
  3013                           ; Number of cases is 4, Range of values is 0 to 3
  3014                           ; switch strategies available:
  3015                           ; Name         Instructions Cycles
  3016                           ; simple_byte           13     7 (average)
  3017                           ;	Chosen strategy is simple_byte
  3018  0005C2  5072               	movf	??_motor_SMS^0,w,c
  3019  0005C4  E101 D6E3          	bz	l7684
  3020  0005C8  0A01               	xorlw	1	; case 1
  3021  0005CA  E101 D6EC          	bz	l7694
  3022  0005CE  0A03               	xorlw	3	; case 2
  3023  0005D0  E101 D716          	bz	l979
  3024  0005D4  0A01               	xorlw	1	; case 3
  3025  0005D6  E101 D756          	bz	l7766
  3026  0005DA  0012               	return		;funcret
  3027  0005DC                     __end_of_motor_SMS:
  3028                           	callstack 0
  3029  0005DC                     PL14:
  3030                           	callstack 22
  3031  0005DC  5035               	movf	_key_aux^0,w,c
  3032  0005DE  0D07               	mullw	7
  3033  0005E0  0E41               	movlw	low _SMS
  3034  0005E2  6E72               	movwf	??_motor_SMS^0,c
  3035  0005E4  0E1F               	movlw	high _SMS
  3036  0005E6  6E73               	movwf	(??_motor_SMS+1)^0,c
  3037  0005E8  50F3               	movf	243,w,c
  3038  0005EA  2672               	addwf	??_motor_SMS^0,f,c
  3039  0005EC  50F4               	movf	244,w,c
  3040  0005EE  2273               	addwfc	(??_motor_SMS+1)^0,f,c
  3041  0005F0  502F               	movf	_key_SMS^0,w,c
  3042  0005F2  2672               	addwf	??_motor_SMS^0,f,c
  3043  0005F4  0E00               	movlw	0
  3044  0005F6  2273               	addwfc	(??_motor_SMS+1)^0,f,c
  3045  0005F8  C072  FFF6         	movff	??_motor_SMS,tblptrl
  3046  0005FC  C073  FFF7         	movff	??_motor_SMS+1,tblptrh
  3047  000600                     	if	0	;tblptru may be non-zero
  3048  000600                     	endif
  3049  000600                     	if	0	;tblptru may be non-zero
  3050  000600                     	endif
  3051  000600  0008               	tblrd		*
  3052  000602  0C00               	retlw	0
  3053  000604                     __end_ofPL14:
  3054                           	callstack 0
  3055  000604                     PL20:
  3056                           	callstack 22
  3057  000604  50F3               	movf	243,w,c
  3058  000606  2672               	addwf	??_motor_SMS^0,f,c
  3059  000608  50F4               	movf	244,w,c
  3060  00060A  2273               	addwfc	(??_motor_SMS+1)^0,f,c
  3061  00060C  504B               	movf	_digit^0,w,c
  3062  00060E  2472               	addwf	??_motor_SMS^0,w,c
  3063  000610  6ED9               	movwf	fsr2l,c
  3064  000612  0E00               	movlw	0
  3065  000614  2073               	addwfc	(??_motor_SMS+1)^0,w,c
  3066  000616  6EDA               	movwf	fsr2h,c
  3067  000618  0012               	return	
  3068  00061A                     __end_ofPL20:
  3069                           	callstack 0
  3070  00061A                     PL24:
  3071                           	callstack 22
  3072  00061A  6E72               	movwf	??_motor_SMS^0,c
  3073  00061C  0E00               	movlw	high _users
  3074  00061E  6E73               	movwf	(??_motor_SMS+1)^0,c
  3075  000620  2A72               	incf	??_motor_SMS^0,f,c
  3076  000622  0E00               	movlw	0
  3077  000624  2273               	addwfc	(??_motor_SMS+1)^0,f,c
  3078  000626  0C00               	retlw	0
  3079  000628                     __end_ofPL24:
  3080                           	callstack 0
  3081  000628                     PL30:
  3082                           	callstack 22
  3083  000628  0E79               	movlw	low _enterHour
  3084  00062A  2451               	addwf	_pointer^0,w,c
  3085  00062C  6EF6               	movwf	tblptrl,c
  3086  00062E  6AF7               	clrf	tblptrh,c
  3087  000630  0E1F               	movlw	high _enterHour
  3088  000632  22F7               	addwfc	tblptrh,f,c
  3089  000634                     	if	0	;There are less than 3 active tblptr bytes
  3090  000634                     	endif
  3091  000634  0008               	tblrd		*
  3092  000636  50F5               	movf	tablat,w,c
  3093  000638  0012               	return	
  3094  00063A                     __end_ofPL30:
  3095                           	callstack 0
  3096  00063A                     PL46:
  3097                           	callstack 22
  3098  00063A  0E92               	movlw	low _new2
  3099  00063C  2451               	addwf	_pointer^0,w,c
  3100  00063E  6EF6               	movwf	tblptrl,c
  3101  000640  6AF7               	clrf	tblptrh,c
  3102  000642  0E1F               	movlw	high _new2
  3103  000644  22F7               	addwfc	tblptrh,f,c
  3104  000646                     	if	0	;There are less than 3 active tblptr bytes
  3105  000646                     	endif
  3106  000646  0008               	tblrd		*
  3107  000648  50F5               	movf	tablat,w,c
  3108  00064A  0012               	return	
  3109  00064C                     __end_ofPL46:
  3110                           	callstack 0
  3111  00064C                     PL54:
  3112                           	callstack 22
  3113  00064C  0EA7               	movlw	low _new
  3114  00064E  2451               	addwf	_pointer^0,w,c
  3115  000650  6EF6               	movwf	tblptrl,c
  3116  000652  6AF7               	clrf	tblptrh,c
  3117  000654  0E1F               	movlw	high _new
  3118  000656  22F7               	addwfc	tblptrh,f,c
  3119  000658                     	if	0	;There are less than 3 active tblptr bytes
  3120  000658                     	endif
  3121  000658  0008               	tblrd		*
  3122  00065A  50F5               	movf	tablat,w,c
  3123  00065C  0012               	return	
  3124  00065E                     __end_ofPL54:
  3125                           	callstack 0
  3126                           
  3127 ;; *************** function _start *****************
  3128 ;; Defined at:
  3129 ;;		line 169 in file "data.c"
  3130 ;; Parameters:    Size  Location     Type
  3131 ;;		None
  3132 ;; Auto vars:     Size  Location     Type
  3133 ;;		None
  3134 ;; Return value:  Size  Location     Type
  3135 ;;                  1    wreg      void 
  3136 ;; Registers used:
  3137 ;;		wreg, status,2
  3138 ;; Tracked objects:
  3139 ;;		On entry : 0/0
  3140 ;;		On exit  : 0/0
  3141 ;;		Unchanged: 0/0
  3142 ;; Data sizes:     COMRAM   BANK0   BANK1
  3143 ;;      Params:         0       0       0
  3144 ;;      Locals:         0       0       0
  3145 ;;      Temps:          0       0       0
  3146 ;;      Totals:         0       0       0
  3147 ;;Total ram usage:        0 bytes
  3148 ;; Hardware stack levels used: 1
  3149 ;; Hardware stack levels required when called: 3
  3150 ;; This function calls:
  3151 ;;		Nothing
  3152 ;; This function is called by:
  3153 ;;		_motor_SMS
  3154 ;;		_motor_data
  3155 ;; This function uses a non-reentrant model
  3156 ;;
  3157                           
  3158                           	psect	text7
  3159  001DE4                     __ptext7:
  3160                           	callstack 0
  3161  001DE4                     _start:
  3162                           	callstack 26
  3163                           
  3164                           ;data.c: 170:     startGame = 'Y';
  3165                           
  3166                           ;incstack = 0
  3167  001DE4  0E59               	movlw	89
  3168  001DE6  6E4E               	movwf	_startGame^0,c
  3169                           
  3170                           ;data.c: 171:     times_pressed=15;
  3171  001DE8  0E0F               	movlw	15
  3172  001DEA  6E4F               	movwf	_times_pressed^0,c
  3173  001DEC  0C0F               	retlw	15	;funcret
  3174  001DEE                     __end_of_start:
  3175                           	callstack 0
  3176                           
  3177 ;; *************** function _getKey *****************
  3178 ;; Defined at:
  3179 ;;		line 191 in file "SMS.c"
  3180 ;; Parameters:    Size  Location     Type
  3181 ;;  key             1    wreg     unsigned char 
  3182 ;; Auto vars:     Size  Location     Type
  3183 ;;  key             1    6[COMRAM] unsigned char 
  3184 ;; Return value:  Size  Location     Type
  3185 ;;                  1    wreg      unsigned char 
  3186 ;; Registers used:
  3187 ;;		wreg, status,2, status,0
  3188 ;; Tracked objects:
  3189 ;;		On entry : 0/0
  3190 ;;		On exit  : 0/0
  3191 ;;		Unchanged: 0/0
  3192 ;; Data sizes:     COMRAM   BANK0   BANK1
  3193 ;;      Params:         0       0       0
  3194 ;;      Locals:         1       0       0
  3195 ;;      Temps:          0       0       0
  3196 ;;      Totals:         1       0       0
  3197 ;;Total ram usage:        1 bytes
  3198 ;; Hardware stack levels used: 1
  3199 ;; Hardware stack levels required when called: 3
  3200 ;; This function calls:
  3201 ;;		Nothing
  3202 ;; This function is called by:
  3203 ;;		_motor_SMS
  3204 ;; This function uses a non-reentrant model
  3205 ;;
  3206                           
  3207                           	psect	text8
  3208  00180A                     __ptext8:
  3209                           	callstack 0
  3210  00180A                     _getKey:
  3211                           	callstack 26
  3212                           
  3213                           ;incstack = 0
  3214                           ;getKey@key stored from wreg
  3215  00180A  6E5B               	movwf	getKey@key^0,c
  3216                           
  3217                           ;SMS.c: 192:     static char key_on=0;;SMS.c: 193:             if(key=='2'){
  3218  00180C  0E32               	movlw	50
  3219  00180E  185B               	xorwf	getKey@key^0,w,c
  3220  001810  E102               	bnz	l4938
  3221                           
  3222                           ;SMS.c: 194:                 key_on=0;
  3223  001812  6A2C               	clrf	getKey@key_on^0,c
  3224                           
  3225                           ;SMS.c: 195:             }else if(key=='3'){
  3226  001814  D023               	goto	l1029
  3227  001816                     l4938:
  3228  001816  0E33               	movlw	51
  3229  001818  185B               	xorwf	getKey@key^0,w,c
  3230  00181A  E102               	bnz	l4942
  3231                           
  3232                           ;SMS.c: 196:                 key_on = 1;
  3233  00181C  0E01               	movlw	1
  3234  00181E  D01D               	goto	L7
  3235  001820                     l4942:
  3236  001820  0E34               	movlw	52
  3237  001822  185B               	xorwf	getKey@key^0,w,c
  3238  001824  E102               	bnz	l4946
  3239                           
  3240                           ;SMS.c: 198:                 key_on = 2;
  3241  001826  0E02               	movlw	2
  3242  001828  D018               	goto	L7
  3243  00182A                     l4946:
  3244  00182A  0E35               	movlw	53
  3245  00182C  185B               	xorwf	getKey@key^0,w,c
  3246  00182E  E102               	bnz	l4950
  3247                           
  3248                           ;SMS.c: 200:                 key_on = 3;
  3249  001830  0E03               	movlw	3
  3250  001832  D013               	goto	L7
  3251  001834                     l4950:
  3252  001834  0E36               	movlw	54
  3253  001836  185B               	xorwf	getKey@key^0,w,c
  3254  001838  E102               	bnz	l4954
  3255                           
  3256                           ;SMS.c: 202:                 key_on = 4;
  3257  00183A  0E04               	movlw	4
  3258  00183C  D00E               	goto	L7
  3259  00183E                     l4954:
  3260  00183E  0E37               	movlw	55
  3261  001840  185B               	xorwf	getKey@key^0,w,c
  3262  001842  E102               	bnz	l4958
  3263                           
  3264                           ;SMS.c: 204:                 key_on = 5;
  3265  001844  0E05               	movlw	5
  3266  001846  D009               	goto	L7
  3267  001848                     l4958:
  3268  001848  0E38               	movlw	56
  3269  00184A  185B               	xorwf	getKey@key^0,w,c
  3270  00184C  E102               	bnz	l4962
  3271                           
  3272                           ;SMS.c: 206:                 key_on = 6;
  3273  00184E  0E06               	movlw	6
  3274  001850  D004               	goto	L7
  3275  001852                     l4962:
  3276  001852  0E39               	movlw	57
  3277  001854  185B               	xorwf	getKey@key^0,w,c
  3278  001856  E102               	bnz	l1029
  3279                           
  3280                           ;SMS.c: 208:                 key_on = 7;
  3281  001858  0E07               	movlw	7
  3282  00185A                     L7:
  3283  00185A  6E2C               	movwf	getKey@key_on^0,c
  3284  00185C                     l1029:
  3285                           
  3286                           ;SMS.c: 210:         return key_on;
  3287  00185C  502C               	movf	getKey@key_on^0,w,c
  3288  00185E  0012               	return		;funcret
  3289  001860                     __end_of_getKey:
  3290                           	callstack 0
  3291                           
  3292 ;; *************** function _SMS_PrintReset *****************
  3293 ;; Defined at:
  3294 ;;		line 213 in file "SMS.c"
  3295 ;; Parameters:    Size  Location     Type
  3296 ;;		None
  3297 ;; Auto vars:     Size  Location     Type
  3298 ;;		None
  3299 ;; Return value:  Size  Location     Type
  3300 ;;                  1    wreg      void 
  3301 ;; Registers used:
  3302 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3303 ;; Tracked objects:
  3304 ;;		On entry : 0/0
  3305 ;;		On exit  : 0/0
  3306 ;;		Unchanged: 0/0
  3307 ;; Data sizes:     COMRAM   BANK0   BANK1
  3308 ;;      Params:         0       0       0
  3309 ;;      Locals:         0       0       0
  3310 ;;      Temps:          0       0       0
  3311 ;;      Totals:         0       0       0
  3312 ;;Total ram usage:        0 bytes
  3313 ;; Hardware stack levels used: 1
  3314 ;; Hardware stack levels required when called: 6
  3315 ;; This function calls:
  3316 ;;		_LcGotoXY
  3317 ;;		_TiResetTics
  3318 ;; This function is called by:
  3319 ;;		_motor_SMS
  3320 ;; This function uses a non-reentrant model
  3321 ;;
  3322                           
  3323                           	psect	text9
  3324  001D56                     __ptext9:
  3325                           	callstack 0
  3326  001D56                     _SMS_PrintReset:
  3327                           	callstack 23
  3328                           
  3329                           ;SMS.c: 214:     rowi=0;
  3330                           
  3331                           ;incstack = 0
  3332  001D56  6A50               	clrf	_rowi^0,c
  3333                           
  3334                           ;SMS.c: 215:     first=1;
  3335  001D58  0E01               	movlw	1
  3336  001D5A  6E2E               	movwf	_first^0,c
  3337                           
  3338                           ;SMS.c: 216:     LcGotoXY(rowi,1);
  3339  001D5C  6E63               	movwf	LcGotoXY@Row^0,c
  3340  001D5E  5050               	movf	_rowi^0,w,c
  3341  001D60  EC75  F00A         	call	_LcGotoXY
  3342                           
  3343                           ;SMS.c: 217:     TiResetTics(timer_SMS);
  3344  001D64  502D               	movf	_timer_SMS^0,w,c
  3345  001D66  EF57  F00E         	goto	_TiResetTics
  3346  001D6A                     __end_of_SMS_PrintReset:
  3347                           	callstack 0
  3348                           
  3349 ;; *************** function _SMS_Print *****************
  3350 ;; Defined at:
  3351 ;;		line 219 in file "SMS.c"
  3352 ;; Parameters:    Size  Location     Type
  3353 ;;  chari           1    wreg     unsigned char 
  3354 ;; Auto vars:     Size  Location     Type
  3355 ;;  chari           1   23[COMRAM] unsigned char 
  3356 ;; Return value:  Size  Location     Type
  3357 ;;                  1    wreg      void 
  3358 ;; Registers used:
  3359 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3360 ;; Tracked objects:
  3361 ;;		On entry : 0/0
  3362 ;;		On exit  : 0/0
  3363 ;;		Unchanged: 0/0
  3364 ;; Data sizes:     COMRAM   BANK0   BANK1
  3365 ;;      Params:         0       0       0
  3366 ;;      Locals:         1       0       0
  3367 ;;      Temps:          0       0       0
  3368 ;;      Totals:         1       0       0
  3369 ;;Total ram usage:        1 bytes
  3370 ;; Hardware stack levels used: 1
  3371 ;; Hardware stack levels required when called: 7
  3372 ;; This function calls:
  3373 ;;		_LcPutChar
  3374 ;;		_UpdateCursor
  3375 ;; This function is called by:
  3376 ;;		_motor_SMS
  3377 ;; This function uses a non-reentrant model
  3378 ;;
  3379                           
  3380                           	psect	text10
  3381  001DC2                     __ptext10:
  3382                           	callstack 0
  3383  001DC2                     _SMS_Print:
  3384                           	callstack 22
  3385                           
  3386                           ;incstack = 0
  3387                           ;SMS_Print@chari stored from wreg
  3388  001DC2  6E6C               	movwf	SMS_Print@chari^0,c
  3389                           
  3390                           ;SMS.c: 220:     LcPutChar(chari);
  3391  001DC4  506C               	movf	SMS_Print@chari^0,w,c
  3392  001DC6  EC30  F00C         	call	_LcPutChar
  3393                           
  3394                           ;SMS.c: 221:     UpdateCursor();
  3395  001DCA  EF06  F00F         	goto	_UpdateCursor	;wreg free
  3396  001DCE                     __end_of_SMS_Print:
  3397                           	callstack 0
  3398                           
  3399 ;; *************** function _UpdateCursor *****************
  3400 ;; Defined at:
  3401 ;;		line 151 in file "data.c"
  3402 ;; Parameters:    Size  Location     Type
  3403 ;;		None
  3404 ;; Auto vars:     Size  Location     Type
  3405 ;;		None
  3406 ;; Return value:  Size  Location     Type
  3407 ;;                  1    wreg      void 
  3408 ;; Registers used:
  3409 ;;		status,2, status,0
  3410 ;; Tracked objects:
  3411 ;;		On entry : 0/0
  3412 ;;		On exit  : 0/0
  3413 ;;		Unchanged: 0/0
  3414 ;; Data sizes:     COMRAM   BANK0   BANK1
  3415 ;;      Params:         0       0       0
  3416 ;;      Locals:         0       0       0
  3417 ;;      Temps:          0       0       0
  3418 ;;      Totals:         0       0       0
  3419 ;;Total ram usage:        0 bytes
  3420 ;; Hardware stack levels used: 1
  3421 ;; Hardware stack levels required when called: 3
  3422 ;; This function calls:
  3423 ;;		Nothing
  3424 ;; This function is called by:
  3425 ;;		_SMS_Print
  3426 ;;		_motor_data
  3427 ;;		_motor_hour
  3428 ;; This function uses a non-reentrant model
  3429 ;;
  3430                           
  3431                           	psect	text11
  3432  001E0C                     __ptext11:
  3433                           	callstack 0
  3434  001E0C                     _UpdateCursor:
  3435                           	callstack 26
  3436                           
  3437                           ;data.c: 152:     pointer=pointer+1;
  3438                           
  3439                           ;incstack = 0
  3440  001E0C  2A51               	incf	_pointer^0,f,c
  3441                           
  3442                           ;data.c: 153:     rowi=rowi+1;
  3443  001E0E  2A50               	incf	_rowi^0,f,c
  3444  001E10  0012               	return		;funcret
  3445  001E12                     __end_of_UpdateCursor:
  3446                           	callstack 0
  3447                           
  3448 ;; *************** function _LcCursorOn *****************
  3449 ;; Defined at:
  3450 ;;		line 100 in file "LCD.c"
  3451 ;; Parameters:    Size  Location     Type
  3452 ;;		None
  3453 ;; Auto vars:     Size  Location     Type
  3454 ;;		None
  3455 ;; Return value:  Size  Location     Type
  3456 ;;                  1    wreg      void 
  3457 ;; Registers used:
  3458 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3459 ;; Tracked objects:
  3460 ;;		On entry : 0/0
  3461 ;;		On exit  : 0/0
  3462 ;;		Unchanged: 0/0
  3463 ;; Data sizes:     COMRAM   BANK0   BANK1
  3464 ;;      Params:         0       0       0
  3465 ;;      Locals:         0       0       0
  3466 ;;      Temps:          0       0       0
  3467 ;;      Totals:         0       0       0
  3468 ;;Total ram usage:        0 bytes
  3469 ;; Hardware stack levels used: 1
  3470 ;; Hardware stack levels required when called: 5
  3471 ;; This function calls:
  3472 ;;		_CantaIR
  3473 ;;		_WaitForBusy
  3474 ;; This function is called by:
  3475 ;;		_motor_SMS
  3476 ;; This function uses a non-reentrant model
  3477 ;;
  3478                           
  3479                           	psect	text12
  3480  001DEE                     __ptext12:
  3481                           	callstack 0
  3482  001DEE                     _LcCursorOn:
  3483                           	callstack 24
  3484                           
  3485                           ;LCD.c: 103:  WaitForBusy();
  3486                           
  3487                           ;incstack = 0
  3488  001DEE  ECCA  F00C         	call	_WaitForBusy	;wreg free
  3489                           
  3490                           ;LCD.c: 104:  CantaIR(0x08 | 0x04 | 0x02);
  3491  001DF2  0E0E               	movlw	14
  3492  001DF4  EF8A  F00D         	goto	_CantaIR
  3493  001DF8                     __end_of_LcCursorOn:
  3494                           	callstack 0
  3495                           
  3496 ;; *************** function _motorUser *****************
  3497 ;; Defined at:
  3498 ;;		line 12 in file "queueUser.c"
  3499 ;; Parameters:    Size  Location     Type
  3500 ;;		None
  3501 ;; Auto vars:     Size  Location     Type
  3502 ;;		None
  3503 ;; Return value:  Size  Location     Type
  3504 ;;                  1    wreg      void 
  3505 ;; Registers used:
  3506 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3507 ;; Tracked objects:
  3508 ;;		On entry : 0/0
  3509 ;;		On exit  : 0/0
  3510 ;;		Unchanged: 0/0
  3511 ;; Data sizes:     COMRAM   BANK0   BANK1
  3512 ;;      Params:         0       0       0
  3513 ;;      Locals:         0       0       0
  3514 ;;      Temps:          0       7       0
  3515 ;;      Totals:         0       7       0
  3516 ;;Total ram usage:        7 bytes
  3517 ;; Hardware stack levels used: 1
  3518 ;; Hardware stack levels required when called: 10
  3519 ;; This function calls:
  3520 ;;		_DivideScore
  3521 ;;		_marqueeUsers
  3522 ;;		_selectChar
  3523 ;;		_userReset
  3524 ;; This function is called by:
  3525 ;;		_main
  3526 ;; This function uses a non-reentrant model
  3527 ;;
  3528                           
  3529                           	psect	text13
  3530  0010CA                     __ptext13:
  3531                           	callstack 0
  3532  0010CA                     _motorUser:
  3533                           	callstack 20
  3534                           
  3535                           ;queueUser.c: 13:     static unsigned char state_user=0;;queueUser.c: 15:     switch(sta
      +                          te_user){
  3536                           
  3537                           ;incstack = 0
  3538  0010CA  D08B               	goto	l8082
  3539  0010CC                     l8020:
  3540                           
  3541                           ; BSR set to: 0
  3542                           ;queueUser.c: 17:                 if(times_pressed==14){
  3543  0010CC  0E0E               	movlw	14
  3544  0010CE  184F               	xorwf	_times_pressed^0,w,c
  3545  0010D0  E102               	bnz	l8024
  3546                           
  3547                           ; BSR set to: 0
  3548                           ;queueUser.c: 18:                 state_user=1;
  3549  0010D2  0E01               	movlw	1
  3550  0010D4  D006               	goto	L8
  3551  0010D6                     l8024:
  3552                           
  3553                           ; BSR set to: 0
  3554  0010D6  0E0D               	movlw	13
  3555  0010D8  184F               	xorwf	_times_pressed^0,w,c
  3556  0010DA  E002 EF7E  F00E    	bnz	_userReset
  3557                           
  3558                           ; BSR set to: 0
  3559                           ;queueUser.c: 20:                     state_user=3;
  3560  0010E0  0E03               	movlw	3
  3561  0010E2                     L8:
  3562  0010E2  6FC4               	movwf	motorUser@state_user& (0+255),b
  3563                           
  3564                           ; BSR set to: 0
  3565                           ;queueUser.c: 22:                 userReset();
  3566  0010E4  EF7E  F00E         	goto	_userReset	;wreg free
  3567  0010E8                     l8030:
  3568                           
  3569                           ; BSR set to: 0
  3570                           ;queueUser.c: 25:             DivideScore(users[num_users].score);
  3571  0010E8  501B               	movf	_num_users@TData$F2161^0,w,c
  3572  0010EA  EC7C  F001         	call	PL10	;call to abstracted procedure
  3573  0010EE  CFDE F065          	movff	postinc2,DivideScore@score
  3574  0010F2  CFDD F066          	movff	postdec2,DivideScore@score+1
  3575  0010F6  EC1B  F00D         	call	_DivideScore	;wreg free
  3576                           
  3577                           ;queueUser.c: 26:             if((PORTBbits.RB5==1||PORTBbits.RB4==1||PORTBbits.RB3==1))
      +                          {
  3578  0010FA  AA81               	btfss	129,5,c	;volatile
  3579  0010FC  B881               	btfsc	129,4,c	;volatile
  3580  0010FE  D002               	goto	u8730
  3581  001100  A681               	btfss	129,3,c	;volatile
  3582  001102  D004               	goto	l8040
  3583  001104                     u8730:
  3584                           
  3585                           ;queueUser.c: 27:                 state_user=2;
  3586  001104  0E02               	movlw	2
  3587  001106  0100               	movlb	0	; () banked
  3588  001108  6FC4               	movwf	motorUser@state_user& (0+255),b
  3589                           
  3590                           ;queueUser.c: 28:             }else{
  3591  00110A  0C02               	retlw	2
  3592  00110C                     l8040:
  3593                           
  3594                           ;queueUser.c: 30:                 marqueeUsers(times_pressed);
  3595  00110C  504F               	movf	_times_pressed^0,w,c
  3596  00110E  EF0A  F006         	goto	_marqueeUsers
  3597  001112                     l8042:
  3598                           
  3599                           ; BSR set to: 0
  3600                           ;queueUser.c: 37:             key_user=selectChar(column,row);
  3601  001112  D88B               	call	PL80	;call to abstracted procedure
  3602  001114  EC03  F00D         	call	_selectChar
  3603  001118  0100               	movlb	0	; () banked
  3604  00111A  6FC5               	movwf	_key_user& (0+255),b
  3605                           
  3606                           ; BSR set to: 0
  3607                           ;queueUser.c: 38:             if(!(PORTBbits.RB5==1||PORTBbits.RB4==1||PORTBbits.RB3==1)
      +                          ){
  3608  00111C  AA81               	btfss	129,5,c	;volatile
  3609                           
  3610                           ; BSR set to: 0
  3611  00111E  B881               	btfsc	129,4,c	;volatile
  3612  001120  0012               	return	
  3613                           
  3614                           ; BSR set to: 0
  3615  001122  B681               	btfsc	129,3,c	;volatile
  3616  001124  0012               	return	
  3617                           
  3618                           ; BSR set to: 0
  3619                           ;queueUser.c: 39:                 if(key_user=='#'){
  3620  001126  0E23               	movlw	35
  3621  001128  19C5               	xorwf	_key_user& (0+255),w,b
  3622  00112A  E103               	bnz	l8054
  3623                           
  3624                           ; BSR set to: 0
  3625                           ;queueUser.c: 40:                     state_user=0;
  3626  00112C  6BC4               	clrf	motorUser@state_user& (0+255),b
  3627                           
  3628                           ;queueUser.c: 41:                     times_pressed=0;
  3629  00112E  6A4F               	clrf	_times_pressed^0,c
  3630                           
  3631                           ;queueUser.c: 43:                 }else{
  3632  001130  0012               	return	
  3633  001132                     l8054:
  3634                           
  3635                           ; BSR set to: 0
  3636                           ;queueUser.c: 44:                     state_user=1;
  3637  001132  0E01               	movlw	1
  3638  001134  6FC4               	movwf	motorUser@state_user& (0+255),b
  3639  001136  0C01               	retlw	1
  3640  001138                     l8056:
  3641                           
  3642                           ; BSR set to: 0
  3643                           ;queueUser.c: 50:             if(m<(total_users-1)){
  3644  001138  69D0               	setf	??_motorUser& (0+255),b
  3645  00113A  69D1               	setf	(??_motorUser+1)& (0+255),b
  3646  00113C  5052               	movf	_total_users^0,w,c
  3647  00113E  6FD2               	movwf	(??_motorUser+2)& (0+255),b
  3648  001140  6BD3               	clrf	(??_motorUser+3)& (0+255),b
  3649  001142  51D0               	movf	??_motorUser& (0+255),w,b
  3650  001144  27D2               	addwf	(??_motorUser+2)& (0+255),f,b
  3651  001146  51D1               	movf	(??_motorUser+1)& (0+255),w,b
  3652  001148  23D3               	addwfc	(??_motorUser+3)& (0+255),f,b
  3653  00114A  501A               	movf	_m@queueUser$F2168^0,w,c
  3654  00114C  6FD4               	movwf	(??_motorUser+4)& (0+255),b
  3655  00114E  6BD5               	clrf	(??_motorUser+5)& (0+255),b
  3656  001150  51D2               	movf	(??_motorUser+2)& (0+255),w,b
  3657  001152  5DD4               	subwf	(??_motorUser+4)& (0+255),w,b
  3658  001154  51D5               	movf	(??_motorUser+5)& (0+255),w,b
  3659  001156  0A80               	xorlw	128
  3660  001158  6FD6               	movwf	(??_motorUser+6)& (0+255),b
  3661  00115A  51D3               	movf	(??_motorUser+3)& (0+255),w,b
  3662  00115C  0A80               	xorlw	128
  3663  00115E  59D6               	subwfb	(??_motorUser+6)& (0+255),w,b
  3664  001160  E205               	bc	l8062
  3665                           
  3666                           ; BSR set to: 0
  3667                           ;queueUser.c: 51:                 state_user=4;
  3668  001162  0E04               	movlw	4
  3669  001164  6FC4               	movwf	motorUser@state_user& (0+255),b
  3670                           
  3671                           ; BSR set to: 0
  3672                           ;queueUser.c: 52:                 n=m+1;
  3673  001166  281A               	incf	_m@queueUser$F2168^0,w,c
  3674  001168  6E19               	movwf	_n@queueUser$F2169^0,c
  3675                           
  3676                           ;queueUser.c: 53:             }else{
  3677  00116A  0012               	return	
  3678  00116C                     l8062:
  3679                           
  3680                           ; BSR set to: 0
  3681                           ;queueUser.c: 54:                 state_user=1;
  3682  00116C  0E01               	movlw	1
  3683  00116E  6FC4               	movwf	motorUser@state_user& (0+255),b
  3684                           
  3685                           ; BSR set to: 0
  3686                           ;queueUser.c: 55:                 num_users=0;
  3687  001170  6A1B               	clrf	_num_users@TData$F2161^0,c
  3688                           
  3689                           ; BSR set to: 0
  3690                           ;queueUser.c: 56:                 pointer=0;
  3691  001172  6A51               	clrf	_pointer^0,c
  3692  001174  0012               	return	
  3693  001176                     l8068:
  3694                           
  3695                           ; BSR set to: 0
  3696                           ;queueUser.c: 60:             if(n<total_users){
  3697  001176  5052               	movf	_total_users^0,w,c
  3698  001178  5C19               	subwf	_n@queueUser$F2169^0,w,c
  3699  00117A  E22F               	bc	l8076
  3700                           
  3701                           ; BSR set to: 0
  3702                           ;queueUser.c: 61:                     if(users[n].score > users[m].score){
  3703  00117C  5019               	movf	_n@queueUser$F2169^0,w,c
  3704  00117E  EC7C  F001         	call	PL10	;call to abstracted procedure
  3705  001182  501A               	movf	_m@queueUser$F2168^0,w,c
  3706  001184  0D0E               	mullw	14
  3707  001186  0EE3               	movlw	low (_users+12)
  3708  001188  24F3               	addwf	243,w,c
  3709  00118A  6EE1               	movwf	fsr1l,c
  3710  00118C  0E00               	movlw	high (_users+12)
  3711  00118E  20F4               	addwfc	prodh,w,c
  3712  001190  6EE2               	movwf	fsr1h,c
  3713  001192  50DE               	movf	postinc2,w,c
  3714  001194  5CE6               	subwf	postinc1,w,c
  3715  001196  50E6               	movf	postinc1,w,c
  3716  001198  0A80               	xorlw	128
  3717  00119A  6FD4               	movwf	(??_motorUser+4)& (0+255),b
  3718  00119C  50DE               	movf	postinc2,w,c
  3719  00119E  0A80               	xorlw	128
  3720  0011A0  59D4               	subwfb	(??_motorUser+4)& (0+255),w,b
  3721  0011A2  E219               	bc	l8074
  3722                           
  3723                           ; BSR set to: 0
  3724                           ;queueUser.c: 62:                         auxiliar = users[n];
  3725  0011A4  5019               	movf	_n@queueUser$F2169^0,w,c
  3726  0011A6  D839               	call	PL70	;call to abstracted procedure
  3727  0011A8  EE10  F0A4         	lfsr	1,_auxiliar
  3728  0011AC  0E0D               	movlw	13
  3729  0011AE                     u8811:
  3730  0011AE  CFDB FFE3          	movff	plusw2,plusw1
  3731  0011B2  06E8               	decf	wreg,f,c
  3732  0011B4  E2FC               	bc	u8811
  3733                           
  3734                           ;queueUser.c: 63:                         users[n] = users[m];
  3735  0011B6  501A               	movf	_m@queueUser$F2168^0,w,c
  3736  0011B8  D830               	call	PL70	;call to abstracted procedure
  3737  0011BA  5019               	movf	_n@queueUser$F2169^0,w,c
  3738  0011BC  D826               	call	PL28	;call to abstracted procedure
  3739  0011BE                     u8821:
  3740  0011BE  CFDB FFE3          	movff	plusw2,plusw1
  3741  0011C2  06E8               	decf	wreg,f,c
  3742  0011C4  E2FC               	bc	u8821
  3743                           
  3744                           ;queueUser.c: 64:                         users[m] = auxiliar;
  3745  0011C6  EE20  F0A4         	lfsr	2,_auxiliar
  3746  0011CA  501A               	movf	_m@queueUser$F2168^0,w,c
  3747  0011CC  D81E               	call	PL28	;call to abstracted procedure
  3748  0011CE                     u8831:
  3749  0011CE  CFDB FFE3          	movff	plusw2,plusw1
  3750  0011D2  06E8               	decf	wreg,f,c
  3751  0011D4  E2FC               	bc	u8831
  3752  0011D6                     l8074:
  3753                           
  3754                           ; BSR set to: 0
  3755                           ;queueUser.c: 66:                     n=n+1;
  3756  0011D6  2A19               	incf	_n@queueUser$F2169^0,f,c
  3757                           
  3758                           ;queueUser.c: 67:                 }else{
  3759  0011D8  0012               	return	
  3760  0011DA                     l8076:
  3761                           
  3762                           ; BSR set to: 0
  3763                           ;queueUser.c: 68:                 state_user=3;
  3764  0011DA  0E03               	movlw	3
  3765  0011DC  6FC4               	movwf	motorUser@state_user& (0+255),b
  3766                           
  3767                           ; BSR set to: 0
  3768                           ;queueUser.c: 69:                 m=m+1;
  3769  0011DE  2A1A               	incf	_m@queueUser$F2168^0,f,c
  3770  0011E0  0C03               	retlw	3
  3771  0011E2                     l8082:
  3772  0011E2  0100               	movlb	0	; () banked
  3773  0011E4  51C4               	movf	motorUser@state_user& (0+255),w,b
  3774  0011E6  6FD0               	movwf	??_motorUser& (0+255),b
  3775  0011E8  6BD1               	clrf	(??_motorUser+1)& (0+255),b
  3776                           
  3777                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3778                           ; Switch size 1, requested type "space"
  3779                           ; Number of cases is 1, Range of values is 0 to 0
  3780                           ; switch strategies available:
  3781                           ; Name         Instructions Cycles
  3782                           ; simple_byte            4     3 (average)
  3783                           ;	Chosen strategy is simple_byte
  3784  0011EA  51D1               	movf	(??_motorUser+1)& (0+255),w,b
  3785  0011EC  A4D8               	btfss	status,2,c
  3786  0011EE  0012               	return	
  3787                           
  3788                           ; BSR set to: 0
  3789                           ; Switch size 1, requested type "space"
  3790                           ; Number of cases is 5, Range of values is 0 to 4
  3791                           ; switch strategies available:
  3792                           ; Name         Instructions Cycles
  3793                           ; simple_byte           16     9 (average)
  3794                           ;	Chosen strategy is simple_byte
  3795  0011F0  51D0               	movf	??_motorUser& (0+255),w,b
  3796  0011F2  E101 D76B          	bz	l8020
  3797  0011F6  0A01               	xorlw	1	; case 1
  3798  0011F8  E101 D776          	bz	l8030
  3799  0011FC  0A03               	xorlw	3	; case 2
  3800  0011FE  E089               	bz	l8042
  3801  001200  0A01               	xorlw	1	; case 3
  3802  001202  E09A               	bz	l8056
  3803  001204  0A07               	xorlw	7	; case 4
  3804  001206  E0B7               	bz	l8068
  3805  001208  0012               	return		;funcret
  3806  00120A                     __end_of_motorUser:
  3807                           	callstack 0
  3808  00120A                     PL28:
  3809                           	callstack 20
  3810  00120A  0D0E               	mullw	14
  3811  00120C  0ED7               	movlw	low _users
  3812  00120E  24F3               	addwf	243,w,c
  3813  001210  6EE1               	movwf	fsr1l,c
  3814  001212  0E00               	movlw	high _users
  3815  001214  20F4               	addwfc	prodh,w,c
  3816  001216  6EE2               	movwf	fsr1h,c
  3817  001218  0C0D               	retlw	13
  3818  00121A                     __end_ofPL28:
  3819                           	callstack 0
  3820  00121A                     PL70:
  3821                           	callstack 20
  3822  00121A  0D0E               	mullw	14
  3823  00121C  0ED7               	movlw	low _users
  3824  00121E  24F3               	addwf	243,w,c
  3825  001220  6ED9               	movwf	fsr2l,c
  3826  001222  0E00               	movlw	high _users
  3827  001224  20F4               	addwfc	prodh,w,c
  3828  001226  6EDA               	movwf	fsr2h,c
  3829  001228  0012               	return	
  3830  00122A                     __end_ofPL70:
  3831                           	callstack 0
  3832  00122A                     PL80:
  3833                           	callstack 21
  3834  00122A  C053  F05B         	movff	_row,selectChar@row
  3835  00122E  5054               	movf	_column^0,w,c
  3836  001230  0012               	return	
  3837  001232                     __end_ofPL80:
  3838                           	callstack 0
  3839                           
  3840 ;; *************** function _marqueeUsers *****************
  3841 ;; Defined at:
  3842 ;;		line 76 in file "queueUser.c"
  3843 ;; Parameters:    Size  Location     Type
  3844 ;;  times_presse    1    wreg     unsigned char 
  3845 ;; Auto vars:     Size  Location     Type
  3846 ;;  times_presse    1   34[COMRAM] unsigned char 
  3847 ;; Return value:  Size  Location     Type
  3848 ;;                  1    wreg      void 
  3849 ;; Registers used:
  3850 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3851 ;; Tracked objects:
  3852 ;;		On entry : 0/0
  3853 ;;		On exit  : 0/0
  3854 ;;		Unchanged: 0/0
  3855 ;; Data sizes:     COMRAM   BANK0   BANK1
  3856 ;;      Params:         0       0       0
  3857 ;;      Locals:         1       0       0
  3858 ;;      Temps:          5       0       0
  3859 ;;      Totals:         6       0       0
  3860 ;;Total ram usage:        6 bytes
  3861 ;; Hardware stack levels used: 1
  3862 ;; Hardware stack levels required when called: 9
  3863 ;; This function calls:
  3864 ;;		_LcGotoXY
  3865 ;;		_LcPutChar
  3866 ;;		_PrintData
  3867 ;;		_TiGetTics
  3868 ;;		_TiResetTics
  3869 ;;		_place_char
  3870 ;; This function is called by:
  3871 ;;		_motorUser
  3872 ;; This function uses a non-reentrant model
  3873 ;;
  3874                           
  3875                           	psect	text14
  3876  000C14                     __ptext14:
  3877                           	callstack 0
  3878  000C14                     _marqueeUsers:
  3879                           	callstack 20
  3880                           
  3881                           ;incstack = 0
  3882                           ;marqueeUsers@times_pressed stored from wreg
  3883  000C14  6E77               	movwf	marqueeUsers@times_pressed^0,c
  3884                           
  3885                           ;queueUser.c: 77:                     if(num_users>=total_users){
  3886  000C16  5052               	movf	_total_users^0,w,c
  3887  000C18  6E72               	movwf	??_marqueeUsers^0,c
  3888  000C1A  6A73               	clrf	(??_marqueeUsers+1)^0,c
  3889  000C1C  C01B  F074         	movff	_num_users@TData$F2161,??_marqueeUsers+2
  3890  000C20  6A75               	clrf	(??_marqueeUsers+3)^0,c
  3891  000C22  BE74               	btfsc	(??_marqueeUsers+2)^0,7,c
  3892  000C24  0675               	decf	(??_marqueeUsers+3)^0,f,c
  3893  000C26  5072               	movf	??_marqueeUsers^0,w,c
  3894  000C28  5C74               	subwf	(??_marqueeUsers+2)^0,w,c
  3895  000C2A  5075               	movf	(??_marqueeUsers+3)^0,w,c
  3896  000C2C  0A80               	xorlw	128
  3897  000C2E  6E76               	movwf	(??_marqueeUsers+4)^0,c
  3898  000C30  5073               	movf	(??_marqueeUsers+1)^0,w,c
  3899  000C32  0A80               	xorlw	128
  3900  000C34  5876               	subwfb	(??_marqueeUsers+4)^0,w,c
  3901  000C36  E303               	bnc	l6926
  3902                           
  3903                           ;queueUser.c: 78:                         num_users=0;
  3904  000C38  6A1B               	clrf	_num_users@TData$F2161^0,c
  3905                           
  3906                           ;queueUser.c: 79:                         num_users3=1;
  3907  000C3A  0E01               	movlw	1
  3908  000C3C  6E18               	movwf	_num_users3@queueUser$F2171^0,c
  3909  000C3E                     l6926:
  3910                           
  3911                           ;queueUser.c: 81:         if(j[0]<16){
  3912  000C3E  5009               	movf	_j@marqueeMenu$F2142^0,w,c
  3913  000C40  0A80               	xorlw	128
  3914  000C42  0F70               	addlw	-144
  3915  000C44  E257               	bc	l6948
  3916                           
  3917                           ;queueUser.c: 82:              LcGotoXY(j[0],r[0]);
  3918  000C46  D8B3               	call	PL116	;call to abstracted procedure
  3919  000C48  EC75  F00A         	call	_LcGotoXY
  3920                           
  3921                           ;queueUser.c: 83:             if(TiGetTics(timer_user)>=100){
  3922  000C4C  5017               	movf	_timer_user^0,w,c
  3923  000C4E  ECC5  F00D         	call	_TiGetTics
  3924  000C52  BE5C               	btfsc	(?_TiGetTics+1)^0,7,c
  3925  000C54  D04F               	goto	l6948
  3926  000C56  505C               	movf	(?_TiGetTics+1)^0,w,c
  3927  000C58  E103               	bnz	u6810
  3928  000C5A  0E64               	movlw	100
  3929  000C5C  5C5B               	subwf	?_TiGetTics^0,w,c
  3930  000C5E  E34A               	bnc	l6948
  3931  000C60                     u6810:
  3932                           
  3933                           ;queueUser.c: 84:                 LcGotoXY(j[0],r[0]);
  3934  000C60  D8A6               	call	PL116	;call to abstracted procedure
  3935  000C62  EC75  F00A         	call	_LcGotoXY
  3936                           
  3937                           ;queueUser.c: 85:                 place_char(users[num_users].username[k[0]],0);
  3938  000C66  6A70               	clrf	place_char@row^0,c
  3939  000C68  501B               	movf	_num_users@TData$F2161^0,w,c
  3940  000C6A  D86F               	call	PL26	;call to abstracted procedure
  3941  000C6C  ECFA  F00D         	call	_place_char
  3942                           
  3943                           ;queueUser.c: 86:                 LcGotoXY(j[0],r[1]);
  3944  000C70  C0C3  F063         	movff	_r@marqueeMenu$F2143+1,LcGotoXY@Row
  3945  000C74  5009               	movf	_j@marqueeMenu$F2142^0,w,c
  3946  000C76  EC75  F00A         	call	_LcGotoXY
  3947                           
  3948                           ;queueUser.c: 87:               if(times_pressed==14){
  3949  000C7A  0E0E               	movlw	14
  3950  000C7C  1877               	xorwf	marqueeUsers@times_pressed^0,w,c
  3951  000C7E  E107               	bnz	l6936
  3952                           
  3953                           ;queueUser.c: 88:                   place_char(users[num_users3].username[k[0]],1);
  3954  000C80  0E01               	movlw	1
  3955  000C82  6E70               	movwf	place_char@row^0,c
  3956  000C84  5018               	movf	_num_users3@queueUser$F2171^0,w,c
  3957  000C86  D861               	call	PL26	;call to abstracted procedure
  3958  000C88  ECFA  F00D         	call	_place_char
  3959                           
  3960                           ;queueUser.c: 89:               }else if(times_pressed==13){
  3961  000C8C  D02D               	goto	l1721
  3962  000C8E                     l6936:
  3963  000C8E  0E0D               	movlw	13
  3964  000C90  1877               	xorwf	marqueeUsers@times_pressed^0,w,c
  3965  000C92  E12A               	bnz	l1721
  3966                           
  3967                           ;queueUser.c: 90:                   if(HighScore[k[0]]!='\0'){
  3968  000C94  0EBC               	movlw	low _HighScore@EUSART$F2138
  3969  000C96  0100               	movlb	0	; () banked
  3970  000C98  D870               	call	PL68	;call to abstracted procedure
  3971  000C9A  E005               	bz	l6942
  3972                           
  3973                           ; BSR set to: 0
  3974                           ;queueUser.c: 91:                     LcPutChar(HighScore[k[0]]);
  3975  000C9C  0EBC               	movlw	low _HighScore@EUSART$F2138
  3976  000C9E  D86D               	call	PL68	;call to abstracted procedure
  3977  000CA0  EC30  F00C         	call	_LcPutChar
  3978                           
  3979                           ;queueUser.c: 92:                   }else{
  3980  000CA4  D021               	goto	l1721
  3981  000CA6                     l6942:
  3982                           
  3983                           ; BSR set to: 0
  3984                           ;queueUser.c: 93:                     PrintData(15-i[0],0,' ',0);
  3985  000CA6  6A6C               	clrf	PrintData@f^0,c
  3986  000CA8  0E20               	movlw	32
  3987  000CAA  6E6D               	movwf	PrintData@characters^0,c
  3988  000CAC  6A6E               	clrf	PrintData@yes^0,c
  3989  000CAE  5007               	movf	_i@marqueeMenu$F2144^0,w,c
  3990  000CB0  080F               	sublw	15
  3991  000CB2  EC2A  F00E         	call	_PrintData
  3992                           
  3993                           ;queueUser.c: 94:                             PrintData(11-i[0],1,' ',0);
  3994  000CB6  D85B               	call	PL60	;call to abstracted procedure
  3995  000CB8  5007               	movf	_i@marqueeMenu$F2144^0,w,c
  3996  000CBA  080B               	sublw	11
  3997  000CBC  EC2A  F00E         	call	_PrintData
  3998                           
  3999                           ;queueUser.c: 95:                             PrintData(12-i[0],1,current_score[2],1);
  4000  000CC0  D870               	call	PL90	;call to abstracted procedure
  4001  000CC2  5007               	movf	_i@marqueeMenu$F2144^0,w,c
  4002  000CC4  080C               	sublw	12
  4003  000CC6  EC2A  F00E         	call	_PrintData
  4004                           
  4005                           ;queueUser.c: 96:                             PrintData(13-i[0],1,current_score[1],1);
  4006  000CCA  D865               	call	PL88	;call to abstracted procedure
  4007  000CCC  5007               	movf	_i@marqueeMenu$F2144^0,w,c
  4008  000CCE  080D               	sublw	13
  4009  000CD0  EC2A  F00E         	call	_PrintData
  4010                           
  4011                           ;queueUser.c: 97:                             PrintData(14-i[0],1,current_score[0],1);
  4012  000CD4  D85A               	call	PL84	;call to abstracted procedure
  4013  000CD6  5007               	movf	_i@marqueeMenu$F2144^0,w,c
  4014  000CD8  080E               	sublw	14
  4015  000CDA  EC2A  F00E         	call	_PrintData
  4016                           
  4017                           ;queueUser.c: 98:                             PrintData(15-i[0],1,' ',0);
  4018  000CDE  D847               	call	PL60	;call to abstracted procedure
  4019  000CE0  5007               	movf	_i@marqueeMenu$F2144^0,w,c
  4020  000CE2  080F               	sublw	15
  4021  000CE4  EC2A  F00E         	call	_PrintData
  4022  000CE8                     l1721:
  4023                           
  4024                           ;queueUser.c: 104:                 TiResetTics(timer_user);
  4025  000CE8  5017               	movf	_timer_user^0,w,c
  4026  000CEA  EC57  F00E         	call	_TiResetTics
  4027                           
  4028                           ;queueUser.c: 105:                   j[0]=j[0]+1;
  4029  000CEE  2A09               	incf	_j@marqueeMenu$F2142^0,f,c
  4030                           
  4031                           ;queueUser.c: 106:                   k[0]=k[0]+1;
  4032  000CF0  0100               	movlb	0	; () banked
  4033  000CF2  2BC0               	incf	_k@marqueeMenu$F2145& (0+255),f,b
  4034  000CF4                     l6948:
  4035                           
  4036                           ;queueUser.c: 111:         if(j[0]>=16){
  4037  000CF4  5009               	movf	_j@marqueeMenu$F2142^0,w,c
  4038  000CF6  0A80               	xorlw	128
  4039  000CF8  0F70               	addlw	-144
  4040  000CFA  A0D8               	btfss	status,0,c
  4041  000CFC  0012               	return	
  4042                           
  4043                           ;queueUser.c: 113:             PrintData(j[0],0,' ',0);
  4044  000CFE  6A6C               	clrf	PrintData@f^0,c
  4045  000D00  EC05  F00E         	call	PL82	;call to abstracted procedure
  4046  000D04  EC2A  F00E         	call	_PrintData
  4047                           
  4048                           ;queueUser.c: 114:             PrintData(j[0],1,' ',0);
  4049  000D08  D832               	call	PL60	;call to abstracted procedure
  4050  000D0A  5009               	movf	_j@marqueeMenu$F2142^0,w,c
  4051  000D0C  EC2A  F00E         	call	_PrintData
  4052                           
  4053                           ;queueUser.c: 116:             i[0]=i[0]+1;
  4054  000D10  2A07               	incf	_i@marqueeMenu$F2144^0,f,c
  4055                           
  4056                           ;queueUser.c: 118:             if(i[0]>=16){
  4057  000D12  0E0F               	movlw	15
  4058  000D14  6407               	cpfsgt	_i@marqueeMenu$F2144^0,c
  4059  000D16  D015               	goto	l1726
  4060                           
  4061                           ;queueUser.c: 119:                 if(times_pressed==13){
  4062  000D18  0E0D               	movlw	13
  4063  000D1A  1877               	xorwf	marqueeUsers@times_pressed^0,w,c
  4064  000D1C  E101               	bnz	l6960
  4065  000D1E  D004               	goto	L9
  4066  000D20                     l6960:
  4067  000D20  0E0E               	movlw	14
  4068  000D22  1877               	xorwf	marqueeUsers@times_pressed^0,w,c
  4069  000D24  E103               	bnz	l6964
  4070                           
  4071                           ;queueUser.c: 123:                      num_users3=num_users3+1;
  4072  000D26  2A18               	incf	_num_users3@queueUser$F2171^0,f,c
  4073  000D28                     L9:
  4074                           
  4075                           ;queueUser.c: 124:                      num_users=num_users+1;
  4076  000D28  2A1B               	incf	_num_users@TData$F2161^0,f,c
  4077                           
  4078                           ;queueUser.c: 125:                 }
  4079  000D2A  D008               	goto	l1728
  4080  000D2C                     l6964:
  4081  000D2C  501B               	movf	_num_users@TData$F2161^0,w,c
  4082  000D2E  0A80               	xorlw	128
  4083  000D30  0F7A               	addlw	-134
  4084  000D32  E304               	bnc	l1728
  4085  000D34  0E0D               	movlw	13
  4086  000D36  1877               	xorwf	marqueeUsers@times_pressed^0,w,c
  4087  000D38  E101               	bnz	l1728
  4088                           
  4089                           ;queueUser.c: 127:                    num_users=0;
  4090  000D3A  6A1B               	clrf	_num_users@TData$F2161^0,c
  4091  000D3C                     l1728:
  4092                           
  4093                           ;queueUser.c: 129:                       i[0]=0;
  4094  000D3C  6A07               	clrf	_i@marqueeMenu$F2144^0,c
  4095                           
  4096                           ;queueUser.c: 130:                       k[0]=0;
  4097  000D3E  0100               	movlb	0	; () banked
  4098  000D40  6BC0               	clrf	_k@marqueeMenu$F2145& (0+255),b
  4099  000D42                     l1726:
  4100                           
  4101                           ;queueUser.c: 133:             j[0]=0;
  4102  000D42  6A09               	clrf	_j@marqueeMenu$F2142^0,c
  4103                           
  4104                           ;queueUser.c: 134:             k[0]=i[0];
  4105  000D44  C007  F0C0         	movff	_i@marqueeMenu$F2144,_k@marqueeMenu$F2145
  4106  000D48  0012               	return		;funcret
  4107  000D4A                     __end_of_marqueeUsers:
  4108                           	callstack 0
  4109  000D4A                     PL26:
  4110                           	callstack 20
  4111  000D4A  0D0E               	mullw	14
  4112  000D4C  0ED7               	movlw	low _users
  4113  000D4E  6E72               	movwf	??_marqueeUsers^0,c
  4114  000D50  0E00               	movlw	high _users
  4115  000D52  6E73               	movwf	(??_marqueeUsers+1)^0,c
  4116  000D54  50F3               	movf	243,w,c
  4117  000D56  2672               	addwf	??_marqueeUsers^0,f,c
  4118  000D58  50F4               	movf	244,w,c
  4119  000D5A  2273               	addwfc	(??_marqueeUsers+1)^0,f,c
  4120  000D5C  0100               	movlb	0	; () banked
  4121  000D5E  51C0               	movf	_k@marqueeMenu$F2145& (0+255),w,b
  4122  000D60  2472               	addwf	??_marqueeUsers^0,w,c
  4123  000D62  6ED9               	movwf	fsr2l,c
  4124  000D64  0E00               	movlw	0
  4125  000D66  2073               	addwfc	(??_marqueeUsers+1)^0,w,c
  4126  000D68  6EDA               	movwf	fsr2h,c
  4127  000D6A  50DF               	movf	indf2,w,c
  4128  000D6C  0012               	return	
  4129  000D6E                     __end_ofPL26:
  4130                           	callstack 0
  4131  000D6E                     PL60:
  4132                           	callstack 20
  4133  000D6E  0E01               	movlw	1
  4134  000D70  6E6C               	movwf	PrintData@f^0,c
  4135  000D72  0E20               	movlw	32
  4136  000D74  6E6D               	movwf	PrintData@characters^0,c
  4137  000D76  6A6E               	clrf	PrintData@yes^0,c
  4138  000D78  0C20               	retlw	32
  4139  000D7A                     __end_ofPL60:
  4140                           	callstack 0
  4141  000D7A                     PL68:
  4142                           	callstack 20
  4143  000D7A  25C0               	addwf	_k@marqueeMenu$F2145& (0+255),w,b
  4144  000D7C  6EF6               	movwf	tblptrl,c
  4145  000D7E  6AF7               	clrf	tblptrh,c
  4146  000D80  0E1F               	movlw	high _HighScore@EUSART$F2138
  4147  000D82  22F7               	addwfc	tblptrh,f,c
  4148  000D84                     	if	0	;There are less than 3 active tblptr bytes
  4149  000D84                     	endif
  4150  000D84  0008               	tblrd		*
  4151  000D86  50F5               	movf	tablat,w,c
  4152  000D88  0012               	return	
  4153  000D8A                     __end_ofPL68:
  4154                           	callstack 0
  4155  000D8A                     PL84:
  4156                           	callstack 21
  4157  000D8A  0E01               	movlw	1
  4158  000D8C  6E6C               	movwf	PrintData@f^0,c
  4159  000D8E  C0B2  F06D         	movff	_current_score,PrintData@characters
  4160  000D92  6E6E               	movwf	PrintData@yes^0,c
  4161  000D94  0C01               	retlw	1
  4162  000D96                     __end_ofPL84:
  4163                           	callstack 0
  4164  000D96                     PL88:
  4165                           	callstack 21
  4166  000D96  0E01               	movlw	1
  4167  000D98  6E6C               	movwf	PrintData@f^0,c
  4168  000D9A  C0B4  F06D         	movff	_current_score+2,PrintData@characters
  4169  000D9E  6E6E               	movwf	PrintData@yes^0,c
  4170  000DA0  0C01               	retlw	1
  4171  000DA2                     __end_ofPL88:
  4172                           	callstack 0
  4173  000DA2                     PL90:
  4174                           	callstack 21
  4175  000DA2  0E01               	movlw	1
  4176  000DA4  6E6C               	movwf	PrintData@f^0,c
  4177  000DA6  C0B6  F06D         	movff	_current_score+4,PrintData@characters
  4178  000DAA  6E6E               	movwf	PrintData@yes^0,c
  4179  000DAC  0C01               	retlw	1
  4180  000DAE                     __end_ofPL90:
  4181                           	callstack 0
  4182  000DAE                     PL116:
  4183                           	callstack 20
  4184  000DAE  C0C2  F063         	movff	_r@marqueeMenu$F2143,LcGotoXY@Row
  4185  000DB2  5009               	movf	_j@marqueeMenu$F2142^0,w,c
  4186  000DB4  0012               	return	
  4187  000DB6                     __end_ofPL116:
  4188                           	callstack 0
  4189                           
  4190 ;; *************** function _place_char *****************
  4191 ;; Defined at:
  4192 ;;		line 152 in file "queueUser.c"
  4193 ;; Parameters:    Size  Location     Type
  4194 ;;  character       1    wreg     unsigned char 
  4195 ;;  row             1   27[COMRAM] unsigned char 
  4196 ;; Auto vars:     Size  Location     Type
  4197 ;;  character       1   28[COMRAM] unsigned char 
  4198 ;; Return value:  Size  Location     Type
  4199 ;;                  1    wreg      void 
  4200 ;; Registers used:
  4201 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4202 ;; Tracked objects:
  4203 ;;		On entry : 3F/0
  4204 ;;		On exit  : 0/0
  4205 ;;		Unchanged: 0/0
  4206 ;; Data sizes:     COMRAM   BANK0   BANK1
  4207 ;;      Params:         1       0       0
  4208 ;;      Locals:         1       0       0
  4209 ;;      Temps:          0       0       0
  4210 ;;      Totals:         2       0       0
  4211 ;;Total ram usage:        2 bytes
  4212 ;; Hardware stack levels used: 1
  4213 ;; Hardware stack levels required when called: 8
  4214 ;; This function calls:
  4215 ;;		_LcPutChar
  4216 ;;		_PrintData
  4217 ;; This function is called by:
  4218 ;;		_marqueeUsers
  4219 ;; This function uses a non-reentrant model
  4220 ;;
  4221                           
  4222                           	psect	text15
  4223  001BF4                     __ptext15:
  4224                           	callstack 0
  4225  001BF4                     _place_char:
  4226                           	callstack 20
  4227                           
  4228                           ;incstack = 0
  4229                           ;place_char@character stored from wreg
  4230  001BF4  6E71               	movwf	place_char@character^0,c
  4231                           
  4232                           ;queueUser.c: 153:     if(character!='\0'){
  4233  001BF6  5071               	movf	place_char@character^0,w,c
  4234  001BF8  E003               	bz	l6694
  4235                           
  4236                           ;queueUser.c: 154:          LcPutChar(character);
  4237  001BFA  5071               	movf	place_char@character^0,w,c
  4238  001BFC  EF30  F00C         	goto	_LcPutChar
  4239  001C00                     l6694:
  4240                           
  4241                           ;queueUser.c: 156:        PrintData(j[0],row,' ',0);
  4242  001C00  C070  F06C         	movff	place_char@row,PrintData@f
  4243  001C04  D802               	call	PL82	;call to abstracted procedure
  4244  001C06  EF2A  F00E         	goto	_PrintData
  4245  001C0A                     __end_of_place_char:
  4246                           	callstack 0
  4247  001C0A                     PL82:
  4248                           	callstack 20
  4249  001C0A  0E20               	movlw	32
  4250  001C0C  6E6D               	movwf	PrintData@characters^0,c
  4251  001C0E  6A6E               	clrf	PrintData@yes^0,c
  4252  001C10  5009               	movf	_j@marqueeMenu$F2142^0,w,c
  4253  001C12  0012               	return	
  4254  001C14                     __end_ofPL82:
  4255                           	callstack 0
  4256                           
  4257 ;; *************** function _motorMenu *****************
  4258 ;; Defined at:
  4259 ;;		line 13 in file "menu.c"
  4260 ;; Parameters:    Size  Location     Type
  4261 ;;		None
  4262 ;; Auto vars:     Size  Location     Type
  4263 ;;		None
  4264 ;; Return value:  Size  Location     Type
  4265 ;;                  1    wreg      void 
  4266 ;; Registers used:
  4267 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4268 ;; Tracked objects:
  4269 ;;		On entry : 0/0
  4270 ;;		On exit  : 0/0
  4271 ;;		Unchanged: 0/0
  4272 ;; Data sizes:     COMRAM   BANK0   BANK1
  4273 ;;      Params:         0       0       0
  4274 ;;      Locals:         0       0       0
  4275 ;;      Temps:          2       0       0
  4276 ;;      Totals:         2       0       0
  4277 ;;Total ram usage:        2 bytes
  4278 ;; Hardware stack levels used: 1
  4279 ;; Hardware stack levels required when called: 9
  4280 ;; This function calls:
  4281 ;;		_EusReset
  4282 ;;		_InitMarquee
  4283 ;;		_LcClear
  4284 ;;		_LcCursorOff
  4285 ;;		_MenuDoMarquee
  4286 ;;		_SMS_Reset
  4287 ;;		_menuReset
  4288 ;;		_return_to_main
  4289 ;;		_selectChar
  4290 ;;		_userReset
  4291 ;; This function is called by:
  4292 ;;		_main
  4293 ;; This function uses a non-reentrant model
  4294 ;;
  4295                           
  4296                           	psect	text16
  4297  00085C                     __ptext16:
  4298                           	callstack 0
  4299  00085C                     _motorMenu:
  4300                           	callstack 21
  4301                           
  4302                           ;menu.c: 15:     static unsigned char state_menu=0;;menu.c: 17:     switch(state_menu){
  4303                           
  4304                           ;incstack = 0
  4305  00085C  D0D7               	goto	l7676
  4306  00085E                     l647:
  4307                           
  4308                           ;menu.c: 20:             if(!(PORTBbits.RB5==1||PORTBbits.RB4==1||PORTBbits.RB3==1)){
  4309  00085E  AA81               	btfss	129,5,c	;volatile
  4310  000860  B881               	btfsc	129,4,c	;volatile
  4311  000862  D00D               	goto	l7492
  4312  000864  B681               	btfsc	129,3,c	;volatile
  4313  000866  D00B               	goto	l7492
  4314                           
  4315                           ;menu.c: 21:                 MenuDoMarquee(timer_menu,option3,option4,sub_opt);
  4316  000868  C03C  F06D         	movff	_timer_menu@TData$F1116,MenuDoMarquee@timer
  4317  00086C  6A6E               	clrf	(MenuDoMarquee@timer+1)^0,c
  4318  00086E  C040  F06F         	movff	_option3@marqueeMenu$F1102,MenuDoMarquee@option3
  4319  000872  C03F  F070         	movff	_option4@marqueeMenu$F1103,MenuDoMarquee@option4
  4320  000876  C03E  F071         	movff	_sub_opt@marqueeMenu$F1104,MenuDoMarquee@sub_opt
  4321  00087A  EFDB  F006         	goto	_MenuDoMarquee	;wreg free
  4322  00087E                     l7492:
  4323                           
  4324                           ;menu.c: 24:                 state_menu=1;
  4325  00087E  0E01               	movlw	1
  4326  000880  6E39               	movwf	motorMenu@state_menu^0,c
  4327                           
  4328                           ;menu.c: 25:                 LcClear();
  4329  000882  EC8A  F00E         	call	_LcClear	;wreg free
  4330                           
  4331                           ;menu.c: 26:                 InitMarquee();
  4332  000886  EF95  F00E         	goto	_InitMarquee	;wreg free
  4333  00088A                     l7498:
  4334                           
  4335                           ;menu.c: 31:             keyMenu=selectChar(column,row);
  4336  00088A  EC15  F009         	call	PL80	;call to abstracted procedure
  4337  00088E  EC03  F00D         	call	_selectChar
  4338  000892  6E3A               	movwf	_keyMenu^0,c
  4339                           
  4340                           ;menu.c: 33:                  if(!(PORTBbits.RB5==1||PORTBbits.RB4==1||PORTBbits.RB3==1)
      +                          ){
  4341  000894  AA81               	btfss	129,5,c	;volatile
  4342  000896  B881               	btfsc	129,4,c	;volatile
  4343  000898  0012               	return	
  4344  00089A  B681               	btfsc	129,3,c	;volatile
  4345  00089C  0012               	return	
  4346                           
  4347                           ;menu.c: 34:                     if(keyMenu=='2'){
  4348  00089E  0E32               	movlw	50
  4349  0008A0  183A               	xorwf	_keyMenu^0,w,c
  4350  0008A2  E124               	bnz	l7542
  4351                           
  4352                           ;menu.c: 36:                         if(option3<6&&option4<6){
  4353  0008A4  5040               	movf	_option3@marqueeMenu$F1102^0,w,c
  4354  0008A6  0A80               	xorlw	128
  4355  0008A8  0F7A               	addlw	-134
  4356  0008AA  E206               	bc	l7514
  4357  0008AC  503F               	movf	_option4@marqueeMenu$F1103^0,w,c
  4358  0008AE  0A80               	xorlw	128
  4359  0008B0  0F7A               	addlw	-134
  4360  0008B2  E202               	bc	l7514
  4361                           
  4362                           ;menu.c: 37:                             option3=option3+1;
  4363  0008B4  2A40               	incf	_option3@marqueeMenu$F1102^0,f,c
  4364                           
  4365                           ;menu.c: 38:                             option4=option4+1;
  4366  0008B6  2A3F               	incf	_option4@marqueeMenu$F1103^0,f,c
  4367  0008B8                     l7514:
  4368                           
  4369                           ;menu.c: 41:                         if(option4==6){
  4370  0008B8  0E06               	movlw	6
  4371  0008BA  183F               	xorwf	_option4@marqueeMenu$F1103^0,w,c
  4372  0008BC  E101               	bnz	l7520
  4373                           
  4374                           ;menu.c: 42:                             option3=5;
  4375                           
  4376                           ;menu.c: 43:                             option4=0;
  4377  0008BE  D8BD               	call	PL124	;call to abstracted procedure
  4378  0008C0                     l7520:
  4379                           
  4380                           ;menu.c: 45:                         if(option3==6){
  4381  0008C0  0E06               	movlw	6
  4382  0008C2  1840               	xorwf	_option3@marqueeMenu$F1102^0,w,c
  4383  0008C4  E101               	bnz	l7526
  4384                           
  4385                           ;menu.c: 46:                             option3=0;
  4386                           
  4387                           ;menu.c: 47:                             option4=1;
  4388  0008C6  D8BD               	call	PL126	;call to abstracted procedure
  4389  0008C8                     l7526:
  4390                           
  4391                           ;menu.c: 49:                         if(key2=='*'){
  4392  0008C8  0E2A               	movlw	42
  4393  0008CA  183B               	xorwf	_key2^0,w,c
  4394  0008CC  E10D               	bnz	l7540
  4395                           
  4396                           ;menu.c: 51:                             sub_opt=0;
  4397  0008CE  6A3E               	clrf	_sub_opt@marqueeMenu$F1104^0,c
  4398                           
  4399                           ;menu.c: 52:                             if(times_pressed==9){
  4400  0008D0  0E09               	movlw	9
  4401  0008D2  184F               	xorwf	_times_pressed^0,w,c
  4402  0008D4  E102               	bnz	l7534
  4403                           
  4404                           ;menu.c: 53:                                 option3=8;
  4405                           
  4406                           ;menu.c: 54:                                 option4=9;
  4407  0008D6  D8AE               	call	PL122	;call to abstracted procedure
  4408  0008D8  D005               	goto	L10
  4409  0008DA                     l7534:
  4410  0008DA  503D               	movf	_times_8@TData$F1114^0,w,c
  4411  0008DC  E004               	bz	l7538
  4412                           
  4413                           ;menu.c: 56:                                 option3=6;
  4414  0008DE  0E06               	movlw	6
  4415  0008E0  6E40               	movwf	_option3@marqueeMenu$F1102^0,c
  4416                           
  4417                           ;menu.c: 57:                                 option4=7;
  4418  0008E2  0E07               	movlw	7
  4419  0008E4                     L10:
  4420  0008E4  6E3F               	movwf	_option4@marqueeMenu$F1103^0,c
  4421  0008E6                     l7538:
  4422                           
  4423                           ;menu.c: 60:                             times_8=0;
  4424  0008E6  6A3D               	clrf	_times_8@TData$F1114^0,c
  4425  0008E8                     l7540:
  4426                           
  4427                           ;menu.c: 63:                        state_menu=0;
  4428  0008E8  6A39               	clrf	motorMenu@state_menu^0,c
  4429                           
  4430                           ;menu.c: 64:                     }
  4431  0008EA  0012               	return	
  4432  0008EC                     l7542:
  4433  0008EC  0E38               	movlw	56
  4434  0008EE  183A               	xorwf	_keyMenu^0,w,c
  4435  0008F0  E128               	bnz	l7582
  4436                           
  4437                           ;menu.c: 67:                         if((option3>-1&&option4>-1)&&key2!='*'){
  4438  0008F2  AE40               	btfss	_option3@marqueeMenu$F1102^0,7,c
  4439  0008F4  BE3F               	btfsc	_option4@marqueeMenu$F1103^0,7,c
  4440  0008F6  D005               	goto	l7552
  4441  0008F8  0E2A               	movlw	42
  4442  0008FA  183B               	xorwf	_key2^0,w,c
  4443  0008FC  E002               	bz	l7552
  4444                           
  4445                           ;menu.c: 68:                             option3=option3-1;
  4446  0008FE  0640               	decf	_option3@marqueeMenu$F1102^0,f,c
  4447                           
  4448                           ;menu.c: 69:                             option4=option4-1;
  4449  000900  063F               	decf	_option4@marqueeMenu$F1103^0,f,c
  4450  000902                     l7552:
  4451                           
  4452                           ;menu.c: 71:                         if(option3==-1){
  4453  000902  2840               	incf	_option3@marqueeMenu$F1102^0,w,c
  4454  000904  E101               	bnz	l7558
  4455                           
  4456                           ;menu.c: 72:                             option3=5;
  4457                           
  4458                           ;menu.c: 73:                             option4=0;
  4459  000906  D899               	call	PL124	;call to abstracted procedure
  4460  000908                     l7558:
  4461                           
  4462                           ;menu.c: 75:                         if(option4==-1){
  4463  000908  283F               	incf	_option4@marqueeMenu$F1103^0,w,c
  4464  00090A  E104               	bnz	l7562
  4465                           
  4466                           ;menu.c: 76:                             option3=4;
  4467  00090C  0E04               	movlw	4
  4468  00090E  6E40               	movwf	_option3@marqueeMenu$F1102^0,c
  4469                           
  4470                           ;menu.c: 77:                             option4=5;
  4471  000910  0E05               	movlw	5
  4472  000912  6E3F               	movwf	_option4@marqueeMenu$F1103^0,c
  4473  000914                     l7562:
  4474                           
  4475                           ;menu.c: 79:                         if(times_pressed==9){
  4476  000914  0E09               	movlw	9
  4477  000916  184F               	xorwf	_times_pressed^0,w,c
  4478  000918  E106               	bnz	l7566
  4479                           
  4480                           ;menu.c: 80:                             sub_opt=1;
  4481  00091A  0E01               	movlw	1
  4482  00091C  6E3E               	movwf	_sub_opt@marqueeMenu$F1104^0,c
  4483                           
  4484                           ;menu.c: 81:                             option3=8;
  4485  00091E  0E08               	movlw	8
  4486  000920  6E40               	movwf	_option3@marqueeMenu$F1102^0,c
  4487                           
  4488                           ;menu.c: 82:                             option4=9;
  4489  000922  0E09               	movlw	9
  4490  000924  6E3F               	movwf	_option4@marqueeMenu$F1103^0,c
  4491  000926                     l7566:
  4492                           
  4493                           ;menu.c: 84:                          state_menu=0;
  4494  000926  6A39               	clrf	motorMenu@state_menu^0,c
  4495                           
  4496                           ;menu.c: 85:                         if(key2=='*'){
  4497  000928  0E2A               	movlw	42
  4498  00092A  183B               	xorwf	_key2^0,w,c
  4499  00092C  E1DD               	bnz	l7540
  4500                           
  4501                           ;menu.c: 87:                             times_8=times_8+1;
  4502  00092E  2A3D               	incf	_times_8@TData$F1114^0,f,c
  4503                           
  4504                           ;menu.c: 88:                             sub_opt=1;
  4505  000930  0E01               	movlw	1
  4506  000932  6E3E               	movwf	_sub_opt@marqueeMenu$F1104^0,c
  4507                           
  4508                           ;menu.c: 89:                             if(option3==6){
  4509  000934  0E06               	movlw	6
  4510  000936  1840               	xorwf	_option3@marqueeMenu$F1102^0,w,c
  4511  000938  E1D7               	bnz	l7540
  4512                           
  4513                           ;menu.c: 91:                                 option3=6;
  4514                           
  4515                           ;menu.c: 92:                                 option4=7;
  4516  00093A  D877               	call	PL102	;call to abstracted procedure
  4517                           
  4518                           ;menu.c: 93:                                 SMS_Reset();
  4519  00093C  ECD9  F00E         	call	_SMS_Reset	;wreg free
  4520  000940  D7D3               	goto	l7540
  4521  000942                     l7582:
  4522  000942  0E2A               	movlw	42
  4523  000944  183A               	xorwf	_keyMenu^0,w,c
  4524  000946  E10B               	bnz	l673
  4525                           
  4526                           ;menu.c: 101:                         if(times_pressed==9){
  4527  000948  0E09               	movlw	9
  4528  00094A  184F               	xorwf	_times_pressed^0,w,c
  4529  00094C  E10B               	bnz	l7594
  4530                           
  4531                           ;menu.c: 102:                             if(sub_opt==0){
  4532  00094E  503E               	movf	_sub_opt@marqueeMenu$F1104^0,w,c
  4533  000950  E104               	bnz	l7592
  4534                           
  4535                           ;menu.c: 103:                             LcClear();
  4536  000952  EC8A  F00E         	call	_LcClear	;wreg free
  4537                           
  4538                           ;menu.c: 104:                             times_pressed=7;
  4539  000956  0E07               	movlw	7
  4540  000958  D001               	goto	L11
  4541  00095A                     l7592:
  4542                           
  4543                           ;menu.c: 108:                                 times_pressed=17;
  4544  00095A  0E11               	movlw	17
  4545  00095C                     L11:
  4546  00095C  6E4F               	movwf	_times_pressed^0,c
  4547  00095E                     l673:
  4548                           
  4549                           ;menu.c: 111:                            state_menu=2;
  4550  00095E  0E02               	movlw	2
  4551  000960  6E39               	movwf	motorMenu@state_menu^0,c
  4552                           
  4553                           ;menu.c: 112:                         }else{
  4554  000962  0C02               	retlw	2
  4555  000964                     l7594:
  4556                           
  4557                           ;menu.c: 113:                         times_pressed=times_pressed+1;
  4558  000964  2A4F               	incf	_times_pressed^0,f,c
  4559                           
  4560                           ;menu.c: 115:                         key2=keyMenu;
  4561  000966  C03A  F03B         	movff	_keyMenu,_key2
  4562                           
  4563                           ;menu.c: 117:                         if(times_pressed==1){
  4564  00096A  044F               	decf	_times_pressed^0,w,c
  4565  00096C  E127               	bnz	l7638
  4566                           
  4567                           ;menu.c: 119:                                 if(option3==0){
  4568  00096E  5040               	movf	_option3@marqueeMenu$F1102^0,w,c
  4569  000970  E102               	bnz	l7606
  4570                           
  4571                           ;menu.c: 120:                                     option3=6;
  4572                           
  4573                           ;menu.c: 121:                                     option4=7;
  4574  000972  D85B               	call	PL102	;call to abstracted procedure
  4575  000974  D7B9               	goto	l7540
  4576  000976                     l7606:
  4577                           
  4578                           ;menu.c: 125:                                     if (option3==1){
  4579  000976  0440               	decf	_option3@marqueeMenu$F1102^0,w,c
  4580  000978  E104               	bnz	l7612
  4581                           
  4582                           ;menu.c: 126:                                         userReset();
  4583  00097A  EC7E  F00E         	call	_userReset	;wreg free
  4584                           
  4585                           ;menu.c: 127:                                         times_pressed=13;
  4586  00097E  0E0D               	movlw	13
  4587  000980  D7ED               	goto	L11
  4588  000982                     l7612:
  4589  000982  0E02               	movlw	2
  4590  000984  1840               	xorwf	_option3@marqueeMenu$F1102^0,w,c
  4591  000986  E104               	bnz	l7618
  4592                           
  4593                           ;menu.c: 129:                                         userReset();
  4594  000988  EC7E  F00E         	call	_userReset	;wreg free
  4595                           
  4596                           ;menu.c: 130:                                         times_pressed=14;
  4597  00098C  0E0E               	movlw	14
  4598  00098E  D7E6               	goto	L11
  4599  000990                     l7618:
  4600  000990  0E03               	movlw	3
  4601  000992  1840               	xorwf	_option3@marqueeMenu$F1102^0,w,c
  4602  000994  E102               	bnz	l7622
  4603                           
  4604                           ;menu.c: 132:                                         times_pressed=16;
  4605  000996  0E10               	movlw	16
  4606  000998  D022               	goto	L12
  4607  00099A                     l7622:
  4608  00099A  0E04               	movlw	4
  4609  00099C  1840               	xorwf	_option3@marqueeMenu$F1102^0,w,c
  4610  00099E  E102               	bnz	l7626
  4611                           
  4612                           ;menu.c: 135:                                         times_pressed=12;
  4613  0009A0  0E0C               	movlw	12
  4614  0009A2  D7DC               	goto	L11
  4615  0009A4                     l7626:
  4616  0009A4  0E05               	movlw	5
  4617  0009A6  1840               	xorwf	_option3@marqueeMenu$F1102^0,w,c
  4618  0009A8  E102               	bnz	l7630
  4619                           
  4620                           ;menu.c: 137:                                         times_pressed=10;
  4621  0009AA  0E0A               	movlw	10
  4622  0009AC  D7D7               	goto	L11
  4623  0009AE                     l7630:
  4624  0009AE  0E06               	movlw	6
  4625  0009B0  1840               	xorwf	_option3@marqueeMenu$F1102^0,w,c
  4626  0009B2  E1D5               	bnz	l673
  4627                           
  4628                           ;menu.c: 139:                                         EusReset();
  4629  0009B4  EC4A  F00D         	call	_EusReset	;wreg free
  4630                           
  4631                           ; BSR set to: 0
  4632                           ;menu.c: 140:                                         times_pressed=15;
  4633  0009B8  0E0F               	movlw	15
  4634  0009BA  D7D0               	goto	L11
  4635  0009BC                     l7638:
  4636  0009BC  0E02               	movlw	2
  4637  0009BE  184F               	xorwf	_times_pressed^0,w,c
  4638  0009C0  A4D8               	btfss	status,2,c
  4639  0009C2  0012               	return	
  4640                           
  4641                           ;menu.c: 147:                             if(times_8==1){
  4642  0009C4  043D               	decf	_times_8@TData$F1114^0,w,c
  4643  0009C6  E105               	bnz	l7646
  4644                           
  4645                           ;menu.c: 148:                                 if(option3==6){
  4646  0009C8  0E06               	movlw	6
  4647  0009CA  1840               	xorwf	_option3@marqueeMenu$F1102^0,w,c
  4648  0009CC  E1C8               	bnz	l673
  4649                           
  4650                           ;menu.c: 149:                                 times_pressed=8;
  4651  0009CE  0E08               	movlw	8
  4652  0009D0  D7C5               	goto	L11
  4653  0009D2                     l7646:
  4654  0009D2  503D               	movf	_times_8@TData$F1114^0,w,c
  4655  0009D4  E1C4               	bnz	l673
  4656                           
  4657                           ;menu.c: 153:                                 if(option3==6){
  4658  0009D6  0E06               	movlw	6
  4659  0009D8  1840               	xorwf	_option3@marqueeMenu$F1102^0,w,c
  4660  0009DA  E1C1               	bnz	l673
  4661                           
  4662                           ;menu.c: 154:                                    times_pressed=11;
  4663  0009DC  0E0B               	movlw	11
  4664  0009DE                     L12:
  4665  0009DE  6E4F               	movwf	_times_pressed^0,c
  4666                           
  4667                           ;menu.c: 155:                                    rowi=2;
  4668  0009E0  0E02               	movlw	2
  4669  0009E2  6E50               	movwf	_rowi^0,c
  4670  0009E4  D7BC               	goto	l673
  4671  0009E6                     l7654:
  4672                           
  4673                           ;menu.c: 170:                 LcCursorOff();
  4674  0009E6  ECFC  F00E         	call	_LcCursorOff	;wreg free
  4675                           
  4676                           ;menu.c: 171:                 state_menu=0;
  4677  0009EA  6A39               	clrf	motorMenu@state_menu^0,c
  4678                           
  4679                           ;menu.c: 172:                 if(times_pressed!=9 ){
  4680  0009EC  0E09               	movlw	9
  4681  0009EE  184F               	xorwf	_times_pressed^0,w,c
  4682  0009F0  E003               	bz	l7664
  4683                           
  4684                           ;menu.c: 173:                 option3=0;
  4685  0009F2  6A40               	clrf	_option3@marqueeMenu$F1102^0,c
  4686                           
  4687                           ;menu.c: 174:                 option4=1;
  4688  0009F4  0E01               	movlw	1
  4689  0009F6  D001               	goto	L14
  4690  0009F8                     l7664:
  4691                           
  4692                           ;menu.c: 176:                     option3=8;
  4693                           
  4694                           ;menu.c: 177:                     option4=9;
  4695  0009F8  D81D               	call	PL122	;call to abstracted procedure
  4696  0009FA                     L14:
  4697  0009FA  6E3F               	movwf	_option4@marqueeMenu$F1103^0,c
  4698                           
  4699                           ;menu.c: 180:                 menuReset();
  4700  0009FC  ECB5  F00E         	call	_menuReset	;wreg free
  4701                           
  4702                           ; BSR set to: 0
  4703                           ;menu.c: 181:                 SMS_Reset();
  4704  000A00  ECD9  F00E         	call	_SMS_Reset	;wreg free
  4705                           
  4706                           ;menu.c: 182:                 return_to_main();
  4707  000A04  ECE7  F00E         	call	_return_to_main	;wreg free
  4708                           
  4709                           ;menu.c: 183:                 EusReset();
  4710  000A08  EF4A  F00D         	goto	_EusReset	;wreg free
  4711  000A0C                     l7676:
  4712  000A0C  5039               	movf	motorMenu@state_menu^0,w,c
  4713  000A0E  6E74               	movwf	??_motorMenu^0,c
  4714  000A10  6A75               	clrf	(??_motorMenu+1)^0,c
  4715                           
  4716                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4717                           ; Switch size 1, requested type "space"
  4718                           ; Number of cases is 1, Range of values is 0 to 0
  4719                           ; switch strategies available:
  4720                           ; Name         Instructions Cycles
  4721                           ; simple_byte            4     3 (average)
  4722                           ;	Chosen strategy is simple_byte
  4723  000A12  5075               	movf	(??_motorMenu+1)^0,w,c
  4724  000A14  A4D8               	btfss	status,2,c
  4725  000A16  0012               	return	
  4726                           
  4727                           ; Switch size 1, requested type "space"
  4728                           ; Number of cases is 3, Range of values is 0 to 2
  4729                           ; switch strategies available:
  4730                           ; Name         Instructions Cycles
  4731                           ; simple_byte           10     6 (average)
  4732                           ;	Chosen strategy is simple_byte
  4733  000A18  5074               	movf	??_motorMenu^0,w,c
  4734  000A1A  E101 D720          	bz	l647
  4735  000A1E  0A01               	xorlw	1	; case 1
  4736  000A20  E101 D733          	bz	l7498
  4737  000A24  0A03               	xorlw	3	; case 2
  4738  000A26  E0DF               	bz	l7654
  4739  000A28  0012               	return		;funcret
  4740  000A2A                     __end_of_motorMenu:
  4741                           	callstack 0
  4742  000A2A                     PL102:
  4743                           	callstack 21
  4744  000A2A  0E06               	movlw	6
  4745  000A2C  6E40               	movwf	_option3@marqueeMenu$F1102^0,c
  4746  000A2E  0E07               	movlw	7
  4747  000A30  6E3F               	movwf	_option4@marqueeMenu$F1103^0,c
  4748  000A32  0C07               	retlw	7
  4749  000A34                     __end_ofPL102:
  4750                           	callstack 0
  4751  000A34                     PL122:
  4752                           	callstack 21
  4753  000A34  0E08               	movlw	8
  4754  000A36  6E40               	movwf	_option3@marqueeMenu$F1102^0,c
  4755  000A38  0C09               	retlw	9
  4756  000A3A                     __end_ofPL122:
  4757                           	callstack 0
  4758  000A3A                     PL124:
  4759                           	callstack 21
  4760  000A3A  0E05               	movlw	5
  4761  000A3C  6E40               	movwf	_option3@marqueeMenu$F1102^0,c
  4762  000A3E  6A3F               	clrf	_option4@marqueeMenu$F1103^0,c
  4763  000A40  0012               	return	
  4764  000A42                     __end_ofPL124:
  4765                           	callstack 0
  4766  000A42                     PL126:
  4767                           	callstack 25
  4768  000A42  6A40               	clrf	_option3@marqueeMenu$F1102^0,c
  4769  000A44  0E01               	movlw	1
  4770  000A46  6E3F               	movwf	_option4@marqueeMenu$F1103^0,c
  4771  000A48  0C01               	retlw	1
  4772  000A4A                     __end_ofPL126:
  4773                           	callstack 0
  4774                           
  4775 ;; *************** function _MenuDoMarquee *****************
  4776 ;; Defined at:
  4777 ;;		line 16 in file "marquee_menu.c"
  4778 ;; Parameters:    Size  Location     Type
  4779 ;;  timer           2   24[COMRAM] int 
  4780 ;;  option3         1   26[COMRAM] unsigned char 
  4781 ;;  option4         1   27[COMRAM] unsigned char 
  4782 ;;  sub_opt         1   28[COMRAM] unsigned char 
  4783 ;; Auto vars:     Size  Location     Type
  4784 ;;		None
  4785 ;; Return value:  Size  Location     Type
  4786 ;;                  1    wreg      void 
  4787 ;; Registers used:
  4788 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4789 ;; Tracked objects:
  4790 ;;		On entry : 0/0
  4791 ;;		On exit  : 0/0
  4792 ;;		Unchanged: 0/0
  4793 ;; Data sizes:     COMRAM   BANK0   BANK1
  4794 ;;      Params:         5       0       0
  4795 ;;      Locals:         0       0       0
  4796 ;;      Temps:          2       0       0
  4797 ;;      Totals:         7       0       0
  4798 ;;Total ram usage:        7 bytes
  4799 ;; Hardware stack levels used: 1
  4800 ;; Hardware stack levels required when called: 8
  4801 ;; This function calls:
  4802 ;;		_LcGotoXY
  4803 ;;		_LcPutChar
  4804 ;;		_TiGetTics
  4805 ;;		_TiResetTics
  4806 ;;		_marqueePlaceArrow
  4807 ;; This function is called by:
  4808 ;;		_motorMenu
  4809 ;; This function uses a non-reentrant model
  4810 ;;
  4811                           
  4812                           	psect	text17
  4813  000DB6                     __ptext17:
  4814                           	callstack 0
  4815  000DB6                     _MenuDoMarquee:
  4816                           	callstack 21
  4817                           
  4818                           ;marquee_menu.c: 18:     if(chars[option3]>=16){
  4819                           
  4820                           ;incstack = 0
  4821  000DB6  506F               	movf	MenuDoMarquee@option3^0,w,c
  4822  000DB8  D8BE               	call	PL104	;call to abstracted procedure
  4823  000DBA  64DF               	cpfsgt	indf2,c
  4824  000DBC  D03A               	goto	l6774
  4825                           
  4826                           ;marquee_menu.c: 19:                 if(j[0]<21&&TiGetTics(timer)>=2000){
  4827  000DBE  5005               	movf	_j@marqueeMenu$F2195^0,w,c
  4828  000DC0  0A80               	xorlw	128
  4829  000DC2  0F6B               	addlw	-149
  4830  000DC4  E221               	bc	l6758
  4831  000DC6  506D               	movf	MenuDoMarquee@timer^0,w,c
  4832  000DC8  ECC5  F00D         	call	_TiGetTics
  4833  000DCC  BE5C               	btfsc	(?_TiGetTics+1)^0,7,c
  4834  000DCE  D01C               	goto	l6758
  4835  000DD0  EC62  F00A         	call	PL44	;call to abstracted procedure
  4836  000DD4  E319               	bnc	l6758
  4837                           
  4838                           ;marquee_menu.c: 20:                     if(sub_opt!=1){
  4839  000DD6  0471               	decf	MenuDoMarquee@sub_opt^0,w,c
  4840  000DD8  E003               	bz	l1783
  4841                           
  4842                           ;marquee_menu.c: 21:                         marqueePlaceArrow(sub_opt);
  4843  000DDA  5071               	movf	MenuDoMarquee@sub_opt^0,w,c
  4844  000DDC  EC72  F00E         	call	_marqueePlaceArrow
  4845  000DE0                     l1783:
  4846                           
  4847                           ;marquee_menu.c: 23:                     LcGotoXY(j[0],r[0]);
  4848  000DE0  D8B2               	call	PL120	;call to abstracted procedure
  4849  000DE2  EC75  F00A         	call	_LcGotoXY
  4850                           
  4851                           ;marquee_menu.c: 24:                     LcPutChar(STRINGS[option3][k[0]]);
  4852  000DE6  506F               	movf	MenuDoMarquee@option3^0,w,c
  4853  000DE8  D89C               	call	PL4	;call to abstracted procedure
  4854  000DEA  5001               	movf	_k@marqueeMenu$F2198^0,w,c
  4855  000DEC  D890               	call	PL2	;call to abstracted procedure
  4856  000DEE  EC30  F00C         	call	_LcPutChar
  4857                           
  4858                           ;marquee_menu.c: 26:                 j[0]=j[0]+1;
  4859  000DF2  2A05               	incf	_j@marqueeMenu$F2195^0,f,c
  4860                           
  4861                           ;marquee_menu.c: 27:                 k[0]=k[0]+1;
  4862  000DF4  2A01               	incf	_k@marqueeMenu$F2198^0,f,c
  4863                           
  4864                           ;marquee_menu.c: 29:                 if(STRINGS[option3][k[0]]=='\0'){
  4865  000DF6  506F               	movf	MenuDoMarquee@option3^0,w,c
  4866  000DF8  D894               	call	PL4	;call to abstracted procedure
  4867  000DFA  5001               	movf	_k@marqueeMenu$F2198^0,w,c
  4868  000DFC  D888               	call	PL2	;call to abstracted procedure
  4869  000DFE  E104               	bnz	l6758
  4870                           
  4871                           ;marquee_menu.c: 30:                     k[0]=0;
  4872  000E00  6A01               	clrf	_k@marqueeMenu$F2198^0,c
  4873                           
  4874                           ;marquee_menu.c: 31:                     TiResetTics(timer);
  4875  000E02  506D               	movf	MenuDoMarquee@timer^0,w,c
  4876  000E04  EC57  F00E         	call	_TiResetTics
  4877  000E08                     l6758:
  4878                           
  4879                           ;marquee_menu.c: 35:                 if(j[0]>=21){
  4880  000E08  5005               	movf	_j@marqueeMenu$F2195^0,w,c
  4881  000E0A  0A80               	xorlw	128
  4882  000E0C  0F6B               	addlw	-149
  4883  000E0E  E326               	bnc	l6786
  4884                           
  4885                           ;marquee_menu.c: 36:                     i[0]=i[0]+1;
  4886  000E10  2A03               	incf	_i@marqueeMenu$F2197^0,f,c
  4887                           
  4888                           ;marquee_menu.c: 38:                     if(STRINGS[option3][i[0]]=='\0'){
  4889  000E12  506F               	movf	MenuDoMarquee@option3^0,w,c
  4890  000E14  D886               	call	PL4	;call to abstracted procedure
  4891  000E16  5003               	movf	_i@marqueeMenu$F2197^0,w,c
  4892  000E18  D87A               	call	PL2	;call to abstracted procedure
  4893  000E1A  E101               	bnz	l6766
  4894                           
  4895                           ;marquee_menu.c: 39:                         i[0]=0;
  4896  000E1C  6A03               	clrf	_i@marqueeMenu$F2197^0,c
  4897  000E1E                     l6766:
  4898                           
  4899                           ;marquee_menu.c: 41:                     if(sub_opt!=1){
  4900  000E1E  0471               	decf	MenuDoMarquee@sub_opt^0,w,c
  4901  000E20  E005               	bz	l6772
  4902                           
  4903                           ;marquee_menu.c: 42:                         marqueePlaceArrow(sub_opt);
  4904  000E22  5071               	movf	MenuDoMarquee@sub_opt^0,w,c
  4905  000E24  EC72  F00E         	call	_marqueePlaceArrow
  4906                           
  4907                           ;marquee_menu.c: 43:                         j[0]=2;
  4908  000E28  0E02               	movlw	2
  4909  000E2A  6E05               	movwf	_j@marqueeMenu$F2195^0,c
  4910  000E2C                     l6772:
  4911                           
  4912                           ;marquee_menu.c: 45:                     k[0]=i[0];
  4913  000E2C  C003  F001         	movff	_i@marqueeMenu$F2197,_k@marqueeMenu$F2198
  4914  000E30  D015               	goto	l6786
  4915  000E32                     l6774:
  4916                           
  4917                           ;marquee_menu.c: 48:                     if(sub_opt!=1){
  4918  000E32  0471               	decf	MenuDoMarquee@sub_opt^0,w,c
  4919  000E34  E003               	bz	l1789
  4920                           
  4921                           ;marquee_menu.c: 49:                         marqueePlaceArrow(sub_opt);
  4922  000E36  5071               	movf	MenuDoMarquee@sub_opt^0,w,c
  4923  000E38  EC72  F00E         	call	_marqueePlaceArrow
  4924  000E3C                     l1789:
  4925                           
  4926                           ;marquee_menu.c: 51:                     LcGotoXY(j[0],r[0]);
  4927  000E3C  D884               	call	PL120	;call to abstracted procedure
  4928  000E3E  EC75  F00A         	call	_LcGotoXY
  4929                           
  4930                           ;marquee_menu.c: 52:                     if(STRINGS[option3][k[0]]!='\0'){
  4931  000E42  506F               	movf	MenuDoMarquee@option3^0,w,c
  4932  000E44  D86E               	call	PL4	;call to abstracted procedure
  4933  000E46  5001               	movf	_k@marqueeMenu$F2198^0,w,c
  4934  000E48  D862               	call	PL2	;call to abstracted procedure
  4935  000E4A  E008               	bz	l6786
  4936                           
  4937                           ;marquee_menu.c: 53:                     LcPutChar(STRINGS[option3][k[0]]);
  4938  000E4C  506F               	movf	MenuDoMarquee@option3^0,w,c
  4939  000E4E  D869               	call	PL4	;call to abstracted procedure
  4940  000E50  5001               	movf	_k@marqueeMenu$F2198^0,w,c
  4941  000E52  D85D               	call	PL2	;call to abstracted procedure
  4942  000E54  EC30  F00C         	call	_LcPutChar
  4943                           
  4944                           ;marquee_menu.c: 54:                     j[0]=j[0]+1;
  4945  000E58  2A05               	incf	_j@marqueeMenu$F2195^0,f,c
  4946                           
  4947                           ;marquee_menu.c: 55:                     k[0]=k[0]+1;
  4948  000E5A  2A01               	incf	_k@marqueeMenu$F2198^0,f,c
  4949  000E5C                     l6786:
  4950                           
  4951                           ;marquee_menu.c: 61:                 if(chars[option4]>=16){
  4952  000E5C  5070               	movf	MenuDoMarquee@option4^0,w,c
  4953  000E5E  D86B               	call	PL104	;call to abstracted procedure
  4954  000E60  64DF               	cpfsgt	indf2,c
  4955  000E62  D03D               	goto	l6822
  4956                           
  4957                           ;marquee_menu.c: 63:                     if(j[1]<21&&TiGetTics(timer)>=2000){
  4958  000E64  5006               	movf	(_j@marqueeMenu$F2195+1)^0,w,c
  4959  000E66  0A80               	xorlw	128
  4960  000E68  0F6B               	addlw	-149
  4961  000E6A  E221               	bc	l6808
  4962  000E6C  506D               	movf	MenuDoMarquee@timer^0,w,c
  4963  000E6E  ECC5  F00D         	call	_TiGetTics
  4964  000E72  BE5C               	btfsc	(?_TiGetTics+1)^0,7,c
  4965  000E74  D01C               	goto	l6808
  4966  000E76  EC62  F00A         	call	PL44	;call to abstracted procedure
  4967  000E7A  E319               	bnc	l6808
  4968                           
  4969                           ;marquee_menu.c: 64:                     if(sub_opt==1){
  4970  000E7C  0471               	decf	MenuDoMarquee@sub_opt^0,w,c
  4971  000E7E  E103               	bnz	l1793
  4972                           
  4973                           ;marquee_menu.c: 65:                         marqueePlaceArrow(sub_opt);
  4974  000E80  5071               	movf	MenuDoMarquee@sub_opt^0,w,c
  4975  000E82  EC72  F00E         	call	_marqueePlaceArrow
  4976  000E86                     l1793:
  4977                           
  4978                           ;marquee_menu.c: 67:                     LcGotoXY(j[1],r[1]);
  4979  000E86  D85B               	call	PL118	;call to abstracted procedure
  4980  000E88  EC75  F00A         	call	_LcGotoXY
  4981                           
  4982                           ;marquee_menu.c: 68:                     LcPutChar(STRINGS[option4][k[1]]);
  4983  000E8C  5070               	movf	MenuDoMarquee@option4^0,w,c
  4984  000E8E  D849               	call	PL4	;call to abstracted procedure
  4985  000E90  5002               	movf	(_k@marqueeMenu$F2198+1)^0,w,c
  4986  000E92  D83D               	call	PL2	;call to abstracted procedure
  4987  000E94  EC30  F00C         	call	_LcPutChar
  4988                           
  4989                           ;marquee_menu.c: 69:                     j[1]=j[1]+1;
  4990  000E98  2A06               	incf	(_j@marqueeMenu$F2195+1)^0,f,c
  4991                           
  4992                           ;marquee_menu.c: 70:                     k[1]=k[1]+1;
  4993  000E9A  2A02               	incf	(_k@marqueeMenu$F2198+1)^0,f,c
  4994                           
  4995                           ;marquee_menu.c: 72:                     if(STRINGS[option4][k[1]]=='\0'){
  4996  000E9C  5070               	movf	MenuDoMarquee@option4^0,w,c
  4997  000E9E  D841               	call	PL4	;call to abstracted procedure
  4998  000EA0  5002               	movf	(_k@marqueeMenu$F2198+1)^0,w,c
  4999  000EA2  D835               	call	PL2	;call to abstracted procedure
  5000  000EA4  E104               	bnz	l6808
  5001                           
  5002                           ;marquee_menu.c: 73:                         k[1]=0;
  5003  000EA6  6A02               	clrf	(_k@marqueeMenu$F2198+1)^0,c
  5004                           
  5005                           ;marquee_menu.c: 74:                         TiResetTics(timer);
  5006  000EA8  506D               	movf	MenuDoMarquee@timer^0,w,c
  5007  000EAA  EC57  F00E         	call	_TiResetTics
  5008  000EAE                     l6808:
  5009                           
  5010                           ;marquee_menu.c: 79:                     if(j[1]>=21){
  5011  000EAE  5006               	movf	(_j@marqueeMenu$F2195+1)^0,w,c
  5012  000EB0  0A80               	xorlw	128
  5013  000EB2  0F6B               	addlw	-149
  5014  000EB4  A0D8               	btfss	status,0,c
  5015  000EB6  0012               	return	
  5016                           
  5017                           ;marquee_menu.c: 80:                         i[1]=i[1]+1;
  5018  000EB8  2A04               	incf	(_i@marqueeMenu$F2197+1)^0,f,c
  5019                           
  5020                           ;marquee_menu.c: 82:                         if(STRINGS[option4][i[1]]=='\0'){
  5021  000EBA  5070               	movf	MenuDoMarquee@option4^0,w,c
  5022  000EBC  D832               	call	PL4	;call to abstracted procedure
  5023  000EBE  5004               	movf	(_i@marqueeMenu$F2197+1)^0,w,c
  5024  000EC0  D826               	call	PL2	;call to abstracted procedure
  5025  000EC2  E101               	bnz	l6816
  5026                           
  5027                           ;marquee_menu.c: 83:                             i[1]=0;
  5028  000EC4  6A04               	clrf	(_i@marqueeMenu$F2197+1)^0,c
  5029  000EC6                     l6816:
  5030  000EC6  0471               	decf	MenuDoMarquee@sub_opt^0,w,c
  5031  000EC8  E106               	bnz	l1797
  5032                           
  5033                           ;marquee_menu.c: 85:                            marqueePlaceArrow(sub_opt);
  5034  000ECA  5071               	movf	MenuDoMarquee@sub_opt^0,w,c
  5035  000ECC  EC72  F00E         	call	_marqueePlaceArrow
  5036                           
  5037                           ;marquee_menu.c: 86:                             j[1]=2;
  5038  000ED0  0E02               	movlw	2
  5039  000ED2  6E06               	movwf	(_j@marqueeMenu$F2195+1)^0,c
  5040                           
  5041                           ;marquee_menu.c: 87:                         }else{
  5042  000ED4  D001               	goto	l1798
  5043  000ED6                     l1797:
  5044                           
  5045                           ;marquee_menu.c: 88:                             j[1]=0;
  5046  000ED6  6A06               	clrf	(_j@marqueeMenu$F2195+1)^0,c
  5047  000ED8                     l1798:
  5048                           
  5049                           ;marquee_menu.c: 90:                         k[1]=i[1];
  5050  000ED8  C004  F002         	movff	_i@marqueeMenu$F2197+1,_k@marqueeMenu$F2198+1
  5051  000EDC  0012               	return	
  5052  000EDE                     l6822:
  5053                           
  5054                           ;marquee_menu.c: 95:                     if(sub_opt==1){
  5055  000EDE  0471               	decf	MenuDoMarquee@sub_opt^0,w,c
  5056  000EE0  E103               	bnz	l1800
  5057                           
  5058                           ;marquee_menu.c: 96:                         marqueePlaceArrow(sub_opt);
  5059  000EE2  5071               	movf	MenuDoMarquee@sub_opt^0,w,c
  5060  000EE4  EC72  F00E         	call	_marqueePlaceArrow
  5061  000EE8                     l1800:
  5062                           
  5063                           ;marquee_menu.c: 98:                     LcGotoXY(j[1],r[1]);
  5064  000EE8  D82A               	call	PL118	;call to abstracted procedure
  5065  000EEA  EC75  F00A         	call	_LcGotoXY
  5066                           
  5067                           ;marquee_menu.c: 99:                     if(STRINGS[option4][k[1]]!='\0'){
  5068  000EEE  5070               	movf	MenuDoMarquee@option4^0,w,c
  5069  000EF0  D818               	call	PL4	;call to abstracted procedure
  5070  000EF2  5002               	movf	(_k@marqueeMenu$F2198+1)^0,w,c
  5071  000EF4  D80C               	call	PL2	;call to abstracted procedure
  5072  000EF6  B4D8               	btfsc	status,2,c
  5073  000EF8  0012               	return	
  5074                           
  5075                           ;marquee_menu.c: 100:                     LcPutChar(STRINGS[option4][k[1]]);
  5076  000EFA  5070               	movf	MenuDoMarquee@option4^0,w,c
  5077  000EFC  D812               	call	PL4	;call to abstracted procedure
  5078  000EFE  5002               	movf	(_k@marqueeMenu$F2198+1)^0,w,c
  5079  000F00  D806               	call	PL2	;call to abstracted procedure
  5080  000F02  EC30  F00C         	call	_LcPutChar
  5081                           
  5082                           ;marquee_menu.c: 101:                     j[1]=j[1]+1;
  5083  000F06  2A06               	incf	(_j@marqueeMenu$F2195+1)^0,f,c
  5084                           
  5085                           ;marquee_menu.c: 102:                     k[1]=k[1]+1;
  5086  000F08  2802               	incf	(_k@marqueeMenu$F2198+1)^0,w,c
  5087  000F0A  6E02               	movwf	(_k@marqueeMenu$F2198+1)^0,c
  5088  000F0C  0012               	return		;funcret
  5089  000F0E                     __end_of_MenuDoMarquee:
  5090                           	callstack 0
  5091  000F0E                     PL2:
  5092                           	callstack 21
  5093  000F0E  2672               	addwf	??_MenuDoMarquee^0,f,c
  5094  000F10  0E00               	movlw	0
  5095  000F12  2273               	addwfc	(??_MenuDoMarquee+1)^0,f,c
  5096  000F14  C072  FFF6         	movff	??_MenuDoMarquee,tblptrl
  5097  000F18  C073  FFF7         	movff	??_MenuDoMarquee+1,tblptrh
  5098  000F1C                     	if	0	;tblptru may be non-zero
  5099  000F1C                     	endif
  5100  000F1C                     	if	0	;tblptru may be non-zero
  5101  000F1C                     	endif
  5102  000F1C  0008               	tblrd		*
  5103  000F1E  50F5               	movf	tablat,w,c
  5104  000F20  0012               	return	
  5105  000F22                     __end_ofPL2:
  5106                           	callstack 0
  5107  000F22                     PL4:
  5108                           	callstack 21
  5109  000F22  0D1E               	mullw	30
  5110  000F24  0E15               	movlw	low _STRINGS
  5111  000F26  6E72               	movwf	??_MenuDoMarquee^0,c
  5112  000F28  0E1E               	movlw	high _STRINGS
  5113  000F2A  6E73               	movwf	(??_MenuDoMarquee+1)^0,c
  5114  000F2C  50F3               	movf	243,w,c
  5115  000F2E  2672               	addwf	??_MenuDoMarquee^0,f,c
  5116  000F30  50F4               	movf	244,w,c
  5117  000F32  2273               	addwfc	(??_MenuDoMarquee+1)^0,f,c
  5118  000F34  0012               	return	
  5119  000F36                     __end_ofPL4:
  5120                           	callstack 0
  5121  000F36                     PL104:
  5122                           	callstack 21
  5123  000F36  0FC6               	addlw	low _chars
  5124  000F38  6ED9               	movwf	fsr2l,c
  5125  000F3A  6ADA               	clrf	fsr2h,c
  5126  000F3C  0C0F               	retlw	15
  5127  000F3E                     __end_ofPL104:
  5128                           	callstack 0
  5129  000F3E                     PL118:
  5130                           	callstack 21
  5131  000F3E  C0BF  F063         	movff	_r@marqueeMenu$F2196+1,LcGotoXY@Row
  5132  000F42  5006               	movf	(_j@marqueeMenu$F2195+1)^0,w,c
  5133  000F44  0012               	return	
  5134  000F46                     __end_ofPL118:
  5135                           	callstack 0
  5136  000F46                     PL120:
  5137                           	callstack 21
  5138  000F46  C0BE  F063         	movff	_r@marqueeMenu$F2196,LcGotoXY@Row
  5139  000F4A  5005               	movf	_j@marqueeMenu$F2195^0,w,c
  5140  000F4C  0012               	return	
  5141  000F4E                     __end_ofPL120:
  5142                           	callstack 0
  5143                           
  5144 ;; *************** function _marqueePlaceArrow *****************
  5145 ;; Defined at:
  5146 ;;		line 110 in file "marquee_menu.c"
  5147 ;; Parameters:    Size  Location     Type
  5148 ;;  sub_opt         1    wreg     unsigned char 
  5149 ;; Auto vars:     Size  Location     Type
  5150 ;;  sub_opt         1   23[COMRAM] unsigned char 
  5151 ;; Return value:  Size  Location     Type
  5152 ;;                  1    wreg      void 
  5153 ;; Registers used:
  5154 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5155 ;; Tracked objects:
  5156 ;;		On entry : 0/0
  5157 ;;		On exit  : 0/0
  5158 ;;		Unchanged: 0/0
  5159 ;; Data sizes:     COMRAM   BANK0   BANK1
  5160 ;;      Params:         0       0       0
  5161 ;;      Locals:         1       0       0
  5162 ;;      Temps:          0       0       0
  5163 ;;      Totals:         1       0       0
  5164 ;;Total ram usage:        1 bytes
  5165 ;; Hardware stack levels used: 1
  5166 ;; Hardware stack levels required when called: 7
  5167 ;; This function calls:
  5168 ;;		_LcGotoXY
  5169 ;;		_LcPutChar
  5170 ;; This function is called by:
  5171 ;;		_motor_data
  5172 ;;		_UpDownUsers
  5173 ;;		_MenuDoMarquee
  5174 ;; This function uses a non-reentrant model
  5175 ;;
  5176                           
  5177                           	psect	text18
  5178  001CE4                     __ptext18:
  5179                           	callstack 0
  5180  001CE4                     _marqueePlaceArrow:
  5181                           	callstack 22
  5182                           
  5183                           ;incstack = 0
  5184                           ;marqueePlaceArrow@sub_opt stored from wreg
  5185  001CE4  6E6C               	movwf	marqueePlaceArrow@sub_opt^0,c
  5186                           
  5187                           ;marquee_menu.c: 111:             LcGotoXY(0,sub_opt);
  5188  001CE6  C06C  F063         	movff	marqueePlaceArrow@sub_opt,LcGotoXY@Row
  5189  001CEA  0E00               	movlw	0
  5190  001CEC  EC75  F00A         	call	_LcGotoXY
  5191                           
  5192                           ;marquee_menu.c: 112:             LcPutChar('-');
  5193  001CF0  0E2D               	movlw	45
  5194  001CF2  EC30  F00C         	call	_LcPutChar
  5195                           
  5196                           ;marquee_menu.c: 113:             LcPutChar('>');
  5197  001CF6  0E3E               	movlw	62
  5198  001CF8  EF30  F00C         	goto	_LcPutChar
  5199  001CFC                     __end_of_marqueePlaceArrow:
  5200                           	callstack 0
  5201                           
  5202 ;; *************** function _LcCursorOff *****************
  5203 ;; Defined at:
  5204 ;;		line 107 in file "LCD.c"
  5205 ;; Parameters:    Size  Location     Type
  5206 ;;		None
  5207 ;; Auto vars:     Size  Location     Type
  5208 ;;		None
  5209 ;; Return value:  Size  Location     Type
  5210 ;;                  1    wreg      void 
  5211 ;; Registers used:
  5212 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5213 ;; Tracked objects:
  5214 ;;		On entry : 0/0
  5215 ;;		On exit  : 0/0
  5216 ;;		Unchanged: 0/0
  5217 ;; Data sizes:     COMRAM   BANK0   BANK1
  5218 ;;      Params:         0       0       0
  5219 ;;      Locals:         0       0       0
  5220 ;;      Temps:          0       0       0
  5221 ;;      Totals:         0       0       0
  5222 ;;Total ram usage:        0 bytes
  5223 ;; Hardware stack levels used: 1
  5224 ;; Hardware stack levels required when called: 5
  5225 ;; This function calls:
  5226 ;;		_CantaIR
  5227 ;;		_WaitForBusy
  5228 ;; This function is called by:
  5229 ;;		_main
  5230 ;;		_motorMenu
  5231 ;;		_motor_SMS
  5232 ;; This function uses a non-reentrant model
  5233 ;;
  5234                           
  5235                           	psect	text19
  5236  001DF8                     __ptext19:
  5237                           	callstack 0
  5238  001DF8                     _LcCursorOff:
  5239                           	callstack 24
  5240                           
  5241                           ;LCD.c: 110:  WaitForBusy();
  5242                           
  5243                           ;incstack = 0
  5244  001DF8  ECCA  F00C         	call	_WaitForBusy	;wreg free
  5245                           
  5246                           ;LCD.c: 111:  CantaIR(0x08 | 0x04);
  5247  001DFC  0E0C               	movlw	12
  5248  001DFE  EF8A  F00D         	goto	_CantaIR
  5249  001E02                     __end_of_LcCursorOff:
  5250                           	callstack 0
  5251                           
  5252 ;; *************** function _EusReset *****************
  5253 ;; Defined at:
  5254 ;;		line 213 in file "Eusart.c"
  5255 ;; Parameters:    Size  Location     Type
  5256 ;;		None
  5257 ;; Auto vars:     Size  Location     Type
  5258 ;;		None
  5259 ;; Return value:  Size  Location     Type
  5260 ;;                  1    wreg      void 
  5261 ;; Registers used:
  5262 ;;		None
  5263 ;; Tracked objects:
  5264 ;;		On entry : 0/0
  5265 ;;		On exit  : 3F/0
  5266 ;;		Unchanged: 0/0
  5267 ;; Data sizes:     COMRAM   BANK0   BANK1
  5268 ;;      Params:         0       0       0
  5269 ;;      Locals:         0       0       0
  5270 ;;      Temps:          0       0       0
  5271 ;;      Totals:         0       0       0
  5272 ;;Total ram usage:        0 bytes
  5273 ;; Hardware stack levels used: 1
  5274 ;; Hardware stack levels required when called: 3
  5275 ;; This function calls:
  5276 ;;		Nothing
  5277 ;; This function is called by:
  5278 ;;		_motorMenu
  5279 ;; This function uses a non-reentrant model
  5280 ;;
  5281                           
  5282                           	psect	text20
  5283  001A94                     __ptext20:
  5284                           	callstack 0
  5285  001A94                     _EusReset:
  5286                           	callstack 26
  5287                           
  5288                           ;Eusart.c: 214:     digit=0;
  5289                           
  5290                           ;incstack = 0
  5291  001A94  6A4B               	clrf	_digit^0,c
  5292                           
  5293                           ;Eusart.c: 215:     rowi=0;
  5294  001A96  6A50               	clrf	_rowi^0,c
  5295                           
  5296                           ;Eusart.c: 216:     stateEus=0;
  5297  001A98  6A1C               	clrf	_stateEus^0,c
  5298                           
  5299                           ;Eusart.c: 217:     seconds_aux=0;
  5300  001A9A  6A1F               	clrf	_seconds_aux^0,c
  5301                           
  5302                           ;Eusart.c: 218:     sec[1]=0;
  5303                           
  5304                           ;Eusart.c: 219:     sec[0]=0;
  5305                           
  5306                           ;Eusart.c: 220:     min[1]=0;
  5307                           
  5308                           ;Eusart.c: 221:     min[0]=0;
  5309  001A9C  D80C               	call	PL110	;call to abstracted procedure
  5310                           
  5311                           ;Eusart.c: 222:     current_score[2]=0;
  5312  001A9E  0100               	movlb	0	; () banked
  5313  001AA0  6BB6               	clrf	(_current_score+4)& (0+255),b
  5314  001AA2  6BB7               	clrf	(_current_score+5)& (0+255),b
  5315                           
  5316                           ;Eusart.c: 223:     current_score[1]=0;
  5317  001AA4  6BB4               	clrf	(_current_score+2)& (0+255),b
  5318  001AA6  6BB5               	clrf	(_current_score+3)& (0+255),b
  5319                           
  5320                           ;Eusart.c: 224:     current_score[0]=0;
  5321  001AA8  6BB2               	clrf	_current_score& (0+255),b
  5322  001AAA  6BB3               	clrf	(_current_score+1)& (0+255),b
  5323                           
  5324                           ;Eusart.c: 225:     startGame=0;
  5325  001AAC  6A4E               	clrf	_startGame^0,c
  5326                           
  5327                           ;Eusart.c: 226:     pointer=0;
  5328  001AAE  6A51               	clrf	_pointer^0,c
  5329                           
  5330                           ;Eusart.c: 228:     num_users=0;
  5331  001AB0  6A20               	clrf	_times3^0,c
  5332                           
  5333                           ;Eusart.c: 229:     direction=0;
  5334  001AB2  6A49               	clrf	_direction^0,c
  5335                           
  5336                           ; BSR set to: 0
  5337  001AB4  0012               	return		;funcret
  5338  001AB6                     __end_of_EusReset:
  5339                           	callstack 0
  5340  001AB6                     PL110:
  5341                           	callstack 21
  5342  001AB6  6A0E               	clrf	(_sec+1)^0,c
  5343  001AB8  6A0D               	clrf	_sec^0,c
  5344  001ABA  6A0C               	clrf	(_min+1)^0,c
  5345  001ABC  6A0B               	clrf	_min^0,c
  5346  001ABE  0012               	return	
  5347  001AC0                     __end_ofPL110:
  5348                           	callstack 0
  5349                           
  5350 ;; *************** function _motorMatrix *****************
  5351 ;; Defined at:
  5352 ;;		line 28 in file "matrix.c"
  5353 ;; Parameters:    Size  Location     Type
  5354 ;;		None
  5355 ;; Auto vars:     Size  Location     Type
  5356 ;;		None
  5357 ;; Return value:  Size  Location     Type
  5358 ;;                  1    wreg      void 
  5359 ;; Registers used:
  5360 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5361 ;; Tracked objects:
  5362 ;;		On entry : 0/0
  5363 ;;		On exit  : 0/0
  5364 ;;		Unchanged: 0/0
  5365 ;; Data sizes:     COMRAM   BANK0   BANK1
  5366 ;;      Params:         0       0       0
  5367 ;;      Locals:         0       0       0
  5368 ;;      Temps:          2       0       0
  5369 ;;      Totals:         2       0       0
  5370 ;;Total ram usage:        2 bytes
  5371 ;; Hardware stack levels used: 1
  5372 ;; Hardware stack levels required when called: 4
  5373 ;; This function calls:
  5374 ;;		_TiGetTics
  5375 ;;		_TiResetTics
  5376 ;;		_selectChar
  5377 ;; This function is called by:
  5378 ;;		_main
  5379 ;; This function uses a non-reentrant model
  5380 ;;
  5381                           
  5382                           	psect	text21
  5383  000F4E                     __ptext21:
  5384                           	callstack 0
  5385  000F4E                     _motorMatrix:
  5386                           	callstack 26
  5387                           
  5388                           ;matrix.c: 30: static char state = 0;;matrix.c: 31: switch(state){
  5389                           
  5390                           ; BSR set to: 0
  5391                           ;incstack = 0
  5392  000F4E  D0A0               	goto	l7168
  5393  000F50                     l305:
  5394                           
  5395                           ;matrix.c: 35:         if (!(PORTBbits.RB5==1||PORTBbits.RB4==1||PORTBbits.RB3==1)){
  5396  000F50  AA81               	btfss	129,5,c	;volatile
  5397  000F52  B881               	btfsc	129,4,c	;volatile
  5398  000F54  D00A               	goto	l7072
  5399  000F56  B681               	btfsc	129,3,c	;volatile
  5400  000F58  D008               	goto	l7072
  5401                           
  5402                           ;matrix.c: 36:             LATDbits.LATD3=1;
  5403  000F5A  868C               	bsf	140,3,c	;volatile
  5404                           
  5405                           ;matrix.c: 37:             LATDbits.LATD2=0;
  5406  000F5C  948C               	bcf	140,2,c	;volatile
  5407                           
  5408                           ;matrix.c: 38:             LATDbits.LATD1=0;
  5409  000F5E  928C               	bcf	140,1,c	;volatile
  5410                           
  5411                           ;matrix.c: 39:             LATDbits.LATD0=0;
  5412  000F60  908C               	bcf	140,0,c	;volatile
  5413                           
  5414                           ;matrix.c: 40:             state=1;
  5415  000F62  0E01               	movlw	1
  5416  000F64  6E45               	movwf	motorMatrix@state^0,c
  5417                           
  5418                           ;matrix.c: 41:             row=0;
  5419  000F66  6A53               	clrf	_row^0,c
  5420                           
  5421                           ;matrix.c: 42:         }else{
  5422  000F68  0012               	return	
  5423  000F6A                     l7072:
  5424                           
  5425                           ;matrix.c: 43:             state=4;
  5426  000F6A  0E04               	movlw	4
  5427  000F6C  6E45               	movwf	motorMatrix@state^0,c
  5428                           
  5429                           ;matrix.c: 45:         break;
  5430                           
  5431                           ;matrix.c: 44:         }
  5432  000F6E  0C04               	retlw	4
  5433  000F70                     l309:
  5434                           
  5435                           ;matrix.c: 47:        if (!(PORTBbits.RB5==1||PORTBbits.RB4==1||PORTBbits.RB3==1)){
  5436  000F70  AA81               	btfss	129,5,c	;volatile
  5437  000F72  B881               	btfsc	129,4,c	;volatile
  5438  000F74  D7FA               	goto	l7072
  5439  000F76  B681               	btfsc	129,3,c	;volatile
  5440  000F78  D7F8               	goto	l7072
  5441                           
  5442                           ;matrix.c: 48:             LATDbits.LATD3=0;
  5443  000F7A  968C               	bcf	140,3,c	;volatile
  5444                           
  5445                           ;matrix.c: 49:             LATDbits.LATD2=1;
  5446  000F7C  848C               	bsf	140,2,c	;volatile
  5447                           
  5448                           ;matrix.c: 50:             LATDbits.LATD1=0;
  5449  000F7E  928C               	bcf	140,1,c	;volatile
  5450                           
  5451                           ;matrix.c: 51:             LATDbits.LATD0=0;
  5452  000F80  908C               	bcf	140,0,c	;volatile
  5453                           
  5454                           ;matrix.c: 52:             state=2;
  5455  000F82  0E02               	movlw	2
  5456  000F84  6E45               	movwf	motorMatrix@state^0,c
  5457                           
  5458                           ;matrix.c: 53:             row=1;
  5459  000F86  0E01               	movlw	1
  5460  000F88  6E53               	movwf	_row^0,c
  5461                           
  5462                           ;matrix.c: 55:         }else{
  5463  000F8A  0C01               	retlw	1
  5464  000F8C                     l312:
  5465                           
  5466                           ;matrix.c: 60:         if (!(PORTBbits.RB5==1||PORTBbits.RB4==1||PORTBbits.RB3==1)){
  5467  000F8C  AA81               	btfss	129,5,c	;volatile
  5468  000F8E  B881               	btfsc	129,4,c	;volatile
  5469  000F90  D7EC               	goto	l7072
  5470  000F92  B681               	btfsc	129,3,c	;volatile
  5471  000F94  D7EA               	goto	l7072
  5472                           
  5473                           ;matrix.c: 61:             LATDbits.LATD3=0;
  5474  000F96  968C               	bcf	140,3,c	;volatile
  5475                           
  5476                           ;matrix.c: 62:             LATDbits.LATD2=0;
  5477  000F98  948C               	bcf	140,2,c	;volatile
  5478                           
  5479                           ;matrix.c: 63:             LATDbits.LATD1=1;
  5480  000F9A  828C               	bsf	140,1,c	;volatile
  5481                           
  5482                           ;matrix.c: 64:             LATDbits.LATD0=0;
  5483  000F9C  908C               	bcf	140,0,c	;volatile
  5484                           
  5485                           ;matrix.c: 65:             state=3;
  5486  000F9E  0E03               	movlw	3
  5487  000FA0  6E45               	movwf	motorMatrix@state^0,c
  5488                           
  5489                           ;matrix.c: 66:             row=2;
  5490  000FA2  0E02               	movlw	2
  5491  000FA4  6E53               	movwf	_row^0,c
  5492                           
  5493                           ;matrix.c: 67:         }else{
  5494  000FA6  0C02               	retlw	2
  5495  000FA8                     l315:
  5496                           
  5497                           ;matrix.c: 72:         if (!(PORTBbits.RB5==1||PORTBbits.RB4==1||PORTBbits.RB3==1)){
  5498  000FA8  AA81               	btfss	129,5,c	;volatile
  5499  000FAA  B881               	btfsc	129,4,c	;volatile
  5500  000FAC  D7DE               	goto	l7072
  5501  000FAE  B681               	btfsc	129,3,c	;volatile
  5502  000FB0  D7DC               	goto	l7072
  5503                           
  5504                           ;matrix.c: 73:             LATDbits.LATD3=0;
  5505  000FB2  968C               	bcf	140,3,c	;volatile
  5506                           
  5507                           ;matrix.c: 74:             LATDbits.LATD2=0;
  5508  000FB4  948C               	bcf	140,2,c	;volatile
  5509                           
  5510                           ;matrix.c: 75:             LATDbits.LATD1=0;
  5511  000FB6  928C               	bcf	140,1,c	;volatile
  5512                           
  5513                           ;matrix.c: 76:             LATDbits.LATD0=1;
  5514  000FB8  808C               	bsf	140,0,c	;volatile
  5515                           
  5516                           ;matrix.c: 77:             row=3;
  5517  000FBA  0E03               	movlw	3
  5518  000FBC  6E53               	movwf	_row^0,c
  5519  000FBE                     l7102:
  5520                           
  5521                           ;matrix.c: 78:             state=0;
  5522  000FBE  6A45               	clrf	motorMatrix@state^0,c
  5523                           
  5524                           ;matrix.c: 79:         }else{
  5525  000FC0  0012               	return	
  5526  000FC2                     l7106:
  5527                           
  5528                           ;matrix.c: 85:         TiResetTics(timer);
  5529  000FC2  5047               	movf	_timer^0,w,c
  5530  000FC4  EC57  F00E         	call	_TiResetTics
  5531                           
  5532                           ;matrix.c: 86:         state=5;
  5533  000FC8  0E05               	movlw	5
  5534  000FCA  6E45               	movwf	motorMatrix@state^0,c
  5535                           
  5536                           ;matrix.c: 87:         break;
  5537  000FCC  0C05               	retlw	5
  5538  000FCE                     l7110:
  5539                           
  5540                           ;matrix.c: 90:         if (TiGetTics(timer)>= 40){
  5541  000FCE  5047               	movf	_timer^0,w,c
  5542  000FD0  ECC5  F00D         	call	_TiGetTics
  5543  000FD4  BE5C               	btfsc	(?_TiGetTics+1)^0,7,c
  5544  000FD6  0012               	return	
  5545  000FD8  505C               	movf	(?_TiGetTics+1)^0,w,c
  5546  000FDA  E104               	bnz	u7040
  5547  000FDC  0E28               	movlw	40
  5548  000FDE  5C5B               	subwf	?_TiGetTics^0,w,c
  5549  000FE0  A0D8               	btfss	status,0,c
  5550  000FE2  0012               	return	
  5551  000FE4                     u7040:
  5552                           
  5553                           ;matrix.c: 91:             if((PORTBbits.RB5==1||PORTBbits.RB4==1||PORTBbits.RB3==1)){
  5554  000FE4  AA81               	btfss	129,5,c	;volatile
  5555  000FE6  B881               	btfsc	129,4,c	;volatile
  5556  000FE8  D002               	goto	u7070
  5557  000FEA  A681               	btfss	129,3,c	;volatile
  5558  000FEC  D7E8               	goto	l7102
  5559  000FEE                     u7070:
  5560                           
  5561                           ;matrix.c: 93:                 state=6;
  5562  000FEE  0E06               	movlw	6
  5563  000FF0  6E45               	movwf	motorMatrix@state^0,c
  5564                           
  5565                           ;matrix.c: 95:             }else{
  5566  000FF2  0C06               	retlw	6
  5567  000FF4                     l325:
  5568                           
  5569                           ;matrix.c: 103:             if(PORTBbits.RB3){
  5570  000FF4  A681               	btfss	129,3,c	;volatile
  5571  000FF6  D002               	goto	l326
  5572                           
  5573                           ;matrix.c: 104:                 column=0;
  5574  000FF8  6A54               	clrf	_column^0,c
  5575                           
  5576                           ;matrix.c: 106:             }
  5577  000FFA  D008               	goto	l327
  5578  000FFC                     l326:
  5579  000FFC  A881               	btfss	129,4,c	;volatile
  5580  000FFE  D002               	goto	l328
  5581                           
  5582                           ;matrix.c: 109:                 column=1;
  5583  001000  0E01               	movlw	1
  5584  001002  D003               	goto	L15
  5585  001004                     l328:
  5586  001004  AA81               	btfss	129,5,c	;volatile
  5587  001006  D002               	goto	l327
  5588                           
  5589                           ;matrix.c: 113:                 column=2;
  5590  001008  0E02               	movlw	2
  5591  00100A                     L15:
  5592  00100A  6E54               	movwf	_column^0,c
  5593  00100C                     l327:
  5594                           
  5595                           ;matrix.c: 115:             state=7;
  5596  00100C  0E07               	movlw	7
  5597  00100E  6E45               	movwf	motorMatrix@state^0,c
  5598                           
  5599                           ;matrix.c: 116:             key=selectChar(column,row);
  5600  001010  EC15  F009         	call	PL80	;call to abstracted procedure
  5601  001014  EC03  F00D         	call	_selectChar
  5602  001018  6E46               	movwf	_key^0,c
  5603                           
  5604                           ;matrix.c: 118:             if(times_pressed==15){
  5605  00101A  0E0F               	movlw	15
  5606  00101C  184F               	xorwf	_times_pressed^0,w,c
  5607  00101E  A4D8               	btfss	status,2,c
  5608  001020  0012               	return	
  5609                           
  5610                           ;matrix.c: 119:                 if(key=='2'){
  5611  001022  0E32               	movlw	50
  5612  001024  1846               	xorwf	_key^0,w,c
  5613  001026  E103               	bnz	l7134
  5614                           
  5615                           ;matrix.c: 120:                    direction='U';
  5616  001028  0E55               	movlw	85
  5617  00102A  6E49               	movwf	_direction^0,c
  5618                           
  5619                           ;matrix.c: 121:                 }else if(key=='8'){
  5620  00102C  0C55               	retlw	85
  5621  00102E                     l7134:
  5622  00102E  0E38               	movlw	56
  5623  001030  1846               	xorwf	_key^0,w,c
  5624  001032  E103               	bnz	l7138
  5625                           
  5626                           ;matrix.c: 122:                    direction='D';
  5627  001034  0E44               	movlw	68
  5628  001036  6E49               	movwf	_direction^0,c
  5629                           
  5630                           ;matrix.c: 123:                 }else if(key=='4'){
  5631  001038  0C44               	retlw	68
  5632  00103A                     l7138:
  5633  00103A  0E34               	movlw	52
  5634  00103C  1846               	xorwf	_key^0,w,c
  5635  00103E  E103               	bnz	l7142
  5636                           
  5637                           ;matrix.c: 124:                     direction='L';
  5638  001040  0E4C               	movlw	76
  5639  001042  6E49               	movwf	_direction^0,c
  5640                           
  5641                           ;matrix.c: 125:                 }else if(key=='6'){
  5642  001044  0C4C               	retlw	76
  5643  001046                     l7142:
  5644  001046  0E36               	movlw	54
  5645  001048  1846               	xorwf	_key^0,w,c
  5646  00104A  A4D8               	btfss	status,2,c
  5647  00104C  0012               	return	
  5648                           
  5649                           ;matrix.c: 126:                     direction='R';
  5650  00104E  0E52               	movlw	82
  5651  001050  6E49               	movwf	_direction^0,c
  5652  001052  0C52               	retlw	82
  5653  001054                     l339:
  5654                           
  5655                           ;matrix.c: 135:         if (!(PORTBbits.RB5==1||PORTBbits.RB4==1||PORTBbits.RB3==1)) {
  5656  001054  AA81               	btfss	129,5,c	;volatile
  5657  001056  B881               	btfsc	129,4,c	;volatile
  5658  001058  0012               	return	
  5659  00105A  B681               	btfsc	129,3,c	;volatile
  5660  00105C  0012               	return	
  5661                           
  5662                           ;matrix.c: 136:             TiResetTics(timer);
  5663  00105E  5047               	movf	_timer^0,w,c
  5664  001060  EC57  F00E         	call	_TiResetTics
  5665                           
  5666                           ;matrix.c: 137:             state=8;
  5667  001064  0E08               	movlw	8
  5668  001066  6E45               	movwf	motorMatrix@state^0,c
  5669  001068  0C08               	retlw	8
  5670  00106A                     l7154:
  5671                           
  5672                           ;matrix.c: 141:    if (TiGetTics(timer) >= 40){
  5673  00106A  5047               	movf	_timer^0,w,c
  5674  00106C  ECC5  F00D         	call	_TiGetTics
  5675  001070  BE5C               	btfsc	(?_TiGetTics+1)^0,7,c
  5676  001072  0012               	return	
  5677  001074  505C               	movf	(?_TiGetTics+1)^0,w,c
  5678  001076  E104               	bnz	u7190
  5679  001078  0E28               	movlw	40
  5680  00107A  5C5B               	subwf	?_TiGetTics^0,w,c
  5681  00107C  A0D8               	btfss	status,0,c
  5682  00107E  0012               	return	
  5683  001080                     u7190:
  5684                           
  5685                           ;matrix.c: 142:                 if(!(PORTBbits.RB5==1||PORTBbits.RB4==1||PORTBbits.RB3==
      +                          1)) {
  5686  001080  AA81               	btfss	129,5,c	;volatile
  5687  001082  B881               	btfsc	129,4,c	;volatile
  5688  001084  D002               	goto	l7164
  5689  001086  A681               	btfss	129,3,c	;volatile
  5690  001088  D79A               	goto	l7102
  5691  00108A                     l7164:
  5692                           
  5693                           ;matrix.c: 146:     state = 7;
  5694  00108A  0E07               	movlw	7
  5695  00108C  6E45               	movwf	motorMatrix@state^0,c
  5696  00108E  0C07               	retlw	7
  5697  001090                     l7168:
  5698  001090  5045               	movf	motorMatrix@state^0,w,c
  5699  001092  6E62               	movwf	??_motorMatrix^0,c
  5700  001094  6A63               	clrf	(??_motorMatrix+1)^0,c
  5701                           
  5702                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5703                           ; Switch size 1, requested type "space"
  5704                           ; Number of cases is 1, Range of values is 0 to 0
  5705                           ; switch strategies available:
  5706                           ; Name         Instructions Cycles
  5707                           ; simple_byte            4     3 (average)
  5708                           ;	Chosen strategy is simple_byte
  5709  001096  5063               	movf	(??_motorMatrix+1)^0,w,c
  5710  001098  A4D8               	btfss	status,2,c
  5711  00109A  0012               	return	
  5712                           
  5713                           ; Switch size 1, requested type "space"
  5714                           ; Number of cases is 9, Range of values is 0 to 8
  5715                           ; switch strategies available:
  5716                           ; Name         Instructions Cycles
  5717                           ; simple_byte           28    15 (average)
  5718                           ;	Chosen strategy is simple_byte
  5719  00109C  5062               	movf	??_motorMatrix^0,w,c
  5720  00109E  E101 D757          	bz	l305
  5721  0010A2  0A01               	xorlw	1	; case 1
  5722  0010A4  E101 D764          	bz	l309
  5723  0010A8  0A03               	xorlw	3	; case 2
  5724  0010AA  E101 D76F          	bz	l312
  5725  0010AE  0A01               	xorlw	1	; case 3
  5726  0010B0  E101 D77A          	bz	l315
  5727  0010B4  0A07               	xorlw	7	; case 4
  5728  0010B6  E085               	bz	l7106
  5729  0010B8  0A01               	xorlw	1	; case 5
  5730  0010BA  E089               	bz	l7110
  5731  0010BC  0A03               	xorlw	3	; case 6
  5732  0010BE  E09A               	bz	l325
  5733  0010C0  0A01               	xorlw	1	; case 7
  5734  0010C2  E0C8               	bz	l339
  5735  0010C4  0A0F               	xorlw	15	; case 8
  5736  0010C6  E0D1               	bz	l7154
  5737  0010C8  0012               	return		;funcret
  5738  0010CA                     __end_of_motorMatrix:
  5739                           	callstack 0
  5740                           
  5741 ;; *************** function _motorJoyStick *****************
  5742 ;; Defined at:
  5743 ;;		line 21 in file "joyStick.c"
  5744 ;; Parameters:    Size  Location     Type
  5745 ;;		None
  5746 ;; Auto vars:     Size  Location     Type
  5747 ;;		None
  5748 ;; Return value:  Size  Location     Type
  5749 ;;                  1    wreg      void 
  5750 ;; Registers used:
  5751 ;;		wreg, status,2, status,0, cstack
  5752 ;; Tracked objects:
  5753 ;;		On entry : 0/0
  5754 ;;		On exit  : 0/0
  5755 ;;		Unchanged: 0/0
  5756 ;; Data sizes:     COMRAM   BANK0   BANK1
  5757 ;;      Params:         0       0       0
  5758 ;;      Locals:         0       0       0
  5759 ;;      Temps:          2       0       0
  5760 ;;      Totals:         2       0       0
  5761 ;;Total ram usage:        2 bytes
  5762 ;; Hardware stack levels used: 1
  5763 ;; Hardware stack levels required when called: 4
  5764 ;; This function calls:
  5765 ;;		_calculate_dist
  5766 ;; This function is called by:
  5767 ;;		_main
  5768 ;; This function uses a non-reentrant model
  5769 ;;
  5770                           
  5771                           	psect	text22
  5772  0013A6                     __ptext22:
  5773                           	callstack 0
  5774  0013A6                     _motorJoyStick:
  5775                           	callstack 26
  5776                           
  5777                           ;joyStick.c: 22:     static char state=0;;joyStick.c: 23:     switch(state){
  5778                           
  5779                           ;incstack = 0
  5780  0013A6  D041               	goto	l3576
  5781  0013A8                     l800:
  5782                           
  5783                           ;joyStick.c: 25:             if(ADCON0bits.GO_DONE==0){
  5784  0013A8  B2C2               	btfsc	194,1,c	;volatile
  5785  0013AA  D007               	goto	l801
  5786                           
  5787                           ;joyStick.c: 26:                 ADCON0bits.CHS0=0;
  5788  0013AC  94C2               	bcf	194,2,c	;volatile
  5789                           
  5790                           ;joyStick.c: 27:                 x=ADRESH;
  5791  0013AE  CFC4 F038          	movff	4036,_x	;volatile
  5792                           
  5793                           ;joyStick.c: 28:                 ADCON0bits.GO_DONE=1;
  5794  0013B2  82C2               	bsf	194,1,c	;volatile
  5795  0013B4                     l3542:
  5796                           
  5797                           ;joyStick.c: 29:                 state=1;
  5798  0013B4  0E01               	movlw	1
  5799  0013B6  6E36               	movwf	motorJoyStick@state^0,c
  5800                           
  5801                           ;joyStick.c: 30:             }else{
  5802  0013B8  0C01               	retlw	1
  5803  0013BA                     l801:
  5804                           
  5805                           ;joyStick.c: 31:                 state=0;
  5806  0013BA  6A36               	clrf	motorJoyStick@state^0,c
  5807  0013BC  0012               	return	
  5808  0013BE                     l804:
  5809                           
  5810                           ;joyStick.c: 35:             if(ADCON0bits.GO_DONE==0){
  5811  0013BE  B2C2               	btfsc	194,1,c	;volatile
  5812  0013C0  D7F9               	goto	l3542
  5813                           
  5814                           ;joyStick.c: 36:                 ADCON0bits.CHS0=1;
  5815  0013C2  84C2               	bsf	194,2,c	;volatile
  5816                           
  5817                           ;joyStick.c: 37:                 y=ADRESH;
  5818  0013C4  CFC4 F037          	movff	4036,_y	;volatile
  5819                           
  5820                           ;joyStick.c: 38:                 ADCON0bits.GO_DONE=1;
  5821  0013C8  82C2               	bsf	194,1,c	;volatile
  5822                           
  5823                           ;joyStick.c: 39:                 state=2;
  5824  0013CA  0E02               	movlw	2
  5825  0013CC  6E36               	movwf	motorJoyStick@state^0,c
  5826                           
  5827                           ;joyStick.c: 40:             }else{
  5828  0013CE  0C02               	retlw	2
  5829  0013D0                     l3550:
  5830                           
  5831                           ;joyStick.c: 45:             if(calculate_dist(x)>calculate_dist(y)){
  5832  0013D0  5037               	movf	_y^0,w,c
  5833  0013D2  EC0A  F00E         	call	_calculate_dist
  5834  0013D6  6E5D               	movwf	??_motorJoyStick^0,c
  5835  0013D8  5038               	movf	_x^0,w,c
  5836  0013DA  EC0A  F00E         	call	_calculate_dist
  5837  0013DE  5C5D               	subwf	??_motorJoyStick^0,w,c
  5838  0013E0  E203               	bc	l3554
  5839                           
  5840                           ;joyStick.c: 46:                 state = 3;
  5841  0013E2  0E03               	movlw	3
  5842  0013E4  6E36               	movwf	motorJoyStick@state^0,c
  5843                           
  5844                           ;joyStick.c: 47:             }else if(calculate_dist(x) < calculate_dist(y)){
  5845  0013E6  0C03               	retlw	3
  5846  0013E8                     l3554:
  5847  0013E8  5038               	movf	_x^0,w,c
  5848  0013EA  EC0A  F00E         	call	_calculate_dist
  5849  0013EE  6E5D               	movwf	??_motorJoyStick^0,c
  5850  0013F0  5037               	movf	_y^0,w,c
  5851  0013F2  EC0A  F00E         	call	_calculate_dist
  5852  0013F6  5C5D               	subwf	??_motorJoyStick^0,w,c
  5853  0013F8  E2E0               	bc	l801
  5854                           
  5855                           ;joyStick.c: 48:                 state = 4;
  5856  0013FA  0E04               	movlw	4
  5857  0013FC  6E36               	movwf	motorJoyStick@state^0,c
  5858                           
  5859                           ;joyStick.c: 49:             }else{
  5860  0013FE  0C04               	retlw	4
  5861  001400                     l3558:
  5862                           
  5863                           ;joyStick.c: 55:             if(x > 255-100){
  5864  001400  0E9B               	movlw	155
  5865  001402  6438               	cpfsgt	_x^0,c
  5866  001404  D002               	goto	l3562
  5867                           
  5868                           ;joyStick.c: 58:                 direction = 'R';
  5869  001406  0E52               	movlw	82
  5870  001408  D00E               	goto	L18
  5871  00140A                     l3562:
  5872  00140A  0E64               	movlw	100
  5873  00140C  6038               	cpfslt	_x^0,c
  5874  00140E  D7D5               	goto	l801
  5875                           
  5876                           ;joyStick.c: 63:                 direction = 'L';
  5877  001410  0E4C               	movlw	76
  5878  001412  D009               	goto	L18
  5879  001414                     l3566:
  5880                           
  5881                           ;joyStick.c: 70:             if(y > 255-100){
  5882  001414  0E9B               	movlw	155
  5883  001416  6437               	cpfsgt	_y^0,c
  5884  001418  D002               	goto	l3570
  5885                           
  5886                           ;joyStick.c: 74:                 direction = 'U';
  5887  00141A  0E55               	movlw	85
  5888  00141C  D004               	goto	L18
  5889  00141E                     l3570:
  5890  00141E  0E64               	movlw	100
  5891  001420  6037               	cpfslt	_y^0,c
  5892  001422  D7CB               	goto	l801
  5893                           
  5894                           ;joyStick.c: 79:                 direction = 'D';
  5895  001424  0E44               	movlw	68
  5896  001426                     L18:
  5897  001426  6E49               	movwf	_direction^0,c
  5898                           
  5899                           ;joyStick.c: 80:             }else{
  5900  001428  D7C8               	goto	l801
  5901  00142A                     l3576:
  5902  00142A  5036               	movf	motorJoyStick@state^0,w,c
  5903  00142C  6E5D               	movwf	??_motorJoyStick^0,c
  5904  00142E  6A5E               	clrf	(??_motorJoyStick+1)^0,c
  5905                           
  5906                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5907                           ; Switch size 1, requested type "space"
  5908                           ; Number of cases is 1, Range of values is 0 to 0
  5909                           ; switch strategies available:
  5910                           ; Name         Instructions Cycles
  5911                           ; simple_byte            4     3 (average)
  5912                           ;	Chosen strategy is simple_byte
  5913  001430  505E               	movf	(??_motorJoyStick+1)^0,w,c
  5914  001432  A4D8               	btfss	status,2,c
  5915  001434  0012               	return	
  5916                           
  5917                           ; Switch size 1, requested type "space"
  5918                           ; Number of cases is 5, Range of values is 0 to 4
  5919                           ; switch strategies available:
  5920                           ; Name         Instructions Cycles
  5921                           ; simple_byte           16     9 (average)
  5922                           ;	Chosen strategy is simple_byte
  5923  001436  505D               	movf	??_motorJoyStick^0,w,c
  5924  001438  E0B7               	bz	l800
  5925  00143A  0A01               	xorlw	1	; case 1
  5926  00143C  E0C0               	bz	l804
  5927  00143E  0A03               	xorlw	3	; case 2
  5928  001440  E0C7               	bz	l3550
  5929  001442  0A01               	xorlw	1	; case 3
  5930  001444  E0DD               	bz	l3558
  5931  001446  0A07               	xorlw	7	; case 4
  5932  001448  E0E5               	bz	l3566
  5933  00144A  0012               	return		;funcret
  5934  00144C                     __end_of_motorJoyStick:
  5935                           	callstack 0
  5936                           
  5937 ;; *************** function _calculate_dist *****************
  5938 ;; Defined at:
  5939 ;;		line 87 in file "joyStick.c"
  5940 ;; Parameters:    Size  Location     Type
  5941 ;;  num             1    wreg     unsigned char 
  5942 ;; Auto vars:     Size  Location     Type
  5943 ;;  num             1    7[COMRAM] unsigned char 
  5944 ;;  dist            1    6[COMRAM] unsigned char 
  5945 ;; Return value:  Size  Location     Type
  5946 ;;                  1    wreg      unsigned char 
  5947 ;; Registers used:
  5948 ;;		wreg, status,2, status,0
  5949 ;; Tracked objects:
  5950 ;;		On entry : 0/0
  5951 ;;		On exit  : 0/0
  5952 ;;		Unchanged: 0/0
  5953 ;; Data sizes:     COMRAM   BANK0   BANK1
  5954 ;;      Params:         0       0       0
  5955 ;;      Locals:         2       0       0
  5956 ;;      Temps:          0       0       0
  5957 ;;      Totals:         2       0       0
  5958 ;;Total ram usage:        2 bytes
  5959 ;; Hardware stack levels used: 1
  5960 ;; Hardware stack levels required when called: 3
  5961 ;; This function calls:
  5962 ;;		Nothing
  5963 ;; This function is called by:
  5964 ;;		_motorJoyStick
  5965 ;; This function uses a non-reentrant model
  5966 ;;
  5967                           
  5968                           	psect	text23
  5969  001C14                     __ptext23:
  5970                           	callstack 0
  5971  001C14                     _calculate_dist:
  5972                           	callstack 26
  5973                           
  5974                           ;incstack = 0
  5975                           ;calculate_dist@num stored from wreg
  5976  001C14  6E5C               	movwf	calculate_dist@num^0,c
  5977                           
  5978                           ;joyStick.c: 88:     char dist = 0;
  5979  001C16  6A5B               	clrf	calculate_dist@dist^0,c
  5980                           
  5981                           ;joyStick.c: 89:     if(num>128){
  5982  001C18  0E80               	movlw	128
  5983  001C1A  645C               	cpfsgt	calculate_dist@num^0,c
  5984  001C1C  D003               	goto	l2958
  5985                           
  5986                           ;joyStick.c: 90:         dist=num - 128;
  5987  001C1E  505C               	movf	calculate_dist@num^0,w,c
  5988  001C20  0F80               	addlw	128
  5989  001C22  D005               	goto	L19
  5990  001C24                     l2958:
  5991  001C24  0E80               	movlw	128
  5992  001C26  605C               	cpfslt	calculate_dist@num^0,c
  5993  001C28  D003               	goto	l2962
  5994                           
  5995                           ;joyStick.c: 92:         dist=128-num;
  5996  001C2A  505C               	movf	calculate_dist@num^0,w,c
  5997  001C2C  0880               	sublw	128
  5998  001C2E                     L19:
  5999  001C2E  6E5B               	movwf	calculate_dist@dist^0,c
  6000  001C30                     l2962:
  6001                           
  6002                           ;joyStick.c: 94:     return dist;
  6003  001C30  505B               	movf	calculate_dist@dist^0,w,c
  6004  001C32  0012               	return		;funcret
  6005  001C34                     __end_of_calculate_dist:
  6006                           	callstack 0
  6007                           
  6008 ;; *************** function _motorEusart *****************
  6009 ;; Defined at:
  6010 ;;		line 24 in file "Eusart.c"
  6011 ;; Parameters:    Size  Location     Type
  6012 ;;		None
  6013 ;; Auto vars:     Size  Location     Type
  6014 ;;		None
  6015 ;; Return value:  Size  Location     Type
  6016 ;;                  1    wreg      void 
  6017 ;; Registers used:
  6018 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6019 ;; Tracked objects:
  6020 ;;		On entry : 0/0
  6021 ;;		On exit  : 0/0
  6022 ;;		Unchanged: 0/0
  6023 ;; Data sizes:     COMRAM   BANK0   BANK1
  6024 ;;      Params:         0       0       0
  6025 ;;      Locals:         0       0       0
  6026 ;;      Temps:          0       5       0
  6027 ;;      Totals:         0       5       0
  6028 ;;Total ram usage:        5 bytes
  6029 ;; Hardware stack levels used: 1
  6030 ;; Hardware stack levels required when called: 9
  6031 ;; This function calls:
  6032 ;;		_InitSpeaker
  6033 ;;		_LcClear
  6034 ;;		_LcGotoXY
  6035 ;;		_LcPutChar
  6036 ;;		_PrintData
  6037 ;;		_ScoreDigits
  6038 ;;		_TiGetTics
  6039 ;;		_TiResetTics
  6040 ;;		_motorSpeaker
  6041 ;;		_selectChar
  6042 ;; This function is called by:
  6043 ;;		_main
  6044 ;; This function uses a non-reentrant model
  6045 ;;
  6046                           
  6047                           	psect	text24
  6048  00002A                     __ptext24:
  6049                           	callstack 0
  6050  00002A                     _motorEusart:
  6051                           	callstack 21
  6052                           
  6053                           ;Eusart.c: 26:     switch(stateEus){
  6054                           
  6055                           ;incstack = 0
  6056  00002A  D134               	goto	l7476
  6057  00002C                     l7296:
  6058                           
  6059                           ; BSR set to: 0
  6060                           ;Eusart.c: 29:             LcClear();
  6061  00002C  EC8A  F00E         	call	_LcClear	;wreg free
  6062                           
  6063                           ;Eusart.c: 30:             if(startGame=='Y'){
  6064  000030  0E59               	movlw	89
  6065  000032  184E               	xorwf	_startGame^0,w,c
  6066  000034  A4D8               	btfss	status,2,c
  6067  000036  0012               	return	
  6068                           
  6069                           ;Eusart.c: 31:               if(TXSTAbits.TRMT==1){
  6070  000038  A2AC               	btfss	172,1,c	;volatile
  6071  00003A  D009               	goto	l7314
  6072                           
  6073                           ;Eusart.c: 33:                   if(!times3){
  6074  00003C  5020               	movf	_times3^0,w,c
  6075  00003E  E103               	bnz	l7308
  6076                           
  6077                           ;Eusart.c: 34:                     TXREG=startGame;
  6078  000040  C04E  FFAD         	movff	_startGame,4013	;volatile
  6079                           
  6080                           ;Eusart.c: 35:                     times3=times3+1;
  6081  000044  2A20               	incf	_times3^0,f,c
  6082  000046                     l7308:
  6083                           
  6084                           ;Eusart.c: 38:                     stateEus=1;
  6085  000046  0E01               	movlw	1
  6086  000048  6E1C               	movwf	_stateEus^0,c
  6087                           
  6088                           ;Eusart.c: 39:                     digit=0;
  6089  00004A  6A4B               	clrf	_digit^0,c
  6090                           
  6091                           ;Eusart.c: 40:                     rowi=0;
  6092  00004C  6A50               	clrf	_rowi^0,c
  6093  00004E                     l7314:
  6094                           
  6095                           ;Eusart.c: 43:               TiResetTics(timerEusart);
  6096  00004E  501E               	movf	_timerEusart^0,w,c
  6097  000050  EF57  F00E         	goto	_TiResetTics
  6098  000054                     l7316:
  6099                           
  6100                           ; BSR set to: 0
  6101                           ;Eusart.c: 49:             LcGotoXY(rowi,0);
  6102  000054  6A63               	clrf	LcGotoXY@Row^0,c
  6103  000056  5050               	movf	_rowi^0,w,c
  6104  000058  EC75  F00A         	call	_LcGotoXY
  6105                           
  6106                           ;Eusart.c: 50:             if(users[user_selected].username[rowi]!='\0'){
  6107  00005C  504D               	movf	_user_selected^0,w,c
  6108  00005E  0D0E               	mullw	14
  6109  000060  0ED7               	movlw	low _users
  6110  000062  0100               	movlb	0	; () banked
  6111  000064  D936               	call	PL6	;call to abstracted procedure
  6112  000066  E006               	bz	l7324
  6113                           
  6114                           ; BSR set to: 0
  6115                           ;Eusart.c: 51:                 LcPutChar(users[user_selected].username[rowi]);
  6116  000068  D943               	call	PL8	;call to abstracted procedure
  6117  00006A  D933               	call	PL6	;call to abstracted procedure
  6118  00006C  EC30  F00C         	call	_LcPutChar
  6119  000070                     l7322:
  6120                           
  6121                           ;Eusart.c: 52:                 rowi=rowi+1;
  6122  000070  2A50               	incf	_rowi^0,f,c
  6123                           
  6124                           ;Eusart.c: 54:             }else if(users[user_selected].username[rowi]=='\0'){
  6125  000072  0012               	return	
  6126  000074                     l7324:
  6127                           
  6128                           ; BSR set to: 0
  6129  000074  D93D               	call	PL8	;call to abstracted procedure
  6130  000076  D92D               	call	PL6	;call to abstracted procedure
  6131  000078  A4D8               	btfss	status,2,c
  6132  00007A  0012               	return	
  6133                           
  6134                           ; BSR set to: 0
  6135                           ;Eusart.c: 55:                 PrintData(0,1,'T',0);
  6136  00007C  0E01               	movlw	1
  6137  00007E  6E6C               	movwf	PrintData@f^0,c
  6138  000080  0E54               	movlw	84
  6139  000082  6E6D               	movwf	PrintData@characters^0,c
  6140  000084  0E00               	movlw	0
  6141  000086  6A6E               	clrf	PrintData@yes^0,c
  6142  000088  EC2A  F00E         	call	_PrintData
  6143                           
  6144                           ;Eusart.c: 56:                 PrintData(2,1,min[1],1);
  6145  00008C  D96F               	call	PL74	;call to abstracted procedure
  6146  00008E  EC2A  F00E         	call	_PrintData
  6147                           
  6148                           ;Eusart.c: 57:                 PrintData(3,1,min[0],1);
  6149  000092  D966               	call	PL72	;call to abstracted procedure
  6150  000094  EC2A  F00E         	call	_PrintData
  6151                           
  6152                           ;Eusart.c: 58:                 PrintData(4,1,':',0);
  6153  000098  D95D               	call	PL62	;call to abstracted procedure
  6154  00009A  0E04               	movlw	4
  6155  00009C  EC2A  F00E         	call	_PrintData
  6156                           
  6157                           ;Eusart.c: 59:                 PrintData(5,1,sec[1],1);
  6158  0000A0  D96B               	call	PL76	;call to abstracted procedure
  6159  0000A2  EC2A  F00E         	call	_PrintData
  6160                           
  6161                           ;Eusart.c: 60:                 PrintData(6,1,sec[0],1);
  6162  0000A6  D947               	call	PL42	;call to abstracted procedure
  6163  0000A8  EC2A  F00E         	call	_PrintData
  6164                           
  6165                           ;Eusart.c: 61:                 PrintData(8,1,'|',0);
  6166  0000AC  0E01               	movlw	1
  6167  0000AE  6E6C               	movwf	PrintData@f^0,c
  6168  0000B0  0E7C               	movlw	124
  6169  0000B2  6E6D               	movwf	PrintData@characters^0,c
  6170  0000B4  6A6E               	clrf	PrintData@yes^0,c
  6171  0000B6  0E08               	movlw	8
  6172  0000B8  EC2A  F00E         	call	_PrintData
  6173                           
  6174                           ;Eusart.c: 62:                 PrintData(10,1,'S',0);
  6175  0000BC  0E01               	movlw	1
  6176  0000BE  6E6C               	movwf	PrintData@f^0,c
  6177  0000C0  0E53               	movlw	83
  6178  0000C2  6E6D               	movwf	PrintData@characters^0,c
  6179  0000C4  6A6E               	clrf	PrintData@yes^0,c
  6180  0000C6  0E0A               	movlw	10
  6181  0000C8  EC2A  F00E         	call	_PrintData
  6182                           
  6183                           ;Eusart.c: 63:                 PrintData(12,1,current_score[2],1);
  6184  0000CC  ECD1  F006         	call	PL90	;call to abstracted procedure
  6185  0000D0  0E0C               	movlw	12
  6186  0000D2  EC2A  F00E         	call	_PrintData
  6187                           
  6188                           ;Eusart.c: 64:                 PrintData(13,1,current_score[1],1);
  6189  0000D6  ECCB  F006         	call	PL88	;call to abstracted procedure
  6190  0000DA  0E0D               	movlw	13
  6191  0000DC  EC2A  F00E         	call	_PrintData
  6192                           
  6193                           ;Eusart.c: 65:                 PrintData(14,1,current_score[0],1);
  6194  0000E0  ECC5  F006         	call	PL84	;call to abstracted procedure
  6195  0000E4  0E0E               	movlw	14
  6196  0000E6  EC2A  F00E         	call	_PrintData
  6197                           
  6198                           ;Eusart.c: 66:                   stateEus=2;
  6199  0000EA  0E02               	movlw	2
  6200  0000EC  6E1C               	movwf	_stateEus^0,c
  6201  0000EE                     l7330:
  6202                           
  6203                           ;Eusart.c: 67:                   rowi=0;
  6204  0000EE  6A50               	clrf	_rowi^0,c
  6205  0000F0  0012               	return	
  6206  0000F2                     l7332:
  6207                           
  6208                           ; BSR set to: 0
  6209                           ;Eusart.c: 71:             if(users[user_selected].username[rowi]!='\0'){
  6210  0000F2  D8FE               	call	PL8	;call to abstracted procedure
  6211  0000F4  D8EE               	call	PL6	;call to abstracted procedure
  6212  0000F6  E006               	bz	l7340
  6213                           
  6214                           ; BSR set to: 0
  6215                           ;Eusart.c: 72:                 if(TXSTAbits.TRMT==1){
  6216  0000F8  A2AC               	btfss	172,1,c	;volatile
  6217  0000FA  0012               	return	
  6218                           
  6219                           ; BSR set to: 0
  6220                           ;Eusart.c: 73:                     TXREG=users[user_selected].username[rowi];
  6221  0000FC  D8F9               	call	PL8	;call to abstracted procedure
  6222  0000FE  D8E9               	call	PL6	;call to abstracted procedure
  6223  000100  6EAD               	movwf	173,c	;volatile
  6224  000102  D7B6               	goto	l7322
  6225  000104                     l7340:
  6226                           
  6227                           ; BSR set to: 0
  6228                           ;Eusart.c: 77:                   stateEus=3;
  6229  000104  0E03               	movlw	3
  6230  000106  6E1C               	movwf	_stateEus^0,c
  6231                           
  6232                           ; BSR set to: 0
  6233                           ;Eusart.c: 78:                   seconds_aux=0;
  6234  000108  6A1F               	clrf	_seconds_aux^0,c
  6235                           
  6236                           ; BSR set to: 0
  6237                           ;Eusart.c: 79:                   times3=0;
  6238  00010A  6A20               	clrf	_times3^0,c
  6239  00010C  0012               	return	
  6240  00010E                     l7346:
  6241                           
  6242                           ; BSR set to: 0
  6243                           ;Eusart.c: 84:            motorSpeaker();
  6244  00010E  EC26  F00A         	call	_motorSpeaker	;wreg free
  6245                           
  6246                           ;Eusart.c: 85:             if (TiGetTics(timerEusart) >= 2000) {
  6247  000112  501E               	movf	_timerEusart^0,w,c
  6248  000114  ECC5  F00D         	call	_TiGetTics
  6249  000118  BE5C               	btfsc	(?_TiGetTics+1)^0,7,c
  6250  00011A  D037               	goto	l7388
  6251  00011C  EC62  F00A         	call	PL44	;call to abstracted procedure
  6252  000120  E334               	bnc	l7388
  6253                           
  6254                           ;Eusart.c: 87:                         times3=0;
  6255  000122  6A20               	clrf	_times3^0,c
  6256                           
  6257                           ;Eusart.c: 88:                         TiResetTics(timerEusart);
  6258  000124  501E               	movf	_timerEusart^0,w,c
  6259  000126  EC57  F00E         	call	_TiResetTics
  6260                           
  6261                           ;Eusart.c: 90:                         seconds_aux='+';
  6262  00012A  0E2B               	movlw	43
  6263  00012C  6E1F               	movwf	_seconds_aux^0,c
  6264                           
  6265                           ;Eusart.c: 92:                             sec[0]=sec[0]+1;
  6266  00012E  2A0D               	incf	_sec^0,f,c
  6267                           
  6268                           ;Eusart.c: 93:                             PrintData(6,1,sec[0],1);
  6269  000130  D902               	call	PL42	;call to abstracted procedure
  6270  000132  EC2A  F00E         	call	_PrintData
  6271                           
  6272                           ;Eusart.c: 94:                             if(sec[0]==10){
  6273  000136  0E0A               	movlw	10
  6274  000138  180D               	xorwf	_sec^0,w,c
  6275  00013A  E102               	bnz	l1537
  6276                           
  6277                           ;Eusart.c: 95:                                 sec[0]=0;
  6278  00013C  6A0D               	clrf	_sec^0,c
  6279                           
  6280                           ;Eusart.c: 96:                                 sec[1]=sec[1]+1;
  6281  00013E  2A0E               	incf	(_sec+1)^0,f,c
  6282  000140                     l1537:
  6283  000140  0E06               	movlw	6
  6284  000142  180E               	xorwf	(_sec+1)^0,w,c
  6285  000144  E102               	bnz	l7368
  6286                           
  6287                           ;Eusart.c: 99:                                 sec[1]=0;
  6288  000146  6A0E               	clrf	(_sec+1)^0,c
  6289                           
  6290                           ;Eusart.c: 100:                                 min[0]=min[0]+1;
  6291  000148  2A0B               	incf	_min^0,f,c
  6292  00014A                     l7368:
  6293                           
  6294                           ;Eusart.c: 103:                             if(min[0]==10){
  6295  00014A  0E0A               	movlw	10
  6296  00014C  180B               	xorwf	_min^0,w,c
  6297  00014E  E102               	bnz	l1539
  6298                           
  6299                           ;Eusart.c: 104:                                 min[0]=0;
  6300  000150  6A0B               	clrf	_min^0,c
  6301                           
  6302                           ;Eusart.c: 105:                                 min[1]=min[1]+1;
  6303  000152  2A0C               	incf	(_min+1)^0,f,c
  6304  000154                     l1539:
  6305                           
  6306                           ;Eusart.c: 108:                             if(min[1]==6){
  6307  000154  0E06               	movlw	6
  6308  000156  180C               	xorwf	(_min+1)^0,w,c
  6309  000158  E102               	bnz	l7376
  6310                           
  6311                           ;Eusart.c: 109:                                 sec[1]=0;
  6312                           
  6313                           ;Eusart.c: 110:                                 sec[0]=0;
  6314                           
  6315                           ;Eusart.c: 111:                                 min[1]=0;
  6316                           
  6317                           ;Eusart.c: 112:                                 min[0]=0;
  6318  00015A  EC5B  F00D         	call	PL110	;call to abstracted procedure
  6319  00015E                     l7376:
  6320                           
  6321                           ;Eusart.c: 115:                             PrintData(2,1,min[1],1);
  6322  00015E  D906               	call	PL74	;call to abstracted procedure
  6323  000160  EC2A  F00E         	call	_PrintData
  6324                           
  6325                           ;Eusart.c: 116:                             PrintData(3,1,min[0],1);
  6326  000164  D8FD               	call	PL72	;call to abstracted procedure
  6327  000166  EC2A  F00E         	call	_PrintData
  6328                           
  6329                           ;Eusart.c: 117:                             PrintData(5,1,sec[1],1);
  6330  00016A  D906               	call	PL76	;call to abstracted procedure
  6331  00016C  EC2A  F00E         	call	_PrintData
  6332                           
  6333                           ;Eusart.c: 118:                             PrintData(6,1,sec[0],1);
  6334  000170  D8E2               	call	PL42	;call to abstracted procedure
  6335  000172  EC2A  F00E         	call	_PrintData
  6336                           
  6337                           ;Eusart.c: 119:                             if(TXSTAbits.TRMT==1){
  6338  000176  A2AC               	btfss	172,1,c	;volatile
  6339  000178  0012               	return	
  6340                           
  6341                           ;Eusart.c: 120:                                if(!times3){
  6342  00017A  5020               	movf	_times3^0,w,c
  6343  00017C  A4D8               	btfss	status,2,c
  6344  00017E  0012               	return	
  6345                           
  6346                           ;Eusart.c: 121:                                 TXREG=(seconds_aux);
  6347  000180  C01F  FFAD         	movff	_seconds_aux,4013	;volatile
  6348                           
  6349                           ;Eusart.c: 122:                                 times3=times3+1;
  6350  000184  2A20               	incf	_times3^0,f,c
  6351                           
  6352                           ;Eusart.c: 123:                                 seconds_aux=0;
  6353  000186  6A1F               	clrf	_seconds_aux^0,c
  6354  000188  0012               	return	
  6355  00018A                     l7388:
  6356                           
  6357                           ;Eusart.c: 128:                 stateEus=4;
  6358  00018A  0E04               	movlw	4
  6359  00018C  6E1C               	movwf	_stateEus^0,c
  6360                           
  6361                           ;Eusart.c: 129:                 digit=0;
  6362  00018E  6A4B               	clrf	_digit^0,c
  6363  000190  0012               	return	
  6364  000192                     l1544:
  6365                           
  6366                           ; BSR set to: 0
  6367                           ;Eusart.c: 134:             if(TXSTAbits.TRMT==1){
  6368  000192  A2AC               	btfss	172,1,c	;volatile
  6369  000194  D006               	goto	l1545
  6370                           
  6371                           ; BSR set to: 0
  6372                           ;Eusart.c: 135:                 TXREG=direction;
  6373  000196  C049  FFAD         	movff	_direction,4013	;volatile
  6374                           
  6375                           ;Eusart.c: 136:                 direction=0;
  6376  00019A  6A49               	clrf	_direction^0,c
  6377  00019C                     l7394:
  6378                           
  6379                           ;Eusart.c: 137:                 stateEus=3;
  6380  00019C  0E03               	movlw	3
  6381  00019E  6E1C               	movwf	_stateEus^0,c
  6382                           
  6383                           ;Eusart.c: 138:             }
  6384  0001A0  0C03               	retlw	3
  6385  0001A2                     l1545:
  6386                           
  6387                           ; BSR set to: 0
  6388  0001A2  AA9E               	btfss	158,5,c	;volatile
  6389  0001A4  D7FB               	goto	l7394
  6390                           
  6391                           ; BSR set to: 0
  6392                           ;Eusart.c: 140:                 data=(int)(RCREG);
  6393  0001A6  CFAE F021          	movff	4014,_data	;volatile
  6394                           
  6395                           ; BSR set to: 0
  6396                           ;Eusart.c: 141:                 if(data!=250){
  6397  0001AA  0EFA               	movlw	250
  6398  0001AC  1821               	xorwf	_data^0,w,c
  6399  0001AE  E019               	bz	l7410
  6400                           
  6401                           ; BSR set to: 0
  6402                           ;Eusart.c: 142:                     if(data<=200){
  6403  0001B0  0EC9               	movlw	201
  6404  0001B2  6021               	cpfslt	_data^0,c
  6405  0001B4  D7F3               	goto	l7394
  6406                           
  6407                           ; BSR set to: 0
  6408                           ;Eusart.c: 143:                         if(data>users[user_selected].score){
  6409  0001B6  D8BA               	call	PL40	;call to abstracted procedure
  6410  0001B8  D89F               	call	PL10	;call to abstracted procedure
  6411  0001BA  51D0               	movf	??_motorEusart& (0+255),w,b
  6412  0001BC  5CDE               	subwf	postinc2,w,c
  6413  0001BE  50DE               	movf	postinc2,w,c
  6414  0001C0  0A80               	xorlw	128
  6415  0001C2  6FD4               	movwf	(??_motorEusart+4)& (0+255),b
  6416  0001C4  51D1               	movf	(??_motorEusart+1)& (0+255),w,b
  6417  0001C6  0A80               	xorlw	128
  6418  0001C8  59D4               	subwfb	(??_motorEusart+4)& (0+255),w,b
  6419  0001CA  E206               	bc	l7406
  6420                           
  6421                           ; BSR set to: 0
  6422                           ;Eusart.c: 145:                             num_users=0;
  6423  0001CC  D8AF               	call	PL40	;call to abstracted procedure
  6424  0001CE  D894               	call	PL10	;call to abstracted procedure
  6425  0001D0  C0D0  FFDE         	movff	??_motorEusart,postinc2
  6426  0001D4  C0D1  FFDD         	movff	??_motorEusart+1,postdec2
  6427  0001D8                     l7406:
  6428                           
  6429                           ; BSR set to: 0
  6430                           ;Eusart.c: 148:                         ScoreDigits(data,12,13,14,1);
  6431  0001D8  D8B4               	call	PL48	;call to abstracted procedure
  6432  0001DA  5021               	movf	_data^0,w,c
  6433  0001DC  EC5A  F00C         	call	_ScoreDigits
  6434  0001E0  D7DD               	goto	l7394
  6435  0001E2                     l7410:
  6436                           
  6437                           ; BSR set to: 0
  6438                           ;Eusart.c: 154:                     stateEus=5;
  6439  0001E2  0E05               	movlw	5
  6440  0001E4  6E1C               	movwf	_stateEus^0,c
  6441                           
  6442                           ; BSR set to: 0
  6443                           ;Eusart.c: 155:                     digit=0;
  6444  0001E6  6A4B               	clrf	_digit^0,c
  6445  0001E8  D782               	goto	l7330
  6446  0001EA                     l7418:
  6447                           
  6448                           ; BSR set to: 0
  6449                           ;Eusart.c: 165:             LcGotoXY(rowi,0);
  6450  0001EA  6A63               	clrf	LcGotoXY@Row^0,c
  6451  0001EC  5050               	movf	_rowi^0,w,c
  6452  0001EE  EC75  F00A         	call	_LcGotoXY
  6453                           
  6454                           ;Eusart.c: 166:             if(score[rowi]!='\0'){
  6455  0001F2  D88A               	call	PL32	;call to abstracted procedure
  6456  0001F4  E004               	bz	l7426
  6457                           
  6458                           ;Eusart.c: 167:                 LcPutChar(score[rowi]);
  6459  0001F6  D888               	call	PL32	;call to abstracted procedure
  6460  0001F8  EC30  F00C         	call	_LcPutChar
  6461  0001FC  D739               	goto	l7322
  6462  0001FE                     l7426:
  6463  0001FE  D884               	call	PL32	;call to abstracted procedure
  6464  000200  A4D8               	btfss	status,2,c
  6465  000202  0012               	return	
  6466                           
  6467                           ;Eusart.c: 170:                 PrintData(7,0,current_score[2],1);
  6468  000204  6A6C               	clrf	PrintData@f^0,c
  6469  000206  EC7C  F00C         	call	PL96	;call to abstracted procedure
  6470  00020A  0E07               	movlw	7
  6471  00020C  EC2A  F00E         	call	_PrintData
  6472                           
  6473                           ;Eusart.c: 171:                 PrintData(8,0,current_score[1],1);
  6474  000210  6A6C               	clrf	PrintData@f^0,c
  6475  000212  EC77  F00C         	call	PL94	;call to abstracted procedure
  6476  000216  0E08               	movlw	8
  6477  000218  EC2A  F00E         	call	_PrintData
  6478                           
  6479                           ;Eusart.c: 172:                 PrintData(9,0,current_score[0],1);
  6480  00021C  6A6C               	clrf	PrintData@f^0,c
  6481  00021E  EC72  F00C         	call	PL92	;call to abstracted procedure
  6482  000222  0E09               	movlw	9
  6483  000224  EC2A  F00E         	call	_PrintData
  6484                           
  6485                           ;Eusart.c: 173:                 stateEus=6;
  6486  000228  0E06               	movlw	6
  6487  00022A  D760               	goto	L20
  6488  00022C                     l7434:
  6489                           
  6490                           ; BSR set to: 0
  6491                           ;Eusart.c: 179:             LcGotoXY(rowi,1);
  6492  00022C  D8AB               	call	PL114	;call to abstracted procedure
  6493  00022E  EC75  F00A         	call	_LcGotoXY
  6494                           
  6495                           ;Eusart.c: 180:             if(HighScore[rowi]!='\0'){
  6496  000232  D873               	call	PL34	;call to abstracted procedure
  6497  000234  E004               	bz	l7442
  6498                           
  6499                           ;Eusart.c: 181:                 LcPutChar(HighScore[rowi]);
  6500  000236  D871               	call	PL34	;call to abstracted procedure
  6501  000238  EC30  F00C         	call	_LcPutChar
  6502  00023C  D719               	goto	l7322
  6503  00023E                     l7442:
  6504  00023E  D86D               	call	PL34	;call to abstracted procedure
  6505  000240  A4D8               	btfss	status,2,c
  6506  000242  0012               	return	
  6507                           
  6508                           ;Eusart.c: 184:                 ScoreDigits(users[user_selected].score,12,13,14,1);
  6509  000244  D87E               	call	PL48	;call to abstracted procedure
  6510  000246  504D               	movf	_user_selected^0,w,c
  6511  000248  D857               	call	PL10	;call to abstracted procedure
  6512  00024A  50DF               	movf	indf2,w,c
  6513  00024C  EC5A  F00C         	call	_ScoreDigits
  6514                           
  6515                           ;Eusart.c: 185:                 stateEus=7;
  6516  000250  0E07               	movlw	7
  6517  000252  6E1C               	movwf	_stateEus^0,c
  6518                           
  6519                           ;Eusart.c: 186:                 LcGotoXY(rowi,1);
  6520  000254  D897               	call	PL114	;call to abstracted procedure
  6521  000256  EC75  F00A         	call	_LcGotoXY
  6522  00025A  D749               	goto	l7330
  6523  00025C                     l1561:
  6524                           
  6525                           ; BSR set to: 0
  6526                           ;Eusart.c: 191:             if((PORTBbits.RB5==1||PORTBbits.RB4==1||PORTBbits.RB3==1)){
  6527  00025C  AA81               	btfss	129,5,c	;volatile
  6528                           
  6529                           ; BSR set to: 0
  6530  00025E  B881               	btfsc	129,4,c	;volatile
  6531  000260  D002               	goto	u7660
  6532                           
  6533                           ; BSR set to: 0
  6534  000262  A681               	btfss	129,3,c	;volatile
  6535  000264  0012               	return	
  6536  000266                     u7660:
  6537                           
  6538                           ; BSR set to: 0
  6539                           ;Eusart.c: 192:                 stateEus=8;
  6540  000266  0E08               	movlw	8
  6541  000268  6E1C               	movwf	_stateEus^0,c
  6542  00026A  0C08               	retlw	8
  6543  00026C                     l7458:
  6544                           
  6545                           ; BSR set to: 0
  6546                           ;Eusart.c: 198:             keyEus=selectChar(column,row);
  6547  00026C  EC15  F009         	call	PL80	;call to abstracted procedure
  6548  000270  EC03  F00D         	call	_selectChar
  6549  000274  6E1D               	movwf	_keyEus^0,c
  6550                           
  6551                           ;Eusart.c: 199:             if(!(PORTBbits.RB5==1||PORTBbits.RB4==1||PORTBbits.RB3==1)){
  6552  000276  AA81               	btfss	129,5,c	;volatile
  6553  000278  B881               	btfsc	129,4,c	;volatile
  6554  00027A  0012               	return	
  6555  00027C  B681               	btfsc	129,3,c	;volatile
  6556  00027E  0012               	return	
  6557                           
  6558                           ;Eusart.c: 201:                 if(keyEus=='#'){
  6559  000280  0E23               	movlw	35
  6560  000282  181D               	xorwf	_keyEus^0,w,c
  6561  000284  A4D8               	btfss	status,2,c
  6562  000286  0012               	return	
  6563                           
  6564                           ;Eusart.c: 202:                     LcClear();
  6565  000288  EC8A  F00E         	call	_LcClear	;wreg free
  6566                           
  6567                           ;Eusart.c: 203:                     times_pressed=0;
  6568  00028C  6A4F               	clrf	_times_pressed^0,c
  6569                           
  6570                           ;Eusart.c: 204:                     stateEus=0;
  6571  00028E  6A1C               	clrf	_stateEus^0,c
  6572                           
  6573                           ;Eusart.c: 205:                     InitSpeaker();
  6574  000290  EFD8  F00D         	goto	_InitSpeaker	;wreg free
  6575  000294                     l7476:
  6576  000294  501C               	movf	_stateEus^0,w,c
  6577  000296  0100               	movlb	0	; () banked
  6578  000298  6FD0               	movwf	??_motorEusart& (0+255),b
  6579  00029A  6BD1               	clrf	(??_motorEusart+1)& (0+255),b
  6580                           
  6581                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  6582                           ; Switch size 1, requested type "space"
  6583                           ; Number of cases is 1, Range of values is 0 to 0
  6584                           ; switch strategies available:
  6585                           ; Name         Instructions Cycles
  6586                           ; simple_byte            4     3 (average)
  6587                           ;	Chosen strategy is simple_byte
  6588  00029C  51D1               	movf	(??_motorEusart+1)& (0+255),w,b
  6589  00029E  A4D8               	btfss	status,2,c
  6590  0002A0  0012               	return	
  6591                           
  6592                           ; BSR set to: 0
  6593                           ; Switch size 1, requested type "space"
  6594                           ; Number of cases is 9, Range of values is 0 to 8
  6595                           ; switch strategies available:
  6596                           ; Name         Instructions Cycles
  6597                           ; simple_byte           28    15 (average)
  6598                           ;	Chosen strategy is simple_byte
  6599  0002A2  51D0               	movf	??_motorEusart& (0+255),w,b
  6600  0002A4  E101 D6C2          	bz	l7296
  6601  0002A8  0A01               	xorlw	1	; case 1
  6602  0002AA  E101 D6D3          	bz	l7316
  6603  0002AE  0A03               	xorlw	3	; case 2
  6604  0002B0  E101 D71F          	bz	l7332
  6605  0002B4  0A01               	xorlw	1	; case 3
  6606  0002B6  E101 D72A          	bz	l7346
  6607  0002BA  0A07               	xorlw	7	; case 4
  6608  0002BC  E101 D769          	bz	l1544
  6609  0002C0  0A01               	xorlw	1	; case 5
  6610  0002C2  E093               	bz	l7418
  6611  0002C4  0A03               	xorlw	3	; case 6
  6612  0002C6  E0B2               	bz	l7434
  6613  0002C8  0A01               	xorlw	1	; case 7
  6614  0002CA  E0C8               	bz	l1561
  6615  0002CC  0A0F               	xorlw	15	; case 8
  6616  0002CE  E0CE               	bz	l7458
  6617  0002D0  0012               	return		;funcret
  6618  0002D2                     __end_of_motorEusart:
  6619                           	callstack 0
  6620  0002D2                     PL6:
  6621                           	callstack 21
  6622  0002D2  6FD0               	movwf	??_motorEusart& (0+255),b
  6623  0002D4  0E00               	movlw	high _users
  6624  0002D6  6FD1               	movwf	(??_motorEusart+1)& (0+255),b
  6625  0002D8  50F3               	movf	243,w,c
  6626  0002DA  27D0               	addwf	??_motorEusart& (0+255),f,b
  6627  0002DC  50F4               	movf	244,w,c
  6628  0002DE  23D1               	addwfc	(??_motorEusart+1)& (0+255),f,b
  6629  0002E0  5050               	movf	_rowi^0,w,c
  6630  0002E2  25D0               	addwf	??_motorEusart& (0+255),w,b
  6631  0002E4  6ED9               	movwf	fsr2l,c
  6632  0002E6  0E00               	movlw	0
  6633  0002E8  21D1               	addwfc	(??_motorEusart+1)& (0+255),w,b
  6634  0002EA  6EDA               	movwf	fsr2h,c
  6635  0002EC  50DF               	movf	indf2,w,c
  6636  0002EE  0012               	return	
  6637  0002F0                     __end_ofPL6:
  6638                           	callstack 0
  6639  0002F0                     PL8:
  6640                           	callstack 21
  6641  0002F0  504D               	movf	_user_selected^0,w,c
  6642  0002F2  0D0E               	mullw	14
  6643  0002F4  0ED7               	movlw	low _users
  6644  0002F6  0012               	return	
  6645  0002F8                     __end_ofPL8:
  6646                           	callstack 0
  6647  0002F8                     PL10:
  6648                           	callstack 26
  6649  0002F8  0D0E               	mullw	14
  6650  0002FA  0EE3               	movlw	low (_users+12)
  6651  0002FC  24F3               	addwf	243,w,c
  6652  0002FE  6ED9               	movwf	fsr2l,c
  6653  000300  0E00               	movlw	high (_users+12)
  6654  000302  20F4               	addwfc	prodh,w,c
  6655  000304  6EDA               	movwf	fsr2h,c
  6656  000306  0012               	return	
  6657  000308                     __end_ofPL10:
  6658                           	callstack 0
  6659  000308                     PL32:
  6660                           	callstack 21
  6661  000308  0EF5               	movlw	low _score
  6662  00030A  2450               	addwf	_rowi^0,w,c
  6663  00030C  6EF6               	movwf	tblptrl,c
  6664  00030E  6AF7               	clrf	tblptrh,c
  6665  000310  0E1F               	movlw	high _score
  6666  000312  22F7               	addwfc	tblptrh,f,c
  6667  000314                     	if	0	;There are less than 3 active tblptr bytes
  6668  000314                     	endif
  6669  000314  0008               	tblrd		*
  6670  000316  50F5               	movf	tablat,w,c
  6671  000318  0012               	return	
  6672  00031A                     __end_ofPL32:
  6673                           	callstack 0
  6674  00031A                     PL34:
  6675                           	callstack 21
  6676  00031A  0ECB               	movlw	low _HighScore@EUSART$F2016
  6677  00031C  2450               	addwf	_rowi^0,w,c
  6678  00031E  6EF6               	movwf	tblptrl,c
  6679  000320  6AF7               	clrf	tblptrh,c
  6680  000322  0E1F               	movlw	high _HighScore@EUSART$F2016
  6681  000324  22F7               	addwfc	tblptrh,f,c
  6682  000326                     	if	0	;There are less than 3 active tblptr bytes
  6683  000326                     	endif
  6684  000326  0008               	tblrd		*
  6685  000328  50F5               	movf	tablat,w,c
  6686  00032A  0012               	return	
  6687  00032C                     __end_ofPL34:
  6688                           	callstack 0
  6689  00032C                     PL40:
  6690                           	callstack 21
  6691  00032C  5021               	movf	_data^0,w,c
  6692  00032E  6FD0               	movwf	??_motorEusart& (0+255),b
  6693  000330  6BD1               	clrf	(??_motorEusart+1)& (0+255),b
  6694  000332  504D               	movf	_user_selected^0,w,c
  6695  000334  0012               	return	
  6696  000336                     __end_ofPL40:
  6697                           	callstack 0
  6698  000336                     PL42:
  6699                           	callstack 21
  6700  000336  0E01               	movlw	1
  6701  000338  6E6C               	movwf	PrintData@f^0,c
  6702  00033A  C00D  F06D         	movff	_sec,PrintData@characters
  6703  00033E  6E6E               	movwf	PrintData@yes^0,c
  6704  000340  0C06               	retlw	6
  6705  000342                     __end_ofPL42:
  6706                           	callstack 0
  6707  000342                     PL48:
  6708                           	callstack 21
  6709  000342  0E0C               	movlw	12
  6710  000344  6E70               	movwf	ScoreDigits@col1^0,c
  6711  000346  0E0D               	movlw	13
  6712  000348  6E71               	movwf	ScoreDigits@col2^0,c
  6713  00034A  0E0E               	movlw	14
  6714  00034C  6E72               	movwf	ScoreDigits@col3^0,c
  6715  00034E  0E01               	movlw	1
  6716  000350  6E73               	movwf	ScoreDigits@row^0,c
  6717  000352  0C01               	retlw	1
  6718  000354                     __end_ofPL48:
  6719                           	callstack 0
  6720  000354                     PL62:
  6721                           	callstack 21
  6722  000354  0E01               	movlw	1
  6723  000356  6E6C               	movwf	PrintData@f^0,c
  6724  000358  0E3A               	movlw	58
  6725  00035A  6E6D               	movwf	PrintData@characters^0,c
  6726  00035C  6A6E               	clrf	PrintData@yes^0,c
  6727  00035E  0C3A               	retlw	58
  6728  000360                     __end_ofPL62:
  6729                           	callstack 0
  6730  000360                     PL72:
  6731                           	callstack 21
  6732  000360  0E01               	movlw	1
  6733  000362  6E6C               	movwf	PrintData@f^0,c
  6734  000364  C00B  F06D         	movff	_min,PrintData@characters
  6735  000368  6E6E               	movwf	PrintData@yes^0,c
  6736  00036A  0C03               	retlw	3
  6737  00036C                     __end_ofPL72:
  6738                           	callstack 0
  6739  00036C                     PL74:
  6740                           	callstack 21
  6741  00036C  0E01               	movlw	1
  6742  00036E  6E6C               	movwf	PrintData@f^0,c
  6743  000370  C00C  F06D         	movff	_min+1,PrintData@characters
  6744  000374  6E6E               	movwf	PrintData@yes^0,c
  6745  000376  0C02               	retlw	2
  6746  000378                     __end_ofPL74:
  6747                           	callstack 0
  6748  000378                     PL76:
  6749                           	callstack 21
  6750  000378  0E01               	movlw	1
  6751  00037A  6E6C               	movwf	PrintData@f^0,c
  6752  00037C  C00E  F06D         	movff	_sec+1,PrintData@characters
  6753  000380  6E6E               	movwf	PrintData@yes^0,c
  6754  000382  0C05               	retlw	5
  6755  000384                     __end_ofPL76:
  6756                           	callstack 0
  6757  000384                     PL114:
  6758                           	callstack 22
  6759  000384  0E01               	movlw	1
  6760  000386  6E63               	movwf	LcGotoXY@Row^0,c
  6761  000388  5050               	movf	_rowi^0,w,c
  6762  00038A  0012               	return	
  6763  00038C                     __end_ofPL114:
  6764                           	callstack 0
  6765                           
  6766 ;; *************** function _selectChar *****************
  6767 ;; Defined at:
  6768 ;;		line 153 in file "matrix.c"
  6769 ;; Parameters:    Size  Location     Type
  6770 ;;  column          1    wreg     unsigned char 
  6771 ;;  row             1    6[COMRAM] unsigned char 
  6772 ;; Auto vars:     Size  Location     Type
  6773 ;;  column          1    9[COMRAM] unsigned char 
  6774 ;; Return value:  Size  Location     Type
  6775 ;;                  1    wreg      unsigned char 
  6776 ;; Registers used:
  6777 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
  6778 ;; Tracked objects:
  6779 ;;		On entry : 0/0
  6780 ;;		On exit  : 0/0
  6781 ;;		Unchanged: 0/0
  6782 ;; Data sizes:     COMRAM   BANK0   BANK1
  6783 ;;      Params:         1       0       0
  6784 ;;      Locals:         1       0       0
  6785 ;;      Temps:          2       0       0
  6786 ;;      Totals:         4       0       0
  6787 ;;Total ram usage:        4 bytes
  6788 ;; Hardware stack levels used: 1
  6789 ;; Hardware stack levels required when called: 3
  6790 ;; This function calls:
  6791 ;;		Nothing
  6792 ;; This function is called by:
  6793 ;;		_motorMatrix
  6794 ;;		_motorMenu
  6795 ;;		_motor_SMS
  6796 ;;		_motor_data
  6797 ;;		_motor_hour
  6798 ;;		_motorEusart
  6799 ;;		_motorUser
  6800 ;; This function uses a non-reentrant model
  6801 ;;
  6802                           
  6803                           	psect	text25
  6804  001A06                     __ptext25:
  6805                           	callstack 0
  6806  001A06                     _selectChar:
  6807                           	callstack 26
  6808                           
  6809                           ;incstack = 0
  6810                           ;selectChar@column stored from wreg
  6811  001A06  6E5E               	movwf	selectChar@column^0,c
  6812                           
  6813                           ;matrix.c: 155:    key = TABLE[row][column];
  6814  001A08  505B               	movf	selectChar@row^0,w,c
  6815  001A0A  0D03               	mullw	3
  6816  001A0C  0EE9               	movlw	low _TABLE
  6817  001A0E  6E5C               	movwf	??_selectChar^0,c
  6818  001A10  0E1F               	movlw	high _TABLE
  6819  001A12  6E5D               	movwf	(??_selectChar+1)^0,c
  6820  001A14  50F3               	movf	243,w,c
  6821  001A16  265C               	addwf	??_selectChar^0,f,c
  6822  001A18  50F4               	movf	244,w,c
  6823  001A1A  225D               	addwfc	(??_selectChar+1)^0,f,c
  6824  001A1C  505E               	movf	selectChar@column^0,w,c
  6825  001A1E  265C               	addwf	??_selectChar^0,f,c
  6826  001A20  0E00               	movlw	0
  6827  001A22  225D               	addwfc	(??_selectChar+1)^0,f,c
  6828  001A24  C05C  FFF6         	movff	??_selectChar,tblptrl
  6829  001A28  C05D  FFF7         	movff	??_selectChar+1,tblptrh
  6830  001A2C                     	if	0	;tblptru may be non-zero
  6831  001A2C                     	endif
  6832  001A2C                     	if	0	;tblptru may be non-zero
  6833  001A2C                     	endif
  6834  001A2C  0008               	tblrd		*
  6835  001A2E  CFF5 F046          	movff	tablat,_key
  6836                           
  6837                           ;matrix.c: 156:    return key;
  6838  001A32  5046               	movf	_key^0,w,c
  6839  001A34  0012               	return		;funcret
  6840  001A36                     __end_of_selectChar:
  6841                           	callstack 0
  6842                           
  6843 ;; *************** function _motorSpeaker *****************
  6844 ;; Defined at:
  6845 ;;		line 15 in file "speaker.c"
  6846 ;; Parameters:    Size  Location     Type
  6847 ;;		None
  6848 ;; Auto vars:     Size  Location     Type
  6849 ;;		None
  6850 ;; Return value:  Size  Location     Type
  6851 ;;                  1    wreg      void 
  6852 ;; Registers used:
  6853 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6854 ;; Tracked objects:
  6855 ;;		On entry : 0/0
  6856 ;;		On exit  : 0/0
  6857 ;;		Unchanged: 0/0
  6858 ;; Data sizes:     COMRAM   BANK0   BANK1
  6859 ;;      Params:         0       0       0
  6860 ;;      Locals:         0       0       0
  6861 ;;      Temps:          3       0       0
  6862 ;;      Totals:         3       0       0
  6863 ;;Total ram usage:        3 bytes
  6864 ;; Hardware stack levels used: 1
  6865 ;; Hardware stack levels required when called: 4
  6866 ;; This function calls:
  6867 ;;		_TiGetTics
  6868 ;;		_TiResetTics
  6869 ;; This function is called by:
  6870 ;;		_motorEusart
  6871 ;; This function uses a non-reentrant model
  6872 ;;
  6873                           
  6874                           	psect	text26
  6875  00144C                     __ptext26:
  6876                           	callstack 0
  6877  00144C                     _motorSpeaker:
  6878                           	callstack 25
  6879                           
  6880                           ;speaker.c: 18:     switch(state_speaker){
  6881                           
  6882                           ;incstack = 0
  6883  00144C  D030               	goto	l6898
  6884  00144E                     l6860:
  6885                           
  6886                           ;speaker.c: 20:             if(TiGetTics(timerSpeaker1)>=2000){
  6887  00144E  502B               	movf	_timerSpeaker1@TTimer$F1504^0,w,c
  6888  001450  ECC5  F00D         	call	_TiGetTics
  6889  001454  BE5C               	btfsc	(?_TiGetTics+1)^0,7,c
  6890  001456  D012               	goto	l6880
  6891  001458  D835               	call	PL44	;call to abstracted procedure
  6892  00145A  E310               	bnc	l6880
  6893                           
  6894                           ;speaker.c: 21:                 TiResetTics(timerSpeaker1);
  6895  00145C  502B               	movf	_timerSpeaker1@TTimer$F1504^0,w,c
  6896  00145E  EC57  F00E         	call	_TiResetTics
  6897                           
  6898                           ;speaker.c: 22:                 if(cycles<10){
  6899  001462  0E0A               	movlw	10
  6900  001464  6029               	cpfslt	_cycles@TTimer$F1506^0,c
  6901  001466  D004               	goto	l6872
  6902                           
  6903                           ;speaker.c: 23:                     cycles=cycles+1;
  6904  001468  2A29               	incf	_cycles@TTimer$F1506^0,f,c
  6905  00146A                     l6868:
  6906                           
  6907                           ;speaker.c: 24:                     LATBbits.LATB2=1;
  6908  00146A  848A               	bsf	138,2,c	;volatile
  6909                           
  6910                           ;speaker.c: 25:                     state_speaker=0;
  6911  00146C  6A4A               	clrf	_state_speaker^0,c
  6912                           
  6913                           ;speaker.c: 26:                 }else if(cycles>=10){
  6914  00146E  D006               	goto	l6880
  6915  001470                     l6872:
  6916  001470  0E09               	movlw	9
  6917  001472  6429               	cpfsgt	_cycles@TTimer$F1506^0,c
  6918  001474  D003               	goto	l6880
  6919                           
  6920                           ;speaker.c: 27:                     cycles=1;
  6921  001476  0E01               	movlw	1
  6922  001478  6E29               	movwf	_cycles@TTimer$F1506^0,c
  6923  00147A  D7F7               	goto	l6868
  6924  00147C                     l6880:
  6925  00147C  D831               	call	PL108	;call to abstracted procedure
  6926  00147E  ECC5  F00D         	call	_TiGetTics
  6927  001482  D825               	call	PL50	;call to abstracted procedure
  6928  001484  A0D8               	btfss	status,0,c
  6929  001486  0012               	return	
  6930                           
  6931                           ;speaker.c: 33:                 TiResetTics(timerSpeaker2);
  6932  001488  502A               	movf	_timerSpeaker2@TTimer$F1505^0,w,c
  6933  00148A  EC57  F00E         	call	_TiResetTics
  6934                           
  6935                           ;speaker.c: 34:                 LATBbits.LATB2=0;
  6936  00148E  948A               	bcf	138,2,c	;volatile
  6937                           
  6938                           ;speaker.c: 35:                 state_speaker=1;
  6939  001490  0E01               	movlw	1
  6940  001492  6E4A               	movwf	_state_speaker^0,c
  6941  001494  0C01               	retlw	1
  6942  001496                     l6888:
  6943                           
  6944                           ;speaker.c: 39:             if(TiGetTics(timerSpeaker2)>=cycles){
  6945  001496  D824               	call	PL108	;call to abstracted procedure
  6946  001498  ECC5  F00D         	call	_TiGetTics
  6947  00149C  D818               	call	PL50	;call to abstracted procedure
  6948  00149E  A0D8               	btfss	status,0,c
  6949  0014A0  0012               	return	
  6950                           
  6951                           ;speaker.c: 40:                 LATBbits.LATB2=1;
  6952  0014A2  848A               	bsf	138,2,c	;volatile
  6953                           
  6954                           ;speaker.c: 41:                 TiResetTics(timerSpeaker2);
  6955  0014A4  502A               	movf	_timerSpeaker2@TTimer$F1505^0,w,c
  6956  0014A6  EC57  F00E         	call	_TiResetTics
  6957                           
  6958                           ;speaker.c: 42:                state_speaker=0;
  6959  0014AA  6A4A               	clrf	_state_speaker^0,c
  6960  0014AC  0012               	return	
  6961  0014AE                     l6898:
  6962  0014AE  504A               	movf	_state_speaker^0,w,c
  6963  0014B0  6E62               	movwf	??_motorSpeaker^0,c
  6964  0014B2  6A63               	clrf	(??_motorSpeaker+1)^0,c
  6965                           
  6966                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  6967                           ; Switch size 1, requested type "space"
  6968                           ; Number of cases is 1, Range of values is 0 to 0
  6969                           ; switch strategies available:
  6970                           ; Name         Instructions Cycles
  6971                           ; simple_byte            4     3 (average)
  6972                           ;	Chosen strategy is simple_byte
  6973  0014B4  5063               	movf	(??_motorSpeaker+1)^0,w,c
  6974  0014B6  A4D8               	btfss	status,2,c
  6975  0014B8  0012               	return	
  6976                           
  6977                           ; Switch size 1, requested type "space"
  6978                           ; Number of cases is 2, Range of values is 0 to 1
  6979                           ; switch strategies available:
  6980                           ; Name         Instructions Cycles
  6981                           ; simple_byte            7     4 (average)
  6982                           ;	Chosen strategy is simple_byte
  6983  0014BA  5062               	movf	??_motorSpeaker^0,w,c
  6984  0014BC  E0C8               	bz	l6860
  6985  0014BE  0A01               	xorlw	1	; case 1
  6986  0014C0  E0EA               	bz	l6888
  6987  0014C2  0012               	return		;funcret
  6988  0014C4                     __end_of_motorSpeaker:
  6989                           	callstack 0
  6990  0014C4                     PL44:
  6991                           	callstack 21
  6992  0014C4  0ED0               	movlw	208
  6993  0014C6  5C5B               	subwf	?_TiGetTics^0,w,c
  6994  0014C8  0E07               	movlw	7
  6995  0014CA  585C               	subwfb	(?_TiGetTics+1)^0,w,c
  6996  0014CC  0012               	return	
  6997  0014CE                     __end_ofPL44:
  6998                           	callstack 0
  6999  0014CE                     PL50:
  7000                           	callstack 25
  7001  0014CE  5062               	movf	??_motorSpeaker^0,w,c
  7002  0014D0  5C5B               	subwf	?_TiGetTics^0,w,c
  7003  0014D2  505C               	movf	(?_TiGetTics+1)^0,w,c
  7004  0014D4  0A80               	xorlw	128
  7005  0014D6  6E64               	movwf	(??_motorSpeaker+2)^0,c
  7006  0014D8  5063               	movf	(??_motorSpeaker+1)^0,w,c
  7007  0014DA  0A80               	xorlw	128
  7008  0014DC  5864               	subwfb	(??_motorSpeaker+2)^0,w,c
  7009  0014DE  0012               	return	
  7010  0014E0                     __end_ofPL50:
  7011                           	callstack 0
  7012  0014E0                     PL108:
  7013                           	callstack 25
  7014  0014E0  5029               	movf	_cycles@TTimer$F1506^0,w,c
  7015  0014E2  6E62               	movwf	??_motorSpeaker^0,c
  7016  0014E4  6A63               	clrf	(??_motorSpeaker+1)^0,c
  7017  0014E6  502A               	movf	_timerSpeaker2@TTimer$F1505^0,w,c
  7018  0014E8  0012               	return	
  7019  0014EA                     __end_ofPL108:
  7020                           	callstack 0
  7021                           
  7022 ;; *************** function _ScoreDigits *****************
  7023 ;; Defined at:
  7024 ;;		line 231 in file "Eusart.c"
  7025 ;; Parameters:    Size  Location     Type
  7026 ;;  data2           1    wreg     unsigned char 
  7027 ;;  col1            1   27[COMRAM] unsigned char 
  7028 ;;  col2            1   28[COMRAM] unsigned char 
  7029 ;;  col3            1   29[COMRAM] unsigned char 
  7030 ;;  row             1   30[COMRAM] unsigned char 
  7031 ;; Auto vars:     Size  Location     Type
  7032 ;;  data2           1   31[COMRAM] unsigned char 
  7033 ;; Return value:  Size  Location     Type
  7034 ;;                  1    wreg      void 
  7035 ;; Registers used:
  7036 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7037 ;; Tracked objects:
  7038 ;;		On entry : 0/0
  7039 ;;		On exit  : 0/0
  7040 ;;		Unchanged: 0/0
  7041 ;; Data sizes:     COMRAM   BANK0   BANK1
  7042 ;;      Params:         4       0       0
  7043 ;;      Locals:         1       0       0
  7044 ;;      Temps:          0       0       0
  7045 ;;      Totals:         5       0       0
  7046 ;;Total ram usage:        5 bytes
  7047 ;; Hardware stack levels used: 1
  7048 ;; Hardware stack levels required when called: 8
  7049 ;; This function calls:
  7050 ;;		_DivideScore
  7051 ;;		_PrintData
  7052 ;; This function is called by:
  7053 ;;		_motorEusart
  7054 ;; This function uses a non-reentrant model
  7055 ;;
  7056                           
  7057                           	psect	text27
  7058  0018B4                     __ptext27:
  7059                           	callstack 0
  7060  0018B4                     _ScoreDigits:
  7061                           	callstack 21
  7062                           
  7063                           ;incstack = 0
  7064                           ;ScoreDigits@data2 stored from wreg
  7065  0018B4  6E74               	movwf	ScoreDigits@data2^0,c
  7066                           
  7067                           ;Eusart.c: 232:     DivideScore(data2);
  7068  0018B6  C074  F065         	movff	ScoreDigits@data2,DivideScore@score
  7069  0018BA  6A66               	clrf	(DivideScore@score+1)^0,c
  7070  0018BC  EC1B  F00D         	call	_DivideScore	;wreg free
  7071                           
  7072                           ;Eusart.c: 233:     PrintData(col1,row,current_score[2],1);
  7073  0018C0  C073  F06C         	movff	ScoreDigits@row,PrintData@f
  7074  0018C4  D819               	call	PL96	;call to abstracted procedure
  7075  0018C6  5070               	movf	ScoreDigits@col1^0,w,c
  7076  0018C8  EC2A  F00E         	call	_PrintData
  7077                           
  7078                           ;Eusart.c: 234:     PrintData(col2,row,current_score[1],1);
  7079  0018CC  C073  F06C         	movff	ScoreDigits@row,PrintData@f
  7080  0018D0  D80E               	call	PL94	;call to abstracted procedure
  7081  0018D2  5071               	movf	ScoreDigits@col2^0,w,c
  7082  0018D4  EC2A  F00E         	call	_PrintData
  7083                           
  7084                           ;Eusart.c: 235:     PrintData(col3,row,current_score[0],1);
  7085  0018D8  C073  F06C         	movff	ScoreDigits@row,PrintData@f
  7086  0018DC  D803               	call	PL92	;call to abstracted procedure
  7087  0018DE  5072               	movf	ScoreDigits@col3^0,w,c
  7088  0018E0  EF2A  F00E         	goto	_PrintData
  7089  0018E4                     __end_of_ScoreDigits:
  7090                           	callstack 0
  7091  0018E4                     PL92:
  7092                           	callstack 21
  7093  0018E4  C0B2  F06D         	movff	_current_score,PrintData@characters
  7094  0018E8  0E01               	movlw	1
  7095  0018EA  6E6E               	movwf	PrintData@yes^0,c
  7096  0018EC  0C01               	retlw	1
  7097  0018EE                     __end_ofPL92:
  7098                           	callstack 0
  7099  0018EE                     PL94:
  7100                           	callstack 21
  7101  0018EE  C0B4  F06D         	movff	_current_score+2,PrintData@characters
  7102  0018F2  0E01               	movlw	1
  7103  0018F4  6E6E               	movwf	PrintData@yes^0,c
  7104  0018F6  0C01               	retlw	1
  7105  0018F8                     __end_ofPL94:
  7106                           	callstack 0
  7107  0018F8                     PL96:
  7108                           	callstack 21
  7109  0018F8  C0B6  F06D         	movff	_current_score+4,PrintData@characters
  7110  0018FC  0E01               	movlw	1
  7111  0018FE  6E6E               	movwf	PrintData@yes^0,c
  7112  001900  0C01               	retlw	1
  7113  001902                     __end_ofPL96:
  7114                           	callstack 0
  7115                           
  7116 ;; *************** function _PrintData *****************
  7117 ;; Defined at:
  7118 ;;		line 155 in file "data.c"
  7119 ;; Parameters:    Size  Location     Type
  7120 ;;  col             1    wreg     unsigned char 
  7121 ;;  f               1   23[COMRAM] unsigned char 
  7122 ;;  characters      1   24[COMRAM] unsigned char 
  7123 ;;  yes             1   25[COMRAM] unsigned char 
  7124 ;; Auto vars:     Size  Location     Type
  7125 ;;  col             1   26[COMRAM] unsigned char 
  7126 ;; Return value:  Size  Location     Type
  7127 ;;                  1    wreg      void 
  7128 ;; Registers used:
  7129 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7130 ;; Tracked objects:
  7131 ;;		On entry : 0/0
  7132 ;;		On exit  : 0/0
  7133 ;;		Unchanged: 0/0
  7134 ;; Data sizes:     COMRAM   BANK0   BANK1
  7135 ;;      Params:         3       0       0
  7136 ;;      Locals:         1       0       0
  7137 ;;      Temps:          0       0       0
  7138 ;;      Totals:         4       0       0
  7139 ;;Total ram usage:        4 bytes
  7140 ;; Hardware stack levels used: 1
  7141 ;; Hardware stack levels required when called: 7
  7142 ;; This function calls:
  7143 ;;		_LcGotoXY
  7144 ;;		_LcPutChar
  7145 ;; This function is called by:
  7146 ;;		_motor_SMS
  7147 ;;		_motor_hour
  7148 ;;		_PrintCouples
  7149 ;;		_motorEusart
  7150 ;;		_ScoreDigits
  7151 ;;		_marqueeUsers
  7152 ;;		_place_char
  7153 ;; This function uses a non-reentrant model
  7154 ;;
  7155                           
  7156                           	psect	text28
  7157  001C54                     __ptext28:
  7158                           	callstack 0
  7159  001C54                     _PrintData:
  7160                           	callstack 22
  7161                           
  7162                           ;incstack = 0
  7163                           ;PrintData@col stored from wreg
  7164  001C54  6E6F               	movwf	PrintData@col^0,c
  7165                           
  7166                           ;data.c: 156:     LcGotoXY(col,f);
  7167  001C56  C06C  F063         	movff	PrintData@f,LcGotoXY@Row
  7168  001C5A  506F               	movf	PrintData@col^0,w,c
  7169  001C5C  EC75  F00A         	call	_LcGotoXY
  7170                           
  7171                           ;data.c: 157:     if(yes){
  7172  001C60  506E               	movf	PrintData@yes^0,w,c
  7173  001C62  E004               	bz	l6680
  7174                           
  7175                           ;data.c: 158:     LcPutChar(characters+'0');
  7176  001C64  506D               	movf	PrintData@characters^0,w,c
  7177  001C66  0F30               	addlw	48
  7178  001C68  EF30  F00C         	goto	_LcPutChar
  7179  001C6C                     l6680:
  7180                           
  7181                           ;data.c: 160:         LcPutChar(characters);
  7182  001C6C  506D               	movf	PrintData@characters^0,w,c
  7183  001C6E  EF30  F00C         	goto	_LcPutChar
  7184  001C72                     __end_of_PrintData:
  7185                           	callstack 0
  7186                           
  7187 ;; *************** function _LcPutChar *****************
  7188 ;; Defined at:
  7189 ;;		line 141 in file "LCD.c"
  7190 ;; Parameters:    Size  Location     Type
  7191 ;;  c               1    wreg     unsigned char 
  7192 ;; Auto vars:     Size  Location     Type
  7193 ;;  c               1   22[COMRAM] unsigned char 
  7194 ;; Return value:  Size  Location     Type
  7195 ;;                  1    wreg      void 
  7196 ;; Registers used:
  7197 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7198 ;; Tracked objects:
  7199 ;;		On entry : 0/0
  7200 ;;		On exit  : 0/0
  7201 ;;		Unchanged: 0/0
  7202 ;; Data sizes:     COMRAM   BANK0   BANK1
  7203 ;;      Params:         0       0       0
  7204 ;;      Locals:         1       0       0
  7205 ;;      Temps:          0       0       0
  7206 ;;      Totals:         1       0       0
  7207 ;;Total ram usage:        1 bytes
  7208 ;; Hardware stack levels used: 1
  7209 ;; Hardware stack levels required when called: 6
  7210 ;; This function calls:
  7211 ;;		_CantaData
  7212 ;;		_LcGotoXY
  7213 ;;		_WaitForBusy
  7214 ;; This function is called by:
  7215 ;;		_motor_SMS
  7216 ;;		_SMS_Print
  7217 ;;		_motor_data
  7218 ;;		_PrintData
  7219 ;;		_motor_hour
  7220 ;;		_motorEusart
  7221 ;;		_marqueeUsers
  7222 ;;		_place_char
  7223 ;;		_MenuDoMarquee
  7224 ;;		_marqueePlaceArrow
  7225 ;; This function uses a non-reentrant model
  7226 ;;
  7227                           
  7228                           	psect	text29
  7229  001860                     __ptext29:
  7230                           	callstack 0
  7231  001860                     _LcPutChar:
  7232                           	callstack 22
  7233                           
  7234                           ;incstack = 0
  7235                           ;LcPutChar@c stored from wreg
  7236  001860  6E6B               	movwf	LcPutChar@c^0,c
  7237                           
  7238                           ;LCD.c: 151:  WaitForBusy(); CantaData(c);
  7239  001862  ECCA  F00C         	call	_WaitForBusy	;wreg free
  7240  001866  506B               	movf	LcPutChar@c^0,w,c
  7241  001868  ECE9  F00C         	call	_CantaData
  7242                           
  7243                           ;LCD.c: 153:  ++ColumnAct;
  7244  00186C  2A41               	incf	_ColumnAct^0,f,c
  7245                           
  7246                           ;LCD.c: 154:  if (Rows == 3) {
  7247  00186E  0E03               	movlw	3
  7248  001870  1844               	xorwf	_Rows^0,w,c
  7249  001872  E107               	bnz	l6654
  7250                           
  7251                           ;LCD.c: 155:   if (ColumnAct >= 20) {
  7252  001874  0E13               	movlw	19
  7253  001876  6441               	cpfsgt	_ColumnAct^0,c
  7254  001878  0C13               	retlw	19
  7255                           
  7256                           ;LCD.c: 156:    ColumnAct = 0;
  7257  00187A  6A41               	clrf	_ColumnAct^0,c
  7258                           
  7259                           ;LCD.c: 157:    if (++RowAct >= 4) RowAct = 0;
  7260  00187C  2A42               	incf	_RowAct^0,f,c
  7261  00187E  0E03               	movlw	3
  7262  001880  D009               	goto	L21
  7263  001882                     l6654:
  7264                           
  7265                           ;LCD.c: 161:  if (Rows == 2) {
  7266  001882  0E02               	movlw	2
  7267  001884  1844               	xorwf	_Rows^0,w,c
  7268  001886  E10A               	bnz	l6666
  7269                           
  7270                           ;LCD.c: 162:   if (ColumnAct >= 40) {
  7271  001888  0E27               	movlw	39
  7272  00188A  6441               	cpfsgt	_ColumnAct^0,c
  7273  00188C  0C27               	retlw	39
  7274                           
  7275                           ;LCD.c: 163:    ColumnAct = 0;
  7276  00188E  6A41               	clrf	_ColumnAct^0,c
  7277                           
  7278                           ;LCD.c: 164:    if (++RowAct >= 2) RowAct = 0;
  7279  001890  2A42               	incf	_RowAct^0,f,c
  7280  001892  0E01               	movlw	1
  7281  001894                     L21:
  7282  001894  6442               	cpfsgt	_RowAct^0,c
  7283  001896  D009               	goto	l6672
  7284  001898  6A42               	clrf	_RowAct^0,c
  7285  00189A  D007               	goto	l6672
  7286  00189C                     l6666:
  7287                           
  7288                           ;LCD.c: 168:  if (RowAct == 1) {
  7289  00189C  0442               	decf	_RowAct^0,w,c
  7290  00189E  A4D8               	btfss	status,2,c
  7291  0018A0  0012               	return	
  7292                           
  7293                           ;LCD.c: 169:   if (ColumnAct >= 40) ColumnAct = 0;
  7294  0018A2  0E27               	movlw	39
  7295  0018A4  6441               	cpfsgt	_ColumnAct^0,c
  7296  0018A6  D001               	goto	l6672
  7297  0018A8  6A41               	clrf	_ColumnAct^0,c
  7298  0018AA                     l6672:
  7299                           
  7300                           ;LCD.c: 170:   LcGotoXY(ColumnAct, RowAct);
  7301  0018AA  C042  F063         	movff	_RowAct,LcGotoXY@Row
  7302  0018AE  5041               	movf	_ColumnAct^0,w,c
  7303  0018B0  EF75  F00A         	goto	_LcGotoXY
  7304  0018B4                     __end_of_LcPutChar:
  7305                           	callstack 0
  7306                           
  7307 ;; *************** function _LcGotoXY *****************
  7308 ;; Defined at:
  7309 ;;		line 114 in file "LCD.c"
  7310 ;; Parameters:    Size  Location     Type
  7311 ;;  Column          1    wreg     unsigned char 
  7312 ;;  Row             1   14[COMRAM] unsigned char 
  7313 ;; Auto vars:     Size  Location     Type
  7314 ;;  Column          1   21[COMRAM] unsigned char 
  7315 ;;  Fisics          2   19[COMRAM] int 
  7316 ;; Return value:  Size  Location     Type
  7317 ;;                  1    wreg      void 
  7318 ;; Registers used:
  7319 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7320 ;; Tracked objects:
  7321 ;;		On entry : 0/0
  7322 ;;		On exit  : 0/0
  7323 ;;		Unchanged: 0/0
  7324 ;; Data sizes:     COMRAM   BANK0   BANK1
  7325 ;;      Params:         1       0       0
  7326 ;;      Locals:         5       0       0
  7327 ;;      Temps:          2       0       0
  7328 ;;      Totals:         8       0       0
  7329 ;;Total ram usage:        8 bytes
  7330 ;; Hardware stack levels used: 1
  7331 ;; Hardware stack levels required when called: 5
  7332 ;; This function calls:
  7333 ;;		_CantaIR
  7334 ;;		_WaitForBusy
  7335 ;; This function is called by:
  7336 ;;		_LcPutChar
  7337 ;;		_motor_SMS
  7338 ;;		_SMS_PrintReset
  7339 ;;		_motor_data
  7340 ;;		_PrintData
  7341 ;;		_UpDownUsers
  7342 ;;		_motor_hour
  7343 ;;		_motorEusart
  7344 ;;		_marqueeUsers
  7345 ;;		_MenuDoMarquee
  7346 ;;		_marqueePlaceArrow
  7347 ;; This function uses a non-reentrant model
  7348 ;;
  7349                           
  7350                           	psect	text30
  7351  0014EA                     __ptext30:
  7352                           	callstack 0
  7353  0014EA                     _LcGotoXY:
  7354                           	callstack 22
  7355                           
  7356                           ;incstack = 0
  7357                           ;LcGotoXY@Column stored from wreg
  7358  0014EA  6E6A               	movwf	LcGotoXY@Column^0,c
  7359                           
  7360                           ;LCD.c: 118:  int Fisics;;LCD.c: 120:  switch (Rows) {
  7361  0014EC  D030               	goto	l6604
  7362  0014EE                     l6584:
  7363                           
  7364                           ;LCD.c: 122:    Fisics = Column + (!Row ? 0 : 0x40); break;
  7365  0014EE  5063               	movf	LcGotoXY@Row^0,w,c
  7366  0014F0  E004               	bz	l478
  7367  0014F2  6A67               	clrf	(_LcGotoXY$976+1)^0,c
  7368  0014F4  0E40               	movlw	64
  7369  0014F6  6E66               	movwf	_LcGotoXY$976^0,c
  7370  0014F8  D002               	goto	l6588
  7371  0014FA                     l478:
  7372  0014FA  6A66               	clrf	_LcGotoXY$976^0,c
  7373  0014FC  6A67               	clrf	(_LcGotoXY$976+1)^0,c
  7374  0014FE                     l6588:
  7375  0014FE  506A               	movf	LcGotoXY@Column^0,w,c
  7376  001500  2466               	addwf	_LcGotoXY$976^0,w,c
  7377  001502  6E68               	movwf	LcGotoXY@Fisics^0,c
  7378  001504  0E00               	movlw	0
  7379  001506  2067               	addwfc	(_LcGotoXY$976+1)^0,w,c
  7380  001508  6E69               	movwf	(LcGotoXY@Fisics+1)^0,c
  7381  00150A  D02E               	goto	l6606
  7382  00150C                     l482:
  7383                           
  7384                           ;LCD.c: 124:    Fisics = Column;
  7385  00150C  C06A  F068         	movff	LcGotoXY@Column,LcGotoXY@Fisics
  7386  001510  6A69               	clrf	(LcGotoXY@Fisics+1)^0,c
  7387                           
  7388                           ;LCD.c: 125:    if (Row == 1) Fisics += 0x40; else
  7389  001512  0463               	decf	LcGotoXY@Row^0,w,c
  7390  001514  E102               	bnz	l6594
  7391  001516  0E40               	movlw	64
  7392  001518  D004               	goto	L22
  7393  00151A                     l6594:
  7394                           
  7395                           ;LCD.c: 126:    if (Row == 2) Fisics += Columns; else
  7396  00151A  0E02               	movlw	2
  7397  00151C  1863               	xorwf	LcGotoXY@Row^0,w,c
  7398  00151E  E104               	bnz	l6598
  7399  001520  5043               	movf	_Columns^0,w,c
  7400  001522                     L22:
  7401  001522  2668               	addwf	LcGotoXY@Fisics^0,f,c
  7402  001524  0E00               	movlw	0
  7403  001526  D00D               	goto	L23
  7404  001528                     l6598:
  7405                           
  7406                           ;LCD.c: 127:    if (Row == 3) Fisics += 0x40+Columns;
  7407  001528  0E03               	movlw	3
  7408  00152A  1863               	xorwf	LcGotoXY@Row^0,w,c
  7409  00152C  E11D               	bnz	l6606
  7410  00152E  5043               	movf	_Columns^0,w,c
  7411  001530  6E64               	movwf	??_LcGotoXY^0,c
  7412  001532  6A65               	clrf	(??_LcGotoXY+1)^0,c
  7413  001534  0E40               	movlw	64
  7414  001536  2664               	addwf	??_LcGotoXY^0,f,c
  7415  001538  0E00               	movlw	0
  7416  00153A  2265               	addwfc	(??_LcGotoXY+1)^0,f,c
  7417  00153C  5064               	movf	??_LcGotoXY^0,w,c
  7418  00153E  2668               	addwf	LcGotoXY@Fisics^0,f,c
  7419  001540  5065               	movf	(??_LcGotoXY+1)^0,w,c
  7420  001542                     L23:
  7421  001542  2269               	addwfc	(LcGotoXY@Fisics+1)^0,f,c
  7422                           
  7423                           ;LCD.c: 128:    break;
  7424  001544  D011               	goto	l6606
  7425  001546                     l489:
  7426                           
  7427                           ;LCD.c: 131:    Fisics = Column; break;
  7428  001546  C06A  F068         	movff	LcGotoXY@Column,LcGotoXY@Fisics
  7429  00154A  6A69               	clrf	(LcGotoXY@Fisics+1)^0,c
  7430  00154C  D00D               	goto	l6606
  7431  00154E                     l6604:
  7432  00154E  5044               	movf	_Rows^0,w,c
  7433  001550  6E64               	movwf	??_LcGotoXY^0,c
  7434  001552  6A65               	clrf	(??_LcGotoXY+1)^0,c
  7435                           
  7436                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7437                           ; Switch size 1, requested type "space"
  7438                           ; Number of cases is 1, Range of values is 0 to 0
  7439                           ; switch strategies available:
  7440                           ; Name         Instructions Cycles
  7441                           ; simple_byte            4     3 (average)
  7442                           ;	Chosen strategy is simple_byte
  7443  001554  5065               	movf	(??_LcGotoXY+1)^0,w,c
  7444  001556  E1F7               	bnz	l489
  7445                           
  7446                           ; Switch size 1, requested type "space"
  7447                           ; Number of cases is 3, Range of values is 1 to 4
  7448                           ; switch strategies available:
  7449                           ; Name         Instructions Cycles
  7450                           ; simple_byte           10     6 (average)
  7451                           ;	Chosen strategy is simple_byte
  7452  001558  5064               	movf	??_LcGotoXY^0,w,c
  7453  00155A  0A01               	xorlw	1	; case 1
  7454  00155C  E0F4               	bz	l489
  7455  00155E  0A03               	xorlw	3	; case 2
  7456  001560  E0C6               	bz	l6584
  7457  001562  0A06               	xorlw	6	; case 4
  7458  001564  E0D3               	bz	l482
  7459  001566  D7EF               	goto	l489
  7460  001568                     l6606:
  7461                           
  7462                           ;LCD.c: 134:  WaitForBusy();
  7463  001568  ECCA  F00C         	call	_WaitForBusy	;wreg free
  7464                           
  7465                           ;LCD.c: 135:  CantaIR(0x80 | Fisics);
  7466  00156C  5068               	movf	LcGotoXY@Fisics^0,w,c
  7467  00156E  0980               	iorlw	128
  7468  001570  EC8A  F00D         	call	_CantaIR
  7469                           
  7470                           ;LCD.c: 137:  RowAct = Row;
  7471  001574  C063  F042         	movff	LcGotoXY@Row,_RowAct
  7472                           
  7473                           ;LCD.c: 138:  ColumnAct = Column;
  7474  001578  C06A  F041         	movff	LcGotoXY@Column,_ColumnAct
  7475  00157C  0012               	return		;funcret
  7476  00157E                     __end_of_LcGotoXY:
  7477                           	callstack 0
  7478                           
  7479 ;; *************** function _CantaData *****************
  7480 ;; Defined at:
  7481 ;;		line 220 in file "LCD.c"
  7482 ;; Parameters:    Size  Location     Type
  7483 ;;  Data            1    wreg     unsigned char 
  7484 ;; Auto vars:     Size  Location     Type
  7485 ;;  Data            1    8[COMRAM] unsigned char 
  7486 ;; Return value:  Size  Location     Type
  7487 ;;                  1    wreg      void 
  7488 ;; Registers used:
  7489 ;;		wreg, status,2, status,0, cstack
  7490 ;; Tracked objects:
  7491 ;;		On entry : 0/0
  7492 ;;		On exit  : 0/0
  7493 ;;		Unchanged: 0/0
  7494 ;; Data sizes:     COMRAM   BANK0   BANK1
  7495 ;;      Params:         0       0       0
  7496 ;;      Locals:         1       0       0
  7497 ;;      Temps:          0       0       0
  7498 ;;      Totals:         1       0       0
  7499 ;;Total ram usage:        1 bytes
  7500 ;; Hardware stack levels used: 1
  7501 ;; Hardware stack levels required when called: 4
  7502 ;; This function calls:
  7503 ;;		_CantaPartAlta
  7504 ;;		_CantaPartBaixa
  7505 ;; This function is called by:
  7506 ;;		_LcPutChar
  7507 ;; This function uses a non-reentrant model
  7508 ;;
  7509                           
  7510                           	psect	text31
  7511  0019D2                     __ptext31:
  7512                           	callstack 0
  7513  0019D2                     _CantaData:
  7514                           	callstack 23
  7515                           
  7516                           ;incstack = 0
  7517                           ;CantaData@Data stored from wreg
  7518  0019D2  6E5D               	movwf	CantaData@Data^0,c
  7519                           
  7520                           ;LCD.c: 221:  (TRISDbits.TRISD4 = TRISDbits.TRISD5 = TRISDbits.TRISD6 = TRISDbits.TRISD7
      +                           = 0);
  7521  0019D4  EC99  F00D         	call	PL64	;call to abstracted procedure
  7522                           
  7523                           ;LCD.c: 222:  (LATAbits.LATA2 = 1);
  7524  0019D8  8489               	bsf	137,2,c	;volatile
  7525                           
  7526                           ;LCD.c: 223:  (LATEbits.LATE0 = 0);
  7527  0019DA  908D               	bcf	141,0,c	;volatile
  7528                           
  7529                           ;LCD.c: 224:  (LATAbits.LATA5 = 1);
  7530  0019DC  8A89               	bsf	137,5,c	;volatile
  7531                           
  7532                           ;LCD.c: 225:  CantaPartAlta(Data);
  7533  0019DE  505D               	movf	CantaData@Data^0,w,c
  7534  0019E0  EC6E  F00B         	call	_CantaPartAlta
  7535                           
  7536                           ;LCD.c: 226:  (LATAbits.LATA5 = 1);
  7537                           
  7538                           ;LCD.c: 227:  (LATAbits.LATA5 = 0);
  7539                           
  7540                           ;LCD.c: 228:  (LATAbits.LATA5 = 0);
  7541                           
  7542                           ;LCD.c: 229:  (LATAbits.LATA5 = 1);
  7543  0019E4  D80B               	call	PL98	;call to abstracted procedure
  7544                           
  7545                           ;LCD.c: 230:  CantaPartBaixa(Data);
  7546  0019E6  505D               	movf	CantaData@Data^0,w,c
  7547  0019E8  EC38  F00B         	call	_CantaPartBaixa
  7548                           
  7549                           ;LCD.c: 231:  (LATAbits.LATA5 = 1);
  7550                           
  7551                           ;LCD.c: 232:  (LATAbits.LATA5 = 0);
  7552                           
  7553                           ;LCD.c: 233:  (TRISDbits.TRISD4 = TRISDbits.TRISD5 = TRISDbits.TRISD6 = TRISDbits.TRISD7
      +                           = 1);
  7554  0019EC  D000               	goto	PL66	;call to abstracted procedure
  7555  0019EE                     __end_of_CantaData:
  7556                           	callstack 0
  7557  0019EE                     PL66:
  7558                           	callstack 22
  7559  0019EE  8A89               	bsf	137,5,c	;volatile
  7560  0019F0  9A89               	bcf	137,5,c	;volatile
  7561  0019F2  8E95               	bsf	149,7,c	;volatile
  7562  0019F4  8C95               	bsf	149,6,c	;volatile
  7563  0019F6  8A95               	bsf	149,5,c	;volatile
  7564  0019F8  8895               	bsf	149,4,c	;volatile
  7565  0019FA  0012               	return		;funcret
  7566  0019FC                     __end_ofPL66:
  7567                           	callstack 0
  7568  0019FC                     PL98:
  7569                           	callstack 22
  7570  0019FC  8A89               	bsf	137,5,c	;volatile
  7571  0019FE  9A89               	bcf	137,5,c	;volatile
  7572  001A00  9A89               	bcf	137,5,c	;volatile
  7573  001A02  8A89               	bsf	137,5,c	;volatile
  7574  001A04  0012               	return	
  7575  001A06                     __end_ofPL98:
  7576                           	callstack 0
  7577                           
  7578 ;; *************** function _DivideScore *****************
  7579 ;; Defined at:
  7580 ;;		line 142 in file "data.c"
  7581 ;; Parameters:    Size  Location     Type
  7582 ;;  score           2   16[COMRAM] int 
  7583 ;; Auto vars:     Size  Location     Type
  7584 ;;		None
  7585 ;; Return value:  Size  Location     Type
  7586 ;;                  1    wreg      void 
  7587 ;; Registers used:
  7588 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7589 ;; Tracked objects:
  7590 ;;		On entry : 0/0
  7591 ;;		On exit  : 0/0
  7592 ;;		Unchanged: 0/0
  7593 ;; Data sizes:     COMRAM   BANK0   BANK1
  7594 ;;      Params:         2       0       0
  7595 ;;      Locals:         0       0       0
  7596 ;;      Temps:          0       0       0
  7597 ;;      Totals:         2       0       0
  7598 ;;Total ram usage:        2 bytes
  7599 ;; Hardware stack levels used: 1
  7600 ;; Hardware stack levels required when called: 5
  7601 ;; This function calls:
  7602 ;;		_scoreReduce
  7603 ;; This function is called by:
  7604 ;;		_ScoreDigits
  7605 ;;		_motorUser
  7606 ;; This function uses a non-reentrant model
  7607 ;;
  7608                           
  7609                           	psect	text32
  7610  001A36                     __ptext32:
  7611                           	callstack 0
  7612  001A36                     _DivideScore:
  7613                           	callstack 24
  7614                           
  7615                           ;data.c: 143:         digit=0;
  7616                           
  7617                           ;incstack = 0
  7618  001A36  6A4B               	clrf	_digit^0,c
  7619                           
  7620                           ;data.c: 144:         score=scoreReduce(score);
  7621  001A38  D811               	call	PL78	;call to abstracted procedure
  7622  001A3A  EC81  F00C         	call	_scoreReduce	;wreg free
  7623                           
  7624                           ;data.c: 145:         digit=digit+1;
  7625  001A3E  D808               	call	PL56	;call to abstracted procedure
  7626                           
  7627                           ;data.c: 146:         score=scoreReduce(score);
  7628  001A40  D80D               	call	PL78	;call to abstracted procedure
  7629  001A42  EC81  F00C         	call	_scoreReduce	;wreg free
  7630                           
  7631                           ;data.c: 147:         digit=digit+1;
  7632  001A46  D804               	call	PL56	;call to abstracted procedure
  7633                           
  7634                           ;data.c: 148:         score=scoreReduce(score);
  7635  001A48  D809               	call	PL78	;call to abstracted procedure
  7636  001A4A  EC81  F00C         	call	_scoreReduce	;wreg free
  7637                           
  7638                           ;data.c: 149:         digit=digit+1;
  7639  001A4E  D000               	goto	PL56	;call to abstracted procedure
  7640  001A50                     __end_of_DivideScore:
  7641                           	callstack 0
  7642  001A50                     PL56:
  7643                           	callstack 24
  7644  001A50  C063  F065         	movff	?_scoreReduce,DivideScore@score
  7645  001A54  C064  F066         	movff	?_scoreReduce+1,DivideScore@score+1
  7646  001A58  2A4B               	incf	_digit^0,f,c
  7647  001A5A  0012               	return	
  7648  001A5C                     __end_ofPL56:
  7649                           	callstack 0
  7650  001A5C                     PL78:
  7651                           	callstack 24
  7652  001A5C  C065  F063         	movff	DivideScore@score,scoreReduce@score
  7653  001A60  C066  F064         	movff	DivideScore@score+1,scoreReduce@score+1
  7654  001A64  0012               	return	
  7655  001A66                     __end_ofPL78:
  7656                           	callstack 0
  7657                           
  7658 ;; *************** function _scoreReduce *****************
  7659 ;; Defined at:
  7660 ;;		line 137 in file "data.c"
  7661 ;; Parameters:    Size  Location     Type
  7662 ;;  score           2   14[COMRAM] int 
  7663 ;; Auto vars:     Size  Location     Type
  7664 ;;		None
  7665 ;; Return value:  Size  Location     Type
  7666 ;;                  2   14[COMRAM] int 
  7667 ;; Registers used:
  7668 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7669 ;; Tracked objects:
  7670 ;;		On entry : 0/0
  7671 ;;		On exit  : 0/0
  7672 ;;		Unchanged: 0/0
  7673 ;; Data sizes:     COMRAM   BANK0   BANK1
  7674 ;;      Params:         2       0       0
  7675 ;;      Locals:         0       0       0
  7676 ;;      Temps:          0       0       0
  7677 ;;      Totals:         2       0       0
  7678 ;;Total ram usage:        2 bytes
  7679 ;; Hardware stack levels used: 1
  7680 ;; Hardware stack levels required when called: 4
  7681 ;; This function calls:
  7682 ;;		___awdiv
  7683 ;;		___awmod
  7684 ;; This function is called by:
  7685 ;;		_DivideScore
  7686 ;; This function uses a non-reentrant model
  7687 ;;
  7688                           
  7689                           	psect	text33
  7690  001902                     __ptext33:
  7691                           	callstack 0
  7692  001902                     _scoreReduce:
  7693                           	callstack 24
  7694                           
  7695                           ;data.c: 138:     current_score[digit]=(int)(score%10);
  7696                           
  7697                           ;incstack = 0
  7698  001902  C063  F05B         	movff	scoreReduce@score,___awmod@dividend
  7699  001906  C064  F05C         	movff	scoreReduce@score+1,___awmod@dividend+1
  7700  00190A  6A5E               	clrf	(___awmod@divisor+1)^0,c
  7701  00190C  0E0A               	movlw	10
  7702  00190E  6E5D               	movwf	___awmod@divisor^0,c
  7703  001910  ECA4  F00B         	call	___awmod	;wreg free
  7704  001914  504B               	movf	_digit^0,w,c
  7705  001916  0D02               	mullw	2
  7706  001918  50F3               	movf	243,w,c
  7707  00191A  0FB2               	addlw	low _current_score
  7708  00191C  6ED9               	movwf	fsr2l,c
  7709  00191E  6ADA               	clrf	fsr2h,c
  7710  001920  C05B  FFDE         	movff	?___awmod,postinc2
  7711  001924  C05C  FFDD         	movff	?___awmod+1,postdec2
  7712                           
  7713                           ;data.c: 139:     score= (int)(score/10);
  7714  001928  C063  F05B         	movff	scoreReduce@score,___awdiv@dividend
  7715  00192C  C064  F05C         	movff	scoreReduce@score+1,___awdiv@dividend+1
  7716  001930  6A5E               	clrf	(___awdiv@divisor+1)^0,c
  7717  001932  0E0A               	movlw	10
  7718  001934  6E5D               	movwf	___awdiv@divisor^0,c
  7719  001936  ECFC  F00A         	call	___awdiv	;wreg free
  7720  00193A  C05B  F063         	movff	?___awdiv,scoreReduce@score
  7721  00193E  C05C  F064         	movff	?___awdiv+1,scoreReduce@score+1
  7722                           
  7723                           ;data.c: 140:     return score;
  7724  001942  C063  F063         	movff	scoreReduce@score,?_scoreReduce
  7725  001946  C064  F064         	movff	scoreReduce@score+1,?_scoreReduce+1
  7726  00194A  0012               	return		;funcret
  7727  00194C                     __end_of_scoreReduce:
  7728                           	callstack 0
  7729                           
  7730 ;; *************** function ___awmod *****************
  7731 ;; Defined at:
  7732 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\awmod.c"
  7733 ;; Parameters:    Size  Location     Type
  7734 ;;  dividend        2    6[COMRAM] int 
  7735 ;;  divisor         2    8[COMRAM] int 
  7736 ;; Auto vars:     Size  Location     Type
  7737 ;;  sign            1   11[COMRAM] unsigned char 
  7738 ;;  counter         1   10[COMRAM] unsigned char 
  7739 ;; Return value:  Size  Location     Type
  7740 ;;                  2    6[COMRAM] int 
  7741 ;; Registers used:
  7742 ;;		wreg, status,2, status,0
  7743 ;; Tracked objects:
  7744 ;;		On entry : 0/0
  7745 ;;		On exit  : 0/0
  7746 ;;		Unchanged: 0/0
  7747 ;; Data sizes:     COMRAM   BANK0   BANK1
  7748 ;;      Params:         4       0       0
  7749 ;;      Locals:         2       0       0
  7750 ;;      Temps:          0       0       0
  7751 ;;      Totals:         6       0       0
  7752 ;;Total ram usage:        6 bytes
  7753 ;; Hardware stack levels used: 1
  7754 ;; Hardware stack levels required when called: 3
  7755 ;; This function calls:
  7756 ;;		Nothing
  7757 ;; This function is called by:
  7758 ;;		_scoreReduce
  7759 ;; This function uses a non-reentrant model
  7760 ;;
  7761                           
  7762                           	psect	text34
  7763  001748                     __ptext34:
  7764                           	callstack 0
  7765  001748                     ___awmod:
  7766                           	callstack 24
  7767                           
  7768                           ;incstack = 0
  7769  001748  6A60               	clrf	___awmod@sign^0,c
  7770  00174A  AE5C               	btfss	(___awmod@dividend+1)^0,7,c
  7771  00174C  D006               	goto	l4668
  7772  00174E  6C5B               	negf	___awmod@dividend^0,c
  7773  001750  1E5C               	comf	(___awmod@dividend+1)^0,f,c
  7774  001752  B0D8               	btfsc	status,0,c
  7775  001754  2A5C               	incf	(___awmod@dividend+1)^0,f,c
  7776  001756  0E01               	movlw	1
  7777  001758  6E60               	movwf	___awmod@sign^0,c
  7778  00175A                     l4668:
  7779  00175A  AE5E               	btfss	(___awmod@divisor+1)^0,7,c
  7780  00175C  D004               	goto	l4672
  7781  00175E  6C5D               	negf	___awmod@divisor^0,c
  7782  001760  1E5E               	comf	(___awmod@divisor+1)^0,f,c
  7783  001762  B0D8               	btfsc	status,0,c
  7784  001764  2A5E               	incf	(___awmod@divisor+1)^0,f,c
  7785  001766                     l4672:
  7786  001766  505D               	movf	___awmod@divisor^0,w,c
  7787  001768  105E               	iorwf	(___awmod@divisor+1)^0,w,c
  7788  00176A  E017               	bz	l4688
  7789  00176C  0E01               	movlw	1
  7790  00176E  6E5F               	movwf	___awmod@counter^0,c
  7791  001770  D004               	goto	l4678
  7792  001772                     l4676:
  7793  001772  90D8               	bcf	status,0,c
  7794  001774  365D               	rlcf	___awmod@divisor^0,f,c
  7795  001776  365E               	rlcf	(___awmod@divisor+1)^0,f,c
  7796  001778  2A5F               	incf	___awmod@counter^0,f,c
  7797  00177A                     l4678:
  7798  00177A  AE5E               	btfss	(___awmod@divisor+1)^0,7,c
  7799  00177C  D7FA               	goto	l4676
  7800  00177E                     u3590:
  7801  00177E  505D               	movf	___awmod@divisor^0,w,c
  7802  001780  5C5B               	subwf	___awmod@dividend^0,w,c
  7803  001782  505E               	movf	(___awmod@divisor+1)^0,w,c
  7804  001784  585C               	subwfb	(___awmod@dividend+1)^0,w,c
  7805  001786  E304               	bnc	l4684
  7806  001788  505D               	movf	___awmod@divisor^0,w,c
  7807  00178A  5E5B               	subwf	___awmod@dividend^0,f,c
  7808  00178C  505E               	movf	(___awmod@divisor+1)^0,w,c
  7809  00178E  5A5C               	subwfb	(___awmod@dividend+1)^0,f,c
  7810  001790                     l4684:
  7811  001790  90D8               	bcf	status,0,c
  7812  001792  325E               	rrcf	(___awmod@divisor+1)^0,f,c
  7813  001794  325D               	rrcf	___awmod@divisor^0,f,c
  7814  001796  2E5F               	decfsz	___awmod@counter^0,f,c
  7815  001798  D7F2               	goto	u3590
  7816  00179A                     l4688:
  7817  00179A  5060               	movf	___awmod@sign^0,w,c
  7818  00179C  E004               	bz	l4692
  7819  00179E  6C5B               	negf	___awmod@dividend^0,c
  7820  0017A0  1E5C               	comf	(___awmod@dividend+1)^0,f,c
  7821  0017A2  B0D8               	btfsc	status,0,c
  7822  0017A4  2A5C               	incf	(___awmod@dividend+1)^0,f,c
  7823  0017A6                     l4692:
  7824  0017A6  C05B  F05B         	movff	___awmod@dividend,?___awmod
  7825  0017AA  C05C  F05C         	movff	___awmod@dividend+1,?___awmod+1
  7826  0017AE  0012               	return		;funcret
  7827  0017B0                     __end_of___awmod:
  7828                           	callstack 0
  7829                           
  7830 ;; *************** function ___awdiv *****************
  7831 ;; Defined at:
  7832 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\awdiv.c"
  7833 ;; Parameters:    Size  Location     Type
  7834 ;;  dividend        2    6[COMRAM] int 
  7835 ;;  divisor         2    8[COMRAM] int 
  7836 ;; Auto vars:     Size  Location     Type
  7837 ;;  quotient        2   12[COMRAM] int 
  7838 ;;  sign            1   11[COMRAM] unsigned char 
  7839 ;;  counter         1   10[COMRAM] unsigned char 
  7840 ;; Return value:  Size  Location     Type
  7841 ;;                  2    6[COMRAM] int 
  7842 ;; Registers used:
  7843 ;;		wreg, status,2, status,0
  7844 ;; Tracked objects:
  7845 ;;		On entry : 0/0
  7846 ;;		On exit  : 0/0
  7847 ;;		Unchanged: 0/0
  7848 ;; Data sizes:     COMRAM   BANK0   BANK1
  7849 ;;      Params:         4       0       0
  7850 ;;      Locals:         4       0       0
  7851 ;;      Temps:          0       0       0
  7852 ;;      Totals:         8       0       0
  7853 ;;Total ram usage:        8 bytes
  7854 ;; Hardware stack levels used: 1
  7855 ;; Hardware stack levels required when called: 3
  7856 ;; This function calls:
  7857 ;;		Nothing
  7858 ;; This function is called by:
  7859 ;;		_scoreReduce
  7860 ;; This function uses a non-reentrant model
  7861 ;;
  7862                           
  7863                           	psect	text35
  7864  0015F8                     __ptext35:
  7865                           	callstack 0
  7866  0015F8                     ___awdiv:
  7867                           	callstack 24
  7868                           
  7869                           ;incstack = 0
  7870  0015F8  6A60               	clrf	___awdiv@sign^0,c
  7871  0015FA  AE5E               	btfss	(___awdiv@divisor+1)^0,7,c
  7872  0015FC  D006               	goto	l4624
  7873  0015FE  6C5D               	negf	___awdiv@divisor^0,c
  7874  001600  1E5E               	comf	(___awdiv@divisor+1)^0,f,c
  7875  001602  B0D8               	btfsc	status,0,c
  7876  001604  2A5E               	incf	(___awdiv@divisor+1)^0,f,c
  7877  001606  0E01               	movlw	1
  7878  001608  6E60               	movwf	___awdiv@sign^0,c
  7879  00160A                     l4624:
  7880  00160A  AE5C               	btfss	(___awdiv@dividend+1)^0,7,c
  7881  00160C  D006               	goto	l4630
  7882  00160E  6C5B               	negf	___awdiv@dividend^0,c
  7883  001610  1E5C               	comf	(___awdiv@dividend+1)^0,f,c
  7884  001612  B0D8               	btfsc	status,0,c
  7885  001614  2A5C               	incf	(___awdiv@dividend+1)^0,f,c
  7886  001616  0E01               	movlw	1
  7887  001618  1A60               	xorwf	___awdiv@sign^0,f,c
  7888  00161A                     l4630:
  7889  00161A  6A61               	clrf	___awdiv@quotient^0,c
  7890  00161C  6A62               	clrf	(___awdiv@quotient+1)^0,c
  7891  00161E  505D               	movf	___awdiv@divisor^0,w,c
  7892  001620  105E               	iorwf	(___awdiv@divisor+1)^0,w,c
  7893  001622  E01B               	bz	l4652
  7894  001624  0E01               	movlw	1
  7895  001626  6E5F               	movwf	___awdiv@counter^0,c
  7896  001628  D004               	goto	l4638
  7897  00162A                     l4636:
  7898  00162A  90D8               	bcf	status,0,c
  7899  00162C  365D               	rlcf	___awdiv@divisor^0,f,c
  7900  00162E  365E               	rlcf	(___awdiv@divisor+1)^0,f,c
  7901  001630  2A5F               	incf	___awdiv@counter^0,f,c
  7902  001632                     l4638:
  7903  001632  AE5E               	btfss	(___awdiv@divisor+1)^0,7,c
  7904  001634  D7FA               	goto	l4636
  7905  001636                     u3530:
  7906  001636  90D8               	bcf	status,0,c
  7907  001638  3661               	rlcf	___awdiv@quotient^0,f,c
  7908  00163A  3662               	rlcf	(___awdiv@quotient+1)^0,f,c
  7909  00163C  505D               	movf	___awdiv@divisor^0,w,c
  7910  00163E  5C5B               	subwf	___awdiv@dividend^0,w,c
  7911  001640  505E               	movf	(___awdiv@divisor+1)^0,w,c
  7912  001642  585C               	subwfb	(___awdiv@dividend+1)^0,w,c
  7913  001644  E305               	bnc	l4648
  7914  001646  505D               	movf	___awdiv@divisor^0,w,c
  7915  001648  5E5B               	subwf	___awdiv@dividend^0,f,c
  7916  00164A  505E               	movf	(___awdiv@divisor+1)^0,w,c
  7917  00164C  5A5C               	subwfb	(___awdiv@dividend+1)^0,f,c
  7918  00164E  8061               	bsf	___awdiv@quotient^0,0,c
  7919  001650                     l4648:
  7920  001650  90D8               	bcf	status,0,c
  7921  001652  325E               	rrcf	(___awdiv@divisor+1)^0,f,c
  7922  001654  325D               	rrcf	___awdiv@divisor^0,f,c
  7923  001656  2E5F               	decfsz	___awdiv@counter^0,f,c
  7924  001658  D7EE               	goto	u3530
  7925  00165A                     l4652:
  7926  00165A  5060               	movf	___awdiv@sign^0,w,c
  7927  00165C  E004               	bz	l4656
  7928  00165E  6C61               	negf	___awdiv@quotient^0,c
  7929  001660  1E62               	comf	(___awdiv@quotient+1)^0,f,c
  7930  001662  B0D8               	btfsc	status,0,c
  7931  001664  2A62               	incf	(___awdiv@quotient+1)^0,f,c
  7932  001666                     l4656:
  7933  001666  C061  F05B         	movff	___awdiv@quotient,?___awdiv
  7934  00166A  C062  F05C         	movff	___awdiv@quotient+1,?___awdiv+1
  7935  00166E  0012               	return		;funcret
  7936  001670                     __end_of___awdiv:
  7937                           	callstack 0
  7938                           
  7939 ;; *************** function _LcClear *****************
  7940 ;; Defined at:
  7941 ;;		line 93 in file "LCD.c"
  7942 ;; Parameters:    Size  Location     Type
  7943 ;;		None
  7944 ;; Auto vars:     Size  Location     Type
  7945 ;;		None
  7946 ;; Return value:  Size  Location     Type
  7947 ;;                  1    wreg      void 
  7948 ;; Registers used:
  7949 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7950 ;; Tracked objects:
  7951 ;;		On entry : 0/0
  7952 ;;		On exit  : 0/0
  7953 ;;		Unchanged: 0/0
  7954 ;; Data sizes:     COMRAM   BANK0   BANK1
  7955 ;;      Params:         0       0       0
  7956 ;;      Locals:         0       0       0
  7957 ;;      Temps:          0       0       0
  7958 ;;      Totals:         0       0       0
  7959 ;;Total ram usage:        0 bytes
  7960 ;; Hardware stack levels used: 1
  7961 ;; Hardware stack levels required when called: 5
  7962 ;; This function calls:
  7963 ;;		_CantaIR
  7964 ;;		_Espera
  7965 ;;		_WaitForBusy
  7966 ;; This function is called by:
  7967 ;;		_motorMenu
  7968 ;;		_motor_SMS
  7969 ;;		_motor_data
  7970 ;;		_motor_hour
  7971 ;;		_motorEusart
  7972 ;; This function uses a non-reentrant model
  7973 ;;
  7974                           
  7975                           	psect	text36
  7976  001D14                     __ptext36:
  7977                           	callstack 0
  7978  001D14                     _LcClear:
  7979                           	callstack 24
  7980                           
  7981                           ;LCD.c: 96:  WaitForBusy(); CantaIR(0x01);
  7982                           
  7983                           ;incstack = 0
  7984  001D14  ECCA  F00C         	call	_WaitForBusy	;wreg free
  7985  001D18  0E01               	movlw	1
  7986  001D1A  EC8A  F00D         	call	_CantaIR
  7987                           
  7988                           ;LCD.c: 97:  Espera(Timer, 3);
  7989  001D1E  EC78  F009         	call	PL18	;call to abstracted procedure
  7990  001D22  0E03               	movlw	3
  7991  001D24  6E64               	movwf	Espera@ms^0,c
  7992  001D26  EF1A  F00E         	goto	_Espera	;wreg free
  7993  001D2A                     __end_of_LcClear:
  7994                           	callstack 0
  7995                           
  7996 ;; *************** function _InitSpeaker *****************
  7997 ;; Defined at:
  7998 ;;		line 5 in file "speaker.c"
  7999 ;; Parameters:    Size  Location     Type
  8000 ;;		None
  8001 ;; Auto vars:     Size  Location     Type
  8002 ;;		None
  8003 ;; Return value:  Size  Location     Type
  8004 ;;                  1    wreg      void 
  8005 ;; Registers used:
  8006 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8007 ;; Tracked objects:
  8008 ;;		On entry : 0/0
  8009 ;;		On exit  : 0/0
  8010 ;;		Unchanged: 0/0
  8011 ;; Data sizes:     COMRAM   BANK0   BANK1
  8012 ;;      Params:         0       0       0
  8013 ;;      Locals:         0       0       0
  8014 ;;      Temps:          0       0       0
  8015 ;;      Totals:         0       0       0
  8016 ;;Total ram usage:        0 bytes
  8017 ;; Hardware stack levels used: 1
  8018 ;; Hardware stack levels required when called: 4
  8019 ;; This function calls:
  8020 ;;		_TiGetTimer
  8021 ;;		_TiResetTics
  8022 ;; This function is called by:
  8023 ;;		_main
  8024 ;;		_motorEusart
  8025 ;; This function uses a non-reentrant model
  8026 ;;
  8027                           
  8028                           	psect	text37
  8029  001BB0                     __ptext37:
  8030                           	callstack 0
  8031  001BB0                     _InitSpeaker:
  8032                           	callstack 25
  8033                           
  8034                           ;speaker.c: 6:     timerSpeaker1=TiGetTimer();
  8035                           
  8036                           ;incstack = 0
  8037  001BB0  EC60  F00D         	call	_TiGetTimer	;wreg free
  8038  001BB4  6E2B               	movwf	_timerSpeaker1@TTimer$F1504^0,c
  8039                           
  8040                           ;speaker.c: 7:     timerSpeaker2=TiGetTimer();
  8041  001BB6  EC60  F00D         	call	_TiGetTimer	;wreg free
  8042  001BBA  6E2A               	movwf	_timerSpeaker2@TTimer$F1505^0,c
  8043                           
  8044                           ;speaker.c: 8:     TiResetTics(timerSpeaker1);
  8045  001BBC  502B               	movf	_timerSpeaker1@TTimer$F1504^0,w,c
  8046  001BBE  EC57  F00E         	call	_TiResetTics
  8047                           
  8048                           ;speaker.c: 9:     TiResetTics(timerSpeaker2);
  8049  001BC2  502A               	movf	_timerSpeaker2@TTimer$F1505^0,w,c
  8050  001BC4  EC57  F00E         	call	_TiResetTics
  8051                           
  8052                           ;speaker.c: 10:     TRISBbits.TRISB2=0;
  8053  001BC8  9493               	bcf	147,2,c	;volatile
  8054                           
  8055                           ;speaker.c: 11:     cycles=1;
  8056  001BCA  0E01               	movlw	1
  8057  001BCC  6E29               	movwf	_cycles@TTimer$F1506^0,c
  8058                           
  8059                           ;speaker.c: 12:     state_speaker=0;
  8060  001BCE  6A4A               	clrf	_state_speaker^0,c
  8061  001BD0  0012               	return		;funcret
  8062  001BD2                     __end_of_InitSpeaker:
  8063                           	callstack 0
  8064                           
  8065 ;; *************** function _initUser *****************
  8066 ;; Defined at:
  8067 ;;		line 7 in file "queueUser.c"
  8068 ;; Parameters:    Size  Location     Type
  8069 ;;		None
  8070 ;; Auto vars:     Size  Location     Type
  8071 ;;		None
  8072 ;; Return value:  Size  Location     Type
  8073 ;;                  1    wreg      void 
  8074 ;; Registers used:
  8075 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8076 ;; Tracked objects:
  8077 ;;		On entry : 0/0
  8078 ;;		On exit  : 0/0
  8079 ;;		Unchanged: 0/0
  8080 ;; Data sizes:     COMRAM   BANK0   BANK1
  8081 ;;      Params:         0       0       0
  8082 ;;      Locals:         0       0       0
  8083 ;;      Temps:          0       0       0
  8084 ;;      Totals:         0       0       0
  8085 ;;Total ram usage:        0 bytes
  8086 ;; Hardware stack levels used: 1
  8087 ;; Hardware stack levels required when called: 5
  8088 ;; This function calls:
  8089 ;;		_TiGetTimer
  8090 ;;		_userReset
  8091 ;; This function is called by:
  8092 ;;		_main
  8093 ;; This function uses a non-reentrant model
  8094 ;;
  8095                           
  8096                           	psect	text38
  8097  001E02                     __ptext38:
  8098                           	callstack 0
  8099  001E02                     _initUser:
  8100                           	callstack 25
  8101                           
  8102                           ;queueUser.c: 8:     timer_user=TiGetTimer();
  8103                           
  8104                           ;incstack = 0
  8105  001E02  EC60  F00D         	call	_TiGetTimer	;wreg free
  8106  001E06  6E17               	movwf	_timer_user^0,c
  8107                           
  8108                           ;queueUser.c: 10:     times4=0;
  8109  001E08  EF7E  F00E         	goto	_userReset	;wreg free
  8110  001E0C                     __end_of_initUser:
  8111                           	callstack 0
  8112                           
  8113 ;; *************** function _userReset *****************
  8114 ;; Defined at:
  8115 ;;		line 138 in file "queueUser.c"
  8116 ;; Parameters:    Size  Location     Type
  8117 ;;		None
  8118 ;; Auto vars:     Size  Location     Type
  8119 ;;		None
  8120 ;; Return value:  Size  Location     Type
  8121 ;;                  1    wreg      void 
  8122 ;; Registers used:
  8123 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8124 ;; Tracked objects:
  8125 ;;		On entry : 0/0
  8126 ;;		On exit  : 0/0
  8127 ;;		Unchanged: 0/0
  8128 ;; Data sizes:     COMRAM   BANK0   BANK1
  8129 ;;      Params:         0       0       0
  8130 ;;      Locals:         0       0       0
  8131 ;;      Temps:          0       0       0
  8132 ;;      Totals:         0       0       0
  8133 ;;Total ram usage:        0 bytes
  8134 ;; Hardware stack levels used: 1
  8135 ;; Hardware stack levels required when called: 4
  8136 ;; This function calls:
  8137 ;;		_InitMarquee
  8138 ;;		_TiResetTics
  8139 ;; This function is called by:
  8140 ;;		_motorMenu
  8141 ;;		_initUser
  8142 ;;		_motorUser
  8143 ;; This function uses a non-reentrant model
  8144 ;;
  8145                           
  8146                           	psect	text39
  8147  001CFC                     __ptext39:
  8148                           	callstack 0
  8149  001CFC                     _userReset:
  8150                           	callstack 25
  8151                           
  8152                           ;queueUser.c: 140:     InitMarquee();
  8153                           
  8154                           ;incstack = 0
  8155  001CFC  EC95  F00E         	call	_InitMarquee	;wreg free
  8156                           
  8157                           ; BSR set to: 0
  8158                           ;queueUser.c: 141:     r[1]=1;
  8159  001D00  0E01               	movlw	1
  8160  001D02  6FC3               	movwf	(_r@marqueeMenu$F2143+1)& (0+255),b
  8161                           
  8162                           ; BSR set to: 0
  8163                           ;queueUser.c: 142:     r[0]=0;
  8164  001D04  6BC2               	clrf	_r@marqueeMenu$F2143& (0+255),b
  8165                           
  8166                           ; BSR set to: 0
  8167                           ;queueUser.c: 143:     TiResetTics(timer_user);
  8168  001D06  5017               	movf	_timer_user^0,w,c
  8169  001D08  EC57  F00E         	call	_TiResetTics
  8170                           
  8171                           ;queueUser.c: 144:     m=0;
  8172  001D0C  6A1A               	clrf	_m@queueUser$F2168^0,c
  8173                           
  8174                           ;queueUser.c: 145:     n=1;
  8175  001D0E  0E01               	movlw	1
  8176  001D10  6E19               	movwf	_n@queueUser$F2169^0,c
  8177  001D12  0C01               	retlw	1	;funcret
  8178  001D14                     __end_of_userReset:
  8179                           	callstack 0
  8180                           
  8181 ;; *************** function _initSMS *****************
  8182 ;; Defined at:
  8183 ;;		line 21 in file "SMS.c"
  8184 ;; Parameters:    Size  Location     Type
  8185 ;;		None
  8186 ;; Auto vars:     Size  Location     Type
  8187 ;;		None
  8188 ;; Return value:  Size  Location     Type
  8189 ;;                  1    wreg      void 
  8190 ;; Registers used:
  8191 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8192 ;; Tracked objects:
  8193 ;;		On entry : 0/0
  8194 ;;		On exit  : 0/0
  8195 ;;		Unchanged: 0/0
  8196 ;; Data sizes:     COMRAM   BANK0   BANK1
  8197 ;;      Params:         0       0       0
  8198 ;;      Locals:         0       0       0
  8199 ;;      Temps:          0       0       0
  8200 ;;      Totals:         0       0       0
  8201 ;;Total ram usage:        0 bytes
  8202 ;; Hardware stack levels used: 1
  8203 ;; Hardware stack levels required when called: 4
  8204 ;; This function calls:
  8205 ;;		_SMS_Reset
  8206 ;;		_TiGetTimer
  8207 ;; This function is called by:
  8208 ;;		_main
  8209 ;; This function uses a non-reentrant model
  8210 ;;
  8211                           
  8212                           	psect	text40
  8213  001D7E                     __ptext40:
  8214                           	callstack 0
  8215  001D7E                     _initSMS:
  8216                           	callstack 26
  8217                           
  8218                           ;SMS.c: 22:     timer_SMS=TiGetTimer();
  8219                           
  8220                           ;incstack = 0
  8221  001D7E  EC60  F00D         	call	_TiGetTimer	;wreg free
  8222  001D82  6E2D               	movwf	_timer_SMS^0,c
  8223                           
  8224                           ;SMS.c: 23:     total_users=0;
  8225  001D84  6A52               	clrf	_total_users^0,c
  8226                           
  8227                           ;SMS.c: 24:     num_user=0;
  8228  001D86  6A31               	clrf	_num_user^0,c
  8229                           
  8230                           ;SMS.c: 25:     SMS_Reset();
  8231  001D88  ECD9  F00E         	call	_SMS_Reset	;wreg free
  8232                           
  8233                           ;SMS.c: 26:     digit=0;
  8234  001D8C  6A4B               	clrf	_digit^0,c
  8235  001D8E  0012               	return		;funcret
  8236  001D90                     __end_of_initSMS:
  8237                           	callstack 0
  8238                           
  8239 ;; *************** function _SMS_Reset *****************
  8240 ;; Defined at:
  8241 ;;		line 223 in file "SMS.c"
  8242 ;; Parameters:    Size  Location     Type
  8243 ;;		None
  8244 ;; Auto vars:     Size  Location     Type
  8245 ;;		None
  8246 ;; Return value:  Size  Location     Type
  8247 ;;                  1    wreg      void 
  8248 ;; Registers used:
  8249 ;;		None
  8250 ;; Tracked objects:
  8251 ;;		On entry : 0/0
  8252 ;;		On exit  : 0/0
  8253 ;;		Unchanged: 0/0
  8254 ;; Data sizes:     COMRAM   BANK0   BANK1
  8255 ;;      Params:         0       0       0
  8256 ;;      Locals:         0       0       0
  8257 ;;      Temps:          0       0       0
  8258 ;;      Totals:         0       0       0
  8259 ;;Total ram usage:        0 bytes
  8260 ;; Hardware stack levels used: 1
  8261 ;; Hardware stack levels required when called: 3
  8262 ;; This function calls:
  8263 ;;		Nothing
  8264 ;; This function is called by:
  8265 ;;		_motorMenu
  8266 ;;		_initSMS
  8267 ;;		_motor_SMS
  8268 ;; This function uses a non-reentrant model
  8269 ;;
  8270                           
  8271                           	psect	text41
  8272  001DB2                     __ptext41:
  8273                           	callstack 0
  8274  001DB2                     _SMS_Reset:
  8275                           	callstack 26
  8276                           
  8277                           ;SMS.c: 224:     key_SMS=0;
  8278                           
  8279                           ;incstack = 0
  8280  001DB2  6A2F               	clrf	_key_SMS^0,c
  8281                           
  8282                           ;SMS.c: 225:     key_aux=0;
  8283  001DB4  6A35               	clrf	_key_aux^0,c
  8284                           
  8285                           ;SMS.c: 226:     rowi=0;
  8286  001DB6  6A50               	clrf	_rowi^0,c
  8287                           
  8288                           ;SMS.c: 227:     digit=0;
  8289  001DB8  6A4B               	clrf	_digit^0,c
  8290                           
  8291                           ;SMS.c: 228:     pointer=0;
  8292  001DBA  6A51               	clrf	_pointer^0,c
  8293                           
  8294                           ;SMS.c: 229:     keyGot=0;
  8295  001DBC  6A32               	clrf	_keyGot^0,c
  8296                           
  8297                           ;SMS.c: 230:     stateSMS=0;
  8298  001DBE  6A30               	clrf	_stateSMS^0,c
  8299  001DC0  0012               	return		;funcret
  8300  001DC2                     __end_of_SMS_Reset:
  8301                           	callstack 0
  8302                           
  8303 ;; *************** function _initMenu *****************
  8304 ;; Defined at:
  8305 ;;		line 6 in file "menu.c"
  8306 ;; Parameters:    Size  Location     Type
  8307 ;;		None
  8308 ;; Auto vars:     Size  Location     Type
  8309 ;;		None
  8310 ;; Return value:  Size  Location     Type
  8311 ;;                  1    wreg      void 
  8312 ;; Registers used:
  8313 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8314 ;; Tracked objects:
  8315 ;;		On entry : 0/0
  8316 ;;		On exit  : 0/0
  8317 ;;		Unchanged: 0/0
  8318 ;; Data sizes:     COMRAM   BANK0   BANK1
  8319 ;;      Params:         0       0       0
  8320 ;;      Locals:         0       0       0
  8321 ;;      Temps:          0       0       0
  8322 ;;      Totals:         0       0       0
  8323 ;;Total ram usage:        0 bytes
  8324 ;; Hardware stack levels used: 1
  8325 ;; Hardware stack levels required when called: 5
  8326 ;; This function calls:
  8327 ;;		_TiGetTimer
  8328 ;;		_menuReset
  8329 ;; This function is called by:
  8330 ;;		_main
  8331 ;; This function uses a non-reentrant model
  8332 ;;
  8333                           
  8334                           	psect	text42
  8335  001D90                     __ptext42:
  8336                           	callstack 0
  8337  001D90                     _initMenu:
  8338                           	callstack 25
  8339                           
  8340                           ;menu.c: 7:    menuReset();
  8341                           
  8342                           ;incstack = 0
  8343  001D90  ECB5  F00E         	call	_menuReset	;wreg free
  8344                           
  8345                           ; BSR set to: 0
  8346                           ;menu.c: 8:     option3=0;
  8347                           
  8348                           ; BSR set to: 0
  8349                           ;menu.c: 9:     option4=1;
  8350  001D94  EC21  F005         	call	PL126	;call to abstracted procedure
  8351                           
  8352                           ; BSR set to: 0
  8353                           ;menu.c: 10:     timer_menu=TiGetTimer();
  8354  001D98  EC60  F00D         	call	_TiGetTimer	;wreg free
  8355  001D9C  6E3C               	movwf	_timer_menu@TData$F1116^0,c
  8356                           
  8357                           ;menu.c: 11:     times_pressed=0;
  8358  001D9E  6A4F               	clrf	_times_pressed^0,c
  8359  001DA0  0012               	return		;funcret
  8360  001DA2                     __end_of_initMenu:
  8361                           	callstack 0
  8362                           
  8363 ;; *************** function _menuReset *****************
  8364 ;; Defined at:
  8365 ;;		line 189 in file "menu.c"
  8366 ;; Parameters:    Size  Location     Type
  8367 ;;		None
  8368 ;; Auto vars:     Size  Location     Type
  8369 ;;		None
  8370 ;; Return value:  Size  Location     Type
  8371 ;;                  1    wreg      void 
  8372 ;; Registers used:
  8373 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8374 ;; Tracked objects:
  8375 ;;		On entry : 0/0
  8376 ;;		On exit  : 3F/0
  8377 ;;		Unchanged: 0/0
  8378 ;; Data sizes:     COMRAM   BANK0   BANK1
  8379 ;;      Params:         0       0       0
  8380 ;;      Locals:         0       0       0
  8381 ;;      Temps:          0       0       0
  8382 ;;      Totals:         0       0       0
  8383 ;;Total ram usage:        0 bytes
  8384 ;; Hardware stack levels used: 1
  8385 ;; Hardware stack levels required when called: 4
  8386 ;; This function calls:
  8387 ;;		_InitMarquee
  8388 ;;		_TiResetTics
  8389 ;; This function is called by:
  8390 ;;		_initMenu
  8391 ;;		_motorMenu
  8392 ;; This function uses a non-reentrant model
  8393 ;;
  8394                           
  8395                           	psect	text43
  8396  001D6A                     __ptext43:
  8397                           	callstack 0
  8398  001D6A                     _menuReset:
  8399                           	callstack 25
  8400                           
  8401                           ;menu.c: 190:     TiResetTics(timer_menu);
  8402                           
  8403                           ;incstack = 0
  8404  001D6A  503C               	movf	_timer_menu@TData$F1116^0,w,c
  8405  001D6C  EC57  F00E         	call	_TiResetTics
  8406                           
  8407                           ;menu.c: 191:     times_8=0;
  8408  001D70  6A3D               	clrf	_times_8@TData$F1114^0,c
  8409                           
  8410                           ;menu.c: 192:     InitMarquee();
  8411  001D72  EC95  F00E         	call	_InitMarquee	;wreg free
  8412                           
  8413                           ; BSR set to: 0
  8414                           ;menu.c: 193:     key2=0;
  8415  001D76  6A3B               	clrf	_key2^0,c
  8416                           
  8417                           ; BSR set to: 0
  8418                           ;menu.c: 194:     sub_opt=0;
  8419  001D78  6A3E               	clrf	_sub_opt@marqueeMenu$F1104^0,c
  8420                           
  8421                           ; BSR set to: 0
  8422                           ;menu.c: 195:     keyMenu=0;
  8423  001D7A  6A3A               	clrf	_keyMenu^0,c
  8424                           
  8425                           ; BSR set to: 0
  8426  001D7C  0012               	return		;funcret
  8427  001D7E                     __end_of_menuReset:
  8428                           	callstack 0
  8429                           
  8430 ;; *************** function _InitMarquee *****************
  8431 ;; Defined at:
  8432 ;;		line 115 in file "marquee_menu.c"
  8433 ;; Parameters:    Size  Location     Type
  8434 ;;		None
  8435 ;; Auto vars:     Size  Location     Type
  8436 ;;		None
  8437 ;; Return value:  Size  Location     Type
  8438 ;;                  1    wreg      void 
  8439 ;; Registers used:
  8440 ;;		wreg, status,2
  8441 ;; Tracked objects:
  8442 ;;		On entry : 0/0
  8443 ;;		On exit  : 3F/0
  8444 ;;		Unchanged: 0/0
  8445 ;; Data sizes:     COMRAM   BANK0   BANK1
  8446 ;;      Params:         0       0       0
  8447 ;;      Locals:         0       0       0
  8448 ;;      Temps:          0       0       0
  8449 ;;      Totals:         0       0       0
  8450 ;;Total ram usage:        0 bytes
  8451 ;; Hardware stack levels used: 1
  8452 ;; Hardware stack levels required when called: 3
  8453 ;; This function calls:
  8454 ;;		Nothing
  8455 ;; This function is called by:
  8456 ;;		_motorMenu
  8457 ;;		_menuReset
  8458 ;;		_userReset
  8459 ;; This function uses a non-reentrant model
  8460 ;;
  8461                           
  8462                           	psect	text44
  8463  001D2A                     __ptext44:
  8464                           	callstack 0
  8465  001D2A                     _InitMarquee:
  8466                           	callstack 25
  8467                           
  8468                           ;marquee_menu.c: 116:      j[0]=0;
  8469                           
  8470                           ; BSR set to: 0
  8471                           ;incstack = 0
  8472  001D2A  6A05               	clrf	_j@marqueeMenu$F2195^0,c
  8473                           
  8474                           ;marquee_menu.c: 117:      j[1]=0;
  8475  001D2C  6A06               	clrf	(_j@marqueeMenu$F2195+1)^0,c
  8476                           
  8477                           ;marquee_menu.c: 118:      r[0]=0;
  8478  001D2E  0100               	movlb	0	; () banked
  8479  001D30  6BBE               	clrf	_r@marqueeMenu$F2196& (0+255),b
  8480                           
  8481                           ; BSR set to: 0
  8482                           ;marquee_menu.c: 119:      r[1]=1;
  8483  001D32  0E01               	movlw	1
  8484  001D34  6FBF               	movwf	(_r@marqueeMenu$F2196+1)& (0+255),b
  8485                           
  8486                           ; BSR set to: 0
  8487                           ;marquee_menu.c: 120:      i[0]=0;
  8488  001D36  6A03               	clrf	_i@marqueeMenu$F2197^0,c
  8489                           
  8490                           ; BSR set to: 0
  8491                           ;marquee_menu.c: 121:      i[1]=0;
  8492  001D38  6A04               	clrf	(_i@marqueeMenu$F2197+1)^0,c
  8493                           
  8494                           ; BSR set to: 0
  8495                           ;marquee_menu.c: 122:      k[0]=0;
  8496  001D3A  6A01               	clrf	_k@marqueeMenu$F2198^0,c
  8497                           
  8498                           ; BSR set to: 0
  8499                           ;marquee_menu.c: 123:      k[1]=0;
  8500  001D3C  6A02               	clrf	(_k@marqueeMenu$F2198+1)^0,c
  8501                           
  8502                           ; BSR set to: 0
  8503  001D3E  0012               	return		;funcret
  8504  001D40                     __end_of_InitMarquee:
  8505                           	callstack 0
  8506                           
  8507 ;; *************** function _initMatrix *****************
  8508 ;; Defined at:
  8509 ;;		line 16 in file "matrix.c"
  8510 ;; Parameters:    Size  Location     Type
  8511 ;;		None
  8512 ;; Auto vars:     Size  Location     Type
  8513 ;;		None
  8514 ;; Return value:  Size  Location     Type
  8515 ;;                  1    wreg      void 
  8516 ;; Registers used:
  8517 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8518 ;; Tracked objects:
  8519 ;;		On entry : 0/0
  8520 ;;		On exit  : 0/0
  8521 ;;		Unchanged: 0/0
  8522 ;; Data sizes:     COMRAM   BANK0   BANK1
  8523 ;;      Params:         0       0       0
  8524 ;;      Locals:         0       0       0
  8525 ;;      Temps:          0       0       0
  8526 ;;      Totals:         0       0       0
  8527 ;;Total ram usage:        0 bytes
  8528 ;; Hardware stack levels used: 1
  8529 ;; Hardware stack levels required when called: 4
  8530 ;; This function calls:
  8531 ;;		_TiGetTimer
  8532 ;; This function is called by:
  8533 ;;		_main
  8534 ;; This function uses a non-reentrant model
  8535 ;;
  8536                           
  8537                           	psect	text45
  8538  001CCA                     __ptext45:
  8539                           	callstack 0
  8540  001CCA                     _initMatrix:
  8541                           	callstack 26
  8542                           
  8543                           ;matrix.c: 17:  TRISBbits.TRISB5 = 1;
  8544                           
  8545                           ; BSR set to: 0
  8546                           ;incstack = 0
  8547  001CCA  8A93               	bsf	147,5,c	;volatile
  8548                           
  8549                           ;matrix.c: 18:     TRISBbits.TRISB4= 1;
  8550  001CCC  8893               	bsf	147,4,c	;volatile
  8551                           
  8552                           ;matrix.c: 19:     TRISBbits.TRISB3 = 1;
  8553  001CCE  8693               	bsf	147,3,c	;volatile
  8554                           
  8555                           ;matrix.c: 20:     TRISDbits.TRISD3 = 0;
  8556  001CD0  9695               	bcf	149,3,c	;volatile
  8557                           
  8558                           ;matrix.c: 21:     TRISDbits.TRISD2 = 0;
  8559  001CD2  9495               	bcf	149,2,c	;volatile
  8560                           
  8561                           ;matrix.c: 22:     TRISDbits.TRISD1 = 0;
  8562  001CD4  9295               	bcf	149,1,c	;volatile
  8563                           
  8564                           ;matrix.c: 23:     TRISDbits.TRISD0 = 0;
  8565  001CD6  9095               	bcf	149,0,c	;volatile
  8566                           
  8567                           ;matrix.c: 24:  timer = TiGetTimer();
  8568  001CD8  EC60  F00D         	call	_TiGetTimer	;wreg free
  8569  001CDC  6E47               	movwf	_timer^0,c
  8570                           
  8571                           ;matrix.c: 25:     key='#';
  8572  001CDE  0E23               	movlw	35
  8573  001CE0  6E46               	movwf	_key^0,c
  8574  001CE2  0C23               	retlw	35	;funcret
  8575  001CE4                     __end_of_initMatrix:
  8576                           	callstack 0
  8577                           
  8578 ;; *************** function _initData *****************
  8579 ;; Defined at:
  8580 ;;		line 6 in file "data.c"
  8581 ;; Parameters:    Size  Location     Type
  8582 ;;		None
  8583 ;; Auto vars:     Size  Location     Type
  8584 ;;  m               1    6[COMRAM] unsigned char 
  8585 ;; Return value:  Size  Location     Type
  8586 ;;                  1    wreg      void 
  8587 ;; Registers used:
  8588 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8589 ;; Tracked objects:
  8590 ;;		On entry : 0/0
  8591 ;;		On exit  : 0/0
  8592 ;;		Unchanged: 0/0
  8593 ;; Data sizes:     COMRAM   BANK0   BANK1
  8594 ;;      Params:         0       0       0
  8595 ;;      Locals:         1       0       0
  8596 ;;      Temps:          0       0       0
  8597 ;;      Totals:         1       0       0
  8598 ;;Total ram usage:        1 bytes
  8599 ;; Hardware stack levels used: 1
  8600 ;; Hardware stack levels required when called: 4
  8601 ;; This function calls:
  8602 ;;		_return_to_main
  8603 ;; This function is called by:
  8604 ;;		_main
  8605 ;; This function uses a non-reentrant model
  8606 ;;
  8607                           
  8608                           	psect	text46
  8609  001C72                     __ptext46:
  8610                           	callstack 0
  8611  001C72                     _initData:
  8612                           	callstack 26
  8613                           
  8614                           ;data.c: 7:     return_to_main();
  8615                           
  8616                           ;incstack = 0
  8617  001C72  ECE7  F00E         	call	_return_to_main	;wreg free
  8618                           
  8619                           ;data.c: 8:     key_data=0;
  8620  001C76  6A25               	clrf	_key_data^0,c
  8621                           
  8622                           ;data.c: 9:     for(char m=0;m<20;m++){
  8623  001C78  6A5B               	clrf	initData@m^0,c
  8624  001C7A                     l3268:
  8625                           
  8626                           ;data.c: 10:         users[m].score=0;
  8627  001C7A  505B               	movf	initData@m^0,w,c
  8628  001C7C  EC7C  F001         	call	PL10	;call to abstracted procedure
  8629  001C80  6ADE               	clrf	postinc2,c
  8630  001C82  6ADD               	clrf	postdec2,c
  8631                           
  8632                           ;data.c: 11:     }
  8633  001C84  2A5B               	incf	initData@m^0,f,c
  8634  001C86  0E13               	movlw	19
  8635  001C88  645B               	cpfsgt	initData@m^0,c
  8636  001C8A  D7F7               	goto	l3268
  8637                           
  8638                           ;data.c: 12:     state_data=0;
  8639  001C8C  6A26               	clrf	_state_data^0,c
  8640  001C8E  0012               	return		;funcret
  8641  001C90                     __end_of_initData:
  8642                           	callstack 0
  8643                           
  8644 ;; *************** function _return_to_main *****************
  8645 ;; Defined at:
  8646 ;;		line 173 in file "data.c"
  8647 ;; Parameters:    Size  Location     Type
  8648 ;;		None
  8649 ;; Auto vars:     Size  Location     Type
  8650 ;;		None
  8651 ;; Return value:  Size  Location     Type
  8652 ;;                  1    wreg      void 
  8653 ;; Registers used:
  8654 ;;		wreg, status,2
  8655 ;; Tracked objects:
  8656 ;;		On entry : 0/0
  8657 ;;		On exit  : 0/0
  8658 ;;		Unchanged: 0/0
  8659 ;; Data sizes:     COMRAM   BANK0   BANK1
  8660 ;;      Params:         0       0       0
  8661 ;;      Locals:         0       0       0
  8662 ;;      Temps:          0       0       0
  8663 ;;      Totals:         0       0       0
  8664 ;;Total ram usage:        0 bytes
  8665 ;; Hardware stack levels used: 1
  8666 ;; Hardware stack levels required when called: 3
  8667 ;; This function calls:
  8668 ;;		Nothing
  8669 ;; This function is called by:
  8670 ;;		_motorMenu
  8671 ;;		_initData
  8672 ;;		_motor_data
  8673 ;; This function uses a non-reentrant model
  8674 ;;
  8675                           
  8676                           	psect	text47
  8677  001DCE                     __ptext47:
  8678                           	callstack 0
  8679  001DCE                     _return_to_main:
  8680                           	callstack 26
  8681                           
  8682                           ;data.c: 174:     pointer=0;
  8683                           
  8684                           ;incstack = 0
  8685  001DCE  6A51               	clrf	_pointer^0,c
  8686                           
  8687                           ;data.c: 175:     fila=0;
  8688  001DD0  6A27               	clrf	_fila^0,c
  8689                           
  8690                           ;data.c: 176:     rowi=2;
  8691  001DD2  0E02               	movlw	2
  8692  001DD4  6E50               	movwf	_rowi^0,c
  8693                           
  8694                           ;data.c: 177:     num_users=0;
  8695  001DD6  6A28               	clrf	_num_users@TData$F1605^0,c
  8696  001DD8  0012               	return		;funcret
  8697  001DDA                     __end_of_return_to_main:
  8698                           	callstack 0
  8699                           
  8700 ;; *************** function _TiInitTimer *****************
  8701 ;; Defined at:
  8702 ;;		line 15 in file "TTimer.c"
  8703 ;; Parameters:    Size  Location     Type
  8704 ;;		None
  8705 ;; Auto vars:     Size  Location     Type
  8706 ;;		None
  8707 ;; Return value:  Size  Location     Type
  8708 ;;                  1    wreg      void 
  8709 ;; Registers used:
  8710 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  8711 ;; Tracked objects:
  8712 ;;		On entry : 0/0
  8713 ;;		On exit  : 0/0
  8714 ;;		Unchanged: 0/0
  8715 ;; Data sizes:     COMRAM   BANK0   BANK1
  8716 ;;      Params:         0       0       0
  8717 ;;      Locals:         0       0       0
  8718 ;;      Temps:          0       0       0
  8719 ;;      Totals:         0       0       0
  8720 ;;Total ram usage:        0 bytes
  8721 ;; Hardware stack levels used: 1
  8722 ;; Hardware stack levels required when called: 3
  8723 ;; This function calls:
  8724 ;;		Nothing
  8725 ;; This function is called by:
  8726 ;;		_main
  8727 ;; This function uses a non-reentrant model
  8728 ;;
  8729                           
  8730                           	psect	text48
  8731  001AEC                     __ptext48:
  8732                           	callstack 0
  8733  001AEC                     _TiInitTimer:
  8734                           	callstack 27
  8735                           
  8736                           ;TTimer.c: 18:     RCONbits.IPEN = 0;
  8737                           
  8738                           ;incstack = 0
  8739  001AEC  9ED0               	bcf	208,7,c	;volatile
  8740                           
  8741                           ;TTimer.c: 19:     INTCONbits.GIE_GIEH = 1;
  8742  001AEE  8EF2               	bsf	242,7,c	;volatile
  8743                           
  8744                           ;TTimer.c: 20:     INTCONbits.PEIE_GIEL = 1;
  8745  001AF0  8CF2               	bsf	242,6,c	;volatile
  8746                           
  8747                           ;TTimer.c: 21:     INTCONbits.TMR0IE = 1;
  8748  001AF2  8AF2               	bsf	242,5,c	;volatile
  8749                           
  8750                           ;TTimer.c: 22:     INTCONbits.TMR0IF = 0;
  8751  001AF4  94F2               	bcf	242,2,c	;volatile
  8752                           
  8753                           ;TTimer.c: 23:     T0CON = 0x08;
  8754  001AF6  0E08               	movlw	8
  8755  001AF8  6ED5               	movwf	213,c	;volatile
  8756                           
  8757                           ;TTimer.c: 25:     TMR0H = 0xFB;
  8758                           
  8759                           ;TTimer.c: 26:     TMR0L = 0x1E;
  8760  001AFA  ECC5  F00C         	call	PL106	;call to abstracted procedure
  8761                           
  8762                           ;TTimer.c: 27:     T0CONbits.TMR0ON = 1;
  8763  001AFE  8ED5               	bsf	213,7,c	;volatile
  8764                           
  8765                           ;TTimer.c: 29:     for (counter=0;counter<12;counter++) {
  8766  001B00  6A48               	clrf	_counter^0,c
  8767  001B02                     l5118:
  8768  001B02  0E0B               	movlw	11
  8769  001B04  6448               	cpfsgt	_counter^0,c
  8770  001B06  D001               	goto	l5122
  8771  001B08  0C0B               	retlw	11
  8772  001B0A                     l5122:
  8773                           
  8774                           ;TTimer.c: 30:  s_Timers[counter].b_busy=0;
  8775  001B0A  EC6F  F00D         	call	PL38	;call to abstracted procedure
  8776  001B0E  6ADF               	clrf	indf2,c
  8777                           
  8778                           ;TTimer.c: 31:     }
  8779  001B10  2A48               	incf	_counter^0,f,c
  8780  001B12  D7F7               	goto	l5118
  8781  001B14                     __end_of_TiInitTimer:
  8782                           	callstack 0
  8783                           
  8784 ;; *************** function _LcInit *****************
  8785 ;; Defined at:
  8786 ;;		line 52 in file "LCD.c"
  8787 ;; Parameters:    Size  Location     Type
  8788 ;;  rows            1    wreg     unsigned char 
  8789 ;;  columns         1   18[COMRAM] unsigned char 
  8790 ;; Auto vars:     Size  Location     Type
  8791 ;;  rows            1   19[COMRAM] unsigned char 
  8792 ;;  i               2   20[COMRAM] int 
  8793 ;; Return value:  Size  Location     Type
  8794 ;;                  1    wreg      void 
  8795 ;; Registers used:
  8796 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8797 ;; Tracked objects:
  8798 ;;		On entry : 0/0
  8799 ;;		On exit  : 0/0
  8800 ;;		Unchanged: 0/0
  8801 ;; Data sizes:     COMRAM   BANK0   BANK1
  8802 ;;      Params:         1       0       0
  8803 ;;      Locals:         3       0       0
  8804 ;;      Temps:          0       0       0
  8805 ;;      Totals:         4       0       0
  8806 ;;Total ram usage:        4 bytes
  8807 ;; Hardware stack levels used: 1
  8808 ;; Hardware stack levels required when called: 5
  8809 ;; This function calls:
  8810 ;;		_CantaIR
  8811 ;;		_EscriuPrimeraOrdre
  8812 ;;		_Espera
  8813 ;;		_TiGetTimer
  8814 ;;		_WaitForBusy
  8815 ;; This function is called by:
  8816 ;;		_main
  8817 ;; This function uses a non-reentrant model
  8818 ;;
  8819                           
  8820                           	psect	text49
  8821  001232                     __ptext49:
  8822                           	callstack 0
  8823  001232                     _LcInit:
  8824                           	callstack 25
  8825                           
  8826                           ;incstack = 0
  8827                           ;LcInit@rows stored from wreg
  8828  001232  6E68               	movwf	LcInit@rows^0,c
  8829                           
  8830                           ;LCD.c: 58:  int i;;LCD.c: 59:  Timer = TiGetTimer();
  8831  001234  EC60  F00D         	call	_TiGetTimer	;wreg free
  8832  001238  6E0F               	movwf	_Timer^0,c
  8833  00123A  6A10               	clrf	(_Timer+1)^0,c
  8834                           
  8835                           ;LCD.c: 60:  Rows = rows; Columns = columns;
  8836  00123C  C068  F044         	movff	LcInit@rows,_Rows
  8837  001240  C067  F043         	movff	LcInit@columns,_Columns
  8838                           
  8839                           ;LCD.c: 61:  RowAct = ColumnAct = 0;
  8840  001244  6A41               	clrf	_ColumnAct^0,c
  8841  001246  6A42               	clrf	_RowAct^0,c
  8842                           
  8843                           ;LCD.c: 62:     (TRISDbits.TRISD4 = TRISDbits.TRISD5 = TRISDbits.TRISD6 = TRISDbits.TRIS
      +                          D7 = 0);
  8844  001248  EC99  F00D         	call	PL64	;call to abstracted procedure
  8845                           
  8846                           ;LCD.c: 63:  (TRISAbits.TRISA5 = TRISAbits.TRISA2 = TRISEbits.TRISE0 = 0);
  8847  00124C  9096               	bcf	150,0,c	;volatile
  8848  00124E  9492               	bcf	146,2,c	;volatile
  8849  001250  9A92               	bcf	146,5,c	;volatile
  8850                           
  8851                           ;LCD.c: 64:  for (i = 0; i < 2; i++) {
  8852  001252  6A69               	clrf	LcInit@i^0,c
  8853  001254  6A6A               	clrf	(LcInit@i+1)^0,c
  8854  001256                     l6988:
  8855                           
  8856                           ;LCD.c: 65:   Espera(Timer, 100);
  8857  001256  D84C               	call	PL18	;call to abstracted procedure
  8858  001258  0E64               	movlw	100
  8859  00125A  6E64               	movwf	Espera@ms^0,c
  8860  00125C  EC1A  F00E         	call	_Espera	;wreg free
  8861                           
  8862                           ;LCD.c: 68:   EscriuPrimeraOrdre(0x02 | 0x01);
  8863  001260  0E03               	movlw	3
  8864  001262  ECBF  F00A         	call	_EscriuPrimeraOrdre
  8865                           
  8866                           ;LCD.c: 69:   Espera(Timer, 5);
  8867  001266  D844               	call	PL18	;call to abstracted procedure
  8868  001268  0E05               	movlw	5
  8869  00126A  6E64               	movwf	Espera@ms^0,c
  8870  00126C  EC1A  F00E         	call	_Espera	;wreg free
  8871                           
  8872                           ;LCD.c: 70:   EscriuPrimeraOrdre(0x02 | 0x01);
  8873  001270  0E03               	movlw	3
  8874  001272  ECBF  F00A         	call	_EscriuPrimeraOrdre
  8875                           
  8876                           ;LCD.c: 71:   Espera(Timer, 1);
  8877  001276  D83C               	call	PL18	;call to abstracted procedure
  8878  001278  0E01               	movlw	1
  8879  00127A  6E64               	movwf	Espera@ms^0,c
  8880  00127C  EC1A  F00E         	call	_Espera	;wreg free
  8881                           
  8882                           ;LCD.c: 72:   EscriuPrimeraOrdre(0x02 | 0x01);
  8883  001280  0E03               	movlw	3
  8884  001282  ECBF  F00A         	call	_EscriuPrimeraOrdre
  8885                           
  8886                           ;LCD.c: 73:   Espera(Timer, 1);
  8887  001286  D834               	call	PL18	;call to abstracted procedure
  8888  001288  0E01               	movlw	1
  8889  00128A  6E64               	movwf	Espera@ms^0,c
  8890  00128C  EC1A  F00E         	call	_Espera	;wreg free
  8891                           
  8892                           ;LCD.c: 76:   EscriuPrimeraOrdre(0x02);
  8893  001290  0E02               	movlw	2
  8894  001292  ECBF  F00A         	call	_EscriuPrimeraOrdre
  8895                           
  8896                           ;LCD.c: 77:   Espera(Timer, 1);
  8897  001296  D82C               	call	PL18	;call to abstracted procedure
  8898  001298  0E01               	movlw	1
  8899  00129A  6E64               	movwf	Espera@ms^0,c
  8900  00129C  EC1A  F00E         	call	_Espera	;wreg free
  8901                           
  8902                           ;LCD.c: 78:   CantaIR(0x20 | 0x08);
  8903  0012A0  0E28               	movlw	40
  8904  0012A2  EC8A  F00D         	call	_CantaIR
  8905                           
  8906                           ;LCD.c: 81:   WaitForBusy(); CantaIR(0x08);
  8907  0012A6  ECCA  F00C         	call	_WaitForBusy	;wreg free
  8908  0012AA  0E08               	movlw	8
  8909  0012AC  EC8A  F00D         	call	_CantaIR
  8910                           
  8911                           ;LCD.c: 82:   WaitForBusy(); CantaIR(0x01);
  8912  0012B0  ECCA  F00C         	call	_WaitForBusy	;wreg free
  8913  0012B4  0E01               	movlw	1
  8914  0012B6  EC8A  F00D         	call	_CantaIR
  8915                           
  8916                           ;LCD.c: 83:   Espera(Timer,3);
  8917  0012BA  D81A               	call	PL18	;call to abstracted procedure
  8918  0012BC  0E03               	movlw	3
  8919  0012BE  6E64               	movwf	Espera@ms^0,c
  8920  0012C0  EC1A  F00E         	call	_Espera	;wreg free
  8921                           
  8922                           ;LCD.c: 84:   WaitForBusy(); CantaIR(0x04 | 0x02);
  8923  0012C4  ECCA  F00C         	call	_WaitForBusy	;wreg free
  8924  0012C8  0E06               	movlw	6
  8925  0012CA  EC8A  F00D         	call	_CantaIR
  8926                           
  8927                           ;LCD.c: 85:   WaitForBusy(); CantaIR(0x08 | 0x04 | 0x02 | 0x01);
  8928  0012CE  ECCA  F00C         	call	_WaitForBusy	;wreg free
  8929  0012D2  0E0F               	movlw	15
  8930  0012D4  EC8A  F00D         	call	_CantaIR
  8931                           
  8932                           ;LCD.c: 86:  }
  8933  0012D8  4A69               	infsnz	LcInit@i^0,f,c
  8934  0012DA  2A6A               	incf	(LcInit@i+1)^0,f,c
  8935  0012DC  BE6A               	btfsc	(LcInit@i+1)^0,7,c
  8936  0012DE  D7BB               	goto	l6988
  8937  0012E0  506A               	movf	(LcInit@i+1)^0,w,c
  8938  0012E2  E105               	bnz	u6910
  8939  0012E4  0E02               	movlw	2
  8940  0012E6  5C69               	subwf	LcInit@i^0,w,c
  8941  0012E8  B0D8               	btfsc	status,0,c
  8942  0012EA  0012               	return	
  8943  0012EC  D7B4               	goto	l6988
  8944  0012EE                     u6910:
  8945  0012EE  0012               	return		;funcret
  8946  0012F0                     __end_of_LcInit:
  8947                           	callstack 0
  8948  0012F0                     PL18:
  8949                           	callstack 25
  8950  0012F0  C00F  F062         	movff	_Timer,Espera@Timer
  8951  0012F4  C010  F063         	movff	_Timer+1,Espera@Timer+1
  8952  0012F8  6A65               	clrf	(Espera@ms+1)^0,c
  8953  0012FA  0012               	return	
  8954  0012FC                     __end_ofPL18:
  8955                           	callstack 0
  8956                           
  8957 ;; *************** function _WaitForBusy *****************
  8958 ;; Defined at:
  8959 ;;		line 236 in file "LCD.c"
  8960 ;; Parameters:    Size  Location     Type
  8961 ;;		None
  8962 ;; Auto vars:     Size  Location     Type
  8963 ;;  Busy            1   13[COMRAM] unsigned char 
  8964 ;; Return value:  Size  Location     Type
  8965 ;;                  1    wreg      void 
  8966 ;; Registers used:
  8967 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8968 ;; Tracked objects:
  8969 ;;		On entry : 0/0
  8970 ;;		On exit  : 0/0
  8971 ;;		Unchanged: 0/0
  8972 ;; Data sizes:     COMRAM   BANK0   BANK1
  8973 ;;      Params:         0       0       0
  8974 ;;      Locals:         1       0       0
  8975 ;;      Temps:          0       0       0
  8976 ;;      Totals:         1       0       0
  8977 ;;Total ram usage:        1 bytes
  8978 ;; Hardware stack levels used: 1
  8979 ;; Hardware stack levels required when called: 4
  8980 ;; This function calls:
  8981 ;;		_TiGetTics
  8982 ;;		_TiResetTics
  8983 ;; This function is called by:
  8984 ;;		_LcInit
  8985 ;;		_LcClear
  8986 ;;		_LcCursorOn
  8987 ;;		_LcCursorOff
  8988 ;;		_LcGotoXY
  8989 ;;		_LcPutChar
  8990 ;; This function uses a non-reentrant model
  8991 ;;
  8992                           
  8993                           	psect	text50
  8994  001994                     __ptext50:
  8995                           	callstack 0
  8996  001994                     _WaitForBusy:
  8997                           	callstack 23
  8998                           
  8999                           ;LCD.c: 237:  (TRISDbits.TRISD4 = TRISDbits.TRISD5 = TRISDbits.TRISD6 = TRISDbits.TRISD7
      +                           = 1);
  9000                           
  9001                           ;incstack = 0
  9002  001994  8E95               	bsf	149,7,c	;volatile
  9003  001996  8C95               	bsf	149,6,c	;volatile
  9004  001998  8A95               	bsf	149,5,c	;volatile
  9005  00199A  8895               	bsf	149,4,c	;volatile
  9006                           
  9007                           ;LCD.c: 238:  (LATAbits.LATA2 = 0);
  9008  00199C  9489               	bcf	137,2,c	;volatile
  9009                           
  9010                           ;LCD.c: 239:  (LATEbits.LATE0 = 1);
  9011  00199E  808D               	bsf	141,0,c	;volatile
  9012                           
  9013                           ;LCD.c: 240:  TiResetTics(Timer);
  9014  0019A0  500F               	movf	_Timer^0,w,c
  9015  0019A2  EC57  F00E         	call	_TiResetTics
  9016  0019A6                     l6558:
  9017                           
  9018                           ;LCD.c: 242:   (LATAbits.LATA5 = 1);(LATAbits.LATA5 = 1);
  9019  0019A6  8A89               	bsf	137,5,c	;volatile
  9020  0019A8  8A89               	bsf	137,5,c	;volatile
  9021                           
  9022                           ;LCD.c: 243:   Busy = (PORTDbits.RD4);
  9023  0019AA  0E00               	movlw	0
  9024  0019AC  B883               	btfsc	131,4,c	;volatile
  9025  0019AE  0E01               	movlw	1
  9026  0019B0  6E62               	movwf	WaitForBusy@Busy^0,c
  9027                           
  9028                           ;LCD.c: 244:   (LATAbits.LATA5 = 0);
  9029  0019B2  9A89               	bcf	137,5,c	;volatile
  9030                           
  9031                           ;LCD.c: 245:   (LATAbits.LATA5 = 0);
  9032  0019B4  9A89               	bcf	137,5,c	;volatile
  9033                           
  9034                           ;LCD.c: 246:   (LATAbits.LATA5 = 1);(LATAbits.LATA5 = 1);
  9035  0019B6  8A89               	bsf	137,5,c	;volatile
  9036  0019B8  8A89               	bsf	137,5,c	;volatile
  9037                           
  9038                           ;LCD.c: 248:   (LATAbits.LATA5 = 0);
  9039  0019BA  9A89               	bcf	137,5,c	;volatile
  9040                           
  9041                           ;LCD.c: 249:   (LATAbits.LATA5 = 0);
  9042  0019BC  9A89               	bcf	137,5,c	;volatile
  9043                           
  9044                           ;LCD.c: 250:   if (TiGetTics(Timer)) break;
  9045  0019BE  500F               	movf	_Timer^0,w,c
  9046  0019C0  ECC5  F00D         	call	_TiGetTics
  9047  0019C4  505B               	movf	?_TiGetTics^0,w,c
  9048  0019C6  105C               	iorwf	(?_TiGetTics+1)^0,w,c
  9049  0019C8  E001               	bz	l6580
  9050  0019CA  0012               	return	
  9051  0019CC                     l6580:
  9052                           
  9053                           ;LCD.c: 251:  } while(Busy);
  9054  0019CC  5062               	movf	WaitForBusy@Busy^0,w,c
  9055  0019CE  E1EB               	bnz	l6558
  9056  0019D0  0012               	return		;funcret
  9057  0019D2                     __end_of_WaitForBusy:
  9058                           	callstack 0
  9059                           
  9060 ;; *************** function _Espera *****************
  9061 ;; Defined at:
  9062 ;;		line 185 in file "LCD.c"
  9063 ;; Parameters:    Size  Location     Type
  9064 ;;  Timer           2   13[COMRAM] int 
  9065 ;;  ms              2   15[COMRAM] int 
  9066 ;; Auto vars:     Size  Location     Type
  9067 ;;		None
  9068 ;; Return value:  Size  Location     Type
  9069 ;;                  1    wreg      void 
  9070 ;; Registers used:
  9071 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9072 ;; Tracked objects:
  9073 ;;		On entry : 0/0
  9074 ;;		On exit  : 0/0
  9075 ;;		Unchanged: 0/0
  9076 ;; Data sizes:     COMRAM   BANK0   BANK1
  9077 ;;      Params:         4       0       0
  9078 ;;      Locals:         0       0       0
  9079 ;;      Temps:          1       0       0
  9080 ;;      Totals:         5       0       0
  9081 ;;Total ram usage:        5 bytes
  9082 ;; Hardware stack levels used: 1
  9083 ;; Hardware stack levels required when called: 4
  9084 ;; This function calls:
  9085 ;;		_TiGetTics
  9086 ;;		_TiResetTics
  9087 ;; This function is called by:
  9088 ;;		_LcInit
  9089 ;;		_LcClear
  9090 ;; This function uses a non-reentrant model
  9091 ;;
  9092                           
  9093                           	psect	text51
  9094  001C34                     __ptext51:
  9095                           	callstack 0
  9096  001C34                     _Espera:
  9097                           	callstack 24
  9098                           
  9099                           ;LCD.c: 186:  TiResetTics(Timer);
  9100                           
  9101                           ;incstack = 0
  9102  001C34  5062               	movf	Espera@Timer^0,w,c
  9103  001C36  EC57  F00E         	call	_TiResetTics
  9104  001C3A                     l6684:
  9105  001C3A  5062               	movf	Espera@Timer^0,w,c
  9106  001C3C  ECC5  F00D         	call	_TiGetTics
  9107  001C40  5064               	movf	Espera@ms^0,w,c
  9108  001C42  5C5B               	subwf	?_TiGetTics^0,w,c
  9109  001C44  505C               	movf	(?_TiGetTics+1)^0,w,c
  9110  001C46  0A80               	xorlw	128
  9111  001C48  6E66               	movwf	??_Espera^0,c
  9112  001C4A  5065               	movf	(Espera@ms+1)^0,w,c
  9113  001C4C  0A80               	xorlw	128
  9114  001C4E  5866               	subwfb	??_Espera^0,w,c
  9115  001C50  E3F4               	bnc	l6684
  9116  001C52  0012               	return		;funcret
  9117  001C54                     __end_of_Espera:
  9118                           	callstack 0
  9119                           
  9120 ;; *************** function _TiGetTics *****************
  9121 ;; Defined at:
  9122 ;;		line 61 in file "TTimer.c"
  9123 ;; Parameters:    Size  Location     Type
  9124 ;;  Handle          1    wreg     unsigned char 
  9125 ;; Auto vars:     Size  Location     Type
  9126 ;;  Handle          1   10[COMRAM] unsigned char 
  9127 ;;  actual          2   11[COMRAM] volatile unsigned int 
  9128 ;; Return value:  Size  Location     Type
  9129 ;;                  2    6[COMRAM] int 
  9130 ;; Registers used:
  9131 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  9132 ;; Tracked objects:
  9133 ;;		On entry : 0/0
  9134 ;;		On exit  : 0/0
  9135 ;;		Unchanged: 0/0
  9136 ;; Data sizes:     COMRAM   BANK0   BANK1
  9137 ;;      Params:         2       0       0
  9138 ;;      Locals:         3       0       0
  9139 ;;      Temps:          2       0       0
  9140 ;;      Totals:         7       0       0
  9141 ;;Total ram usage:        7 bytes
  9142 ;; Hardware stack levels used: 1
  9143 ;; Hardware stack levels required when called: 3
  9144 ;; This function calls:
  9145 ;;		Nothing
  9146 ;; This function is called by:
  9147 ;;		_motorMatrix
  9148 ;;		_Espera
  9149 ;;		_WaitForBusy
  9150 ;;		_motor_SMS
  9151 ;;		_motorSpeaker
  9152 ;;		_motor_hour
  9153 ;;		_motorEusart
  9154 ;;		_marqueeUsers
  9155 ;;		_MenuDoMarquee
  9156 ;; This function uses a non-reentrant model
  9157 ;;
  9158                           
  9159                           	psect	text52
  9160  001B8A                     __ptext52:
  9161                           	callstack 0
  9162  001B8A                     _TiGetTics:
  9163                           	callstack 26
  9164                           
  9165                           ;incstack = 0
  9166                           ;TiGetTics@Handle stored from wreg
  9167  001B8A  6E5F               	movwf	TiGetTics@Handle^0,c
  9168                           
  9169                           ;TTimer.c: 65:     volatile unsigned int actual;;TTimer.c: 66:     actual=h_Tics;
  9170  001B8C  C011  F060         	movff	_h_Tics,TiGetTics@actual	;volatile
  9171  001B90  C012  F061         	movff	_h_Tics+1,TiGetTics@actual+1	;volatile
  9172                           
  9173                           ;TTimer.c: 67:     return (actual-(s_Timers[Handle].h_initialTics));
  9174  001B94  505F               	movf	TiGetTics@Handle^0,w,c
  9175  001B96  EC5F  F00E         	call	PL58	;call to abstracted procedure
  9176  001B9A  CFDE F05D          	movff	postinc2,??_TiGetTics
  9177  001B9E  CFDD F05E          	movff	postdec2,??_TiGetTics+1
  9178  001BA2  505D               	movf	??_TiGetTics^0,w,c
  9179  001BA4  5C60               	subwf	TiGetTics@actual^0,w,c	;volatile
  9180  001BA6  6E5B               	movwf	?_TiGetTics^0,c
  9181  001BA8  505E               	movf	(??_TiGetTics+1)^0,w,c
  9182  001BAA  5861               	subwfb	(TiGetTics@actual+1)^0,w,c	;volatile
  9183  001BAC  6E5C               	movwf	(?_TiGetTics+1)^0,c
  9184  001BAE  0012               	return		;funcret
  9185  001BB0                     __end_of_TiGetTics:
  9186                           	callstack 0
  9187                           
  9188 ;; *************** function _EscriuPrimeraOrdre *****************
  9189 ;; Defined at:
  9190 ;;		line 254 in file "LCD.c"
  9191 ;; Parameters:    Size  Location     Type
  9192 ;;  ordre           1    wreg     unsigned char 
  9193 ;; Auto vars:     Size  Location     Type
  9194 ;;  ordre           1    7[COMRAM] unsigned char 
  9195 ;; Return value:  Size  Location     Type
  9196 ;;                  1    wreg      void 
  9197 ;; Registers used:
  9198 ;;		wreg, status,2, status,0
  9199 ;; Tracked objects:
  9200 ;;		On entry : 0/0
  9201 ;;		On exit  : 0/0
  9202 ;;		Unchanged: 0/0
  9203 ;; Data sizes:     COMRAM   BANK0   BANK1
  9204 ;;      Params:         0       0       0
  9205 ;;      Locals:         1       0       0
  9206 ;;      Temps:          1       0       0
  9207 ;;      Totals:         2       0       0
  9208 ;;Total ram usage:        2 bytes
  9209 ;; Hardware stack levels used: 1
  9210 ;; Hardware stack levels required when called: 3
  9211 ;; This function calls:
  9212 ;;		Nothing
  9213 ;; This function is called by:
  9214 ;;		_LcInit
  9215 ;; This function uses a non-reentrant model
  9216 ;;
  9217                           
  9218                           	psect	text53
  9219  00157E                     __ptext53:
  9220                           	callstack 0
  9221  00157E                     _EscriuPrimeraOrdre:
  9222                           	callstack 26
  9223                           
  9224                           ;incstack = 0
  9225                           ;EscriuPrimeraOrdre@ordre stored from wreg
  9226  00157E  6E5C               	movwf	EscriuPrimeraOrdre@ordre^0,c
  9227                           
  9228                           ;LCD.c: 256:  (TRISDbits.TRISD4 = TRISDbits.TRISD5 = TRISDbits.TRISD6 = TRISDbits.TRISD7
      +                           = 0); (LATAbits.LATA2 = 0); (LATEbits.LATE0 = 0);
  9229  001580  EC99  F00D         	call	PL64	;call to abstracted procedure
  9230  001584  9489               	bcf	137,2,c	;volatile
  9231  001586  908D               	bcf	141,0,c	;volatile
  9232                           
  9233                           ;LCD.c: 257:  (LATAbits.LATA5 = 1); (LATAbits.LATA5 = 1);
  9234  001588  8A89               	bsf	137,5,c	;volatile
  9235  00158A  8A89               	bsf	137,5,c	;volatile
  9236                           
  9237                           ;LCD.c: 258:   (LATDbits.LATD4 = (ordre & 0x08 ? 1 : 0));
  9238  00158C  A65C               	btfss	EscriuPrimeraOrdre@ordre^0,3,c
  9239  00158E  D003               	goto	u480
  9240  001590  6A5B               	clrf	??_EscriuPrimeraOrdre^0,c
  9241  001592  2A5B               	incf	??_EscriuPrimeraOrdre^0,f,c
  9242  001594  D001               	goto	u498
  9243  001596                     u480:
  9244  001596  6A5B               	clrf	??_EscriuPrimeraOrdre^0,c
  9245  001598                     u498:
  9246  001598  3A5B               	swapf	??_EscriuPrimeraOrdre^0,f,c
  9247  00159A  508C               	movf	140,w,c	;volatile
  9248  00159C  185B               	xorwf	??_EscriuPrimeraOrdre^0,w,c
  9249  00159E  0BEF               	andlw	-17
  9250  0015A0  185B               	xorwf	??_EscriuPrimeraOrdre^0,w,c
  9251  0015A2  6E8C               	movwf	140,c	;volatile
  9252                           
  9253                           ;LCD.c: 259:   (LATDbits.LATD5 = (ordre & 0x04 ? 1 : 0));
  9254  0015A4  A45C               	btfss	EscriuPrimeraOrdre@ordre^0,2,c
  9255  0015A6  D003               	goto	u500
  9256  0015A8  6A5B               	clrf	??_EscriuPrimeraOrdre^0,c
  9257  0015AA  2A5B               	incf	??_EscriuPrimeraOrdre^0,f,c
  9258  0015AC  D001               	goto	u518
  9259  0015AE                     u500:
  9260  0015AE  6A5B               	clrf	??_EscriuPrimeraOrdre^0,c
  9261  0015B0                     u518:
  9262  0015B0  3A5B               	swapf	??_EscriuPrimeraOrdre^0,f,c
  9263  0015B2  465B               	rlncf	??_EscriuPrimeraOrdre^0,f,c
  9264  0015B4  508C               	movf	140,w,c	;volatile
  9265  0015B6  185B               	xorwf	??_EscriuPrimeraOrdre^0,w,c
  9266  0015B8  0BDF               	andlw	-33
  9267  0015BA  185B               	xorwf	??_EscriuPrimeraOrdre^0,w,c
  9268  0015BC  6E8C               	movwf	140,c	;volatile
  9269                           
  9270                           ;LCD.c: 260:   (LATDbits.LATD6 = (ordre & 0x02 ? 1 : 0));
  9271  0015BE  A25C               	btfss	EscriuPrimeraOrdre@ordre^0,1,c
  9272  0015C0  D003               	goto	u520
  9273  0015C2  6A5B               	clrf	??_EscriuPrimeraOrdre^0,c
  9274  0015C4  2A5B               	incf	??_EscriuPrimeraOrdre^0,f,c
  9275  0015C6  D001               	goto	u538
  9276  0015C8                     u520:
  9277  0015C8  6A5B               	clrf	??_EscriuPrimeraOrdre^0,c
  9278  0015CA                     u538:
  9279  0015CA  3A5B               	swapf	??_EscriuPrimeraOrdre^0,f,c
  9280  0015CC  465B               	rlncf	??_EscriuPrimeraOrdre^0,f,c
  9281  0015CE  465B               	rlncf	??_EscriuPrimeraOrdre^0,f,c
  9282  0015D0  508C               	movf	140,w,c	;volatile
  9283  0015D2  185B               	xorwf	??_EscriuPrimeraOrdre^0,w,c
  9284  0015D4  0BBF               	andlw	-65
  9285  0015D6  185B               	xorwf	??_EscriuPrimeraOrdre^0,w,c
  9286  0015D8  6E8C               	movwf	140,c	;volatile
  9287                           
  9288                           ;LCD.c: 261:   (LATDbits.LATD7 = (ordre & 0x01 ? 1 : 0));
  9289  0015DA  A05C               	btfss	EscriuPrimeraOrdre@ordre^0,0,c
  9290  0015DC  D003               	goto	u540
  9291  0015DE  6A5B               	clrf	??_EscriuPrimeraOrdre^0,c
  9292  0015E0  2A5B               	incf	??_EscriuPrimeraOrdre^0,f,c
  9293  0015E2  D001               	goto	u558
  9294  0015E4                     u540:
  9295  0015E4  6A5B               	clrf	??_EscriuPrimeraOrdre^0,c
  9296  0015E6                     u558:
  9297  0015E6  325B               	rrcf	??_EscriuPrimeraOrdre^0,f,c
  9298  0015E8  325B               	rrcf	??_EscriuPrimeraOrdre^0,f,c
  9299  0015EA  508C               	movf	140,w,c	;volatile
  9300  0015EC  185B               	xorwf	??_EscriuPrimeraOrdre^0,w,c
  9301  0015EE  0B7F               	andlw	-129
  9302  0015F0  185B               	xorwf	??_EscriuPrimeraOrdre^0,w,c
  9303  0015F2  6E8C               	movwf	140,c	;volatile
  9304                           
  9305                           ;LCD.c: 262:  (LATAbits.LATA5 = 0);
  9306  0015F4  9A89               	bcf	137,5,c	;volatile
  9307  0015F6  0012               	return		;funcret
  9308  0015F8                     __end_of_EscriuPrimeraOrdre:
  9309                           	callstack 0
  9310                           
  9311 ;; *************** function _CantaIR *****************
  9312 ;; Defined at:
  9313 ;;		line 204 in file "LCD.c"
  9314 ;; Parameters:    Size  Location     Type
  9315 ;;  IR              1    wreg     unsigned char 
  9316 ;; Auto vars:     Size  Location     Type
  9317 ;;  IR              1    8[COMRAM] unsigned char 
  9318 ;; Return value:  Size  Location     Type
  9319 ;;                  1    wreg      void 
  9320 ;; Registers used:
  9321 ;;		wreg, status,2, status,0, cstack
  9322 ;; Tracked objects:
  9323 ;;		On entry : 0/0
  9324 ;;		On exit  : 0/0
  9325 ;;		Unchanged: 0/0
  9326 ;; Data sizes:     COMRAM   BANK0   BANK1
  9327 ;;      Params:         0       0       0
  9328 ;;      Locals:         1       0       0
  9329 ;;      Temps:          0       0       0
  9330 ;;      Totals:         1       0       0
  9331 ;;Total ram usage:        1 bytes
  9332 ;; Hardware stack levels used: 1
  9333 ;; Hardware stack levels required when called: 4
  9334 ;; This function calls:
  9335 ;;		_CantaPartAlta
  9336 ;;		_CantaPartBaixa
  9337 ;; This function is called by:
  9338 ;;		_LcInit
  9339 ;;		_LcClear
  9340 ;;		_LcCursorOn
  9341 ;;		_LcCursorOff
  9342 ;;		_LcGotoXY
  9343 ;; This function uses a non-reentrant model
  9344 ;;
  9345                           
  9346                           	psect	text54
  9347  001B14                     __ptext54:
  9348                           	callstack 0
  9349  001B14                     _CantaIR:
  9350                           	callstack 22
  9351                           
  9352                           ;incstack = 0
  9353                           ;CantaIR@IR stored from wreg
  9354  001B14  6E5D               	movwf	CantaIR@IR^0,c
  9355                           
  9356                           ;LCD.c: 205:  (TRISDbits.TRISD4 = TRISDbits.TRISD5 = TRISDbits.TRISD6 = TRISDbits.TRISD7
      +                           = 0);
  9357  001B16  D80D               	call	PL64	;call to abstracted procedure
  9358                           
  9359                           ;LCD.c: 206:  (LATAbits.LATA2 = 0);
  9360  001B18  9489               	bcf	137,2,c	;volatile
  9361                           
  9362                           ;LCD.c: 207:  (LATEbits.LATE0 = 0);
  9363  001B1A  908D               	bcf	141,0,c	;volatile
  9364                           
  9365                           ;LCD.c: 208:  (LATAbits.LATA5 = 1);
  9366  001B1C  8A89               	bsf	137,5,c	;volatile
  9367                           
  9368                           ;LCD.c: 209:  CantaPartAlta(IR);
  9369  001B1E  505D               	movf	CantaIR@IR^0,w,c
  9370  001B20  EC6E  F00B         	call	_CantaPartAlta
  9371                           
  9372                           ;LCD.c: 210:  (LATAbits.LATA5 = 1);
  9373                           
  9374                           ;LCD.c: 211:  (LATAbits.LATA5 = 0);
  9375                           
  9376                           ;LCD.c: 212:  (LATAbits.LATA5 = 0);
  9377                           
  9378                           ;LCD.c: 213:  (LATAbits.LATA5 = 1);
  9379  001B24  ECFE  F00C         	call	PL98	;call to abstracted procedure
  9380                           
  9381                           ;LCD.c: 214:  CantaPartBaixa(IR);
  9382  001B28  505D               	movf	CantaIR@IR^0,w,c
  9383  001B2A  EC38  F00B         	call	_CantaPartBaixa
  9384                           
  9385                           ;LCD.c: 215:  (LATAbits.LATA5 = 1);
  9386                           
  9387                           ;LCD.c: 216:  (LATAbits.LATA5 = 0);
  9388                           
  9389                           ;LCD.c: 217:  (TRISDbits.TRISD4 = TRISDbits.TRISD5 = TRISDbits.TRISD6 = TRISDbits.TRISD7
      +                           = 1);
  9390  001B2E  EFF7  F00C         	goto	PL66	;call to abstracted procedure
  9391  001B32                     __end_of_CantaIR:
  9392                           	callstack 0
  9393  001B32                     PL64:
  9394                           	callstack 25
  9395  001B32  9E95               	bcf	149,7,c	;volatile
  9396  001B34  9C95               	bcf	149,6,c	;volatile
  9397  001B36  9A95               	bcf	149,5,c	;volatile
  9398  001B38  9895               	bcf	149,4,c	;volatile
  9399  001B3A  0012               	return	
  9400  001B3C                     __end_ofPL64:
  9401                           	callstack 0
  9402                           
  9403 ;; *************** function _CantaPartBaixa *****************
  9404 ;; Defined at:
  9405 ;;		line 197 in file "LCD.c"
  9406 ;; Parameters:    Size  Location     Type
  9407 ;;  c               1    wreg     unsigned char 
  9408 ;; Auto vars:     Size  Location     Type
  9409 ;;  c               1    7[COMRAM] unsigned char 
  9410 ;; Return value:  Size  Location     Type
  9411 ;;                  1    wreg      void 
  9412 ;; Registers used:
  9413 ;;		wreg, status,2, status,0
  9414 ;; Tracked objects:
  9415 ;;		On entry : 0/0
  9416 ;;		On exit  : 0/0
  9417 ;;		Unchanged: 0/0
  9418 ;; Data sizes:     COMRAM   BANK0   BANK1
  9419 ;;      Params:         0       0       0
  9420 ;;      Locals:         1       0       0
  9421 ;;      Temps:          1       0       0
  9422 ;;      Totals:         2       0       0
  9423 ;;Total ram usage:        2 bytes
  9424 ;; Hardware stack levels used: 1
  9425 ;; Hardware stack levels required when called: 3
  9426 ;; This function calls:
  9427 ;;		Nothing
  9428 ;; This function is called by:
  9429 ;;		_CantaIR
  9430 ;;		_CantaData
  9431 ;; This function uses a non-reentrant model
  9432 ;;
  9433                           
  9434                           	psect	text55
  9435  001670                     __ptext55:
  9436                           	callstack 0
  9437  001670                     _CantaPartBaixa:
  9438                           	callstack 22
  9439                           
  9440                           ;incstack = 0
  9441                           ;CantaPartBaixa@c stored from wreg
  9442  001670  6E5C               	movwf	CantaPartBaixa@c^0,c
  9443                           
  9444                           ;LCD.c: 198:   (LATDbits.LATD4 = (c & 0x08 ? 1 : 0));
  9445  001672  A65C               	btfss	CantaPartBaixa@c^0,3,c
  9446  001674  D003               	goto	u6280
  9447  001676  6A5B               	clrf	??_CantaPartBaixa^0,c
  9448  001678  2A5B               	incf	??_CantaPartBaixa^0,f,c
  9449  00167A  D001               	goto	u6298
  9450  00167C                     u6280:
  9451  00167C  6A5B               	clrf	??_CantaPartBaixa^0,c
  9452  00167E                     u6298:
  9453  00167E  3A5B               	swapf	??_CantaPartBaixa^0,f,c
  9454  001680  508C               	movf	140,w,c	;volatile
  9455  001682  185B               	xorwf	??_CantaPartBaixa^0,w,c
  9456  001684  0BEF               	andlw	-17
  9457  001686  185B               	xorwf	??_CantaPartBaixa^0,w,c
  9458  001688  6E8C               	movwf	140,c	;volatile
  9459                           
  9460                           ;LCD.c: 199:   (LATDbits.LATD5 = (c & 0x04 ? 1 : 0));
  9461  00168A  A45C               	btfss	CantaPartBaixa@c^0,2,c
  9462  00168C  D003               	goto	u6300
  9463  00168E  6A5B               	clrf	??_CantaPartBaixa^0,c
  9464  001690  2A5B               	incf	??_CantaPartBaixa^0,f,c
  9465  001692  D001               	goto	u6318
  9466  001694                     u6300:
  9467  001694  6A5B               	clrf	??_CantaPartBaixa^0,c
  9468  001696                     u6318:
  9469  001696  3A5B               	swapf	??_CantaPartBaixa^0,f,c
  9470  001698  465B               	rlncf	??_CantaPartBaixa^0,f,c
  9471  00169A  508C               	movf	140,w,c	;volatile
  9472  00169C  185B               	xorwf	??_CantaPartBaixa^0,w,c
  9473  00169E  0BDF               	andlw	-33
  9474  0016A0  185B               	xorwf	??_CantaPartBaixa^0,w,c
  9475  0016A2  6E8C               	movwf	140,c	;volatile
  9476                           
  9477                           ;LCD.c: 200:   (LATDbits.LATD6 = (c & 0x02 ? 1 : 0));
  9478  0016A4  A25C               	btfss	CantaPartBaixa@c^0,1,c
  9479  0016A6  D003               	goto	u6320
  9480  0016A8  6A5B               	clrf	??_CantaPartBaixa^0,c
  9481  0016AA  2A5B               	incf	??_CantaPartBaixa^0,f,c
  9482  0016AC  D001               	goto	u6338
  9483  0016AE                     u6320:
  9484  0016AE  6A5B               	clrf	??_CantaPartBaixa^0,c
  9485  0016B0                     u6338:
  9486  0016B0  3A5B               	swapf	??_CantaPartBaixa^0,f,c
  9487  0016B2  465B               	rlncf	??_CantaPartBaixa^0,f,c
  9488  0016B4  465B               	rlncf	??_CantaPartBaixa^0,f,c
  9489  0016B6  508C               	movf	140,w,c	;volatile
  9490  0016B8  185B               	xorwf	??_CantaPartBaixa^0,w,c
  9491  0016BA  0BBF               	andlw	-65
  9492  0016BC  185B               	xorwf	??_CantaPartBaixa^0,w,c
  9493  0016BE  6E8C               	movwf	140,c	;volatile
  9494                           
  9495                           ;LCD.c: 201:   (LATDbits.LATD7 = (c & 0x01 ? 1 : 0));
  9496  0016C0  A05C               	btfss	CantaPartBaixa@c^0,0,c
  9497  0016C2  D003               	goto	u6340
  9498  0016C4  6A5B               	clrf	??_CantaPartBaixa^0,c
  9499  0016C6  2A5B               	incf	??_CantaPartBaixa^0,f,c
  9500  0016C8  D001               	goto	u6358
  9501  0016CA                     u6340:
  9502  0016CA  6A5B               	clrf	??_CantaPartBaixa^0,c
  9503  0016CC                     u6358:
  9504  0016CC  325B               	rrcf	??_CantaPartBaixa^0,f,c
  9505  0016CE  325B               	rrcf	??_CantaPartBaixa^0,f,c
  9506  0016D0  508C               	movf	140,w,c	;volatile
  9507  0016D2  185B               	xorwf	??_CantaPartBaixa^0,w,c
  9508  0016D4  0B7F               	andlw	-129
  9509  0016D6  185B               	xorwf	??_CantaPartBaixa^0,w,c
  9510  0016D8  6E8C               	movwf	140,c	;volatile
  9511  0016DA  0012               	return		;funcret
  9512  0016DC                     __end_of_CantaPartBaixa:
  9513                           	callstack 0
  9514                           
  9515 ;; *************** function _CantaPartAlta *****************
  9516 ;; Defined at:
  9517 ;;		line 190 in file "LCD.c"
  9518 ;; Parameters:    Size  Location     Type
  9519 ;;  c               1    wreg     unsigned char 
  9520 ;; Auto vars:     Size  Location     Type
  9521 ;;  c               1    7[COMRAM] unsigned char 
  9522 ;; Return value:  Size  Location     Type
  9523 ;;                  1    wreg      void 
  9524 ;; Registers used:
  9525 ;;		wreg, status,2, status,0
  9526 ;; Tracked objects:
  9527 ;;		On entry : 0/0
  9528 ;;		On exit  : 0/0
  9529 ;;		Unchanged: 0/0
  9530 ;; Data sizes:     COMRAM   BANK0   BANK1
  9531 ;;      Params:         0       0       0
  9532 ;;      Locals:         1       0       0
  9533 ;;      Temps:          1       0       0
  9534 ;;      Totals:         2       0       0
  9535 ;;Total ram usage:        2 bytes
  9536 ;; Hardware stack levels used: 1
  9537 ;; Hardware stack levels required when called: 3
  9538 ;; This function calls:
  9539 ;;		Nothing
  9540 ;; This function is called by:
  9541 ;;		_CantaIR
  9542 ;;		_CantaData
  9543 ;; This function uses a non-reentrant model
  9544 ;;
  9545                           
  9546                           	psect	text56
  9547  0016DC                     __ptext56:
  9548                           	callstack 0
  9549  0016DC                     _CantaPartAlta:
  9550                           	callstack 22
  9551                           
  9552                           ;incstack = 0
  9553                           ;CantaPartAlta@c stored from wreg
  9554  0016DC  6E5C               	movwf	CantaPartAlta@c^0,c
  9555                           
  9556                           ;LCD.c: 191:   (LATDbits.LATD4 = (c & 0x80 ? 1 : 0));
  9557  0016DE  AE5C               	btfss	CantaPartAlta@c^0,7,c
  9558  0016E0  D003               	goto	u6200
  9559  0016E2  6A5B               	clrf	??_CantaPartAlta^0,c
  9560  0016E4  2A5B               	incf	??_CantaPartAlta^0,f,c
  9561  0016E6  D001               	goto	u6218
  9562  0016E8                     u6200:
  9563  0016E8  6A5B               	clrf	??_CantaPartAlta^0,c
  9564  0016EA                     u6218:
  9565  0016EA  3A5B               	swapf	??_CantaPartAlta^0,f,c
  9566  0016EC  508C               	movf	140,w,c	;volatile
  9567  0016EE  185B               	xorwf	??_CantaPartAlta^0,w,c
  9568  0016F0  0BEF               	andlw	-17
  9569  0016F2  185B               	xorwf	??_CantaPartAlta^0,w,c
  9570  0016F4  6E8C               	movwf	140,c	;volatile
  9571                           
  9572                           ;LCD.c: 192:   (LATDbits.LATD5 = (c & 0x40 ? 1 : 0));
  9573  0016F6  AC5C               	btfss	CantaPartAlta@c^0,6,c
  9574  0016F8  D003               	goto	u6220
  9575  0016FA  6A5B               	clrf	??_CantaPartAlta^0,c
  9576  0016FC  2A5B               	incf	??_CantaPartAlta^0,f,c
  9577  0016FE  D001               	goto	u6238
  9578  001700                     u6220:
  9579  001700  6A5B               	clrf	??_CantaPartAlta^0,c
  9580  001702                     u6238:
  9581  001702  3A5B               	swapf	??_CantaPartAlta^0,f,c
  9582  001704  465B               	rlncf	??_CantaPartAlta^0,f,c
  9583  001706  508C               	movf	140,w,c	;volatile
  9584  001708  185B               	xorwf	??_CantaPartAlta^0,w,c
  9585  00170A  0BDF               	andlw	-33
  9586  00170C  185B               	xorwf	??_CantaPartAlta^0,w,c
  9587  00170E  6E8C               	movwf	140,c	;volatile
  9588                           
  9589                           ;LCD.c: 193:   (LATDbits.LATD6 = (c & 0x20 ? 1 : 0));
  9590  001710  AA5C               	btfss	CantaPartAlta@c^0,5,c
  9591  001712  D003               	goto	u6240
  9592  001714  6A5B               	clrf	??_CantaPartAlta^0,c
  9593  001716  2A5B               	incf	??_CantaPartAlta^0,f,c
  9594  001718  D001               	goto	u6258
  9595  00171A                     u6240:
  9596  00171A  6A5B               	clrf	??_CantaPartAlta^0,c
  9597  00171C                     u6258:
  9598  00171C  3A5B               	swapf	??_CantaPartAlta^0,f,c
  9599  00171E  465B               	rlncf	??_CantaPartAlta^0,f,c
  9600  001720  465B               	rlncf	??_CantaPartAlta^0,f,c
  9601  001722  508C               	movf	140,w,c	;volatile
  9602  001724  185B               	xorwf	??_CantaPartAlta^0,w,c
  9603  001726  0BBF               	andlw	-65
  9604  001728  185B               	xorwf	??_CantaPartAlta^0,w,c
  9605  00172A  6E8C               	movwf	140,c	;volatile
  9606                           
  9607                           ;LCD.c: 194:   (LATDbits.LATD7 = (c & 0x10 ? 1 : 0));
  9608  00172C  A85C               	btfss	CantaPartAlta@c^0,4,c
  9609  00172E  D003               	goto	u6260
  9610  001730  6A5B               	clrf	??_CantaPartAlta^0,c
  9611  001732  2A5B               	incf	??_CantaPartAlta^0,f,c
  9612  001734  D001               	goto	u6278
  9613  001736                     u6260:
  9614  001736  6A5B               	clrf	??_CantaPartAlta^0,c
  9615  001738                     u6278:
  9616  001738  325B               	rrcf	??_CantaPartAlta^0,f,c
  9617  00173A  325B               	rrcf	??_CantaPartAlta^0,f,c
  9618  00173C  508C               	movf	140,w,c	;volatile
  9619  00173E  185B               	xorwf	??_CantaPartAlta^0,w,c
  9620  001740  0B7F               	andlw	-129
  9621  001742  185B               	xorwf	??_CantaPartAlta^0,w,c
  9622  001744  6E8C               	movwf	140,c	;volatile
  9623  001746  0012               	return		;funcret
  9624  001748                     __end_of_CantaPartAlta:
  9625                           	callstack 0
  9626                           
  9627 ;; *************** function _JoyInit *****************
  9628 ;; Defined at:
  9629 ;;		line 11 in file "joyStick.c"
  9630 ;; Parameters:    Size  Location     Type
  9631 ;;		None
  9632 ;; Auto vars:     Size  Location     Type
  9633 ;;		None
  9634 ;; Return value:  Size  Location     Type
  9635 ;;                  1    wreg      void 
  9636 ;; Registers used:
  9637 ;;		wreg, status,2
  9638 ;; Tracked objects:
  9639 ;;		On entry : 0/0
  9640 ;;		On exit  : 0/0
  9641 ;;		Unchanged: 0/0
  9642 ;; Data sizes:     COMRAM   BANK0   BANK1
  9643 ;;      Params:         0       0       0
  9644 ;;      Locals:         0       0       0
  9645 ;;      Temps:          0       0       0
  9646 ;;      Totals:         0       0       0
  9647 ;;Total ram usage:        0 bytes
  9648 ;; Hardware stack levels used: 1
  9649 ;; Hardware stack levels required when called: 3
  9650 ;; This function calls:
  9651 ;;		Nothing
  9652 ;; This function is called by:
  9653 ;;		_main
  9654 ;; This function uses a non-reentrant model
  9655 ;;
  9656                           
  9657                           	psect	text57
  9658  001D40                     __ptext57:
  9659                           	callstack 0
  9660  001D40                     _JoyInit:
  9661                           	callstack 27
  9662                           
  9663                           ;joyStick.c: 12:     ADCON0 = 0b00000101;
  9664                           
  9665                           ;incstack = 0
  9666  001D40  0E05               	movlw	5
  9667  001D42  6EC2               	movwf	194,c	;volatile
  9668                           
  9669                           ;joyStick.c: 13:     ADCON1=0b00001101;
  9670  001D44  0E0D               	movlw	13
  9671  001D46  6EC1               	movwf	193,c	;volatile
  9672                           
  9673                           ;joyStick.c: 14:     ADCON2=0b01000100;
  9674  001D48  0E44               	movlw	68
  9675  001D4A  6EC0               	movwf	192,c	;volatile
  9676                           
  9677                           ;joyStick.c: 15:     TRISAbits.TRISA0=1;
  9678  001D4C  8092               	bsf	146,0,c	;volatile
  9679                           
  9680                           ;joyStick.c: 16:     TRISAbits.TRISA1=1;
  9681  001D4E  8292               	bsf	146,1,c	;volatile
  9682                           
  9683                           ;joyStick.c: 17:     x=0;
  9684  001D50  6A38               	clrf	_x^0,c
  9685                           
  9686                           ;joyStick.c: 18:     y=0;
  9687  001D52  6A37               	clrf	_y^0,c
  9688  001D54  0012               	return		;funcret
  9689  001D56                     __end_of_JoyInit:
  9690                           	callstack 0
  9691                           
  9692 ;; *************** function _HourInit *****************
  9693 ;; Defined at:
  9694 ;;		line 8 in file "THour.c"
  9695 ;; Parameters:    Size  Location     Type
  9696 ;;		None
  9697 ;; Auto vars:     Size  Location     Type
  9698 ;;		None
  9699 ;; Return value:  Size  Location     Type
  9700 ;;                  1    wreg      void 
  9701 ;; Registers used:
  9702 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9703 ;; Tracked objects:
  9704 ;;		On entry : 0/0
  9705 ;;		On exit  : 0/0
  9706 ;;		Unchanged: 0/0
  9707 ;; Data sizes:     COMRAM   BANK0   BANK1
  9708 ;;      Params:         0       0       0
  9709 ;;      Locals:         0       0       0
  9710 ;;      Temps:          0       0       0
  9711 ;;      Totals:         0       0       0
  9712 ;;Total ram usage:        0 bytes
  9713 ;; Hardware stack levels used: 1
  9714 ;; Hardware stack levels required when called: 4
  9715 ;; This function calls:
  9716 ;;		_TiGetTimer
  9717 ;;		_TiResetTics
  9718 ;; This function is called by:
  9719 ;;		_main
  9720 ;; This function uses a non-reentrant model
  9721 ;;
  9722                           
  9723                           	psect	text58
  9724  001C90                     __ptext58:
  9725                           	callstack 0
  9726  001C90                     _HourInit:
  9727                           	callstack 26
  9728                           
  9729                           ;THour.c: 9:     minutes[0] = 0;
  9730                           
  9731                           ;incstack = 0
  9732  001C90  6A15               	clrf	_minutes^0,c
  9733                           
  9734                           ;THour.c: 10:  minutes[1] = 0;
  9735  001C92  6A16               	clrf	(_minutes+1)^0,c
  9736                           
  9737                           ;THour.c: 11:  hours[0] = 0;
  9738  001C94  6A13               	clrf	_hours^0,c
  9739                           
  9740                           ;THour.c: 12:  hours[1] = 0;
  9741  001C96  6A14               	clrf	(_hours+1)^0,c
  9742                           
  9743                           ;THour.c: 13:  seconds = 0;
  9744  001C98  6A4C               	clrf	_seconds^0,c
  9745                           
  9746                           ;THour.c: 14:  timerHour = TiGetTimer();
  9747  001C9A  EC60  F00D         	call	_TiGetTimer	;wreg free
  9748  001C9E  6E22               	movwf	_timerHour^0,c
  9749                           
  9750                           ;THour.c: 15:     TiResetTics(timerHour);
  9751  001CA0  5022               	movf	_timerHour^0,w,c
  9752  001CA2  EC57  F00E         	call	_TiResetTics
  9753                           
  9754                           ;THour.c: 16:     rowi=0;
  9755  001CA6  6A50               	clrf	_rowi^0,c
  9756                           
  9757                           ;THour.c: 17:     stateHour=0;
  9758  001CA8  6A24               	clrf	_stateHour@TData$F1717^0,c
  9759                           
  9760                           ;THour.c: 18:     pointer=0;
  9761  001CAA  6A51               	clrf	_pointer^0,c
  9762  001CAC  0012               	return		;funcret
  9763  001CAE                     __end_of_HourInit:
  9764                           	callstack 0
  9765                           
  9766 ;; *************** function _EusInit *****************
  9767 ;; Defined at:
  9768 ;;		line 11 in file "Eusart.c"
  9769 ;; Parameters:    Size  Location     Type
  9770 ;;		None
  9771 ;; Auto vars:     Size  Location     Type
  9772 ;;		None
  9773 ;; Return value:  Size  Location     Type
  9774 ;;                  1    wreg      void 
  9775 ;; Registers used:
  9776 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9777 ;; Tracked objects:
  9778 ;;		On entry : 0/0
  9779 ;;		On exit  : 0/0
  9780 ;;		Unchanged: 0/0
  9781 ;; Data sizes:     COMRAM   BANK0   BANK1
  9782 ;;      Params:         0       0       0
  9783 ;;      Locals:         0       0       0
  9784 ;;      Temps:          0       0       0
  9785 ;;      Totals:         0       0       0
  9786 ;;Total ram usage:        0 bytes
  9787 ;; Hardware stack levels used: 1
  9788 ;; Hardware stack levels required when called: 4
  9789 ;; This function calls:
  9790 ;;		_TiGetTimer
  9791 ;;		_TiResetTics
  9792 ;; This function is called by:
  9793 ;;		_main
  9794 ;; This function uses a non-reentrant model
  9795 ;;
  9796                           
  9797                           	psect	text59
  9798  001BD2                     __ptext59:
  9799                           	callstack 0
  9800  001BD2                     _EusInit:
  9801                           	callstack 26
  9802                           
  9803                           ;Eusart.c: 12:     SPBRG=64;
  9804                           
  9805                           ;incstack = 0
  9806  001BD2  0E40               	movlw	64
  9807  001BD4  6EAF               	movwf	175,c	;volatile
  9808                           
  9809                           ;Eusart.c: 13:     TRISC |= 0xC0;
  9810  001BD6  0EC0               	movlw	192
  9811  001BD8  1294               	iorwf	148,f,c	;volatile
  9812                           
  9813                           ;Eusart.c: 14:  TXSTA = 0b00100100;
  9814  001BDA  0E24               	movlw	36
  9815  001BDC  6EAC               	movwf	172,c	;volatile
  9816                           
  9817                           ;Eusart.c: 15:  RCSTA = 0b10010000;
  9818  001BDE  0E90               	movlw	144
  9819  001BE0  6EAB               	movwf	171,c	;volatile
  9820                           
  9821                           ;Eusart.c: 16:  BAUDCONbits.BRG16 = 0;
  9822  001BE2  96B8               	bcf	184,3,c	;volatile
  9823                           
  9824                           ;Eusart.c: 17:     TRISCbits.TRISC6=1;
  9825  001BE4  8C94               	bsf	148,6,c	;volatile
  9826                           
  9827                           ;Eusart.c: 18:     TRISCbits.TRISC7=1;
  9828  001BE6  8E94               	bsf	148,7,c	;volatile
  9829                           
  9830                           ;Eusart.c: 20:     timerEusart=TiGetTimer();
  9831  001BE8  EC60  F00D         	call	_TiGetTimer	;wreg free
  9832  001BEC  6E1E               	movwf	_timerEusart^0,c
  9833                           
  9834                           ;Eusart.c: 21:     TiResetTics(timerEusart);
  9835  001BEE  501E               	movf	_timerEusart^0,w,c
  9836  001BF0  EF57  F00E         	goto	_TiResetTics
  9837  001BF4                     __end_of_EusInit:
  9838                           	callstack 0
  9839                           
  9840 ;; *************** function _TiResetTics *****************
  9841 ;; Defined at:
  9842 ;;		line 55 in file "TTimer.c"
  9843 ;; Parameters:    Size  Location     Type
  9844 ;;  Handle          1    wreg     unsigned char 
  9845 ;; Auto vars:     Size  Location     Type
  9846 ;;  Handle          1    6[COMRAM] unsigned char 
  9847 ;; Return value:  Size  Location     Type
  9848 ;;                  1    wreg      void 
  9849 ;; Registers used:
  9850 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  9851 ;; Tracked objects:
  9852 ;;		On entry : 0/0
  9853 ;;		On exit  : 0/0
  9854 ;;		Unchanged: 0/0
  9855 ;; Data sizes:     COMRAM   BANK0   BANK1
  9856 ;;      Params:         0       0       0
  9857 ;;      Locals:         1       0       0
  9858 ;;      Temps:          0       0       0
  9859 ;;      Totals:         1       0       0
  9860 ;;Total ram usage:        1 bytes
  9861 ;; Hardware stack levels used: 1
  9862 ;; Hardware stack levels required when called: 3
  9863 ;; This function calls:
  9864 ;;		Nothing
  9865 ;; This function is called by:
  9866 ;;		_motorMatrix
  9867 ;;		_Espera
  9868 ;;		_WaitForBusy
  9869 ;;		_menuReset
  9870 ;;		_motor_SMS
  9871 ;;		_SMS_PrintReset
  9872 ;;		_InitSpeaker
  9873 ;;		_motorSpeaker
  9874 ;;		_HourInit
  9875 ;;		_motor_hour
  9876 ;;		_EusInit
  9877 ;;		_motorEusart
  9878 ;;		_marqueeUsers
  9879 ;;		_userReset
  9880 ;;		_MenuDoMarquee
  9881 ;; This function uses a non-reentrant model
  9882 ;;
  9883                           
  9884                           	psect	text60
  9885  001CAE                     __ptext60:
  9886                           	callstack 0
  9887  001CAE                     _TiResetTics:
  9888                           	callstack 26
  9889                           
  9890                           ;incstack = 0
  9891                           ;TiResetTics@Handle stored from wreg
  9892  001CAE  6E5B               	movwf	TiResetTics@Handle^0,c
  9893                           
  9894                           ;TTimer.c: 59:     s_Timers[Handle].h_initialTics=h_Tics;
  9895  001CB0  505B               	movf	TiResetTics@Handle^0,w,c
  9896  001CB2  D805               	call	PL58	;call to abstracted procedure
  9897  001CB4  C011  FFDE         	movff	_h_Tics,postinc2
  9898  001CB8  C012  FFDD         	movff	_h_Tics+1,postdec2
  9899  001CBC  0012               	return		;funcret
  9900  001CBE                     __end_of_TiResetTics:
  9901                           	callstack 0
  9902  001CBE                     PL58:
  9903                           	callstack 20
  9904  001CBE  0D03               	mullw	3
  9905  001CC0  50F3               	movf	243,w,c
  9906  001CC2  0F80               	addlw	low _s_Timers
  9907  001CC4  6ED9               	movwf	fsr2l,c
  9908  001CC6  6ADA               	clrf	fsr2h,c
  9909  001CC8  0012               	return	
  9910  001CCA                     __end_ofPL58:
  9911                           	callstack 0
  9912                           
  9913 ;; *************** function _TiGetTimer *****************
  9914 ;; Defined at:
  9915 ;;		line 70 in file "TTimer.c"
  9916 ;; Parameters:    Size  Location     Type
  9917 ;;		None
  9918 ;; Auto vars:     Size  Location     Type
  9919 ;;		None
  9920 ;; Return value:  Size  Location     Type
  9921 ;;                  1    wreg      unsigned char 
  9922 ;; Registers used:
  9923 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  9924 ;; Tracked objects:
  9925 ;;		On entry : 0/0
  9926 ;;		On exit  : 0/0
  9927 ;;		Unchanged: 0/0
  9928 ;; Data sizes:     COMRAM   BANK0   BANK1
  9929 ;;      Params:         0       0       0
  9930 ;;      Locals:         0       0       0
  9931 ;;      Temps:          1       0       0
  9932 ;;      Totals:         1       0       0
  9933 ;;Total ram usage:        1 bytes
  9934 ;; Hardware stack levels used: 1
  9935 ;; Hardware stack levels required when called: 3
  9936 ;; This function calls:
  9937 ;;		Nothing
  9938 ;; This function is called by:
  9939 ;;		_initMatrix
  9940 ;;		_LcInit
  9941 ;;		_initMenu
  9942 ;;		_initSMS
  9943 ;;		_InitSpeaker
  9944 ;;		_HourInit
  9945 ;;		_EusInit
  9946 ;;		_initUser
  9947 ;; This function uses a non-reentrant model
  9948 ;;
  9949                           
  9950                           	psect	text61
  9951  001AC0                     __ptext61:
  9952                           	callstack 0
  9953  001AC0                     _TiGetTimer:
  9954                           	callstack 25
  9955                           
  9956                           ;TTimer.c: 74:     counter=0;
  9957                           
  9958                           ;incstack = 0
  9959  001AC0  6A48               	clrf	_counter^0,c
  9960                           
  9961                           ;TTimer.c: 75:     while (s_Timers[counter].b_busy==1) {
  9962  001AC2  D005               	goto	l4722
  9963  001AC4                     l4714:
  9964                           
  9965                           ;TTimer.c: 76:         counter++;
  9966  001AC4  2A48               	incf	_counter^0,f,c
  9967                           
  9968                           ;TTimer.c: 77:  if (counter == 12) return -1;
  9969  001AC6  0E0C               	movlw	12
  9970  001AC8  1848               	xorwf	_counter^0,w,c
  9971  001ACA  E101               	bnz	l4722
  9972  001ACC  0CFF               	retlw	255
  9973  001ACE                     l4722:
  9974                           
  9975                           ;TTimer.c: 75:     while (s_Timers[counter].b_busy==1) {
  9976  001ACE  D807               	call	PL38	;call to abstracted procedure
  9977  001AD0  04DE               	decf	postinc2,w,c
  9978  001AD2  E0F8               	bz	l4714
  9979                           
  9980                           ;TTimer.c: 79:     s_Timers[counter].b_busy=1;
  9981  001AD4  D804               	call	PL38	;call to abstracted procedure
  9982  001AD6  0E01               	movlw	1
  9983  001AD8  6EDF               	movwf	indf2,c
  9984                           
  9985                           ;TTimer.c: 80:     return (counter);
  9986  001ADA  5048               	movf	_counter^0,w,c
  9987  001ADC  0012               	return		;funcret
  9988  001ADE                     __end_of_TiGetTimer:
  9989                           	callstack 0
  9990  001ADE                     PL38:
  9991                           	callstack 27
  9992  001ADE  5048               	movf	_counter^0,w,c
  9993  001AE0  0D03               	mullw	3
  9994  001AE2  50F3               	movf	243,w,c
  9995  001AE4  0F82               	addlw	low (_s_Timers+2)
  9996  001AE6  6ED9               	movwf	fsr2l,c
  9997  001AE8  6ADA               	clrf	fsr2h,c
  9998  001AEA  0012               	return	
  9999  001AEC                     __end_ofPL38:
 10000                           	callstack 0
 10001                           
 10002 ;; *************** function _RSI_Low *****************
 10003 ;; Defined at:
 10004 ;;		line 43 in file "MAIN.c"
 10005 ;; Parameters:    Size  Location     Type
 10006 ;;		None
 10007 ;; Auto vars:     Size  Location     Type
 10008 ;;		None
 10009 ;; Return value:  Size  Location     Type
 10010 ;;                  1    wreg      void 
 10011 ;; Registers used:
 10012 ;;		None
 10013 ;; Tracked objects:
 10014 ;;		On entry : 0/0
 10015 ;;		On exit  : 0/0
 10016 ;;		Unchanged: 0/0
 10017 ;; Data sizes:     COMRAM   BANK0   BANK1
 10018 ;;      Params:         0       0       0
 10019 ;;      Locals:         0       0       0
 10020 ;;      Temps:          1       0       0
 10021 ;;      Totals:         1       0       0
 10022 ;;Total ram usage:        1 bytes
 10023 ;; Hardware stack levels used: 1
 10024 ;; Hardware stack levels required when called: 2
 10025 ;; This function calls:
 10026 ;;		Nothing
 10027 ;; This function is called by:
 10028 ;;		Interrupt level 1
 10029 ;; This function uses a non-reentrant model
 10030 ;;
 10031                           
 10032                           	psect	intcodelo
 10033  000018                     __pintcodelo:
 10034                           	callstack 0
 10035  000018                     _RSI_Low:
 10036                           	callstack 20
 10037                           
 10038                           ;incstack = 0
 10039  000018  8079               	bsf	btemp,0,c	;set compiler interrupt flag (level 1)
 10040  00001A  CFE0 F05A          	movff	bsr,??_RSI_Low
 10041  00001E  C05A  FFE0         	movff	??_RSI_Low,bsr
 10042  000022  9079               	bcf	btemp,0,c	;clear compiler interrupt flag (level 1)
 10043  000024  0010               	retfie	
 10044  000026                     __end_of_RSI_Low:
 10045                           	callstack 0
 10046                           
 10047 ;; *************** function _RSI_High *****************
 10048 ;; Defined at:
 10049 ;;		line 38 in file "MAIN.c"
 10050 ;; Parameters:    Size  Location     Type
 10051 ;;		None
 10052 ;; Auto vars:     Size  Location     Type
 10053 ;;		None
 10054 ;; Return value:  Size  Location     Type
 10055 ;;                  1    wreg      void 
 10056 ;; Registers used:
 10057 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 10058 ;; Tracked objects:
 10059 ;;		On entry : 0/0
 10060 ;;		On exit  : 0/0
 10061 ;;		Unchanged: 0/0
 10062 ;; Data sizes:     COMRAM   BANK0   BANK1
 10063 ;;      Params:         0       0       0
 10064 ;;      Locals:         0       0       0
 10065 ;;      Temps:          4       0       0
 10066 ;;      Totals:         4       0       0
 10067 ;;Total ram usage:        4 bytes
 10068 ;; Hardware stack levels used: 1
 10069 ;; Hardware stack levels required when called: 1
 10070 ;; This function calls:
 10071 ;;		__TiRSITimer
 10072 ;; This function is called by:
 10073 ;;		Interrupt level 2
 10074 ;; This function uses a non-reentrant model
 10075 ;;
 10076                           
 10077                           	psect	intcode
 10078  000008                     __pintcode:
 10079                           	callstack 0
 10080  000008                     _RSI_High:
 10081                           	callstack 20
 10082                           
 10083                           ;incstack = 0
 10084  000008  8279               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 10085  00000A  EF9E  F00D         	goto	int_func
 10086                           
 10087                           	psect	intcode_body
 10088  001B3C                     __pintcode_body:
 10089                           	callstack 20
 10090  001B3C                     int_func:
 10091                           	callstack 20
 10092  001B3C  CFD9 F056          	movff	fsr2l,??_RSI_High
 10093  001B40  CFDA F057          	movff	fsr2h,??_RSI_High+1
 10094  001B44  CFF3 F058          	movff	prodl,??_RSI_High+2
 10095  001B48  CFF4 F059          	movff	prodh,??_RSI_High+3
 10096                           
 10097                           ;MAIN.c: 40: 
 10098  001B4C  ECA6  F00C         	call	__TiRSITimer	;wreg free
 10099  001B50  C059  FFF4         	movff	??_RSI_High+3,prodh
 10100  001B54  C058  FFF3         	movff	??_RSI_High+2,prodl
 10101  001B58  C057  FFDA         	movff	??_RSI_High+1,fsr2h
 10102  001B5C  C056  FFD9         	movff	??_RSI_High,fsr2l
 10103  001B60  9279               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 10104  001B62  0011               	retfie		f
 10105  001B64                     __end_of_RSI_High:
 10106                           	callstack 0
 10107                           
 10108 ;; *************** function __TiRSITimer *****************
 10109 ;; Defined at:
 10110 ;;		line 35 in file "TTimer.c"
 10111 ;; Parameters:    Size  Location     Type
 10112 ;;		None
 10113 ;; Auto vars:     Size  Location     Type
 10114 ;;		None
 10115 ;; Return value:  Size  Location     Type
 10116 ;;                  1    wreg      void 
 10117 ;; Registers used:
 10118 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 10119 ;; Tracked objects:
 10120 ;;		On entry : 0/0
 10121 ;;		On exit  : 0/0
 10122 ;;		Unchanged: 0/0
 10123 ;; Data sizes:     COMRAM   BANK0   BANK1
 10124 ;;      Params:         0       0       0
 10125 ;;      Locals:         0       0       0
 10126 ;;      Temps:          1       0       0
 10127 ;;      Totals:         1       0       0
 10128 ;;Total ram usage:        1 bytes
 10129 ;; Hardware stack levels used: 1
 10130 ;; This function calls:
 10131 ;;		Nothing
 10132 ;; This function is called by:
 10133 ;;		_RSI_High
 10134 ;; This function uses a non-reentrant model
 10135 ;;
 10136                           
 10137                           	psect	text64
 10138  00194C                     __ptext64:
 10139                           	callstack 0
 10140  00194C                     __TiRSITimer:
 10141                           	callstack 0
 10142                           
 10143                           ;TTimer.c: 38:     TMR0H = 0xFB;
 10144                           
 10145                           ;incstack = 0
 10146                           
 10147                           ;TTimer.c: 39:     TMR0L = 0x1E;
 10148  00194C  D81E               	call	PL106	;call to abstracted procedure
 10149                           
 10150                           ;TTimer.c: 41:     INTCONbits.TMR0IF = 0;
 10151  00194E  94F2               	bcf	242,2,c	;volatile
 10152                           
 10153                           ;TTimer.c: 42:     h_Tics++;
 10154  001950  4A11               	infsnz	_h_Tics^0,f,c
 10155  001952  2A12               	incf	(_h_Tics+1)^0,f,c
 10156                           
 10157                           ;TTimer.c: 44:     if (h_Tics>=2000) {
 10158  001954  0ED0               	movlw	208
 10159  001956  5C11               	subwf	_h_Tics^0,w,c
 10160  001958  0E07               	movlw	7
 10161  00195A  5812               	subwfb	(_h_Tics+1)^0,w,c
 10162  00195C  A0D8               	btfss	status,0,c
 10163  00195E  0012               	return	
 10164                           
 10165                           ;TTimer.c: 46:         for (counter=0;counter<12;counter++){
 10166  001960  6A48               	clrf	_counter^0,c
 10167  001962                     i2l5098:
 10168  001962  0E0B               	movlw	11
 10169  001964  6448               	cpfsgt	_counter^0,c
 10170  001966  D001               	goto	i2l5102
 10171  001968  D00D               	goto	i2l189
 10172  00196A                     i2l5102:
 10173                           
 10174                           ;TTimer.c: 47:             if (s_Timers[counter].b_busy==1){
 10175  00196A  EC6F  F00D         	call	PL38	;call to abstracted procedure
 10176  00196E  04DE               	decf	postinc2,w,c
 10177  001970  E107               	bnz	i2l5106
 10178                           
 10179                           ;TTimer.c: 48:                 s_Timers[counter].h_initialTics -= h_Tics;
 10180  001972  5048               	movf	_counter^0,w,c
 10181  001974  EC5F  F00E         	call	PL58	;call to abstracted procedure
 10182  001978  5011               	movf	_h_Tics^0,w,c
 10183  00197A  5EDE               	subwf	postinc2,f,c
 10184  00197C  5012               	movf	(_h_Tics+1)^0,w,c
 10185  00197E  5ADD               	subwfb	postdec2,f,c
 10186  001980                     i2l5106:
 10187                           
 10188                           ;TTimer.c: 50:         }
 10189  001980  2A48               	incf	_counter^0,f,c
 10190  001982  D7EF               	goto	i2l5098
 10191  001984                     i2l189:
 10192                           
 10193                           ;TTimer.c: 51:         h_Tics=0;
 10194  001984  6A11               	clrf	_h_Tics^0,c
 10195  001986  6A12               	clrf	(_h_Tics+1)^0,c
 10196  001988  0012               	return		;funcret
 10197  00198A                     __end_of__TiRSITimer:
 10198                           	callstack 0
 10199  00198A                     PL106:
 10200                           	callstack 27
 10201  00198A  0EFB               	movlw	251
 10202  00198C  6ED7               	movwf	215,c	;volatile
 10203  00198E  0E1E               	movlw	30
 10204  001990  6ED6               	movwf	214,c	;volatile
 10205  001992  0C1E               	retlw	30
 10206  001994                     __end_ofPL106:
 10207                           	callstack 0
 10208                           
 10209                           	psect	rparam
 10210  0000                     
 10211                           	psect	temp
 10212  000079                     btemp:
 10213                           	callstack 0
 10214  000079                     	ds	1
 10215  0000                     int$flags	set	btemp
 10216  0000                     wtemp8	set	btemp+1
 10217  0000                     ttemp5	set	btemp+1
 10218  0000                     ttemp6	set	btemp+4
 10219  0000                     ttemp7	set	btemp+8
 10220                           
 10221                           	psect	idloc
 10222                           
 10223                           ;Config register IDLOC0 @ 0x200000
 10224                           ;	unspecified, using default values
 10225  200000                     	org	2097152
 10226  200000  FF                 	db	255
 10227                           
 10228                           ;Config register IDLOC1 @ 0x200001
 10229                           ;	unspecified, using default values
 10230  200001                     	org	2097153
 10231  200001  FF                 	db	255
 10232                           
 10233                           ;Config register IDLOC2 @ 0x200002
 10234                           ;	unspecified, using default values
 10235  200002                     	org	2097154
 10236  200002  FF                 	db	255
 10237                           
 10238                           ;Config register IDLOC3 @ 0x200003
 10239                           ;	unspecified, using default values
 10240  200003                     	org	2097155
 10241  200003  FF                 	db	255
 10242                           
 10243                           ;Config register IDLOC4 @ 0x200004
 10244                           ;	unspecified, using default values
 10245  200004                     	org	2097156
 10246  200004  FF                 	db	255
 10247                           
 10248                           ;Config register IDLOC5 @ 0x200005
 10249                           ;	unspecified, using default values
 10250  200005                     	org	2097157
 10251  200005  FF                 	db	255
 10252                           
 10253                           ;Config register IDLOC6 @ 0x200006
 10254                           ;	unspecified, using default values
 10255  200006                     	org	2097158
 10256  200006  FF                 	db	255
 10257                           
 10258                           ;Config register IDLOC7 @ 0x200007
 10259                           ;	unspecified, using default values
 10260  200007                     	org	2097159
 10261  200007  FF                 	db	255
 10262                           
 10263                           	psect	config
 10264                           
 10265                           ; Padding undefined space
 10266  300000                     	org	3145728
 10267  300000  FF                 	db	255
 10268                           
 10269                           ;Config register CONFIG1H @ 0x300001
 10270                           ;	Oscillator
 10271                           ;	OSC = HS, HS Oscillator
 10272                           ;	Fail-Safe Clock Monitor Enable bit
 10273                           ;	FCMEN = 0x0, unprogrammed default
 10274                           ;	Internal/External Oscillator Switchover bit
 10275                           ;	IESO = 0x0, unprogrammed default
 10276  300001                     	org	3145729
 10277  300001  02                 	db	2
 10278                           
 10279                           ;Config register CONFIG2L @ 0x300002
 10280                           ;	Power-up Timer Enable bit
 10281                           ;	PWRT = OFF, PWRT disabled
 10282                           ;	Brown-out Reset Enable bits
 10283                           ;	BOR = OFF, Brown-out Reset disabled in hardware and software
 10284                           ;	Brown-out Reset Voltage bits
 10285                           ;	BORV = 0x3, unprogrammed default
 10286  300002                     	org	3145730
 10287  300002  19                 	db	25
 10288                           
 10289                           ;Config register CONFIG2H @ 0x300003
 10290                           ;	Watchdog Timer Enable bit
 10291                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
 10292                           ;	Watchdog Timer Postscale Select bits
 10293                           ;	WDTPS = 0xF, unprogrammed default
 10294  300003                     	org	3145731
 10295  300003  1E                 	db	30
 10296                           
 10297                           ; Padding undefined space
 10298  300004                     	org	3145732
 10299  300004  FF                 	db	255
 10300                           
 10301                           ;Config register CONFIG3H @ 0x300005
 10302                           ;	CCP2 MUX bit
 10303                           ;	CCP2MX = 0x1, unprogrammed default
 10304                           ;	PORTB A/D Enable bit
 10305                           ;	PBADEN = DIG, PORTB<4:0> pins are configured as digital I/O on Reset
 10306                           ;	Low-Power Timer1 Oscillator Enable bit
 10307                           ;	LPT1OSC = 0x0, unprogrammed default
 10308                           ;	MCLR Pin Enable bit
 10309                           ;	MCLRE = ON, MCLR pin enabled; RE3 input pin disabled
 10310  300005                     	org	3145733
 10311  300005  81                 	db	129
 10312                           
 10313                           ;Config register CONFIG4L @ 0x300006
 10314                           ;	Stack Full/Underflow Reset Enable bit
 10315                           ;	STVREN = 0x1, unprogrammed default
 10316                           ;	Single-Supply ICSP Enable bit
 10317                           ;	LVP = OFF, Single-Supply ICSP disabled
 10318                           ;	Boot Block Size Select bits
 10319                           ;	BBSIZ = 0x0, unprogrammed default
 10320                           ;	Extended Instruction Set Enable bit
 10321                           ;	XINST = 0x0, unprogrammed default
 10322                           ;	Background Debugger Enable bit
 10323                           ;	DEBUG = OFF, Background debugger disabled, RB6 and RB7 configured as general purpose I
      +                          /O pins
 10324  300006                     	org	3145734
 10325  300006  81                 	db	129
 10326                           
 10327                           ; Padding undefined space
 10328  300007                     	org	3145735
 10329  300007  FF                 	db	255
 10330                           
 10331                           ;Config register CONFIG5L @ 0x300008
 10332                           ;	unspecified, using default values
 10333                           ;	Code Protection bit
 10334                           ;	CP0 = 0x1, unprogrammed default
 10335                           ;	Code Protection bit
 10336                           ;	CP1 = 0x1, unprogrammed default
 10337  300008                     	org	3145736
 10338  300008  03                 	db	3
 10339                           
 10340                           ;Config register CONFIG5H @ 0x300009
 10341                           ;	unspecified, using default values
 10342                           ;	Boot Block Code Protection bitProtect Boot
 10343                           ;	CPB = 0x1, unprogrammed default
 10344                           ;	Data EEPROM Code Protection bit
 10345                           ;	CPD = 0x1, unprogrammed default
 10346  300009                     	org	3145737
 10347  300009  C0                 	db	192
 10348                           
 10349                           ;Config register CONFIG6L @ 0x30000A
 10350                           ;	unspecified, using default values
 10351                           ;	Write Protection bit
 10352                           ;	WRT0 = 0x1, unprogrammed default
 10353                           ;	Write Protection bit
 10354                           ;	WRT1 = 0x1, unprogrammed default
 10355  30000A                     	org	3145738
 10356  30000A  03                 	db	3
 10357                           
 10358                           ;Config register CONFIG6H @ 0x30000B
 10359                           ;	unspecified, using default values
 10360                           ;	Configuration Register Write Protection bit
 10361                           ;	WRTC = 0x1, unprogrammed default
 10362                           ;	Boot Block Write Protection bit
 10363                           ;	WRTB = 0x1, unprogrammed default
 10364                           ;	Data EEPROM Write Protection bit
 10365                           ;	WRTD = 0x1, unprogrammed default
 10366  30000B                     	org	3145739
 10367  30000B  E0                 	db	224
 10368                           
 10369                           ;Config register CONFIG7L @ 0x30000C
 10370                           ;	unspecified, using default values
 10371                           ;	Table Read Protection bit
 10372                           ;	EBTR0 = 0x1, unprogrammed default
 10373                           ;	Table Read Protection bit
 10374                           ;	EBTR1 = 0x1, unprogrammed default
 10375  30000C                     	org	3145740
 10376  30000C  03                 	db	3
 10377                           
 10378                           ;Config register CONFIG7H @ 0x30000D
 10379                           ;	unspecified, using default values
 10380                           ;	Boot Block Table Read Protection bit
 10381                           ;	EBTRB = 0x1, unprogrammed default
 10382  30000D                     	org	3145741
 10383  30000D  40                 	db	64
 10384                           tosu	equ	0xFFF
 10385                           tosh	equ	0xFFE
 10386                           tosl	equ	0xFFD
 10387                           stkptr	equ	0xFFC
 10388                           pclatu	equ	0xFFB
 10389                           pclath	equ	0xFFA
 10390                           pcl	equ	0xFF9
 10391                           tblptru	equ	0xFF8
 10392                           tblptrh	equ	0xFF7
 10393                           tblptrl	equ	0xFF6
 10394                           tablat	equ	0xFF5
 10395                           prodh	equ	0xFF4
 10396                           prodl	equ	0xFF3
 10397                           indf0	equ	0xFEF
 10398                           postinc0	equ	0xFEE
 10399                           postdec0	equ	0xFED
 10400                           preinc0	equ	0xFEC
 10401                           plusw0	equ	0xFEB
 10402                           fsr0h	equ	0xFEA
 10403                           fsr0l	equ	0xFE9
 10404                           wreg	equ	0xFE8
 10405                           indf1	equ	0xFE7
 10406                           postinc1	equ	0xFE6
 10407                           postdec1	equ	0xFE5
 10408                           preinc1	equ	0xFE4
 10409                           plusw1	equ	0xFE3
 10410                           fsr1h	equ	0xFE2
 10411                           fsr1l	equ	0xFE1
 10412                           bsr	equ	0xFE0
 10413                           indf2	equ	0xFDF
 10414                           postinc2	equ	0xFDE
 10415                           postdec2	equ	0xFDD
 10416                           preinc2	equ	0xFDC
 10417                           plusw2	equ	0xFDB
 10418                           fsr2h	equ	0xFDA
 10419                           fsr2l	equ	0xFD9
 10420                           status	equ	0xFD8

Data Sizes:
    Strings     0
    Constant    490
    Data        10
    BSS         434
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     36     120
    BANK0           128      7      87
    BANK1           256      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMRAM

    _main->_motor_hour
    _motor_hour->_PrintCouples
    _PrintCouples->_PrintData
    _motor_data->_UpDownUsers
    _UpDownUsers->_marqueePlaceArrow
    _motor_SMS->_PrintData
    _SMS_PrintReset->_LcGotoXY
    _SMS_Print->_LcPutChar
    _LcCursorOn->_WaitForBusy
    _motorUser->_marqueeUsers
    _marqueeUsers->_place_char
    _place_char->_PrintData
    _motorMenu->_MenuDoMarquee
    _MenuDoMarquee->_marqueePlaceArrow
    _marqueePlaceArrow->_LcPutChar
    _LcCursorOff->_WaitForBusy
    _motorMatrix->_TiGetTics
    _motorJoyStick->_calculate_dist
    _motorEusart->_ScoreDigits
    _motorSpeaker->_TiGetTics
    _ScoreDigits->_PrintData
    _PrintData->_LcPutChar
    _LcPutChar->_LcGotoXY
    _LcGotoXY->_WaitForBusy
    _CantaData->_CantaPartAlta
    _CantaData->_CantaPartBaixa
    _DivideScore->_scoreReduce
    _scoreReduce->___awdiv
    _LcClear->_Espera
    _InitSpeaker->_TiGetTimer
    _InitSpeaker->_TiResetTics
    _initUser->_TiGetTimer
    _userReset->_TiResetTics
    _initSMS->_TiGetTimer
    _initMenu->_TiGetTimer
    _menuReset->_TiResetTics
    _initMatrix->_TiGetTimer
    _LcInit->_Espera
    _WaitForBusy->_TiGetTics
    _Espera->_TiGetTics
    _CantaIR->_CantaPartAlta
    _CantaIR->_CantaPartBaixa
    _HourInit->_TiGetTimer
    _HourInit->_TiResetTics
    _EusInit->_TiGetTimer
    _EusInit->_TiResetTics

Critical Paths under _RSI_Low in COMRAM

    None.

Critical Paths under _RSI_High in COMRAM

    _RSI_High->__TiRSITimer

Critical Paths under _main in BANK0

    _main->_motorUser

Critical Paths under _RSI_Low in BANK0

    None.

Critical Paths under _RSI_High in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _RSI_Low in BANK1

    None.

Critical Paths under _RSI_High in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0  217574
                            _EusInit
                           _HourInit
                        _InitSpeaker
                            _JoyInit
                        _LcCursorOff
                             _LcInit
                        _TiInitTimer
                           _initData
                         _initMatrix
                           _initMenu
                            _initSMS
                           _initUser
                        _motorEusart
                      _motorJoyStick
                        _motorMatrix
                          _motorMenu
                          _motorUser
                          _motor_SMS
                         _motor_data
                         _motor_hour
 ---------------------------------------------------------------------------------
 (1) _motor_hour                                           3     3      0   45971
                                             34 COMRAM     2     2      0
                                              0 BANK0      1     1      0
                            _LcClear
                           _LcGotoXY
                          _LcPutChar
                       _PrintCouples
                          _PrintData
                          _TiGetTics
                        _TiResetTics
                       _UpdateCursor
                         _selectChar
 ---------------------------------------------------------------------------------
 (2) _PrintCouples                                         7     1      6   19975
                                             27 COMRAM     7     1      6
                          _PrintData
 ---------------------------------------------------------------------------------
 (1) _motor_data                                           6     4      2   26152
                                             25 COMRAM     6     4      2
                            _LcClear
                           _LcGotoXY
                          _LcPutChar
                        _UpDownUsers
                       _UpdateCursor
                             ___wmul
                  _marqueePlaceArrow
                     _return_to_main
                         _selectChar
                              _start
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     615
                                              6 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) _UpDownUsers                                          1     1      0    9763
                                             24 COMRAM     1     1      0
                           _LcGotoXY
                  _marqueePlaceArrow
 ---------------------------------------------------------------------------------
 (1) _motor_SMS                                            4     2      2   33847
                                             27 COMRAM     4     2      2
                            _LcClear
                        _LcCursorOff
                         _LcCursorOn
                           _LcGotoXY
                          _LcPutChar
                          _PrintData
                          _SMS_Print
                     _SMS_PrintReset
                          _SMS_Reset
                          _TiGetTics
                        _TiResetTics
                             _getKey
                         _selectChar
                              _start
 ---------------------------------------------------------------------------------
 (2) _start                                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _getKey                                               1     1      0     176
                                              6 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _SMS_PrintReset                                       0     0      0    3086
                           _LcGotoXY
                        _TiResetTics
 ---------------------------------------------------------------------------------
 (2) _SMS_Print                                            1     1      0    3557
                                             23 COMRAM     1     1      0
                          _LcPutChar
                       _UpdateCursor
 ---------------------------------------------------------------------------------
 (2) _UpdateCursor                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _LcCursorOn                                           0     0      0     440
                            _CantaIR
                        _WaitForBusy
 ---------------------------------------------------------------------------------
 (1) _motorUser                                            7     7      0   45682
                                              0 BANK0      7     7      0
                        _DivideScore
                       _marqueeUsers
                         _selectChar
                          _userReset
 ---------------------------------------------------------------------------------
 (2) _marqueeUsers                                         6     6      0   43543
                                             29 COMRAM     6     6      0
                           _LcGotoXY
                          _LcPutChar
                          _PrintData
                          _TiGetTics
                        _TiResetTics
                         _place_char
 ---------------------------------------------------------------------------------
 (3) _place_char                                           2     1      1   20255
                                             27 COMRAM     2     1      1
                          _LcPutChar
                          _PrintData
 ---------------------------------------------------------------------------------
 (1) _motorMenu                                            2     2      0   17600
                                             31 COMRAM     2     2      0
                           _EusReset
                        _InitMarquee
                            _LcClear
                        _LcCursorOff
                      _MenuDoMarquee
                          _SMS_Reset
                          _menuReset
                     _return_to_main
                         _selectChar
                          _userReset
 ---------------------------------------------------------------------------------
 (2) _MenuDoMarquee                                        7     2      5   14517
                                             24 COMRAM     7     2      5
                           _LcGotoXY
                          _LcPutChar
                          _TiGetTics
                        _TiResetTics
                  _marqueePlaceArrow
 ---------------------------------------------------------------------------------
 (2) _marqueePlaceArrow                                    1     1      0    6612
                                             23 COMRAM     1     1      0
                           _LcGotoXY
                          _LcPutChar
 ---------------------------------------------------------------------------------
 (2) _LcCursorOff                                          0     0      0     440
                            _CantaIR
                        _WaitForBusy
 ---------------------------------------------------------------------------------
 (2) _EusReset                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _motorMatrix                                          2     2      0     788
                                             13 COMRAM     2     2      0
                          _TiGetTics
                        _TiResetTics
                         _selectChar
 ---------------------------------------------------------------------------------
 (1) _motorJoyStick                                        2     2      0      75
                                              8 COMRAM     2     2      0
                     _calculate_dist
 ---------------------------------------------------------------------------------
 (2) _calculate_dist                                       2     2      0      75
                                              6 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _motorEusart                                          5     5      0   44650
                                              0 BANK0      5     5      0
                        _InitSpeaker
                            _LcClear
                           _LcGotoXY
                          _LcPutChar
                          _PrintData
                        _ScoreDigits
                          _TiGetTics
                        _TiResetTics
                       _motorSpeaker
                         _selectChar
 ---------------------------------------------------------------------------------
 (2) _selectChar                                           4     3      1     692
                                              6 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 (2) _motorSpeaker                                         3     3      0      96
                                             13 COMRAM     3     3      0
                          _TiGetTics
                        _TiResetTics
 ---------------------------------------------------------------------------------
 (2) _ScoreDigits                                          5     1      4   18809
                                             27 COMRAM     5     1      4
                        _DivideScore
                          _PrintData
 ---------------------------------------------------------------------------------
 (2) _PrintData                                            4     1      3   16456
                                             23 COMRAM     4     1      3
                           _LcGotoXY
                          _LcPutChar
 ---------------------------------------------------------------------------------
 (3) _LcPutChar                                            1     1      0    3526
                                             22 COMRAM     1     1      0
                          _CantaData
                           _LcGotoXY
                        _WaitForBusy
 ---------------------------------------------------------------------------------
 (4) _LcGotoXY                                             8     7      1    3055
                                             14 COMRAM     8     7      1
                            _CantaIR
                        _WaitForBusy
 ---------------------------------------------------------------------------------
 (4) _CantaData                                            1     1      0     310
                                              8 COMRAM     1     1      0
                      _CantaPartAlta
                     _CantaPartBaixa
 ---------------------------------------------------------------------------------
 (2) _DivideScore                                          2     0      2    1416
                                             16 COMRAM     2     0      2
                        _scoreReduce
 ---------------------------------------------------------------------------------
 (3) _scoreReduce                                          2     0      2    1195
                                             14 COMRAM     2     0      2
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (4) ___awmod                                              6     2      4     448
                                              6 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              8     4      4     452
                                              6 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (2) _LcClear                                              0     0      0    1889
                            _CantaIR
                             _Espera
                        _WaitForBusy
 ---------------------------------------------------------------------------------
 (2) _InitSpeaker                                          0     0      0      31
                         _TiGetTimer
                        _TiResetTics
 ---------------------------------------------------------------------------------
 (1) _initUser                                             0     0      0      31
                         _TiGetTimer
                          _userReset
 ---------------------------------------------------------------------------------
 (2) _userReset                                            0     0      0      31
                        _InitMarquee
                        _TiResetTics
 ---------------------------------------------------------------------------------
 (1) _initSMS                                              0     0      0       0
                          _SMS_Reset
                         _TiGetTimer
 ---------------------------------------------------------------------------------
 (2) _SMS_Reset                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initMenu                                             0     0      0      31
                         _TiGetTimer
                          _menuReset
 ---------------------------------------------------------------------------------
 (2) _menuReset                                            0     0      0      31
                        _InitMarquee
                        _TiResetTics
 ---------------------------------------------------------------------------------
 (3) _InitMarquee                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initMatrix                                           0     0      0       0
                         _TiGetTimer
 ---------------------------------------------------------------------------------
 (1) _initData                                             1     1      0      45
                                              6 COMRAM     1     1      0
                     _return_to_main
 ---------------------------------------------------------------------------------
 (2) _return_to_main                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _TiInitTimer                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _LcInit                                               4     3      1    2169
                                             18 COMRAM     4     3      1
                            _CantaIR
                 _EscriuPrimeraOrdre
                             _Espera
                         _TiGetTimer
                        _WaitForBusy
 ---------------------------------------------------------------------------------
 (4) _WaitForBusy                                          1     1      0     130
                                             13 COMRAM     1     1      0
                          _TiGetTics
                        _TiResetTics
 ---------------------------------------------------------------------------------
 (3) _Espera                                               5     1      4    1449
                                             13 COMRAM     5     1      4
                          _TiGetTics
                        _TiResetTics
 ---------------------------------------------------------------------------------
 (2) _TiGetTics                                            7     5      2      65
                                              6 COMRAM     7     5      2
 ---------------------------------------------------------------------------------
 (2) _EscriuPrimeraOrdre                                   2     2      0      60
                                              6 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (5) _CantaIR                                              1     1      0     310
                                              8 COMRAM     1     1      0
                      _CantaPartAlta
                     _CantaPartBaixa
 ---------------------------------------------------------------------------------
 (6) _CantaPartBaixa                                       2     2      0     124
                                              6 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (6) _CantaPartAlta                                        2     2      0     124
                                              6 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _JoyInit                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _HourInit                                             0     0      0      31
                         _TiGetTimer
                        _TiResetTics
 ---------------------------------------------------------------------------------
 (1) _EusInit                                              0     0      0      31
                         _TiGetTimer
                        _TiResetTics
 ---------------------------------------------------------------------------------
 (2) _TiResetTics                                          1     1      0      31
                                              6 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _TiGetTimer                                           1     1      0       0
                                              6 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _RSI_Low                                              1     1      0       0
                                              5 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (10) _RSI_High                                            4     4      0       0
                                              1 COMRAM     4     4      0
                        __TiRSITimer
 ---------------------------------------------------------------------------------
 (11) __TiRSITimer                                         1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _EusInit
     _TiGetTimer
     _TiResetTics
   _HourInit
     _TiGetTimer
     _TiResetTics
   _InitSpeaker
     _TiGetTimer
     _TiResetTics
   _JoyInit
   _LcCursorOff
     _CantaIR
       _CantaPartAlta
       _CantaPartBaixa
     _WaitForBusy
       _TiGetTics
       _TiResetTics
   _LcInit
     _CantaIR
     _EscriuPrimeraOrdre
     _Espera
       _TiGetTics
       _TiResetTics
     _TiGetTimer
     _WaitForBusy
   _TiInitTimer
   _initData
     _return_to_main
   _initMatrix
     _TiGetTimer
   _initMenu
     _TiGetTimer
     _menuReset
       _InitMarquee
       _TiResetTics
   _initSMS
     _SMS_Reset
     _TiGetTimer
   _initUser
     _TiGetTimer
     _userReset
       _InitMarquee
       _TiResetTics
   _motorEusart
     _InitSpeaker
     _LcClear
       _CantaIR
       _Espera
       _WaitForBusy
     _LcGotoXY
       _CantaIR
       _WaitForBusy
     _LcPutChar
       _CantaData
         _CantaPartAlta
         _CantaPartBaixa
       _LcGotoXY
       _WaitForBusy
     _PrintData
       _LcGotoXY
       _LcPutChar
     _ScoreDigits
       _DivideScore
         _scoreReduce
           ___awdiv
           ___awmod
       _PrintData
     _TiGetTics
     _TiResetTics
     _motorSpeaker
       _TiGetTics
       _TiResetTics
     _selectChar
   _motorJoyStick
     _calculate_dist
   _motorMatrix
     _TiGetTics
     _TiResetTics
     _selectChar
   _motorMenu
     _EusReset
     _InitMarquee
     _LcClear
     _LcCursorOff
     _MenuDoMarquee
       _LcGotoXY
       _LcPutChar
       _TiGetTics
       _TiResetTics
       _marqueePlaceArrow
         _LcGotoXY
         _LcPutChar
     _SMS_Reset
     _menuReset
     _return_to_main
     _selectChar
     _userReset
   _motorUser
     _DivideScore
     _marqueeUsers
       _LcGotoXY
       _LcPutChar
       _PrintData
       _TiGetTics
       _TiResetTics
       _place_char
         _LcPutChar
         _PrintData
     _selectChar
     _userReset
   _motor_SMS
     _LcClear
     _LcCursorOff
     _LcCursorOn
       _CantaIR
       _WaitForBusy
     _LcGotoXY
     _LcPutChar
     _PrintData
     _SMS_Print
       _LcPutChar
       _UpdateCursor
     _SMS_PrintReset
       _LcGotoXY
       _TiResetTics
     _SMS_Reset
     _TiGetTics
     _TiResetTics
     _getKey
     _selectChar
     _start
   _motor_data
     _LcClear
     _LcGotoXY
     _LcPutChar
     _UpDownUsers
       _LcGotoXY
       _marqueePlaceArrow
     _UpdateCursor
     ___wmul
     _marqueePlaceArrow
     _return_to_main
     _selectChar
     _start
   _motor_hour
     _LcClear
     _LcGotoXY
     _LcPutChar
     _PrintCouples
       _PrintData
     _PrintData
     _TiGetTics
     _TiResetTics
     _UpdateCursor
     _selectChar

 _RSI_Low (ROOT)

 _RSI_High (ROOT)
   __TiRSITimer

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             1FF      0     118       8       54.8%
EEDATA             100      0       0       0        0.0%
BITBANK1           100      0       0       5        0.0%
BANK1              100      0       0       6        0.0%
BITBANK0            80      0       0       3        0.0%
BANK0               80      7      57       4       68.0%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     24      78       1       95.2%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      CF       7        0.0%
DATA                 0      0     1E7       9        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.32 build 20210201212658 
Symbol Table                                                                                   Tue Jul 13 17:00:11 2021

             TiResetTics@Handle 005B               calculate_dist@num 005C                               _x 0038  
                             _y 0037                              PL2 0F0E                              PL4 0F22  
                            PL6 02D2                              PL8 02F0              calculate_dist@dist 005B  
                  ___awdiv@sign 0060         __size_of_SMS_PrintReset 0014                              bsr 000FE0  
           ___wmul@multiplicand 005D                             PL10 02F8                             PL20 0604  
                           PL12 0806                             PL30 0628                             PL22 082E  
                           PL14 05DC                             PL40 032C                             PL32 0308  
                           PL24 061A                             PL16 0818                             PL50 14CE  
                           PL42 0336                             PL34 031A                             PL26 0D4A  
                           PL18 12F0                             PL60 0D6E                             PL52 0BF0  
                           PL44 14C4                             PL36 0842                             PL28 120A  
                           PL70 121A                             PL62 0354                             PL54 064C  
                           PL46 063A                             PL38 1ADE                             PL80 122A  
                           PL72 0360                             PL64 1B32                             PL56 1A50  
                           PL48 0342                             PL90 0DA2                             PL82 1C0A  
                           PL74 036C                             PL66 19EE                             PL58 1CBE  
                           PL92 18E4                             PL84 0D8A                             PL76 0378  
                           PL68 0D7A                             PL94 18EE                             PL86 0C02  
                           PL78 1A5C                             PL96 18F8                             PL88 0D96  
                           PL98 19FC                             l312 0F8C                             l305 0F50  
                           l315 0FA8                             l325 0FF4                             l309 0F70  
                           l326 0FFC                             l327 100C                             l328 1004  
                           l339 1054                             l800 13A8                             l801 13BA  
                           l482 150C                             l804 13BE                             l478 14FA  
                           l647 085E                             l489 1546                             l673 095E  
                           l980 0480                             l992 049A                             l979 0400  
                           l989 046C                             u500 15AE                             u520 15C8  
                           u540 15E4                             u518 15B0                             u480 1596  
                           u538 15CA                             u558 15E6                             u498 1598  
                           _SMS 1F41                             _key 0046                             _min 000B  
                           _sec 000D                             _new 1FA7                             _row 0053  
              ??_CantaPartBaixa 005B                    ___awmod@sign 0060                             prod 000FF3  
                           wreg 000FE8                            PL100 0C0A                            PL110 1AB6  
                          PL102 0A2A                            PL120 0F46                            PL112 0854  
                          PL104 0F36                            PL122 0A34                            PL114 0384  
                          PL106 198A                            PL124 0A3A                            PL116 0DAE  
                          PL108 14E0                            PL126 0A42                            PL118 0F3E  
                   _total_users 0052                            l1002 053C                            l1029 185C  
                          l1191 0686                            l1352 0AB4                            l1354 0AE0  
                          l1197 06E2                            l1349 0AB0                            l1544 0192  
                          l1800 0EE8                            l1561 025C                            l1545 01A2  
                          l1537 0140                            l1721 0CE8                            l1539 0154  
                          l1726 0D42                            l1728 0D3C                            l5122 1B0A  
                          l3268 1C7A                            l5118 1B02                            l3550 13D0  
                          l3542 13B4                            l1783 0DE0                            l1793 0E86  
                          l3570 141E                            l3562 140A                            l3554 13E8  
                          l1797 0ED6                            l1789 0E3C                            l4630 161A  
                          l3566 1414                            l3558 1400                            l7110 0FCE  
                          l7102 0FBE                            l1798 0ED8                            l4624 160A  
                          l3576 142A                            l4714 1AC4                            l4722 1ACE  
                          l2962 1C30                            l7106 0FC2                            l4636 162A  
                          l4652 165A                            l8020 10CC                            l8004 07CC  
                          l8012 07D6                            l4638 1632                            l2958 1C24  
                          l7142 1046                            l7134 102E                            l8030 10E8  
                          l7230 0B30                            l7214 0AFC                            l4656 1666  
                          l4648 1650                            l4672 1766                            l7072 0F6A  
                          l8040 110C                            l8024 10D6                            l7216 0B02  
                          l8120 135E                            l8104 1332                            l7410 01E2  
                          l7330 00EE                            l7322 0070                            l7314 004E  
                          l7154 106A                            l7138 103A                            l8042 1112  
                          l7250 0B6E                            l7242 0B50                            l7218 0B08  
                          l8114 134C                            l4692 17A6                            l4684 1790  
                          l4676 1772                            l4668 175A                            l6604 154E  
                          l7340 0104                            l7332 00F2                            l7324 0074  
                          l7316 0054                            l7308 0046                            l7164 108A  
                          l7180 0A5E                            l4678 177A                            l6606 1568  
                          l7406 01D8                            l8062 116C                            l8054 1132  
                          l4950 1834                            l4942 1820                            l8134 1394  
                          l4688 179A                            l7168 1090                            l7520 08C0  
                          l8056 1138                            l7280 0BBE                            l7264 0B94  
                          l7176 0A50                            l8128 137C                            l7442 023E  
                          l7434 022C                            l7426 01FE                            l7418 01EA  
                          l7346 010E                            l7514 08B8                            l8074 11D6  
                          l8082 11E2                            l4962 1852                            l4954 183E  
                          l4946 182A                            l4938 1816                            l6580 19CC  
                          l7612 0982                            l7540 08E8                            l8076 11DA  
                          l8068 1176                            l6558 19A6                            l6654 1882  
                          l6822 0EDE                            l7630 09AE                            l7622 099A  
                          l7606 0976                            l7534 08DA                            l7526 08C8  
                          l7542 08EC                            l4958 1848                            l7278 0BBA  
                          l6584 14EE                            l6672 18AA                            l6680 1C6C  
                          l7376 015E                            l7368 014A                            l7296 002C  
                          l6816 0EC6                            l6808 0EAE                            l7552 0902  
                          l7288 0BC6                            l6594 151A                            l6666 189C  
                          l7458 026C                            l7394 019C                            l7626 09A4  
                          l7618 0990                            l7562 0914                            l7538 08E6  
                          l7706 03CE                            l6684 1C3A                            l6588 14FE  
                          l6860 144E                            l7388 018A                            l7476 0294  
                          l6772 0E2C                            l7492 087E                            l7820 0530  
                          l7724 03FA                            l7708 03D4                            l6598 1528  
                          l6766 0E1E                            l6758 0E08                            l6774 0E32  
                          l7654 09E6                            l7646 09D2                            l7638 09BC  
                          l7566 0926                            l7558 0908                            l7582 0942  
                          l6694 1C00                            l6942 0CA6                            l6926 0C3E  
                          l7718 03EA                            l6872 1470                            l6880 147C  
                          l7664 09F8                            l7592 095A                            l6960 0D20  
                          l6936 0C8E                            l7816 0522                            l7808 0508  
                          l7752 045E                            l7920 06D4                            l7904 069E  
                          l6786 0E5C                            l7594 0964                            l7498 088A  
                          l7850 0582                            l7762 0472                            l7922 06DA  
                          l7914 06B2                            l6868 146A                            l7676 0A0C  
                          l6964 0D2C                            l6948 0CF4                            l7852 0588  
                          l7828 0540                            l7748 0444                            l7684 038E  
                          l7846 056E                            l7766 0486                            l7694 03A6  
                          l7934 06F6                            l6888 1496                            l7688 039A  
                          l7872 05B6                            l7880 0660                            l6898 14AE  
                          l7866 05AE                            l7858 05A2                            l7954 071E  
                          l6988 1256                            l7892 067C                            l7798 04E6  
                          l7990 078A                            l7982 0776                            l7966 073C  
                          l7968 0742                            l7994 0794                 ?_calculate_dist 0055  
                          l7998 079C                            u3530 1636                            u6200 16E8  
                          u6220 1700                            u6300 1694                            u3590 177E  
                          u6240 171A                            u6320 16AE                            u7040 0FE4  
                          u6218 16EA                            u6260 1736                            u6340 16CA  
                          u6238 1702                            u6318 1696                            u7070 0FEE  
                          u7230 0A58                            u6280 167C                            u6258 171C  
                          u6338 16B0                            u8210 040A                            u8140 03CA  
                          u6278 1738                            u6358 16CC                            u7190 1080  
                          u8230 0428                            u6298 167E                            u6810 0C60  
                          u6910 12EE                            u7660 0266                            u8550 06EC  
                          u8730 1104                            u8811 11AE                            u8821 11BE  
                          u8670 07A8                            u8910 1388                            u8831 11CE  
                          u8681 07C0                            u8930 13A0                            u8860 1358  
                          u8890 1370                            _Rows 0044                            _data 0021  
                          _fila 0027                            _key2 003B                            _new2 1F92  
                          _main 12FC                            _time 00BA                            fsr1h 000FE2  
                          fsr2h 000FDA                            indf2 000FDF                            fsr1l 000FE1  
                          fsr2l 000FD9                            _rowi 0050                      _LcCursorOn 1DEE  
                          btemp 0079             _k@marqueeMenu$F2145 00C0                 __end_of_STRINGS 1F41  
           _k@marqueeMenu$F2198 0001                 __end_of_RSI_Low 0026                            prodh 000FF4  
                          prodl 000FF3                 __end_of_LcClear 1D2A                            start 0026  
               __end_of_CantaIR 1B32                   ??_InitMarquee 005B                   _MenuDoMarquee 0DB6  
                 _state_speaker 004A                   LcInit@columns 0067                DivideScore@score 0065  
                  ___param_bank 000000             __end_of_DivideScore 1A50                 __end_of_EusInit 1BF4  
                 ??_InitSpeaker 005C                 __end_of_JoyInit 1D56          motor_SMS@times_pressed 0070  
    _num_users3@queueUser$F2171 0018                     Espera@Timer 0062                           ?_main 0055  
               __end_of___awdiv 1670                 __end_of___awmod 17B0                   ??_TiInitTimer 005B  
                         _T0CON 000FD5                 ___awdiv@divisor 005D                           i2l189 1984  
                         _TABLE 1FE9                 ___awdiv@counter 005F                           _RCREG 000FAE  
                         _RCSTA 000FAB                           _TMR0H 000FD7                           _TMR0L 000FD6  
                         _SPBRG 000FAF                           _TRISC 000F94                           _TXREG 000FAD  
                         _TXSTA 000FAC                           _Timer 000F                           _chars 00C6  
                         _digit 004B                 __end_of_initSMS 1D90                           _key_2 0034  
                         _first 002E                           _hours 0013                           _score 1FF5  
                         _timer 0047                     _LcCursorOff 1DF8                           _start 1DE4  
                         _users 00D7                __end_of_RSI_High 1B64                           tablat 000FF5  
                 ??_TiResetTics 005B                           plusw1 000FE3                           plusw2 000FDB  
                         ttemp5 007A                           ttemp6 007D                           ttemp7 0081  
                         status 000FD8             _times_8@TData$F1114 003D                           wtemp8 007A  
                 place_char@row 0070                    __end_ofPL100 0C14                __end_of_LcGotoXY 157E  
                  __end_ofPL110 1AC0                    __end_ofPL102 0A34                    __end_ofPL120 0F4E  
                  __end_ofPL112 085C                    __end_ofPL104 0F3E                    __end_ofPL122 0A3A  
                  __end_ofPL114 038C                    __end_ofPL106 1994                    __end_ofPL124 0A42  
                  __end_ofPL116 0DB6                    __end_ofPL108 14EA                    __end_ofPL126 0A4A  
                  __end_ofPL118 0F46              __size_of_SMS_Reset 0010              __size_of_SMS_Print 000C  
                 ??__TiRSITimer 0055                  ?_MenuDoMarquee 006D                      _TiGetTimer 1AC0  
       EscriuPrimeraOrdre@ordre 005C                 __initialization 17B0              __size_of_CantaData 001C  
                  __end_of_new2 1FA7                    __end_of_main 13A6                __end_of_EusReset 1AB6  
             _m@queueUser$F2168 001A             __end_of_InitMarquee 1D40                __end_of_HourInit 1CAE  
                        ??_main 0079              __size_of_LcPutChar 0054             __end_of_InitSpeaker 1BD2  
                 __activetblptr 000002                ??_return_to_main 005B                   ??_UpDownUsers 006D  
                 ??_ScoreDigits 0074                          _ADCON0 000FC2                          _ADCON1 000FC1  
                        _ADCON2 000FC0             __end_of_TiInitTimer 1B14                          _ADRESH 000FC4  
              ___awdiv@dividend 005B                       ??_RSI_Low 005A                          ?_start 0055  
                     ??_LcClear 0067                       ??_CantaIR 005D                          i2l5102 196A  
                        i2l5106 1980                          i2l5098 1962                  LcGotoXY@Fisics 0068  
                LcGotoXY@Column 006A                    ?_scoreReduce 0063                   ??_WaitForBusy 0062  
            __size_of_TiGetTics 0026                     _DivideScore 1A36                     ?_LcCursorOn 0055  
                     ??_EusInit 005C                          _LcInit 1232                       ??_JoyInit 005B  
                        _Espera 1C34                    _LcGotoXY$976 0066                   ?_marqueeUsers 0055  
                        _RowAct 0042             __end_of_TiResetTics 1CBE                          _h_Tics 0011  
                        ___wmul 1B64                       ??___awdiv 005F                       ??___awmod 005F  
                    PrintData@f 006C                          _getKey 180A                    ?_motorMatrix 0055  
                  ?_motorEusart 0055                __end_of_initData 1C90                  _SMS_PrintReset 1D56  
              __end_of_initMenu 1DA2                          _column 0054                          _keyGot 0032  
                        _keyEus 001D             __end_of__TiRSITimer 198A                __end_of_initUser 1E0C  
                        clear_0 17D8                          clear_1 17EA                          clear_2 17F6  
              ___awdiv@quotient 0061                 ___awmod@divisor 005D            MenuDoMarquee@option3 006F  
          MenuDoMarquee@option4 0070                          _times3 0020                          isa$std 000001  
               ___awmod@counter 005F            MenuDoMarquee@sub_opt 0071                   _user_selected 004D  
   __size_of_EscriuPrimeraOrdre 007A                       ??_initSMS 005C              __size_of_PrintData 001E  
             __end_of_SMS_Reset 1DC2          __size_of_CantaPartAlta 006C               __end_of_SMS_Print 1DCE  
             _n@queueUser$F2169 0019                __end_of_showHour 1FE9                    __mediumconst 1E14  
                        tblptrh 000FF7                          tblptrl 000FF6                          tblptru 000FF8  
     marqueeUsers@times_pressed 0077               __end_of_CantaData 19EE               _marqueePlaceArrow 1CE4  
           __end_of_UpDownUsers 1DB2                      __accesstop 0080         __end_of__initialization 17FC  
           __end_of_ScoreDigits 18E4              ?_marqueePlaceArrow 0055                 ??_MenuDoMarquee 0072  
             __end_of_LcPutChar 18B4                   ___rparam_used 000001                   __end_of_TABLE 1FF5  
                ??_marqueeUsers 0072                     ?_TiGetTimer 0055                     _InitMarquee 1D2A  
           ??_marqueePlaceArrow 006C                  __pcstackCOMRAM 0055             __end_of_WaitForBusy 19D2  
     _option4@marqueeMenu$F1103 003F          __end_of_SMS_PrintReset 1D6A                    __pidataBANK0 1DDA  
                   _InitSpeaker 1BB0                   __end_of_score 1FFF                   __end_of_start 1DEE  
                    __end_ofPL2 0F22                      __end_ofPL4 0F36                      __end_ofPL6 02F0  
                    __end_ofPL8 02F8                       ?_RSI_High 0055               __end_of_TiGetTics 1BB0  
                   _TiInitTimer 1AEC             __size_of_LcCursorOn 000A                ??_calculate_dist 005B  
                     ?_LcGotoXY 0063       __end_of_marqueePlaceArrow 1CFC           __end_of_motorJoyStick 144C  
                       ??_start 005B                      __pbssBANK0 0080                   _current_score 00B2  
                     ?_EusReset 0055                     _TiResetTics 1CAE                       ?_HourInit 0055  
                       ?_LcInit 0067                   _CantaPartAlta 16DC              __size_of_menuReset 0014  
        PrintCouples@character1 0073          PrintCouples@character2 0074               __end_of_PrintData 1C72  
                       ?_Espera 0062                     __TiRSITimer 194C             motorUser@state_user 00C4  
               ?_SMS_PrintReset 0055                         ?___wmul 005B                         ?_getKey 0055  
                    ??_RSI_High 0056              __size_of_motor_SMS 0250              __size_of_motorMenu 01CE  
            __size_of_motorUser 0140                         LcInit@i 0069                     _UpDownUsers 1DA2  
                    ??_LcGotoXY 0064             PrintData@characters 006D                     _ScoreDigits 18B4  
           __size_of_TiGetTimer 001E                         _STRINGS 1E15                    ?_LcCursorOff 0055  
                       _RSI_Low 0018              __size_of_userReset 0018                         _LcClear 1D14  
                       _CantaIR 1B14                      ??_EusReset 005B                       ?_initData 0055  
                     ?_initMenu 0055                       ?_initUser 0055                     _WaitForBusy 1994  
                    ??_HourInit 005C             _i@marqueeMenu$F2144 0007                  ?_CantaPartAlta 0055  
           _i@marqueeMenu$F2197 0003                         _Columns 0043             _r@marqueeMenu$F2143 00C2  
           _r@marqueeMenu$F2196 00BE                         _EusInit 1BD2                   ?_PrintCouples 0070  
          __size_of_scoreReduce 004A                 __size_of_LcInit 00BE                         _JoyInit 1D40  
                       __Hparam 0000                 __size_of_Espera 0020                         __Lparam 0000  
                    _initMatrix 1CCA                         ___awdiv 15F8                         ___awmod 1748  
            motorJoyStick@state 0036                 __size_of___wmul 0026                 __size_of_getKey 0056  
    _timerSpeaker1@TTimer$F1504 002B                         __pcinit 17B0               __end_of_enterHour 1F92  
                       __ramtop 0200            __size_of_motorMatrix 017C            __size_of_motorEusart 02A8  
                       __ptext0 12FC                         __ptext1 0A4A                         __ptext2 1A66  
                       __ptext3 065E                         __ptext4 1B64                         __ptext5 1DA2  
                       __ptext6 038C                         __ptext7 1DE4                         __ptext8 180A  
                       __ptext9 1D56                       _T0CONbits 000FD5                         _key_SMS 002F  
                       _keyMenu 003A                         _keyHour 0023                       CantaIR@IR 005D  
                       _initSMS 1D7E                         _counter 0048                         _key_aux 0035  
                 ?_motorSpeaker 0055               __end_of_menuReset 1D7E                      _place_char 1BF4  
              ___awmod@dividend 005B                         _minutes 0015                         _seconds 004C  
          __end_of_marqueeUsers 0D4A                         _pointer 0051      __size_of_marqueePlaceArrow 0018  
                ScoreDigits@row 0073        marqueePlaceArrow@sub_opt 006C                 WaitForBusy@Busy 0062  
                __pintcode_body 1B3C                   ?_UpdateCursor 0055            end_of_initialization 17FC  
                    ??_initData 005B                      _selectChar 1A06                      ??_initMenu 005C  
                  ?_DivideScore 0065                      ??_initUser 005C         __size_of_CantaPartBaixa 006C  
                 __Lmediumconst 1E14                 TiGetTics@Handle 005F                         int_func 1B3C  
                  ??_LcCursorOn 0063                  ??_PrintCouples 0076               __end_of_motor_SMS 05DC  
             __end_of_motorMenu 0A2A               __end_of_motorUser 120A                   selectChar@row 005B  
               TiGetTics@actual 0060                         postdec1 000FE5                         postdec2 000FDD  
                       postinc0 000FEE                         postinc1 000FE6                         postinc2 000FDE  
                    _motor_data 065E                      _motor_hour 0A4A               __end_of_userReset 1D14  
                     _PORTBbits 000F81                       _PORTDbits 000F83                      _timer_user 0017  
                ??_motorSpeaker 0062              __end_of_LcCursorOn 1DF8                       _TRISAbits 000F92  
                     _TRISBbits 000F93                       _TRISCbits 000F94                       _TRISDbits 000F95  
                     _TRISEbits 000F96                      _state_data 0026                       _SMS_Reset 1DB2  
                ??_UpdateCursor 005B                       _SMS_Print 1DC2                 ??_CantaPartAlta 005B  
                     _CantaData 19D2                       _TXSTAbits 000FAC          _HighScore@EUSART$F2016 1FCB  
        _HighScore@EUSART$F2138 1FBC                    ??_TiGetTimer 005B                    ?_InitMarquee 0055  
                __end_of_LcInit 12F0                       _LcPutChar 1860                  __end_of_Espera 1C54  
                   ?_initMatrix 0055                motorMatrix@state 0045                    ?_InitSpeaker 0055  
    __end_of_EscriuPrimeraOrdre 15F8                  __end_of___wmul 1B8A                     _BAUDCONbits 000FB8  
                __end_of_getKey 1860      _timerSpeaker2@TTimer$F1505 002A                       _ColumnAct 0041  
                  ?_TiInitTimer 0055               __size_of_RSI_High 1B5C                     ?_place_char 0070  
                   __end_ofPL10 0308                     __end_ofPL20 061A                     __end_ofPL12 0818  
                   __end_ofPL30 063A                     __end_ofPL22 0842                     __end_ofPL14 0604  
                   __end_ofPL40 0336                     __end_ofPL32 031A                     __end_ofPL24 0628  
                   __end_ofPL16 082E                     __end_ofPL50 14E0                     __end_ofPL42 0342  
                   __end_ofPL34 032C                     __end_ofPL26 0D6E                     __end_ofPL18 12FC  
                   __end_ofPL60 0D7A                     __end_ofPL52 0C02                     __end_ofPL44 14CE  
                   __end_ofPL36 0854                     __end_ofPL28 121A                     __end_ofPL70 122A  
                   __end_ofPL62 0360                     __end_ofPL54 065E                     __end_ofPL46 064C  
                   __end_ofPL38 1AEC                     __end_ofPL80 1232                     __end_ofPL72 036C  
                   __end_ofPL64 1B3C                     __end_ofPL56 1A5C                     __end_ofPL48 0354  
                   __end_ofPL90 0DAE                     __end_ofPL82 1C14                     __end_ofPL74 0378  
                   __end_ofPL66 19FC                     __end_ofPL58 1CCA                     __end_ofPL92 18EE  
                   __end_ofPL84 0D96                     __end_ofPL76 0384                     __end_ofPL68 0D8A  
                   __end_ofPL94 18F8                     __end_ofPL86 0C0A                     __end_ofPL78 1A66  
                   __end_ofPL96 1902                     __end_ofPL88 0DA2                     __end_ofPL98 1A06  
           _cycles@TTimer$F1506 0029             start_initialization 17B0                       _TiGetTics 1B8A  
                   __end_of_SMS 1F79                     __end_of_new 1FBC                      ?_SMS_Reset 0055  
             __size_of_LcGotoXY 0094                      ?_SMS_Print 0055              __end_of_TiGetTimer 1ADE  
                   ?_selectChar 005B         __size_of_return_to_main 000C                    ?_TiResetTics 0055  
          __size_of_LcCursorOff 000A                      ?_CantaData 0055                ??_SMS_PrintReset 006B  
                      ??_LcInit 0068               __size_of_EusReset 0022           __end_of_MenuDoMarquee 0F0E  
                  ?__TiRSITimer 0055                        ??_Espera 0066               __size_of_HourInit 001E  
                    ?_LcPutChar 0055                        ??___wmul 005F                       _PrintData 1C54  
                   ?_motor_data 006E                        ??_getKey 005B                     ?_motor_hour 0055  
                   __pdataBANK0 00C6           __size_of_marqueeUsers 0136            __end_of_PrintCouples 1A94  
                   __pbssBIGRAM 00D7                    ?_UpDownUsers 0055                     __pbssCOMRAM 0001  
                 __pcstackBANK0 00D0                      ?_TiGetTics 005B             place_char@character 0071  
                  ?_ScoreDigits 0070                 UpDownUsers@fila 006D             __size_of_initMatrix 001A  
                      ?_RSI_Low 0055                        ?_LcClear 0055                        ?_CantaIR 0055  
                _CantaPartBaixa 1670                    ?_WaitForBusy 0055                        ?_EusInit 0055  
             __size_of_initData 001E            __end_of_motorSpeaker 14C4               __size_of_initMenu 0012  
                      ?_JoyInit 0055                PrintCouples@col1 0070                PrintCouples@col2 0071  
          __size_of_DivideScore 001A               __size_of_initUser 000A                PrintCouples@mode 0076  
           __size_of_place_char 0016                    _marqueeUsers 0C14                       __pintcode 0008  
                 __pmediumconst 1E14                      ?_PrintData 006C                        ?___awdiv 005B  
                      ?___awmod 005B            __end_of_UpdateCursor 1E12                 CantaPartBaixa@c 005C  
                     _direction 0049          __size_of_motorJoyStick 00A6                       _final_key 0033  
                   __pintcodelo 0018             __size_of_selectChar 0030                        ?_initSMS 0055  
                     _enterHour 1F79                selectChar@column 005E                     ??_SMS_Reset 005B  
                   ??_SMS_Print 006C                       _menuReset 1D6A          __end_of_CantaPartBaixa 16DC  
                __size_of_start 000A             __size_of_motor_data 01A8                   ??_scoreReduce 0065  
           __size_of_motor_hour 01A6                     ??_CantaData 005D                  ___wmul@product 005F  
                      _LATAbits 000F89         __size_of_calculate_dist 0020                        _LATBbits 000F8A  
                      _LATDbits 000F8C                        _LATEbits 000F8D             _j@marqueeMenu$F2142 0009  
           _j@marqueeMenu$F2195 0005                       getKey@key 005B                        _PIR1bits 000F9E  
                   ??_LcPutChar 006B                ScoreDigits@data2 0074                       _motor_SMS 038C  
                     _motorMenu 085C                        _RCONbits 000FD0                       _motorUser 10CA  
                     _timer_SMS 002D                       _timerHour 0022            __size_of_InitMarquee 0016  
                 ??_motorMatrix 0062                   ??_motorEusart 00D0            __size_of_InitSpeaker 0022  
                      _RSI_High 0008                       _startGame 004E                      _ADCON0bits 000FC2  
             ___wmul@multiplier 005B                       _userReset 1CFC                        Espera@ms 0064  
                      _LcGotoXY 14EA                     ??_TiGetTics 005D            __size_of_TiInitTimer 0028  
                    ?_menuReset 0055                     LcGotoXY@Row 0063                       copy_data0 17C4  
               ?_CantaPartBaixa 0055                   _motorJoyStick 13A6                  _return_to_main 1DCE  
              __size_of_RSI_Low 000E                        _EusReset 1A94                __size_of_LcClear 0016  
              __size_of_CantaIR 001E                        _HourInit 1C90                       initData@m 005B  
              scoreReduce@score 0063            __size_of_TiResetTics 0010                __size_of_EusInit 0022  
                      __Hrparam 0000             __end_of_scoreReduce 194C                __size_of_JoyInit 0016  
                      __Lrparam 0000                      ?_motor_SMS 0070                    ??_initMatrix 005C  
                    ?_motorMenu 0055                  motor_hour@mode 00D0                      ?_motorUser 0055  
            MenuDoMarquee@timer 006D            __size_of__TiRSITimer 003E                     ??_PrintData 006F  
         __size_of_PrintCouples 002E                __size_of___awdiv 0078                __size_of___awmod 0068  
                    ?_userReset 0055             __end_of_motorMatrix 10CA             __end_of_motorEusart 02D2  
                  ??_place_char 0071                __size_of_initSMS 0012                    PrintData@col 006F  
               PrintCouples@row 0072                 PrintCouples@yes 0075                    PrintData@yes 006E  
          __size_of_UpDownUsers 0010                        __ptext10 1DC2                        __ptext11 1E0C  
            _EscriuPrimeraOrdre 157E                        __ptext20 1A94                        __ptext12 1DEE  
                      __ptext21 0F4E                        __ptext13 10CA                        __ptext30 14EA  
                      __ptext22 13A6                        __ptext14 0C14                        __ptext31 19D2  
                      __ptext23 1C14                        __ptext15 1BF4                        __ptext40 1D7E  
                      __ptext32 1A36                        __ptext24 002A                        __ptext16 085C  
                      __ptext41 1DB2                        __ptext33 1902                        __ptext25 1A06  
                      __ptext17 0DB6                        __ptext50 1994                        __ptext42 1D90  
                      __ptext34 1748                        __ptext26 144C                        __ptext18 1CE4  
                      __ptext51 1C34                        __ptext43 1D6A                        __ptext35 15F8  
                      __ptext27 18B4                        __ptext19 1DF8                        __ptext60 1CAE  
                      __ptext52 1B8A                        __ptext44 1D2A                        __ptext36 1D14  
                      __ptext28 1C54                        __ptext61 1AC0                        __ptext53 157E  
                      __ptext45 1CCA                        __ptext37 1BB0                        __ptext29 1860  
                      __ptext54 1B14                        __ptext46 1C72                        __ptext38 1E02  
                      __ptext55 1670                        __ptext47 1DCE                        __ptext39 1CFC  
                      __ptext64 194C                        __ptext56 16DC                        __ptext48 1AEC  
                      __ptext57 1D40                        __ptext49 1232                        __ptext58 1C90  
                      __ptext59 1BD2          __end_of_return_to_main 1DDA                  ?_motorJoyStick 0055  
                CantaPartAlta@c 005C            __size_of_ScoreDigits 0030              __end_of_initMatrix 1CE4  
__end_of_HighScore@EUSART$F2016 1FDA  __end_of_HighScore@EUSART$F2138 1FCB           __size_of_motorSpeaker 0078  
                      _s_Timers 0080                    ??_selectChar 005C                        _initData 1C72  
                      _auxiliar 00A4                        _initMenu 1D90                        _key_data 0025  
                      _initUser 1E02             ?_EscriuPrimeraOrdre 0055                   __size_of_main 00AA  
                      _key_user 00C5           __end_of_CantaPartAlta 1748          _timer_menu@TData$F1116 003C  
                  getKey@key_on 002C                   CantaData@Data 005D                    _PrintCouples 1A66  
          __size_of_WaitForBusy 003E           __size_of_UpdateCursor 0006                 ScoreDigits@col1 0070  
               ScoreDigits@col2 0071                 ScoreDigits@col3 0072              __end_of_place_char 1C0A  
                      isa$xinst 000000                        _showHour 1FDA                        _num_user 0031  
                      int$flags 0079                    ??_motor_data 0070                        _stateSMS 0030  
                      _stateEus 001C                    ??_motor_hour 0077            ??_EscriuPrimeraOrdre 005B  
                    LcInit@rows 0068              __end_of_selectChar 1A36           _stateHour@TData$F1717 0024  
                    _INTCONbits 000FF2                    _motorSpeaker 144C                   _times_pressed 004F  
                   _seconds_aux 001F                 ?_return_to_main 0055                     ??_menuReset 005C  
                 ??_LcCursorOff 0063                    _UpdateCursor 1E0C                        intlevel1 0000  
                      intlevel2 0000                     _scoreReduce 1902              __end_of_motor_data 0806  
                _calculate_dist 1C14              __end_of_motor_hour 0BF0                      LcPutChar@c 006B  
                   ??_motor_SMS 0072                     ??_motorMenu 0074       _option3@marqueeMenu$F1102 0040  
                   ??_motorUser 00D0                     _motorMatrix 0F4E                     _motorEusart 002A  
                SMS_Print@chari 006C       _sub_opt@marqueeMenu$F1104 003E                     ??_userReset 005C  
                   _timerEusart 001E          __size_of_MenuDoMarquee 0158                 ??_motorJoyStick 005D  
         _num_users@TData$F2161 001B           _num_users@TData$F1605 0028          __end_of_calculate_dist 1C34  
           motorMenu@state_menu 0039                   ??_DivideScore 0067             __end_of_LcCursorOff 1E02  
