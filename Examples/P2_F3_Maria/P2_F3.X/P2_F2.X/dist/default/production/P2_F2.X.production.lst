

Microchip MPLAB XC8 Assembler V2.36 build 20220127204148 
                                                                                               Thu May 26 13:44:48 2022

Microchip MPLAB XC8 C Compiler v2.36 (Pro license) build 20220127204148 Og9s 
     1                           	processor	18F4321
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	plic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     8                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     9                           	psect	nvCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    10                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    11                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    12                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    13                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    14                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    15                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    16                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    17                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    18                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    19                           	psect	text0,global,reloc=2,class=CODE,delta=1
    20                           	psect	text1,global,reloc=2,class=CODE,delta=1
    21                           	psect	text2,global,reloc=2,class=CODE,delta=1
    22                           	psect	text3,global,reloc=2,class=CODE,delta=1
    23                           	psect	text4,global,reloc=2,class=CODE,delta=1
    24                           	psect	text5,global,reloc=2,class=CODE,delta=1
    25                           	psect	text6,global,reloc=2,class=CODE,delta=1
    26                           	psect	text7,global,reloc=2,class=CODE,delta=1
    27                           	psect	text8,global,reloc=2,class=CODE,delta=1
    28                           	psect	text9,global,reloc=2,class=CODE,delta=1
    29                           	psect	text10,global,reloc=2,class=CODE,delta=1
    30                           	psect	text11,global,reloc=2,class=CODE,delta=1
    31                           	psect	text12,global,reloc=2,class=CODE,delta=1
    32                           	psect	text13,global,reloc=2,class=CODE,delta=1
    33                           	psect	text14,global,reloc=2,class=CODE,delta=1
    34                           	psect	text15,global,reloc=2,class=CODE,delta=1
    35                           	psect	text16,global,reloc=2,class=CODE,delta=1
    36                           	psect	text17,global,reloc=2,class=CODE,delta=1
    37                           	psect	text18,global,reloc=2,class=CODE,delta=1
    38                           	psect	text19,global,reloc=2,class=CODE,delta=1
    39                           	psect	text20,global,reloc=2,class=CODE,delta=1
    40                           	psect	text21,global,reloc=2,class=CODE,delta=1
    41                           	psect	text22,global,reloc=2,class=CODE,delta=1
    42                           	psect	text23,global,reloc=2,class=CODE,delta=1
    43                           	psect	text24,global,reloc=2,class=CODE,delta=1
    44                           	psect	text25,global,reloc=2,class=CODE,delta=1
    45                           	psect	text26,global,reloc=2,class=CODE,delta=1
    46                           	psect	text27,global,reloc=2,class=CODE,delta=1
    47                           	psect	text28,global,reloc=2,class=CODE,delta=1
    48                           	psect	text29,global,reloc=2,class=CODE,delta=1
    49                           	psect	text30,global,reloc=2,class=CODE,delta=1
    50                           	psect	text31,global,reloc=2,class=CODE,delta=1
    51                           	psect	text32,global,reloc=2,class=CODE,delta=1
    52                           	psect	text33,global,reloc=2,class=CODE,delta=1
    53                           	psect	text34,global,reloc=2,class=CODE,delta=1
    54                           	psect	text35,global,reloc=2,class=CODE,delta=1
    55                           	psect	text36,global,reloc=2,class=CODE,delta=1
    56                           	psect	text37,global,reloc=2,class=CODE,delta=1,group=1
    57                           	psect	text38,global,reloc=2,class=CODE,delta=1,group=1
    58                           	psect	text39,global,reloc=2,class=CODE,delta=1
    59                           	psect	text40,global,reloc=2,class=CODE,delta=1
    60                           	psect	text41,global,reloc=2,class=CODE,delta=1
    61                           	psect	text42,global,reloc=2,class=CODE,delta=1
    62                           	psect	text43,global,reloc=2,class=CODE,delta=1
    63                           	psect	text44,global,reloc=2,class=CODE,delta=1
    64                           	psect	text45,global,reloc=2,class=CODE,delta=1
    65                           	psect	text46,global,reloc=2,class=CODE,delta=1
    66                           	psect	text47,global,reloc=2,class=CODE,delta=1
    67                           	psect	text48,global,reloc=2,class=CODE,delta=1
    68                           	psect	text49,global,reloc=2,class=CODE,delta=1
    69                           	psect	text50,global,reloc=2,class=CODE,delta=1
    70                           	psect	text51,global,reloc=2,class=CODE,delta=1
    71                           	psect	text52,global,reloc=2,class=CODE,delta=1
    72                           	psect	text53,global,reloc=2,class=CODE,delta=1
    73                           	psect	text54,global,reloc=2,class=CODE,delta=1
    74                           	psect	text55,global,reloc=2,class=CODE,delta=1
    75                           	psect	text56,global,reloc=2,class=CODE,delta=1
    76                           	psect	text57,global,reloc=2,class=CODE,delta=1
    77                           	psect	text58,global,reloc=2,class=CODE,delta=1
    78                           	psect	text59,global,reloc=2,class=CODE,delta=1
    79                           	psect	text60,global,reloc=2,class=CODE,delta=1
    80                           	psect	text61,global,reloc=2,class=CODE,delta=1
    81                           	psect	text62,global,reloc=2,class=CODE,delta=1
    82                           	psect	text63,global,reloc=2,class=CODE,delta=1
    83                           	psect	text64,global,reloc=2,class=CODE,delta=1
    84                           	psect	text65,global,reloc=2,class=CODE,delta=1
    85                           	psect	text66,global,reloc=2,class=CODE,delta=1
    86                           	psect	text67,global,reloc=2,class=CODE,delta=1
    87                           	psect	text68,global,reloc=2,class=CODE,delta=1
    88                           	psect	text69,global,reloc=2,class=CODE,delta=1
    89                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    90                           	psect	text71,global,reloc=2,class=CODE,delta=1
    91                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    92                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    93                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    94                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    95                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    96                           	psect	pa_nodes0,global,class=CODE,delta=1
    97  0000                     
    98                           ; Version 2.36
    99                           ; Generated 28/01/2022 GMT
   100                           ; 
   101                           ; Copyright Â© 2022, Microchip Technology Inc. and its subsidiaries ("Microchip")
   102                           ; All rights reserved.
   103                           ; 
   104                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   105                           ; 
   106                           ; Redistribution and use in source and binary forms, with or without modification, are
   107                           ; permitted provided that the following conditions are met:
   108                           ; 
   109                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   110                           ;        conditions and the following disclaimer.
   111                           ; 
   112                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   113                           ;        of conditions and the following disclaimer in the documentation and/or other
   114                           ;        materials provided with the distribution. Publication is not required when
   115                           ;        this file is used in an embedded application.
   116                           ; 
   117                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   118                           ;        software without specific prior written permission.
   119                           ; 
   120                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   121                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   122                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   123                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   124                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   125                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   126                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   127                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   128                           ; 
   129                           ; 
   130                           ; Code-generator required, PIC18F4321 Definitions
   131                           ; 
   132                           ; SFR Addresses
   133  0000                     
   134                           	psect	idataCOMRAM
   135  001FEE                     __pidataCOMRAM:
   136                           	callstack 0
   137                           
   138                           ;initializer for _enterPasswordString@Menu$F553
   139  001FEE  50                 	db	80
   140  001FEF  53                 	db	83
   141  001FF0  57                 	db	87
   142  001FF1  44                 	db	68
   143  001FF2  3A                 	db	58
   144                           
   145                           ;initializer for _enterUserString@Menu$F552
   146  001FF3  55                 	db	85
   147  001FF4  53                 	db	83
   148  001FF5  45                 	db	69
   149  001FF6  52                 	db	82
   150  001FF7  3A                 	db	58
   151                           
   152                           ;initializer for _menuStrings@Menu$F546
   153  001FF8  7F                 	db	low STR_1
   154  001FF9  90                 	db	low STR_2
   155  001FFA  3F                 	db	low STR_3
   156  001FFB  6E                 	db	low STR_4
   157  001FFC  5D                 	db	low STR_5
   158                           
   159                           ;initializer for _byeString@Menu$F559
   160  001FFD  42                 	db	66
   161  001FFE  59                 	db	89
   162  001FFF  45                 	db	69
   163                           
   164                           	psect	idataBANK0
   165  000078                     __pidataBANK0:
   166                           	callstack 0
   167                           
   168                           ;initializer for _accessMenuString1@Menu$F544
   169  000078  31                 	db	49
   170  000079  2E                 	db	46
   171  00007A  20                 	db	32
   172  00007B  4C                 	db	76
   173  00007C  4F                 	db	79
   174  00007D  47                 	db	71
   175  00007E  49                 	db	73
   176  00007F  4E                 	db	78
   177                           
   178                           ;initializer for _errorsString@Menu$F557
   179  000080  45                 	db	69
   180  000081  52                 	db	82
   181  000082  52                 	db	82
   182  000083  4F                 	db	79
   183  000084  52                 	db	82
   184  000085  53                 	db	83
   185  000086  3A                 	db	58
   186                           
   187                           ;initializer for _scoreString@Menu$F556
   188  000087  53                 	db	83
   189  000088  43                 	db	67
   190  000089  4F                 	db	79
   191  00008A  52                 	db	82
   192  00008B  45                 	db	69
   193  00008C  3A                 	db	58
   194                           
   195                           	psect	idataBANK1
   196  001D2A                     __pidataBANK1:
   197                           	callstack 0
   198                           
   199                           ;initializer for _timeRemainingString@Menu$F554
   200  001D2A  54                 	db	84
   201  001D2B  49                 	db	73
   202  001D2C  4D                 	db	77
   203  001D2D  45                 	db	69
   204  001D2E  20                 	db	32
   205  001D2F  52                 	db	82
   206  001D30  45                 	db	69
   207  001D31  4D                 	db	77
   208  001D32  41                 	db	65
   209  001D33  49                 	db	73
   210  001D34  4E                 	db	78
   211  001D35  49                 	db	73
   212  001D36  4E                 	db	78
   213  001D37  47                 	db	71
   214  001D38  3A                 	db	58
   215                           
   216                           ;initializer for _currentTimeString@Menu$F560
   217  001D39  43                 	db	67
   218  001D3A  55                 	db	85
   219  001D3B  52                 	db	82
   220  001D3C  52                 	db	82
   221  001D3D  45                 	db	69
   222  001D3E  4E                 	db	78
   223  001D3F  54                 	db	84
   224  001D40  20                 	db	32
   225  001D41  54                 	db	84
   226  001D42  49                 	db	73
   227  001D43  4D                 	db	77
   228  001D44  45                 	db	69
   229  001D45  3A                 	db	58
   230                           
   231                           ;initializer for _modifyTimeString@Menu$F558
   232  001D46  4D                 	db	77
   233  001D47  4F                 	db	79
   234  001D48  44                 	db	68
   235  001D49  49                 	db	73
   236  001D4A  46                 	db	70
   237  001D4B  59                 	db	89
   238  001D4C  20                 	db	32
   239  001D4D  54                 	db	84
   240  001D4E  49                 	db	73
   241  001D4F  4D                 	db	77
   242  001D50  45                 	db	69
   243  001D51  3A                 	db	58
   244                           
   245                           ;initializer for _accessMenuString2@Menu$F545
   246  001D52  32                 	db	50
   247  001D53  2E                 	db	46
   248  001D54  20                 	db	32
   249  001D55  52                 	db	82
   250  001D56  45                 	db	69
   251  001D57  47                 	db	71
   252  001D58  49                 	db	73
   253  001D59  53                 	db	83
   254  001D5A  54                 	db	84
   255  001D5B  45                 	db	69
   256  001D5C  52                 	db	82
   257                           
   258                           ;initializer for _timeLeftString@Menu$F555
   259  001D5D  54                 	db	84
   260  001D5E  49                 	db	73
   261  001D5F  4D                 	db	77
   262  001D60  45                 	db	69
   263  001D61  20                 	db	32
   264  001D62  4C                 	db	76
   265  001D63  45                 	db	69
   266  001D64  46                 	db	70
   267  001D65  54                 	db	84
   268  001D66  3A                 	db	58
   269                           
   270                           	psect	smallconst
   271  000200                     __psmallconst:
   272                           	callstack 0
   273  000200  00                 	db	0
   274  000201                     _textSMS:
   275                           	callstack 0
   276  000201  30                 	db	48
   277  000202  20                 	db	32
   278  000203  25                 	db	37
   279  000204  25                 	db	37
   280  000205  25                 	db	37
   281  000206  31                 	db	49
   282  000207  25                 	db	37
   283  000208  25                 	db	37
   284  000209  25                 	db	37
   285  00020A  25                 	db	37
   286  00020B  41                 	db	65
   287  00020C  42                 	db	66
   288  00020D  43                 	db	67
   289  00020E  32                 	db	50
   290  00020F  25                 	db	37
   291  000210  44                 	db	68
   292  000211  45                 	db	69
   293  000212  46                 	db	70
   294  000213  33                 	db	51
   295  000214  25                 	db	37
   296  000215  47                 	db	71
   297  000216  48                 	db	72
   298  000217  49                 	db	73
   299  000218  34                 	db	52
   300  000219  25                 	db	37
   301  00021A  4A                 	db	74
   302  00021B  4B                 	db	75
   303  00021C  4C                 	db	76
   304  00021D  35                 	db	53
   305  00021E  25                 	db	37
   306  00021F  4D                 	db	77
   307  000220  4E                 	db	78
   308  000221  30                 	db	48
   309  000222  36                 	db	54
   310  000223  25                 	db	37
   311  000224  50                 	db	80
   312  000225  51                 	db	81
   313  000226  52                 	db	82
   314  000227  53                 	db	83
   315  000228  37                 	db	55
   316  000229  54                 	db	84
   317  00022A  55                 	db	85
   318  00022B  56                 	db	86
   319  00022C  38                 	db	56
   320  00022D  25                 	db	37
   321  00022E  57                 	db	87
   322  00022F  58                 	db	88
   323  000230  59                 	db	89
   324  000231  5A                 	db	90
   325  000232  39                 	db	57
   326  000233                     __end_of_textSMS:
   327                           	callstack 0
   328  000233                     _text:
   329                           	callstack 0
   330  000233  01                 	db	1
   331  000234  02                 	db	2
   332  000235  03                 	db	3
   333  000236  2A                 	db	42
   334  000237  00                 	db	0
   335  000238  23                 	db	35
   336  000239  07                 	db	7
   337  00023A  08                 	db	8
   338  00023B  09                 	db	9
   339  00023C  04                 	db	4
   340  00023D  05                 	db	5
   341  00023E  06                 	db	6
   342  00023F                     __end_of_text:
   343                           	callstack 0
   344  0000                     _EECON2	set	4007
   345  0000                     _TMR0L	set	4054
   346  0000                     _TMR0H	set	4055
   347  0000                     _LATCbits	set	3979
   348  0000                     _LATBbits	set	3978
   349  0000                     _LATDbits	set	3980
   350  0000                     _RCREG	set	4014
   351  0000                     _TXREG	set	4013
   352  0000                     _SPBRG	set	4015
   353  0000                     _SPBRGH	set	4016
   354  0000                     _BAUDCONbits	set	4024
   355  00023F                     STR_3:
   356  00023F  33                 	db	51	;'3'
   357  000240  2E                 	db	46
   358  000241  20                 	db	32
   359  000242  53                 	db	83	;'S'
   360  000243  68                 	db	104	;'h'
   361  000244  6F                 	db	111	;'o'
   362  000245  77                 	db	119	;'w'
   363  000246  20                 	db	32
   364  000247  67                 	db	103	;'g'
   365  000248  65                 	db	101	;'e'
   366  000249  6E                 	db	110	;'n'
   367  00024A  65                 	db	101	;'e'
   368  00024B  72                 	db	114	;'r'
   369  00024C  61                 	db	97	;'a'
   370  00024D  6C                 	db	108	;'l'
   371  00024E  20                 	db	32
   372  00024F  54                 	db	84	;'T'
   373  000250  6F                 	db	111	;'o'
   374  000251  70                 	db	112	;'p'
   375  000252  20                 	db	32
   376  000253  35                 	db	53	;'5'
   377  000254  20                 	db	32
   378  000255  73                 	db	115	;'s'
   379  000256  63                 	db	99	;'c'
   380  000257  6F                 	db	111	;'o'
   381  000258  72                 	db	114	;'r'
   382  000259  65                 	db	101	;'e'
   383  00025A  73                 	db	115	;'s'
   384  00025B  20                 	db	32
   385  00025C  00                 	db	0
   386  00025D                     STR_5:
   387  00025D  35                 	db	53	;'5'
   388  00025E  2E                 	db	46
   389  00025F  20                 	db	32
   390  000260  4C                 	db	76	;'L'
   391  000261  6F                 	db	111	;'o'
   392  000262  67                 	db	103	;'g'
   393  000263  6F                 	db	111	;'o'
   394  000264  75                 	db	117	;'u'
   395  000265  74                 	db	116	;'t'
   396  000266  20                 	db	32
   397  000267  20                 	db	32
   398  000268  20                 	db	32
   399  000269  20                 	db	32
   400  00026A  20                 	db	32
   401  00026B  20                 	db	32
   402  00026C  20                 	db	32
   403  00026D  00                 	db	0
   404  00026E                     STR_4:
   405  00026E  34                 	db	52	;'4'
   406  00026F  2E                 	db	46
   407  000270  20                 	db	32
   408  000271  53                 	db	83	;'S'
   409  000272  68                 	db	104	;'h'
   410  000273  6F                 	db	111	;'o'
   411  000274  77                 	db	119	;'w'
   412  000275  20                 	db	32
   413  000276  74                 	db	116	;'t'
   414  000277  69                 	db	105	;'i'
   415  000278  6D                 	db	109	;'m'
   416  000279  65                 	db	101	;'e'
   417  00027A  20                 	db	32
   418  00027B  20                 	db	32
   419  00027C  20                 	db	32
   420  00027D  20                 	db	32
   421  00027E  00                 	db	0
   422  00027F                     STR_1:
   423  00027F  31                 	db	49	;'1'
   424  000280  2E                 	db	46
   425  000281  20                 	db	32
   426  000282  50                 	db	80	;'P'
   427  000283  6C                 	db	108	;'l'
   428  000284  61                 	db	97	;'a'
   429  000285  79                 	db	121	;'y'
   430  000286  20                 	db	32
   431  000287  61                 	db	97	;'a'
   432  000288  20                 	db	32
   433  000289  47                 	db	71	;'G'
   434  00028A  61                 	db	97	;'a'
   435  00028B  6D                 	db	109	;'m'
   436  00028C  65                 	db	101	;'e'
   437  00028D  20                 	db	32
   438  00028E  20                 	db	32
   439  00028F  00                 	db	0
   440  000290                     STR_2:
   441  000290  32                 	db	50	;'2'
   442  000291  2E                 	db	46
   443  000292  20                 	db	32
   444  000293  4D                 	db	77	;'M'
   445  000294  6F                 	db	111	;'o'
   446  000295  64                 	db	100	;'d'
   447  000296  69                 	db	105	;'i'
   448  000297  66                 	db	102	;'f'
   449  000298  79                 	db	121	;'y'
   450  000299  20                 	db	32
   451  00029A  74                 	db	116	;'t'
   452  00029B  69                 	db	105	;'i'
   453  00029C  6D                 	db	109	;'m'
   454  00029D  65                 	db	101	;'e'
   455  00029E  20                 	db	32
   456  00029F  20                 	db	32
   457  0002A0  00                 	db	0
   458  0002A1  00                 	db	0	; dummy byte at the end
   459  0000                     
   460                           	psect	nvCOMRAM
   461  000079                     __pnvCOMRAM:
   462                           	callstack 0
   463  000079                     _timerGeneral:
   464                           	callstack 0
   465  000079                     	ds	1
   466  0000                     _T0CONbits	set	4053
   467  0000                     _TXSTAbits	set	4012
   468  0000                     _ADCON0bits	set	4034
   469  0000                     _PORTBbits	set	3969
   470  0000                     _LATAbits	set	3977
   471  0000                     _TRISAbits	set	3986
   472  0000                     _TRISBbits	set	3987
   473  0000                     _TRISDbits	set	3989
   474  0000                     _PIR1bits	set	3998
   475  0000                     _TRISCbits	set	3988
   476  0000                     _RCSTA	set	4011
   477  0000                     _TXSTA	set	4012
   478  0000                     _ADCON2	set	4032
   479  0000                     _ADCON1	set	4033
   480  0000                     _ADCON0	set	4034
   481  0000                     _PORTCbits	set	3970
   482  0000                     _ADRESH	set	4036
   483  0000                     _RCONbits	set	4048
   484  0000                     _INTCON2bits	set	4081
   485  0000                     _EECON1bits	set	4006
   486  0000                     _EEDATA	set	4008
   487  0000                     _EEADR	set	4009
   488  0000                     _INTCONbits	set	4082
   489  0000                     _T0CON	set	4053
   490                           
   491                           ; #config settings
   492                           
   493                           	psect	cinit
   494  00178C                     __pcinit:
   495                           	callstack 0
   496  00178C                     start_initialization:
   497                           	callstack 0
   498  00178C                     __initialization:
   499                           	callstack 0
   500                           
   501                           ; Initialize objects allocated to BANK1 (61 bytes)
   502                           ; load TBLPTR registers with __pidataBANK1
   503  00178C  0E2A               	movlw	low __pidataBANK1
   504  00178E  6EF6               	movwf	tblptrl,c
   505  001790  0E1D               	movlw	high __pidataBANK1
   506  001792  6EF7               	movwf	tblptrh,c
   507  001794  0E00               	movlw	low (__pidataBANK1 shr (0+16))
   508  001796  6EF8               	movwf	tblptru,c
   509  001798  EE01  F000         	lfsr	0,__pdataBANK1
   510  00179C  EE10 F03D          	lfsr	1,61
   511  0017A0                     copy_data0:
   512  0017A0  0009               	tblrd		*+
   513  0017A2  CFF5 FFEE          	movff	tablat,postinc0
   514  0017A6  50E5               	movf	postdec1,w,c
   515  0017A8  50E1               	movf	fsr1l,w,c
   516  0017AA  E1FA               	bnz	copy_data0
   517                           
   518                           ; Initialize objects allocated to BANK0 (21 bytes)
   519                           ; load TBLPTR registers with __pidataBANK0
   520  0017AC  0E78               	movlw	low __pidataBANK0
   521  0017AE  6EF6               	movwf	tblptrl,c
   522  0017B0  0E00               	movlw	high __pidataBANK0
   523  0017B2  6EF7               	movwf	tblptrh,c
   524  0017B4  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   525  0017B6  6EF8               	movwf	tblptru,c
   526  0017B8  EE00  F0E3         	lfsr	0,__pdataBANK0
   527  0017BC  EE10 F015          	lfsr	1,21
   528  0017C0                     copy_data1:
   529  0017C0  0009               	tblrd		*+
   530  0017C2  CFF5 FFEE          	movff	tablat,postinc0
   531  0017C6  50E5               	movf	postdec1,w,c
   532  0017C8  50E1               	movf	fsr1l,w,c
   533  0017CA  E1FA               	bnz	copy_data1
   534                           
   535                           ; Initialize objects allocated to COMRAM (18 bytes)
   536                           ; load TBLPTR registers with __pidataCOMRAM
   537  0017CC  0EEE               	movlw	low __pidataCOMRAM
   538  0017CE  6EF6               	movwf	tblptrl,c
   539  0017D0  0E1F               	movlw	high __pidataCOMRAM
   540  0017D2  6EF7               	movwf	tblptrh,c
   541  0017D4  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   542  0017D6  6EF8               	movwf	tblptru,c
   543  0017D8  EE00  F067         	lfsr	0,__pdataCOMRAM
   544  0017DC  EE10 F012          	lfsr	1,18
   545  0017E0                     copy_data2:
   546  0017E0  0009               	tblrd		*+
   547  0017E2  CFF5 FFEE          	movff	tablat,postinc0
   548  0017E6  50E5               	movf	postdec1,w,c
   549  0017E8  50E1               	movf	fsr1l,w,c
   550  0017EA  E1FA               	bnz	copy_data2
   551                           
   552                           ; Clear objects allocated to BANK0 (99 bytes)
   553  0017EC  EE00  F080         	lfsr	0,__pbssBANK0
   554  0017F0  0E63               	movlw	99
   555  0017F2                     clear_0:
   556  0017F2  6AEE               	clrf	postinc0,c
   557  0017F4  06E8               	decf	wreg,f,c
   558  0017F6  E1FD               	bnz	clear_0
   559                           
   560                           ; Clear objects allocated to COMRAM (79 bytes)
   561  0017F8  EE00  F001         	lfsr	0,__pbssCOMRAM
   562  0017FC  0E4F               	movlw	79
   563  0017FE                     clear_1:
   564  0017FE  6AEE               	clrf	postinc0,c
   565  001800  06E8               	decf	wreg,f,c
   566  001802  E1FD               	bnz	clear_1
   567  001804                     end_of_initialization:
   568                           	callstack 0
   569  001804                     __end_of__initialization:
   570                           	callstack 0
   571  001804  907A               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   572  001806  927A               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   573  001808  0E00               	movlw	low (__Lmediumconst shr (0+16))
   574  00180A  6EF8               	movwf	tblptru,c
   575  00180C  0100               	movlb	0
   576  00180E  EFFF  F00C         	goto	_main	;jump to C main() function
   577                           
   578                           	psect	bssCOMRAM
   579  000001                     __pbssCOMRAM:
   580                           	callstack 0
   581  000001                     _topScores:
   582                           	callstack 0
   583  000001                     	ds	10
   584  00000B                     _timerMusic:
   585                           	callstack 0
   586  00000B                     	ds	2
   587  00000D                     _topScore:
   588                           	callstack 0
   589  00000D                     	ds	2
   590  00000F                     _h_Tics:
   591                           	callstack 0
   592  00000F                     	ds	2
   593  000011                     _error:
   594                           	callstack 0
   595  000011                     	ds	2
   596  000013                     _stateRX:
   597                           	callstack 0
   598  000013                     	ds	1
   599  000014                     _receive:
   600                           	callstack 0
   601  000014                     	ds	1
   602  000015                     _pointerRX:
   603                           	callstack 0
   604  000015                     	ds	1
   605  000016                     _pointer@TX$F2011:
   606                           	callstack 0
   607  000016                     	ds	1
   608  000017                     _toSend:
   609                           	callstack 0
   610  000017                     	ds	1
   611  000018                     _stateTX:
   612                           	callstack 0
   613  000018                     	ds	1
   614  000019                     _timerRX:
   615                           	callstack 0
   616  000019                     	ds	1
   617  00001A                     _timerTX:
   618                           	callstack 0
   619  00001A                     	ds	1
   620  00001B                     _pointer@Music$F1878:
   621                           	callstack 0
   622  00001B                     	ds	1
   623  00001C                     _note:
   624                           	callstack 0
   625  00001C                     	ds	1
   626  00001D                     _musicState:
   627                           	callstack 0
   628  00001D                     	ds	1
   629  00001E                     _timerNote:
   630                           	callstack 0
   631  00001E                     	ds	1
   632  00001F                     _numAddress:
   633                           	callstack 0
   634  00001F                     	ds	1
   635  000020                     _aux@EEPROM$F1757:
   636                           	callstack 0
   637  000020                     	ds	1
   638  000021                     _eepromState:
   639                           	callstack 0
   640  000021                     	ds	1
   641  000022                     _doneCharging:
   642                           	callstack 0
   643  000022                     	ds	1
   644  000023                     _pointerEeprom:
   645                           	callstack 0
   646  000023                     	ds	1
   647  000024                     _pointer@EEPROM$F1753:
   648                           	callstack 0
   649  000024                     	ds	1
   650  000025                     _show:
   651                           	callstack 0
   652  000025                     	ds	1
   653  000026                     _seconds@Timer$F1634:
   654                           	callstack 0
   655  000026                     	ds	1
   656  000027                     _minutes@Timer$F1633:
   657                           	callstack 0
   658  000027                     	ds	1
   659  000028                     _timerState:
   660                           	callstack 0
   661  000028                     	ds	1
   662  000029                     _timerPic:
   663                           	callstack 0
   664  000029                     	ds	1
   665  00002A                     _counter:
   666                           	callstack 0
   667  00002A                     	ds	1
   668  00002B                     _Timer:
   669                           	callstack 0
   670  00002B                     	ds	1
   671  00002C                     _ColumnAct:
   672                           	callstack 0
   673  00002C                     	ds	1
   674  00002D                     _RowAct:
   675                           	callstack 0
   676  00002D                     	ds	1
   677  00002E                     _Columns:
   678                           	callstack 0
   679  00002E                     	ds	1
   680  00002F                     _Rows:
   681                           	callstack 0
   682  00002F                     	ds	1
   683  000030                     _SMS:
   684                           	callstack 0
   685  000030                     	ds	1
   686  000031                     _valueOld:
   687                           	callstack 0
   688  000031                     	ds	1
   689  000032                     _value:
   690                           	callstack 0
   691  000032                     	ds	1
   692  000033                     _rotating:
   693                           	callstack 0
   694  000033                     	ds	1
   695  000034                     _press:
   696                           	callstack 0
   697  000034                     	ds	1
   698  000035                     _cols:
   699                           	callstack 0
   700  000035                     	ds	1
   701  000036                     _rows:
   702                           	callstack 0
   703  000036                     	ds	1
   704  000037                     _keypadState:
   705                           	callstack 0
   706  000037                     	ds	1
   707  000038                     _timerKeypad:
   708                           	callstack 0
   709  000038                     	ds	1
   710  000039                     _timerJoystick:
   711                           	callstack 0
   712  000039                     	ds	1
   713  00003A                     _centre:
   714                           	callstack 0
   715  00003A                     	ds	1
   716  00003B                     _state:
   717                           	callstack 0
   718  00003B                     	ds	1
   719  00003C                     _positionJoystick@Joystick$F704:
   720                           	callstack 0
   721  00003C                     	ds	1
   722  00003D                     _gameON:
   723                           	callstack 0
   724  00003D                     	ds	1
   725  00003E                     _prevMaxScore:
   726                           	callstack 0
   727  00003E                     	ds	1
   728  00003F                     _prevMaxIndex:
   729                           	callstack 0
   730  00003F                     	ds	1
   731  000040                     _aux:
   732                           	callstack 0
   733  000040                     	ds	1
   734  000041                     _timerMenu:
   735                           	callstack 0
   736  000041                     	ds	1
   737  000042                     _secondsCountdown:
   738                           	callstack 0
   739  000042                     	ds	1
   740  000043                     _minutesCountdown:
   741                           	callstack 0
   742  000043                     	ds	1
   743  000044                     _seconds:
   744                           	callstack 0
   745  000044                     	ds	1
   746  000045                     _minutes:
   747                           	callstack 0
   748  000045                     	ds	1
   749  000046                     _keyValue:
   750                           	callstack 0
   751  000046                     	ds	1
   752  000047                     _option:
   753                           	callstack 0
   754  000047                     	ds	1
   755  000048                     _auxPU:
   756                           	callstack 0
   757  000048                     	ds	1
   758  000049                     _pointerUser:
   759                           	callstack 0
   760  000049                     	ds	1
   761  00004A                     _auxPM:
   762                           	callstack 0
   763  00004A                     	ds	1
   764  00004B                     _pointerMarquee:
   765                           	callstack 0
   766  00004B                     	ds	1
   767  00004C                     _pointer:
   768                           	callstack 0
   769  00004C                     	ds	1
   770  00004D                     _menuState:
   771                           	callstack 0
   772  00004D                     	ds	1
   773  00004E                     _numScores@Data$F564:
   774                           	callstack 0
   775  00004E                     	ds	1
   776  00004F                     _numUsers@Data$F563:
   777                           	callstack 0
   778  00004F                     	ds	1
   779                           
   780                           	psect	dataCOMRAM
   781  000067                     __pdataCOMRAM:
   782                           	callstack 0
   783  000067                     _enterPasswordString@Menu$F553:
   784                           	callstack 0
   785  000067                     	ds	5
   786  00006C                     _enterUserString@Menu$F552:
   787                           	callstack 0
   788  00006C                     	ds	5
   789  000071                     _menuStrings@Menu$F546:
   790                           	callstack 0
   791  000071                     	ds	5
   792  000076                     _byeString@Menu$F559:
   793                           	callstack 0
   794  000076                     	ds	3
   795                           
   796                           	psect	bssBANK0
   797  000080                     __pbssBANK0:
   798                           	callstack 0
   799  000080                     _users:
   800                           	callstack 0
   801  000080                     	ds	54
   802  0000B6                     _s_Timers:
   803                           	callstack 0
   804  0000B6                     	ds	27
   805  0000D1                     _user:
   806                           	callstack 0
   807  0000D1                     	ds	18
   808                           
   809                           	psect	dataBANK0
   810  0000E3                     __pdataBANK0:
   811                           	callstack 0
   812  0000E3                     _accessMenuString1@Menu$F544:
   813                           	callstack 0
   814  0000E3                     	ds	8
   815  0000EB                     _errorsString@Menu$F557:
   816                           	callstack 0
   817  0000EB                     	ds	7
   818  0000F2                     _scoreString@Menu$F556:
   819                           	callstack 0
   820  0000F2                     	ds	6
   821                           
   822                           	psect	dataBANK1
   823  000100                     __pdataBANK1:
   824                           	callstack 0
   825  000100                     _timeRemainingString@Menu$F554:
   826                           	callstack 0
   827  000100                     	ds	15
   828  00010F                     _currentTimeString@Menu$F560:
   829                           	callstack 0
   830  00010F                     	ds	13
   831  00011C                     _modifyTimeString@Menu$F558:
   832                           	callstack 0
   833  00011C                     	ds	12
   834  000128                     _accessMenuString2@Menu$F545:
   835                           	callstack 0
   836  000128                     	ds	11
   837  000133                     _timeLeftString@Menu$F555:
   838                           	callstack 0
   839  000133                     	ds	10
   840                           
   841                           	psect	cstackBANK1
   842  00013D                     __pcstackBANK1:
   843                           	callstack 0
   844  00013D                     writeEeprom@us:
   845                           	callstack 0
   846                           
   847                           ; 18 bytes @ 0x0
   848  00013D                     	ds	18
   849  00014F                     writeEeprom@num:
   850                           	callstack 0
   851                           
   852                           ; 1 bytes @ 0x12
   853  00014F                     	ds	1
   854                           
   855                           	psect	cstackBANK0
   856  0000F8                     __pcstackBANK0:
   857                           	callstack 0
   858  0000F8                     ??_menuMotor:
   859  0000F8                     ??_motorTimer:
   860                           
   861                           ; 1 bytes @ 0x0
   862  0000F8                     	ds	2
   863                           
   864                           	psect	cstackCOMRAM
   865  000050                     __pcstackCOMRAM:
   866                           	callstack 0
   867  000050                     
   868                           ; 1 bytes @ 0x0
   869  000050                     	ds	1
   870  000051                     ??_RSI_High:
   871                           
   872                           ; 1 bytes @ 0x1
   873  000051                     	ds	4
   874  000055                     ??_motorEeprom:
   875  000055                     ??_EscriuPrimeraOrdre:
   876  000055                     ??_CantaPartAlta:
   877  000055                     ??_CantaPartBaixa:
   878  000055                     ?_getScore:
   879                           	callstack 0
   880  000055                     ?_TiGetTics:
   881                           	callstack 0
   882  000055                     ?_getUser:
   883                           	callstack 0
   884  000055                     setTX@text:
   885                           	callstack 0
   886  000055                     KeyGetSMS@auxSMS:
   887                           	callstack 0
   888  000055                     KeyGetNumber@auxValue:
   889                           	callstack 0
   890  000055                     TiResetTics@Handle:
   891                           	callstack 0
   892  000055                     readEeprom@num:
   893                           	callstack 0
   894  000055                     readEepromScores@num:
   895                           	callstack 0
   896  000055                     getFirstDirection@numAddress:
   897                           	callstack 0
   898  000055                     getFirstDirectionScores@numAddress:
   899                           	callstack 0
   900  000055                     ___lbmod@divisor:
   901                           	callstack 0
   902  000055                     writeEepromScores@score:
   903                           	callstack 0
   904                           
   905                           ; 2 bytes @ 0x5
   906  000055                     	ds	1
   907  000056                     CantaPartAlta@c:
   908                           	callstack 0
   909  000056                     CantaPartBaixa@c:
   910                           	callstack 0
   911  000056                     EscriuPrimeraOrdre@ordre:
   912                           	callstack 0
   913  000056                     sendMyTX@send:
   914                           	callstack 0
   915  000056                     ___lbmod@dividend:
   916                           	callstack 0
   917                           
   918                           ; 1 bytes @ 0x6
   919  000056                     	ds	1
   920  000057                     ??_TiGetTics:
   921  000057                     CantaIR@IR:
   922                           	callstack 0
   923  000057                     CantaData@Data:
   924                           	callstack 0
   925  000057                     writeEepromScores@num:
   926                           	callstack 0
   927  000057                     ___lbmod@counter:
   928                           	callstack 0
   929                           
   930                           ; 1 bytes @ 0x7
   931  000057                     	ds	1
   932  000058                     ___lbmod@rem:
   933                           	callstack 0
   934                           
   935                           ; 1 bytes @ 0x8
   936  000058                     	ds	1
   937  000059                     TiGetTics@Handle:
   938                           	callstack 0
   939  000059                     ___lbdiv@divisor:
   940                           	callstack 0
   941                           
   942                           ; 1 bytes @ 0x9
   943  000059                     	ds	1
   944  00005A                     ___lbdiv@dividend:
   945                           	callstack 0
   946  00005A                     TiGetTics@actual:
   947                           	callstack 0
   948                           
   949                           ; 2 bytes @ 0xA
   950  00005A                     	ds	1
   951  00005B                     ___lbdiv@counter:
   952                           	callstack 0
   953                           
   954                           ; 1 bytes @ 0xB
   955  00005B                     	ds	1
   956  00005C                     ??_motorJoystick:
   957  00005C                     ??_motorKey:
   958  00005C                     ??_motorRX:
   959  00005C                     ??_motorTX:
   960  00005C                     ??_playNote:
   961  00005C                     WaitForBusy@Busy:
   962                           	callstack 0
   963  00005C                     ___lbdiv@quotient:
   964                           	callstack 0
   965  00005C                     Espera@Timer:
   966                           	callstack 0
   967                           
   968                           ; 2 bytes @ 0xC
   969  00005C                     	ds	1
   970  00005D                     LcGotoXY@Row:
   971                           	callstack 0
   972                           
   973                           ; 1 bytes @ 0xD
   974  00005D                     	ds	1
   975  00005E                     ??_LcGotoXY:
   976  00005E                     playNote@note:
   977                           	callstack 0
   978  00005E                     Espera@ms:
   979                           	callstack 0
   980                           
   981                           ; 2 bytes @ 0xE
   982  00005E                     	ds	1
   983  00005F                     ??_motorMusic:
   984                           
   985                           ; 1 bytes @ 0xF
   986  00005F                     	ds	1
   987  000060                     LcInit@columns:
   988                           	callstack 0
   989  000060                     _LcGotoXY$1428:
   990                           	callstack 0
   991                           
   992                           ; 2 bytes @ 0x10
   993  000060                     	ds	1
   994  000061                     LcInit@rows:
   995                           	callstack 0
   996                           
   997                           ; 1 bytes @ 0x11
   998  000061                     	ds	1
   999  000062                     LcInit@i:
  1000                           	callstack 0
  1001  000062                     LcGotoXY@Fisics:
  1002                           	callstack 0
  1003                           
  1004                           ; 2 bytes @ 0x12
  1005  000062                     	ds	2
  1006  000064                     LcGotoXY@Column:
  1007                           	callstack 0
  1008                           
  1009                           ; 1 bytes @ 0x14
  1010  000064                     	ds	1
  1011  000065                     LcPutChar@c:
  1012                           	callstack 0
  1013                           
  1014                           ; 1 bytes @ 0x15
  1015  000065                     	ds	1
  1016  000066                     LcPutTime@time:
  1017                           	callstack 0
  1018  000066                     LcPutScore@score:
  1019                           	callstack 0
  1020                           
  1021                           ; 1 bytes @ 0x16
  1022  000066                     	ds	1
  1023  000067                     
  1024                           ; 1 bytes @ 0x17
  1025 ;;
  1026 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1027 ;;
  1028 ;; *************** function _main *****************
  1029 ;; Defined at:
  1030 ;;		line 31 in file "main.c"
  1031 ;; Parameters:    Size  Location     Type
  1032 ;;		None
  1033 ;; Auto vars:     Size  Location     Type
  1034 ;;		None
  1035 ;; Return value:  Size  Location     Type
  1036 ;;                  1    wreg      void 
  1037 ;; Registers used:
  1038 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1039 ;; Tracked objects:
  1040 ;;		On entry : 0/0
  1041 ;;		On exit  : 0/0
  1042 ;;		Unchanged: 0/0
  1043 ;; Data sizes:     COMRAM   BANK0   BANK1
  1044 ;;      Params:         0       0       0
  1045 ;;      Locals:         0       0       0
  1046 ;;      Temps:          0       0       0
  1047 ;;      Totals:         0       0       0
  1048 ;;Total ram usage:        0 bytes
  1049 ;; Hardware stack levels required when called: 8
  1050 ;; This function calls:
  1051 ;;		_EeInitAction
  1052 ;;		_LcClear
  1053 ;;		_LcGotoXY
  1054 ;;		_LcInit
  1055 ;;		_TiGetTimer
  1056 ;;		_TiInitTimer
  1057 ;;		_TiResetTics
  1058 ;;		_initData
  1059 ;;		_initJoystick
  1060 ;;		_initKeypad
  1061 ;;		_initMenu
  1062 ;;		_initMusic
  1063 ;;		_initSIO
  1064 ;;		_initTX
  1065 ;;		_menuMotor
  1066 ;;		_motorEeprom
  1067 ;;		_motorJoystick
  1068 ;;		_motorKey
  1069 ;;		_motorMusic
  1070 ;;		_motorRX
  1071 ;;		_motorTX
  1072 ;;		_motorTimer
  1073 ;; This function is called by:
  1074 ;;		Startup code after reset
  1075 ;; This function uses a non-reentrant model
  1076 ;;
  1077                           
  1078                           	psect	text0
  1079  0019FE                     __ptext0:
  1080                           	callstack 0
  1081  0019FE                     _main:
  1082                           	callstack 23
  1083                           
  1084                           ;main.c: 32:         motorJoystick();
  1085                           
  1086                           ;incstack = 0
  1087  0019FE  EC1F  F00F         	call	_TiGetTimer	;wreg free
  1088  001A02  6E79               	movwf	_timerGeneral^0,c
  1089                           
  1090                           ;main.c: 33:         motorKey();
  1091  001A04  ECB4  F00E         	call	_TiInitTimer	;wreg free
  1092                           
  1093                           ;main.c: 34:         motorEeprom();
  1094  001A08  EC08  F00F         	call	_initKeypad	;wreg free
  1095                           
  1096                           ;main.c: 35:         motorMusic();
  1097  001A0C  ECCD  F000         	call	_initData	;wreg free
  1098                           
  1099                           ;main.c: 36:         motorRX();
  1100  001A10  ECDF  F00F         	call	_initSIO	;wreg free
  1101                           
  1102                           ;main.c: 37:         motorTX();
  1103  001A14  ECD2  F00F         	call	_initJoystick	;wreg free
  1104                           
  1105                           ;main.c: 38:         motorTimer();
  1106  001A18  0E10               	movlw	16
  1107  001A1A  6E60               	movwf	LcInit@columns^0,c
  1108  001A1C  0E02               	movlw	2
  1109  001A1E  EC1B  F00B         	call	_LcInit
  1110                           
  1111                           ;main.c: 39:     }
  1112  001A22  9C93               	bcf	147,6,c	;volatile
  1113                           
  1114                           ;main.c: 40: }
  1115  001A24  9E93               	bcf	147,7,c	;volatile
  1116  001A26  EC7D  F00F         	call	_initMenu	;wreg free
  1117  001A2A  9692               	bcf	146,3,c	;volatile
  1118  001A2C  9689               	bcf	137,3,c	;volatile
  1119  001A2E  9892               	bcf	146,4,c	;volatile
  1120  001A30  9889               	bcf	137,4,c	;volatile
  1121  001A32  EC9E  F000         	call	_EeInitAction	;wreg free
  1122  001A36  ECC5  F00F         	call	_initMusic	;wreg free
  1123  001A3A  EC6C  F00F         	call	_initTX	;wreg free
  1124  001A3E  5079               	movf	_timerGeneral^0,w,c
  1125  001A40  EC9C  F00F         	call	_TiResetTics
  1126  001A44  EC31  F000         	call	_LcClear	;wreg free
  1127  001A48  0E00               	movlw	0
  1128  001A4A  6A5D               	clrf	LcGotoXY@Row^0,c
  1129  001A4C  EC7C  F00B         	call	_LcGotoXY
  1130  001A50                     l7472:
  1131  001A50  EC51  F001         	call	_menuMotor	;wreg free
  1132  001A54  ECB0  F00A         	call	_motorJoystick	;wreg free
  1133  001A58  EC02  F00A         	call	_motorKey	;wreg free
  1134  001A5C  EC1D  F009         	call	_motorEeprom	;wreg free
  1135  001A60  EC49  F00C         	call	_motorMusic	;wreg free
  1136  001A64  EC09  F00C         	call	_motorRX	;wreg free
  1137  001A68  ECC4  F00C         	call	_motorTX	;wreg free
  1138  001A6C  EC39  F00D         	call	_motorTimer	;wreg free
  1139  001A70  D7EF               	goto	l7472
  1140  001A72                     __end_of_main:
  1141                           	callstack 0
  1142                           
  1143 ;; *************** function _motorTimer *****************
  1144 ;; Defined at:
  1145 ;;		line 100 in file "Timer.c"
  1146 ;; Parameters:    Size  Location     Type
  1147 ;;		None
  1148 ;; Auto vars:     Size  Location     Type
  1149 ;;		None
  1150 ;; Return value:  Size  Location     Type
  1151 ;;                  1    wreg      void 
  1152 ;; Registers used:
  1153 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1154 ;; Tracked objects:
  1155 ;;		On entry : 0/0
  1156 ;;		On exit  : 0/0
  1157 ;;		Unchanged: 0/0
  1158 ;; Data sizes:     COMRAM   BANK0   BANK1
  1159 ;;      Params:         0       0       0
  1160 ;;      Locals:         0       0       0
  1161 ;;      Temps:          0       2       0
  1162 ;;      Totals:         0       2       0
  1163 ;;Total ram usage:        2 bytes
  1164 ;; Hardware stack levels used: 1
  1165 ;; Hardware stack levels required when called: 7
  1166 ;; This function calls:
  1167 ;;		_LcGotoXY
  1168 ;;		_LcPutChar
  1169 ;;		_LcPutTime
  1170 ;;		_TiGetTics
  1171 ;;		_TiResetTics
  1172 ;; This function is called by:
  1173 ;;		_main
  1174 ;; This function uses a non-reentrant model
  1175 ;;
  1176                           
  1177                           	psect	text1
  1178  001A72                     __ptext1:
  1179                           	callstack 0
  1180  001A72                     _motorTimer:
  1181                           	callstack 23
  1182                           
  1183                           ;Timer.c: 101:     switch (timerState){
  1184                           
  1185                           ;incstack = 0
  1186  001A72  D027               	goto	l7428
  1187  001A74                     l7406:
  1188                           
  1189                           ; BSR set to: 0
  1190                           ;Timer.c: 103:    if(TiGetTics(timerPic) == 1200){
  1191  001A74  5029               	movf	_timerPic^0,w,c
  1192  001A76  EC48  F00F         	call	_TiGetTics
  1193  001A7A  0EB0               	movlw	176
  1194  001A7C  1855               	xorwf	?_TiGetTics^0,w,c
  1195  001A7E  E12E               	bnz	l958
  1196  001A80  0E04               	movlw	4
  1197  001A82  1856               	xorwf	(?_TiGetTics+1)^0,w,c
  1198  001A84  A4D8               	btfss	status,2,c
  1199  001A86  0012               	return	
  1200                           
  1201                           ;Timer.c: 104:                 TiResetTics(timerPic);
  1202  001A88  5029               	movf	_timerPic^0,w,c
  1203  001A8A  EC9C  F00F         	call	_TiResetTics
  1204                           
  1205                           ;Timer.c: 105:                 ++timerState;
  1206  001A8E  2A28               	incf	_timerState^0,f,c
  1207                           
  1208                           ;Timer.c: 106:                 if(seconds==59){
  1209  001A90  0E3B               	movlw	59
  1210  001A92  1826               	xorwf	_seconds@Timer$F1634^0,w,c
  1211  001A94  E103               	bnz	l7418
  1212                           
  1213                           ;Timer.c: 107:                     ++minutes;
  1214  001A96  2A27               	incf	_minutes@Timer$F1633^0,f,c
  1215                           
  1216                           ;Timer.c: 108:                     seconds = 0;
  1217  001A98  6A26               	clrf	_seconds@Timer$F1634^0,c
  1218                           
  1219                           ;Timer.c: 110:                 }
  1220  001A9A  0012               	return	
  1221  001A9C                     l7418:
  1222                           
  1223                           ;Timer.c: 112:                     ++seconds;
  1224  001A9C  2A26               	incf	_seconds@Timer$F1634^0,f,c
  1225  001A9E  0012               	return	
  1226  001AA0                     l7420:
  1227                           
  1228                           ; BSR set to: 0
  1229                           ;Timer.c: 117:             if(show ==1){
  1230  001AA0  0425               	decf	_show^0,w,c
  1231  001AA2  E10D               	bnz	l7424
  1232                           
  1233                           ; BSR set to: 0
  1234                           ;Timer.c: 118:                 LcGotoXY(0,1);
  1235  001AA4  ECF4  F008         	call	PL46	;call to abstracted procedure
  1236  001AA8  EC7C  F00B         	call	_LcGotoXY
  1237                           
  1238                           ;Timer.c: 119:                 LcPutTime(minutes);
  1239  001AAC  5027               	movf	_minutes@Timer$F1633^0,w,c
  1240  001AAE  EC5B  F00F         	call	_LcPutTime
  1241                           
  1242                           ;Timer.c: 120:                 LcPutChar(':');
  1243  001AB2  0E3A               	movlw	58
  1244  001AB4  EC07  F00E         	call	_LcPutChar
  1245                           
  1246                           ;Timer.c: 121:                 LcPutTime(seconds);
  1247  001AB8  5026               	movf	_seconds@Timer$F1634^0,w,c
  1248  001ABA  EC5B  F00F         	call	_LcPutTime
  1249  001ABE                     l7424:
  1250                           
  1251                           ;Timer.c: 123:             --timerState;
  1252  001ABE  0628               	decf	_timerState^0,f,c
  1253                           
  1254                           ;Timer.c: 124:             break;
  1255  001AC0  0012               	return	
  1256  001AC2                     l7428:
  1257  001AC2  5028               	movf	_timerState^0,w,c
  1258  001AC4  0100               	movlb	0	; () banked
  1259  001AC6  6FF8               	movwf	??_motorTimer& (0+255),b
  1260  001AC8  6BF9               	clrf	(??_motorTimer+1)& (0+255),b
  1261                           
  1262                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1263                           ; Switch size 1, requested type "space"
  1264                           ; Number of cases is 1, Range of values is 0 to 0
  1265                           ; switch strategies available:
  1266                           ; Name         Instructions Cycles
  1267                           ; simple_byte            4     3 (average)
  1268                           ;	Chosen strategy is simple_byte
  1269  001ACA  51F9               	movf	(??_motorTimer+1)& (0+255),w,b
  1270  001ACC  A4D8               	btfss	status,2,c
  1271  001ACE  0012               	return	
  1272                           
  1273                           ; BSR set to: 0
  1274                           ; Switch size 1, requested type "space"
  1275                           ; Number of cases is 2, Range of values is 0 to 1
  1276                           ; switch strategies available:
  1277                           ; Name         Instructions Cycles
  1278                           ; simple_byte            7     4 (average)
  1279                           ;	Chosen strategy is simple_byte
  1280  001AD0  51F8               	movf	??_motorTimer& (0+255),w,b
  1281  001AD2  E0D0               	bz	l7406
  1282  001AD4  0A01               	xorlw	1	; case 1
  1283  001AD6  A4D8               	btfss	status,2,c
  1284  001AD8  0012               	return	
  1285  001ADA  D7E2               	goto	l7420
  1286  001ADC                     l958:
  1287  001ADC  0012               	return		;funcret
  1288  001ADE                     __end_of_motorTimer:
  1289                           	callstack 0
  1290                           
  1291 ;; *************** function _motorTX *****************
  1292 ;; Defined at:
  1293 ;;		line 26 in file "TX.c"
  1294 ;; Parameters:    Size  Location     Type
  1295 ;;		None
  1296 ;; Auto vars:     Size  Location     Type
  1297 ;;		None
  1298 ;; Return value:  Size  Location     Type
  1299 ;;                  1    wreg      void 
  1300 ;; Registers used:
  1301 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1302 ;; Tracked objects:
  1303 ;;		On entry : 0/0
  1304 ;;		On exit  : 0/0
  1305 ;;		Unchanged: 0/0
  1306 ;; Data sizes:     COMRAM   BANK0   BANK1
  1307 ;;      Params:         0       0       0
  1308 ;;      Locals:         0       0       0
  1309 ;;      Temps:          2       0       0
  1310 ;;      Totals:         2       0       0
  1311 ;;Total ram usage:        2 bytes
  1312 ;; Hardware stack levels used: 1
  1313 ;; Hardware stack levels required when called: 3
  1314 ;; This function calls:
  1315 ;;		_TiGetTics
  1316 ;;		_TiResetTics
  1317 ;; This function is called by:
  1318 ;;		_main
  1319 ;; This function uses a non-reentrant model
  1320 ;;
  1321                           
  1322                           	psect	text2
  1323  001988                     __ptext2:
  1324                           	callstack 0
  1325  001988                     _motorTX:
  1326                           	callstack 27
  1327                           
  1328                           ;TX.c: 27:     switch (stateTX){
  1329                           
  1330                           ;incstack = 0
  1331  001988  D02D               	goto	l6208
  1332  00198A                     l1186:
  1333                           
  1334                           ;TX.c: 29:             LATCbits.LATC5 = 1 & 0x01;
  1335  00198A  8A8B               	bsf	139,5,c	;volatile
  1336                           
  1337                           ;TX.c: 30:             break;
  1338  00198C  0012               	return	
  1339  00198E                     l6186:
  1340                           
  1341                           ;TX.c: 33:             if(TiGetTics(timerTX) >= 1){
  1342  00198E  501A               	movf	_timerTX^0,w,c
  1343  001990  EC48  F00F         	call	_TiGetTics
  1344  001994  5055               	movf	?_TiGetTics^0,w,c
  1345  001996  1056               	iorwf	(?_TiGetTics+1)^0,w,c
  1346  001998  B4D8               	btfsc	status,2,c
  1347  00199A  0012               	return	
  1348                           
  1349                           ;TX.c: 34:                 TiResetTics(timerTX);
  1350  00199C  501A               	movf	_timerTX^0,w,c
  1351  00199E  EC9C  F00F         	call	_TiResetTics
  1352                           
  1353                           ;TX.c: 35:                 if (pointer < 8){
  1354  0019A2  0E08               	movlw	8
  1355  0019A4  6016               	cpfslt	_pointer@TX$F2011^0,c
  1356  0019A6  D00F               	goto	l6196
  1357                           
  1358                           ;TX.c: 36:                     LATCbits.LATC5 = (toSend & 0x01);
  1359  0019A8  C017  F05C         	movff	_toSend,??_motorTX
  1360  0019AC  0E01               	movlw	1
  1361  0019AE  165C               	andwf	??_motorTX^0,f,c
  1362  0019B0  3A5C               	swapf	??_motorTX^0,f,c
  1363  0019B2  465C               	rlncf	??_motorTX^0,f,c
  1364  0019B4  508B               	movf	139,w,c	;volatile
  1365  0019B6  185C               	xorwf	??_motorTX^0,w,c
  1366  0019B8  0BDF               	andlw	-33
  1367  0019BA  185C               	xorwf	??_motorTX^0,w,c
  1368  0019BC  6E8B               	movwf	139,c	;volatile
  1369                           
  1370                           ;TX.c: 37:                     toSend = (toSend >> 1);
  1371  0019BE  90D8               	bcf	status,0,c
  1372  0019C0  3217               	rrcf	_toSend^0,f,c
  1373                           
  1374                           ;TX.c: 38:                     ++pointer;
  1375  0019C2  2A16               	incf	_pointer@TX$F2011^0,f,c
  1376                           
  1377                           ;TX.c: 39:                 }
  1378  0019C4  0012               	return	
  1379  0019C6                     l6196:
  1380                           
  1381                           ;TX.c: 41:                     ++stateTX;
  1382  0019C6  2A18               	incf	_stateTX^0,f,c
  1383                           
  1384                           ;TX.c: 42:                     LATCbits.LATC5 = 1 & 0x01;
  1385  0019C8  8A8B               	bsf	139,5,c	;volatile
  1386                           
  1387                           ;TX.c: 43:                     TiResetTics(timerTX);
  1388  0019CA  501A               	movf	_timerTX^0,w,c
  1389  0019CC  EF9C  F00F         	goto	_TiResetTics
  1390  0019D0                     l6202:
  1391                           
  1392                           ;TX.c: 49:             if(TiGetTics(timerTX) >= 1){
  1393  0019D0  501A               	movf	_timerTX^0,w,c
  1394  0019D2  EC48  F00F         	call	_TiGetTics
  1395  0019D6  5055               	movf	?_TiGetTics^0,w,c
  1396  0019D8  1056               	iorwf	(?_TiGetTics+1)^0,w,c
  1397  0019DA  B4D8               	btfsc	status,2,c
  1398  0019DC  0012               	return	
  1399                           
  1400                           ;TX.c: 50:                 LATCbits.LATC5 = 1 & 0x01;
  1401  0019DE  8A8B               	bsf	139,5,c	;volatile
  1402                           
  1403                           ;TX.c: 51:                 stateTX=0;
  1404  0019E0  6A18               	clrf	_stateTX^0,c
  1405  0019E2  0012               	return	
  1406  0019E4                     l6208:
  1407  0019E4  5018               	movf	_stateTX^0,w,c
  1408  0019E6  6E5C               	movwf	??_motorTX^0,c
  1409  0019E8  6A5D               	clrf	(??_motorTX+1)^0,c
  1410                           
  1411                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1412                           ; Switch size 1, requested type "space"
  1413                           ; Number of cases is 1, Range of values is 0 to 0
  1414                           ; switch strategies available:
  1415                           ; Name         Instructions Cycles
  1416                           ; simple_byte            4     3 (average)
  1417                           ;	Chosen strategy is simple_byte
  1418  0019EA  505D               	movf	(??_motorTX+1)^0,w,c
  1419  0019EC  A4D8               	btfss	status,2,c
  1420  0019EE  0012               	return	
  1421                           
  1422                           ; Switch size 1, requested type "space"
  1423                           ; Number of cases is 3, Range of values is 0 to 2
  1424                           ; switch strategies available:
  1425                           ; Name         Instructions Cycles
  1426                           ; simple_byte           10     6 (average)
  1427                           ;	Chosen strategy is simple_byte
  1428  0019F0  505C               	movf	??_motorTX^0,w,c
  1429  0019F2  E0CB               	bz	l1186
  1430  0019F4  0A01               	xorlw	1	; case 1
  1431  0019F6  E0CB               	bz	l6186
  1432  0019F8  0A03               	xorlw	3	; case 2
  1433  0019FA  E0EA               	bz	l6202
  1434  0019FC  0012               	return		;funcret
  1435  0019FE                     __end_of_motorTX:
  1436                           	callstack 0
  1437                           
  1438 ;; *************** function _motorRX *****************
  1439 ;; Defined at:
  1440 ;;		line 57 in file "TX.c"
  1441 ;; Parameters:    Size  Location     Type
  1442 ;;		None
  1443 ;; Auto vars:     Size  Location     Type
  1444 ;;		None
  1445 ;; Return value:  Size  Location     Type
  1446 ;;                  1    wreg      void 
  1447 ;; Registers used:
  1448 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1449 ;; Tracked objects:
  1450 ;;		On entry : 0/0
  1451 ;;		On exit  : 0/0
  1452 ;;		Unchanged: 0/0
  1453 ;; Data sizes:     COMRAM   BANK0   BANK1
  1454 ;;      Params:         0       0       0
  1455 ;;      Locals:         0       0       0
  1456 ;;      Temps:          2       0       0
  1457 ;;      Totals:         2       0       0
  1458 ;;Total ram usage:        2 bytes
  1459 ;; Hardware stack levels used: 1
  1460 ;; Hardware stack levels required when called: 3
  1461 ;; This function calls:
  1462 ;;		_TXbusy
  1463 ;;		_TiGetTics
  1464 ;;		_TiResetTics
  1465 ;;		_setTX
  1466 ;; This function is called by:
  1467 ;;		_main
  1468 ;; This function uses a non-reentrant model
  1469 ;;
  1470                           
  1471                           	psect	text3
  1472  001812                     __ptext3:
  1473                           	callstack 0
  1474  001812                     _motorRX:
  1475                           	callstack 27
  1476                           
  1477                           ;TX.c: 58:     switch (stateRX){
  1478                           
  1479                           ;incstack = 0
  1480  001812  D032               	goto	l6178
  1481  001814                     l1198:
  1482                           
  1483                           ;TX.c: 60:             if(PORTCbits.RC4 == 0){
  1484  001814  B882               	btfsc	130,4,c	;volatile
  1485  001816  0012               	return	
  1486                           
  1487                           ;TX.c: 61:                 TiResetTics(timerRX);
  1488  001818  5019               	movf	_timerRX^0,w,c
  1489  00181A  EC9C  F00F         	call	_TiResetTics
  1490                           
  1491                           ;TX.c: 62:                 ++stateRX;
  1492  00181E  2A13               	incf	_stateRX^0,f,c
  1493  001820  0012               	return	
  1494  001822                     l6148:
  1495                           
  1496                           ;TX.c: 67:             if (pointerRX < 8){
  1497  001822  0E08               	movlw	8
  1498  001824  6015               	cpfslt	_pointerRX^0,c
  1499  001826  D010               	goto	l6164
  1500                           
  1501                           ;TX.c: 68:                 if(TiGetTics(timerRX) >= 1){
  1502  001828  5019               	movf	_timerRX^0,w,c
  1503  00182A  EC48  F00F         	call	_TiGetTics
  1504  00182E  5055               	movf	?_TiGetTics^0,w,c
  1505  001830  1056               	iorwf	(?_TiGetTics+1)^0,w,c
  1506  001832  B4D8               	btfsc	status,2,c
  1507  001834  0012               	return	
  1508                           
  1509                           ;TX.c: 69:                     if(PORTCbits.RC4) receive = receive | 0x80;
  1510  001836  A882               	btfss	130,4,c	;volatile
  1511  001838  D002               	goto	l6156
  1512  00183A  8E14               	bsf	_receive^0,7,c
  1513  00183C  D001               	goto	l6158
  1514  00183E                     l6156:
  1515  00183E  9E14               	bcf	_receive^0,7,c
  1516  001840                     l6158:
  1517                           
  1518                           ;TX.c: 71:                     receive = (receive >> 1);
  1519  001840  90D8               	bcf	status,0,c
  1520  001842  3214               	rrcf	_receive^0,f,c
  1521                           
  1522                           ;TX.c: 72:                     ++pointerRX;
  1523  001844  2A15               	incf	_pointerRX^0,f,c
  1524  001846  D008               	goto	l6170
  1525  001848                     l6164:
  1526                           
  1527                           ;TX.c: 77:                 if(TXbusy()==1){
  1528  001848  ECAD  F000         	call	_TXbusy	;wreg free
  1529  00184C  06E8               	decf	wreg,f,c
  1530  00184E  E103               	bnz	l6168
  1531                           
  1532                           ;TX.c: 78:                     setTX(receive);
  1533  001850  5014               	movf	_receive^0,w,c
  1534  001852  ECA3  F000         	call	_setTX
  1535  001856                     l6168:
  1536                           
  1537                           ;TX.c: 80:                 ++stateRX;
  1538  001856  2A13               	incf	_stateRX^0,f,c
  1539  001858                     l6170:
  1540                           
  1541                           ;TX.c: 81:                 TiResetTics(timerRX);
  1542  001858  5019               	movf	_timerRX^0,w,c
  1543  00185A  EF9C  F00F         	goto	_TiResetTics
  1544  00185E                     l6172:
  1545                           
  1546                           ;TX.c: 86:             if(TiGetTics(timerRX) >= 24){
  1547  00185E  5019               	movf	_timerRX^0,w,c
  1548  001860  EC48  F00F         	call	_TiGetTics
  1549  001864  5056               	movf	(?_TiGetTics+1)^0,w,c
  1550  001866  E104               	bnz	u5040
  1551  001868  0E18               	movlw	24
  1552  00186A  5C55               	subwf	?_TiGetTics^0,w,c
  1553  00186C  A0D8               	btfss	status,0,c
  1554  00186E  0012               	return	
  1555  001870                     u5040:
  1556                           
  1557                           ;TX.c: 87:                 receive = 0;
  1558  001870  6A14               	clrf	_receive^0,c
  1559                           
  1560                           ;TX.c: 88:                 stateRX=0;
  1561  001872  6A13               	clrf	_stateRX^0,c
  1562                           
  1563                           ;TX.c: 89:                 pointerRX = 0;
  1564  001874  6A15               	clrf	_pointerRX^0,c
  1565  001876  0012               	return	
  1566  001878                     l6178:
  1567  001878  5013               	movf	_stateRX^0,w,c
  1568  00187A  6E5C               	movwf	??_motorRX^0,c
  1569  00187C  6A5D               	clrf	(??_motorRX+1)^0,c
  1570                           
  1571                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1572                           ; Switch size 1, requested type "space"
  1573                           ; Number of cases is 1, Range of values is 0 to 0
  1574                           ; switch strategies available:
  1575                           ; Name         Instructions Cycles
  1576                           ; simple_byte            4     3 (average)
  1577                           ;	Chosen strategy is simple_byte
  1578  00187E  505D               	movf	(??_motorRX+1)^0,w,c
  1579  001880  A4D8               	btfss	status,2,c
  1580  001882  0012               	return	
  1581                           
  1582                           ; Switch size 1, requested type "space"
  1583                           ; Number of cases is 3, Range of values is 0 to 2
  1584                           ; switch strategies available:
  1585                           ; Name         Instructions Cycles
  1586                           ; simple_byte           10     6 (average)
  1587                           ;	Chosen strategy is simple_byte
  1588  001884  505C               	movf	??_motorRX^0,w,c
  1589  001886  E0C6               	bz	l1198
  1590  001888  0A01               	xorlw	1	; case 1
  1591  00188A  E0CB               	bz	l6148
  1592  00188C  0A03               	xorlw	3	; case 2
  1593  00188E  E0E7               	bz	l6172
  1594  001890  0012               	return		;funcret
  1595  001892                     __end_of_motorRX:
  1596                           	callstack 0
  1597                           
  1598 ;; *************** function _motorMusic *****************
  1599 ;; Defined at:
  1600 ;;		line 19 in file "Music.c"
  1601 ;; Parameters:    Size  Location     Type
  1602 ;;		None
  1603 ;; Auto vars:     Size  Location     Type
  1604 ;;		None
  1605 ;; Return value:  Size  Location     Type
  1606 ;;                  1    wreg      void 
  1607 ;; Registers used:
  1608 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1609 ;; Tracked objects:
  1610 ;;		On entry : 0/0
  1611 ;;		On exit  : 0/0
  1612 ;;		Unchanged: 0/0
  1613 ;; Data sizes:     COMRAM   BANK0   BANK1
  1614 ;;      Params:         0       0       0
  1615 ;;      Locals:         0       0       0
  1616 ;;      Temps:          2       0       0
  1617 ;;      Totals:         2       0       0
  1618 ;;Total ram usage:        2 bytes
  1619 ;; Hardware stack levels used: 1
  1620 ;; Hardware stack levels required when called: 4
  1621 ;; This function calls:
  1622 ;;		_TiGetTics
  1623 ;;		_TiResetTics
  1624 ;;		_playNote
  1625 ;; This function is called by:
  1626 ;;		_main
  1627 ;; This function uses a non-reentrant model
  1628 ;;
  1629                           
  1630                           	psect	text4
  1631  001892                     __ptext4:
  1632                           	callstack 0
  1633  001892                     _motorMusic:
  1634                           	callstack 26
  1635                           
  1636                           ;Music.c: 20:     switch(musicState){
  1637                           
  1638                           ;incstack = 0
  1639  001892  D02F               	goto	l6136
  1640  001894                     l6112:
  1641                           
  1642                           ;Music.c: 22:             if(pointer<5){
  1643  001894  0E05               	movlw	5
  1644  001896  601B               	cpfslt	_pointer@Music$F1878^0,c
  1645  001898  D016               	goto	l6128
  1646                           
  1647                           ;Music.c: 23:                 if(TiGetTics(timerMusic) > 1200){
  1648  00189A  500B               	movf	_timerMusic^0,w,c
  1649  00189C  EC48  F00F         	call	_TiGetTics
  1650  0018A0  ECEB  F008         	call	PL42	;call to abstracted procedure
  1651  0018A4  E30D               	bnc	l6126
  1652                           
  1653                           ;Music.c: 24:                     ++pointer;
  1654  0018A6  2A1B               	incf	_pointer@Music$F1878^0,f,c
  1655                           
  1656                           ;Music.c: 25:                     TiResetTics(timerMusic);
  1657  0018A8  500B               	movf	_timerMusic^0,w,c
  1658  0018AA  EC9C  F00F         	call	_TiResetTics
  1659                           
  1660                           ;Music.c: 26:                     note *=2;
  1661  0018AE  0E02               	movlw	2
  1662  0018B0  021C               	mulwf	_note^0,c
  1663  0018B2  50F3               	movf	prodl,w,c
  1664  0018B4  6E1C               	movwf	_note^0,c
  1665                           
  1666                           ;Music.c: 27:                    if (note > 16){
  1667  0018B6  0E10               	movlw	16
  1668  0018B8  641C               	cpfsgt	_note^0,c
  1669  0018BA  D002               	goto	l6126
  1670                           
  1671                           ;Music.c: 28:                        note = 1;
  1672  0018BC  0E01               	movlw	1
  1673  0018BE  6E1C               	movwf	_note^0,c
  1674  0018C0                     l6126:
  1675                           
  1676                           ;Music.c: 31:                 playNote(note);
  1677  0018C0  501C               	movf	_note^0,w,c
  1678  0018C2  EF55  F00E         	goto	_playNote
  1679  0018C6                     l6128:
  1680                           
  1681                           ;Music.c: 33:                 TiResetTics(timerMusic);
  1682  0018C6  500B               	movf	_timerMusic^0,w,c
  1683  0018C8  EC9C  F00F         	call	_TiResetTics
  1684                           
  1685                           ;Music.c: 34:                 musicState=2;
  1686  0018CC  0E02               	movlw	2
  1687  0018CE  6E1D               	movwf	_musicState^0,c
  1688  0018D0  0C02               	retlw	2
  1689  0018D2                     l1134:
  1690                           
  1691                           ;Music.c: 38:             pointer=0;
  1692  0018D2  6A1B               	clrf	_pointer@Music$F1878^0,c
  1693                           
  1694                           ;Music.c: 39:             LATDbits.LATD3 = 0;
  1695  0018D4  968C               	bcf	140,3,c	;volatile
  1696                           
  1697                           ;Music.c: 40:             break;
  1698  0018D6  0012               	return	
  1699  0018D8                     l1135:
  1700                           
  1701                           ;Music.c: 43:             pointer=0;
  1702  0018D8  6A1B               	clrf	_pointer@Music$F1878^0,c
  1703                           
  1704                           ;Music.c: 44:             LATDbits.LATD3 = 0;
  1705  0018DA  968C               	bcf	140,3,c	;volatile
  1706                           
  1707                           ;Music.c: 45:             if(TiGetTics(timerMusic) == 1200*15){
  1708  0018DC  500B               	movf	_timerMusic^0,w,c
  1709  0018DE  EC48  F00F         	call	_TiGetTics
  1710  0018E2  0E50               	movlw	80
  1711  0018E4  1855               	xorwf	?_TiGetTics^0,w,c
  1712  0018E6  E113               	bnz	l1137
  1713  0018E8  0E46               	movlw	70
  1714  0018EA  1856               	xorwf	(?_TiGetTics+1)^0,w,c
  1715  0018EC  B4D8               	btfsc	status,2,c
  1716                           
  1717                           ;Music.c: 46:                 musicState=0;
  1718  0018EE  6A1D               	clrf	_musicState^0,c
  1719  0018F0  0012               	return	
  1720  0018F2                     l6136:
  1721  0018F2  501D               	movf	_musicState^0,w,c
  1722  0018F4  6E5F               	movwf	??_motorMusic^0,c
  1723  0018F6  6A60               	clrf	(??_motorMusic+1)^0,c
  1724                           
  1725                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1726                           ; Switch size 1, requested type "space"
  1727                           ; Number of cases is 1, Range of values is 0 to 0
  1728                           ; switch strategies available:
  1729                           ; Name         Instructions Cycles
  1730                           ; simple_byte            4     3 (average)
  1731                           ;	Chosen strategy is simple_byte
  1732  0018F8  5060               	movf	(??_motorMusic+1)^0,w,c
  1733  0018FA  A4D8               	btfss	status,2,c
  1734  0018FC  0012               	return	
  1735                           
  1736                           ; Switch size 1, requested type "space"
  1737                           ; Number of cases is 3, Range of values is 0 to 2
  1738                           ; switch strategies available:
  1739                           ; Name         Instructions Cycles
  1740                           ; simple_byte           10     6 (average)
  1741                           ;	Chosen strategy is simple_byte
  1742  0018FE  505F               	movf	??_motorMusic^0,w,c
  1743  001900  E0C9               	bz	l6112
  1744  001902  0A01               	xorlw	1	; case 1
  1745  001904  E0E6               	bz	l1134
  1746  001906  0A03               	xorlw	3	; case 2
  1747  001908  A4D8               	btfss	status,2,c
  1748  00190A  0012               	return	
  1749  00190C  D7E5               	goto	l1135
  1750  00190E                     l1137:
  1751  00190E  0012               	return		;funcret
  1752  001910                     __end_of_motorMusic:
  1753                           	callstack 0
  1754                           
  1755 ;; *************** function _playNote *****************
  1756 ;; Defined at:
  1757 ;;		line 61 in file "Music.c"
  1758 ;; Parameters:    Size  Location     Type
  1759 ;;  note            1    wreg     unsigned char 
  1760 ;; Auto vars:     Size  Location     Type
  1761 ;;  note            1   14[COMRAM] unsigned char 
  1762 ;; Return value:  Size  Location     Type
  1763 ;;                  1    wreg      void 
  1764 ;; Registers used:
  1765 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1766 ;; Tracked objects:
  1767 ;;		On entry : 0/0
  1768 ;;		On exit  : 0/0
  1769 ;;		Unchanged: 0/0
  1770 ;; Data sizes:     COMRAM   BANK0   BANK1
  1771 ;;      Params:         0       0       0
  1772 ;;      Locals:         1       0       0
  1773 ;;      Temps:          2       0       0
  1774 ;;      Totals:         3       0       0
  1775 ;;Total ram usage:        3 bytes
  1776 ;; Hardware stack levels used: 1
  1777 ;; Hardware stack levels required when called: 3
  1778 ;; This function calls:
  1779 ;;		_TiGetTics
  1780 ;;		_TiResetTics
  1781 ;; This function is called by:
  1782 ;;		_motorMusic
  1783 ;; This function uses a non-reentrant model
  1784 ;;
  1785                           
  1786                           	psect	text5
  1787  001CAA                     __ptext5:
  1788                           	callstack 0
  1789  001CAA                     _playNote:
  1790                           	callstack 26
  1791                           
  1792                           ;incstack = 0
  1793                           ;playNote@note stored from wreg
  1794  001CAA  6E5E               	movwf	playNote@note^0,c
  1795                           
  1796                           ;Music.c: 62:     if(TiGetTics(timerNote) > note){
  1797  001CAC  501E               	movf	_timerNote^0,w,c
  1798  001CAE  EC48  F00F         	call	_TiGetTics
  1799  001CB2  505E               	movf	playNote@note^0,w,c
  1800  001CB4  6E5C               	movwf	??_playNote^0,c
  1801  001CB6  6A5D               	clrf	(??_playNote+1)^0,c
  1802  001CB8  5055               	movf	?_TiGetTics^0,w,c
  1803  001CBA  5C5C               	subwf	??_playNote^0,w,c
  1804  001CBC  5056               	movf	(?_TiGetTics+1)^0,w,c
  1805  001CBE  585D               	subwfb	(??_playNote+1)^0,w,c
  1806  001CC0  B0D8               	btfsc	status,0,c
  1807  001CC2  0012               	return	
  1808                           
  1809                           ;Music.c: 63:         LATDbits.LATD3 = 1 - LATDbits.LATD3;
  1810  001CC4  A68C               	btfss	140,3,c	;volatile
  1811  001CC6  D003               	goto	u3040
  1812  001CC8  6A5C               	clrf	??_playNote^0,c
  1813  001CCA  2A5C               	incf	??_playNote^0,f,c
  1814  001CCC  D001               	goto	u3048
  1815  001CCE                     u3040:
  1816  001CCE  6A5C               	clrf	??_playNote^0,c
  1817  001CD0                     u3048:
  1818  001CD0  505C               	movf	??_playNote^0,w,c
  1819  001CD2  0801               	sublw	1
  1820  001CD4  6E5D               	movwf	(??_playNote+1)^0,c
  1821  001CD6  465D               	rlncf	(??_playNote+1)^0,f,c
  1822  001CD8  465D               	rlncf	(??_playNote+1)^0,f,c
  1823  001CDA  465D               	rlncf	(??_playNote+1)^0,f,c
  1824  001CDC  508C               	movf	140,w,c	;volatile
  1825  001CDE  185D               	xorwf	(??_playNote+1)^0,w,c
  1826  001CE0  0BF7               	andlw	-9
  1827  001CE2  185D               	xorwf	(??_playNote+1)^0,w,c
  1828  001CE4  6E8C               	movwf	140,c	;volatile
  1829                           
  1830                           ;Music.c: 64:         TiResetTics(timerNote);
  1831  001CE6  501E               	movf	_timerNote^0,w,c
  1832  001CE8  EF9C  F00F         	goto	_TiResetTics
  1833  001CEC                     __end_of_playNote:
  1834                           	callstack 0
  1835                           
  1836 ;; *************** function _motorKey *****************
  1837 ;; Defined at:
  1838 ;;		line 47 in file "Keypad.c"
  1839 ;; Parameters:    Size  Location     Type
  1840 ;;		None
  1841 ;; Auto vars:     Size  Location     Type
  1842 ;;		None
  1843 ;; Return value:  Size  Location     Type
  1844 ;;                  1    wreg      void 
  1845 ;; Registers used:
  1846 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1847 ;; Tracked objects:
  1848 ;;		On entry : 0/0
  1849 ;;		On exit  : 0/0
  1850 ;;		Unchanged: 0/0
  1851 ;; Data sizes:     COMRAM   BANK0   BANK1
  1852 ;;      Params:         0       0       0
  1853 ;;      Locals:         0       0       0
  1854 ;;      Temps:          2       0       0
  1855 ;;      Totals:         2       0       0
  1856 ;;Total ram usage:        2 bytes
  1857 ;; Hardware stack levels used: 1
  1858 ;; Hardware stack levels required when called: 4
  1859 ;; This function calls:
  1860 ;;		_KeyResetValue
  1861 ;;		_TiGetTics
  1862 ;;		_TiResetTics
  1863 ;;		___lbmod
  1864 ;; This function is called by:
  1865 ;;		_main
  1866 ;; This function uses a non-reentrant model
  1867 ;;
  1868                           
  1869                           	psect	text6
  1870  001404                     __ptext6:
  1871                           	callstack 0
  1872  001404                     _motorKey:
  1873                           	callstack 26
  1874                           
  1875                           ;Keypad.c: 48:     switch(keypadState){
  1876                           
  1877                           ;incstack = 0
  1878  001404  D08C               	goto	l5898
  1879  001406                     l5826:
  1880                           
  1881                           ;Keypad.c: 50:             rows = (rows+1) % 4;
  1882  001406  2836               	incf	_rows^0,w,c
  1883  001408  0B03               	andlw	3
  1884  00140A  6E36               	movwf	_rows^0,c
  1885                           
  1886                           ;Keypad.c: 51:             switch(rows){
  1887  00140C  D00C               	goto	l5830
  1888  00140E                     l701:
  1889                           
  1890                           ;Keypad.c: 53:                     (LATDbits.LATD7 = LATDbits.LATD6 = LATDbits.LATD5 = L
      +                          ATDbits.LATD4 = 1);
  1891  00140E  D897               	call	PL40	;call to abstracted procedure
  1892                           
  1893                           ;Keypad.c: 54:                     LATDbits.LATD4 = 0;
  1894  001410  988C               	bcf	140,4,c	;volatile
  1895                           
  1896                           ;Keypad.c: 55:                     break;
  1897  001412  D016               	goto	l5832
  1898  001414                     l703:
  1899                           
  1900                           ;Keypad.c: 58:                     (LATDbits.LATD7 = LATDbits.LATD6 = LATDbits.LATD5 = L
      +                          ATDbits.LATD4 = 1);
  1901  001414  D894               	call	PL40	;call to abstracted procedure
  1902                           
  1903                           ;Keypad.c: 59:                     LATDbits.LATD5 = 0;
  1904  001416  9A8C               	bcf	140,5,c	;volatile
  1905                           
  1906                           ;Keypad.c: 60:                     break;
  1907  001418  D013               	goto	l5832
  1908  00141A                     l704:
  1909                           
  1910                           ;Keypad.c: 63:                     (LATDbits.LATD7 = LATDbits.LATD6 = LATDbits.LATD5 = L
      +                          ATDbits.LATD4 = 1);
  1911  00141A  D891               	call	PL40	;call to abstracted procedure
  1912                           
  1913                           ;Keypad.c: 64:                     LATDbits.LATD6 = 0;
  1914  00141C  9C8C               	bcf	140,6,c	;volatile
  1915                           
  1916                           ;Keypad.c: 65:                     break;
  1917  00141E  D010               	goto	l5832
  1918  001420                     l705:
  1919                           
  1920                           ;Keypad.c: 68:                     (LATDbits.LATD7 = LATDbits.LATD6 = LATDbits.LATD5 = L
      +                          ATDbits.LATD4 = 1);
  1921  001420  D88E               	call	PL40	;call to abstracted procedure
  1922                           
  1923                           ;Keypad.c: 69:                     LATDbits.LATD7 = 0;
  1924  001422  9E8C               	bcf	140,7,c	;volatile
  1925                           
  1926                           ;Keypad.c: 70:                     break;
  1927  001424  D00D               	goto	l5832
  1928  001426                     l5830:
  1929  001426  5036               	movf	_rows^0,w,c
  1930  001428  6E5C               	movwf	??_motorKey^0,c
  1931  00142A  6A5D               	clrf	(??_motorKey+1)^0,c
  1932                           
  1933                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1934                           ; Switch size 1, requested type "space"
  1935                           ; Number of cases is 1, Range of values is 0 to 0
  1936                           ; switch strategies available:
  1937                           ; Name         Instructions Cycles
  1938                           ; simple_byte            4     3 (average)
  1939                           ;	Chosen strategy is simple_byte
  1940  00142C  505D               	movf	(??_motorKey+1)^0,w,c
  1941  00142E  E108               	bnz	l5832
  1942                           
  1943                           ; Switch size 1, requested type "space"
  1944                           ; Number of cases is 4, Range of values is 0 to 3
  1945                           ; switch strategies available:
  1946                           ; Name         Instructions Cycles
  1947                           ; simple_byte           13     7 (average)
  1948                           ;	Chosen strategy is simple_byte
  1949  001430  505C               	movf	??_motorKey^0,w,c
  1950  001432  E0ED               	bz	l701
  1951  001434  0A01               	xorlw	1	; case 1
  1952  001436  E0EE               	bz	l703
  1953  001438  0A03               	xorlw	3	; case 2
  1954  00143A  E0EF               	bz	l704
  1955  00143C  0A01               	xorlw	1	; case 3
  1956  00143E  E0F0               	bz	l705
  1957  001440                     l5832:
  1958                           
  1959                           ;Keypad.c: 72:             if(TiGetTics(timerKeypad)>1200) KeyResetValue();
  1960  001440  5038               	movf	_timerKeypad^0,w,c
  1961  001442  EC48  F00F         	call	_TiGetTics
  1962  001446  ECEB  F008         	call	PL42	;call to abstracted procedure
  1963  00144A  E302               	bnc	l5836
  1964  00144C  EC6F  F000         	call	_KeyResetValue	;wreg free
  1965  001450                     l5836:
  1966                           
  1967                           ;Keypad.c: 73:             if (!((PORTBbits.RB1) && (PORTBbits.RB2) && (PORTBbits.RB3))=
      +                          =1){
  1968  001450  B281               	btfsc	129,1,c	;volatile
  1969  001452  A481               	btfss	129,2,c	;volatile
  1970  001454  D002               	goto	u4720
  1971  001456  B681               	btfsc	129,3,c	;volatile
  1972  001458  0012               	return	
  1973  00145A                     u4720:
  1974                           
  1975                           ;Keypad.c: 74:                 ++keypadState;
  1976  00145A  2A37               	incf	_keypadState^0,f,c
  1977                           
  1978                           ;Keypad.c: 75:                 TiResetTics(timerKeypad);
  1979  00145C  5038               	movf	_timerKeypad^0,w,c
  1980  00145E  EF9C  F00F         	goto	_TiResetTics
  1981  001462                     l5846:
  1982                           
  1983                           ;Keypad.c: 80:             if(TiGetTics(timerKeypad) > 24)
  1984  001462  5038               	movf	_timerKeypad^0,w,c
  1985  001464  EC48  F00F         	call	_TiGetTics
  1986  001468  5056               	movf	(?_TiGetTics+1)^0,w,c
  1987  00146A  E104               	bnz	u4730
  1988  00146C  0E19               	movlw	25
  1989  00146E  5C55               	subwf	?_TiGetTics^0,w,c
  1990  001470  A0D8               	btfss	status,0,c
  1991  001472  0012               	return	
  1992  001474                     u4730:
  1993                           
  1994                           ;Keypad.c: 81:                 if(!((PORTBbits.RB1) && (PORTBbits.RB2) && (PORTBbits.RB3
      +                          ))==1){
  1995  001474  B281               	btfsc	129,1,c	;volatile
  1996  001476  A481               	btfss	129,2,c	;volatile
  1997  001478  D002               	goto	u4760
  1998  00147A  B681               	btfsc	129,3,c	;volatile
  1999  00147C  D00E               	goto	l5862
  2000  00147E                     u4760:
  2001                           
  2002                           ;Keypad.c: 82:                     if(PORTBbits.RB2 == 0) cols=0;
  2003  00147E  B481               	btfsc	129,2,c	;volatile
  2004  001480  D002               	goto	l716
  2005  001482  6A35               	clrf	_cols^0,c
  2006  001484  D008               	goto	l5860
  2007  001486                     l716:
  2008  001486  B281               	btfsc	129,1,c	;volatile
  2009  001488  D002               	goto	l718
  2010  00148A  0E01               	movlw	1
  2011  00148C  D003               	goto	L1
  2012  00148E                     l718:
  2013  00148E  B681               	btfsc	129,3,c	;volatile
  2014  001490  D002               	goto	l5860
  2015  001492  0E02               	movlw	2
  2016  001494                     L1:
  2017  001494  6E35               	movwf	_cols^0,c
  2018  001496                     l5860:
  2019                           
  2020                           ;Keypad.c: 85:                     ++keypadState;
  2021  001496  2A37               	incf	_keypadState^0,f,c
  2022                           
  2023                           ;Keypad.c: 86:                 }
  2024  001498  0012               	return	
  2025  00149A                     l5862:
  2026  00149A  0637               	decf	_keypadState^0,f,c
  2027  00149C  0012               	return	
  2028  00149E                     l722:
  2029                           
  2030                           ;Keypad.c: 90:             valueOld = value;
  2031  00149E  C032  F031         	movff	_value,_valueOld
  2032                           
  2033                           ;Keypad.c: 91:             value = text[rows][cols];
  2034  0014A2  5036               	movf	_rows^0,w,c
  2035  0014A4  0D03               	mullw	3
  2036  0014A6  50F3               	movf	243,w,c
  2037  0014A8  0F33               	addlw	low _text
  2038  0014AA  2435               	addwf	_cols^0,w,c
  2039  0014AC  D84D               	call	PL54	;call to abstracted procedure
  2040  0014AE  CFF5 F032          	movff	tablat,_value
  2041                           
  2042                           ;Keypad.c: 92:             if(value == valueOld)++press;
  2043  0014B2  5031               	movf	_valueOld^0,w,c
  2044  0014B4  1832               	xorwf	_value^0,w,c
  2045  0014B6  E101               	bnz	l5870
  2046  0014B8  2A34               	incf	_press^0,f,c
  2047  0014BA                     l5870:
  2048                           
  2049                           ;Keypad.c: 93:             if (value == '#'||value == '*') SMS = value;
  2050  0014BA  0E23               	movlw	35
  2051  0014BC  1832               	xorwf	_value^0,w,c
  2052  0014BE  E003               	bz	u4820
  2053  0014C0  0E2A               	movlw	42
  2054  0014C2  1832               	xorwf	_value^0,w,c
  2055  0014C4  E103               	bnz	l5874
  2056  0014C6                     u4820:
  2057  0014C6  C032  F030         	movff	_value,_SMS
  2058  0014CA  D7E5               	goto	l5860
  2059  0014CC                     l5874:
  2060                           
  2061                           ;Keypad.c: 95:                 SMS = textSMS[value][press%5];
  2062  0014CC  0E05               	movlw	5
  2063  0014CE  6E55               	movwf	___lbmod@divisor^0,c
  2064  0014D0  5034               	movf	_press^0,w,c
  2065  0014D2  EC35  F00F         	call	___lbmod
  2066  0014D6  6E5C               	movwf	??_motorKey^0,c
  2067  0014D8  D83E               	call	PL74	;call to abstracted procedure
  2068  0014DA  245C               	addwf	??_motorKey^0,w,c
  2069  0014DC  6E5D               	movwf	(??_motorKey+1)^0,c
  2070  0014DE  C05D  FFF6         	movff	??_motorKey+1,tblptrl
  2071  0014E2                     	if	1	;There is more than 1 active tblptr byte
  2072  0014E2  0E02               	movlw	high __smallconst
  2073  0014E4  6EF7               	movwf	tblptrh,c
  2074  0014E6                     	endif
  2075  0014E6                     	if	0	;tblptru may be non-zero
  2076  0014E6                     	endif
  2077  0014E6                     	if	0	;tblptru may be non-zero
  2078  0014E6                     	endif
  2079  0014E6  0008               	tblrd		*
  2080  0014E8  CFF5 F030          	movff	tablat,_SMS
  2081                           
  2082                           ;Keypad.c: 96:                 if( SMS == '%'|| press==5){
  2083  0014EC  0E25               	movlw	37
  2084  0014EE  1830               	xorwf	_SMS^0,w,c
  2085  0014F0  E003               	bz	u4840
  2086  0014F2  0E05               	movlw	5
  2087  0014F4  1834               	xorwf	_press^0,w,c
  2088  0014F6  E1CF               	bnz	l5860
  2089  0014F8                     u4840:
  2090                           
  2091                           ;Keypad.c: 97:                     rotating = 2;
  2092  0014F8  0E02               	movlw	2
  2093  0014FA  6E33               	movwf	_rotating^0,c
  2094                           
  2095                           ;Keypad.c: 98:                     press=0;
  2096  0014FC  6A34               	clrf	_press^0,c
  2097                           
  2098                           ;Keypad.c: 99:                     SMS = textSMS[value][press];
  2099  0014FE  D82B               	call	PL74	;call to abstracted procedure
  2100  001500  2434               	addwf	_press^0,w,c
  2101  001502  D822               	call	PL54	;call to abstracted procedure
  2102  001504  CFF5 F030          	movff	tablat,_SMS
  2103  001508  D7C6               	goto	l5860
  2104  00150A                     l731:
  2105                           
  2106                           ;Keypad.c: 105:             if (!((PORTBbits.RB1) && (PORTBbits.RB2) && (PORTBbits.RB3))
      +                          ==0){
  2107  00150A  B281               	btfsc	129,1,c	;volatile
  2108  00150C  A481               	btfss	129,2,c	;volatile
  2109  00150E  0012               	return	
  2110  001510  A681               	btfss	129,3,c	;volatile
  2111  001512  0012               	return	
  2112                           
  2113                           ;Keypad.c: 106:                 TiResetTics(timerKeypad);
  2114  001514  5038               	movf	_timerKeypad^0,w,c
  2115  001516  EC9C  F00F         	call	_TiResetTics
  2116                           
  2117                           ;Keypad.c: 107:                 keypadState=0;
  2118  00151A  6A37               	clrf	_keypadState^0,c
  2119  00151C  0012               	return	
  2120  00151E                     l5898:
  2121  00151E  5037               	movf	_keypadState^0,w,c
  2122  001520  6E5C               	movwf	??_motorKey^0,c
  2123  001522  6A5D               	clrf	(??_motorKey+1)^0,c
  2124                           
  2125                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2126                           ; Switch size 1, requested type "space"
  2127                           ; Number of cases is 1, Range of values is 0 to 0
  2128                           ; switch strategies available:
  2129                           ; Name         Instructions Cycles
  2130                           ; simple_byte            4     3 (average)
  2131                           ;	Chosen strategy is simple_byte
  2132  001524  505D               	movf	(??_motorKey+1)^0,w,c
  2133  001526  A4D8               	btfss	status,2,c
  2134  001528  0012               	return	
  2135                           
  2136                           ; Switch size 1, requested type "space"
  2137                           ; Number of cases is 4, Range of values is 0 to 3
  2138                           ; switch strategies available:
  2139                           ; Name         Instructions Cycles
  2140                           ; simple_byte           13     7 (average)
  2141                           ;	Chosen strategy is simple_byte
  2142  00152A  505C               	movf	??_motorKey^0,w,c
  2143  00152C  E101 D76B          	bz	l5826
  2144  001530  0A01               	xorlw	1	; case 1
  2145  001532  E097               	bz	l5846
  2146  001534  0A03               	xorlw	3	; case 2
  2147  001536  E0B3               	bz	l722
  2148  001538  0A01               	xorlw	1	; case 3
  2149  00153A  E0E7               	bz	l731
  2150  00153C  0012               	return		;funcret
  2151  00153E                     __end_of_motorKey:
  2152                           	callstack 0
  2153  00153E                     PL40:
  2154                           	callstack 27
  2155  00153E  888C               	bsf	140,4,c	;volatile
  2156  001540  8A8C               	bsf	140,5,c	;volatile
  2157  001542  8C8C               	bsf	140,6,c	;volatile
  2158  001544  8E8C               	bsf	140,7,c	;volatile
  2159  001546  0012               	return	
  2160  001548                     __end_ofPL40:
  2161                           	callstack 0
  2162  001548                     PL54:
  2163                           	callstack 26
  2164  001548  6E5C               	movwf	??_motorKey^0,c
  2165  00154A  C05C  FFF6         	movff	??_motorKey,tblptrl
  2166  00154E                     	if	1	;There is more than 1 active tblptr byte
  2167  00154E  0E02               	movlw	high __smallconst
  2168  001550  6EF7               	movwf	tblptrh,c
  2169  001552                     	endif
  2170  001552                     	if	0	;tblptru may be non-zero
  2171  001552                     	endif
  2172  001552                     	if	0	;tblptru may be non-zero
  2173  001552                     	endif
  2174  001552  0008               	tblrd		*
  2175  001554  0012               	return	
  2176  001556                     __end_ofPL54:
  2177                           	callstack 0
  2178  001556                     PL74:
  2179                           	callstack 26
  2180  001556  5032               	movf	_value^0,w,c
  2181  001558  0D05               	mullw	5
  2182  00155A  50F3               	movf	243,w,c
  2183  00155C  0F01               	addlw	low _textSMS
  2184  00155E  0012               	return	
  2185  001560                     __end_ofPL74:
  2186                           	callstack 0
  2187                           
  2188 ;; *************** function _motorJoystick *****************
  2189 ;; Defined at:
  2190 ;;		line 20 in file "Joystick.c"
  2191 ;; Parameters:    Size  Location     Type
  2192 ;;		None
  2193 ;; Auto vars:     Size  Location     Type
  2194 ;;		None
  2195 ;; Return value:  Size  Location     Type
  2196 ;;                  1    wreg      void 
  2197 ;; Registers used:
  2198 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2199 ;; Tracked objects:
  2200 ;;		On entry : 0/0
  2201 ;;		On exit  : 0/0
  2202 ;;		Unchanged: 0/0
  2203 ;; Data sizes:     COMRAM   BANK0   BANK1
  2204 ;;      Params:         0       0       0
  2205 ;;      Locals:         0       0       0
  2206 ;;      Temps:          2       0       0
  2207 ;;      Totals:         2       0       0
  2208 ;;Total ram usage:        2 bytes
  2209 ;; Hardware stack levels used: 1
  2210 ;; Hardware stack levels required when called: 3
  2211 ;; This function calls:
  2212 ;;		_TXbusy
  2213 ;;		_TiGetTics
  2214 ;;		_TiResetTics
  2215 ;;		_getGame
  2216 ;;		_getPositionJoystick
  2217 ;;		_resetPositionJoystick
  2218 ;;		_setTX
  2219 ;; This function is called by:
  2220 ;;		_main
  2221 ;; This function uses a non-reentrant model
  2222 ;;
  2223                           
  2224                           	psect	text7
  2225  001560                     __ptext7:
  2226                           	callstack 0
  2227  001560                     _motorJoystick:
  2228                           	callstack 27
  2229                           
  2230                           ;Joystick.c: 21:     switch(state){
  2231                           
  2232                           ;incstack = 0
  2233  001560  D057               	goto	l5818
  2234  001562                     l5748:
  2235                           
  2236                           ;Joystick.c: 23:             if(TiGetTics(timerJoystick) > 24){
  2237  001562  5039               	movf	_timerJoystick^0,w,c
  2238  001564  EC48  F00F         	call	_TiGetTics
  2239  001568  5056               	movf	(?_TiGetTics+1)^0,w,c
  2240  00156A  E104               	bnz	u4530
  2241  00156C  0E19               	movlw	25
  2242  00156E  5C55               	subwf	?_TiGetTics^0,w,c
  2243  001570  A0D8               	btfss	status,0,c
  2244  001572  0012               	return	
  2245  001574                     u4530:
  2246                           
  2247                           ;Joystick.c: 24:               if(ADCON0bits.CHS0 == 0){
  2248  001574  B4C2               	btfsc	194,2,c	;volatile
  2249  001576  D004               	goto	l582
  2250                           
  2251                           ;Joystick.c: 25:                 ADCON0bits.CHS0 = 1;
  2252  001578  84C2               	bsf	194,2,c	;volatile
  2253                           
  2254                           ;Joystick.c: 26:                 state = 2;
  2255  00157A  0E02               	movlw	2
  2256  00157C  6E3B               	movwf	_state^0,c
  2257                           
  2258                           ;Joystick.c: 27:                 } else {
  2259  00157E  D002               	goto	l5758
  2260  001580                     l582:
  2261                           
  2262                           ;Joystick.c: 28:                     ADCON0bits.CHS0 = 0;
  2263  001580  94C2               	bcf	194,2,c	;volatile
  2264                           
  2265                           ;Joystick.c: 29:                     ++state;
  2266  001582  2A3B               	incf	_state^0,f,c
  2267  001584                     l5758:
  2268                           
  2269                           ;Joystick.c: 31:                 ADCON0bits.DONE = 1;
  2270  001584  82C2               	bsf	194,1,c	;volatile
  2271  001586  0012               	return	
  2272  001588                     l585:
  2273                           
  2274                           ;Joystick.c: 36:             if (ADCON0bits.DONE == 0){
  2275  001588  B2C2               	btfsc	194,1,c	;volatile
  2276  00158A  0012               	return	
  2277                           
  2278                           ;Joystick.c: 37:                 if(ADRESH > 180){
  2279  00158C  0EB4               	movlw	180
  2280  00158E  64C4               	cpfsgt	196,c	;volatile
  2281  001590  D002               	goto	l5766
  2282                           
  2283                           ;Joystick.c: 38:                     positionJoystick = 'D';
  2284  001592  0E44               	movlw	68
  2285  001594  D00E               	goto	L3
  2286  001596                     l5766:
  2287  001596  0E46               	movlw	70
  2288  001598  60C4               	cpfslt	196,c	;volatile
  2289  00159A  D002               	goto	l5772
  2290                           
  2291                           ;Joystick.c: 41:                     positionJoystick = 'A';
  2292  00159C  0E41               	movlw	65
  2293  00159E  D009               	goto	L3
  2294  0015A0                     l5772:
  2295                           
  2296                           ;Joystick.c: 45:                     centre = 1;
  2297  0015A0  0E01               	movlw	1
  2298  0015A2  D010               	goto	L15
  2299  0015A4                     l588:
  2300                           
  2301                           ;Joystick.c: 47:                 state = 3;
  2302                           
  2303                           ;Joystick.c: 48:                 ADCON0bits.DONE = 1;
  2304  0015A4  D044               	goto	PL72	;call to abstracted procedure
  2305  0015A6                     l591:
  2306                           
  2307                           ;Joystick.c: 53:             if (ADCON0bits.DONE == 0){
  2308  0015A6  B2C2               	btfsc	194,1,c	;volatile
  2309  0015A8  0012               	return	
  2310                           
  2311                           ;Joystick.c: 54:                 if(ADRESH > 180){
  2312  0015AA  0EB4               	movlw	180
  2313  0015AC  64C4               	cpfsgt	196,c	;volatile
  2314  0015AE  D004               	goto	l5782
  2315                           
  2316                           ;Joystick.c: 55:                     positionJoystick = 'S';
  2317  0015B0  0E53               	movlw	83
  2318  0015B2                     L3:
  2319  0015B2  6E3C               	movwf	_positionJoystick@Joystick$F704^0,c
  2320                           
  2321                           ;Joystick.c: 56:                     centre = 0;
  2322  0015B4  6A3A               	clrf	_centre^0,c
  2323                           
  2324                           ;Joystick.c: 57:                 }else if(ADRESH < 70){
  2325  0015B6  D03B               	goto	PL72
  2326  0015B8                     l5782:
  2327  0015B8  0E46               	movlw	70
  2328  0015BA  60C4               	cpfslt	196,c	;volatile
  2329  0015BC  D002               	goto	l5788
  2330                           
  2331                           ;Joystick.c: 58:                     positionJoystick = 'W';
  2332  0015BE  0E57               	movlw	87
  2333  0015C0  D7F8               	goto	L3
  2334  0015C2                     l5788:
  2335                           
  2336                           ;Joystick.c: 62:                     centre = 2;
  2337  0015C2  0E02               	movlw	2
  2338  0015C4                     L15:
  2339  0015C4  6E3A               	movwf	_centre^0,c
  2340  0015C6                     l594:
  2341                           
  2342                           ;Joystick.c: 64:                 state = 3;
  2343                           
  2344                           ;Joystick.c: 65:                 ADCON0bits.DONE = 1;
  2345  0015C6  D033               	goto	PL72	;call to abstracted procedure
  2346  0015C8                     l5792:
  2347                           
  2348                           ;Joystick.c: 70:             if((positionJoystick == 'S' || positionJoystick == 'W') && 
      +                          centre == 2 || (positionJoystick == 'A' || positionJoystick == 'D') && centre == 1){
  2349  0015C8  0E53               	movlw	83
  2350  0015CA  183C               	xorwf	_positionJoystick@Joystick$F704^0,w,c
  2351  0015CC  E003               	bz	u4620
  2352  0015CE  0E57               	movlw	87
  2353  0015D0  183C               	xorwf	_positionJoystick@Joystick$F704^0,w,c
  2354  0015D2  E103               	bnz	u4630
  2355  0015D4                     u4620:
  2356  0015D4  0E02               	movlw	2
  2357  0015D6  183A               	xorwf	_centre^0,w,c
  2358  0015D8  E008               	bz	u4660
  2359  0015DA                     u4630:
  2360  0015DA  0E41               	movlw	65
  2361  0015DC  183C               	xorwf	_positionJoystick@Joystick$F704^0,w,c
  2362  0015DE  E003               	bz	u4650
  2363  0015E0  0E44               	movlw	68
  2364  0015E2  183C               	xorwf	_positionJoystick@Joystick$F704^0,w,c
  2365  0015E4  E110               	bnz	l5812
  2366  0015E6                     u4650:
  2367  0015E6  043A               	decf	_centre^0,w,c
  2368  0015E8  E10E               	bnz	l5812
  2369  0015EA                     u4660:
  2370                           
  2371                           ;Joystick.c: 71:                 if(TXbusy()==1 && getGame()==1){
  2372  0015EA  ECAD  F000         	call	_TXbusy	;wreg free
  2373  0015EE  06E8               	decf	wreg,f,c
  2374  0015F0  E10A               	bnz	l5812
  2375  0015F2  ECB9  F000         	call	_getGame	;wreg free
  2376  0015F6  06E8               	decf	wreg,f,c
  2377  0015F8  E106               	bnz	l5812
  2378                           
  2379                           ;Joystick.c: 72:                     setTX(getPositionJoystick());
  2380  0015FA  ECC3  F000         	call	_getPositionJoystick	;wreg free
  2381  0015FE  ECA3  F000         	call	_setTX
  2382                           
  2383                           ;Joystick.c: 73:                     resetPositionJoystick();
  2384  001602  ECBD  F000         	call	_resetPositionJoystick	;wreg free
  2385  001606                     l5812:
  2386                           
  2387                           ;Joystick.c: 76:             TiResetTics(timerJoystick);
  2388  001606  5039               	movf	_timerJoystick^0,w,c
  2389  001608  EC9C  F00F         	call	_TiResetTics
  2390                           
  2391                           ;Joystick.c: 77:             state = 0;
  2392  00160C  6A3B               	clrf	_state^0,c
  2393                           
  2394                           ;Joystick.c: 78:             break;
  2395  00160E  0012               	return	
  2396  001610                     l5818:
  2397  001610  503B               	movf	_state^0,w,c
  2398  001612  6E5C               	movwf	??_motorJoystick^0,c
  2399  001614  6A5D               	clrf	(??_motorJoystick+1)^0,c
  2400                           
  2401                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2402                           ; Switch size 1, requested type "space"
  2403                           ; Number of cases is 1, Range of values is 0 to 0
  2404                           ; switch strategies available:
  2405                           ; Name         Instructions Cycles
  2406                           ; simple_byte            4     3 (average)
  2407                           ;	Chosen strategy is simple_byte
  2408  001616  505D               	movf	(??_motorJoystick+1)^0,w,c
  2409  001618  A4D8               	btfss	status,2,c
  2410  00161A  0012               	return	
  2411                           
  2412                           ; Switch size 1, requested type "space"
  2413                           ; Number of cases is 4, Range of values is 0 to 3
  2414                           ; switch strategies available:
  2415                           ; Name         Instructions Cycles
  2416                           ; simple_byte           13     7 (average)
  2417                           ;	Chosen strategy is simple_byte
  2418  00161C  505C               	movf	??_motorJoystick^0,w,c
  2419  00161E  E0A1               	bz	l5748
  2420  001620  0A01               	xorlw	1	; case 1
  2421  001622  E0B2               	bz	l585
  2422  001624  0A03               	xorlw	3	; case 2
  2423  001626  E0BF               	bz	l591
  2424  001628  0A01               	xorlw	1	; case 3
  2425  00162A  E0CE               	bz	l5792
  2426  00162C  0012               	return		;funcret
  2427  00162E                     __end_of_motorJoystick:
  2428                           	callstack 0
  2429  00162E                     PL72:
  2430                           	callstack 27
  2431  00162E  0E03               	movlw	3
  2432  001630  6E3B               	movwf	_state^0,c
  2433  001632  82C2               	bsf	194,1,c	;volatile
  2434  001634  0C03               	retlw	3
  2435  001636                     __end_ofPL72:
  2436                           	callstack 0
  2437                           
  2438 ;; *************** function _getGame *****************
  2439 ;; Defined at:
  2440 ;;		line 924 in file "Menu.c"
  2441 ;; Parameters:    Size  Location     Type
  2442 ;;		None
  2443 ;; Auto vars:     Size  Location     Type
  2444 ;;		None
  2445 ;; Return value:  Size  Location     Type
  2446 ;;                  1    wreg      unsigned char 
  2447 ;; Registers used:
  2448 ;;		wreg, status,2
  2449 ;; Tracked objects:
  2450 ;;		On entry : 0/0
  2451 ;;		On exit  : 0/0
  2452 ;;		Unchanged: 0/0
  2453 ;; Data sizes:     COMRAM   BANK0   BANK1
  2454 ;;      Params:         0       0       0
  2455 ;;      Locals:         0       0       0
  2456 ;;      Temps:          0       0       0
  2457 ;;      Totals:         0       0       0
  2458 ;;Total ram usage:        0 bytes
  2459 ;; Hardware stack levels used: 1
  2460 ;; Hardware stack levels required when called: 2
  2461 ;; This function calls:
  2462 ;;		Nothing
  2463 ;; This function is called by:
  2464 ;;		_motorJoystick
  2465 ;; This function uses a non-reentrant model
  2466 ;;
  2467                           
  2468                           	psect	text8
  2469  000172                     __ptext8:
  2470                           	callstack 0
  2471  000172                     _getGame:
  2472                           	callstack 27
  2473                           
  2474                           ;Menu.c: 925:     return gameON;
  2475                           
  2476                           ;incstack = 0
  2477  000172  503D               	movf	_gameON^0,w,c
  2478  000174  0012               	return		;funcret
  2479  000176                     __end_of_getGame:
  2480                           	callstack 0
  2481                           
  2482 ;; *************** function _motorEeprom *****************
  2483 ;; Defined at:
  2484 ;;		line 19 in file "EEPROM.c"
  2485 ;; Parameters:    Size  Location     Type
  2486 ;;		None
  2487 ;; Auto vars:     Size  Location     Type
  2488 ;;		None
  2489 ;; Return value:  Size  Location     Type
  2490 ;;                  1    wreg      void 
  2491 ;; Registers used:
  2492 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  2493 ;; Tracked objects:
  2494 ;;		On entry : 0/0
  2495 ;;		On exit  : 0/0
  2496 ;;		Unchanged: 0/0
  2497 ;; Data sizes:     COMRAM   BANK0   BANK1
  2498 ;;      Params:         0       0       0
  2499 ;;      Locals:         0       0       0
  2500 ;;      Temps:          2       0       0
  2501 ;;      Totals:         2       0       0
  2502 ;;Total ram usage:        2 bytes
  2503 ;; Hardware stack levels used: 1
  2504 ;; Hardware stack levels required when called: 2
  2505 ;; This function calls:
  2506 ;;		Nothing
  2507 ;; This function is called by:
  2508 ;;		_main
  2509 ;; This function uses a non-reentrant model
  2510 ;;
  2511                           
  2512                           	psect	text9
  2513  00123A                     __ptext9:
  2514                           	callstack 0
  2515  00123A                     _motorEeprom:
  2516                           	callstack 28
  2517                           
  2518                           ;EEPROM.c: 20:     switch(eepromState){
  2519                           
  2520                           ;incstack = 0
  2521  00123A  D0A6               	goto	l6104
  2522  00123C                     l5910:
  2523                           
  2524                           ;EEPROM.c: 23:             EEADR = numAddress*18+10 + pointerEeprom;
  2525  00123C  D8C7               	call	PL22	;call to abstracted procedure
  2526                           
  2527                           ;EEPROM.c: 24:             EEDATA = user.username[pointer];
  2528  00123E  D8D6               	call	PL60	;call to abstracted procedure
  2529  001240  50DF               	movf	indf2,w,c
  2530  001242  6EA8               	movwf	168,c	;volatile
  2531                           
  2532                           ;EEPROM.c: 26:             EECON1bits.EEPGD = 0;
  2533  001244  9EA6               	bcf	166,7,c	;volsfr
  2534                           
  2535                           ;EEPROM.c: 27:             EECON1bits.CFGS = 0;
  2536  001246  9CA6               	bcf	166,6,c	;volsfr
  2537                           
  2538                           ;EEPROM.c: 28:             EECON1bits.WREN = 1;
  2539  001248  84A6               	bsf	166,2,c	;volsfr
  2540                           
  2541                           ;EEPROM.c: 29:             INTCONbits.GIE = 0;
  2542  00124A  9EF2               	bcf	242,7,c	;volatile
  2543                           
  2544                           ;EEPROM.c: 30:             EECON2 = 0x55;
  2545  00124C  0E55               	movlw	85
  2546  00124E  6EA7               	movwf	167,c	;volsfr
  2547                           
  2548                           ;EEPROM.c: 31:             EECON2 = 0xAA;
  2549  001250  0EAA               	movlw	170
  2550  001252  6EA7               	movwf	167,c	;volsfr
  2551                           
  2552                           ;EEPROM.c: 32:             EECON1bits.WR = 1;
  2553  001254  82A6               	bsf	166,1,c	;volsfr
  2554                           
  2555                           ;EEPROM.c: 33:             INTCONbits.GIE = 1;
  2556  001256  8EF2               	bsf	242,7,c	;volatile
  2557                           
  2558                           ;EEPROM.c: 34:             EECON1bits.WREN = 0;
  2559  001258  94A6               	bcf	166,2,c	;volsfr
  2560                           
  2561                           ;EEPROM.c: 35:             ++pointerEeprom;
  2562  00125A  2A23               	incf	_pointerEeprom^0,f,c
  2563                           
  2564                           ;EEPROM.c: 36:             if(user.username[pointer] != '\0'){
  2565  00125C  D8C7               	call	PL60	;call to abstracted procedure
  2566  00125E  50DF               	movf	indf2,w,c
  2567  001260  E005               	bz	l1021
  2568                           
  2569                           ;EEPROM.c: 37:                 ++pointer;
  2570  001262  2A24               	incf	_pointer@EEPROM$F1753^0,f,c
  2571                           
  2572                           ;EEPROM.c: 38:                 aux = 0;
  2573  001264  6A20               	clrf	_aux@EEPROM$F1757^0,c
  2574  001266                     l5940:
  2575                           
  2576                           ;EEPROM.c: 39:                 eepromState = 4;
  2577  001266  0E04               	movlw	4
  2578  001268  6E21               	movwf	_eepromState^0,c
  2579                           
  2580                           ;EEPROM.c: 40:             }
  2581  00126A  0C04               	retlw	4
  2582  00126C                     l1021:
  2583                           
  2584                           ;EEPROM.c: 42:                 pointer = 0;
  2585  00126C  6A24               	clrf	_pointer@EEPROM$F1753^0,c
  2586                           
  2587                           ;EEPROM.c: 43:                 aux = 1;
  2588  00126E  0E01               	movlw	1
  2589                           
  2590                           ;EEPROM.c: 44:                 eepromState = 4;
  2591  001270  D0C2               	goto	PL78	;call to abstracted procedure
  2592  001272                     l5944:
  2593                           
  2594                           ;EEPROM.c: 50:             EEADR = numAddress*18+10 + pointerEeprom;
  2595  001272  D8AC               	call	PL22	;call to abstracted procedure
  2596                           
  2597                           ;EEPROM.c: 51:             EEDATA = user.password[pointer];
  2598  001274  D8B2               	call	PL52	;call to abstracted procedure
  2599  001276  50DF               	movf	indf2,w,c
  2600  001278  6EA8               	movwf	168,c	;volatile
  2601                           
  2602                           ;EEPROM.c: 52:             EECON1bits.EEPGD = 0;
  2603  00127A  9EA6               	bcf	166,7,c	;volsfr
  2604                           
  2605                           ;EEPROM.c: 53:             EECON1bits.CFGS = 0;
  2606  00127C  9CA6               	bcf	166,6,c	;volsfr
  2607                           
  2608                           ;EEPROM.c: 54:             EECON1bits.WREN = 1;
  2609  00127E  84A6               	bsf	166,2,c	;volsfr
  2610                           
  2611                           ;EEPROM.c: 55:             INTCONbits.GIE = 0;
  2612  001280  9EF2               	bcf	242,7,c	;volatile
  2613                           
  2614                           ;EEPROM.c: 56:             EECON2 = 0x55;
  2615  001282  0E55               	movlw	85
  2616  001284  6EA7               	movwf	167,c	;volsfr
  2617                           
  2618                           ;EEPROM.c: 57:             EECON2 = 0xAA;
  2619  001286  0EAA               	movlw	170
  2620  001288  6EA7               	movwf	167,c	;volsfr
  2621                           
  2622                           ;EEPROM.c: 58:             EECON1bits.WR = 1;
  2623  00128A  82A6               	bsf	166,1,c	;volsfr
  2624                           
  2625                           ;EEPROM.c: 59:             INTCONbits.GIE = 1;
  2626  00128C  8EF2               	bsf	242,7,c	;volatile
  2627                           
  2628                           ;EEPROM.c: 60:             EECON1bits.WREN = 0;
  2629  00128E  94A6               	bcf	166,2,c	;volsfr
  2630                           
  2631                           ;EEPROM.c: 61:             ++pointerEeprom;
  2632  001290  2A23               	incf	_pointerEeprom^0,f,c
  2633                           
  2634                           ;EEPROM.c: 62:             if(user.password[pointer] != '\0'){
  2635  001292  D8A3               	call	PL52	;call to abstracted procedure
  2636  001294  50DF               	movf	indf2,w,c
  2637  001296  E027               	bz	l6016
  2638                           
  2639                           ;EEPROM.c: 63:                 ++pointer;
  2640  001298  2A24               	incf	_pointer@EEPROM$F1753^0,f,c
  2641                           
  2642                           ;EEPROM.c: 64:                 aux = 1;
  2643  00129A  0E01               	movlw	1
  2644  00129C  D012               	goto	L4
  2645  00129E                     l5976:
  2646  00129E  D023               	goto	l6016
  2647  0012A0                     l1027:
  2648                           
  2649                           ;EEPROM.c: 74:             EEADR = numAddress;
  2650  0012A0  C01F  FFA9         	movff	_numAddress,4009	;volatile
  2651                           
  2652                           ;EEPROM.c: 75:             EEDATA = topScore.score;
  2653  0012A4  C00D  FFA8         	movff	_topScore,4008	;volatile
  2654                           
  2655                           ;EEPROM.c: 76:             EECON1bits.EEPGD = 0;
  2656  0012A8  9EA6               	bcf	166,7,c	;volsfr
  2657                           
  2658                           ;EEPROM.c: 77:             EECON1bits.CFGS = 0;
  2659  0012AA  9CA6               	bcf	166,6,c	;volsfr
  2660                           
  2661                           ;EEPROM.c: 78:             EECON1bits.WREN = 1;
  2662  0012AC  84A6               	bsf	166,2,c	;volsfr
  2663                           
  2664                           ;EEPROM.c: 79:             INTCONbits.GIE = 0;
  2665  0012AE  9EF2               	bcf	242,7,c	;volatile
  2666                           
  2667                           ;EEPROM.c: 80:             EECON2 = 0x55;
  2668  0012B0  0E55               	movlw	85
  2669  0012B2  6EA7               	movwf	167,c	;volsfr
  2670                           
  2671                           ;EEPROM.c: 81:             EECON2 = 0xAA;
  2672  0012B4  0EAA               	movlw	170
  2673  0012B6  6EA7               	movwf	167,c	;volsfr
  2674                           
  2675                           ;EEPROM.c: 82:             EECON1bits.WR = 1;
  2676  0012B8  82A6               	bsf	166,1,c	;volsfr
  2677                           
  2678                           ;EEPROM.c: 83:             INTCONbits.GIE = 1;
  2679  0012BA  8EF2               	bsf	242,7,c	;volatile
  2680                           
  2681                           ;EEPROM.c: 84:             EECON1bits.WREN = 0;
  2682  0012BC  94A6               	bcf	166,2,c	;volsfr
  2683                           
  2684                           ;EEPROM.c: 85:             ++pointerEeprom;
  2685  0012BE  2A23               	incf	_pointerEeprom^0,f,c
  2686                           
  2687                           ;EEPROM.c: 86:             aux = 3;
  2688  0012C0  0E03               	movlw	3
  2689  0012C2                     L4:
  2690  0012C2  6E20               	movwf	_aux@EEPROM$F1757^0,c
  2691  0012C4  D7D0               	goto	l5940
  2692  0012C6                     l5992:
  2693                           
  2694                           ;EEPROM.c: 91:             EEADR = numAddress + 1;
  2695  0012C6  281F               	incf	_numAddress^0,w,c
  2696  0012C8  6EA9               	movwf	169,c	;volatile
  2697                           
  2698                           ;EEPROM.c: 92:             EEDATA = topScore.user;
  2699  0012CA  C00E  FFA8         	movff	_topScore+1,4008	;volatile
  2700                           
  2701                           ;EEPROM.c: 93:             EECON1bits.EEPGD = 0;
  2702  0012CE  9EA6               	bcf	166,7,c	;volsfr
  2703                           
  2704                           ;EEPROM.c: 94:             EECON1bits.CFGS = 0;
  2705  0012D0  9CA6               	bcf	166,6,c	;volsfr
  2706                           
  2707                           ;EEPROM.c: 95:             EECON1bits.WREN = 1;
  2708  0012D2  84A6               	bsf	166,2,c	;volsfr
  2709                           
  2710                           ;EEPROM.c: 96:             INTCONbits.GIE = 0;
  2711  0012D4  9EF2               	bcf	242,7,c	;volatile
  2712                           
  2713                           ;EEPROM.c: 97:             EECON2 = 0x55;
  2714  0012D6  0E55               	movlw	85
  2715  0012D8  6EA7               	movwf	167,c	;volsfr
  2716                           
  2717                           ;EEPROM.c: 98:             EECON2 = 0xAA;
  2718  0012DA  0EAA               	movlw	170
  2719  0012DC  6EA7               	movwf	167,c	;volsfr
  2720                           
  2721                           ;EEPROM.c: 99:             EECON1bits.WR = 1;
  2722  0012DE  82A6               	bsf	166,1,c	;volsfr
  2723                           
  2724                           ;EEPROM.c: 100:             INTCONbits.GIE = 1;
  2725  0012E0  8EF2               	bsf	242,7,c	;volatile
  2726                           
  2727                           ;EEPROM.c: 101:             EECON1bits.WREN = 0;
  2728  0012E2  94A6               	bcf	166,2,c	;volsfr
  2729                           
  2730                           ;EEPROM.c: 102:             ++pointerEeprom;
  2731  0012E4  2A23               	incf	_pointerEeprom^0,f,c
  2732  0012E6                     l6016:
  2733                           
  2734                           ;EEPROM.c: 103:             eepromState = 10;
  2735  0012E6  0E0A               	movlw	10
  2736  0012E8  6E21               	movwf	_eepromState^0,c
  2737  0012EA                     l6018:
  2738                           
  2739                           ;EEPROM.c: 104:             doneCharging = 1;
  2740                           
  2741                           ;EEPROM.c: 105:             break;
  2742  0012EA  D089               	goto	PL86	;call to abstracted procedure
  2743  0012EC                     l1029:
  2744                           
  2745                           ;EEPROM.c: 108:             if(EECON1bits.WR == 0){
  2746  0012EC  B2A6               	btfsc	166,1,c	;volsfr
  2747  0012EE  0012               	return	
  2748  0012F0                     u4900:
  2749                           
  2750                           ;EEPROM.c: 109:                 eepromState = aux;
  2751  0012F0  C020  F021         	movff	_aux@EEPROM$F1757,_eepromState
  2752  0012F4  0012               	return	
  2753  0012F6                     l6022:
  2754                           
  2755                           ;EEPROM.c: 115:             EEADR = numAddress*18+10 + pointerEeprom;
  2756  0012F6  D86A               	call	PL22	;call to abstracted procedure
  2757                           
  2758                           ;EEPROM.c: 116:             EECON1bits.EEPGD = 0;
  2759  0012F8  9EA6               	bcf	166,7,c	;volsfr
  2760                           
  2761                           ;EEPROM.c: 117:             EECON1bits.CFGS = 0;
  2762  0012FA  9CA6               	bcf	166,6,c	;volsfr
  2763                           
  2764                           ;EEPROM.c: 118:             EECON1bits.RD = 1;
  2765  0012FC  80A6               	bsf	166,0,c	;volsfr
  2766                           
  2767                           ;EEPROM.c: 119:             ++pointerEeprom;
  2768  0012FE  2A23               	incf	_pointerEeprom^0,f,c
  2769                           
  2770                           ;EEPROM.c: 120:             if(EEDATA != 0){
  2771  001300  50A8               	movf	168,w,c	;volatile
  2772  001302  E006               	bz	l1032
  2773                           
  2774                           ;EEPROM.c: 121:                 user.username[pointer] = EEDATA;
  2775  001304  D873               	call	PL60	;call to abstracted procedure
  2776  001306  CFA8 FFDF          	movff	4008,indf2	;volatile
  2777                           
  2778                           ;EEPROM.c: 122:                 ++pointer;
  2779  00130A  2A24               	incf	_pointer@EEPROM$F1753^0,f,c
  2780                           
  2781                           ;EEPROM.c: 123:                 aux = 5;
  2782  00130C  0E05               	movlw	5
  2783  00130E                     
  2784                           ;EEPROM.c: 124:                 eepromState = 9;
  2785                           
  2786                           ;EEPROM.c: 125:             }
  2787  00130E  D06A               	goto	PL58	;call to abstracted procedure
  2788  001310                     l1032:
  2789                           
  2790                           ;EEPROM.c: 127:                 pointer = 0;
  2791  001310  6A24               	clrf	_pointer@EEPROM$F1753^0,c
  2792                           
  2793                           ;EEPROM.c: 128:                 aux = 6;
  2794  001312  0E06               	movlw	6
  2795                           
  2796                           ;EEPROM.c: 129:                 eepromState = 9;
  2797  001314  D067               	goto	PL58	;call to abstracted procedure
  2798  001316                     l6044:
  2799                           
  2800                           ;EEPROM.c: 134:             EEADR = numAddress*18+10 + pointerEeprom;
  2801  001316  D85A               	call	PL22	;call to abstracted procedure
  2802                           
  2803                           ;EEPROM.c: 135:             EECON1bits.EEPGD = 0;
  2804  001318  9EA6               	bcf	166,7,c	;volsfr
  2805                           
  2806                           ;EEPROM.c: 136:             EECON1bits.CFGS = 0;
  2807  00131A  9CA6               	bcf	166,6,c	;volsfr
  2808                           
  2809                           ;EEPROM.c: 137:             EECON1bits.RD = 1;
  2810  00131C  80A6               	bsf	166,0,c	;volsfr
  2811                           
  2812                           ;EEPROM.c: 138:             user.password[pointer] = EEDATA;
  2813  00131E  D85D               	call	PL52	;call to abstracted procedure
  2814  001320  CFA8 FFDF          	movff	4008,indf2	;volatile
  2815                           
  2816                           ;EEPROM.c: 139:             ++pointerEeprom;
  2817  001324  2A23               	incf	_pointerEeprom^0,f,c
  2818                           
  2819                           ;EEPROM.c: 140:             if(user.password[pointer] != 0){
  2820  001326  D859               	call	PL52	;call to abstracted procedure
  2821  001328  50DF               	movf	indf2,w,c
  2822  00132A  E0DD               	bz	l6016
  2823                           
  2824                           ;EEPROM.c: 141:                 ++pointer;
  2825  00132C  2A24               	incf	_pointer@EEPROM$F1753^0,f,c
  2826                           
  2827                           ;EEPROM.c: 142:                 aux = 6;
  2828  00132E  0E06               	movlw	6
  2829  001330  D059               	goto	PL58
  2830  001332                     l1037:
  2831                           
  2832                           ;EEPROM.c: 152:             EEADR = numAddress;
  2833  001332  C01F  FFA9         	movff	_numAddress,4009	;volatile
  2834                           
  2835                           ;EEPROM.c: 153:             EECON1bits.EEPGD = 0;
  2836  001336  9EA6               	bcf	166,7,c	;volsfr
  2837                           
  2838                           ;EEPROM.c: 154:             EECON1bits.CFGS = 0;
  2839  001338  9CA6               	bcf	166,6,c	;volsfr
  2840                           
  2841                           ;EEPROM.c: 155:             EECON1bits.RD = 1;
  2842  00133A  80A6               	bsf	166,0,c	;volsfr
  2843                           
  2844                           ;EEPROM.c: 156:             topScore.score = EEDATA;
  2845  00133C  CFA8 F00D          	movff	4008,_topScore	;volatile
  2846                           
  2847                           ;EEPROM.c: 157:             aux = 8;
  2848  001340  0E08               	movlw	8
  2849                           
  2850                           ;EEPROM.c: 158:             eepromState = 9;
  2851                           
  2852                           ;EEPROM.c: 159:             break;
  2853  001342  D050               	goto	PL58	;call to abstracted procedure
  2854  001344                     l6068:
  2855                           
  2856                           ;EEPROM.c: 162:             EEADR = numAddress +1;
  2857  001344  281F               	incf	_numAddress^0,w,c
  2858  001346  6EA9               	movwf	169,c	;volatile
  2859                           
  2860                           ;EEPROM.c: 163:             EECON1bits.EEPGD = 0;
  2861  001348  9EA6               	bcf	166,7,c	;volsfr
  2862                           
  2863                           ;EEPROM.c: 164:             EECON1bits.CFGS = 0;
  2864  00134A  9CA6               	bcf	166,6,c	;volsfr
  2865                           
  2866                           ;EEPROM.c: 165:             EECON1bits.RD = 1;
  2867  00134C  80A6               	bsf	166,0,c	;volsfr
  2868                           
  2869                           ;EEPROM.c: 166:             topScore.user = EEDATA;
  2870  00134E  CFA8 F00E          	movff	4008,_topScore+1	;volatile
  2871  001352  D7C9               	goto	l6016
  2872  001354                     l1039:
  2873                           
  2874                           ;EEPROM.c: 173:             if(EECON1bits.RD == 0){
  2875  001354  B0A6               	btfsc	166,0,c	;volsfr
  2876  001356  0012               	return	
  2877  001358  D7CB               	goto	u4900
  2878  00135A                     l1041:
  2879                           
  2880                           ;EEPROM.c: 180:             doneCharging = 0;
  2881  00135A  6A22               	clrf	_doneCharging^0,c
  2882                           
  2883                           ;EEPROM.c: 181:             break;
  2884  00135C  0012               	return	
  2885  00135E                     l1042:
  2886                           
  2887                           ;EEPROM.c: 184:             EEADR = numAddress;
  2888  00135E  C01F  FFA9         	movff	_numAddress,4009	;volatile
  2889                           
  2890                           ;EEPROM.c: 185:             EEDATA = 0xFF;
  2891  001362  68A8               	setf	168,c	;volatile
  2892                           
  2893                           ;EEPROM.c: 186:             EECON1bits.EEPGD = 0;
  2894  001364  9EA6               	bcf	166,7,c	;volsfr
  2895                           
  2896                           ;EEPROM.c: 187:             EECON1bits.CFGS = 0;
  2897  001366  9CA6               	bcf	166,6,c	;volsfr
  2898                           
  2899                           ;EEPROM.c: 188:             EECON1bits.WREN = 1;
  2900  001368  84A6               	bsf	166,2,c	;volsfr
  2901                           
  2902                           ;EEPROM.c: 189:             INTCONbits.GIE = 0;
  2903  00136A  9EF2               	bcf	242,7,c	;volatile
  2904                           
  2905                           ;EEPROM.c: 190:             EECON2 = 0x55;
  2906  00136C  0E55               	movlw	85
  2907  00136E  6EA7               	movwf	167,c	;volsfr
  2908                           
  2909                           ;EEPROM.c: 191:             EECON2 = 0xAA;
  2910  001370  0EAA               	movlw	170
  2911  001372  6EA7               	movwf	167,c	;volsfr
  2912                           
  2913                           ;EEPROM.c: 192:             EECON1bits.WR = 1;
  2914  001374  82A6               	bsf	166,1,c	;volsfr
  2915                           
  2916                           ;EEPROM.c: 193:             INTCONbits.GIE = 1;
  2917  001376  8EF2               	bsf	242,7,c	;volatile
  2918                           
  2919                           ;EEPROM.c: 194:             EECON1bits.WREN = 0;
  2920  001378  94A6               	bcf	166,2,c	;volsfr
  2921                           
  2922                           ;EEPROM.c: 195:             ++numAddress;
  2923  00137A  2A1F               	incf	_numAddress^0,f,c
  2924                           
  2925                           ;EEPROM.c: 196:             if(numAddress < 170){
  2926  00137C  601F               	cpfslt	_numAddress^0,c
  2927  00137E  D002               	goto	l6098
  2928                           
  2929                           ;EEPROM.c: 197:                 aux = 11;
  2930  001380  0E0B               	movlw	11
  2931                           
  2932                           ;EEPROM.c: 198:                 eepromState = 4;
  2933                           
  2934                           ;EEPROM.c: 199:             }else{
  2935  001382  D039               	goto	PL78	;call to abstracted procedure
  2936  001384                     l6098:
  2937                           
  2938                           ;EEPROM.c: 200:                 --eepromState;
  2939  001384  0621               	decf	_eepromState^0,f,c
  2940  001386  D03B               	goto	PL86
  2941  001388                     l6104:
  2942  001388  5021               	movf	_eepromState^0,w,c
  2943  00138A  6E55               	movwf	??_motorEeprom^0,c
  2944  00138C  6A56               	clrf	(??_motorEeprom+1)^0,c
  2945                           
  2946                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2947                           ; Switch size 1, requested type "space"
  2948                           ; Number of cases is 1, Range of values is 0 to 0
  2949                           ; switch strategies available:
  2950                           ; Name         Instructions Cycles
  2951                           ; simple_byte            4     3 (average)
  2952                           ;	Chosen strategy is simple_byte
  2953  00138E  5056               	movf	(??_motorEeprom+1)^0,w,c
  2954  001390  A4D8               	btfss	status,2,c
  2955  001392  0012               	return	
  2956                           
  2957                           ; Switch size 1, requested type "space"
  2958                           ; Number of cases is 12, Range of values is 0 to 11
  2959                           ; switch strategies available:
  2960                           ; Name         Instructions Cycles
  2961                           ; simple_byte           37    19 (average)
  2962                           ;	Chosen strategy is simple_byte
  2963  001394  5055               	movf	??_motorEeprom^0,w,c
  2964  001396  E101 D751          	bz	l5910
  2965  00139A  0A01               	xorlw	1	; case 1
  2966  00139C  E101 D769          	bz	l5944
  2967  0013A0  0A03               	xorlw	3	; case 2
  2968  0013A2  E101 D77D          	bz	l1027
  2969  0013A6  0A01               	xorlw	1	; case 3
  2970  0013A8  E08E               	bz	l5992
  2971  0013AA  0A07               	xorlw	7	; case 4
  2972  0013AC  E09F               	bz	l1029
  2973  0013AE  0A01               	xorlw	1	; case 5
  2974  0013B0  E0A2               	bz	l6022
  2975  0013B2  0A03               	xorlw	3	; case 6
  2976  0013B4  E0B0               	bz	l6044
  2977  0013B6  0A01               	xorlw	1	; case 7
  2978  0013B8  E0BC               	bz	l1037
  2979  0013BA  0A0F               	xorlw	15	; case 8
  2980  0013BC  E0C3               	bz	l6068
  2981  0013BE  0A01               	xorlw	1	; case 9
  2982  0013C0  E0C9               	bz	l1039
  2983  0013C2  0A03               	xorlw	3	; case 10
  2984  0013C4  E0CA               	bz	l1041
  2985  0013C6  0A01               	xorlw	1	; case 11
  2986  0013C8  E0CA               	bz	l1042
  2987  0013CA  0012               	return		;funcret
  2988  0013CC                     __end_of_motorEeprom:
  2989                           	callstack 0
  2990  0013CC                     PL22:
  2991                           	callstack 28
  2992  0013CC  501F               	movf	_numAddress^0,w,c
  2993  0013CE  0D12               	mullw	18
  2994  0013D0  50F3               	movf	243,w,c
  2995  0013D2  2423               	addwf	_pointerEeprom^0,w,c
  2996  0013D4  0F0A               	addlw	10
  2997  0013D6  6EA9               	movwf	169,c	;volatile
  2998  0013D8  0012               	return	
  2999  0013DA                     __end_ofPL22:
  3000                           	callstack 0
  3001  0013DA                     PL52:
  3002                           	callstack 28
  3003  0013DA  5024               	movf	_pointer@EEPROM$F1753^0,w,c
  3004  0013DC  0FDA               	addlw	low (_user+9)
  3005  0013DE  6ED9               	movwf	fsr2l,c
  3006  0013E0  6ADA               	clrf	fsr2h,c
  3007  0013E2  0012               	return	
  3008  0013E4                     __end_ofPL52:
  3009                           	callstack 0
  3010  0013E4                     PL58:
  3011                           	callstack 28
  3012  0013E4  6E20               	movwf	_aux@EEPROM$F1757^0,c
  3013  0013E6  0E09               	movlw	9
  3014  0013E8  6E21               	movwf	_eepromState^0,c
  3015  0013EA  0C09               	retlw	9
  3016  0013EC                     __end_ofPL58:
  3017                           	callstack 0
  3018  0013EC                     PL60:
  3019                           	callstack 28
  3020  0013EC  5024               	movf	_pointer@EEPROM$F1753^0,w,c
  3021  0013EE  0FD1               	addlw	low _user
  3022  0013F0  6ED9               	movwf	fsr2l,c
  3023  0013F2  6ADA               	clrf	fsr2h,c
  3024  0013F4  0012               	return	
  3025  0013F6                     __end_ofPL60:
  3026                           	callstack 0
  3027  0013F6                     PL78:
  3028                           	callstack 28
  3029  0013F6  6E20               	movwf	_aux@EEPROM$F1757^0,c
  3030  0013F8  0E04               	movlw	4
  3031  0013FA  6E21               	movwf	_eepromState^0,c
  3032  0013FC  0C04               	retlw	4
  3033  0013FE                     __end_ofPL78:
  3034                           	callstack 0
  3035  0013FE                     PL86:
  3036                           	callstack 28
  3037  0013FE  0E01               	movlw	1
  3038  001400  6E22               	movwf	_doneCharging^0,c
  3039  001402  0C01               	retlw	1
  3040  001404                     __end_ofPL86:
  3041                           	callstack 0
  3042                           
  3043 ;; *************** function _menuMotor *****************
  3044 ;; Defined at:
  3045 ;;		line 40 in file "Menu.c"
  3046 ;; Parameters:    Size  Location     Type
  3047 ;;		None
  3048 ;; Auto vars:     Size  Location     Type
  3049 ;;		None
  3050 ;; Return value:  Size  Location     Type
  3051 ;;                  1    wreg      void 
  3052 ;; Registers used:
  3053 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3054 ;; Tracked objects:
  3055 ;;		On entry : 0/0
  3056 ;;		On exit  : 0/0
  3057 ;;		Unchanged: 0/0
  3058 ;; Data sizes:     COMRAM   BANK0   BANK1
  3059 ;;      Params:         0       0       0
  3060 ;;      Locals:         0       0       0
  3061 ;;      Temps:          0       2       0
  3062 ;;      Totals:         0       2       0
  3063 ;;Total ram usage:        2 bytes
  3064 ;; Hardware stack levels used: 1
  3065 ;; Hardware stack levels required when called: 7
  3066 ;; This function calls:
  3067 ;;		_KeyGetNumber
  3068 ;;		_KeyGetPress
  3069 ;;		_KeyGetSMS
  3070 ;;		_KeyGetValue
  3071 ;;		_KeyResetValue
  3072 ;;		_LcClear
  3073 ;;		_LcCursorOff
  3074 ;;		_LcCursorOn
  3075 ;;		_LcGotoXY
  3076 ;;		_LcPutChar
  3077 ;;		_LcPutScore
  3078 ;;		_LcPutTime
  3079 ;;		_LcScroll
  3080 ;;		_RXdata
  3081 ;;		_TXbusy
  3082 ;;		_TXgetState
  3083 ;;		_TiGetTics
  3084 ;;		_TiResetTics
  3085 ;;		___lbdiv
  3086 ;;		___lbmod
  3087 ;;		_cleanEeprom
  3088 ;;		_endMusic
  3089 ;;		_getCentreJoystick
  3090 ;;		_getDoneCharging
  3091 ;;		_getFirstDirection
  3092 ;;		_getFirstDirectionScores
  3093 ;;		_getPositionJoystick
  3094 ;;		_getRX
  3095 ;;		_getScore
  3096 ;;		_getUser
  3097 ;;		_isPressed
  3098 ;;		_readEeprom
  3099 ;;		_readEepromScores
  3100 ;;		_resetPositionJoystick
  3101 ;;		_sendMyTX
  3102 ;;		_setTX
  3103 ;;		_showTimerPic
  3104 ;;		_startMusic
  3105 ;;		_stopTimerPic
  3106 ;;		_writeEeprom
  3107 ;;		_writeEepromScores
  3108 ;; This function is called by:
  3109 ;;		_main
  3110 ;; This function uses a non-reentrant model
  3111 ;;
  3112                           
  3113                           	psect	text10
  3114  0002A2                     __ptext10:
  3115                           	callstack 0
  3116  0002A2                     _menuMotor:
  3117                           	callstack 23
  3118                           
  3119                           ;Menu.c: 41:     switch(menuState){
  3120                           
  3121                           ;incstack = 0
  3122  0002A2  EFA7  F007         	goto	l7394
  3123  0002A6                     l6352:
  3124                           
  3125                           ; BSR set to: 0
  3126                           ;Menu.c: 43:             if(getFirstDirectionScores(numScores) == 0xFF){
  3127  0002A6  504E               	movf	_numScores@Data$F564^0,w,c
  3128  0002A8  EC5B  F000         	call	_getFirstDirectionScores
  3129  0002AC  0AFF               	xorlw	255
  3130  0002AE  E103               	bnz	l6356
  3131                           
  3132                           ;Menu.c: 44:                 menuState=102;
  3133  0002B0  0E66               	movlw	102
  3134  0002B2  6E4D               	movwf	_menuState^0,c
  3135                           
  3136                           ;Menu.c: 45:             }else{
  3137  0002B4  0C66               	retlw	102
  3138  0002B6                     l6356:
  3139                           
  3140                           ;Menu.c: 46:                 readEepromScores(numScores);
  3141  0002B6  504E               	movf	_numScores@Data$F564^0,w,c
  3142  0002B8  EC78  F000         	call	_readEepromScores
  3143  0002BC                     l6358:
  3144                           
  3145                           ;Menu.c: 47:                 ++menuState;
  3146  0002BC  2A4D               	incf	_menuState^0,f,c
  3147                           
  3148                           ;Menu.c: 49:             break;
  3149                           
  3150                           ;Menu.c: 48:             }
  3151  0002BE  0012               	return	
  3152  0002C0                     l6360:
  3153                           
  3154                           ; BSR set to: 0
  3155                           ;Menu.c: 52:             if(getDoneCharging()==1){
  3156  0002C0  ECC5  F000         	call	_getDoneCharging	;wreg free
  3157  0002C4  06E8               	decf	wreg,f,c
  3158  0002C6  A4D8               	btfss	status,2,c
  3159  0002C8  0012               	return	
  3160                           
  3161                           ;Menu.c: 53:                 topScores[numScores] = getScore();
  3162  0002CA  EC85  F000         	call	_getScore	;wreg free
  3163  0002CE  504E               	movf	_numScores@Data$F564^0,w,c
  3164  0002D0  ECA9  F008         	call	PL12	;call to abstracted procedure
  3165  0002D4  C055  FFDE         	movff	?_getScore,postinc2
  3166  0002D8  C056  FFDD         	movff	?_getScore+1,postdec2
  3167                           
  3168                           ;Menu.c: 54:                 ++numScores;
  3169  0002DC  2A4E               	incf	_numScores@Data$F564^0,f,c
  3170                           
  3171                           ;Menu.c: 55:                 if(numScores < 5) --menuState;
  3172  0002DE  0E05               	movlw	5
  3173  0002E0  604E               	cpfslt	_numScores@Data$F564^0,c
  3174  0002E2  D7EC               	goto	l6358
  3175  0002E4                     u5140:
  3176  0002E4  064D               	decf	_menuState^0,f,c
  3177  0002E6  0012               	return	
  3178  0002E8                     l6372:
  3179                           
  3180                           ; BSR set to: 0
  3181                           ;Menu.c: 61:             if(getFirstDirection(numUsers) == 0xFF){
  3182  0002E8  504F               	movf	_numUsers@Data$F563^0,w,c
  3183  0002EA  EC26  F000         	call	_getFirstDirection
  3184  0002EE  0AFF               	xorlw	255
  3185  0002F0  E103               	bnz	l6376
  3186  0002F2                     u5150:
  3187                           
  3188                           ;Menu.c: 62:                 menuState=104;
  3189  0002F2  0E68               	movlw	104
  3190  0002F4  6E4D               	movwf	_menuState^0,c
  3191                           
  3192                           ;Menu.c: 63:             }else{
  3193  0002F6  0C68               	retlw	104
  3194  0002F8                     l6376:
  3195                           
  3196                           ;Menu.c: 64:                 readEeprom(numUsers);
  3197  0002F8  504F               	movf	_numUsers@Data$F563^0,w,c
  3198  0002FA  EC65  F000         	call	_readEeprom
  3199  0002FE  D7DE               	goto	l6358
  3200  000300                     l6380:
  3201                           
  3202                           ; BSR set to: 0
  3203                           ;Menu.c: 70:             if(getDoneCharging()==1){
  3204  000300  ECC5  F000         	call	_getDoneCharging	;wreg free
  3205  000304  06E8               	decf	wreg,f,c
  3206  000306  A4D8               	btfss	status,2,c
  3207  000308  0012               	return	
  3208                           
  3209                           ;Menu.c: 71:                 users[numUsers] = getUser();
  3210  00030A  EC51  F000         	call	_getUser	;wreg free
  3211  00030E  ECB9  F008         	call	PL16	;call to abstracted procedure
  3212  000312  6ED9               	movwf	fsr2l,c
  3213  000314  6ADA               	clrf	fsr2h,c
  3214  000316  0E11               	movlw	17
  3215  000318                     u5171:
  3216  000318  CFEB FFDB          	movff	plusw0,plusw2
  3217  00031C  06E8               	decf	wreg,f,c
  3218  00031E  E2FC               	bc	u5171
  3219                           
  3220                           ;Menu.c: 72:                 ++numUsers;
  3221  000320  2A4F               	incf	_numUsers@Data$F563^0,f,c
  3222  000322  D7E0               	goto	u5140
  3223  000324                     l6388:
  3224                           
  3225                           ; BSR set to: 0
  3226                           ;Menu.c: 78:             LcClear();
  3227  000324  EC31  F000         	call	_LcClear	;wreg free
  3228                           
  3229                           ;Menu.c: 79:             LcGotoXY(0,0);
  3230  000328  0E00               	movlw	0
  3231  00032A  6A5D               	clrf	LcGotoXY@Row^0,c
  3232  00032C  EC7C  F00B         	call	_LcGotoXY
  3233                           
  3234                           ;Menu.c: 80:             menuState=0;
  3235  000330  6A4D               	clrf	_menuState^0,c
  3236                           
  3237                           ;Menu.c: 81:             pointer=0;
  3238  000332  6A4C               	clrf	_pointer^0,c
  3239                           
  3240                           ;Menu.c: 82:             option = 0;
  3241  000334  6A47               	clrf	_option^0,c
  3242                           
  3243                           ;Menu.c: 83:             break;
  3244  000336  0012               	return	
  3245  000338                     l6396:
  3246                           
  3247                           ; BSR set to: 0
  3248                           ;Menu.c: 86:             LcPutChar(accessMenuString1[pointer]);
  3249  000338  504C               	movf	_pointer^0,w,c
  3250  00033A  0FE3               	addlw	low _accessMenuString1@Menu$F544
  3251  00033C  ECE7  F008         	call	PL38	;call to abstracted procedure
  3252  000340  EC07  F00E         	call	_LcPutChar
  3253                           
  3254                           ;Menu.c: 87:             ++pointer;
  3255  000344  2A4C               	incf	_pointer^0,f,c
  3256                           
  3257                           ;Menu.c: 88:             if(pointer == 8){
  3258  000346  0E08               	movlw	8
  3259  000348  184C               	xorwf	_pointer^0,w,c
  3260  00034A  A4D8               	btfss	status,2,c
  3261  00034C  0012               	return	
  3262                           
  3263                           ;Menu.c: 89:                 ++menuState;
  3264  00034E  2A4D               	incf	_menuState^0,f,c
  3265                           
  3266                           ;Menu.c: 90:                 pointer=0;
  3267  000350  6A4C               	clrf	_pointer^0,c
  3268                           
  3269                           ;Menu.c: 91:                 LcGotoXY(0,1);
  3270  000352  ECF4  F008         	call	PL46	;call to abstracted procedure
  3271  000356  EF7C  F00B         	goto	_LcGotoXY
  3272  00035A                     l6408:
  3273                           
  3274                           ; BSR set to: 0
  3275                           ;Menu.c: 96:    LcPutChar(accessMenuString2[pointer]);
  3276  00035A  0E28               	movlw	low _accessMenuString2@Menu$F545
  3277  00035C  244C               	addwf	_pointer^0,w,c
  3278  00035E  6ED9               	movwf	fsr2l,c
  3279  000360  6ADA               	clrf	fsr2h,c
  3280  000362  0E01               	movlw	high _accessMenuString2@Menu$F545
  3281  000364  22DA               	addwfc	fsr2h,f,c
  3282  000366  50DF               	movf	indf2,w,c
  3283  000368  EC07  F00E         	call	_LcPutChar
  3284                           
  3285                           ;Menu.c: 97:    ++pointer;
  3286  00036C  2A4C               	incf	_pointer^0,f,c
  3287                           
  3288                           ;Menu.c: 98:    if(pointer == 11){
  3289  00036E  0E0B               	movlw	11
  3290  000370  184C               	xorwf	_pointer^0,w,c
  3291  000372  A4D8               	btfss	status,2,c
  3292  000374  0012               	return	
  3293                           
  3294                           ;Menu.c: 99:     ++menuState;
  3295  000376  2A4D               	incf	_menuState^0,f,c
  3296                           
  3297                           ;Menu.c: 100:                 LcCursorOff();
  3298  000378  EF8F  F000         	goto	_LcCursorOff	;wreg free
  3299  00037C                     l6418:
  3300                           
  3301                           ; BSR set to: 0
  3302                           ;Menu.c: 105:    if(isPressed()){
  3303  00037C  ECBF  F000         	call	_isPressed	;wreg free
  3304  000380  0900               	iorlw	0
  3305  000382  E004               	bz	l6424
  3306                           
  3307                           ;Menu.c: 106:     option = KeyGetValue();
  3308  000384  ECCB  F000         	call	_KeyGetValue	;wreg free
  3309  000388  6E47               	movwf	_option^0,c
  3310                           
  3311                           ;Menu.c: 107:     pointer = 0;
  3312  00038A  6A4C               	clrf	_pointer^0,c
  3313  00038C                     l6424:
  3314                           
  3315                           ;Menu.c: 110:    if(option == 1 || option == 2){
  3316  00038C  0447               	decf	_option^0,w,c
  3317  00038E  E004               	bz	u5220
  3318  000390  0E02               	movlw	2
  3319  000392  1847               	xorwf	_option^0,w,c
  3320  000394  A4D8               	btfss	status,2,c
  3321  000396  0012               	return	
  3322  000398                     u5220:
  3323                           
  3324                           ;Menu.c: 111:                 ++menuState;
  3325  000398  2A4D               	incf	_menuState^0,f,c
  3326                           
  3327                           ;Menu.c: 112:                 LcClear();
  3328  00039A  EC31  F000         	call	_LcClear	;wreg free
  3329                           
  3330                           ;Menu.c: 113:                 LcGotoXY(0,0);
  3331  00039E  0E00               	movlw	0
  3332  0003A0  6A5D               	clrf	LcGotoXY@Row^0,c
  3333  0003A2  EC7C  F00B         	call	_LcGotoXY
  3334  0003A6  D078               	goto	l6510
  3335  0003A8                     l6436:
  3336                           
  3337                           ; BSR set to: 0
  3338                           ;Menu.c: 119:             LcPutChar(enterUserString[pointer]);
  3339  0003A8  504C               	movf	_pointer^0,w,c
  3340  0003AA  0F6C               	addlw	low _enterUserString@Menu$F552
  3341  0003AC  ECE7  F008         	call	PL38	;call to abstracted procedure
  3342  0003B0  EC07  F00E         	call	_LcPutChar
  3343                           
  3344                           ;Menu.c: 120:             ++pointer;
  3345  0003B4  2A4C               	incf	_pointer^0,f,c
  3346                           
  3347                           ;Menu.c: 121:             if(pointer == 5){
  3348  0003B6  0E05               	movlw	5
  3349  0003B8  184C               	xorwf	_pointer^0,w,c
  3350  0003BA  A4D8               	btfss	status,2,c
  3351  0003BC  0012               	return	
  3352                           
  3353                           ;Menu.c: 122:                 LcGotoXY(++pointer,0);
  3354  0003BE  EC0E  F009         	call	PL84	;call to abstracted procedure
  3355  0003C2  EC7C  F00B         	call	_LcGotoXY
  3356                           
  3357                           ;Menu.c: 123:                 ++menuState;
  3358  0003C6  2A4D               	incf	_menuState^0,f,c
  3359                           
  3360                           ;Menu.c: 124:                 pointer=0;
  3361  0003C8  6A4C               	clrf	_pointer^0,c
  3362                           
  3363                           ;Menu.c: 125:                 KeyResetValue();
  3364  0003CA  EF6F  F000         	goto	_KeyResetValue	;wreg free
  3365  0003CE                     l6450:
  3366                           
  3367                           ; BSR set to: 0
  3368                           ;Menu.c: 130:             if(isPressed()){
  3369  0003CE  ECBF  F000         	call	_isPressed	;wreg free
  3370  0003D2  0900               	iorlw	0
  3371  0003D4  B4D8               	btfsc	status,2,c
  3372  0003D6  0012               	return	
  3373                           
  3374                           ;Menu.c: 131:                 keyValue = KeyGetSMS();
  3375  0003D8  EC94  F000         	call	_KeyGetSMS	;wreg free
  3376  0003DC  6E46               	movwf	_keyValue^0,c
  3377                           
  3378                           ;Menu.c: 132:                 if(KeyGetPress() > 1){
  3379  0003DE  ECB6  F000         	call	_KeyGetPress	;wreg free
  3380  0003E2  EC16  F009         	call	PL90	;call to abstracted procedure
  3381  0003E6  65F8               	cpfsgt	??_menuMotor& (0+255),b
  3382  0003E8  D004               	goto	l6458
  3383                           
  3384                           ; BSR set to: 0
  3385                           ;Menu.c: 133:                     LcGotoXY(--pointer+6 ,0);
  3386  0003EA  EC04  F009         	call	PL68	;call to abstracted procedure
  3387  0003EE  EC7C  F00B         	call	_LcGotoXY
  3388  0003F2                     l6458:
  3389                           
  3390                           ;Menu.c: 135:                 if(keyValue!='#' && pointer<8){
  3391  0003F2  0E23               	movlw	35
  3392  0003F4  1846               	xorwf	_keyValue^0,w,c
  3393  0003F6  E00B               	bz	l6470
  3394  0003F8  0E08               	movlw	8
  3395  0003FA  604C               	cpfslt	_pointer^0,c
  3396  0003FC  D008               	goto	l6470
  3397                           
  3398                           ;Menu.c: 136:                     LcPutChar(keyValue);
  3399  0003FE  5046               	movf	_keyValue^0,w,c
  3400  000400  EC07  F00E         	call	_LcPutChar
  3401                           
  3402                           ;Menu.c: 137:                     users[numUsers].username[pointer]=keyValue;
  3403  000404  ECB9  F008         	call	PL16	;call to abstracted procedure
  3404  000408  D041               	goto	L9
  3405  00040A                     l6466:
  3406                           
  3407                           ;Menu.c: 138:                     ++pointer;
  3408  00040A  2A4C               	incf	_pointer^0,f,c
  3409  00040C  D045               	goto	l6510
  3410  00040E                     l6470:
  3411                           
  3412                           ;Menu.c: 142:                     users[numUsers].username[pointer]='\0';
  3413  00040E  504F               	movf	_numUsers@Data$F563^0,w,c
  3414  000410  0D12               	mullw	18
  3415  000412  EC8E  F008         	call	PL4	;call to abstracted procedure
  3416  000416  6ADF               	clrf	indf2,c
  3417                           
  3418                           ;Menu.c: 143:                     LcGotoXY(0,1);
  3419  000418  ECF4  F008         	call	PL46	;call to abstracted procedure
  3420  00041C  EC7C  F00B         	call	_LcGotoXY
  3421  000420                     l6474:
  3422                           
  3423                           ;Menu.c: 144:                     pointer = 0;
  3424  000420  6A4C               	clrf	_pointer^0,c
  3425  000422  D74C               	goto	l6358
  3426  000424                     l6478:
  3427                           
  3428                           ; BSR set to: 0
  3429                           ;Menu.c: 151:    LcPutChar(enterPasswordString[pointer]);
  3430  000424  504C               	movf	_pointer^0,w,c
  3431  000426  0F67               	addlw	low _enterPasswordString@Menu$F553
  3432  000428  ECE7  F008         	call	PL38	;call to abstracted procedure
  3433  00042C  EC07  F00E         	call	_LcPutChar
  3434                           
  3435                           ;Menu.c: 152:    ++pointer;
  3436  000430  2A4C               	incf	_pointer^0,f,c
  3437                           
  3438                           ;Menu.c: 153:    if(pointer == 5){
  3439  000432  0E05               	movlw	5
  3440  000434  184C               	xorwf	_pointer^0,w,c
  3441  000436  A4D8               	btfss	status,2,c
  3442  000438  0012               	return	
  3443                           
  3444                           ;Menu.c: 154:     LcGotoXY(++pointer,1);
  3445  00043A  0E01               	movlw	1
  3446  00043C  6E5D               	movwf	LcGotoXY@Row^0,c
  3447  00043E  2A4C               	incf	_pointer^0,f,c
  3448  000440  504C               	movf	_pointer^0,w,c
  3449  000442  EC7C  F00B         	call	_LcGotoXY
  3450                           
  3451                           ;Menu.c: 155:     ++menuState;
  3452  000446  2A4D               	incf	_menuState^0,f,c
  3453                           
  3454                           ;Menu.c: 156:     pointer=0;
  3455  000448  6A4C               	clrf	_pointer^0,c
  3456                           
  3457                           ;Menu.c: 157:                 TiResetTics(timerMenu);
  3458  00044A  5041               	movf	_timerMenu^0,w,c
  3459  00044C  EC9C  F00F         	call	_TiResetTics
  3460  000450  EF6F  F000         	goto	_KeyResetValue
  3461  000454                     l6494:
  3462                           
  3463                           ; BSR set to: 0
  3464                           ;Menu.c: 163:             if(isPressed()){
  3465  000454  ECBF  F000         	call	_isPressed	;wreg free
  3466  000458  0900               	iorlw	0
  3467  00045A  B4D8               	btfsc	status,2,c
  3468  00045C  0012               	return	
  3469                           
  3470                           ;Menu.c: 164:                 keyValue = KeyGetSMS();
  3471  00045E  EC94  F000         	call	_KeyGetSMS	;wreg free
  3472  000462  6E46               	movwf	_keyValue^0,c
  3473                           
  3474                           ;Menu.c: 165:                 if(KeyGetPress() > 1){
  3475  000464  ECB6  F000         	call	_KeyGetPress	;wreg free
  3476  000468  EC16  F009         	call	PL90	;call to abstracted procedure
  3477  00046C  65F8               	cpfsgt	??_menuMotor& (0+255),b
  3478  00046E  D004               	goto	l6502
  3479                           
  3480                           ; BSR set to: 0
  3481                           ;Menu.c: 166:                     LcGotoXY(--pointer+6 ,0);
  3482  000470  EC04  F009         	call	PL68	;call to abstracted procedure
  3483  000474  EC7C  F00B         	call	_LcGotoXY
  3484  000478                     l6502:
  3485                           
  3486                           ;Menu.c: 168:                 if(keyValue!='#'){
  3487  000478  0E23               	movlw	35
  3488  00047A  1846               	xorwf	_keyValue^0,w,c
  3489  00047C  E010               	bz	l6512
  3490                           
  3491                           ;Menu.c: 169:                     LcPutChar(keyValue);
  3492  00047E  5046               	movf	_keyValue^0,w,c
  3493  000480  EC07  F00E         	call	_LcPutChar
  3494                           
  3495                           ;Menu.c: 170:                     users[numUsers].password[pointer]=keyValue;
  3496  000484  504F               	movf	_numUsers@Data$F563^0,w,c
  3497  000486  0D12               	mullw	18
  3498  000488  50F3               	movf	243,w,c
  3499  00048A  0F89               	addlw	low (_users+9)
  3500  00048C                     L9:
  3501  00048C  244C               	addwf	_pointer^0,w,c
  3502  00048E  6ED9               	movwf	fsr2l,c
  3503  000490  6ADA               	clrf	fsr2h,c
  3504  000492  C046  FFDF         	movff	_keyValue,indf2
  3505  000496  D7B9               	goto	l6466
  3506  000498                     l6510:
  3507                           
  3508                           ;Menu.c: 172:                     TiResetTics(timerMenu);
  3509  000498  5041               	movf	_timerMenu^0,w,c
  3510  00049A  EF9C  F00F         	goto	_TiResetTics
  3511  00049E                     l6512:
  3512                           
  3513                           ;Menu.c: 175:                     users[numUsers].password[pointer]='\0';
  3514  00049E  ECBE  F008         	call	PL18	;call to abstracted procedure
  3515  0004A2  6ADF               	clrf	indf2,c
  3516                           
  3517                           ;Menu.c: 176:                     pointer = 0;
  3518  0004A4  6A4C               	clrf	_pointer^0,c
  3519                           
  3520                           ;Menu.c: 177:                     if(option == 1){
  3521  0004A6  0447               	decf	_option^0,w,c
  3522  0004A8  E103               	bnz	l305
  3523                           
  3524                           ;Menu.c: 178:                         ++menuState;
  3525  0004AA  2A4D               	incf	_menuState^0,f,c
  3526                           
  3527                           ;Menu.c: 179:                         pointerUser=0;
  3528  0004AC  6A49               	clrf	_pointerUser^0,c
  3529                           
  3530                           ;Menu.c: 180:                     }else{
  3531  0004AE  0012               	return	
  3532  0004B0                     l305:
  3533                           
  3534                           ;Menu.c: 181:                         pointerUser=0;
  3535  0004B0  6A49               	clrf	_pointerUser^0,c
  3536                           
  3537                           ;Menu.c: 182:                         menuState = 9;
  3538  0004B2  0E09               	movlw	9
  3539  0004B4  6E4D               	movwf	_menuState^0,c
  3540  0004B6  0C09               	retlw	9
  3541  0004B8                     l6524:
  3542                           
  3543                           ; BSR set to: 0
  3544                           ;Menu.c: 189:             if(numUsers!=pointerUser)
  3545  0004B8  5049               	movf	_pointerUser^0,w,c
  3546  0004BA  184F               	xorwf	_numUsers@Data$F563^0,w,c
  3547  0004BC  E101 D719          	bz	u5150
  3548                           
  3549                           ; BSR set to: 0
  3550                           ;Menu.c: 190:                 if(!(users[pointerUser].username[pointer]==users[numUsers]
      +                          .username[pointer])){
  3551  0004C0  504F               	movf	_numUsers@Data$F563^0,w,c
  3552  0004C2  0D12               	mullw	18
  3553  0004C4  EC8E  F008         	call	PL4	;call to abstracted procedure
  3554  0004C8  ECAF  F008         	call	PL14	;call to abstracted procedure
  3555  0004CC  E007               	bz	l6534
  3556                           
  3557                           ; BSR set to: 0
  3558                           ;Menu.c: 191:                     ++pointerUser;
  3559  0004CE  2A49               	incf	_pointerUser^0,f,c
  3560                           
  3561                           ; BSR set to: 0
  3562                           ;Menu.c: 192:                     if(pointerUser==numUsers) menuState=104;
  3563  0004D0  504F               	movf	_numUsers@Data$F563^0,w,c
  3564  0004D2  1849               	xorwf	_pointerUser^0,w,c
  3565  0004D4  E101 D70D          	bz	u5150
  3566  0004D8                     l310:
  3567  0004D8  6A4C               	clrf	_pointer^0,c
  3568  0004DA  0012               	return	
  3569  0004DC                     l6534:
  3570                           
  3571                           ; BSR set to: 0
  3572                           ;Menu.c: 196:                     if(users[pointerUser].username[pointer]==users[numUser
      +                          s].username[pointer])
  3573  0004DC  504F               	movf	_numUsers@Data$F563^0,w,c
  3574  0004DE  0D12               	mullw	18
  3575  0004E0  EC8E  F008         	call	PL4	;call to abstracted procedure
  3576  0004E4  ECAF  F008         	call	PL14	;call to abstracted procedure
  3577  0004E8  E001 D703          	bnz	u5150
  3578                           
  3579                           ; BSR set to: 0
  3580                           ;Menu.c: 197:                         if(users[numUsers].username[pointer]=='\0'){
  3581  0004EC  504F               	movf	_numUsers@Data$F563^0,w,c
  3582  0004EE  EC86  F008         	call	PL2	;call to abstracted procedure
  3583  0004F2  E096               	bz	l6474
  3584  0004F4                     l6542:
  3585  0004F4  2A4C               	incf	_pointer^0,f,c
  3586  0004F6  0012               	return	
  3587  0004F8                     l6548:
  3588                           
  3589                           ; BSR set to: 0
  3590                           ;Menu.c: 209:             if(!(users[pointerUser].password[pointer]==users[numUsers].pas
      +                          sword[pointer])) menuState = 104;
  3591  0004F8  ECBE  F008         	call	PL18	;call to abstracted procedure
  3592  0004FC  5049               	movf	_pointerUser^0,w,c
  3593  0004FE  ECCC  F008         	call	PL24	;call to abstracted procedure
  3594  000502  ECC6  F008         	call	PL20	;call to abstracted procedure
  3595  000506  E001 D6F4          	bnz	u5150
  3596                           
  3597                           ; BSR set to: 0
  3598                           ;Menu.c: 211:     if(users[pointerUser].password[pointer]==users[numUsers].password[poin
      +                          ter])
  3599  00050A  ECBE  F008         	call	PL18	;call to abstracted procedure
  3600  00050E  5049               	movf	_pointerUser^0,w,c
  3601  000510  ECCC  F008         	call	PL24	;call to abstracted procedure
  3602  000514  ECC6  F008         	call	PL20	;call to abstracted procedure
  3603  000518  A4D8               	btfss	status,2,c
  3604  00051A  0012               	return	
  3605                           
  3606                           ; BSR set to: 0
  3607                           ;Menu.c: 213:                         currentUser = pointerUser;
  3608  00051C  ECBE  F008         	call	PL18	;call to abstracted procedure
  3609  000520  50DF               	movf	indf2,w,c
  3610  000522  E1E8               	bnz	l6542
  3611                           
  3612                           ; BSR set to: 0
  3613                           ;Menu.c: 214:       LcClear();
  3614  000524  EC31  F000         	call	_LcClear	;wreg free
  3615                           
  3616                           ;Menu.c: 215:       LcGotoXY(0,0);
  3617  000528  0E00               	movlw	0
  3618  00052A  6A5D               	clrf	LcGotoXY@Row^0,c
  3619  00052C  EC7C  F00B         	call	_LcGotoXY
  3620                           
  3621                           ;Menu.c: 216:       pointer = 0;
  3622  000530  6A4C               	clrf	_pointer^0,c
  3623                           
  3624                           ;Menu.c: 217:       menuState=10;
  3625  000532  0E0A               	movlw	10
  3626  000534  6E4D               	movwf	_menuState^0,c
  3627                           
  3628                           ;Menu.c: 218:                         option = 0;
  3629  000536  6A47               	clrf	_option^0,c
  3630  000538  D7CF               	goto	l310
  3631  00053A                     l6568:
  3632                           
  3633                           ; BSR set to: 0
  3634                           ;Menu.c: 226:             if(numUsers!=pointerUser){
  3635  00053A  5049               	movf	_pointerUser^0,w,c
  3636  00053C  184F               	xorwf	_numUsers@Data$F563^0,w,c
  3637  00053E  E010               	bz	u5440
  3638                           
  3639                           ; BSR set to: 0
  3640                           ;Menu.c: 227:                 if(!(users[numUsers].username[pointer]==users[pointerUser]
      +                          .username[pointer])){
  3641  000540  5049               	movf	_pointerUser^0,w,c
  3642  000542  0D12               	mullw	18
  3643  000544  EC8E  F008         	call	PL4	;call to abstracted procedure
  3644  000548  ECB9  F008         	call	PL16	;call to abstracted procedure
  3645  00054C  ECC6  F008         	call	PL20	;call to abstracted procedure
  3646  000550  E010               	bz	l6584
  3647                           
  3648                           ; BSR set to: 0
  3649                           ;Menu.c: 228:                     ++pointerUser;
  3650  000552  2A49               	incf	_pointerUser^0,f,c
  3651                           
  3652                           ; BSR set to: 0
  3653                           ;Menu.c: 229:                     if(pointerUser==numUsers){
  3654  000554  504F               	movf	_numUsers@Data$F563^0,w,c
  3655  000556  1849               	xorwf	_pointerUser^0,w,c
  3656  000558  E1BF               	bnz	l310
  3657                           
  3658                           ; BSR set to: 0
  3659                           ;Menu.c: 230:                         if(numUsers < 2){
  3660  00055A  0E02               	movlw	2
  3661  00055C  604F               	cpfslt	_numUsers@Data$F563^0,c
  3662  00055E  D003               	goto	l328
  3663  000560                     u5440:
  3664                           
  3665                           ; BSR set to: 0
  3666                           ;Menu.c: 231:                             menuState = 56;
  3667  000560  0E38               	movlw	56
  3668  000562  6E4D               	movwf	_menuState^0,c
  3669                           
  3670                           ;Menu.c: 232:                         }
  3671  000564  0C38               	retlw	56
  3672  000566                     l328:
  3673                           
  3674                           ; BSR set to: 0
  3675                           ;Menu.c: 234:                             pointer = 0;
  3676  000566  6A4C               	clrf	_pointer^0,c
  3677                           
  3678                           ; BSR set to: 0
  3679                           ;Menu.c: 235:                             cleanEeprom();
  3680  000568  EC7F  F000         	call	_cleanEeprom	;wreg free
  3681                           
  3682                           ;Menu.c: 236:                             menuState = 57;
  3683  00056C  0E39               	movlw	57
  3684  00056E  6E4D               	movwf	_menuState^0,c
  3685  000570  0C39               	retlw	57
  3686  000572                     l6584:
  3687                           
  3688                           ; BSR set to: 0
  3689                           ;Menu.c: 243:                     if(users[numUsers].username[pointer]==users[pointerUse
      +                          r].username[pointer])
  3690  000572  5049               	movf	_pointerUser^0,w,c
  3691  000574  0D12               	mullw	18
  3692  000576  EC8E  F008         	call	PL4	;call to abstracted procedure
  3693  00057A  ECB9  F008         	call	PL16	;call to abstracted procedure
  3694  00057E  ECC6  F008         	call	PL20	;call to abstracted procedure
  3695  000582  A4D8               	btfss	status,2,c
  3696  000584  0012               	return	
  3697                           
  3698                           ; BSR set to: 0
  3699                           ;Menu.c: 244:                         if(users[numUsers].username[pointer]=='\0'){
  3700  000586  504F               	movf	_numUsers@Data$F563^0,w,c
  3701  000588  EC86  F008         	call	PL2	;call to abstracted procedure
  3702  00058C  E101 D6B1          	bz	u5150
  3703  000590  D7B1               	goto	l6542
  3704  000592                     l6594:
  3705                           
  3706                           ; BSR set to: 0
  3707                           ;Menu.c: 254:             if(getDoneCharging()==1){
  3708  000592  ECC5  F000         	call	_getDoneCharging	;wreg free
  3709  000596  06E8               	decf	wreg,f,c
  3710  000598  A4D8               	btfss	status,2,c
  3711  00059A  0012               	return	
  3712                           
  3713                           ;Menu.c: 255:                 menuState = 52;
  3714  00059C  0E34               	movlw	52
  3715  00059E  6E4D               	movwf	_menuState^0,c
  3716  0005A0  0C34               	retlw	52
  3717  0005A2                     l6598:
  3718                           
  3719                           ; BSR set to: 0
  3720                           ;Menu.c: 260:             if (pointer < 2){
  3721  0005A2  0E02               	movlw	2
  3722  0005A4  604C               	cpfslt	_pointer^0,c
  3723  0005A6  D01C               	goto	l6606
  3724                           
  3725                           ; BSR set to: 0
  3726                           ;Menu.c: 261:                 users[pointer] = users[pointer+1];
  3727  0005A8  504C               	movf	_pointer^0,w,c
  3728  0005AA  0D12               	mullw	18
  3729  0005AC  50F3               	movf	243,w,c
  3730  0005AE  0F92               	addlw	low (_users+18)
  3731  0005B0  6ED9               	movwf	fsr2l,c
  3732  0005B2  6ADA               	clrf	fsr2h,c
  3733  0005B4  EC09  F009         	call	PL80	;call to abstracted procedure
  3734  0005B8  6EE1               	movwf	fsr1l,c
  3735  0005BA  6AE2               	clrf	fsr1h,c
  3736  0005BC  0E11               	movlw	17
  3737  0005BE                     u5491:
  3738  0005BE  CFDB FFE3          	movff	plusw2,plusw1
  3739  0005C2  06E8               	decf	wreg,f,c
  3740  0005C4  E2FC               	bc	u5491
  3741                           
  3742                           ; BSR set to: 0
  3743                           ;Menu.c: 262:                 writeEeprom(users[pointer],pointer);
  3744  0005C6  EC09  F009         	call	PL80	;call to abstracted procedure
  3745  0005CA  ECF7  F008         	call	PL62	;call to abstracted procedure
  3746  0005CE                     u5501:
  3747  0005CE  CFDB FFEB          	movff	plusw2,plusw0
  3748  0005D2  06E8               	decf	wreg,f,c
  3749  0005D4  E2FC               	bc	u5501
  3750  0005D6  C04C  F14F         	movff	_pointer,writeEeprom@num
  3751  0005DA  EC8E  F00F         	call	_writeEeprom	;wreg free
  3752  0005DE  D66E               	goto	l6358
  3753  0005E0                     l6606:
  3754                           
  3755                           ; BSR set to: 0
  3756                           ;Menu.c: 265:                 --numUsers;
  3757  0005E0  064F               	decf	_numUsers@Data$F563^0,f,c
  3758                           
  3759                           ; BSR set to: 0
  3760                           ;Menu.c: 266:                 pointer = 0;
  3761  0005E2  6A4C               	clrf	_pointer^0,c
  3762  0005E4                     l6610:
  3763                           
  3764                           ; BSR set to: 0
  3765                           ;Menu.c: 267:                 menuState += 2;
  3766  0005E4  0E02               	movlw	2
  3767  0005E6  264D               	addwf	_menuState^0,f,c
  3768  0005E8  0C02               	retlw	2
  3769  0005EA                     l6612:
  3770                           
  3771                           ; BSR set to: 0
  3772                           ;Menu.c: 272:             if(getDoneCharging()==1){
  3773  0005EA  ECC5  F000         	call	_getDoneCharging	;wreg free
  3774  0005EE  06E8               	decf	wreg,f,c
  3775  0005F0  A4D8               	btfss	status,2,c
  3776  0005F2  0012               	return	
  3777  0005F4                     u5510:
  3778                           
  3779                           ;Menu.c: 273:                 ++pointer;
  3780  0005F4  2A4C               	incf	_pointer^0,f,c
  3781                           
  3782                           ;Menu.c: 274:                 --menuState;
  3783  0005F6  064D               	decf	_menuState^0,f,c
  3784  0005F8  0012               	return	
  3785  0005FA                     l6616:
  3786                           
  3787                           ; BSR set to: 0
  3788                           ;Menu.c: 279:             if(pointer < 5){
  3789  0005FA  0E05               	movlw	5
  3790  0005FC  604C               	cpfslt	_pointer^0,c
  3791  0005FE  D026               	goto	l6632
  3792                           
  3793                           ; BSR set to: 0
  3794                           ;Menu.c: 280:                 if(topScores[pointer].user == 0 && topScores[pointer].scor
      +                          e > 0){
  3795  000600  504C               	movf	_pointer^0,w,c
  3796  000602  EC9C  F008         	call	PL8	;call to abstracted procedure
  3797  000606  50DF               	movf	indf2,w,c
  3798  000608  E116               	bnz	l6626
  3799                           
  3800                           ; BSR set to: 0
  3801  00060A  ECA2  F008         	call	PL10	;call to abstracted procedure
  3802  00060E  50DF               	movf	indf2,w,c
  3803  000610  E012               	bz	l6626
  3804                           
  3805                           ; BSR set to: 0
  3806                           ;Menu.c: 281:                     topScores[pointer] = topScores[aux+1];
  3807  000612  5040               	movf	_aux^0,w,c
  3808  000614  0D02               	mullw	2
  3809  000616  50F3               	movf	243,w,c
  3810  000618  0F03               	addlw	low (_topScores+2)
  3811  00061A  6ED9               	movwf	fsr2l,c
  3812  00061C  6ADA               	clrf	fsr2h,c
  3813  00061E  504C               	movf	_pointer^0,w,c
  3814  000620  0D02               	mullw	2
  3815  000622  50F3               	movf	243,w,c
  3816  000624  0F01               	addlw	low _topScores
  3817  000626  6EE1               	movwf	fsr1l,c
  3818  000628  6AE2               	clrf	fsr1h,c
  3819  00062A  CFDE FFE6          	movff	postinc2,postinc1
  3820  00062E  CFDD FFE5          	movff	postdec2,postdec1
  3821                           
  3822                           ; BSR set to: 0
  3823                           ;Menu.c: 282:                     --pointer;
  3824  000632  064C               	decf	_pointer^0,f,c
  3825                           
  3826                           ;Menu.c: 283:                 }else{
  3827  000634  D004               	goto	l6628
  3828  000636                     l6626:
  3829                           
  3830                           ; BSR set to: 0
  3831                           ;Menu.c: 284:                     --topScores[pointer].user;
  3832  000636  504C               	movf	_pointer^0,w,c
  3833  000638  EC9C  F008         	call	PL8	;call to abstracted procedure
  3834  00063C  06DF               	decf	indf2,f,c
  3835  00063E                     l6628:
  3836                           
  3837                           ; BSR set to: 0
  3838                           ;Menu.c: 286:                 writeEepromScores(topScores[pointer], pointer);
  3839  00063E  ECA2  F008         	call	PL10	;call to abstracted procedure
  3840  000642  ECDC  F008         	call	PL34	;call to abstracted procedure
  3841  000646  ECB8  F00F         	call	_writeEepromScores	;wreg free
  3842  00064A  D638               	goto	l6358
  3843  00064C                     l6632:
  3844                           
  3845                           ; BSR set to: 0
  3846                           ;Menu.c: 289:                 --numScores;
  3847  00064C  064E               	decf	_numScores@Data$F564^0,f,c
  3848  00064E  D7CA               	goto	l6610
  3849  000650                     l6636:
  3850                           
  3851                           ; BSR set to: 0
  3852                           ;Menu.c: 295:             if(getDoneCharging()==1){
  3853  000650  ECC5  F000         	call	_getDoneCharging	;wreg free
  3854  000654  06E8               	decf	wreg,f,c
  3855  000656  E0CE               	bz	u5510
  3856  000658  0012               	return	
  3857  00065A                     l6640:
  3858                           
  3859                           ; BSR set to: 0
  3860                           ;Menu.c: 302:             writeEeprom(users[numUsers],numUsers);
  3861  00065A  ECB9  F008         	call	PL16	;call to abstracted procedure
  3862  00065E  ECF7  F008         	call	PL62	;call to abstracted procedure
  3863  000662                     u5561:
  3864  000662  CFDB FFEB          	movff	plusw2,plusw0
  3865  000666  06E8               	decf	wreg,f,c
  3866  000668  E2FC               	bc	u5561
  3867  00066A  C04F  F14F         	movff	_numUsers@Data$F563,writeEeprom@num
  3868  00066E  EC8E  F00F         	call	_writeEeprom	;wreg free
  3869                           
  3870                           ;Menu.c: 303:             ++numUsers;
  3871  000672  2A4F               	incf	_numUsers@Data$F563^0,f,c
  3872                           
  3873                           ;Menu.c: 304:             LcClear();
  3874  000674  EC31  F000         	call	_LcClear	;wreg free
  3875                           
  3876                           ;Menu.c: 305:             option = 1;
  3877  000678  0E01               	movlw	1
  3878  00067A  6E47               	movwf	_option^0,c
  3879                           
  3880                           ;Menu.c: 306:             pointer = 0;
  3881                           
  3882                           ;Menu.c: 307:             LcGotoXY(0,0);
  3883  00067C  ECFC  F008         	call	PL64	;call to abstracted procedure
  3884  000680  EC7C  F00B         	call	_LcGotoXY
  3885                           
  3886                           ;Menu.c: 308:             menuState = 3;
  3887  000684  0E03               	movlw	3
  3888  000686  6E4D               	movwf	_menuState^0,c
  3889                           
  3890                           ;Menu.c: 309:             break;
  3891  000688  0C03               	retlw	3
  3892  00068A                     l6654:
  3893                           
  3894                           ; BSR set to: 0
  3895                           ;Menu.c: 313:             if(option == 2){
  3896  00068A  0E02               	movlw	2
  3897  00068C  1847               	xorwf	_option^0,w,c
  3898  00068E  E108               	bnz	l6664
  3899                           
  3900                           ; BSR set to: 0
  3901                           ;Menu.c: 314:                 aux = 0;
  3902  000690  6A40               	clrf	_aux^0,c
  3903                           
  3904                           ;Menu.c: 315:                 pointer=0;
  3905  000692  6A4C               	clrf	_pointer^0,c
  3906                           
  3907                           ; BSR set to: 0
  3908                           ;Menu.c: 316:                 LcGotoXY(0,1);
  3909  000694  ECF4  F008         	call	PL46	;call to abstracted procedure
  3910  000698  EC7C  F00B         	call	_LcGotoXY
  3911                           
  3912                           ;Menu.c: 317:                 ++option;
  3913  00069C  2A47               	incf	_option^0,f,c
  3914  00069E  D60E               	goto	l6358
  3915  0006A0                     l6664:
  3916                           
  3917                           ; BSR set to: 0
  3918                           ;Menu.c: 320:                 LcPutChar(menuStrings[option][pointer]);
  3919  0006A0  ECE3  F008         	call	PL36	;call to abstracted procedure
  3920  0006A4  ECD8  F008         	call	PL32	;call to abstracted procedure
  3921  0006A8  ECD0  F008         	call	PL30	;call to abstracted procedure
  3922  0006AC  EC07  F00E         	call	_LcPutChar
  3923                           
  3924                           ;Menu.c: 321:                 ++pointer;
  3925  0006B0  2A4C               	incf	_pointer^0,f,c
  3926                           
  3927                           ;Menu.c: 322:                 if(pointer == 16){
  3928  0006B2  0E10               	movlw	16
  3929  0006B4  184C               	xorwf	_pointer^0,w,c
  3930  0006B6  A4D8               	btfss	status,2,c
  3931  0006B8  0012               	return	
  3932                           
  3933                           ;Menu.c: 323:                     pointer=0;
  3934  0006BA  6A4C               	clrf	_pointer^0,c
  3935                           
  3936                           ;Menu.c: 324:                     LcGotoXY(0,1);
  3937  0006BC  ECF4  F008         	call	PL46	;call to abstracted procedure
  3938  0006C0  EC7C  F00B         	call	_LcGotoXY
  3939                           
  3940                           ;Menu.c: 325:                     ++option;
  3941  0006C4  2A47               	incf	_option^0,f,c
  3942                           
  3943                           ;Menu.c: 326:                     ++menuState;
  3944  0006C6  2A4D               	incf	_menuState^0,f,c
  3945                           
  3946                           ;Menu.c: 327:                     if(option==5) menuState = 12;
  3947  0006C8  0E05               	movlw	5
  3948  0006CA  1847               	xorwf	_option^0,w,c
  3949  0006CC  A4D8               	btfss	status,2,c
  3950  0006CE  0012               	return	
  3951  0006D0                     u5590:
  3952  0006D0  0E0C               	movlw	12
  3953  0006D2  6E4D               	movwf	_menuState^0,c
  3954  0006D4  0C0C               	retlw	12
  3955  0006D6                     l6682:
  3956                           
  3957                           ; BSR set to: 0
  3958                           ;Menu.c: 333:             if(option==2){
  3959  0006D6  0E02               	movlw	2
  3960  0006D8  1847               	xorwf	_option^0,w,c
  3961  0006DA  E108               	bnz	l6692
  3962                           
  3963                           ; BSR set to: 0
  3964                           ;Menu.c: 334:                 aux = 1;
  3965  0006DC  0E01               	movlw	1
  3966  0006DE  6E40               	movwf	_aux^0,c
  3967                           
  3968                           ; BSR set to: 0
  3969                           ;Menu.c: 335:                 LcGotoXY(0,1);
  3970  0006E0  6E5D               	movwf	LcGotoXY@Row^0,c
  3971  0006E2  0E00               	movlw	0
  3972  0006E4  EC7C  F00B         	call	_LcGotoXY
  3973                           
  3974                           ;Menu.c: 336:                 menuState = 110;
  3975  0006E8  0E6E               	movlw	110
  3976  0006EA  D0BB               	goto	L7
  3977  0006EC                     l6692:
  3978                           
  3979                           ; BSR set to: 0
  3980                           ;Menu.c: 339:                 LcPutChar(menuStrings[option][pointer]);
  3981  0006EC  ECE3  F008         	call	PL36	;call to abstracted procedure
  3982  0006F0  ECD8  F008         	call	PL32	;call to abstracted procedure
  3983  0006F4  ECD0  F008         	call	PL30	;call to abstracted procedure
  3984  0006F8  EC07  F00E         	call	_LcPutChar
  3985                           
  3986                           ;Menu.c: 340:                 ++pointer;
  3987  0006FC  2A4C               	incf	_pointer^0,f,c
  3988                           
  3989                           ;Menu.c: 341:                 if(pointer == 16){
  3990  0006FE  0E10               	movlw	16
  3991  000700  184C               	xorwf	_pointer^0,w,c
  3992  000702  A4D8               	btfss	status,2,c
  3993  000704  0012               	return	
  3994                           
  3995                           ;Menu.c: 342:                     ++menuState;
  3996  000706  2A4D               	incf	_menuState^0,f,c
  3997                           
  3998                           ;Menu.c: 343:                     TiResetTics(timerMenu);
  3999  000708  5041               	movf	_timerMenu^0,w,c
  4000  00070A  EC9C  F00F         	call	_TiResetTics
  4001                           
  4002                           ;Menu.c: 344:                     KeyResetValue();
  4003  00070E  EC6F  F000         	call	_KeyResetValue	;wreg free
  4004                           
  4005                           ;Menu.c: 345:                     if(option == 3){
  4006  000712  0E03               	movlw	3
  4007  000714  1847               	xorwf	_option^0,w,c
  4008  000716  A4D8               	btfss	status,2,c
  4009  000718  0012               	return	
  4010                           
  4011                           ;Menu.c: 346:                         pointer = 0;
  4012  00071A  6A4C               	clrf	_pointer^0,c
  4013                           
  4014                           ;Menu.c: 347:                         --option;
  4015  00071C  0647               	decf	_option^0,f,c
  4016                           
  4017                           ;Menu.c: 348:                         menuState = 110;
  4018  00071E  0E6E               	movlw	110
  4019  000720  6E4D               	movwf	_menuState^0,c
  4020  000722  0C6E               	retlw	110
  4021  000724                     l6712:
  4022                           
  4023                           ; BSR set to: 0
  4024                           ;Menu.c: 356:             if((pointer) < 16){
  4025  000724  0E10               	movlw	16
  4026  000726  604C               	cpfslt	_pointer^0,c
  4027  000728  D020               	goto	l6722
  4028                           
  4029                           ; BSR set to: 0
  4030                           ;Menu.c: 357:                 LcPutChar(menuStrings[option][pointer+pointerMarquee]);
  4031  00072A  ECE3  F008         	call	PL36	;call to abstracted procedure
  4032  00072E  6ADA               	clrf	fsr2h,c
  4033  000730  50DF               	movf	indf2,w,c
  4034  000732  244C               	addwf	_pointer^0,w,c
  4035  000734  244B               	addwf	_pointerMarquee^0,w,c
  4036  000736  ECD0  F008         	call	PL30	;call to abstracted procedure
  4037  00073A  EC07  F00E         	call	_LcPutChar
  4038                           
  4039                           ;Menu.c: 358:                 pointer++;
  4040  00073E  2A4C               	incf	_pointer^0,f,c
  4041                           
  4042                           ;Menu.c: 360:                 if(pointer+pointerMarquee > (29 -1)){
  4043  000740  504B               	movf	_pointerMarquee^0,w,c
  4044  000742  C04C  F0F8         	movff	_pointer,??_menuMotor
  4045  000746  0100               	movlb	0	; () banked
  4046  000748  6BF9               	clrf	(??_menuMotor+1)& (0+255),b
  4047  00074A  27F8               	addwf	??_menuMotor& (0+255),f,b
  4048  00074C  0E00               	movlw	0
  4049  00074E  23F9               	addwfc	(??_menuMotor+1)& (0+255),f,b
  4050  000750  BFF9               	btfsc	(??_menuMotor+1)& (0+255),7,b
  4051  000752  0C00               	retlw	0
  4052  000754  51F9               	movf	(??_menuMotor+1)& (0+255),w,b
  4053  000756  E104               	bnz	u5640
  4054  000758  0E1D               	movlw	29
  4055  00075A  5DF8               	subwf	??_menuMotor& (0+255),w,b
  4056  00075C  A0D8               	btfss	status,0,c
  4057  00075E  0012               	return	
  4058  000760                     u5640:
  4059                           
  4060                           ; BSR set to: 0
  4061                           ;Menu.c: 361:                     auxPM = pointerMarquee;
  4062  000760  C04B  F04A         	movff	_pointerMarquee,_auxPM
  4063                           
  4064                           ;Menu.c: 362:                     pointer=0;
  4065  000764  6A4C               	clrf	_pointer^0,c
  4066                           
  4067                           ;Menu.c: 363:                     pointerMarquee=0;
  4068  000766  6A4B               	clrf	_pointerMarquee^0,c
  4069  000768  0012               	return	
  4070  00076A                     l6722:
  4071                           
  4072                           ; BSR set to: 0
  4073                           ;Menu.c: 367:                 ++pointerMarquee;
  4074  00076A  2A4B               	incf	_pointerMarquee^0,f,c
  4075  00076C  D1B8               	goto	l7014
  4076  00076E                     l6726:
  4077                           
  4078                           ; BSR set to: 0
  4079                           ;Menu.c: 374:             if(TiGetTics(timerMenu) > 1200){
  4080  00076E  5041               	movf	_timerMenu^0,w,c
  4081  000770  EC48  F00F         	call	_TiGetTics
  4082  000774  ECEB  F008         	call	PL42	;call to abstracted procedure
  4083  000778  E31D               	bnc	l6754
  4084                           
  4085                           ;Menu.c: 375:                 if(auxPM){
  4086  00077A  504A               	movf	_auxPM^0,w,c
  4087  00077C  E004               	bz	l6732
  4088                           
  4089                           ;Menu.c: 376:                     pointerMarquee = ++auxPM;
  4090  00077E  2A4A               	incf	_auxPM^0,f,c
  4091  000780  C04A  F04B         	movff	_auxPM,_pointerMarquee
  4092                           
  4093                           ;Menu.c: 377:                 }else ++pointerMarquee;
  4094  000784  D001               	goto	l6734
  4095  000786                     l6732:
  4096  000786  2A4B               	incf	_pointerMarquee^0,f,c
  4097  000788                     l6734:
  4098                           
  4099                           ;Menu.c: 378:                 pointer=0;
  4100  000788  6A4C               	clrf	_pointer^0,c
  4101                           
  4102                           ;Menu.c: 379:                 if(aux == 0) LcGotoXY(0,0);
  4103  00078A  5040               	movf	_aux^0,w,c
  4104  00078C  E105               	bnz	l6740
  4105  00078E  0E00               	movlw	0
  4106  000790  6A5D               	clrf	LcGotoXY@Row^0,c
  4107  000792  EC7C  F00B         	call	_LcGotoXY
  4108  000796  D004               	goto	l6742
  4109  000798                     l6740:
  4110  000798  ECF4  F008         	call	PL46	;call to abstracted procedure
  4111  00079C  EC7C  F00B         	call	_LcGotoXY
  4112  0007A0                     l6742:
  4113                           
  4114                           ;Menu.c: 381:                 menuState--;
  4115  0007A0  064D               	decf	_menuState^0,f,c
  4116                           
  4117                           ;Menu.c: 382:                 if(auxPM == 28){
  4118  0007A2  0E1C               	movlw	28
  4119  0007A4  184A               	xorwf	_auxPM^0,w,c
  4120  0007A6  E104               	bnz	l6752
  4121                           
  4122                           ;Menu.c: 383:                     menuState = 110;
  4123  0007A8  0E6E               	movlw	110
  4124  0007AA  6E4D               	movwf	_menuState^0,c
  4125                           
  4126                           ;Menu.c: 384:                     pointer = 0;
  4127  0007AC  6A4C               	clrf	_pointer^0,c
  4128                           
  4129                           ;Menu.c: 385:                     pointerMarquee = 0;
  4130  0007AE  6A4B               	clrf	_pointerMarquee^0,c
  4131  0007B0                     l6752:
  4132                           
  4133                           ;Menu.c: 386:                     auxPM = 0;
  4134  0007B0  6A4A               	clrf	_auxPM^0,c
  4135                           
  4136                           ;Menu.c: 387:                 }else{
  4137  0007B2  0012               	return	
  4138  0007B4                     l6754:
  4139                           
  4140                           ;Menu.c: 391:                 if(aux == 0) ++option;
  4141  0007B4  5040               	movf	_aux^0,w,c
  4142  0007B6  E18C               	bnz	u5590
  4143  0007B8  2A47               	incf	_option^0,f,c
  4144  0007BA  D78A               	goto	u5590
  4145  0007BC                     l6760:
  4146                           
  4147                           ; BSR set to: 0
  4148                           ;Menu.c: 397:             if(TiGetTics(timerMenu) > 500){
  4149  0007BC  5041               	movf	_timerMenu^0,w,c
  4150  0007BE  EC48  F00F         	call	_TiGetTics
  4151  0007C2  0EF5               	movlw	245
  4152  0007C4  5C55               	subwf	?_TiGetTics^0,w,c
  4153  0007C6  0E01               	movlw	1
  4154  0007C8  5856               	subwfb	(?_TiGetTics+1)^0,w,c
  4155  0007CA  E201 D088          	bnc	l6864
  4156                           
  4157                           ;Menu.c: 398:                 if(isPressed()){
  4158  0007CE  ECBF  F000         	call	_isPressed	;wreg free
  4159  0007D2  0900               	iorlw	0
  4160  0007D4  E048               	bz	l6816
  4161                           
  4162                           ;Menu.c: 399:                     if(KeyGetValue()== '#'){
  4163  0007D6  ECCB  F000         	call	_KeyGetValue	;wreg free
  4164  0007DA  0A23               	xorlw	35
  4165  0007DC  A4D8               	btfss	status,2,c
  4166  0007DE  0012               	return	
  4167                           
  4168                           ;Menu.c: 400:                         if(option==1){
  4169  0007E0  0447               	decf	_option^0,w,c
  4170  0007E2  E103               	bnz	l6772
  4171                           
  4172                           ;Menu.c: 401:                             pointer = 0;
  4173  0007E4  6A4C               	clrf	_pointer^0,c
  4174                           
  4175                           ;Menu.c: 402:                             menuState = 13;
  4176  0007E6  0E0D               	movlw	13
  4177  0007E8  D03C               	goto	L7
  4178  0007EA                     l6772:
  4179  0007EA  0E02               	movlw	2
  4180  0007EC  1847               	xorwf	_option^0,w,c
  4181  0007EE  E10C               	bnz	l6784
  4182                           
  4183                           ;Menu.c: 404:                             KeyResetValue();
  4184  0007F0  EC6F  F000         	call	_KeyResetValue	;wreg free
  4185                           
  4186                           ;Menu.c: 405:                             menuState = 27;
  4187  0007F4  0E1B               	movlw	27
  4188  0007F6  6E4D               	movwf	_menuState^0,c
  4189                           
  4190                           ;Menu.c: 406:                             LcClear();
  4191  0007F8  EC31  F000         	call	_LcClear	;wreg free
  4192                           
  4193                           ;Menu.c: 407:                             LcGotoXY(0,0);
  4194  0007FC  0E00               	movlw	0
  4195  0007FE  6A5D               	clrf	LcGotoXY@Row^0,c
  4196  000800  EC7C  F00B         	call	_LcGotoXY
  4197                           
  4198                           ;Menu.c: 408:                             pointer=0;
  4199  000804  6A4C               	clrf	_pointer^0,c
  4200                           
  4201                           ;Menu.c: 409:                         }else if(option==3){
  4202  000806  D668               	goto	l310
  4203  000808                     l6784:
  4204  000808  0E03               	movlw	3
  4205  00080A  1847               	xorwf	_option^0,w,c
  4206  00080C  E110               	bnz	l6794
  4207                           
  4208                           ;Menu.c: 410:                             aux = 0;
  4209  00080E  6A40               	clrf	_aux^0,c
  4210                           
  4211                           ;Menu.c: 411:                             pointerUser=0;
  4212  000810  6A49               	clrf	_pointerUser^0,c
  4213                           
  4214                           ;Menu.c: 412:                             pointer=0;
  4215  000812  6A4C               	clrf	_pointer^0,c
  4216                           
  4217                           ;Menu.c: 413:                             pointerMarquee = 0;
  4218  000814  6A4B               	clrf	_pointerMarquee^0,c
  4219                           
  4220                           ;Menu.c: 414:                             LcClear();
  4221  000816  EC31  F000         	call	_LcClear	;wreg free
  4222                           
  4223                           ;Menu.c: 415:                             LcGotoXY(0,0);
  4224  00081A  0E00               	movlw	0
  4225  00081C  6A5D               	clrf	LcGotoXY@Row^0,c
  4226  00081E  EC7C  F00B         	call	_LcGotoXY
  4227                           
  4228                           ;Menu.c: 416:                             menuState = 48;
  4229  000822  0E30               	movlw	48
  4230  000824  6E4D               	movwf	_menuState^0,c
  4231                           
  4232                           ;Menu.c: 417:                             TiResetTics(timerMenu);
  4233  000826  5041               	movf	_timerMenu^0,w,c
  4234  000828  EC9C  F00F         	call	_TiResetTics
  4235                           
  4236                           ;Menu.c: 418:                         }else if(option==4){
  4237  00082C  D655               	goto	l310
  4238  00082E                     l6794:
  4239  00082E  0E04               	movlw	4
  4240  000830  1847               	xorwf	_option^0,w,c
  4241  000832  E10A               	bnz	l6804
  4242                           
  4243                           ;Menu.c: 419:                             pointer=0;
  4244  000834  6A4C               	clrf	_pointer^0,c
  4245                           
  4246                           ;Menu.c: 420:                             menuState = 45;
  4247  000836  0E2D               	movlw	45
  4248  000838  6E4D               	movwf	_menuState^0,c
  4249                           
  4250                           ;Menu.c: 421:                             LcClear();
  4251  00083A  EC31  F000         	call	_LcClear	;wreg free
  4252                           
  4253                           ;Menu.c: 422:                             LcGotoXY(0,0);
  4254  00083E  0E00               	movlw	0
  4255  000840  6A5D               	clrf	LcGotoXY@Row^0,c
  4256  000842  EC7C  F00B         	call	_LcGotoXY
  4257                           
  4258                           ;Menu.c: 423:                         }else if(option==5){
  4259  000846  D648               	goto	l310
  4260  000848                     l6804:
  4261  000848  0E05               	movlw	5
  4262  00084A  1847               	xorwf	_option^0,w,c
  4263  00084C  E001 D644          	bnz	l310
  4264                           
  4265                           ;Menu.c: 424:                             LcClear();
  4266  000850  EC31  F000         	call	_LcClear	;wreg free
  4267                           
  4268                           ;Menu.c: 425:                             LcGotoXY(0,0);
  4269  000854  0E00               	movlw	0
  4270  000856  6A5D               	clrf	LcGotoXY@Row^0,c
  4271  000858  EC7C  F00B         	call	_LcGotoXY
  4272                           
  4273                           ;Menu.c: 426:                             pointer=0;
  4274  00085C  6A4C               	clrf	_pointer^0,c
  4275                           
  4276                           ;Menu.c: 427:                             aux = 0;
  4277  00085E  6A40               	clrf	_aux^0,c
  4278                           
  4279                           ;Menu.c: 428:                             menuState = 35;
  4280  000860  0E23               	movlw	35
  4281  000862                     L7:
  4282  000862  6E4D               	movwf	_menuState^0,c
  4283  000864  D639               	goto	l310
  4284  000866                     l6816:
  4285  000866  ECC3  F000         	call	_getPositionJoystick	;wreg free
  4286  00086A  0A53               	xorlw	83
  4287  00086C  E114               	bnz	l6834
  4288  00086E  ECC7  F000         	call	_getCentreJoystick	;wreg free
  4289  000872  0900               	iorlw	0
  4290  000874  E110               	bnz	l6834
  4291                           
  4292                           ;Menu.c: 434:                     resetPositionJoystick();
  4293  000876  ECBD  F000         	call	_resetPositionJoystick	;wreg free
  4294                           
  4295                           ;Menu.c: 435:                     menuState = 10;
  4296                           
  4297                           ;Menu.c: 436:                     pointer=0;
  4298  00087A  EC12  F009         	call	PL88	;call to abstracted procedure
  4299                           
  4300                           ;Menu.c: 437:                     LcClear();
  4301  00087E  EC31  F000         	call	_LcClear	;wreg free
  4302                           
  4303                           ;Menu.c: 438:                     LcGotoXY(0,0);
  4304  000882  0E00               	movlw	0
  4305  000884  6A5D               	clrf	LcGotoXY@Row^0,c
  4306  000886  EC7C  F00B         	call	_LcGotoXY
  4307                           
  4308                           ;Menu.c: 439:                     if(option==5) --option;
  4309  00088A  0E05               	movlw	5
  4310  00088C  1847               	xorwf	_option^0,w,c
  4311  00088E  A4D8               	btfss	status,2,c
  4312  000890  0012               	return	
  4313  000892                     u5800:
  4314  000892  0647               	decf	_option^0,f,c
  4315  000894  0012               	return	
  4316  000896                     l6834:
  4317  000896  ECC3  F000         	call	_getPositionJoystick	;wreg free
  4318  00089A  0A57               	xorlw	87
  4319  00089C  E113               	bnz	l6854
  4320  00089E  ECC7  F000         	call	_getCentreJoystick	;wreg free
  4321  0008A2  0900               	iorlw	0
  4322  0008A4  E10F               	bnz	l6854
  4323                           
  4324                           ;Menu.c: 442:                     resetPositionJoystick();
  4325  0008A6  ECBD  F000         	call	_resetPositionJoystick	;wreg free
  4326                           
  4327                           ;Menu.c: 443:                     menuState = 10;
  4328                           
  4329                           ;Menu.c: 444:                     pointer=0;
  4330  0008AA  EC12  F009         	call	PL88	;call to abstracted procedure
  4331                           
  4332                           ;Menu.c: 445:                     LcClear();
  4333  0008AE  EC31  F000         	call	_LcClear	;wreg free
  4334                           
  4335                           ;Menu.c: 446:                     LcGotoXY(0,0);
  4336  0008B2  0E00               	movlw	0
  4337  0008B4  6A5D               	clrf	LcGotoXY@Row^0,c
  4338  0008B6  EC7C  F00B         	call	_LcGotoXY
  4339                           
  4340                           ;Menu.c: 447:                     if(option==1) --option;
  4341  0008BA  0447               	decf	_option^0,w,c
  4342  0008BC  E0EA               	bz	u5800
  4343  0008BE  0E02               	movlw	2
  4344  0008C0  5E47               	subwf	_option^0,f,c
  4345  0008C2  0C02               	retlw	2
  4346  0008C4                     l6854:
  4347  0008C4  0E03               	movlw	3
  4348  0008C6  1847               	xorwf	_option^0,w,c
  4349  0008C8  E004               	bz	u5850
  4350  0008CA  0E02               	movlw	2
  4351  0008CC  1847               	xorwf	_option^0,w,c
  4352  0008CE  A4D8               	btfss	status,2,c
  4353  0008D0  0012               	return	
  4354  0008D2                     u5850:
  4355                           
  4356                           ;Menu.c: 450:                     if(aux == 0) --option;
  4357  0008D2  5040               	movf	_aux^0,w,c
  4358  0008D4  E101               	bnz	l6862
  4359  0008D6                     u5860:
  4360  0008D6  0647               	decf	_option^0,f,c
  4361  0008D8                     l6862:
  4362                           
  4363                           ;Menu.c: 451:                     menuState = 111;
  4364  0008D8  0E6F               	movlw	111
  4365  0008DA  6E4D               	movwf	_menuState^0,c
  4366  0008DC  0C6F               	retlw	111
  4367  0008DE                     l6864:
  4368  0008DE  0E03               	movlw	3
  4369  0008E0  1847               	xorwf	_option^0,w,c
  4370  0008E2  E004               	bz	u5880
  4371  0008E4  0E02               	movlw	2
  4372  0008E6  1847               	xorwf	_option^0,w,c
  4373  0008E8  A4D8               	btfss	status,2,c
  4374  0008EA  0012               	return	
  4375  0008EC                     u5880:
  4376                           
  4377                           ;Menu.c: 455:                 if(aux == 0) --option;
  4378  0008EC  5040               	movf	_aux^0,w,c
  4379  0008EE  E0F3               	bz	u5860
  4380  0008F0  D7F3               	goto	l6862
  4381  0008F2                     l6874:
  4382                           
  4383                           ; BSR set to: 0
  4384                           ;Menu.c: 463:    if(users[pointerUser].username[pointer] != '\0'){
  4385  0008F2  5049               	movf	_pointerUser^0,w,c
  4386  0008F4  EC86  F008         	call	PL2	;call to abstracted procedure
  4387  0008F8  E00B               	bz	l6882
  4388                           
  4389                           ; BSR set to: 0
  4390                           ;Menu.c: 464:     if(TXbusy()==1){
  4391  0008FA  ECAD  F000         	call	_TXbusy	;wreg free
  4392  0008FE  06E8               	decf	wreg,f,c
  4393  000900  A4D8               	btfss	status,2,c
  4394  000902  0012               	return	
  4395                           
  4396                           ;Menu.c: 465:      setTX(users[pointerUser].username[pointer]);
  4397  000904  5049               	movf	_pointerUser^0,w,c
  4398  000906  EC86  F008         	call	PL2	;call to abstracted procedure
  4399  00090A  ECA3  F000         	call	_setTX
  4400  00090E  D5F2               	goto	l6542
  4401  000910                     l6882:
  4402                           
  4403                           ; BSR set to: 0
  4404                           ;Menu.c: 470:                 setTX(users[pointerUser].username[pointer]);
  4405  000910  5049               	movf	_pointerUser^0,w,c
  4406  000912  DBFC               	call	PL2	;call to abstracted procedure
  4407  000914  ECA3  F000         	call	_setTX
  4408  000918  D583               	goto	l6474
  4409  00091A                     l6888:
  4410                           
  4411                           ; BSR set to: 0
  4412                           ;Menu.c: 477:             if(getRX()=='K'){
  4413  00091A  ECC1  F000         	call	_getRX	;wreg free
  4414  00091E  0A4B               	xorlw	75
  4415  000920  A4D8               	btfss	status,2,c
  4416  000922  0012               	return	
  4417                           
  4418                           ;Menu.c: 478:                 minutesCountdown = minutes;
  4419  000924  C045  F043         	movff	_minutes,_minutesCountdown
  4420                           
  4421                           ;Menu.c: 479:                 secondsCountdown = seconds;
  4422  000928  C044  F042         	movff	_seconds,_secondsCountdown
  4423                           
  4424                           ;Menu.c: 480:                 LcClear();
  4425  00092C  EC31  F000         	call	_LcClear	;wreg free
  4426                           
  4427                           ;Menu.c: 481:                 LcGotoXY(0,0);
  4428  000930  0E00               	movlw	0
  4429  000932  6A5D               	clrf	LcGotoXY@Row^0,c
  4430  000934  EC7C  F00B         	call	_LcGotoXY
  4431                           
  4432                           ;Menu.c: 482:                 ++menuState;
  4433  000938  2A4D               	incf	_menuState^0,f,c
  4434                           
  4435                           ;Menu.c: 483:                 gameON = 1;
  4436  00093A  0E01               	movlw	1
  4437  00093C  6E3D               	movwf	_gameON^0,c
  4438                           
  4439                           ;Menu.c: 484:                 pointer =0;
  4440  00093E  6A4C               	clrf	_pointer^0,c
  4441                           
  4442                           ;Menu.c: 485:                 startMusic();
  4443  000940  EF47  F000         	goto	_startMusic	;wreg free
  4444  000944                     l6902:
  4445                           
  4446                           ; BSR set to: 0
  4447                           ;Menu.c: 490:    LcPutChar(timeRemainingString[pointer]);
  4448  000944  0E00               	movlw	low _timeRemainingString@Menu$F554
  4449  000946  244C               	addwf	_pointer^0,w,c
  4450  000948  6ED9               	movwf	fsr2l,c
  4451  00094A  6ADA               	clrf	fsr2h,c
  4452  00094C  0E01               	movlw	high _timeRemainingString@Menu$F554
  4453  00094E  22DA               	addwfc	fsr2h,f,c
  4454  000950  50DF               	movf	indf2,w,c
  4455  000952  EC07  F00E         	call	_LcPutChar
  4456                           
  4457                           ;Menu.c: 491:             ++pointer;
  4458  000956  2A4C               	incf	_pointer^0,f,c
  4459                           
  4460                           ;Menu.c: 492:             if(pointer > 14){
  4461  000958  0E0E               	movlw	14
  4462  00095A  644C               	cpfsgt	_pointer^0,c
  4463  00095C  0C0E               	retlw	14
  4464  00095E                     u5930:
  4465                           
  4466                           ;Menu.c: 493:                 ++menuState;
  4467  00095E  2A4D               	incf	_menuState^0,f,c
  4468  000960  D5BB               	goto	l310
  4469  000962                     l6912:
  4470                           
  4471                           ; BSR set to: 0
  4472                           ;Menu.c: 499:             LcGotoXY(0,1);
  4473  000962  ECF4  F008         	call	PL46	;call to abstracted procedure
  4474  000966  EC7C  F00B         	call	_LcGotoXY
  4475                           
  4476                           ;Menu.c: 500:    TiResetTics(timerMenu);
  4477  00096A  5041               	movf	_timerMenu^0,w,c
  4478  00096C  EC9C  F00F         	call	_TiResetTics
  4479                           
  4480                           ;Menu.c: 501:             LcPutTime(minutesCountdown);
  4481  000970  5043               	movf	_minutesCountdown^0,w,c
  4482  000972  EC5B  F00F         	call	_LcPutTime
  4483                           
  4484                           ;Menu.c: 502:             LcPutChar(':');
  4485  000976  0E3A               	movlw	58
  4486  000978  EC07  F00E         	call	_LcPutChar
  4487                           
  4488                           ;Menu.c: 503:             LcPutTime(secondsCountdown);
  4489  00097C  5042               	movf	_secondsCountdown^0,w,c
  4490  00097E  EC5B  F00F         	call	_LcPutTime
  4491                           
  4492                           ;Menu.c: 504:    menuState = 39;
  4493  000982  0E27               	movlw	39
  4494  000984  6E4D               	movwf	_menuState^0,c
  4495                           
  4496                           ;Menu.c: 505:    break;
  4497  000986  0C27               	retlw	39
  4498  000988                     l6916:
  4499                           
  4500                           ; BSR set to: 0
  4501                           ;Menu.c: 508:             if(TXgetState() == 0){
  4502  000988  ECC9  F000         	call	_TXgetState	;wreg free
  4503  00098C  0900               	iorlw	0
  4504  00098E  A4D8               	btfss	status,2,c
  4505  000990  0012               	return	
  4506                           
  4507                           ;Menu.c: 509:                 sendMyTX(minutesCountdown/10 + '0');
  4508  000992  0E0A               	movlw	10
  4509  000994  6E59               	movwf	___lbdiv@divisor^0,c
  4510  000996  5043               	movf	_minutesCountdown^0,w,c
  4511  000998  ECEE  F00E         	call	___lbdiv
  4512  00099C  0F30               	addlw	48
  4513  00099E  EC1B  F000         	call	_sendMyTX
  4514  0009A2  D48C               	goto	l6358
  4515  0009A4                     l6922:
  4516                           
  4517                           ; BSR set to: 0
  4518                           ;Menu.c: 516:             if(TXgetState() == 0){
  4519  0009A4  ECC9  F000         	call	_TXgetState	;wreg free
  4520  0009A8  0900               	iorlw	0
  4521  0009AA  A4D8               	btfss	status,2,c
  4522  0009AC  0012               	return	
  4523                           
  4524                           ;Menu.c: 517:                 sendMyTX(minutesCountdown%10 + '0');
  4525  0009AE  0E0A               	movlw	10
  4526  0009B0  6E55               	movwf	___lbmod@divisor^0,c
  4527  0009B2  5043               	movf	_minutesCountdown^0,w,c
  4528  0009B4  EC35  F00F         	call	___lbmod
  4529  0009B8  0F30               	addlw	48
  4530  0009BA  EC1B  F000         	call	_sendMyTX
  4531  0009BE  D47E               	goto	l6358
  4532  0009C0                     l6928:
  4533                           
  4534                           ; BSR set to: 0
  4535                           ;Menu.c: 523:             if(TXgetState() == 0){
  4536  0009C0  ECC9  F000         	call	_TXgetState	;wreg free
  4537  0009C4  0900               	iorlw	0
  4538  0009C6  A4D8               	btfss	status,2,c
  4539  0009C8  0012               	return	
  4540                           
  4541                           ;Menu.c: 524:                 sendMyTX(':');
  4542  0009CA  0E3A               	movlw	58
  4543  0009CC  EC1B  F000         	call	_sendMyTX
  4544  0009D0  D475               	goto	l6358
  4545  0009D2                     l6934:
  4546                           
  4547                           ; BSR set to: 0
  4548                           ;Menu.c: 530:             if(TXgetState() == 0){
  4549  0009D2  ECC9  F000         	call	_TXgetState	;wreg free
  4550  0009D6  0900               	iorlw	0
  4551  0009D8  A4D8               	btfss	status,2,c
  4552  0009DA  0012               	return	
  4553                           
  4554                           ;Menu.c: 531:                 sendMyTX(secondsCountdown/10 + '0');
  4555  0009DC  0E0A               	movlw	10
  4556  0009DE  6E59               	movwf	___lbdiv@divisor^0,c
  4557  0009E0  5042               	movf	_secondsCountdown^0,w,c
  4558  0009E2  ECEE  F00E         	call	___lbdiv
  4559  0009E6  0F30               	addlw	48
  4560  0009E8  EC1B  F000         	call	_sendMyTX
  4561  0009EC  D467               	goto	l6358
  4562  0009EE                     l6940:
  4563                           
  4564                           ; BSR set to: 0
  4565                           ;Menu.c: 537:             if(TXgetState() == 0){
  4566  0009EE  ECC9  F000         	call	_TXgetState	;wreg free
  4567  0009F2  0900               	iorlw	0
  4568  0009F4  A4D8               	btfss	status,2,c
  4569  0009F6  0012               	return	
  4570                           
  4571                           ;Menu.c: 538:                 sendMyTX(secondsCountdown%10 + '0');
  4572  0009F8  0E0A               	movlw	10
  4573  0009FA  6E55               	movwf	___lbmod@divisor^0,c
  4574  0009FC  5042               	movf	_secondsCountdown^0,w,c
  4575  0009FE  EC35  F00F         	call	___lbmod
  4576  000A02  0F30               	addlw	48
  4577  000A04  EC1B  F000         	call	_sendMyTX
  4578  000A08  D459               	goto	l6358
  4579  000A0A                     l6946:
  4580                           
  4581                           ; BSR set to: 0
  4582                           ;Menu.c: 544:             if(TXgetState() == 0){
  4583  000A0A  ECC9  F000         	call	_TXgetState	;wreg free
  4584  000A0E  0900               	iorlw	0
  4585  000A10  A4D8               	btfss	status,2,c
  4586  000A12  0012               	return	
  4587                           
  4588                           ;Menu.c: 545:                 sendMyTX(' ');
  4589  000A14  0E20               	movlw	32
  4590  000A16  EC1B  F000         	call	_sendMyTX
  4591                           
  4592                           ;Menu.c: 546:                 menuState = 17;
  4593  000A1A  0E11               	movlw	17
  4594  000A1C  6E4D               	movwf	_menuState^0,c
  4595  000A1E  0C11               	retlw	17
  4596  000A20                     l6952:
  4597                           
  4598                           ; BSR set to: 0
  4599                           ;Menu.c: 551:    if(TiGetTics(timerMenu) == 1200){
  4600  000A20  5041               	movf	_timerMenu^0,w,c
  4601  000A22  EC48  F00F         	call	_TiGetTics
  4602  000A26  0EB0               	movlw	176
  4603  000A28  1855               	xorwf	?_TiGetTics^0,w,c
  4604  000A2A  E114               	bnz	l6972
  4605  000A2C  0E04               	movlw	4
  4606  000A2E  1856               	xorwf	(?_TiGetTics+1)^0,w,c
  4607  000A30  E111               	bnz	l6972
  4608                           
  4609                           ;Menu.c: 552:                 if(secondsCountdown==0){
  4610  000A32  5042               	movf	_secondsCountdown^0,w,c
  4611  000A34  E10A               	bnz	l6966
  4612                           
  4613                           ;Menu.c: 553:                     --minutesCountdown;
  4614  000A36  0643               	decf	_minutesCountdown^0,f,c
  4615                           
  4616                           ;Menu.c: 554:                     if(minutesCountdown==0 && secondsCountdown==0){
  4617  000A38  5043               	movf	_minutesCountdown^0,w,c
  4618  000A3A  E104               	bnz	l6964
  4619  000A3C  5042               	movf	_secondsCountdown^0,w,c
  4620  000A3E  E102               	bnz	l6964
  4621                           
  4622                           ;Menu.c: 555:                         ++menuState;
  4623  000A40  2A4D               	incf	_menuState^0,f,c
  4624                           
  4625                           ;Menu.c: 556:                     }
  4626  000A42  D004               	goto	l6968
  4627  000A44                     l6964:
  4628                           
  4629                           ;Menu.c: 558:                         secondsCountdown= 59;
  4630  000A44  0E3B               	movlw	59
  4631  000A46  6E42               	movwf	_secondsCountdown^0,c
  4632  000A48  D001               	goto	l6968
  4633  000A4A                     l6966:
  4634                           
  4635                           ;Menu.c: 562:                     --secondsCountdown;
  4636  000A4A  0642               	decf	_secondsCountdown^0,f,c
  4637  000A4C                     l6968:
  4638                           
  4639                           ;Menu.c: 564:                 LcGotoXY(0,1);
  4640  000A4C  DBCD               	call	PL46	;call to abstracted procedure
  4641  000A4E  EC7C  F00B         	call	_LcGotoXY
  4642                           
  4643                           ;Menu.c: 565:     --menuState;
  4644  000A52  064D               	decf	_menuState^0,f,c
  4645  000A54                     l6972:
  4646                           
  4647                           ;Menu.c: 567:    if(KeyGetValue()== '*'){
  4648  000A54  ECCB  F000         	call	_KeyGetValue	;wreg free
  4649  000A58  0A2A               	xorlw	42
  4650  000A5A  E101               	bnz	l6976
  4651                           
  4652                           ;Menu.c: 568:                 ++menuState;
  4653  000A5C  2A4D               	incf	_menuState^0,f,c
  4654  000A5E                     l6976:
  4655                           
  4656                           ;Menu.c: 570:             if (isPressed()){
  4657  000A5E  ECBF  F000         	call	_isPressed	;wreg free
  4658  000A62  0900               	iorlw	0
  4659  000A64  B4D8               	btfsc	status,2,c
  4660  000A66  0012               	return	
  4661                           
  4662                           ;Menu.c: 571:                 if(TXgetState()==0){
  4663  000A68  ECC9  F000         	call	_TXgetState	;wreg free
  4664  000A6C  0900               	iorlw	0
  4665  000A6E  E002 EF6F  F000    	bnz	_KeyResetValue
  4666                           
  4667                           ;Menu.c: 572:                     keyValue = KeyGetNumber();
  4668  000A74  EC99  F000         	call	_KeyGetNumber	;wreg free
  4669                           
  4670                           ;Menu.c: 573:                     setTX(keyValue+'0');
  4671  000A78  DBDC               	call	PL92	;call to abstracted procedure
  4672  000A7A  ECA3  F000         	call	_setTX
  4673  000A7E  EF6F  F000         	goto	_KeyResetValue
  4674  000A82                     l6986:
  4675                           
  4676                           ; BSR set to: 0
  4677                           ;Menu.c: 581:             if(TXbusy()==1){
  4678  000A82  ECAD  F000         	call	_TXbusy	;wreg free
  4679  000A86  06E8               	decf	wreg,f,c
  4680  000A88  A4D8               	btfss	status,2,c
  4681  000A8A  0012               	return	
  4682                           
  4683                           ;Menu.c: 582:                 endMusic();
  4684  000A8C  ECAA  F000         	call	_endMusic	;wreg free
  4685                           
  4686                           ;Menu.c: 583:                 setTX('F');
  4687  000A90  0E46               	movlw	70
  4688  000A92  ECA3  F000         	call	_setTX
  4689                           
  4690                           ;Menu.c: 584:                 TiResetTics(timerMenu);
  4691  000A96  5041               	movf	_timerMenu^0,w,c
  4692  000A98  EC9C  F00F         	call	_TiResetTics
  4693  000A9C  D40F               	goto	l6358
  4694  000A9E                     l6996:
  4695                           
  4696                           ; BSR set to: 0
  4697                           ;Menu.c: 590:    if(RXdata()==1){
  4698  000A9E  ECB0  F000         	call	_RXdata	;wreg free
  4699  000AA2  06E8               	decf	wreg,f,c
  4700  000AA4  A4D8               	btfss	status,2,c
  4701  000AA6  0012               	return	
  4702                           
  4703                           ;Menu.c: 591:                 auxPM = getRX();
  4704  000AA8  ECC1  F000         	call	_getRX	;wreg free
  4705  000AAC  6E4A               	movwf	_auxPM^0,c
  4706                           
  4707                           ;Menu.c: 592:                 aux = auxPM;
  4708  000AAE  C04A  F040         	movff	_auxPM,_aux
  4709                           
  4710                           ;Menu.c: 593:                 TiResetTics(timerMenu);
  4711  000AB2  5041               	movf	_timerMenu^0,w,c
  4712  000AB4  EC9C  F00F         	call	_TiResetTics
  4713  000AB8  D401               	goto	l6358
  4714  000ABA                     l7006:
  4715                           
  4716                           ; BSR set to: 0
  4717                           ;Menu.c: 599:             if (TiGetTics(timerMenu) < 3*1200){
  4718  000ABA  5041               	movf	_timerMenu^0,w,c
  4719  000ABC  EC48  F00F         	call	_TiGetTics
  4720  000AC0  0E10               	movlw	16
  4721  000AC2  5C55               	subwf	?_TiGetTics^0,w,c
  4722  000AC4  0E0E               	movlw	14
  4723  000AC6  5856               	subwfb	(?_TiGetTics+1)^0,w,c
  4724  000AC8  E20C               	bc	l440
  4725                           
  4726                           ;Menu.c: 600:                 if(RXdata()==1){
  4727  000ACA  ECB0  F000         	call	_RXdata	;wreg free
  4728  000ACE  06E8               	decf	wreg,f,c
  4729  000AD0  A4D8               	btfss	status,2,c
  4730  000AD2  0012               	return	
  4731                           
  4732                           ;Menu.c: 601:                     LcClear();
  4733  000AD4  EC31  F000         	call	_LcClear	;wreg free
  4734                           
  4735                           ;Menu.c: 602:                     error[0] = getRX();
  4736  000AD8  ECC1  F000         	call	_getRX	;wreg free
  4737  000ADC  6E11               	movwf	_error^0,c
  4738  000ADE                     l7014:
  4739                           
  4740                           ;Menu.c: 603:                     ++menuState;
  4741  000ADE  2A4D               	incf	_menuState^0,f,c
  4742  000AE0  D4DB               	goto	l6510
  4743  000AE2                     l440:
  4744                           
  4745                           ;Menu.c: 607:                 auxPU = pointerUser;
  4746  000AE2  C049  F048         	movff	_pointerUser,_auxPU
  4747                           
  4748                           ;Menu.c: 608:                 menuState = 34;
  4749  000AE6  0E22               	movlw	34
  4750  000AE8  6E4D               	movwf	_menuState^0,c
  4751                           
  4752                           ;Menu.c: 609:                 pointer = 0;
  4753  000AEA  6A4C               	clrf	_pointer^0,c
  4754                           
  4755                           ;Menu.c: 610:                 LcClear();
  4756  000AEC  EC31  F000         	call	_LcClear	;wreg free
  4757  000AF0  D1C4               	goto	l7326
  4758  000AF2                     l7026:
  4759                           
  4760                           ; BSR set to: 0
  4761                           ;Menu.c: 616:             if(pointer < 5){
  4762  000AF2  0E05               	movlw	5
  4763  000AF4  604C               	cpfslt	_pointer^0,c
  4764  000AF6  D00D               	goto	l7036
  4765                           
  4766                           ; BSR set to: 0
  4767                           ;Menu.c: 617:                 if(topScores[pointer].score == 0){
  4768  000AF8  DB25               	call	PL10	;call to abstracted procedure
  4769  000AFA  50DF               	movf	indf2,w,c
  4770  000AFC  E10D               	bnz	l7038
  4771                           
  4772                           ; BSR set to: 0
  4773                           ;Menu.c: 618:                     topScores[pointer].score = aux;
  4774  000AFE  DB22               	call	PL10	;call to abstracted procedure
  4775                           
  4776                           ;Menu.c: 619:                     topScores[pointer].user = pointerUser;
  4777  000B00  DB6F               	call	PL44	;call to abstracted procedure
  4778  000B02  DB1A               	call	PL8	;call to abstracted procedure
  4779  000B04  C049  FFDF         	movff	_pointerUser,indf2
  4780                           
  4781                           ; BSR set to: 0
  4782                           ;Menu.c: 620:                     ++numScores;
  4783  000B08  2A4E               	incf	_numScores@Data$F564^0,f,c
  4784                           
  4785                           ; BSR set to: 0
  4786                           ;Menu.c: 621:                     writeEepromScores(topScores[pointer], pointer);
  4787  000B0A  DB1C               	call	PL10	;call to abstracted procedure
  4788  000B0C  DB55               	call	PL34	;call to abstracted procedure
  4789  000B0E  ECB8  F00F         	call	_writeEepromScores	;wreg free
  4790  000B12                     l7036:
  4791                           
  4792                           ;Menu.c: 622:                     menuState = 23;
  4793  000B12  0E17               	movlw	23
  4794  000B14  6E4D               	movwf	_menuState^0,c
  4795                           
  4796                           ;Menu.c: 623:                 }
  4797  000B16  0C17               	retlw	23
  4798  000B18                     l7038:
  4799                           
  4800                           ; BSR set to: 0
  4801  000B18  DB15               	call	PL10	;call to abstracted procedure
  4802  000B1A  50DE               	movf	postinc2,w,c
  4803  000B1C  5C40               	subwf	_aux^0,w,c
  4804  000B1E  E201 D4E9          	bnc	l6542
  4805                           
  4806                           ; BSR set to: 0
  4807                           ;Menu.c: 628:                     prevMaxScore = topScores[pointer].score;
  4808  000B22  DB10               	call	PL10	;call to abstracted procedure
  4809  000B24  50DF               	movf	indf2,w,c
  4810  000B26  6E3E               	movwf	_prevMaxScore^0,c
  4811                           
  4812                           ;Menu.c: 629:                     prevMaxIndex = topScores[pointer].user;
  4813  000B28  504C               	movf	_pointer^0,w,c
  4814  000B2A  DB06               	call	PL8	;call to abstracted procedure
  4815  000B2C  50DF               	movf	indf2,w,c
  4816  000B2E  6E3F               	movwf	_prevMaxIndex^0,c
  4817                           
  4818                           ;Menu.c: 630:                     topScores[pointer].score = aux;
  4819  000B30  DB09               	call	PL10	;call to abstracted procedure
  4820                           
  4821                           ;Menu.c: 631:                     topScores[pointer].user = auxPU;
  4822  000B32  DB56               	call	PL44	;call to abstracted procedure
  4823  000B34  DB01               	call	PL8	;call to abstracted procedure
  4824  000B36  C048  FFDF         	movff	_auxPU,indf2
  4825                           
  4826                           ;Menu.c: 632:                     if(topScores[pointer].score != 0)writeEepromScores(top
      +                          Scores[pointer], pointer);
  4827  000B3A  DB04               	call	PL10	;call to abstracted procedure
  4828  000B3C  50DF               	movf	indf2,w,c
  4829  000B3E  E004               	bz	l7046
  4830                           
  4831                           ; BSR set to: 0
  4832  000B40  DB01               	call	PL10	;call to abstracted procedure
  4833  000B42  DB3A               	call	PL34	;call to abstracted procedure
  4834  000B44  ECB8  F00F         	call	_writeEepromScores	;wreg free
  4835  000B48                     l7046:
  4836                           
  4837                           ;Menu.c: 633:                     aux = prevMaxScore;
  4838  000B48  C03E  F040         	movff	_prevMaxScore,_aux
  4839                           
  4840                           ;Menu.c: 634:                     auxPU = prevMaxIndex;
  4841  000B4C  C03F  F048         	movff	_prevMaxIndex,_auxPU
  4842                           
  4843                           ;Menu.c: 635:                     ++pointer;
  4844  000B50  2A4C               	incf	_pointer^0,f,c
  4845                           
  4846                           ;Menu.c: 636:                     ++numScores;
  4847  000B52  2A4E               	incf	_numScores@Data$F564^0,f,c
  4848                           
  4849                           ;Menu.c: 637:                     if(numScores > 5) numScores = 5;
  4850  000B54  0E05               	movlw	5
  4851  000B56  644E               	cpfsgt	_numScores@Data$F564^0,c
  4852  000B58  0C05               	retlw	5
  4853  000B5A  6E4E               	movwf	_numScores@Data$F564^0,c
  4854  000B5C  0C05               	retlw	5
  4855  000B5E                     l7060:
  4856                           
  4857                           ; BSR set to: 0
  4858                           ;Menu.c: 647:             if(RXdata()==1){
  4859  000B5E  ECB0  F000         	call	_RXdata	;wreg free
  4860  000B62  06E8               	decf	wreg,f,c
  4861  000B64  A4D8               	btfss	status,2,c
  4862  000B66  0012               	return	
  4863                           
  4864                           ;Menu.c: 648:                 error[1] = getRX();
  4865  000B68  ECC1  F000         	call	_getRX	;wreg free
  4866  000B6C  6E12               	movwf	(_error+1)^0,c
  4867                           
  4868                           ;Menu.c: 649:                 pointer = 0;
  4869  000B6E  6A4C               	clrf	_pointer^0,c
  4870                           
  4871                           ;Menu.c: 650:                 LcClear();
  4872  000B70  EC31  F000         	call	_LcClear	;wreg free
  4873                           
  4874                           ;Menu.c: 651:                 LcGotoXY(0,0);
  4875  000B74  0E00               	movlw	0
  4876  000B76  6A5D               	clrf	LcGotoXY@Row^0,c
  4877  000B78  EC7C  F00B         	call	_LcGotoXY
  4878  000B7C  EF5E  F001         	goto	l6358
  4879  000B80                     l7072:
  4880                           
  4881                           ; BSR set to: 0
  4882                           ;Menu.c: 657:             LcPutChar(errorsString[pointer]);
  4883  000B80  504C               	movf	_pointer^0,w,c
  4884  000B82  0FEB               	addlw	low _errorsString@Menu$F557
  4885  000B84  DB24               	call	PL38	;call to abstracted procedure
  4886  000B86  EC07  F00E         	call	_LcPutChar
  4887                           
  4888                           ;Menu.c: 658:             ++pointer;
  4889  000B8A  2A4C               	incf	_pointer^0,f,c
  4890                           
  4891                           ;Menu.c: 659:             if(pointer == 7){
  4892  000B8C  0E07               	movlw	7
  4893  000B8E  184C               	xorwf	_pointer^0,w,c
  4894  000B90  A4D8               	btfss	status,2,c
  4895  000B92  0012               	return	
  4896                           
  4897                           ;Menu.c: 660:                 menuState = 20;
  4898  000B94  0E14               	movlw	20
  4899  000B96  6E4D               	movwf	_menuState^0,c
  4900                           
  4901                           ;Menu.c: 661:                 pointer=0;
  4902  000B98  6A4C               	clrf	_pointer^0,c
  4903                           
  4904                           ;Menu.c: 662:                 LcGotoXY(0,1);
  4905  000B9A  DB26               	call	PL46	;call to abstracted procedure
  4906  000B9C  EC7C  F00B         	call	_LcGotoXY
  4907                           
  4908                           ;Menu.c: 663:                 LcPutChar(error[0]);
  4909  000BA0  5011               	movf	_error^0,w,c
  4910  000BA2  EC07  F00E         	call	_LcPutChar
  4911                           
  4912                           ;Menu.c: 664:                 LcPutChar(error[1]);
  4913  000BA6  5012               	movf	(_error+1)^0,w,c
  4914  000BA8  EC07  F00E         	call	_LcPutChar
  4915  000BAC  D475               	goto	l6510
  4916  000BAE                     l7090:
  4917                           
  4918                           ; BSR set to: 0
  4919                           ;Menu.c: 670:             LcPutChar(timeLeftString[pointer]);
  4920  000BAE  0E33               	movlw	low _timeLeftString@Menu$F555
  4921  000BB0  244C               	addwf	_pointer^0,w,c
  4922  000BB2  6ED9               	movwf	fsr2l,c
  4923  000BB4  6ADA               	clrf	fsr2h,c
  4924  000BB6  0E01               	movlw	high _timeLeftString@Menu$F555
  4925  000BB8  22DA               	addwfc	fsr2h,f,c
  4926  000BBA  50DF               	movf	indf2,w,c
  4927  000BBC  EC07  F00E         	call	_LcPutChar
  4928                           
  4929                           ;Menu.c: 671:             ++pointer;
  4930  000BC0  2A4C               	incf	_pointer^0,f,c
  4931                           
  4932                           ;Menu.c: 672:             if(pointer == 10){
  4933  000BC2  0E0A               	movlw	10
  4934  000BC4  184C               	xorwf	_pointer^0,w,c
  4935  000BC6  A4D8               	btfss	status,2,c
  4936  000BC8  0012               	return	
  4937                           
  4938                           ;Menu.c: 673:                 ++menuState;
  4939  000BCA  2A4D               	incf	_menuState^0,f,c
  4940                           
  4941                           ;Menu.c: 674:                 LcGotoXY(++pointer,0);
  4942  000BCC  DB27               	call	PL84	;call to abstracted procedure
  4943  000BCE  EF7C  F00B         	goto	_LcGotoXY
  4944  000BD2                     l7100:
  4945                           
  4946                           ; BSR set to: 0
  4947                           ;Menu.c: 679:             LcPutTime(minutesCountdown);
  4948  000BD2  5043               	movf	_minutesCountdown^0,w,c
  4949  000BD4  EC5B  F00F         	call	_LcPutTime
  4950                           
  4951                           ;Menu.c: 680:             LcPutChar(':');
  4952  000BD8  0E3A               	movlw	58
  4953  000BDA  EC07  F00E         	call	_LcPutChar
  4954                           
  4955                           ;Menu.c: 681:             LcPutTime(secondsCountdown);
  4956  000BDE  5042               	movf	_secondsCountdown^0,w,c
  4957  000BE0  EC5B  F00F         	call	_LcPutTime
  4958                           
  4959                           ;Menu.c: 682:             LcGotoXY(0,1);
  4960  000BE4  DB01               	call	PL46	;call to abstracted procedure
  4961  000BE6  EC7C  F00B         	call	_LcGotoXY
  4962  000BEA  D41A               	goto	l6474
  4963  000BEC                     l7106:
  4964                           
  4965                           ; BSR set to: 0
  4966                           ;Menu.c: 688:             LcPutChar(scoreString[pointer]);
  4967  000BEC  504C               	movf	_pointer^0,w,c
  4968  000BEE  0FF2               	addlw	low _scoreString@Menu$F556
  4969  000BF0  DAEE               	call	PL38	;call to abstracted procedure
  4970  000BF2  EC07  F00E         	call	_LcPutChar
  4971                           
  4972                           ;Menu.c: 689:             ++pointer;
  4973  000BF6  2A4C               	incf	_pointer^0,f,c
  4974                           
  4975                           ;Menu.c: 690:             if(pointer == 6){
  4976  000BF8  0E06               	movlw	6
  4977  000BFA  184C               	xorwf	_pointer^0,w,c
  4978  000BFC  A4D8               	btfss	status,2,c
  4979  000BFE  0012               	return	
  4980                           
  4981                           ;Menu.c: 691:                 LcPutScore(auxPM);
  4982  000C00  504A               	movf	_auxPM^0,w,c
  4983  000C02  EC6F  F00D         	call	_LcPutScore
  4984  000C06  EF5E  F001         	goto	l6358
  4985  000C0A                     l7116:
  4986                           
  4987                           ; BSR set to: 0
  4988                           ;Menu.c: 697:             if(isPressed()){
  4989  000C0A  ECBF  F000         	call	_isPressed	;wreg free
  4990  000C0E  0900               	iorlw	0
  4991  000C10  B4D8               	btfsc	status,2,c
  4992  000C12  0012               	return	
  4993                           
  4994                           ;Menu.c: 698:     if(KeyGetSMS()== '#'){
  4995  000C14  EC94  F000         	call	_KeyGetSMS	;wreg free
  4996  000C18  0A23               	xorlw	35
  4997  000C1A  A4D8               	btfss	status,2,c
  4998  000C1C  0012               	return	
  4999                           
  5000                           ;Menu.c: 699:                     option = 0;
  5001  000C1E  6A47               	clrf	_option^0,c
  5002                           
  5003                           ;Menu.c: 700:                     LcClear();
  5004  000C20  EC31  F000         	call	_LcClear	;wreg free
  5005                           
  5006                           ;Menu.c: 701:                     pointer = 0;
  5007                           
  5008                           ;Menu.c: 702:                     LcGotoXY(0,0);
  5009  000C24  DAE9               	call	PL64	;call to abstracted procedure
  5010  000C26  EC7C  F00B         	call	_LcGotoXY
  5011  000C2A                     l7126:
  5012                           
  5013                           ;Menu.c: 703:                     menuState = 10;
  5014  000C2A  0E0A               	movlw	10
  5015  000C2C  6E4D               	movwf	_menuState^0,c
  5016  000C2E  0C0A               	retlw	10
  5017  000C30                     l7128:
  5018                           
  5019                           ; BSR set to: 0
  5020                           ;Menu.c: 711:             LcPutChar(modifyTimeString[pointer]);
  5021  000C30  0E1C               	movlw	low _modifyTimeString@Menu$F558
  5022  000C32  244C               	addwf	_pointer^0,w,c
  5023  000C34  6ED9               	movwf	fsr2l,c
  5024  000C36  6ADA               	clrf	fsr2h,c
  5025  000C38  0E01               	movlw	high _modifyTimeString@Menu$F558
  5026  000C3A  22DA               	addwfc	fsr2h,f,c
  5027  000C3C  50DF               	movf	indf2,w,c
  5028  000C3E  EC07  F00E         	call	_LcPutChar
  5029                           
  5030                           ;Menu.c: 712:    ++pointer;
  5031  000C42  2A4C               	incf	_pointer^0,f,c
  5032                           
  5033                           ;Menu.c: 713:    if(pointer == 12){
  5034  000C44  0E0C               	movlw	12
  5035  000C46  184C               	xorwf	_pointer^0,w,c
  5036  000C48  A4D8               	btfss	status,2,c
  5037  000C4A  0012               	return	
  5038                           
  5039                           ;Menu.c: 714:                 LcGotoXY(0,1);
  5040  000C4C  DACD               	call	PL46	;call to abstracted procedure
  5041  000C4E  EC7C  F00B         	call	_LcGotoXY
  5042                           
  5043                           ;Menu.c: 715:                 keyValue = KeyGetNumber();
  5044  000C52  EC99  F000         	call	_KeyGetNumber	;wreg free
  5045  000C56  6E46               	movwf	_keyValue^0,c
  5046                           
  5047                           ;Menu.c: 716:     pointer=0;
  5048  000C58  6A4C               	clrf	_pointer^0,c
  5049                           
  5050                           ;Menu.c: 717:                 minutes =0;
  5051  000C5A  6A45               	clrf	_minutes^0,c
  5052                           
  5053                           ;Menu.c: 718:                 TiResetTics(timerMenu);
  5054  000C5C  5041               	movf	_timerMenu^0,w,c
  5055  000C5E  EC9C  F00F         	call	_TiResetTics
  5056                           
  5057                           ;Menu.c: 719:                 aux = 28;
  5058  000C62  0E1C               	movlw	28
  5059  000C64                     L8:
  5060  000C64  6E40               	movwf	_aux^0,c
  5061                           
  5062                           ;Menu.c: 720:                 menuState = 33;
  5063  000C66  0E21               	movlw	33
  5064  000C68  6E4D               	movwf	_menuState^0,c
  5065  000C6A  0C21               	retlw	33
  5066  000C6C                     l7148:
  5067                           
  5068                           ; BSR set to: 0
  5069                           ;Menu.c: 725:             if(isPressed() && TiGetTics(timerMenu)> 24){
  5070  000C6C  ECBF  F000         	call	_isPressed	;wreg free
  5071  000C70  0900               	iorlw	0
  5072  000C72  B4D8               	btfsc	status,2,c
  5073  000C74  0012               	return	
  5074  000C76  5041               	movf	_timerMenu^0,w,c
  5075  000C78  EC48  F00F         	call	_TiGetTics
  5076  000C7C  5056               	movf	(?_TiGetTics+1)^0,w,c
  5077  000C7E  E104               	bnz	u6240
  5078  000C80  0E19               	movlw	25
  5079  000C82  5C55               	subwf	?_TiGetTics^0,w,c
  5080  000C84  A0D8               	btfss	status,0,c
  5081  000C86  0012               	return	
  5082  000C88                     u6240:
  5083                           
  5084                           ;Menu.c: 726:                 TiResetTics(timerMenu);
  5085  000C88  5041               	movf	_timerMenu^0,w,c
  5086  000C8A  EC9C  F00F         	call	_TiResetTics
  5087                           
  5088                           ;Menu.c: 727:                 keyValue = KeyGetNumber();
  5089  000C8E  EC99  F000         	call	_KeyGetNumber	;wreg free
  5090                           
  5091                           ;Menu.c: 728:                 LcPutChar(keyValue + '0');
  5092  000C92  DACF               	call	PL92	;call to abstracted procedure
  5093  000C94  EC07  F00E         	call	_LcPutChar
  5094                           
  5095                           ;Menu.c: 729:                 minutes = keyValue*10;
  5096  000C98  5046               	movf	_keyValue^0,w,c
  5097  000C9A  0D0A               	mullw	10
  5098  000C9C  CFF3 F045          	movff	prodl,_minutes
  5099                           
  5100                           ;Menu.c: 730:                 aux = 29;
  5101  000CA0  0E1D               	movlw	29
  5102  000CA2  D7E0               	goto	L8
  5103  000CA4                     l7164:
  5104                           
  5105                           ; BSR set to: 0
  5106                           ;Menu.c: 736:             if(KeyGetValue() && TiGetTics(timerMenu)> 24){
  5107  000CA4  ECCB  F000         	call	_KeyGetValue	;wreg free
  5108  000CA8  0900               	iorlw	0
  5109  000CAA  B4D8               	btfsc	status,2,c
  5110  000CAC  0012               	return	
  5111  000CAE  5041               	movf	_timerMenu^0,w,c
  5112  000CB0  EC48  F00F         	call	_TiGetTics
  5113  000CB4  5056               	movf	(?_TiGetTics+1)^0,w,c
  5114  000CB6  E104               	bnz	u6260
  5115  000CB8  0E19               	movlw	25
  5116  000CBA  5C55               	subwf	?_TiGetTics^0,w,c
  5117  000CBC  A0D8               	btfss	status,0,c
  5118  000CBE  0012               	return	
  5119  000CC0                     u6260:
  5120                           
  5121                           ;Menu.c: 737:                 TiResetTics(timerMenu);
  5122  000CC0  5041               	movf	_timerMenu^0,w,c
  5123  000CC2  EC9C  F00F         	call	_TiResetTics
  5124                           
  5125                           ;Menu.c: 738:                 keyValue = KeyGetNumber();
  5126  000CC6  EC99  F000         	call	_KeyGetNumber	;wreg free
  5127  000CCA  6E46               	movwf	_keyValue^0,c
  5128                           
  5129                           ;Menu.c: 739:                 minutes += keyValue;
  5130  000CCC  5046               	movf	_keyValue^0,w,c
  5131  000CCE  2645               	addwf	_minutes^0,f,c
  5132                           
  5133                           ;Menu.c: 740:                 LcPutChar(keyValue + '0');
  5134  000CD0  5046               	movf	_keyValue^0,w,c
  5135  000CD2  0F30               	addlw	48
  5136  000CD4  EC07  F00E         	call	_LcPutChar
  5137                           
  5138                           ;Menu.c: 741:                 aux = 30;
  5139  000CD8  0E1E               	movlw	30
  5140  000CDA  D7C4               	goto	L8
  5141  000CDC                     l7180:
  5142                           
  5143                           ; BSR set to: 0
  5144                           ;Menu.c: 747:              if(KeyGetValue() && TiGetTics(timerMenu)> 24){
  5145  000CDC  ECCB  F000         	call	_KeyGetValue	;wreg free
  5146  000CE0  0900               	iorlw	0
  5147  000CE2  B4D8               	btfsc	status,2,c
  5148  000CE4  0012               	return	
  5149  000CE6  5041               	movf	_timerMenu^0,w,c
  5150  000CE8  EC48  F00F         	call	_TiGetTics
  5151  000CEC  5056               	movf	(?_TiGetTics+1)^0,w,c
  5152  000CEE  E104               	bnz	u6280
  5153  000CF0  0E19               	movlw	25
  5154  000CF2  5C55               	subwf	?_TiGetTics^0,w,c
  5155  000CF4  A0D8               	btfss	status,0,c
  5156  000CF6  0012               	return	
  5157  000CF8                     u6280:
  5158                           
  5159                           ;Menu.c: 748:                 LcPutChar(':');
  5160  000CF8  0E3A               	movlw	58
  5161  000CFA  EC07  F00E         	call	_LcPutChar
  5162                           
  5163                           ;Menu.c: 749:                 TiResetTics(timerMenu);
  5164  000CFE  5041               	movf	_timerMenu^0,w,c
  5165  000D00  EC9C  F00F         	call	_TiResetTics
  5166                           
  5167                           ;Menu.c: 750:                 keyValue = KeyGetNumber();
  5168  000D04  EC99  F000         	call	_KeyGetNumber	;wreg free
  5169  000D08  6E46               	movwf	_keyValue^0,c
  5170                           
  5171                           ;Menu.c: 751:                 seconds = keyValue * 10;
  5172  000D0A  5046               	movf	_keyValue^0,w,c
  5173  000D0C  0D0A               	mullw	10
  5174  000D0E  CFF3 F044          	movff	prodl,_seconds
  5175                           
  5176                           ;Menu.c: 752:                 LcPutChar(keyValue + '0');
  5177  000D12  5046               	movf	_keyValue^0,w,c
  5178  000D14  0F30               	addlw	48
  5179  000D16  EC07  F00E         	call	_LcPutChar
  5180                           
  5181                           ;Menu.c: 753:                 aux = 31;
  5182  000D1A  0E1F               	movlw	31
  5183  000D1C  D7A3               	goto	L8
  5184  000D1E                     l7196:
  5185                           
  5186                           ; BSR set to: 0
  5187                           ;Menu.c: 759:              if(KeyGetValue() && TiGetTics(timerMenu)> 24){
  5188  000D1E  ECCB  F000         	call	_KeyGetValue	;wreg free
  5189  000D22  0900               	iorlw	0
  5190  000D24  B4D8               	btfsc	status,2,c
  5191  000D26  0012               	return	
  5192  000D28  5041               	movf	_timerMenu^0,w,c
  5193  000D2A  EC48  F00F         	call	_TiGetTics
  5194  000D2E  5056               	movf	(?_TiGetTics+1)^0,w,c
  5195  000D30  E104               	bnz	u6300
  5196  000D32  0E19               	movlw	25
  5197  000D34  5C55               	subwf	?_TiGetTics^0,w,c
  5198  000D36  A0D8               	btfss	status,0,c
  5199  000D38  0012               	return	
  5200  000D3A                     u6300:
  5201                           
  5202                           ;Menu.c: 760:                 TiResetTics(timerMenu);
  5203  000D3A  5041               	movf	_timerMenu^0,w,c
  5204  000D3C  EC9C  F00F         	call	_TiResetTics
  5205                           
  5206                           ;Menu.c: 761:                 keyValue = KeyGetNumber();
  5207  000D40  EC99  F000         	call	_KeyGetNumber	;wreg free
  5208  000D44  6E46               	movwf	_keyValue^0,c
  5209                           
  5210                           ;Menu.c: 762:                 seconds += keyValue;
  5211  000D46  5046               	movf	_keyValue^0,w,c
  5212  000D48  2644               	addwf	_seconds^0,f,c
  5213                           
  5214                           ;Menu.c: 763:                 LcPutChar(keyValue + '0');
  5215  000D4A  5046               	movf	_keyValue^0,w,c
  5216  000D4C  0F30               	addlw	48
  5217  000D4E  EC07  F00E         	call	_LcPutChar
  5218                           
  5219                           ;Menu.c: 764:                 aux = 32;
  5220  000D52  0E20               	movlw	32
  5221  000D54  D787               	goto	L8
  5222  000D56                     l474:
  5223                           
  5224                           ; BSR set to: 0
  5225                           ;Menu.c: 770:             if(!((PORTBbits.RB1) && (PORTBbits.RB2) && (PORTBbits.RB3))==1
      +                          )
  5226  000D56  B281               	btfsc	129,1,c	;volatile
  5227                           
  5228                           ; BSR set to: 0
  5229  000D58  A481               	btfss	129,2,c	;volatile
  5230  000D5A  D002               	goto	u6330
  5231                           
  5232                           ; BSR set to: 0
  5233  000D5C  B681               	btfsc	129,3,c	;volatile
  5234  000D5E  0012               	return	
  5235  000D60                     u6330:
  5236                           
  5237                           ; BSR set to: 0
  5238                           ;Menu.c: 771:                 if(KeyGetSMS()=='#'){
  5239  000D60  EC94  F000         	call	_KeyGetSMS	;wreg free
  5240  000D64  0A23               	xorlw	35
  5241  000D66  A4D8               	btfss	status,2,c
  5242  000D68  0012               	return	
  5243                           
  5244                           ;Menu.c: 772:                     LcClear();
  5245  000D6A  EC31  F000         	call	_LcClear	;wreg free
  5246                           
  5247                           ;Menu.c: 773:                     LcGotoXY(0,0);
  5248  000D6E  0E00               	movlw	0
  5249  000D70  6A5D               	clrf	LcGotoXY@Row^0,c
  5250  000D72  EC7C  F00B         	call	_LcGotoXY
  5251                           
  5252                           ;Menu.c: 774:                     option = 0;
  5253  000D76  6A47               	clrf	_option^0,c
  5254                           
  5255                           ;Menu.c: 775:                     pointer = 0;
  5256  000D78  6A4C               	clrf	_pointer^0,c
  5257  000D7A  D757               	goto	l7126
  5258  000D7C                     l7226:
  5259                           
  5260                           ; BSR set to: 0
  5261                           ;Menu.c: 781:             if(TiGetTics(timerMenu)>24 && !((PORTBbits.RB1) && (PORTBbits.
      +                          RB2) && (PORTBbits.RB3))==0){
  5262  000D7C  5041               	movf	_timerMenu^0,w,c
  5263  000D7E  EC48  F00F         	call	_TiGetTics
  5264  000D82  5056               	movf	(?_TiGetTics+1)^0,w,c
  5265  000D84  E104               	bnz	u6350
  5266  000D86  0E19               	movlw	25
  5267  000D88  5C55               	subwf	?_TiGetTics^0,w,c
  5268  000D8A  A0D8               	btfss	status,0,c
  5269  000D8C  0012               	return	
  5270  000D8E                     u6350:
  5271  000D8E  B281               	btfsc	129,1,c	;volatile
  5272  000D90  A481               	btfss	129,2,c	;volatile
  5273  000D92  0012               	return	
  5274  000D94  A681               	btfss	129,3,c	;volatile
  5275  000D96  0012               	return	
  5276                           
  5277                           ;Menu.c: 782:                 menuState = aux;
  5278  000D98  C040  F04D         	movff	_aux,_menuState
  5279  000D9C  EF4C  F002         	goto	l6510
  5280  000DA0                     l7238:
  5281                           
  5282                           ; BSR set to: 0
  5283                           ;Menu.c: 789:             if(aux < 2){
  5284  000DA0  0E02               	movlw	2
  5285  000DA2  6040               	cpfslt	_aux^0,c
  5286  000DA4  D00F               	goto	l7252
  5287                           
  5288                           ; BSR set to: 0
  5289                           ;Menu.c: 790:                 LcPutChar(byeString[pointer]);
  5290  000DA6  504C               	movf	_pointer^0,w,c
  5291  000DA8  0F76               	addlw	low _byeString@Menu$F559
  5292  000DAA  DA11               	call	PL38	;call to abstracted procedure
  5293  000DAC  EC07  F00E         	call	_LcPutChar
  5294                           
  5295                           ;Menu.c: 791:                 ++pointer;
  5296  000DB0  2A4C               	incf	_pointer^0,f,c
  5297                           
  5298                           ;Menu.c: 792:                 if(pointer == 3){
  5299  000DB2  0E03               	movlw	3
  5300  000DB4  184C               	xorwf	_pointer^0,w,c
  5301  000DB6  A4D8               	btfss	status,2,c
  5302  000DB8  0012               	return	
  5303                           
  5304                           ;Menu.c: 793:                     ++aux;
  5305  000DBA  2A40               	incf	_aux^0,f,c
  5306                           
  5307                           ;Menu.c: 794:                     pointer = 0;
  5308  000DBC  6A4C               	clrf	_pointer^0,c
  5309                           
  5310                           ;Menu.c: 795:                     LcPutChar(' ');
  5311  000DBE  0E20               	movlw	32
  5312  000DC0  EF07  F00E         	goto	_LcPutChar
  5313  000DC4                     l7252:
  5314                           
  5315                           ; BSR set to: 0
  5316                           ;Menu.c: 798:                 TiResetTics(timerMenu);
  5317  000DC4  5041               	movf	_timerMenu^0,w,c
  5318  000DC6  EC9C  F00F         	call	_TiResetTics
  5319  000DCA  D5C9               	goto	u5930
  5320  000DCC                     l7258:
  5321                           
  5322                           ; BSR set to: 0
  5323                           ;Menu.c: 806:             LcPutChar(users[pointerUser].username[pointer]);
  5324  000DCC  5049               	movf	_pointerUser^0,w,c
  5325  000DCE  D99E               	call	PL2	;call to abstracted procedure
  5326  000DD0  EC07  F00E         	call	_LcPutChar
  5327                           
  5328                           ;Menu.c: 807:             ++pointer;
  5329  000DD4  2A4C               	incf	_pointer^0,f,c
  5330                           
  5331                           ;Menu.c: 808:             if(users[pointerUser].username[pointer] == '\0'){
  5332  000DD6  5049               	movf	_pointerUser^0,w,c
  5333  000DD8  D999               	call	PL2	;call to abstracted procedure
  5334  000DDA  E102 EF5E  F001    	bz	l6358
  5335  000DE0  0012               	return	
  5336  000DE2                     l7266:
  5337                           
  5338                           ; BSR set to: 0
  5339                           ;Menu.c: 814:             if(TiGetTics(timerMenu)> 2*1200){
  5340  000DE2  5041               	movf	_timerMenu^0,w,c
  5341  000DE4  EC48  F00F         	call	_TiGetTics
  5342  000DE8  0E61               	movlw	97
  5343  000DEA  5C55               	subwf	?_TiGetTics^0,w,c
  5344  000DEC  0E09               	movlw	9
  5345  000DEE  5856               	subwfb	(?_TiGetTics+1)^0,w,c
  5346  000DF0  A0D8               	btfss	status,0,c
  5347  000DF2  0012               	return	
  5348                           
  5349                           ;Menu.c: 815:                 pointer = 0;
  5350  000DF4  6A4C               	clrf	_pointer^0,c
  5351                           
  5352                           ;Menu.c: 816:                 minutes=30;
  5353                           
  5354                           ;Menu.c: 817:                 seconds=0;
  5355                           
  5356                           ;Menu.c: 818:                 gameON = 0;
  5357  000DF6  DA03               	call	PL66	;call to abstracted procedure
  5358                           
  5359                           ;Menu.c: 819:                 LcClear();
  5360  000DF8  EC31  F000         	call	_LcClear	;wreg free
  5361                           
  5362                           ;Menu.c: 820:                 LcCursorOn();
  5363  000DFC  EC8A  F000         	call	_LcCursorOn	;wreg free
  5364                           
  5365                           ;Menu.c: 822:                 maxScore = 0;
  5366  000E00  0E00               	movlw	0
  5367  000E02  6A5D               	clrf	LcGotoXY@Row^0,c
  5368  000E04  EC7C  F00B         	call	_LcGotoXY
  5369                           
  5370                           ;Menu.c: 823:                 option=0;
  5371  000E08  6A47               	clrf	_option^0,c
  5372                           
  5373                           ;Menu.c: 824:                 menuState = 0;
  5374  000E0A  6A4D               	clrf	_menuState^0,c
  5375  000E0C  0012               	return	
  5376  000E0E                     l7286:
  5377                           
  5378                           ; BSR set to: 0
  5379                           ;Menu.c: 831:             LcPutChar(currentTimeString[pointer]);
  5380  000E0E  0E0F               	movlw	low _currentTimeString@Menu$F560
  5381  000E10  244C               	addwf	_pointer^0,w,c
  5382  000E12  6ED9               	movwf	fsr2l,c
  5383  000E14  6ADA               	clrf	fsr2h,c
  5384  000E16  0E01               	movlw	high _currentTimeString@Menu$F560
  5385  000E18  22DA               	addwfc	fsr2h,f,c
  5386  000E1A  50DF               	movf	indf2,w,c
  5387  000E1C  EC07  F00E         	call	_LcPutChar
  5388                           
  5389                           ;Menu.c: 832:             ++pointer;
  5390  000E20  2A4C               	incf	_pointer^0,f,c
  5391                           
  5392                           ;Menu.c: 833:             if(pointer == 13){
  5393  000E22  0E0D               	movlw	13
  5394  000E24  184C               	xorwf	_pointer^0,w,c
  5395  000E26  A4D8               	btfss	status,2,c
  5396  000E28  0012               	return	
  5397                           
  5398                           ;Menu.c: 834:                 showTimerPic();
  5399  000E2A  ECA7  F000         	call	_showTimerPic	;wreg free
  5400                           
  5401                           ;Menu.c: 835:                 ++menuState;
  5402  000E2E  2A4D               	incf	_menuState^0,f,c
  5403                           
  5404                           ;Menu.c: 836:                 TiResetTics(timerMenu);
  5405  000E30  5041               	movf	_timerMenu^0,w,c
  5406  000E32  EC9C  F00F         	call	_TiResetTics
  5407  000E36  EF6F  F000         	goto	_KeyResetValue
  5408  000E3A                     l7300:
  5409                           
  5410                           ; BSR set to: 0
  5411                           ;Menu.c: 842:             if(isPressed() && TiGetTics(timerMenu)> 1200){
  5412  000E3A  ECBF  F000         	call	_isPressed	;wreg free
  5413  000E3E  0900               	iorlw	0
  5414  000E40  B4D8               	btfsc	status,2,c
  5415  000E42  0012               	return	
  5416  000E44  5041               	movf	_timerMenu^0,w,c
  5417  000E46  EC48  F00F         	call	_TiGetTics
  5418  000E4A  D9C5               	call	PL42	;call to abstracted procedure
  5419  000E4C  A0D8               	btfss	status,0,c
  5420  000E4E  0012               	return	
  5421                           
  5422                           ;Menu.c: 843:     if(KeyGetSMS()== '#'){
  5423  000E50  EC94  F000         	call	_KeyGetSMS	;wreg free
  5424  000E54  0A23               	xorlw	35
  5425  000E56  A4D8               	btfss	status,2,c
  5426  000E58  0012               	return	
  5427                           
  5428                           ;Menu.c: 844:                     stopTimerPic();
  5429  000E5A  ECBB  F000         	call	_stopTimerPic	;wreg free
  5430                           
  5431                           ;Menu.c: 845:                     option = 0;
  5432  000E5E  6A47               	clrf	_option^0,c
  5433                           
  5434                           ;Menu.c: 846:                     LcClear();
  5435  000E60  EC31  F000         	call	_LcClear	;wreg free
  5436                           
  5437                           ;Menu.c: 847:                     pointer = 0;
  5438                           
  5439                           ;Menu.c: 848:                     LcGotoXY(0,0);
  5440  000E64  D9C9               	call	PL64	;call to abstracted procedure
  5441  000E66  EC7C  F00B         	call	_LcGotoXY
  5442  000E6A  D6DF               	goto	l7126
  5443  000E6C                     l7318:
  5444                           
  5445                           ; BSR set to: 0
  5446                           ;Menu.c: 856:             KeyResetValue();
  5447  000E6C  EC6F  F000         	call	_KeyResetValue	;wreg free
  5448                           
  5449                           ;Menu.c: 857:             if(numScores == 0) menuState = 10;
  5450  000E70  504E               	movf	_numScores@Data$F564^0,w,c
  5451  000E72  E101 D6DA          	bz	l7126
  5452                           
  5453                           ;Menu.c: 859:                 aux =0;
  5454                           
  5455                           ;Menu.c: 858:             else{
  5456  000E76  6A40               	clrf	_aux^0,c
  5457                           
  5458                           ;Menu.c: 860:                 ++menuState;
  5459  000E78  2A4D               	incf	_menuState^0,f,c
  5460  000E7A                     l7326:
  5461                           
  5462                           ;Menu.c: 861:                 LcGotoXY(0,0);
  5463  000E7A  0E00               	movlw	0
  5464  000E7C  6A5D               	clrf	LcGotoXY@Row^0,c
  5465  000E7E  EF7C  F00B         	goto	_LcGotoXY
  5466  000E82                     l7328:
  5467                           
  5468                           ; BSR set to: 0
  5469                           ;Menu.c: 866:             if(users[topScores[aux].user].username[pointer] != '\0'){
  5470  000E82  D952               	call	PL6	;call to abstracted procedure
  5471  000E84  D943               	call	PL2	;call to abstracted procedure
  5472  000E86  E006               	bz	l7334
  5473                           
  5474                           ; BSR set to: 0
  5475                           ;Menu.c: 867:                 LcPutChar(users[topScores[aux].user].username[pointer]);
  5476  000E88  D94F               	call	PL6	;call to abstracted procedure
  5477  000E8A  D940               	call	PL2	;call to abstracted procedure
  5478  000E8C  EC07  F00E         	call	_LcPutChar
  5479  000E90  EF7A  F002         	goto	l6542
  5480  000E94                     l7334:
  5481                           
  5482                           ; BSR set to: 0
  5483                           ;Menu.c: 870:                 LcPutChar(':');
  5484  000E94  0E3A               	movlw	58
  5485  000E96  EC07  F00E         	call	_LcPutChar
  5486                           
  5487                           ;Menu.c: 871:                 LcGotoXY(0,1);
  5488  000E9A  D9A6               	call	PL46	;call to abstracted procedure
  5489  000E9C  EC7C  F00B         	call	_LcGotoXY
  5490                           
  5491                           ;Menu.c: 872:                 LcPutScore(topScores[aux].score);
  5492  000EA0  5040               	movf	_aux^0,w,c
  5493  000EA2  D957               	call	PL12	;call to abstracted procedure
  5494  000EA4  50DF               	movf	indf2,w,c
  5495  000EA6  EC6F  F00D         	call	_LcPutScore
  5496                           
  5497                           ;Menu.c: 873:                 LcGotoXY(16,0);
  5498  000EAA  6A5D               	clrf	LcGotoXY@Row^0,c
  5499  000EAC  0E10               	movlw	16
  5500  000EAE  EC7C  F00B         	call	_LcGotoXY
  5501                           
  5502                           ;Menu.c: 874:                 ++aux;
  5503  000EB2  2A40               	incf	_aux^0,f,c
  5504                           
  5505                           ;Menu.c: 875:                 if(numScores == aux) aux = 0;
  5506  000EB4  5040               	movf	_aux^0,w,c
  5507  000EB6  184E               	xorwf	_numScores@Data$F564^0,w,c
  5508  000EB8  E001 D551          	bnz	u5930
  5509  000EBC  6A40               	clrf	_aux^0,c
  5510  000EBE  D54F               	goto	u5930
  5511  000EC0                     l7346:
  5512                           
  5513                           ; BSR set to: 0
  5514                           ;Menu.c: 883:             if(users[topScores[aux].user].username[pointer] != '\0'){
  5515  000EC0  D933               	call	PL6	;call to abstracted procedure
  5516  000EC2  D924               	call	PL2	;call to abstracted procedure
  5517  000EC4  E006               	bz	l7352
  5518                           
  5519                           ; BSR set to: 0
  5520                           ;Menu.c: 884:                 LcPutChar(users[topScores[aux].user].username[pointer]);
  5521  000EC6  D930               	call	PL6	;call to abstracted procedure
  5522  000EC8  D921               	call	PL2	;call to abstracted procedure
  5523  000ECA  EC07  F00E         	call	_LcPutChar
  5524  000ECE  EF7A  F002         	goto	l6542
  5525  000ED2                     l7352:
  5526                           
  5527                           ; BSR set to: 0
  5528                           ;Menu.c: 887:                 LcPutChar(':');
  5529  000ED2  0E3A               	movlw	58
  5530  000ED4  EC07  F00E         	call	_LcPutChar
  5531                           
  5532                           ;Menu.c: 888:                 LcGotoXY(16,1);
  5533  000ED8  0E01               	movlw	1
  5534  000EDA  6E5D               	movwf	LcGotoXY@Row^0,c
  5535  000EDC  0E10               	movlw	16
  5536  000EDE  EC7C  F00B         	call	_LcGotoXY
  5537                           
  5538                           ;Menu.c: 889:                 LcPutScore(topScores[aux].score);
  5539  000EE2  5040               	movf	_aux^0,w,c
  5540  000EE4  D936               	call	PL12	;call to abstracted procedure
  5541  000EE6  50DF               	movf	indf2,w,c
  5542  000EE8  EC6F  F00D         	call	_LcPutScore
  5543                           
  5544                           ;Menu.c: 890:                 ++menuState;
  5545  000EEC  2A4D               	incf	_menuState^0,f,c
  5546                           
  5547                           ;Menu.c: 891:                 TiResetTics(timerMenu);
  5548  000EEE  5041               	movf	_timerMenu^0,w,c
  5549  000EF0  EC9C  F00F         	call	_TiResetTics
  5550  000EF4  EF6C  F002         	goto	l310
  5551  000EF8                     l7360:
  5552                           
  5553                           ; BSR set to: 0
  5554                           ;Menu.c: 898:             if (TiGetTics(timerMenu) > 1200){
  5555  000EF8  5041               	movf	_timerMenu^0,w,c
  5556  000EFA  EC48  F00F         	call	_TiGetTics
  5557  000EFE  D96B               	call	PL42	;call to abstracted procedure
  5558  000F00  E315               	bnc	l7380
  5559                           
  5560                           ;Menu.c: 899:                 LcScroll();
  5561  000F02  ECB3  F000         	call	_LcScroll	;wreg free
  5562                           
  5563                           ;Menu.c: 900:                 TiResetTics(timerMenu);
  5564  000F06  5041               	movf	_timerMenu^0,w,c
  5565  000F08  EC9C  F00F         	call	_TiResetTics
  5566                           
  5567                           ;Menu.c: 901:                 ++pointerMarquee;
  5568  000F0C  2A4B               	incf	_pointerMarquee^0,f,c
  5569                           
  5570                           ;Menu.c: 902:                 if(pointerMarquee == 16){
  5571  000F0E  0E10               	movlw	16
  5572  000F10  184B               	xorwf	_pointerMarquee^0,w,c
  5573  000F12  A4D8               	btfss	status,2,c
  5574  000F14  0012               	return	
  5575                           
  5576                           ;Menu.c: 903:                     LcClear();
  5577  000F16  EC31  F000         	call	_LcClear	;wreg free
  5578                           
  5579                           ;Menu.c: 904:                     pointer = 0;
  5580  000F1A  6A4C               	clrf	_pointer^0,c
  5581                           
  5582                           ;Menu.c: 905:                     menuState = 49;
  5583  000F1C  0E31               	movlw	49
  5584  000F1E  6E4D               	movwf	_menuState^0,c
  5585                           
  5586                           ;Menu.c: 906:                     LcGotoXY(0,0);
  5587  000F20  0E00               	movlw	0
  5588  000F22  6A5D               	clrf	LcGotoXY@Row^0,c
  5589  000F24  EC7C  F00B         	call	_LcGotoXY
  5590                           
  5591                           ;Menu.c: 907:                     pointerMarquee=0;
  5592  000F28  6A4B               	clrf	_pointerMarquee^0,c
  5593  000F2A  0012               	return	
  5594  000F2C                     l7380:
  5595  000F2C  ECBF  F000         	call	_isPressed	;wreg free
  5596  000F30  0900               	iorlw	0
  5597  000F32  B4D8               	btfsc	status,2,c
  5598  000F34  0012               	return	
  5599                           
  5600                           ;Menu.c: 912:                 if(KeyGetSMS()== '#'){
  5601  000F36  EC94  F000         	call	_KeyGetSMS	;wreg free
  5602  000F3A  0A23               	xorlw	35
  5603  000F3C  A4D8               	btfss	status,2,c
  5604  000F3E  0012               	return	
  5605                           
  5606                           ;Menu.c: 913:                     option = 0;
  5607  000F40  6A47               	clrf	_option^0,c
  5608                           
  5609                           ;Menu.c: 914:                     LcClear();
  5610  000F42  EC31  F000         	call	_LcClear	;wreg free
  5611                           
  5612                           ;Menu.c: 915:                     pointer = 0;
  5613                           
  5614                           ;Menu.c: 916:                     LcGotoXY(0,0);
  5615  000F46  D958               	call	PL64	;call to abstracted procedure
  5616  000F48  EC7C  F00B         	call	_LcGotoXY
  5617  000F4C  D66E               	goto	l7126
  5618  000F4E                     l7394:
  5619  000F4E  504D               	movf	_menuState^0,w,c
  5620  000F50  0100               	movlb	0	; () banked
  5621  000F52  6FF8               	movwf	??_menuMotor& (0+255),b
  5622  000F54  6BF9               	clrf	(??_menuMotor+1)& (0+255),b
  5623                           
  5624                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5625                           ; Switch size 1, requested type "space"
  5626                           ; Number of cases is 1, Range of values is 0 to 0
  5627                           ; switch strategies available:
  5628                           ; Name         Instructions Cycles
  5629                           ; simple_byte            4     3 (average)
  5630                           ;	Chosen strategy is simple_byte
  5631  000F56  51F9               	movf	(??_menuMotor+1)& (0+255),w,b
  5632  000F58  A4D8               	btfss	status,2,c
  5633  000F5A  0012               	return	
  5634                           
  5635                           ; BSR set to: 0
  5636                           ; Switch size 1, requested type "space"
  5637                           ; Number of cases is 63, Range of values is 0 to 111
  5638                           ; switch strategies available:
  5639                           ; Name         Instructions Cycles
  5640                           ; simple_byte          190    96 (average)
  5641                           ;	Chosen strategy is simple_byte
  5642  000F5C  51F8               	movf	??_menuMotor& (0+255),w,b
  5643  000F5E  E102 EF9C  F001    	bz	l6396
  5644  000F64  0A01               	xorlw	1	; case 1
  5645  000F66  E102 EFAD  F001    	bz	l6408
  5646  000F6C  0A03               	xorlw	3	; case 2
  5647  000F6E  E102 EFBE  F001    	bz	l6418
  5648  000F74  0A01               	xorlw	1	; case 3
  5649  000F76  E102 EFD4  F001    	bz	l6436
  5650  000F7C  0A07               	xorlw	7	; case 4
  5651  000F7E  E102 EFE7  F001    	bz	l6450
  5652  000F84  0A01               	xorlw	1	; case 5
  5653  000F86  E102 EF12  F002    	bz	l6478
  5654  000F8C  0A03               	xorlw	3	; case 6
  5655  000F8E  E102 EF2A  F002    	bz	l6494
  5656  000F94  0A01               	xorlw	1	; case 7
  5657  000F96  E102 EF5C  F002    	bz	l6524
  5658  000F9C  0A0F               	xorlw	15	; case 8
  5659  000F9E  E102 EF7C  F002    	bz	l6548
  5660  000FA4  0A01               	xorlw	1	; case 9
  5661  000FA6  E102 EF9D  F002    	bz	l6568
  5662  000FAC  0A03               	xorlw	3	; case 10
  5663  000FAE  E102 EF45  F003    	bz	l6654
  5664  000FB4  0A01               	xorlw	1	; case 11
  5665  000FB6  E102 EF6B  F003    	bz	l6682
  5666  000FBC  0A07               	xorlw	7	; case 12
  5667  000FBE  E102 EFDE  F003    	bz	l6760
  5668  000FC4  0A01               	xorlw	1	; case 13
  5669  000FC6  E101 D494          	bz	l6874
  5670  000FCA  0A03               	xorlw	3	; case 14
  5671  000FCC  E101 D4A5          	bz	l6888
  5672  000FD0  0A01               	xorlw	1	; case 15
  5673  000FD2  E101 D4B7          	bz	l6902
  5674  000FD6  0A1F               	xorlw	31	; case 16
  5675  000FD8  E101 D4C3          	bz	l6912
  5676  000FDC  0A01               	xorlw	1	; case 17
  5677  000FDE  E101 D51F          	bz	l6952
  5678  000FE2  0A03               	xorlw	3	; case 18
  5679  000FE4  E101 D54D          	bz	l6986
  5680  000FE8  0A01               	xorlw	1	; case 19
  5681  000FEA  E101 D558          	bz	l6996
  5682  000FEE  0A07               	xorlw	7	; case 20
  5683  000FF0  E101 D563          	bz	l7006
  5684  000FF4  0A01               	xorlw	1	; case 21
  5685  000FF6  E101 D5B2          	bz	l7060
  5686  000FFA  0A03               	xorlw	3	; case 22
  5687  000FFC  E101 D5C0          	bz	l7072
  5688  001000  0A01               	xorlw	1	; case 23
  5689  001002  E101 D5D4          	bz	l7090
  5690  001006  0A0F               	xorlw	15	; case 24
  5691  001008  E101 D5E3          	bz	l7100
  5692  00100C  0A01               	xorlw	1	; case 25
  5693  00100E  E101 D5ED          	bz	l7106
  5694  001012  0A03               	xorlw	3	; case 26
  5695  001014  E101 D5F9          	bz	l7116
  5696  001018  0A01               	xorlw	1	; case 27
  5697  00101A  E101 D609          	bz	l7128
  5698  00101E  0A07               	xorlw	7	; case 28
  5699  001020  E101 D624          	bz	l7148
  5700  001024  0A01               	xorlw	1	; case 29
  5701  001026  E101 D63D          	bz	l7164
  5702  00102A  0A03               	xorlw	3	; case 30
  5703  00102C  E101 D656          	bz	l7180
  5704  001030  0A01               	xorlw	1	; case 31
  5705  001032  E101 D674          	bz	l7196
  5706  001036  0A3F               	xorlw	63	; case 32
  5707  001038  E101 D68D          	bz	l474
  5708  00103C  0A01               	xorlw	1	; case 33
  5709  00103E  E101 D69D          	bz	l7226
  5710  001042  0A03               	xorlw	3	; case 34
  5711  001044  E101 D555          	bz	l7026
  5712  001048  0A01               	xorlw	1	; case 35
  5713  00104A  E101 D6A9          	bz	l7238
  5714  00104E  0A07               	xorlw	7	; case 36
  5715  001050  E101 D6BC          	bz	l7258
  5716  001054  0A01               	xorlw	1	; case 37
  5717  001056  E101 D6C4          	bz	l7266
  5718  00105A  0A02               	xorlw	2	; case 39
  5719  00105C  E101 D494          	bz	l6916
  5720  001060  0A0F               	xorlw	15	; case 40
  5721  001062  E101 D49F          	bz	l6922
  5722  001066  0A01               	xorlw	1	; case 41
  5723  001068  E101 D4AA          	bz	l6928
  5724  00106C  0A03               	xorlw	3	; case 42
  5725  00106E  E101 D4B0          	bz	l6934
  5726  001072  0A01               	xorlw	1	; case 43
  5727  001074  E101 D4BB          	bz	l6940
  5728  001078  0A07               	xorlw	7	; case 44
  5729  00107A  E101 D4C6          	bz	l6946
  5730  00107E  0A01               	xorlw	1	; case 45
  5731  001080  E101 D6C5          	bz	l7286
  5732  001084  0A03               	xorlw	3	; case 46
  5733  001086  E101 D6D8          	bz	l7300
  5734  00108A  0A1E               	xorlw	30	; case 48
  5735  00108C  E101 D6EE          	bz	l7318
  5736  001090  0A01               	xorlw	1	; case 49
  5737  001092  E101 D6F6          	bz	l7328
  5738  001096  0A03               	xorlw	3	; case 50
  5739  001098  E101 D712          	bz	l7346
  5740  00109C  0A01               	xorlw	1	; case 51
  5741  00109E  E101 D72B          	bz	l7360
  5742  0010A2  0A07               	xorlw	7	; case 52
  5743  0010A4  E102 EFD1  F002    	bz	l6598
  5744  0010AA  0A01               	xorlw	1	; case 53
  5745  0010AC  E102 EFF5  F002    	bz	l6612
  5746  0010B2  0A03               	xorlw	3	; case 54
  5747  0010B4  E102 EFFD  F002    	bz	l6616
  5748  0010BA  0A01               	xorlw	1	; case 55
  5749  0010BC  E102 EF28  F003    	bz	l6636
  5750  0010C2  0A0F               	xorlw	15	; case 56
  5751  0010C4  E102 EF2D  F003    	bz	l6640
  5752  0010CA  0A01               	xorlw	1	; case 57
  5753  0010CC  E102 EFC9  F002    	bz	l6594
  5754  0010D2  0A5D               	xorlw	93	; case 100
  5755  0010D4  E102 EF53  F001    	bz	l6352
  5756  0010DA  0A01               	xorlw	1	; case 101
  5757  0010DC  E102 EF60  F001    	bz	l6360
  5758  0010E2  0A03               	xorlw	3	; case 102
  5759  0010E4  E102 EF74  F001    	bz	l6372
  5760  0010EA  0A01               	xorlw	1	; case 103
  5761  0010EC  E102 EF80  F001    	bz	l6380
  5762  0010F2  0A0F               	xorlw	15	; case 104
  5763  0010F4  E102 EF92  F001    	bz	l6388
  5764  0010FA  0A06               	xorlw	6	; case 110
  5765  0010FC  E102 EF92  F003    	bz	l6712
  5766  001102  0A01               	xorlw	1	; case 111
  5767  001104  E102 EFB7  F003    	bz	l6726
  5768  00110A  0012               	return		;funcret
  5769  00110C                     __end_of_menuMotor:
  5770                           	callstack 0
  5771  00110C                     PL2:
  5772                           	callstack 23
  5773  00110C  0D12               	mullw	18
  5774  00110E  50F3               	movf	243,w,c
  5775  001110  0F80               	addlw	low _users
  5776  001112  244C               	addwf	_pointer^0,w,c
  5777  001114  6ED9               	movwf	fsr2l,c
  5778  001116  6ADA               	clrf	fsr2h,c
  5779  001118  50DF               	movf	indf2,w,c
  5780  00111A  0012               	return	
  5781  00111C                     __end_ofPL2:
  5782                           	callstack 0
  5783  00111C                     PL4:
  5784                           	callstack 23
  5785  00111C  50F3               	movf	243,w,c
  5786  00111E  0F80               	addlw	low _users
  5787  001120  244C               	addwf	_pointer^0,w,c
  5788  001122  6ED9               	movwf	fsr2l,c
  5789  001124  6ADA               	clrf	fsr2h,c
  5790  001126  0012               	return	
  5791  001128                     __end_ofPL4:
  5792                           	callstack 0
  5793  001128                     PL6:
  5794                           	callstack 23
  5795  001128  5040               	movf	_aux^0,w,c
  5796  00112A  0D02               	mullw	2
  5797  00112C  50F3               	movf	243,w,c
  5798  00112E  0F02               	addlw	low (_topScores+1)
  5799  001130  6ED9               	movwf	fsr2l,c
  5800  001132  6ADA               	clrf	fsr2h,c
  5801  001134  50DF               	movf	indf2,w,c
  5802  001136  0012               	return	
  5803  001138                     __end_ofPL6:
  5804                           	callstack 0
  5805  001138                     PL8:
  5806                           	callstack 23
  5807  001138  0D02               	mullw	2
  5808  00113A  50F3               	movf	243,w,c
  5809  00113C  0F02               	addlw	low (_topScores+1)
  5810  00113E  6ED9               	movwf	fsr2l,c
  5811  001140  6ADA               	clrf	fsr2h,c
  5812  001142  0012               	return	
  5813  001144                     __end_ofPL8:
  5814                           	callstack 0
  5815  001144                     PL10:
  5816                           	callstack 23
  5817  001144  504C               	movf	_pointer^0,w,c
  5818  001146  0D02               	mullw	2
  5819  001148  50F3               	movf	243,w,c
  5820  00114A  0F01               	addlw	low _topScores
  5821  00114C  6ED9               	movwf	fsr2l,c
  5822  00114E  6ADA               	clrf	fsr2h,c
  5823  001150  0012               	return	
  5824  001152                     __end_ofPL10:
  5825                           	callstack 0
  5826  001152                     PL12:
  5827                           	callstack 23
  5828  001152  0D02               	mullw	2
  5829  001154  50F3               	movf	243,w,c
  5830  001156  0F01               	addlw	low _topScores
  5831  001158  6ED9               	movwf	fsr2l,c
  5832  00115A  6ADA               	clrf	fsr2h,c
  5833  00115C  0012               	return	
  5834  00115E                     __end_ofPL12:
  5835                           	callstack 0
  5836  00115E                     PL14:
  5837                           	callstack 23
  5838  00115E  5049               	movf	_pointerUser^0,w,c
  5839  001160  0D12               	mullw	18
  5840  001162  50F3               	movf	243,w,c
  5841  001164  0F80               	addlw	low _users
  5842  001166  244C               	addwf	_pointer^0,w,c
  5843  001168  6EE1               	movwf	fsr1l,c
  5844  00116A  6AE2               	clrf	fsr1h,c
  5845  00116C  50DE               	movf	postinc2,w,c
  5846  00116E  18E6               	xorwf	postinc1,w,c
  5847  001170  0012               	return	
  5848  001172                     __end_ofPL14:
  5849                           	callstack 0
  5850  001172                     PL16:
  5851                           	callstack 23
  5852  001172  504F               	movf	_numUsers@Data$F563^0,w,c
  5853  001174  0D12               	mullw	18
  5854  001176  50F3               	movf	243,w,c
  5855  001178  0F80               	addlw	low _users
  5856  00117A  0012               	return	
  5857  00117C                     __end_ofPL16:
  5858                           	callstack 0
  5859  00117C                     PL18:
  5860                           	callstack 23
  5861  00117C  504F               	movf	_numUsers@Data$F563^0,w,c
  5862  00117E  0D12               	mullw	18
  5863  001180  50F3               	movf	243,w,c
  5864  001182  0F89               	addlw	low (_users+9)
  5865  001184  244C               	addwf	_pointer^0,w,c
  5866  001186  6ED9               	movwf	fsr2l,c
  5867  001188  6ADA               	clrf	fsr2h,c
  5868  00118A  0012               	return	
  5869  00118C                     __end_ofPL18:
  5870                           	callstack 0
  5871  00118C                     PL20:
  5872                           	callstack 23
  5873  00118C  244C               	addwf	_pointer^0,w,c
  5874  00118E  6EE1               	movwf	fsr1l,c
  5875  001190  6AE2               	clrf	fsr1h,c
  5876  001192  50DE               	movf	postinc2,w,c
  5877  001194  18E6               	xorwf	postinc1,w,c
  5878  001196  0012               	return	
  5879  001198                     __end_ofPL20:
  5880                           	callstack 0
  5881  001198                     PL24:
  5882                           	callstack 23
  5883  001198  0D12               	mullw	18
  5884  00119A  50F3               	movf	243,w,c
  5885  00119C  0F89               	addlw	low (_users+9)
  5886  00119E  0012               	return	
  5887  0011A0                     __end_ofPL24:
  5888                           	callstack 0
  5889  0011A0                     PL30:
  5890                           	callstack 23
  5891  0011A0  6FF8               	movwf	??_menuMotor& (0+255),b
  5892  0011A2  C0F8  FFF6         	movff	??_menuMotor,tblptrl
  5893  0011A6                     	if	1	;There is more than 1 active tblptr byte
  5894  0011A6  0E02               	movlw	high __smallconst
  5895  0011A8  6EF7               	movwf	tblptrh,c
  5896  0011AA                     	endif
  5897  0011AA                     	if	0	;tblptru may be non-zero
  5898  0011AA                     	endif
  5899  0011AA                     	if	0	;tblptru may be non-zero
  5900  0011AA                     	endif
  5901  0011AA  0008               	tblrd		*
  5902  0011AC  50F5               	movf	tablat,w,c
  5903  0011AE  0012               	return	
  5904  0011B0                     __end_ofPL30:
  5905                           	callstack 0
  5906  0011B0                     PL32:
  5907                           	callstack 23
  5908  0011B0  6ADA               	clrf	fsr2h,c
  5909  0011B2  50DF               	movf	indf2,w,c
  5910  0011B4  244C               	addwf	_pointer^0,w,c
  5911  0011B6  0012               	return	
  5912  0011B8                     __end_ofPL32:
  5913                           	callstack 0
  5914  0011B8                     PL34:
  5915                           	callstack 23
  5916  0011B8  CFDE F055          	movff	postinc2,writeEepromScores@score
  5917  0011BC  CFDD F056          	movff	postdec2,writeEepromScores@score+1
  5918  0011C0  C04C  F057         	movff	_pointer,writeEepromScores@num
  5919  0011C4  0012               	return	
  5920  0011C6                     __end_ofPL34:
  5921                           	callstack 0
  5922  0011C6                     PL36:
  5923                           	callstack 23
  5924  0011C6  5047               	movf	_option^0,w,c
  5925  0011C8  0F71               	addlw	low _menuStrings@Menu$F546
  5926  0011CA  6ED9               	movwf	fsr2l,c
  5927  0011CC  0012               	return	
  5928  0011CE                     __end_ofPL36:
  5929                           	callstack 0
  5930  0011CE                     PL38:
  5931                           	callstack 23
  5932  0011CE  6ED9               	movwf	fsr2l,c
  5933  0011D0  6ADA               	clrf	fsr2h,c
  5934  0011D2  50DF               	movf	indf2,w,c
  5935  0011D4  0012               	return	
  5936  0011D6                     __end_ofPL38:
  5937                           	callstack 0
  5938  0011D6                     PL42:
  5939                           	callstack 26
  5940  0011D6  0EB1               	movlw	177
  5941  0011D8  5C55               	subwf	?_TiGetTics^0,w,c
  5942  0011DA  0E04               	movlw	4
  5943  0011DC  5856               	subwfb	(?_TiGetTics+1)^0,w,c
  5944  0011DE  0012               	return	
  5945  0011E0                     __end_ofPL42:
  5946                           	callstack 0
  5947  0011E0                     PL44:
  5948                           	callstack 23
  5949  0011E0  C040  FFDF         	movff	_aux,indf2
  5950  0011E4  504C               	movf	_pointer^0,w,c
  5951  0011E6  0012               	return	
  5952  0011E8                     __end_ofPL44:
  5953                           	callstack 0
  5954  0011E8                     PL46:
  5955                           	callstack 23
  5956  0011E8  0E01               	movlw	1
  5957  0011EA  6E5D               	movwf	LcGotoXY@Row^0,c
  5958  0011EC  0C00               	retlw	0
  5959  0011EE                     __end_ofPL46:
  5960                           	callstack 0
  5961  0011EE                     PL62:
  5962                           	callstack 23
  5963  0011EE  6ED9               	movwf	fsr2l,c
  5964  0011F0  6ADA               	clrf	fsr2h,c
  5965  0011F2  EE01  F03D         	lfsr	0,writeEeprom@us
  5966  0011F6  0C11               	retlw	17
  5967  0011F8                     __end_ofPL62:
  5968                           	callstack 0
  5969  0011F8                     PL64:
  5970                           	callstack 23
  5971  0011F8  6A4C               	clrf	_pointer^0,c
  5972  0011FA  6A5D               	clrf	LcGotoXY@Row^0,c
  5973  0011FC  0C00               	retlw	0
  5974  0011FE                     __end_ofPL64:
  5975                           	callstack 0
  5976  0011FE                     PL66:
  5977                           	callstack 27
  5978  0011FE  0E1E               	movlw	30
  5979  001200  6E45               	movwf	_minutes^0,c
  5980  001202  6A44               	clrf	_seconds^0,c
  5981  001204  6A3D               	clrf	_gameON^0,c
  5982  001206  0012               	return	
  5983  001208                     __end_ofPL66:
  5984                           	callstack 0
  5985  001208                     PL68:
  5986                           	callstack 23
  5987  001208  6A5D               	clrf	LcGotoXY@Row^0,c
  5988  00120A  064C               	decf	_pointer^0,f,c
  5989  00120C  504C               	movf	_pointer^0,w,c
  5990  00120E  0F06               	addlw	6
  5991  001210  0012               	return	
  5992  001212                     __end_ofPL68:
  5993                           	callstack 0
  5994  001212                     PL80:
  5995                           	callstack 23
  5996  001212  504C               	movf	_pointer^0,w,c
  5997  001214  0D12               	mullw	18
  5998  001216  50F3               	movf	243,w,c
  5999  001218  0F80               	addlw	low _users
  6000  00121A  0012               	return	
  6001  00121C                     __end_ofPL80:
  6002                           	callstack 0
  6003  00121C                     PL84:
  6004                           	callstack 23
  6005  00121C  6A5D               	clrf	LcGotoXY@Row^0,c
  6006  00121E  2A4C               	incf	_pointer^0,f,c
  6007  001220  504C               	movf	_pointer^0,w,c
  6008  001222  0012               	return	
  6009  001224                     __end_ofPL84:
  6010                           	callstack 0
  6011  001224                     PL88:
  6012                           	callstack 23
  6013  001224  0E0A               	movlw	10
  6014  001226  6E4D               	movwf	_menuState^0,c
  6015  001228  6A4C               	clrf	_pointer^0,c
  6016  00122A  0012               	return	
  6017  00122C                     __end_ofPL88:
  6018                           	callstack 0
  6019  00122C                     PL90:
  6020                           	callstack 23
  6021  00122C  0100               	movlb	0	; () banked
  6022  00122E  6FF8               	movwf	??_menuMotor& (0+255),b
  6023  001230  0C01               	retlw	1
  6024  001232                     __end_ofPL90:
  6025                           	callstack 0
  6026  001232                     PL92:
  6027                           	callstack 23
  6028  001232  6E46               	movwf	_keyValue^0,c
  6029  001234  5046               	movf	_keyValue^0,w,c
  6030  001236  0F30               	addlw	48
  6031  001238  0012               	return	
  6032  00123A                     __end_ofPL92:
  6033                           	callstack 0
  6034                           
  6035 ;; *************** function _writeEepromScores *****************
  6036 ;; Defined at:
  6037 ;;		line 219 in file "EEPROM.c"
  6038 ;; Parameters:    Size  Location     Type
  6039 ;;  score           2    5[COMRAM] struct .
  6040 ;;  num             1    7[COMRAM] unsigned char 
  6041 ;; Auto vars:     Size  Location     Type
  6042 ;;		None
  6043 ;; Return value:  Size  Location     Type
  6044 ;;                  1    wreg      void 
  6045 ;; Registers used:
  6046 ;;		wreg, status,2, status,0, prodl, prodh
  6047 ;; Tracked objects:
  6048 ;;		On entry : 0/0
  6049 ;;		On exit  : 0/0
  6050 ;;		Unchanged: 0/0
  6051 ;; Data sizes:     COMRAM   BANK0   BANK1
  6052 ;;      Params:         3       0       0
  6053 ;;      Locals:         0       0       0
  6054 ;;      Temps:          0       0       0
  6055 ;;      Totals:         3       0       0
  6056 ;;Total ram usage:        3 bytes
  6057 ;; Hardware stack levels used: 1
  6058 ;; Hardware stack levels required when called: 2
  6059 ;; This function calls:
  6060 ;;		Nothing
  6061 ;; This function is called by:
  6062 ;;		_menuMotor
  6063 ;; This function uses a non-reentrant model
  6064 ;;
  6065                           
  6066                           	psect	text11
  6067  001F70                     __ptext11:
  6068                           	callstack 0
  6069  001F70                     _writeEepromScores:
  6070                           	callstack 27
  6071                           
  6072                           ;EEPROM.c: 220:     pointerEeprom=0;
  6073                           
  6074                           ;incstack = 0
  6075  001F70  6A23               	clrf	_pointerEeprom^0,c
  6076                           
  6077                           ;EEPROM.c: 221:     eepromState = 2;
  6078  001F72  0E02               	movlw	2
  6079  001F74  6E21               	movwf	_eepromState^0,c
  6080                           
  6081                           ;EEPROM.c: 222:     topScore = score;
  6082  001F76  C055  F00D         	movff	writeEepromScores@score,_topScore
  6083  001F7A  C056  F00E         	movff	writeEepromScores@score+1,_topScore+1
  6084                           
  6085                           ;EEPROM.c: 223:     numAddress = num*2;
  6086  001F7E  5057               	movf	writeEepromScores@num^0,w,c
  6087  001F80  0D02               	mullw	2
  6088  001F82  CFF3 F01F          	movff	prodl,_numAddress
  6089                           
  6090                           ;EEPROM.c: 224:     doneCharging = 0;
  6091  001F86  6A22               	clrf	_doneCharging^0,c
  6092  001F88  0012               	return		;funcret
  6093  001F8A                     __end_of_writeEepromScores:
  6094                           	callstack 0
  6095                           
  6096 ;; *************** function _writeEeprom *****************
  6097 ;; Defined at:
  6098 ;;		line 210 in file "EEPROM.c"
  6099 ;; Parameters:    Size  Location     Type
  6100 ;;  us             18    0[BANK1 ] struct .
  6101 ;;  num             1   18[BANK1 ] unsigned char 
  6102 ;; Auto vars:     Size  Location     Type
  6103 ;;		None
  6104 ;; Return value:  Size  Location     Type
  6105 ;;                  1    wreg      void 
  6106 ;; Registers used:
  6107 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  6108 ;; Tracked objects:
  6109 ;;		On entry : 0/0
  6110 ;;		On exit  : 0/0
  6111 ;;		Unchanged: 0/0
  6112 ;; Data sizes:     COMRAM   BANK0   BANK1
  6113 ;;      Params:         0       0      19
  6114 ;;      Locals:         0       0       0
  6115 ;;      Temps:          0       0       0
  6116 ;;      Totals:         0       0      19
  6117 ;;Total ram usage:       19 bytes
  6118 ;; Hardware stack levels used: 1
  6119 ;; Hardware stack levels required when called: 2
  6120 ;; This function calls:
  6121 ;;		Nothing
  6122 ;; This function is called by:
  6123 ;;		_menuMotor
  6124 ;; This function uses a non-reentrant model
  6125 ;;
  6126                           
  6127                           	psect	text12
  6128  001F1C                     __ptext12:
  6129                           	callstack 0
  6130  001F1C                     _writeEeprom:
  6131                           	callstack 27
  6132                           
  6133                           ;EEPROM.c: 211:     eepromState = 0;
  6134                           
  6135                           ;incstack = 0
  6136  001F1C  6A21               	clrf	_eepromState^0,c
  6137                           
  6138                           ;EEPROM.c: 212:     user = us;
  6139  001F1E  EE21  F03D         	lfsr	2,writeEeprom@us
  6140  001F22  EE10  F0D1         	lfsr	1,_user
  6141  001F26  0E11               	movlw	17
  6142  001F28                     u5111:
  6143  001F28  CFDB FFE3          	movff	plusw2,plusw1
  6144  001F2C  06E8               	decf	wreg,f,c
  6145  001F2E  E2FC               	bc	u5111
  6146                           
  6147                           ;EEPROM.c: 213:     numAddress = num;
  6148  001F30  C14F  F01F         	movff	writeEeprom@num,_numAddress
  6149                           
  6150                           ;EEPROM.c: 214:     pointer = 0;
  6151                           
  6152                           ;EEPROM.c: 215:     pointerEeprom = 0;
  6153                           
  6154                           ;EEPROM.c: 216:     doneCharging = 0;
  6155  001F34  EF6B  F000         	goto	__end_of_readEeprom	;call to abstracted procedure
  6156  001F38                     __end_of_writeEeprom:
  6157                           	callstack 0
  6158                           
  6159 ;; *************** function _stopTimerPic *****************
  6160 ;; Defined at:
  6161 ;;		line 131 in file "Timer.c"
  6162 ;; Parameters:    Size  Location     Type
  6163 ;;		None
  6164 ;; Auto vars:     Size  Location     Type
  6165 ;;		None
  6166 ;; Return value:  Size  Location     Type
  6167 ;;                  1    wreg      void 
  6168 ;; Registers used:
  6169 ;;		None
  6170 ;; Tracked objects:
  6171 ;;		On entry : 0/0
  6172 ;;		On exit  : 0/0
  6173 ;;		Unchanged: 0/0
  6174 ;; Data sizes:     COMRAM   BANK0   BANK1
  6175 ;;      Params:         0       0       0
  6176 ;;      Locals:         0       0       0
  6177 ;;      Temps:          0       0       0
  6178 ;;      Totals:         0       0       0
  6179 ;;Total ram usage:        0 bytes
  6180 ;; Hardware stack levels used: 1
  6181 ;; Hardware stack levels required when called: 2
  6182 ;; This function calls:
  6183 ;;		Nothing
  6184 ;; This function is called by:
  6185 ;;		_menuMotor
  6186 ;; This function uses a non-reentrant model
  6187 ;;
  6188                           
  6189                           	psect	text13
  6190  000176                     __ptext13:
  6191                           	callstack 0
  6192  000176                     _stopTimerPic:
  6193                           	callstack 27
  6194                           
  6195                           ;Timer.c: 132:     show = 0;
  6196                           
  6197                           ;incstack = 0
  6198  000176  6A25               	clrf	_show^0,c
  6199  000178  0012               	return		;funcret
  6200  00017A                     __end_of_stopTimerPic:
  6201                           	callstack 0
  6202                           
  6203 ;; *************** function _startMusic *****************
  6204 ;; Defined at:
  6205 ;;		line 50 in file "Music.c"
  6206 ;; Parameters:    Size  Location     Type
  6207 ;;		None
  6208 ;; Auto vars:     Size  Location     Type
  6209 ;;		None
  6210 ;; Return value:  Size  Location     Type
  6211 ;;                  1    wreg      void 
  6212 ;; Registers used:
  6213 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6214 ;; Tracked objects:
  6215 ;;		On entry : 0/0
  6216 ;;		On exit  : 0/0
  6217 ;;		Unchanged: 0/0
  6218 ;; Data sizes:     COMRAM   BANK0   BANK1
  6219 ;;      Params:         0       0       0
  6220 ;;      Locals:         0       0       0
  6221 ;;      Temps:          0       0       0
  6222 ;;      Totals:         0       0       0
  6223 ;;Total ram usage:        0 bytes
  6224 ;; Hardware stack levels used: 1
  6225 ;; Hardware stack levels required when called: 3
  6226 ;; This function calls:
  6227 ;;		_TiResetTics
  6228 ;; This function is called by:
  6229 ;;		_menuMotor
  6230 ;; This function uses a non-reentrant model
  6231 ;;
  6232                           
  6233                           	psect	text14
  6234  00008E                     __ptext14:
  6235                           	callstack 0
  6236  00008E                     _startMusic:
  6237                           	callstack 26
  6238                           
  6239                           ;Music.c: 51:     note = 1;
  6240                           
  6241                           ;incstack = 0
  6242  00008E  0E01               	movlw	1
  6243  000090  6E1C               	movwf	_note^0,c
  6244                           
  6245                           ;Music.c: 52:     TiResetTics(timerMusic);
  6246  000092  500B               	movf	_timerMusic^0,w,c
  6247  000094  EC9C  F00F         	call	_TiResetTics
  6248                           
  6249                           ;Music.c: 53:     TiResetTics(timerNote);
  6250  000098  501E               	movf	_timerNote^0,w,c
  6251  00009A  EC9C  F00F         	call	_TiResetTics
  6252                           
  6253                           ;Music.c: 54:     musicState = 0;
  6254  00009E  6A1D               	clrf	_musicState^0,c
  6255  0000A0  0012               	return		;funcret
  6256  0000A2                     __end_of_startMusic:
  6257                           	callstack 0
  6258                           
  6259 ;; *************** function _showTimerPic *****************
  6260 ;; Defined at:
  6261 ;;		line 128 in file "Timer.c"
  6262 ;; Parameters:    Size  Location     Type
  6263 ;;		None
  6264 ;; Auto vars:     Size  Location     Type
  6265 ;;		None
  6266 ;; Return value:  Size  Location     Type
  6267 ;;                  1    wreg      void 
  6268 ;; Registers used:
  6269 ;;		wreg, status,2
  6270 ;; Tracked objects:
  6271 ;;		On entry : 0/0
  6272 ;;		On exit  : 0/0
  6273 ;;		Unchanged: 0/0
  6274 ;; Data sizes:     COMRAM   BANK0   BANK1
  6275 ;;      Params:         0       0       0
  6276 ;;      Locals:         0       0       0
  6277 ;;      Temps:          0       0       0
  6278 ;;      Totals:         0       0       0
  6279 ;;Total ram usage:        0 bytes
  6280 ;; Hardware stack levels used: 1
  6281 ;; Hardware stack levels required when called: 2
  6282 ;; This function calls:
  6283 ;;		Nothing
  6284 ;; This function is called by:
  6285 ;;		_menuMotor
  6286 ;; This function uses a non-reentrant model
  6287 ;;
  6288                           
  6289                           	psect	text15
  6290  00014E                     __ptext15:
  6291                           	callstack 0
  6292  00014E                     _showTimerPic:
  6293                           	callstack 27
  6294                           
  6295                           ;Timer.c: 129:     show = 1;
  6296                           
  6297                           ;incstack = 0
  6298  00014E  0E01               	movlw	1
  6299  000150  6E25               	movwf	_show^0,c
  6300  000152  0C01               	retlw	1	;funcret
  6301  000154                     __end_of_showTimerPic:
  6302                           	callstack 0
  6303                           
  6304 ;; *************** function _setTX *****************
  6305 ;; Defined at:
  6306 ;;		line 22 in file "SIO.c"
  6307 ;; Parameters:    Size  Location     Type
  6308 ;;  text            1    wreg     unsigned char 
  6309 ;; Auto vars:     Size  Location     Type
  6310 ;;  text            1    5[COMRAM] unsigned char 
  6311 ;; Return value:  Size  Location     Type
  6312 ;;                  1    wreg      void 
  6313 ;; Registers used:
  6314 ;;		wreg
  6315 ;; Tracked objects:
  6316 ;;		On entry : 0/0
  6317 ;;		On exit  : 0/0
  6318 ;;		Unchanged: 0/0
  6319 ;; Data sizes:     COMRAM   BANK0   BANK1
  6320 ;;      Params:         0       0       0
  6321 ;;      Locals:         1       0       0
  6322 ;;      Temps:          0       0       0
  6323 ;;      Totals:         1       0       0
  6324 ;;Total ram usage:        1 bytes
  6325 ;; Hardware stack levels used: 1
  6326 ;; Hardware stack levels required when called: 2
  6327 ;; This function calls:
  6328 ;;		Nothing
  6329 ;; This function is called by:
  6330 ;;		_menuMotor
  6331 ;;		_motorJoystick
  6332 ;;		_motorRX
  6333 ;; This function uses a non-reentrant model
  6334 ;;
  6335                           
  6336                           	psect	text16
  6337  000146                     __ptext16:
  6338                           	callstack 0
  6339  000146                     _setTX:
  6340                           	callstack 27
  6341                           
  6342                           ;incstack = 0
  6343                           ;setTX@text stored from wreg
  6344  000146  6E55               	movwf	setTX@text^0,c
  6345                           
  6346                           ;SIO.c: 23:     TXREG = text;
  6347  000148  C055  FFAD         	movff	setTX@text,4013	;volatile
  6348  00014C  0012               	return		;funcret
  6349  00014E                     __end_of_setTX:
  6350                           	callstack 0
  6351                           
  6352 ;; *************** function _sendMyTX *****************
  6353 ;; Defined at:
  6354 ;;		line 96 in file "TX.c"
  6355 ;; Parameters:    Size  Location     Type
  6356 ;;  send            1    wreg     unsigned char 
  6357 ;; Auto vars:     Size  Location     Type
  6358 ;;  send            1    6[COMRAM] unsigned char 
  6359 ;; Return value:  Size  Location     Type
  6360 ;;                  1    wreg      void 
  6361 ;; Registers used:
  6362 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6363 ;; Tracked objects:
  6364 ;;		On entry : 0/0
  6365 ;;		On exit  : 0/0
  6366 ;;		Unchanged: 0/0
  6367 ;; Data sizes:     COMRAM   BANK0   BANK1
  6368 ;;      Params:         0       0       0
  6369 ;;      Locals:         1       0       0
  6370 ;;      Temps:          0       0       0
  6371 ;;      Totals:         1       0       0
  6372 ;;Total ram usage:        1 bytes
  6373 ;; Hardware stack levels used: 1
  6374 ;; Hardware stack levels required when called: 3
  6375 ;; This function calls:
  6376 ;;		_TiResetTics
  6377 ;; This function is called by:
  6378 ;;		_menuMotor
  6379 ;; This function uses a non-reentrant model
  6380 ;;
  6381                           
  6382                           	psect	text17
  6383  000036                     __ptext17:
  6384                           	callstack 0
  6385  000036                     _sendMyTX:
  6386                           	callstack 26
  6387                           
  6388                           ;incstack = 0
  6389                           ;sendMyTX@send stored from wreg
  6390  000036  6E56               	movwf	sendMyTX@send^0,c
  6391                           
  6392                           ;TX.c: 97:     toSend = send;
  6393  000038  C056  F017         	movff	sendMyTX@send,_toSend
  6394                           
  6395                           ;TX.c: 98:     LATCbits.LATC5 = 0 & 0x01;
  6396  00003C  9A8B               	bcf	139,5,c	;volatile
  6397                           
  6398                           ;TX.c: 99:     TiResetTics(timerTX);
  6399  00003E  501A               	movf	_timerTX^0,w,c
  6400  000040  EC9C  F00F         	call	_TiResetTics
  6401                           
  6402                           ;TX.c: 100:     stateTX = 1;
  6403  000044  0E01               	movlw	1
  6404  000046  6E18               	movwf	_stateTX^0,c
  6405                           
  6406                           ;TX.c: 101:     pointer = 0;
  6407  000048  6A16               	clrf	_pointer@TX$F2011^0,c
  6408  00004A  0012               	return		;funcret
  6409  00004C                     __end_of_sendMyTX:
  6410                           	callstack 0
  6411                           
  6412 ;; *************** function _resetPositionJoystick *****************
  6413 ;; Defined at:
  6414 ;;		line 84 in file "Joystick.c"
  6415 ;; Parameters:    Size  Location     Type
  6416 ;;		None
  6417 ;; Auto vars:     Size  Location     Type
  6418 ;;		None
  6419 ;; Return value:  Size  Location     Type
  6420 ;;                  1    wreg      void 
  6421 ;; Registers used:
  6422 ;;		None
  6423 ;; Tracked objects:
  6424 ;;		On entry : 0/0
  6425 ;;		On exit  : 0/0
  6426 ;;		Unchanged: 0/0
  6427 ;; Data sizes:     COMRAM   BANK0   BANK1
  6428 ;;      Params:         0       0       0
  6429 ;;      Locals:         0       0       0
  6430 ;;      Temps:          0       0       0
  6431 ;;      Totals:         0       0       0
  6432 ;;Total ram usage:        0 bytes
  6433 ;; Hardware stack levels used: 1
  6434 ;; Hardware stack levels required when called: 2
  6435 ;; This function calls:
  6436 ;;		Nothing
  6437 ;; This function is called by:
  6438 ;;		_menuMotor
  6439 ;;		_motorJoystick
  6440 ;; This function uses a non-reentrant model
  6441 ;;
  6442                           
  6443                           	psect	text18
  6444  00017A                     __ptext18:
  6445                           	callstack 0
  6446  00017A                     _resetPositionJoystick:
  6447                           	callstack 27
  6448                           
  6449                           ;Joystick.c: 85:     positionJoystick = 0;
  6450                           
  6451                           ;incstack = 0
  6452  00017A  6A3C               	clrf	_positionJoystick@Joystick$F704^0,c
  6453  00017C  0012               	return		;funcret
  6454  00017E                     __end_of_resetPositionJoystick:
  6455                           	callstack 0
  6456                           
  6457 ;; *************** function _readEepromScores *****************
  6458 ;; Defined at:
  6459 ;;		line 235 in file "EEPROM.c"
  6460 ;; Parameters:    Size  Location     Type
  6461 ;;  num             1    wreg     unsigned char 
  6462 ;; Auto vars:     Size  Location     Type
  6463 ;;  num             1    5[COMRAM] unsigned char 
  6464 ;; Return value:  Size  Location     Type
  6465 ;;                  1    wreg      void 
  6466 ;; Registers used:
  6467 ;;		wreg, status,2
  6468 ;; Tracked objects:
  6469 ;;		On entry : 0/0
  6470 ;;		On exit  : 0/0
  6471 ;;		Unchanged: 0/0
  6472 ;; Data sizes:     COMRAM   BANK0   BANK1
  6473 ;;      Params:         0       0       0
  6474 ;;      Locals:         1       0       0
  6475 ;;      Temps:          0       0       0
  6476 ;;      Totals:         1       0       0
  6477 ;;Total ram usage:        1 bytes
  6478 ;; Hardware stack levels used: 1
  6479 ;; Hardware stack levels required when called: 2
  6480 ;; This function calls:
  6481 ;;		Nothing
  6482 ;; This function is called by:
  6483 ;;		_menuMotor
  6484 ;; This function uses a non-reentrant model
  6485 ;;
  6486                           
  6487                           	psect	text19
  6488  0000F0                     __ptext19:
  6489                           	callstack 0
  6490  0000F0                     _readEepromScores:
  6491                           	callstack 27
  6492                           
  6493                           ;incstack = 0
  6494                           ;readEepromScores@num stored from wreg
  6495  0000F0  6E55               	movwf	readEepromScores@num^0,c
  6496                           
  6497                           ;EEPROM.c: 236:     eepromState = 7;
  6498  0000F2  0E07               	movlw	7
  6499  0000F4  6E21               	movwf	_eepromState^0,c
  6500                           
  6501                           ;EEPROM.c: 237:     numAddress = num;
  6502  0000F6  C055  F01F         	movff	readEepromScores@num,_numAddress
  6503                           
  6504                           ;EEPROM.c: 238:     doneCharging = 0;
  6505  0000FA  6A22               	clrf	_doneCharging^0,c
  6506  0000FC  0012               	return		;funcret
  6507  0000FE                     __end_of_readEepromScores:
  6508                           	callstack 0
  6509                           
  6510 ;; *************** function _isPressed *****************
  6511 ;; Defined at:
  6512 ;;		line 127 in file "Keypad.c"
  6513 ;; Parameters:    Size  Location     Type
  6514 ;;		None
  6515 ;; Auto vars:     Size  Location     Type
  6516 ;;		None
  6517 ;; Return value:  Size  Location     Type
  6518 ;;                  1    wreg      unsigned char 
  6519 ;; Registers used:
  6520 ;;		wreg, status,2
  6521 ;; Tracked objects:
  6522 ;;		On entry : 0/0
  6523 ;;		On exit  : 0/0
  6524 ;;		Unchanged: 0/0
  6525 ;; Data sizes:     COMRAM   BANK0   BANK1
  6526 ;;      Params:         0       0       0
  6527 ;;      Locals:         0       0       0
  6528 ;;      Temps:          0       0       0
  6529 ;;      Totals:         0       0       0
  6530 ;;Total ram usage:        0 bytes
  6531 ;; Hardware stack levels used: 1
  6532 ;; Hardware stack levels required when called: 2
  6533 ;; This function calls:
  6534 ;;		Nothing
  6535 ;; This function is called by:
  6536 ;;		_menuMotor
  6537 ;; This function uses a non-reentrant model
  6538 ;;
  6539                           
  6540                           	psect	text20
  6541  00017E                     __ptext20:
  6542                           	callstack 0
  6543  00017E                     _isPressed:
  6544                           	callstack 27
  6545                           
  6546                           ;Keypad.c: 128:     return SMS;
  6547                           
  6548                           ;incstack = 0
  6549  00017E  5030               	movf	_SMS^0,w,c
  6550  000180  0012               	return		;funcret
  6551  000182                     __end_of_isPressed:
  6552                           	callstack 0
  6553                           
  6554 ;; *************** function _getUser *****************
  6555 ;; Defined at:
  6556 ;;		line 242 in file "EEPROM.c"
  6557 ;; Parameters:    Size  Location     Type
  6558 ;;		None
  6559 ;; Auto vars:     Size  Location     Type
  6560 ;;		None
  6561 ;; Return value:  Size  Location     Type
  6562 ;;                  18    5[COMRAM] struct .
  6563 ;; Registers used:
  6564 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0
  6565 ;; Tracked objects:
  6566 ;;		On entry : 0/0
  6567 ;;		On exit  : 0/0
  6568 ;;		Unchanged: 0/0
  6569 ;; Data sizes:     COMRAM   BANK0   BANK1
  6570 ;;      Params:        18       0       0
  6571 ;;      Locals:         0       0       0
  6572 ;;      Temps:          0       0       0
  6573 ;;      Totals:        18       0       0
  6574 ;;Total ram usage:       18 bytes
  6575 ;; Hardware stack levels used: 1
  6576 ;; Hardware stack levels required when called: 2
  6577 ;; This function calls:
  6578 ;;		Nothing
  6579 ;; This function is called by:
  6580 ;;		_menuMotor
  6581 ;; This function uses a non-reentrant model
  6582 ;;
  6583                           
  6584                           	psect	text21
  6585  0000A2                     __ptext21:
  6586                           	callstack 0
  6587  0000A2                     _getUser:
  6588                           	callstack 27
  6589                           
  6590                           ;EEPROM.c: 243:     return user;
  6591                           
  6592                           ;incstack = 0
  6593  0000A2  EE20  F0D1         	lfsr	2,_user
  6594  0000A6  EE00  F055         	lfsr	0,?_getUser
  6595  0000AA  0E11               	movlw	17
  6596  0000AC                     u2971:
  6597  0000AC  CFDB FFEB          	movff	plusw2,plusw0
  6598  0000B0  06E8               	decf	wreg,f,c
  6599  0000B2  E2FC               	bc	u2971
  6600  0000B4  0012               	return		;funcret
  6601  0000B6                     __end_of_getUser:
  6602                           	callstack 0
  6603                           
  6604 ;; *************** function _getScore *****************
  6605 ;; Defined at:
  6606 ;;		line 246 in file "EEPROM.c"
  6607 ;; Parameters:    Size  Location     Type
  6608 ;;		None
  6609 ;; Auto vars:     Size  Location     Type
  6610 ;;		None
  6611 ;; Return value:  Size  Location     Type
  6612 ;;                  2    5[COMRAM] struct .
  6613 ;; Registers used:
  6614 ;;		None
  6615 ;; Tracked objects:
  6616 ;;		On entry : 0/0
  6617 ;;		On exit  : 0/0
  6618 ;;		Unchanged: 0/0
  6619 ;; Data sizes:     COMRAM   BANK0   BANK1
  6620 ;;      Params:         2       0       0
  6621 ;;      Locals:         0       0       0
  6622 ;;      Temps:          0       0       0
  6623 ;;      Totals:         2       0       0
  6624 ;;Total ram usage:        2 bytes
  6625 ;; Hardware stack levels used: 1
  6626 ;; Hardware stack levels required when called: 2
  6627 ;; This function calls:
  6628 ;;		Nothing
  6629 ;; This function is called by:
  6630 ;;		_menuMotor
  6631 ;; This function uses a non-reentrant model
  6632 ;;
  6633                           
  6634                           	psect	text22
  6635  00010A                     __ptext22:
  6636                           	callstack 0
  6637  00010A                     _getScore:
  6638                           	callstack 27
  6639                           
  6640                           ;EEPROM.c: 247:     return topScore;
  6641                           
  6642                           ;incstack = 0
  6643  00010A  C00D  F055         	movff	_topScore,?_getScore
  6644  00010E  C00E  F056         	movff	_topScore+1,?_getScore+1
  6645  000112  0012               	return		;funcret
  6646  000114                     __end_of_getScore:
  6647                           	callstack 0
  6648                           
  6649 ;; *************** function _getRX *****************
  6650 ;; Defined at:
  6651 ;;		line 26 in file "SIO.c"
  6652 ;; Parameters:    Size  Location     Type
  6653 ;;		None
  6654 ;; Auto vars:     Size  Location     Type
  6655 ;;		None
  6656 ;; Return value:  Size  Location     Type
  6657 ;;                  1    wreg      unsigned char 
  6658 ;; Registers used:
  6659 ;;		wreg, status,2
  6660 ;; Tracked objects:
  6661 ;;		On entry : 0/0
  6662 ;;		On exit  : 0/0
  6663 ;;		Unchanged: 0/0
  6664 ;; Data sizes:     COMRAM   BANK0   BANK1
  6665 ;;      Params:         0       0       0
  6666 ;;      Locals:         0       0       0
  6667 ;;      Temps:          0       0       0
  6668 ;;      Totals:         0       0       0
  6669 ;;Total ram usage:        0 bytes
  6670 ;; Hardware stack levels used: 1
  6671 ;; Hardware stack levels required when called: 2
  6672 ;; This function calls:
  6673 ;;		Nothing
  6674 ;; This function is called by:
  6675 ;;		_menuMotor
  6676 ;; This function uses a non-reentrant model
  6677 ;;
  6678                           
  6679                           	psect	text23
  6680  000182                     __ptext23:
  6681                           	callstack 0
  6682  000182                     _getRX:
  6683                           	callstack 27
  6684                           
  6685                           ;SIO.c: 27:     return RCREG;
  6686                           
  6687                           ;incstack = 0
  6688  000182  50AE               	movf	174,w,c	;volatile
  6689  000184  0012               	return		;funcret
  6690  000186                     __end_of_getRX:
  6691                           	callstack 0
  6692                           
  6693 ;; *************** function _getPositionJoystick *****************
  6694 ;; Defined at:
  6695 ;;		line 81 in file "Joystick.c"
  6696 ;; Parameters:    Size  Location     Type
  6697 ;;		None
  6698 ;; Auto vars:     Size  Location     Type
  6699 ;;		None
  6700 ;; Return value:  Size  Location     Type
  6701 ;;                  1    wreg      unsigned char 
  6702 ;; Registers used:
  6703 ;;		wreg, status,2
  6704 ;; Tracked objects:
  6705 ;;		On entry : 0/0
  6706 ;;		On exit  : 0/0
  6707 ;;		Unchanged: 0/0
  6708 ;; Data sizes:     COMRAM   BANK0   BANK1
  6709 ;;      Params:         0       0       0
  6710 ;;      Locals:         0       0       0
  6711 ;;      Temps:          0       0       0
  6712 ;;      Totals:         0       0       0
  6713 ;;Total ram usage:        0 bytes
  6714 ;; Hardware stack levels used: 1
  6715 ;; Hardware stack levels required when called: 2
  6716 ;; This function calls:
  6717 ;;		Nothing
  6718 ;; This function is called by:
  6719 ;;		_menuMotor
  6720 ;;		_motorJoystick
  6721 ;; This function uses a non-reentrant model
  6722 ;;
  6723                           
  6724                           	psect	text24
  6725  000186                     __ptext24:
  6726                           	callstack 0
  6727  000186                     _getPositionJoystick:
  6728                           	callstack 27
  6729                           
  6730                           ;Joystick.c: 82:     return positionJoystick;
  6731                           
  6732                           ;incstack = 0
  6733  000186  503C               	movf	_positionJoystick@Joystick$F704^0,w,c
  6734  000188  0012               	return		;funcret
  6735  00018A                     __end_of_getPositionJoystick:
  6736                           	callstack 0
  6737                           
  6738 ;; *************** function _getFirstDirectionScores *****************
  6739 ;; Defined at:
  6740 ;;		line 257 in file "EEPROM.c"
  6741 ;; Parameters:    Size  Location     Type
  6742 ;;  numAddress      1    wreg     unsigned char 
  6743 ;; Auto vars:     Size  Location     Type
  6744 ;;  numAddress      1    5[COMRAM] unsigned char 
  6745 ;; Return value:  Size  Location     Type
  6746 ;;                  1    wreg      unsigned char 
  6747 ;; Registers used:
  6748 ;;		wreg, status,2, status,0, prodl, prodh
  6749 ;; Tracked objects:
  6750 ;;		On entry : 0/0
  6751 ;;		On exit  : 0/0
  6752 ;;		Unchanged: 0/0
  6753 ;; Data sizes:     COMRAM   BANK0   BANK1
  6754 ;;      Params:         0       0       0
  6755 ;;      Locals:         1       0       0
  6756 ;;      Temps:          0       0       0
  6757 ;;      Totals:         1       0       0
  6758 ;;Total ram usage:        1 bytes
  6759 ;; Hardware stack levels used: 1
  6760 ;; Hardware stack levels required when called: 2
  6761 ;; This function calls:
  6762 ;;		Nothing
  6763 ;; This function is called by:
  6764 ;;		_menuMotor
  6765 ;; This function uses a non-reentrant model
  6766 ;;
  6767                           
  6768                           	psect	text25
  6769  0000B6                     __ptext25:
  6770                           	callstack 0
  6771  0000B6                     _getFirstDirectionScores:
  6772                           	callstack 27
  6773                           
  6774                           ;incstack = 0
  6775                           ;getFirstDirectionScores@numAddress stored from wreg
  6776  0000B6  6E55               	movwf	getFirstDirectionScores@numAddress^0,c
  6777                           
  6778                           ;EEPROM.c: 258:     EEADR = numAddress*2;
  6779  0000B8  5055               	movf	getFirstDirectionScores@numAddress^0,w,c
  6780  0000BA  0D02               	mullw	2
  6781  0000BC  CFF3 FFA9          	movff	prodl,4009	;volatile
  6782                           
  6783                           ;EEPROM.c: 259:     EECON1bits.EEPGD = 0;
  6784  0000C0  9EA6               	bcf	166,7,c	;volsfr
  6785                           
  6786                           ;EEPROM.c: 260:     EECON1bits.CFGS = 0;
  6787  0000C2  9CA6               	bcf	166,6,c	;volsfr
  6788                           
  6789                           ;EEPROM.c: 261:     EECON1bits.RD = 1;
  6790  0000C4  80A6               	bsf	166,0,c	;volsfr
  6791                           
  6792                           ;EEPROM.c: 262:     return EEDATA;
  6793  0000C6  50A8               	movf	168,w,c	;volatile
  6794  0000C8  0012               	return		;funcret
  6795  0000CA                     __end_of_getFirstDirectionScores:
  6796                           	callstack 0
  6797                           
  6798 ;; *************** function _getFirstDirection *****************
  6799 ;; Defined at:
  6800 ;;		line 250 in file "EEPROM.c"
  6801 ;; Parameters:    Size  Location     Type
  6802 ;;  numAddress      1    wreg     unsigned char 
  6803 ;; Auto vars:     Size  Location     Type
  6804 ;;  numAddress      1    5[COMRAM] unsigned char 
  6805 ;; Return value:  Size  Location     Type
  6806 ;;                  1    wreg      unsigned char 
  6807 ;; Registers used:
  6808 ;;		wreg, status,2, status,0, prodl, prodh
  6809 ;; Tracked objects:
  6810 ;;		On entry : 0/0
  6811 ;;		On exit  : 0/0
  6812 ;;		Unchanged: 0/0
  6813 ;; Data sizes:     COMRAM   BANK0   BANK1
  6814 ;;      Params:         0       0       0
  6815 ;;      Locals:         1       0       0
  6816 ;;      Temps:          0       0       0
  6817 ;;      Totals:         1       0       0
  6818 ;;Total ram usage:        1 bytes
  6819 ;; Hardware stack levels used: 1
  6820 ;; Hardware stack levels required when called: 2
  6821 ;; This function calls:
  6822 ;;		Nothing
  6823 ;; This function is called by:
  6824 ;;		_menuMotor
  6825 ;; This function uses a non-reentrant model
  6826 ;;
  6827                           
  6828                           	psect	text26
  6829  00004C                     __ptext26:
  6830                           	callstack 0
  6831  00004C                     _getFirstDirection:
  6832                           	callstack 27
  6833                           
  6834                           ;incstack = 0
  6835                           ;getFirstDirection@numAddress stored from wreg
  6836  00004C  6E55               	movwf	getFirstDirection@numAddress^0,c
  6837                           
  6838                           ;EEPROM.c: 251:     EEADR = numAddress*18+10;
  6839  00004E  5055               	movf	getFirstDirection@numAddress^0,w,c
  6840  000050  0D12               	mullw	18
  6841  000052  50F3               	movf	243,w,c
  6842  000054  0F0A               	addlw	10
  6843  000056  6EA9               	movwf	169,c	;volatile
  6844                           
  6845                           ;EEPROM.c: 252:     EECON1bits.EEPGD = 0;
  6846  000058  9EA6               	bcf	166,7,c	;volsfr
  6847                           
  6848                           ;EEPROM.c: 253:     EECON1bits.CFGS = 0;
  6849  00005A  9CA6               	bcf	166,6,c	;volsfr
  6850                           
  6851                           ;EEPROM.c: 254:     EECON1bits.RD = 1;
  6852  00005C  80A6               	bsf	166,0,c	;volsfr
  6853                           
  6854                           ;EEPROM.c: 255:     return EEDATA;
  6855  00005E  50A8               	movf	168,w,c	;volatile
  6856  000060  0012               	return		;funcret
  6857  000062                     __end_of_getFirstDirection:
  6858                           	callstack 0
  6859                           
  6860 ;; *************** function _getDoneCharging *****************
  6861 ;; Defined at:
  6862 ;;		line 207 in file "EEPROM.c"
  6863 ;; Parameters:    Size  Location     Type
  6864 ;;		None
  6865 ;; Auto vars:     Size  Location     Type
  6866 ;;		None
  6867 ;; Return value:  Size  Location     Type
  6868 ;;                  1    wreg      unsigned char 
  6869 ;; Registers used:
  6870 ;;		wreg, status,2
  6871 ;; Tracked objects:
  6872 ;;		On entry : 0/0
  6873 ;;		On exit  : 0/0
  6874 ;;		Unchanged: 0/0
  6875 ;; Data sizes:     COMRAM   BANK0   BANK1
  6876 ;;      Params:         0       0       0
  6877 ;;      Locals:         0       0       0
  6878 ;;      Temps:          0       0       0
  6879 ;;      Totals:         0       0       0
  6880 ;;Total ram usage:        0 bytes
  6881 ;; Hardware stack levels used: 1
  6882 ;; Hardware stack levels required when called: 2
  6883 ;; This function calls:
  6884 ;;		Nothing
  6885 ;; This function is called by:
  6886 ;;		_menuMotor
  6887 ;; This function uses a non-reentrant model
  6888 ;;
  6889                           
  6890                           	psect	text27
  6891  00018A                     __ptext27:
  6892                           	callstack 0
  6893  00018A                     _getDoneCharging:
  6894                           	callstack 27
  6895                           
  6896                           ;EEPROM.c: 208:     return doneCharging;
  6897                           
  6898                           ;incstack = 0
  6899  00018A  5022               	movf	_doneCharging^0,w,c
  6900  00018C  0012               	return		;funcret
  6901  00018E                     __end_of_getDoneCharging:
  6902                           	callstack 0
  6903                           
  6904 ;; *************** function _getCentreJoystick *****************
  6905 ;; Defined at:
  6906 ;;		line 87 in file "Joystick.c"
  6907 ;; Parameters:    Size  Location     Type
  6908 ;;		None
  6909 ;; Auto vars:     Size  Location     Type
  6910 ;;		None
  6911 ;; Return value:  Size  Location     Type
  6912 ;;                  1    wreg      unsigned char 
  6913 ;; Registers used:
  6914 ;;		wreg, status,2
  6915 ;; Tracked objects:
  6916 ;;		On entry : 0/0
  6917 ;;		On exit  : 0/0
  6918 ;;		Unchanged: 0/0
  6919 ;; Data sizes:     COMRAM   BANK0   BANK1
  6920 ;;      Params:         0       0       0
  6921 ;;      Locals:         0       0       0
  6922 ;;      Temps:          0       0       0
  6923 ;;      Totals:         0       0       0
  6924 ;;Total ram usage:        0 bytes
  6925 ;; Hardware stack levels used: 1
  6926 ;; Hardware stack levels required when called: 2
  6927 ;; This function calls:
  6928 ;;		Nothing
  6929 ;; This function is called by:
  6930 ;;		_menuMotor
  6931 ;; This function uses a non-reentrant model
  6932 ;;
  6933                           
  6934                           	psect	text28
  6935  00018E                     __ptext28:
  6936                           	callstack 0
  6937  00018E                     _getCentreJoystick:
  6938                           	callstack 27
  6939                           
  6940                           ;Joystick.c: 88:     return centre;
  6941                           
  6942                           ;incstack = 0
  6943  00018E  503A               	movf	_centre^0,w,c
  6944  000190  0012               	return		;funcret
  6945  000192                     __end_of_getCentreJoystick:
  6946                           	callstack 0
  6947                           
  6948 ;; *************** function _endMusic *****************
  6949 ;; Defined at:
  6950 ;;		line 57 in file "Music.c"
  6951 ;; Parameters:    Size  Location     Type
  6952 ;;		None
  6953 ;; Auto vars:     Size  Location     Type
  6954 ;;		None
  6955 ;; Return value:  Size  Location     Type
  6956 ;;                  1    wreg      void 
  6957 ;; Registers used:
  6958 ;;		wreg, status,2
  6959 ;; Tracked objects:
  6960 ;;		On entry : 0/0
  6961 ;;		On exit  : 0/0
  6962 ;;		Unchanged: 0/0
  6963 ;; Data sizes:     COMRAM   BANK0   BANK1
  6964 ;;      Params:         0       0       0
  6965 ;;      Locals:         0       0       0
  6966 ;;      Temps:          0       0       0
  6967 ;;      Totals:         0       0       0
  6968 ;;Total ram usage:        0 bytes
  6969 ;; Hardware stack levels used: 1
  6970 ;; Hardware stack levels required when called: 2
  6971 ;; This function calls:
  6972 ;;		Nothing
  6973 ;; This function is called by:
  6974 ;;		_menuMotor
  6975 ;; This function uses a non-reentrant model
  6976 ;;
  6977                           
  6978                           	psect	text29
  6979  000154                     __ptext29:
  6980                           	callstack 0
  6981  000154                     _endMusic:
  6982                           	callstack 27
  6983                           
  6984                           ;Music.c: 58:     musicState = 1;
  6985                           
  6986                           ;incstack = 0
  6987  000154  0E01               	movlw	1
  6988  000156  6E1D               	movwf	_musicState^0,c
  6989  000158  0C01               	retlw	1	;funcret
  6990  00015A                     __end_of_endMusic:
  6991                           	callstack 0
  6992                           
  6993 ;; *************** function _cleanEeprom *****************
  6994 ;; Defined at:
  6995 ;;		line 264 in file "EEPROM.c"
  6996 ;; Parameters:    Size  Location     Type
  6997 ;;		None
  6998 ;; Auto vars:     Size  Location     Type
  6999 ;;		None
  7000 ;; Return value:  Size  Location     Type
  7001 ;;                  1    wreg      void 
  7002 ;; Registers used:
  7003 ;;		wreg, status,2
  7004 ;; Tracked objects:
  7005 ;;		On entry : 0/0
  7006 ;;		On exit  : 0/0
  7007 ;;		Unchanged: 0/0
  7008 ;; Data sizes:     COMRAM   BANK0   BANK1
  7009 ;;      Params:         0       0       0
  7010 ;;      Locals:         0       0       0
  7011 ;;      Temps:          0       0       0
  7012 ;;      Totals:         0       0       0
  7013 ;;Total ram usage:        0 bytes
  7014 ;; Hardware stack levels used: 1
  7015 ;; Hardware stack levels required when called: 2
  7016 ;; This function calls:
  7017 ;;		Nothing
  7018 ;; This function is called by:
  7019 ;;		_menuMotor
  7020 ;; This function uses a non-reentrant model
  7021 ;;
  7022                           
  7023                           	psect	text30
  7024  0000FE                     __ptext30:
  7025                           	callstack 0
  7026  0000FE                     _cleanEeprom:
  7027                           	callstack 27
  7028                           
  7029                           ;EEPROM.c: 265:     eepromState = 11;
  7030                           
  7031                           ;incstack = 0
  7032  0000FE  0E0B               	movlw	11
  7033  000100  6E21               	movwf	_eepromState^0,c
  7034                           
  7035                           ;EEPROM.c: 266:     numAddress = 10;
  7036  000102  0E0A               	movlw	10
  7037  000104  6E1F               	movwf	_numAddress^0,c
  7038                           
  7039                           ;EEPROM.c: 267:     doneCharging = 0;
  7040  000106  6A22               	clrf	_doneCharging^0,c
  7041  000108  0012               	return		;funcret
  7042  00010A                     __end_of_cleanEeprom:
  7043                           	callstack 0
  7044                           
  7045 ;; *************** function _TXgetState *****************
  7046 ;; Defined at:
  7047 ;;		line 104 in file "TX.c"
  7048 ;; Parameters:    Size  Location     Type
  7049 ;;		None
  7050 ;; Auto vars:     Size  Location     Type
  7051 ;;		None
  7052 ;; Return value:  Size  Location     Type
  7053 ;;                  1    wreg      unsigned char 
  7054 ;; Registers used:
  7055 ;;		wreg, status,2
  7056 ;; Tracked objects:
  7057 ;;		On entry : 0/0
  7058 ;;		On exit  : 0/0
  7059 ;;		Unchanged: 0/0
  7060 ;; Data sizes:     COMRAM   BANK0   BANK1
  7061 ;;      Params:         0       0       0
  7062 ;;      Locals:         0       0       0
  7063 ;;      Temps:          0       0       0
  7064 ;;      Totals:         0       0       0
  7065 ;;Total ram usage:        0 bytes
  7066 ;; Hardware stack levels used: 1
  7067 ;; Hardware stack levels required when called: 2
  7068 ;; This function calls:
  7069 ;;		Nothing
  7070 ;; This function is called by:
  7071 ;;		_menuMotor
  7072 ;; This function uses a non-reentrant model
  7073 ;;
  7074                           
  7075                           	psect	text31
  7076  000192                     __ptext31:
  7077                           	callstack 0
  7078  000192                     _TXgetState:
  7079                           	callstack 27
  7080                           
  7081                           ;TX.c: 105:     return stateTX;
  7082                           
  7083                           ;incstack = 0
  7084  000192  5018               	movf	_stateTX^0,w,c
  7085  000194  0012               	return		;funcret
  7086  000196                     __end_of_TXgetState:
  7087                           	callstack 0
  7088                           
  7089 ;; *************** function _TXbusy *****************
  7090 ;; Defined at:
  7091 ;;		line 14 in file "SIO.c"
  7092 ;; Parameters:    Size  Location     Type
  7093 ;;		None
  7094 ;; Auto vars:     Size  Location     Type
  7095 ;;		None
  7096 ;; Return value:  Size  Location     Type
  7097 ;;                  1    wreg      unsigned char 
  7098 ;; Registers used:
  7099 ;;		wreg
  7100 ;; Tracked objects:
  7101 ;;		On entry : 0/0
  7102 ;;		On exit  : 0/0
  7103 ;;		Unchanged: 0/0
  7104 ;; Data sizes:     COMRAM   BANK0   BANK1
  7105 ;;      Params:         0       0       0
  7106 ;;      Locals:         0       0       0
  7107 ;;      Temps:          0       0       0
  7108 ;;      Totals:         0       0       0
  7109 ;;Total ram usage:        0 bytes
  7110 ;; Hardware stack levels used: 1
  7111 ;; Hardware stack levels required when called: 2
  7112 ;; This function calls:
  7113 ;;		Nothing
  7114 ;; This function is called by:
  7115 ;;		_menuMotor
  7116 ;;		_motorJoystick
  7117 ;;		_motorRX
  7118 ;; This function uses a non-reentrant model
  7119 ;;
  7120                           
  7121                           	psect	text32
  7122  00015A                     __ptext32:
  7123                           	callstack 0
  7124  00015A                     _TXbusy:
  7125                           	callstack 27
  7126                           
  7127                           ;SIO.c: 15:     return TXSTAbits.TRMT;
  7128                           
  7129                           ;incstack = 0
  7130  00015A  B2AC               	btfsc	172,1,c	;volatile
  7131  00015C  0C01               	retlw	1
  7132  00015E  0C00               	retlw	0	;funcret
  7133  000160                     __end_of_TXbusy:
  7134                           	callstack 0
  7135                           
  7136 ;; *************** function _RXdata *****************
  7137 ;; Defined at:
  7138 ;;		line 18 in file "SIO.c"
  7139 ;; Parameters:    Size  Location     Type
  7140 ;;		None
  7141 ;; Auto vars:     Size  Location     Type
  7142 ;;		None
  7143 ;; Return value:  Size  Location     Type
  7144 ;;                  1    wreg      unsigned char 
  7145 ;; Registers used:
  7146 ;;		wreg
  7147 ;; Tracked objects:
  7148 ;;		On entry : 0/0
  7149 ;;		On exit  : 0/0
  7150 ;;		Unchanged: 0/0
  7151 ;; Data sizes:     COMRAM   BANK0   BANK1
  7152 ;;      Params:         0       0       0
  7153 ;;      Locals:         0       0       0
  7154 ;;      Temps:          0       0       0
  7155 ;;      Totals:         0       0       0
  7156 ;;Total ram usage:        0 bytes
  7157 ;; Hardware stack levels used: 1
  7158 ;; Hardware stack levels required when called: 2
  7159 ;; This function calls:
  7160 ;;		Nothing
  7161 ;; This function is called by:
  7162 ;;		_menuMotor
  7163 ;; This function uses a non-reentrant model
  7164 ;;
  7165                           
  7166                           	psect	text33
  7167  000160                     __ptext33:
  7168                           	callstack 0
  7169  000160                     _RXdata:
  7170                           	callstack 27
  7171                           
  7172                           ;SIO.c: 19:     return PIR1bits.RCIF;
  7173                           
  7174                           ;incstack = 0
  7175  000160  BA9E               	btfsc	158,5,c	;volatile
  7176  000162  0C01               	retlw	1
  7177  000164  0C00               	retlw	0	;funcret
  7178  000166                     __end_of_RXdata:
  7179                           	callstack 0
  7180                           
  7181 ;; *************** function _LcScroll *****************
  7182 ;; Defined at:
  7183 ;;		line 283 in file "LcTLCD.c"
  7184 ;; Parameters:    Size  Location     Type
  7185 ;;		None
  7186 ;; Auto vars:     Size  Location     Type
  7187 ;;		None
  7188 ;; Return value:  Size  Location     Type
  7189 ;;                  1    wreg      void 
  7190 ;; Registers used:
  7191 ;;		wreg, status,2, status,0, cstack
  7192 ;; Tracked objects:
  7193 ;;		On entry : 0/0
  7194 ;;		On exit  : 0/0
  7195 ;;		Unchanged: 0/0
  7196 ;; Data sizes:     COMRAM   BANK0   BANK1
  7197 ;;      Params:         0       0       0
  7198 ;;      Locals:         0       0       0
  7199 ;;      Temps:          0       0       0
  7200 ;;      Totals:         0       0       0
  7201 ;;Total ram usage:        0 bytes
  7202 ;; Hardware stack levels used: 1
  7203 ;; Hardware stack levels required when called: 4
  7204 ;; This function calls:
  7205 ;;		_CantaIR
  7206 ;; This function is called by:
  7207 ;;		_menuMotor
  7208 ;; This function uses a non-reentrant model
  7209 ;;
  7210                           
  7211                           	psect	text34
  7212  000166                     __ptext34:
  7213                           	callstack 0
  7214  000166                     _LcScroll:
  7215                           	callstack 25
  7216                           
  7217                           ;LcTLCD.c: 284:     CantaIR(0x10 | 0x08 | 0x00);
  7218                           
  7219                           ;incstack = 0
  7220  000166  0E18               	movlw	24
  7221  000168  EFAA  F00F         	goto	_CantaIR
  7222  00016C                     __end_of_LcScroll:
  7223                           	callstack 0
  7224                           
  7225 ;; *************** function _LcPutTime *****************
  7226 ;; Defined at:
  7227 ;;		line 177 in file "LcTLCD.c"
  7228 ;; Parameters:    Size  Location     Type
  7229 ;;  time            1    wreg     unsigned char 
  7230 ;; Auto vars:     Size  Location     Type
  7231 ;;  time            1   22[COMRAM] unsigned char 
  7232 ;; Return value:  Size  Location     Type
  7233 ;;                  1    wreg      void 
  7234 ;; Registers used:
  7235 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7236 ;; Tracked objects:
  7237 ;;		On entry : 0/0
  7238 ;;		On exit  : 0/0
  7239 ;;		Unchanged: 0/0
  7240 ;; Data sizes:     COMRAM   BANK0   BANK1
  7241 ;;      Params:         0       0       0
  7242 ;;      Locals:         1       0       0
  7243 ;;      Temps:          0       0       0
  7244 ;;      Totals:         1       0       0
  7245 ;;Total ram usage:        1 bytes
  7246 ;; Hardware stack levels used: 1
  7247 ;; Hardware stack levels required when called: 6
  7248 ;; This function calls:
  7249 ;;		_LcPutChar
  7250 ;;		___lbdiv
  7251 ;;		___lbmod
  7252 ;; This function is called by:
  7253 ;;		_menuMotor
  7254 ;;		_motorTimer
  7255 ;; This function uses a non-reentrant model
  7256 ;;
  7257                           
  7258                           	psect	text35
  7259  001EB6                     __ptext35:
  7260                           	callstack 0
  7261  001EB6                     _LcPutTime:
  7262                           	callstack 23
  7263                           
  7264                           ;incstack = 0
  7265                           ;LcPutTime@time stored from wreg
  7266  001EB6  6E66               	movwf	LcPutTime@time^0,c
  7267                           
  7268                           ;LcTLCD.c: 178:     LcPutChar(time/10 + '0');
  7269  001EB8  0E0A               	movlw	10
  7270  001EBA  6E59               	movwf	___lbdiv@divisor^0,c
  7271  001EBC  5066               	movf	LcPutTime@time^0,w,c
  7272  001EBE  ECEE  F00E         	call	___lbdiv
  7273  001EC2  0F30               	addlw	48
  7274  001EC4  EC07  F00E         	call	_LcPutChar
  7275                           
  7276                           ;LcTLCD.c: 179:     LcPutChar(time%10 + '0');
  7277  001EC8  0E0A               	movlw	10
  7278  001ECA  6E55               	movwf	___lbmod@divisor^0,c
  7279  001ECC  5066               	movf	LcPutTime@time^0,w,c
  7280  001ECE  EC35  F00F         	call	___lbmod
  7281  001ED2  0F30               	addlw	48
  7282  001ED4  EF07  F00E         	goto	_LcPutChar
  7283  001ED8                     __end_of_LcPutTime:
  7284                           	callstack 0
  7285                           
  7286 ;; *************** function _LcPutScore *****************
  7287 ;; Defined at:
  7288 ;;		line 182 in file "LcTLCD.c"
  7289 ;; Parameters:    Size  Location     Type
  7290 ;;  score           1    wreg     unsigned char 
  7291 ;; Auto vars:     Size  Location     Type
  7292 ;;  score           1   22[COMRAM] unsigned char 
  7293 ;; Return value:  Size  Location     Type
  7294 ;;                  1    wreg      void 
  7295 ;; Registers used:
  7296 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7297 ;; Tracked objects:
  7298 ;;		On entry : 0/0
  7299 ;;		On exit  : 0/0
  7300 ;;		Unchanged: 0/0
  7301 ;; Data sizes:     COMRAM   BANK0   BANK1
  7302 ;;      Params:         0       0       0
  7303 ;;      Locals:         1       0       0
  7304 ;;      Temps:          0       0       0
  7305 ;;      Totals:         1       0       0
  7306 ;;Total ram usage:        1 bytes
  7307 ;; Hardware stack levels used: 1
  7308 ;; Hardware stack levels required when called: 6
  7309 ;; This function calls:
  7310 ;;		_LcPutChar
  7311 ;;		___lbdiv
  7312 ;;		___lbmod
  7313 ;; This function is called by:
  7314 ;;		_menuMotor
  7315 ;; This function uses a non-reentrant model
  7316 ;;
  7317                           
  7318                           	psect	text36
  7319  001ADE                     __ptext36:
  7320                           	callstack 0
  7321  001ADE                     _LcPutScore:
  7322                           	callstack 23
  7323                           
  7324                           ;incstack = 0
  7325                           ;LcPutScore@score stored from wreg
  7326  001ADE  6E66               	movwf	LcPutScore@score^0,c
  7327                           
  7328                           ;LcTLCD.c: 183:     LcPutChar(' ');
  7329  001AE0  0E20               	movlw	32
  7330  001AE2  EC07  F00E         	call	_LcPutChar
  7331                           
  7332                           ;LcTLCD.c: 184:     if(score > 99){
  7333  001AE6  0E63               	movlw	99
  7334  001AE8  6466               	cpfsgt	LcPutScore@score^0,c
  7335  001AEA  D018               	goto	l4518
  7336                           
  7337                           ;LcTLCD.c: 185:         LcPutChar((score/100)+'0');
  7338  001AEC  0E64               	movlw	100
  7339  001AEE  6E59               	movwf	___lbdiv@divisor^0,c
  7340  001AF0  5066               	movf	LcPutScore@score^0,w,c
  7341  001AF2  ECEE  F00E         	call	___lbdiv
  7342  001AF6  0F30               	addlw	48
  7343  001AF8  EC07  F00E         	call	_LcPutChar
  7344                           
  7345                           ;LcTLCD.c: 186:         LcPutChar((score%100)/10+'0');
  7346  001AFC  0E0A               	movlw	10
  7347  001AFE  6E59               	movwf	___lbdiv@divisor^0,c
  7348  001B00  0E64               	movlw	100
  7349  001B02  6E55               	movwf	___lbmod@divisor^0,c
  7350  001B04  5066               	movf	LcPutScore@score^0,w,c
  7351  001B06  EC35  F00F         	call	___lbmod
  7352  001B0A  ECEE  F00E         	call	___lbdiv
  7353  001B0E  0F30               	addlw	48
  7354  001B10  EC07  F00E         	call	_LcPutChar
  7355                           
  7356                           ;LcTLCD.c: 187:         LcPutChar((score%10)+'0');
  7357  001B14  D816               	call	PL94	;call to abstracted procedure
  7358  001B16  EC35  F00F         	call	___lbmod
  7359  001B1A  D010               	goto	L14
  7360  001B1C                     l4518:
  7361  001B1C  0E09               	movlw	9
  7362  001B1E  6466               	cpfsgt	LcPutScore@score^0,c
  7363  001B20  D00C               	goto	l4522
  7364                           
  7365                           ;LcTLCD.c: 189:         LcPutChar((score/10)+'0');
  7366  001B22  0E0A               	movlw	10
  7367  001B24  6E59               	movwf	___lbdiv@divisor^0,c
  7368  001B26  5066               	movf	LcPutScore@score^0,w,c
  7369  001B28  ECEE  F00E         	call	___lbdiv
  7370  001B2C  0F30               	addlw	48
  7371  001B2E  EC07  F00E         	call	_LcPutChar
  7372                           
  7373                           ;LcTLCD.c: 190:         LcPutChar((score%10)+'0');
  7374  001B32  D807               	call	PL94	;call to abstracted procedure
  7375  001B34  EC35  F00F         	call	___lbmod
  7376  001B38  D001               	goto	L14
  7377  001B3A                     l4522:
  7378                           
  7379                           ;LcTLCD.c: 192:          LcPutChar((score)+'0');
  7380  001B3A  5066               	movf	LcPutScore@score^0,w,c
  7381  001B3C                     L14:
  7382  001B3C  0F30               	addlw	48
  7383  001B3E  EF07  F00E         	goto	_LcPutChar
  7384  001B42                     __end_of_LcPutScore:
  7385                           	callstack 0
  7386  001B42                     PL94:
  7387                           	callstack 23
  7388  001B42  0E0A               	movlw	10
  7389  001B44  6E55               	movwf	___lbmod@divisor^0,c
  7390  001B46  5066               	movf	LcPutScore@score^0,w,c
  7391  001B48  0012               	return	
  7392  001B4A                     __end_ofPL94:
  7393                           	callstack 0
  7394                           
  7395 ;; *************** function ___lbmod *****************
  7396 ;; Defined at:
  7397 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\lbmod.c"
  7398 ;; Parameters:    Size  Location     Type
  7399 ;;  dividend        1    wreg     unsigned char 
  7400 ;;  divisor         1    5[COMRAM] unsigned char 
  7401 ;; Auto vars:     Size  Location     Type
  7402 ;;  dividend        1    6[COMRAM] unsigned char 
  7403 ;;  rem             1    8[COMRAM] unsigned char 
  7404 ;;  counter         1    7[COMRAM] unsigned char 
  7405 ;; Return value:  Size  Location     Type
  7406 ;;                  1    wreg      unsigned char 
  7407 ;; Registers used:
  7408 ;;		wreg, status,2, status,0
  7409 ;; Tracked objects:
  7410 ;;		On entry : 0/0
  7411 ;;		On exit  : 0/0
  7412 ;;		Unchanged: 0/0
  7413 ;; Data sizes:     COMRAM   BANK0   BANK1
  7414 ;;      Params:         1       0       0
  7415 ;;      Locals:         3       0       0
  7416 ;;      Temps:          0       0       0
  7417 ;;      Totals:         4       0       0
  7418 ;;Total ram usage:        4 bytes
  7419 ;; Hardware stack levels used: 1
  7420 ;; Hardware stack levels required when called: 2
  7421 ;; This function calls:
  7422 ;;		Nothing
  7423 ;; This function is called by:
  7424 ;;		_menuMotor
  7425 ;;		_motorKey
  7426 ;;		_LcPutTime
  7427 ;;		_LcPutScore
  7428 ;; This function uses a non-reentrant model
  7429 ;;
  7430                           
  7431                           	psect	text37
  7432  001E6A                     __ptext37:
  7433                           	callstack 0
  7434  001E6A                     ___lbmod:
  7435                           	callstack 26
  7436                           
  7437                           ;incstack = 0
  7438                           ;___lbmod@dividend stored from wreg
  7439  001E6A  6E56               	movwf	___lbmod@dividend^0,c
  7440  001E6C  0E08               	movlw	8
  7441  001E6E  6E57               	movwf	___lbmod@counter^0,c
  7442  001E70  6A58               	clrf	___lbmod@rem^0,c
  7443  001E72                     l4310:
  7444  001E72  90D8               	bcf	status,0,c
  7445  001E74  3456               	rlcf	___lbmod@dividend^0,w,c
  7446  001E76  3458               	rlcf	___lbmod@rem^0,w,c
  7447  001E78  6E58               	movwf	___lbmod@rem^0,c
  7448  001E7A  90D8               	bcf	status,0,c
  7449  001E7C  3656               	rlcf	___lbmod@dividend^0,f,c
  7450  001E7E  5055               	movf	___lbmod@divisor^0,w,c
  7451  001E80  5C58               	subwf	___lbmod@rem^0,w,c
  7452  001E82  E302               	bnc	l4318
  7453  001E84  5055               	movf	___lbmod@divisor^0,w,c
  7454  001E86  5E58               	subwf	___lbmod@rem^0,f,c
  7455  001E88                     l4318:
  7456  001E88  2E57               	decfsz	___lbmod@counter^0,f,c
  7457  001E8A  D7F3               	goto	l4310
  7458  001E8C  5058               	movf	___lbmod@rem^0,w,c
  7459  001E8E  0012               	return		;funcret
  7460  001E90                     __end_of___lbmod:
  7461                           	callstack 0
  7462                           
  7463 ;; *************** function ___lbdiv *****************
  7464 ;; Defined at:
  7465 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\lbdiv.c"
  7466 ;; Parameters:    Size  Location     Type
  7467 ;;  dividend        1    wreg     unsigned char 
  7468 ;;  divisor         1    9[COMRAM] unsigned char 
  7469 ;; Auto vars:     Size  Location     Type
  7470 ;;  dividend        1   10[COMRAM] unsigned char 
  7471 ;;  quotient        1   12[COMRAM] unsigned char 
  7472 ;;  counter         1   11[COMRAM] unsigned char 
  7473 ;; Return value:  Size  Location     Type
  7474 ;;                  1    wreg      unsigned char 
  7475 ;; Registers used:
  7476 ;;		wreg, status,2, status,0
  7477 ;; Tracked objects:
  7478 ;;		On entry : 0/0
  7479 ;;		On exit  : 0/0
  7480 ;;		Unchanged: 0/0
  7481 ;; Data sizes:     COMRAM   BANK0   BANK1
  7482 ;;      Params:         1       0       0
  7483 ;;      Locals:         3       0       0
  7484 ;;      Temps:          0       0       0
  7485 ;;      Totals:         4       0       0
  7486 ;;Total ram usage:        4 bytes
  7487 ;; Hardware stack levels used: 1
  7488 ;; Hardware stack levels required when called: 2
  7489 ;; This function calls:
  7490 ;;		Nothing
  7491 ;; This function is called by:
  7492 ;;		_menuMotor
  7493 ;;		_LcPutTime
  7494 ;;		_LcPutScore
  7495 ;; This function uses a non-reentrant model
  7496 ;;
  7497                           
  7498                           	psect	text38
  7499  001DDC                     __ptext38:
  7500                           	callstack 0
  7501  001DDC                     ___lbdiv:
  7502                           	callstack 26
  7503                           
  7504                           ;incstack = 0
  7505                           ;___lbdiv@dividend stored from wreg
  7506  001DDC  6E5A               	movwf	___lbdiv@dividend^0,c
  7507  001DDE  6A5C               	clrf	___lbdiv@quotient^0,c
  7508  001DE0  5059               	movf	___lbdiv@divisor^0,w,c
  7509  001DE2  E014               	bz	l4302
  7510  001DE4  0E01               	movlw	1
  7511  001DE6  6E5B               	movwf	___lbdiv@counter^0,c
  7512  001DE8  D003               	goto	l4290
  7513  001DEA                     l4286:
  7514  001DEA  90D8               	bcf	status,0,c
  7515  001DEC  3659               	rlcf	___lbdiv@divisor^0,f,c
  7516  001DEE  2A5B               	incf	___lbdiv@counter^0,f,c
  7517  001DF0                     l4290:
  7518  001DF0  AE59               	btfss	___lbdiv@divisor^0,7,c
  7519  001DF2  D7FB               	goto	l4286
  7520  001DF4                     u2920:
  7521  001DF4  90D8               	bcf	status,0,c
  7522  001DF6  365C               	rlcf	___lbdiv@quotient^0,f,c
  7523  001DF8  5059               	movf	___lbdiv@divisor^0,w,c
  7524  001DFA  5C5A               	subwf	___lbdiv@dividend^0,w,c
  7525  001DFC  E303               	bnc	l4298
  7526  001DFE  5059               	movf	___lbdiv@divisor^0,w,c
  7527  001E00  5E5A               	subwf	___lbdiv@dividend^0,f,c
  7528  001E02  805C               	bsf	___lbdiv@quotient^0,0,c
  7529  001E04                     l4298:
  7530  001E04  90D8               	bcf	status,0,c
  7531  001E06  3259               	rrcf	___lbdiv@divisor^0,f,c
  7532  001E08  2E5B               	decfsz	___lbdiv@counter^0,f,c
  7533  001E0A  D7F4               	goto	u2920
  7534  001E0C                     l4302:
  7535  001E0C  505C               	movf	___lbdiv@quotient^0,w,c
  7536  001E0E  0012               	return		;funcret
  7537  001E10                     __end_of___lbdiv:
  7538                           	callstack 0
  7539                           
  7540 ;; *************** function _LcPutChar *****************
  7541 ;; Defined at:
  7542 ;;		line 144 in file "LcTLCD.c"
  7543 ;; Parameters:    Size  Location     Type
  7544 ;;  c               1    wreg     unsigned char 
  7545 ;; Auto vars:     Size  Location     Type
  7546 ;;  c               1   21[COMRAM] unsigned char 
  7547 ;; Return value:  Size  Location     Type
  7548 ;;                  1    wreg      void 
  7549 ;; Registers used:
  7550 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7551 ;; Tracked objects:
  7552 ;;		On entry : 0/0
  7553 ;;		On exit  : 0/0
  7554 ;;		Unchanged: 0/0
  7555 ;; Data sizes:     COMRAM   BANK0   BANK1
  7556 ;;      Params:         0       0       0
  7557 ;;      Locals:         1       0       0
  7558 ;;      Temps:          0       0       0
  7559 ;;      Totals:         1       0       0
  7560 ;;Total ram usage:        1 bytes
  7561 ;; Hardware stack levels used: 1
  7562 ;; Hardware stack levels required when called: 5
  7563 ;; This function calls:
  7564 ;;		_CantaData
  7565 ;;		_LcGotoXY
  7566 ;;		_WaitForBusy
  7567 ;; This function is called by:
  7568 ;;		_menuMotor
  7569 ;;		_LcPutTime
  7570 ;;		_LcPutScore
  7571 ;;		_motorTimer
  7572 ;; This function uses a non-reentrant model
  7573 ;;
  7574                           
  7575                           	psect	text39
  7576  001C0E                     __ptext39:
  7577                           	callstack 0
  7578  001C0E                     _LcPutChar:
  7579                           	callstack 23
  7580                           
  7581                           ;incstack = 0
  7582                           ;LcPutChar@c stored from wreg
  7583  001C0E  6E65               	movwf	LcPutChar@c^0,c
  7584                           
  7585                           ;LcTLCD.c: 154:  WaitForBusy(); CantaData(c);
  7586  001C10  EC76  F00E         	call	_WaitForBusy	;wreg free
  7587  001C14  5065               	movf	LcPutChar@c^0,w,c
  7588  001C16  ECD2  F00E         	call	_CantaData
  7589                           
  7590                           ;LcTLCD.c: 156:  ++ColumnAct;
  7591  001C1A  2A2C               	incf	_ColumnAct^0,f,c
  7592                           
  7593                           ;LcTLCD.c: 157:  if (Rows == 3) {
  7594  001C1C  0E03               	movlw	3
  7595  001C1E  182F               	xorwf	_Rows^0,w,c
  7596  001C20  E107               	bnz	l4256
  7597                           
  7598                           ;LcTLCD.c: 158:   if (ColumnAct >= 20) {
  7599  001C22  0E13               	movlw	19
  7600  001C24  642C               	cpfsgt	_ColumnAct^0,c
  7601  001C26  0C13               	retlw	19
  7602                           
  7603                           ;LcTLCD.c: 159:    ColumnAct = 0;
  7604  001C28  6A2C               	clrf	_ColumnAct^0,c
  7605                           
  7606                           ;LcTLCD.c: 160:    if (++RowAct >= 4) RowAct = 0;
  7607  001C2A  2A2D               	incf	_RowAct^0,f,c
  7608  001C2C  0E03               	movlw	3
  7609  001C2E  D009               	goto	L11
  7610  001C30                     l4256:
  7611                           
  7612                           ;LcTLCD.c: 164:  if (Rows == 2) {
  7613  001C30  0E02               	movlw	2
  7614  001C32  182F               	xorwf	_Rows^0,w,c
  7615  001C34  E10A               	bnz	l4268
  7616                           
  7617                           ;LcTLCD.c: 165:   if (ColumnAct >= 40) {
  7618  001C36  0E27               	movlw	39
  7619  001C38  642C               	cpfsgt	_ColumnAct^0,c
  7620  001C3A  0C27               	retlw	39
  7621                           
  7622                           ;LcTLCD.c: 166:    ColumnAct = 0;
  7623  001C3C  6A2C               	clrf	_ColumnAct^0,c
  7624                           
  7625                           ;LcTLCD.c: 167:    if (++RowAct >= 2) RowAct = 0;
  7626  001C3E  2A2D               	incf	_RowAct^0,f,c
  7627  001C40  0E01               	movlw	1
  7628  001C42                     L11:
  7629  001C42  642D               	cpfsgt	_RowAct^0,c
  7630  001C44  D009               	goto	l4274
  7631  001C46  6A2D               	clrf	_RowAct^0,c
  7632  001C48  D007               	goto	l4274
  7633  001C4A                     l4268:
  7634                           
  7635                           ;LcTLCD.c: 171:  if (RowAct == 1) {
  7636  001C4A  042D               	decf	_RowAct^0,w,c
  7637  001C4C  A4D8               	btfss	status,2,c
  7638  001C4E  0012               	return	
  7639                           
  7640                           ;LcTLCD.c: 172:   if (ColumnAct >= 40) ColumnAct = 0;
  7641  001C50  0E27               	movlw	39
  7642  001C52  642C               	cpfsgt	_ColumnAct^0,c
  7643  001C54  D001               	goto	l4274
  7644  001C56  6A2C               	clrf	_ColumnAct^0,c
  7645  001C58                     l4274:
  7646                           
  7647                           ;LcTLCD.c: 173:   LcGotoXY(ColumnAct, RowAct);
  7648  001C58  C02D  F05D         	movff	_RowAct,LcGotoXY@Row
  7649  001C5C  502C               	movf	_ColumnAct^0,w,c
  7650  001C5E  EF7C  F00B         	goto	_LcGotoXY
  7651  001C62                     __end_of_LcPutChar:
  7652                           	callstack 0
  7653                           
  7654 ;; *************** function _LcGotoXY *****************
  7655 ;; Defined at:
  7656 ;;		line 117 in file "LcTLCD.c"
  7657 ;; Parameters:    Size  Location     Type
  7658 ;;  Column          1    wreg     unsigned char 
  7659 ;;  Row             1   13[COMRAM] unsigned char 
  7660 ;; Auto vars:     Size  Location     Type
  7661 ;;  Column          1   20[COMRAM] unsigned char 
  7662 ;;  Fisics          2   18[COMRAM] int 
  7663 ;; Return value:  Size  Location     Type
  7664 ;;                  1    wreg      void 
  7665 ;; Registers used:
  7666 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7667 ;; Tracked objects:
  7668 ;;		On entry : 0/0
  7669 ;;		On exit  : 0/0
  7670 ;;		Unchanged: 0/0
  7671 ;; Data sizes:     COMRAM   BANK0   BANK1
  7672 ;;      Params:         1       0       0
  7673 ;;      Locals:         5       0       0
  7674 ;;      Temps:          2       0       0
  7675 ;;      Totals:         8       0       0
  7676 ;;Total ram usage:        8 bytes
  7677 ;; Hardware stack levels used: 1
  7678 ;; Hardware stack levels required when called: 4
  7679 ;; This function calls:
  7680 ;;		_CantaIR
  7681 ;;		_WaitForBusy
  7682 ;; This function is called by:
  7683 ;;		_main
  7684 ;;		_menuMotor
  7685 ;;		_LcPutChar
  7686 ;;		_motorTimer
  7687 ;; This function uses a non-reentrant model
  7688 ;;
  7689                           
  7690                           	psect	text40
  7691  0016F8                     __ptext40:
  7692                           	callstack 0
  7693  0016F8                     _LcGotoXY:
  7694                           	callstack 23
  7695                           
  7696                           ;incstack = 0
  7697                           ;LcGotoXY@Column stored from wreg
  7698  0016F8  6E64               	movwf	LcGotoXY@Column^0,c
  7699                           
  7700                           ;LcTLCD.c: 121:  int Fisics;;LcTLCD.c: 123:  switch (Rows) {
  7701  0016FA  D030               	goto	l4206
  7702  0016FC                     l4186:
  7703                           
  7704                           ;LcTLCD.c: 125:    Fisics = Column + (!Row ? 0 : 0x40); break;
  7705  0016FC  505D               	movf	LcGotoXY@Row^0,w,c
  7706  0016FE  E004               	bz	l816
  7707  001700  6A61               	clrf	(_LcGotoXY$1428+1)^0,c
  7708  001702  0E40               	movlw	64
  7709  001704  6E60               	movwf	_LcGotoXY$1428^0,c
  7710  001706  D002               	goto	l4190
  7711  001708                     l816:
  7712  001708  6A60               	clrf	_LcGotoXY$1428^0,c
  7713  00170A  6A61               	clrf	(_LcGotoXY$1428+1)^0,c
  7714  00170C                     l4190:
  7715  00170C  5064               	movf	LcGotoXY@Column^0,w,c
  7716  00170E  2460               	addwf	_LcGotoXY$1428^0,w,c
  7717  001710  6E62               	movwf	LcGotoXY@Fisics^0,c
  7718  001712  0E00               	movlw	0
  7719  001714  2061               	addwfc	(_LcGotoXY$1428+1)^0,w,c
  7720  001716  6E63               	movwf	(LcGotoXY@Fisics+1)^0,c
  7721  001718  D02E               	goto	l4208
  7722  00171A                     l820:
  7723                           
  7724                           ;LcTLCD.c: 127:    Fisics = Column;
  7725  00171A  C064  F062         	movff	LcGotoXY@Column,LcGotoXY@Fisics
  7726  00171E  6A63               	clrf	(LcGotoXY@Fisics+1)^0,c
  7727                           
  7728                           ;LcTLCD.c: 128:    if (Row == 1) Fisics += 0x40; else
  7729  001720  045D               	decf	LcGotoXY@Row^0,w,c
  7730  001722  E102               	bnz	l4196
  7731  001724  0E40               	movlw	64
  7732  001726  D004               	goto	L12
  7733  001728                     l4196:
  7734                           
  7735                           ;LcTLCD.c: 129:    if (Row == 2) Fisics += Columns; else
  7736  001728  0E02               	movlw	2
  7737  00172A  185D               	xorwf	LcGotoXY@Row^0,w,c
  7738  00172C  E104               	bnz	l4200
  7739  00172E  502E               	movf	_Columns^0,w,c
  7740  001730                     L12:
  7741  001730  2662               	addwf	LcGotoXY@Fisics^0,f,c
  7742  001732  0E00               	movlw	0
  7743  001734  D00D               	goto	L13
  7744  001736                     l4200:
  7745                           
  7746                           ;LcTLCD.c: 130:    if (Row == 3) Fisics += 0x40+Columns;
  7747  001736  0E03               	movlw	3
  7748  001738  185D               	xorwf	LcGotoXY@Row^0,w,c
  7749  00173A  E11D               	bnz	l4208
  7750  00173C  502E               	movf	_Columns^0,w,c
  7751  00173E  6E5E               	movwf	??_LcGotoXY^0,c
  7752  001740  6A5F               	clrf	(??_LcGotoXY+1)^0,c
  7753  001742  0E40               	movlw	64
  7754  001744  265E               	addwf	??_LcGotoXY^0,f,c
  7755  001746  0E00               	movlw	0
  7756  001748  225F               	addwfc	(??_LcGotoXY+1)^0,f,c
  7757  00174A  505E               	movf	??_LcGotoXY^0,w,c
  7758  00174C  2662               	addwf	LcGotoXY@Fisics^0,f,c
  7759  00174E  505F               	movf	(??_LcGotoXY+1)^0,w,c
  7760  001750                     L13:
  7761  001750  2263               	addwfc	(LcGotoXY@Fisics+1)^0,f,c
  7762                           
  7763                           ;LcTLCD.c: 131:    break;
  7764  001752  D011               	goto	l4208
  7765  001754                     l827:
  7766                           
  7767                           ;LcTLCD.c: 134:    Fisics = Column; break;
  7768  001754  C064  F062         	movff	LcGotoXY@Column,LcGotoXY@Fisics
  7769  001758  6A63               	clrf	(LcGotoXY@Fisics+1)^0,c
  7770  00175A  D00D               	goto	l4208
  7771  00175C                     l4206:
  7772  00175C  502F               	movf	_Rows^0,w,c
  7773  00175E  6E5E               	movwf	??_LcGotoXY^0,c
  7774  001760  6A5F               	clrf	(??_LcGotoXY+1)^0,c
  7775                           
  7776                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7777                           ; Switch size 1, requested type "space"
  7778                           ; Number of cases is 1, Range of values is 0 to 0
  7779                           ; switch strategies available:
  7780                           ; Name         Instructions Cycles
  7781                           ; simple_byte            4     3 (average)
  7782                           ;	Chosen strategy is simple_byte
  7783  001762  505F               	movf	(??_LcGotoXY+1)^0,w,c
  7784  001764  E1F7               	bnz	l827
  7785                           
  7786                           ; Switch size 1, requested type "space"
  7787                           ; Number of cases is 3, Range of values is 1 to 4
  7788                           ; switch strategies available:
  7789                           ; Name         Instructions Cycles
  7790                           ; simple_byte           10     6 (average)
  7791                           ;	Chosen strategy is simple_byte
  7792  001766  505E               	movf	??_LcGotoXY^0,w,c
  7793  001768  0A01               	xorlw	1	; case 1
  7794  00176A  E0F4               	bz	l827
  7795  00176C  0A03               	xorlw	3	; case 2
  7796  00176E  E0C6               	bz	l4186
  7797  001770  0A06               	xorlw	6	; case 4
  7798  001772  E0D3               	bz	l820
  7799  001774  D7EF               	goto	l827
  7800  001776                     l4208:
  7801                           
  7802                           ;LcTLCD.c: 137:  WaitForBusy();
  7803  001776  EC76  F00E         	call	_WaitForBusy	;wreg free
  7804                           
  7805                           ;LcTLCD.c: 138:  CantaIR(0x80 | Fisics);
  7806  00177A  5062               	movf	LcGotoXY@Fisics^0,w,c
  7807  00177C  0980               	iorlw	128
  7808  00177E  ECAA  F00F         	call	_CantaIR
  7809                           
  7810                           ;LcTLCD.c: 140:  RowAct = Row;
  7811  001782  C05D  F02D         	movff	LcGotoXY@Row,_RowAct
  7812                           
  7813                           ;LcTLCD.c: 141:  ColumnAct = Column;
  7814  001786  C064  F02C         	movff	LcGotoXY@Column,_ColumnAct
  7815  00178A  0012               	return		;funcret
  7816  00178C                     __end_of_LcGotoXY:
  7817                           	callstack 0
  7818                           
  7819 ;; *************** function _CantaData *****************
  7820 ;; Defined at:
  7821 ;;		line 239 in file "LcTLCD.c"
  7822 ;; Parameters:    Size  Location     Type
  7823 ;;  Data            1    wreg     unsigned char 
  7824 ;; Auto vars:     Size  Location     Type
  7825 ;;  Data            1    7[COMRAM] unsigned char 
  7826 ;; Return value:  Size  Location     Type
  7827 ;;                  1    wreg      void 
  7828 ;; Registers used:
  7829 ;;		wreg, status,2, status,0, cstack
  7830 ;; Tracked objects:
  7831 ;;		On entry : 0/0
  7832 ;;		On exit  : 0/0
  7833 ;;		Unchanged: 0/0
  7834 ;; Data sizes:     COMRAM   BANK0   BANK1
  7835 ;;      Params:         0       0       0
  7836 ;;      Locals:         1       0       0
  7837 ;;      Temps:          0       0       0
  7838 ;;      Totals:         1       0       0
  7839 ;;Total ram usage:        1 bytes
  7840 ;; Hardware stack levels used: 1
  7841 ;; Hardware stack levels required when called: 3
  7842 ;; This function calls:
  7843 ;;		_CantaPartAlta
  7844 ;;		_CantaPartBaixa
  7845 ;; This function is called by:
  7846 ;;		_LcPutChar
  7847 ;; This function uses a non-reentrant model
  7848 ;;
  7849                           
  7850                           	psect	text41
  7851  001DA4                     __ptext41:
  7852                           	callstack 0
  7853  001DA4                     _CantaData:
  7854                           	callstack 24
  7855                           
  7856                           ;incstack = 0
  7857                           ;CantaData@Data stored from wreg
  7858  001DA4  6E57               	movwf	CantaData@Data^0,c
  7859                           
  7860                           ;LcTLCD.c: 240:  (TRISBbits.TRISB0 = TRISDbits.TRISD2 = TRISDbits.TRISD1 = TRISDbits.TRI
      +                          SD0 = 0);
  7861  001DA6  9095               	bcf	149,0,c	;volatile
  7862  001DA8  9295               	bcf	149,1,c	;volatile
  7863  001DAA  9495               	bcf	149,2,c	;volatile
  7864  001DAC  9093               	bcf	147,0,c	;volatile
  7865                           
  7866                           ;LcTLCD.c: 241:  (LATCbits.LATC0 = 1);
  7867  001DAE  808B               	bsf	139,0,c	;volatile
  7868                           
  7869                           ;LcTLCD.c: 242:  (LATCbits.LATC1 = 0);
  7870  001DB0  928B               	bcf	139,1,c	;volatile
  7871                           
  7872                           ;LcTLCD.c: 243:  (LATCbits.LATC2 = 1);
  7873  001DB2  848B               	bsf	139,2,c	;volatile
  7874                           
  7875                           ;LcTLCD.c: 244:  CantaPartAlta(Data);
  7876  001DB4  5057               	movf	CantaData@Data^0,w,c
  7877  001DB6  ECD6  F00D         	call	_CantaPartAlta
  7878                           
  7879                           ;LcTLCD.c: 245:  (LATCbits.LATC2 = 1);
  7880                           
  7881                           ;LcTLCD.c: 246:  (LATCbits.LATC2 = 0);
  7882                           
  7883                           ;LcTLCD.c: 247:  (LATCbits.LATC2 = 0);
  7884                           
  7885                           ;LcTLCD.c: 248:  (LATCbits.LATC2 = 1);
  7886  001DBA  D80B               	call	PL82	;call to abstracted procedure
  7887                           
  7888                           ;LcTLCD.c: 249:  CantaPartBaixa(Data);
  7889  001DBC  5057               	movf	CantaData@Data^0,w,c
  7890  001DBE  ECA5  F00D         	call	_CantaPartBaixa
  7891                           
  7892                           ;LcTLCD.c: 250:  (LATCbits.LATC2 = 1);
  7893                           
  7894                           ;LcTLCD.c: 251:  (LATCbits.LATC2 = 0);
  7895                           
  7896                           ;LcTLCD.c: 252:  (TRISBbits.TRISB0 = TRISDbits.TRISD2 = TRISDbits.TRISD1 = TRISDbits.TRI
      +                          SD0 = 1);
  7897  001DC2  D000               	goto	PL50	;call to abstracted procedure
  7898  001DC4                     __end_of_CantaData:
  7899                           	callstack 0
  7900  001DC4                     PL50:
  7901                           	callstack 23
  7902  001DC4  848B               	bsf	139,2,c	;volatile
  7903  001DC6  948B               	bcf	139,2,c	;volatile
  7904  001DC8  8095               	bsf	149,0,c	;volatile
  7905  001DCA  8295               	bsf	149,1,c	;volatile
  7906  001DCC  8495               	bsf	149,2,c	;volatile
  7907  001DCE  8093               	bsf	147,0,c	;volatile
  7908  001DD0  0012               	return		;funcret
  7909  001DD2                     __end_ofPL50:
  7910                           	callstack 0
  7911  001DD2                     PL82:
  7912                           	callstack 23
  7913  001DD2  848B               	bsf	139,2,c	;volatile
  7914  001DD4  948B               	bcf	139,2,c	;volatile
  7915  001DD6  948B               	bcf	139,2,c	;volatile
  7916  001DD8  848B               	bsf	139,2,c	;volatile
  7917  001DDA  0012               	return	
  7918  001DDC                     __end_ofPL82:
  7919                           	callstack 0
  7920                           
  7921 ;; *************** function _LcCursorOn *****************
  7922 ;; Defined at:
  7923 ;;		line 103 in file "LcTLCD.c"
  7924 ;; Parameters:    Size  Location     Type
  7925 ;;		None
  7926 ;; Auto vars:     Size  Location     Type
  7927 ;;		None
  7928 ;; Return value:  Size  Location     Type
  7929 ;;                  1    wreg      void 
  7930 ;; Registers used:
  7931 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7932 ;; Tracked objects:
  7933 ;;		On entry : 0/0
  7934 ;;		On exit  : 0/0
  7935 ;;		Unchanged: 0/0
  7936 ;; Data sizes:     COMRAM   BANK0   BANK1
  7937 ;;      Params:         0       0       0
  7938 ;;      Locals:         0       0       0
  7939 ;;      Temps:          0       0       0
  7940 ;;      Totals:         0       0       0
  7941 ;;Total ram usage:        0 bytes
  7942 ;; Hardware stack levels used: 1
  7943 ;; Hardware stack levels required when called: 4
  7944 ;; This function calls:
  7945 ;;		_CantaIR
  7946 ;;		_WaitForBusy
  7947 ;; This function is called by:
  7948 ;;		_menuMotor
  7949 ;; This function uses a non-reentrant model
  7950 ;;
  7951                           
  7952                           	psect	text42
  7953  000114                     __ptext42:
  7954                           	callstack 0
  7955  000114                     _LcCursorOn:
  7956                           	callstack 25
  7957                           
  7958                           ;LcTLCD.c: 106:  WaitForBusy();
  7959                           
  7960                           ;incstack = 0
  7961  000114  EC76  F00E         	call	_WaitForBusy	;wreg free
  7962                           
  7963                           ;LcTLCD.c: 107:  CantaIR(0x08 | 0x04 | 0x02);
  7964  000118  0E0E               	movlw	14
  7965  00011A  EFAA  F00F         	goto	_CantaIR
  7966  00011E                     __end_of_LcCursorOn:
  7967                           	callstack 0
  7968                           
  7969 ;; *************** function _LcCursorOff *****************
  7970 ;; Defined at:
  7971 ;;		line 110 in file "LcTLCD.c"
  7972 ;; Parameters:    Size  Location     Type
  7973 ;;		None
  7974 ;; Auto vars:     Size  Location     Type
  7975 ;;		None
  7976 ;; Return value:  Size  Location     Type
  7977 ;;                  1    wreg      void 
  7978 ;; Registers used:
  7979 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7980 ;; Tracked objects:
  7981 ;;		On entry : 0/0
  7982 ;;		On exit  : 0/0
  7983 ;;		Unchanged: 0/0
  7984 ;; Data sizes:     COMRAM   BANK0   BANK1
  7985 ;;      Params:         0       0       0
  7986 ;;      Locals:         0       0       0
  7987 ;;      Temps:          0       0       0
  7988 ;;      Totals:         0       0       0
  7989 ;;Total ram usage:        0 bytes
  7990 ;; Hardware stack levels used: 1
  7991 ;; Hardware stack levels required when called: 4
  7992 ;; This function calls:
  7993 ;;		_CantaIR
  7994 ;;		_WaitForBusy
  7995 ;; This function is called by:
  7996 ;;		_menuMotor
  7997 ;; This function uses a non-reentrant model
  7998 ;;
  7999                           
  8000                           	psect	text43
  8001  00011E                     __ptext43:
  8002                           	callstack 0
  8003  00011E                     _LcCursorOff:
  8004                           	callstack 25
  8005                           
  8006                           ;LcTLCD.c: 113:  WaitForBusy();
  8007                           
  8008                           ;incstack = 0
  8009  00011E  EC76  F00E         	call	_WaitForBusy	;wreg free
  8010                           
  8011                           ;LcTLCD.c: 114:  CantaIR(0x08 | 0x04);
  8012  000122  0E0C               	movlw	12
  8013  000124  EFAA  F00F         	goto	_CantaIR
  8014  000128                     __end_of_LcCursorOff:
  8015                           	callstack 0
  8016                           
  8017 ;; *************** function _LcClear *****************
  8018 ;; Defined at:
  8019 ;;		line 96 in file "LcTLCD.c"
  8020 ;; Parameters:    Size  Location     Type
  8021 ;;		None
  8022 ;; Auto vars:     Size  Location     Type
  8023 ;;		None
  8024 ;; Return value:  Size  Location     Type
  8025 ;;                  1    wreg      void 
  8026 ;; Registers used:
  8027 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8028 ;; Tracked objects:
  8029 ;;		On entry : 0/0
  8030 ;;		On exit  : 0/0
  8031 ;;		Unchanged: 0/0
  8032 ;; Data sizes:     COMRAM   BANK0   BANK1
  8033 ;;      Params:         0       0       0
  8034 ;;      Locals:         0       0       0
  8035 ;;      Temps:          0       0       0
  8036 ;;      Totals:         0       0       0
  8037 ;;Total ram usage:        0 bytes
  8038 ;; Hardware stack levels used: 1
  8039 ;; Hardware stack levels required when called: 4
  8040 ;; This function calls:
  8041 ;;		_CantaIR
  8042 ;;		_Espera
  8043 ;;		_WaitForBusy
  8044 ;; This function is called by:
  8045 ;;		_main
  8046 ;;		_menuMotor
  8047 ;; This function uses a non-reentrant model
  8048 ;;
  8049                           
  8050                           	psect	text44
  8051  000062                     __ptext44:
  8052                           	callstack 0
  8053  000062                     _LcClear:
  8054                           	callstack 25
  8055                           
  8056                           ;LcTLCD.c: 99:  WaitForBusy(); CantaIR(0x01);
  8057                           
  8058                           ;incstack = 0
  8059  000062  EC76  F00E         	call	_WaitForBusy	;wreg free
  8060  000066  0E01               	movlw	1
  8061  000068  ECAA  F00F         	call	_CantaIR
  8062                           
  8063                           ;LcTLCD.c: 100:  Espera(Timer, 3);
  8064  00006C  EC77  F00B         	call	PL28	;call to abstracted procedure
  8065  000070  0E03               	movlw	3
  8066  000072  6E5E               	movwf	Espera@ms^0,c
  8067  000074  EFEB  F00F         	goto	_Espera	;wreg free
  8068  000078                     __end_of_LcClear:
  8069                           	callstack 0
  8070                           
  8071 ;; *************** function _KeyResetValue *****************
  8072 ;; Defined at:
  8073 ;;		line 112 in file "Keypad.c"
  8074 ;; Parameters:    Size  Location     Type
  8075 ;;		None
  8076 ;; Auto vars:     Size  Location     Type
  8077 ;;		None
  8078 ;; Return value:  Size  Location     Type
  8079 ;;                  1    wreg      void 
  8080 ;; Registers used:
  8081 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8082 ;; Tracked objects:
  8083 ;;		On entry : 0/0
  8084 ;;		On exit  : 0/0
  8085 ;;		Unchanged: 0/0
  8086 ;; Data sizes:     COMRAM   BANK0   BANK1
  8087 ;;      Params:         0       0       0
  8088 ;;      Locals:         0       0       0
  8089 ;;      Temps:          0       0       0
  8090 ;;      Totals:         0       0       0
  8091 ;;Total ram usage:        0 bytes
  8092 ;; Hardware stack levels used: 1
  8093 ;; Hardware stack levels required when called: 3
  8094 ;; This function calls:
  8095 ;;		_TiResetTics
  8096 ;; This function is called by:
  8097 ;;		_menuMotor
  8098 ;;		_motorKey
  8099 ;; This function uses a non-reentrant model
  8100 ;;
  8101                           
  8102                           	psect	text45
  8103  0000DE                     __ptext45:
  8104                           	callstack 0
  8105  0000DE                     _KeyResetValue:
  8106                           	callstack 26
  8107                           
  8108                           ;Keypad.c: 113:     TiResetTics(timerKeypad);
  8109                           
  8110                           ;incstack = 0
  8111  0000DE  5038               	movf	_timerKeypad^0,w,c
  8112  0000E0  EC9C  F00F         	call	_TiResetTics
  8113                           
  8114                           ;Keypad.c: 114:     SMS = 0;
  8115  0000E4  6A30               	clrf	_SMS^0,c
  8116                           
  8117                           ;Keypad.c: 115:     press=0;
  8118  0000E6  6A34               	clrf	_press^0,c
  8119                           
  8120                           ;Keypad.c: 116:     rotating = 0;
  8121  0000E8  6A33               	clrf	_rotating^0,c
  8122                           
  8123                           ;Keypad.c: 117:     valueOld = 10;
  8124  0000EA  0E0A               	movlw	10
  8125  0000EC  6E31               	movwf	_valueOld^0,c
  8126  0000EE  0C0A               	retlw	10	;funcret
  8127  0000F0                     __end_of_KeyResetValue:
  8128                           	callstack 0
  8129                           
  8130 ;; *************** function _KeyGetValue *****************
  8131 ;; Defined at:
  8132 ;;		line 119 in file "Keypad.c"
  8133 ;; Parameters:    Size  Location     Type
  8134 ;;		None
  8135 ;; Auto vars:     Size  Location     Type
  8136 ;;		None
  8137 ;; Return value:  Size  Location     Type
  8138 ;;                  1    wreg      unsigned char 
  8139 ;; Registers used:
  8140 ;;		wreg, status,2
  8141 ;; Tracked objects:
  8142 ;;		On entry : 0/0
  8143 ;;		On exit  : 0/0
  8144 ;;		Unchanged: 0/0
  8145 ;; Data sizes:     COMRAM   BANK0   BANK1
  8146 ;;      Params:         0       0       0
  8147 ;;      Locals:         0       0       0
  8148 ;;      Temps:          0       0       0
  8149 ;;      Totals:         0       0       0
  8150 ;;Total ram usage:        0 bytes
  8151 ;; Hardware stack levels used: 1
  8152 ;; Hardware stack levels required when called: 2
  8153 ;; This function calls:
  8154 ;;		Nothing
  8155 ;; This function is called by:
  8156 ;;		_menuMotor
  8157 ;; This function uses a non-reentrant model
  8158 ;;
  8159                           
  8160                           	psect	text46
  8161  000196                     __ptext46:
  8162                           	callstack 0
  8163  000196                     _KeyGetValue:
  8164                           	callstack 27
  8165                           
  8166                           ;Keypad.c: 120:     return value;
  8167                           
  8168                           ;incstack = 0
  8169  000196  5032               	movf	_value^0,w,c
  8170  000198  0012               	return		;funcret
  8171  00019A                     __end_of_KeyGetValue:
  8172                           	callstack 0
  8173                           
  8174 ;; *************** function _KeyGetSMS *****************
  8175 ;; Defined at:
  8176 ;;		line 122 in file "Keypad.c"
  8177 ;; Parameters:    Size  Location     Type
  8178 ;;		None
  8179 ;; Auto vars:     Size  Location     Type
  8180 ;;  auxSMS          1    5[COMRAM] unsigned char 
  8181 ;; Return value:  Size  Location     Type
  8182 ;;                  1    wreg      unsigned char 
  8183 ;; Registers used:
  8184 ;;		wreg, status,2
  8185 ;; Tracked objects:
  8186 ;;		On entry : 0/0
  8187 ;;		On exit  : 0/0
  8188 ;;		Unchanged: 0/0
  8189 ;; Data sizes:     COMRAM   BANK0   BANK1
  8190 ;;      Params:         0       0       0
  8191 ;;      Locals:         1       0       0
  8192 ;;      Temps:          0       0       0
  8193 ;;      Totals:         1       0       0
  8194 ;;Total ram usage:        1 bytes
  8195 ;; Hardware stack levels used: 1
  8196 ;; Hardware stack levels required when called: 2
  8197 ;; This function calls:
  8198 ;;		Nothing
  8199 ;; This function is called by:
  8200 ;;		_menuMotor
  8201 ;; This function uses a non-reentrant model
  8202 ;;
  8203                           
  8204                           	psect	text47
  8205  000128                     __ptext47:
  8206                           	callstack 0
  8207  000128                     _KeyGetSMS:
  8208                           	callstack 27
  8209                           
  8210                           ;Keypad.c: 123:     char auxSMS = SMS;
  8211                           
  8212                           ;incstack = 0
  8213  000128  C030  F055         	movff	_SMS,KeyGetSMS@auxSMS
  8214                           
  8215                           ;Keypad.c: 124:     SMS = 0;
  8216  00012C  6A30               	clrf	_SMS^0,c
  8217                           
  8218                           ;Keypad.c: 125:     return auxSMS;
  8219  00012E  5055               	movf	KeyGetSMS@auxSMS^0,w,c
  8220  000130  0012               	return		;funcret
  8221  000132                     __end_of_KeyGetSMS:
  8222                           	callstack 0
  8223                           
  8224 ;; *************** function _KeyGetPress *****************
  8225 ;; Defined at:
  8226 ;;		line 135 in file "Keypad.c"
  8227 ;; Parameters:    Size  Location     Type
  8228 ;;		None
  8229 ;; Auto vars:     Size  Location     Type
  8230 ;;		None
  8231 ;; Return value:  Size  Location     Type
  8232 ;;                  1    wreg      unsigned char 
  8233 ;; Registers used:
  8234 ;;		wreg, status,2, status,0
  8235 ;; Tracked objects:
  8236 ;;		On entry : 0/0
  8237 ;;		On exit  : 0/0
  8238 ;;		Unchanged: 0/0
  8239 ;; Data sizes:     COMRAM   BANK0   BANK1
  8240 ;;      Params:         0       0       0
  8241 ;;      Locals:         0       0       0
  8242 ;;      Temps:          0       0       0
  8243 ;;      Totals:         0       0       0
  8244 ;;Total ram usage:        0 bytes
  8245 ;; Hardware stack levels used: 1
  8246 ;; Hardware stack levels required when called: 2
  8247 ;; This function calls:
  8248 ;;		Nothing
  8249 ;; This function is called by:
  8250 ;;		_menuMotor
  8251 ;; This function uses a non-reentrant model
  8252 ;;
  8253                           
  8254                           	psect	text48
  8255  00016C                     __ptext48:
  8256                           	callstack 0
  8257  00016C                     _KeyGetPress:
  8258                           	callstack 27
  8259                           
  8260                           ;Keypad.c: 136:     return (press + rotating);
  8261                           
  8262                           ;incstack = 0
  8263  00016C  5034               	movf	_press^0,w,c
  8264  00016E  2433               	addwf	_rotating^0,w,c
  8265  000170  0012               	return		;funcret
  8266  000172                     __end_of_KeyGetPress:
  8267                           	callstack 0
  8268                           
  8269 ;; *************** function _KeyGetNumber *****************
  8270 ;; Defined at:
  8271 ;;		line 130 in file "Keypad.c"
  8272 ;; Parameters:    Size  Location     Type
  8273 ;;		None
  8274 ;; Auto vars:     Size  Location     Type
  8275 ;;  auxValue        1    5[COMRAM] unsigned char 
  8276 ;; Return value:  Size  Location     Type
  8277 ;;                  1    wreg      unsigned char 
  8278 ;; Registers used:
  8279 ;;		wreg, status,2
  8280 ;; Tracked objects:
  8281 ;;		On entry : 0/0
  8282 ;;		On exit  : 0/0
  8283 ;;		Unchanged: 0/0
  8284 ;; Data sizes:     COMRAM   BANK0   BANK1
  8285 ;;      Params:         0       0       0
  8286 ;;      Locals:         1       0       0
  8287 ;;      Temps:          0       0       0
  8288 ;;      Totals:         1       0       0
  8289 ;;Total ram usage:        1 bytes
  8290 ;; Hardware stack levels used: 1
  8291 ;; Hardware stack levels required when called: 2
  8292 ;; This function calls:
  8293 ;;		Nothing
  8294 ;; This function is called by:
  8295 ;;		_menuMotor
  8296 ;; This function uses a non-reentrant model
  8297 ;;
  8298                           
  8299                           	psect	text49
  8300  000132                     __ptext49:
  8301                           	callstack 0
  8302  000132                     _KeyGetNumber:
  8303                           	callstack 27
  8304                           
  8305                           ;Keypad.c: 131:     char auxValue = value;
  8306                           
  8307                           ;incstack = 0
  8308  000132  C032  F055         	movff	_value,KeyGetNumber@auxValue
  8309                           
  8310                           ;Keypad.c: 132:     value = 0;
  8311  000136  6A32               	clrf	_value^0,c
  8312                           
  8313                           ;Keypad.c: 133:     return auxValue;
  8314  000138  5055               	movf	KeyGetNumber@auxValue^0,w,c
  8315  00013A  0012               	return		;funcret
  8316  00013C                     __end_of_KeyGetNumber:
  8317                           	callstack 0
  8318                           
  8319 ;; *************** function _initTX *****************
  8320 ;; Defined at:
  8321 ;;		line 15 in file "TX.c"
  8322 ;; Parameters:    Size  Location     Type
  8323 ;;		None
  8324 ;; Auto vars:     Size  Location     Type
  8325 ;;		None
  8326 ;; Return value:  Size  Location     Type
  8327 ;;                  1    wreg      void 
  8328 ;; Registers used:
  8329 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8330 ;; Tracked objects:
  8331 ;;		On entry : 0/0
  8332 ;;		On exit  : 0/0
  8333 ;;		Unchanged: 0/0
  8334 ;; Data sizes:     COMRAM   BANK0   BANK1
  8335 ;;      Params:         0       0       0
  8336 ;;      Locals:         0       0       0
  8337 ;;      Temps:          0       0       0
  8338 ;;      Totals:         0       0       0
  8339 ;;Total ram usage:        0 bytes
  8340 ;; Hardware stack levels used: 1
  8341 ;; Hardware stack levels required when called: 3
  8342 ;; This function calls:
  8343 ;;		_TiGetTimer
  8344 ;;		_TiResetTics
  8345 ;; This function is called by:
  8346 ;;		_main
  8347 ;; This function uses a non-reentrant model
  8348 ;;
  8349                           
  8350                           	psect	text50
  8351  001ED8                     __ptext50:
  8352                           	callstack 0
  8353  001ED8                     _initTX:
  8354                           	callstack 27
  8355                           
  8356                           ;TX.c: 16:     timerRX = TiGetTimer();
  8357                           
  8358                           ;incstack = 0
  8359  001ED8  EC1F  F00F         	call	_TiGetTimer	;wreg free
  8360  001EDC  6E19               	movwf	_timerRX^0,c
  8361                           
  8362                           ;TX.c: 17:     timerTX = TiGetTimer();
  8363  001EDE  EC1F  F00F         	call	_TiGetTimer	;wreg free
  8364  001EE2  6E1A               	movwf	_timerTX^0,c
  8365                           
  8366                           ;TX.c: 18:     TiResetTics(timerRX);
  8367  001EE4  5019               	movf	_timerRX^0,w,c
  8368  001EE6  EC9C  F00F         	call	_TiResetTics
  8369                           
  8370                           ;TX.c: 19:     TiResetTics(timerTX);
  8371  001EEA  501A               	movf	_timerTX^0,w,c
  8372  001EEC  EC9C  F00F         	call	_TiResetTics
  8373                           
  8374                           ;TX.c: 20:     TRISCbits.TRISC5 = 0;
  8375  001EF0  9A94               	bcf	148,5,c	;volatile
  8376                           
  8377                           ;TX.c: 21:     TRISCbits.TRISC4 = 1;
  8378  001EF2  8894               	bsf	148,4,c	;volatile
  8379                           
  8380                           ;TX.c: 22:     stateTX = 0;
  8381  001EF4  6A18               	clrf	_stateTX^0,c
  8382                           
  8383                           ;TX.c: 23:     stateRX = 0;
  8384  001EF6  6A13               	clrf	_stateRX^0,c
  8385  001EF8  0012               	return		;funcret
  8386  001EFA                     __end_of_initTX:
  8387                           	callstack 0
  8388                           
  8389 ;; *************** function _initSIO *****************
  8390 ;; Defined at:
  8391 ;;		line 4 in file "SIO.c"
  8392 ;; Parameters:    Size  Location     Type
  8393 ;;		None
  8394 ;; Auto vars:     Size  Location     Type
  8395 ;;		None
  8396 ;; Return value:  Size  Location     Type
  8397 ;;                  1    wreg      void 
  8398 ;; Registers used:
  8399 ;;		wreg, status,2
  8400 ;; Tracked objects:
  8401 ;;		On entry : 0/0
  8402 ;;		On exit  : 0/0
  8403 ;;		Unchanged: 0/0
  8404 ;; Data sizes:     COMRAM   BANK0   BANK1
  8405 ;;      Params:         0       0       0
  8406 ;;      Locals:         0       0       0
  8407 ;;      Temps:          0       0       0
  8408 ;;      Totals:         0       0       0
  8409 ;;Total ram usage:        0 bytes
  8410 ;; Hardware stack levels used: 1
  8411 ;; Hardware stack levels required when called: 2
  8412 ;; This function calls:
  8413 ;;		Nothing
  8414 ;; This function is called by:
  8415 ;;		_main
  8416 ;; This function uses a non-reentrant model
  8417 ;;
  8418                           
  8419                           	psect	text51
  8420  001FBE                     __ptext51:
  8421                           	callstack 0
  8422  001FBE                     _initSIO:
  8423                           	callstack 28
  8424                           
  8425                           ;SIO.c: 5:  TXSTA = 0x20;
  8426                           
  8427                           ;incstack = 0
  8428  001FBE  0E20               	movlw	32
  8429  001FC0  6EAC               	movwf	172,c	;volatile
  8430                           
  8431                           ;SIO.c: 6:  RCSTA = 0x90;
  8432  001FC2  0E90               	movlw	144
  8433  001FC4  6EAB               	movwf	171,c	;volatile
  8434                           
  8435                           ;SIO.c: 7:  BAUDCONbits.BRG16 = 1;
  8436  001FC6  86B8               	bsf	184,3,c	;volatile
  8437                           
  8438                           ;SIO.c: 8:     SPBRGH = 0x01;
  8439  001FC8  0E01               	movlw	1
  8440  001FCA  6EB0               	movwf	176,c	;volatile
  8441                           
  8442                           ;SIO.c: 9:  SPBRG = 0x03;
  8443  001FCC  0E03               	movlw	3
  8444  001FCE  6EAF               	movwf	175,c	;volatile
  8445                           
  8446                           ;SIO.c: 10:     TRISCbits.TRISC6 = 1;
  8447  001FD0  8C94               	bsf	148,6,c	;volatile
  8448                           
  8449                           ;SIO.c: 11:     TRISCbits.TRISC7 = 1;
  8450  001FD2  8E94               	bsf	148,7,c	;volatile
  8451  001FD4  0C03               	retlw	3	;funcret
  8452  001FD6                     __end_of_initSIO:
  8453                           	callstack 0
  8454                           
  8455 ;; *************** function _initMusic *****************
  8456 ;; Defined at:
  8457 ;;		line 11 in file "Music.c"
  8458 ;; Parameters:    Size  Location     Type
  8459 ;;		None
  8460 ;; Auto vars:     Size  Location     Type
  8461 ;;		None
  8462 ;; Return value:  Size  Location     Type
  8463 ;;                  1    wreg      void 
  8464 ;; Registers used:
  8465 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8466 ;; Tracked objects:
  8467 ;;		On entry : 0/0
  8468 ;;		On exit  : 0/0
  8469 ;;		Unchanged: 0/0
  8470 ;; Data sizes:     COMRAM   BANK0   BANK1
  8471 ;;      Params:         0       0       0
  8472 ;;      Locals:         0       0       0
  8473 ;;      Temps:          0       0       0
  8474 ;;      Totals:         0       0       0
  8475 ;;Total ram usage:        0 bytes
  8476 ;; Hardware stack levels used: 1
  8477 ;; Hardware stack levels required when called: 3
  8478 ;; This function calls:
  8479 ;;		_TiGetTimer
  8480 ;; This function is called by:
  8481 ;;		_main
  8482 ;; This function uses a non-reentrant model
  8483 ;;
  8484                           
  8485                           	psect	text52
  8486  001F8A                     __ptext52:
  8487                           	callstack 0
  8488  001F8A                     _initMusic:
  8489                           	callstack 27
  8490                           
  8491                           ;Music.c: 12:     TRISDbits.TRISD3 = 0;
  8492                           
  8493                           ;incstack = 0
  8494  001F8A  9695               	bcf	149,3,c	;volatile
  8495                           
  8496                           ;Music.c: 13:     timerMusic = TiGetTimer();
  8497  001F8C  EC1F  F00F         	call	_TiGetTimer	;wreg free
  8498  001F90  6E0B               	movwf	_timerMusic^0,c
  8499  001F92  6A0C               	clrf	(_timerMusic+1)^0,c
  8500                           
  8501                           ;Music.c: 14:     timerNote = TiGetTimer();
  8502  001F94  EC1F  F00F         	call	_TiGetTimer	;wreg free
  8503  001F98  6E1E               	movwf	_timerNote^0,c
  8504                           
  8505                           ;Music.c: 15:     musicState = 1;
  8506  001F9A  0E01               	movlw	1
  8507  001F9C  6E1D               	movwf	_musicState^0,c
  8508                           
  8509                           ;Music.c: 16:     note = 1;
  8510  001F9E  6E1C               	movwf	_note^0,c
  8511                           
  8512                           ;Music.c: 17:     pointer=0;
  8513  001FA0  6A1B               	clrf	_pointer@Music$F1878^0,c
  8514  001FA2  0012               	return		;funcret
  8515  001FA4                     __end_of_initMusic:
  8516                           	callstack 0
  8517                           
  8518 ;; *************** function _initMenu *****************
  8519 ;; Defined at:
  8520 ;;		line 27 in file "Menu.c"
  8521 ;; Parameters:    Size  Location     Type
  8522 ;;		None
  8523 ;; Auto vars:     Size  Location     Type
  8524 ;;		None
  8525 ;; Return value:  Size  Location     Type
  8526 ;;                  1    wreg      void 
  8527 ;; Registers used:
  8528 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8529 ;; Tracked objects:
  8530 ;;		On entry : 0/0
  8531 ;;		On exit  : 0/0
  8532 ;;		Unchanged: 0/0
  8533 ;; Data sizes:     COMRAM   BANK0   BANK1
  8534 ;;      Params:         0       0       0
  8535 ;;      Locals:         0       0       0
  8536 ;;      Temps:          0       0       0
  8537 ;;      Totals:         0       0       0
  8538 ;;Total ram usage:        0 bytes
  8539 ;; Hardware stack levels used: 1
  8540 ;; Hardware stack levels required when called: 3
  8541 ;; This function calls:
  8542 ;;		_TiGetTimer
  8543 ;;		_TiResetTics
  8544 ;;		_readEeprom
  8545 ;; This function is called by:
  8546 ;;		_main
  8547 ;; This function uses a non-reentrant model
  8548 ;;
  8549                           
  8550                           	psect	text53
  8551  001EFA                     __ptext53:
  8552                           	callstack 0
  8553  001EFA                     _initMenu:
  8554                           	callstack 27
  8555                           
  8556                           ;Menu.c: 28:     timerMenu = TiGetTimer();
  8557                           
  8558                           ;incstack = 0
  8559  001EFA  EC1F  F00F         	call	_TiGetTimer	;wreg free
  8560  001EFE  6E41               	movwf	_timerMenu^0,c
  8561                           
  8562                           ;Menu.c: 29:  menuState = 100;
  8563  001F00  0E64               	movlw	100
  8564  001F02  6E4D               	movwf	_menuState^0,c
  8565                           
  8566                           ;Menu.c: 30:  minutes=30;
  8567                           
  8568                           ;Menu.c: 31:  seconds=0;
  8569                           
  8570                           ;Menu.c: 33:     maxScore = 0;
  8571  001F04  ECFF  F008         	call	PL66	;call to abstracted procedure
  8572                           
  8573                           ;Menu.c: 34:     TiResetTics(timerMenu);
  8574  001F08  5041               	movf	_timerMenu^0,w,c
  8575  001F0A  EC9C  F00F         	call	_TiResetTics
  8576                           
  8577                           ;Menu.c: 35:     numUsers = 0;
  8578  001F0E  6A4F               	clrf	_numUsers@Data$F563^0,c
  8579                           
  8580                           ;Menu.c: 36:     numScores = 0;
  8581  001F10  6A4E               	clrf	_numScores@Data$F564^0,c
  8582                           
  8583                           ;Menu.c: 37:     readEeprom(0);
  8584  001F12  0E00               	movlw	0
  8585  001F14  EC65  F000         	call	_readEeprom
  8586                           
  8587                           ;Menu.c: 38:     auxPU = 0;
  8588  001F18  6A48               	clrf	_auxPU^0,c
  8589  001F1A  0012               	return		;funcret
  8590  001F1C                     __end_of_initMenu:
  8591                           	callstack 0
  8592                           
  8593 ;; *************** function _readEeprom *****************
  8594 ;; Defined at:
  8595 ;;		line 227 in file "EEPROM.c"
  8596 ;; Parameters:    Size  Location     Type
  8597 ;;  num             1    wreg     unsigned char 
  8598 ;; Auto vars:     Size  Location     Type
  8599 ;;  num             1    5[COMRAM] unsigned char 
  8600 ;; Return value:  Size  Location     Type
  8601 ;;                  1    wreg      void 
  8602 ;; Registers used:
  8603 ;;		wreg, status,2
  8604 ;; Tracked objects:
  8605 ;;		On entry : 0/0
  8606 ;;		On exit  : 0/0
  8607 ;;		Unchanged: 0/0
  8608 ;; Data sizes:     COMRAM   BANK0   BANK1
  8609 ;;      Params:         0       0       0
  8610 ;;      Locals:         1       0       0
  8611 ;;      Temps:          0       0       0
  8612 ;;      Totals:         1       0       0
  8613 ;;Total ram usage:        1 bytes
  8614 ;; Hardware stack levels used: 1
  8615 ;; Hardware stack levels required when called: 2
  8616 ;; This function calls:
  8617 ;;		Nothing
  8618 ;; This function is called by:
  8619 ;;		_initMenu
  8620 ;;		_menuMotor
  8621 ;; This function uses a non-reentrant model
  8622 ;;
  8623                           
  8624                           	psect	text54
  8625  0000CA                     __ptext54:
  8626                           	callstack 0
  8627  0000CA                     _readEeprom:
  8628                           	callstack 27
  8629                           
  8630                           ;incstack = 0
  8631                           ;readEeprom@num stored from wreg
  8632  0000CA  6E55               	movwf	readEeprom@num^0,c
  8633                           
  8634                           ;EEPROM.c: 228:     eepromState = 5;
  8635  0000CC  0E05               	movlw	5
  8636  0000CE  6E21               	movwf	_eepromState^0,c
  8637                           
  8638                           ;EEPROM.c: 229:     numAddress = num;
  8639  0000D0  C055  F01F         	movff	readEeprom@num,_numAddress
  8640                           
  8641                           ;EEPROM.c: 230:     pointer = 0;
  8642                           
  8643                           ;EEPROM.c: 231:     pointerEeprom = 0;
  8644                           
  8645                           ;EEPROM.c: 232:     doneCharging = 0;
  8646  0000D4  D000               	goto	PL70	;call to abstracted procedure
  8647  0000D6                     __end_of_readEeprom:
  8648                           	callstack 0
  8649  0000D6                     PL70:
  8650                           	callstack 27
  8651  0000D6  6A24               	clrf	_pointer@EEPROM$F1753^0,c
  8652  0000D8  6A23               	clrf	_pointerEeprom^0,c
  8653  0000DA  6A22               	clrf	_doneCharging^0,c
  8654  0000DC  0012               	return		;funcret
  8655  0000DE                     __end_ofPL70:
  8656                           	callstack 0
  8657                           
  8658 ;; *************** function _initKeypad *****************
  8659 ;; Defined at:
  8660 ;;		line 32 in file "Keypad.c"
  8661 ;; Parameters:    Size  Location     Type
  8662 ;;		None
  8663 ;; Auto vars:     Size  Location     Type
  8664 ;;		None
  8665 ;; Return value:  Size  Location     Type
  8666 ;;                  1    wreg      void 
  8667 ;; Registers used:
  8668 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8669 ;; Tracked objects:
  8670 ;;		On entry : 0/0
  8671 ;;		On exit  : 0/0
  8672 ;;		Unchanged: 0/0
  8673 ;; Data sizes:     COMRAM   BANK0   BANK1
  8674 ;;      Params:         0       0       0
  8675 ;;      Locals:         0       0       0
  8676 ;;      Temps:          0       0       0
  8677 ;;      Totals:         0       0       0
  8678 ;;Total ram usage:        0 bytes
  8679 ;; Hardware stack levels used: 1
  8680 ;; Hardware stack levels required when called: 3
  8681 ;; This function calls:
  8682 ;;		_TiGetTimer
  8683 ;;		_TiResetTics
  8684 ;; This function is called by:
  8685 ;;		_main
  8686 ;; This function uses a non-reentrant model
  8687 ;;
  8688                           
  8689                           	psect	text55
  8690  001E10                     __ptext55:
  8691                           	callstack 0
  8692  001E10                     _initKeypad:
  8693                           	callstack 27
  8694                           
  8695                           ;Keypad.c: 33:     (TRISDbits.TRISD7 = TRISDbits.TRISD6 = TRISDbits.TRISD5 = TRISDbits.T
      +                          RISD4 = 0);
  8696                           
  8697                           ;incstack = 0
  8698  001E10  9895               	bcf	149,4,c	;volatile
  8699  001E12  9A95               	bcf	149,5,c	;volatile
  8700  001E14  9C95               	bcf	149,6,c	;volatile
  8701  001E16  9E95               	bcf	149,7,c	;volatile
  8702                           
  8703                           ;Keypad.c: 34:     (TRISBbits.TRISB1 = TRISBbits.TRISB2 = TRISBbits.TRISB3 = 1);
  8704  001E18  8693               	bsf	147,3,c	;volatile
  8705  001E1A  8493               	bsf	147,2,c	;volatile
  8706  001E1C  8293               	bsf	147,1,c	;volatile
  8707                           
  8708                           ;Keypad.c: 35:     (LATDbits.LATD7 = LATDbits.LATD6 = LATDbits.LATD5 = LATDbits.LATD4 = 
      +                          1);
  8709  001E1E  EC9F  F00A         	call	PL40	;call to abstracted procedure
  8710                           
  8711                           ;Keypad.c: 36:     keypadState = 0;
  8712  001E22  6A37               	clrf	_keypadState^0,c
  8713                           
  8714                           ;Keypad.c: 37:     timerKeypad = TiGetTimer();
  8715  001E24  EC1F  F00F         	call	_TiGetTimer	;wreg free
  8716  001E28  6E38               	movwf	_timerKeypad^0,c
  8717                           
  8718                           ;Keypad.c: 38:     TiResetTics(timerKeypad);
  8719  001E2A  5038               	movf	_timerKeypad^0,w,c
  8720  001E2C  EC9C  F00F         	call	_TiResetTics
  8721                           
  8722                           ;Keypad.c: 39:     press = 0;
  8723  001E30  6A34               	clrf	_press^0,c
  8724                           
  8725                           ;Keypad.c: 40:     valueOld=10;
  8726  001E32  0E0A               	movlw	10
  8727  001E34  6E31               	movwf	_valueOld^0,c
  8728                           
  8729                           ;Keypad.c: 41:     rows=0;
  8730  001E36  6A36               	clrf	_rows^0,c
  8731                           
  8732                           ;Keypad.c: 42:     INTCON2bits.RBPU = 0;
  8733  001E38  9EF1               	bcf	241,7,c	;volatile
  8734                           
  8735                           ;Keypad.c: 43:     rotating = 0;
  8736  001E3A  6A33               	clrf	_rotating^0,c
  8737  001E3C  0012               	return		;funcret
  8738  001E3E                     __end_of_initKeypad:
  8739                           	callstack 0
  8740                           
  8741 ;; *************** function _initJoystick *****************
  8742 ;; Defined at:
  8743 ;;		line 11 in file "Joystick.c"
  8744 ;; Parameters:    Size  Location     Type
  8745 ;;		None
  8746 ;; Auto vars:     Size  Location     Type
  8747 ;;		None
  8748 ;; Return value:  Size  Location     Type
  8749 ;;                  1    wreg      void 
  8750 ;; Registers used:
  8751 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8752 ;; Tracked objects:
  8753 ;;		On entry : 0/0
  8754 ;;		On exit  : 0/0
  8755 ;;		Unchanged: 0/0
  8756 ;; Data sizes:     COMRAM   BANK0   BANK1
  8757 ;;      Params:         0       0       0
  8758 ;;      Locals:         0       0       0
  8759 ;;      Temps:          0       0       0
  8760 ;;      Totals:         0       0       0
  8761 ;;Total ram usage:        0 bytes
  8762 ;; Hardware stack levels used: 1
  8763 ;; Hardware stack levels required when called: 3
  8764 ;; This function calls:
  8765 ;;		_TiGetTimer
  8766 ;;		_TiResetTics
  8767 ;; This function is called by:
  8768 ;;		_main
  8769 ;; This function uses a non-reentrant model
  8770 ;;
  8771                           
  8772                           	psect	text56
  8773  001FA4                     __ptext56:
  8774                           	callstack 0
  8775  001FA4                     _initJoystick:
  8776                           	callstack 27
  8777                           
  8778                           ;Joystick.c: 12:  ADCON0 = 1;
  8779                           
  8780                           ;incstack = 0
  8781  001FA4  0E01               	movlw	1
  8782  001FA6  6EC2               	movwf	194,c	;volatile
  8783                           
  8784                           ;Joystick.c: 13:  ADCON1 = 13;
  8785  001FA8  0E0D               	movlw	13
  8786  001FAA  6EC1               	movwf	193,c	;volatile
  8787                           
  8788                           ;Joystick.c: 14:     ADCON2 = 9;
  8789  001FAC  0E09               	movlw	9
  8790  001FAE  6EC0               	movwf	192,c	;volatile
  8791                           
  8792                           ;Joystick.c: 15:     TRISAbits.TRISA0 = 1;
  8793  001FB0  8092               	bsf	146,0,c	;volatile
  8794                           
  8795                           ;Joystick.c: 16:     timerJoystick = TiGetTimer();
  8796  001FB2  EC1F  F00F         	call	_TiGetTimer	;wreg free
  8797  001FB6  6E39               	movwf	_timerJoystick^0,c
  8798                           
  8799                           ;Joystick.c: 17:  TiResetTics(timerJoystick);
  8800  001FB8  5039               	movf	_timerJoystick^0,w,c
  8801  001FBA  EF9C  F00F         	goto	_TiResetTics
  8802  001FBE                     __end_of_initJoystick:
  8803                           	callstack 0
  8804                           
  8805 ;; *************** function _initData *****************
  8806 ;; Defined at:
  8807 ;;		line 3 in file "Data.c"
  8808 ;; Parameters:    Size  Location     Type
  8809 ;;		None
  8810 ;; Auto vars:     Size  Location     Type
  8811 ;;		None
  8812 ;; Return value:  Size  Location     Type
  8813 ;;                  1    wreg      void 
  8814 ;; Registers used:
  8815 ;;		None
  8816 ;; Tracked objects:
  8817 ;;		On entry : 0/0
  8818 ;;		On exit  : 0/0
  8819 ;;		Unchanged: 0/0
  8820 ;; Data sizes:     COMRAM   BANK0   BANK1
  8821 ;;      Params:         0       0       0
  8822 ;;      Locals:         0       0       0
  8823 ;;      Temps:          0       0       0
  8824 ;;      Totals:         0       0       0
  8825 ;;Total ram usage:        0 bytes
  8826 ;; Hardware stack levels used: 1
  8827 ;; Hardware stack levels required when called: 2
  8828 ;; This function calls:
  8829 ;;		Nothing
  8830 ;; This function is called by:
  8831 ;;		_main
  8832 ;; This function uses a non-reentrant model
  8833 ;;
  8834                           
  8835                           	psect	text57
  8836  00019A                     __ptext57:
  8837                           	callstack 0
  8838  00019A                     _initData:
  8839                           	callstack 28
  8840                           
  8841                           ;incstack = 0
  8842  00019A  0012               	return		;funcret
  8843  00019C                     __end_of_initData:
  8844                           	callstack 0
  8845                           
  8846 ;; *************** function _TiInitTimer *****************
  8847 ;; Defined at:
  8848 ;;		line 23 in file "Timer.c"
  8849 ;; Parameters:    Size  Location     Type
  8850 ;;		None
  8851 ;; Auto vars:     Size  Location     Type
  8852 ;;		None
  8853 ;; Return value:  Size  Location     Type
  8854 ;;                  1    wreg      void 
  8855 ;; Registers used:
  8856 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8857 ;; Tracked objects:
  8858 ;;		On entry : 0/0
  8859 ;;		On exit  : 0/0
  8860 ;;		Unchanged: 0/0
  8861 ;; Data sizes:     COMRAM   BANK0   BANK1
  8862 ;;      Params:         0       0       0
  8863 ;;      Locals:         0       0       0
  8864 ;;      Temps:          0       0       0
  8865 ;;      Totals:         0       0       0
  8866 ;;Total ram usage:        0 bytes
  8867 ;; Hardware stack levels used: 1
  8868 ;; Hardware stack levels required when called: 3
  8869 ;; This function calls:
  8870 ;;		_TiGetTimer
  8871 ;;		_TiResetTics
  8872 ;; This function is called by:
  8873 ;;		_main
  8874 ;; This function uses a non-reentrant model
  8875 ;;
  8876                           
  8877                           	psect	text58
  8878  001D68                     __ptext58:
  8879                           	callstack 0
  8880  001D68                     _TiInitTimer:
  8881                           	callstack 27
  8882                           
  8883                           ;Timer.c: 26:     RCONbits.IPEN = 0;
  8884                           
  8885                           ;incstack = 0
  8886  001D68  9ED0               	bcf	208,7,c	;volatile
  8887                           
  8888                           ;Timer.c: 27:     INTCONbits.GIE_GIEH = 1;
  8889  001D6A  8EF2               	bsf	242,7,c	;volatile
  8890                           
  8891                           ;Timer.c: 28:     INTCONbits.PEIE_GIEL = 1;
  8892  001D6C  8CF2               	bsf	242,6,c	;volatile
  8893                           
  8894                           ;Timer.c: 29:     INTCONbits.TMR0IE = 1;
  8895  001D6E  8AF2               	bsf	242,5,c	;volatile
  8896                           
  8897                           ;Timer.c: 30:     INTCONbits.TMR0IF = 0;
  8898  001D70  94F2               	bcf	242,2,c	;volatile
  8899                           
  8900                           ;Timer.c: 31:     T0CON = 0x08;
  8901  001D72  0E08               	movlw	8
  8902  001D74  6ED5               	movwf	213,c	;volatile
  8903                           
  8904                           ;Timer.c: 32:     TMR0H = 0xDF;
  8905                           
  8906                           ;Timer.c: 33:     TMR0L = 0x73;
  8907  001D76  EC50  F00E         	call	PL76	;call to abstracted procedure
  8908                           
  8909                           ;Timer.c: 34:     T0CONbits.TMR0ON = 1;
  8910  001D7A  8ED5               	bsf	213,7,c	;volatile
  8911                           
  8912                           ;Timer.c: 36:     for (counter=0;counter<9;counter++) {
  8913  001D7C  6A2A               	clrf	_counter^0,c
  8914  001D7E                     l4570:
  8915  001D7E  0E08               	movlw	8
  8916  001D80  642A               	cpfsgt	_counter^0,c
  8917  001D82  D001               	goto	l4574
  8918  001D84  D005               	goto	l4580
  8919  001D86                     l4574:
  8920                           
  8921                           ;Timer.c: 37:      s_Timers[counter].b_busy=0;
  8922  001D86  EC2E  F00F         	call	PL26	;call to abstracted procedure
  8923  001D8A  6ADF               	clrf	indf2,c
  8924                           
  8925                           ;Timer.c: 38:     }
  8926  001D8C  2A2A               	incf	_counter^0,f,c
  8927  001D8E  D7F7               	goto	l4570
  8928  001D90                     l4580:
  8929                           
  8930                           ;Timer.c: 39:     timerPic = TiGetTimer();
  8931  001D90  EC1F  F00F         	call	_TiGetTimer	;wreg free
  8932  001D94  6E29               	movwf	_timerPic^0,c
  8933                           
  8934                           ;Timer.c: 40:     TiResetTics(timerPic);
  8935  001D96  5029               	movf	_timerPic^0,w,c
  8936  001D98  EC9C  F00F         	call	_TiResetTics
  8937                           
  8938                           ;Timer.c: 41:     timerState = 0;
  8939  001D9C  6A28               	clrf	_timerState^0,c
  8940                           
  8941                           ;Timer.c: 42:     minutes = 0;
  8942  001D9E  6A27               	clrf	_minutes@Timer$F1633^0,c
  8943                           
  8944                           ;Timer.c: 43:     seconds = 0;
  8945  001DA0  6A26               	clrf	_seconds@Timer$F1634^0,c
  8946  001DA2  0012               	return		;funcret
  8947  001DA4                     __end_of_TiInitTimer:
  8948                           	callstack 0
  8949                           
  8950 ;; *************** function _LcInit *****************
  8951 ;; Defined at:
  8952 ;;		line 51 in file "LcTLCD.c"
  8953 ;; Parameters:    Size  Location     Type
  8954 ;;  rows            1    wreg     unsigned char 
  8955 ;;  columns         1   16[COMRAM] unsigned char 
  8956 ;; Auto vars:     Size  Location     Type
  8957 ;;  rows            1   17[COMRAM] unsigned char 
  8958 ;;  i               2   18[COMRAM] int 
  8959 ;; Return value:  Size  Location     Type
  8960 ;;                  1    wreg      void 
  8961 ;; Registers used:
  8962 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8963 ;; Tracked objects:
  8964 ;;		On entry : 0/0
  8965 ;;		On exit  : 0/0
  8966 ;;		Unchanged: 0/0
  8967 ;; Data sizes:     COMRAM   BANK0   BANK1
  8968 ;;      Params:         1       0       0
  8969 ;;      Locals:         3       0       0
  8970 ;;      Temps:          0       0       0
  8971 ;;      Totals:         4       0       0
  8972 ;;Total ram usage:        4 bytes
  8973 ;; Hardware stack levels used: 1
  8974 ;; Hardware stack levels required when called: 4
  8975 ;; This function calls:
  8976 ;;		_CantaIR
  8977 ;;		_EscriuPrimeraOrdre
  8978 ;;		_Espera
  8979 ;;		_TiGetTimer
  8980 ;;		_WaitForBusy
  8981 ;; This function is called by:
  8982 ;;		_main
  8983 ;; This function uses a non-reentrant model
  8984 ;;
  8985                           
  8986                           	psect	text59
  8987  001636                     __ptext59:
  8988                           	callstack 0
  8989  001636                     _LcInit:
  8990                           	callstack 26
  8991                           
  8992                           ;incstack = 0
  8993                           ;LcInit@rows stored from wreg
  8994  001636  6E61               	movwf	LcInit@rows^0,c
  8995                           
  8996                           ;LcTLCD.c: 57:  int i;;LcTLCD.c: 58:  Timer = TiGetTimer();
  8997  001638  EC1F  F00F         	call	_TiGetTimer	;wreg free
  8998  00163C  6E2B               	movwf	_Timer^0,c
  8999                           
  9000                           ;LcTLCD.c: 59:  Rows = rows; Columns = columns;
  9001  00163E  C061  F02F         	movff	LcInit@rows,_Rows
  9002  001642  C060  F02E         	movff	LcInit@columns,_Columns
  9003                           
  9004                           ;LcTLCD.c: 60:  RowAct = ColumnAct = 0;
  9005  001646  6A2C               	clrf	_ColumnAct^0,c
  9006  001648  6A2D               	clrf	_RowAct^0,c
  9007                           
  9008                           ;LcTLCD.c: 61:  (TRISCbits.TRISC2 = TRISCbits.TRISC1 = TRISCbits.TRISC0 = 0);
  9009  00164A  9094               	bcf	148,0,c	;volatile
  9010  00164C  9294               	bcf	148,1,c	;volatile
  9011  00164E  9494               	bcf	148,2,c	;volatile
  9012                           
  9013                           ;LcTLCD.c: 62:  for (i = 0; i < 2; i++) {
  9014  001650  6A62               	clrf	LcInit@i^0,c
  9015  001652  6A63               	clrf	(LcInit@i+1)^0,c
  9016  001654                     l4626:
  9017                           
  9018                           ;LcTLCD.c: 63:   Espera(Timer, 100);
  9019  001654  D84C               	call	PL28	;call to abstracted procedure
  9020  001656  0E64               	movlw	100
  9021  001658  6E5E               	movwf	Espera@ms^0,c
  9022  00165A  ECEB  F00F         	call	_Espera	;wreg free
  9023                           
  9024                           ;LcTLCD.c: 66:   EscriuPrimeraOrdre(0x02 | 0x01);
  9025  00165E  0E03               	movlw	3
  9026  001660  EC88  F00C         	call	_EscriuPrimeraOrdre
  9027                           
  9028                           ;LcTLCD.c: 67:   Espera(Timer, 10);
  9029  001664  D844               	call	PL28	;call to abstracted procedure
  9030  001666  0E0A               	movlw	10
  9031  001668  6E5E               	movwf	Espera@ms^0,c
  9032  00166A  ECEB  F00F         	call	_Espera	;wreg free
  9033                           
  9034                           ;LcTLCD.c: 68:   EscriuPrimeraOrdre(0x02 | 0x01);
  9035  00166E  0E03               	movlw	3
  9036  001670  EC88  F00C         	call	_EscriuPrimeraOrdre
  9037                           
  9038                           ;LcTLCD.c: 69:   Espera(Timer, 5);
  9039  001674  D83C               	call	PL28	;call to abstracted procedure
  9040  001676  0E05               	movlw	5
  9041  001678  6E5E               	movwf	Espera@ms^0,c
  9042  00167A  ECEB  F00F         	call	_Espera	;wreg free
  9043                           
  9044                           ;LcTLCD.c: 70:   EscriuPrimeraOrdre(0x02 | 0x01);
  9045  00167E  0E03               	movlw	3
  9046  001680  EC88  F00C         	call	_EscriuPrimeraOrdre
  9047                           
  9048                           ;LcTLCD.c: 71:   Espera(Timer, 5);
  9049  001684  D834               	call	PL28	;call to abstracted procedure
  9050  001686  0E05               	movlw	5
  9051  001688  6E5E               	movwf	Espera@ms^0,c
  9052  00168A  ECEB  F00F         	call	_Espera	;wreg free
  9053                           
  9054                           ;LcTLCD.c: 74:   EscriuPrimeraOrdre(0x02);
  9055  00168E  0E02               	movlw	2
  9056  001690  EC88  F00C         	call	_EscriuPrimeraOrdre
  9057                           
  9058                           ;LcTLCD.c: 75:   Espera(Timer, 5);
  9059  001694  D82C               	call	PL28	;call to abstracted procedure
  9060  001696  0E05               	movlw	5
  9061  001698  6E5E               	movwf	Espera@ms^0,c
  9062  00169A  ECEB  F00F         	call	_Espera	;wreg free
  9063                           
  9064                           ;LcTLCD.c: 76:   CantaIR(0x20 | 0x08);
  9065  00169E  0E28               	movlw	40
  9066  0016A0  ECAA  F00F         	call	_CantaIR
  9067                           
  9068                           ;LcTLCD.c: 79:   WaitForBusy(); CantaIR(0x08);
  9069  0016A4  EC76  F00E         	call	_WaitForBusy	;wreg free
  9070  0016A8  0E08               	movlw	8
  9071  0016AA  ECAA  F00F         	call	_CantaIR
  9072                           
  9073                           ;LcTLCD.c: 80:   WaitForBusy(); CantaIR(0x01);
  9074  0016AE  EC76  F00E         	call	_WaitForBusy	;wreg free
  9075  0016B2  0E01               	movlw	1
  9076  0016B4  ECAA  F00F         	call	_CantaIR
  9077                           
  9078                           ;LcTLCD.c: 81:   Espera(Timer,3);
  9079  0016B8  D81A               	call	PL28	;call to abstracted procedure
  9080  0016BA  0E03               	movlw	3
  9081  0016BC  6E5E               	movwf	Espera@ms^0,c
  9082  0016BE  ECEB  F00F         	call	_Espera	;wreg free
  9083                           
  9084                           ;LcTLCD.c: 82:   WaitForBusy(); CantaIR(0x04 | 0x02);
  9085  0016C2  EC76  F00E         	call	_WaitForBusy	;wreg free
  9086  0016C6  0E06               	movlw	6
  9087  0016C8  ECAA  F00F         	call	_CantaIR
  9088                           
  9089                           ;LcTLCD.c: 83:   WaitForBusy(); CantaIR(0x08 | 0x04 | 0x02 | 0x01);
  9090  0016CC  EC76  F00E         	call	_WaitForBusy	;wreg free
  9091  0016D0  0E0F               	movlw	15
  9092  0016D2  ECAA  F00F         	call	_CantaIR
  9093                           
  9094                           ;LcTLCD.c: 84:  }
  9095  0016D6  4A62               	infsnz	LcInit@i^0,f,c
  9096  0016D8  2A63               	incf	(LcInit@i+1)^0,f,c
  9097  0016DA  BE63               	btfsc	(LcInit@i+1)^0,7,c
  9098  0016DC  D7BB               	goto	l4626
  9099  0016DE  5063               	movf	(LcInit@i+1)^0,w,c
  9100  0016E0  E105               	bnz	u3090
  9101  0016E2  0E02               	movlw	2
  9102  0016E4  5C62               	subwf	LcInit@i^0,w,c
  9103  0016E6  B0D8               	btfsc	status,0,c
  9104  0016E8  0012               	return	
  9105  0016EA  D7B4               	goto	l4626
  9106  0016EC                     u3090:
  9107  0016EC  0012               	return		;funcret
  9108  0016EE                     __end_of_LcInit:
  9109                           	callstack 0
  9110  0016EE                     PL28:
  9111                           	callstack 26
  9112  0016EE  C02B  F05C         	movff	_Timer,Espera@Timer
  9113  0016F2  6A5D               	clrf	(Espera@Timer+1)^0,c
  9114  0016F4  6A5F               	clrf	(Espera@ms+1)^0,c
  9115  0016F6  0012               	return	
  9116  0016F8                     __end_ofPL28:
  9117                           	callstack 0
  9118                           
  9119 ;; *************** function _WaitForBusy *****************
  9120 ;; Defined at:
  9121 ;;		line 255 in file "LcTLCD.c"
  9122 ;; Parameters:    Size  Location     Type
  9123 ;;		None
  9124 ;; Auto vars:     Size  Location     Type
  9125 ;;  Busy            1   12[COMRAM] unsigned char 
  9126 ;; Return value:  Size  Location     Type
  9127 ;;                  1    wreg      void 
  9128 ;; Registers used:
  9129 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9130 ;; Tracked objects:
  9131 ;;		On entry : 0/0
  9132 ;;		On exit  : 0/0
  9133 ;;		Unchanged: 0/0
  9134 ;; Data sizes:     COMRAM   BANK0   BANK1
  9135 ;;      Params:         0       0       0
  9136 ;;      Locals:         1       0       0
  9137 ;;      Temps:          0       0       0
  9138 ;;      Totals:         1       0       0
  9139 ;;Total ram usage:        1 bytes
  9140 ;; Hardware stack levels used: 1
  9141 ;; Hardware stack levels required when called: 3
  9142 ;; This function calls:
  9143 ;;		_TiGetTics
  9144 ;;		_TiResetTics
  9145 ;; This function is called by:
  9146 ;;		_LcInit
  9147 ;;		_LcClear
  9148 ;;		_LcCursorOn
  9149 ;;		_LcCursorOff
  9150 ;;		_LcGotoXY
  9151 ;;		_LcPutChar
  9152 ;; This function uses a non-reentrant model
  9153 ;;
  9154                           
  9155                           	psect	text60
  9156  001CEC                     __ptext60:
  9157                           	callstack 0
  9158  001CEC                     _WaitForBusy:
  9159                           	callstack 24
  9160                           
  9161                           ;LcTLCD.c: 256:  (TRISBbits.TRISB0 = TRISDbits.TRISD2 = TRISDbits.TRISD1 = TRISDbits.TRI
      +                          SD0 = 1);
  9162                           
  9163                           ;incstack = 0
  9164  001CEC  8095               	bsf	149,0,c	;volatile
  9165  001CEE  8295               	bsf	149,1,c	;volatile
  9166  001CF0  8495               	bsf	149,2,c	;volatile
  9167  001CF2  8093               	bsf	147,0,c	;volatile
  9168                           
  9169                           ;LcTLCD.c: 257:  (LATCbits.LATC0 = 0);
  9170  001CF4  908B               	bcf	139,0,c	;volatile
  9171                           
  9172                           ;LcTLCD.c: 258:  (LATCbits.LATC1 = 1);
  9173  001CF6  828B               	bsf	139,1,c	;volatile
  9174                           
  9175                           ;LcTLCD.c: 259:  TiResetTics(Timer);
  9176  001CF8  502B               	movf	_Timer^0,w,c
  9177  001CFA  EC9C  F00F         	call	_TiResetTics
  9178  001CFE                     l4160:
  9179                           
  9180                           ;LcTLCD.c: 261:   (LATCbits.LATC2 = 1);(LATCbits.LATC2 = 1);
  9181  001CFE  848B               	bsf	139,2,c	;volatile
  9182  001D00  848B               	bsf	139,2,c	;volatile
  9183                           
  9184                           ;LcTLCD.c: 262:   Busy = (PORTBbits.RB0);
  9185  001D02  0E00               	movlw	0
  9186  001D04  B081               	btfsc	129,0,c	;volatile
  9187  001D06  0E01               	movlw	1
  9188  001D08  6E5C               	movwf	WaitForBusy@Busy^0,c
  9189                           
  9190                           ;LcTLCD.c: 263:   (LATCbits.LATC2 = 0);
  9191  001D0A  948B               	bcf	139,2,c	;volatile
  9192                           
  9193                           ;LcTLCD.c: 264:   (LATCbits.LATC2 = 0);
  9194  001D0C  948B               	bcf	139,2,c	;volatile
  9195                           
  9196                           ;LcTLCD.c: 265:   (LATCbits.LATC2 = 1);(LATCbits.LATC2 = 1);
  9197  001D0E  848B               	bsf	139,2,c	;volatile
  9198  001D10  848B               	bsf	139,2,c	;volatile
  9199                           
  9200                           ;LcTLCD.c: 267:   (LATCbits.LATC2 = 0);
  9201  001D12  948B               	bcf	139,2,c	;volatile
  9202                           
  9203                           ;LcTLCD.c: 268:   (LATCbits.LATC2 = 0);
  9204  001D14  948B               	bcf	139,2,c	;volatile
  9205                           
  9206                           ;LcTLCD.c: 269:   if (TiGetTics(Timer)) break;
  9207  001D16  502B               	movf	_Timer^0,w,c
  9208  001D18  EC48  F00F         	call	_TiGetTics
  9209  001D1C  5055               	movf	?_TiGetTics^0,w,c
  9210  001D1E  1056               	iorwf	(?_TiGetTics+1)^0,w,c
  9211  001D20  E001               	bz	l4182
  9212  001D22  0012               	return	
  9213  001D24                     l4182:
  9214                           
  9215                           ;LcTLCD.c: 270:  } while(Busy);
  9216  001D24  505C               	movf	WaitForBusy@Busy^0,w,c
  9217  001D26  E1EB               	bnz	l4160
  9218  001D28  0012               	return		;funcret
  9219  001D2A                     __end_of_WaitForBusy:
  9220                           	callstack 0
  9221                           
  9222 ;; *************** function _TiGetTimer *****************
  9223 ;; Defined at:
  9224 ;;		line 82 in file "Timer.c"
  9225 ;; Parameters:    Size  Location     Type
  9226 ;;		None
  9227 ;; Auto vars:     Size  Location     Type
  9228 ;;		None
  9229 ;; Return value:  Size  Location     Type
  9230 ;;                  1    wreg      unsigned char 
  9231 ;; Registers used:
  9232 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  9233 ;; Tracked objects:
  9234 ;;		On entry : 0/0
  9235 ;;		On exit  : 0/0
  9236 ;;		Unchanged: 0/0
  9237 ;; Data sizes:     COMRAM   BANK0   BANK1
  9238 ;;      Params:         0       0       0
  9239 ;;      Locals:         0       0       0
  9240 ;;      Temps:          1       0       0
  9241 ;;      Totals:         1       0       0
  9242 ;;Total ram usage:        1 bytes
  9243 ;; Hardware stack levels used: 1
  9244 ;; Hardware stack levels required when called: 2
  9245 ;; This function calls:
  9246 ;;		Nothing
  9247 ;; This function is called by:
  9248 ;;		_main
  9249 ;;		_initMenu
  9250 ;;		_initJoystick
  9251 ;;		_initKeypad
  9252 ;;		_LcInit
  9253 ;;		_TiInitTimer
  9254 ;;		_initMusic
  9255 ;;		_initTX
  9256 ;; This function uses a non-reentrant model
  9257 ;;
  9258                           
  9259                           	psect	text61
  9260  001E3E                     __ptext61:
  9261                           	callstack 0
  9262  001E3E                     _TiGetTimer:
  9263                           	callstack 27
  9264                           
  9265                           ;Timer.c: 86:     counter=0;
  9266                           
  9267                           ;incstack = 0
  9268  001E3E  6A2A               	clrf	_counter^0,c
  9269                           
  9270                           ;Timer.c: 87:     while (s_Timers[counter].b_busy==1) {
  9271  001E40  D005               	goto	l4334
  9272  001E42                     l4326:
  9273                           
  9274                           ;Timer.c: 88:         counter++;
  9275  001E42  2A2A               	incf	_counter^0,f,c
  9276                           
  9277                           ;Timer.c: 89:  if (counter == 9) return -1;
  9278  001E44  0E09               	movlw	9
  9279  001E46  182A               	xorwf	_counter^0,w,c
  9280  001E48  E101               	bnz	l4334
  9281  001E4A  0CFF               	retlw	255
  9282  001E4C                     l4334:
  9283                           
  9284                           ;Timer.c: 87:     while (s_Timers[counter].b_busy==1) {
  9285  001E4C  D807               	call	PL26	;call to abstracted procedure
  9286  001E4E  04DE               	decf	postinc2,w,c
  9287  001E50  E0F8               	bz	l4326
  9288                           
  9289                           ;Timer.c: 91:     s_Timers[counter].b_busy=1;
  9290  001E52  D804               	call	PL26	;call to abstracted procedure
  9291  001E54  0E01               	movlw	1
  9292  001E56  6EDF               	movwf	indf2,c
  9293                           
  9294                           ;Timer.c: 92:     return (counter);
  9295  001E58  502A               	movf	_counter^0,w,c
  9296  001E5A  0012               	return		;funcret
  9297  001E5C                     __end_of_TiGetTimer:
  9298                           	callstack 0
  9299  001E5C                     PL26:
  9300                           	callstack 27
  9301  001E5C  502A               	movf	_counter^0,w,c
  9302  001E5E  0D03               	mullw	3
  9303  001E60  50F3               	movf	243,w,c
  9304  001E62  0FB8               	addlw	low (_s_Timers+2)
  9305  001E64  6ED9               	movwf	fsr2l,c
  9306  001E66  6ADA               	clrf	fsr2h,c
  9307  001E68  0012               	return	
  9308  001E6A                     __end_ofPL26:
  9309                           	callstack 0
  9310                           
  9311 ;; *************** function _Espera *****************
  9312 ;; Defined at:
  9313 ;;		line 204 in file "LcTLCD.c"
  9314 ;; Parameters:    Size  Location     Type
  9315 ;;  Timer           2   12[COMRAM] int 
  9316 ;;  ms              2   14[COMRAM] int 
  9317 ;; Auto vars:     Size  Location     Type
  9318 ;;		None
  9319 ;; Return value:  Size  Location     Type
  9320 ;;                  1    wreg      void 
  9321 ;; Registers used:
  9322 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9323 ;; Tracked objects:
  9324 ;;		On entry : 0/0
  9325 ;;		On exit  : 0/0
  9326 ;;		Unchanged: 0/0
  9327 ;; Data sizes:     COMRAM   BANK0   BANK1
  9328 ;;      Params:         4       0       0
  9329 ;;      Locals:         0       0       0
  9330 ;;      Temps:          0       0       0
  9331 ;;      Totals:         4       0       0
  9332 ;;Total ram usage:        4 bytes
  9333 ;; Hardware stack levels used: 1
  9334 ;; Hardware stack levels required when called: 3
  9335 ;; This function calls:
  9336 ;;		_TiGetTics
  9337 ;;		_TiResetTics
  9338 ;; This function is called by:
  9339 ;;		_LcInit
  9340 ;;		_LcClear
  9341 ;; This function uses a non-reentrant model
  9342 ;;
  9343                           
  9344                           	psect	text62
  9345  001FD6                     __ptext62:
  9346                           	callstack 0
  9347  001FD6                     _Espera:
  9348                           	callstack 25
  9349                           
  9350                           ;LcTLCD.c: 205:  TiResetTics(Timer);
  9351                           
  9352                           ;incstack = 0
  9353  001FD6  505C               	movf	Espera@Timer^0,w,c
  9354  001FD8  EC9C  F00F         	call	_TiResetTics
  9355  001FDC                     l4278:
  9356  001FDC  505C               	movf	Espera@Timer^0,w,c
  9357  001FDE  EC48  F00F         	call	_TiGetTics
  9358  001FE2  505E               	movf	Espera@ms^0,w,c
  9359  001FE4  5C55               	subwf	?_TiGetTics^0,w,c
  9360  001FE6  505F               	movf	(Espera@ms+1)^0,w,c
  9361  001FE8  5856               	subwfb	(?_TiGetTics+1)^0,w,c
  9362  001FEA  E3F8               	bnc	l4278
  9363  001FEC  0012               	return		;funcret
  9364  001FEE                     __end_of_Espera:
  9365                           	callstack 0
  9366                           
  9367 ;; *************** function _TiResetTics *****************
  9368 ;; Defined at:
  9369 ;;		line 67 in file "Timer.c"
  9370 ;; Parameters:    Size  Location     Type
  9371 ;;  Handle          1    wreg     unsigned char 
  9372 ;; Auto vars:     Size  Location     Type
  9373 ;;  Handle          1    5[COMRAM] unsigned char 
  9374 ;; Return value:  Size  Location     Type
  9375 ;;                  1    wreg      void 
  9376 ;; Registers used:
  9377 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  9378 ;; Tracked objects:
  9379 ;;		On entry : 0/0
  9380 ;;		On exit  : 0/0
  9381 ;;		Unchanged: 0/0
  9382 ;; Data sizes:     COMRAM   BANK0   BANK1
  9383 ;;      Params:         0       0       0
  9384 ;;      Locals:         1       0       0
  9385 ;;      Temps:          0       0       0
  9386 ;;      Totals:         1       0       0
  9387 ;;Total ram usage:        1 bytes
  9388 ;; Hardware stack levels used: 1
  9389 ;; Hardware stack levels required when called: 2
  9390 ;; This function calls:
  9391 ;;		Nothing
  9392 ;; This function is called by:
  9393 ;;		_main
  9394 ;;		_initMenu
  9395 ;;		_menuMotor
  9396 ;;		_initJoystick
  9397 ;;		_motorJoystick
  9398 ;;		_initKeypad
  9399 ;;		_motorKey
  9400 ;;		_KeyResetValue
  9401 ;;		_Espera
  9402 ;;		_WaitForBusy
  9403 ;;		_TiInitTimer
  9404 ;;		_motorTimer
  9405 ;;		_motorMusic
  9406 ;;		_startMusic
  9407 ;;		_playNote
  9408 ;;		_initTX
  9409 ;;		_motorTX
  9410 ;;		_motorRX
  9411 ;;		_sendMyTX
  9412 ;; This function uses a non-reentrant model
  9413 ;;
  9414                           
  9415                           	psect	text63
  9416  001F38                     __ptext63:
  9417                           	callstack 0
  9418  001F38                     _TiResetTics:
  9419                           	callstack 27
  9420                           
  9421                           ;incstack = 0
  9422                           ;TiResetTics@Handle stored from wreg
  9423  001F38  6E55               	movwf	TiResetTics@Handle^0,c
  9424                           
  9425                           ;Timer.c: 71:     s_Timers[Handle].h_initialTics=h_Tics;
  9426  001F3A  5055               	movf	TiResetTics@Handle^0,w,c
  9427  001F3C  D805               	call	PL48	;call to abstracted procedure
  9428  001F3E  C00F  FFDE         	movff	_h_Tics,postinc2
  9429  001F42  C010  FFDD         	movff	_h_Tics+1,postdec2
  9430  001F46  0012               	return		;funcret
  9431  001F48                     __end_of_TiResetTics:
  9432                           	callstack 0
  9433  001F48                     PL48:
  9434                           	callstack 23
  9435  001F48  0D03               	mullw	3
  9436  001F4A  50F3               	movf	243,w,c
  9437  001F4C  0FB6               	addlw	low _s_Timers
  9438  001F4E  6ED9               	movwf	fsr2l,c
  9439  001F50  6ADA               	clrf	fsr2h,c
  9440  001F52  0012               	return	
  9441  001F54                     __end_ofPL48:
  9442                           	callstack 0
  9443                           
  9444 ;; *************** function _TiGetTics *****************
  9445 ;; Defined at:
  9446 ;;		line 73 in file "Timer.c"
  9447 ;; Parameters:    Size  Location     Type
  9448 ;;  Handle          1    wreg     unsigned char 
  9449 ;; Auto vars:     Size  Location     Type
  9450 ;;  Handle          1    9[COMRAM] unsigned char 
  9451 ;;  actual          2   10[COMRAM] volatile unsigned int 
  9452 ;; Return value:  Size  Location     Type
  9453 ;;                  2    5[COMRAM] unsigned int 
  9454 ;; Registers used:
  9455 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  9456 ;; Tracked objects:
  9457 ;;		On entry : 0/0
  9458 ;;		On exit  : 0/0
  9459 ;;		Unchanged: 0/0
  9460 ;; Data sizes:     COMRAM   BANK0   BANK1
  9461 ;;      Params:         2       0       0
  9462 ;;      Locals:         3       0       0
  9463 ;;      Temps:          2       0       0
  9464 ;;      Totals:         7       0       0
  9465 ;;Total ram usage:        7 bytes
  9466 ;; Hardware stack levels used: 1
  9467 ;; Hardware stack levels required when called: 2
  9468 ;; This function calls:
  9469 ;;		Nothing
  9470 ;; This function is called by:
  9471 ;;		_menuMotor
  9472 ;;		_motorJoystick
  9473 ;;		_motorKey
  9474 ;;		_Espera
  9475 ;;		_WaitForBusy
  9476 ;;		_motorTimer
  9477 ;;		_motorMusic
  9478 ;;		_playNote
  9479 ;;		_motorTX
  9480 ;;		_motorRX
  9481 ;; This function uses a non-reentrant model
  9482 ;;
  9483                           
  9484                           	psect	text64
  9485  001E90                     __ptext64:
  9486                           	callstack 0
  9487  001E90                     _TiGetTics:
  9488                           	callstack 27
  9489                           
  9490                           ;incstack = 0
  9491                           ;TiGetTics@Handle stored from wreg
  9492  001E90  6E59               	movwf	TiGetTics@Handle^0,c
  9493                           
  9494                           ;Timer.c: 77:     volatile unsigned int actual;;Timer.c: 78:     actual=h_Tics;
  9495  001E92  C00F  F05A         	movff	_h_Tics,TiGetTics@actual	;volatile
  9496  001E96  C010  F05B         	movff	_h_Tics+1,TiGetTics@actual+1	;volatile
  9497                           
  9498                           ;Timer.c: 79:       return (actual-(s_Timers[Handle].h_initialTics));
  9499  001E9A  5059               	movf	TiGetTics@Handle^0,w,c
  9500  001E9C  ECA4  F00F         	call	PL48	;call to abstracted procedure
  9501  001EA0  CFDE F057          	movff	postinc2,??_TiGetTics
  9502  001EA4  CFDD F058          	movff	postdec2,??_TiGetTics+1
  9503  001EA8  5057               	movf	??_TiGetTics^0,w,c
  9504  001EAA  5C5A               	subwf	TiGetTics@actual^0,w,c	;volatile
  9505  001EAC  6E55               	movwf	?_TiGetTics^0,c
  9506  001EAE  5058               	movf	(??_TiGetTics+1)^0,w,c
  9507  001EB0  585B               	subwfb	(TiGetTics@actual+1)^0,w,c	;volatile
  9508  001EB2  6E56               	movwf	(?_TiGetTics+1)^0,c
  9509  001EB4  0012               	return		;funcret
  9510  001EB6                     __end_of_TiGetTics:
  9511                           	callstack 0
  9512                           
  9513 ;; *************** function _EscriuPrimeraOrdre *****************
  9514 ;; Defined at:
  9515 ;;		line 273 in file "LcTLCD.c"
  9516 ;; Parameters:    Size  Location     Type
  9517 ;;  ordre           1    wreg     unsigned char 
  9518 ;; Auto vars:     Size  Location     Type
  9519 ;;  ordre           1    6[COMRAM] unsigned char 
  9520 ;; Return value:  Size  Location     Type
  9521 ;;                  1    wreg      void 
  9522 ;; Registers used:
  9523 ;;		wreg, status,2, status,0
  9524 ;; Tracked objects:
  9525 ;;		On entry : 0/0
  9526 ;;		On exit  : 0/0
  9527 ;;		Unchanged: 0/0
  9528 ;; Data sizes:     COMRAM   BANK0   BANK1
  9529 ;;      Params:         0       0       0
  9530 ;;      Locals:         1       0       0
  9531 ;;      Temps:          1       0       0
  9532 ;;      Totals:         2       0       0
  9533 ;;Total ram usage:        2 bytes
  9534 ;; Hardware stack levels used: 1
  9535 ;; Hardware stack levels required when called: 2
  9536 ;; This function calls:
  9537 ;;		Nothing
  9538 ;; This function is called by:
  9539 ;;		_LcInit
  9540 ;; This function uses a non-reentrant model
  9541 ;;
  9542                           
  9543                           	psect	text65
  9544  001910                     __ptext65:
  9545                           	callstack 0
  9546  001910                     _EscriuPrimeraOrdre:
  9547                           	callstack 27
  9548                           
  9549                           ;incstack = 0
  9550                           ;EscriuPrimeraOrdre@ordre stored from wreg
  9551  001910  6E56               	movwf	EscriuPrimeraOrdre@ordre^0,c
  9552                           
  9553                           ;LcTLCD.c: 275:  (TRISBbits.TRISB0 = TRISDbits.TRISD2 = TRISDbits.TRISD1 = TRISDbits.TRI
      +                          SD0 = 0); (LATCbits.LATC0 = 0); (LATCbits.LATC1 = 0);
  9554  001912  9095               	bcf	149,0,c	;volatile
  9555                           
  9556                           ;LcTLCD.c: 276:  (LATCbits.LATC2 = 1); (LATCbits.LATC2 = 1);
  9557  001914  D832               	call	PL56	;call to abstracted procedure
  9558  001916  848B               	bsf	139,2,c	;volatile
  9559                           
  9560                           ;LcTLCD.c: 277:   (LATBbits.LATB0 = (ordre & 0x08 ? 1 : 0));
  9561  001918  A656               	btfss	EscriuPrimeraOrdre@ordre^0,3,c
  9562  00191A  D003               	goto	u440
  9563  00191C  6A55               	clrf	??_EscriuPrimeraOrdre^0,c
  9564  00191E  2A55               	incf	??_EscriuPrimeraOrdre^0,f,c
  9565  001920  D001               	goto	u458
  9566  001922                     u440:
  9567  001922  6A55               	clrf	??_EscriuPrimeraOrdre^0,c
  9568  001924                     u458:
  9569  001924  508A               	movf	138,w,c	;volatile
  9570  001926  1855               	xorwf	??_EscriuPrimeraOrdre^0,w,c
  9571  001928  0BFE               	andlw	-2
  9572  00192A  1855               	xorwf	??_EscriuPrimeraOrdre^0,w,c
  9573  00192C  6E8A               	movwf	138,c	;volatile
  9574                           
  9575                           ;LcTLCD.c: 278:   (LATDbits.LATD2 = (ordre & 0x04 ? 1 : 0));
  9576  00192E  A456               	btfss	EscriuPrimeraOrdre@ordre^0,2,c
  9577  001930  D003               	goto	u460
  9578  001932  6A55               	clrf	??_EscriuPrimeraOrdre^0,c
  9579  001934  2A55               	incf	??_EscriuPrimeraOrdre^0,f,c
  9580  001936  D001               	goto	u478
  9581  001938                     u460:
  9582  001938  6A55               	clrf	??_EscriuPrimeraOrdre^0,c
  9583  00193A                     u478:
  9584  00193A  4655               	rlncf	??_EscriuPrimeraOrdre^0,f,c
  9585  00193C  4655               	rlncf	??_EscriuPrimeraOrdre^0,f,c
  9586  00193E  508C               	movf	140,w,c	;volatile
  9587  001940  1855               	xorwf	??_EscriuPrimeraOrdre^0,w,c
  9588  001942  0BFB               	andlw	-5
  9589  001944  1855               	xorwf	??_EscriuPrimeraOrdre^0,w,c
  9590  001946  6E8C               	movwf	140,c	;volatile
  9591                           
  9592                           ;LcTLCD.c: 279:   (LATDbits.LATD1 = (ordre & 0x02 ? 1 : 0));
  9593  001948  A256               	btfss	EscriuPrimeraOrdre@ordre^0,1,c
  9594  00194A  D003               	goto	u480
  9595  00194C  6A55               	clrf	??_EscriuPrimeraOrdre^0,c
  9596  00194E  2A55               	incf	??_EscriuPrimeraOrdre^0,f,c
  9597  001950  D001               	goto	u498
  9598  001952                     u480:
  9599  001952  6A55               	clrf	??_EscriuPrimeraOrdre^0,c
  9600  001954                     u498:
  9601  001954  4655               	rlncf	??_EscriuPrimeraOrdre^0,f,c
  9602  001956  508C               	movf	140,w,c	;volatile
  9603  001958  1855               	xorwf	??_EscriuPrimeraOrdre^0,w,c
  9604  00195A  0BFD               	andlw	-3
  9605  00195C  1855               	xorwf	??_EscriuPrimeraOrdre^0,w,c
  9606  00195E  6E8C               	movwf	140,c	;volatile
  9607                           
  9608                           ;LcTLCD.c: 280:   (LATDbits.LATD0 = (ordre & 0x01 ? 1 : 0));
  9609  001960  A056               	btfss	EscriuPrimeraOrdre@ordre^0,0,c
  9610  001962  D003               	goto	u500
  9611  001964  6A55               	clrf	??_EscriuPrimeraOrdre^0,c
  9612  001966  2A55               	incf	??_EscriuPrimeraOrdre^0,f,c
  9613  001968  D001               	goto	u518
  9614  00196A                     u500:
  9615  00196A  6A55               	clrf	??_EscriuPrimeraOrdre^0,c
  9616  00196C                     u518:
  9617  00196C  508C               	movf	140,w,c	;volatile
  9618  00196E  1855               	xorwf	??_EscriuPrimeraOrdre^0,w,c
  9619  001970  0BFE               	andlw	-2
  9620  001972  1855               	xorwf	??_EscriuPrimeraOrdre^0,w,c
  9621  001974  6E8C               	movwf	140,c	;volatile
  9622                           
  9623                           ;LcTLCD.c: 281:  (LATCbits.LATC2 = 0);
  9624  001976  948B               	bcf	139,2,c	;volatile
  9625  001978  0012               	return		;funcret
  9626  00197A                     __end_of_EscriuPrimeraOrdre:
  9627                           	callstack 0
  9628  00197A                     PL56:
  9629                           	callstack 23
  9630  00197A  9295               	bcf	149,1,c	;volatile
  9631  00197C  9495               	bcf	149,2,c	;volatile
  9632  00197E  9093               	bcf	147,0,c	;volatile
  9633  001980  908B               	bcf	139,0,c	;volatile
  9634  001982  928B               	bcf	139,1,c	;volatile
  9635  001984  848B               	bsf	139,2,c	;volatile
  9636  001986  0012               	return	
  9637  001988                     __end_ofPL56:
  9638                           	callstack 0
  9639                           
  9640 ;; *************** function _CantaIR *****************
  9641 ;; Defined at:
  9642 ;;		line 223 in file "LcTLCD.c"
  9643 ;; Parameters:    Size  Location     Type
  9644 ;;  IR              1    wreg     unsigned char 
  9645 ;; Auto vars:     Size  Location     Type
  9646 ;;  IR              1    7[COMRAM] unsigned char 
  9647 ;; Return value:  Size  Location     Type
  9648 ;;                  1    wreg      void 
  9649 ;; Registers used:
  9650 ;;		wreg, status,2, status,0, cstack
  9651 ;; Tracked objects:
  9652 ;;		On entry : 0/0
  9653 ;;		On exit  : 0/0
  9654 ;;		Unchanged: 0/0
  9655 ;; Data sizes:     COMRAM   BANK0   BANK1
  9656 ;;      Params:         0       0       0
  9657 ;;      Locals:         1       0       0
  9658 ;;      Temps:          0       0       0
  9659 ;;      Totals:         1       0       0
  9660 ;;Total ram usage:        1 bytes
  9661 ;; Hardware stack levels used: 1
  9662 ;; Hardware stack levels required when called: 3
  9663 ;; This function calls:
  9664 ;;		_CantaPartAlta
  9665 ;;		_CantaPartBaixa
  9666 ;; This function is called by:
  9667 ;;		_LcInit
  9668 ;;		_LcClear
  9669 ;;		_LcCursorOn
  9670 ;;		_LcCursorOff
  9671 ;;		_LcGotoXY
  9672 ;;		_LcScroll
  9673 ;; This function uses a non-reentrant model
  9674 ;;
  9675                           
  9676                           	psect	text66
  9677  001F54                     __ptext66:
  9678                           	callstack 0
  9679  001F54                     _CantaIR:
  9680                           	callstack 23
  9681                           
  9682                           ;incstack = 0
  9683                           ;CantaIR@IR stored from wreg
  9684  001F54  6E57               	movwf	CantaIR@IR^0,c
  9685                           
  9686                           ;LcTLCD.c: 224:  (TRISBbits.TRISB0 = TRISDbits.TRISD2 = TRISDbits.TRISD1 = TRISDbits.TRI
      +                          SD0 = 0);
  9687  001F56  9095               	bcf	149,0,c	;volatile
  9688                           
  9689                           ;LcTLCD.c: 225:  (LATCbits.LATC0 = 0);
  9690                           
  9691                           ;LcTLCD.c: 226:  (LATCbits.LATC1 = 0);
  9692                           
  9693                           ;LcTLCD.c: 227:  (LATCbits.LATC2 = 1);
  9694  001F58  ECBD  F00C         	call	PL56	;call to abstracted procedure
  9695                           
  9696                           ;LcTLCD.c: 228:  CantaPartAlta(IR);
  9697  001F5C  5057               	movf	CantaIR@IR^0,w,c
  9698  001F5E  ECD6  F00D         	call	_CantaPartAlta
  9699                           
  9700                           ;LcTLCD.c: 229:  (LATCbits.LATC2 = 1);
  9701                           
  9702                           ;LcTLCD.c: 230:  (LATCbits.LATC2 = 0);
  9703                           
  9704                           ;LcTLCD.c: 231:  (LATCbits.LATC2 = 0);
  9705                           
  9706                           ;LcTLCD.c: 232:  (LATCbits.LATC2 = 1);
  9707  001F62  ECE9  F00E         	call	PL82	;call to abstracted procedure
  9708                           
  9709                           ;LcTLCD.c: 233:  CantaPartBaixa(IR);
  9710  001F66  5057               	movf	CantaIR@IR^0,w,c
  9711  001F68  ECA5  F00D         	call	_CantaPartBaixa
  9712                           
  9713                           ;LcTLCD.c: 234:  (LATCbits.LATC2 = 1);
  9714                           
  9715                           ;LcTLCD.c: 235:  (LATCbits.LATC2 = 0);
  9716                           
  9717                           ;LcTLCD.c: 236:  (TRISBbits.TRISB0 = TRISDbits.TRISD2 = TRISDbits.TRISD1 = TRISDbits.TRI
      +                          SD0 = 1);
  9718  001F6C  EFE2  F00E         	goto	PL50	;call to abstracted procedure
  9719  001F70                     __end_of_CantaIR:
  9720                           	callstack 0
  9721                           
  9722 ;; *************** function _CantaPartBaixa *****************
  9723 ;; Defined at:
  9724 ;;		line 216 in file "LcTLCD.c"
  9725 ;; Parameters:    Size  Location     Type
  9726 ;;  c               1    wreg     unsigned char 
  9727 ;; Auto vars:     Size  Location     Type
  9728 ;;  c               1    6[COMRAM] unsigned char 
  9729 ;; Return value:  Size  Location     Type
  9730 ;;                  1    wreg      void 
  9731 ;; Registers used:
  9732 ;;		wreg, status,2, status,0
  9733 ;; Tracked objects:
  9734 ;;		On entry : 0/0
  9735 ;;		On exit  : 0/0
  9736 ;;		Unchanged: 0/0
  9737 ;; Data sizes:     COMRAM   BANK0   BANK1
  9738 ;;      Params:         0       0       0
  9739 ;;      Locals:         1       0       0
  9740 ;;      Temps:          1       0       0
  9741 ;;      Totals:         2       0       0
  9742 ;;Total ram usage:        2 bytes
  9743 ;; Hardware stack levels used: 1
  9744 ;; Hardware stack levels required when called: 2
  9745 ;; This function calls:
  9746 ;;		Nothing
  9747 ;; This function is called by:
  9748 ;;		_CantaIR
  9749 ;;		_CantaData
  9750 ;; This function uses a non-reentrant model
  9751 ;;
  9752                           
  9753                           	psect	text67
  9754  001B4A                     __ptext67:
  9755                           	callstack 0
  9756  001B4A                     _CantaPartBaixa:
  9757                           	callstack 23
  9758                           
  9759                           ;incstack = 0
  9760                           ;CantaPartBaixa@c stored from wreg
  9761  001B4A  6E56               	movwf	CantaPartBaixa@c^0,c
  9762                           
  9763                           ;LcTLCD.c: 217:   (LATBbits.LATB0 = (c & 0x08 ? 1 : 0));
  9764  001B4C  A656               	btfss	CantaPartBaixa@c^0,3,c
  9765  001B4E  D003               	goto	u2680
  9766  001B50  6A55               	clrf	??_CantaPartBaixa^0,c
  9767  001B52  2A55               	incf	??_CantaPartBaixa^0,f,c
  9768  001B54  D001               	goto	u2698
  9769  001B56                     u2680:
  9770  001B56  6A55               	clrf	??_CantaPartBaixa^0,c
  9771  001B58                     u2698:
  9772  001B58  508A               	movf	138,w,c	;volatile
  9773  001B5A  1855               	xorwf	??_CantaPartBaixa^0,w,c
  9774  001B5C  0BFE               	andlw	-2
  9775  001B5E  1855               	xorwf	??_CantaPartBaixa^0,w,c
  9776  001B60  6E8A               	movwf	138,c	;volatile
  9777                           
  9778                           ;LcTLCD.c: 218:   (LATDbits.LATD2 = (c & 0x04 ? 1 : 0));
  9779  001B62  A456               	btfss	CantaPartBaixa@c^0,2,c
  9780  001B64  D003               	goto	u2700
  9781  001B66  6A55               	clrf	??_CantaPartBaixa^0,c
  9782  001B68  2A55               	incf	??_CantaPartBaixa^0,f,c
  9783  001B6A  D001               	goto	u2718
  9784  001B6C                     u2700:
  9785  001B6C  6A55               	clrf	??_CantaPartBaixa^0,c
  9786  001B6E                     u2718:
  9787  001B6E  4655               	rlncf	??_CantaPartBaixa^0,f,c
  9788  001B70  4655               	rlncf	??_CantaPartBaixa^0,f,c
  9789  001B72  508C               	movf	140,w,c	;volatile
  9790  001B74  1855               	xorwf	??_CantaPartBaixa^0,w,c
  9791  001B76  0BFB               	andlw	-5
  9792  001B78  1855               	xorwf	??_CantaPartBaixa^0,w,c
  9793  001B7A  6E8C               	movwf	140,c	;volatile
  9794                           
  9795                           ;LcTLCD.c: 219:   (LATDbits.LATD1 = (c & 0x02 ? 1 : 0));
  9796  001B7C  A256               	btfss	CantaPartBaixa@c^0,1,c
  9797  001B7E  D003               	goto	u2720
  9798  001B80  6A55               	clrf	??_CantaPartBaixa^0,c
  9799  001B82  2A55               	incf	??_CantaPartBaixa^0,f,c
  9800  001B84  D001               	goto	u2738
  9801  001B86                     u2720:
  9802  001B86  6A55               	clrf	??_CantaPartBaixa^0,c
  9803  001B88                     u2738:
  9804  001B88  4655               	rlncf	??_CantaPartBaixa^0,f,c
  9805  001B8A  508C               	movf	140,w,c	;volatile
  9806  001B8C  1855               	xorwf	??_CantaPartBaixa^0,w,c
  9807  001B8E  0BFD               	andlw	-3
  9808  001B90  1855               	xorwf	??_CantaPartBaixa^0,w,c
  9809  001B92  6E8C               	movwf	140,c	;volatile
  9810                           
  9811                           ;LcTLCD.c: 220:   (LATDbits.LATD0 = (c & 0x01 ? 1 : 0));
  9812  001B94  A056               	btfss	CantaPartBaixa@c^0,0,c
  9813  001B96  D003               	goto	u2740
  9814  001B98  6A55               	clrf	??_CantaPartBaixa^0,c
  9815  001B9A  2A55               	incf	??_CantaPartBaixa^0,f,c
  9816  001B9C  D001               	goto	u2758
  9817  001B9E                     u2740:
  9818  001B9E  6A55               	clrf	??_CantaPartBaixa^0,c
  9819  001BA0                     u2758:
  9820  001BA0  508C               	movf	140,w,c	;volatile
  9821  001BA2  1855               	xorwf	??_CantaPartBaixa^0,w,c
  9822  001BA4  0BFE               	andlw	-2
  9823  001BA6  1855               	xorwf	??_CantaPartBaixa^0,w,c
  9824  001BA8  6E8C               	movwf	140,c	;volatile
  9825  001BAA  0012               	return		;funcret
  9826  001BAC                     __end_of_CantaPartBaixa:
  9827                           	callstack 0
  9828                           
  9829 ;; *************** function _CantaPartAlta *****************
  9830 ;; Defined at:
  9831 ;;		line 209 in file "LcTLCD.c"
  9832 ;; Parameters:    Size  Location     Type
  9833 ;;  c               1    wreg     unsigned char 
  9834 ;; Auto vars:     Size  Location     Type
  9835 ;;  c               1    6[COMRAM] unsigned char 
  9836 ;; Return value:  Size  Location     Type
  9837 ;;                  1    wreg      void 
  9838 ;; Registers used:
  9839 ;;		wreg, status,2, status,0
  9840 ;; Tracked objects:
  9841 ;;		On entry : 0/0
  9842 ;;		On exit  : 0/0
  9843 ;;		Unchanged: 0/0
  9844 ;; Data sizes:     COMRAM   BANK0   BANK1
  9845 ;;      Params:         0       0       0
  9846 ;;      Locals:         1       0       0
  9847 ;;      Temps:          1       0       0
  9848 ;;      Totals:         2       0       0
  9849 ;;Total ram usage:        2 bytes
  9850 ;; Hardware stack levels used: 1
  9851 ;; Hardware stack levels required when called: 2
  9852 ;; This function calls:
  9853 ;;		Nothing
  9854 ;; This function is called by:
  9855 ;;		_CantaIR
  9856 ;;		_CantaData
  9857 ;; This function uses a non-reentrant model
  9858 ;;
  9859                           
  9860                           	psect	text68
  9861  001BAC                     __ptext68:
  9862                           	callstack 0
  9863  001BAC                     _CantaPartAlta:
  9864                           	callstack 23
  9865                           
  9866                           ;incstack = 0
  9867                           ;CantaPartAlta@c stored from wreg
  9868  001BAC  6E56               	movwf	CantaPartAlta@c^0,c
  9869                           
  9870                           ;LcTLCD.c: 210:   (LATBbits.LATB0 = (c & 0x80 ? 1 : 0));
  9871  001BAE  AE56               	btfss	CantaPartAlta@c^0,7,c
  9872  001BB0  D003               	goto	u2600
  9873  001BB2  6A55               	clrf	??_CantaPartAlta^0,c
  9874  001BB4  2A55               	incf	??_CantaPartAlta^0,f,c
  9875  001BB6  D001               	goto	u2618
  9876  001BB8                     u2600:
  9877  001BB8  6A55               	clrf	??_CantaPartAlta^0,c
  9878  001BBA                     u2618:
  9879  001BBA  508A               	movf	138,w,c	;volatile
  9880  001BBC  1855               	xorwf	??_CantaPartAlta^0,w,c
  9881  001BBE  0BFE               	andlw	-2
  9882  001BC0  1855               	xorwf	??_CantaPartAlta^0,w,c
  9883  001BC2  6E8A               	movwf	138,c	;volatile
  9884                           
  9885                           ;LcTLCD.c: 211:   (LATDbits.LATD2 = (c & 0x40 ? 1 : 0));
  9886  001BC4  AC56               	btfss	CantaPartAlta@c^0,6,c
  9887  001BC6  D003               	goto	u2620
  9888  001BC8  6A55               	clrf	??_CantaPartAlta^0,c
  9889  001BCA  2A55               	incf	??_CantaPartAlta^0,f,c
  9890  001BCC  D001               	goto	u2638
  9891  001BCE                     u2620:
  9892  001BCE  6A55               	clrf	??_CantaPartAlta^0,c
  9893  001BD0                     u2638:
  9894  001BD0  4655               	rlncf	??_CantaPartAlta^0,f,c
  9895  001BD2  4655               	rlncf	??_CantaPartAlta^0,f,c
  9896  001BD4  508C               	movf	140,w,c	;volatile
  9897  001BD6  1855               	xorwf	??_CantaPartAlta^0,w,c
  9898  001BD8  0BFB               	andlw	-5
  9899  001BDA  1855               	xorwf	??_CantaPartAlta^0,w,c
  9900  001BDC  6E8C               	movwf	140,c	;volatile
  9901                           
  9902                           ;LcTLCD.c: 212:   (LATDbits.LATD1 = (c & 0x20 ? 1 : 0));
  9903  001BDE  AA56               	btfss	CantaPartAlta@c^0,5,c
  9904  001BE0  D003               	goto	u2640
  9905  001BE2  6A55               	clrf	??_CantaPartAlta^0,c
  9906  001BE4  2A55               	incf	??_CantaPartAlta^0,f,c
  9907  001BE6  D001               	goto	u2658
  9908  001BE8                     u2640:
  9909  001BE8  6A55               	clrf	??_CantaPartAlta^0,c
  9910  001BEA                     u2658:
  9911  001BEA  4655               	rlncf	??_CantaPartAlta^0,f,c
  9912  001BEC  508C               	movf	140,w,c	;volatile
  9913  001BEE  1855               	xorwf	??_CantaPartAlta^0,w,c
  9914  001BF0  0BFD               	andlw	-3
  9915  001BF2  1855               	xorwf	??_CantaPartAlta^0,w,c
  9916  001BF4  6E8C               	movwf	140,c	;volatile
  9917                           
  9918                           ;LcTLCD.c: 213:   (LATDbits.LATD0 = (c & 0x10 ? 1 : 0));
  9919  001BF6  A856               	btfss	CantaPartAlta@c^0,4,c
  9920  001BF8  D003               	goto	u2660
  9921  001BFA  6A55               	clrf	??_CantaPartAlta^0,c
  9922  001BFC  2A55               	incf	??_CantaPartAlta^0,f,c
  9923  001BFE  D001               	goto	u2678
  9924  001C00                     u2660:
  9925  001C00  6A55               	clrf	??_CantaPartAlta^0,c
  9926  001C02                     u2678:
  9927  001C02  508C               	movf	140,w,c	;volatile
  9928  001C04  1855               	xorwf	??_CantaPartAlta^0,w,c
  9929  001C06  0BFE               	andlw	-2
  9930  001C08  1855               	xorwf	??_CantaPartAlta^0,w,c
  9931  001C0A  6E8C               	movwf	140,c	;volatile
  9932  001C0C  0012               	return		;funcret
  9933  001C0E                     __end_of_CantaPartAlta:
  9934                           	callstack 0
  9935                           
  9936 ;; *************** function _EeInitAction *****************
  9937 ;; Defined at:
  9938 ;;		line 13 in file "EEPROM.c"
  9939 ;; Parameters:    Size  Location     Type
  9940 ;;		None
  9941 ;; Auto vars:     Size  Location     Type
  9942 ;;		None
  9943 ;; Return value:  Size  Location     Type
  9944 ;;                  1    wreg      void 
  9945 ;; Registers used:
  9946 ;;		wreg, status,2
  9947 ;; Tracked objects:
  9948 ;;		On entry : 0/0
  9949 ;;		On exit  : 0/0
  9950 ;;		Unchanged: 0/0
  9951 ;; Data sizes:     COMRAM   BANK0   BANK1
  9952 ;;      Params:         0       0       0
  9953 ;;      Locals:         0       0       0
  9954 ;;      Temps:          0       0       0
  9955 ;;      Totals:         0       0       0
  9956 ;;Total ram usage:        0 bytes
  9957 ;; Hardware stack levels used: 1
  9958 ;; Hardware stack levels required when called: 2
  9959 ;; This function calls:
  9960 ;;		Nothing
  9961 ;; This function is called by:
  9962 ;;		_main
  9963 ;; This function uses a non-reentrant model
  9964 ;;
  9965                           
  9966                           	psect	text69
  9967  00013C                     __ptext69:
  9968                           	callstack 0
  9969  00013C                     _EeInitAction:
  9970                           	callstack 28
  9971                           
  9972                           ;EEPROM.c: 14:     pointer = 0;
  9973                           
  9974                           ;incstack = 0
  9975  00013C  6A24               	clrf	_pointer@EEPROM$F1753^0,c
  9976                           
  9977                           ;EEPROM.c: 15:     pointerEeprom = 0;
  9978  00013E  6A23               	clrf	_pointerEeprom^0,c
  9979                           
  9980                           ;EEPROM.c: 16:     eepromState = 10;
  9981  000140  0E0A               	movlw	10
  9982  000142  6E21               	movwf	_eepromState^0,c
  9983  000144  0C0A               	retlw	10	;funcret
  9984  000146                     __end_of_EeInitAction:
  9985                           	callstack 0
  9986                           
  9987 ;; *************** function _RSI_High *****************
  9988 ;; Defined at:
  9989 ;;		line 27 in file "main.c"
  9990 ;; Parameters:    Size  Location     Type
  9991 ;;		None
  9992 ;; Auto vars:     Size  Location     Type
  9993 ;;		None
  9994 ;; Return value:  Size  Location     Type
  9995 ;;                  1    wreg      void 
  9996 ;; Registers used:
  9997 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9998 ;; Tracked objects:
  9999 ;;		On entry : 0/0
 10000 ;;		On exit  : 0/0
 10001 ;;		Unchanged: 0/0
 10002 ;; Data sizes:     COMRAM   BANK0   BANK1
 10003 ;;      Params:         0       0       0
 10004 ;;      Locals:         0       0       0
 10005 ;;      Temps:          4       0       0
 10006 ;;      Totals:         4       0       0
 10007 ;;Total ram usage:        4 bytes
 10008 ;; Hardware stack levels used: 1
 10009 ;; Hardware stack levels required when called: 1
 10010 ;; This function calls:
 10011 ;;		__TiRSITimer
 10012 ;; This function is called by:
 10013 ;;		Interrupt level 2
 10014 ;; This function uses a non-reentrant model
 10015 ;;
 10016                           
 10017                           	psect	intcode
 10018  000008                     __pintcode:
 10019                           	callstack 0
 10020  000008                     _RSI_High:
 10021                           	callstack 23
 10022                           
 10023                           ;incstack = 0
 10024  000008  827A               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 10025  00000A  CFD9 F051          	movff	fsr2l,??_RSI_High
 10026  00000E  CFDA F052          	movff	fsr2h,??_RSI_High+1
 10027  000012  CFF3 F053          	movff	prodl,??_RSI_High+2
 10028  000016  CFF4 F054          	movff	prodh,??_RSI_High+3
 10029                           
 10030                           ;main.c: 28:     LcGotoXY(0,0);
 10031  00001A  EC31  F00E         	call	__TiRSITimer	;wreg free
 10032  00001E  C054  FFF4         	movff	??_RSI_High+3,prodh
 10033  000022  C053  FFF3         	movff	??_RSI_High+2,prodl
 10034  000026  C052  FFDA         	movff	??_RSI_High+1,fsr2h
 10035  00002A  C051  FFD9         	movff	??_RSI_High,fsr2l
 10036  00002E  927A               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 10037  000030  0011               	retfie		f
 10038  000032                     __end_of_RSI_High:
 10039                           	callstack 0
 10040                           
 10041 ;; *************** function __TiRSITimer *****************
 10042 ;; Defined at:
 10043 ;;		line 46 in file "Timer.c"
 10044 ;; Parameters:    Size  Location     Type
 10045 ;;		None
 10046 ;; Auto vars:     Size  Location     Type
 10047 ;;		None
 10048 ;; Return value:  Size  Location     Type
 10049 ;;                  1    wreg      void 
 10050 ;; Registers used:
 10051 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 10052 ;; Tracked objects:
 10053 ;;		On entry : 0/0
 10054 ;;		On exit  : 0/0
 10055 ;;		Unchanged: 0/0
 10056 ;; Data sizes:     COMRAM   BANK0   BANK1
 10057 ;;      Params:         0       0       0
 10058 ;;      Locals:         0       0       0
 10059 ;;      Temps:          1       0       0
 10060 ;;      Totals:         1       0       0
 10061 ;;Total ram usage:        1 bytes
 10062 ;; Hardware stack levels used: 1
 10063 ;; This function calls:
 10064 ;;		Nothing
 10065 ;; This function is called by:
 10066 ;;		_RSI_High
 10067 ;; This function uses a non-reentrant model
 10068 ;;
 10069                           
 10070                           	psect	text71
 10071  001C62                     __ptext71:
 10072                           	callstack 0
 10073  001C62                     __TiRSITimer:
 10074                           	callstack 0
 10075                           
 10076                           ;Timer.c: 50:     TMR0H = 0xDF;
 10077                           
 10078                           ;incstack = 0
 10079                           
 10080                           ;Timer.c: 51:     TMR0L = 0x73;
 10081  001C62  D81E               	call	PL76	;call to abstracted procedure
 10082                           
 10083                           ;Timer.c: 53:     INTCONbits.TMR0IF = 0;
 10084  001C64  94F2               	bcf	242,2,c	;volatile
 10085                           
 10086                           ;Timer.c: 54:     h_Tics++;
 10087  001C66  4A0F               	infsnz	_h_Tics^0,f,c
 10088  001C68  2A10               	incf	(_h_Tics+1)^0,f,c
 10089                           
 10090                           ;Timer.c: 56:     if (h_Tics>=30000) {
 10091  001C6A  0E30               	movlw	48
 10092  001C6C  5C0F               	subwf	_h_Tics^0,w,c
 10093  001C6E  0E75               	movlw	117
 10094  001C70  5810               	subwfb	(_h_Tics+1)^0,w,c
 10095  001C72  A0D8               	btfss	status,0,c
 10096  001C74  0012               	return	
 10097                           
 10098                           ;Timer.c: 58:         for (counter=0;counter<9;counter++){
 10099  001C76  6A2A               	clrf	_counter^0,c
 10100  001C78                     i2l4550:
 10101  001C78  0E08               	movlw	8
 10102  001C7A  642A               	cpfsgt	_counter^0,c
 10103  001C7C  D001               	goto	i2l4554
 10104  001C7E  D00D               	goto	i2l929
 10105  001C80                     i2l4554:
 10106                           
 10107                           ;Timer.c: 59:             if (s_Timers[counter].b_busy==1){
 10108  001C80  EC2E  F00F         	call	PL26	;call to abstracted procedure
 10109  001C84  04DE               	decf	postinc2,w,c
 10110  001C86  E107               	bnz	i2l4558
 10111                           
 10112                           ;Timer.c: 60:                 s_Timers[counter].h_initialTics -= h_Tics;
 10113  001C88  502A               	movf	_counter^0,w,c
 10114  001C8A  ECA4  F00F         	call	PL48	;call to abstracted procedure
 10115  001C8E  500F               	movf	_h_Tics^0,w,c
 10116  001C90  5EDE               	subwf	postinc2,f,c
 10117  001C92  5010               	movf	(_h_Tics+1)^0,w,c
 10118  001C94  5ADD               	subwfb	postdec2,f,c
 10119  001C96                     i2l4558:
 10120                           
 10121                           ;Timer.c: 62:         }
 10122  001C96  2A2A               	incf	_counter^0,f,c
 10123  001C98  D7EF               	goto	i2l4550
 10124  001C9A                     i2l929:
 10125                           
 10126                           ;Timer.c: 63:         h_Tics=0;
 10127  001C9A  6A0F               	clrf	_h_Tics^0,c
 10128  001C9C  6A10               	clrf	(_h_Tics+1)^0,c
 10129  001C9E  0012               	return		;funcret
 10130  001CA0                     __end_of__TiRSITimer:
 10131                           	callstack 0
 10132  001CA0                     PL76:
 10133                           	callstack 27
 10134  001CA0  0EDF               	movlw	223
 10135  001CA2  6ED7               	movwf	215,c	;volatile
 10136  001CA4  0E73               	movlw	115
 10137  001CA6  6ED6               	movwf	214,c	;volatile
 10138  001CA8  0C73               	retlw	115
 10139  001CAA                     __end_ofPL76:
 10140                           	callstack 0
 10141                           
 10142                           	psect	rparam
 10143  0000                     
 10144                           	psect	temp
 10145  00007A                     btemp:
 10146                           	callstack 0
 10147  00007A                     	ds	1
 10148  0000                     int$flags	set	btemp
 10149  0000                     wtemp8	set	btemp+1
 10150  0000                     ttemp5	set	btemp+1
 10151  0000                     ttemp6	set	btemp+4
 10152  0000                     ttemp7	set	btemp+8
 10153                           
 10154                           	psect	idloc
 10155                           
 10156                           ;Config register IDLOC0 @ 0x200000
 10157                           ;	unspecified, using default values
 10158  200000                     	org	2097152
 10159  200000  FF                 	db	255
 10160                           
 10161                           ;Config register IDLOC1 @ 0x200001
 10162                           ;	unspecified, using default values
 10163  200001                     	org	2097153
 10164  200001  FF                 	db	255
 10165                           
 10166                           ;Config register IDLOC2 @ 0x200002
 10167                           ;	unspecified, using default values
 10168  200002                     	org	2097154
 10169  200002  FF                 	db	255
 10170                           
 10171                           ;Config register IDLOC3 @ 0x200003
 10172                           ;	unspecified, using default values
 10173  200003                     	org	2097155
 10174  200003  FF                 	db	255
 10175                           
 10176                           ;Config register IDLOC4 @ 0x200004
 10177                           ;	unspecified, using default values
 10178  200004                     	org	2097156
 10179  200004  FF                 	db	255
 10180                           
 10181                           ;Config register IDLOC5 @ 0x200005
 10182                           ;	unspecified, using default values
 10183  200005                     	org	2097157
 10184  200005  FF                 	db	255
 10185                           
 10186                           ;Config register IDLOC6 @ 0x200006
 10187                           ;	unspecified, using default values
 10188  200006                     	org	2097158
 10189  200006  FF                 	db	255
 10190                           
 10191                           ;Config register IDLOC7 @ 0x200007
 10192                           ;	unspecified, using default values
 10193  200007                     	org	2097159
 10194  200007  FF                 	db	255
 10195                           
 10196                           	psect	config
 10197                           
 10198                           ; Padding undefined space
 10199  300000                     	org	3145728
 10200  300000  FF                 	db	255
 10201                           
 10202                           ;Config register CONFIG1H @ 0x300001
 10203                           ;	Oscillator
 10204                           ;	OSC = HSPLL, HS oscillator, PLL enabled (Clock Frequency = 4 x FOSC1)
 10205                           ;	Fail-Safe Clock Monitor Enable bit
 10206                           ;	FCMEN = 0x0, unprogrammed default
 10207                           ;	Internal/External Oscillator Switchover bit
 10208                           ;	IESO = 0x0, unprogrammed default
 10209  300001                     	org	3145729
 10210  300001  06                 	db	6
 10211                           
 10212                           ;Config register CONFIG2L @ 0x300002
 10213                           ;	Power-up Timer Enable bit
 10214                           ;	PWRT = OFF, PWRT disabled
 10215                           ;	Brown-out Reset Enable bits
 10216                           ;	BOR = OFF, Brown-out Reset disabled in hardware and software
 10217                           ;	Brown-out Reset Voltage bits
 10218                           ;	BORV = 0x3, unprogrammed default
 10219  300002                     	org	3145730
 10220  300002  19                 	db	25
 10221                           
 10222                           ;Config register CONFIG2H @ 0x300003
 10223                           ;	Watchdog Timer Enable bit
 10224                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
 10225                           ;	Watchdog Timer Postscale Select bits
 10226                           ;	WDTPS = 0xF, unprogrammed default
 10227  300003                     	org	3145731
 10228  300003  1E                 	db	30
 10229                           
 10230                           ; Padding undefined space
 10231  300004                     	org	3145732
 10232  300004  FF                 	db	255
 10233                           
 10234                           ;Config register CONFIG3H @ 0x300005
 10235                           ;	CCP2 MUX bit
 10236                           ;	CCP2MX = 0x1, unprogrammed default
 10237                           ;	PORTB A/D Enable bit
 10238                           ;	PBADEN = DIG, PORTB<4:0> pins are configured as digital I/O on Reset
 10239                           ;	Low-Power Timer1 Oscillator Enable bit
 10240                           ;	LPT1OSC = 0x0, unprogrammed default
 10241                           ;	MCLR Pin Enable bit
 10242                           ;	MCLRE = ON, MCLR pin enabled; RE3 input pin disabled
 10243  300005                     	org	3145733
 10244  300005  81                 	db	129
 10245                           
 10246                           ;Config register CONFIG4L @ 0x300006
 10247                           ;	Stack Full/Underflow Reset Enable bit
 10248                           ;	STVREN = 0x1, unprogrammed default
 10249                           ;	Single-Supply ICSP Enable bit
 10250                           ;	LVP = OFF, Single-Supply ICSP disabled
 10251                           ;	Boot Block Size Select bits
 10252                           ;	BBSIZ = 0x0, unprogrammed default
 10253                           ;	Extended Instruction Set Enable bit
 10254                           ;	XINST = 0x0, unprogrammed default
 10255                           ;	Background Debugger Enable bit
 10256                           ;	DEBUG = OFF, Background debugger disabled, RB6 and RB7 configured as general purpose I
      +                          /O pins
 10257  300006                     	org	3145734
 10258  300006  81                 	db	129
 10259                           
 10260                           ; Padding undefined space
 10261  300007                     	org	3145735
 10262  300007  FF                 	db	255
 10263                           
 10264                           ;Config register CONFIG5L @ 0x300008
 10265                           ;	unspecified, using default values
 10266                           ;	Code Protection bit
 10267                           ;	CP0 = 0x1, unprogrammed default
 10268                           ;	Code Protection bit
 10269                           ;	CP1 = 0x1, unprogrammed default
 10270  300008                     	org	3145736
 10271  300008  03                 	db	3
 10272                           
 10273                           ;Config register CONFIG5H @ 0x300009
 10274                           ;	unspecified, using default values
 10275                           ;	Boot Block Code Protection bitProtect Boot
 10276                           ;	CPB = 0x1, unprogrammed default
 10277                           ;	Data EEPROM Code Protection bit
 10278                           ;	CPD = 0x1, unprogrammed default
 10279  300009                     	org	3145737
 10280  300009  C0                 	db	192
 10281                           
 10282                           ;Config register CONFIG6L @ 0x30000A
 10283                           ;	unspecified, using default values
 10284                           ;	Write Protection bit
 10285                           ;	WRT0 = 0x1, unprogrammed default
 10286                           ;	Write Protection bit
 10287                           ;	WRT1 = 0x1, unprogrammed default
 10288  30000A                     	org	3145738
 10289  30000A  03                 	db	3
 10290                           
 10291                           ;Config register CONFIG6H @ 0x30000B
 10292                           ;	unspecified, using default values
 10293                           ;	Configuration Register Write Protection bit
 10294                           ;	WRTC = 0x1, unprogrammed default
 10295                           ;	Boot Block Write Protection bit
 10296                           ;	WRTB = 0x1, unprogrammed default
 10297                           ;	Data EEPROM Write Protection bit
 10298                           ;	WRTD = 0x1, unprogrammed default
 10299  30000B                     	org	3145739
 10300  30000B  E0                 	db	224
 10301                           
 10302                           ;Config register CONFIG7L @ 0x30000C
 10303                           ;	unspecified, using default values
 10304                           ;	Table Read Protection bit
 10305                           ;	EBTR0 = 0x1, unprogrammed default
 10306                           ;	Table Read Protection bit
 10307                           ;	EBTR1 = 0x1, unprogrammed default
 10308  30000C                     	org	3145740
 10309  30000C  03                 	db	3
 10310                           
 10311                           ;Config register CONFIG7H @ 0x30000D
 10312                           ;	unspecified, using default values
 10313                           ;	Boot Block Table Read Protection bit
 10314                           ;	EBTRB = 0x1, unprogrammed default
 10315  30000D                     	org	3145741
 10316  30000D  40                 	db	64
 10317                           tosu	equ	0xFFF
 10318                           tosh	equ	0xFFE
 10319                           tosl	equ	0xFFD
 10320                           stkptr	equ	0xFFC
 10321                           pclatu	equ	0xFFB
 10322                           pclath	equ	0xFFA
 10323                           pcl	equ	0xFF9
 10324                           tblptru	equ	0xFF8
 10325                           tblptrh	equ	0xFF7
 10326                           tblptrl	equ	0xFF6
 10327                           tablat	equ	0xFF5
 10328                           prodh	equ	0xFF4
 10329                           prodl	equ	0xFF3
 10330                           indf0	equ	0xFEF
 10331                           postinc0	equ	0xFEE
 10332                           postdec0	equ	0xFED
 10333                           preinc0	equ	0xFEC
 10334                           plusw0	equ	0xFEB
 10335                           fsr0h	equ	0xFEA
 10336                           fsr0l	equ	0xFE9
 10337                           wreg	equ	0xFE8
 10338                           indf1	equ	0xFE7
 10339                           postinc1	equ	0xFE6
 10340                           postdec1	equ	0xFE5
 10341                           preinc1	equ	0xFE4
 10342                           plusw1	equ	0xFE3
 10343                           fsr1h	equ	0xFE2
 10344                           fsr1l	equ	0xFE1
 10345                           bsr	equ	0xFE0
 10346                           indf2	equ	0xFDF
 10347                           postinc2	equ	0xFDE
 10348                           postdec2	equ	0xFDD
 10349                           preinc2	equ	0xFDC
 10350                           plusw2	equ	0xFDB
 10351                           fsr2h	equ	0xFDA
 10352                           fsr2l	equ	0xFD9
 10353                           status	equ	0xFD8

Data Sizes:
    Strings     98
    Constant    62
    Data        100
    BSS         178
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     23     121
    BANK0           128      2     122
    BANK1           256     19      80

Pointer List with Targets:

    menuStrings@Menu$F1859	PTR unsigned char [5] size(1) Largest target is 30
		 -> STR_20(CODE[17]), STR_19(CODE[17]), STR_18(CODE[30]), STR_17(CODE[17]), 
		 -> STR_16(CODE[17]), 

    menuStrings@Menu$F707	PTR unsigned char [5] size(1) Largest target is 30
		 -> STR_15(CODE[17]), STR_14(CODE[17]), STR_13(CODE[30]), STR_12(CODE[17]), 
		 -> STR_11(CODE[17]), 

    menuStrings@Menu$F546	PTR unsigned char [5] size(1) Largest target is 30
		 -> STR_10(CODE[17]), STR_9(CODE[17]), STR_8(CODE[30]), STR_7(CODE[17]), 
		 -> STR_6(CODE[17]), 

    menuStrings	PTR unsigned char [5] size(1) Largest target is 30
		 -> STR_5(CODE[17]), STR_4(CODE[17]), STR_3(CODE[30]), STR_2(CODE[17]), 
		 -> STR_1(CODE[17]), 


Critical Paths under _main in COMRAM

    _motorTimer->_LcPutTime
    _motorTX->_TiGetTics
    _motorRX->_TiGetTics
    _motorMusic->_playNote
    _playNote->_TiGetTics
    _motorKey->_TiGetTics
    _motorJoystick->_TiGetTics
    _menuMotor->_LcPutScore
    _menuMotor->_LcPutTime
    _menuMotor->_getUser
    _startMusic->_TiResetTics
    _sendMyTX->_TiResetTics
    _LcScroll->_CantaIR
    _LcPutTime->_LcPutChar
    _LcPutScore->_LcPutChar
    ___lbdiv->___lbmod
    _LcPutChar->_LcGotoXY
    _LcGotoXY->_WaitForBusy
    _CantaData->_CantaPartAlta
    _CantaData->_CantaPartBaixa
    _LcCursorOn->_WaitForBusy
    _LcCursorOff->_WaitForBusy
    _LcClear->_Espera
    _KeyResetValue->_TiResetTics
    _initTX->_TiGetTimer
    _initTX->_TiResetTics
    _initMusic->_TiGetTimer
    _initMenu->_TiGetTimer
    _initMenu->_TiResetTics
    _initMenu->_readEeprom
    _initKeypad->_TiGetTimer
    _initKeypad->_TiResetTics
    _initJoystick->_TiGetTimer
    _initJoystick->_TiResetTics
    _TiInitTimer->_TiGetTimer
    _TiInitTimer->_TiResetTics
    _LcInit->_Espera
    _WaitForBusy->_TiGetTics
    _Espera->_TiGetTics
    _CantaIR->_CantaPartAlta
    _CantaIR->_CantaPartBaixa

Critical Paths under _RSI_High in COMRAM

    _RSI_High->__TiRSITimer

Critical Paths under _main in BANK0

    _main->_menuMotor
    _main->_motorTimer

Critical Paths under _RSI_High in BANK0

    None.

Critical Paths under _main in BANK1

    _menuMotor->_writeEeprom

Critical Paths under _RSI_High in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   47222
                       _EeInitAction
                            _LcClear
                           _LcGotoXY
                             _LcInit
                         _TiGetTimer
                        _TiInitTimer
                        _TiResetTics
                           _initData
                       _initJoystick
                         _initKeypad
                           _initMenu
                          _initMusic
                            _initSIO
                             _initTX
                          _menuMotor
                        _motorEeprom
                      _motorJoystick
                           _motorKey
                         _motorMusic
                            _motorRX
                            _motorTX
                         _motorTimer
 ---------------------------------------------------------------------------------
 (1) _motorTimer                                           2     2      0   14024
                                              0 BANK0      2     2      0
                           _LcGotoXY
                          _LcPutChar
                          _LcPutTime
                          _TiGetTics
                        _TiResetTics
 ---------------------------------------------------------------------------------
 (1) _motorTX                                              2     2      0      67
                                             12 COMRAM     2     2      0
                          _TiGetTics
                        _TiResetTics
 ---------------------------------------------------------------------------------
 (1) _motorRX                                              2     2      0      89
                                             12 COMRAM     2     2      0
                             _TXbusy
                          _TiGetTics
                        _TiResetTics
                              _setTX
 ---------------------------------------------------------------------------------
 (1) _motorMusic                                           2     2      0     156
                                             15 COMRAM     2     2      0
                          _TiGetTics
                        _TiResetTics
                           _playNote
 ---------------------------------------------------------------------------------
 (2) _playNote                                             3     3      0      89
                                             12 COMRAM     3     3      0
                          _TiGetTics
                        _TiResetTics
 ---------------------------------------------------------------------------------
 (1) _motorKey                                             2     2      0     780
                                             12 COMRAM     2     2      0
                      _KeyResetValue
                          _TiGetTics
                        _TiResetTics
                            ___lbmod
 ---------------------------------------------------------------------------------
 (1) _motorJoystick                                        2     2      0      89
                                             12 COMRAM     2     2      0
                             _TXbusy
                          _TiGetTics
                        _TiResetTics
                            _getGame
                _getPositionJoystick
              _resetPositionJoystick
                              _setTX
 ---------------------------------------------------------------------------------
 (2) _getGame                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _motorEeprom                                          2     2      0       0
                                              5 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _menuMotor                                            2     2      0   24643
                                              0 BANK0      2     2      0
                       _KeyGetNumber
                        _KeyGetPress
                          _KeyGetSMS
                        _KeyGetValue
                      _KeyResetValue
                            _LcClear
                        _LcCursorOff
                         _LcCursorOn
                           _LcGotoXY
                          _LcPutChar
                         _LcPutScore
                          _LcPutTime
                           _LcScroll
                             _RXdata
                             _TXbusy
                         _TXgetState
                          _TiGetTics
                        _TiResetTics
                            ___lbdiv
                            ___lbmod
                        _cleanEeprom
                           _endMusic
                  _getCentreJoystick
                    _getDoneCharging
                  _getFirstDirection
            _getFirstDirectionScores
                _getPositionJoystick
                              _getRX
                           _getScore
                            _getUser
                          _isPressed
                         _readEeprom
                   _readEepromScores
              _resetPositionJoystick
                           _sendMyTX
                              _setTX
                       _showTimerPic
                         _startMusic
                       _stopTimerPic
                        _writeEeprom
                  _writeEepromScores
 ---------------------------------------------------------------------------------
 (2) _writeEepromScores                                    3     0      3     500
                                              5 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (2) _writeEeprom                                         19     0     19     422
                                              0 BANK1     19     0     19
 ---------------------------------------------------------------------------------
 (2) _stopTimerPic                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _startMusic                                           0     0      0      22
                        _TiResetTics
 ---------------------------------------------------------------------------------
 (2) _showTimerPic                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _setTX                                                1     1      0      22
                                              5 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _sendMyTX                                             1     1      0      44
                                              6 COMRAM     1     1      0
                        _TiResetTics
 ---------------------------------------------------------------------------------
 (2) _resetPositionJoystick                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _readEepromScores                                     1     1      0      22
                                              5 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _isPressed                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _getUser                                             18     0     18       0
                                              5 COMRAM    18     0     18
 ---------------------------------------------------------------------------------
 (2) _getScore                                             2     0      2       0
                                              5 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _getRX                                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _getPositionJoystick                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _getFirstDirectionScores                              1     1      0      22
                                              5 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _getFirstDirection                                    1     1      0      22
                                              5 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _getDoneCharging                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _getCentreJoystick                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _endMusic                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _cleanEeprom                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TXgetState                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TXbusy                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _RXdata                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _LcScroll                                             0     0      0     220
                            _CantaIR
 ---------------------------------------------------------------------------------
 (2) _LcPutTime                                            1     1      0    5665
                                             22 COMRAM     1     1      0
                          _LcPutChar
                            ___lbdiv
                            ___lbmod
 ---------------------------------------------------------------------------------
 (2) _LcPutScore                                           1     1      0    5797
                                             22 COMRAM     1     1      0
                          _LcPutChar
                            ___lbdiv
                            ___lbmod
 ---------------------------------------------------------------------------------
 (3) ___lbmod                                              4     3      1     691
                                              5 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 (3) ___lbdiv                                              4     3      1     618
                                              9 COMRAM     4     3      1
                            ___lbmod (ARG)
 ---------------------------------------------------------------------------------
 (3) _LcPutChar                                            1     1      0    4312
                                             21 COMRAM     1     1      0
                          _CantaData
                           _LcGotoXY
                        _WaitForBusy
 ---------------------------------------------------------------------------------
 (4) _LcGotoXY                                             8     7      1    3980
                                             13 COMRAM     8     7      1
                            _CantaIR
                        _WaitForBusy
 ---------------------------------------------------------------------------------
 (4) _CantaData                                            1     1      0     220
                                              7 COMRAM     1     1      0
                      _CantaPartAlta
                     _CantaPartBaixa
 ---------------------------------------------------------------------------------
 (2) _LcCursorOn                                           0     0      0     310
                            _CantaIR
                        _WaitForBusy
 ---------------------------------------------------------------------------------
 (2) _LcCursorOff                                          0     0      0     310
                            _CantaIR
                        _WaitForBusy
 ---------------------------------------------------------------------------------
 (2) _LcClear                                              0     0      0    1507
                            _CantaIR
                             _Espera
                        _WaitForBusy
 ---------------------------------------------------------------------------------
 (2) _KeyResetValue                                        0     0      0      22
                        _TiResetTics
 ---------------------------------------------------------------------------------
 (2) _KeyGetValue                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _KeyGetSMS                                            1     1      0      23
                                              5 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _KeyGetPress                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _KeyGetNumber                                         1     1      0      23
                                              5 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _initTX                                               0     0      0      22
                         _TiGetTimer
                        _TiResetTics
 ---------------------------------------------------------------------------------
 (1) _initSIO                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initMusic                                            0     0      0       0
                         _TiGetTimer
 ---------------------------------------------------------------------------------
 (1) _initMenu                                             0     0      0      44
                         _TiGetTimer
                        _TiResetTics
                         _readEeprom
 ---------------------------------------------------------------------------------
 (2) _readEeprom                                           1     1      0      22
                                              5 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _initKeypad                                           0     0      0      22
                         _TiGetTimer
                        _TiResetTics
 ---------------------------------------------------------------------------------
 (1) _initJoystick                                         0     0      0      22
                         _TiGetTimer
                        _TiResetTics
 ---------------------------------------------------------------------------------
 (1) _initData                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _TiInitTimer                                          0     0      0      22
                         _TiGetTimer
                        _TiResetTics
 ---------------------------------------------------------------------------------
 (1) _LcInit                                               4     3      1    1733
                                             16 COMRAM     4     3      1
                            _CantaIR
                 _EscriuPrimeraOrdre
                             _Espera
                         _TiGetTimer
                        _WaitForBusy
 ---------------------------------------------------------------------------------
 (4) _WaitForBusy                                          1     1      0      90
                                             12 COMRAM     1     1      0
                          _TiGetTics
                        _TiResetTics
 ---------------------------------------------------------------------------------
 (2) _TiGetTimer                                           1     1      0       0
                                              5 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _Espera                                               4     0      4    1197
                                             12 COMRAM     4     0      4
                          _TiGetTics
                        _TiResetTics
 ---------------------------------------------------------------------------------
 (2) _TiResetTics                                          1     1      0      22
                                              5 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _TiGetTics                                            7     5      2      45
                                              5 COMRAM     7     5      2
 ---------------------------------------------------------------------------------
 (2) _EscriuPrimeraOrdre                                   2     2      0      60
                                              5 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (5) _CantaIR                                              1     1      0     220
                                              7 COMRAM     1     1      0
                      _CantaPartAlta
                     _CantaPartBaixa
 ---------------------------------------------------------------------------------
 (6) _CantaPartBaixa                                       2     2      0      88
                                              5 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (6) _CantaPartAlta                                        2     2      0      88
                                              5 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _EeInitAction                                         0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _RSI_High                                             4     4      0       0
                                              1 COMRAM     4     4      0
                        __TiRSITimer
 ---------------------------------------------------------------------------------
 (8) __TiRSITimer                                          1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _EeInitAction
   _LcClear
     _CantaIR
       _CantaPartAlta
       _CantaPartBaixa
     _Espera
       _TiGetTics
       _TiResetTics
     _WaitForBusy
       _TiGetTics
       _TiResetTics
   _LcGotoXY
     _CantaIR
     _WaitForBusy
   _LcInit
     _CantaIR
     _EscriuPrimeraOrdre
     _Espera
     _TiGetTimer
     _WaitForBusy
   _TiGetTimer
   _TiInitTimer
     _TiGetTimer
     _TiResetTics
   _TiResetTics
   _initData
   _initJoystick
     _TiGetTimer
     _TiResetTics
   _initKeypad
     _TiGetTimer
     _TiResetTics
   _initMenu
     _TiGetTimer
     _TiResetTics
     _readEeprom
   _initMusic
     _TiGetTimer
   _initSIO
   _initTX
     _TiGetTimer
     _TiResetTics
   _menuMotor
     _KeyGetNumber
     _KeyGetPress
     _KeyGetSMS
     _KeyGetValue
     _KeyResetValue
       _TiResetTics
     _LcClear
     _LcCursorOff
       _CantaIR
       _WaitForBusy
     _LcCursorOn
       _CantaIR
       _WaitForBusy
     _LcGotoXY
     _LcPutChar
       _CantaData
         _CantaPartAlta
         _CantaPartBaixa
       _LcGotoXY
       _WaitForBusy
     _LcPutScore
       _LcPutChar
       ___lbdiv
         ___lbmod (ARG)
       ___lbmod
     _LcPutTime
       _LcPutChar
       ___lbdiv
       ___lbmod
     _LcScroll
       _CantaIR
     _RXdata
     _TXbusy
     _TXgetState
     _TiGetTics
     _TiResetTics
     ___lbdiv
     ___lbmod
     _cleanEeprom
     _endMusic
     _getCentreJoystick
     _getDoneCharging
     _getFirstDirection
     _getFirstDirectionScores
     _getPositionJoystick
     _getRX
     _getScore
     _getUser
     _isPressed
     _readEeprom
     _readEepromScores
     _resetPositionJoystick
     _sendMyTX
       _TiResetTics
     _setTX
     _showTimerPic
     _startMusic
       _TiResetTics
     _stopTimerPic
     _writeEeprom
     _writeEepromScores
   _motorEeprom
   _motorJoystick
     _TXbusy
     _TiGetTics
     _TiResetTics
     _getGame
     _getPositionJoystick
     _resetPositionJoystick
     _setTX
   _motorKey
     _KeyResetValue
     _TiGetTics
     _TiResetTics
     ___lbmod
   _motorMusic
     _TiGetTics
     _TiResetTics
     _playNote
       _TiGetTics
       _TiResetTics
   _motorRX
     _TXbusy
     _TiGetTics
     _TiResetTics
     _setTX
   _motorTX
     _TiGetTics
     _TiResetTics
   _motorTimer
     _LcGotoXY
     _LcPutChar
     _LcPutTime
     _TiGetTics
     _TiResetTics

 _RSI_High (ROOT)
   __TiRSITimer

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             1FF      0       0      22        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100     13      50       7       31.2%
BITBANK0            80      0       0       4        0.0%
BANK0               80      2      7A       5       95.3%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     17      79       1       96.0%
BITBIGSFRhhhlhh     19      0       0       9        0.0%
BITBIGSFRhhhh        D      0       0       8        0.0%
BITBIGSFRhhhll       B      0       0      11        0.0%
BITBIGSFRhlll        8      0       0      17        0.0%
BITBIGSFRhllhll      7      0       0      16        0.0%
BITBIGSFRhlhlh       7      0       0      14        0.0%
BITBIGSFRhlhh        7      0       0      13        0.0%
BITBIGSFRllh         6      0       0      19        0.0%
BITBIGSFRlhh         5      0       0      18        0.0%
BITBIGSFRhhhlhl      4      0       0      10        0.0%
BITBIGSFRhllhh       1      0       0      15        0.0%
BITBIGSFRhhl         1      0       0      12        0.0%
BITBIGSFRlll         1      0       0      20        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     143      21        0.0%
DATA                 0      0     143       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.36 build 20220127204148 
Symbol Table                                                                                   Thu May 26 13:44:48 2022

                TiResetTics@Handle 0055                                 PL2 110C  
                               PL4 111C                                 PL6 1128  
                               PL8 1138                      ??_KeyGetValue 0055  
                    ??_KeyGetPress 0055                                PL10 1144  
                              PL20 118C                                PL12 1152  
                              PL30 11A0                                PL22 13CC  
                              PL14 115E                                PL40 153E  
                              PL32 11B0                                PL24 1198  
                              PL16 1172                                PL50 1DC4  
                              PL42 11D6                                PL34 11B8  
                              PL26 1E5C                                PL18 117C  
                              PL60 13EC                                PL52 13DA  
                              PL44 11E0                                PL36 11C6  
                              PL28 16EE                                PL70 00D6  
                              PL62 11EE                                PL54 1548  
                              PL46 11E8                                PL38 11CE  
                              PL80 1212                                PL72 162E  
                              PL64 11F8                                PL56 197A  
                              PL48 1F48                                PL90 122C  
                              PL82 1DD2                                PL74 1556  
                              PL66 11FE                                PL58 13E4  
                              PL92 1232                                PL84 121C  
                              PL76 1CA0                                PL68 1208  
                              PL94 1B42                                PL86 13FE  
                              PL78 13F6                                PL88 1224  
              readEepromScores@num 0055                                l310 04D8  
                              l305 04B0                                l440 0AE2  
                              l328 0566                                l701 140E  
                              l703 1414                                l704 141A  
                              l705 1420                                l474 0D56  
                              l722 149E                                l731 150A  
                              l820 171A                                l716 1486  
                              l582 1580                                l718 148E  
                              l591 15A6                                l816 1708  
                              l585 1588                                l594 15C6  
                              l827 1754                                l588 15A4  
                              l958 1ADC                                u500 196A  
                              u440 1922                                u460 1938  
                              u518 196C                                u480 1952  
                              u458 1924                                u478 193A  
                              u498 1954                                _SMS 0030  
                              _aux 0040                   ??_CantaPartBaixa 0055  
                              wreg 000FE8                     ??_KeyGetNumber 0055  
                 ?_getDoneCharging 0050                               l1021 126C  
                             l1032 1310                               l1041 135A  
                             l1042 135E                               l1027 12A0  
                             l1037 1332                               l1029 12EC  
                             l1134 18D2                               l1039 1354  
                             l1135 18D8                               l1137 190E  
                             l1186 198A                               l1198 1814  
                             l4200 1736                               l4206 175C  
                             l4302 1E0C                               l4310 1E72  
                             l4160 1CFE                               l4208 1776  
                             l4326 1E42                               l4334 1E4C  
                             l4182 1D24                               l4190 170C  
                             l4318 1E88                               l6022 12F6  
                             l4256 1C30                               l6016 12E6  
                             l6104 1388                               l6112 1894  
                             l4186 16FC                               l4274 1C58  
                             l4290 1DF0                               l4522 1B3A  
                             l6018 12EA                               l6202 19D0  
                             l4196 1728                               l4268 1C4A  
                             l7100 0BD2                               l6044 1316  
                             l4278 1FDC                               l4286 1DEA  
                             l4518 1B1C                               l7014 0ADE  
                             l7006 0ABA                               l6126 18C0  
                             l6128 18C6                               l6136 18F2  
                             l6208 19E4                               l4626 1654  
                             l4570 1D7E                               l4298 1E04  
                             l7106 0BEC                               l7026 0AF2  
                             l6170 1858                               l4580 1D90  
                             l7300 0E3A                               l7116 0C0A  
                             l7060 0B5E                               l7036 0B12  
                             l6068 1344                               l6172 185E  
                             l6156 183E                               l6164 1848  
                             l6148 1822                               l4574 1D86  
                             l7126 0C2A                               l7046 0B48  
                             l7038 0B18                               l6510 0498  
                             l6502 0478                               l6158 1840  
                             l7128 0C30                               l7072 0B80  
                             l6512 049E                               l6424 038C  
                             l6408 035A                               l6360 02C0  
                             l6352 02A6                               l6168 1856  
                             l7226 0D7C                               l7090 0BAE  
                             l6610 05E4                               l6450 03CE  
                             l6418 037C                               l6098 1384  
                             l6178 1878                               l6186 198E  
                             l7252 0DC4                               l7180 0CDC  
                             l7164 0CA4                               l7148 0C6C  
                             l6612 05EA                               l6524 04B8  
                             l6436 03A8                               l6380 0300  
                             l6372 02E8                               l6356 02B6  
                             l5812 1606                               l6196 19C6  
                             l7420 1AA0                               l7334 0E94  
                             l7326 0E7A                               l7318 0E6C  
                             l7238 0DA0                               l6606 05E0  
                             l6542 04F4                               l6534 04DC  
                             l6470 040E                               l6358 02BC  
                             l5910 123C                               l5830 1426  
                             l7406 1A74                               l7360 0EF8  
                             l7352 0ED2                               l7328 0E82  
                             l6712 0724                               l6640 065A  
                             l6632 064C                               l6616 05FA  
                             l6376 02F8                               l5832 1440  
                             l7424 1ABE                               l7346 0EC0  
                             l7266 0DE2                               l7258 0DCC  
                             l6722 076A                               l6626 0636  
                             l6474 0420                               l6466 040A  
                             l6458 03F2                               l5818 1610  
                             l5826 1406                               l7418 1A9C  
                             l7380 0F2C                               l7196 0D1E  
                             l6804 0848                               l6740 0798  
                             l6732 0786                               l6636 0650  
                             l6628 063E                               l6548 04F8  
                             l6396 0338                               l6388 0324  
                             l5940 1266                               l5772 15A0  
                             l5748 1562                               l5860 1496  
                             l5836 1450                               l7428 1AC2  
                             l7286 0E0E                               l6902 0944  
                             l6742 07A0                               l6734 0788  
                             l6726 076E                               l6654 068A  
                             l6494 0454                               l6478 0424  
                             l5782 15B8                               l5766 1596  
                             l5758 1584                               l5870 14BA  
                             l5862 149A                               l5846 1462  
                             l6912 0962                               l6816 0866  
                             l6760 07BC                               l6752 07B0  
                             l6664 06A0                               l6584 0572  
                             l6568 053A                               l5944 1272  
                             l5792 15C8                               l7472 1A50  
                             l6922 09A4                               l6834 0896  
                             l6754 07B4                               l6682 06D6  
                             l6594 0592                               l7394 0F4E  
                             l5874 14CC                               l6940 09EE  
                             l6916 0988                               l6772 07EA  
                             l6692 06EC                               l5788 15C2  
                             l6934 09D2                               l6862 08D8  
                             l6854 08C4                               l6598 05A2  
                             l6952 0A20                               l6928 09C0  
                             l6784 0808                               l6864 08DE  
                             l5992 12C6                               l5976 129E  
                             l6946 0A0A                               l6882 0910  
                             l6874 08F2                               l6794 082E  
                             l5898 151E                               l6964 0A44  
                             l6972 0A54                               l6966 0A4A  
                             l6976 0A5E                               l6968 0A4C  
                             l6888 091A                               l6986 0A82  
                             l6996 0A9E                               STR_1 027F  
                             STR_2 0290                               STR_3 023F  
                             STR_4 026E                               STR_5 025D  
                             STR_6 027F                               STR_7 0290  
                             STR_8 023F                               STR_9 026E  
                             u3040 1CCE                               u2600 1BB8  
                             u3048 1CD0                               u3090 16EC  
                             u2620 1BCE                               u2700 1B6C  
                             u5111 1F28                               u2640 1BE8  
                             u2720 1B86                               u5040 1870  
                             u2618 1BBA                               u2660 1C00  
                             u2740 1B9E                               u5220 0398  
                             u5140 02E4                               u2638 1BD0  
                             u2718 1B6E                               u5150 02F2  
                             u2680 1B56                               u2920 1DF4  
                             u2658 1BEA                               u2738 1B88  
                             u4530 1574                               u5171 0318  
                             u6300 0D3A                               u4620 15D4  
                             u5501 05CE                               u2678 1C02  
                             u2758 1BA0                               u5510 05F4  
                             u4630 15DA                               u6240 0C88  
                             u5440 0560                               u4720 145A  
                             u2698 1B58                               u6330 0D60  
                             u4650 15E6                               u4730 1474  
                             u2971 00AC                               u6260 0CC0  
                             u4900 12F0                               u4660 15EA  
                             u4820 14C6                               u6350 0D8E  
                             u6280 0CF8                               u5800 0892  
                             u5640 0760                               u4840 14F8  
                             u4760 147E                               u5561 0662  
                             u5491 05BE                               u5590 06D0  
                             u5930 095E                               u5850 08D2  
                             u5860 08D6                               u5880 08EC  
                             _Rows 002F                               _cols 0035  
                             _main 19FE                               _note 001C  
                             _show 0025                               _text 0233  
                             fsr1h 000FE2                               fsr2h 000FDA  
                             indf2 000FDF                               fsr1l 000FE1  
                             fsr2l 000FD9                         _LcCursorOn 0114  
                             _rows 0036                               btemp 007A  
                             _user 00D1                     ?_KeyResetValue 0050  
                             prodh 000FF4                               prodl 000FF3  
                  __end_of_LcClear 0078                               start 0032  
                  __end_of_CantaIR 1F70                      LcInit@columns 0060  
                     ___param_bank 000000                         _LcPutScore 1ADE  
    _enterPasswordString@Menu$F553 0067                        _writeEeprom 1F1C  
                      Espera@Timer 005C                              ?_main 0050  
                  __end_of___lbdiv 1E10                              _EEADR 000FA9  
                            STR_10 025D                    __end_of___lbmod 1E90  
                    ??_TiInitTimer 0056                              _T0CON 000FD5  
                            i2l929 1C9A                              _RCREG 000FAE  
                            _RCSTA 000FAB                              _TMR0H 000FD7  
                            _TMR0L 000FD6                              _SPBRG 000FAF  
         __end_of_readEepromScores 00FE                              _TXREG 000FAD  
                            _TXSTA 000FAC                    __end_of_getGame 0176  
  __end_of_getFirstDirectionScores 00CA                    __end_of_getUser 00B6  
                            _Timer 002B                       _stopTimerPic 0176  
              __end_of_KeyGetValue 019A                __end_of_KeyGetPress 0172  
                            _getRX 0182                    __end_of_initSIO 1FD6  
                            _auxPM 004A                              _auxPU 0048  
                            _error 0011                              _setTX 0146  
                            _value 0032                              _press 0034  
                      _LcCursorOff 011E                              _state 003B  
                            _users 0080                   __end_of_RSI_High 0032  
                            tablat 000FF5                    __end_of_motorRX 1892  
                  __end_of_motorTX 19FE                    __end_of_textSMS 0233  
                    ??_TiResetTics 0055                              plusw0 000FEB  
                            plusw1 000FE3                              plusw2 000FDB  
                            ttemp5 007B                              ttemp6 007E  
                            ttemp7 0082                              status 000FD8  
                            wtemp8 007B                    ___lbdiv@divisor 0059  
                 __end_of_LcGotoXY 178C                    ___lbdiv@counter 005B  
                    ??__TiRSITimer 0050                   __end_of_LcScroll 016C  
                       _TXgetState 0192                         _TiGetTimer 1E3E  
          EscriuPrimeraOrdre@ordre 0056                    __initialization 178C  
                     __end_of_main 1A72                       __end_of_text 023F  
                           ??_main 0067                      __activetblptr 000002  
                    ?_initJoystick 0050                             ?_getRX 0050  
                           _ADCON0 000FC2                             _ADCON1 000FC1  
                           _ADCON2 000FC0                __end_of_TiInitTimer 1DA4  
                           _ADRESH 000FC4                             _EEDATA 000FA8  
      _accessMenuString1@Menu$F544 00E3                             ?_setTX 0050  
                           _EECON2 000FA7                          ??_LcClear 0060  
                        ??_CantaIR 0057                             i2l4550 1C78  
                           i2l4554 1C80                             i2l4558 1C96  
                   LcGotoXY@Fisics 0062                     LcGotoXY@Column 0064  
                  ??_KeyResetValue 0056          _enterUserString@Menu$F552 006C  
                    ??_WaitForBusy 005C                             _SPBRGH 000FB0  
                      ?_LcCursorOn 0050                             _LcInit 1636  
      _accessMenuString2@Menu$F545 0128                             _RXdata 0160  
                 __end_of_endMusic 015A                             _Espera 1FD6  
                           _TXbusy 015A                   __end_of_getScore 0114  
                           _RowAct 002D                __end_of_TiResetTics 1F48  
                           _h_Tics 000F                       ?_motorEeprom 0050  
                        ??___lbdiv 005A               __end_of_KeyGetNumber 013C  
                      ?_LcPutScore 0050                             _gameON 003D  
                        ??___lbmod 0056                             _centre 003A  
                 __end_of_initData 019C                   __end_of_initMenu 1F1C  
              __end_of__TiRSITimer 1CA0                             _initTX 1ED8  
                           clear_0 17F2                             clear_1 17FE  
                           _toSend 0017        __end_of_getPositionJoystick 018A  
    _timeRemainingString@Menu$F554 0100                          ??_getGame 0055  
                           isa$std 000001                             _option 0047  
                        ??_getUser 0067                     ??_initJoystick 0056  
                      _KeyGetValue 0196                   __end_of_sendMyTX 004C  
                      _KeyGetPress 016C                   __end_of_playNote 1CEC  
                        ??_initSIO 0055                       __pdataCOMRAM 0067  
                 __end_of_motorKey 153E                       __mediumconst 0000  
                           tblptrh 000FF7                             tblptrl 000FF6  
                           tblptru 000FF8                          ??_motorRX 005C  
                        ??_motorTX 005C                  __end_of_CantaData 1DC4  
                 ___lbdiv@dividend 005A                    ___lbmod@divisor 0055  
                       __accesstop 0080            __end_of__initialization 1804  
                  ___lbmod@counter 0057                  __end_of_LcPutChar 1C62  
                __end_of_LcPutTime 1ED8                      ___rparam_used 000001  
                      ?_TXgetState 0050                        ?_TiGetTimer 0050  
                   __pcstackCOMRAM 0050                __end_of_WaitForBusy 1D2A  
                     __pidataBANK0 0078                       __pidataBANK1 1D2A  
                    __end_of_getRX 0186                  __end_of_KeyGetSMS 0132  
                    __end_of_setTX 014E                         __end_ofPL2 111C  
                       __end_ofPL4 1128                         __end_ofPL6 1138  
                       __end_ofPL8 1144                   ___lbdiv@quotient 005C  
                        ?_RSI_High 0050                  __end_of_TiGetTics 1EB6  
                      _TiInitTimer 1D68                 _numUsers@Data$F563 004F  
            _resetPositionJoystick 017A                          ?_LcGotoXY 005D  
                        ?_LcScroll 0050                            ??_getRX 0055  
                          ??_setTX 0055                _byeString@Menu$F559 0076  
                       __pbssBANK0 0080              __end_of_motorJoystick 162E  
                      _TiResetTics 1F38                         __pnvCOMRAM 0079  
                          ?_LcInit 0060                      _CantaPartAlta 1BAC  
                          ?_RXdata 0050        getFirstDirection@numAddress 0055  
                          ?_Espera 005C                            ?_TXbusy 0050  
                      __TiRSITimer 1C62               writeEepromScores@num 0057  
           writeEepromScores@score 0055                            ?_initTX 0050  
                       ??_RSI_High 0051                       ?_writeEeprom 013D  
                          LcInit@i 0062                  ?_readEepromScores 0050  
                       ??_LcGotoXY 005E                         ??_LcScroll 0058  
                        ?_endMusic 0050                 ??_readEepromScores 0055  
                        ?_getScore 0055                _seconds@Timer$F1634 0026  
                     ?_LcCursorOff 0050                            _LcClear 0062  
                          _CantaIR 1F54                          ?_initData 0050  
            _menuStrings@Menu$F546 0071                          ?_initMenu 0050  
                      _WaitForBusy 1CEC           ?_getFirstDirectionScores 0050  
                   ?_CantaPartAlta 0050                            _Columns 002E  
             __end_of_initJoystick 1FBE                      _LcGotoXY$1428 0060  
                        ?_sendMyTX 0050                          ?_playNote 0050  
                          __Hparam 0000                            __Lparam 0000  
                        ?_motorKey 0050                         _initKeypad 1E10  
                       _readEeprom 00CA                            ___lbdiv 1DDC  
                          ___lbmod 1E6A                       __psmallconst 0200  
                __end_of_isPressed 0182                            __pcinit 178C  
                     _doneCharging 0022                            __ramtop 0200  
                          _getGame 0172                            __ptext0 19FE  
                          __ptext1 1A72                            __ptext2 1988  
                          __ptext3 1812                            __ptext4 1892  
                          __ptext5 1CAA                            __ptext6 1404  
                          __ptext7 1560                            __ptext8 0172  
                          __ptext9 123A                            _getUser 00A2  
           ?_resetPositionJoystick 0050                          _T0CONbits 000FD5  
                _writeEepromScores 1F70                          CantaIR@IR 0057  
                          _initSIO 1FBE                  __end_of_initMusic 1FA4  
                          _counter 002A                  __end_of_menuMotor 110C  
                          _receive 0014                 ?_writeEepromScores 0055  
                          _minutes 0045                            _seconds 0044  
                          _motorRX 1812                            _motorTX 1988  
                          _timerRX 0019                         ??_endMusic 0055  
                          _timerTX 001A                            _pointer 004C  
                          _textSMS 0201                         ??_getScore 0057  
                          _stateRX 0013                            _stateTX 0018  
                  WaitForBusy@Busy 005C                         _numAddress 001F  
                     _KeyGetNumber 0132               end_of_initialization 1804  
                    ??_cleanEeprom 0055                ??_writeEepromScores 0058  
                       ??_initData 0055                         ??_initMenu 0056  
                    __Lmediumconst 0000                    TiGetTics@Handle 0059  
                     ??_LcCursorOn 005D                      LcPutTime@time 0066  
                       ??_sendMyTX 0056                         ??_playNote 005C  
                    ?_showTimerPic 0050                         ??_motorKey 005C  
                  TiGetTics@actual 005A                            postdec1 000FE5  
                          postdec2 000FDD                            postinc0 000FEE  
                          postinc1 000FE6                       ??_LcPutScore 0066  
                          postinc2 000FDE                         _motorTimer 1A72  
                       _motorMusic 1892          __end_of_writeEepromScores 1F8A  
                       _timerMusic 000B                         _timerState 0028  
                       _musicState 001D                          _PORTBbits 000F81  
                        _PORTCbits 000F82                       ?_KeyGetValue 0050  
                     ?_KeyGetPress 0050                 __end_of_LcCursorOn 011E  
                 ___lbmod@dividend 0056                          _TRISAbits 000F92  
                        _TRISBbits 000F93                          _TRISCbits 000F94  
                        _TRISDbits 000F95                         _startMusic 008E  
                 _pointer@TX$F2011 0016                    ??_CantaPartAlta 0055  
               __end_of_LcPutScore 1B42                        ___lbmod@rem 0058  
                        _CantaData 1DA4                          _TXSTAbits 000FAC  
            __end_of_KeyResetValue 00F0                     ??_showTimerPic 0055  
                     ??_TXgetState 0055                      ?_EeInitAction 0050  
              __end_of_cleanEeprom 010A                       ??_TiGetTimer 0055  
                   __end_of_LcInit 16EE                     __end_of_RXdata 0166  
                        _LcPutChar 1C0E                     __end_of_Espera 1FEE  
                      ?_initKeypad 0050                     __end_of_TXbusy 0160  
                      ?_readEeprom 0050                          _LcPutTime 1EB6  
       __end_of_EscriuPrimeraOrdre 197A                  ??_getDoneCharging 0055  
                      _BAUDCONbits 000FB8                      __pidataCOMRAM 1FEE  
                   __end_of_initTX 1EFA                          _ColumnAct 002C  
                        _KeyGetSMS 0128                       ?_TiInitTimer 0050  
                      __end_ofPL10 1152                        __end_ofPL20 1198  
                      __end_ofPL12 115E                        __end_ofPL30 11B0  
                      __end_ofPL22 13DA                        __end_ofPL14 1172  
                      __end_ofPL40 1548                        __end_ofPL32 11B8  
                      __end_ofPL24 11A0                        __end_ofPL16 117C  
                      __end_ofPL50 1DD2                        __end_ofPL42 11E0  
                      __end_ofPL34 11C6                        __end_ofPL26 1E6A  
                      __end_ofPL18 118C                        __end_ofPL60 13F6  
                      __end_ofPL52 13E4                        __end_ofPL44 11E8  
                      __end_ofPL36 11CE                        __end_ofPL28 16F8  
                      __end_ofPL70 00DE                        __end_ofPL62 11F8  
                      __end_ofPL54 1556                        __end_ofPL46 11EE  
                      __end_ofPL38 11D6                        __end_ofPL80 121C  
                      __end_ofPL72 1636                        __end_ofPL64 11FE  
                      __end_ofPL56 1988                        __end_ofPL48 1F54  
                      __end_ofPL90 1232                        __end_ofPL82 1DDC  
                      __end_ofPL74 1560                        __end_ofPL66 1208  
                      __end_ofPL58 13EC                        __end_ofPL92 123A  
                      __end_ofPL84 1224                        __end_ofPL76 1CAA  
                      __end_ofPL68 1212                        __end_ofPL94 1B4A  
                      __end_ofPL86 1404                        __end_ofPL78 13FE  
                      __end_ofPL88 122C                start_initialization 178C  
                 _aux@EEPROM$F1757 0020                          _TiGetTics 1E90  
               __end_of_TXgetState 0196                 __end_of_TiGetTimer 1E5C  
                     ?_TiResetTics 0050                         ?_CantaData 0050  
                 _minutesCountdown 0043                           ??_LcInit 0061  
                   ??_EeInitAction 0055                           ??_RXdata 0055  
                     ?__TiRSITimer 0050                           ??_Espera 0060  
                         ??_TXbusy 0055                         ?_LcPutChar 0050  
                       ?_LcPutTime 0050                        ?_motorTimer 0050  
                      ?_motorMusic 0050                        __pdataBANK0 00E3  
                      __pdataBANK1 0100                           ??_initTX 0056  
                       ?_KeyGetSMS 0050                       _initJoystick 1FA4  
                      __pbssCOMRAM 0001                      __pcstackBANK0 00F8  
                    __pcstackBANK1 013D                         ?_TiGetTics 0055  
                    ?_stopTimerPic 0050                   _secondsCountdown 0042  
                      ?_startMusic 0050                           ?_LcClear 0050  
                         ?_CantaIR 0050                        _cleanEeprom 00FE  
                   _CantaPartBaixa 1B4A                       ?_WaitForBusy 0050  
           _errorsString@Menu$F557 00EB           _timeLeftString@Menu$F555 0133  
                _getFirstDirection 004C                          __pintcode 0008  
                   _pointerMarquee 004B                           ?___lbdiv 0059  
                         ?___lbmod 0055            ??_resetPositionJoystick 0055  
                     sendMyTX@send 0056                 ?_getFirstDirection 0050  
                  CantaPartBaixa@c 0056                           ?_getGame 0050  
                         ?_getUser 0055                _pointer@Music$F1878 001B  
                         ?_initSIO 0050                        __smallconst 0200  
                        _isPressed 017E                       playNote@note 005E  
              ??_getFirstDirection 0055               __end_of_showTimerPic 0154  
                   ??_stopTimerPic 0055                           ?_motorRX 0050  
                         ?_motorTX 0050                          _initMusic 1F8A  
                        _menuMotor 02A2                          _menuState 004D  
           __end_of_CantaPartBaixa 1BAC                        ??_CantaData 0057  
                         _LATAbits 000F89                           _LATBbits 000F8A  
                         _LATCbits 000F8B                           _LATDbits 000F8C  
                      _eepromState 0021          __end_of_getFirstDirection 0062  
                         _PIR1bits 000F9E                      readEeprom@num 0055  
                      ??_LcPutChar 0065                           _RCONbits 000FD0  
   _positionJoystick@Joystick$F704 003C                        ??_LcPutTime 0066  
                    ??_motorEeprom 0055                          _pointerRX 0015  
                        _timerMenu 0041                          _timerNote 001E  
                        _topScores 0001                           _RSI_High 0008  
                       _ADCON0bits 000FC2                        ??_KeyGetSMS 0055  
              _numScores@Data$F564 004E                         ?_isPressed 0050  
             __end_of_EeInitAction 0146                           Espera@ms 005E  
                         _LcGotoXY 16F8                        ??_TiGetTics 0057  
                         _LcScroll 0166                         ?_initMusic 0050  
getFirstDirectionScores@numAddress 0055                        LcGotoXY@Row 005D  
                       ?_menuMotor 0050                        _INTCON2bits 000FF1  
                        copy_data0 17A0                          copy_data1 17C0  
                        copy_data2 17E0                    ?_CantaPartBaixa 0050  
                    _motorJoystick 1560                    _getDoneCharging 018A  
                       _EECON1bits 000FA6                           __Hrparam 0000  
                         __Lrparam 0000                _getPositionJoystick 0186  
                     ??_initKeypad 0056                       ??_readEeprom 0055  
                  LcPutScore@score 0066                __end_of_motorEeprom 13CC  
                        setTX@text 0055                      _pointerEeprom 0023  
             ?_getPositionJoystick 0050                           _endMusic 0154  
                         __ptext10 02A2                           __ptext11 1F70  
               _EscriuPrimeraOrdre 1910                           __ptext20 017E  
                         __ptext12 1F1C                           __ptext21 00A2  
                         __ptext13 0176                           __ptext30 00FE  
                         __ptext22 010A                           __ptext14 008E  
                         __ptext31 0192                           __ptext23 0182  
                         __ptext15 014E                           __ptext40 16F8  
                         __ptext32 015A                           __ptext24 0186  
                         __ptext16 0146                           __ptext41 1DA4  
                         __ptext33 0160                           __ptext25 00B6  
                         __ptext17 0036                           __ptext50 1ED8  
                         __ptext42 0114                           __ptext34 0166  
                         __ptext26 004C                           __ptext18 017A  
                         __ptext51 1FBE                           __ptext43 011E  
                         __ptext35 1EB6                           __ptext27 018A  
                         __ptext19 00F0                           __ptext60 1CEC  
                         __ptext52 1F8A                           __ptext44 0062  
                         __ptext36 1ADE                           __ptext28 018E  
                         __ptext61 1E3E                           __ptext53 1EFA  
                         __ptext45 00DE                           __ptext37 1E6A  
                         __ptext29 0154                           __ptext62 1FD6  
                         __ptext54 00CA                           __ptext46 0196  
                         __ptext38 1DDC                           __ptext71 1C62  
                         __ptext63 1F38                           __ptext55 1E10  
                         __ptext47 0128                           __ptext39 1C0E  
                         __ptext64 1E90                           __ptext56 1FA4  
                         __ptext48 016C                           __ptext65 1910  
                         __ptext57 019A                           __ptext49 0132  
                         __ptext66 1F54                           __ptext58 1D68  
                         __ptext67 1B4A                           __ptext59 1636  
                         __ptext68 1BAC                           __ptext69 013C  
                         _getScore 010A                        _keypadState 0037  
                   CantaPartAlta@c 0056                 __end_of_initKeypad 1E3E  
               __end_of_readEeprom 00D6                           _s_Timers 00B6  
                         _keyValue 0046                     ?_motorJoystick 0050  
                         _initData 019A                           _initMenu 1EFA  
              ?_EscriuPrimeraOrdre 0050                      _timerJoystick 0039  
            __end_of_CantaPartAlta 1C0E                      CantaData@Data 0057  
                 _readEepromScores 00F0                           _sendMyTX 0036  
                         _playNote 1CAA               __end_of_stopTimerPic 017A  
                         _motorKey 1404                           _valueOld 0031  
                         isa$xinst 000000                           _timerPic 0029  
                     ??_motorTimer 00F8                       ??_motorMusic 005F  
                         int$flags 007A                           _topScore 000D  
          _getFirstDirectionScores 00B6                           _rotating 0033  
                    ??_writeEeprom 0055        _currentTimeString@Menu$F560 010F  
                     _prevMaxIndex 003F               ??_EscriuPrimeraOrdre 0055  
                       LcInit@rows 0061                       _prevMaxScore 003E  
             _pointer@EEPROM$F1753 0024                        ??_isPressed 0055  
                   writeEeprom@num 014F               KeyGetNumber@auxValue 0055  
                       _INTCONbits 000FF2              ??_getPositionJoystick 0055  
                      ??_initMusic 0056            __end_of_getDoneCharging 018E  
                      ??_menuMotor 00F8                      ??_LcCursorOff 005D  
                     ??_startMusic 0056                           intlevel2 0000  
                     _timerGeneral 0079                       ?_cleanEeprom 0050  
               __end_of_motorTimer 1ADE                 __end_of_motorMusic 1910  
                       LcPutChar@c 0065                       _showTimerPic 014E  
                  KeyGetSMS@auxSMS 0055                        _motorEeprom 123A  
                _getCentreJoystick 018E         _modifyTimeString@Menu$F558 011C  
                    writeEeprom@us 013D      __end_of_resetPositionJoystick 017E  
               ?_getCentreJoystick 0050                 __end_of_startMusic 00A2  
                      _timerKeypad 0038                        _pointerUser 0049  
              _minutes@Timer$F1633 0027              _scoreString@Menu$F556 00F2  
              ??_getCentreJoystick 0055                __end_of_writeEeprom 1F38  
                    ?_KeyGetNumber 0050                    ??_motorJoystick 005C  
              __end_of_LcCursorOff 0128                      _KeyResetValue 00DE  
                     _EeInitAction 013C          ??_getFirstDirectionScores 0055  
        __end_of_getCentreJoystick 0192  
