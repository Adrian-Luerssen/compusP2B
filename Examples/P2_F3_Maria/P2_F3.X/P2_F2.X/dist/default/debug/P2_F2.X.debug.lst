

Microchip MPLAB XC8 Assembler V2.36 build 20220127204148 
                                                                                               Thu May 26 11:51:28 2022

Microchip MPLAB XC8 C Compiler v2.36 (Pro license) build 20220127204148 Og9s 
     1                           	processor	18F4321
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	plic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     8                           	psect	nvCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    14                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    15                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    16                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    17                           	psect	text0,global,reloc=2,class=CODE,delta=1
    18                           	psect	text1,global,reloc=2,class=CODE,delta=1
    19                           	psect	text2,global,reloc=2,class=CODE,delta=1
    20                           	psect	text3,global,reloc=2,class=CODE,delta=1
    21                           	psect	text4,global,reloc=2,class=CODE,delta=1
    22                           	psect	text5,global,reloc=2,class=CODE,delta=1
    23                           	psect	text6,global,reloc=2,class=CODE,delta=1
    24                           	psect	text7,global,reloc=2,class=CODE,delta=1
    25                           	psect	text8,global,reloc=2,class=CODE,delta=1
    26                           	psect	text9,global,reloc=2,class=CODE,delta=1
    27                           	psect	text10,global,reloc=2,class=CODE,delta=1
    28                           	psect	text11,global,reloc=2,class=CODE,delta=1
    29                           	psect	text12,global,reloc=2,class=CODE,delta=1
    30                           	psect	text13,global,reloc=2,class=CODE,delta=1
    31                           	psect	text14,global,reloc=2,class=CODE,delta=1
    32                           	psect	text15,global,reloc=2,class=CODE,delta=1
    33                           	psect	text16,global,reloc=2,class=CODE,delta=1
    34                           	psect	text17,global,reloc=2,class=CODE,delta=1
    35                           	psect	text18,global,reloc=2,class=CODE,delta=1
    36                           	psect	text19,global,reloc=2,class=CODE,delta=1
    37                           	psect	text20,global,reloc=2,class=CODE,delta=1
    38                           	psect	text21,global,reloc=2,class=CODE,delta=1
    39                           	psect	text22,global,reloc=2,class=CODE,delta=1
    40                           	psect	text23,global,reloc=2,class=CODE,delta=1
    41                           	psect	text24,global,reloc=2,class=CODE,delta=1
    42                           	psect	text25,global,reloc=2,class=CODE,delta=1
    43                           	psect	text26,global,reloc=2,class=CODE,delta=1
    44                           	psect	text27,global,reloc=2,class=CODE,delta=1
    45                           	psect	text28,global,reloc=2,class=CODE,delta=1
    46                           	psect	text29,global,reloc=2,class=CODE,delta=1
    47                           	psect	text30,global,reloc=2,class=CODE,delta=1
    48                           	psect	text31,global,reloc=2,class=CODE,delta=1
    49                           	psect	text32,global,reloc=2,class=CODE,delta=1
    50                           	psect	text33,global,reloc=2,class=CODE,delta=1
    51                           	psect	text34,global,reloc=2,class=CODE,delta=1
    52                           	psect	text35,global,reloc=2,class=CODE,delta=1
    53                           	psect	text36,global,reloc=2,class=CODE,delta=1,group=1
    54                           	psect	text37,global,reloc=2,class=CODE,delta=1,group=1
    55                           	psect	text38,global,reloc=2,class=CODE,delta=1
    56                           	psect	text39,global,reloc=2,class=CODE,delta=1
    57                           	psect	text40,global,reloc=2,class=CODE,delta=1
    58                           	psect	text41,global,reloc=2,class=CODE,delta=1
    59                           	psect	text42,global,reloc=2,class=CODE,delta=1
    60                           	psect	text43,global,reloc=2,class=CODE,delta=1
    61                           	psect	text44,global,reloc=2,class=CODE,delta=1
    62                           	psect	text45,global,reloc=2,class=CODE,delta=1
    63                           	psect	text46,global,reloc=2,class=CODE,delta=1
    64                           	psect	text47,global,reloc=2,class=CODE,delta=1
    65                           	psect	text48,global,reloc=2,class=CODE,delta=1
    66                           	psect	text49,global,reloc=2,class=CODE,delta=1
    67                           	psect	text50,global,reloc=2,class=CODE,delta=1
    68                           	psect	text51,global,reloc=2,class=CODE,delta=1
    69                           	psect	text52,global,reloc=2,class=CODE,delta=1
    70                           	psect	text53,global,reloc=2,class=CODE,delta=1
    71                           	psect	text54,global,reloc=2,class=CODE,delta=1
    72                           	psect	text55,global,reloc=2,class=CODE,delta=1
    73                           	psect	text56,global,reloc=2,class=CODE,delta=1
    74                           	psect	text57,global,reloc=2,class=CODE,delta=1
    75                           	psect	text58,global,reloc=2,class=CODE,delta=1
    76                           	psect	text59,global,reloc=2,class=CODE,delta=1
    77                           	psect	text60,global,reloc=2,class=CODE,delta=1
    78                           	psect	text61,global,reloc=2,class=CODE,delta=1
    79                           	psect	text62,global,reloc=2,class=CODE,delta=1
    80                           	psect	text63,global,reloc=2,class=CODE,delta=1
    81                           	psect	text64,global,reloc=2,class=CODE,delta=1
    82                           	psect	text65,global,reloc=2,class=CODE,delta=1
    83                           	psect	text66,global,reloc=2,class=CODE,delta=1
    84                           	psect	text67,global,reloc=2,class=CODE,delta=1
    85                           	psect	text68,global,reloc=2,class=CODE,delta=1
    86                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    87                           	psect	text70,global,reloc=2,class=CODE,delta=1
    88                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    89                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    90                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    91                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    92                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    93                           	psect	pa_nodes0,global,class=CODE,delta=1
    94  0000                     
    95                           ; Version 2.36
    96                           ; Generated 28/01/2022 GMT
    97                           ; 
    98                           ; Copyright Â© 2022, Microchip Technology Inc. and its subsidiaries ("Microchip")
    99                           ; All rights reserved.
   100                           ; 
   101                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   102                           ; 
   103                           ; Redistribution and use in source and binary forms, with or without modification, are
   104                           ; permitted provided that the following conditions are met:
   105                           ; 
   106                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   107                           ;        conditions and the following disclaimer.
   108                           ; 
   109                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   110                           ;        of conditions and the following disclaimer in the documentation and/or other
   111                           ;        materials provided with the distribution. Publication is not required when
   112                           ;        this file is used in an embedded application.
   113                           ; 
   114                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   115                           ;        software without specific prior written permission.
   116                           ; 
   117                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   118                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   119                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   120                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   121                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   122                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   123                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   124                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   125                           ; 
   126                           ; 
   127                           ; Code-generator required, PIC18F4321 Definitions
   128                           ; 
   129                           ; SFR Addresses
   130  0000                     
   131                           	psect	idataCOMRAM
   132  0000'                    __pidataCOMRAM:
   133                           	callstack 0
   134                           
   135                           ;initializer for _enterPasswordString@Menu$F571
   136  0000' 50                 	db	80
   137  0001' 53                 	db	83
   138  0002' 57                 	db	87
   139  0003' 44                 	db	68
   140  0004' 3A                 	db	58
   141                           
   142                           ;initializer for _enterUserString@Menu$F570
   143  0005' 55                 	db	85
   144  0006' 53                 	db	83
   145  0007' 45                 	db	69
   146  0008' 52                 	db	82
   147  0009' 3A                 	db	58
   148                           
   149                           ;initializer for _menuStrings@Menu$F564
   150  000A' 00'                	db	low STR_1
   151  000B' 00'                	db	low STR_2
   152  000C' 00'                	db	low STR_3
   153  000D' 00'                	db	low STR_4
   154  000E' 00'                	db	low STR_5
   155                           
   156                           ;initializer for _byeString@Menu$F577
   157  000F' 42                 	db	66
   158  0010' 59                 	db	89
   159  0011' 45                 	db	69
   160                           
   161                           	psect	idataBANK0
   162  0000'                    __pidataBANK0:
   163                           	callstack 0
   164                           
   165                           ;initializer for _timeRemainingString@Menu$F572
   166  0000' 54                 	db	84
   167  0001' 49                 	db	73
   168  0002' 4D                 	db	77
   169  0003' 45                 	db	69
   170  0004' 20                 	db	32
   171  0005' 52                 	db	82
   172  0006' 45                 	db	69
   173  0007' 4D                 	db	77
   174  0008' 41                 	db	65
   175  0009' 49                 	db	73
   176  000A' 4E                 	db	78
   177  000B' 49                 	db	73
   178  000C' 4E                 	db	78
   179  000D' 47                 	db	71
   180  000E' 3A                 	db	58
   181                           
   182                           ;initializer for _currentTimeString@Menu$F578
   183  000F' 43                 	db	67
   184  0010' 55                 	db	85
   185  0011' 52                 	db	82
   186  0012' 52                 	db	82
   187  0013' 45                 	db	69
   188  0014' 4E                 	db	78
   189  0015' 54                 	db	84
   190  0016' 20                 	db	32
   191  0017' 54                 	db	84
   192  0018' 49                 	db	73
   193  0019' 4D                 	db	77
   194  001A' 45                 	db	69
   195  001B' 3A                 	db	58
   196                           
   197                           ;initializer for _modifyTimeString@Menu$F576
   198  001C' 4D                 	db	77
   199  001D' 4F                 	db	79
   200  001E' 44                 	db	68
   201  001F' 49                 	db	73
   202  0020' 46                 	db	70
   203  0021' 59                 	db	89
   204  0022' 20                 	db	32
   205  0023' 54                 	db	84
   206  0024' 49                 	db	73
   207  0025' 4D                 	db	77
   208  0026' 45                 	db	69
   209  0027' 3A                 	db	58
   210                           
   211                           ;initializer for _accessMenuString2@Menu$F563
   212  0028' 32                 	db	50
   213  0029' 2E                 	db	46
   214  002A' 20                 	db	32
   215  002B' 52                 	db	82
   216  002C' 45                 	db	69
   217  002D' 47                 	db	71
   218  002E' 49                 	db	73
   219  002F' 53                 	db	83
   220  0030' 54                 	db	84
   221  0031' 45                 	db	69
   222  0032' 52                 	db	82
   223                           
   224                           ;initializer for _timeLeftString@Menu$F573
   225  0033' 54                 	db	84
   226  0034' 49                 	db	73
   227  0035' 4D                 	db	77
   228  0036' 45                 	db	69
   229  0037' 20                 	db	32
   230  0038' 4C                 	db	76
   231  0039' 45                 	db	69
   232  003A' 46                 	db	70
   233  003B' 54                 	db	84
   234  003C' 3A                 	db	58
   235                           
   236                           ;initializer for _accessMenuString1@Menu$F562
   237  003D' 31                 	db	49
   238  003E' 2E                 	db	46
   239  003F' 20                 	db	32
   240  0040' 4C                 	db	76
   241  0041' 4F                 	db	79
   242  0042' 47                 	db	71
   243  0043' 49                 	db	73
   244  0044' 4E                 	db	78
   245                           
   246                           ;initializer for _errorsString@Menu$F575
   247  0045' 45                 	db	69
   248  0046' 52                 	db	82
   249  0047' 52                 	db	82
   250  0048' 4F                 	db	79
   251  0049' 52                 	db	82
   252  004A' 53                 	db	83
   253  004B' 3A                 	db	58
   254                           
   255                           ;initializer for _scoreString@Menu$F574
   256  004C' 53                 	db	83
   257  004D' 43                 	db	67
   258  004E' 4F                 	db	79
   259  004F' 52                 	db	82
   260  0050' 45                 	db	69
   261  0051' 3A                 	db	58
   262                           
   263                           	psect	smallconst
   264  0000'                    __psmallconst:
   265                           	callstack 0
   266  0000' 00                 	db	0
   267  0001'                    _textSMS:
   268                           	callstack 0
   269  0001' 30                 	db	48
   270  0002' 20                 	db	32
   271  0003' 25                 	db	37
   272  0004' 25                 	db	37
   273  0005' 25                 	db	37
   274  0006' 31                 	db	49
   275  0007' 25                 	db	37
   276  0008' 25                 	db	37
   277  0009' 25                 	db	37
   278  000A' 25                 	db	37
   279  000B' 41                 	db	65
   280  000C' 42                 	db	66
   281  000D' 43                 	db	67
   282  000E' 32                 	db	50
   283  000F' 25                 	db	37
   284  0010' 44                 	db	68
   285  0011' 45                 	db	69
   286  0012' 46                 	db	70
   287  0013' 33                 	db	51
   288  0014' 25                 	db	37
   289  0015' 47                 	db	71
   290  0016' 48                 	db	72
   291  0017' 49                 	db	73
   292  0018' 34                 	db	52
   293  0019' 25                 	db	37
   294  001A' 4A                 	db	74
   295  001B' 4B                 	db	75
   296  001C' 4C                 	db	76
   297  001D' 35                 	db	53
   298  001E' 25                 	db	37
   299  001F' 4D                 	db	77
   300  0020' 4E                 	db	78
   301  0021' 30                 	db	48
   302  0022' 36                 	db	54
   303  0023' 25                 	db	37
   304  0024' 50                 	db	80
   305  0025' 51                 	db	81
   306  0026' 52                 	db	82
   307  0027' 53                 	db	83
   308  0028' 37                 	db	55
   309  0029' 54                 	db	84
   310  002A' 55                 	db	85
   311  002B' 56                 	db	86
   312  002C' 38                 	db	56
   313  002D' 25                 	db	37
   314  002E' 57                 	db	87
   315  002F' 58                 	db	88
   316  0030' 59                 	db	89
   317  0031' 5A                 	db	90
   318  0032' 39                 	db	57
   319  0033'                    __end_of_textSMS:
   320                           	callstack 0
   321  0033'                    _text:
   322                           	callstack 0
   323  0033' 01                 	db	1
   324  0034' 02                 	db	2
   325  0035' 03                 	db	3
   326  0036' 2A                 	db	42
   327  0037' 00                 	db	0
   328  0038' 23                 	db	35
   329  0039' 07                 	db	7
   330  003A' 08                 	db	8
   331  003B' 09                 	db	9
   332  003C' 04                 	db	4
   333  003D' 05                 	db	5
   334  003E' 06                 	db	6
   335  003F'                    __end_of_text:
   336                           	callstack 0
   337  0000                     _EECON2	set	4007
   338  0000                     _TMR0L	set	4054
   339  0000                     _TMR0H	set	4055
   340  0000                     _T0CON	set	4053
   341  0000                     _LATCbits	set	3979
   342  0000                     _LATBbits	set	3978
   343  0000                     _LATDbits	set	3980
   344  0000                     _RCREG	set	4014
   345  0000                     _TXREG	set	4013
   346  0000                     _SPBRG	set	4015
   347  0000                     _SPBRGH	set	4016
   348  0000                     _BAUDCONbits	set	4024
   349  003F'                    STR_3:
   350  003F' 33                 	db	51	;'3'
   351  0040' 2E                 	db	46
   352  0041' 20                 	db	32
   353  0042' 53                 	db	83	;'S'
   354  0043' 68                 	db	104	;'h'
   355  0044' 6F                 	db	111	;'o'
   356  0045' 77                 	db	119	;'w'
   357  0046' 20                 	db	32
   358  0047' 67                 	db	103	;'g'
   359  0048' 65                 	db	101	;'e'
   360  0049' 6E                 	db	110	;'n'
   361  004A' 65                 	db	101	;'e'
   362  004B' 72                 	db	114	;'r'
   363  004C' 61                 	db	97	;'a'
   364  004D' 6C                 	db	108	;'l'
   365  004E' 20                 	db	32
   366  004F' 54                 	db	84	;'T'
   367  0050' 6F                 	db	111	;'o'
   368  0051' 70                 	db	112	;'p'
   369  0052' 20                 	db	32
   370  0053' 35                 	db	53	;'5'
   371  0054' 20                 	db	32
   372  0055' 73                 	db	115	;'s'
   373  0056' 63                 	db	99	;'c'
   374  0057' 6F                 	db	111	;'o'
   375  0058' 72                 	db	114	;'r'
   376  0059' 65                 	db	101	;'e'
   377  005A' 73                 	db	115	;'s'
   378  005B' 20                 	db	32
   379  005C' 00                 	db	0
   380  005D'                    STR_5:
   381  005D' 35                 	db	53	;'5'
   382  005E' 2E                 	db	46
   383  005F' 20                 	db	32
   384  0060' 4C                 	db	76	;'L'
   385  0061' 6F                 	db	111	;'o'
   386  0062' 67                 	db	103	;'g'
   387  0063' 6F                 	db	111	;'o'
   388  0064' 75                 	db	117	;'u'
   389  0065' 74                 	db	116	;'t'
   390  0066' 20                 	db	32
   391  0067' 20                 	db	32
   392  0068' 20                 	db	32
   393  0069' 20                 	db	32
   394  006A' 20                 	db	32
   395  006B' 20                 	db	32
   396  006C' 20                 	db	32
   397  006D' 00                 	db	0
   398  006E'                    STR_4:
   399  006E' 34                 	db	52	;'4'
   400  006F' 2E                 	db	46
   401  0070' 20                 	db	32
   402  0071' 53                 	db	83	;'S'
   403  0072' 68                 	db	104	;'h'
   404  0073' 6F                 	db	111	;'o'
   405  0074' 77                 	db	119	;'w'
   406  0075' 20                 	db	32
   407  0076' 74                 	db	116	;'t'
   408  0077' 69                 	db	105	;'i'
   409  0078' 6D                 	db	109	;'m'
   410  0079' 65                 	db	101	;'e'
   411  007A' 20                 	db	32
   412  007B' 20                 	db	32
   413  007C' 20                 	db	32
   414  007D' 20                 	db	32
   415  007E' 00                 	db	0
   416  007F'                    STR_1:
   417  007F' 31                 	db	49	;'1'
   418  0080' 2E                 	db	46
   419  0081' 20                 	db	32
   420  0082' 50                 	db	80	;'P'
   421  0083' 6C                 	db	108	;'l'
   422  0084' 61                 	db	97	;'a'
   423  0085' 79                 	db	121	;'y'
   424  0086' 20                 	db	32
   425  0087' 61                 	db	97	;'a'
   426  0088' 20                 	db	32
   427  0089' 47                 	db	71	;'G'
   428  008A' 61                 	db	97	;'a'
   429  008B' 6D                 	db	109	;'m'
   430  008C' 65                 	db	101	;'e'
   431  008D' 20                 	db	32
   432  008E' 20                 	db	32
   433  008F' 00                 	db	0
   434  0090'                    STR_2:
   435  0090' 32                 	db	50	;'2'
   436  0091' 2E                 	db	46
   437  0092' 20                 	db	32
   438  0093' 4D                 	db	77	;'M'
   439  0094' 6F                 	db	111	;'o'
   440  0095' 64                 	db	100	;'d'
   441  0096' 69                 	db	105	;'i'
   442  0097' 66                 	db	102	;'f'
   443  0098' 79                 	db	121	;'y'
   444  0099' 20                 	db	32
   445  009A' 74                 	db	116	;'t'
   446  009B' 69                 	db	105	;'i'
   447  009C' 6D                 	db	109	;'m'
   448  009D' 65                 	db	101	;'e'
   449  009E' 20                 	db	32
   450  009F' 20                 	db	32
   451  00A0' 00                 	db	0
   452  00A1' 00                 	db	0	; dummy byte at the end
   453  0000                     
   454                           	psect	nvCOMRAM
   455  0000'                    __pnvCOMRAM:
   456                           	callstack 0
   457  0000'                    _timerGeneral:
   458                           	callstack 0
   459  0000'                    	ds	1
   460  0000                     _TXSTAbits	set	4012
   461  0000                     _ADCON0bits	set	4034
   462  0000                     _T0CONbits	set	4053
   463  0000                     _PORTBbits	set	3969
   464  0000                     _LATAbits	set	3977
   465  0000                     _TRISAbits	set	3986
   466  0000                     _TRISBbits	set	3987
   467  0000                     _PIR1bits	set	3998
   468  0000                     _RCSTA	set	4011
   469  0000                     _TXSTA	set	4012
   470  0000                     _ADCON2	set	4032
   471  0000                     _ADCON1	set	4033
   472  0000                     _ADCON0	set	4034
   473  0000                     _INTCON2bits	set	4081
   474  0000                     _TRISDbits	set	3989
   475  0000                     _TRISCbits	set	3988
   476  0000                     _PORTCbits	set	3970
   477  0000                     _ADRESH	set	4036
   478  0000                     _RCONbits	set	4048
   479  0000                     _EECON1bits	set	4006
   480  0000                     _EEDATA	set	4008
   481  0000                     _EEADR	set	4009
   482  0000                     _INTCONbits	set	4082
   483                           
   484                           ; #config settings
   485                           
   486                           	psect	cinit
   487  0000'                    __pcinit:
   488                           	callstack 0
   489  0000'                    start_initialization:
   490                           	callstack 0
   491  0000'                    __initialization:
   492                           	callstack 0
   493                           
   494                           ; Initialize objects allocated to BANK0 (82 bytes)
   495                           ; load TBLPTR registers with __pidataBANK0
   496  0000' 0E00'              	movlw	low __pidataBANK0
   497  0002' 6EF6               	movwf	tblptrl,c
   498  0004' 0E00'              	movlw	high __pidataBANK0
   499  0006' 6EF7               	movwf	tblptrh,c
   500  0008' 0E00'              	movlw	low (__pidataBANK0 shr (0+16))
   501  000A' 6EF8               	movwf	tblptru,c
   502  000C' EE00' F000'        	lfsr	0,__pdataBANK0
   503  0010' EE10 F052          	lfsr	1,82
   504  0014'                    copy_data0:
   505  0014' 0009               	tblrd		*+
   506  0016' CFF5 FFEE          	movff	tablat,postinc0
   507  001A' 50E5               	movf	postdec1,w,c
   508  001C' 50E1               	movf	fsr1l,w,c
   509  001E' E1FA               	bnz	copy_data0
   510                           
   511                           ; Initialize objects allocated to COMRAM (18 bytes)
   512                           ; load TBLPTR registers with __pidataCOMRAM
   513  0020' 0E00'              	movlw	low __pidataCOMRAM
   514  0022' 6EF6               	movwf	tblptrl,c
   515  0024' 0E00'              	movlw	high __pidataCOMRAM
   516  0026' 6EF7               	movwf	tblptrh,c
   517  0028' 0E00'              	movlw	low (__pidataCOMRAM shr (0+16))
   518  002A' 6EF8               	movwf	tblptru,c
   519  002C' EE00' F000'        	lfsr	0,__pdataCOMRAM
   520  0030' EE10 F012          	lfsr	1,18
   521  0034'                    copy_data1:
   522  0034' 0009               	tblrd		*+
   523  0036' CFF5 FFEE          	movff	tablat,postinc0
   524  003A' 50E5               	movf	postdec1,w,c
   525  003C' 50E1               	movf	fsr1l,w,c
   526  003E' E1FA               	bnz	copy_data1
   527                           
   528                           ; Clear objects allocated to BANK1 (72 bytes)
   529  0040' EE00' F000'        	lfsr	0,__pbssBANK1
   530  0044' 0E48               	movlw	72
   531  0046'                    clear_0:
   532  0046' 6AEE               	clrf	postinc0,c
   533  0048' 06E8               	decf	wreg,f,c
   534  004A' E1FD               	bnz	clear_0
   535                           
   536                           ; Clear objects allocated to BANK0 (45 bytes)
   537  004C' EE00' F000'        	lfsr	0,__pbssBANK0
   538  0050' 0E2D               	movlw	45
   539  0052'                    clear_1:
   540  0052' 6AEE               	clrf	postinc0,c
   541  0054' 06E8               	decf	wreg,f,c
   542  0056' E1FD               	bnz	clear_1
   543                           
   544                           ; Clear objects allocated to COMRAM (78 bytes)
   545  0058' EE00' F000'        	lfsr	0,__pbssCOMRAM
   546  005C' 0E4E               	movlw	78
   547  005E'                    clear_2:
   548  005E' 6AEE               	clrf	postinc0,c
   549  0060' 06E8               	decf	wreg,f,c
   550  0062' E1FD               	bnz	clear_2
   551  0064'                    end_of_initialization:
   552                           	callstack 0
   553  0064'                    __end_of__initialization:
   554                           	callstack 0
   555  0064' 9000'              	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   556  0066' 9200'              	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   557  0068' 0E00'              	movlw	low (__Lmediumconst shr (0+16))
   558  006A' 6EF8               	movwf	tblptru,c
   559  006C' 0100               	movlb	0
   560  006E' EF00' F000'        	goto	_main	;jump to C main() function
   561                           
   562                           	psect	bssCOMRAM
   563  0000'                    __pbssCOMRAM:
   564                           	callstack 0
   565  0000'                    _topScores:
   566                           	callstack 0
   567  0000'                    	ds	10
   568  000A'                    _timerMusic:
   569                           	callstack 0
   570  000A'                    	ds	2
   571  000C'                    _topScore:
   572                           	callstack 0
   573  000C'                    	ds	2
   574  000E'                    _h_Tics:
   575                           	callstack 0
   576  000E'                    	ds	2
   577  0010'                    _error:
   578                           	callstack 0
   579  0010'                    	ds	2
   580  0012'                    _stateRX:
   581                           	callstack 0
   582  0012'                    	ds	1
   583  0013'                    _receive:
   584                           	callstack 0
   585  0013'                    	ds	1
   586  0014'                    _pointerRX:
   587                           	callstack 0
   588  0014'                    	ds	1
   589  0015'                    _pointer@TX$F2031:
   590                           	callstack 0
   591  0015'                    	ds	1
   592  0016'                    _toSend:
   593                           	callstack 0
   594  0016'                    	ds	1
   595  0017'                    _stateTX:
   596                           	callstack 0
   597  0017'                    	ds	1
   598  0018'                    _timerRX:
   599                           	callstack 0
   600  0018'                    	ds	1
   601  0019'                    _timerTX:
   602                           	callstack 0
   603  0019'                    	ds	1
   604  001A'                    _note:
   605                           	callstack 0
   606  001A'                    	ds	1
   607  001B'                    _musicState:
   608                           	callstack 0
   609  001B'                    	ds	1
   610  001C'                    _timerNote:
   611                           	callstack 0
   612  001C'                    	ds	1
   613  001D'                    _numAddress:
   614                           	callstack 0
   615  001D'                    	ds	1
   616  001E'                    _aux@EEPROM$F1778:
   617                           	callstack 0
   618  001E'                    	ds	1
   619  001F'                    _eepromState:
   620                           	callstack 0
   621  001F'                    	ds	1
   622  0020'                    _doneCharging:
   623                           	callstack 0
   624  0020'                    	ds	1
   625  0021'                    _pointerEeprom:
   626                           	callstack 0
   627  0021'                    	ds	1
   628  0022'                    _pointer@EEPROM$F1774:
   629                           	callstack 0
   630  0022'                    	ds	1
   631  0023'                    _show:
   632                           	callstack 0
   633  0023'                    	ds	1
   634  0024'                    _seconds@Timer$F1652:
   635                           	callstack 0
   636  0024'                    	ds	1
   637  0025'                    _minutes@Timer$F1651:
   638                           	callstack 0
   639  0025'                    	ds	1
   640  0026'                    _timerState:
   641                           	callstack 0
   642  0026'                    	ds	1
   643  0027'                    _timerPic:
   644                           	callstack 0
   645  0027'                    	ds	1
   646  0028'                    _counter:
   647                           	callstack 0
   648  0028'                    	ds	1
   649  0029'                    _Timer:
   650                           	callstack 0
   651  0029'                    	ds	1
   652  002A'                    _ColumnAct:
   653                           	callstack 0
   654  002A'                    	ds	1
   655  002B'                    _RowAct:
   656                           	callstack 0
   657  002B'                    	ds	1
   658  002C'                    _Columns:
   659                           	callstack 0
   660  002C'                    	ds	1
   661  002D'                    _Rows:
   662                           	callstack 0
   663  002D'                    	ds	1
   664  002E'                    _SMS:
   665                           	callstack 0
   666  002E'                    	ds	1
   667  002F'                    _valueOld:
   668                           	callstack 0
   669  002F'                    	ds	1
   670  0030'                    _value:
   671                           	callstack 0
   672  0030'                    	ds	1
   673  0031'                    _rotating:
   674                           	callstack 0
   675  0031'                    	ds	1
   676  0032'                    _press:
   677                           	callstack 0
   678  0032'                    	ds	1
   679  0033'                    _cols:
   680                           	callstack 0
   681  0033'                    	ds	1
   682  0034'                    _rows:
   683                           	callstack 0
   684  0034'                    	ds	1
   685  0035'                    _keypadState:
   686                           	callstack 0
   687  0035'                    	ds	1
   688  0036'                    _timerKeypad:
   689                           	callstack 0
   690  0036'                    	ds	1
   691  0037'                    _timerJoystick:
   692                           	callstack 0
   693  0037'                    	ds	1
   694  0038'                    _centre:
   695                           	callstack 0
   696  0038'                    	ds	1
   697  0039'                    _state:
   698                           	callstack 0
   699  0039'                    	ds	1
   700  003A'                    _positionJoystick@Joystick$F722:
   701                           	callstack 0
   702  003A'                    	ds	1
   703  003B'                    _gameON:
   704                           	callstack 0
   705  003B'                    	ds	1
   706  003C'                    _prevMaxScore:
   707                           	callstack 0
   708  003C'                    	ds	1
   709  003D'                    _prevMaxIndex:
   710                           	callstack 0
   711  003D'                    	ds	1
   712  003E'                    _aux:
   713                           	callstack 0
   714  003E'                    	ds	1
   715  003F'                    _timerMenu:
   716                           	callstack 0
   717  003F'                    	ds	1
   718  0040'                    _secondsCountdown:
   719                           	callstack 0
   720  0040'                    	ds	1
   721  0041'                    _minutesCountdown:
   722                           	callstack 0
   723  0041'                    	ds	1
   724  0042'                    _seconds:
   725                           	callstack 0
   726  0042'                    	ds	1
   727  0043'                    _minutes:
   728                           	callstack 0
   729  0043'                    	ds	1
   730  0044'                    _keyValue:
   731                           	callstack 0
   732  0044'                    	ds	1
   733  0045'                    _option:
   734                           	callstack 0
   735  0045'                    	ds	1
   736  0046'                    _auxPU:
   737                           	callstack 0
   738  0046'                    	ds	1
   739  0047'                    _pointerUser:
   740                           	callstack 0
   741  0047'                    	ds	1
   742  0048'                    _auxPM:
   743                           	callstack 0
   744  0048'                    	ds	1
   745  0049'                    _pointerMarquee:
   746                           	callstack 0
   747  0049'                    	ds	1
   748  004A'                    _pointer:
   749                           	callstack 0
   750  004A'                    	ds	1
   751  004B'                    _menuState:
   752                           	callstack 0
   753  004B'                    	ds	1
   754  004C'                    _numScores@Data$F582:
   755                           	callstack 0
   756  004C'                    	ds	1
   757  004D'                    _numUsers@Data$F581:
   758                           	callstack 0
   759  004D'                    	ds	1
   760                           
   761                           	psect	dataCOMRAM
   762  0000'                    __pdataCOMRAM:
   763                           	callstack 0
   764  0000'                    _enterPasswordString@Menu$F571:
   765                           	callstack 0
   766  0000'                    	ds	5
   767  0005'                    _enterUserString@Menu$F570:
   768                           	callstack 0
   769  0005'                    	ds	5
   770  000A'                    _menuStrings@Menu$F564:
   771                           	callstack 0
   772  000A'                    	ds	5
   773  000F'                    _byeString@Menu$F577:
   774                           	callstack 0
   775  000F'                    	ds	3
   776                           
   777                           	psect	bssBANK0
   778  0000'                    __pbssBANK0:
   779                           	callstack 0
   780  0000'                    _s_Timers:
   781                           	callstack 0
   782  0000'                    	ds	27
   783  001B'                    _user:
   784                           	callstack 0
   785  001B'                    	ds	18
   786                           
   787                           	psect	dataBANK0
   788  0000'                    __pdataBANK0:
   789                           	callstack 0
   790  0000'                    _timeRemainingString@Menu$F572:
   791                           	callstack 0
   792  0000'                    	ds	15
   793  000F'                    _currentTimeString@Menu$F578:
   794                           	callstack 0
   795  000F'                    	ds	13
   796  001C'                    _modifyTimeString@Menu$F576:
   797                           	callstack 0
   798  001C'                    	ds	12
   799  0028'                    _accessMenuString2@Menu$F563:
   800                           	callstack 0
   801  0028'                    	ds	11
   802  0033'                    _timeLeftString@Menu$F573:
   803                           	callstack 0
   804  0033'                    	ds	10
   805  003D'                    _accessMenuString1@Menu$F562:
   806                           	callstack 0
   807  003D'                    	ds	8
   808  0045'                    _errorsString@Menu$F575:
   809                           	callstack 0
   810  0045'                    	ds	7
   811  004C'                    _scoreString@Menu$F574:
   812                           	callstack 0
   813  004C'                    	ds	6
   814                           
   815                           	psect	bssBANK1
   816  0000'                    __pbssBANK1:
   817                           	callstack 0
   818  0000'                    _users:
   819                           	callstack 0
   820  0000'                    	ds	72
   821                           
   822                           	psect	cstackBANK1
   823  0000'                    __pcstackBANK1:
   824                           	callstack 0
   825  0000'                    ??_menuMotor:
   826  0000'                    ??_motorTimer:
   827                           
   828                           ; 1 bytes @ 0x0
   829  0000'                    	ds	6
   830                           
   831                           	psect	cstackCOMRAM
   832  0000'                    __pcstackCOMRAM:
   833                           	callstack 0
   834  0000'                    
   835                           ; 1 bytes @ 0x0
   836  0000'                    	ds	1
   837  0001'                    ??_RSI_High:
   838                           
   839                           ; 1 bytes @ 0x1
   840  0001'                    	ds	4
   841  0005'                    ??_initData:
   842  0005'                    ??_motorEeprom:
   843  0005'                    ??_EscriuPrimeraOrdre:
   844  0005'                    ??_CantaPartAlta:
   845  0005'                    ??_CantaPartBaixa:
   846  0005'                    ?_getScore:
   847                           	callstack 0
   848  0005'                    ?_TiGetTics:
   849                           	callstack 0
   850  0005'                    ?_getUser:
   851                           	callstack 0
   852  0005'                    setTX@text:
   853                           	callstack 0
   854  0005'                    KeyGetSMS@auxSMS:
   855                           	callstack 0
   856  0005'                    KeyGetNumber@auxValue:
   857                           	callstack 0
   858  0005'                    TiResetTics@Handle:
   859                           	callstack 0
   860  0005'                    readEeprom@num:
   861                           	callstack 0
   862  0005'                    readEepromScores@num:
   863                           	callstack 0
   864  0005'                    getFirstDirection@numAddress:
   865                           	callstack 0
   866  0005'                    getFirstDirectionScores@numAddress:
   867                           	callstack 0
   868  0005'                    ___lbmod@divisor:
   869                           	callstack 0
   870  0005'                    writeEepromScores@score:
   871                           	callstack 0
   872  0005'                    writeEeprom@us:
   873                           	callstack 0
   874                           
   875                           ; 18 bytes @ 0x5
   876  0005'                    	ds	1
   877  0006'                    CantaPartAlta@c:
   878                           	callstack 0
   879  0006'                    CantaPartBaixa@c:
   880                           	callstack 0
   881  0006'                    EscriuPrimeraOrdre@ordre:
   882                           	callstack 0
   883  0006'                    sendMyTX@send:
   884                           	callstack 0
   885  0006'                    ___lbmod@dividend:
   886                           	callstack 0
   887                           
   888                           ; 1 bytes @ 0x6
   889  0006'                    	ds	1
   890  0007'                    ??_TiGetTics:
   891  0007'                    CantaIR@IR:
   892                           	callstack 0
   893  0007'                    CantaData@Data:
   894                           	callstack 0
   895  0007'                    initData@i:
   896                           	callstack 0
   897  0007'                    writeEepromScores@num:
   898                           	callstack 0
   899  0007'                    ___lbmod@counter:
   900                           	callstack 0
   901                           
   902                           ; 1 bytes @ 0x7
   903  0007'                    	ds	1
   904  0008'                    initData@t:
   905                           	callstack 0
   906  0008'                    ___lbmod@rem:
   907                           	callstack 0
   908                           
   909                           ; 1 bytes @ 0x8
   910  0008'                    	ds	1
   911  0009'                    TiGetTics@Handle:
   912                           	callstack 0
   913  0009'                    initData@j:
   914                           	callstack 0
   915  0009'                    ___lbdiv@divisor:
   916                           	callstack 0
   917                           
   918                           ; 1 bytes @ 0x9
   919  0009'                    	ds	1
   920  000A'                    ___lbdiv@dividend:
   921                           	callstack 0
   922  000A'                    TiGetTics@actual:
   923                           	callstack 0
   924                           
   925                           ; 2 bytes @ 0xA
   926  000A'                    	ds	1
   927  000B'                    ___lbdiv@counter:
   928                           	callstack 0
   929                           
   930                           ; 1 bytes @ 0xB
   931  000B'                    	ds	1
   932  000C'                    ??_motorJoystick:
   933  000C'                    ??_motorKey:
   934  000C'                    ??_motorRX:
   935  000C'                    ??_motorTX:
   936  000C'                    ??_playNote:
   937  000C'                    WaitForBusy@Busy:
   938                           	callstack 0
   939  000C'                    ___lbdiv@quotient:
   940                           	callstack 0
   941  000C'                    Espera@Timer:
   942                           	callstack 0
   943                           
   944                           ; 2 bytes @ 0xC
   945  000C'                    	ds	1
   946  000D'                    LcGotoXY@Row:
   947                           	callstack 0
   948                           
   949                           ; 1 bytes @ 0xD
   950  000D'                    	ds	1
   951  000E'                    ??_LcGotoXY:
   952  000E'                    playNote@note:
   953                           	callstack 0
   954  000E'                    Espera@ms:
   955                           	callstack 0
   956                           
   957                           ; 2 bytes @ 0xE
   958  000E'                    	ds	1
   959  000F'                    ??_motorMusic:
   960                           
   961                           ; 1 bytes @ 0xF
   962  000F'                    	ds	1
   963  0010'                    LcInit@columns:
   964                           	callstack 0
   965  0010'                    _LcGotoXY$1446:
   966                           	callstack 0
   967                           
   968                           ; 2 bytes @ 0x10
   969  0010'                    	ds	1
   970  0011'                    LcInit@rows:
   971                           	callstack 0
   972                           
   973                           ; 1 bytes @ 0x11
   974  0011'                    	ds	1
   975  0012'                    LcInit@i:
   976                           	callstack 0
   977  0012'                    LcGotoXY@Fisics:
   978                           	callstack 0
   979                           
   980                           ; 2 bytes @ 0x12
   981  0012'                    	ds	2
   982  0014'                    LcGotoXY@Column:
   983                           	callstack 0
   984                           
   985                           ; 1 bytes @ 0x14
   986  0014'                    	ds	1
   987  0015'                    LcPutChar@c:
   988                           	callstack 0
   989                           
   990                           ; 1 bytes @ 0x15
   991  0015'                    	ds	1
   992  0016'                    LcPutTime@time:
   993                           	callstack 0
   994  0016'                    LcPutScore@score:
   995                           	callstack 0
   996                           
   997                           ; 1 bytes @ 0x16
   998  0016'                    	ds	1
   999  0017'                    writeEeprom@num:
  1000                           	callstack 0
  1001                           
  1002                           ; 1 bytes @ 0x17
  1003  0017'                    	ds	1
  1004  0018'                    
  1005                           ; 1 bytes @ 0x18
  1006 ;;
  1007 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1008 ;;
  1009 ;; *************** function _main *****************
  1010 ;; Defined at:
  1011 ;;		line 31 in file "main.c"
  1012 ;; Parameters:    Size  Location     Type
  1013 ;;		None
  1014 ;; Auto vars:     Size  Location     Type
  1015 ;;		None
  1016 ;; Return value:  Size  Location     Type
  1017 ;;                  1    wreg      void 
  1018 ;; Registers used:
  1019 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1020 ;; Tracked objects:
  1021 ;;		On entry : 0/0
  1022 ;;		On exit  : 0/0
  1023 ;;		Unchanged: 0/0
  1024 ;; Data sizes:     COMRAM   BANK0   BANK1
  1025 ;;      Params:         0       0       0
  1026 ;;      Locals:         0       0       0
  1027 ;;      Temps:          0       0       0
  1028 ;;      Totals:         0       0       0
  1029 ;;Total ram usage:        0 bytes
  1030 ;; Hardware stack levels required when called: 8
  1031 ;; This function calls:
  1032 ;;		_EeInitAction
  1033 ;;		_LcClear
  1034 ;;		_LcGotoXY
  1035 ;;		_LcInit
  1036 ;;		_TiGetTimer
  1037 ;;		_TiInitTimer
  1038 ;;		_TiResetTics
  1039 ;;		_initData
  1040 ;;		_initJoystick
  1041 ;;		_initKeypad
  1042 ;;		_initMenu
  1043 ;;		_initMusic
  1044 ;;		_initSIO
  1045 ;;		_initTX
  1046 ;;		_menuMotor
  1047 ;;		_motorEeprom
  1048 ;;		_motorJoystick
  1049 ;;		_motorKey
  1050 ;;		_motorMusic
  1051 ;;		_motorRX
  1052 ;;		_motorTX
  1053 ;;		_motorTimer
  1054 ;; This function is called by:
  1055 ;;		Startup code after reset
  1056 ;; This function uses a non-reentrant model
  1057 ;;
  1058                           
  1059                           	psect	text0
  1060  0000'                    __ptext0:
  1061                           	callstack 0
  1062  0000'                    _main:
  1063                           	callstack 23
  1064                           
  1065                           ;main.c: 32:         motorJoystick();
  1066                           
  1067                           ;incstack = 0
  1068  0000' EC00' F000'        	call	_TiGetTimer	;wreg free
  1069  0004' 6E00'              	movwf	_timerGeneral^0,c
  1070                           
  1071                           ;main.c: 33:         motorKey();
  1072  0006' EC00' F000'        	call	_TiInitTimer	;wreg free
  1073                           
  1074                           ;main.c: 34:         motorEeprom();
  1075  000A' EC00' F000'        	call	_initKeypad	;wreg free
  1076                           
  1077                           ;main.c: 35:         motorMusic();
  1078  000E' EC00' F000'        	call	_initData	;wreg free
  1079                           
  1080                           ;main.c: 36:         motorRX();
  1081  0012' EC00' F000'        	call	_initSIO	;wreg free
  1082                           
  1083                           ;main.c: 37:         motorTX();
  1084  0016' EC00' F000'        	call	_initJoystick	;wreg free
  1085                           
  1086                           ;main.c: 38:         motorTimer();
  1087  001A' 0E10               	movlw	16
  1088  001C' 6E00'              	movwf	LcInit@columns^0,c
  1089  001E' 0E02               	movlw	2
  1090  0020' EC00' F000'        	call	_LcInit
  1091                           
  1092                           ;main.c: 39:     }
  1093  0024' 9C93               	bcf	147,6,c	;volatile
  1094                           
  1095                           ;main.c: 40: }
  1096  0026' 9E93               	bcf	147,7,c	;volatile
  1097  0028' EC00' F000'        	call	_initMenu	;wreg free
  1098  002C' 9692               	bcf	146,3,c	;volatile
  1099  002E' 9689               	bcf	137,3,c	;volatile
  1100  0030' 9892               	bcf	146,4,c	;volatile
  1101  0032' 9889               	bcf	137,4,c	;volatile
  1102  0034' EC00' F000'        	call	_EeInitAction	;wreg free
  1103  0038' EC00' F000'        	call	_initMusic	;wreg free
  1104  003C' EC00' F000'        	call	_initTX	;wreg free
  1105  0040' 5000'              	movf	_timerGeneral^0,w,c
  1106  0042' EC00' F000'        	call	_TiResetTics
  1107  0046' EC00' F000'        	call	_LcClear	;wreg free
  1108  004A' 0E00               	movlw	0
  1109  004C' 6A00'              	clrf	LcGotoXY@Row^0,c
  1110  004E' EC00' F000'        	call	_LcGotoXY
  1111  0052'                    l7428:
  1112  0052' EC00' F000'        	call	_menuMotor	;wreg free
  1113  0056' EC00' F000'        	call	_motorJoystick	;wreg free
  1114  005A' EC00' F000'        	call	_motorKey	;wreg free
  1115  005E' EC00' F000'        	call	_motorEeprom	;wreg free
  1116  0062' EC00' F000'        	call	_motorMusic	;wreg free
  1117  0066' EC00' F000'        	call	_motorRX	;wreg free
  1118  006A' EC00' F000'        	call	_motorTX	;wreg free
  1119  006E' EC00' F000'        	call	_motorTimer	;wreg free
  1120  0072' D7EF               	goto	l7428
  1121  0074'                    __end_of_main:
  1122                           	callstack 0
  1123                           
  1124 ;; *************** function _motorTimer *****************
  1125 ;; Defined at:
  1126 ;;		line 100 in file "Timer.c"
  1127 ;; Parameters:    Size  Location     Type
  1128 ;;		None
  1129 ;; Auto vars:     Size  Location     Type
  1130 ;;		None
  1131 ;; Return value:  Size  Location     Type
  1132 ;;                  1    wreg      void 
  1133 ;; Registers used:
  1134 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1135 ;; Tracked objects:
  1136 ;;		On entry : 0/0
  1137 ;;		On exit  : 0/0
  1138 ;;		Unchanged: 0/0
  1139 ;; Data sizes:     COMRAM   BANK0   BANK1
  1140 ;;      Params:         0       0       0
  1141 ;;      Locals:         0       0       0
  1142 ;;      Temps:          0       0       2
  1143 ;;      Totals:         0       0       2
  1144 ;;Total ram usage:        2 bytes
  1145 ;; Hardware stack levels used: 1
  1146 ;; Hardware stack levels required when called: 7
  1147 ;; This function calls:
  1148 ;;		_LcGotoXY
  1149 ;;		_LcPutChar
  1150 ;;		_LcPutTime
  1151 ;;		_TiGetTics
  1152 ;;		_TiResetTics
  1153 ;; This function is called by:
  1154 ;;		_main
  1155 ;; This function uses a non-reentrant model
  1156 ;;
  1157                           
  1158                           	psect	text1
  1159  0000'                    __ptext1:
  1160                           	callstack 0
  1161  0000'                    _motorTimer:
  1162                           	callstack 23
  1163                           
  1164                           ;Timer.c: 101:     switch (timerState){
  1165                           
  1166                           ;incstack = 0
  1167  0000' D027               	goto	l7388
  1168  0002'                    l7366:
  1169                           
  1170                           ; BSR set to: 1
  1171                           ;Timer.c: 103:    if(TiGetTics(timerPic) == 1200){
  1172  0002' 5000'              	movf	_timerPic^0,w,c
  1173  0004' EC00' F000'        	call	_TiGetTics
  1174  0008' 0EB0               	movlw	176
  1175  000A' 1800'              	xorwf	?_TiGetTics^0,w,c
  1176  000C' E12E               	bnz	l956
  1177  000E' 0E04               	movlw	4
  1178  0010' 1800'              	xorwf	(?_TiGetTics+1)^0,w,c
  1179  0012' A4D8               	btfss	status,2,c
  1180  0014' 0012               	return	
  1181                           
  1182                           ;Timer.c: 104:                 TiResetTics(timerPic);
  1183  0016' 5000'              	movf	_timerPic^0,w,c
  1184  0018' EC00' F000'        	call	_TiResetTics
  1185                           
  1186                           ;Timer.c: 105:                 ++timerState;
  1187  001C' 2A00'              	incf	_timerState^0,f,c
  1188                           
  1189                           ;Timer.c: 106:                 if(seconds==9){
  1190  001E' 0E09               	movlw	9
  1191  0020' 1800'              	xorwf	_seconds@Timer$F1652^0,w,c
  1192  0022' E103               	bnz	l7378
  1193                           
  1194                           ;Timer.c: 107:                     ++minutes;
  1195  0024' 2A00'              	incf	_minutes@Timer$F1651^0,f,c
  1196                           
  1197                           ;Timer.c: 108:                     seconds = 0;
  1198  0026' 6A00'              	clrf	_seconds@Timer$F1652^0,c
  1199                           
  1200                           ;Timer.c: 110:                 }
  1201  0028' 0012               	return	
  1202  002A'                    l7378:
  1203                           
  1204                           ;Timer.c: 112:                     ++seconds;
  1205  002A' 2A00'              	incf	_seconds@Timer$F1652^0,f,c
  1206  002C' 0012               	return	
  1207  002E'                    l7380:
  1208                           
  1209                           ; BSR set to: 1
  1210                           ;Timer.c: 117:             if(show ==1){
  1211  002E' 0400'              	decf	_show^0,w,c
  1212  0030' E10D               	bnz	l7384
  1213                           
  1214                           ; BSR set to: 1
  1215                           ;Timer.c: 118:                 LcGotoXY(0,1);
  1216  0032' EC00' F000'        	call	PL50	;call to abstracted procedure
  1217  0036' EC00' F000'        	call	_LcGotoXY
  1218                           
  1219                           ;Timer.c: 119:                 LcPutTime(minutes);
  1220  003A' 5000'              	movf	_minutes@Timer$F1651^0,w,c
  1221  003C' EC00' F000'        	call	_LcPutTime
  1222                           
  1223                           ;Timer.c: 120:                 LcPutChar(':');
  1224  0040' 0E3A               	movlw	58
  1225  0042' EC00' F000'        	call	_LcPutChar
  1226                           
  1227                           ;Timer.c: 121:                 LcPutTime(seconds);
  1228  0046' 5000'              	movf	_seconds@Timer$F1652^0,w,c
  1229  0048' EC00' F000'        	call	_LcPutTime
  1230  004C'                    l7384:
  1231                           
  1232                           ;Timer.c: 123:             --timerState;
  1233  004C' 0600'              	decf	_timerState^0,f,c
  1234                           
  1235                           ;Timer.c: 124:             break;
  1236  004E' 0012               	return	
  1237  0050'                    l7388:
  1238  0050' 5000'              	movf	_timerState^0,w,c
  1239  0052' 0101               	movlb	1	; () banked
  1240  0054' 6F00'              	movwf	??_motorTimer& (0+255),b
  1241  0056' 6B00'              	clrf	(??_motorTimer+1)& (0+255),b
  1242                           
  1243                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1244                           ; Switch size 1, requested type "space"
  1245                           ; Number of cases is 1, Range of values is 0 to 0
  1246                           ; switch strategies available:
  1247                           ; Name         Instructions Cycles
  1248                           ; simple_byte            4     3 (average)
  1249                           ;	Chosen strategy is simple_byte
  1250  0058' 5100'              	movf	(??_motorTimer+1)& (0+255),w,b
  1251  005A' A4D8               	btfss	status,2,c
  1252  005C' 0012               	return	
  1253                           
  1254                           ; BSR set to: 1
  1255                           ; Switch size 1, requested type "space"
  1256                           ; Number of cases is 2, Range of values is 0 to 1
  1257                           ; switch strategies available:
  1258                           ; Name         Instructions Cycles
  1259                           ; simple_byte            7     4 (average)
  1260                           ;	Chosen strategy is simple_byte
  1261  005E' 5100'              	movf	??_motorTimer& (0+255),w,b
  1262  0060' E0D0               	bz	l7366
  1263  0062' 0A01               	xorlw	1	; case 1
  1264  0064' A4D8               	btfss	status,2,c
  1265  0066' 0012               	return	
  1266  0068' D7E2               	goto	l7380
  1267  006A'                    l956:
  1268  006A' 0012               	return		;funcret
  1269  006C'                    __end_of_motorTimer:
  1270                           	callstack 0
  1271                           
  1272 ;; *************** function _motorTX *****************
  1273 ;; Defined at:
  1274 ;;		line 26 in file "TX.c"
  1275 ;; Parameters:    Size  Location     Type
  1276 ;;		None
  1277 ;; Auto vars:     Size  Location     Type
  1278 ;;		None
  1279 ;; Return value:  Size  Location     Type
  1280 ;;                  1    wreg      void 
  1281 ;; Registers used:
  1282 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1283 ;; Tracked objects:
  1284 ;;		On entry : 0/0
  1285 ;;		On exit  : 0/0
  1286 ;;		Unchanged: 0/0
  1287 ;; Data sizes:     COMRAM   BANK0   BANK1
  1288 ;;      Params:         0       0       0
  1289 ;;      Locals:         0       0       0
  1290 ;;      Temps:          2       0       0
  1291 ;;      Totals:         2       0       0
  1292 ;;Total ram usage:        2 bytes
  1293 ;; Hardware stack levels used: 1
  1294 ;; Hardware stack levels required when called: 3
  1295 ;; This function calls:
  1296 ;;		_TiGetTics
  1297 ;;		_TiResetTics
  1298 ;; This function is called by:
  1299 ;;		_main
  1300 ;; This function uses a non-reentrant model
  1301 ;;
  1302                           
  1303                           	psect	text2
  1304  0000'                    __ptext2:
  1305                           	callstack 0
  1306  0000'                    _motorTX:
  1307                           	callstack 27
  1308                           
  1309                           ;TX.c: 27:     switch (stateTX){
  1310                           
  1311                           ;incstack = 0
  1312  0000' D02D               	goto	l6190
  1313  0002'                    l1180:
  1314                           
  1315                           ;TX.c: 29:             LATCbits.LATC5 = 1 & 0x01;
  1316  0002' 8A8B               	bsf	139,5,c	;volatile
  1317                           
  1318                           ;TX.c: 30:             break;
  1319  0004' 0012               	return	
  1320  0006'                    l6168:
  1321                           
  1322                           ;TX.c: 33:             if(TiGetTics(timerTX) >= 1){
  1323  0006' 5000'              	movf	_timerTX^0,w,c
  1324  0008' EC00' F000'        	call	_TiGetTics
  1325  000C' 5000'              	movf	?_TiGetTics^0,w,c
  1326  000E' 1000'              	iorwf	(?_TiGetTics+1)^0,w,c
  1327  0010' B4D8               	btfsc	status,2,c
  1328  0012' 0012               	return	
  1329                           
  1330                           ;TX.c: 34:                 TiResetTics(timerTX);
  1331  0014' 5000'              	movf	_timerTX^0,w,c
  1332  0016' EC00' F000'        	call	_TiResetTics
  1333                           
  1334                           ;TX.c: 35:                 if (pointer < 8){
  1335  001A' 0E08               	movlw	8
  1336  001C' 6000'              	cpfslt	_pointer@TX$F2031^0,c
  1337  001E' D00F               	goto	l6178
  1338                           
  1339                           ;TX.c: 36:                     LATCbits.LATC5 = (toSend & 0x01);
  1340  0020' C016' F00C'        	movff	_toSend,??_motorTX
  1341  0024' 0E01               	movlw	1
  1342  0026' 1600'              	andwf	??_motorTX^0,f,c
  1343  0028' 3A00'              	swapf	??_motorTX^0,f,c
  1344  002A' 4600'              	rlncf	??_motorTX^0,f,c
  1345  002C' 508B               	movf	139,w,c	;volatile
  1346  002E' 1800'              	xorwf	??_motorTX^0,w,c
  1347  0030' 0BDF               	andlw	-33
  1348  0032' 1800'              	xorwf	??_motorTX^0,w,c
  1349  0034' 6E8B               	movwf	139,c	;volatile
  1350                           
  1351                           ;TX.c: 37:                     toSend = (toSend >> 1);
  1352  0036' 90D8               	bcf	status,0,c
  1353  0038' 3200'              	rrcf	_toSend^0,f,c
  1354                           
  1355                           ;TX.c: 38:                     ++pointer;
  1356  003A' 2A00'              	incf	_pointer@TX$F2031^0,f,c
  1357                           
  1358                           ;TX.c: 39:                 }
  1359  003C' 0012               	return	
  1360  003E'                    l6178:
  1361                           
  1362                           ;TX.c: 41:                     ++stateTX;
  1363  003E' 2A00'              	incf	_stateTX^0,f,c
  1364                           
  1365                           ;TX.c: 42:                     LATCbits.LATC5 = 1 & 0x01;
  1366  0040' 8A8B               	bsf	139,5,c	;volatile
  1367                           
  1368                           ;TX.c: 43:                     TiResetTics(timerTX);
  1369  0042' 5000'              	movf	_timerTX^0,w,c
  1370  0044' EF00' F000'        	goto	_TiResetTics
  1371  0048'                    l6184:
  1372                           
  1373                           ;TX.c: 49:             if(TiGetTics(timerTX) >= 1){
  1374  0048' 5000'              	movf	_timerTX^0,w,c
  1375  004A' EC00' F000'        	call	_TiGetTics
  1376  004E' 5000'              	movf	?_TiGetTics^0,w,c
  1377  0050' 1000'              	iorwf	(?_TiGetTics+1)^0,w,c
  1378  0052' B4D8               	btfsc	status,2,c
  1379  0054' 0012               	return	
  1380                           
  1381                           ;TX.c: 50:                 LATCbits.LATC5 = 1 & 0x01;
  1382  0056' 8A8B               	bsf	139,5,c	;volatile
  1383                           
  1384                           ;TX.c: 51:                 stateTX=0;
  1385  0058' 6A00'              	clrf	_stateTX^0,c
  1386  005A' 0012               	return	
  1387  005C'                    l6190:
  1388  005C' 5000'              	movf	_stateTX^0,w,c
  1389  005E' 6E00'              	movwf	??_motorTX^0,c
  1390  0060' 6A00'              	clrf	(??_motorTX+1)^0,c
  1391                           
  1392                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1393                           ; Switch size 1, requested type "space"
  1394                           ; Number of cases is 1, Range of values is 0 to 0
  1395                           ; switch strategies available:
  1396                           ; Name         Instructions Cycles
  1397                           ; simple_byte            4     3 (average)
  1398                           ;	Chosen strategy is simple_byte
  1399  0062' 5000'              	movf	(??_motorTX+1)^0,w,c
  1400  0064' A4D8               	btfss	status,2,c
  1401  0066' 0012               	return	
  1402                           
  1403                           ; Switch size 1, requested type "space"
  1404                           ; Number of cases is 3, Range of values is 0 to 2
  1405                           ; switch strategies available:
  1406                           ; Name         Instructions Cycles
  1407                           ; simple_byte           10     6 (average)
  1408                           ;	Chosen strategy is simple_byte
  1409  0068' 5000'              	movf	??_motorTX^0,w,c
  1410  006A' E0CB               	bz	l1180
  1411  006C' 0A01               	xorlw	1	; case 1
  1412  006E' E0CB               	bz	l6168
  1413  0070' 0A03               	xorlw	3	; case 2
  1414  0072' E0EA               	bz	l6184
  1415  0074' 0012               	return		;funcret
  1416  0076'                    __end_of_motorTX:
  1417                           	callstack 0
  1418                           
  1419 ;; *************** function _motorRX *****************
  1420 ;; Defined at:
  1421 ;;		line 57 in file "TX.c"
  1422 ;; Parameters:    Size  Location     Type
  1423 ;;		None
  1424 ;; Auto vars:     Size  Location     Type
  1425 ;;		None
  1426 ;; Return value:  Size  Location     Type
  1427 ;;                  1    wreg      void 
  1428 ;; Registers used:
  1429 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1430 ;; Tracked objects:
  1431 ;;		On entry : 0/0
  1432 ;;		On exit  : 0/0
  1433 ;;		Unchanged: 0/0
  1434 ;; Data sizes:     COMRAM   BANK0   BANK1
  1435 ;;      Params:         0       0       0
  1436 ;;      Locals:         0       0       0
  1437 ;;      Temps:          2       0       0
  1438 ;;      Totals:         2       0       0
  1439 ;;Total ram usage:        2 bytes
  1440 ;; Hardware stack levels used: 1
  1441 ;; Hardware stack levels required when called: 4
  1442 ;; This function calls:
  1443 ;;		_TXgetState
  1444 ;;		_TiGetTics
  1445 ;;		_TiResetTics
  1446 ;;		_sendMyTX
  1447 ;;		_setTX
  1448 ;; This function is called by:
  1449 ;;		_main
  1450 ;; This function uses a non-reentrant model
  1451 ;;
  1452                           
  1453                           	psect	text3
  1454  0000'                    __ptext3:
  1455                           	callstack 0
  1456  0000'                    _motorRX:
  1457                           	callstack 26
  1458                           
  1459                           ;TX.c: 58:     switch (stateRX){
  1460                           
  1461                           ;incstack = 0
  1462  0000' D035               	goto	l6160
  1463  0002'                    l1192:
  1464                           
  1465                           ;TX.c: 60:             if(PORTCbits.RC4 == 0){
  1466  0002' B882               	btfsc	130,4,c	;volatile
  1467  0004' 0012               	return	
  1468                           
  1469                           ;TX.c: 61:                 TiResetTics(timerRX);
  1470  0006' 5000'              	movf	_timerRX^0,w,c
  1471  0008' EC00' F000'        	call	_TiResetTics
  1472                           
  1473                           ;TX.c: 62:                 ++stateRX;
  1474  000C' 2A00'              	incf	_stateRX^0,f,c
  1475  000E' 0012               	return	
  1476  0010'                    l6128:
  1477                           
  1478                           ;TX.c: 67:             if (pointerRX < 8){
  1479  0010' 0E08               	movlw	8
  1480  0012' 6000'              	cpfslt	_pointerRX^0,c
  1481  0014' D010               	goto	l6144
  1482                           
  1483                           ;TX.c: 68:                 if(TiGetTics(timerRX) >= 1){
  1484  0016' 5000'              	movf	_timerRX^0,w,c
  1485  0018' EC00' F000'        	call	_TiGetTics
  1486  001C' 5000'              	movf	?_TiGetTics^0,w,c
  1487  001E' 1000'              	iorwf	(?_TiGetTics+1)^0,w,c
  1488  0020' B4D8               	btfsc	status,2,c
  1489  0022' 0012               	return	
  1490                           
  1491                           ;TX.c: 69:                     if(PORTCbits.RC4) receive = receive | 0x80;
  1492  0024' A882               	btfss	130,4,c	;volatile
  1493  0026' D002               	goto	l6136
  1494  0028' 8E00'              	bsf	_receive^0,7,c
  1495  002A' D001               	goto	l6138
  1496  002C'                    l6136:
  1497  002C' 9E00'              	bcf	_receive^0,7,c
  1498  002E'                    l6138:
  1499                           
  1500                           ;TX.c: 71:                     receive = (receive >> 1);
  1501  002E' 90D8               	bcf	status,0,c
  1502  0030' 3200'              	rrcf	_receive^0,f,c
  1503                           
  1504                           ;TX.c: 72:                     ++pointerRX;
  1505  0032' 2A00'              	incf	_pointerRX^0,f,c
  1506  0034' D00B               	goto	l6152
  1507  0036'                    l6144:
  1508                           
  1509                           ;TX.c: 77:                 if(TXgetState()==0){
  1510  0036' EC00' F000'        	call	_TXgetState	;wreg free
  1511  003A' 0900               	iorlw	0
  1512  003C' E103               	bnz	l6148
  1513                           
  1514                           ;TX.c: 78:                     sendMyTX(receive);
  1515  003E' 5000'              	movf	_receive^0,w,c
  1516  0040' EC00' F000'        	call	_sendMyTX
  1517  0044'                    l6148:
  1518                           
  1519                           ;TX.c: 80:                 setTX(receive);
  1520  0044' 5000'              	movf	_receive^0,w,c
  1521  0046' EC00' F000'        	call	_setTX
  1522                           
  1523                           ;TX.c: 81:                 ++stateRX;
  1524  004A' 2A00'              	incf	_stateRX^0,f,c
  1525  004C'                    l6152:
  1526                           
  1527                           ;TX.c: 82:                 TiResetTics(timerRX);
  1528  004C' 5000'              	movf	_timerRX^0,w,c
  1529  004E' EF00' F000'        	goto	_TiResetTics
  1530  0052'                    l6154:
  1531                           
  1532                           ;TX.c: 87:             if(TiGetTics(timerRX) >= 24){
  1533  0052' 5000'              	movf	_timerRX^0,w,c
  1534  0054' EC00' F000'        	call	_TiGetTics
  1535  0058' 5000'              	movf	(?_TiGetTics+1)^0,w,c
  1536  005A' E104               	bnz	u5020
  1537  005C' 0E18               	movlw	24
  1538  005E' 5C00'              	subwf	?_TiGetTics^0,w,c
  1539  0060' A0D8               	btfss	status,0,c
  1540  0062' 0012               	return	
  1541  0064'                    u5020:
  1542                           
  1543                           ;TX.c: 88:                 receive = 0;
  1544  0064' 6A00'              	clrf	_receive^0,c
  1545                           
  1546                           ;TX.c: 89:                 stateRX=0;
  1547  0066' 6A00'              	clrf	_stateRX^0,c
  1548                           
  1549                           ;TX.c: 90:                 pointerRX = 0;
  1550  0068' 6A00'              	clrf	_pointerRX^0,c
  1551  006A' 0012               	return	
  1552  006C'                    l6160:
  1553  006C' 5000'              	movf	_stateRX^0,w,c
  1554  006E' 6E00'              	movwf	??_motorRX^0,c
  1555  0070' 6A00'              	clrf	(??_motorRX+1)^0,c
  1556                           
  1557                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1558                           ; Switch size 1, requested type "space"
  1559                           ; Number of cases is 1, Range of values is 0 to 0
  1560                           ; switch strategies available:
  1561                           ; Name         Instructions Cycles
  1562                           ; simple_byte            4     3 (average)
  1563                           ;	Chosen strategy is simple_byte
  1564  0072' 5000'              	movf	(??_motorRX+1)^0,w,c
  1565  0074' A4D8               	btfss	status,2,c
  1566  0076' 0012               	return	
  1567                           
  1568                           ; Switch size 1, requested type "space"
  1569                           ; Number of cases is 3, Range of values is 0 to 2
  1570                           ; switch strategies available:
  1571                           ; Name         Instructions Cycles
  1572                           ; simple_byte           10     6 (average)
  1573                           ;	Chosen strategy is simple_byte
  1574  0078' 5000'              	movf	??_motorRX^0,w,c
  1575  007A' E0C3               	bz	l1192
  1576  007C' 0A01               	xorlw	1	; case 1
  1577  007E' E0C8               	bz	l6128
  1578  0080' 0A03               	xorlw	3	; case 2
  1579  0082' E0E7               	bz	l6154
  1580  0084' 0012               	return		;funcret
  1581  0086'                    __end_of_motorRX:
  1582                           	callstack 0
  1583                           
  1584 ;; *************** function _motorMusic *****************
  1585 ;; Defined at:
  1586 ;;		line 17 in file "Music.c"
  1587 ;; Parameters:    Size  Location     Type
  1588 ;;		None
  1589 ;; Auto vars:     Size  Location     Type
  1590 ;;		None
  1591 ;; Return value:  Size  Location     Type
  1592 ;;                  1    wreg      void 
  1593 ;; Registers used:
  1594 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1595 ;; Tracked objects:
  1596 ;;		On entry : 0/0
  1597 ;;		On exit  : 0/0
  1598 ;;		Unchanged: 0/0
  1599 ;; Data sizes:     COMRAM   BANK0   BANK1
  1600 ;;      Params:         0       0       0
  1601 ;;      Locals:         0       0       0
  1602 ;;      Temps:          2       0       0
  1603 ;;      Totals:         2       0       0
  1604 ;;Total ram usage:        2 bytes
  1605 ;; Hardware stack levels used: 1
  1606 ;; Hardware stack levels required when called: 4
  1607 ;; This function calls:
  1608 ;;		_TiGetTics
  1609 ;;		_TiResetTics
  1610 ;;		_playNote
  1611 ;; This function is called by:
  1612 ;;		_main
  1613 ;; This function uses a non-reentrant model
  1614 ;;
  1615                           
  1616                           	psect	text4
  1617  0000'                    __ptext4:
  1618                           	callstack 0
  1619  0000'                    _motorMusic:
  1620                           	callstack 26
  1621                           
  1622                           ;Music.c: 18:     switch(musicState){
  1623                           
  1624                           ;incstack = 0
  1625  0000' D015               	goto	l6116
  1626  0002'                    l6102:
  1627                           
  1628                           ;Music.c: 20:             if(TiGetTics(timerMusic) > 1200){
  1629  0002' 5000'              	movf	_timerMusic^0,w,c
  1630  0004' EC00' F000'        	call	_TiGetTics
  1631  0008' EC00' F000'        	call	PL46	;call to abstracted procedure
  1632  000C' E30C               	bnc	l6112
  1633                           
  1634                           ;Music.c: 21:                 TiResetTics(timerMusic);
  1635  000E' 5000'              	movf	_timerMusic^0,w,c
  1636  0010' EC00' F000'        	call	_TiResetTics
  1637                           
  1638                           ;Music.c: 22:                 note *=2;
  1639  0014' 0E02               	movlw	2
  1640  0016' 0200'              	mulwf	_note^0,c
  1641  0018' 50F3               	movf	prodl,w,c
  1642  001A' 6E00'              	movwf	_note^0,c
  1643                           
  1644                           ;Music.c: 23:                if (note > 16){
  1645  001C' 0E10               	movlw	16
  1646  001E' 6400'              	cpfsgt	_note^0,c
  1647  0020' D002               	goto	l6112
  1648                           
  1649                           ;Music.c: 24:                    note = 1;
  1650  0022' 0E01               	movlw	1
  1651  0024' 6E00'              	movwf	_note^0,c
  1652  0026'                    l6112:
  1653                           
  1654                           ;Music.c: 27:             playNote(note);
  1655  0026' 5000'              	movf	_note^0,w,c
  1656  0028' EF00' F000'        	goto	_playNote
  1657  002C'                    l6116:
  1658  002C' 5000'              	movf	_musicState^0,w,c
  1659  002E' 6E00'              	movwf	??_motorMusic^0,c
  1660  0030' 6A00'              	clrf	(??_motorMusic+1)^0,c
  1661                           
  1662                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1663                           ; Switch size 1, requested type "space"
  1664                           ; Number of cases is 1, Range of values is 0 to 0
  1665                           ; switch strategies available:
  1666                           ; Name         Instructions Cycles
  1667                           ; simple_byte            4     3 (average)
  1668                           ;	Chosen strategy is simple_byte
  1669  0032' 5000'              	movf	(??_motorMusic+1)^0,w,c
  1670  0034' A4D8               	btfss	status,2,c
  1671  0036' 0012               	return	
  1672                           
  1673                           ; Switch size 1, requested type "space"
  1674                           ; Number of cases is 2, Range of values is 0 to 1
  1675                           ; switch strategies available:
  1676                           ; Name         Instructions Cycles
  1677                           ; simple_byte            7     4 (average)
  1678                           ;	Chosen strategy is simple_byte
  1679  0038' 5000'              	movf	??_motorMusic^0,w,c
  1680  003A' E0E3               	bz	l6102
  1681  003C' 0A01               	xorlw	1	; case 1
  1682  003E' 0012               	return	
  1683  0040'                    __end_of_motorMusic:
  1684                           	callstack 0
  1685                           
  1686 ;; *************** function _playNote *****************
  1687 ;; Defined at:
  1688 ;;		line 44 in file "Music.c"
  1689 ;; Parameters:    Size  Location     Type
  1690 ;;  note            1    wreg     unsigned char 
  1691 ;; Auto vars:     Size  Location     Type
  1692 ;;  note            1   14[COMRAM] unsigned char 
  1693 ;; Return value:  Size  Location     Type
  1694 ;;                  1    wreg      void 
  1695 ;; Registers used:
  1696 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1697 ;; Tracked objects:
  1698 ;;		On entry : 0/0
  1699 ;;		On exit  : 0/0
  1700 ;;		Unchanged: 0/0
  1701 ;; Data sizes:     COMRAM   BANK0   BANK1
  1702 ;;      Params:         0       0       0
  1703 ;;      Locals:         1       0       0
  1704 ;;      Temps:          2       0       0
  1705 ;;      Totals:         3       0       0
  1706 ;;Total ram usage:        3 bytes
  1707 ;; Hardware stack levels used: 1
  1708 ;; Hardware stack levels required when called: 3
  1709 ;; This function calls:
  1710 ;;		_TiGetTics
  1711 ;;		_TiResetTics
  1712 ;; This function is called by:
  1713 ;;		_motorMusic
  1714 ;; This function uses a non-reentrant model
  1715 ;;
  1716                           
  1717                           	psect	text5
  1718  0000'                    __ptext5:
  1719                           	callstack 0
  1720  0000'                    _playNote:
  1721                           	callstack 26
  1722                           
  1723                           ;incstack = 0
  1724                           ;playNote@note stored from wreg
  1725  0000' 6E00'              	movwf	playNote@note^0,c
  1726                           
  1727                           ;Music.c: 45:     if(TiGetTics(timerNote) > note){
  1728  0002' 5000'              	movf	_timerNote^0,w,c
  1729  0004' EC00' F000'        	call	_TiGetTics
  1730  0008' 5000'              	movf	playNote@note^0,w,c
  1731  000A' 6E00'              	movwf	??_playNote^0,c
  1732  000C' 6A00'              	clrf	(??_playNote+1)^0,c
  1733  000E' 5000'              	movf	?_TiGetTics^0,w,c
  1734  0010' 5C00'              	subwf	??_playNote^0,w,c
  1735  0012' 5000'              	movf	(?_TiGetTics+1)^0,w,c
  1736  0014' 5800'              	subwfb	(??_playNote+1)^0,w,c
  1737  0016' B0D8               	btfsc	status,0,c
  1738  0018' 0012               	return	
  1739                           
  1740                           ;Music.c: 46:         LATDbits.LATD3 = 1 - LATDbits.LATD3;
  1741  001A' A68C               	btfss	140,3,c	;volatile
  1742  001C' D003               	goto	u3030
  1743  001E' 6A00'              	clrf	??_playNote^0,c
  1744  0020' 2A00'              	incf	??_playNote^0,f,c
  1745  0022' D001               	goto	u3038
  1746  0024'                    u3030:
  1747  0024' 6A00'              	clrf	??_playNote^0,c
  1748  0026'                    u3038:
  1749  0026' 5000'              	movf	??_playNote^0,w,c
  1750  0028' 0801               	sublw	1
  1751  002A' 6E00'              	movwf	(??_playNote+1)^0,c
  1752  002C' 4600'              	rlncf	(??_playNote+1)^0,f,c
  1753  002E' 4600'              	rlncf	(??_playNote+1)^0,f,c
  1754  0030' 4600'              	rlncf	(??_playNote+1)^0,f,c
  1755  0032' 508C               	movf	140,w,c	;volatile
  1756  0034' 1800'              	xorwf	(??_playNote+1)^0,w,c
  1757  0036' 0BF7               	andlw	-9
  1758  0038' 1800'              	xorwf	(??_playNote+1)^0,w,c
  1759  003A' 6E8C               	movwf	140,c	;volatile
  1760                           
  1761                           ;Music.c: 47:         TiResetTics(timerNote);
  1762  003C' 5000'              	movf	_timerNote^0,w,c
  1763  003E' EF00' F000'        	goto	_TiResetTics
  1764  0042'                    __end_of_playNote:
  1765                           	callstack 0
  1766                           
  1767 ;; *************** function _motorKey *****************
  1768 ;; Defined at:
  1769 ;;		line 47 in file "Keypad.c"
  1770 ;; Parameters:    Size  Location     Type
  1771 ;;		None
  1772 ;; Auto vars:     Size  Location     Type
  1773 ;;		None
  1774 ;; Return value:  Size  Location     Type
  1775 ;;                  1    wreg      void 
  1776 ;; Registers used:
  1777 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1778 ;; Tracked objects:
  1779 ;;		On entry : 0/0
  1780 ;;		On exit  : 0/0
  1781 ;;		Unchanged: 0/0
  1782 ;; Data sizes:     COMRAM   BANK0   BANK1
  1783 ;;      Params:         0       0       0
  1784 ;;      Locals:         0       0       0
  1785 ;;      Temps:          2       0       0
  1786 ;;      Totals:         2       0       0
  1787 ;;Total ram usage:        2 bytes
  1788 ;; Hardware stack levels used: 1
  1789 ;; Hardware stack levels required when called: 4
  1790 ;; This function calls:
  1791 ;;		_KeyResetValue
  1792 ;;		_TiGetTics
  1793 ;;		_TiResetTics
  1794 ;;		___lbmod
  1795 ;; This function is called by:
  1796 ;;		_main
  1797 ;; This function uses a non-reentrant model
  1798 ;;
  1799                           
  1800                           	psect	text6
  1801  0000'                    __ptext6:
  1802                           	callstack 0
  1803  0000'                    _motorKey:
  1804                           	callstack 26
  1805                           
  1806                           ;Keypad.c: 48:     switch(keypadState){
  1807                           
  1808                           ;incstack = 0
  1809  0000' D08C               	goto	l5906
  1810  0002'                    l5834:
  1811                           
  1812                           ;Keypad.c: 50:             rows = (rows+1) % 4;
  1813  0002' 2800'              	incf	_rows^0,w,c
  1814  0004' 0B03               	andlw	3
  1815  0006' 6E00'              	movwf	_rows^0,c
  1816                           
  1817                           ;Keypad.c: 51:             switch(rows){
  1818  0008' D00C               	goto	l5838
  1819  000A'                    l699:
  1820                           
  1821                           ;Keypad.c: 53:                     (LATDbits.LATD7 = LATDbits.LATD6 = LATDbits.LATD5 = L
      +                          ATDbits.LATD4 = 1);
  1822  000A' D897               	call	PL48	;call to abstracted procedure
  1823                           
  1824                           ;Keypad.c: 54:                     LATDbits.LATD4 = 0;
  1825  000C' 988C               	bcf	140,4,c	;volatile
  1826                           
  1827                           ;Keypad.c: 55:                     break;
  1828  000E' D016               	goto	l5840
  1829  0010'                    l701:
  1830                           
  1831                           ;Keypad.c: 58:                     (LATDbits.LATD7 = LATDbits.LATD6 = LATDbits.LATD5 = L
      +                          ATDbits.LATD4 = 1);
  1832  0010' D894               	call	PL48	;call to abstracted procedure
  1833                           
  1834                           ;Keypad.c: 59:                     LATDbits.LATD5 = 0;
  1835  0012' 9A8C               	bcf	140,5,c	;volatile
  1836                           
  1837                           ;Keypad.c: 60:                     break;
  1838  0014' D013               	goto	l5840
  1839  0016'                    l702:
  1840                           
  1841                           ;Keypad.c: 63:                     (LATDbits.LATD7 = LATDbits.LATD6 = LATDbits.LATD5 = L
      +                          ATDbits.LATD4 = 1);
  1842  0016' D891               	call	PL48	;call to abstracted procedure
  1843                           
  1844                           ;Keypad.c: 64:                     LATDbits.LATD6 = 0;
  1845  0018' 9C8C               	bcf	140,6,c	;volatile
  1846                           
  1847                           ;Keypad.c: 65:                     break;
  1848  001A' D010               	goto	l5840
  1849  001C'                    l703:
  1850                           
  1851                           ;Keypad.c: 68:                     (LATDbits.LATD7 = LATDbits.LATD6 = LATDbits.LATD5 = L
      +                          ATDbits.LATD4 = 1);
  1852  001C' D88E               	call	PL48	;call to abstracted procedure
  1853                           
  1854                           ;Keypad.c: 69:                     LATDbits.LATD7 = 0;
  1855  001E' 9E8C               	bcf	140,7,c	;volatile
  1856                           
  1857                           ;Keypad.c: 70:                     break;
  1858  0020' D00D               	goto	l5840
  1859  0022'                    l5838:
  1860  0022' 5000'              	movf	_rows^0,w,c
  1861  0024' 6E00'              	movwf	??_motorKey^0,c
  1862  0026' 6A00'              	clrf	(??_motorKey+1)^0,c
  1863                           
  1864                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1865                           ; Switch size 1, requested type "space"
  1866                           ; Number of cases is 1, Range of values is 0 to 0
  1867                           ; switch strategies available:
  1868                           ; Name         Instructions Cycles
  1869                           ; simple_byte            4     3 (average)
  1870                           ;	Chosen strategy is simple_byte
  1871  0028' 5000'              	movf	(??_motorKey+1)^0,w,c
  1872  002A' E108               	bnz	l5840
  1873                           
  1874                           ; Switch size 1, requested type "space"
  1875                           ; Number of cases is 4, Range of values is 0 to 3
  1876                           ; switch strategies available:
  1877                           ; Name         Instructions Cycles
  1878                           ; simple_byte           13     7 (average)
  1879                           ;	Chosen strategy is simple_byte
  1880  002C' 5000'              	movf	??_motorKey^0,w,c
  1881  002E' E0ED               	bz	l699
  1882  0030' 0A01               	xorlw	1	; case 1
  1883  0032' E0EE               	bz	l701
  1884  0034' 0A03               	xorlw	3	; case 2
  1885  0036' E0EF               	bz	l702
  1886  0038' 0A01               	xorlw	1	; case 3
  1887  003A' E0F0               	bz	l703
  1888  003C'                    l5840:
  1889                           
  1890                           ;Keypad.c: 72:             if(TiGetTics(timerKeypad)>1200) KeyResetValue();
  1891  003C' 5000'              	movf	_timerKeypad^0,w,c
  1892  003E' EC00' F000'        	call	_TiGetTics
  1893  0042' EC00' F000'        	call	PL46	;call to abstracted procedure
  1894  0046' E302               	bnc	l5844
  1895  0048' EC00' F000'        	call	_KeyResetValue	;wreg free
  1896  004C'                    l5844:
  1897                           
  1898                           ;Keypad.c: 73:             if (!((PORTBbits.RB1) && (PORTBbits.RB2) && (PORTBbits.RB3))=
      +                          =1){
  1899  004C' B281               	btfsc	129,1,c	;volatile
  1900  004E' A481               	btfss	129,2,c	;volatile
  1901  0050' D002               	goto	u4730
  1902  0052' B681               	btfsc	129,3,c	;volatile
  1903  0054' 0012               	return	
  1904  0056'                    u4730:
  1905                           
  1906                           ;Keypad.c: 74:                 ++keypadState;
  1907  0056' 2A00'              	incf	_keypadState^0,f,c
  1908                           
  1909                           ;Keypad.c: 75:                 TiResetTics(timerKeypad);
  1910  0058' 5000'              	movf	_timerKeypad^0,w,c
  1911  005A' EF00' F000'        	goto	_TiResetTics
  1912  005E'                    l5854:
  1913                           
  1914                           ;Keypad.c: 80:             if(TiGetTics(timerKeypad) > 24)
  1915  005E' 5000'              	movf	_timerKeypad^0,w,c
  1916  0060' EC00' F000'        	call	_TiGetTics
  1917  0064' 5000'              	movf	(?_TiGetTics+1)^0,w,c
  1918  0066' E104               	bnz	u4740
  1919  0068' 0E19               	movlw	25
  1920  006A' 5C00'              	subwf	?_TiGetTics^0,w,c
  1921  006C' A0D8               	btfss	status,0,c
  1922  006E' 0012               	return	
  1923  0070'                    u4740:
  1924                           
  1925                           ;Keypad.c: 81:                 if(!((PORTBbits.RB1) && (PORTBbits.RB2) && (PORTBbits.RB3
      +                          ))==1){
  1926  0070' B281               	btfsc	129,1,c	;volatile
  1927  0072' A481               	btfss	129,2,c	;volatile
  1928  0074' D002               	goto	u4770
  1929  0076' B681               	btfsc	129,3,c	;volatile
  1930  0078' D00E               	goto	l5870
  1931  007A'                    u4770:
  1932                           
  1933                           ;Keypad.c: 82:                     if(PORTBbits.RB2 == 0) cols=0;
  1934  007A' B481               	btfsc	129,2,c	;volatile
  1935  007C' D002               	goto	l714
  1936  007E' 6A00'              	clrf	_cols^0,c
  1937  0080' D008               	goto	l5868
  1938  0082'                    l714:
  1939  0082' B281               	btfsc	129,1,c	;volatile
  1940  0084' D002               	goto	l716
  1941  0086' 0E01               	movlw	1
  1942  0088' D003               	goto	L1
  1943  008A'                    l716:
  1944  008A' B681               	btfsc	129,3,c	;volatile
  1945  008C' D002               	goto	l5868
  1946  008E' 0E02               	movlw	2
  1947  0090'                    L1:
  1948  0090' 6E00'              	movwf	_cols^0,c
  1949  0092'                    l5868:
  1950                           
  1951                           ;Keypad.c: 85:                     ++keypadState;
  1952  0092' 2A00'              	incf	_keypadState^0,f,c
  1953                           
  1954                           ;Keypad.c: 86:                 }
  1955  0094' 0012               	return	
  1956  0096'                    l5870:
  1957  0096' 0600'              	decf	_keypadState^0,f,c
  1958  0098' 0012               	return	
  1959  009A'                    l720:
  1960                           
  1961                           ;Keypad.c: 90:             valueOld = value;
  1962  009A' C030' F02F'        	movff	_value,_valueOld
  1963                           
  1964                           ;Keypad.c: 91:             value = text[rows][cols];
  1965  009E' 5000'              	movf	_rows^0,w,c
  1966  00A0' 0D03               	mullw	3
  1967  00A2' 50F3               	movf	243,w,c
  1968  00A4' 0F00'              	addlw	low _text
  1969  00A6' 2400'              	addwf	_cols^0,w,c
  1970  00A8' D84D               	call	PL60	;call to abstracted procedure
  1971  00AA' CFF5 F030'         	movff	tablat,_value
  1972                           
  1973                           ;Keypad.c: 92:             if(value == valueOld)++press;
  1974  00AE' 5000'              	movf	_valueOld^0,w,c
  1975  00B0' 1800'              	xorwf	_value^0,w,c
  1976  00B2' E101               	bnz	l5878
  1977  00B4' 2A00'              	incf	_press^0,f,c
  1978  00B6'                    l5878:
  1979                           
  1980                           ;Keypad.c: 93:             if (value == '#'||value == '*') SMS = value;
  1981  00B6' 0E23               	movlw	35
  1982  00B8' 1800'              	xorwf	_value^0,w,c
  1983  00BA' E003               	bz	u4830
  1984  00BC' 0E2A               	movlw	42
  1985  00BE' 1800'              	xorwf	_value^0,w,c
  1986  00C0' E103               	bnz	l5882
  1987  00C2'                    u4830:
  1988  00C2' C030' F02E'        	movff	_value,_SMS
  1989  00C6' D7E5               	goto	l5868
  1990  00C8'                    l5882:
  1991                           
  1992                           ;Keypad.c: 95:                 SMS = textSMS[value][press%5];
  1993  00C8' 0E05               	movlw	5
  1994  00CA' 6E00'              	movwf	___lbmod@divisor^0,c
  1995  00CC' 5000'              	movf	_press^0,w,c
  1996  00CE' EC00' F000'        	call	___lbmod
  1997  00D2' 6E00'              	movwf	??_motorKey^0,c
  1998  00D4' D83E               	call	PL74	;call to abstracted procedure
  1999  00D6' 2400'              	addwf	??_motorKey^0,w,c
  2000  00D8' 6E00'              	movwf	(??_motorKey+1)^0,c
  2001  00DA' C00D' FFF6         	movff	??_motorKey+1,tblptrl
  2002  00DE'                    	if	1	;There is more than 1 active tblptr byte
  2003  00DE' 0E00'              	movlw	high __smallconst
  2004  00E0' 6EF7               	movwf	tblptrh,c
  2005  00E2'                    	endif
  2006  00E2'                    	if	0	;tblptru may be non-zero
  2007  00E2'                    	endif
  2008  00E2'                    	if	0	;tblptru may be non-zero
  2009  00E2'                    	endif
  2010  00E2' 0008               	tblrd		*
  2011  00E4' CFF5 F02E'         	movff	tablat,_SMS
  2012                           
  2013                           ;Keypad.c: 96:                 if( SMS == '%'|| press==5){
  2014  00E8' 0E25               	movlw	37
  2015  00EA' 1800'              	xorwf	_SMS^0,w,c
  2016  00EC' E003               	bz	u4850
  2017  00EE' 0E05               	movlw	5
  2018  00F0' 1800'              	xorwf	_press^0,w,c
  2019  00F2' E1CF               	bnz	l5868
  2020  00F4'                    u4850:
  2021                           
  2022                           ;Keypad.c: 97:                     rotating = 2;
  2023  00F4' 0E02               	movlw	2
  2024  00F6' 6E00'              	movwf	_rotating^0,c
  2025                           
  2026                           ;Keypad.c: 98:                     press=0;
  2027  00F8' 6A00'              	clrf	_press^0,c
  2028                           
  2029                           ;Keypad.c: 99:                     SMS = textSMS[value][press];
  2030  00FA' D82B               	call	PL74	;call to abstracted procedure
  2031  00FC' 2400'              	addwf	_press^0,w,c
  2032  00FE' D822               	call	PL60	;call to abstracted procedure
  2033  0100' CFF5 F02E'         	movff	tablat,_SMS
  2034  0104' D7C6               	goto	l5868
  2035  0106'                    l729:
  2036                           
  2037                           ;Keypad.c: 105:             if (!((PORTBbits.RB1) && (PORTBbits.RB2) && (PORTBbits.RB3))
      +                          ==0){
  2038  0106' B281               	btfsc	129,1,c	;volatile
  2039  0108' A481               	btfss	129,2,c	;volatile
  2040  010A' 0012               	return	
  2041  010C' A681               	btfss	129,3,c	;volatile
  2042  010E' 0012               	return	
  2043                           
  2044                           ;Keypad.c: 106:                 TiResetTics(timerKeypad);
  2045  0110' 5000'              	movf	_timerKeypad^0,w,c
  2046  0112' EC00' F000'        	call	_TiResetTics
  2047                           
  2048                           ;Keypad.c: 107:                 keypadState=0;
  2049  0116' 6A00'              	clrf	_keypadState^0,c
  2050  0118' 0012               	return	
  2051  011A'                    l5906:
  2052  011A' 5000'              	movf	_keypadState^0,w,c
  2053  011C' 6E00'              	movwf	??_motorKey^0,c
  2054  011E' 6A00'              	clrf	(??_motorKey+1)^0,c
  2055                           
  2056                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2057                           ; Switch size 1, requested type "space"
  2058                           ; Number of cases is 1, Range of values is 0 to 0
  2059                           ; switch strategies available:
  2060                           ; Name         Instructions Cycles
  2061                           ; simple_byte            4     3 (average)
  2062                           ;	Chosen strategy is simple_byte
  2063  0120' 5000'              	movf	(??_motorKey+1)^0,w,c
  2064  0122' A4D8               	btfss	status,2,c
  2065  0124' 0012               	return	
  2066                           
  2067                           ; Switch size 1, requested type "space"
  2068                           ; Number of cases is 4, Range of values is 0 to 3
  2069                           ; switch strategies available:
  2070                           ; Name         Instructions Cycles
  2071                           ; simple_byte           13     7 (average)
  2072                           ;	Chosen strategy is simple_byte
  2073  0126' 5000'              	movf	??_motorKey^0,w,c
  2074  0128' E101 D76B          	bz	l5834
  2075  012C' 0A01               	xorlw	1	; case 1
  2076  012E' E097               	bz	l5854
  2077  0130' 0A03               	xorlw	3	; case 2
  2078  0132' E0B3               	bz	l720
  2079  0134' 0A01               	xorlw	1	; case 3
  2080  0136' E0E7               	bz	l729
  2081  0138' 0012               	return		;funcret
  2082  013A'                    __end_of_motorKey:
  2083                           	callstack 0
  2084  013A'                    PL48:
  2085                           	callstack 27
  2086  013A' 888C               	bsf	140,4,c	;volatile
  2087  013C' 8A8C               	bsf	140,5,c	;volatile
  2088  013E' 8C8C               	bsf	140,6,c	;volatile
  2089  0140' 8E8C               	bsf	140,7,c	;volatile
  2090  0142' 0012               	return	
  2091  0144'                    __end_ofPL48:
  2092                           	callstack 0
  2093  0144'                    PL60:
  2094                           	callstack 26
  2095  0144' 6E00'              	movwf	??_motorKey^0,c
  2096  0146' C00C' FFF6         	movff	??_motorKey,tblptrl
  2097  014A'                    	if	1	;There is more than 1 active tblptr byte
  2098  014A' 0E00'              	movlw	high __smallconst
  2099  014C' 6EF7               	movwf	tblptrh,c
  2100  014E'                    	endif
  2101  014E'                    	if	0	;tblptru may be non-zero
  2102  014E'                    	endif
  2103  014E'                    	if	0	;tblptru may be non-zero
  2104  014E'                    	endif
  2105  014E' 0008               	tblrd		*
  2106  0150' 0012               	return	
  2107  0152'                    __end_ofPL60:
  2108                           	callstack 0
  2109  0152'                    PL74:
  2110                           	callstack 26
  2111  0152' 5000'              	movf	_value^0,w,c
  2112  0154' 0D05               	mullw	5
  2113  0156' 50F3               	movf	243,w,c
  2114  0158' 0F00'              	addlw	low _textSMS
  2115  015A' 0012               	return	
  2116  015C'                    __end_ofPL74:
  2117                           	callstack 0
  2118                           
  2119 ;; *************** function _motorJoystick *****************
  2120 ;; Defined at:
  2121 ;;		line 20 in file "Joystick.c"
  2122 ;; Parameters:    Size  Location     Type
  2123 ;;		None
  2124 ;; Auto vars:     Size  Location     Type
  2125 ;;		None
  2126 ;; Return value:  Size  Location     Type
  2127 ;;                  1    wreg      void 
  2128 ;; Registers used:
  2129 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2130 ;; Tracked objects:
  2131 ;;		On entry : 0/0
  2132 ;;		On exit  : 0/0
  2133 ;;		Unchanged: 0/0
  2134 ;; Data sizes:     COMRAM   BANK0   BANK1
  2135 ;;      Params:         0       0       0
  2136 ;;      Locals:         0       0       0
  2137 ;;      Temps:          2       0       0
  2138 ;;      Totals:         2       0       0
  2139 ;;Total ram usage:        2 bytes
  2140 ;; Hardware stack levels used: 1
  2141 ;; Hardware stack levels required when called: 3
  2142 ;; This function calls:
  2143 ;;		_TXbusy
  2144 ;;		_TiGetTics
  2145 ;;		_TiResetTics
  2146 ;;		_getGame
  2147 ;;		_getPositionJoystick
  2148 ;;		_resetPositionJoystick
  2149 ;;		_setTX
  2150 ;; This function is called by:
  2151 ;;		_main
  2152 ;; This function uses a non-reentrant model
  2153 ;;
  2154                           
  2155                           	psect	text7
  2156  0000'                    __ptext7:
  2157                           	callstack 0
  2158  0000'                    _motorJoystick:
  2159                           	callstack 27
  2160                           
  2161                           ;Joystick.c: 21:     switch(state){
  2162                           
  2163                           ;incstack = 0
  2164  0000' D057               	goto	l5826
  2165  0002'                    l5756:
  2166                           
  2167                           ;Joystick.c: 23:             if(TiGetTics(timerJoystick) > 24){
  2168  0002' 5000'              	movf	_timerJoystick^0,w,c
  2169  0004' EC00' F000'        	call	_TiGetTics
  2170  0008' 5000'              	movf	(?_TiGetTics+1)^0,w,c
  2171  000A' E104               	bnz	u4540
  2172  000C' 0E19               	movlw	25
  2173  000E' 5C00'              	subwf	?_TiGetTics^0,w,c
  2174  0010' A0D8               	btfss	status,0,c
  2175  0012' 0012               	return	
  2176  0014'                    u4540:
  2177                           
  2178                           ;Joystick.c: 24:               if(ADCON0bits.CHS0 == 0){
  2179  0014' B4C2               	btfsc	194,2,c	;volatile
  2180  0016' D004               	goto	l580
  2181                           
  2182                           ;Joystick.c: 25:                 ADCON0bits.CHS0 = 1;
  2183  0018' 84C2               	bsf	194,2,c	;volatile
  2184                           
  2185                           ;Joystick.c: 26:                 state = 2;
  2186  001A' 0E02               	movlw	2
  2187  001C' 6E00'              	movwf	_state^0,c
  2188                           
  2189                           ;Joystick.c: 27:                 } else {
  2190  001E' D002               	goto	l5766
  2191  0020'                    l580:
  2192                           
  2193                           ;Joystick.c: 28:                     ADCON0bits.CHS0 = 0;
  2194  0020' 94C2               	bcf	194,2,c	;volatile
  2195                           
  2196                           ;Joystick.c: 29:                     ++state;
  2197  0022' 2A00'              	incf	_state^0,f,c
  2198  0024'                    l5766:
  2199                           
  2200                           ;Joystick.c: 31:                 ADCON0bits.DONE = 1;
  2201  0024' 82C2               	bsf	194,1,c	;volatile
  2202  0026' 0012               	return	
  2203  0028'                    l583:
  2204                           
  2205                           ;Joystick.c: 36:             if (ADCON0bits.DONE == 0){
  2206  0028' B2C2               	btfsc	194,1,c	;volatile
  2207  002A' 0012               	return	
  2208                           
  2209                           ;Joystick.c: 37:                 if(ADRESH > 180){
  2210  002C' 0EB4               	movlw	180
  2211  002E' 64C4               	cpfsgt	196,c	;volatile
  2212  0030' D002               	goto	l5774
  2213                           
  2214                           ;Joystick.c: 38:                     positionJoystick = 'D';
  2215  0032' 0E44               	movlw	68
  2216  0034' D00E               	goto	L3
  2217  0036'                    l5774:
  2218  0036' 0E46               	movlw	70
  2219  0038' 60C4               	cpfslt	196,c	;volatile
  2220  003A' D002               	goto	l5780
  2221                           
  2222                           ;Joystick.c: 41:                     positionJoystick = 'A';
  2223  003C' 0E41               	movlw	65
  2224  003E' D009               	goto	L3
  2225  0040'                    l5780:
  2226                           
  2227                           ;Joystick.c: 45:                     centre = 1;
  2228  0040' 0E01               	movlw	1
  2229  0042' D010               	goto	L15
  2230  0044'                    l586:
  2231                           
  2232                           ;Joystick.c: 47:                 state = 3;
  2233                           
  2234                           ;Joystick.c: 48:                 ADCON0bits.DONE = 1;
  2235  0044' D044               	goto	PL72	;call to abstracted procedure
  2236  0046'                    l589:
  2237                           
  2238                           ;Joystick.c: 53:             if (ADCON0bits.DONE == 0){
  2239  0046' B2C2               	btfsc	194,1,c	;volatile
  2240  0048' 0012               	return	
  2241                           
  2242                           ;Joystick.c: 54:                 if(ADRESH > 180){
  2243  004A' 0EB4               	movlw	180
  2244  004C' 64C4               	cpfsgt	196,c	;volatile
  2245  004E' D004               	goto	l5790
  2246                           
  2247                           ;Joystick.c: 55:                     positionJoystick = 'S';
  2248  0050' 0E53               	movlw	83
  2249  0052'                    L3:
  2250  0052' 6E00'              	movwf	_positionJoystick@Joystick$F722^0,c
  2251                           
  2252                           ;Joystick.c: 56:                     centre = 0;
  2253  0054' 6A00'              	clrf	_centre^0,c
  2254                           
  2255                           ;Joystick.c: 57:                 }else if(ADRESH < 70){
  2256  0056' D03B               	goto	PL72
  2257  0058'                    l5790:
  2258  0058' 0E46               	movlw	70
  2259  005A' 60C4               	cpfslt	196,c	;volatile
  2260  005C' D002               	goto	l5796
  2261                           
  2262                           ;Joystick.c: 58:                     positionJoystick = 'W';
  2263  005E' 0E57               	movlw	87
  2264  0060' D7F8               	goto	L3
  2265  0062'                    l5796:
  2266                           
  2267                           ;Joystick.c: 62:                     centre = 2;
  2268  0062' 0E02               	movlw	2
  2269  0064'                    L15:
  2270  0064' 6E00'              	movwf	_centre^0,c
  2271  0066'                    l592:
  2272                           
  2273                           ;Joystick.c: 64:                 state = 3;
  2274                           
  2275                           ;Joystick.c: 65:                 ADCON0bits.DONE = 1;
  2276  0066' D033               	goto	PL72	;call to abstracted procedure
  2277  0068'                    l5800:
  2278                           
  2279                           ;Joystick.c: 70:             if((positionJoystick == 'S' || positionJoystick == 'W') && 
      +                          centre == 2 || (positionJoystick == 'A' || positionJoystick == 'D') && centre == 1){
  2280  0068' 0E53               	movlw	83
  2281  006A' 1800'              	xorwf	_positionJoystick@Joystick$F722^0,w,c
  2282  006C' E003               	bz	u4630
  2283  006E' 0E57               	movlw	87
  2284  0070' 1800'              	xorwf	_positionJoystick@Joystick$F722^0,w,c
  2285  0072' E103               	bnz	u4640
  2286  0074'                    u4630:
  2287  0074' 0E02               	movlw	2
  2288  0076' 1800'              	xorwf	_centre^0,w,c
  2289  0078' E008               	bz	u4670
  2290  007A'                    u4640:
  2291  007A' 0E41               	movlw	65
  2292  007C' 1800'              	xorwf	_positionJoystick@Joystick$F722^0,w,c
  2293  007E' E003               	bz	u4660
  2294  0080' 0E44               	movlw	68
  2295  0082' 1800'              	xorwf	_positionJoystick@Joystick$F722^0,w,c
  2296  0084' E110               	bnz	l5820
  2297  0086'                    u4660:
  2298  0086' 0400'              	decf	_centre^0,w,c
  2299  0088' E10E               	bnz	l5820
  2300  008A'                    u4670:
  2301                           
  2302                           ;Joystick.c: 71:                 if(TXbusy()==1 && getGame()==1){
  2303  008A' EC00' F000'        	call	_TXbusy	;wreg free
  2304  008E' 06E8               	decf	wreg,f,c
  2305  0090' E10A               	bnz	l5820
  2306  0092' EC00' F000'        	call	_getGame	;wreg free
  2307  0096' 06E8               	decf	wreg,f,c
  2308  0098' E106               	bnz	l5820
  2309                           
  2310                           ;Joystick.c: 72:                     setTX(getPositionJoystick());
  2311  009A' EC00' F000'        	call	_getPositionJoystick	;wreg free
  2312  009E' EC00' F000'        	call	_setTX
  2313                           
  2314                           ;Joystick.c: 73:                     resetPositionJoystick();
  2315  00A2' EC00' F000'        	call	_resetPositionJoystick	;wreg free
  2316  00A6'                    l5820:
  2317                           
  2318                           ;Joystick.c: 76:             TiResetTics(timerJoystick);
  2319  00A6' 5000'              	movf	_timerJoystick^0,w,c
  2320  00A8' EC00' F000'        	call	_TiResetTics
  2321                           
  2322                           ;Joystick.c: 77:             state = 0;
  2323  00AC' 6A00'              	clrf	_state^0,c
  2324                           
  2325                           ;Joystick.c: 78:             break;
  2326  00AE' 0012               	return	
  2327  00B0'                    l5826:
  2328  00B0' 5000'              	movf	_state^0,w,c
  2329  00B2' 6E00'              	movwf	??_motorJoystick^0,c
  2330  00B4' 6A00'              	clrf	(??_motorJoystick+1)^0,c
  2331                           
  2332                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2333                           ; Switch size 1, requested type "space"
  2334                           ; Number of cases is 1, Range of values is 0 to 0
  2335                           ; switch strategies available:
  2336                           ; Name         Instructions Cycles
  2337                           ; simple_byte            4     3 (average)
  2338                           ;	Chosen strategy is simple_byte
  2339  00B6' 5000'              	movf	(??_motorJoystick+1)^0,w,c
  2340  00B8' A4D8               	btfss	status,2,c
  2341  00BA' 0012               	return	
  2342                           
  2343                           ; Switch size 1, requested type "space"
  2344                           ; Number of cases is 4, Range of values is 0 to 3
  2345                           ; switch strategies available:
  2346                           ; Name         Instructions Cycles
  2347                           ; simple_byte           13     7 (average)
  2348                           ;	Chosen strategy is simple_byte
  2349  00BC' 5000'              	movf	??_motorJoystick^0,w,c
  2350  00BE' E0A1               	bz	l5756
  2351  00C0' 0A01               	xorlw	1	; case 1
  2352  00C2' E0B2               	bz	l583
  2353  00C4' 0A03               	xorlw	3	; case 2
  2354  00C6' E0BF               	bz	l589
  2355  00C8' 0A01               	xorlw	1	; case 3
  2356  00CA' E0CE               	bz	l5800
  2357  00CC' 0012               	return		;funcret
  2358  00CE'                    __end_of_motorJoystick:
  2359                           	callstack 0
  2360  00CE'                    PL72:
  2361                           	callstack 27
  2362  00CE' 0E03               	movlw	3
  2363  00D0' 6E00'              	movwf	_state^0,c
  2364  00D2' 82C2               	bsf	194,1,c	;volatile
  2365  00D4' 0C03               	retlw	3
  2366  00D6'                    __end_ofPL72:
  2367                           	callstack 0
  2368                           
  2369 ;; *************** function _getGame *****************
  2370 ;; Defined at:
  2371 ;;		line 920 in file "Menu.c"
  2372 ;; Parameters:    Size  Location     Type
  2373 ;;		None
  2374 ;; Auto vars:     Size  Location     Type
  2375 ;;		None
  2376 ;; Return value:  Size  Location     Type
  2377 ;;                  1    wreg      unsigned char 
  2378 ;; Registers used:
  2379 ;;		wreg, status,2
  2380 ;; Tracked objects:
  2381 ;;		On entry : 0/0
  2382 ;;		On exit  : 0/0
  2383 ;;		Unchanged: 0/0
  2384 ;; Data sizes:     COMRAM   BANK0   BANK1
  2385 ;;      Params:         0       0       0
  2386 ;;      Locals:         0       0       0
  2387 ;;      Temps:          0       0       0
  2388 ;;      Totals:         0       0       0
  2389 ;;Total ram usage:        0 bytes
  2390 ;; Hardware stack levels used: 1
  2391 ;; Hardware stack levels required when called: 2
  2392 ;; This function calls:
  2393 ;;		Nothing
  2394 ;; This function is called by:
  2395 ;;		_motorJoystick
  2396 ;; This function uses a non-reentrant model
  2397 ;;
  2398                           
  2399                           	psect	text8
  2400  0000'                    __ptext8:
  2401                           	callstack 0
  2402  0000'                    _getGame:
  2403                           	callstack 27
  2404                           
  2405                           ;Menu.c: 921:     return gameON;
  2406                           
  2407                           ;incstack = 0
  2408  0000' 5000'              	movf	_gameON^0,w,c
  2409  0002' 0012               	return		;funcret
  2410  0004'                    __end_of_getGame:
  2411                           	callstack 0
  2412                           
  2413 ;; *************** function _motorEeprom *****************
  2414 ;; Defined at:
  2415 ;;		line 18 in file "EEPROM.c"
  2416 ;; Parameters:    Size  Location     Type
  2417 ;;		None
  2418 ;; Auto vars:     Size  Location     Type
  2419 ;;		None
  2420 ;; Return value:  Size  Location     Type
  2421 ;;                  1    wreg      void 
  2422 ;; Registers used:
  2423 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  2424 ;; Tracked objects:
  2425 ;;		On entry : 0/0
  2426 ;;		On exit  : 0/0
  2427 ;;		Unchanged: 0/0
  2428 ;; Data sizes:     COMRAM   BANK0   BANK1
  2429 ;;      Params:         0       0       0
  2430 ;;      Locals:         0       0       0
  2431 ;;      Temps:          2       0       0
  2432 ;;      Totals:         2       0       0
  2433 ;;Total ram usage:        2 bytes
  2434 ;; Hardware stack levels used: 1
  2435 ;; Hardware stack levels required when called: 2
  2436 ;; This function calls:
  2437 ;;		Nothing
  2438 ;; This function is called by:
  2439 ;;		_main
  2440 ;; This function uses a non-reentrant model
  2441 ;;
  2442                           
  2443                           	psect	text9
  2444  0000'                    __ptext9:
  2445                           	callstack 0
  2446  0000'                    _motorEeprom:
  2447                           	callstack 28
  2448                           
  2449                           ;EEPROM.c: 19:     switch(eepromState){
  2450                           
  2451                           ;incstack = 0
  2452  0000' D08C               	goto	l6094
  2453  0002'                    l5918:
  2454                           
  2455                           ;EEPROM.c: 22:             EEADR = numAddress*18+10 + pointerEeprom;
  2456  0002' D8A9               	call	PL30	;call to abstracted procedure
  2457                           
  2458                           ;EEPROM.c: 23:             EEDATA = user.username[pointer];
  2459  0004' D8B8               	call	PL66	;call to abstracted procedure
  2460  0006' 50DF               	movf	indf2,w,c
  2461  0008' 6EA8               	movwf	168,c	;volatile
  2462                           
  2463                           ;EEPROM.c: 24:             EECON1bits.EEPGD = 0;
  2464  000A' 9EA6               	bcf	166,7,c	;volsfr
  2465                           
  2466                           ;EEPROM.c: 25:             EECON1bits.CFGS = 0;
  2467  000C' 9CA6               	bcf	166,6,c	;volsfr
  2468                           
  2469                           ;EEPROM.c: 26:             EECON1bits.WREN = 1;
  2470  000E' 84A6               	bsf	166,2,c	;volsfr
  2471                           
  2472                           ;EEPROM.c: 27:             INTCONbits.GIE = 0;
  2473  0010' 9EF2               	bcf	242,7,c	;volatile
  2474                           
  2475                           ;EEPROM.c: 28:             EECON2 = 0x55;
  2476  0012' 0E55               	movlw	85
  2477  0014' 6EA7               	movwf	167,c	;volsfr
  2478                           
  2479                           ;EEPROM.c: 29:             EECON2 = 0xAA;
  2480  0016' 0EAA               	movlw	170
  2481  0018' 6EA7               	movwf	167,c	;volsfr
  2482                           
  2483                           ;EEPROM.c: 30:             EECON1bits.WR = 1;
  2484  001A' 82A6               	bsf	166,1,c	;volsfr
  2485                           
  2486                           ;EEPROM.c: 31:             INTCONbits.GIE = 1;
  2487  001C' 8EF2               	bsf	242,7,c	;volatile
  2488                           
  2489                           ;EEPROM.c: 32:             EECON1bits.WREN = 0;
  2490  001E' 94A6               	bcf	166,2,c	;volsfr
  2491                           
  2492                           ;EEPROM.c: 33:             ++pointerEeprom;
  2493  0020' 2A00'              	incf	_pointerEeprom^0,f,c
  2494                           
  2495                           ;EEPROM.c: 34:             if(user.username[pointer] != '\0'){
  2496  0022' D8A9               	call	PL66	;call to abstracted procedure
  2497  0024' 50DF               	movf	indf2,w,c
  2498  0026' E003               	bz	l1025
  2499                           
  2500                           ;EEPROM.c: 35:                 ++pointer;
  2501  0028' 2A00'              	incf	_pointer@EEPROM$F1774^0,f,c
  2502                           
  2503                           ;EEPROM.c: 36:                 aux = 0;
  2504  002A' 6A00'              	clrf	_aux@EEPROM$F1778^0,c
  2505  002C'                    l5948:
  2506                           
  2507                           ;EEPROM.c: 37:                 eepromState = 4;
  2508                           
  2509                           ;EEPROM.c: 38:             }
  2510  002C' D0AE               	goto	PL94	;call to abstracted procedure
  2511  002E'                    l1025:
  2512                           
  2513                           ;EEPROM.c: 40:                 pointer = 0;
  2514  002E' 6A00'              	clrf	_pointer@EEPROM$F1774^0,c
  2515  0030'                    
  2516                           ;EEPROM.c: 41:                 aux = 1;
  2517  0030' 0E01               	movlw	1
  2518  0032' D027               	goto	L4
  2519  0034'                    l5952:
  2520                           
  2521                           ;EEPROM.c: 48:             EEADR = numAddress*18+10 + pointerEeprom;
  2522  0034' D890               	call	PL30	;call to abstracted procedure
  2523                           
  2524                           ;EEPROM.c: 49:             EEDATA = user.password[pointer];
  2525  0036' D896               	call	PL58	;call to abstracted procedure
  2526  0038' 50DF               	movf	indf2,w,c
  2527  003A' 6EA8               	movwf	168,c	;volatile
  2528                           
  2529                           ;EEPROM.c: 50:             EECON1bits.EEPGD = 0;
  2530  003C' 9EA6               	bcf	166,7,c	;volsfr
  2531                           
  2532                           ;EEPROM.c: 51:             EECON1bits.CFGS = 0;
  2533  003E' 9CA6               	bcf	166,6,c	;volsfr
  2534                           
  2535                           ;EEPROM.c: 52:             EECON1bits.WREN = 1;
  2536  0040' 84A6               	bsf	166,2,c	;volsfr
  2537                           
  2538                           ;EEPROM.c: 53:             INTCONbits.GIE = 0;
  2539  0042' 9EF2               	bcf	242,7,c	;volatile
  2540                           
  2541                           ;EEPROM.c: 54:             EECON2 = 0x55;
  2542  0044' 0E55               	movlw	85
  2543  0046' 6EA7               	movwf	167,c	;volsfr
  2544                           
  2545                           ;EEPROM.c: 55:             EECON2 = 0xAA;
  2546  0048' 0EAA               	movlw	170
  2547  004A' 6EA7               	movwf	167,c	;volsfr
  2548                           
  2549                           ;EEPROM.c: 56:             EECON1bits.WR = 1;
  2550  004C' 82A6               	bsf	166,1,c	;volsfr
  2551                           
  2552                           ;EEPROM.c: 57:             INTCONbits.GIE = 1;
  2553  004E' 8EF2               	bsf	242,7,c	;volatile
  2554                           
  2555                           ;EEPROM.c: 58:             EECON1bits.WREN = 0;
  2556  0050' 94A6               	bcf	166,2,c	;volsfr
  2557                           
  2558                           ;EEPROM.c: 59:             ++pointerEeprom;
  2559  0052' 2A00'              	incf	_pointerEeprom^0,f,c
  2560                           
  2561                           ;EEPROM.c: 60:             if(user.password[pointer] != '\0'){
  2562  0054' D887               	call	PL58	;call to abstracted procedure
  2563  0056' 50DF               	movf	indf2,w,c
  2564  0058' E002               	bz	l5984
  2565                           
  2566                           ;EEPROM.c: 61:                 ++pointer;
  2567  005A' 2A00'              	incf	_pointer@EEPROM$F1774^0,f,c
  2568  005C' D7E9               	goto	L16
  2569  005E'                    l5984:
  2570                           
  2571                           ;EEPROM.c: 66:                 eepromState = 10;
  2572                           
  2573                           ;EEPROM.c: 67:                 doneCharging = 1;
  2574  005E' D090               	goto	PL68	;call to abstracted procedure
  2575  0060'                    l1031:
  2576                           
  2577                           ;EEPROM.c: 72:             EEADR = numAddress;
  2578  0060' C01D' FFA9         	movff	_numAddress,4009	;volatile
  2579                           
  2580                           ;EEPROM.c: 73:             EEDATA = topScore.score;
  2581  0064' C00C' FFA8         	movff	_topScore,4008	;volatile
  2582                           
  2583                           ;EEPROM.c: 74:             EECON1bits.EEPGD = 0;
  2584  0068' 9EA6               	bcf	166,7,c	;volsfr
  2585                           
  2586                           ;EEPROM.c: 75:             EECON1bits.CFGS = 0;
  2587  006A' 9CA6               	bcf	166,6,c	;volsfr
  2588                           
  2589                           ;EEPROM.c: 76:             EECON1bits.WREN = 1;
  2590  006C' 84A6               	bsf	166,2,c	;volsfr
  2591                           
  2592                           ;EEPROM.c: 77:             INTCONbits.GIE = 0;
  2593  006E' 9EF2               	bcf	242,7,c	;volatile
  2594                           
  2595                           ;EEPROM.c: 78:             EECON2 = 0x55;
  2596  0070' 0E55               	movlw	85
  2597  0072' 6EA7               	movwf	167,c	;volsfr
  2598                           
  2599                           ;EEPROM.c: 79:             EECON2 = 0xAA;
  2600  0074' 0EAA               	movlw	170
  2601  0076' 6EA7               	movwf	167,c	;volsfr
  2602                           
  2603                           ;EEPROM.c: 80:             EECON1bits.WR = 1;
  2604  0078' 82A6               	bsf	166,1,c	;volsfr
  2605                           
  2606                           ;EEPROM.c: 81:             INTCONbits.GIE = 1;
  2607  007A' 8EF2               	bsf	242,7,c	;volatile
  2608                           
  2609                           ;EEPROM.c: 82:             EECON1bits.WREN = 0;
  2610  007C' 94A6               	bcf	166,2,c	;volsfr
  2611                           
  2612                           ;EEPROM.c: 83:             ++pointerEeprom;
  2613  007E' 2A00'              	incf	_pointerEeprom^0,f,c
  2614                           
  2615                           ;EEPROM.c: 84:             aux = 3;
  2616  0080' 0E03               	movlw	3
  2617  0082'                    L4:
  2618  0082' 6E00'              	movwf	_aux@EEPROM$F1778^0,c
  2619  0084' D082               	goto	PL94
  2620  0086'                    l6000:
  2621                           
  2622                           ;EEPROM.c: 89:             EEADR = numAddress + 1;
  2623  0086' 2800'              	incf	_numAddress^0,w,c
  2624  0088' 6EA9               	movwf	169,c	;volatile
  2625                           
  2626                           ;EEPROM.c: 90:             EEDATA = topScore.user;
  2627  008A' C00D' FFA8         	movff	_topScore+1,4008	;volatile
  2628                           
  2629                           ;EEPROM.c: 91:             EECON1bits.EEPGD = 0;
  2630  008E' 9EA6               	bcf	166,7,c	;volsfr
  2631                           
  2632                           ;EEPROM.c: 92:             EECON1bits.CFGS = 0;
  2633  0090' 9CA6               	bcf	166,6,c	;volsfr
  2634                           
  2635                           ;EEPROM.c: 93:             EECON1bits.WREN = 1;
  2636  0092' 84A6               	bsf	166,2,c	;volsfr
  2637                           
  2638                           ;EEPROM.c: 94:             INTCONbits.GIE = 0;
  2639  0094' 9EF2               	bcf	242,7,c	;volatile
  2640                           
  2641                           ;EEPROM.c: 95:             EECON2 = 0x55;
  2642  0096' 0E55               	movlw	85
  2643  0098' 6EA7               	movwf	167,c	;volsfr
  2644                           
  2645                           ;EEPROM.c: 96:             EECON2 = 0xAA;
  2646  009A' 0EAA               	movlw	170
  2647  009C' 6EA7               	movwf	167,c	;volsfr
  2648                           
  2649                           ;EEPROM.c: 97:             EECON1bits.WR = 1;
  2650  009E' 82A6               	bsf	166,1,c	;volsfr
  2651                           
  2652                           ;EEPROM.c: 98:             INTCONbits.GIE = 1;
  2653  00A0' 8EF2               	bsf	242,7,c	;volatile
  2654                           
  2655                           ;EEPROM.c: 99:             EECON1bits.WREN = 0;
  2656  00A2' 94A6               	bcf	166,2,c	;volsfr
  2657                           
  2658                           ;EEPROM.c: 100:             ++pointerEeprom;
  2659  00A4' 2A00'              	incf	_pointerEeprom^0,f,c
  2660  00A6'                    l6024:
  2661                           
  2662                           ;EEPROM.c: 101:             eepromState = 10;
  2663                           
  2664                           ;EEPROM.c: 102:             doneCharging = 1;
  2665                           
  2666                           ;EEPROM.c: 103:             break;
  2667  00A6' D06C               	goto	PL68	;call to abstracted procedure
  2668  00A8'                    l1033:
  2669                           
  2670                           ;EEPROM.c: 106:             if(EECON1bits.WR == 0){
  2671  00A8' B2A6               	btfsc	166,1,c	;volsfr
  2672  00AA' 0012               	return	
  2673  00AC'                    u4910:
  2674                           
  2675                           ;EEPROM.c: 107:                 eepromState = aux;
  2676  00AC' C01E' F01F'        	movff	_aux@EEPROM$F1778,_eepromState
  2677  00B0' 0012               	return	
  2678  00B2'                    l6030:
  2679                           
  2680                           ;EEPROM.c: 113:             EEADR = numAddress*18+10 + pointerEeprom;
  2681  00B2' D851               	call	PL30	;call to abstracted procedure
  2682                           
  2683                           ;EEPROM.c: 114:             EECON1bits.EEPGD = 0;
  2684  00B4' 9EA6               	bcf	166,7,c	;volsfr
  2685                           
  2686                           ;EEPROM.c: 115:             EECON1bits.CFGS = 0;
  2687  00B6' 9CA6               	bcf	166,6,c	;volsfr
  2688                           
  2689                           ;EEPROM.c: 116:             EECON1bits.RD = 1;
  2690  00B8' 80A6               	bsf	166,0,c	;volsfr
  2691                           
  2692                           ;EEPROM.c: 117:             ++pointerEeprom;
  2693  00BA' 2A00'              	incf	_pointerEeprom^0,f,c
  2694                           
  2695                           ;EEPROM.c: 118:             if(EEDATA != 0){
  2696  00BC' 50A8               	movf	168,w,c	;volatile
  2697  00BE' E006               	bz	l1036
  2698                           
  2699                           ;EEPROM.c: 119:                 user.username[pointer] = EEDATA;
  2700  00C0' D85A               	call	PL66	;call to abstracted procedure
  2701  00C2' CFA8 FFDF          	movff	4008,indf2	;volatile
  2702                           
  2703                           ;EEPROM.c: 120:                 ++pointer;
  2704  00C6' 2A00'              	incf	_pointer@EEPROM$F1774^0,f,c
  2705                           
  2706                           ;EEPROM.c: 121:                 aux = 5;
  2707  00C8' 0E05               	movlw	5
  2708  00CA'                    
  2709                           ;EEPROM.c: 122:                 eepromState = 9;
  2710                           
  2711                           ;EEPROM.c: 123:             }
  2712  00CA' D051               	goto	PL64	;call to abstracted procedure
  2713  00CC'                    l1036:
  2714                           
  2715                           ;EEPROM.c: 125:                 pointer = 0;
  2716  00CC' 6A00'              	clrf	_pointer@EEPROM$F1774^0,c
  2717                           
  2718                           ;EEPROM.c: 126:                 aux = 6;
  2719  00CE' 0E06               	movlw	6
  2720                           
  2721                           ;EEPROM.c: 127:                 eepromState = 9;
  2722  00D0' D04E               	goto	PL64	;call to abstracted procedure
  2723  00D2'                    l6052:
  2724                           
  2725                           ;EEPROM.c: 132:             EEADR = numAddress*18+10 + pointerEeprom;
  2726  00D2' D841               	call	PL30	;call to abstracted procedure
  2727                           
  2728                           ;EEPROM.c: 133:             EECON1bits.EEPGD = 0;
  2729  00D4' 9EA6               	bcf	166,7,c	;volsfr
  2730                           
  2731                           ;EEPROM.c: 134:             EECON1bits.CFGS = 0;
  2732  00D6' 9CA6               	bcf	166,6,c	;volsfr
  2733                           
  2734                           ;EEPROM.c: 135:             EECON1bits.RD = 1;
  2735  00D8' 80A6               	bsf	166,0,c	;volsfr
  2736                           
  2737                           ;EEPROM.c: 136:             user.password[pointer] = EEDATA;
  2738  00DA' D844               	call	PL58	;call to abstracted procedure
  2739  00DC' CFA8 FFDF          	movff	4008,indf2	;volatile
  2740                           
  2741                           ;EEPROM.c: 137:             ++pointerEeprom;
  2742  00E0' 2A00'              	incf	_pointerEeprom^0,f,c
  2743                           
  2744                           ;EEPROM.c: 138:             if(user.password[pointer] != 0){
  2745  00E2' D840               	call	PL58	;call to abstracted procedure
  2746  00E4' 50DF               	movf	indf2,w,c
  2747  00E6' E04C               	bz	PL68
  2748                           
  2749                           ;EEPROM.c: 139:                 ++pointer;
  2750  00E8' 2A00'              	incf	_pointer@EEPROM$F1774^0,f,c
  2751                           
  2752                           ;EEPROM.c: 140:                 aux = 6;
  2753  00EA' 0E06               	movlw	6
  2754  00EC' D040               	goto	PL64
  2755  00EE'                    l1041:
  2756                           
  2757                           ;EEPROM.c: 150:             EEADR = numAddress;
  2758  00EE' C01D' FFA9         	movff	_numAddress,4009	;volatile
  2759                           
  2760                           ;EEPROM.c: 151:             EECON1bits.EEPGD = 0;
  2761  00F2' 9EA6               	bcf	166,7,c	;volsfr
  2762                           
  2763                           ;EEPROM.c: 152:             EECON1bits.CFGS = 0;
  2764  00F4' 9CA6               	bcf	166,6,c	;volsfr
  2765                           
  2766                           ;EEPROM.c: 153:             EECON1bits.RD = 1;
  2767  00F6' 80A6               	bsf	166,0,c	;volsfr
  2768                           
  2769                           ;EEPROM.c: 154:             topScore.score = EEDATA;
  2770  00F8' CFA8 F00C'         	movff	4008,_topScore	;volatile
  2771                           
  2772                           ;EEPROM.c: 155:             aux = 8;
  2773  00FC' 0E08               	movlw	8
  2774                           
  2775                           ;EEPROM.c: 156:             eepromState = 9;
  2776                           
  2777                           ;EEPROM.c: 157:             break;
  2778  00FE' D037               	goto	PL64	;call to abstracted procedure
  2779  0100'                    l6076:
  2780                           
  2781                           ;EEPROM.c: 160:             EEADR = numAddress +1;
  2782  0100' 2800'              	incf	_numAddress^0,w,c
  2783  0102' 6EA9               	movwf	169,c	;volatile
  2784                           
  2785                           ;EEPROM.c: 161:             EECON1bits.EEPGD = 0;
  2786  0104' 9EA6               	bcf	166,7,c	;volsfr
  2787                           
  2788                           ;EEPROM.c: 162:             EECON1bits.CFGS = 0;
  2789  0106' 9CA6               	bcf	166,6,c	;volsfr
  2790                           
  2791                           ;EEPROM.c: 163:             EECON1bits.RD = 1;
  2792  0108' 80A6               	bsf	166,0,c	;volsfr
  2793                           
  2794                           ;EEPROM.c: 164:             topScore.user = EEDATA;
  2795  010A' CFA8 F00D'         	movff	4008,_topScore+1	;volatile
  2796  010E' D038               	goto	PL68
  2797  0110'                    l1043:
  2798                           
  2799                           ;EEPROM.c: 171:             if(EECON1bits.RD == 0){
  2800  0110' B0A6               	btfsc	166,0,c	;volsfr
  2801  0112' 0012               	return	
  2802  0114' D7CB               	goto	u4910
  2803  0116'                    l1045:
  2804                           
  2805                           ;EEPROM.c: 178:             doneCharging = 0;
  2806  0116' 6A00'              	clrf	_doneCharging^0,c
  2807                           
  2808                           ;EEPROM.c: 179:             break;
  2809  0118' 0012               	return	
  2810  011A'                    l6094:
  2811  011A' 5000'              	movf	_eepromState^0,w,c
  2812  011C' 6E00'              	movwf	??_motorEeprom^0,c
  2813  011E' 6A00'              	clrf	(??_motorEeprom+1)^0,c
  2814                           
  2815                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2816                           ; Switch size 1, requested type "space"
  2817                           ; Number of cases is 1, Range of values is 0 to 0
  2818                           ; switch strategies available:
  2819                           ; Name         Instructions Cycles
  2820                           ; simple_byte            4     3 (average)
  2821                           ;	Chosen strategy is simple_byte
  2822  0120' 5000'              	movf	(??_motorEeprom+1)^0,w,c
  2823  0122' A4D8               	btfss	status,2,c
  2824  0124' 0012               	return	
  2825                           
  2826                           ; Switch size 1, requested type "space"
  2827                           ; Number of cases is 11, Range of values is 0 to 10
  2828                           ; switch strategies available:
  2829                           ; Name         Instructions Cycles
  2830                           ; simple_byte           34    18 (average)
  2831                           ;	Chosen strategy is simple_byte
  2832  0126' 5000'              	movf	??_motorEeprom^0,w,c
  2833  0128' E101 D76B          	bz	l5918
  2834  012C' 0A01               	xorlw	1	; case 1
  2835  012E' E082               	bz	l5952
  2836  0130' 0A03               	xorlw	3	; case 2
  2837  0132' E096               	bz	l1031
  2838  0134' 0A01               	xorlw	1	; case 3
  2839  0136' E0A7               	bz	l6000
  2840  0138' 0A07               	xorlw	7	; case 4
  2841  013A' E0B6               	bz	l1033
  2842  013C' 0A01               	xorlw	1	; case 5
  2843  013E' E0B9               	bz	l6030
  2844  0140' 0A03               	xorlw	3	; case 6
  2845  0142' E0C7               	bz	l6052
  2846  0144' 0A01               	xorlw	1	; case 7
  2847  0146' E0D3               	bz	l1041
  2848  0148' 0A0F               	xorlw	15	; case 8
  2849  014A' E0DA               	bz	l6076
  2850  014C' 0A01               	xorlw	1	; case 9
  2851  014E' E0E0               	bz	l1043
  2852  0150' 0A03               	xorlw	3	; case 10
  2853  0152' E0E1               	bz	l1045
  2854  0154' 0012               	return		;funcret
  2855  0156'                    __end_of_motorEeprom:
  2856                           	callstack 0
  2857  0156'                    PL30:
  2858                           	callstack 28
  2859  0156' 5000'              	movf	_numAddress^0,w,c
  2860  0158' 0D12               	mullw	18
  2861  015A' 50F3               	movf	243,w,c
  2862  015C' 2400'              	addwf	_pointerEeprom^0,w,c
  2863  015E' 0F0A               	addlw	10
  2864  0160' 6EA9               	movwf	169,c	;volatile
  2865  0162' 0012               	return	
  2866  0164'                    __end_ofPL30:
  2867                           	callstack 0
  2868  0164'                    PL58:
  2869                           	callstack 28
  2870  0164' 5000'              	movf	_pointer@EEPROM$F1774^0,w,c
  2871  0166' 0F00'              	addlw	low (_user+9)
  2872  0168' 6ED9               	movwf	fsr2l,c
  2873  016A' 6ADA               	clrf	fsr2h,c
  2874  016C' 0012               	return	
  2875  016E'                    __end_ofPL58:
  2876                           	callstack 0
  2877  016E'                    PL64:
  2878                           	callstack 28
  2879  016E' 6E00'              	movwf	_aux@EEPROM$F1778^0,c
  2880  0170' 0E09               	movlw	9
  2881  0172' 6E00'              	movwf	_eepromState^0,c
  2882  0174' 0C09               	retlw	9
  2883  0176'                    __end_ofPL64:
  2884                           	callstack 0
  2885  0176'                    PL66:
  2886                           	callstack 28
  2887  0176' 5000'              	movf	_pointer@EEPROM$F1774^0,w,c
  2888  0178' 0F00'              	addlw	low _user
  2889  017A' 6ED9               	movwf	fsr2l,c
  2890  017C' 6ADA               	clrf	fsr2h,c
  2891  017E' 0012               	return	
  2892  0180'                    __end_ofPL66:
  2893                           	callstack 0
  2894  0180'                    PL68:
  2895                           	callstack 28
  2896  0180' 0E0A               	movlw	10
  2897  0182' 6E00'              	movwf	_eepromState^0,c
  2898  0184' 0E01               	movlw	1
  2899  0186' 6E00'              	movwf	_doneCharging^0,c
  2900  0188' 0C01               	retlw	1
  2901  018A'                    __end_ofPL68:
  2902                           	callstack 0
  2903  018A'                    PL94:
  2904                           	callstack 28
  2905  018A' 0E04               	movlw	4
  2906  018C' 6E00'              	movwf	_eepromState^0,c
  2907  018E' 0C04               	retlw	4
  2908  0190'                    __end_ofPL94:
  2909                           	callstack 0
  2910                           
  2911 ;; *************** function _menuMotor *****************
  2912 ;; Defined at:
  2913 ;;		line 42 in file "Menu.c"
  2914 ;; Parameters:    Size  Location     Type
  2915 ;;		None
  2916 ;; Auto vars:     Size  Location     Type
  2917 ;;		None
  2918 ;; Return value:  Size  Location     Type
  2919 ;;                  1    wreg      void 
  2920 ;; Registers used:
  2921 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2922 ;; Tracked objects:
  2923 ;;		On entry : 0/0
  2924 ;;		On exit  : 0/0
  2925 ;;		Unchanged: 0/0
  2926 ;; Data sizes:     COMRAM   BANK0   BANK1
  2927 ;;      Params:         0       0       0
  2928 ;;      Locals:         0       0       0
  2929 ;;      Temps:          0       0       6
  2930 ;;      Totals:         0       0       6
  2931 ;;Total ram usage:        6 bytes
  2932 ;; Hardware stack levels used: 1
  2933 ;; Hardware stack levels required when called: 7
  2934 ;; This function calls:
  2935 ;;		_KeyGetNumber
  2936 ;;		_KeyGetPress
  2937 ;;		_KeyGetSMS
  2938 ;;		_KeyGetValue
  2939 ;;		_KeyResetValue
  2940 ;;		_LcClear
  2941 ;;		_LcCursorOff
  2942 ;;		_LcCursorOn
  2943 ;;		_LcGotoXY
  2944 ;;		_LcPutChar
  2945 ;;		_LcPutScore
  2946 ;;		_LcPutTime
  2947 ;;		_LcScroll
  2948 ;;		_RXdata
  2949 ;;		_TXbusy
  2950 ;;		_TXgetState
  2951 ;;		_TiGetTics
  2952 ;;		_TiResetTics
  2953 ;;		___lbdiv
  2954 ;;		___lbmod
  2955 ;;		_endMusic
  2956 ;;		_getCentreJoystick
  2957 ;;		_getDoneCharging
  2958 ;;		_getFirstDirection
  2959 ;;		_getFirstDirectionScores
  2960 ;;		_getPositionJoystick
  2961 ;;		_getRX
  2962 ;;		_getScore
  2963 ;;		_getUser
  2964 ;;		_isPressed
  2965 ;;		_readEeprom
  2966 ;;		_readEepromScores
  2967 ;;		_resetPositionJoystick
  2968 ;;		_sendMyTX
  2969 ;;		_setTX
  2970 ;;		_showTimerPic
  2971 ;;		_startMusic
  2972 ;;		_stopTimerPic
  2973 ;;		_writeEeprom
  2974 ;;		_writeEepromScores
  2975 ;; This function is called by:
  2976 ;;		_main
  2977 ;; This function uses a non-reentrant model
  2978 ;;
  2979                           
  2980                           	psect	text10
  2981  0000'                    __ptext10:
  2982                           	callstack 0
  2983  0000'                    _menuMotor:
  2984                           	callstack 23
  2985                           
  2986                           ;Menu.c: 43:     switch(menuState){
  2987                           
  2988                           ;incstack = 0
  2989  0000' EF00' F000'        	goto	l7354
  2990  0004'                    l6318:
  2991                           
  2992                           ; BSR set to: 1
  2993                           ;Menu.c: 45:             if(getFirstDirectionScores(numScores) == 0xFF){
  2994  0004' 5000'              	movf	_numScores@Data$F582^0,w,c
  2995  0006' EC00' F000'        	call	_getFirstDirectionScores
  2996  000A' 0AFF               	xorlw	255
  2997  000C' E103               	bnz	l6322
  2998                           
  2999                           ;Menu.c: 46:                 menuState=102;
  3000  000E' 0E66               	movlw	102
  3001  0010' 6E00'              	movwf	_menuState^0,c
  3002                           
  3003                           ;Menu.c: 47:             }else{
  3004  0012' 0C66               	retlw	102
  3005  0014'                    l6322:
  3006                           
  3007                           ;Menu.c: 48:                 readEepromScores(numScores);
  3008  0014' 5000'              	movf	_numScores@Data$F582^0,w,c
  3009  0016' EC00' F000'        	call	_readEepromScores
  3010  001A'                    l6324:
  3011                           
  3012                           ;Menu.c: 49:                 ++menuState;
  3013  001A' 2A00'              	incf	_menuState^0,f,c
  3014                           
  3015                           ;Menu.c: 51:             break;
  3016                           
  3017                           ;Menu.c: 50:             }
  3018  001C' 0012               	return	
  3019  001E'                    l6326:
  3020                           
  3021                           ; BSR set to: 1
  3022                           ;Menu.c: 54:             if(getDoneCharging()==1){
  3023  001E' EC00' F000'        	call	_getDoneCharging	;wreg free
  3024  0022' 06E8               	decf	wreg,f,c
  3025  0024' A4D8               	btfss	status,2,c
  3026  0026' 0012               	return	
  3027                           
  3028                           ;Menu.c: 55:                 topScores[numScores] = getScore();
  3029  0028' EC00' F000'        	call	_getScore	;wreg free
  3030  002C' 5000'              	movf	_numScores@Data$F582^0,w,c
  3031  002E' EC00' F000'        	call	PL22	;call to abstracted procedure
  3032  0032' C005' FFDE         	movff	?_getScore,postinc2
  3033  0036' C006' FFDD         	movff	?_getScore+1,postdec2
  3034                           
  3035                           ;Menu.c: 56:                 ++numScores;
  3036  003A' 2A00'              	incf	_numScores@Data$F582^0,f,c
  3037                           
  3038                           ;Menu.c: 57:                 if(numScores < 5) --menuState;
  3039  003C' 0E05               	movlw	5
  3040  003E' 6000'              	cpfslt	_numScores@Data$F582^0,c
  3041  0040' D7EC               	goto	l6324
  3042  0042'                    u5110:
  3043  0042' 0600'              	decf	_menuState^0,f,c
  3044  0044' 0012               	return	
  3045  0046'                    l6338:
  3046                           
  3047                           ; BSR set to: 1
  3048                           ;Menu.c: 64:             if(getFirstDirection(numUsers) == 0xFF){
  3049  0046' 5000'              	movf	_numUsers@Data$F581^0,w,c
  3050  0048' EC00' F000'        	call	_getFirstDirection
  3051  004C' 0AFF               	xorlw	255
  3052  004E' E103               	bnz	l6342
  3053  0050'                    u5120:
  3054                           
  3055                           ;Menu.c: 65:                 menuState=104;
  3056  0050' 0E68               	movlw	104
  3057  0052' 6E00'              	movwf	_menuState^0,c
  3058                           
  3059                           ;Menu.c: 66:             }else{
  3060  0054' 0C68               	retlw	104
  3061  0056'                    l6342:
  3062                           
  3063                           ;Menu.c: 67:                 readEeprom(numUsers);
  3064  0056' 5000'              	movf	_numUsers@Data$F581^0,w,c
  3065  0058' EC00' F000'        	call	_readEeprom
  3066  005C' D7DE               	goto	l6324
  3067  005E'                    l6346:
  3068                           
  3069                           ; BSR set to: 1
  3070                           ;Menu.c: 73:             if(getDoneCharging()==1){
  3071  005E' EC00' F000'        	call	_getDoneCharging	;wreg free
  3072  0062' 06E8               	decf	wreg,f,c
  3073  0064' A4D8               	btfss	status,2,c
  3074  0066' 0012               	return	
  3075                           
  3076                           ;Menu.c: 74:                 users[numUsers] = getUser();
  3077  0068' EC00' F000'        	call	_getUser	;wreg free
  3078  006C' 5000'              	movf	_numUsers@Data$F581^0,w,c
  3079  006E' EC00' F000'        	call	PL34	;call to abstracted procedure
  3080  0072' 0E11               	movlw	17
  3081  0074'                    u5141:
  3082  0074' CFEB FFDB          	movff	plusw0,plusw2
  3083  0078' 06E8               	decf	wreg,f,c
  3084  007A' E2FC               	bc	u5141
  3085                           
  3086                           ;Menu.c: 75:                 ++numUsers;
  3087  007C' 2A00'              	incf	_numUsers@Data$F581^0,f,c
  3088  007E' D7E1               	goto	u5110
  3089  0080'                    l6354:
  3090                           
  3091                           ; BSR set to: 1
  3092                           ;Menu.c: 81:             LcClear();
  3093  0080' EC00' F000'        	call	_LcClear	;wreg free
  3094                           
  3095                           ;Menu.c: 82:             LcGotoXY(0,0);
  3096  0084' 0E00               	movlw	0
  3097  0086' 6A00'              	clrf	LcGotoXY@Row^0,c
  3098  0088' EC00' F000'        	call	_LcGotoXY
  3099                           
  3100                           ;Menu.c: 83:             menuState=0;
  3101  008C' 6A00'              	clrf	_menuState^0,c
  3102                           
  3103                           ;Menu.c: 84:             pointer=0;
  3104  008E' 6A00'              	clrf	_pointer^0,c
  3105                           
  3106                           ;Menu.c: 85:             option = 0;
  3107  0090' 6A00'              	clrf	_option^0,c
  3108                           
  3109                           ;Menu.c: 86:             break;
  3110  0092' 0012               	return	
  3111  0094'                    l6362:
  3112                           
  3113                           ; BSR set to: 1
  3114                           ;Menu.c: 89:             LcPutChar(accessMenuString1[pointer]);
  3115  0094' 5000'              	movf	_pointer^0,w,c
  3116  0096' 0F00'              	addlw	low _accessMenuString1@Menu$F562
  3117  0098' EC00' F000'        	call	PL44	;call to abstracted procedure
  3118  009C' EC00' F000'        	call	_LcPutChar
  3119                           
  3120                           ;Menu.c: 90:             ++pointer;
  3121  00A0' 2A00'              	incf	_pointer^0,f,c
  3122                           
  3123                           ;Menu.c: 91:             if(pointer == 8){
  3124  00A2' 0E08               	movlw	8
  3125  00A4' 1800'              	xorwf	_pointer^0,w,c
  3126  00A6' A4D8               	btfss	status,2,c
  3127  00A8' 0012               	return	
  3128                           
  3129                           ;Menu.c: 92:                 ++menuState;
  3130  00AA' 2A00'              	incf	_menuState^0,f,c
  3131                           
  3132                           ;Menu.c: 93:                 pointer=0;
  3133  00AC' 6A00'              	clrf	_pointer^0,c
  3134                           
  3135                           ;Menu.c: 94:                 LcGotoXY(0,1);
  3136  00AE' EC00' F000'        	call	PL50	;call to abstracted procedure
  3137  00B2' EF00' F000'        	goto	_LcGotoXY
  3138  00B6'                    l6374:
  3139                           
  3140                           ; BSR set to: 1
  3141                           ;Menu.c: 99:    LcPutChar(accessMenuString2[pointer]);
  3142  00B6' 5000'              	movf	_pointer^0,w,c
  3143  00B8' 0F00'              	addlw	low _accessMenuString2@Menu$F563
  3144  00BA' EC00' F000'        	call	PL44	;call to abstracted procedure
  3145  00BE' EC00' F000'        	call	_LcPutChar
  3146                           
  3147                           ;Menu.c: 100:    ++pointer;
  3148  00C2' 2A00'              	incf	_pointer^0,f,c
  3149                           
  3150                           ;Menu.c: 101:    if(pointer == 11){
  3151  00C4' 0E0B               	movlw	11
  3152  00C6' 1800'              	xorwf	_pointer^0,w,c
  3153  00C8' A4D8               	btfss	status,2,c
  3154  00CA' 0012               	return	
  3155                           
  3156                           ;Menu.c: 102:     ++menuState;
  3157  00CC' 2A00'              	incf	_menuState^0,f,c
  3158                           
  3159                           ;Menu.c: 103:                 LcCursorOff();
  3160  00CE' EF00' F000'        	goto	_LcCursorOff	;wreg free
  3161  00D2'                    l6384:
  3162                           
  3163                           ; BSR set to: 1
  3164                           ;Menu.c: 108:    if(isPressed()){
  3165  00D2' EC00' F000'        	call	_isPressed	;wreg free
  3166  00D6' 0900               	iorlw	0
  3167  00D8' E004               	bz	l6390
  3168                           
  3169                           ;Menu.c: 109:     option = KeyGetValue();
  3170  00DA' EC00' F000'        	call	_KeyGetValue	;wreg free
  3171  00DE' 6E00'              	movwf	_option^0,c
  3172                           
  3173                           ;Menu.c: 110:     pointer = 0;
  3174  00E0' 6A00'              	clrf	_pointer^0,c
  3175  00E2'                    l6390:
  3176                           
  3177                           ;Menu.c: 113:    if(option == 1 || option == 2){
  3178  00E2' 0400'              	decf	_option^0,w,c
  3179  00E4' E004               	bz	u5190
  3180  00E6' 0E02               	movlw	2
  3181  00E8' 1800'              	xorwf	_option^0,w,c
  3182  00EA' A4D8               	btfss	status,2,c
  3183  00EC' 0012               	return	
  3184  00EE'                    u5190:
  3185                           
  3186                           ;Menu.c: 114:                 ++menuState;
  3187  00EE' 2A00'              	incf	_menuState^0,f,c
  3188                           
  3189                           ;Menu.c: 115:                 LcClear();
  3190  00F0' EC00' F000'        	call	_LcClear	;wreg free
  3191                           
  3192                           ;Menu.c: 116:                 LcGotoXY(0,0);
  3193  00F4' 0E00               	movlw	0
  3194  00F6' 6A00'              	clrf	LcGotoXY@Row^0,c
  3195  00F8' EC00' F000'        	call	_LcGotoXY
  3196  00FC' D07D               	goto	l6476
  3197  00FE'                    l6402:
  3198                           
  3199                           ; BSR set to: 1
  3200                           ;Menu.c: 122:             LcPutChar(enterUserString[pointer]);
  3201  00FE' 5000'              	movf	_pointer^0,w,c
  3202  0100' 0F00'              	addlw	low _enterUserString@Menu$F570
  3203  0102' EC00' F000'        	call	PL44	;call to abstracted procedure
  3204  0106' EC00' F000'        	call	_LcPutChar
  3205                           
  3206                           ;Menu.c: 123:             ++pointer;
  3207  010A' 2A00'              	incf	_pointer^0,f,c
  3208                           
  3209                           ;Menu.c: 124:             if(pointer == 5){
  3210  010C' 0E05               	movlw	5
  3211  010E' 1800'              	xorwf	_pointer^0,w,c
  3212  0110' A4D8               	btfss	status,2,c
  3213  0112' 0012               	return	
  3214                           
  3215                           ;Menu.c: 125:                 LcGotoXY(++pointer,0);
  3216  0114' EC00' F000'        	call	PL88	;call to abstracted procedure
  3217  0118' EC00' F000'        	call	_LcGotoXY
  3218                           
  3219                           ;Menu.c: 126:                 ++menuState;
  3220  011C' 2A00'              	incf	_menuState^0,f,c
  3221                           
  3222                           ;Menu.c: 127:                 pointer=0;
  3223  011E' 6A00'              	clrf	_pointer^0,c
  3224                           
  3225                           ;Menu.c: 128:                 KeyResetValue();
  3226  0120' EF00' F000'        	goto	_KeyResetValue	;wreg free
  3227  0124'                    l6416:
  3228                           
  3229                           ; BSR set to: 1
  3230                           ;Menu.c: 133:             if(isPressed()){
  3231  0124' EC00' F000'        	call	_isPressed	;wreg free
  3232  0128' 0900               	iorlw	0
  3233  012A' B4D8               	btfsc	status,2,c
  3234  012C' 0012               	return	
  3235                           
  3236                           ;Menu.c: 134:                 keyValue = KeyGetSMS();
  3237  012E' EC00' F000'        	call	_KeyGetSMS	;wreg free
  3238  0132' 6E00'              	movwf	_keyValue^0,c
  3239                           
  3240                           ;Menu.c: 135:                 if(KeyGetPress() > 1){
  3241  0134' EC00' F000'        	call	_KeyGetPress	;wreg free
  3242  0138' EC00' F000'        	call	PL90	;call to abstracted procedure
  3243  013C' 6500'              	cpfsgt	??_menuMotor& (0+255),b
  3244  013E' D004               	goto	l6424
  3245                           
  3246                           ; BSR set to: 1
  3247                           ;Menu.c: 136:                     LcGotoXY(--pointer+6 ,0);
  3248  0140' EC00' F000'        	call	PL84	;call to abstracted procedure
  3249  0144' EC00' F000'        	call	_LcGotoXY
  3250  0148'                    l6424:
  3251                           
  3252                           ;Menu.c: 138:                 if(keyValue!='#' && pointer<8){
  3253  0148' 0E23               	movlw	35
  3254  014A' 1800'              	xorwf	_keyValue^0,w,c
  3255  014C' E00F               	bz	l6436
  3256  014E' 0E08               	movlw	8
  3257  0150' 6000'              	cpfslt	_pointer^0,c
  3258  0152' D00C               	goto	l6436
  3259                           
  3260                           ;Menu.c: 139:                     LcPutChar(keyValue);
  3261  0154' 5000'              	movf	_keyValue^0,w,c
  3262  0156' EC00' F000'        	call	_LcPutChar
  3263                           
  3264                           ;Menu.c: 140:                     users[numUsers].username[pointer]=keyValue;
  3265  015A' 5000'              	movf	_numUsers@Data$F581^0,w,c
  3266  015C' EC00' F000'        	call	PL24	;call to abstracted procedure
  3267  0160' 6F00'              	movwf	??_menuMotor& (0+255),b
  3268  0162' 0E00'              	movlw	high _users
  3269  0164' 6F00'              	movwf	(??_menuMotor+1)& (0+255),b
  3270  0166' D043               	goto	L9
  3271  0168'                    l6432:
  3272                           
  3273                           ; BSR set to: 1
  3274                           ;Menu.c: 141:                     ++pointer;
  3275  0168' 2A00'              	incf	_pointer^0,f,c
  3276  016A' D046               	goto	l6476
  3277  016C'                    l6436:
  3278                           
  3279                           ;Menu.c: 145:                     users[numUsers].username[pointer]='\0';
  3280  016C' 5000'              	movf	_numUsers@Data$F581^0,w,c
  3281  016E' EC00' F000'        	call	PL24	;call to abstracted procedure
  3282  0172' EC00' F000'        	call	PL2	;call to abstracted procedure
  3283  0176' 6ADF               	clrf	indf2,c
  3284                           
  3285                           ; BSR set to: 1
  3286                           ;Menu.c: 146:                     LcGotoXY(0,1);
  3287  0178' EC00' F000'        	call	PL50	;call to abstracted procedure
  3288  017C' EC00' F000'        	call	_LcGotoXY
  3289  0180'                    l6440:
  3290                           
  3291                           ;Menu.c: 147:                     pointer = 0;
  3292  0180' 6A00'              	clrf	_pointer^0,c
  3293  0182' D74B               	goto	l6324
  3294  0184'                    l6444:
  3295                           
  3296                           ; BSR set to: 1
  3297                           ;Menu.c: 154:    LcPutChar(enterPasswordString[pointer]);
  3298  0184' 5000'              	movf	_pointer^0,w,c
  3299  0186' 0F00'              	addlw	low _enterPasswordString@Menu$F571
  3300  0188' EC00' F000'        	call	PL44	;call to abstracted procedure
  3301  018C' EC00' F000'        	call	_LcPutChar
  3302                           
  3303                           ;Menu.c: 155:    ++pointer;
  3304  0190' 2A00'              	incf	_pointer^0,f,c
  3305                           
  3306                           ;Menu.c: 156:    if(pointer == 5){
  3307  0192' 0E05               	movlw	5
  3308  0194' 1800'              	xorwf	_pointer^0,w,c
  3309  0196' A4D8               	btfss	status,2,c
  3310  0198' 0012               	return	
  3311                           
  3312                           ;Menu.c: 157:     LcGotoXY(++pointer,1);
  3313  019A' 0E01               	movlw	1
  3314  019C' 6E00'              	movwf	LcGotoXY@Row^0,c
  3315  019E' 2A00'              	incf	_pointer^0,f,c
  3316  01A0' 5000'              	movf	_pointer^0,w,c
  3317  01A2' EC00' F000'        	call	_LcGotoXY
  3318                           
  3319                           ;Menu.c: 158:     ++menuState;
  3320  01A6' 2A00'              	incf	_menuState^0,f,c
  3321                           
  3322                           ;Menu.c: 159:     pointer=0;
  3323  01A8' 6A00'              	clrf	_pointer^0,c
  3324                           
  3325                           ;Menu.c: 160:                 TiResetTics(timerMenu);
  3326  01AA' 5000'              	movf	_timerMenu^0,w,c
  3327  01AC' EC00' F000'        	call	_TiResetTics
  3328  01B0' EF00' F000'        	goto	_KeyResetValue
  3329  01B4'                    l6460:
  3330                           
  3331                           ; BSR set to: 1
  3332                           ;Menu.c: 166:             if(isPressed()){
  3333  01B4' EC00' F000'        	call	_isPressed	;wreg free
  3334  01B8' 0900               	iorlw	0
  3335  01BA' B4D8               	btfsc	status,2,c
  3336  01BC' 0012               	return	
  3337                           
  3338                           ;Menu.c: 167:                 keyValue = KeyGetSMS();
  3339  01BE' EC00' F000'        	call	_KeyGetSMS	;wreg free
  3340  01C2' 6E00'              	movwf	_keyValue^0,c
  3341                           
  3342                           ;Menu.c: 168:                 if(KeyGetPress() > 1){
  3343  01C4' EC00' F000'        	call	_KeyGetPress	;wreg free
  3344  01C8' EC00' F000'        	call	PL90	;call to abstracted procedure
  3345  01CC' 6500'              	cpfsgt	??_menuMotor& (0+255),b
  3346  01CE' D004               	goto	l6468
  3347                           
  3348                           ; BSR set to: 1
  3349                           ;Menu.c: 169:                     LcGotoXY(--pointer+6 ,0);
  3350  01D0' EC00' F000'        	call	PL84	;call to abstracted procedure
  3351  01D4' EC00' F000'        	call	_LcGotoXY
  3352  01D8'                    l6468:
  3353                           
  3354                           ;Menu.c: 171:                 if(keyValue!='#'){
  3355  01D8' 0E23               	movlw	35
  3356  01DA' 1800'              	xorwf	_keyValue^0,w,c
  3357  01DC' E010               	bz	l6478
  3358                           
  3359                           ;Menu.c: 172:                     LcPutChar(keyValue);
  3360  01DE' 5000'              	movf	_keyValue^0,w,c
  3361  01E0' EC00' F000'        	call	_LcPutChar
  3362                           
  3363                           ;Menu.c: 173:                     users[numUsers].password[pointer]=keyValue;
  3364  01E4' 5000'              	movf	_numUsers@Data$F581^0,w,c
  3365  01E6' EC00' F000'        	call	PL24	;call to abstracted procedure
  3366  01EA' EC00' F000'        	call	PL16	;call to abstracted procedure
  3367  01EE'                    L9:
  3368  01EE' EC00' F000'        	call	PL6	;call to abstracted procedure
  3369  01F2' C044' FFDF         	movff	_keyValue,indf2
  3370  01F6' D7B8               	goto	l6432
  3371  01F8'                    l6476:
  3372                           
  3373                           ; BSR set to: 1
  3374                           ;Menu.c: 175:                     TiResetTics(timerMenu);
  3375  01F8' 5000'              	movf	_timerMenu^0,w,c
  3376  01FA' EF00' F000'        	goto	_TiResetTics
  3377  01FE'                    l6478:
  3378                           
  3379                           ;Menu.c: 178:                     users[numUsers].password[pointer]='\0';
  3380  01FE' 5000'              	movf	_numUsers@Data$F581^0,w,c
  3381  0200' EC00' F000'        	call	PL24	;call to abstracted procedure
  3382  0204' EC00' F000'        	call	PL16	;call to abstracted procedure
  3383  0208' EC00' F000'        	call	PL6	;call to abstracted procedure
  3384  020C' 6ADF               	clrf	indf2,c
  3385                           
  3386                           ; BSR set to: 1
  3387                           ;Menu.c: 179:                     pointer = 0;
  3388  020E' 6A00'              	clrf	_pointer^0,c
  3389                           
  3390                           ; BSR set to: 1
  3391                           ;Menu.c: 180:                     if(option == 1){
  3392  0210' 0400'              	decf	_option^0,w,c
  3393  0212' E103               	bnz	l305
  3394                           
  3395                           ; BSR set to: 1
  3396                           ;Menu.c: 181:                         ++menuState;
  3397  0214' 2A00'              	incf	_menuState^0,f,c
  3398                           
  3399                           ; BSR set to: 1
  3400                           ;Menu.c: 182:                         pointerUser=0;
  3401  0216' 6A00'              	clrf	_pointerUser^0,c
  3402                           
  3403                           ;Menu.c: 183:                     }else{
  3404  0218' 0012               	return	
  3405  021A'                    l305:
  3406                           
  3407                           ; BSR set to: 1
  3408                           ;Menu.c: 184:                         pointerUser=0;
  3409  021A' 6A00'              	clrf	_pointerUser^0,c
  3410                           
  3411                           ; BSR set to: 1
  3412                           ;Menu.c: 185:                         menuState = 9;
  3413  021C' 0E09               	movlw	9
  3414  021E' 6E00'              	movwf	_menuState^0,c
  3415  0220' 0C09               	retlw	9
  3416  0222'                    l6490:
  3417                           
  3418                           ; BSR set to: 1
  3419                           ;Menu.c: 192:             if(numUsers!=pointerUser)
  3420  0222' 5000'              	movf	_pointerUser^0,w,c
  3421  0224' 1800'              	xorwf	_numUsers@Data$F581^0,w,c
  3422  0226' E101 D713          	bz	u5120
  3423                           
  3424                           ; BSR set to: 1
  3425                           ;Menu.c: 193:                 if(!(users[pointerUser].username[pointer]==users[numUsers]
      +                          .username[pointer])){
  3426  022A' EC00' F000'        	call	PL20	;call to abstracted procedure
  3427  022E' EC00' F000'        	call	PL2	;call to abstracted procedure
  3428  0232' 5000'              	movf	_pointerUser^0,w,c
  3429  0234' EC00' F000'        	call	PL18	;call to abstracted procedure
  3430  0238' EC00' F000'        	call	PL14	;call to abstracted procedure
  3431  023C' E007               	bz	l6500
  3432                           
  3433                           ; BSR set to: 1
  3434                           ;Menu.c: 194:                     ++pointerUser;
  3435  023E' 2A00'              	incf	_pointerUser^0,f,c
  3436                           
  3437                           ; BSR set to: 1
  3438                           ;Menu.c: 195:                     if(pointerUser==numUsers) menuState=104;
  3439  0240' 5000'              	movf	_numUsers@Data$F581^0,w,c
  3440  0242' 1800'              	xorwf	_pointerUser^0,w,c
  3441  0244' E101 D704          	bz	u5120
  3442  0248'                    l310:
  3443  0248' 6A00'              	clrf	_pointer^0,c
  3444  024A' 0012               	return	
  3445  024C'                    l6500:
  3446                           
  3447                           ; BSR set to: 1
  3448                           ;Menu.c: 199:                     if(users[pointerUser].username[pointer]==users[numUser
      +                          s].username[pointer])
  3449  024C' EC00' F000'        	call	PL20	;call to abstracted procedure
  3450  0250' EC00' F000'        	call	PL2	;call to abstracted procedure
  3451  0254' 5000'              	movf	_pointerUser^0,w,c
  3452  0256' EC00' F000'        	call	PL18	;call to abstracted procedure
  3453  025A' EC00' F000'        	call	PL14	;call to abstracted procedure
  3454  025E' E001 D6F7          	bnz	u5120
  3455                           
  3456                           ; BSR set to: 1
  3457                           ;Menu.c: 200:                         if(users[numUsers].username[pointer]=='\0'){
  3458  0262' EC00' F000'        	call	PL20	;call to abstracted procedure
  3459  0266' EC00' F000'        	call	PL2	;call to abstracted procedure
  3460  026A' 50DF               	movf	indf2,w,c
  3461  026C' E089               	bz	l6440
  3462  026E'                    l6508:
  3463  026E' 2A00'              	incf	_pointer^0,f,c
  3464  0270' 0012               	return	
  3465  0272'                    l6514:
  3466                           
  3467                           ; BSR set to: 1
  3468                           ;Menu.c: 212:             if(!(users[pointerUser].password[pointer]==users[numUsers].pas
      +                          sword[pointer])) menuState = 104;
  3469  0272' 5000'              	movf	_numUsers@Data$F581^0,w,c
  3470  0274' EC00' F000'        	call	PL4	;call to abstracted procedure
  3471  0278' 5000'              	movf	_pointerUser^0,w,c
  3472  027A' EC00' F000'        	call	PL18	;call to abstracted procedure
  3473  027E' EC00' F000'        	call	PL26	;call to abstracted procedure
  3474  0282' EC00' F000'        	call	PL14	;call to abstracted procedure
  3475  0286' E001 D6E3          	bnz	u5120
  3476                           
  3477                           ; BSR set to: 1
  3478                           ;Menu.c: 214:     if(users[pointerUser].password[pointer]==users[numUsers].password[poin
      +                          ter])
  3479  028A' 5000'              	movf	_numUsers@Data$F581^0,w,c
  3480  028C' EC00' F000'        	call	PL4	;call to abstracted procedure
  3481  0290' 5000'              	movf	_pointerUser^0,w,c
  3482  0292' EC00' F000'        	call	PL18	;call to abstracted procedure
  3483  0296' EC00' F000'        	call	PL26	;call to abstracted procedure
  3484  029A' EC00' F000'        	call	PL14	;call to abstracted procedure
  3485  029E' A4D8               	btfss	status,2,c
  3486  02A0' 0012               	return	
  3487                           
  3488                           ; BSR set to: 1
  3489                           ;Menu.c: 216:                         currentUser = pointerUser;
  3490  02A2' 5000'              	movf	_numUsers@Data$F581^0,w,c
  3491  02A4' EC00' F000'        	call	PL4	;call to abstracted procedure
  3492  02A8' 50DF               	movf	indf2,w,c
  3493  02AA' E1E1               	bnz	l6508
  3494                           
  3495                           ; BSR set to: 1
  3496                           ;Menu.c: 217:       LcClear();
  3497  02AC' EC00' F000'        	call	_LcClear	;wreg free
  3498                           
  3499                           ;Menu.c: 218:       LcGotoXY(0,0);
  3500  02B0' 0E00               	movlw	0
  3501  02B2' 6A00'              	clrf	LcGotoXY@Row^0,c
  3502  02B4' EC00' F000'        	call	_LcGotoXY
  3503                           
  3504                           ;Menu.c: 219:       pointer = 0;
  3505  02B8' 6A00'              	clrf	_pointer^0,c
  3506                           
  3507                           ;Menu.c: 220:       menuState=10;
  3508  02BA' 0E0A               	movlw	10
  3509  02BC' 6E00'              	movwf	_menuState^0,c
  3510                           
  3511                           ;Menu.c: 221:                         option = 0;
  3512  02BE' 6A00'              	clrf	_option^0,c
  3513  02C0' D7C3               	goto	l310
  3514  02C2'                    l6534:
  3515                           
  3516                           ; BSR set to: 1
  3517                           ;Menu.c: 229:             if(numUsers!=pointerUser){
  3518  02C2' 5000'              	movf	_pointerUser^0,w,c
  3519  02C4' 1800'              	xorwf	_numUsers@Data$F581^0,w,c
  3520  02C6' E011               	bz	u5410
  3521                           
  3522                           ; BSR set to: 1
  3523                           ;Menu.c: 230:                 if(!(users[numUsers].username[pointer]==users[pointerUser]
      +                          .username[pointer])){
  3524  02C8' EC00' F000'        	call	PL12	;call to abstracted procedure
  3525  02CC' EC00' F000'        	call	PL2	;call to abstracted procedure
  3526  02D0' 5000'              	movf	_numUsers@Data$F581^0,w,c
  3527  02D2' EC00' F000'        	call	PL18	;call to abstracted procedure
  3528  02D6' EC00' F000'        	call	PL14	;call to abstracted procedure
  3529  02DA' E00E               	bz	l6548
  3530                           
  3531                           ; BSR set to: 1
  3532                           ;Menu.c: 231:                     ++pointerUser;
  3533  02DC' 2A00'              	incf	_pointerUser^0,f,c
  3534                           
  3535                           ; BSR set to: 1
  3536                           ;Menu.c: 232:                     if(pointerUser==numUsers){
  3537  02DE' 5000'              	movf	_numUsers@Data$F581^0,w,c
  3538  02E0' 1800'              	xorwf	_pointerUser^0,w,c
  3539  02E2' E1B2               	bnz	l310
  3540                           
  3541                           ; BSR set to: 1
  3542                           ;Menu.c: 233:                         if(numUsers < 3){
  3543  02E4' 0E03               	movlw	3
  3544  02E6' 6000'              	cpfslt	_numUsers@Data$F581^0,c
  3545  02E8' D003               	goto	l328
  3546  02EA'                    u5410:
  3547                           
  3548                           ; BSR set to: 1
  3549                           ;Menu.c: 234:                             menuState = 56;
  3550  02EA' 0E38               	movlw	56
  3551  02EC' 6E00'              	movwf	_menuState^0,c
  3552                           
  3553                           ;Menu.c: 235:                         }
  3554  02EE' 0C38               	retlw	56
  3555  02F0'                    l328:
  3556                           
  3557                           ; BSR set to: 1
  3558                           ;Menu.c: 237:                             pointer = 0;
  3559  02F0' 6A00'              	clrf	_pointer^0,c
  3560                           
  3561                           ; BSR set to: 1
  3562                           ;Menu.c: 238:                             menuState = 52;
  3563  02F2' 0E34               	movlw	52
  3564  02F4' 6E00'              	movwf	_menuState^0,c
  3565  02F6' 0C34               	retlw	52
  3566  02F8'                    l6548:
  3567                           
  3568                           ; BSR set to: 1
  3569                           ;Menu.c: 245:                     if(users[numUsers].username[pointer]==users[pointerUse
      +                          r].username[pointer])
  3570  02F8' EC00' F000'        	call	PL12	;call to abstracted procedure
  3571  02FC' EC00' F000'        	call	PL2	;call to abstracted procedure
  3572  0300' 5000'              	movf	_numUsers@Data$F581^0,w,c
  3573  0302' EC00' F000'        	call	PL18	;call to abstracted procedure
  3574  0306' EC00' F000'        	call	PL14	;call to abstracted procedure
  3575  030A' A4D8               	btfss	status,2,c
  3576  030C' 0012               	return	
  3577                           
  3578                           ; BSR set to: 1
  3579                           ;Menu.c: 246:                         if(users[numUsers].username[pointer]=='\0'){
  3580  030E' EC00' F000'        	call	PL20	;call to abstracted procedure
  3581  0312' EC00' F000'        	call	PL2	;call to abstracted procedure
  3582  0316' 50DF               	movf	indf2,w,c
  3583  0318' E101 D69A          	bz	u5120
  3584  031C' D7A8               	goto	l6508
  3585  031E'                    l6558:
  3586                           
  3587                           ; BSR set to: 1
  3588                           ;Menu.c: 256:             if (pointer < 3){
  3589  031E' 0E03               	movlw	3
  3590  0320' 6000'              	cpfslt	_pointer^0,c
  3591  0322' D024               	goto	l6566
  3592                           
  3593                           ; BSR set to: 1
  3594                           ;Menu.c: 257:                 users[pointer] = users[pointer+1];
  3595  0324' 5000'              	movf	_pointer^0,w,c
  3596  0326' 0D12               	mullw	18
  3597  0328' 0E00'              	movlw	low (_users+18)
  3598  032A' 24F3               	addwf	243,w,c
  3599  032C' 6ED9               	movwf	fsr2l,c
  3600  032E' 0E00'              	movlw	high (_users+18)
  3601  0330' 20F4               	addwfc	prodh,w,c
  3602  0332' 6EDA               	movwf	fsr2h,c
  3603  0334' 5000'              	movf	_pointer^0,w,c
  3604  0336' 0D12               	mullw	18
  3605  0338' 0E00'              	movlw	low _users
  3606  033A' 24F3               	addwf	243,w,c
  3607  033C' 6EE1               	movwf	fsr1l,c
  3608  033E' 0E00'              	movlw	high _users
  3609  0340' 20F4               	addwfc	prodh,w,c
  3610  0342' 6EE2               	movwf	fsr1h,c
  3611  0344' 0E11               	movlw	17
  3612  0346'                    u5451:
  3613  0346' CFDB FFE3          	movff	plusw2,plusw1
  3614  034A' 06E8               	decf	wreg,f,c
  3615  034C' E2FC               	bc	u5451
  3616                           
  3617                           ; BSR set to: 1
  3618                           ;Menu.c: 258:                 writeEeprom(users[pointer],pointer);
  3619  034E' 5000'              	movf	_pointer^0,w,c
  3620  0350' EC00' F000'        	call	PL34	;call to abstracted procedure
  3621  0354' EE00' F000'        	lfsr	0,writeEeprom@us
  3622  0358' 0E11               	movlw	17
  3623  035A'                    u5461:
  3624  035A' CFDB FFEB          	movff	plusw2,plusw0
  3625  035E' 06E8               	decf	wreg,f,c
  3626  0360' E2FC               	bc	u5461
  3627  0362' C04A' F017'        	movff	_pointer,writeEeprom@num
  3628  0366' EC00' F000'        	call	_writeEeprom	;wreg free
  3629  036A' D657               	goto	l6324
  3630  036C'                    l6566:
  3631                           
  3632                           ; BSR set to: 1
  3633                           ;Menu.c: 261:                 --numUsers;
  3634  036C' 0600'              	decf	_numUsers@Data$F581^0,f,c
  3635                           
  3636                           ; BSR set to: 1
  3637                           ;Menu.c: 262:                 pointer = 0;
  3638  036E' 6A00'              	clrf	_pointer^0,c
  3639  0370'                    l6570:
  3640                           
  3641                           ; BSR set to: 1
  3642                           ;Menu.c: 263:                 menuState += 2;
  3643  0370' 0E02               	movlw	2
  3644  0372' 2600'              	addwf	_menuState^0,f,c
  3645  0374' 0C02               	retlw	2
  3646  0376'                    l6572:
  3647                           
  3648                           ; BSR set to: 1
  3649                           ;Menu.c: 268:             if(getDoneCharging()==1){
  3650  0376' EC00' F000'        	call	_getDoneCharging	;wreg free
  3651  037A' 06E8               	decf	wreg,f,c
  3652  037C' A4D8               	btfss	status,2,c
  3653  037E' 0012               	return	
  3654  0380'                    u5470:
  3655                           
  3656                           ;Menu.c: 269:                 ++pointer;
  3657  0380' 2A00'              	incf	_pointer^0,f,c
  3658                           
  3659                           ;Menu.c: 270:                 --menuState;
  3660  0382' 0600'              	decf	_menuState^0,f,c
  3661  0384' 0012               	return	
  3662  0386'                    l6576:
  3663                           
  3664                           ; BSR set to: 1
  3665                           ;Menu.c: 275:             if(pointer < 5){
  3666  0386' 0E05               	movlw	5
  3667  0388' 6000'              	cpfslt	_pointer^0,c
  3668  038A' D7F2               	goto	l6570
  3669                           
  3670                           ; BSR set to: 1
  3671                           ;Menu.c: 276:                 if(topScores[pointer].user == 0 && topScores[pointer].scor
      +                          e > 0){
  3672  038C' 5000'              	movf	_pointer^0,w,c
  3673  038E' EC00' F000'        	call	PL10	;call to abstracted procedure
  3674  0392' 50DF               	movf	indf2,w,c
  3675  0394' E117               	bnz	l6586
  3676                           
  3677                           ; BSR set to: 1
  3678  0396' 5000'              	movf	_pointer^0,w,c
  3679  0398' EC00' F000'        	call	PL22	;call to abstracted procedure
  3680  039C' 50DF               	movf	indf2,w,c
  3681  039E' E012               	bz	l6586
  3682                           
  3683                           ; BSR set to: 1
  3684                           ;Menu.c: 277:                     topScores[pointer] = topScores[aux+1];
  3685  03A0' 5000'              	movf	_aux^0,w,c
  3686  03A2' 0D02               	mullw	2
  3687  03A4' 50F3               	movf	243,w,c
  3688  03A6' 0F00'              	addlw	low (_topScores+2)
  3689  03A8' 6ED9               	movwf	fsr2l,c
  3690  03AA' 6ADA               	clrf	fsr2h,c
  3691  03AC' 5000'              	movf	_pointer^0,w,c
  3692  03AE' 0D02               	mullw	2
  3693  03B0' 50F3               	movf	243,w,c
  3694  03B2' 0F00'              	addlw	low _topScores
  3695  03B4' 6EE1               	movwf	fsr1l,c
  3696  03B6' 6AE2               	clrf	fsr1h,c
  3697  03B8' CFDE FFE6          	movff	postinc2,postinc1
  3698  03BC' CFDD FFE5          	movff	postdec2,postdec1
  3699                           
  3700                           ; BSR set to: 1
  3701                           ;Menu.c: 278:                     --pointer;
  3702  03C0' 0600'              	decf	_pointer^0,f,c
  3703                           
  3704                           ;Menu.c: 279:                 }else{
  3705  03C2' D004               	goto	l6588
  3706  03C4'                    l6586:
  3707                           
  3708                           ; BSR set to: 1
  3709                           ;Menu.c: 280:                     --topScores[pointer].user;
  3710  03C4' 5000'              	movf	_pointer^0,w,c
  3711  03C6' EC00' F000'        	call	PL10	;call to abstracted procedure
  3712  03CA' 06DF               	decf	indf2,f,c
  3713  03CC'                    l6588:
  3714                           
  3715                           ; BSR set to: 1
  3716                           ;Menu.c: 282:                 writeEepromScores(topScores[pointer], pointer);
  3717  03CC' 5000'              	movf	_pointer^0,w,c
  3718  03CE' EC00' F000'        	call	PL22	;call to abstracted procedure
  3719  03D2' EC00' F000'        	call	PL40	;call to abstracted procedure
  3720  03D6' EC00' F000'        	call	_writeEepromScores	;wreg free
  3721  03DA' D61F               	goto	l6324
  3722  03DC'                    l6594:
  3723                           
  3724                           ; BSR set to: 1
  3725                           ;Menu.c: 290:             if(getDoneCharging()==1){
  3726  03DC' EC00' F000'        	call	_getDoneCharging	;wreg free
  3727  03E0' 06E8               	decf	wreg,f,c
  3728  03E2' E0CE               	bz	u5470
  3729  03E4' 0012               	return	
  3730  03E6'                    l6598:
  3731                           
  3732                           ; BSR set to: 1
  3733                           ;Menu.c: 297:             writeEeprom(users[numUsers],numUsers);
  3734  03E6' 5000'              	movf	_numUsers@Data$F581^0,w,c
  3735  03E8' EC00' F000'        	call	PL34	;call to abstracted procedure
  3736  03EC' EE00' F000'        	lfsr	0,writeEeprom@us
  3737  03F0' 0E11               	movlw	17
  3738  03F2'                    u5521:
  3739  03F2' CFDB FFEB          	movff	plusw2,plusw0
  3740  03F6' 06E8               	decf	wreg,f,c
  3741  03F8' E2FC               	bc	u5521
  3742  03FA' C04D' F017'        	movff	_numUsers@Data$F581,writeEeprom@num
  3743  03FE' EC00' F000'        	call	_writeEeprom	;wreg free
  3744                           
  3745                           ;Menu.c: 298:             ++numUsers;
  3746  0402' 2A00'              	incf	_numUsers@Data$F581^0,f,c
  3747                           
  3748                           ;Menu.c: 299:             LcClear();
  3749  0404' EC00' F000'        	call	_LcClear	;wreg free
  3750                           
  3751                           ;Menu.c: 300:             option = 1;
  3752  0408' 0E01               	movlw	1
  3753  040A' 6E00'              	movwf	_option^0,c
  3754                           
  3755                           ;Menu.c: 301:             pointer = 0;
  3756                           
  3757                           ;Menu.c: 302:             LcGotoXY(0,0);
  3758  040C' EC00' F000'        	call	PL70	;call to abstracted procedure
  3759  0410' EC00' F000'        	call	_LcGotoXY
  3760                           
  3761                           ;Menu.c: 303:             menuState = 3;
  3762  0414' 0E03               	movlw	3
  3763  0416' 6E00'              	movwf	_menuState^0,c
  3764                           
  3765                           ;Menu.c: 304:             break;
  3766  0418' 0C03               	retlw	3
  3767  041A'                    l6612:
  3768                           
  3769                           ; BSR set to: 1
  3770                           ;Menu.c: 308:             if(option == 2){
  3771  041A' 0E02               	movlw	2
  3772  041C' 1800'              	xorwf	_option^0,w,c
  3773  041E' E108               	bnz	l6622
  3774                           
  3775                           ; BSR set to: 1
  3776                           ;Menu.c: 309:                 aux = 0;
  3777  0420' 6A00'              	clrf	_aux^0,c
  3778                           
  3779                           ;Menu.c: 310:                 pointer=0;
  3780  0422' 6A00'              	clrf	_pointer^0,c
  3781                           
  3782                           ; BSR set to: 1
  3783                           ;Menu.c: 311:                 LcGotoXY(0,1);
  3784  0424' EC00' F000'        	call	PL50	;call to abstracted procedure
  3785  0428' EC00' F000'        	call	_LcGotoXY
  3786                           
  3787                           ;Menu.c: 312:                 ++option;
  3788  042C' 2A00'              	incf	_option^0,f,c
  3789  042E' D5F5               	goto	l6324
  3790  0430'                    l6622:
  3791                           
  3792                           ; BSR set to: 1
  3793                           ;Menu.c: 315:                 LcPutChar(menuStrings[option][pointer]);
  3794  0430' EC00' F000'        	call	PL42	;call to abstracted procedure
  3795  0434' EC00' F000'        	call	PL38	;call to abstracted procedure
  3796  0438' EC00' F000'        	call	PL36	;call to abstracted procedure
  3797  043C' EC00' F000'        	call	_LcPutChar
  3798                           
  3799                           ;Menu.c: 316:                 ++pointer;
  3800  0440' 2A00'              	incf	_pointer^0,f,c
  3801                           
  3802                           ;Menu.c: 317:                 if(pointer == 16){
  3803  0442' 0E10               	movlw	16
  3804  0444' 1800'              	xorwf	_pointer^0,w,c
  3805  0446' A4D8               	btfss	status,2,c
  3806  0448' 0012               	return	
  3807                           
  3808                           ;Menu.c: 318:                     pointer=0;
  3809  044A' 6A00'              	clrf	_pointer^0,c
  3810                           
  3811                           ;Menu.c: 319:                     LcGotoXY(0,1);
  3812  044C' EC00' F000'        	call	PL50	;call to abstracted procedure
  3813  0450' EC00' F000'        	call	_LcGotoXY
  3814                           
  3815                           ;Menu.c: 320:                     ++option;
  3816  0454' 2A00'              	incf	_option^0,f,c
  3817                           
  3818                           ;Menu.c: 321:                     ++menuState;
  3819  0456' 2A00'              	incf	_menuState^0,f,c
  3820                           
  3821                           ;Menu.c: 322:                     if(option==5) menuState = 12;
  3822  0458' 0E05               	movlw	5
  3823  045A' 1800'              	xorwf	_option^0,w,c
  3824  045C' A4D8               	btfss	status,2,c
  3825  045E' 0012               	return	
  3826  0460'                    u5550:
  3827  0460' 0E0C               	movlw	12
  3828  0462' 6E00'              	movwf	_menuState^0,c
  3829  0464' 0C0C               	retlw	12
  3830  0466'                    l6640:
  3831                           
  3832                           ; BSR set to: 1
  3833                           ;Menu.c: 328:             if(option==2){
  3834  0466' 0E02               	movlw	2
  3835  0468' 1800'              	xorwf	_option^0,w,c
  3836  046A' E108               	bnz	l6650
  3837                           
  3838                           ; BSR set to: 1
  3839                           ;Menu.c: 329:                 aux = 1;
  3840  046C' 0E01               	movlw	1
  3841  046E' 6E00'              	movwf	_aux^0,c
  3842                           
  3843                           ; BSR set to: 1
  3844                           ;Menu.c: 330:                 LcGotoXY(0,1);
  3845  0470' 6E00'              	movwf	LcGotoXY@Row^0,c
  3846  0472' 0E00               	movlw	0
  3847  0474' EC00' F000'        	call	_LcGotoXY
  3848                           
  3849                           ;Menu.c: 331:                 menuState = 110;
  3850  0478' 0E6E               	movlw	110
  3851  047A' D0BB               	goto	L7
  3852  047C'                    l6650:
  3853                           
  3854                           ; BSR set to: 1
  3855                           ;Menu.c: 334:                 LcPutChar(menuStrings[option][pointer]);
  3856  047C' EC00' F000'        	call	PL42	;call to abstracted procedure
  3857  0480' EC00' F000'        	call	PL38	;call to abstracted procedure
  3858  0484' EC00' F000'        	call	PL36	;call to abstracted procedure
  3859  0488' EC00' F000'        	call	_LcPutChar
  3860                           
  3861                           ;Menu.c: 335:                 ++pointer;
  3862  048C' 2A00'              	incf	_pointer^0,f,c
  3863                           
  3864                           ;Menu.c: 336:                 if(pointer == 16){
  3865  048E' 0E10               	movlw	16
  3866  0490' 1800'              	xorwf	_pointer^0,w,c
  3867  0492' A4D8               	btfss	status,2,c
  3868  0494' 0012               	return	
  3869                           
  3870                           ;Menu.c: 337:                     ++menuState;
  3871  0496' 2A00'              	incf	_menuState^0,f,c
  3872                           
  3873                           ;Menu.c: 338:                     TiResetTics(timerMenu);
  3874  0498' 5000'              	movf	_timerMenu^0,w,c
  3875  049A' EC00' F000'        	call	_TiResetTics
  3876                           
  3877                           ;Menu.c: 339:                     KeyResetValue();
  3878  049E' EC00' F000'        	call	_KeyResetValue	;wreg free
  3879                           
  3880                           ;Menu.c: 340:                     if(option == 3){
  3881  04A2' 0E03               	movlw	3
  3882  04A4' 1800'              	xorwf	_option^0,w,c
  3883  04A6' A4D8               	btfss	status,2,c
  3884  04A8' 0012               	return	
  3885                           
  3886                           ;Menu.c: 341:                         pointer = 0;
  3887  04AA' 6A00'              	clrf	_pointer^0,c
  3888                           
  3889                           ;Menu.c: 342:                         --option;
  3890  04AC' 0600'              	decf	_option^0,f,c
  3891                           
  3892                           ;Menu.c: 343:                         menuState = 110;
  3893  04AE' 0E6E               	movlw	110
  3894  04B0' 6E00'              	movwf	_menuState^0,c
  3895  04B2' 0C6E               	retlw	110
  3896  04B4'                    l6670:
  3897                           
  3898                           ; BSR set to: 1
  3899                           ;Menu.c: 351:             if((pointer) < 16){
  3900  04B4' 0E10               	movlw	16
  3901  04B6' 6000'              	cpfslt	_pointer^0,c
  3902  04B8' D020               	goto	l6680
  3903                           
  3904                           ; BSR set to: 1
  3905                           ;Menu.c: 352:                 LcPutChar(menuStrings[option][pointer+pointerMarquee]);
  3906  04BA' EC00' F000'        	call	PL42	;call to abstracted procedure
  3907  04BE' 6ADA               	clrf	fsr2h,c
  3908  04C0' 50DF               	movf	indf2,w,c
  3909  04C2' 2400'              	addwf	_pointer^0,w,c
  3910  04C4' 2400'              	addwf	_pointerMarquee^0,w,c
  3911  04C6' EC00' F000'        	call	PL36	;call to abstracted procedure
  3912  04CA' EC00' F000'        	call	_LcPutChar
  3913                           
  3914                           ;Menu.c: 353:                 pointer++;
  3915  04CE' 2A00'              	incf	_pointer^0,f,c
  3916                           
  3917                           ;Menu.c: 355:                 if(pointer+pointerMarquee > (29 -1)){
  3918  04D0' 5000'              	movf	_pointerMarquee^0,w,c
  3919  04D2' C04A' F000'        	movff	_pointer,??_menuMotor
  3920  04D6' 0101               	movlb	1	; () banked
  3921  04D8' 6B00'              	clrf	(??_menuMotor+1)& (0+255),b
  3922  04DA' 2700'              	addwf	??_menuMotor& (0+255),f,b
  3923  04DC' 0E00               	movlw	0
  3924  04DE' 2300'              	addwfc	(??_menuMotor+1)& (0+255),f,b
  3925  04E0' BF00'              	btfsc	(??_menuMotor+1)& (0+255),7,b
  3926  04E2' 0C00               	retlw	0
  3927  04E4' 5100'              	movf	(??_menuMotor+1)& (0+255),w,b
  3928  04E6' E104               	bnz	u5600
  3929  04E8' 0E1D               	movlw	29
  3930  04EA' 5D00'              	subwf	??_menuMotor& (0+255),w,b
  3931  04EC' A0D8               	btfss	status,0,c
  3932  04EE' 0012               	return	
  3933  04F0'                    u5600:
  3934                           
  3935                           ; BSR set to: 1
  3936                           ;Menu.c: 356:                     auxPM = pointerMarquee;
  3937  04F0' C049' F048'        	movff	_pointerMarquee,_auxPM
  3938                           
  3939                           ;Menu.c: 357:                     pointer=0;
  3940  04F4' 6A00'              	clrf	_pointer^0,c
  3941                           
  3942                           ;Menu.c: 358:                     pointerMarquee=0;
  3943  04F6' 6A00'              	clrf	_pointerMarquee^0,c
  3944  04F8' 0012               	return	
  3945  04FA'                    l6680:
  3946                           
  3947                           ; BSR set to: 1
  3948                           ;Menu.c: 362:                 ++pointerMarquee;
  3949  04FA' 2A00'              	incf	_pointerMarquee^0,f,c
  3950  04FC' D1C0               	goto	l6974
  3951  04FE'                    l6684:
  3952                           
  3953                           ; BSR set to: 1
  3954                           ;Menu.c: 369:             if(TiGetTics(timerMenu) > 1200){
  3955  04FE' 5000'              	movf	_timerMenu^0,w,c
  3956  0500' EC00' F000'        	call	_TiGetTics
  3957  0504' EC00' F000'        	call	PL46	;call to abstracted procedure
  3958  0508' E31D               	bnc	l6712
  3959                           
  3960                           ;Menu.c: 370:                 if(auxPM){
  3961  050A' 5000'              	movf	_auxPM^0,w,c
  3962  050C' E004               	bz	l6690
  3963                           
  3964                           ;Menu.c: 371:                     pointerMarquee = ++auxPM;
  3965  050E' 2A00'              	incf	_auxPM^0,f,c
  3966  0510' C048' F049'        	movff	_auxPM,_pointerMarquee
  3967                           
  3968                           ;Menu.c: 372:                 }else ++pointerMarquee;
  3969  0514' D001               	goto	l6692
  3970  0516'                    l6690:
  3971  0516' 2A00'              	incf	_pointerMarquee^0,f,c
  3972  0518'                    l6692:
  3973                           
  3974                           ;Menu.c: 373:                 pointer=0;
  3975  0518' 6A00'              	clrf	_pointer^0,c
  3976                           
  3977                           ;Menu.c: 374:                 if(aux == 0) LcGotoXY(0,0);
  3978  051A' 5000'              	movf	_aux^0,w,c
  3979  051C' E105               	bnz	l6698
  3980  051E' 0E00               	movlw	0
  3981  0520' 6A00'              	clrf	LcGotoXY@Row^0,c
  3982  0522' EC00' F000'        	call	_LcGotoXY
  3983  0526' D004               	goto	l6700
  3984  0528'                    l6698:
  3985  0528' EC00' F000'        	call	PL50	;call to abstracted procedure
  3986  052C' EC00' F000'        	call	_LcGotoXY
  3987  0530'                    l6700:
  3988                           
  3989                           ;Menu.c: 376:                 menuState--;
  3990  0530' 0600'              	decf	_menuState^0,f,c
  3991                           
  3992                           ;Menu.c: 377:                 if(auxPM == 28){
  3993  0532' 0E1C               	movlw	28
  3994  0534' 1800'              	xorwf	_auxPM^0,w,c
  3995  0536' E104               	bnz	l6710
  3996                           
  3997                           ;Menu.c: 378:                     menuState = 110;
  3998  0538' 0E6E               	movlw	110
  3999  053A' 6E00'              	movwf	_menuState^0,c
  4000                           
  4001                           ;Menu.c: 379:                     pointer = 0;
  4002  053C' 6A00'              	clrf	_pointer^0,c
  4003                           
  4004                           ;Menu.c: 380:                     pointerMarquee = 0;
  4005  053E' 6A00'              	clrf	_pointerMarquee^0,c
  4006  0540'                    l6710:
  4007                           
  4008                           ;Menu.c: 381:                     auxPM = 0;
  4009  0540' 6A00'              	clrf	_auxPM^0,c
  4010                           
  4011                           ;Menu.c: 382:                 }else{
  4012  0542' 0012               	return	
  4013  0544'                    l6712:
  4014                           
  4015                           ;Menu.c: 386:                 if(aux == 0) ++option;
  4016  0544' 5000'              	movf	_aux^0,w,c
  4017  0546' E18C               	bnz	u5550
  4018  0548' 2A00'              	incf	_option^0,f,c
  4019  054A' D78A               	goto	u5550
  4020  054C'                    l6718:
  4021                           
  4022                           ; BSR set to: 1
  4023                           ;Menu.c: 392:             if(TiGetTics(timerMenu) > 500){
  4024  054C' 5000'              	movf	_timerMenu^0,w,c
  4025  054E' EC00' F000'        	call	_TiGetTics
  4026  0552' 0EF5               	movlw	245
  4027  0554' 5C00'              	subwf	?_TiGetTics^0,w,c
  4028  0556' 0E01               	movlw	1
  4029  0558' 5800'              	subwfb	(?_TiGetTics+1)^0,w,c
  4030  055A' E201 D088          	bnc	l6822
  4031                           
  4032                           ;Menu.c: 393:                 if(isPressed()){
  4033  055E' EC00' F000'        	call	_isPressed	;wreg free
  4034  0562' 0900               	iorlw	0
  4035  0564' E048               	bz	l6774
  4036                           
  4037                           ;Menu.c: 394:                     if(KeyGetValue()== '#'){
  4038  0566' EC00' F000'        	call	_KeyGetValue	;wreg free
  4039  056A' 0A23               	xorlw	35
  4040  056C' A4D8               	btfss	status,2,c
  4041  056E' 0012               	return	
  4042                           
  4043                           ;Menu.c: 395:                         if(option==1){
  4044  0570' 0400'              	decf	_option^0,w,c
  4045  0572' E103               	bnz	l6730
  4046                           
  4047                           ;Menu.c: 396:                             pointer = 0;
  4048  0574' 6A00'              	clrf	_pointer^0,c
  4049                           
  4050                           ;Menu.c: 397:                             menuState = 13;
  4051  0576' 0E0D               	movlw	13
  4052  0578' D03C               	goto	L7
  4053  057A'                    l6730:
  4054  057A' 0E02               	movlw	2
  4055  057C' 1800'              	xorwf	_option^0,w,c
  4056  057E' E10C               	bnz	l6742
  4057                           
  4058                           ;Menu.c: 399:                             KeyResetValue();
  4059  0580' EC00' F000'        	call	_KeyResetValue	;wreg free
  4060                           
  4061                           ;Menu.c: 400:                             menuState = 27;
  4062  0584' 0E1B               	movlw	27
  4063  0586' 6E00'              	movwf	_menuState^0,c
  4064                           
  4065                           ;Menu.c: 401:                             LcClear();
  4066  0588' EC00' F000'        	call	_LcClear	;wreg free
  4067                           
  4068                           ;Menu.c: 402:                             LcGotoXY(0,0);
  4069  058C' 0E00               	movlw	0
  4070  058E' 6A00'              	clrf	LcGotoXY@Row^0,c
  4071  0590' EC00' F000'        	call	_LcGotoXY
  4072                           
  4073                           ;Menu.c: 403:                             pointer=0;
  4074  0594' 6A00'              	clrf	_pointer^0,c
  4075                           
  4076                           ;Menu.c: 404:                         }else if(option==3){
  4077  0596' D658               	goto	l310
  4078  0598'                    l6742:
  4079  0598' 0E03               	movlw	3
  4080  059A' 1800'              	xorwf	_option^0,w,c
  4081  059C' E110               	bnz	l6752
  4082                           
  4083                           ;Menu.c: 405:                             aux = 0;
  4084  059E' 6A00'              	clrf	_aux^0,c
  4085                           
  4086                           ;Menu.c: 406:                             pointerUser=0;
  4087  05A0' 6A00'              	clrf	_pointerUser^0,c
  4088                           
  4089                           ;Menu.c: 407:                             pointer=0;
  4090  05A2' 6A00'              	clrf	_pointer^0,c
  4091                           
  4092                           ;Menu.c: 408:                             pointerMarquee = 0;
  4093  05A4' 6A00'              	clrf	_pointerMarquee^0,c
  4094                           
  4095                           ;Menu.c: 409:                             LcClear();
  4096  05A6' EC00' F000'        	call	_LcClear	;wreg free
  4097                           
  4098                           ;Menu.c: 410:                             LcGotoXY(0,0);
  4099  05AA' 0E00               	movlw	0
  4100  05AC' 6A00'              	clrf	LcGotoXY@Row^0,c
  4101  05AE' EC00' F000'        	call	_LcGotoXY
  4102                           
  4103                           ;Menu.c: 411:                             menuState = 48;
  4104  05B2' 0E30               	movlw	48
  4105  05B4' 6E00'              	movwf	_menuState^0,c
  4106                           
  4107                           ;Menu.c: 412:                             TiResetTics(timerMenu);
  4108  05B6' 5000'              	movf	_timerMenu^0,w,c
  4109  05B8' EC00' F000'        	call	_TiResetTics
  4110                           
  4111                           ;Menu.c: 413:                         }else if(option==4){
  4112  05BC' D645               	goto	l310
  4113  05BE'                    l6752:
  4114  05BE' 0E04               	movlw	4
  4115  05C0' 1800'              	xorwf	_option^0,w,c
  4116  05C2' E10A               	bnz	l6762
  4117                           
  4118                           ;Menu.c: 414:                             pointer=0;
  4119  05C4' 6A00'              	clrf	_pointer^0,c
  4120                           
  4121                           ;Menu.c: 415:                             menuState = 45;
  4122  05C6' 0E2D               	movlw	45
  4123  05C8' 6E00'              	movwf	_menuState^0,c
  4124                           
  4125                           ;Menu.c: 416:                             LcClear();
  4126  05CA' EC00' F000'        	call	_LcClear	;wreg free
  4127                           
  4128                           ;Menu.c: 417:                             LcGotoXY(0,0);
  4129  05CE' 0E00               	movlw	0
  4130  05D0' 6A00'              	clrf	LcGotoXY@Row^0,c
  4131  05D2' EC00' F000'        	call	_LcGotoXY
  4132                           
  4133                           ;Menu.c: 418:                         }else if(option==5){
  4134  05D6' D638               	goto	l310
  4135  05D8'                    l6762:
  4136  05D8' 0E05               	movlw	5
  4137  05DA' 1800'              	xorwf	_option^0,w,c
  4138  05DC' E001 D634          	bnz	l310
  4139                           
  4140                           ;Menu.c: 419:                             LcClear();
  4141  05E0' EC00' F000'        	call	_LcClear	;wreg free
  4142                           
  4143                           ;Menu.c: 420:                             LcGotoXY(0,0);
  4144  05E4' 0E00               	movlw	0
  4145  05E6' 6A00'              	clrf	LcGotoXY@Row^0,c
  4146  05E8' EC00' F000'        	call	_LcGotoXY
  4147                           
  4148                           ;Menu.c: 421:                             pointer=0;
  4149  05EC' 6A00'              	clrf	_pointer^0,c
  4150                           
  4151                           ;Menu.c: 422:                             aux = 0;
  4152  05EE' 6A00'              	clrf	_aux^0,c
  4153                           
  4154                           ;Menu.c: 423:                             menuState = 35;
  4155  05F0' 0E23               	movlw	35
  4156  05F2'                    L7:
  4157  05F2' 6E00'              	movwf	_menuState^0,c
  4158  05F4' D629               	goto	l310
  4159  05F6'                    l6774:
  4160  05F6' EC00' F000'        	call	_getPositionJoystick	;wreg free
  4161  05FA' 0A53               	xorlw	83
  4162  05FC' E114               	bnz	l6792
  4163  05FE' EC00' F000'        	call	_getCentreJoystick	;wreg free
  4164  0602' 0900               	iorlw	0
  4165  0604' E110               	bnz	l6792
  4166                           
  4167                           ;Menu.c: 429:                     resetPositionJoystick();
  4168  0606' EC00' F000'        	call	_resetPositionJoystick	;wreg free
  4169                           
  4170                           ;Menu.c: 430:                     menuState = 10;
  4171                           
  4172                           ;Menu.c: 431:                     pointer=0;
  4173  060A' EC00' F000'        	call	PL92	;call to abstracted procedure
  4174                           
  4175                           ;Menu.c: 432:                     LcClear();
  4176  060E' EC00' F000'        	call	_LcClear	;wreg free
  4177                           
  4178                           ;Menu.c: 433:                     LcGotoXY(0,0);
  4179  0612' 0E00               	movlw	0
  4180  0614' 6A00'              	clrf	LcGotoXY@Row^0,c
  4181  0616' EC00' F000'        	call	_LcGotoXY
  4182                           
  4183                           ;Menu.c: 434:                     if(option==5) --option;
  4184  061A' 0E05               	movlw	5
  4185  061C' 1800'              	xorwf	_option^0,w,c
  4186  061E' A4D8               	btfss	status,2,c
  4187  0620' 0012               	return	
  4188  0622'                    u5760:
  4189  0622' 0600'              	decf	_option^0,f,c
  4190  0624' 0012               	return	
  4191  0626'                    l6792:
  4192  0626' EC00' F000'        	call	_getPositionJoystick	;wreg free
  4193  062A' 0A57               	xorlw	87
  4194  062C' E113               	bnz	l6812
  4195  062E' EC00' F000'        	call	_getCentreJoystick	;wreg free
  4196  0632' 0900               	iorlw	0
  4197  0634' E10F               	bnz	l6812
  4198                           
  4199                           ;Menu.c: 437:                     resetPositionJoystick();
  4200  0636' EC00' F000'        	call	_resetPositionJoystick	;wreg free
  4201                           
  4202                           ;Menu.c: 438:                     menuState = 10;
  4203                           
  4204                           ;Menu.c: 439:                     pointer=0;
  4205  063A' EC00' F000'        	call	PL92	;call to abstracted procedure
  4206                           
  4207                           ;Menu.c: 440:                     LcClear();
  4208  063E' EC00' F000'        	call	_LcClear	;wreg free
  4209                           
  4210                           ;Menu.c: 441:                     LcGotoXY(0,0);
  4211  0642' 0E00               	movlw	0
  4212  0644' 6A00'              	clrf	LcGotoXY@Row^0,c
  4213  0646' EC00' F000'        	call	_LcGotoXY
  4214                           
  4215                           ;Menu.c: 442:                     if(option==1) --option;
  4216  064A' 0400'              	decf	_option^0,w,c
  4217  064C' E0EA               	bz	u5760
  4218  064E' 0E02               	movlw	2
  4219  0650' 5E00'              	subwf	_option^0,f,c
  4220  0652' 0C02               	retlw	2
  4221  0654'                    l6812:
  4222  0654' 0E03               	movlw	3
  4223  0656' 1800'              	xorwf	_option^0,w,c
  4224  0658' E004               	bz	u5810
  4225  065A' 0E02               	movlw	2
  4226  065C' 1800'              	xorwf	_option^0,w,c
  4227  065E' A4D8               	btfss	status,2,c
  4228  0660' 0012               	return	
  4229  0662'                    u5810:
  4230                           
  4231                           ;Menu.c: 445:                     if(aux == 0) --option;
  4232  0662' 5000'              	movf	_aux^0,w,c
  4233  0664' E101               	bnz	l6820
  4234  0666'                    u5820:
  4235  0666' 0600'              	decf	_option^0,f,c
  4236  0668'                    l6820:
  4237                           
  4238                           ;Menu.c: 446:                     menuState = 111;
  4239  0668' 0E6F               	movlw	111
  4240  066A' 6E00'              	movwf	_menuState^0,c
  4241  066C' 0C6F               	retlw	111
  4242  066E'                    l6822:
  4243  066E' 0E03               	movlw	3
  4244  0670' 1800'              	xorwf	_option^0,w,c
  4245  0672' E004               	bz	u5840
  4246  0674' 0E02               	movlw	2
  4247  0676' 1800'              	xorwf	_option^0,w,c
  4248  0678' A4D8               	btfss	status,2,c
  4249  067A' 0012               	return	
  4250  067C'                    u5840:
  4251                           
  4252                           ;Menu.c: 450:                 if(aux == 0) --option;
  4253  067C' 5000'              	movf	_aux^0,w,c
  4254  067E' E0F3               	bz	u5820
  4255  0680' D7F3               	goto	l6820
  4256  0682'                    l6832:
  4257                           
  4258                           ; BSR set to: 1
  4259                           ;Menu.c: 458:    if(users[pointerUser].username[pointer] != '\0'){
  4260  0682' EC00' F000'        	call	PL12	;call to abstracted procedure
  4261  0686' EC00' F000'        	call	PL2	;call to abstracted procedure
  4262  068A' 50DF               	movf	indf2,w,c
  4263  068C' E00E               	bz	l6840
  4264                           
  4265                           ; BSR set to: 1
  4266                           ;Menu.c: 459:     if(TXbusy()==1){
  4267  068E' EC00' F000'        	call	_TXbusy	;wreg free
  4268  0692' 06E8               	decf	wreg,f,c
  4269  0694' A4D8               	btfss	status,2,c
  4270  0696' 0012               	return	
  4271                           
  4272                           ;Menu.c: 460:      setTX(users[pointerUser].username[pointer]);
  4273  0698' 5000'              	movf	_pointerUser^0,w,c
  4274  069A' EC00' F000'        	call	PL24	;call to abstracted procedure
  4275  069E' EC00' F000'        	call	PL2	;call to abstracted procedure
  4276  06A2' 50DF               	movf	indf2,w,c
  4277  06A4' EC00' F000'        	call	_setTX
  4278  06A8' D5E2               	goto	l6508
  4279  06AA'                    l6840:
  4280                           
  4281                           ; BSR set to: 1
  4282                           ;Menu.c: 465:                 setTX(users[pointerUser].username[pointer]);
  4283  06AA' EC00' F000'        	call	PL12	;call to abstracted procedure
  4284  06AE' DBFE               	call	PL2	;call to abstracted procedure
  4285  06B0' 50DF               	movf	indf2,w,c
  4286  06B2' EC00' F000'        	call	_setTX
  4287  06B6' D564               	goto	l6440
  4288  06B8'                    l6846:
  4289                           
  4290                           ; BSR set to: 1
  4291                           ;Menu.c: 472:             if(getRX()=='K'){
  4292  06B8' EC00' F000'        	call	_getRX	;wreg free
  4293  06BC' 0A4B               	xorlw	75
  4294  06BE' A4D8               	btfss	status,2,c
  4295  06C0' 0012               	return	
  4296                           
  4297                           ;Menu.c: 473:                 minutesCountdown = minutes;
  4298  06C2' C043' F041'        	movff	_minutes,_minutesCountdown
  4299                           
  4300                           ;Menu.c: 474:                 secondsCountdown = seconds;
  4301  06C6' C042' F040'        	movff	_seconds,_secondsCountdown
  4302                           
  4303                           ;Menu.c: 475:                 LcClear();
  4304  06CA' EC00' F000'        	call	_LcClear	;wreg free
  4305                           
  4306                           ;Menu.c: 476:                 LcGotoXY(0,0);
  4307  06CE' 0E00               	movlw	0
  4308  06D0' 6A00'              	clrf	LcGotoXY@Row^0,c
  4309  06D2' EC00' F000'        	call	_LcGotoXY
  4310                           
  4311                           ;Menu.c: 477:                 ++menuState;
  4312  06D6' 2A00'              	incf	_menuState^0,f,c
  4313                           
  4314                           ;Menu.c: 478:                 gameON = 1;
  4315  06D8' 0E01               	movlw	1
  4316  06DA' 6E00'              	movwf	_gameON^0,c
  4317                           
  4318                           ;Menu.c: 479:                 pointer =0;
  4319  06DC' 6A00'              	clrf	_pointer^0,c
  4320                           
  4321                           ;Menu.c: 480:                 startMusic();
  4322  06DE' EF00' F000'        	goto	_startMusic	;wreg free
  4323  06E2'                    l6860:
  4324                           
  4325                           ; BSR set to: 1
  4326                           ;Menu.c: 485:    LcPutChar(timeRemainingString[pointer]);
  4327  06E2' 5000'              	movf	_pointer^0,w,c
  4328  06E4' 0F00'              	addlw	low _timeRemainingString@Menu$F572
  4329  06E6' EC00' F000'        	call	PL44	;call to abstracted procedure
  4330  06EA' EC00' F000'        	call	_LcPutChar
  4331                           
  4332                           ;Menu.c: 486:             ++pointer;
  4333  06EE' 2A00'              	incf	_pointer^0,f,c
  4334                           
  4335                           ;Menu.c: 487:             if(pointer > 14){
  4336  06F0' 0E0E               	movlw	14
  4337  06F2' 6400'              	cpfsgt	_pointer^0,c
  4338  06F4' 0C0E               	retlw	14
  4339  06F6'                    u5890:
  4340                           
  4341                           ;Menu.c: 488:                 ++menuState;
  4342  06F6' 2A00'              	incf	_menuState^0,f,c
  4343  06F8' D5A7               	goto	l310
  4344  06FA'                    l6870:
  4345                           
  4346                           ; BSR set to: 1
  4347                           ;Menu.c: 494:             LcGotoXY(0,1);
  4348  06FA' EC00' F000'        	call	PL50	;call to abstracted procedure
  4349  06FE' EC00' F000'        	call	_LcGotoXY
  4350                           
  4351                           ;Menu.c: 495:    TiResetTics(timerMenu);
  4352  0702' 5000'              	movf	_timerMenu^0,w,c
  4353  0704' EC00' F000'        	call	_TiResetTics
  4354                           
  4355                           ;Menu.c: 496:             LcPutTime(minutesCountdown);
  4356  0708' 5000'              	movf	_minutesCountdown^0,w,c
  4357  070A' EC00' F000'        	call	_LcPutTime
  4358                           
  4359                           ;Menu.c: 497:             LcPutChar(':');
  4360  070E' 0E3A               	movlw	58
  4361  0710' EC00' F000'        	call	_LcPutChar
  4362                           
  4363                           ;Menu.c: 498:             LcPutTime(secondsCountdown);
  4364  0714' 5000'              	movf	_secondsCountdown^0,w,c
  4365  0716' EC00' F000'        	call	_LcPutTime
  4366                           
  4367                           ;Menu.c: 499:    menuState = 39;
  4368  071A' 0E27               	movlw	39
  4369  071C' 6E00'              	movwf	_menuState^0,c
  4370                           
  4371                           ;Menu.c: 500:    break;
  4372  071E' 0C27               	retlw	39
  4373  0720'                    l6874:
  4374                           
  4375                           ; BSR set to: 1
  4376                           ;Menu.c: 503:             if(TXgetState() == 0){
  4377  0720' EC00' F000'        	call	_TXgetState	;wreg free
  4378  0724' 0900               	iorlw	0
  4379  0726' A4D8               	btfss	status,2,c
  4380  0728' 0012               	return	
  4381                           
  4382                           ;Menu.c: 504:                 sendMyTX(minutesCountdown/10 + '0');
  4383  072A' 0E0A               	movlw	10
  4384  072C' 6E00'              	movwf	___lbdiv@divisor^0,c
  4385  072E' 5000'              	movf	_minutesCountdown^0,w,c
  4386  0730' EC00' F000'        	call	___lbdiv
  4387  0734' 0F30               	addlw	48
  4388  0736' EC00' F000'        	call	_sendMyTX
  4389  073A' D46F               	goto	l6324
  4390  073C'                    l6880:
  4391                           
  4392                           ; BSR set to: 1
  4393                           ;Menu.c: 511:             if(TXgetState() == 0){
  4394  073C' EC00' F000'        	call	_TXgetState	;wreg free
  4395  0740' 0900               	iorlw	0
  4396  0742' A4D8               	btfss	status,2,c
  4397  0744' 0012               	return	
  4398                           
  4399                           ;Menu.c: 512:                 sendMyTX(minutesCountdown%10 + '0');
  4400  0746' 0E0A               	movlw	10
  4401  0748' 6E00'              	movwf	___lbmod@divisor^0,c
  4402  074A' 5000'              	movf	_minutesCountdown^0,w,c
  4403  074C' EC00' F000'        	call	___lbmod
  4404  0750' 0F30               	addlw	48
  4405  0752' EC00' F000'        	call	_sendMyTX
  4406  0756' D461               	goto	l6324
  4407  0758'                    l6886:
  4408                           
  4409                           ; BSR set to: 1
  4410                           ;Menu.c: 518:             if(TXgetState() == 0){
  4411  0758' EC00' F000'        	call	_TXgetState	;wreg free
  4412  075C' 0900               	iorlw	0
  4413  075E' A4D8               	btfss	status,2,c
  4414  0760' 0012               	return	
  4415                           
  4416                           ;Menu.c: 519:                 sendMyTX(':');
  4417  0762' 0E3A               	movlw	58
  4418  0764' EC00' F000'        	call	_sendMyTX
  4419  0768' D458               	goto	l6324
  4420  076A'                    l6892:
  4421                           
  4422                           ; BSR set to: 1
  4423                           ;Menu.c: 525:             if(TXgetState() == 0){
  4424  076A' EC00' F000'        	call	_TXgetState	;wreg free
  4425  076E' 0900               	iorlw	0
  4426  0770' A4D8               	btfss	status,2,c
  4427  0772' 0012               	return	
  4428                           
  4429                           ;Menu.c: 526:                 sendMyTX(secondsCountdown/10 + '0');
  4430  0774' 0E0A               	movlw	10
  4431  0776' 6E00'              	movwf	___lbdiv@divisor^0,c
  4432  0778' 5000'              	movf	_secondsCountdown^0,w,c
  4433  077A' EC00' F000'        	call	___lbdiv
  4434  077E' 0F30               	addlw	48
  4435  0780' EC00' F000'        	call	_sendMyTX
  4436  0784' D44A               	goto	l6324
  4437  0786'                    l6898:
  4438                           
  4439                           ; BSR set to: 1
  4440                           ;Menu.c: 532:             if(TXgetState() == 0){
  4441  0786' EC00' F000'        	call	_TXgetState	;wreg free
  4442  078A' 0900               	iorlw	0
  4443  078C' A4D8               	btfss	status,2,c
  4444  078E' 0012               	return	
  4445                           
  4446                           ;Menu.c: 533:                 sendMyTX(secondsCountdown%10 + '0');
  4447  0790' 0E0A               	movlw	10
  4448  0792' 6E00'              	movwf	___lbmod@divisor^0,c
  4449  0794' 5000'              	movf	_secondsCountdown^0,w,c
  4450  0796' EC00' F000'        	call	___lbmod
  4451  079A' 0F30               	addlw	48
  4452  079C' EC00' F000'        	call	_sendMyTX
  4453  07A0' D43C               	goto	l6324
  4454  07A2'                    l6904:
  4455                           
  4456                           ; BSR set to: 1
  4457                           ;Menu.c: 539:             if(TXgetState() == 0){
  4458  07A2' EC00' F000'        	call	_TXgetState	;wreg free
  4459  07A6' 0900               	iorlw	0
  4460  07A8' A4D8               	btfss	status,2,c
  4461  07AA' 0012               	return	
  4462                           
  4463                           ;Menu.c: 540:                 sendMyTX(' ');
  4464  07AC' 0E20               	movlw	32
  4465  07AE' EC00' F000'        	call	_sendMyTX
  4466                           
  4467                           ;Menu.c: 541:                 menuState = 17;
  4468  07B2' 0E11               	movlw	17
  4469  07B4' 6E00'              	movwf	_menuState^0,c
  4470  07B6' 0C11               	retlw	17
  4471  07B8'                    l6910:
  4472                           
  4473                           ; BSR set to: 1
  4474                           ;Menu.c: 546:    if(TiGetTics(timerMenu) == 1200){
  4475  07B8' 5000'              	movf	_timerMenu^0,w,c
  4476  07BA' EC00' F000'        	call	_TiGetTics
  4477  07BE' 0EB0               	movlw	176
  4478  07C0' 1800'              	xorwf	?_TiGetTics^0,w,c
  4479  07C2' E114               	bnz	l6930
  4480  07C4' 0E04               	movlw	4
  4481  07C6' 1800'              	xorwf	(?_TiGetTics+1)^0,w,c
  4482  07C8' E111               	bnz	l6930
  4483                           
  4484                           ;Menu.c: 547:                 if(secondsCountdown==0){
  4485  07CA' 5000'              	movf	_secondsCountdown^0,w,c
  4486  07CC' E10A               	bnz	l6924
  4487                           
  4488                           ;Menu.c: 548:                     --minutesCountdown;
  4489  07CE' 0600'              	decf	_minutesCountdown^0,f,c
  4490                           
  4491                           ;Menu.c: 549:                     if(minutesCountdown==0 && secondsCountdown==0){
  4492  07D0' 5000'              	movf	_minutesCountdown^0,w,c
  4493  07D2' E104               	bnz	l6922
  4494  07D4' 5000'              	movf	_secondsCountdown^0,w,c
  4495  07D6' E102               	bnz	l6922
  4496                           
  4497                           ;Menu.c: 550:                         ++menuState;
  4498  07D8' 2A00'              	incf	_menuState^0,f,c
  4499                           
  4500                           ;Menu.c: 551:                     }
  4501  07DA' D004               	goto	l6926
  4502  07DC'                    l6922:
  4503                           
  4504                           ;Menu.c: 553:                         secondsCountdown= 59;
  4505  07DC' 0E3B               	movlw	59
  4506  07DE' 6E00'              	movwf	_secondsCountdown^0,c
  4507  07E0' D001               	goto	l6926
  4508  07E2'                    l6924:
  4509                           
  4510                           ;Menu.c: 557:                     --secondsCountdown;
  4511  07E2' 0600'              	decf	_secondsCountdown^0,f,c
  4512  07E4'                    l6926:
  4513                           
  4514                           ;Menu.c: 559:                 LcGotoXY(0,1);
  4515  07E4' DBFA               	call	PL50	;call to abstracted procedure
  4516  07E6' EC00' F000'        	call	_LcGotoXY
  4517                           
  4518                           ;Menu.c: 560:     --menuState;
  4519  07EA' 0600'              	decf	_menuState^0,f,c
  4520  07EC'                    l6930:
  4521                           
  4522                           ;Menu.c: 562:    if(KeyGetValue()== '*'){
  4523  07EC' EC00' F000'        	call	_KeyGetValue	;wreg free
  4524  07F0' 0A2A               	xorlw	42
  4525  07F2' E101               	bnz	l6934
  4526                           
  4527                           ;Menu.c: 563:                 ++menuState;
  4528  07F4' 2A00'              	incf	_menuState^0,f,c
  4529  07F6'                    l6934:
  4530                           
  4531                           ;Menu.c: 565:             if (isPressed()){
  4532  07F6' EC00' F000'        	call	_isPressed	;wreg free
  4533  07FA' 0900               	iorlw	0
  4534  07FC' B4D8               	btfsc	status,2,c
  4535  07FE' 0012               	return	
  4536                           
  4537                           ;Menu.c: 566:                 if(TXgetState()==0){
  4538  0800' EC00' F000'        	call	_TXgetState	;wreg free
  4539  0804' 0900               	iorlw	0
  4540  0806' E002 EF00' F000'   	bnz	_KeyResetValue
  4541                           
  4542                           ;Menu.c: 567:                     keyValue = KeyGetNumber();
  4543  080C' EC00' F000'        	call	_KeyGetNumber	;wreg free
  4544                           
  4545                           ;Menu.c: 568:                     setTX(keyValue+'0');
  4546  0810' EC00' F000'        	call	PL96	;call to abstracted procedure
  4547  0814' EC00' F000'        	call	_setTX
  4548  0818' EF00' F000'        	goto	_KeyResetValue
  4549  081C'                    l6944:
  4550                           
  4551                           ; BSR set to: 1
  4552                           ;Menu.c: 576:             if(TXbusy()==1){
  4553  081C' EC00' F000'        	call	_TXbusy	;wreg free
  4554  0820' 06E8               	decf	wreg,f,c
  4555  0822' A4D8               	btfss	status,2,c
  4556  0824' 0012               	return	
  4557                           
  4558                           ;Menu.c: 577:                 endMusic();
  4559  0826' EC00' F000'        	call	_endMusic	;wreg free
  4560                           
  4561                           ;Menu.c: 578:                 LATAbits.LATA3 = 1;
  4562  082A' 8689               	bsf	137,3,c	;volatile
  4563                           
  4564                           ;Menu.c: 579:                 setTX('F');
  4565  082C' 0E46               	movlw	70
  4566  082E' EC00' F000'        	call	_setTX
  4567                           
  4568                           ;Menu.c: 580:                 TiResetTics(timerMenu);
  4569  0832' 5000'              	movf	_timerMenu^0,w,c
  4570  0834' EC00' F000'        	call	_TiResetTics
  4571  0838' EF00' F000'        	goto	l6324
  4572  083C'                    l6956:
  4573                           
  4574                           ; BSR set to: 1
  4575                           ;Menu.c: 586:    if(RXdata()==1){
  4576  083C' EC00' F000'        	call	_RXdata	;wreg free
  4577  0840' 06E8               	decf	wreg,f,c
  4578  0842' A4D8               	btfss	status,2,c
  4579  0844' 0012               	return	
  4580                           
  4581                           ;Menu.c: 587:                 auxPM = getRX();
  4582  0846' EC00' F000'        	call	_getRX	;wreg free
  4583  084A' 6E00'              	movwf	_auxPM^0,c
  4584                           
  4585                           ;Menu.c: 588:                 aux = auxPM;
  4586  084C' C048' F03E'        	movff	_auxPM,_aux
  4587                           
  4588                           ;Menu.c: 589:                 TiResetTics(timerMenu);
  4589  0850' 5000'              	movf	_timerMenu^0,w,c
  4590  0852' EC00' F000'        	call	_TiResetTics
  4591  0856' EF00' F000'        	goto	l6324
  4592  085A'                    l6966:
  4593                           
  4594                           ; BSR set to: 1
  4595                           ;Menu.c: 595:             if (TiGetTics(timerMenu) < 3*1200){
  4596  085A' 5000'              	movf	_timerMenu^0,w,c
  4597  085C' EC00' F000'        	call	_TiGetTics
  4598  0860' 0E10               	movlw	16
  4599  0862' 5C00'              	subwf	?_TiGetTics^0,w,c
  4600  0864' 0E0E               	movlw	14
  4601  0866' 5800'              	subwfb	(?_TiGetTics+1)^0,w,c
  4602  0868' E20C               	bc	l438
  4603                           
  4604                           ;Menu.c: 596:                 if(RXdata()==1){
  4605  086A' EC00' F000'        	call	_RXdata	;wreg free
  4606  086E' 06E8               	decf	wreg,f,c
  4607  0870' A4D8               	btfss	status,2,c
  4608  0872' 0012               	return	
  4609                           
  4610                           ;Menu.c: 597:                     LcClear();
  4611  0874' EC00' F000'        	call	_LcClear	;wreg free
  4612                           
  4613                           ;Menu.c: 598:                     error[0] = getRX();
  4614  0878' EC00' F000'        	call	_getRX	;wreg free
  4615  087C' 6E00'              	movwf	_error^0,c
  4616  087E'                    l6974:
  4617                           
  4618                           ;Menu.c: 599:                     ++menuState;
  4619  087E' 2A00'              	incf	_menuState^0,f,c
  4620  0880' D4BB               	goto	l6476
  4621  0882'                    l438:
  4622                           
  4623                           ;Menu.c: 603:                 auxPU = pointerUser;
  4624  0882' C047' F046'        	movff	_pointerUser,_auxPU
  4625                           
  4626                           ;Menu.c: 604:                 menuState = 34;
  4627  0886' 0E22               	movlw	34
  4628  0888' 6E00'              	movwf	_menuState^0,c
  4629                           
  4630                           ;Menu.c: 605:                 pointer = 0;
  4631  088A' 6A00'              	clrf	_pointer^0,c
  4632                           
  4633                           ;Menu.c: 606:                 LcClear();
  4634  088C' EC00' F000'        	call	_LcClear	;wreg free
  4635  0890' D1C4               	goto	l7286
  4636  0892'                    l6986:
  4637                           
  4638                           ; BSR set to: 1
  4639                           ;Menu.c: 612:             if(pointer < 5){
  4640  0892' 0E05               	movlw	5
  4641  0894' 6000'              	cpfslt	_pointer^0,c
  4642  0896' D010               	goto	l6996
  4643                           
  4644                           ; BSR set to: 1
  4645                           ;Menu.c: 613:                 if(topScores[pointer].score == 0){
  4646  0898' 5000'              	movf	_pointer^0,w,c
  4647  089A' DB68               	call	PL22	;call to abstracted procedure
  4648  089C' 50DF               	movf	indf2,w,c
  4649  089E' E10F               	bnz	l6998
  4650                           
  4651                           ; BSR set to: 1
  4652                           ;Menu.c: 614:                     topScores[pointer].score = aux;
  4653  08A0' 5000'              	movf	_pointer^0,w,c
  4654  08A2' DB64               	call	PL22	;call to abstracted procedure
  4655                           
  4656                           ;Menu.c: 615:                     topScores[pointer].user = pointerUser;
  4657  08A4' DB9D               	call	PL52	;call to abstracted procedure
  4658  08A6' DB39               	call	PL10	;call to abstracted procedure
  4659  08A8' C047' FFDF         	movff	_pointerUser,indf2
  4660                           
  4661                           ; BSR set to: 1
  4662                           ;Menu.c: 616:                     ++numScores;
  4663  08AC' 2A00'              	incf	_numScores@Data$F582^0,f,c
  4664                           
  4665                           ; BSR set to: 1
  4666                           ;Menu.c: 617:                     writeEepromScores(topScores[pointer], pointer);
  4667  08AE' 5000'              	movf	_pointer^0,w,c
  4668  08B0' DB5D               	call	PL22	;call to abstracted procedure
  4669  08B2' DB7F               	call	PL40	;call to abstracted procedure
  4670  08B4' EC00' F000'        	call	_writeEepromScores	;wreg free
  4671  08B8'                    l6996:
  4672                           
  4673                           ;Menu.c: 618:                     menuState = 23;
  4674  08B8' 0E17               	movlw	23
  4675  08BA' 6E00'              	movwf	_menuState^0,c
  4676                           
  4677                           ;Menu.c: 619:                 }
  4678  08BC' 0C17               	retlw	23
  4679  08BE'                    l6998:
  4680                           
  4681                           ; BSR set to: 1
  4682  08BE' 5000'              	movf	_pointer^0,w,c
  4683  08C0' DB55               	call	PL22	;call to abstracted procedure
  4684  08C2' 50DE               	movf	postinc2,w,c
  4685  08C4' 5C00'              	subwf	_aux^0,w,c
  4686  08C6' E201 D4D2          	bnc	l6508
  4687                           
  4688                           ; BSR set to: 1
  4689                           ;Menu.c: 624:                     prevMaxScore = topScores[pointer].score;
  4690  08CA' 5000'              	movf	_pointer^0,w,c
  4691  08CC' DB4F               	call	PL22	;call to abstracted procedure
  4692  08CE' 50DF               	movf	indf2,w,c
  4693  08D0' 6E00'              	movwf	_prevMaxScore^0,c
  4694                           
  4695                           ;Menu.c: 625:                     prevMaxIndex = topScores[pointer].user;
  4696  08D2' 5000'              	movf	_pointer^0,w,c
  4697  08D4' DB22               	call	PL10	;call to abstracted procedure
  4698  08D6' 50DF               	movf	indf2,w,c
  4699  08D8' 6E00'              	movwf	_prevMaxIndex^0,c
  4700                           
  4701                           ;Menu.c: 626:                     topScores[pointer].score = aux;
  4702  08DA' 5000'              	movf	_pointer^0,w,c
  4703  08DC' DB47               	call	PL22	;call to abstracted procedure
  4704                           
  4705                           ;Menu.c: 627:                     topScores[pointer].user = auxPU;
  4706  08DE' DB80               	call	PL52	;call to abstracted procedure
  4707  08E0' DB1C               	call	PL10	;call to abstracted procedure
  4708  08E2' C046' FFDF         	movff	_auxPU,indf2
  4709                           
  4710                           ;Menu.c: 628:                     if(topScores[pointer].score != 0)writeEepromScores(top
      +                          Scores[pointer], pointer);
  4711  08E6' 5000'              	movf	_pointer^0,w,c
  4712  08E8' DB41               	call	PL22	;call to abstracted procedure
  4713  08EA' 50DF               	movf	indf2,w,c
  4714  08EC' E005               	bz	l7006
  4715                           
  4716                           ; BSR set to: 1
  4717  08EE' 5000'              	movf	_pointer^0,w,c
  4718  08F0' DB3D               	call	PL22	;call to abstracted procedure
  4719  08F2' DB5F               	call	PL40	;call to abstracted procedure
  4720  08F4' EC00' F000'        	call	_writeEepromScores	;wreg free
  4721  08F8'                    l7006:
  4722                           
  4723                           ;Menu.c: 629:                     aux = prevMaxScore;
  4724  08F8' C03C' F03E'        	movff	_prevMaxScore,_aux
  4725                           
  4726                           ;Menu.c: 630:                     auxPU = prevMaxIndex;
  4727  08FC' C03D' F046'        	movff	_prevMaxIndex,_auxPU
  4728                           
  4729                           ;Menu.c: 631:                     ++pointer;
  4730  0900' 2A00'              	incf	_pointer^0,f,c
  4731                           
  4732                           ;Menu.c: 632:                     ++numScores;
  4733  0902' 2A00'              	incf	_numScores@Data$F582^0,f,c
  4734                           
  4735                           ;Menu.c: 633:                     if(numScores > 5) numScores = 5;
  4736  0904' 0E05               	movlw	5
  4737  0906' 6400'              	cpfsgt	_numScores@Data$F582^0,c
  4738  0908' 0C05               	retlw	5
  4739  090A' 6E00'              	movwf	_numScores@Data$F582^0,c
  4740  090C' 0C05               	retlw	5
  4741  090E'                    l7020:
  4742                           
  4743                           ; BSR set to: 1
  4744                           ;Menu.c: 643:             if(RXdata()==1){
  4745  090E' EC00' F000'        	call	_RXdata	;wreg free
  4746  0912' 06E8               	decf	wreg,f,c
  4747  0914' A4D8               	btfss	status,2,c
  4748  0916' 0012               	return	
  4749                           
  4750                           ;Menu.c: 644:                 error[1] = getRX();
  4751  0918' EC00' F000'        	call	_getRX	;wreg free
  4752  091C' 6E00'              	movwf	(_error+1)^0,c
  4753                           
  4754                           ;Menu.c: 645:                 pointer = 0;
  4755  091E' 6A00'              	clrf	_pointer^0,c
  4756                           
  4757                           ;Menu.c: 646:                 LcClear();
  4758  0920' EC00' F000'        	call	_LcClear	;wreg free
  4759                           
  4760                           ;Menu.c: 647:                 LcGotoXY(0,0);
  4761  0924' 0E00               	movlw	0
  4762  0926' 6A00'              	clrf	LcGotoXY@Row^0,c
  4763  0928' EC00' F000'        	call	_LcGotoXY
  4764  092C' EF00' F000'        	goto	l6324
  4765  0930'                    l7032:
  4766                           
  4767                           ; BSR set to: 1
  4768                           ;Menu.c: 653:             LcPutChar(errorsString[pointer]);
  4769  0930' 5000'              	movf	_pointer^0,w,c
  4770  0932' 0F00'              	addlw	low _errorsString@Menu$F575
  4771  0934' DB49               	call	PL44	;call to abstracted procedure
  4772  0936' EC00' F000'        	call	_LcPutChar
  4773                           
  4774                           ;Menu.c: 654:             ++pointer;
  4775  093A' 2A00'              	incf	_pointer^0,f,c
  4776                           
  4777                           ;Menu.c: 655:             if(pointer == 7){
  4778  093C' 0E07               	movlw	7
  4779  093E' 1800'              	xorwf	_pointer^0,w,c
  4780  0940' A4D8               	btfss	status,2,c
  4781  0942' 0012               	return	
  4782                           
  4783                           ;Menu.c: 656:                 menuState = 20;
  4784  0944' 0E14               	movlw	20
  4785  0946' 6E00'              	movwf	_menuState^0,c
  4786                           
  4787                           ;Menu.c: 657:                 pointer=0;
  4788  0948' 6A00'              	clrf	_pointer^0,c
  4789                           
  4790                           ;Menu.c: 658:                 LcGotoXY(0,1);
  4791  094A' DB47               	call	PL50	;call to abstracted procedure
  4792  094C' EC00' F000'        	call	_LcGotoXY
  4793                           
  4794                           ;Menu.c: 659:                 LcPutChar(error[0]);
  4795  0950' 5000'              	movf	_error^0,w,c
  4796  0952' EC00' F000'        	call	_LcPutChar
  4797                           
  4798                           ;Menu.c: 660:                 LcPutChar(error[1]);
  4799  0956' 5000'              	movf	(_error+1)^0,w,c
  4800  0958' EC00' F000'        	call	_LcPutChar
  4801  095C' D44D               	goto	l6476
  4802  095E'                    l7050:
  4803                           
  4804                           ; BSR set to: 1
  4805                           ;Menu.c: 666:             LcPutChar(timeLeftString[pointer]);
  4806  095E' 5000'              	movf	_pointer^0,w,c
  4807  0960' 0F00'              	addlw	low _timeLeftString@Menu$F573
  4808  0962' DB32               	call	PL44	;call to abstracted procedure
  4809  0964' EC00' F000'        	call	_LcPutChar
  4810                           
  4811                           ;Menu.c: 667:             ++pointer;
  4812  0968' 2A00'              	incf	_pointer^0,f,c
  4813                           
  4814                           ;Menu.c: 668:             if(pointer == 10){
  4815  096A' 0E0A               	movlw	10
  4816  096C' 1800'              	xorwf	_pointer^0,w,c
  4817  096E' A4D8               	btfss	status,2,c
  4818  0970' 0012               	return	
  4819                           
  4820                           ;Menu.c: 669:                 ++menuState;
  4821  0972' 2A00'              	incf	_menuState^0,f,c
  4822                           
  4823                           ;Menu.c: 670:                 LcGotoXY(++pointer,0);
  4824  0974' DB46               	call	PL88	;call to abstracted procedure
  4825  0976' EF00' F000'        	goto	_LcGotoXY
  4826  097A'                    l7060:
  4827                           
  4828                           ; BSR set to: 1
  4829                           ;Menu.c: 675:             LcPutTime(minutesCountdown);
  4830  097A' 5000'              	movf	_minutesCountdown^0,w,c
  4831  097C' EC00' F000'        	call	_LcPutTime
  4832                           
  4833                           ;Menu.c: 676:             LcPutChar(':');
  4834  0980' 0E3A               	movlw	58
  4835  0982' EC00' F000'        	call	_LcPutChar
  4836                           
  4837                           ;Menu.c: 677:             LcPutTime(secondsCountdown);
  4838  0986' 5000'              	movf	_secondsCountdown^0,w,c
  4839  0988' EC00' F000'        	call	_LcPutTime
  4840                           
  4841                           ;Menu.c: 678:             LcGotoXY(0,1);
  4842  098C' DB26               	call	PL50	;call to abstracted procedure
  4843  098E' EC00' F000'        	call	_LcGotoXY
  4844  0992' EF00' F000'        	goto	l6440
  4845  0996'                    l7066:
  4846                           
  4847                           ; BSR set to: 1
  4848                           ;Menu.c: 684:             LcPutChar(scoreString[pointer]);
  4849  0996' 5000'              	movf	_pointer^0,w,c
  4850  0998' 0F00'              	addlw	low _scoreString@Menu$F574
  4851  099A' DB16               	call	PL44	;call to abstracted procedure
  4852  099C' EC00' F000'        	call	_LcPutChar
  4853                           
  4854                           ;Menu.c: 685:             ++pointer;
  4855  09A0' 2A00'              	incf	_pointer^0,f,c
  4856                           
  4857                           ;Menu.c: 686:             if(pointer == 6){
  4858  09A2' 0E06               	movlw	6
  4859  09A4' 1800'              	xorwf	_pointer^0,w,c
  4860  09A6' A4D8               	btfss	status,2,c
  4861  09A8' 0012               	return	
  4862                           
  4863                           ;Menu.c: 687:                 LcPutScore(auxPM);
  4864  09AA' 5000'              	movf	_auxPM^0,w,c
  4865  09AC' EC00' F000'        	call	_LcPutScore
  4866  09B0' EF00' F000'        	goto	l6324
  4867  09B4'                    l7076:
  4868                           
  4869                           ; BSR set to: 1
  4870                           ;Menu.c: 693:             if(isPressed()){
  4871  09B4' EC00' F000'        	call	_isPressed	;wreg free
  4872  09B8' 0900               	iorlw	0
  4873  09BA' B4D8               	btfsc	status,2,c
  4874  09BC' 0012               	return	
  4875                           
  4876                           ;Menu.c: 694:     if(KeyGetSMS()== '#'){
  4877  09BE' EC00' F000'        	call	_KeyGetSMS	;wreg free
  4878  09C2' 0A23               	xorlw	35
  4879  09C4' A4D8               	btfss	status,2,c
  4880  09C6' 0012               	return	
  4881                           
  4882                           ;Menu.c: 695:                     option = 0;
  4883  09C8' 6A00'              	clrf	_option^0,c
  4884                           
  4885                           ;Menu.c: 696:                     LcClear();
  4886  09CA' EC00' F000'        	call	_LcClear	;wreg free
  4887                           
  4888                           ;Menu.c: 697:                     pointer = 0;
  4889                           
  4890                           ;Menu.c: 698:                     LcGotoXY(0,0);
  4891  09CE' DB0C               	call	PL70	;call to abstracted procedure
  4892  09D0' EC00' F000'        	call	_LcGotoXY
  4893  09D4'                    l7086:
  4894                           
  4895                           ;Menu.c: 699:                     menuState = 10;
  4896  09D4' 0E0A               	movlw	10
  4897  09D6' 6E00'              	movwf	_menuState^0,c
  4898  09D8' 0C0A               	retlw	10
  4899  09DA'                    l7088:
  4900                           
  4901                           ; BSR set to: 1
  4902                           ;Menu.c: 707:             LcPutChar(modifyTimeString[pointer]);
  4903  09DA' 5000'              	movf	_pointer^0,w,c
  4904  09DC' 0F00'              	addlw	low _modifyTimeString@Menu$F576
  4905  09DE' DAF4               	call	PL44	;call to abstracted procedure
  4906  09E0' EC00' F000'        	call	_LcPutChar
  4907                           
  4908                           ;Menu.c: 708:    ++pointer;
  4909  09E4' 2A00'              	incf	_pointer^0,f,c
  4910                           
  4911                           ;Menu.c: 709:    if(pointer == 12){
  4912  09E6' 0E0C               	movlw	12
  4913  09E8' 1800'              	xorwf	_pointer^0,w,c
  4914  09EA' A4D8               	btfss	status,2,c
  4915  09EC' 0012               	return	
  4916                           
  4917                           ;Menu.c: 710:                 LcGotoXY(0,1);
  4918  09EE' DAF5               	call	PL50	;call to abstracted procedure
  4919  09F0' EC00' F000'        	call	_LcGotoXY
  4920                           
  4921                           ;Menu.c: 711:                 keyValue = KeyGetNumber();
  4922  09F4' EC00' F000'        	call	_KeyGetNumber	;wreg free
  4923  09F8' 6E00'              	movwf	_keyValue^0,c
  4924                           
  4925                           ;Menu.c: 712:     pointer=0;
  4926  09FA' 6A00'              	clrf	_pointer^0,c
  4927                           
  4928                           ;Menu.c: 713:                 minutes =0;
  4929  09FC' 6A00'              	clrf	_minutes^0,c
  4930                           
  4931                           ;Menu.c: 714:                 TiResetTics(timerMenu);
  4932  09FE' 5000'              	movf	_timerMenu^0,w,c
  4933  0A00' EC00' F000'        	call	_TiResetTics
  4934                           
  4935                           ;Menu.c: 715:                 aux = 28;
  4936  0A04' 0E1C               	movlw	28
  4937  0A06'                    L8:
  4938  0A06' 6E00'              	movwf	_aux^0,c
  4939                           
  4940                           ;Menu.c: 716:                 menuState = 33;
  4941  0A08' 0E21               	movlw	33
  4942  0A0A' 6E00'              	movwf	_menuState^0,c
  4943  0A0C' 0C21               	retlw	33
  4944  0A0E'                    l7108:
  4945                           
  4946                           ; BSR set to: 1
  4947                           ;Menu.c: 721:             if(isPressed() && TiGetTics(timerMenu)> 24){
  4948  0A0E' EC00' F000'        	call	_isPressed	;wreg free
  4949  0A12' 0900               	iorlw	0
  4950  0A14' B4D8               	btfsc	status,2,c
  4951  0A16' 0012               	return	
  4952  0A18' 5000'              	movf	_timerMenu^0,w,c
  4953  0A1A' EC00' F000'        	call	_TiGetTics
  4954  0A1E' 5000'              	movf	(?_TiGetTics+1)^0,w,c
  4955  0A20' E104               	bnz	u6200
  4956  0A22' 0E19               	movlw	25
  4957  0A24' 5C00'              	subwf	?_TiGetTics^0,w,c
  4958  0A26' A0D8               	btfss	status,0,c
  4959  0A28' 0012               	return	
  4960  0A2A'                    u6200:
  4961                           
  4962                           ;Menu.c: 722:                 TiResetTics(timerMenu);
  4963  0A2A' 5000'              	movf	_timerMenu^0,w,c
  4964  0A2C' EC00' F000'        	call	_TiResetTics
  4965                           
  4966                           ;Menu.c: 723:                 keyValue = KeyGetNumber();
  4967  0A30' EC00' F000'        	call	_KeyGetNumber	;wreg free
  4968                           
  4969                           ;Menu.c: 724:                 LcPutChar(keyValue + '0');
  4970  0A34' DAF1               	call	PL96	;call to abstracted procedure
  4971  0A36' EC00' F000'        	call	_LcPutChar
  4972                           
  4973                           ;Menu.c: 725:                 minutes = keyValue*10;
  4974  0A3A' 5000'              	movf	_keyValue^0,w,c
  4975  0A3C' 0D0A               	mullw	10
  4976  0A3E' CFF3 F043'         	movff	prodl,_minutes
  4977                           
  4978                           ;Menu.c: 726:                 aux = 29;
  4979  0A42' 0E1D               	movlw	29
  4980  0A44' D7E0               	goto	L8
  4981  0A46'                    l7124:
  4982                           
  4983                           ; BSR set to: 1
  4984                           ;Menu.c: 732:             if(KeyGetValue() && TiGetTics(timerMenu)> 24){
  4985  0A46' EC00' F000'        	call	_KeyGetValue	;wreg free
  4986  0A4A' 0900               	iorlw	0
  4987  0A4C' B4D8               	btfsc	status,2,c
  4988  0A4E' 0012               	return	
  4989  0A50' 5000'              	movf	_timerMenu^0,w,c
  4990  0A52' EC00' F000'        	call	_TiGetTics
  4991  0A56' 5000'              	movf	(?_TiGetTics+1)^0,w,c
  4992  0A58' E104               	bnz	u6220
  4993  0A5A' 0E19               	movlw	25
  4994  0A5C' 5C00'              	subwf	?_TiGetTics^0,w,c
  4995  0A5E' A0D8               	btfss	status,0,c
  4996  0A60' 0012               	return	
  4997  0A62'                    u6220:
  4998                           
  4999                           ;Menu.c: 733:                 TiResetTics(timerMenu);
  5000  0A62' 5000'              	movf	_timerMenu^0,w,c
  5001  0A64' EC00' F000'        	call	_TiResetTics
  5002                           
  5003                           ;Menu.c: 734:                 keyValue = KeyGetNumber();
  5004  0A68' EC00' F000'        	call	_KeyGetNumber	;wreg free
  5005  0A6C' 6E00'              	movwf	_keyValue^0,c
  5006                           
  5007                           ;Menu.c: 735:                 minutes += keyValue;
  5008  0A6E' 5000'              	movf	_keyValue^0,w,c
  5009  0A70' 2600'              	addwf	_minutes^0,f,c
  5010                           
  5011                           ;Menu.c: 736:                 LcPutChar(keyValue + '0');
  5012  0A72' 5000'              	movf	_keyValue^0,w,c
  5013  0A74' 0F30               	addlw	48
  5014  0A76' EC00' F000'        	call	_LcPutChar
  5015                           
  5016                           ;Menu.c: 737:                 aux = 30;
  5017  0A7A' 0E1E               	movlw	30
  5018  0A7C' D7C4               	goto	L8
  5019  0A7E'                    l7140:
  5020                           
  5021                           ; BSR set to: 1
  5022                           ;Menu.c: 743:              if(KeyGetValue() && TiGetTics(timerMenu)> 24){
  5023  0A7E' EC00' F000'        	call	_KeyGetValue	;wreg free
  5024  0A82' 0900               	iorlw	0
  5025  0A84' B4D8               	btfsc	status,2,c
  5026  0A86' 0012               	return	
  5027  0A88' 5000'              	movf	_timerMenu^0,w,c
  5028  0A8A' EC00' F000'        	call	_TiGetTics
  5029  0A8E' 5000'              	movf	(?_TiGetTics+1)^0,w,c
  5030  0A90' E104               	bnz	u6240
  5031  0A92' 0E19               	movlw	25
  5032  0A94' 5C00'              	subwf	?_TiGetTics^0,w,c
  5033  0A96' A0D8               	btfss	status,0,c
  5034  0A98' 0012               	return	
  5035  0A9A'                    u6240:
  5036                           
  5037                           ;Menu.c: 744:                 LcPutChar(':');
  5038  0A9A' 0E3A               	movlw	58
  5039  0A9C' EC00' F000'        	call	_LcPutChar
  5040                           
  5041                           ;Menu.c: 745:                 TiResetTics(timerMenu);
  5042  0AA0' 5000'              	movf	_timerMenu^0,w,c
  5043  0AA2' EC00' F000'        	call	_TiResetTics
  5044                           
  5045                           ;Menu.c: 746:                 keyValue = KeyGetNumber();
  5046  0AA6' EC00' F000'        	call	_KeyGetNumber	;wreg free
  5047  0AAA' 6E00'              	movwf	_keyValue^0,c
  5048                           
  5049                           ;Menu.c: 747:                 seconds = keyValue * 10;
  5050  0AAC' 5000'              	movf	_keyValue^0,w,c
  5051  0AAE' 0D0A               	mullw	10
  5052  0AB0' CFF3 F042'         	movff	prodl,_seconds
  5053                           
  5054                           ;Menu.c: 748:                 LcPutChar(keyValue + '0');
  5055  0AB4' 5000'              	movf	_keyValue^0,w,c
  5056  0AB6' 0F30               	addlw	48
  5057  0AB8' EC00' F000'        	call	_LcPutChar
  5058                           
  5059                           ;Menu.c: 749:                 aux = 31;
  5060  0ABC' 0E1F               	movlw	31
  5061  0ABE' D7A3               	goto	L8
  5062  0AC0'                    l7156:
  5063                           
  5064                           ; BSR set to: 1
  5065                           ;Menu.c: 755:              if(KeyGetValue() && TiGetTics(timerMenu)> 24){
  5066  0AC0' EC00' F000'        	call	_KeyGetValue	;wreg free
  5067  0AC4' 0900               	iorlw	0
  5068  0AC6' B4D8               	btfsc	status,2,c
  5069  0AC8' 0012               	return	
  5070  0ACA' 5000'              	movf	_timerMenu^0,w,c
  5071  0ACC' EC00' F000'        	call	_TiGetTics
  5072  0AD0' 5000'              	movf	(?_TiGetTics+1)^0,w,c
  5073  0AD2' E104               	bnz	u6260
  5074  0AD4' 0E19               	movlw	25
  5075  0AD6' 5C00'              	subwf	?_TiGetTics^0,w,c
  5076  0AD8' A0D8               	btfss	status,0,c
  5077  0ADA' 0012               	return	
  5078  0ADC'                    u6260:
  5079                           
  5080                           ;Menu.c: 756:                 TiResetTics(timerMenu);
  5081  0ADC' 5000'              	movf	_timerMenu^0,w,c
  5082  0ADE' EC00' F000'        	call	_TiResetTics
  5083                           
  5084                           ;Menu.c: 757:                 keyValue = KeyGetNumber();
  5085  0AE2' EC00' F000'        	call	_KeyGetNumber	;wreg free
  5086  0AE6' 6E00'              	movwf	_keyValue^0,c
  5087                           
  5088                           ;Menu.c: 758:                 seconds += keyValue;
  5089  0AE8' 5000'              	movf	_keyValue^0,w,c
  5090  0AEA' 2600'              	addwf	_seconds^0,f,c
  5091                           
  5092                           ;Menu.c: 759:                 LcPutChar(keyValue + '0');
  5093  0AEC' 5000'              	movf	_keyValue^0,w,c
  5094  0AEE' 0F30               	addlw	48
  5095  0AF0' EC00' F000'        	call	_LcPutChar
  5096                           
  5097                           ;Menu.c: 760:                 aux = 32;
  5098  0AF4' 0E20               	movlw	32
  5099  0AF6' D787               	goto	L8
  5100  0AF8'                    l472:
  5101                           
  5102                           ; BSR set to: 1
  5103                           ;Menu.c: 766:             if(!((PORTBbits.RB1) && (PORTBbits.RB2) && (PORTBbits.RB3))==1
      +                          )
  5104  0AF8' B281               	btfsc	129,1,c	;volatile
  5105                           
  5106                           ; BSR set to: 1
  5107  0AFA' A481               	btfss	129,2,c	;volatile
  5108  0AFC' D002               	goto	u6290
  5109                           
  5110                           ; BSR set to: 1
  5111  0AFE' B681               	btfsc	129,3,c	;volatile
  5112  0B00' 0012               	return	
  5113  0B02'                    u6290:
  5114                           
  5115                           ; BSR set to: 1
  5116                           ;Menu.c: 767:                 if(KeyGetSMS()=='#'){
  5117  0B02' EC00' F000'        	call	_KeyGetSMS	;wreg free
  5118  0B06' 0A23               	xorlw	35
  5119  0B08' A4D8               	btfss	status,2,c
  5120  0B0A' 0012               	return	
  5121                           
  5122                           ;Menu.c: 768:                     LcClear();
  5123  0B0C' EC00' F000'        	call	_LcClear	;wreg free
  5124                           
  5125                           ;Menu.c: 769:                     LcGotoXY(0,0);
  5126  0B10' 0E00               	movlw	0
  5127  0B12' 6A00'              	clrf	LcGotoXY@Row^0,c
  5128  0B14' EC00' F000'        	call	_LcGotoXY
  5129                           
  5130                           ;Menu.c: 770:                     option = 0;
  5131  0B18' 6A00'              	clrf	_option^0,c
  5132                           
  5133                           ;Menu.c: 771:                     pointer = 0;
  5134  0B1A' 6A00'              	clrf	_pointer^0,c
  5135  0B1C' D75B               	goto	l7086
  5136  0B1E'                    l7186:
  5137                           
  5138                           ; BSR set to: 1
  5139                           ;Menu.c: 777:             if(TiGetTics(timerMenu)>24 && !((PORTBbits.RB1) && (PORTBbits.
      +                          RB2) && (PORTBbits.RB3))==0){
  5140  0B1E' 5000'              	movf	_timerMenu^0,w,c
  5141  0B20' EC00' F000'        	call	_TiGetTics
  5142  0B24' 5000'              	movf	(?_TiGetTics+1)^0,w,c
  5143  0B26' E104               	bnz	u6310
  5144  0B28' 0E19               	movlw	25
  5145  0B2A' 5C00'              	subwf	?_TiGetTics^0,w,c
  5146  0B2C' A0D8               	btfss	status,0,c
  5147  0B2E' 0012               	return	
  5148  0B30'                    u6310:
  5149  0B30' B281               	btfsc	129,1,c	;volatile
  5150  0B32' A481               	btfss	129,2,c	;volatile
  5151  0B34' 0012               	return	
  5152  0B36' A681               	btfss	129,3,c	;volatile
  5153  0B38' 0012               	return	
  5154                           
  5155                           ;Menu.c: 778:                 menuState = aux;
  5156  0B3A' C03E' F04B'        	movff	_aux,_menuState
  5157  0B3E' EF00' F000'        	goto	l6476
  5158  0B42'                    l7198:
  5159                           
  5160                           ; BSR set to: 1
  5161                           ;Menu.c: 785:             if(aux < 2){
  5162  0B42' 0E02               	movlw	2
  5163  0B44' 6000'              	cpfslt	_aux^0,c
  5164  0B46' D00F               	goto	l7212
  5165                           
  5166                           ; BSR set to: 1
  5167                           ;Menu.c: 786:                 LcPutChar(byeString[pointer]);
  5168  0B48' 5000'              	movf	_pointer^0,w,c
  5169  0B4A' 0F00'              	addlw	low _byeString@Menu$F577
  5170  0B4C' DA3D               	call	PL44	;call to abstracted procedure
  5171  0B4E' EC00' F000'        	call	_LcPutChar
  5172                           
  5173                           ;Menu.c: 787:                 ++pointer;
  5174  0B52' 2A00'              	incf	_pointer^0,f,c
  5175                           
  5176                           ;Menu.c: 788:                 if(pointer == 3){
  5177  0B54' 0E03               	movlw	3
  5178  0B56' 1800'              	xorwf	_pointer^0,w,c
  5179  0B58' A4D8               	btfss	status,2,c
  5180  0B5A' 0012               	return	
  5181                           
  5182                           ;Menu.c: 789:                     ++aux;
  5183  0B5C' 2A00'              	incf	_aux^0,f,c
  5184                           
  5185                           ;Menu.c: 790:                     pointer = 0;
  5186  0B5E' 6A00'              	clrf	_pointer^0,c
  5187                           
  5188                           ;Menu.c: 791:                     LcPutChar(' ');
  5189  0B60' 0E20               	movlw	32
  5190  0B62' EF00' F000'        	goto	_LcPutChar
  5191  0B66'                    l7212:
  5192                           
  5193                           ; BSR set to: 1
  5194                           ;Menu.c: 794:                 TiResetTics(timerMenu);
  5195  0B66' 5000'              	movf	_timerMenu^0,w,c
  5196  0B68' EC00' F000'        	call	_TiResetTics
  5197  0B6C' D5C4               	goto	u5890
  5198  0B6E'                    l7218:
  5199                           
  5200                           ; BSR set to: 1
  5201                           ;Menu.c: 802:             LcPutChar(users[pointerUser].username[pointer]);
  5202  0B6E' D9DB               	call	PL12	;call to abstracted procedure
  5203  0B70' D99D               	call	PL2	;call to abstracted procedure
  5204  0B72' 50DF               	movf	indf2,w,c
  5205  0B74' EC00' F000'        	call	_LcPutChar
  5206                           
  5207                           ;Menu.c: 803:             ++pointer;
  5208  0B78' 2A00'              	incf	_pointer^0,f,c
  5209                           
  5210                           ;Menu.c: 804:             if(users[pointerUser].username[pointer] == '\0'){
  5211  0B7A' 5000'              	movf	_pointerUser^0,w,c
  5212  0B7C' D9FD               	call	PL24	;call to abstracted procedure
  5213  0B7E' D996               	call	PL2	;call to abstracted procedure
  5214  0B80' 50DF               	movf	indf2,w,c
  5215  0B82' E102 EF00' F000'   	bz	l6324
  5216  0B88' 0012               	return	
  5217  0B8A'                    l7226:
  5218                           
  5219                           ; BSR set to: 1
  5220                           ;Menu.c: 810:             if(TiGetTics(timerMenu)> 2*1200){
  5221  0B8A' 5000'              	movf	_timerMenu^0,w,c
  5222  0B8C' EC00' F000'        	call	_TiGetTics
  5223  0B90' 0E61               	movlw	97
  5224  0B92' 5C00'              	subwf	?_TiGetTics^0,w,c
  5225  0B94' 0E09               	movlw	9
  5226  0B96' 5800'              	subwfb	(?_TiGetTics+1)^0,w,c
  5227  0B98' A0D8               	btfss	status,0,c
  5228  0B9A' 0012               	return	
  5229                           
  5230                           ;Menu.c: 811:                 pointer = 0;
  5231  0B9C' 6A00'              	clrf	_pointer^0,c
  5232                           
  5233                           ;Menu.c: 812:                 minutes=30;
  5234                           
  5235                           ;Menu.c: 813:                 seconds=0;
  5236                           
  5237                           ;Menu.c: 814:                 gameON = 0;
  5238  0B9E' DA27               	call	PL82	;call to abstracted procedure
  5239                           
  5240                           ;Menu.c: 815:                 LcClear();
  5241  0BA0' EC00' F000'        	call	_LcClear	;wreg free
  5242                           
  5243                           ;Menu.c: 816:                 LcCursorOn();
  5244  0BA4' EC00' F000'        	call	_LcCursorOn	;wreg free
  5245                           
  5246                           ;Menu.c: 818:                 maxScore = 0;
  5247  0BA8' 0E00               	movlw	0
  5248  0BAA' 6A00'              	clrf	LcGotoXY@Row^0,c
  5249  0BAC' EC00' F000'        	call	_LcGotoXY
  5250                           
  5251                           ;Menu.c: 819:                 option=0;
  5252  0BB0' 6A00'              	clrf	_option^0,c
  5253                           
  5254                           ;Menu.c: 820:                 menuState = 0;
  5255  0BB2' 6A00'              	clrf	_menuState^0,c
  5256  0BB4' 0012               	return	
  5257  0BB6'                    l7246:
  5258                           
  5259                           ; BSR set to: 1
  5260                           ;Menu.c: 827:             LcPutChar(currentTimeString[pointer]);
  5261  0BB6' 5000'              	movf	_pointer^0,w,c
  5262  0BB8' 0F00'              	addlw	low _currentTimeString@Menu$F578
  5263  0BBA' DA06               	call	PL44	;call to abstracted procedure
  5264  0BBC' EC00' F000'        	call	_LcPutChar
  5265                           
  5266                           ;Menu.c: 828:             ++pointer;
  5267  0BC0' 2A00'              	incf	_pointer^0,f,c
  5268                           
  5269                           ;Menu.c: 829:             if(pointer == 13){
  5270  0BC2' 0E0D               	movlw	13
  5271  0BC4' 1800'              	xorwf	_pointer^0,w,c
  5272  0BC6' A4D8               	btfss	status,2,c
  5273  0BC8' 0012               	return	
  5274                           
  5275                           ;Menu.c: 830:                 showTimerPic();
  5276  0BCA' EC00' F000'        	call	_showTimerPic	;wreg free
  5277                           
  5278                           ;Menu.c: 831:                 ++menuState;
  5279  0BCE' 2A00'              	incf	_menuState^0,f,c
  5280                           
  5281                           ;Menu.c: 832:                 TiResetTics(timerMenu);
  5282  0BD0' 5000'              	movf	_timerMenu^0,w,c
  5283  0BD2' EC00' F000'        	call	_TiResetTics
  5284  0BD6' EF00' F000'        	goto	_KeyResetValue
  5285  0BDA'                    l7260:
  5286                           
  5287                           ; BSR set to: 1
  5288                           ;Menu.c: 838:             if(isPressed() && TiGetTics(timerMenu)> 1200){
  5289  0BDA' EC00' F000'        	call	_isPressed	;wreg free
  5290  0BDE' 0900               	iorlw	0
  5291  0BE0' B4D8               	btfsc	status,2,c
  5292  0BE2' 0012               	return	
  5293  0BE4' 5000'              	movf	_timerMenu^0,w,c
  5294  0BE6' EC00' F000'        	call	_TiGetTics
  5295  0BEA' D9F2               	call	PL46	;call to abstracted procedure
  5296  0BEC' A0D8               	btfss	status,0,c
  5297  0BEE' 0012               	return	
  5298                           
  5299                           ;Menu.c: 839:     if(KeyGetSMS()== '#'){
  5300  0BF0' EC00' F000'        	call	_KeyGetSMS	;wreg free
  5301  0BF4' 0A23               	xorlw	35
  5302  0BF6' A4D8               	btfss	status,2,c
  5303  0BF8' 0012               	return	
  5304                           
  5305                           ;Menu.c: 840:                     stopTimerPic();
  5306  0BFA' EC00' F000'        	call	_stopTimerPic	;wreg free
  5307                           
  5308                           ;Menu.c: 841:                     option = 0;
  5309  0BFE' 6A00'              	clrf	_option^0,c
  5310                           
  5311                           ;Menu.c: 842:                     LcClear();
  5312  0C00' EC00' F000'        	call	_LcClear	;wreg free
  5313                           
  5314                           ;Menu.c: 843:                     pointer = 0;
  5315                           
  5316                           ;Menu.c: 844:                     LcGotoXY(0,0);
  5317  0C04' D9F1               	call	PL70	;call to abstracted procedure
  5318  0C06' EC00' F000'        	call	_LcGotoXY
  5319  0C0A' D6E4               	goto	l7086
  5320  0C0C'                    l7278:
  5321                           
  5322                           ; BSR set to: 1
  5323                           ;Menu.c: 852:             KeyResetValue();
  5324  0C0C' EC00' F000'        	call	_KeyResetValue	;wreg free
  5325                           
  5326                           ;Menu.c: 853:             if(numScores == 0) menuState = 10;
  5327  0C10' 5000'              	movf	_numScores@Data$F582^0,w,c
  5328  0C12' E101 D6DF          	bz	l7086
  5329                           
  5330                           ;Menu.c: 855:                 aux =0;
  5331                           
  5332                           ;Menu.c: 854:             else{
  5333  0C16' 6A00'              	clrf	_aux^0,c
  5334                           
  5335                           ;Menu.c: 856:                 ++menuState;
  5336  0C18' 2A00'              	incf	_menuState^0,f,c
  5337  0C1A'                    l7286:
  5338                           
  5339                           ;Menu.c: 857:                 LcGotoXY(0,0);
  5340  0C1A' 0E00               	movlw	0
  5341  0C1C' 6A00'              	clrf	LcGotoXY@Row^0,c
  5342  0C1E' EF00' F000'        	goto	_LcGotoXY
  5343  0C22'                    l7288:
  5344                           
  5345                           ; BSR set to: 1
  5346                           ;Menu.c: 862:             if(users[topScores[aux].user].username[pointer] != '\0'){
  5347  0C22' D971               	call	PL8	;call to abstracted procedure
  5348  0C24' D943               	call	PL2	;call to abstracted procedure
  5349  0C26' 50DF               	movf	indf2,w,c
  5350  0C28' E007               	bz	l7294
  5351                           
  5352                           ; BSR set to: 1
  5353                           ;Menu.c: 863:                 LcPutChar(users[topScores[aux].user].username[pointer]);
  5354  0C2A' D96D               	call	PL8	;call to abstracted procedure
  5355  0C2C' D93F               	call	PL2	;call to abstracted procedure
  5356  0C2E' 50DF               	movf	indf2,w,c
  5357  0C30' EC00' F000'        	call	_LcPutChar
  5358  0C34' EF00' F000'        	goto	l6508
  5359  0C38'                    l7294:
  5360                           
  5361                           ; BSR set to: 1
  5362                           ;Menu.c: 866:                 LcPutChar(':');
  5363  0C38' 0E3A               	movlw	58
  5364  0C3A' EC00' F000'        	call	_LcPutChar
  5365                           
  5366                           ;Menu.c: 867:                 LcGotoXY(0,1);
  5367  0C3E' D9CD               	call	PL50	;call to abstracted procedure
  5368  0C40' EC00' F000'        	call	_LcGotoXY
  5369                           
  5370                           ;Menu.c: 868:                 LcPutScore(topScores[aux].score);
  5371  0C44' 5000'              	movf	_aux^0,w,c
  5372  0C46' D992               	call	PL22	;call to abstracted procedure
  5373  0C48' 50DF               	movf	indf2,w,c
  5374  0C4A' EC00' F000'        	call	_LcPutScore
  5375                           
  5376                           ;Menu.c: 869:                 LcGotoXY(16,0);
  5377  0C4E' 6A00'              	clrf	LcGotoXY@Row^0,c
  5378  0C50' 0E10               	movlw	16
  5379  0C52' EC00' F000'        	call	_LcGotoXY
  5380                           
  5381                           ;Menu.c: 870:                 ++aux;
  5382  0C56' 2A00'              	incf	_aux^0,f,c
  5383                           
  5384                           ;Menu.c: 871:                 if(numScores == aux) aux = 0;
  5385  0C58' 5000'              	movf	_aux^0,w,c
  5386  0C5A' 1800'              	xorwf	_numScores@Data$F582^0,w,c
  5387  0C5C' E001 D54B          	bnz	u5890
  5388  0C60' 6A00'              	clrf	_aux^0,c
  5389  0C62' D549               	goto	u5890
  5390  0C64'                    l7306:
  5391                           
  5392                           ; BSR set to: 1
  5393                           ;Menu.c: 879:             if(users[topScores[aux].user].username[pointer] != '\0'){
  5394  0C64' D950               	call	PL8	;call to abstracted procedure
  5395  0C66' D922               	call	PL2	;call to abstracted procedure
  5396  0C68' 50DF               	movf	indf2,w,c
  5397  0C6A' E007               	bz	l7312
  5398                           
  5399                           ; BSR set to: 1
  5400                           ;Menu.c: 880:                 LcPutChar(users[topScores[aux].user].username[pointer]);
  5401  0C6C' D94C               	call	PL8	;call to abstracted procedure
  5402  0C6E' D91E               	call	PL2	;call to abstracted procedure
  5403  0C70' 50DF               	movf	indf2,w,c
  5404  0C72' EC00' F000'        	call	_LcPutChar
  5405  0C76' EF00' F000'        	goto	l6508
  5406  0C7A'                    l7312:
  5407                           
  5408                           ; BSR set to: 1
  5409                           ;Menu.c: 883:                 LcPutChar(':');
  5410  0C7A' 0E3A               	movlw	58
  5411  0C7C' EC00' F000'        	call	_LcPutChar
  5412                           
  5413                           ;Menu.c: 884:                 LcGotoXY(16,1);
  5414  0C80' 0E01               	movlw	1
  5415  0C82' 6E00'              	movwf	LcGotoXY@Row^0,c
  5416  0C84' 0E10               	movlw	16
  5417  0C86' EC00' F000'        	call	_LcGotoXY
  5418                           
  5419                           ;Menu.c: 885:                 LcPutScore(topScores[aux].score);
  5420  0C8A' 5000'              	movf	_aux^0,w,c
  5421  0C8C' D96F               	call	PL22	;call to abstracted procedure
  5422  0C8E' 50DF               	movf	indf2,w,c
  5423  0C90' EC00' F000'        	call	_LcPutScore
  5424                           
  5425                           ;Menu.c: 886:                 ++menuState;
  5426  0C94' 2A00'              	incf	_menuState^0,f,c
  5427                           
  5428                           ;Menu.c: 887:                 TiResetTics(timerMenu);
  5429  0C96' 5000'              	movf	_timerMenu^0,w,c
  5430  0C98' EC00' F000'        	call	_TiResetTics
  5431  0C9C' EF00' F000'        	goto	l310
  5432  0CA0'                    l7320:
  5433                           
  5434                           ; BSR set to: 1
  5435                           ;Menu.c: 894:             if (TiGetTics(timerMenu) > 1200){
  5436  0CA0' 5000'              	movf	_timerMenu^0,w,c
  5437  0CA2' EC00' F000'        	call	_TiGetTics
  5438  0CA6' D994               	call	PL46	;call to abstracted procedure
  5439  0CA8' E315               	bnc	l7340
  5440                           
  5441                           ;Menu.c: 895:                 LcScroll();
  5442  0CAA' EC00' F000'        	call	_LcScroll	;wreg free
  5443                           
  5444                           ;Menu.c: 896:                 TiResetTics(timerMenu);
  5445  0CAE' 5000'              	movf	_timerMenu^0,w,c
  5446  0CB0' EC00' F000'        	call	_TiResetTics
  5447                           
  5448                           ;Menu.c: 897:                 ++pointerMarquee;
  5449  0CB4' 2A00'              	incf	_pointerMarquee^0,f,c
  5450                           
  5451                           ;Menu.c: 898:                 if(pointerMarquee == 16){
  5452  0CB6' 0E10               	movlw	16
  5453  0CB8' 1800'              	xorwf	_pointerMarquee^0,w,c
  5454  0CBA' A4D8               	btfss	status,2,c
  5455  0CBC' 0012               	return	
  5456                           
  5457                           ;Menu.c: 899:                     LcClear();
  5458  0CBE' EC00' F000'        	call	_LcClear	;wreg free
  5459                           
  5460                           ;Menu.c: 900:                     pointer = 0;
  5461  0CC2' 6A00'              	clrf	_pointer^0,c
  5462                           
  5463                           ;Menu.c: 901:                     menuState = 49;
  5464  0CC4' 0E31               	movlw	49
  5465  0CC6' 6E00'              	movwf	_menuState^0,c
  5466                           
  5467                           ;Menu.c: 902:                     LcGotoXY(0,0);
  5468  0CC8' 0E00               	movlw	0
  5469  0CCA' 6A00'              	clrf	LcGotoXY@Row^0,c
  5470  0CCC' EC00' F000'        	call	_LcGotoXY
  5471                           
  5472                           ;Menu.c: 903:                     pointerMarquee=0;
  5473  0CD0' 6A00'              	clrf	_pointerMarquee^0,c
  5474  0CD2' 0012               	return	
  5475  0CD4'                    l7340:
  5476  0CD4' EC00' F000'        	call	_isPressed	;wreg free
  5477  0CD8' 0900               	iorlw	0
  5478  0CDA' B4D8               	btfsc	status,2,c
  5479  0CDC' 0012               	return	
  5480                           
  5481                           ;Menu.c: 908:                 if(KeyGetSMS()== '#'){
  5482  0CDE' EC00' F000'        	call	_KeyGetSMS	;wreg free
  5483  0CE2' 0A23               	xorlw	35
  5484  0CE4' A4D8               	btfss	status,2,c
  5485  0CE6' 0012               	return	
  5486                           
  5487                           ;Menu.c: 909:                     option = 0;
  5488  0CE8' 6A00'              	clrf	_option^0,c
  5489                           
  5490                           ;Menu.c: 910:                     LcClear();
  5491  0CEA' EC00' F000'        	call	_LcClear	;wreg free
  5492                           
  5493                           ;Menu.c: 911:                     pointer = 0;
  5494                           
  5495                           ;Menu.c: 912:                     LcGotoXY(0,0);
  5496  0CEE' D97C               	call	PL70	;call to abstracted procedure
  5497  0CF0' EC00' F000'        	call	_LcGotoXY
  5498  0CF4' D66F               	goto	l7086
  5499  0CF6'                    l7354:
  5500  0CF6' 5000'              	movf	_menuState^0,w,c
  5501  0CF8' 0101               	movlb	1	; () banked
  5502  0CFA' 6F00'              	movwf	??_menuMotor& (0+255),b
  5503  0CFC' 6B00'              	clrf	(??_menuMotor+1)& (0+255),b
  5504                           
  5505                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5506                           ; Switch size 1, requested type "space"
  5507                           ; Number of cases is 1, Range of values is 0 to 0
  5508                           ; switch strategies available:
  5509                           ; Name         Instructions Cycles
  5510                           ; simple_byte            4     3 (average)
  5511                           ;	Chosen strategy is simple_byte
  5512  0CFE' 5100'              	movf	(??_menuMotor+1)& (0+255),w,b
  5513  0D00' A4D8               	btfss	status,2,c
  5514  0D02' 0012               	return	
  5515                           
  5516                           ; BSR set to: 1
  5517                           ; Switch size 1, requested type "space"
  5518                           ; Number of cases is 62, Range of values is 0 to 111
  5519                           ; switch strategies available:
  5520                           ; Name         Instructions Cycles
  5521                           ; simple_byte          187    94 (average)
  5522                           ;	Chosen strategy is simple_byte
  5523  0D04' 5100'              	movf	??_menuMotor& (0+255),w,b
  5524  0D06' E102 EF00' F000'   	bz	l6362
  5525  0D0C' 0A01               	xorlw	1	; case 1
  5526  0D0E' E102 EF00' F000'   	bz	l6374
  5527  0D14' 0A03               	xorlw	3	; case 2
  5528  0D16' E102 EF00' F000'   	bz	l6384
  5529  0D1C' 0A01               	xorlw	1	; case 3
  5530  0D1E' E102 EF00' F000'   	bz	l6402
  5531  0D24' 0A07               	xorlw	7	; case 4
  5532  0D26' E102 EF00' F000'   	bz	l6416
  5533  0D2C' 0A01               	xorlw	1	; case 5
  5534  0D2E' E102 EF00' F000'   	bz	l6444
  5535  0D34' 0A03               	xorlw	3	; case 6
  5536  0D36' E102 EF00' F000'   	bz	l6460
  5537  0D3C' 0A01               	xorlw	1	; case 7
  5538  0D3E' E102 EF00' F000'   	bz	l6490
  5539  0D44' 0A0F               	xorlw	15	; case 8
  5540  0D46' E102 EF00' F000'   	bz	l6514
  5541  0D4C' 0A01               	xorlw	1	; case 9
  5542  0D4E' E102 EF00' F000'   	bz	l6534
  5543  0D54' 0A03               	xorlw	3	; case 10
  5544  0D56' E102 EF00' F000'   	bz	l6612
  5545  0D5C' 0A01               	xorlw	1	; case 11
  5546  0D5E' E102 EF00' F000'   	bz	l6640
  5547  0D64' 0A07               	xorlw	7	; case 12
  5548  0D66' E102 EF00' F000'   	bz	l6718
  5549  0D6C' 0A01               	xorlw	1	; case 13
  5550  0D6E' E101 D488          	bz	l6832
  5551  0D72' 0A03               	xorlw	3	; case 14
  5552  0D74' E101 D4A0          	bz	l6846
  5553  0D78' 0A01               	xorlw	1	; case 15
  5554  0D7A' E101 D4B2          	bz	l6860
  5555  0D7E' 0A1F               	xorlw	31	; case 16
  5556  0D80' E101 D4BB          	bz	l6870
  5557  0D84' 0A01               	xorlw	1	; case 17
  5558  0D86' E101 D517          	bz	l6910
  5559  0D8A' 0A03               	xorlw	3	; case 18
  5560  0D8C' E101 D546          	bz	l6944
  5561  0D90' 0A01               	xorlw	1	; case 19
  5562  0D92' E101 D553          	bz	l6956
  5563  0D96' 0A07               	xorlw	7	; case 20
  5564  0D98' E101 D55F          	bz	l6966
  5565  0D9C' 0A01               	xorlw	1	; case 21
  5566  0D9E' E101 D5B6          	bz	l7020
  5567  0DA2' 0A03               	xorlw	3	; case 22
  5568  0DA4' E101 D5C4          	bz	l7032
  5569  0DA8' 0A01               	xorlw	1	; case 23
  5570  0DAA' E101 D5D8          	bz	l7050
  5571  0DAE' 0A0F               	xorlw	15	; case 24
  5572  0DB0' E101 D5E3          	bz	l7060
  5573  0DB4' 0A01               	xorlw	1	; case 25
  5574  0DB6' E101 D5EE          	bz	l7066
  5575  0DBA' 0A03               	xorlw	3	; case 26
  5576  0DBC' E101 D5FA          	bz	l7076
  5577  0DC0' 0A01               	xorlw	1	; case 27
  5578  0DC2' E101 D60A          	bz	l7088
  5579  0DC6' 0A07               	xorlw	7	; case 28
  5580  0DC8' E101 D621          	bz	l7108
  5581  0DCC' 0A01               	xorlw	1	; case 29
  5582  0DCE' E101 D63A          	bz	l7124
  5583  0DD2' 0A03               	xorlw	3	; case 30
  5584  0DD4' E101 D653          	bz	l7140
  5585  0DD8' 0A01               	xorlw	1	; case 31
  5586  0DDA' E101 D671          	bz	l7156
  5587  0DDE' 0A3F               	xorlw	63	; case 32
  5588  0DE0' E101 D68A          	bz	l472
  5589  0DE4' 0A01               	xorlw	1	; case 33
  5590  0DE6' E101 D69A          	bz	l7186
  5591  0DEA' 0A03               	xorlw	3	; case 34
  5592  0DEC' E101 D551          	bz	l6986
  5593  0DF0' 0A01               	xorlw	1	; case 35
  5594  0DF2' E101 D6A6          	bz	l7198
  5595  0DF6' 0A07               	xorlw	7	; case 36
  5596  0DF8' E101 D6B9          	bz	l7218
  5597  0DFC' 0A01               	xorlw	1	; case 37
  5598  0DFE' E101 D6C4          	bz	l7226
  5599  0E02' 0A02               	xorlw	2	; case 39
  5600  0E04' E101 D48C          	bz	l6874
  5601  0E08' 0A0F               	xorlw	15	; case 40
  5602  0E0A' E101 D497          	bz	l6880
  5603  0E0E' 0A01               	xorlw	1	; case 41
  5604  0E10' E101 D4A2          	bz	l6886
  5605  0E14' 0A03               	xorlw	3	; case 42
  5606  0E16' E101 D4A8          	bz	l6892
  5607  0E1A' 0A01               	xorlw	1	; case 43
  5608  0E1C' E101 D4B3          	bz	l6898
  5609  0E20' 0A07               	xorlw	7	; case 44
  5610  0E22' E101 D4BE          	bz	l6904
  5611  0E26' 0A01               	xorlw	1	; case 45
  5612  0E28' E101 D6C5          	bz	l7246
  5613  0E2C' 0A03               	xorlw	3	; case 46
  5614  0E2E' E101 D6D4          	bz	l7260
  5615  0E32' 0A1E               	xorlw	30	; case 48
  5616  0E34' E101 D6EA          	bz	l7278
  5617  0E38' 0A01               	xorlw	1	; case 49
  5618  0E3A' E101 D6F2          	bz	l7288
  5619  0E3E' 0A03               	xorlw	3	; case 50
  5620  0E40' E101 D710          	bz	l7306
  5621  0E44' 0A01               	xorlw	1	; case 51
  5622  0E46' E101 D72B          	bz	l7320
  5623  0E4A' 0A07               	xorlw	7	; case 52
  5624  0E4C' E102 EF00' F000'   	bz	l6558
  5625  0E52' 0A01               	xorlw	1	; case 53
  5626  0E54' E102 EF00' F000'   	bz	l6572
  5627  0E5A' 0A03               	xorlw	3	; case 54
  5628  0E5C' E102 EF00' F000'   	bz	l6576
  5629  0E62' 0A01               	xorlw	1	; case 55
  5630  0E64' E102 EF00' F000'   	bz	l6594
  5631  0E6A' 0A0F               	xorlw	15	; case 56
  5632  0E6C' E102 EF00' F000'   	bz	l6598
  5633  0E72' 0A5C               	xorlw	92	; case 100
  5634  0E74' E102 EF00' F000'   	bz	l6318
  5635  0E7A' 0A01               	xorlw	1	; case 101
  5636  0E7C' E102 EF00' F000'   	bz	l6326
  5637  0E82' 0A03               	xorlw	3	; case 102
  5638  0E84' E102 EF00' F000'   	bz	l6338
  5639  0E8A' 0A01               	xorlw	1	; case 103
  5640  0E8C' E102 EF00' F000'   	bz	l6346
  5641  0E92' 0A0F               	xorlw	15	; case 104
  5642  0E94' E102 EF00' F000'   	bz	l6354
  5643  0E9A' 0A06               	xorlw	6	; case 110
  5644  0E9C' E102 EF00' F000'   	bz	l6670
  5645  0EA2' 0A01               	xorlw	1	; case 111
  5646  0EA4' E102 EF00' F000'   	bz	l6684
  5647  0EAA' 0012               	return		;funcret
  5648  0EAC'                    __end_of_menuMotor:
  5649                           	callstack 0
  5650  0EAC'                    PL2:
  5651                           	callstack 23
  5652  0EAC' 6F00'              	movwf	??_menuMotor& (0+255),b
  5653  0EAE' 0E00'              	movlw	high _users
  5654  0EB0' 6F00'              	movwf	(??_menuMotor+1)& (0+255),b
  5655  0EB2' 50F3               	movf	243,w,c
  5656  0EB4' 2700'              	addwf	??_menuMotor& (0+255),f,b
  5657  0EB6' 50F4               	movf	244,w,c
  5658  0EB8' 2300'              	addwfc	(??_menuMotor+1)& (0+255),f,b
  5659  0EBA' 5000'              	movf	_pointer^0,w,c
  5660  0EBC' 2500'              	addwf	??_menuMotor& (0+255),w,b
  5661  0EBE' 6ED9               	movwf	fsr2l,c
  5662  0EC0' 0E00               	movlw	0
  5663  0EC2' 2100'              	addwfc	(??_menuMotor+1)& (0+255),w,b
  5664  0EC4' 6EDA               	movwf	fsr2h,c
  5665  0EC6' 0012               	return	
  5666  0EC8'                    __end_ofPL2:
  5667                           	callstack 0
  5668  0EC8'                    PL4:
  5669                           	callstack 23
  5670  0EC8' 0D12               	mullw	18
  5671  0ECA' 0E00'              	movlw	low _users
  5672  0ECC' 6F00'              	movwf	??_menuMotor& (0+255),b
  5673  0ECE' 0E00'              	movlw	high _users
  5674  0ED0' 6F00'              	movwf	(??_menuMotor+1)& (0+255),b
  5675  0ED2' 0E09               	movlw	9
  5676  0ED4' 2700'              	addwf	??_menuMotor& (0+255),f,b
  5677  0ED6' 0E00               	movlw	0
  5678  0ED8' 2300'              	addwfc	(??_menuMotor+1)& (0+255),f,b
  5679  0EDA' 50F3               	movf	243,w,c
  5680  0EDC' 2700'              	addwf	??_menuMotor& (0+255),f,b
  5681  0EDE' 50F4               	movf	244,w,c
  5682  0EE0' 2300'              	addwfc	(??_menuMotor+1)& (0+255),f,b
  5683  0EE2' 5000'              	movf	_pointer^0,w,c
  5684  0EE4' 2500'              	addwf	??_menuMotor& (0+255),w,b
  5685  0EE6' 6ED9               	movwf	fsr2l,c
  5686  0EE8' 0E00               	movlw	0
  5687  0EEA' 2100'              	addwfc	(??_menuMotor+1)& (0+255),w,b
  5688  0EEC' 6EDA               	movwf	fsr2h,c
  5689  0EEE' 0012               	return	
  5690  0EF0'                    __end_ofPL4:
  5691                           	callstack 0
  5692  0EF0'                    PL6:
  5693                           	callstack 23
  5694  0EF0' 50F3               	movf	243,w,c
  5695  0EF2' 2700'              	addwf	??_menuMotor& (0+255),f,b
  5696  0EF4' 50F4               	movf	244,w,c
  5697  0EF6' 2300'              	addwfc	(??_menuMotor+1)& (0+255),f,b
  5698  0EF8' 5000'              	movf	_pointer^0,w,c
  5699  0EFA' 2500'              	addwf	??_menuMotor& (0+255),w,b
  5700  0EFC' 6ED9               	movwf	fsr2l,c
  5701  0EFE' 0E00               	movlw	0
  5702  0F00' 2100'              	addwfc	(??_menuMotor+1)& (0+255),w,b
  5703  0F02' 6EDA               	movwf	fsr2h,c
  5704  0F04' 0012               	return	
  5705  0F06'                    __end_ofPL6:
  5706                           	callstack 0
  5707  0F06'                    PL8:
  5708                           	callstack 23
  5709  0F06' 5000'              	movf	_aux^0,w,c
  5710  0F08' 0D02               	mullw	2
  5711  0F0A' 50F3               	movf	243,w,c
  5712  0F0C' 0F00'              	addlw	low (_topScores+1)
  5713  0F0E' 6ED9               	movwf	fsr2l,c
  5714  0F10' 6ADA               	clrf	fsr2h,c
  5715  0F12' 50DF               	movf	indf2,w,c
  5716  0F14' 0D12               	mullw	18
  5717  0F16' 0E00'              	movlw	low _users
  5718  0F18' 0012               	return	
  5719  0F1A'                    __end_ofPL8:
  5720                           	callstack 0
  5721  0F1A'                    PL10:
  5722                           	callstack 23
  5723  0F1A' 0D02               	mullw	2
  5724  0F1C' 50F3               	movf	243,w,c
  5725  0F1E' 0F00'              	addlw	low (_topScores+1)
  5726  0F20' 6ED9               	movwf	fsr2l,c
  5727  0F22' 6ADA               	clrf	fsr2h,c
  5728  0F24' 0012               	return	
  5729  0F26'                    __end_ofPL10:
  5730                           	callstack 0
  5731  0F26'                    PL12:
  5732                           	callstack 23
  5733  0F26' 5000'              	movf	_pointerUser^0,w,c
  5734  0F28' 0D12               	mullw	18
  5735  0F2A' 0E00'              	movlw	low _users
  5736  0F2C' 0012               	return	
  5737  0F2E'                    __end_ofPL12:
  5738                           	callstack 0
  5739  0F2E'                    PL14:
  5740                           	callstack 23
  5741  0F2E' 50F3               	movf	243,w,c
  5742  0F30' 2700'              	addwf	(??_menuMotor+3)& (0+255),f,b
  5743  0F32' 50F4               	movf	244,w,c
  5744  0F34' 2300'              	addwfc	(??_menuMotor+4)& (0+255),f,b
  5745  0F36' 5000'              	movf	_pointer^0,w,c
  5746  0F38' 2500'              	addwf	(??_menuMotor+3)& (0+255),w,b
  5747  0F3A' 6EE1               	movwf	fsr1l,c
  5748  0F3C' 0E00               	movlw	0
  5749  0F3E' 2100'              	addwfc	(??_menuMotor+4)& (0+255),w,b
  5750  0F40' 6EE2               	movwf	fsr1h,c
  5751  0F42' 50DE               	movf	postinc2,w,c
  5752  0F44' 18E6               	xorwf	postinc1,w,c
  5753  0F46' 0012               	return	
  5754  0F48'                    __end_ofPL14:
  5755                           	callstack 0
  5756  0F48'                    PL16:
  5757                           	callstack 23
  5758  0F48' 6F00'              	movwf	??_menuMotor& (0+255),b
  5759  0F4A' 0E00'              	movlw	high _users
  5760  0F4C' 6F00'              	movwf	(??_menuMotor+1)& (0+255),b
  5761  0F4E' 0E09               	movlw	9
  5762  0F50' 2700'              	addwf	??_menuMotor& (0+255),f,b
  5763  0F52' 0E00               	movlw	0
  5764  0F54' 2300'              	addwfc	(??_menuMotor+1)& (0+255),f,b
  5765  0F56' 0C00               	retlw	0
  5766  0F58'                    __end_ofPL16:
  5767                           	callstack 0
  5768  0F58'                    PL18:
  5769                           	callstack 23
  5770  0F58' 0D12               	mullw	18
  5771  0F5A' 0E00'              	movlw	low _users
  5772  0F5C' 6F00'              	movwf	(??_menuMotor+3)& (0+255),b
  5773  0F5E' 0E00'              	movlw	high _users
  5774  0F60' 6F00'              	movwf	(??_menuMotor+4)& (0+255),b
  5775  0F62' 0012               	return	
  5776  0F64'                    __end_ofPL18:
  5777                           	callstack 0
  5778  0F64'                    PL20:
  5779                           	callstack 23
  5780  0F64' 5000'              	movf	_numUsers@Data$F581^0,w,c
  5781  0F66' 0D12               	mullw	18
  5782  0F68' 0E00'              	movlw	low _users
  5783  0F6A' 0012               	return	
  5784  0F6C'                    __end_ofPL20:
  5785                           	callstack 0
  5786  0F6C'                    PL22:
  5787                           	callstack 28
  5788  0F6C' 0D02               	mullw	2
  5789  0F6E' 50F3               	movf	243,w,c
  5790  0F70' 0F00'              	addlw	low _topScores
  5791  0F72' 6ED9               	movwf	fsr2l,c
  5792  0F74' 6ADA               	clrf	fsr2h,c
  5793  0F76' 0012               	return	
  5794  0F78'                    __end_ofPL22:
  5795                           	callstack 0
  5796  0F78'                    PL24:
  5797                           	callstack 23
  5798  0F78' 0D12               	mullw	18
  5799  0F7A' 0E00'              	movlw	low _users
  5800  0F7C' 0101               	movlb	1	; () banked
  5801  0F7E' 0012               	return	
  5802  0F80'                    __end_ofPL24:
  5803                           	callstack 0
  5804  0F80'                    PL26:
  5805                           	callstack 23
  5806  0F80' 0E09               	movlw	9
  5807  0F82' 2700'              	addwf	(??_menuMotor+3)& (0+255),f,b
  5808  0F84' 0E00               	movlw	0
  5809  0F86' 2300'              	addwfc	(??_menuMotor+4)& (0+255),f,b
  5810  0F88' 0C00               	retlw	0
  5811  0F8A'                    __end_ofPL26:
  5812                           	callstack 0
  5813  0F8A'                    PL34:
  5814                           	callstack 23
  5815  0F8A' 0D12               	mullw	18
  5816  0F8C' 0E00'              	movlw	low _users
  5817  0F8E' 24F3               	addwf	243,w,c
  5818  0F90' 6ED9               	movwf	fsr2l,c
  5819  0F92' 0E00'              	movlw	high _users
  5820  0F94' 20F4               	addwfc	prodh,w,c
  5821  0F96' 6EDA               	movwf	fsr2h,c
  5822  0F98' 0012               	return	
  5823  0F9A'                    __end_ofPL34:
  5824                           	callstack 0
  5825  0F9A'                    PL36:
  5826                           	callstack 23
  5827  0F9A' 6F00'              	movwf	??_menuMotor& (0+255),b
  5828  0F9C' C000' FFF6         	movff	??_menuMotor,tblptrl
  5829  0FA0'                    	if	1	;There is more than 1 active tblptr byte
  5830  0FA0' 0E00'              	movlw	high __smallconst
  5831  0FA2' 6EF7               	movwf	tblptrh,c
  5832  0FA4'                    	endif
  5833  0FA4'                    	if	0	;tblptru may be non-zero
  5834  0FA4'                    	endif
  5835  0FA4'                    	if	0	;tblptru may be non-zero
  5836  0FA4'                    	endif
  5837  0FA4' 0008               	tblrd		*
  5838  0FA6' 50F5               	movf	tablat,w,c
  5839  0FA8' 0012               	return	
  5840  0FAA'                    __end_ofPL36:
  5841                           	callstack 0
  5842  0FAA'                    PL38:
  5843                           	callstack 23
  5844  0FAA' 6ADA               	clrf	fsr2h,c
  5845  0FAC' 50DF               	movf	indf2,w,c
  5846  0FAE' 2400'              	addwf	_pointer^0,w,c
  5847  0FB0' 0012               	return	
  5848  0FB2'                    __end_ofPL38:
  5849                           	callstack 0
  5850  0FB2'                    PL40:
  5851                           	callstack 23
  5852  0FB2' CFDE F005'         	movff	postinc2,writeEepromScores@score
  5853  0FB6' CFDD F006'         	movff	postdec2,writeEepromScores@score+1
  5854  0FBA' C04A' F007'        	movff	_pointer,writeEepromScores@num
  5855  0FBE' 0012               	return	
  5856  0FC0'                    __end_ofPL40:
  5857                           	callstack 0
  5858  0FC0'                    PL42:
  5859                           	callstack 23
  5860  0FC0' 5000'              	movf	_option^0,w,c
  5861  0FC2' 0F00'              	addlw	low _menuStrings@Menu$F564
  5862  0FC4' 6ED9               	movwf	fsr2l,c
  5863  0FC6' 0012               	return	
  5864  0FC8'                    __end_ofPL42:
  5865                           	callstack 0
  5866  0FC8'                    PL44:
  5867                           	callstack 23
  5868  0FC8' 6ED9               	movwf	fsr2l,c
  5869  0FCA' 6ADA               	clrf	fsr2h,c
  5870  0FCC' 50DF               	movf	indf2,w,c
  5871  0FCE' 0012               	return	
  5872  0FD0'                    __end_ofPL44:
  5873                           	callstack 0
  5874  0FD0'                    PL46:
  5875                           	callstack 26
  5876  0FD0' 0EB1               	movlw	177
  5877  0FD2' 5C00'              	subwf	?_TiGetTics^0,w,c
  5878  0FD4' 0E04               	movlw	4
  5879  0FD6' 5800'              	subwfb	(?_TiGetTics+1)^0,w,c
  5880  0FD8' 0012               	return	
  5881  0FDA'                    __end_ofPL46:
  5882                           	callstack 0
  5883  0FDA'                    PL50:
  5884                           	callstack 23
  5885  0FDA' 0E01               	movlw	1
  5886  0FDC' 6E00'              	movwf	LcGotoXY@Row^0,c
  5887  0FDE' 0C00               	retlw	0
  5888  0FE0'                    __end_ofPL50:
  5889                           	callstack 0
  5890  0FE0'                    PL52:
  5891                           	callstack 23
  5892  0FE0' C03E' FFDF         	movff	_aux,indf2
  5893  0FE4' 5000'              	movf	_pointer^0,w,c
  5894  0FE6' 0012               	return	
  5895  0FE8'                    __end_ofPL52:
  5896                           	callstack 0
  5897  0FE8'                    PL70:
  5898                           	callstack 23
  5899  0FE8' 6A00'              	clrf	_pointer^0,c
  5900  0FEA' 6A00'              	clrf	LcGotoXY@Row^0,c
  5901  0FEC' 0C00               	retlw	0
  5902  0FEE'                    __end_ofPL70:
  5903                           	callstack 0
  5904  0FEE'                    PL82:
  5905                           	callstack 27
  5906  0FEE' 0E1E               	movlw	30
  5907  0FF0' 6E00'              	movwf	_minutes^0,c
  5908  0FF2' 6A00'              	clrf	_seconds^0,c
  5909  0FF4' 6A00'              	clrf	_gameON^0,c
  5910  0FF6' 0012               	return	
  5911  0FF8'                    __end_ofPL82:
  5912                           	callstack 0
  5913  0FF8'                    PL84:
  5914                           	callstack 23
  5915  0FF8' 6A00'              	clrf	LcGotoXY@Row^0,c
  5916  0FFA' 0600'              	decf	_pointer^0,f,c
  5917  0FFC' 5000'              	movf	_pointer^0,w,c
  5918  0FFE' 0F06               	addlw	6
  5919  1000' 0012               	return	
  5920  1002'                    __end_ofPL84:
  5921                           	callstack 0
  5922  1002'                    PL88:
  5923                           	callstack 23
  5924  1002' 6A00'              	clrf	LcGotoXY@Row^0,c
  5925  1004' 2A00'              	incf	_pointer^0,f,c
  5926  1006' 5000'              	movf	_pointer^0,w,c
  5927  1008' 0012               	return	
  5928  100A'                    __end_ofPL88:
  5929                           	callstack 0
  5930  100A'                    PL90:
  5931                           	callstack 23
  5932  100A' 0101               	movlb	1	; () banked
  5933  100C' 6F00'              	movwf	??_menuMotor& (0+255),b
  5934  100E' 0C01               	retlw	1
  5935  1010'                    __end_ofPL90:
  5936                           	callstack 0
  5937  1010'                    PL92:
  5938                           	callstack 23
  5939  1010' 0E0A               	movlw	10
  5940  1012' 6E00'              	movwf	_menuState^0,c
  5941  1014' 6A00'              	clrf	_pointer^0,c
  5942  1016' 0012               	return	
  5943  1018'                    __end_ofPL92:
  5944                           	callstack 0
  5945  1018'                    PL96:
  5946                           	callstack 23
  5947  1018' 6E00'              	movwf	_keyValue^0,c
  5948  101A' 5000'              	movf	_keyValue^0,w,c
  5949  101C' 0F30               	addlw	48
  5950  101E' 0012               	return	
  5951  1020'                    __end_ofPL96:
  5952                           	callstack 0
  5953                           
  5954 ;; *************** function _writeEepromScores *****************
  5955 ;; Defined at:
  5956 ;;		line 194 in file "EEPROM.c"
  5957 ;; Parameters:    Size  Location     Type
  5958 ;;  score           2    5[COMRAM] struct .
  5959 ;;  num             1    7[COMRAM] unsigned char 
  5960 ;; Auto vars:     Size  Location     Type
  5961 ;;		None
  5962 ;; Return value:  Size  Location     Type
  5963 ;;                  1    wreg      void 
  5964 ;; Registers used:
  5965 ;;		wreg, status,2, status,0, prodl, prodh
  5966 ;; Tracked objects:
  5967 ;;		On entry : 0/1
  5968 ;;		On exit  : 0/0
  5969 ;;		Unchanged: 0/0
  5970 ;; Data sizes:     COMRAM   BANK0   BANK1
  5971 ;;      Params:         3       0       0
  5972 ;;      Locals:         0       0       0
  5973 ;;      Temps:          0       0       0
  5974 ;;      Totals:         3       0       0
  5975 ;;Total ram usage:        3 bytes
  5976 ;; Hardware stack levels used: 1
  5977 ;; Hardware stack levels required when called: 2
  5978 ;; This function calls:
  5979 ;;		Nothing
  5980 ;; This function is called by:
  5981 ;;		_menuMotor
  5982 ;; This function uses a non-reentrant model
  5983 ;;
  5984                           
  5985                           	psect	text11
  5986  0000'                    __ptext11:
  5987                           	callstack 0
  5988  0000'                    _writeEepromScores:
  5989                           	callstack 27
  5990                           
  5991                           ;EEPROM.c: 195:     pointerEeprom=0;
  5992                           
  5993                           ;incstack = 0
  5994  0000' 6A00'              	clrf	_pointerEeprom^0,c
  5995                           
  5996                           ;EEPROM.c: 196:     eepromState = 2;
  5997  0002' 0E02               	movlw	2
  5998  0004' 6E00'              	movwf	_eepromState^0,c
  5999                           
  6000                           ;EEPROM.c: 197:     topScore = score;
  6001  0006' C005' F00C'        	movff	writeEepromScores@score,_topScore
  6002  000A' C006' F00D'        	movff	writeEepromScores@score+1,_topScore+1
  6003                           
  6004                           ;EEPROM.c: 198:     numAddress = num*2;
  6005  000E' 5000'              	movf	writeEepromScores@num^0,w,c
  6006  0010' 0D02               	mullw	2
  6007  0012' CFF3 F01D'         	movff	prodl,_numAddress
  6008                           
  6009                           ;EEPROM.c: 199:     doneCharging = 0;
  6010  0016' 6A00'              	clrf	_doneCharging^0,c
  6011  0018' 0012               	return		;funcret
  6012  001A'                    __end_of_writeEepromScores:
  6013                           	callstack 0
  6014                           
  6015 ;; *************** function _writeEeprom *****************
  6016 ;; Defined at:
  6017 ;;		line 185 in file "EEPROM.c"
  6018 ;; Parameters:    Size  Location     Type
  6019 ;;  us             18    5[COMRAM] struct .
  6020 ;;  num             1   23[COMRAM] unsigned char 
  6021 ;; Auto vars:     Size  Location     Type
  6022 ;;		None
  6023 ;; Return value:  Size  Location     Type
  6024 ;;                  1    wreg      void 
  6025 ;; Registers used:
  6026 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  6027 ;; Tracked objects:
  6028 ;;		On entry : 0/1
  6029 ;;		On exit  : 0/0
  6030 ;;		Unchanged: 0/0
  6031 ;; Data sizes:     COMRAM   BANK0   BANK1
  6032 ;;      Params:        19       0       0
  6033 ;;      Locals:         0       0       0
  6034 ;;      Temps:          0       0       0
  6035 ;;      Totals:        19       0       0
  6036 ;;Total ram usage:       19 bytes
  6037 ;; Hardware stack levels used: 1
  6038 ;; Hardware stack levels required when called: 2
  6039 ;; This function calls:
  6040 ;;		Nothing
  6041 ;; This function is called by:
  6042 ;;		_menuMotor
  6043 ;; This function uses a non-reentrant model
  6044 ;;
  6045                           
  6046                           	psect	text12
  6047  0000'                    __ptext12:
  6048                           	callstack 0
  6049  0000'                    _writeEeprom:
  6050                           	callstack 27
  6051                           
  6052                           ;EEPROM.c: 186:     eepromState = 0;
  6053                           
  6054                           ;incstack = 0
  6055  0000' 6A00'              	clrf	_eepromState^0,c
  6056                           
  6057                           ;EEPROM.c: 187:     user = us;
  6058  0002' EE20' F000'        	lfsr	2,writeEeprom@us
  6059  0006' EE10' F000'        	lfsr	1,_user
  6060  000A' 0E11               	movlw	17
  6061  000C'                    u2971:
  6062  000C' CFDB FFE3          	movff	plusw2,plusw1
  6063  0010' 06E8               	decf	wreg,f,c
  6064  0012' E2FC               	bc	u2971
  6065                           
  6066                           ;EEPROM.c: 188:     numAddress = num;
  6067  0014' C017' F01D'        	movff	writeEeprom@num,_numAddress
  6068                           
  6069                           ;EEPROM.c: 189:     pointer = 0;
  6070                           
  6071                           ;EEPROM.c: 190:     pointerEeprom = 0;
  6072                           
  6073                           ;EEPROM.c: 191:     doneCharging = 0;
  6074  0018' EF00' F000'        	goto	__end_of_readEeprom	;call to abstracted procedure
  6075  001C'                    __end_of_writeEeprom:
  6076                           	callstack 0
  6077                           
  6078 ;; *************** function _stopTimerPic *****************
  6079 ;; Defined at:
  6080 ;;		line 131 in file "Timer.c"
  6081 ;; Parameters:    Size  Location     Type
  6082 ;;		None
  6083 ;; Auto vars:     Size  Location     Type
  6084 ;;		None
  6085 ;; Return value:  Size  Location     Type
  6086 ;;                  1    wreg      void 
  6087 ;; Registers used:
  6088 ;;		None
  6089 ;; Tracked objects:
  6090 ;;		On entry : 0/1
  6091 ;;		On exit  : 0/0
  6092 ;;		Unchanged: 0/0
  6093 ;; Data sizes:     COMRAM   BANK0   BANK1
  6094 ;;      Params:         0       0       0
  6095 ;;      Locals:         0       0       0
  6096 ;;      Temps:          0       0       0
  6097 ;;      Totals:         0       0       0
  6098 ;;Total ram usage:        0 bytes
  6099 ;; Hardware stack levels used: 1
  6100 ;; Hardware stack levels required when called: 2
  6101 ;; This function calls:
  6102 ;;		Nothing
  6103 ;; This function is called by:
  6104 ;;		_menuMotor
  6105 ;; This function uses a non-reentrant model
  6106 ;;
  6107                           
  6108                           	psect	text13
  6109  0000'                    __ptext13:
  6110                           	callstack 0
  6111  0000'                    _stopTimerPic:
  6112                           	callstack 27
  6113                           
  6114                           ;Timer.c: 132:     show = 0;
  6115                           
  6116                           ;incstack = 0
  6117  0000' 6A00'              	clrf	_show^0,c
  6118  0002' 0012               	return		;funcret
  6119  0004'                    __end_of_stopTimerPic:
  6120                           	callstack 0
  6121                           
  6122 ;; *************** function _startMusic *****************
  6123 ;; Defined at:
  6124 ;;		line 33 in file "Music.c"
  6125 ;; Parameters:    Size  Location     Type
  6126 ;;		None
  6127 ;; Auto vars:     Size  Location     Type
  6128 ;;		None
  6129 ;; Return value:  Size  Location     Type
  6130 ;;                  1    wreg      void 
  6131 ;; Registers used:
  6132 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6133 ;; Tracked objects:
  6134 ;;		On entry : 0/1
  6135 ;;		On exit  : 0/0
  6136 ;;		Unchanged: 0/0
  6137 ;; Data sizes:     COMRAM   BANK0   BANK1
  6138 ;;      Params:         0       0       0
  6139 ;;      Locals:         0       0       0
  6140 ;;      Temps:          0       0       0
  6141 ;;      Totals:         0       0       0
  6142 ;;Total ram usage:        0 bytes
  6143 ;; Hardware stack levels used: 1
  6144 ;; Hardware stack levels required when called: 3
  6145 ;; This function calls:
  6146 ;;		_TiResetTics
  6147 ;; This function is called by:
  6148 ;;		_menuMotor
  6149 ;; This function uses a non-reentrant model
  6150 ;;
  6151                           
  6152                           	psect	text14
  6153  0000'                    __ptext14:
  6154                           	callstack 0
  6155  0000'                    _startMusic:
  6156                           	callstack 26
  6157                           
  6158                           ;Music.c: 34:     note = 1;
  6159                           
  6160                           ;incstack = 0
  6161  0000' 0E01               	movlw	1
  6162  0002' 6E00'              	movwf	_note^0,c
  6163                           
  6164                           ;Music.c: 35:     TiResetTics(timerMusic);
  6165  0004' 5000'              	movf	_timerMusic^0,w,c
  6166  0006' EC00' F000'        	call	_TiResetTics
  6167                           
  6168                           ;Music.c: 36:     TiResetTics(timerNote);
  6169  000A' 5000'              	movf	_timerNote^0,w,c
  6170  000C' EC00' F000'        	call	_TiResetTics
  6171                           
  6172                           ;Music.c: 37:     musicState = 0;
  6173  0010' 6A00'              	clrf	_musicState^0,c
  6174  0012' 0012               	return		;funcret
  6175  0014'                    __end_of_startMusic:
  6176                           	callstack 0
  6177                           
  6178 ;; *************** function _showTimerPic *****************
  6179 ;; Defined at:
  6180 ;;		line 128 in file "Timer.c"
  6181 ;; Parameters:    Size  Location     Type
  6182 ;;		None
  6183 ;; Auto vars:     Size  Location     Type
  6184 ;;		None
  6185 ;; Return value:  Size  Location     Type
  6186 ;;                  1    wreg      void 
  6187 ;; Registers used:
  6188 ;;		wreg, status,2
  6189 ;; Tracked objects:
  6190 ;;		On entry : 0/1
  6191 ;;		On exit  : 0/0
  6192 ;;		Unchanged: 0/0
  6193 ;; Data sizes:     COMRAM   BANK0   BANK1
  6194 ;;      Params:         0       0       0
  6195 ;;      Locals:         0       0       0
  6196 ;;      Temps:          0       0       0
  6197 ;;      Totals:         0       0       0
  6198 ;;Total ram usage:        0 bytes
  6199 ;; Hardware stack levels used: 1
  6200 ;; Hardware stack levels required when called: 2
  6201 ;; This function calls:
  6202 ;;		Nothing
  6203 ;; This function is called by:
  6204 ;;		_menuMotor
  6205 ;; This function uses a non-reentrant model
  6206 ;;
  6207                           
  6208                           	psect	text15
  6209  0000'                    __ptext15:
  6210                           	callstack 0
  6211  0000'                    _showTimerPic:
  6212                           	callstack 27
  6213                           
  6214                           ;Timer.c: 129:     show = 1;
  6215                           
  6216                           ;incstack = 0
  6217  0000' 0E01               	movlw	1
  6218  0002' 6E00'              	movwf	_show^0,c
  6219  0004' 0C01               	retlw	1	;funcret
  6220  0006'                    __end_of_showTimerPic:
  6221                           	callstack 0
  6222                           
  6223 ;; *************** function _setTX *****************
  6224 ;; Defined at:
  6225 ;;		line 22 in file "SIO.c"
  6226 ;; Parameters:    Size  Location     Type
  6227 ;;  text            1    wreg     unsigned char 
  6228 ;; Auto vars:     Size  Location     Type
  6229 ;;  text            1    5[COMRAM] unsigned char 
  6230 ;; Return value:  Size  Location     Type
  6231 ;;                  1    wreg      void 
  6232 ;; Registers used:
  6233 ;;		wreg
  6234 ;; Tracked objects:
  6235 ;;		On entry : 0/0
  6236 ;;		On exit  : 0/0
  6237 ;;		Unchanged: 0/0
  6238 ;; Data sizes:     COMRAM   BANK0   BANK1
  6239 ;;      Params:         0       0       0
  6240 ;;      Locals:         1       0       0
  6241 ;;      Temps:          0       0       0
  6242 ;;      Totals:         1       0       0
  6243 ;;Total ram usage:        1 bytes
  6244 ;; Hardware stack levels used: 1
  6245 ;; Hardware stack levels required when called: 2
  6246 ;; This function calls:
  6247 ;;		Nothing
  6248 ;; This function is called by:
  6249 ;;		_menuMotor
  6250 ;;		_motorJoystick
  6251 ;;		_motorRX
  6252 ;; This function uses a non-reentrant model
  6253 ;;
  6254                           
  6255                           	psect	text16
  6256  0000'                    __ptext16:
  6257                           	callstack 0
  6258  0000'                    _setTX:
  6259                           	callstack 27
  6260                           
  6261                           ;incstack = 0
  6262                           ;setTX@text stored from wreg
  6263  0000' 6E00'              	movwf	setTX@text^0,c
  6264                           
  6265                           ;SIO.c: 23:     TXREG = text;
  6266  0002' C005' FFAD         	movff	setTX@text,4013	;volatile
  6267  0006' 0012               	return		;funcret
  6268  0008'                    __end_of_setTX:
  6269                           	callstack 0
  6270                           
  6271 ;; *************** function _sendMyTX *****************
  6272 ;; Defined at:
  6273 ;;		line 97 in file "TX.c"
  6274 ;; Parameters:    Size  Location     Type
  6275 ;;  send            1    wreg     unsigned char 
  6276 ;; Auto vars:     Size  Location     Type
  6277 ;;  send            1    6[COMRAM] unsigned char 
  6278 ;; Return value:  Size  Location     Type
  6279 ;;                  1    wreg      void 
  6280 ;; Registers used:
  6281 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6282 ;; Tracked objects:
  6283 ;;		On entry : 0/0
  6284 ;;		On exit  : 0/0
  6285 ;;		Unchanged: 0/0
  6286 ;; Data sizes:     COMRAM   BANK0   BANK1
  6287 ;;      Params:         0       0       0
  6288 ;;      Locals:         1       0       0
  6289 ;;      Temps:          0       0       0
  6290 ;;      Totals:         1       0       0
  6291 ;;Total ram usage:        1 bytes
  6292 ;; Hardware stack levels used: 1
  6293 ;; Hardware stack levels required when called: 3
  6294 ;; This function calls:
  6295 ;;		_TiResetTics
  6296 ;; This function is called by:
  6297 ;;		_menuMotor
  6298 ;;		_motorRX
  6299 ;; This function uses a non-reentrant model
  6300 ;;
  6301                           
  6302                           	psect	text17
  6303  0000'                    __ptext17:
  6304                           	callstack 0
  6305  0000'                    _sendMyTX:
  6306                           	callstack 26
  6307                           
  6308                           ;incstack = 0
  6309                           ;sendMyTX@send stored from wreg
  6310  0000' 6E00'              	movwf	sendMyTX@send^0,c
  6311                           
  6312                           ;TX.c: 98:     toSend = send;
  6313  0002' C006' F016'        	movff	sendMyTX@send,_toSend
  6314                           
  6315                           ;TX.c: 99:     LATCbits.LATC5 = 0 & 0x01;
  6316  0006' 9A8B               	bcf	139,5,c	;volatile
  6317                           
  6318                           ;TX.c: 100:     TiResetTics(timerTX);
  6319  0008' 5000'              	movf	_timerTX^0,w,c
  6320  000A' EC00' F000'        	call	_TiResetTics
  6321                           
  6322                           ;TX.c: 101:     stateTX = 1;
  6323  000E' 0E01               	movlw	1
  6324  0010' 6E00'              	movwf	_stateTX^0,c
  6325                           
  6326                           ;TX.c: 102:     pointer = 0;
  6327  0012' 6A00'              	clrf	_pointer@TX$F2031^0,c
  6328  0014' 0012               	return		;funcret
  6329  0016'                    __end_of_sendMyTX:
  6330                           	callstack 0
  6331                           
  6332 ;; *************** function _resetPositionJoystick *****************
  6333 ;; Defined at:
  6334 ;;		line 84 in file "Joystick.c"
  6335 ;; Parameters:    Size  Location     Type
  6336 ;;		None
  6337 ;; Auto vars:     Size  Location     Type
  6338 ;;		None
  6339 ;; Return value:  Size  Location     Type
  6340 ;;                  1    wreg      void 
  6341 ;; Registers used:
  6342 ;;		None
  6343 ;; Tracked objects:
  6344 ;;		On entry : 0/0
  6345 ;;		On exit  : 0/0
  6346 ;;		Unchanged: 0/0
  6347 ;; Data sizes:     COMRAM   BANK0   BANK1
  6348 ;;      Params:         0       0       0
  6349 ;;      Locals:         0       0       0
  6350 ;;      Temps:          0       0       0
  6351 ;;      Totals:         0       0       0
  6352 ;;Total ram usage:        0 bytes
  6353 ;; Hardware stack levels used: 1
  6354 ;; Hardware stack levels required when called: 2
  6355 ;; This function calls:
  6356 ;;		Nothing
  6357 ;; This function is called by:
  6358 ;;		_menuMotor
  6359 ;;		_motorJoystick
  6360 ;; This function uses a non-reentrant model
  6361 ;;
  6362                           
  6363                           	psect	text18
  6364  0000'                    __ptext18:
  6365                           	callstack 0
  6366  0000'                    _resetPositionJoystick:
  6367                           	callstack 27
  6368                           
  6369                           ;Joystick.c: 85:     positionJoystick = 0;
  6370                           
  6371                           ;incstack = 0
  6372  0000' 6A00'              	clrf	_positionJoystick@Joystick$F722^0,c
  6373  0002' 0012               	return		;funcret
  6374  0004'                    __end_of_resetPositionJoystick:
  6375                           	callstack 0
  6376                           
  6377 ;; *************** function _readEepromScores *****************
  6378 ;; Defined at:
  6379 ;;		line 210 in file "EEPROM.c"
  6380 ;; Parameters:    Size  Location     Type
  6381 ;;  num             1    wreg     unsigned char 
  6382 ;; Auto vars:     Size  Location     Type
  6383 ;;  num             1    5[COMRAM] unsigned char 
  6384 ;; Return value:  Size  Location     Type
  6385 ;;                  1    wreg      void 
  6386 ;; Registers used:
  6387 ;;		wreg, status,2
  6388 ;; Tracked objects:
  6389 ;;		On entry : 0/1
  6390 ;;		On exit  : 0/0
  6391 ;;		Unchanged: 0/0
  6392 ;; Data sizes:     COMRAM   BANK0   BANK1
  6393 ;;      Params:         0       0       0
  6394 ;;      Locals:         1       0       0
  6395 ;;      Temps:          0       0       0
  6396 ;;      Totals:         1       0       0
  6397 ;;Total ram usage:        1 bytes
  6398 ;; Hardware stack levels used: 1
  6399 ;; Hardware stack levels required when called: 2
  6400 ;; This function calls:
  6401 ;;		Nothing
  6402 ;; This function is called by:
  6403 ;;		_menuMotor
  6404 ;; This function uses a non-reentrant model
  6405 ;;
  6406                           
  6407                           	psect	text19
  6408  0000'                    __ptext19:
  6409                           	callstack 0
  6410  0000'                    _readEepromScores:
  6411                           	callstack 27
  6412                           
  6413                           ;incstack = 0
  6414                           ;readEepromScores@num stored from wreg
  6415  0000' 6E00'              	movwf	readEepromScores@num^0,c
  6416                           
  6417                           ;EEPROM.c: 211:     eepromState = 7;
  6418  0002' 0E07               	movlw	7
  6419  0004' 6E00'              	movwf	_eepromState^0,c
  6420                           
  6421                           ;EEPROM.c: 212:     numAddress = num;
  6422  0006' C005' F01D'        	movff	readEepromScores@num,_numAddress
  6423                           
  6424                           ;EEPROM.c: 213:     doneCharging = 0;
  6425  000A' 6A00'              	clrf	_doneCharging^0,c
  6426  000C' 0012               	return		;funcret
  6427  000E'                    __end_of_readEepromScores:
  6428                           	callstack 0
  6429                           
  6430 ;; *************** function _isPressed *****************
  6431 ;; Defined at:
  6432 ;;		line 127 in file "Keypad.c"
  6433 ;; Parameters:    Size  Location     Type
  6434 ;;		None
  6435 ;; Auto vars:     Size  Location     Type
  6436 ;;		None
  6437 ;; Return value:  Size  Location     Type
  6438 ;;                  1    wreg      unsigned char 
  6439 ;; Registers used:
  6440 ;;		wreg, status,2
  6441 ;; Tracked objects:
  6442 ;;		On entry : 0/1
  6443 ;;		On exit  : 0/0
  6444 ;;		Unchanged: 0/0
  6445 ;; Data sizes:     COMRAM   BANK0   BANK1
  6446 ;;      Params:         0       0       0
  6447 ;;      Locals:         0       0       0
  6448 ;;      Temps:          0       0       0
  6449 ;;      Totals:         0       0       0
  6450 ;;Total ram usage:        0 bytes
  6451 ;; Hardware stack levels used: 1
  6452 ;; Hardware stack levels required when called: 2
  6453 ;; This function calls:
  6454 ;;		Nothing
  6455 ;; This function is called by:
  6456 ;;		_menuMotor
  6457 ;; This function uses a non-reentrant model
  6458 ;;
  6459                           
  6460                           	psect	text20
  6461  0000'                    __ptext20:
  6462                           	callstack 0
  6463  0000'                    _isPressed:
  6464                           	callstack 27
  6465                           
  6466                           ;Keypad.c: 128:     return SMS;
  6467                           
  6468                           ;incstack = 0
  6469  0000' 5000'              	movf	_SMS^0,w,c
  6470  0002' 0012               	return		;funcret
  6471  0004'                    __end_of_isPressed:
  6472                           	callstack 0
  6473                           
  6474 ;; *************** function _getUser *****************
  6475 ;; Defined at:
  6476 ;;		line 217 in file "EEPROM.c"
  6477 ;; Parameters:    Size  Location     Type
  6478 ;;		None
  6479 ;; Auto vars:     Size  Location     Type
  6480 ;;		None
  6481 ;; Return value:  Size  Location     Type
  6482 ;;                  18    5[COMRAM] struct .
  6483 ;; Registers used:
  6484 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0
  6485 ;; Tracked objects:
  6486 ;;		On entry : 0/1
  6487 ;;		On exit  : 0/0
  6488 ;;		Unchanged: 0/0
  6489 ;; Data sizes:     COMRAM   BANK0   BANK1
  6490 ;;      Params:        18       0       0
  6491 ;;      Locals:         0       0       0
  6492 ;;      Temps:          0       0       0
  6493 ;;      Totals:        18       0       0
  6494 ;;Total ram usage:       18 bytes
  6495 ;; Hardware stack levels used: 1
  6496 ;; Hardware stack levels required when called: 2
  6497 ;; This function calls:
  6498 ;;		Nothing
  6499 ;; This function is called by:
  6500 ;;		_menuMotor
  6501 ;; This function uses a non-reentrant model
  6502 ;;
  6503                           
  6504                           	psect	text21
  6505  0000'                    __ptext21:
  6506                           	callstack 0
  6507  0000'                    _getUser:
  6508                           	callstack 27
  6509                           
  6510                           ;EEPROM.c: 218:     return user;
  6511                           
  6512                           ;incstack = 0
  6513  0000' EE20' F000'        	lfsr	2,_user
  6514  0004' EE00' F000'        	lfsr	0,?_getUser
  6515  0008' 0E11               	movlw	17
  6516  000A'                    u2961:
  6517  000A' CFDB FFEB          	movff	plusw2,plusw0
  6518  000E' 06E8               	decf	wreg,f,c
  6519  0010' E2FC               	bc	u2961
  6520  0012' 0012               	return		;funcret
  6521  0014'                    __end_of_getUser:
  6522                           	callstack 0
  6523                           
  6524 ;; *************** function _getScore *****************
  6525 ;; Defined at:
  6526 ;;		line 221 in file "EEPROM.c"
  6527 ;; Parameters:    Size  Location     Type
  6528 ;;		None
  6529 ;; Auto vars:     Size  Location     Type
  6530 ;;		None
  6531 ;; Return value:  Size  Location     Type
  6532 ;;                  2    5[COMRAM] struct .
  6533 ;; Registers used:
  6534 ;;		None
  6535 ;; Tracked objects:
  6536 ;;		On entry : 0/1
  6537 ;;		On exit  : 0/0
  6538 ;;		Unchanged: 0/0
  6539 ;; Data sizes:     COMRAM   BANK0   BANK1
  6540 ;;      Params:         2       0       0
  6541 ;;      Locals:         0       0       0
  6542 ;;      Temps:          0       0       0
  6543 ;;      Totals:         2       0       0
  6544 ;;Total ram usage:        2 bytes
  6545 ;; Hardware stack levels used: 1
  6546 ;; Hardware stack levels required when called: 2
  6547 ;; This function calls:
  6548 ;;		Nothing
  6549 ;; This function is called by:
  6550 ;;		_menuMotor
  6551 ;; This function uses a non-reentrant model
  6552 ;;
  6553                           
  6554                           	psect	text22
  6555  0000'                    __ptext22:
  6556                           	callstack 0
  6557  0000'                    _getScore:
  6558                           	callstack 27
  6559                           
  6560                           ;EEPROM.c: 222:     return topScore;
  6561                           
  6562                           ;incstack = 0
  6563  0000' C00C' F005'        	movff	_topScore,?_getScore
  6564  0004' C00D' F006'        	movff	_topScore+1,?_getScore+1
  6565  0008' 0012               	return		;funcret
  6566  000A'                    __end_of_getScore:
  6567                           	callstack 0
  6568                           
  6569 ;; *************** function _getRX *****************
  6570 ;; Defined at:
  6571 ;;		line 26 in file "SIO.c"
  6572 ;; Parameters:    Size  Location     Type
  6573 ;;		None
  6574 ;; Auto vars:     Size  Location     Type
  6575 ;;		None
  6576 ;; Return value:  Size  Location     Type
  6577 ;;                  1    wreg      unsigned char 
  6578 ;; Registers used:
  6579 ;;		wreg, status,2
  6580 ;; Tracked objects:
  6581 ;;		On entry : 0/1
  6582 ;;		On exit  : 0/0
  6583 ;;		Unchanged: 0/0
  6584 ;; Data sizes:     COMRAM   BANK0   BANK1
  6585 ;;      Params:         0       0       0
  6586 ;;      Locals:         0       0       0
  6587 ;;      Temps:          0       0       0
  6588 ;;      Totals:         0       0       0
  6589 ;;Total ram usage:        0 bytes
  6590 ;; Hardware stack levels used: 1
  6591 ;; Hardware stack levels required when called: 2
  6592 ;; This function calls:
  6593 ;;		Nothing
  6594 ;; This function is called by:
  6595 ;;		_menuMotor
  6596 ;; This function uses a non-reentrant model
  6597 ;;
  6598                           
  6599                           	psect	text23
  6600  0000'                    __ptext23:
  6601                           	callstack 0
  6602  0000'                    _getRX:
  6603                           	callstack 27
  6604                           
  6605                           ;SIO.c: 27:     return RCREG;
  6606                           
  6607                           ;incstack = 0
  6608  0000' 50AE               	movf	174,w,c	;volatile
  6609  0002' 0012               	return		;funcret
  6610  0004'                    __end_of_getRX:
  6611                           	callstack 0
  6612                           
  6613 ;; *************** function _getPositionJoystick *****************
  6614 ;; Defined at:
  6615 ;;		line 81 in file "Joystick.c"
  6616 ;; Parameters:    Size  Location     Type
  6617 ;;		None
  6618 ;; Auto vars:     Size  Location     Type
  6619 ;;		None
  6620 ;; Return value:  Size  Location     Type
  6621 ;;                  1    wreg      unsigned char 
  6622 ;; Registers used:
  6623 ;;		wreg, status,2
  6624 ;; Tracked objects:
  6625 ;;		On entry : 0/0
  6626 ;;		On exit  : 0/0
  6627 ;;		Unchanged: 0/0
  6628 ;; Data sizes:     COMRAM   BANK0   BANK1
  6629 ;;      Params:         0       0       0
  6630 ;;      Locals:         0       0       0
  6631 ;;      Temps:          0       0       0
  6632 ;;      Totals:         0       0       0
  6633 ;;Total ram usage:        0 bytes
  6634 ;; Hardware stack levels used: 1
  6635 ;; Hardware stack levels required when called: 2
  6636 ;; This function calls:
  6637 ;;		Nothing
  6638 ;; This function is called by:
  6639 ;;		_menuMotor
  6640 ;;		_motorJoystick
  6641 ;; This function uses a non-reentrant model
  6642 ;;
  6643                           
  6644                           	psect	text24
  6645  0000'                    __ptext24:
  6646                           	callstack 0
  6647  0000'                    _getPositionJoystick:
  6648                           	callstack 27
  6649                           
  6650                           ;Joystick.c: 82:     return positionJoystick;
  6651                           
  6652                           ;incstack = 0
  6653  0000' 5000'              	movf	_positionJoystick@Joystick$F722^0,w,c
  6654  0002' 0012               	return		;funcret
  6655  0004'                    __end_of_getPositionJoystick:
  6656                           	callstack 0
  6657                           
  6658 ;; *************** function _getFirstDirectionScores *****************
  6659 ;; Defined at:
  6660 ;;		line 232 in file "EEPROM.c"
  6661 ;; Parameters:    Size  Location     Type
  6662 ;;  numAddress      1    wreg     unsigned char 
  6663 ;; Auto vars:     Size  Location     Type
  6664 ;;  numAddress      1    5[COMRAM] unsigned char 
  6665 ;; Return value:  Size  Location     Type
  6666 ;;                  1    wreg      unsigned char 
  6667 ;; Registers used:
  6668 ;;		wreg, status,2, status,0, prodl, prodh
  6669 ;; Tracked objects:
  6670 ;;		On entry : 0/1
  6671 ;;		On exit  : 0/0
  6672 ;;		Unchanged: 0/0
  6673 ;; Data sizes:     COMRAM   BANK0   BANK1
  6674 ;;      Params:         0       0       0
  6675 ;;      Locals:         1       0       0
  6676 ;;      Temps:          0       0       0
  6677 ;;      Totals:         1       0       0
  6678 ;;Total ram usage:        1 bytes
  6679 ;; Hardware stack levels used: 1
  6680 ;; Hardware stack levels required when called: 2
  6681 ;; This function calls:
  6682 ;;		Nothing
  6683 ;; This function is called by:
  6684 ;;		_menuMotor
  6685 ;; This function uses a non-reentrant model
  6686 ;;
  6687                           
  6688                           	psect	text25
  6689  0000'                    __ptext25:
  6690                           	callstack 0
  6691  0000'                    _getFirstDirectionScores:
  6692                           	callstack 27
  6693                           
  6694                           ;incstack = 0
  6695                           ;getFirstDirectionScores@numAddress stored from wreg
  6696  0000' 6E00'              	movwf	getFirstDirectionScores@numAddress^0,c
  6697                           
  6698                           ;EEPROM.c: 233:     EEADR = numAddress*2;
  6699  0002' 5000'              	movf	getFirstDirectionScores@numAddress^0,w,c
  6700  0004' 0D02               	mullw	2
  6701  0006' CFF3 FFA9          	movff	prodl,4009	;volatile
  6702                           
  6703                           ;EEPROM.c: 234:     EECON1bits.EEPGD = 0;
  6704  000A' 9EA6               	bcf	166,7,c	;volsfr
  6705                           
  6706                           ;EEPROM.c: 235:     EECON1bits.CFGS = 0;
  6707  000C' 9CA6               	bcf	166,6,c	;volsfr
  6708                           
  6709                           ;EEPROM.c: 236:     EECON1bits.RD = 1;
  6710  000E' 80A6               	bsf	166,0,c	;volsfr
  6711                           
  6712                           ;EEPROM.c: 237:     return EEDATA;
  6713  0010' 50A8               	movf	168,w,c	;volatile
  6714  0012' 0012               	return		;funcret
  6715  0014'                    __end_of_getFirstDirectionScores:
  6716                           	callstack 0
  6717                           
  6718 ;; *************** function _getFirstDirection *****************
  6719 ;; Defined at:
  6720 ;;		line 225 in file "EEPROM.c"
  6721 ;; Parameters:    Size  Location     Type
  6722 ;;  numAddress      1    wreg     unsigned char 
  6723 ;; Auto vars:     Size  Location     Type
  6724 ;;  numAddress      1    5[COMRAM] unsigned char 
  6725 ;; Return value:  Size  Location     Type
  6726 ;;                  1    wreg      unsigned char 
  6727 ;; Registers used:
  6728 ;;		wreg, status,2, status,0, prodl, prodh
  6729 ;; Tracked objects:
  6730 ;;		On entry : 0/1
  6731 ;;		On exit  : 0/0
  6732 ;;		Unchanged: 0/0
  6733 ;; Data sizes:     COMRAM   BANK0   BANK1
  6734 ;;      Params:         0       0       0
  6735 ;;      Locals:         1       0       0
  6736 ;;      Temps:          0       0       0
  6737 ;;      Totals:         1       0       0
  6738 ;;Total ram usage:        1 bytes
  6739 ;; Hardware stack levels used: 1
  6740 ;; Hardware stack levels required when called: 2
  6741 ;; This function calls:
  6742 ;;		Nothing
  6743 ;; This function is called by:
  6744 ;;		_menuMotor
  6745 ;; This function uses a non-reentrant model
  6746 ;;
  6747                           
  6748                           	psect	text26
  6749  0000'                    __ptext26:
  6750                           	callstack 0
  6751  0000'                    _getFirstDirection:
  6752                           	callstack 27
  6753                           
  6754                           ;incstack = 0
  6755                           ;getFirstDirection@numAddress stored from wreg
  6756  0000' 6E00'              	movwf	getFirstDirection@numAddress^0,c
  6757                           
  6758                           ;EEPROM.c: 226:     EEADR = numAddress*18+10;
  6759  0002' 5000'              	movf	getFirstDirection@numAddress^0,w,c
  6760  0004' 0D12               	mullw	18
  6761  0006' 50F3               	movf	243,w,c
  6762  0008' 0F0A               	addlw	10
  6763  000A' 6EA9               	movwf	169,c	;volatile
  6764                           
  6765                           ;EEPROM.c: 227:     EECON1bits.EEPGD = 0;
  6766  000C' 9EA6               	bcf	166,7,c	;volsfr
  6767                           
  6768                           ;EEPROM.c: 228:     EECON1bits.CFGS = 0;
  6769  000E' 9CA6               	bcf	166,6,c	;volsfr
  6770                           
  6771                           ;EEPROM.c: 229:     EECON1bits.RD = 1;
  6772  0010' 80A6               	bsf	166,0,c	;volsfr
  6773                           
  6774                           ;EEPROM.c: 230:     return EEDATA;
  6775  0012' 50A8               	movf	168,w,c	;volatile
  6776  0014' 0012               	return		;funcret
  6777  0016'                    __end_of_getFirstDirection:
  6778                           	callstack 0
  6779                           
  6780 ;; *************** function _getDoneCharging *****************
  6781 ;; Defined at:
  6782 ;;		line 182 in file "EEPROM.c"
  6783 ;; Parameters:    Size  Location     Type
  6784 ;;		None
  6785 ;; Auto vars:     Size  Location     Type
  6786 ;;		None
  6787 ;; Return value:  Size  Location     Type
  6788 ;;                  1    wreg      unsigned char 
  6789 ;; Registers used:
  6790 ;;		wreg, status,2
  6791 ;; Tracked objects:
  6792 ;;		On entry : 0/1
  6793 ;;		On exit  : 0/0
  6794 ;;		Unchanged: 0/0
  6795 ;; Data sizes:     COMRAM   BANK0   BANK1
  6796 ;;      Params:         0       0       0
  6797 ;;      Locals:         0       0       0
  6798 ;;      Temps:          0       0       0
  6799 ;;      Totals:         0       0       0
  6800 ;;Total ram usage:        0 bytes
  6801 ;; Hardware stack levels used: 1
  6802 ;; Hardware stack levels required when called: 2
  6803 ;; This function calls:
  6804 ;;		Nothing
  6805 ;; This function is called by:
  6806 ;;		_menuMotor
  6807 ;; This function uses a non-reentrant model
  6808 ;;
  6809                           
  6810                           	psect	text27
  6811  0000'                    __ptext27:
  6812                           	callstack 0
  6813  0000'                    _getDoneCharging:
  6814                           	callstack 27
  6815                           
  6816                           ;EEPROM.c: 183:     return doneCharging;
  6817                           
  6818                           ;incstack = 0
  6819  0000' 5000'              	movf	_doneCharging^0,w,c
  6820  0002' 0012               	return		;funcret
  6821  0004'                    __end_of_getDoneCharging:
  6822                           	callstack 0
  6823                           
  6824 ;; *************** function _getCentreJoystick *****************
  6825 ;; Defined at:
  6826 ;;		line 87 in file "Joystick.c"
  6827 ;; Parameters:    Size  Location     Type
  6828 ;;		None
  6829 ;; Auto vars:     Size  Location     Type
  6830 ;;		None
  6831 ;; Return value:  Size  Location     Type
  6832 ;;                  1    wreg      unsigned char 
  6833 ;; Registers used:
  6834 ;;		wreg, status,2
  6835 ;; Tracked objects:
  6836 ;;		On entry : 0/1
  6837 ;;		On exit  : 0/0
  6838 ;;		Unchanged: 0/0
  6839 ;; Data sizes:     COMRAM   BANK0   BANK1
  6840 ;;      Params:         0       0       0
  6841 ;;      Locals:         0       0       0
  6842 ;;      Temps:          0       0       0
  6843 ;;      Totals:         0       0       0
  6844 ;;Total ram usage:        0 bytes
  6845 ;; Hardware stack levels used: 1
  6846 ;; Hardware stack levels required when called: 2
  6847 ;; This function calls:
  6848 ;;		Nothing
  6849 ;; This function is called by:
  6850 ;;		_menuMotor
  6851 ;; This function uses a non-reentrant model
  6852 ;;
  6853                           
  6854                           	psect	text28
  6855  0000'                    __ptext28:
  6856                           	callstack 0
  6857  0000'                    _getCentreJoystick:
  6858                           	callstack 27
  6859                           
  6860                           ;Joystick.c: 88:     return centre;
  6861                           
  6862                           ;incstack = 0
  6863  0000' 5000'              	movf	_centre^0,w,c
  6864  0002' 0012               	return		;funcret
  6865  0004'                    __end_of_getCentreJoystick:
  6866                           	callstack 0
  6867                           
  6868 ;; *************** function _endMusic *****************
  6869 ;; Defined at:
  6870 ;;		line 40 in file "Music.c"
  6871 ;; Parameters:    Size  Location     Type
  6872 ;;		None
  6873 ;; Auto vars:     Size  Location     Type
  6874 ;;		None
  6875 ;; Return value:  Size  Location     Type
  6876 ;;                  1    wreg      void 
  6877 ;; Registers used:
  6878 ;;		wreg, status,2
  6879 ;; Tracked objects:
  6880 ;;		On entry : 0/1
  6881 ;;		On exit  : 0/0
  6882 ;;		Unchanged: 0/0
  6883 ;; Data sizes:     COMRAM   BANK0   BANK1
  6884 ;;      Params:         0       0       0
  6885 ;;      Locals:         0       0       0
  6886 ;;      Temps:          0       0       0
  6887 ;;      Totals:         0       0       0
  6888 ;;Total ram usage:        0 bytes
  6889 ;; Hardware stack levels used: 1
  6890 ;; Hardware stack levels required when called: 2
  6891 ;; This function calls:
  6892 ;;		Nothing
  6893 ;; This function is called by:
  6894 ;;		_menuMotor
  6895 ;; This function uses a non-reentrant model
  6896 ;;
  6897                           
  6898                           	psect	text29
  6899  0000'                    __ptext29:
  6900                           	callstack 0
  6901  0000'                    _endMusic:
  6902                           	callstack 27
  6903                           
  6904                           ;Music.c: 41:     musicState = 1;
  6905                           
  6906                           ;incstack = 0
  6907  0000' 0E01               	movlw	1
  6908  0002' 6E00'              	movwf	_musicState^0,c
  6909  0004' 0C01               	retlw	1	;funcret
  6910  0006'                    __end_of_endMusic:
  6911                           	callstack 0
  6912                           
  6913 ;; *************** function _TXgetState *****************
  6914 ;; Defined at:
  6915 ;;		line 105 in file "TX.c"
  6916 ;; Parameters:    Size  Location     Type
  6917 ;;		None
  6918 ;; Auto vars:     Size  Location     Type
  6919 ;;		None
  6920 ;; Return value:  Size  Location     Type
  6921 ;;                  1    wreg      unsigned char 
  6922 ;; Registers used:
  6923 ;;		wreg, status,2
  6924 ;; Tracked objects:
  6925 ;;		On entry : 0/0
  6926 ;;		On exit  : 0/0
  6927 ;;		Unchanged: 0/0
  6928 ;; Data sizes:     COMRAM   BANK0   BANK1
  6929 ;;      Params:         0       0       0
  6930 ;;      Locals:         0       0       0
  6931 ;;      Temps:          0       0       0
  6932 ;;      Totals:         0       0       0
  6933 ;;Total ram usage:        0 bytes
  6934 ;; Hardware stack levels used: 1
  6935 ;; Hardware stack levels required when called: 2
  6936 ;; This function calls:
  6937 ;;		Nothing
  6938 ;; This function is called by:
  6939 ;;		_menuMotor
  6940 ;;		_motorRX
  6941 ;; This function uses a non-reentrant model
  6942 ;;
  6943                           
  6944                           	psect	text30
  6945  0000'                    __ptext30:
  6946                           	callstack 0
  6947  0000'                    _TXgetState:
  6948                           	callstack 27
  6949                           
  6950                           ;TX.c: 106:     return stateTX;
  6951                           
  6952                           ;incstack = 0
  6953  0000' 5000'              	movf	_stateTX^0,w,c
  6954  0002' 0012               	return		;funcret
  6955  0004'                    __end_of_TXgetState:
  6956                           	callstack 0
  6957                           
  6958 ;; *************** function _TXbusy *****************
  6959 ;; Defined at:
  6960 ;;		line 14 in file "SIO.c"
  6961 ;; Parameters:    Size  Location     Type
  6962 ;;		None
  6963 ;; Auto vars:     Size  Location     Type
  6964 ;;		None
  6965 ;; Return value:  Size  Location     Type
  6966 ;;                  1    wreg      unsigned char 
  6967 ;; Registers used:
  6968 ;;		wreg
  6969 ;; Tracked objects:
  6970 ;;		On entry : 0/0
  6971 ;;		On exit  : 0/0
  6972 ;;		Unchanged: 0/0
  6973 ;; Data sizes:     COMRAM   BANK0   BANK1
  6974 ;;      Params:         0       0       0
  6975 ;;      Locals:         0       0       0
  6976 ;;      Temps:          0       0       0
  6977 ;;      Totals:         0       0       0
  6978 ;;Total ram usage:        0 bytes
  6979 ;; Hardware stack levels used: 1
  6980 ;; Hardware stack levels required when called: 2
  6981 ;; This function calls:
  6982 ;;		Nothing
  6983 ;; This function is called by:
  6984 ;;		_menuMotor
  6985 ;;		_motorJoystick
  6986 ;; This function uses a non-reentrant model
  6987 ;;
  6988                           
  6989                           	psect	text31
  6990  0000'                    __ptext31:
  6991                           	callstack 0
  6992  0000'                    _TXbusy:
  6993                           	callstack 27
  6994                           
  6995                           ;SIO.c: 15:     return TXSTAbits.TRMT;
  6996                           
  6997                           ;incstack = 0
  6998  0000' B2AC               	btfsc	172,1,c	;volatile
  6999  0002' 0C01               	retlw	1
  7000  0004' 0C00               	retlw	0	;funcret
  7001  0006'                    __end_of_TXbusy:
  7002                           	callstack 0
  7003                           
  7004 ;; *************** function _RXdata *****************
  7005 ;; Defined at:
  7006 ;;		line 18 in file "SIO.c"
  7007 ;; Parameters:    Size  Location     Type
  7008 ;;		None
  7009 ;; Auto vars:     Size  Location     Type
  7010 ;;		None
  7011 ;; Return value:  Size  Location     Type
  7012 ;;                  1    wreg      unsigned char 
  7013 ;; Registers used:
  7014 ;;		wreg
  7015 ;; Tracked objects:
  7016 ;;		On entry : 0/1
  7017 ;;		On exit  : 0/0
  7018 ;;		Unchanged: 0/0
  7019 ;; Data sizes:     COMRAM   BANK0   BANK1
  7020 ;;      Params:         0       0       0
  7021 ;;      Locals:         0       0       0
  7022 ;;      Temps:          0       0       0
  7023 ;;      Totals:         0       0       0
  7024 ;;Total ram usage:        0 bytes
  7025 ;; Hardware stack levels used: 1
  7026 ;; Hardware stack levels required when called: 2
  7027 ;; This function calls:
  7028 ;;		Nothing
  7029 ;; This function is called by:
  7030 ;;		_menuMotor
  7031 ;; This function uses a non-reentrant model
  7032 ;;
  7033                           
  7034                           	psect	text32
  7035  0000'                    __ptext32:
  7036                           	callstack 0
  7037  0000'                    _RXdata:
  7038                           	callstack 27
  7039                           
  7040                           ;SIO.c: 19:     return PIR1bits.RCIF;
  7041                           
  7042                           ;incstack = 0
  7043  0000' BA9E               	btfsc	158,5,c	;volatile
  7044  0002' 0C01               	retlw	1
  7045  0004' 0C00               	retlw	0	;funcret
  7046  0006'                    __end_of_RXdata:
  7047                           	callstack 0
  7048                           
  7049 ;; *************** function _LcScroll *****************
  7050 ;; Defined at:
  7051 ;;		line 283 in file "LcTLCD.c"
  7052 ;; Parameters:    Size  Location     Type
  7053 ;;		None
  7054 ;; Auto vars:     Size  Location     Type
  7055 ;;		None
  7056 ;; Return value:  Size  Location     Type
  7057 ;;                  1    wreg      void 
  7058 ;; Registers used:
  7059 ;;		wreg, status,2, status,0, cstack
  7060 ;; Tracked objects:
  7061 ;;		On entry : 0/1
  7062 ;;		On exit  : 0/0
  7063 ;;		Unchanged: 0/0
  7064 ;; Data sizes:     COMRAM   BANK0   BANK1
  7065 ;;      Params:         0       0       0
  7066 ;;      Locals:         0       0       0
  7067 ;;      Temps:          0       0       0
  7068 ;;      Totals:         0       0       0
  7069 ;;Total ram usage:        0 bytes
  7070 ;; Hardware stack levels used: 1
  7071 ;; Hardware stack levels required when called: 4
  7072 ;; This function calls:
  7073 ;;		_CantaIR
  7074 ;; This function is called by:
  7075 ;;		_menuMotor
  7076 ;; This function uses a non-reentrant model
  7077 ;;
  7078                           
  7079                           	psect	text33
  7080  0000'                    __ptext33:
  7081                           	callstack 0
  7082  0000'                    _LcScroll:
  7083                           	callstack 25
  7084                           
  7085                           ;LcTLCD.c: 284:     CantaIR(0x10 | 0x08 | 0x00);
  7086                           
  7087                           ;incstack = 0
  7088  0000' 0E18               	movlw	24
  7089  0002' EF00' F000'        	goto	_CantaIR
  7090  0006'                    __end_of_LcScroll:
  7091                           	callstack 0
  7092                           
  7093 ;; *************** function _LcPutTime *****************
  7094 ;; Defined at:
  7095 ;;		line 177 in file "LcTLCD.c"
  7096 ;; Parameters:    Size  Location     Type
  7097 ;;  time            1    wreg     unsigned char 
  7098 ;; Auto vars:     Size  Location     Type
  7099 ;;  time            1   22[COMRAM] unsigned char 
  7100 ;; Return value:  Size  Location     Type
  7101 ;;                  1    wreg      void 
  7102 ;; Registers used:
  7103 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7104 ;; Tracked objects:
  7105 ;;		On entry : 0/1
  7106 ;;		On exit  : 0/0
  7107 ;;		Unchanged: 0/0
  7108 ;; Data sizes:     COMRAM   BANK0   BANK1
  7109 ;;      Params:         0       0       0
  7110 ;;      Locals:         1       0       0
  7111 ;;      Temps:          0       0       0
  7112 ;;      Totals:         1       0       0
  7113 ;;Total ram usage:        1 bytes
  7114 ;; Hardware stack levels used: 1
  7115 ;; Hardware stack levels required when called: 6
  7116 ;; This function calls:
  7117 ;;		_LcPutChar
  7118 ;;		___lbdiv
  7119 ;;		___lbmod
  7120 ;; This function is called by:
  7121 ;;		_menuMotor
  7122 ;;		_motorTimer
  7123 ;; This function uses a non-reentrant model
  7124 ;;
  7125                           
  7126                           	psect	text34
  7127  0000'                    __ptext34:
  7128                           	callstack 0
  7129  0000'                    _LcPutTime:
  7130                           	callstack 23
  7131                           
  7132                           ;incstack = 0
  7133                           ;LcPutTime@time stored from wreg
  7134  0000' 6E00'              	movwf	LcPutTime@time^0,c
  7135                           
  7136                           ;LcTLCD.c: 178:     LcPutChar(time/10 + '0');
  7137  0002' 0E0A               	movlw	10
  7138  0004' 6E00'              	movwf	___lbdiv@divisor^0,c
  7139  0006' 5000'              	movf	LcPutTime@time^0,w,c
  7140  0008' EC00' F000'        	call	___lbdiv
  7141  000C' 0F30               	addlw	48
  7142  000E' EC00' F000'        	call	_LcPutChar
  7143                           
  7144                           ;LcTLCD.c: 179:     LcPutChar(time%10 + '0');
  7145  0012' 0E0A               	movlw	10
  7146  0014' 6E00'              	movwf	___lbmod@divisor^0,c
  7147  0016' 5000'              	movf	LcPutTime@time^0,w,c
  7148  0018' EC00' F000'        	call	___lbmod
  7149  001C' 0F30               	addlw	48
  7150  001E' EF00' F000'        	goto	_LcPutChar
  7151  0022'                    __end_of_LcPutTime:
  7152                           	callstack 0
  7153                           
  7154 ;; *************** function _LcPutScore *****************
  7155 ;; Defined at:
  7156 ;;		line 182 in file "LcTLCD.c"
  7157 ;; Parameters:    Size  Location     Type
  7158 ;;  score           1    wreg     unsigned char 
  7159 ;; Auto vars:     Size  Location     Type
  7160 ;;  score           1   22[COMRAM] unsigned char 
  7161 ;; Return value:  Size  Location     Type
  7162 ;;                  1    wreg      void 
  7163 ;; Registers used:
  7164 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7165 ;; Tracked objects:
  7166 ;;		On entry : 0/1
  7167 ;;		On exit  : 0/0
  7168 ;;		Unchanged: 0/0
  7169 ;; Data sizes:     COMRAM   BANK0   BANK1
  7170 ;;      Params:         0       0       0
  7171 ;;      Locals:         1       0       0
  7172 ;;      Temps:          0       0       0
  7173 ;;      Totals:         1       0       0
  7174 ;;Total ram usage:        1 bytes
  7175 ;; Hardware stack levels used: 1
  7176 ;; Hardware stack levels required when called: 6
  7177 ;; This function calls:
  7178 ;;		_LcPutChar
  7179 ;;		___lbdiv
  7180 ;;		___lbmod
  7181 ;; This function is called by:
  7182 ;;		_menuMotor
  7183 ;; This function uses a non-reentrant model
  7184 ;;
  7185                           
  7186                           	psect	text35
  7187  0000'                    __ptext35:
  7188                           	callstack 0
  7189  0000'                    _LcPutScore:
  7190                           	callstack 23
  7191                           
  7192                           ;incstack = 0
  7193                           ;LcPutScore@score stored from wreg
  7194  0000' 6E00'              	movwf	LcPutScore@score^0,c
  7195                           
  7196                           ;LcTLCD.c: 183:     LcPutChar(' ');
  7197  0002' 0E20               	movlw	32
  7198  0004' EC00' F000'        	call	_LcPutChar
  7199                           
  7200                           ;LcTLCD.c: 184:     if(score > 99){
  7201  0008' 0E63               	movlw	99
  7202  000A' 6400'              	cpfsgt	LcPutScore@score^0,c
  7203  000C' D018               	goto	l4500
  7204                           
  7205                           ;LcTLCD.c: 185:         LcPutChar((score/100)+'0');
  7206  000E' 0E64               	movlw	100
  7207  0010' 6E00'              	movwf	___lbdiv@divisor^0,c
  7208  0012' 5000'              	movf	LcPutScore@score^0,w,c
  7209  0014' EC00' F000'        	call	___lbdiv
  7210  0018' 0F30               	addlw	48
  7211  001A' EC00' F000'        	call	_LcPutChar
  7212                           
  7213                           ;LcTLCD.c: 186:         LcPutChar((score%100)/10+'0');
  7214  001E' 0E0A               	movlw	10
  7215  0020' 6E00'              	movwf	___lbdiv@divisor^0,c
  7216  0022' 0E64               	movlw	100
  7217  0024' 6E00'              	movwf	___lbmod@divisor^0,c
  7218  0026' 5000'              	movf	LcPutScore@score^0,w,c
  7219  0028' EC00' F000'        	call	___lbmod
  7220  002C' EC00' F000'        	call	___lbdiv
  7221  0030' 0F30               	addlw	48
  7222  0032' EC00' F000'        	call	_LcPutChar
  7223                           
  7224                           ;LcTLCD.c: 187:         LcPutChar((score%10)+'0');
  7225  0036' D816               	call	PL86	;call to abstracted procedure
  7226  0038' EC00' F000'        	call	___lbmod
  7227  003C' D010               	goto	L14
  7228  003E'                    l4500:
  7229  003E' 0E09               	movlw	9
  7230  0040' 6400'              	cpfsgt	LcPutScore@score^0,c
  7231  0042' D00C               	goto	l4504
  7232                           
  7233                           ;LcTLCD.c: 189:         LcPutChar((score/10)+'0');
  7234  0044' 0E0A               	movlw	10
  7235  0046' 6E00'              	movwf	___lbdiv@divisor^0,c
  7236  0048' 5000'              	movf	LcPutScore@score^0,w,c
  7237  004A' EC00' F000'        	call	___lbdiv
  7238  004E' 0F30               	addlw	48
  7239  0050' EC00' F000'        	call	_LcPutChar
  7240                           
  7241                           ;LcTLCD.c: 190:         LcPutChar((score%10)+'0');
  7242  0054' D807               	call	PL86	;call to abstracted procedure
  7243  0056' EC00' F000'        	call	___lbmod
  7244  005A' D001               	goto	L14
  7245  005C'                    l4504:
  7246                           
  7247                           ;LcTLCD.c: 192:          LcPutChar((score)+'0');
  7248  005C' 5000'              	movf	LcPutScore@score^0,w,c
  7249  005E'                    L14:
  7250  005E' 0F30               	addlw	48
  7251  0060' EF00' F000'        	goto	_LcPutChar
  7252  0064'                    __end_of_LcPutScore:
  7253                           	callstack 0
  7254  0064'                    PL86:
  7255                           	callstack 23
  7256  0064' 0E0A               	movlw	10
  7257  0066' 6E00'              	movwf	___lbmod@divisor^0,c
  7258  0068' 5000'              	movf	LcPutScore@score^0,w,c
  7259  006A' 0012               	return	
  7260  006C'                    __end_ofPL86:
  7261                           	callstack 0
  7262                           
  7263 ;; *************** function ___lbmod *****************
  7264 ;; Defined at:
  7265 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\lbmod.c"
  7266 ;; Parameters:    Size  Location     Type
  7267 ;;  dividend        1    wreg     unsigned char 
  7268 ;;  divisor         1    5[COMRAM] unsigned char 
  7269 ;; Auto vars:     Size  Location     Type
  7270 ;;  dividend        1    6[COMRAM] unsigned char 
  7271 ;;  rem             1    8[COMRAM] unsigned char 
  7272 ;;  counter         1    7[COMRAM] unsigned char 
  7273 ;; Return value:  Size  Location     Type
  7274 ;;                  1    wreg      unsigned char 
  7275 ;; Registers used:
  7276 ;;		wreg, status,2, status,0
  7277 ;; Tracked objects:
  7278 ;;		On entry : 0/0
  7279 ;;		On exit  : 0/0
  7280 ;;		Unchanged: 0/0
  7281 ;; Data sizes:     COMRAM   BANK0   BANK1
  7282 ;;      Params:         1       0       0
  7283 ;;      Locals:         3       0       0
  7284 ;;      Temps:          0       0       0
  7285 ;;      Totals:         4       0       0
  7286 ;;Total ram usage:        4 bytes
  7287 ;; Hardware stack levels used: 1
  7288 ;; Hardware stack levels required when called: 2
  7289 ;; This function calls:
  7290 ;;		Nothing
  7291 ;; This function is called by:
  7292 ;;		_menuMotor
  7293 ;;		_motorKey
  7294 ;;		_LcPutTime
  7295 ;;		_LcPutScore
  7296 ;; This function uses a non-reentrant model
  7297 ;;
  7298                           
  7299                           	psect	text36
  7300  0000'                    __ptext36:
  7301                           	callstack 0
  7302  0000'                    ___lbmod:
  7303                           	callstack 26
  7304                           
  7305                           ;incstack = 0
  7306                           ;___lbmod@dividend stored from wreg
  7307  0000' 6E00'              	movwf	___lbmod@dividend^0,c
  7308  0002' 0E08               	movlw	8
  7309  0004' 6E00'              	movwf	___lbmod@counter^0,c
  7310  0006' 6A00'              	clrf	___lbmod@rem^0,c
  7311  0008'                    l4296:
  7312  0008' 90D8               	bcf	status,0,c
  7313  000A' 3400'              	rlcf	___lbmod@dividend^0,w,c
  7314  000C' 3400'              	rlcf	___lbmod@rem^0,w,c
  7315  000E' 6E00'              	movwf	___lbmod@rem^0,c
  7316  0010' 90D8               	bcf	status,0,c
  7317  0012' 3600'              	rlcf	___lbmod@dividend^0,f,c
  7318  0014' 5000'              	movf	___lbmod@divisor^0,w,c
  7319  0016' 5C00'              	subwf	___lbmod@rem^0,w,c
  7320  0018' E302               	bnc	l4304
  7321  001A' 5000'              	movf	___lbmod@divisor^0,w,c
  7322  001C' 5E00'              	subwf	___lbmod@rem^0,f,c
  7323  001E'                    l4304:
  7324  001E' 2E00'              	decfsz	___lbmod@counter^0,f,c
  7325  0020' D7F3               	goto	l4296
  7326  0022' 5000'              	movf	___lbmod@rem^0,w,c
  7327  0024' 0012               	return		;funcret
  7328  0026'                    __end_of___lbmod:
  7329                           	callstack 0
  7330                           
  7331 ;; *************** function ___lbdiv *****************
  7332 ;; Defined at:
  7333 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\lbdiv.c"
  7334 ;; Parameters:    Size  Location     Type
  7335 ;;  dividend        1    wreg     unsigned char 
  7336 ;;  divisor         1    9[COMRAM] unsigned char 
  7337 ;; Auto vars:     Size  Location     Type
  7338 ;;  dividend        1   10[COMRAM] unsigned char 
  7339 ;;  quotient        1   12[COMRAM] unsigned char 
  7340 ;;  counter         1   11[COMRAM] unsigned char 
  7341 ;; Return value:  Size  Location     Type
  7342 ;;                  1    wreg      unsigned char 
  7343 ;; Registers used:
  7344 ;;		wreg, status,2, status,0
  7345 ;; Tracked objects:
  7346 ;;		On entry : 0/1
  7347 ;;		On exit  : 0/0
  7348 ;;		Unchanged: 0/0
  7349 ;; Data sizes:     COMRAM   BANK0   BANK1
  7350 ;;      Params:         1       0       0
  7351 ;;      Locals:         3       0       0
  7352 ;;      Temps:          0       0       0
  7353 ;;      Totals:         4       0       0
  7354 ;;Total ram usage:        4 bytes
  7355 ;; Hardware stack levels used: 1
  7356 ;; Hardware stack levels required when called: 2
  7357 ;; This function calls:
  7358 ;;		Nothing
  7359 ;; This function is called by:
  7360 ;;		_menuMotor
  7361 ;;		_LcPutTime
  7362 ;;		_LcPutScore
  7363 ;; This function uses a non-reentrant model
  7364 ;;
  7365                           
  7366                           	psect	text37
  7367  0000'                    __ptext37:
  7368                           	callstack 0
  7369  0000'                    ___lbdiv:
  7370                           	callstack 26
  7371                           
  7372                           ;incstack = 0
  7373                           ;___lbdiv@dividend stored from wreg
  7374  0000' 6E00'              	movwf	___lbdiv@dividend^0,c
  7375  0002' 6A00'              	clrf	___lbdiv@quotient^0,c
  7376  0004' 5000'              	movf	___lbdiv@divisor^0,w,c
  7377  0006' E014               	bz	l4288
  7378  0008' 0E01               	movlw	1
  7379  000A' 6E00'              	movwf	___lbdiv@counter^0,c
  7380  000C' D003               	goto	l4276
  7381  000E'                    l4272:
  7382  000E' 90D8               	bcf	status,0,c
  7383  0010' 3600'              	rlcf	___lbdiv@divisor^0,f,c
  7384  0012' 2A00'              	incf	___lbdiv@counter^0,f,c
  7385  0014'                    l4276:
  7386  0014' AE00'              	btfss	___lbdiv@divisor^0,7,c
  7387  0016' D7FB               	goto	l4272
  7388  0018'                    u2910:
  7389  0018' 90D8               	bcf	status,0,c
  7390  001A' 3600'              	rlcf	___lbdiv@quotient^0,f,c
  7391  001C' 5000'              	movf	___lbdiv@divisor^0,w,c
  7392  001E' 5C00'              	subwf	___lbdiv@dividend^0,w,c
  7393  0020' E303               	bnc	l4284
  7394  0022' 5000'              	movf	___lbdiv@divisor^0,w,c
  7395  0024' 5E00'              	subwf	___lbdiv@dividend^0,f,c
  7396  0026' 8000'              	bsf	___lbdiv@quotient^0,0,c
  7397  0028'                    l4284:
  7398  0028' 90D8               	bcf	status,0,c
  7399  002A' 3200'              	rrcf	___lbdiv@divisor^0,f,c
  7400  002C' 2E00'              	decfsz	___lbdiv@counter^0,f,c
  7401  002E' D7F4               	goto	u2910
  7402  0030'                    l4288:
  7403  0030' 5000'              	movf	___lbdiv@quotient^0,w,c
  7404  0032' 0012               	return		;funcret
  7405  0034'                    __end_of___lbdiv:
  7406                           	callstack 0
  7407                           
  7408 ;; *************** function _LcPutChar *****************
  7409 ;; Defined at:
  7410 ;;		line 144 in file "LcTLCD.c"
  7411 ;; Parameters:    Size  Location     Type
  7412 ;;  c               1    wreg     unsigned char 
  7413 ;; Auto vars:     Size  Location     Type
  7414 ;;  c               1   21[COMRAM] unsigned char 
  7415 ;; Return value:  Size  Location     Type
  7416 ;;                  1    wreg      void 
  7417 ;; Registers used:
  7418 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7419 ;; Tracked objects:
  7420 ;;		On entry : 0/1
  7421 ;;		On exit  : 0/0
  7422 ;;		Unchanged: 0/0
  7423 ;; Data sizes:     COMRAM   BANK0   BANK1
  7424 ;;      Params:         0       0       0
  7425 ;;      Locals:         1       0       0
  7426 ;;      Temps:          0       0       0
  7427 ;;      Totals:         1       0       0
  7428 ;;Total ram usage:        1 bytes
  7429 ;; Hardware stack levels used: 1
  7430 ;; Hardware stack levels required when called: 5
  7431 ;; This function calls:
  7432 ;;		_CantaData
  7433 ;;		_LcGotoXY
  7434 ;;		_WaitForBusy
  7435 ;; This function is called by:
  7436 ;;		_menuMotor
  7437 ;;		_LcPutTime
  7438 ;;		_LcPutScore
  7439 ;;		_motorTimer
  7440 ;; This function uses a non-reentrant model
  7441 ;;
  7442                           
  7443                           	psect	text38
  7444  0000'                    __ptext38:
  7445                           	callstack 0
  7446  0000'                    _LcPutChar:
  7447                           	callstack 23
  7448                           
  7449                           ;incstack = 0
  7450                           ;LcPutChar@c stored from wreg
  7451  0000' 6E00'              	movwf	LcPutChar@c^0,c
  7452                           
  7453                           ;LcTLCD.c: 154:  WaitForBusy(); CantaData(c);
  7454  0002' EC00' F000'        	call	_WaitForBusy	;wreg free
  7455  0006' 5000'              	movf	LcPutChar@c^0,w,c
  7456  0008' EC00' F000'        	call	_CantaData
  7457                           
  7458                           ;LcTLCD.c: 156:  ++ColumnAct;
  7459  000C' 2A00'              	incf	_ColumnAct^0,f,c
  7460                           
  7461                           ;LcTLCD.c: 157:  if (Rows == 3) {
  7462  000E' 0E03               	movlw	3
  7463  0010' 1800'              	xorwf	_Rows^0,w,c
  7464  0012' E107               	bnz	l4242
  7465                           
  7466                           ;LcTLCD.c: 158:   if (ColumnAct >= 20) {
  7467  0014' 0E13               	movlw	19
  7468  0016' 6400'              	cpfsgt	_ColumnAct^0,c
  7469  0018' 0C13               	retlw	19
  7470                           
  7471                           ;LcTLCD.c: 159:    ColumnAct = 0;
  7472  001A' 6A00'              	clrf	_ColumnAct^0,c
  7473                           
  7474                           ;LcTLCD.c: 160:    if (++RowAct >= 4) RowAct = 0;
  7475  001C' 2A00'              	incf	_RowAct^0,f,c
  7476  001E' 0E03               	movlw	3
  7477  0020' D009               	goto	L11
  7478  0022'                    l4242:
  7479                           
  7480                           ;LcTLCD.c: 164:  if (Rows == 2) {
  7481  0022' 0E02               	movlw	2
  7482  0024' 1800'              	xorwf	_Rows^0,w,c
  7483  0026' E10A               	bnz	l4254
  7484                           
  7485                           ;LcTLCD.c: 165:   if (ColumnAct >= 40) {
  7486  0028' 0E27               	movlw	39
  7487  002A' 6400'              	cpfsgt	_ColumnAct^0,c
  7488  002C' 0C27               	retlw	39
  7489                           
  7490                           ;LcTLCD.c: 166:    ColumnAct = 0;
  7491  002E' 6A00'              	clrf	_ColumnAct^0,c
  7492                           
  7493                           ;LcTLCD.c: 167:    if (++RowAct >= 2) RowAct = 0;
  7494  0030' 2A00'              	incf	_RowAct^0,f,c
  7495  0032' 0E01               	movlw	1
  7496  0034'                    L11:
  7497  0034' 6400'              	cpfsgt	_RowAct^0,c
  7498  0036' D009               	goto	l4260
  7499  0038' 6A00'              	clrf	_RowAct^0,c
  7500  003A' D007               	goto	l4260
  7501  003C'                    l4254:
  7502                           
  7503                           ;LcTLCD.c: 171:  if (RowAct == 1) {
  7504  003C' 0400'              	decf	_RowAct^0,w,c
  7505  003E' A4D8               	btfss	status,2,c
  7506  0040' 0012               	return	
  7507                           
  7508                           ;LcTLCD.c: 172:   if (ColumnAct >= 40) ColumnAct = 0;
  7509  0042' 0E27               	movlw	39
  7510  0044' 6400'              	cpfsgt	_ColumnAct^0,c
  7511  0046' D001               	goto	l4260
  7512  0048' 6A00'              	clrf	_ColumnAct^0,c
  7513  004A'                    l4260:
  7514                           
  7515                           ;LcTLCD.c: 173:   LcGotoXY(ColumnAct, RowAct);
  7516  004A' C02B' F00D'        	movff	_RowAct,LcGotoXY@Row
  7517  004E' 5000'              	movf	_ColumnAct^0,w,c
  7518  0050' EF00' F000'        	goto	_LcGotoXY
  7519  0054'                    __end_of_LcPutChar:
  7520                           	callstack 0
  7521                           
  7522 ;; *************** function _LcGotoXY *****************
  7523 ;; Defined at:
  7524 ;;		line 117 in file "LcTLCD.c"
  7525 ;; Parameters:    Size  Location     Type
  7526 ;;  Column          1    wreg     unsigned char 
  7527 ;;  Row             1   13[COMRAM] unsigned char 
  7528 ;; Auto vars:     Size  Location     Type
  7529 ;;  Column          1   20[COMRAM] unsigned char 
  7530 ;;  Fisics          2   18[COMRAM] int 
  7531 ;; Return value:  Size  Location     Type
  7532 ;;                  1    wreg      void 
  7533 ;; Registers used:
  7534 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7535 ;; Tracked objects:
  7536 ;;		On entry : 0/0
  7537 ;;		On exit  : 0/0
  7538 ;;		Unchanged: 0/0
  7539 ;; Data sizes:     COMRAM   BANK0   BANK1
  7540 ;;      Params:         1       0       0
  7541 ;;      Locals:         5       0       0
  7542 ;;      Temps:          2       0       0
  7543 ;;      Totals:         8       0       0
  7544 ;;Total ram usage:        8 bytes
  7545 ;; Hardware stack levels used: 1
  7546 ;; Hardware stack levels required when called: 4
  7547 ;; This function calls:
  7548 ;;		_CantaIR
  7549 ;;		_WaitForBusy
  7550 ;; This function is called by:
  7551 ;;		_main
  7552 ;;		_menuMotor
  7553 ;;		_LcPutChar
  7554 ;;		_motorTimer
  7555 ;; This function uses a non-reentrant model
  7556 ;;
  7557                           
  7558                           	psect	text39
  7559  0000'                    __ptext39:
  7560                           	callstack 0
  7561  0000'                    _LcGotoXY:
  7562                           	callstack 23
  7563                           
  7564                           ;incstack = 0
  7565                           ;LcGotoXY@Column stored from wreg
  7566  0000' 6E00'              	movwf	LcGotoXY@Column^0,c
  7567                           
  7568                           ;LcTLCD.c: 121:  int Fisics;;LcTLCD.c: 123:  switch (Rows) {
  7569  0002' D030               	goto	l4192
  7570  0004'                    l4172:
  7571                           
  7572                           ;LcTLCD.c: 125:    Fisics = Column + (!Row ? 0 : 0x40); break;
  7573  0004' 5000'              	movf	LcGotoXY@Row^0,w,c
  7574  0006' E004               	bz	l814
  7575  0008' 6A00'              	clrf	(_LcGotoXY$1446+1)^0,c
  7576  000A' 0E40               	movlw	64
  7577  000C' 6E00'              	movwf	_LcGotoXY$1446^0,c
  7578  000E' D002               	goto	l4176
  7579  0010'                    l814:
  7580  0010' 6A00'              	clrf	_LcGotoXY$1446^0,c
  7581  0012' 6A00'              	clrf	(_LcGotoXY$1446+1)^0,c
  7582  0014'                    l4176:
  7583  0014' 5000'              	movf	LcGotoXY@Column^0,w,c
  7584  0016' 2400'              	addwf	_LcGotoXY$1446^0,w,c
  7585  0018' 6E00'              	movwf	LcGotoXY@Fisics^0,c
  7586  001A' 0E00               	movlw	0
  7587  001C' 2000'              	addwfc	(_LcGotoXY$1446+1)^0,w,c
  7588  001E' 6E00'              	movwf	(LcGotoXY@Fisics+1)^0,c
  7589  0020' D02E               	goto	l4194
  7590  0022'                    l818:
  7591                           
  7592                           ;LcTLCD.c: 127:    Fisics = Column;
  7593  0022' C014' F012'        	movff	LcGotoXY@Column,LcGotoXY@Fisics
  7594  0026' 6A00'              	clrf	(LcGotoXY@Fisics+1)^0,c
  7595                           
  7596                           ;LcTLCD.c: 128:    if (Row == 1) Fisics += 0x40; else
  7597  0028' 0400'              	decf	LcGotoXY@Row^0,w,c
  7598  002A' E102               	bnz	l4182
  7599  002C' 0E40               	movlw	64
  7600  002E' D004               	goto	L12
  7601  0030'                    l4182:
  7602                           
  7603                           ;LcTLCD.c: 129:    if (Row == 2) Fisics += Columns; else
  7604  0030' 0E02               	movlw	2
  7605  0032' 1800'              	xorwf	LcGotoXY@Row^0,w,c
  7606  0034' E104               	bnz	l4186
  7607  0036' 5000'              	movf	_Columns^0,w,c
  7608  0038'                    L12:
  7609  0038' 2600'              	addwf	LcGotoXY@Fisics^0,f,c
  7610  003A' 0E00               	movlw	0
  7611  003C' D00D               	goto	L13
  7612  003E'                    l4186:
  7613                           
  7614                           ;LcTLCD.c: 130:    if (Row == 3) Fisics += 0x40+Columns;
  7615  003E' 0E03               	movlw	3
  7616  0040' 1800'              	xorwf	LcGotoXY@Row^0,w,c
  7617  0042' E11D               	bnz	l4194
  7618  0044' 5000'              	movf	_Columns^0,w,c
  7619  0046' 6E00'              	movwf	??_LcGotoXY^0,c
  7620  0048' 6A00'              	clrf	(??_LcGotoXY+1)^0,c
  7621  004A' 0E40               	movlw	64
  7622  004C' 2600'              	addwf	??_LcGotoXY^0,f,c
  7623  004E' 0E00               	movlw	0
  7624  0050' 2200'              	addwfc	(??_LcGotoXY+1)^0,f,c
  7625  0052' 5000'              	movf	??_LcGotoXY^0,w,c
  7626  0054' 2600'              	addwf	LcGotoXY@Fisics^0,f,c
  7627  0056' 5000'              	movf	(??_LcGotoXY+1)^0,w,c
  7628  0058'                    L13:
  7629  0058' 2200'              	addwfc	(LcGotoXY@Fisics+1)^0,f,c
  7630                           
  7631                           ;LcTLCD.c: 131:    break;
  7632  005A' D011               	goto	l4194
  7633  005C'                    l825:
  7634                           
  7635                           ;LcTLCD.c: 134:    Fisics = Column; break;
  7636  005C' C014' F012'        	movff	LcGotoXY@Column,LcGotoXY@Fisics
  7637  0060' 6A00'              	clrf	(LcGotoXY@Fisics+1)^0,c
  7638  0062' D00D               	goto	l4194
  7639  0064'                    l4192:
  7640  0064' 5000'              	movf	_Rows^0,w,c
  7641  0066' 6E00'              	movwf	??_LcGotoXY^0,c
  7642  0068' 6A00'              	clrf	(??_LcGotoXY+1)^0,c
  7643                           
  7644                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7645                           ; Switch size 1, requested type "space"
  7646                           ; Number of cases is 1, Range of values is 0 to 0
  7647                           ; switch strategies available:
  7648                           ; Name         Instructions Cycles
  7649                           ; simple_byte            4     3 (average)
  7650                           ;	Chosen strategy is simple_byte
  7651  006A' 5000'              	movf	(??_LcGotoXY+1)^0,w,c
  7652  006C' E1F7               	bnz	l825
  7653                           
  7654                           ; Switch size 1, requested type "space"
  7655                           ; Number of cases is 3, Range of values is 1 to 4
  7656                           ; switch strategies available:
  7657                           ; Name         Instructions Cycles
  7658                           ; simple_byte           10     6 (average)
  7659                           ;	Chosen strategy is simple_byte
  7660  006E' 5000'              	movf	??_LcGotoXY^0,w,c
  7661  0070' 0A01               	xorlw	1	; case 1
  7662  0072' E0F4               	bz	l825
  7663  0074' 0A03               	xorlw	3	; case 2
  7664  0076' E0C6               	bz	l4172
  7665  0078' 0A06               	xorlw	6	; case 4
  7666  007A' E0D3               	bz	l818
  7667  007C' D7EF               	goto	l825
  7668  007E'                    l4194:
  7669                           
  7670                           ;LcTLCD.c: 137:  WaitForBusy();
  7671  007E' EC00' F000'        	call	_WaitForBusy	;wreg free
  7672                           
  7673                           ;LcTLCD.c: 138:  CantaIR(0x80 | Fisics);
  7674  0082' 5000'              	movf	LcGotoXY@Fisics^0,w,c
  7675  0084' 0980               	iorlw	128
  7676  0086' EC00' F000'        	call	_CantaIR
  7677                           
  7678                           ;LcTLCD.c: 140:  RowAct = Row;
  7679  008A' C00D' F02B'        	movff	LcGotoXY@Row,_RowAct
  7680                           
  7681                           ;LcTLCD.c: 141:  ColumnAct = Column;
  7682  008E' C014' F02A'        	movff	LcGotoXY@Column,_ColumnAct
  7683  0092' 0012               	return		;funcret
  7684  0094'                    __end_of_LcGotoXY:
  7685                           	callstack 0
  7686                           
  7687 ;; *************** function _CantaData *****************
  7688 ;; Defined at:
  7689 ;;		line 239 in file "LcTLCD.c"
  7690 ;; Parameters:    Size  Location     Type
  7691 ;;  Data            1    wreg     unsigned char 
  7692 ;; Auto vars:     Size  Location     Type
  7693 ;;  Data            1    7[COMRAM] unsigned char 
  7694 ;; Return value:  Size  Location     Type
  7695 ;;                  1    wreg      void 
  7696 ;; Registers used:
  7697 ;;		wreg, status,2, status,0, cstack
  7698 ;; Tracked objects:
  7699 ;;		On entry : 0/1
  7700 ;;		On exit  : 0/0
  7701 ;;		Unchanged: 0/0
  7702 ;; Data sizes:     COMRAM   BANK0   BANK1
  7703 ;;      Params:         0       0       0
  7704 ;;      Locals:         1       0       0
  7705 ;;      Temps:          0       0       0
  7706 ;;      Totals:         1       0       0
  7707 ;;Total ram usage:        1 bytes
  7708 ;; Hardware stack levels used: 1
  7709 ;; Hardware stack levels required when called: 3
  7710 ;; This function calls:
  7711 ;;		_CantaPartAlta
  7712 ;;		_CantaPartBaixa
  7713 ;; This function is called by:
  7714 ;;		_LcPutChar
  7715 ;; This function uses a non-reentrant model
  7716 ;;
  7717                           
  7718                           	psect	text40
  7719  0000'                    __ptext40:
  7720                           	callstack 0
  7721  0000'                    _CantaData:
  7722                           	callstack 24
  7723                           
  7724                           ;incstack = 0
  7725                           ;CantaData@Data stored from wreg
  7726  0000' 6E00'              	movwf	CantaData@Data^0,c
  7727                           
  7728                           ;LcTLCD.c: 240:  (TRISBbits.TRISB0 = TRISDbits.TRISD2 = TRISDbits.TRISD1 = TRISDbits.TRI
      +                          SD0 = 0);
  7729  0002' 9095               	bcf	149,0,c	;volatile
  7730  0004' 9295               	bcf	149,1,c	;volatile
  7731  0006' 9495               	bcf	149,2,c	;volatile
  7732  0008' 9093               	bcf	147,0,c	;volatile
  7733                           
  7734                           ;LcTLCD.c: 241:  (LATCbits.LATC0 = 1);
  7735  000A' 808B               	bsf	139,0,c	;volatile
  7736                           
  7737                           ;LcTLCD.c: 242:  (LATCbits.LATC1 = 0);
  7738  000C' 928B               	bcf	139,1,c	;volatile
  7739                           
  7740                           ;LcTLCD.c: 243:  (LATCbits.LATC2 = 1);
  7741  000E' 848B               	bsf	139,2,c	;volatile
  7742                           
  7743                           ;LcTLCD.c: 244:  CantaPartAlta(Data);
  7744  0010' 5000'              	movf	CantaData@Data^0,w,c
  7745  0012' EC00' F000'        	call	_CantaPartAlta
  7746                           
  7747                           ;LcTLCD.c: 245:  (LATCbits.LATC2 = 1);
  7748                           
  7749                           ;LcTLCD.c: 246:  (LATCbits.LATC2 = 0);
  7750                           
  7751                           ;LcTLCD.c: 247:  (LATCbits.LATC2 = 0);
  7752                           
  7753                           ;LcTLCD.c: 248:  (LATCbits.LATC2 = 1);
  7754  0016' D80B               	call	PL78	;call to abstracted procedure
  7755                           
  7756                           ;LcTLCD.c: 249:  CantaPartBaixa(Data);
  7757  0018' 5000'              	movf	CantaData@Data^0,w,c
  7758  001A' EC00' F000'        	call	_CantaPartBaixa
  7759                           
  7760                           ;LcTLCD.c: 250:  (LATCbits.LATC2 = 1);
  7761                           
  7762                           ;LcTLCD.c: 251:  (LATCbits.LATC2 = 0);
  7763                           
  7764                           ;LcTLCD.c: 252:  (TRISBbits.TRISB0 = TRISDbits.TRISD2 = TRISDbits.TRISD1 = TRISDbits.TRI
      +                          SD0 = 1);
  7765  001E' D000               	goto	PL56	;call to abstracted procedure
  7766  0020'                    __end_of_CantaData:
  7767                           	callstack 0
  7768  0020'                    PL56:
  7769                           	callstack 23
  7770  0020' 848B               	bsf	139,2,c	;volatile
  7771  0022' 948B               	bcf	139,2,c	;volatile
  7772  0024' 8095               	bsf	149,0,c	;volatile
  7773  0026' 8295               	bsf	149,1,c	;volatile
  7774  0028' 8495               	bsf	149,2,c	;volatile
  7775  002A' 8093               	bsf	147,0,c	;volatile
  7776  002C' 0012               	return		;funcret
  7777  002E'                    __end_ofPL56:
  7778                           	callstack 0
  7779  002E'                    PL78:
  7780                           	callstack 23
  7781  002E' 848B               	bsf	139,2,c	;volatile
  7782  0030' 948B               	bcf	139,2,c	;volatile
  7783  0032' 948B               	bcf	139,2,c	;volatile
  7784  0034' 848B               	bsf	139,2,c	;volatile
  7785  0036' 0012               	return	
  7786  0038'                    __end_ofPL78:
  7787                           	callstack 0
  7788                           
  7789 ;; *************** function _LcCursorOn *****************
  7790 ;; Defined at:
  7791 ;;		line 103 in file "LcTLCD.c"
  7792 ;; Parameters:    Size  Location     Type
  7793 ;;		None
  7794 ;; Auto vars:     Size  Location     Type
  7795 ;;		None
  7796 ;; Return value:  Size  Location     Type
  7797 ;;                  1    wreg      void 
  7798 ;; Registers used:
  7799 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7800 ;; Tracked objects:
  7801 ;;		On entry : 0/1
  7802 ;;		On exit  : 0/0
  7803 ;;		Unchanged: 0/0
  7804 ;; Data sizes:     COMRAM   BANK0   BANK1
  7805 ;;      Params:         0       0       0
  7806 ;;      Locals:         0       0       0
  7807 ;;      Temps:          0       0       0
  7808 ;;      Totals:         0       0       0
  7809 ;;Total ram usage:        0 bytes
  7810 ;; Hardware stack levels used: 1
  7811 ;; Hardware stack levels required when called: 4
  7812 ;; This function calls:
  7813 ;;		_CantaIR
  7814 ;;		_WaitForBusy
  7815 ;; This function is called by:
  7816 ;;		_menuMotor
  7817 ;; This function uses a non-reentrant model
  7818 ;;
  7819                           
  7820                           	psect	text41
  7821  0000'                    __ptext41:
  7822                           	callstack 0
  7823  0000'                    _LcCursorOn:
  7824                           	callstack 25
  7825                           
  7826                           ;LcTLCD.c: 106:  WaitForBusy();
  7827                           
  7828                           ;incstack = 0
  7829  0000' EC00' F000'        	call	_WaitForBusy	;wreg free
  7830                           
  7831                           ;LcTLCD.c: 107:  CantaIR(0x08 | 0x04 | 0x02);
  7832  0004' 0E0E               	movlw	14
  7833  0006' EF00' F000'        	goto	_CantaIR
  7834  000A'                    __end_of_LcCursorOn:
  7835                           	callstack 0
  7836                           
  7837 ;; *************** function _LcCursorOff *****************
  7838 ;; Defined at:
  7839 ;;		line 110 in file "LcTLCD.c"
  7840 ;; Parameters:    Size  Location     Type
  7841 ;;		None
  7842 ;; Auto vars:     Size  Location     Type
  7843 ;;		None
  7844 ;; Return value:  Size  Location     Type
  7845 ;;                  1    wreg      void 
  7846 ;; Registers used:
  7847 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7848 ;; Tracked objects:
  7849 ;;		On entry : 0/1
  7850 ;;		On exit  : 0/0
  7851 ;;		Unchanged: 0/0
  7852 ;; Data sizes:     COMRAM   BANK0   BANK1
  7853 ;;      Params:         0       0       0
  7854 ;;      Locals:         0       0       0
  7855 ;;      Temps:          0       0       0
  7856 ;;      Totals:         0       0       0
  7857 ;;Total ram usage:        0 bytes
  7858 ;; Hardware stack levels used: 1
  7859 ;; Hardware stack levels required when called: 4
  7860 ;; This function calls:
  7861 ;;		_CantaIR
  7862 ;;		_WaitForBusy
  7863 ;; This function is called by:
  7864 ;;		_menuMotor
  7865 ;; This function uses a non-reentrant model
  7866 ;;
  7867                           
  7868                           	psect	text42
  7869  0000'                    __ptext42:
  7870                           	callstack 0
  7871  0000'                    _LcCursorOff:
  7872                           	callstack 25
  7873                           
  7874                           ;LcTLCD.c: 113:  WaitForBusy();
  7875                           
  7876                           ;incstack = 0
  7877  0000' EC00' F000'        	call	_WaitForBusy	;wreg free
  7878                           
  7879                           ;LcTLCD.c: 114:  CantaIR(0x08 | 0x04);
  7880  0004' 0E0C               	movlw	12
  7881  0006' EF00' F000'        	goto	_CantaIR
  7882  000A'                    __end_of_LcCursorOff:
  7883                           	callstack 0
  7884                           
  7885 ;; *************** function _LcClear *****************
  7886 ;; Defined at:
  7887 ;;		line 96 in file "LcTLCD.c"
  7888 ;; Parameters:    Size  Location     Type
  7889 ;;		None
  7890 ;; Auto vars:     Size  Location     Type
  7891 ;;		None
  7892 ;; Return value:  Size  Location     Type
  7893 ;;                  1    wreg      void 
  7894 ;; Registers used:
  7895 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7896 ;; Tracked objects:
  7897 ;;		On entry : 0/0
  7898 ;;		On exit  : 0/0
  7899 ;;		Unchanged: 0/0
  7900 ;; Data sizes:     COMRAM   BANK0   BANK1
  7901 ;;      Params:         0       0       0
  7902 ;;      Locals:         0       0       0
  7903 ;;      Temps:          0       0       0
  7904 ;;      Totals:         0       0       0
  7905 ;;Total ram usage:        0 bytes
  7906 ;; Hardware stack levels used: 1
  7907 ;; Hardware stack levels required when called: 4
  7908 ;; This function calls:
  7909 ;;		_CantaIR
  7910 ;;		_Espera
  7911 ;;		_WaitForBusy
  7912 ;; This function is called by:
  7913 ;;		_main
  7914 ;;		_menuMotor
  7915 ;; This function uses a non-reentrant model
  7916 ;;
  7917                           
  7918                           	psect	text43
  7919  0000'                    __ptext43:
  7920                           	callstack 0
  7921  0000'                    _LcClear:
  7922                           	callstack 25
  7923                           
  7924                           ;LcTLCD.c: 99:  WaitForBusy(); CantaIR(0x01);
  7925                           
  7926                           ;incstack = 0
  7927  0000' EC00' F000'        	call	_WaitForBusy	;wreg free
  7928  0004' 0E01               	movlw	1
  7929  0006' EC00' F000'        	call	_CantaIR
  7930                           
  7931                           ;LcTLCD.c: 100:  Espera(Timer, 3);
  7932  000A' EC00' F000'        	call	PL32	;call to abstracted procedure
  7933  000E' 0E03               	movlw	3
  7934  0010' 6E00'              	movwf	Espera@ms^0,c
  7935  0012' EF00' F000'        	goto	_Espera	;wreg free
  7936  0016'                    __end_of_LcClear:
  7937                           	callstack 0
  7938                           
  7939 ;; *************** function _KeyResetValue *****************
  7940 ;; Defined at:
  7941 ;;		line 112 in file "Keypad.c"
  7942 ;; Parameters:    Size  Location     Type
  7943 ;;		None
  7944 ;; Auto vars:     Size  Location     Type
  7945 ;;		None
  7946 ;; Return value:  Size  Location     Type
  7947 ;;                  1    wreg      void 
  7948 ;; Registers used:
  7949 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7950 ;; Tracked objects:
  7951 ;;		On entry : 0/0
  7952 ;;		On exit  : 0/0
  7953 ;;		Unchanged: 0/0
  7954 ;; Data sizes:     COMRAM   BANK0   BANK1
  7955 ;;      Params:         0       0       0
  7956 ;;      Locals:         0       0       0
  7957 ;;      Temps:          0       0       0
  7958 ;;      Totals:         0       0       0
  7959 ;;Total ram usage:        0 bytes
  7960 ;; Hardware stack levels used: 1
  7961 ;; Hardware stack levels required when called: 3
  7962 ;; This function calls:
  7963 ;;		_TiResetTics
  7964 ;; This function is called by:
  7965 ;;		_menuMotor
  7966 ;;		_motorKey
  7967 ;; This function uses a non-reentrant model
  7968 ;;
  7969                           
  7970                           	psect	text44
  7971  0000'                    __ptext44:
  7972                           	callstack 0
  7973  0000'                    _KeyResetValue:
  7974                           	callstack 26
  7975                           
  7976                           ;Keypad.c: 113:     TiResetTics(timerKeypad);
  7977                           
  7978                           ;incstack = 0
  7979  0000' 5000'              	movf	_timerKeypad^0,w,c
  7980  0002' EC00' F000'        	call	_TiResetTics
  7981                           
  7982                           ;Keypad.c: 114:     SMS = 0;
  7983  0006' 6A00'              	clrf	_SMS^0,c
  7984                           
  7985                           ;Keypad.c: 115:     press=0;
  7986  0008' 6A00'              	clrf	_press^0,c
  7987                           
  7988                           ;Keypad.c: 116:     rotating = 0;
  7989  000A' 6A00'              	clrf	_rotating^0,c
  7990                           
  7991                           ;Keypad.c: 117:     valueOld = 10;
  7992  000C' 0E0A               	movlw	10
  7993  000E' 6E00'              	movwf	_valueOld^0,c
  7994  0010' 0C0A               	retlw	10	;funcret
  7995  0012'                    __end_of_KeyResetValue:
  7996                           	callstack 0
  7997                           
  7998 ;; *************** function _KeyGetValue *****************
  7999 ;; Defined at:
  8000 ;;		line 119 in file "Keypad.c"
  8001 ;; Parameters:    Size  Location     Type
  8002 ;;		None
  8003 ;; Auto vars:     Size  Location     Type
  8004 ;;		None
  8005 ;; Return value:  Size  Location     Type
  8006 ;;                  1    wreg      unsigned char 
  8007 ;; Registers used:
  8008 ;;		wreg, status,2
  8009 ;; Tracked objects:
  8010 ;;		On entry : 0/1
  8011 ;;		On exit  : 0/0
  8012 ;;		Unchanged: 0/0
  8013 ;; Data sizes:     COMRAM   BANK0   BANK1
  8014 ;;      Params:         0       0       0
  8015 ;;      Locals:         0       0       0
  8016 ;;      Temps:          0       0       0
  8017 ;;      Totals:         0       0       0
  8018 ;;Total ram usage:        0 bytes
  8019 ;; Hardware stack levels used: 1
  8020 ;; Hardware stack levels required when called: 2
  8021 ;; This function calls:
  8022 ;;		Nothing
  8023 ;; This function is called by:
  8024 ;;		_menuMotor
  8025 ;; This function uses a non-reentrant model
  8026 ;;
  8027                           
  8028                           	psect	text45
  8029  0000'                    __ptext45:
  8030                           	callstack 0
  8031  0000'                    _KeyGetValue:
  8032                           	callstack 27
  8033                           
  8034                           ;Keypad.c: 120:     return value;
  8035                           
  8036                           ;incstack = 0
  8037  0000' 5000'              	movf	_value^0,w,c
  8038  0002' 0012               	return		;funcret
  8039  0004'                    __end_of_KeyGetValue:
  8040                           	callstack 0
  8041                           
  8042 ;; *************** function _KeyGetSMS *****************
  8043 ;; Defined at:
  8044 ;;		line 122 in file "Keypad.c"
  8045 ;; Parameters:    Size  Location     Type
  8046 ;;		None
  8047 ;; Auto vars:     Size  Location     Type
  8048 ;;  auxSMS          1    5[COMRAM] unsigned char 
  8049 ;; Return value:  Size  Location     Type
  8050 ;;                  1    wreg      unsigned char 
  8051 ;; Registers used:
  8052 ;;		wreg, status,2
  8053 ;; Tracked objects:
  8054 ;;		On entry : 0/1
  8055 ;;		On exit  : 0/0
  8056 ;;		Unchanged: 0/0
  8057 ;; Data sizes:     COMRAM   BANK0   BANK1
  8058 ;;      Params:         0       0       0
  8059 ;;      Locals:         1       0       0
  8060 ;;      Temps:          0       0       0
  8061 ;;      Totals:         1       0       0
  8062 ;;Total ram usage:        1 bytes
  8063 ;; Hardware stack levels used: 1
  8064 ;; Hardware stack levels required when called: 2
  8065 ;; This function calls:
  8066 ;;		Nothing
  8067 ;; This function is called by:
  8068 ;;		_menuMotor
  8069 ;; This function uses a non-reentrant model
  8070 ;;
  8071                           
  8072                           	psect	text46
  8073  0000'                    __ptext46:
  8074                           	callstack 0
  8075  0000'                    _KeyGetSMS:
  8076                           	callstack 27
  8077                           
  8078                           ;Keypad.c: 123:     char auxSMS = SMS;
  8079                           
  8080                           ;incstack = 0
  8081  0000' C02E' F005'        	movff	_SMS,KeyGetSMS@auxSMS
  8082                           
  8083                           ;Keypad.c: 124:     SMS = 0;
  8084  0004' 6A00'              	clrf	_SMS^0,c
  8085                           
  8086                           ;Keypad.c: 125:     return auxSMS;
  8087  0006' 5000'              	movf	KeyGetSMS@auxSMS^0,w,c
  8088  0008' 0012               	return		;funcret
  8089  000A'                    __end_of_KeyGetSMS:
  8090                           	callstack 0
  8091                           
  8092 ;; *************** function _KeyGetPress *****************
  8093 ;; Defined at:
  8094 ;;		line 135 in file "Keypad.c"
  8095 ;; Parameters:    Size  Location     Type
  8096 ;;		None
  8097 ;; Auto vars:     Size  Location     Type
  8098 ;;		None
  8099 ;; Return value:  Size  Location     Type
  8100 ;;                  1    wreg      unsigned char 
  8101 ;; Registers used:
  8102 ;;		wreg, status,2, status,0
  8103 ;; Tracked objects:
  8104 ;;		On entry : 0/1
  8105 ;;		On exit  : 0/0
  8106 ;;		Unchanged: 0/0
  8107 ;; Data sizes:     COMRAM   BANK0   BANK1
  8108 ;;      Params:         0       0       0
  8109 ;;      Locals:         0       0       0
  8110 ;;      Temps:          0       0       0
  8111 ;;      Totals:         0       0       0
  8112 ;;Total ram usage:        0 bytes
  8113 ;; Hardware stack levels used: 1
  8114 ;; Hardware stack levels required when called: 2
  8115 ;; This function calls:
  8116 ;;		Nothing
  8117 ;; This function is called by:
  8118 ;;		_menuMotor
  8119 ;; This function uses a non-reentrant model
  8120 ;;
  8121                           
  8122                           	psect	text47
  8123  0000'                    __ptext47:
  8124                           	callstack 0
  8125  0000'                    _KeyGetPress:
  8126                           	callstack 27
  8127                           
  8128                           ;Keypad.c: 136:     return (press + rotating);
  8129                           
  8130                           ;incstack = 0
  8131  0000' 5000'              	movf	_press^0,w,c
  8132  0002' 2400'              	addwf	_rotating^0,w,c
  8133  0004' 0012               	return		;funcret
  8134  0006'                    __end_of_KeyGetPress:
  8135                           	callstack 0
  8136                           
  8137 ;; *************** function _KeyGetNumber *****************
  8138 ;; Defined at:
  8139 ;;		line 130 in file "Keypad.c"
  8140 ;; Parameters:    Size  Location     Type
  8141 ;;		None
  8142 ;; Auto vars:     Size  Location     Type
  8143 ;;  auxValue        1    5[COMRAM] unsigned char 
  8144 ;; Return value:  Size  Location     Type
  8145 ;;                  1    wreg      unsigned char 
  8146 ;; Registers used:
  8147 ;;		wreg, status,2
  8148 ;; Tracked objects:
  8149 ;;		On entry : 0/1
  8150 ;;		On exit  : 0/0
  8151 ;;		Unchanged: 0/0
  8152 ;; Data sizes:     COMRAM   BANK0   BANK1
  8153 ;;      Params:         0       0       0
  8154 ;;      Locals:         1       0       0
  8155 ;;      Temps:          0       0       0
  8156 ;;      Totals:         1       0       0
  8157 ;;Total ram usage:        1 bytes
  8158 ;; Hardware stack levels used: 1
  8159 ;; Hardware stack levels required when called: 2
  8160 ;; This function calls:
  8161 ;;		Nothing
  8162 ;; This function is called by:
  8163 ;;		_menuMotor
  8164 ;; This function uses a non-reentrant model
  8165 ;;
  8166                           
  8167                           	psect	text48
  8168  0000'                    __ptext48:
  8169                           	callstack 0
  8170  0000'                    _KeyGetNumber:
  8171                           	callstack 27
  8172                           
  8173                           ;Keypad.c: 131:     char auxValue = value;
  8174                           
  8175                           ;incstack = 0
  8176  0000' C030' F005'        	movff	_value,KeyGetNumber@auxValue
  8177                           
  8178                           ;Keypad.c: 132:     value = 0;
  8179  0004' 6A00'              	clrf	_value^0,c
  8180                           
  8181                           ;Keypad.c: 133:     return auxValue;
  8182  0006' 5000'              	movf	KeyGetNumber@auxValue^0,w,c
  8183  0008' 0012               	return		;funcret
  8184  000A'                    __end_of_KeyGetNumber:
  8185                           	callstack 0
  8186                           
  8187 ;; *************** function _initTX *****************
  8188 ;; Defined at:
  8189 ;;		line 15 in file "TX.c"
  8190 ;; Parameters:    Size  Location     Type
  8191 ;;		None
  8192 ;; Auto vars:     Size  Location     Type
  8193 ;;		None
  8194 ;; Return value:  Size  Location     Type
  8195 ;;                  1    wreg      void 
  8196 ;; Registers used:
  8197 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8198 ;; Tracked objects:
  8199 ;;		On entry : 0/0
  8200 ;;		On exit  : 0/0
  8201 ;;		Unchanged: 0/0
  8202 ;; Data sizes:     COMRAM   BANK0   BANK1
  8203 ;;      Params:         0       0       0
  8204 ;;      Locals:         0       0       0
  8205 ;;      Temps:          0       0       0
  8206 ;;      Totals:         0       0       0
  8207 ;;Total ram usage:        0 bytes
  8208 ;; Hardware stack levels used: 1
  8209 ;; Hardware stack levels required when called: 3
  8210 ;; This function calls:
  8211 ;;		_TiGetTimer
  8212 ;;		_TiResetTics
  8213 ;; This function is called by:
  8214 ;;		_main
  8215 ;; This function uses a non-reentrant model
  8216 ;;
  8217                           
  8218                           	psect	text49
  8219  0000'                    __ptext49:
  8220                           	callstack 0
  8221  0000'                    _initTX:
  8222                           	callstack 27
  8223                           
  8224                           ;TX.c: 16:     timerRX = TiGetTimer();
  8225                           
  8226                           ;incstack = 0
  8227  0000' EC00' F000'        	call	_TiGetTimer	;wreg free
  8228  0004' 6E00'              	movwf	_timerRX^0,c
  8229                           
  8230                           ;TX.c: 17:     timerTX = TiGetTimer();
  8231  0006' EC00' F000'        	call	_TiGetTimer	;wreg free
  8232  000A' 6E00'              	movwf	_timerTX^0,c
  8233                           
  8234                           ;TX.c: 18:     TiResetTics(timerRX);
  8235  000C' 5000'              	movf	_timerRX^0,w,c
  8236  000E' EC00' F000'        	call	_TiResetTics
  8237                           
  8238                           ;TX.c: 19:     TiResetTics(timerTX);
  8239  0012' 5000'              	movf	_timerTX^0,w,c
  8240  0014' EC00' F000'        	call	_TiResetTics
  8241                           
  8242                           ;TX.c: 20:     TRISCbits.TRISC5 = 0;
  8243  0018' 9A94               	bcf	148,5,c	;volatile
  8244                           
  8245                           ;TX.c: 21:     TRISCbits.TRISC4 = 1;
  8246  001A' 8894               	bsf	148,4,c	;volatile
  8247                           
  8248                           ;TX.c: 22:     stateTX = 0;
  8249  001C' 6A00'              	clrf	_stateTX^0,c
  8250                           
  8251                           ;TX.c: 23:     stateRX = 0;
  8252  001E' 6A00'              	clrf	_stateRX^0,c
  8253  0020' 0012               	return		;funcret
  8254  0022'                    __end_of_initTX:
  8255                           	callstack 0
  8256                           
  8257 ;; *************** function _initSIO *****************
  8258 ;; Defined at:
  8259 ;;		line 4 in file "SIO.c"
  8260 ;; Parameters:    Size  Location     Type
  8261 ;;		None
  8262 ;; Auto vars:     Size  Location     Type
  8263 ;;		None
  8264 ;; Return value:  Size  Location     Type
  8265 ;;                  1    wreg      void 
  8266 ;; Registers used:
  8267 ;;		wreg, status,2
  8268 ;; Tracked objects:
  8269 ;;		On entry : 0/0
  8270 ;;		On exit  : 0/0
  8271 ;;		Unchanged: 0/0
  8272 ;; Data sizes:     COMRAM   BANK0   BANK1
  8273 ;;      Params:         0       0       0
  8274 ;;      Locals:         0       0       0
  8275 ;;      Temps:          0       0       0
  8276 ;;      Totals:         0       0       0
  8277 ;;Total ram usage:        0 bytes
  8278 ;; Hardware stack levels used: 1
  8279 ;; Hardware stack levels required when called: 2
  8280 ;; This function calls:
  8281 ;;		Nothing
  8282 ;; This function is called by:
  8283 ;;		_main
  8284 ;; This function uses a non-reentrant model
  8285 ;;
  8286                           
  8287                           	psect	text50
  8288  0000'                    __ptext50:
  8289                           	callstack 0
  8290  0000'                    _initSIO:
  8291                           	callstack 28
  8292                           
  8293                           ;SIO.c: 5:  TXSTA = 0x20;
  8294                           
  8295                           ;incstack = 0
  8296  0000' 0E20               	movlw	32
  8297  0002' 6EAC               	movwf	172,c	;volatile
  8298                           
  8299                           ;SIO.c: 6:  RCSTA = 0x90;
  8300  0004' 0E90               	movlw	144
  8301  0006' 6EAB               	movwf	171,c	;volatile
  8302                           
  8303                           ;SIO.c: 7:  BAUDCONbits.BRG16 = 1;
  8304  0008' 86B8               	bsf	184,3,c	;volatile
  8305                           
  8306                           ;SIO.c: 8:     SPBRGH = 0x01;
  8307  000A' 0E01               	movlw	1
  8308  000C' 6EB0               	movwf	176,c	;volatile
  8309                           
  8310                           ;SIO.c: 9:  SPBRG = 0x03;
  8311  000E' 0E03               	movlw	3
  8312  0010' 6EAF               	movwf	175,c	;volatile
  8313                           
  8314                           ;SIO.c: 10:     TRISCbits.TRISC6 = 1;
  8315  0012' 8C94               	bsf	148,6,c	;volatile
  8316                           
  8317                           ;SIO.c: 11:     TRISCbits.TRISC7 = 1;
  8318  0014' 8E94               	bsf	148,7,c	;volatile
  8319  0016' 0C03               	retlw	3	;funcret
  8320  0018'                    __end_of_initSIO:
  8321                           	callstack 0
  8322                           
  8323 ;; *************** function _initMusic *****************
  8324 ;; Defined at:
  8325 ;;		line 10 in file "Music.c"
  8326 ;; Parameters:    Size  Location     Type
  8327 ;;		None
  8328 ;; Auto vars:     Size  Location     Type
  8329 ;;		None
  8330 ;; Return value:  Size  Location     Type
  8331 ;;                  1    wreg      void 
  8332 ;; Registers used:
  8333 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8334 ;; Tracked objects:
  8335 ;;		On entry : 0/0
  8336 ;;		On exit  : 0/0
  8337 ;;		Unchanged: 0/0
  8338 ;; Data sizes:     COMRAM   BANK0   BANK1
  8339 ;;      Params:         0       0       0
  8340 ;;      Locals:         0       0       0
  8341 ;;      Temps:          0       0       0
  8342 ;;      Totals:         0       0       0
  8343 ;;Total ram usage:        0 bytes
  8344 ;; Hardware stack levels used: 1
  8345 ;; Hardware stack levels required when called: 3
  8346 ;; This function calls:
  8347 ;;		_TiGetTimer
  8348 ;; This function is called by:
  8349 ;;		_main
  8350 ;; This function uses a non-reentrant model
  8351 ;;
  8352                           
  8353                           	psect	text51
  8354  0000'                    __ptext51:
  8355                           	callstack 0
  8356  0000'                    _initMusic:
  8357                           	callstack 27
  8358                           
  8359                           ;Music.c: 11:     TRISDbits.TRISD3 = 0;
  8360                           
  8361                           ;incstack = 0
  8362  0000' 9695               	bcf	149,3,c	;volatile
  8363                           
  8364                           ;Music.c: 12:     timerMusic = TiGetTimer();
  8365  0002' EC00' F000'        	call	_TiGetTimer	;wreg free
  8366  0006' 6E00'              	movwf	_timerMusic^0,c
  8367  0008' 6A00'              	clrf	(_timerMusic+1)^0,c
  8368                           
  8369                           ;Music.c: 13:     timerNote = TiGetTimer();
  8370  000A' EC00' F000'        	call	_TiGetTimer	;wreg free
  8371  000E' 6E00'              	movwf	_timerNote^0,c
  8372                           
  8373                           ;Music.c: 14:     musicState = 1;
  8374  0010' 0E01               	movlw	1
  8375  0012' 6E00'              	movwf	_musicState^0,c
  8376                           
  8377                           ;Music.c: 15:     note = 1;
  8378  0014' 6E00'              	movwf	_note^0,c
  8379  0016' 0C01               	retlw	1	;funcret
  8380  0018'                    __end_of_initMusic:
  8381                           	callstack 0
  8382                           
  8383 ;; *************** function _initMenu *****************
  8384 ;; Defined at:
  8385 ;;		line 27 in file "Menu.c"
  8386 ;; Parameters:    Size  Location     Type
  8387 ;;		None
  8388 ;; Auto vars:     Size  Location     Type
  8389 ;;		None
  8390 ;; Return value:  Size  Location     Type
  8391 ;;                  1    wreg      void 
  8392 ;; Registers used:
  8393 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8394 ;; Tracked objects:
  8395 ;;		On entry : 0/0
  8396 ;;		On exit  : 0/0
  8397 ;;		Unchanged: 0/0
  8398 ;; Data sizes:     COMRAM   BANK0   BANK1
  8399 ;;      Params:         0       0       0
  8400 ;;      Locals:         0       0       0
  8401 ;;      Temps:          0       0       0
  8402 ;;      Totals:         0       0       0
  8403 ;;Total ram usage:        0 bytes
  8404 ;; Hardware stack levels used: 1
  8405 ;; Hardware stack levels required when called: 3
  8406 ;; This function calls:
  8407 ;;		_TiGetTimer
  8408 ;;		_TiResetTics
  8409 ;;		_readEeprom
  8410 ;; This function is called by:
  8411 ;;		_main
  8412 ;; This function uses a non-reentrant model
  8413 ;;
  8414                           
  8415                           	psect	text52
  8416  0000'                    __ptext52:
  8417                           	callstack 0
  8418  0000'                    _initMenu:
  8419                           	callstack 27
  8420                           
  8421                           ;Menu.c: 28:     timerMenu = TiGetTimer();
  8422                           
  8423                           ;incstack = 0
  8424  0000' EC00' F000'        	call	_TiGetTimer	;wreg free
  8425  0004' 6E00'              	movwf	_timerMenu^0,c
  8426                           
  8427                           ;Menu.c: 29:  menuState = 100;
  8428  0006' 0E64               	movlw	100
  8429  0008' 6E00'              	movwf	_menuState^0,c
  8430                           
  8431                           ;Menu.c: 30:  minutes=30;
  8432                           
  8433                           ;Menu.c: 31:  seconds=0;
  8434                           
  8435                           ;Menu.c: 33:     maxScore = 0;
  8436  000A' EC00' F000'        	call	PL82	;call to abstracted procedure
  8437                           
  8438                           ;Menu.c: 34:     TiResetTics(timerMenu);
  8439  000E' 5000'              	movf	_timerMenu^0,w,c
  8440  0010' EC00' F000'        	call	_TiResetTics
  8441                           
  8442                           ;Menu.c: 35:     numUsers = 0;
  8443  0014' 6A00'              	clrf	_numUsers@Data$F581^0,c
  8444                           
  8445                           ;Menu.c: 36:     numScores = 0;
  8446  0016' 6A00'              	clrf	_numScores@Data$F582^0,c
  8447                           
  8448                           ;Menu.c: 37:     LATAbits.LATA3 = 0;
  8449  0018' 9689               	bcf	137,3,c	;volatile
  8450                           
  8451                           ;Menu.c: 38:     readEeprom(0);
  8452  001A' 0E00               	movlw	0
  8453  001C' EC00' F000'        	call	_readEeprom
  8454                           
  8455                           ;Menu.c: 39:     LATAbits.LATA4 = 0;
  8456  0020' 9889               	bcf	137,4,c	;volatile
  8457                           
  8458                           ;Menu.c: 40:     auxPU = 0;
  8459  0022' 6A00'              	clrf	_auxPU^0,c
  8460  0024' 0012               	return		;funcret
  8461  0026'                    __end_of_initMenu:
  8462                           	callstack 0
  8463                           
  8464 ;; *************** function _readEeprom *****************
  8465 ;; Defined at:
  8466 ;;		line 202 in file "EEPROM.c"
  8467 ;; Parameters:    Size  Location     Type
  8468 ;;  num             1    wreg     unsigned char 
  8469 ;; Auto vars:     Size  Location     Type
  8470 ;;  num             1    5[COMRAM] unsigned char 
  8471 ;; Return value:  Size  Location     Type
  8472 ;;                  1    wreg      void 
  8473 ;; Registers used:
  8474 ;;		wreg, status,2
  8475 ;; Tracked objects:
  8476 ;;		On entry : 0/1
  8477 ;;		On exit  : 0/0
  8478 ;;		Unchanged: 0/0
  8479 ;; Data sizes:     COMRAM   BANK0   BANK1
  8480 ;;      Params:         0       0       0
  8481 ;;      Locals:         1       0       0
  8482 ;;      Temps:          0       0       0
  8483 ;;      Totals:         1       0       0
  8484 ;;Total ram usage:        1 bytes
  8485 ;; Hardware stack levels used: 1
  8486 ;; Hardware stack levels required when called: 2
  8487 ;; This function calls:
  8488 ;;		Nothing
  8489 ;; This function is called by:
  8490 ;;		_initMenu
  8491 ;;		_menuMotor
  8492 ;; This function uses a non-reentrant model
  8493 ;;
  8494                           
  8495                           	psect	text53
  8496  0000'                    __ptext53:
  8497                           	callstack 0
  8498  0000'                    _readEeprom:
  8499                           	callstack 27
  8500                           
  8501                           ;incstack = 0
  8502                           ;readEeprom@num stored from wreg
  8503  0000' 6E00'              	movwf	readEeprom@num^0,c
  8504                           
  8505                           ;EEPROM.c: 203:     eepromState = 5;
  8506  0002' 0E05               	movlw	5
  8507  0004' 6E00'              	movwf	_eepromState^0,c
  8508                           
  8509                           ;EEPROM.c: 204:     numAddress = num;
  8510  0006' C005' F01D'        	movff	readEeprom@num,_numAddress
  8511                           
  8512                           ;EEPROM.c: 205:     pointer = 0;
  8513                           
  8514                           ;EEPROM.c: 206:     pointerEeprom = 0;
  8515                           
  8516                           ;EEPROM.c: 207:     doneCharging = 0;
  8517  000A' D000               	goto	PL80	;call to abstracted procedure
  8518  000C'                    __end_of_readEeprom:
  8519                           	callstack 0
  8520  000C'                    PL80:
  8521                           	callstack 27
  8522  000C' 6A00'              	clrf	_pointer@EEPROM$F1774^0,c
  8523  000E' 6A00'              	clrf	_pointerEeprom^0,c
  8524  0010' 6A00'              	clrf	_doneCharging^0,c
  8525  0012' 0012               	return		;funcret
  8526  0014'                    __end_ofPL80:
  8527                           	callstack 0
  8528                           
  8529 ;; *************** function _initKeypad *****************
  8530 ;; Defined at:
  8531 ;;		line 32 in file "Keypad.c"
  8532 ;; Parameters:    Size  Location     Type
  8533 ;;		None
  8534 ;; Auto vars:     Size  Location     Type
  8535 ;;		None
  8536 ;; Return value:  Size  Location     Type
  8537 ;;                  1    wreg      void 
  8538 ;; Registers used:
  8539 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8540 ;; Tracked objects:
  8541 ;;		On entry : 0/0
  8542 ;;		On exit  : 0/0
  8543 ;;		Unchanged: 0/0
  8544 ;; Data sizes:     COMRAM   BANK0   BANK1
  8545 ;;      Params:         0       0       0
  8546 ;;      Locals:         0       0       0
  8547 ;;      Temps:          0       0       0
  8548 ;;      Totals:         0       0       0
  8549 ;;Total ram usage:        0 bytes
  8550 ;; Hardware stack levels used: 1
  8551 ;; Hardware stack levels required when called: 3
  8552 ;; This function calls:
  8553 ;;		_TiGetTimer
  8554 ;;		_TiResetTics
  8555 ;; This function is called by:
  8556 ;;		_main
  8557 ;; This function uses a non-reentrant model
  8558 ;;
  8559                           
  8560                           	psect	text54
  8561  0000'                    __ptext54:
  8562                           	callstack 0
  8563  0000'                    _initKeypad:
  8564                           	callstack 27
  8565                           
  8566                           ;Keypad.c: 33:     (TRISDbits.TRISD7 = TRISDbits.TRISD6 = TRISDbits.TRISD5 = TRISDbits.T
      +                          RISD4 = 0);
  8567                           
  8568                           ;incstack = 0
  8569  0000' 9895               	bcf	149,4,c	;volatile
  8570  0002' 9A95               	bcf	149,5,c	;volatile
  8571  0004' 9C95               	bcf	149,6,c	;volatile
  8572  0006' 9E95               	bcf	149,7,c	;volatile
  8573                           
  8574                           ;Keypad.c: 34:     (TRISBbits.TRISB1 = TRISBbits.TRISB2 = TRISBbits.TRISB3 = 1);
  8575  0008' 8693               	bsf	147,3,c	;volatile
  8576  000A' 8493               	bsf	147,2,c	;volatile
  8577  000C' 8293               	bsf	147,1,c	;volatile
  8578                           
  8579                           ;Keypad.c: 35:     (LATDbits.LATD7 = LATDbits.LATD6 = LATDbits.LATD5 = LATDbits.LATD4 = 
      +                          1);
  8580  000E' EC00' F000'        	call	PL48	;call to abstracted procedure
  8581                           
  8582                           ;Keypad.c: 36:     keypadState = 0;
  8583  0012' 6A00'              	clrf	_keypadState^0,c
  8584                           
  8585                           ;Keypad.c: 37:     timerKeypad = TiGetTimer();
  8586  0014' EC00' F000'        	call	_TiGetTimer	;wreg free
  8587  0018' 6E00'              	movwf	_timerKeypad^0,c
  8588                           
  8589                           ;Keypad.c: 38:     TiResetTics(timerKeypad);
  8590  001A' 5000'              	movf	_timerKeypad^0,w,c
  8591  001C' EC00' F000'        	call	_TiResetTics
  8592                           
  8593                           ;Keypad.c: 39:     press = 0;
  8594  0020' 6A00'              	clrf	_press^0,c
  8595                           
  8596                           ;Keypad.c: 40:     valueOld=10;
  8597  0022' 0E0A               	movlw	10
  8598  0024' 6E00'              	movwf	_valueOld^0,c
  8599                           
  8600                           ;Keypad.c: 41:     rows=0;
  8601  0026' 6A00'              	clrf	_rows^0,c
  8602                           
  8603                           ;Keypad.c: 42:     INTCON2bits.RBPU = 0;
  8604  0028' 9EF1               	bcf	241,7,c	;volatile
  8605                           
  8606                           ;Keypad.c: 43:     rotating = 0;
  8607  002A' 6A00'              	clrf	_rotating^0,c
  8608  002C' 0012               	return		;funcret
  8609  002E'                    __end_of_initKeypad:
  8610                           	callstack 0
  8611                           
  8612 ;; *************** function _initJoystick *****************
  8613 ;; Defined at:
  8614 ;;		line 11 in file "Joystick.c"
  8615 ;; Parameters:    Size  Location     Type
  8616 ;;		None
  8617 ;; Auto vars:     Size  Location     Type
  8618 ;;		None
  8619 ;; Return value:  Size  Location     Type
  8620 ;;                  1    wreg      void 
  8621 ;; Registers used:
  8622 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8623 ;; Tracked objects:
  8624 ;;		On entry : 0/0
  8625 ;;		On exit  : 0/0
  8626 ;;		Unchanged: 0/0
  8627 ;; Data sizes:     COMRAM   BANK0   BANK1
  8628 ;;      Params:         0       0       0
  8629 ;;      Locals:         0       0       0
  8630 ;;      Temps:          0       0       0
  8631 ;;      Totals:         0       0       0
  8632 ;;Total ram usage:        0 bytes
  8633 ;; Hardware stack levels used: 1
  8634 ;; Hardware stack levels required when called: 3
  8635 ;; This function calls:
  8636 ;;		_TiGetTimer
  8637 ;;		_TiResetTics
  8638 ;; This function is called by:
  8639 ;;		_main
  8640 ;; This function uses a non-reentrant model
  8641 ;;
  8642                           
  8643                           	psect	text55
  8644  0000'                    __ptext55:
  8645                           	callstack 0
  8646  0000'                    _initJoystick:
  8647                           	callstack 27
  8648                           
  8649                           ;Joystick.c: 12:  ADCON0 = 1;
  8650                           
  8651                           ;incstack = 0
  8652  0000' 0E01               	movlw	1
  8653  0002' 6EC2               	movwf	194,c	;volatile
  8654                           
  8655                           ;Joystick.c: 13:  ADCON1 = 13;
  8656  0004' 0E0D               	movlw	13
  8657  0006' 6EC1               	movwf	193,c	;volatile
  8658                           
  8659                           ;Joystick.c: 14:     ADCON2 = 9;
  8660  0008' 0E09               	movlw	9
  8661  000A' 6EC0               	movwf	192,c	;volatile
  8662                           
  8663                           ;Joystick.c: 15:     TRISAbits.TRISA0 = 1;
  8664  000C' 8092               	bsf	146,0,c	;volatile
  8665                           
  8666                           ;Joystick.c: 16:     timerJoystick = TiGetTimer();
  8667  000E' EC00' F000'        	call	_TiGetTimer	;wreg free
  8668  0012' 6E00'              	movwf	_timerJoystick^0,c
  8669                           
  8670                           ;Joystick.c: 17:  TiResetTics(timerJoystick);
  8671  0014' 5000'              	movf	_timerJoystick^0,w,c
  8672  0016' EF00' F000'        	goto	_TiResetTics
  8673  001A'                    __end_of_initJoystick:
  8674                           	callstack 0
  8675                           
  8676 ;; *************** function _initData *****************
  8677 ;; Defined at:
  8678 ;;		line 3 in file "Data.c"
  8679 ;; Parameters:    Size  Location     Type
  8680 ;;		None
  8681 ;; Auto vars:     Size  Location     Type
  8682 ;;  t               1    8[COMRAM] unsigned char 
  8683 ;;  j               1    9[COMRAM] unsigned char 
  8684 ;;  i               1    7[COMRAM] unsigned char 
  8685 ;; Return value:  Size  Location     Type
  8686 ;;                  1    wreg      void 
  8687 ;; Registers used:
  8688 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  8689 ;; Tracked objects:
  8690 ;;		On entry : 0/0
  8691 ;;		On exit  : 0/0
  8692 ;;		Unchanged: 0/0
  8693 ;; Data sizes:     COMRAM   BANK0   BANK1
  8694 ;;      Params:         0       0       0
  8695 ;;      Locals:         3       0       0
  8696 ;;      Temps:          2       0       0
  8697 ;;      Totals:         5       0       0
  8698 ;;Total ram usage:        5 bytes
  8699 ;; Hardware stack levels used: 1
  8700 ;; Hardware stack levels required when called: 2
  8701 ;; This function calls:
  8702 ;;		Nothing
  8703 ;; This function is called by:
  8704 ;;		_main
  8705 ;; This function uses a non-reentrant model
  8706 ;;
  8707                           
  8708                           	psect	text56
  8709  0000'                    __ptext56:
  8710                           	callstack 0
  8711  0000'                    _initData:
  8712                           	callstack 28
  8713                           
  8714                           ;Data.c: 5:     for (char i = 0; i<3 +1; i++){
  8715                           
  8716                           ;incstack = 0
  8717  0000' 6A00'              	clrf	initData@i^0,c
  8718  0002'                    l975:
  8719                           
  8720                           ;Data.c: 6:         for (char t = 0; t<10; t++){
  8721  0002' 6A00'              	clrf	initData@t^0,c
  8722  0004'                    l4594:
  8723                           
  8724                           ;Data.c: 7:             users[i].username[t] = ' ';
  8725  0004' 5000'              	movf	initData@i^0,w,c
  8726  0006' 0D12               	mullw	18
  8727  0008' 0E00'              	movlw	low _users
  8728  000A' 6E00'              	movwf	??_initData^0,c
  8729  000C' 0E00'              	movlw	high _users
  8730  000E' 6E00'              	movwf	(??_initData+1)^0,c
  8731  0010' 50F3               	movf	243,w,c
  8732  0012' 2600'              	addwf	??_initData^0,f,c
  8733  0014' 50F4               	movf	244,w,c
  8734  0016' 2200'              	addwfc	(??_initData+1)^0,f,c
  8735  0018' 5000'              	movf	initData@t^0,w,c
  8736  001A' 2400'              	addwf	??_initData^0,w,c
  8737  001C' 6ED9               	movwf	fsr2l,c
  8738  001E' 0E00               	movlw	0
  8739  0020' 2000'              	addwfc	(??_initData+1)^0,w,c
  8740  0022' 6EDA               	movwf	fsr2h,c
  8741  0024' 0E20               	movlw	32
  8742  0026' 6EDF               	movwf	indf2,c
  8743                           
  8744                           ;Data.c: 8:         }
  8745  0028' 2A00'              	incf	initData@t^0,f,c
  8746  002A' 0E09               	movlw	9
  8747  002C' 6400'              	cpfsgt	initData@t^0,c
  8748  002E' D7EA               	goto	l4594
  8749                           
  8750                           ;Data.c: 9:     }
  8751  0030' 2A00'              	incf	initData@i^0,f,c
  8752  0032' 0E03               	movlw	3
  8753  0034' 6400'              	cpfsgt	initData@i^0,c
  8754  0036' D7E5               	goto	l975
  8755                           
  8756                           ;Data.c: 10:     for(char j = 0; j<5; j++){
  8757  0038' 6A00'              	clrf	initData@j^0,c
  8758  003A'                    l4608:
  8759                           
  8760                           ;Data.c: 11:         topScores[j].score = 0;
  8761  003A' 5000'              	movf	initData@j^0,w,c
  8762  003C' EC00' F000'        	call	PL22	;call to abstracted procedure
  8763  0040' 6ADF               	clrf	indf2,c
  8764                           
  8765                           ;Data.c: 12:     }
  8766  0042' 2A00'              	incf	initData@j^0,f,c
  8767  0044' 0E04               	movlw	4
  8768  0046' 6400'              	cpfsgt	initData@j^0,c
  8769  0048' D7F8               	goto	l4608
  8770  004A' 0C04               	retlw	4
  8771  004C'                    __end_of_initData:
  8772                           	callstack 0
  8773                           
  8774 ;; *************** function _TiInitTimer *****************
  8775 ;; Defined at:
  8776 ;;		line 23 in file "Timer.c"
  8777 ;; Parameters:    Size  Location     Type
  8778 ;;		None
  8779 ;; Auto vars:     Size  Location     Type
  8780 ;;		None
  8781 ;; Return value:  Size  Location     Type
  8782 ;;                  1    wreg      void 
  8783 ;; Registers used:
  8784 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8785 ;; Tracked objects:
  8786 ;;		On entry : 0/0
  8787 ;;		On exit  : 0/0
  8788 ;;		Unchanged: 0/0
  8789 ;; Data sizes:     COMRAM   BANK0   BANK1
  8790 ;;      Params:         0       0       0
  8791 ;;      Locals:         0       0       0
  8792 ;;      Temps:          0       0       0
  8793 ;;      Totals:         0       0       0
  8794 ;;Total ram usage:        0 bytes
  8795 ;; Hardware stack levels used: 1
  8796 ;; Hardware stack levels required when called: 3
  8797 ;; This function calls:
  8798 ;;		_TiGetTimer
  8799 ;;		_TiResetTics
  8800 ;; This function is called by:
  8801 ;;		_main
  8802 ;; This function uses a non-reentrant model
  8803 ;;
  8804                           
  8805                           	psect	text57
  8806  0000'                    __ptext57:
  8807                           	callstack 0
  8808  0000'                    _TiInitTimer:
  8809                           	callstack 27
  8810                           
  8811                           ;Timer.c: 26:     RCONbits.IPEN = 0;
  8812                           
  8813                           ;incstack = 0
  8814  0000' 9ED0               	bcf	208,7,c	;volatile
  8815                           
  8816                           ;Timer.c: 27:     INTCONbits.GIE_GIEH = 1;
  8817  0002' 8EF2               	bsf	242,7,c	;volatile
  8818                           
  8819                           ;Timer.c: 28:     INTCONbits.PEIE_GIEL = 1;
  8820  0004' 8CF2               	bsf	242,6,c	;volatile
  8821                           
  8822                           ;Timer.c: 29:     INTCONbits.TMR0IE = 1;
  8823  0006' 8AF2               	bsf	242,5,c	;volatile
  8824                           
  8825                           ;Timer.c: 30:     INTCONbits.TMR0IF = 0;
  8826  0008' 94F2               	bcf	242,2,c	;volatile
  8827                           
  8828                           ;Timer.c: 31:     T0CON = 0x08;
  8829  000A' 0E08               	movlw	8
  8830  000C' 6ED5               	movwf	213,c	;volatile
  8831                           
  8832                           ;Timer.c: 32:     TMR0H = 0xDF;
  8833                           
  8834                           ;Timer.c: 33:     TMR0L = 0x73;
  8835  000E' EC00' F000'        	call	PL76	;call to abstracted procedure
  8836                           
  8837                           ;Timer.c: 34:     T0CONbits.TMR0ON = 1;
  8838  0012' 8ED5               	bsf	213,7,c	;volatile
  8839                           
  8840                           ;Timer.c: 36:     for (counter=0;counter<9;counter++) {
  8841  0014' 6A00'              	clrf	_counter^0,c
  8842  0016'                    l4552:
  8843  0016' 0E08               	movlw	8
  8844  0018' 6400'              	cpfsgt	_counter^0,c
  8845  001A' D001               	goto	l4556
  8846  001C' D005               	goto	l4562
  8847  001E'                    l4556:
  8848                           
  8849                           ;Timer.c: 37:      s_Timers[counter].b_busy=0;
  8850  001E' EC00' F000'        	call	PL28	;call to abstracted procedure
  8851  0022' 6ADF               	clrf	indf2,c
  8852                           
  8853                           ;Timer.c: 38:     }
  8854  0024' 2A00'              	incf	_counter^0,f,c
  8855  0026' D7F7               	goto	l4552
  8856  0028'                    l4562:
  8857                           
  8858                           ;Timer.c: 39:     timerPic = TiGetTimer();
  8859  0028' EC00' F000'        	call	_TiGetTimer	;wreg free
  8860  002C' 6E00'              	movwf	_timerPic^0,c
  8861                           
  8862                           ;Timer.c: 40:     TiResetTics(timerPic);
  8863  002E' 5000'              	movf	_timerPic^0,w,c
  8864  0030' EC00' F000'        	call	_TiResetTics
  8865                           
  8866                           ;Timer.c: 41:     timerState = 0;
  8867  0034' 6A00'              	clrf	_timerState^0,c
  8868                           
  8869                           ;Timer.c: 42:     minutes = 0;
  8870  0036' 6A00'              	clrf	_minutes@Timer$F1651^0,c
  8871                           
  8872                           ;Timer.c: 43:     seconds = 0;
  8873  0038' 6A00'              	clrf	_seconds@Timer$F1652^0,c
  8874  003A' 0012               	return		;funcret
  8875  003C'                    __end_of_TiInitTimer:
  8876                           	callstack 0
  8877                           
  8878 ;; *************** function _LcInit *****************
  8879 ;; Defined at:
  8880 ;;		line 51 in file "LcTLCD.c"
  8881 ;; Parameters:    Size  Location     Type
  8882 ;;  rows            1    wreg     unsigned char 
  8883 ;;  columns         1   16[COMRAM] unsigned char 
  8884 ;; Auto vars:     Size  Location     Type
  8885 ;;  rows            1   17[COMRAM] unsigned char 
  8886 ;;  i               2   18[COMRAM] int 
  8887 ;; Return value:  Size  Location     Type
  8888 ;;                  1    wreg      void 
  8889 ;; Registers used:
  8890 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8891 ;; Tracked objects:
  8892 ;;		On entry : 0/0
  8893 ;;		On exit  : 0/0
  8894 ;;		Unchanged: 0/0
  8895 ;; Data sizes:     COMRAM   BANK0   BANK1
  8896 ;;      Params:         1       0       0
  8897 ;;      Locals:         3       0       0
  8898 ;;      Temps:          0       0       0
  8899 ;;      Totals:         4       0       0
  8900 ;;Total ram usage:        4 bytes
  8901 ;; Hardware stack levels used: 1
  8902 ;; Hardware stack levels required when called: 4
  8903 ;; This function calls:
  8904 ;;		_CantaIR
  8905 ;;		_EscriuPrimeraOrdre
  8906 ;;		_Espera
  8907 ;;		_TiGetTimer
  8908 ;;		_WaitForBusy
  8909 ;; This function is called by:
  8910 ;;		_main
  8911 ;; This function uses a non-reentrant model
  8912 ;;
  8913                           
  8914                           	psect	text58
  8915  0000'                    __ptext58:
  8916                           	callstack 0
  8917  0000'                    _LcInit:
  8918                           	callstack 26
  8919                           
  8920                           ;incstack = 0
  8921                           ;LcInit@rows stored from wreg
  8922  0000' 6E00'              	movwf	LcInit@rows^0,c
  8923                           
  8924                           ;LcTLCD.c: 57:  int i;;LcTLCD.c: 58:  Timer = TiGetTimer();
  8925  0002' EC00' F000'        	call	_TiGetTimer	;wreg free
  8926  0006' 6E00'              	movwf	_Timer^0,c
  8927                           
  8928                           ;LcTLCD.c: 59:  Rows = rows; Columns = columns;
  8929  0008' C011' F02D'        	movff	LcInit@rows,_Rows
  8930  000C' C010' F02C'        	movff	LcInit@columns,_Columns
  8931                           
  8932                           ;LcTLCD.c: 60:  RowAct = ColumnAct = 0;
  8933  0010' 6A00'              	clrf	_ColumnAct^0,c
  8934  0012' 6A00'              	clrf	_RowAct^0,c
  8935                           
  8936                           ;LcTLCD.c: 61:  (TRISCbits.TRISC2 = TRISCbits.TRISC1 = TRISCbits.TRISC0 = 0);
  8937  0014' 9094               	bcf	148,0,c	;volatile
  8938  0016' 9294               	bcf	148,1,c	;volatile
  8939  0018' 9494               	bcf	148,2,c	;volatile
  8940                           
  8941                           ;LcTLCD.c: 62:  for (i = 0; i < 2; i++) {
  8942  001A' 6A00'              	clrf	LcInit@i^0,c
  8943  001C' 6A00'              	clrf	(LcInit@i+1)^0,c
  8944  001E'                    l4638:
  8945                           
  8946                           ;LcTLCD.c: 63:   Espera(Timer, 100);
  8947  001E' D84C               	call	PL32	;call to abstracted procedure
  8948  0020' 0E64               	movlw	100
  8949  0022' 6E00'              	movwf	Espera@ms^0,c
  8950  0024' EC00' F000'        	call	_Espera	;wreg free
  8951                           
  8952                           ;LcTLCD.c: 66:   EscriuPrimeraOrdre(0x02 | 0x01);
  8953  0028' 0E03               	movlw	3
  8954  002A' EC00' F000'        	call	_EscriuPrimeraOrdre
  8955                           
  8956                           ;LcTLCD.c: 67:   Espera(Timer, 10);
  8957  002E' D844               	call	PL32	;call to abstracted procedure
  8958  0030' 0E0A               	movlw	10
  8959  0032' 6E00'              	movwf	Espera@ms^0,c
  8960  0034' EC00' F000'        	call	_Espera	;wreg free
  8961                           
  8962                           ;LcTLCD.c: 68:   EscriuPrimeraOrdre(0x02 | 0x01);
  8963  0038' 0E03               	movlw	3
  8964  003A' EC00' F000'        	call	_EscriuPrimeraOrdre
  8965                           
  8966                           ;LcTLCD.c: 69:   Espera(Timer, 5);
  8967  003E' D83C               	call	PL32	;call to abstracted procedure
  8968  0040' 0E05               	movlw	5
  8969  0042' 6E00'              	movwf	Espera@ms^0,c
  8970  0044' EC00' F000'        	call	_Espera	;wreg free
  8971                           
  8972                           ;LcTLCD.c: 70:   EscriuPrimeraOrdre(0x02 | 0x01);
  8973  0048' 0E03               	movlw	3
  8974  004A' EC00' F000'        	call	_EscriuPrimeraOrdre
  8975                           
  8976                           ;LcTLCD.c: 71:   Espera(Timer, 5);
  8977  004E' D834               	call	PL32	;call to abstracted procedure
  8978  0050' 0E05               	movlw	5
  8979  0052' 6E00'              	movwf	Espera@ms^0,c
  8980  0054' EC00' F000'        	call	_Espera	;wreg free
  8981                           
  8982                           ;LcTLCD.c: 74:   EscriuPrimeraOrdre(0x02);
  8983  0058' 0E02               	movlw	2
  8984  005A' EC00' F000'        	call	_EscriuPrimeraOrdre
  8985                           
  8986                           ;LcTLCD.c: 75:   Espera(Timer, 5);
  8987  005E' D82C               	call	PL32	;call to abstracted procedure
  8988  0060' 0E05               	movlw	5
  8989  0062' 6E00'              	movwf	Espera@ms^0,c
  8990  0064' EC00' F000'        	call	_Espera	;wreg free
  8991                           
  8992                           ;LcTLCD.c: 76:   CantaIR(0x20 | 0x08);
  8993  0068' 0E28               	movlw	40
  8994  006A' EC00' F000'        	call	_CantaIR
  8995                           
  8996                           ;LcTLCD.c: 79:   WaitForBusy(); CantaIR(0x08);
  8997  006E' EC00' F000'        	call	_WaitForBusy	;wreg free
  8998  0072' 0E08               	movlw	8
  8999  0074' EC00' F000'        	call	_CantaIR
  9000                           
  9001                           ;LcTLCD.c: 80:   WaitForBusy(); CantaIR(0x01);
  9002  0078' EC00' F000'        	call	_WaitForBusy	;wreg free
  9003  007C' 0E01               	movlw	1
  9004  007E' EC00' F000'        	call	_CantaIR
  9005                           
  9006                           ;LcTLCD.c: 81:   Espera(Timer,3);
  9007  0082' D81A               	call	PL32	;call to abstracted procedure
  9008  0084' 0E03               	movlw	3
  9009  0086' 6E00'              	movwf	Espera@ms^0,c
  9010  0088' EC00' F000'        	call	_Espera	;wreg free
  9011                           
  9012                           ;LcTLCD.c: 82:   WaitForBusy(); CantaIR(0x04 | 0x02);
  9013  008C' EC00' F000'        	call	_WaitForBusy	;wreg free
  9014  0090' 0E06               	movlw	6
  9015  0092' EC00' F000'        	call	_CantaIR
  9016                           
  9017                           ;LcTLCD.c: 83:   WaitForBusy(); CantaIR(0x08 | 0x04 | 0x02 | 0x01);
  9018  0096' EC00' F000'        	call	_WaitForBusy	;wreg free
  9019  009A' 0E0F               	movlw	15
  9020  009C' EC00' F000'        	call	_CantaIR
  9021                           
  9022                           ;LcTLCD.c: 84:  }
  9023  00A0' 4A00'              	infsnz	LcInit@i^0,f,c
  9024  00A2' 2A00'              	incf	(LcInit@i+1)^0,f,c
  9025  00A4' BE00'              	btfsc	(LcInit@i+1)^0,7,c
  9026  00A6' D7BB               	goto	l4638
  9027  00A8' 5000'              	movf	(LcInit@i+1)^0,w,c
  9028  00AA' E105               	bnz	u3110
  9029  00AC' 0E02               	movlw	2
  9030  00AE' 5C00'              	subwf	LcInit@i^0,w,c
  9031  00B0' B0D8               	btfsc	status,0,c
  9032  00B2' 0012               	return	
  9033  00B4' D7B4               	goto	l4638
  9034  00B6'                    u3110:
  9035  00B6' 0012               	return		;funcret
  9036  00B8'                    __end_of_LcInit:
  9037                           	callstack 0
  9038  00B8'                    PL32:
  9039                           	callstack 26
  9040  00B8' C029' F00C'        	movff	_Timer,Espera@Timer
  9041  00BC' 6A00'              	clrf	(Espera@Timer+1)^0,c
  9042  00BE' 6A00'              	clrf	(Espera@ms+1)^0,c
  9043  00C0' 0012               	return	
  9044  00C2'                    __end_ofPL32:
  9045                           	callstack 0
  9046                           
  9047 ;; *************** function _WaitForBusy *****************
  9048 ;; Defined at:
  9049 ;;		line 255 in file "LcTLCD.c"
  9050 ;; Parameters:    Size  Location     Type
  9051 ;;		None
  9052 ;; Auto vars:     Size  Location     Type
  9053 ;;  Busy            1   12[COMRAM] unsigned char 
  9054 ;; Return value:  Size  Location     Type
  9055 ;;                  1    wreg      void 
  9056 ;; Registers used:
  9057 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9058 ;; Tracked objects:
  9059 ;;		On entry : 0/1
  9060 ;;		On exit  : 0/0
  9061 ;;		Unchanged: 0/0
  9062 ;; Data sizes:     COMRAM   BANK0   BANK1
  9063 ;;      Params:         0       0       0
  9064 ;;      Locals:         1       0       0
  9065 ;;      Temps:          0       0       0
  9066 ;;      Totals:         1       0       0
  9067 ;;Total ram usage:        1 bytes
  9068 ;; Hardware stack levels used: 1
  9069 ;; Hardware stack levels required when called: 3
  9070 ;; This function calls:
  9071 ;;		_TiGetTics
  9072 ;;		_TiResetTics
  9073 ;; This function is called by:
  9074 ;;		_LcInit
  9075 ;;		_LcClear
  9076 ;;		_LcCursorOn
  9077 ;;		_LcCursorOff
  9078 ;;		_LcGotoXY
  9079 ;;		_LcPutChar
  9080 ;; This function uses a non-reentrant model
  9081 ;;
  9082                           
  9083                           	psect	text59
  9084  0000'                    __ptext59:
  9085                           	callstack 0
  9086  0000'                    _WaitForBusy:
  9087                           	callstack 24
  9088                           
  9089                           ;LcTLCD.c: 256:  (TRISBbits.TRISB0 = TRISDbits.TRISD2 = TRISDbits.TRISD1 = TRISDbits.TRI
      +                          SD0 = 1);
  9090                           
  9091                           ;incstack = 0
  9092  0000' 8095               	bsf	149,0,c	;volatile
  9093  0002' 8295               	bsf	149,1,c	;volatile
  9094  0004' 8495               	bsf	149,2,c	;volatile
  9095  0006' 8093               	bsf	147,0,c	;volatile
  9096                           
  9097                           ;LcTLCD.c: 257:  (LATCbits.LATC0 = 0);
  9098  0008' 908B               	bcf	139,0,c	;volatile
  9099                           
  9100                           ;LcTLCD.c: 258:  (LATCbits.LATC1 = 1);
  9101  000A' 828B               	bsf	139,1,c	;volatile
  9102                           
  9103                           ;LcTLCD.c: 259:  TiResetTics(Timer);
  9104  000C' 5000'              	movf	_Timer^0,w,c
  9105  000E' EC00' F000'        	call	_TiResetTics
  9106  0012'                    l4146:
  9107                           
  9108                           ;LcTLCD.c: 261:   (LATCbits.LATC2 = 1);(LATCbits.LATC2 = 1);
  9109  0012' 848B               	bsf	139,2,c	;volatile
  9110  0014' 848B               	bsf	139,2,c	;volatile
  9111                           
  9112                           ;LcTLCD.c: 262:   Busy = (PORTBbits.RB0);
  9113  0016' 0E00               	movlw	0
  9114  0018' B081               	btfsc	129,0,c	;volatile
  9115  001A' 0E01               	movlw	1
  9116  001C' 6E00'              	movwf	WaitForBusy@Busy^0,c
  9117                           
  9118                           ;LcTLCD.c: 263:   (LATCbits.LATC2 = 0);
  9119  001E' 948B               	bcf	139,2,c	;volatile
  9120                           
  9121                           ;LcTLCD.c: 264:   (LATCbits.LATC2 = 0);
  9122  0020' 948B               	bcf	139,2,c	;volatile
  9123                           
  9124                           ;LcTLCD.c: 265:   (LATCbits.LATC2 = 1);(LATCbits.LATC2 = 1);
  9125  0022' 848B               	bsf	139,2,c	;volatile
  9126  0024' 848B               	bsf	139,2,c	;volatile
  9127                           
  9128                           ;LcTLCD.c: 267:   (LATCbits.LATC2 = 0);
  9129  0026' 948B               	bcf	139,2,c	;volatile
  9130                           
  9131                           ;LcTLCD.c: 268:   (LATCbits.LATC2 = 0);
  9132  0028' 948B               	bcf	139,2,c	;volatile
  9133                           
  9134                           ;LcTLCD.c: 269:   if (TiGetTics(Timer)) break;
  9135  002A' 5000'              	movf	_Timer^0,w,c
  9136  002C' EC00' F000'        	call	_TiGetTics
  9137  0030' 5000'              	movf	?_TiGetTics^0,w,c
  9138  0032' 1000'              	iorwf	(?_TiGetTics+1)^0,w,c
  9139  0034' E001               	bz	l4168
  9140  0036' 0012               	return	
  9141  0038'                    l4168:
  9142                           
  9143                           ;LcTLCD.c: 270:  } while(Busy);
  9144  0038' 5000'              	movf	WaitForBusy@Busy^0,w,c
  9145  003A' E1EB               	bnz	l4146
  9146  003C' 0012               	return		;funcret
  9147  003E'                    __end_of_WaitForBusy:
  9148                           	callstack 0
  9149                           
  9150 ;; *************** function _TiGetTimer *****************
  9151 ;; Defined at:
  9152 ;;		line 82 in file "Timer.c"
  9153 ;; Parameters:    Size  Location     Type
  9154 ;;		None
  9155 ;; Auto vars:     Size  Location     Type
  9156 ;;		None
  9157 ;; Return value:  Size  Location     Type
  9158 ;;                  1    wreg      unsigned char 
  9159 ;; Registers used:
  9160 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  9161 ;; Tracked objects:
  9162 ;;		On entry : 0/0
  9163 ;;		On exit  : 0/0
  9164 ;;		Unchanged: 0/0
  9165 ;; Data sizes:     COMRAM   BANK0   BANK1
  9166 ;;      Params:         0       0       0
  9167 ;;      Locals:         0       0       0
  9168 ;;      Temps:          1       0       0
  9169 ;;      Totals:         1       0       0
  9170 ;;Total ram usage:        1 bytes
  9171 ;; Hardware stack levels used: 1
  9172 ;; Hardware stack levels required when called: 2
  9173 ;; This function calls:
  9174 ;;		Nothing
  9175 ;; This function is called by:
  9176 ;;		_main
  9177 ;;		_initMenu
  9178 ;;		_initJoystick
  9179 ;;		_initKeypad
  9180 ;;		_LcInit
  9181 ;;		_TiInitTimer
  9182 ;;		_initMusic
  9183 ;;		_initTX
  9184 ;; This function uses a non-reentrant model
  9185 ;;
  9186                           
  9187                           	psect	text60
  9188  0000'                    __ptext60:
  9189                           	callstack 0
  9190  0000'                    _TiGetTimer:
  9191                           	callstack 27
  9192                           
  9193                           ;Timer.c: 86:     counter=0;
  9194                           
  9195                           ;incstack = 0
  9196  0000' 6A00'              	clrf	_counter^0,c
  9197                           
  9198                           ;Timer.c: 87:     while (s_Timers[counter].b_busy==1) {
  9199  0002' D005               	goto	l4320
  9200  0004'                    l4312:
  9201                           
  9202                           ;Timer.c: 88:         counter++;
  9203  0004' 2A00'              	incf	_counter^0,f,c
  9204                           
  9205                           ;Timer.c: 89:  if (counter == 9) return -1;
  9206  0006' 0E09               	movlw	9
  9207  0008' 1800'              	xorwf	_counter^0,w,c
  9208  000A' E101               	bnz	l4320
  9209  000C' 0CFF               	retlw	255
  9210  000E'                    l4320:
  9211                           
  9212                           ;Timer.c: 87:     while (s_Timers[counter].b_busy==1) {
  9213  000E' D807               	call	PL28	;call to abstracted procedure
  9214  0010' 04DE               	decf	postinc2,w,c
  9215  0012' E0F8               	bz	l4312
  9216                           
  9217                           ;Timer.c: 91:     s_Timers[counter].b_busy=1;
  9218  0014' D804               	call	PL28	;call to abstracted procedure
  9219  0016' 0E01               	movlw	1
  9220  0018' 6EDF               	movwf	indf2,c
  9221                           
  9222                           ;Timer.c: 92:     return (counter);
  9223  001A' 5000'              	movf	_counter^0,w,c
  9224  001C' 0012               	return		;funcret
  9225  001E'                    __end_of_TiGetTimer:
  9226                           	callstack 0
  9227  001E'                    PL28:
  9228                           	callstack 27
  9229  001E' 5000'              	movf	_counter^0,w,c
  9230  0020' 0D03               	mullw	3
  9231  0022' 50F3               	movf	243,w,c
  9232  0024' 0F00'              	addlw	low (_s_Timers+2)
  9233  0026' 6ED9               	movwf	fsr2l,c
  9234  0028' 6ADA               	clrf	fsr2h,c
  9235  002A' 0012               	return	
  9236  002C'                    __end_ofPL28:
  9237                           	callstack 0
  9238                           
  9239 ;; *************** function _Espera *****************
  9240 ;; Defined at:
  9241 ;;		line 204 in file "LcTLCD.c"
  9242 ;; Parameters:    Size  Location     Type
  9243 ;;  Timer           2   12[COMRAM] int 
  9244 ;;  ms              2   14[COMRAM] int 
  9245 ;; Auto vars:     Size  Location     Type
  9246 ;;		None
  9247 ;; Return value:  Size  Location     Type
  9248 ;;                  1    wreg      void 
  9249 ;; Registers used:
  9250 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9251 ;; Tracked objects:
  9252 ;;		On entry : 0/0
  9253 ;;		On exit  : 0/0
  9254 ;;		Unchanged: 0/0
  9255 ;; Data sizes:     COMRAM   BANK0   BANK1
  9256 ;;      Params:         4       0       0
  9257 ;;      Locals:         0       0       0
  9258 ;;      Temps:          0       0       0
  9259 ;;      Totals:         4       0       0
  9260 ;;Total ram usage:        4 bytes
  9261 ;; Hardware stack levels used: 1
  9262 ;; Hardware stack levels required when called: 3
  9263 ;; This function calls:
  9264 ;;		_TiGetTics
  9265 ;;		_TiResetTics
  9266 ;; This function is called by:
  9267 ;;		_LcInit
  9268 ;;		_LcClear
  9269 ;; This function uses a non-reentrant model
  9270 ;;
  9271                           
  9272                           	psect	text61
  9273  0000'                    __ptext61:
  9274                           	callstack 0
  9275  0000'                    _Espera:
  9276                           	callstack 25
  9277                           
  9278                           ;LcTLCD.c: 205:  TiResetTics(Timer);
  9279                           
  9280                           ;incstack = 0
  9281  0000' 5000'              	movf	Espera@Timer^0,w,c
  9282  0002' EC00' F000'        	call	_TiResetTics
  9283  0006'                    l4264:
  9284  0006' 5000'              	movf	Espera@Timer^0,w,c
  9285  0008' EC00' F000'        	call	_TiGetTics
  9286  000C' 5000'              	movf	Espera@ms^0,w,c
  9287  000E' 5C00'              	subwf	?_TiGetTics^0,w,c
  9288  0010' 5000'              	movf	(Espera@ms+1)^0,w,c
  9289  0012' 5800'              	subwfb	(?_TiGetTics+1)^0,w,c
  9290  0014' E3F8               	bnc	l4264
  9291  0016' 0012               	return		;funcret
  9292  0018'                    __end_of_Espera:
  9293                           	callstack 0
  9294                           
  9295 ;; *************** function _TiResetTics *****************
  9296 ;; Defined at:
  9297 ;;		line 67 in file "Timer.c"
  9298 ;; Parameters:    Size  Location     Type
  9299 ;;  Handle          1    wreg     unsigned char 
  9300 ;; Auto vars:     Size  Location     Type
  9301 ;;  Handle          1    5[COMRAM] unsigned char 
  9302 ;; Return value:  Size  Location     Type
  9303 ;;                  1    wreg      void 
  9304 ;; Registers used:
  9305 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  9306 ;; Tracked objects:
  9307 ;;		On entry : 0/0
  9308 ;;		On exit  : 0/0
  9309 ;;		Unchanged: 0/0
  9310 ;; Data sizes:     COMRAM   BANK0   BANK1
  9311 ;;      Params:         0       0       0
  9312 ;;      Locals:         1       0       0
  9313 ;;      Temps:          0       0       0
  9314 ;;      Totals:         1       0       0
  9315 ;;Total ram usage:        1 bytes
  9316 ;; Hardware stack levels used: 1
  9317 ;; Hardware stack levels required when called: 2
  9318 ;; This function calls:
  9319 ;;		Nothing
  9320 ;; This function is called by:
  9321 ;;		_main
  9322 ;;		_initMenu
  9323 ;;		_menuMotor
  9324 ;;		_initJoystick
  9325 ;;		_motorJoystick
  9326 ;;		_initKeypad
  9327 ;;		_motorKey
  9328 ;;		_KeyResetValue
  9329 ;;		_Espera
  9330 ;;		_WaitForBusy
  9331 ;;		_TiInitTimer
  9332 ;;		_motorTimer
  9333 ;;		_motorMusic
  9334 ;;		_startMusic
  9335 ;;		_playNote
  9336 ;;		_initTX
  9337 ;;		_motorTX
  9338 ;;		_motorRX
  9339 ;;		_sendMyTX
  9340 ;; This function uses a non-reentrant model
  9341 ;;
  9342                           
  9343                           	psect	text62
  9344  0000'                    __ptext62:
  9345                           	callstack 0
  9346  0000'                    _TiResetTics:
  9347                           	callstack 27
  9348                           
  9349                           ;incstack = 0
  9350                           ;TiResetTics@Handle stored from wreg
  9351  0000' 6E00'              	movwf	TiResetTics@Handle^0,c
  9352                           
  9353                           ;Timer.c: 71:     s_Timers[Handle].h_initialTics=h_Tics;
  9354  0002' 5000'              	movf	TiResetTics@Handle^0,w,c
  9355  0004' D805               	call	PL54	;call to abstracted procedure
  9356  0006' C00E' FFDE         	movff	_h_Tics,postinc2
  9357  000A' C00F' FFDD         	movff	_h_Tics+1,postdec2
  9358  000E' 0012               	return		;funcret
  9359  0010'                    __end_of_TiResetTics:
  9360                           	callstack 0
  9361  0010'                    PL54:
  9362                           	callstack 23
  9363  0010' 0D03               	mullw	3
  9364  0012' 50F3               	movf	243,w,c
  9365  0014' 0F00'              	addlw	low _s_Timers
  9366  0016' 6ED9               	movwf	fsr2l,c
  9367  0018' 6ADA               	clrf	fsr2h,c
  9368  001A' 0012               	return	
  9369  001C'                    __end_ofPL54:
  9370                           	callstack 0
  9371                           
  9372 ;; *************** function _TiGetTics *****************
  9373 ;; Defined at:
  9374 ;;		line 73 in file "Timer.c"
  9375 ;; Parameters:    Size  Location     Type
  9376 ;;  Handle          1    wreg     unsigned char 
  9377 ;; Auto vars:     Size  Location     Type
  9378 ;;  Handle          1    9[COMRAM] unsigned char 
  9379 ;;  actual          2   10[COMRAM] volatile unsigned int 
  9380 ;; Return value:  Size  Location     Type
  9381 ;;                  2    5[COMRAM] unsigned int 
  9382 ;; Registers used:
  9383 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  9384 ;; Tracked objects:
  9385 ;;		On entry : 0/1
  9386 ;;		On exit  : 0/0
  9387 ;;		Unchanged: 0/0
  9388 ;; Data sizes:     COMRAM   BANK0   BANK1
  9389 ;;      Params:         2       0       0
  9390 ;;      Locals:         3       0       0
  9391 ;;      Temps:          2       0       0
  9392 ;;      Totals:         7       0       0
  9393 ;;Total ram usage:        7 bytes
  9394 ;; Hardware stack levels used: 1
  9395 ;; Hardware stack levels required when called: 2
  9396 ;; This function calls:
  9397 ;;		Nothing
  9398 ;; This function is called by:
  9399 ;;		_menuMotor
  9400 ;;		_motorJoystick
  9401 ;;		_motorKey
  9402 ;;		_Espera
  9403 ;;		_WaitForBusy
  9404 ;;		_motorTimer
  9405 ;;		_motorMusic
  9406 ;;		_playNote
  9407 ;;		_motorTX
  9408 ;;		_motorRX
  9409 ;; This function uses a non-reentrant model
  9410 ;;
  9411                           
  9412                           	psect	text63
  9413  0000'                    __ptext63:
  9414                           	callstack 0
  9415  0000'                    _TiGetTics:
  9416                           	callstack 27
  9417                           
  9418                           ;incstack = 0
  9419                           ;TiGetTics@Handle stored from wreg
  9420  0000' 6E00'              	movwf	TiGetTics@Handle^0,c
  9421                           
  9422                           ;Timer.c: 77:     volatile unsigned int actual;;Timer.c: 78:     actual=h_Tics;
  9423  0002' C00E' F00A'        	movff	_h_Tics,TiGetTics@actual	;volatile
  9424  0006' C00F' F00B'        	movff	_h_Tics+1,TiGetTics@actual+1	;volatile
  9425                           
  9426                           ;Timer.c: 79:       return (actual-(s_Timers[Handle].h_initialTics));
  9427  000A' 5000'              	movf	TiGetTics@Handle^0,w,c
  9428  000C' EC00' F000'        	call	PL54	;call to abstracted procedure
  9429  0010' CFDE F007'         	movff	postinc2,??_TiGetTics
  9430  0014' CFDD F008'         	movff	postdec2,??_TiGetTics+1
  9431  0018' 5000'              	movf	??_TiGetTics^0,w,c
  9432  001A' 5C00'              	subwf	TiGetTics@actual^0,w,c	;volatile
  9433  001C' 6E00'              	movwf	?_TiGetTics^0,c
  9434  001E' 5000'              	movf	(??_TiGetTics+1)^0,w,c
  9435  0020' 5800'              	subwfb	(TiGetTics@actual+1)^0,w,c	;volatile
  9436  0022' 6E00'              	movwf	(?_TiGetTics+1)^0,c
  9437  0024' 0012               	return		;funcret
  9438  0026'                    __end_of_TiGetTics:
  9439                           	callstack 0
  9440                           
  9441 ;; *************** function _EscriuPrimeraOrdre *****************
  9442 ;; Defined at:
  9443 ;;		line 273 in file "LcTLCD.c"
  9444 ;; Parameters:    Size  Location     Type
  9445 ;;  ordre           1    wreg     unsigned char 
  9446 ;; Auto vars:     Size  Location     Type
  9447 ;;  ordre           1    6[COMRAM] unsigned char 
  9448 ;; Return value:  Size  Location     Type
  9449 ;;                  1    wreg      void 
  9450 ;; Registers used:
  9451 ;;		wreg, status,2, status,0
  9452 ;; Tracked objects:
  9453 ;;		On entry : 0/0
  9454 ;;		On exit  : 0/0
  9455 ;;		Unchanged: 0/0
  9456 ;; Data sizes:     COMRAM   BANK0   BANK1
  9457 ;;      Params:         0       0       0
  9458 ;;      Locals:         1       0       0
  9459 ;;      Temps:          1       0       0
  9460 ;;      Totals:         2       0       0
  9461 ;;Total ram usage:        2 bytes
  9462 ;; Hardware stack levels used: 1
  9463 ;; Hardware stack levels required when called: 2
  9464 ;; This function calls:
  9465 ;;		Nothing
  9466 ;; This function is called by:
  9467 ;;		_LcInit
  9468 ;; This function uses a non-reentrant model
  9469 ;;
  9470                           
  9471                           	psect	text64
  9472  0000'                    __ptext64:
  9473                           	callstack 0
  9474  0000'                    _EscriuPrimeraOrdre:
  9475                           	callstack 27
  9476                           
  9477                           ;incstack = 0
  9478                           ;EscriuPrimeraOrdre@ordre stored from wreg
  9479  0000' 6E00'              	movwf	EscriuPrimeraOrdre@ordre^0,c
  9480                           
  9481                           ;LcTLCD.c: 275:  (TRISBbits.TRISB0 = TRISDbits.TRISD2 = TRISDbits.TRISD1 = TRISDbits.TRI
      +                          SD0 = 0); (LATCbits.LATC0 = 0); (LATCbits.LATC1 = 0);
  9482  0002' 9095               	bcf	149,0,c	;volatile
  9483                           
  9484                           ;LcTLCD.c: 276:  (LATCbits.LATC2 = 1); (LATCbits.LATC2 = 1);
  9485  0004' D832               	call	PL62	;call to abstracted procedure
  9486  0006' 848B               	bsf	139,2,c	;volatile
  9487                           
  9488                           ;LcTLCD.c: 277:   (LATBbits.LATB0 = (ordre & 0x08 ? 1 : 0));
  9489  0008' A600'              	btfss	EscriuPrimeraOrdre@ordre^0,3,c
  9490  000A' D003               	goto	u440
  9491  000C' 6A00'              	clrf	??_EscriuPrimeraOrdre^0,c
  9492  000E' 2A00'              	incf	??_EscriuPrimeraOrdre^0,f,c
  9493  0010' D001               	goto	u458
  9494  0012'                    u440:
  9495  0012' 6A00'              	clrf	??_EscriuPrimeraOrdre^0,c
  9496  0014'                    u458:
  9497  0014' 508A               	movf	138,w,c	;volatile
  9498  0016' 1800'              	xorwf	??_EscriuPrimeraOrdre^0,w,c
  9499  0018' 0BFE               	andlw	-2
  9500  001A' 1800'              	xorwf	??_EscriuPrimeraOrdre^0,w,c
  9501  001C' 6E8A               	movwf	138,c	;volatile
  9502                           
  9503                           ;LcTLCD.c: 278:   (LATDbits.LATD2 = (ordre & 0x04 ? 1 : 0));
  9504  001E' A400'              	btfss	EscriuPrimeraOrdre@ordre^0,2,c
  9505  0020' D003               	goto	u460
  9506  0022' 6A00'              	clrf	??_EscriuPrimeraOrdre^0,c
  9507  0024' 2A00'              	incf	??_EscriuPrimeraOrdre^0,f,c
  9508  0026' D001               	goto	u478
  9509  0028'                    u460:
  9510  0028' 6A00'              	clrf	??_EscriuPrimeraOrdre^0,c
  9511  002A'                    u478:
  9512  002A' 4600'              	rlncf	??_EscriuPrimeraOrdre^0,f,c
  9513  002C' 4600'              	rlncf	??_EscriuPrimeraOrdre^0,f,c
  9514  002E' 508C               	movf	140,w,c	;volatile
  9515  0030' 1800'              	xorwf	??_EscriuPrimeraOrdre^0,w,c
  9516  0032' 0BFB               	andlw	-5
  9517  0034' 1800'              	xorwf	??_EscriuPrimeraOrdre^0,w,c
  9518  0036' 6E8C               	movwf	140,c	;volatile
  9519                           
  9520                           ;LcTLCD.c: 279:   (LATDbits.LATD1 = (ordre & 0x02 ? 1 : 0));
  9521  0038' A200'              	btfss	EscriuPrimeraOrdre@ordre^0,1,c
  9522  003A' D003               	goto	u480
  9523  003C' 6A00'              	clrf	??_EscriuPrimeraOrdre^0,c
  9524  003E' 2A00'              	incf	??_EscriuPrimeraOrdre^0,f,c
  9525  0040' D001               	goto	u498
  9526  0042'                    u480:
  9527  0042' 6A00'              	clrf	??_EscriuPrimeraOrdre^0,c
  9528  0044'                    u498:
  9529  0044' 4600'              	rlncf	??_EscriuPrimeraOrdre^0,f,c
  9530  0046' 508C               	movf	140,w,c	;volatile
  9531  0048' 1800'              	xorwf	??_EscriuPrimeraOrdre^0,w,c
  9532  004A' 0BFD               	andlw	-3
  9533  004C' 1800'              	xorwf	??_EscriuPrimeraOrdre^0,w,c
  9534  004E' 6E8C               	movwf	140,c	;volatile
  9535                           
  9536                           ;LcTLCD.c: 280:   (LATDbits.LATD0 = (ordre & 0x01 ? 1 : 0));
  9537  0050' A000'              	btfss	EscriuPrimeraOrdre@ordre^0,0,c
  9538  0052' D003               	goto	u500
  9539  0054' 6A00'              	clrf	??_EscriuPrimeraOrdre^0,c
  9540  0056' 2A00'              	incf	??_EscriuPrimeraOrdre^0,f,c
  9541  0058' D001               	goto	u518
  9542  005A'                    u500:
  9543  005A' 6A00'              	clrf	??_EscriuPrimeraOrdre^0,c
  9544  005C'                    u518:
  9545  005C' 508C               	movf	140,w,c	;volatile
  9546  005E' 1800'              	xorwf	??_EscriuPrimeraOrdre^0,w,c
  9547  0060' 0BFE               	andlw	-2
  9548  0062' 1800'              	xorwf	??_EscriuPrimeraOrdre^0,w,c
  9549  0064' 6E8C               	movwf	140,c	;volatile
  9550                           
  9551                           ;LcTLCD.c: 281:  (LATCbits.LATC2 = 0);
  9552  0066' 948B               	bcf	139,2,c	;volatile
  9553  0068' 0012               	return		;funcret
  9554  006A'                    __end_of_EscriuPrimeraOrdre:
  9555                           	callstack 0
  9556  006A'                    PL62:
  9557                           	callstack 23
  9558  006A' 9295               	bcf	149,1,c	;volatile
  9559  006C' 9495               	bcf	149,2,c	;volatile
  9560  006E' 9093               	bcf	147,0,c	;volatile
  9561  0070' 908B               	bcf	139,0,c	;volatile
  9562  0072' 928B               	bcf	139,1,c	;volatile
  9563  0074' 848B               	bsf	139,2,c	;volatile
  9564  0076' 0012               	return	
  9565  0078'                    __end_ofPL62:
  9566                           	callstack 0
  9567                           
  9568 ;; *************** function _CantaIR *****************
  9569 ;; Defined at:
  9570 ;;		line 223 in file "LcTLCD.c"
  9571 ;; Parameters:    Size  Location     Type
  9572 ;;  IR              1    wreg     unsigned char 
  9573 ;; Auto vars:     Size  Location     Type
  9574 ;;  IR              1    7[COMRAM] unsigned char 
  9575 ;; Return value:  Size  Location     Type
  9576 ;;                  1    wreg      void 
  9577 ;; Registers used:
  9578 ;;		wreg, status,2, status,0, cstack
  9579 ;; Tracked objects:
  9580 ;;		On entry : 0/1
  9581 ;;		On exit  : 0/0
  9582 ;;		Unchanged: 0/0
  9583 ;; Data sizes:     COMRAM   BANK0   BANK1
  9584 ;;      Params:         0       0       0
  9585 ;;      Locals:         1       0       0
  9586 ;;      Temps:          0       0       0
  9587 ;;      Totals:         1       0       0
  9588 ;;Total ram usage:        1 bytes
  9589 ;; Hardware stack levels used: 1
  9590 ;; Hardware stack levels required when called: 3
  9591 ;; This function calls:
  9592 ;;		_CantaPartAlta
  9593 ;;		_CantaPartBaixa
  9594 ;; This function is called by:
  9595 ;;		_LcInit
  9596 ;;		_LcClear
  9597 ;;		_LcCursorOn
  9598 ;;		_LcCursorOff
  9599 ;;		_LcGotoXY
  9600 ;;		_LcScroll
  9601 ;; This function uses a non-reentrant model
  9602 ;;
  9603                           
  9604                           	psect	text65
  9605  0000'                    __ptext65:
  9606                           	callstack 0
  9607  0000'                    _CantaIR:
  9608                           	callstack 23
  9609                           
  9610                           ;incstack = 0
  9611                           ;CantaIR@IR stored from wreg
  9612  0000' 6E00'              	movwf	CantaIR@IR^0,c
  9613                           
  9614                           ;LcTLCD.c: 224:  (TRISBbits.TRISB0 = TRISDbits.TRISD2 = TRISDbits.TRISD1 = TRISDbits.TRI
      +                          SD0 = 0);
  9615  0002' 9095               	bcf	149,0,c	;volatile
  9616                           
  9617                           ;LcTLCD.c: 225:  (LATCbits.LATC0 = 0);
  9618                           
  9619                           ;LcTLCD.c: 226:  (LATCbits.LATC1 = 0);
  9620                           
  9621                           ;LcTLCD.c: 227:  (LATCbits.LATC2 = 1);
  9622  0004' EC00' F000'        	call	PL62	;call to abstracted procedure
  9623                           
  9624                           ;LcTLCD.c: 228:  CantaPartAlta(IR);
  9625  0008' 5000'              	movf	CantaIR@IR^0,w,c
  9626  000A' EC00' F000'        	call	_CantaPartAlta
  9627                           
  9628                           ;LcTLCD.c: 229:  (LATCbits.LATC2 = 1);
  9629                           
  9630                           ;LcTLCD.c: 230:  (LATCbits.LATC2 = 0);
  9631                           
  9632                           ;LcTLCD.c: 231:  (LATCbits.LATC2 = 0);
  9633                           
  9634                           ;LcTLCD.c: 232:  (LATCbits.LATC2 = 1);
  9635  000E' EC00' F000'        	call	PL78	;call to abstracted procedure
  9636                           
  9637                           ;LcTLCD.c: 233:  CantaPartBaixa(IR);
  9638  0012' 5000'              	movf	CantaIR@IR^0,w,c
  9639  0014' EC00' F000'        	call	_CantaPartBaixa
  9640                           
  9641                           ;LcTLCD.c: 234:  (LATCbits.LATC2 = 1);
  9642                           
  9643                           ;LcTLCD.c: 235:  (LATCbits.LATC2 = 0);
  9644                           
  9645                           ;LcTLCD.c: 236:  (TRISBbits.TRISB0 = TRISDbits.TRISD2 = TRISDbits.TRISD1 = TRISDbits.TRI
      +                          SD0 = 1);
  9646  0018' EF00' F000'        	goto	PL56	;call to abstracted procedure
  9647  001C'                    __end_of_CantaIR:
  9648                           	callstack 0
  9649                           
  9650 ;; *************** function _CantaPartBaixa *****************
  9651 ;; Defined at:
  9652 ;;		line 216 in file "LcTLCD.c"
  9653 ;; Parameters:    Size  Location     Type
  9654 ;;  c               1    wreg     unsigned char 
  9655 ;; Auto vars:     Size  Location     Type
  9656 ;;  c               1    6[COMRAM] unsigned char 
  9657 ;; Return value:  Size  Location     Type
  9658 ;;                  1    wreg      void 
  9659 ;; Registers used:
  9660 ;;		wreg, status,2, status,0
  9661 ;; Tracked objects:
  9662 ;;		On entry : 0/1
  9663 ;;		On exit  : 0/0
  9664 ;;		Unchanged: 0/0
  9665 ;; Data sizes:     COMRAM   BANK0   BANK1
  9666 ;;      Params:         0       0       0
  9667 ;;      Locals:         1       0       0
  9668 ;;      Temps:          1       0       0
  9669 ;;      Totals:         2       0       0
  9670 ;;Total ram usage:        2 bytes
  9671 ;; Hardware stack levels used: 1
  9672 ;; Hardware stack levels required when called: 2
  9673 ;; This function calls:
  9674 ;;		Nothing
  9675 ;; This function is called by:
  9676 ;;		_CantaIR
  9677 ;;		_CantaData
  9678 ;; This function uses a non-reentrant model
  9679 ;;
  9680                           
  9681                           	psect	text66
  9682  0000'                    __ptext66:
  9683                           	callstack 0
  9684  0000'                    _CantaPartBaixa:
  9685                           	callstack 23
  9686                           
  9687                           ;incstack = 0
  9688                           ;CantaPartBaixa@c stored from wreg
  9689  0000' 6E00'              	movwf	CantaPartBaixa@c^0,c
  9690                           
  9691                           ;LcTLCD.c: 217:   (LATBbits.LATB0 = (c & 0x08 ? 1 : 0));
  9692  0002' A600'              	btfss	CantaPartBaixa@c^0,3,c
  9693  0004' D003               	goto	u2670
  9694  0006' 6A00'              	clrf	??_CantaPartBaixa^0,c
  9695  0008' 2A00'              	incf	??_CantaPartBaixa^0,f,c
  9696  000A' D001               	goto	u2688
  9697  000C'                    u2670:
  9698  000C' 6A00'              	clrf	??_CantaPartBaixa^0,c
  9699  000E'                    u2688:
  9700  000E' 508A               	movf	138,w,c	;volatile
  9701  0010' 1800'              	xorwf	??_CantaPartBaixa^0,w,c
  9702  0012' 0BFE               	andlw	-2
  9703  0014' 1800'              	xorwf	??_CantaPartBaixa^0,w,c
  9704  0016' 6E8A               	movwf	138,c	;volatile
  9705                           
  9706                           ;LcTLCD.c: 218:   (LATDbits.LATD2 = (c & 0x04 ? 1 : 0));
  9707  0018' A400'              	btfss	CantaPartBaixa@c^0,2,c
  9708  001A' D003               	goto	u2690
  9709  001C' 6A00'              	clrf	??_CantaPartBaixa^0,c
  9710  001E' 2A00'              	incf	??_CantaPartBaixa^0,f,c
  9711  0020' D001               	goto	u2708
  9712  0022'                    u2690:
  9713  0022' 6A00'              	clrf	??_CantaPartBaixa^0,c
  9714  0024'                    u2708:
  9715  0024' 4600'              	rlncf	??_CantaPartBaixa^0,f,c
  9716  0026' 4600'              	rlncf	??_CantaPartBaixa^0,f,c
  9717  0028' 508C               	movf	140,w,c	;volatile
  9718  002A' 1800'              	xorwf	??_CantaPartBaixa^0,w,c
  9719  002C' 0BFB               	andlw	-5
  9720  002E' 1800'              	xorwf	??_CantaPartBaixa^0,w,c
  9721  0030' 6E8C               	movwf	140,c	;volatile
  9722                           
  9723                           ;LcTLCD.c: 219:   (LATDbits.LATD1 = (c & 0x02 ? 1 : 0));
  9724  0032' A200'              	btfss	CantaPartBaixa@c^0,1,c
  9725  0034' D003               	goto	u2710
  9726  0036' 6A00'              	clrf	??_CantaPartBaixa^0,c
  9727  0038' 2A00'              	incf	??_CantaPartBaixa^0,f,c
  9728  003A' D001               	goto	u2728
  9729  003C'                    u2710:
  9730  003C' 6A00'              	clrf	??_CantaPartBaixa^0,c
  9731  003E'                    u2728:
  9732  003E' 4600'              	rlncf	??_CantaPartBaixa^0,f,c
  9733  0040' 508C               	movf	140,w,c	;volatile
  9734  0042' 1800'              	xorwf	??_CantaPartBaixa^0,w,c
  9735  0044' 0BFD               	andlw	-3
  9736  0046' 1800'              	xorwf	??_CantaPartBaixa^0,w,c
  9737  0048' 6E8C               	movwf	140,c	;volatile
  9738                           
  9739                           ;LcTLCD.c: 220:   (LATDbits.LATD0 = (c & 0x01 ? 1 : 0));
  9740  004A' A000'              	btfss	CantaPartBaixa@c^0,0,c
  9741  004C' D003               	goto	u2730
  9742  004E' 6A00'              	clrf	??_CantaPartBaixa^0,c
  9743  0050' 2A00'              	incf	??_CantaPartBaixa^0,f,c
  9744  0052' D001               	goto	u2748
  9745  0054'                    u2730:
  9746  0054' 6A00'              	clrf	??_CantaPartBaixa^0,c
  9747  0056'                    u2748:
  9748  0056' 508C               	movf	140,w,c	;volatile
  9749  0058' 1800'              	xorwf	??_CantaPartBaixa^0,w,c
  9750  005A' 0BFE               	andlw	-2
  9751  005C' 1800'              	xorwf	??_CantaPartBaixa^0,w,c
  9752  005E' 6E8C               	movwf	140,c	;volatile
  9753  0060' 0012               	return		;funcret
  9754  0062'                    __end_of_CantaPartBaixa:
  9755                           	callstack 0
  9756                           
  9757 ;; *************** function _CantaPartAlta *****************
  9758 ;; Defined at:
  9759 ;;		line 209 in file "LcTLCD.c"
  9760 ;; Parameters:    Size  Location     Type
  9761 ;;  c               1    wreg     unsigned char 
  9762 ;; Auto vars:     Size  Location     Type
  9763 ;;  c               1    6[COMRAM] unsigned char 
  9764 ;; Return value:  Size  Location     Type
  9765 ;;                  1    wreg      void 
  9766 ;; Registers used:
  9767 ;;		wreg, status,2, status,0
  9768 ;; Tracked objects:
  9769 ;;		On entry : 0/1
  9770 ;;		On exit  : 0/0
  9771 ;;		Unchanged: 0/0
  9772 ;; Data sizes:     COMRAM   BANK0   BANK1
  9773 ;;      Params:         0       0       0
  9774 ;;      Locals:         1       0       0
  9775 ;;      Temps:          1       0       0
  9776 ;;      Totals:         2       0       0
  9777 ;;Total ram usage:        2 bytes
  9778 ;; Hardware stack levels used: 1
  9779 ;; Hardware stack levels required when called: 2
  9780 ;; This function calls:
  9781 ;;		Nothing
  9782 ;; This function is called by:
  9783 ;;		_CantaIR
  9784 ;;		_CantaData
  9785 ;; This function uses a non-reentrant model
  9786 ;;
  9787                           
  9788                           	psect	text67
  9789  0000'                    __ptext67:
  9790                           	callstack 0
  9791  0000'                    _CantaPartAlta:
  9792                           	callstack 23
  9793                           
  9794                           ;incstack = 0
  9795                           ;CantaPartAlta@c stored from wreg
  9796  0000' 6E00'              	movwf	CantaPartAlta@c^0,c
  9797                           
  9798                           ;LcTLCD.c: 210:   (LATBbits.LATB0 = (c & 0x80 ? 1 : 0));
  9799  0002' AE00'              	btfss	CantaPartAlta@c^0,7,c
  9800  0004' D003               	goto	u2590
  9801  0006' 6A00'              	clrf	??_CantaPartAlta^0,c
  9802  0008' 2A00'              	incf	??_CantaPartAlta^0,f,c
  9803  000A' D001               	goto	u2608
  9804  000C'                    u2590:
  9805  000C' 6A00'              	clrf	??_CantaPartAlta^0,c
  9806  000E'                    u2608:
  9807  000E' 508A               	movf	138,w,c	;volatile
  9808  0010' 1800'              	xorwf	??_CantaPartAlta^0,w,c
  9809  0012' 0BFE               	andlw	-2
  9810  0014' 1800'              	xorwf	??_CantaPartAlta^0,w,c
  9811  0016' 6E8A               	movwf	138,c	;volatile
  9812                           
  9813                           ;LcTLCD.c: 211:   (LATDbits.LATD2 = (c & 0x40 ? 1 : 0));
  9814  0018' AC00'              	btfss	CantaPartAlta@c^0,6,c
  9815  001A' D003               	goto	u2610
  9816  001C' 6A00'              	clrf	??_CantaPartAlta^0,c
  9817  001E' 2A00'              	incf	??_CantaPartAlta^0,f,c
  9818  0020' D001               	goto	u2628
  9819  0022'                    u2610:
  9820  0022' 6A00'              	clrf	??_CantaPartAlta^0,c
  9821  0024'                    u2628:
  9822  0024' 4600'              	rlncf	??_CantaPartAlta^0,f,c
  9823  0026' 4600'              	rlncf	??_CantaPartAlta^0,f,c
  9824  0028' 508C               	movf	140,w,c	;volatile
  9825  002A' 1800'              	xorwf	??_CantaPartAlta^0,w,c
  9826  002C' 0BFB               	andlw	-5
  9827  002E' 1800'              	xorwf	??_CantaPartAlta^0,w,c
  9828  0030' 6E8C               	movwf	140,c	;volatile
  9829                           
  9830                           ;LcTLCD.c: 212:   (LATDbits.LATD1 = (c & 0x20 ? 1 : 0));
  9831  0032' AA00'              	btfss	CantaPartAlta@c^0,5,c
  9832  0034' D003               	goto	u2630
  9833  0036' 6A00'              	clrf	??_CantaPartAlta^0,c
  9834  0038' 2A00'              	incf	??_CantaPartAlta^0,f,c
  9835  003A' D001               	goto	u2648
  9836  003C'                    u2630:
  9837  003C' 6A00'              	clrf	??_CantaPartAlta^0,c
  9838  003E'                    u2648:
  9839  003E' 4600'              	rlncf	??_CantaPartAlta^0,f,c
  9840  0040' 508C               	movf	140,w,c	;volatile
  9841  0042' 1800'              	xorwf	??_CantaPartAlta^0,w,c
  9842  0044' 0BFD               	andlw	-3
  9843  0046' 1800'              	xorwf	??_CantaPartAlta^0,w,c
  9844  0048' 6E8C               	movwf	140,c	;volatile
  9845                           
  9846                           ;LcTLCD.c: 213:   (LATDbits.LATD0 = (c & 0x10 ? 1 : 0));
  9847  004A' A800'              	btfss	CantaPartAlta@c^0,4,c
  9848  004C' D003               	goto	u2650
  9849  004E' 6A00'              	clrf	??_CantaPartAlta^0,c
  9850  0050' 2A00'              	incf	??_CantaPartAlta^0,f,c
  9851  0052' D001               	goto	u2668
  9852  0054'                    u2650:
  9853  0054' 6A00'              	clrf	??_CantaPartAlta^0,c
  9854  0056'                    u2668:
  9855  0056' 508C               	movf	140,w,c	;volatile
  9856  0058' 1800'              	xorwf	??_CantaPartAlta^0,w,c
  9857  005A' 0BFE               	andlw	-2
  9858  005C' 1800'              	xorwf	??_CantaPartAlta^0,w,c
  9859  005E' 6E8C               	movwf	140,c	;volatile
  9860  0060' 0012               	return		;funcret
  9861  0062'                    __end_of_CantaPartAlta:
  9862                           	callstack 0
  9863                           
  9864 ;; *************** function _EeInitAction *****************
  9865 ;; Defined at:
  9866 ;;		line 12 in file "EEPROM.c"
  9867 ;; Parameters:    Size  Location     Type
  9868 ;;		None
  9869 ;; Auto vars:     Size  Location     Type
  9870 ;;		None
  9871 ;; Return value:  Size  Location     Type
  9872 ;;                  1    wreg      void 
  9873 ;; Registers used:
  9874 ;;		wreg, status,2
  9875 ;; Tracked objects:
  9876 ;;		On entry : 0/0
  9877 ;;		On exit  : 0/0
  9878 ;;		Unchanged: 0/0
  9879 ;; Data sizes:     COMRAM   BANK0   BANK1
  9880 ;;      Params:         0       0       0
  9881 ;;      Locals:         0       0       0
  9882 ;;      Temps:          0       0       0
  9883 ;;      Totals:         0       0       0
  9884 ;;Total ram usage:        0 bytes
  9885 ;; Hardware stack levels used: 1
  9886 ;; Hardware stack levels required when called: 2
  9887 ;; This function calls:
  9888 ;;		Nothing
  9889 ;; This function is called by:
  9890 ;;		_main
  9891 ;; This function uses a non-reentrant model
  9892 ;;
  9893                           
  9894                           	psect	text68
  9895  0000'                    __ptext68:
  9896                           	callstack 0
  9897  0000'                    _EeInitAction:
  9898                           	callstack 28
  9899                           
  9900                           ;EEPROM.c: 13:     pointer = 0;
  9901                           
  9902                           ;incstack = 0
  9903  0000' 6A00'              	clrf	_pointer@EEPROM$F1774^0,c
  9904                           
  9905                           ;EEPROM.c: 14:     pointerEeprom = 0;
  9906  0002' 6A00'              	clrf	_pointerEeprom^0,c
  9907                           
  9908                           ;EEPROM.c: 15:     eepromState = 10;
  9909  0004' 0E0A               	movlw	10
  9910  0006' 6E00'              	movwf	_eepromState^0,c
  9911  0008' 0C0A               	retlw	10	;funcret
  9912  000A'                    __end_of_EeInitAction:
  9913                           	callstack 0
  9914                           
  9915 ;; *************** function _RSI_High *****************
  9916 ;; Defined at:
  9917 ;;		line 27 in file "main.c"
  9918 ;; Parameters:    Size  Location     Type
  9919 ;;		None
  9920 ;; Auto vars:     Size  Location     Type
  9921 ;;		None
  9922 ;; Return value:  Size  Location     Type
  9923 ;;                  1    wreg      void 
  9924 ;; Registers used:
  9925 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9926 ;; Tracked objects:
  9927 ;;		On entry : 0/0
  9928 ;;		On exit  : 0/0
  9929 ;;		Unchanged: 0/0
  9930 ;; Data sizes:     COMRAM   BANK0   BANK1
  9931 ;;      Params:         0       0       0
  9932 ;;      Locals:         0       0       0
  9933 ;;      Temps:          4       0       0
  9934 ;;      Totals:         4       0       0
  9935 ;;Total ram usage:        4 bytes
  9936 ;; Hardware stack levels used: 1
  9937 ;; Hardware stack levels required when called: 1
  9938 ;; This function calls:
  9939 ;;		__TiRSITimer
  9940 ;; This function is called by:
  9941 ;;		Interrupt level 2
  9942 ;; This function uses a non-reentrant model
  9943 ;;
  9944                           
  9945                           	psect	intcode
  9946  0000'                    __pintcode:
  9947                           	callstack 0
  9948  0000'                    _RSI_High:
  9949                           	callstack 23
  9950                           
  9951                           ;incstack = 0
  9952  0000' 8200'              	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  9953  0002' CFD9 F001'         	movff	fsr2l,??_RSI_High
  9954  0006' CFDA F002'         	movff	fsr2h,??_RSI_High+1
  9955  000A' CFF3 F003'         	movff	prodl,??_RSI_High+2
  9956  000E' CFF4 F004'         	movff	prodh,??_RSI_High+3
  9957                           
  9958                           ;main.c: 28:     LcGotoXY(0,0);
  9959  0012' EC00' F000'        	call	__TiRSITimer	;wreg free
  9960  0016' C004' FFF4         	movff	??_RSI_High+3,prodh
  9961  001A' C003' FFF3         	movff	??_RSI_High+2,prodl
  9962  001E' C002' FFDA         	movff	??_RSI_High+1,fsr2h
  9963  0022' C001' FFD9         	movff	??_RSI_High,fsr2l
  9964  0026' 9200'              	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  9965  0028' 0011               	retfie		f
  9966  002A'                    __end_of_RSI_High:
  9967                           	callstack 0
  9968                           
  9969 ;; *************** function __TiRSITimer *****************
  9970 ;; Defined at:
  9971 ;;		line 46 in file "Timer.c"
  9972 ;; Parameters:    Size  Location     Type
  9973 ;;		None
  9974 ;; Auto vars:     Size  Location     Type
  9975 ;;		None
  9976 ;; Return value:  Size  Location     Type
  9977 ;;                  1    wreg      void 
  9978 ;; Registers used:
  9979 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  9980 ;; Tracked objects:
  9981 ;;		On entry : 0/0
  9982 ;;		On exit  : 0/0
  9983 ;;		Unchanged: 0/0
  9984 ;; Data sizes:     COMRAM   BANK0   BANK1
  9985 ;;      Params:         0       0       0
  9986 ;;      Locals:         0       0       0
  9987 ;;      Temps:          1       0       0
  9988 ;;      Totals:         1       0       0
  9989 ;;Total ram usage:        1 bytes
  9990 ;; Hardware stack levels used: 1
  9991 ;; This function calls:
  9992 ;;		Nothing
  9993 ;; This function is called by:
  9994 ;;		_RSI_High
  9995 ;; This function uses a non-reentrant model
  9996 ;;
  9997                           
  9998                           	psect	text70
  9999  0000'                    __ptext70:
 10000                           	callstack 0
 10001  0000'                    __TiRSITimer:
 10002                           	callstack 0
 10003                           
 10004                           ;Timer.c: 50:     TMR0H = 0xDF;
 10005                           
 10006                           ;incstack = 0
 10007                           
 10008                           ;Timer.c: 51:     TMR0L = 0x73;
 10009  0000' D81E               	call	PL76	;call to abstracted procedure
 10010                           
 10011                           ;Timer.c: 53:     INTCONbits.TMR0IF = 0;
 10012  0002' 94F2               	bcf	242,2,c	;volatile
 10013                           
 10014                           ;Timer.c: 54:     h_Tics++;
 10015  0004' 4A00'              	infsnz	_h_Tics^0,f,c
 10016  0006' 2A00'              	incf	(_h_Tics+1)^0,f,c
 10017                           
 10018                           ;Timer.c: 56:     if (h_Tics>=30000) {
 10019  0008' 0E30               	movlw	48
 10020  000A' 5C00'              	subwf	_h_Tics^0,w,c
 10021  000C' 0E75               	movlw	117
 10022  000E' 5800'              	subwfb	(_h_Tics+1)^0,w,c
 10023  0010' A0D8               	btfss	status,0,c
 10024  0012' 0012               	return	
 10025                           
 10026                           ;Timer.c: 58:         for (counter=0;counter<9;counter++){
 10027  0014' 6A00'              	clrf	_counter^0,c
 10028  0016'                    i2l4532:
 10029  0016' 0E08               	movlw	8
 10030  0018' 6400'              	cpfsgt	_counter^0,c
 10031  001A' D001               	goto	i2l4536
 10032  001C' D00D               	goto	i2l927
 10033  001E'                    i2l4536:
 10034                           
 10035                           ;Timer.c: 59:             if (s_Timers[counter].b_busy==1){
 10036  001E' EC00' F000'        	call	PL28	;call to abstracted procedure
 10037  0022' 04DE               	decf	postinc2,w,c
 10038  0024' E107               	bnz	i2l4540
 10039                           
 10040                           ;Timer.c: 60:                 s_Timers[counter].h_initialTics -= h_Tics;
 10041  0026' 5000'              	movf	_counter^0,w,c
 10042  0028' EC00' F000'        	call	PL54	;call to abstracted procedure
 10043  002C' 5000'              	movf	_h_Tics^0,w,c
 10044  002E' 5EDE               	subwf	postinc2,f,c
 10045  0030' 5000'              	movf	(_h_Tics+1)^0,w,c
 10046  0032' 5ADD               	subwfb	postdec2,f,c
 10047  0034'                    i2l4540:
 10048                           
 10049                           ;Timer.c: 62:         }
 10050  0034' 2A00'              	incf	_counter^0,f,c
 10051  0036' D7EF               	goto	i2l4532
 10052  0038'                    i2l927:
 10053                           
 10054                           ;Timer.c: 63:         h_Tics=0;
 10055  0038' 6A00'              	clrf	_h_Tics^0,c
 10056  003A' 6A00'              	clrf	(_h_Tics+1)^0,c
 10057  003C' 0012               	return		;funcret
 10058  003E'                    __end_of__TiRSITimer:
 10059                           	callstack 0
 10060  003E'                    PL76:
 10061                           	callstack 27
 10062  003E' 0EDF               	movlw	223
 10063  0040' 6ED7               	movwf	215,c	;volatile
 10064  0042' 0E73               	movlw	115
 10065  0044' 6ED6               	movwf	214,c	;volatile
 10066  0046' 0C73               	retlw	115
 10067  0048'                    __end_ofPL76:
 10068                           	callstack 0
 10069                           
 10070                           	psect	rparam
 10071  0000                     
 10072                           	psect	temp
 10073  0000'                    btemp:
 10074                           	callstack 0
 10075  0000'                    	ds	1
 10076  0000                     int$flags	set	btemp
 10077  0000                     wtemp8	set	btemp+1
 10078  0000                     ttemp5	set	btemp+1
 10079  0000                     ttemp6	set	btemp+4
 10080  0000                     ttemp7	set	btemp+8
 10081                           
 10082                           	psect	idloc
 10083                           
 10084                           ;Config register IDLOC0 @ 0x200000
 10085                           ;	unspecified, using default values
 10086  200000                     	org	2097152
 10087  200000  FF                 	db	255
 10088                           
 10089                           ;Config register IDLOC1 @ 0x200001
 10090                           ;	unspecified, using default values
 10091  200001                     	org	2097153
 10092  200001  FF                 	db	255
 10093                           
 10094                           ;Config register IDLOC2 @ 0x200002
 10095                           ;	unspecified, using default values
 10096  200002                     	org	2097154
 10097  200002  FF                 	db	255
 10098                           
 10099                           ;Config register IDLOC3 @ 0x200003
 10100                           ;	unspecified, using default values
 10101  200003                     	org	2097155
 10102  200003  FF                 	db	255
 10103                           
 10104                           ;Config register IDLOC4 @ 0x200004
 10105                           ;	unspecified, using default values
 10106  200004                     	org	2097156
 10107  200004  FF                 	db	255
 10108                           
 10109                           ;Config register IDLOC5 @ 0x200005
 10110                           ;	unspecified, using default values
 10111  200005                     	org	2097157
 10112  200005  FF                 	db	255
 10113                           
 10114                           ;Config register IDLOC6 @ 0x200006
 10115                           ;	unspecified, using default values
 10116  200006                     	org	2097158
 10117  200006  FF                 	db	255
 10118                           
 10119                           ;Config register IDLOC7 @ 0x200007
 10120                           ;	unspecified, using default values
 10121  200007                     	org	2097159
 10122  200007  FF                 	db	255
 10123                           
 10124                           	psect	config
 10125                           
 10126                           ; Padding undefined space
 10127  300000                     	org	3145728
 10128  300000  FF                 	db	255
 10129                           
 10130                           ;Config register CONFIG1H @ 0x300001
 10131                           ;	Oscillator
 10132                           ;	OSC = HSPLL, HS oscillator, PLL enabled (Clock Frequency = 4 x FOSC1)
 10133                           ;	Fail-Safe Clock Monitor Enable bit
 10134                           ;	FCMEN = 0x0, unprogrammed default
 10135                           ;	Internal/External Oscillator Switchover bit
 10136                           ;	IESO = 0x0, unprogrammed default
 10137  300001                     	org	3145729
 10138  300001  06                 	db	6
 10139                           
 10140                           ;Config register CONFIG2L @ 0x300002
 10141                           ;	Power-up Timer Enable bit
 10142                           ;	PWRT = OFF, PWRT disabled
 10143                           ;	Brown-out Reset Enable bits
 10144                           ;	BOR = OFF, Brown-out Reset disabled in hardware and software
 10145                           ;	Brown-out Reset Voltage bits
 10146                           ;	BORV = 0x3, unprogrammed default
 10147  300002                     	org	3145730
 10148  300002  19                 	db	25
 10149                           
 10150                           ;Config register CONFIG2H @ 0x300003
 10151                           ;	Watchdog Timer Enable bit
 10152                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
 10153                           ;	Watchdog Timer Postscale Select bits
 10154                           ;	WDTPS = 0xF, unprogrammed default
 10155  300003                     	org	3145731
 10156  300003  1E                 	db	30
 10157                           
 10158                           ; Padding undefined space
 10159  300004                     	org	3145732
 10160  300004  FF                 	db	255
 10161                           
 10162                           ;Config register CONFIG3H @ 0x300005
 10163                           ;	CCP2 MUX bit
 10164                           ;	CCP2MX = 0x1, unprogrammed default
 10165                           ;	PORTB A/D Enable bit
 10166                           ;	PBADEN = DIG, PORTB<4:0> pins are configured as digital I/O on Reset
 10167                           ;	Low-Power Timer1 Oscillator Enable bit
 10168                           ;	LPT1OSC = 0x0, unprogrammed default
 10169                           ;	MCLR Pin Enable bit
 10170                           ;	MCLRE = ON, MCLR pin enabled; RE3 input pin disabled
 10171  300005                     	org	3145733
 10172  300005  81                 	db	129
 10173                           
 10174                           ;Config register CONFIG4L @ 0x300006
 10175                           ;	Stack Full/Underflow Reset Enable bit
 10176                           ;	STVREN = 0x1, unprogrammed default
 10177                           ;	Single-Supply ICSP Enable bit
 10178                           ;	LVP = OFF, Single-Supply ICSP disabled
 10179                           ;	Boot Block Size Select bits
 10180                           ;	BBSIZ = 0x0, unprogrammed default
 10181                           ;	Extended Instruction Set Enable bit
 10182                           ;	XINST = 0x0, unprogrammed default
 10183                           ;	Background Debugger Enable bit
 10184                           ;	DEBUG = OFF, Background debugger disabled, RB6 and RB7 configured as general purpose I
      +                          /O pins
 10185  300006                     	org	3145734
 10186  300006  81                 	db	129
 10187                           
 10188                           ; Padding undefined space
 10189  300007                     	org	3145735
 10190  300007  FF                 	db	255
 10191                           
 10192                           ;Config register CONFIG5L @ 0x300008
 10193                           ;	unspecified, using default values
 10194                           ;	Code Protection bit
 10195                           ;	CP0 = 0x1, unprogrammed default
 10196                           ;	Code Protection bit
 10197                           ;	CP1 = 0x1, unprogrammed default
 10198  300008                     	org	3145736
 10199  300008  03                 	db	3
 10200                           
 10201                           ;Config register CONFIG5H @ 0x300009
 10202                           ;	unspecified, using default values
 10203                           ;	Boot Block Code Protection bitProtect Boot
 10204                           ;	CPB = 0x1, unprogrammed default
 10205                           ;	Data EEPROM Code Protection bit
 10206                           ;	CPD = 0x1, unprogrammed default
 10207  300009                     	org	3145737
 10208  300009  C0                 	db	192
 10209                           
 10210                           ;Config register CONFIG6L @ 0x30000A
 10211                           ;	unspecified, using default values
 10212                           ;	Write Protection bit
 10213                           ;	WRT0 = 0x1, unprogrammed default
 10214                           ;	Write Protection bit
 10215                           ;	WRT1 = 0x1, unprogrammed default
 10216  30000A                     	org	3145738
 10217  30000A  03                 	db	3
 10218                           
 10219                           ;Config register CONFIG6H @ 0x30000B
 10220                           ;	unspecified, using default values
 10221                           ;	Configuration Register Write Protection bit
 10222                           ;	WRTC = 0x1, unprogrammed default
 10223                           ;	Boot Block Write Protection bit
 10224                           ;	WRTB = 0x1, unprogrammed default
 10225                           ;	Data EEPROM Write Protection bit
 10226                           ;	WRTD = 0x1, unprogrammed default
 10227  30000B                     	org	3145739
 10228  30000B  E0                 	db	224
 10229                           
 10230                           ;Config register CONFIG7L @ 0x30000C
 10231                           ;	unspecified, using default values
 10232                           ;	Table Read Protection bit
 10233                           ;	EBTR0 = 0x1, unprogrammed default
 10234                           ;	Table Read Protection bit
 10235                           ;	EBTR1 = 0x1, unprogrammed default
 10236  30000C                     	org	3145740
 10237  30000C  03                 	db	3
 10238                           
 10239                           ;Config register CONFIG7H @ 0x30000D
 10240                           ;	unspecified, using default values
 10241                           ;	Boot Block Table Read Protection bit
 10242                           ;	EBTRB = 0x1, unprogrammed default
 10243  30000D                     	org	3145741
 10244  30000D  40                 	db	64
 10245                           tosu	equ	0xFFF
 10246                           tosh	equ	0xFFE
 10247                           tosl	equ	0xFFD
 10248                           stkptr	equ	0xFFC
 10249                           pclatu	equ	0xFFB
 10250                           pclath	equ	0xFFA
 10251                           pcl	equ	0xFF9
 10252                           tblptru	equ	0xFF8
 10253                           tblptrh	equ	0xFF7
 10254                           tblptrl	equ	0xFF6
 10255                           tablat	equ	0xFF5
 10256                           prodh	equ	0xFF4
 10257                           prodl	equ	0xFF3
 10258                           indf0	equ	0xFEF
 10259                           postinc0	equ	0xFEE
 10260                           postdec0	equ	0xFED
 10261                           preinc0	equ	0xFEC
 10262                           plusw0	equ	0xFEB
 10263                           fsr0h	equ	0xFEA
 10264                           fsr0l	equ	0xFE9
 10265                           wreg	equ	0xFE8
 10266                           indf1	equ	0xFE7
 10267                           postinc1	equ	0xFE6
 10268                           postdec1	equ	0xFE5
 10269                           preinc1	equ	0xFE4
 10270                           plusw1	equ	0xFE3
 10271                           fsr1h	equ	0xFE2
 10272                           fsr1l	equ	0xFE1
 10273                           bsr	equ	0xFE0
 10274                           indf2	equ	0xFDF
 10275                           postinc2	equ	0xFDE
 10276                           postdec2	equ	0xFDD
 10277                           preinc2	equ	0xFDC
 10278                           plusw2	equ	0xFDB
 10279                           fsr2h	equ	0xFDA
 10280                           fsr2l	equ	0xFD9
 10281                           status	equ	0xFD8

Data Sizes:
    Strings     98
    Constant    62
    Data        100
    BSS         195
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     24     121
    BANK0           128      0     127
    BANK1           244      6      78

Pointer List with Targets:

    menuStrings@Menu$F1879	PTR unsigned char [5] size(1) Largest target is 30
		 -> STR_20(CODE[17]), STR_19(CODE[17]), STR_18(CODE[30]), STR_17(CODE[17]), 
		 -> STR_16(CODE[17]), 

    menuStrings@Menu$F725	PTR unsigned char [5] size(1) Largest target is 30
		 -> STR_15(CODE[17]), STR_14(CODE[17]), STR_13(CODE[30]), STR_12(CODE[17]), 
		 -> STR_11(CODE[17]), 

    menuStrings@Menu$F564	PTR unsigned char [5] size(1) Largest target is 30
		 -> STR_10(CODE[17]), STR_9(CODE[17]), STR_8(CODE[30]), STR_7(CODE[17]), 
		 -> STR_6(CODE[17]), 

    menuStrings	PTR unsigned char [5] size(1) Largest target is 30
		 -> STR_5(CODE[17]), STR_4(CODE[17]), STR_3(CODE[30]), STR_2(CODE[17]), 
		 -> STR_1(CODE[17]), 


Critical Paths under _main in COMRAM

    _motorTimer->_LcPutTime
    _motorTX->_TiGetTics
    _motorRX->_TiGetTics
    _motorMusic->_playNote
    _playNote->_TiGetTics
    _motorKey->_TiGetTics
    _motorJoystick->_TiGetTics
    _menuMotor->_writeEeprom
    _startMusic->_TiResetTics
    _sendMyTX->_TiResetTics
    _LcScroll->_CantaIR
    _LcPutTime->_LcPutChar
    _LcPutScore->_LcPutChar
    ___lbdiv->___lbmod
    _LcPutChar->_LcGotoXY
    _LcGotoXY->_WaitForBusy
    _CantaData->_CantaPartAlta
    _CantaData->_CantaPartBaixa
    _LcCursorOn->_WaitForBusy
    _LcCursorOff->_WaitForBusy
    _LcClear->_Espera
    _KeyResetValue->_TiResetTics
    _initTX->_TiGetTimer
    _initTX->_TiResetTics
    _initMusic->_TiGetTimer
    _initMenu->_TiGetTimer
    _initMenu->_TiResetTics
    _initMenu->_readEeprom
    _initKeypad->_TiGetTimer
    _initKeypad->_TiResetTics
    _initJoystick->_TiGetTimer
    _initJoystick->_TiResetTics
    _TiInitTimer->_TiGetTimer
    _TiInitTimer->_TiResetTics
    _LcInit->_Espera
    _WaitForBusy->_TiGetTics
    _Espera->_TiGetTics
    _CantaIR->_CantaPartAlta
    _CantaIR->_CantaPartBaixa

Critical Paths under _RSI_High in COMRAM

    _RSI_High->__TiRSITimer

Critical Paths under _main in BANK0

    None.

Critical Paths under _RSI_High in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_menuMotor

Critical Paths under _RSI_High in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   47396
                       _EeInitAction
                            _LcClear
                           _LcGotoXY
                             _LcInit
                         _TiGetTimer
                        _TiInitTimer
                        _TiResetTics
                           _initData
                       _initJoystick
                         _initKeypad
                           _initMenu
                          _initMusic
                            _initSIO
                             _initTX
                          _menuMotor
                        _motorEeprom
                      _motorJoystick
                           _motorKey
                         _motorMusic
                            _motorRX
                            _motorTX
                         _motorTimer
 ---------------------------------------------------------------------------------
 (1) _motorTimer                                           2     2      0   14024
                                              0 BANK1      2     2      0
                           _LcGotoXY
                          _LcPutChar
                          _LcPutTime
                          _TiGetTics
                        _TiResetTics
 ---------------------------------------------------------------------------------
 (1) _motorTX                                              2     2      0      67
                                             12 COMRAM     2     2      0
                          _TiGetTics
                        _TiResetTics
 ---------------------------------------------------------------------------------
 (1) _motorRX                                              2     2      0     133
                                             12 COMRAM     2     2      0
                         _TXgetState
                          _TiGetTics
                        _TiResetTics
                           _sendMyTX
                              _setTX
 ---------------------------------------------------------------------------------
 (1) _motorMusic                                           2     2      0     156
                                             15 COMRAM     2     2      0
                          _TiGetTics
                        _TiResetTics
                           _playNote
 ---------------------------------------------------------------------------------
 (2) _playNote                                             3     3      0      89
                                             12 COMRAM     3     3      0
                          _TiGetTics
                        _TiResetTics
 ---------------------------------------------------------------------------------
 (1) _motorKey                                             2     2      0     780
                                             12 COMRAM     2     2      0
                      _KeyResetValue
                          _TiGetTics
                        _TiResetTics
                            ___lbmod
 ---------------------------------------------------------------------------------
 (1) _motorJoystick                                        2     2      0      89
                                             12 COMRAM     2     2      0
                             _TXbusy
                          _TiGetTics
                        _TiResetTics
                            _getGame
                _getPositionJoystick
              _resetPositionJoystick
                              _setTX
 ---------------------------------------------------------------------------------
 (2) _getGame                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _motorEeprom                                          2     2      0       0
                                              5 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _menuMotor                                            6     6      0   24569
                                              0 BANK1      6     6      0
                       _KeyGetNumber
                        _KeyGetPress
                          _KeyGetSMS
                        _KeyGetValue
                      _KeyResetValue
                            _LcClear
                        _LcCursorOff
                         _LcCursorOn
                           _LcGotoXY
                          _LcPutChar
                         _LcPutScore
                          _LcPutTime
                           _LcScroll
                             _RXdata
                             _TXbusy
                         _TXgetState
                          _TiGetTics
                        _TiResetTics
                            ___lbdiv
                            ___lbmod
                           _endMusic
                  _getCentreJoystick
                    _getDoneCharging
                  _getFirstDirection
            _getFirstDirectionScores
                _getPositionJoystick
                              _getRX
                           _getScore
                            _getUser
                          _isPressed
                         _readEeprom
                   _readEepromScores
              _resetPositionJoystick
                           _sendMyTX
                              _setTX
                       _showTimerPic
                         _startMusic
                       _stopTimerPic
                        _writeEeprom
                  _writeEepromScores
 ---------------------------------------------------------------------------------
 (2) _writeEepromScores                                    3     0      3     500
                                              5 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (2) _writeEeprom                                         19     0     19     348
                                              5 COMRAM    19     0     19
 ---------------------------------------------------------------------------------
 (2) _stopTimerPic                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _startMusic                                           0     0      0      22
                        _TiResetTics
 ---------------------------------------------------------------------------------
 (2) _showTimerPic                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _setTX                                                1     1      0      22
                                              5 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _sendMyTX                                             1     1      0      44
                                              6 COMRAM     1     1      0
                        _TiResetTics
 ---------------------------------------------------------------------------------
 (2) _resetPositionJoystick                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _readEepromScores                                     1     1      0      22
                                              5 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _isPressed                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _getUser                                             18     0     18       0
                                              5 COMRAM    18     0     18
 ---------------------------------------------------------------------------------
 (2) _getScore                                             2     0      2       0
                                              5 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _getRX                                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _getPositionJoystick                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _getFirstDirectionScores                              1     1      0      22
                                              5 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _getFirstDirection                                    1     1      0      22
                                              5 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _getDoneCharging                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _getCentreJoystick                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _endMusic                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TXgetState                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TXbusy                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _RXdata                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _LcScroll                                             0     0      0     220
                            _CantaIR
 ---------------------------------------------------------------------------------
 (2) _LcPutTime                                            1     1      0    5665
                                             22 COMRAM     1     1      0
                          _LcPutChar
                            ___lbdiv
                            ___lbmod
 ---------------------------------------------------------------------------------
 (2) _LcPutScore                                           1     1      0    5797
                                             22 COMRAM     1     1      0
                          _LcPutChar
                            ___lbdiv
                            ___lbmod
 ---------------------------------------------------------------------------------
 (3) ___lbmod                                              4     3      1     691
                                              5 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 (3) ___lbdiv                                              4     3      1     618
                                              9 COMRAM     4     3      1
                            ___lbmod (ARG)
 ---------------------------------------------------------------------------------
 (3) _LcPutChar                                            1     1      0    4312
                                             21 COMRAM     1     1      0
                          _CantaData
                           _LcGotoXY
                        _WaitForBusy
 ---------------------------------------------------------------------------------
 (4) _LcGotoXY                                             8     7      1    3980
                                             13 COMRAM     8     7      1
                            _CantaIR
                        _WaitForBusy
 ---------------------------------------------------------------------------------
 (4) _CantaData                                            1     1      0     220
                                              7 COMRAM     1     1      0
                      _CantaPartAlta
                     _CantaPartBaixa
 ---------------------------------------------------------------------------------
 (2) _LcCursorOn                                           0     0      0     310
                            _CantaIR
                        _WaitForBusy
 ---------------------------------------------------------------------------------
 (2) _LcCursorOff                                          0     0      0     310
                            _CantaIR
                        _WaitForBusy
 ---------------------------------------------------------------------------------
 (2) _LcClear                                              0     0      0    1507
                            _CantaIR
                             _Espera
                        _WaitForBusy
 ---------------------------------------------------------------------------------
 (2) _KeyResetValue                                        0     0      0      22
                        _TiResetTics
 ---------------------------------------------------------------------------------
 (2) _KeyGetValue                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _KeyGetSMS                                            1     1      0      23
                                              5 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _KeyGetPress                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _KeyGetNumber                                         1     1      0      23
                                              5 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _initTX                                               0     0      0      22
                         _TiGetTimer
                        _TiResetTics
 ---------------------------------------------------------------------------------
 (1) _initSIO                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initMusic                                            0     0      0       0
                         _TiGetTimer
 ---------------------------------------------------------------------------------
 (1) _initMenu                                             0     0      0      44
                         _TiGetTimer
                        _TiResetTics
                         _readEeprom
 ---------------------------------------------------------------------------------
 (2) _readEeprom                                           1     1      0      22
                                              5 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _initKeypad                                           0     0      0      22
                         _TiGetTimer
                        _TiResetTics
 ---------------------------------------------------------------------------------
 (1) _initJoystick                                         0     0      0      22
                         _TiGetTimer
                        _TiResetTics
 ---------------------------------------------------------------------------------
 (1) _initData                                             5     5      0     204
                                              5 COMRAM     5     5      0
 ---------------------------------------------------------------------------------
 (1) _TiInitTimer                                          0     0      0      22
                         _TiGetTimer
                        _TiResetTics
 ---------------------------------------------------------------------------------
 (1) _LcInit                                               4     3      1    1733
                                             16 COMRAM     4     3      1
                            _CantaIR
                 _EscriuPrimeraOrdre
                             _Espera
                         _TiGetTimer
                        _WaitForBusy
 ---------------------------------------------------------------------------------
 (4) _WaitForBusy                                          1     1      0      90
                                             12 COMRAM     1     1      0
                          _TiGetTics
                        _TiResetTics
 ---------------------------------------------------------------------------------
 (2) _TiGetTimer                                           1     1      0       0
                                              5 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _Espera                                               4     0      4    1197
                                             12 COMRAM     4     0      4
                          _TiGetTics
                        _TiResetTics
 ---------------------------------------------------------------------------------
 (2) _TiResetTics                                          1     1      0      22
                                              5 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _TiGetTics                                            7     5      2      45
                                              5 COMRAM     7     5      2
 ---------------------------------------------------------------------------------
 (2) _EscriuPrimeraOrdre                                   2     2      0      60
                                              5 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (5) _CantaIR                                              1     1      0     220
                                              7 COMRAM     1     1      0
                      _CantaPartAlta
                     _CantaPartBaixa
 ---------------------------------------------------------------------------------
 (6) _CantaPartBaixa                                       2     2      0      88
                                              5 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (6) _CantaPartAlta                                        2     2      0      88
                                              5 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _EeInitAction                                         0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _RSI_High                                             4     4      0       0
                                              1 COMRAM     4     4      0
                        __TiRSITimer
 ---------------------------------------------------------------------------------
 (8) __TiRSITimer                                          1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _EeInitAction
   _LcClear
     _CantaIR
       _CantaPartAlta
       _CantaPartBaixa
     _Espera
       _TiGetTics
       _TiResetTics
     _WaitForBusy
       _TiGetTics
       _TiResetTics
   _LcGotoXY
     _CantaIR
     _WaitForBusy
   _LcInit
     _CantaIR
     _EscriuPrimeraOrdre
     _Espera
     _TiGetTimer
     _WaitForBusy
   _TiGetTimer
   _TiInitTimer
     _TiGetTimer
     _TiResetTics
   _TiResetTics
   _initData
   _initJoystick
     _TiGetTimer
     _TiResetTics
   _initKeypad
     _TiGetTimer
     _TiResetTics
   _initMenu
     _TiGetTimer
     _TiResetTics
     _readEeprom
   _initMusic
     _TiGetTimer
   _initSIO
   _initTX
     _TiGetTimer
     _TiResetTics
   _menuMotor
     _KeyGetNumber
     _KeyGetPress
     _KeyGetSMS
     _KeyGetValue
     _KeyResetValue
       _TiResetTics
     _LcClear
     _LcCursorOff
       _CantaIR
       _WaitForBusy
     _LcCursorOn
       _CantaIR
       _WaitForBusy
     _LcGotoXY
     _LcPutChar
       _CantaData
         _CantaPartAlta
         _CantaPartBaixa
       _LcGotoXY
       _WaitForBusy
     _LcPutScore
       _LcPutChar
       ___lbdiv
         ___lbmod (ARG)
       ___lbmod
     _LcPutTime
       _LcPutChar
       ___lbdiv
       ___lbmod
     _LcScroll
       _CantaIR
     _RXdata
     _TXbusy
     _TXgetState
     _TiGetTics
     _TiResetTics
     ___lbdiv
     ___lbmod
     _endMusic
     _getCentreJoystick
     _getDoneCharging
     _getFirstDirection
     _getFirstDirectionScores
     _getPositionJoystick
     _getRX
     _getScore
     _getUser
     _isPressed
     _readEeprom
     _readEepromScores
     _resetPositionJoystick
     _sendMyTX
       _TiResetTics
     _setTX
     _showTimerPic
     _startMusic
       _TiResetTics
     _stopTimerPic
     _writeEeprom
     _writeEepromScores
   _motorEeprom
   _motorJoystick
     _TXbusy
     _TiGetTics
     _TiResetTics
     _getGame
     _getPositionJoystick
     _resetPositionJoystick
     _setTX
   _motorKey
     _KeyResetValue
     _TiGetTics
     _TiResetTics
     ___lbmod
   _motorMusic
     _TiGetTics
     _TiResetTics
     _playNote
       _TiGetTics
       _TiResetTics
   _motorRX
     _TXgetState
     _TiGetTics
     _TiResetTics
     _sendMyTX
     _setTX
   _motorTX
     _TiGetTics
     _TiResetTics
   _motorTimer
     _LcGotoXY
     _LcPutChar
     _LcPutTime
     _TiGetTics
     _TiResetTics

 _RSI_High (ROOT)
   __TiRSITimer

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             1F3      0       0      25        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK1            F4      0       0       8        0.0%
BANK1               F4      6      4E       4       32.0%
BITBANK0            80      0       0       7        0.0%
BANK0               80      0      7F       3       99.2%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     18      79       1       96.0%
BITBIGSFR_1hhl       B      0       0      13        0.0%
BITBIGSFR_5h         A      0       0       5        0.0%
BITBIGSFR_1llhl      7      0       0      18        0.0%
BITBIGSFR_1lhlh      7      0       0      16        0.0%
BITBIGSFR_1lhh       7      0       0      15        0.0%
BITBIGSFRllh         6      0       0      22        0.0%
BITBIGSFRh           6      0       0      20        0.0%
BITBIGSFRlhh         5      0       0      21        0.0%
BITBIGSFR_2h         3      0       0      11        0.0%
BITBIGSFR_1hhh       3      0       0      12        0.0%
BITBIGSFR_4          3      0       0       9        0.0%
BITBIGSFR_3          3      0       0      10        0.0%
BITBIGSFR_1llhh      1      0       0      17        0.0%
BITBIGSFR_1hl        1      0       0      14        0.0%
BITBIGSFR_5l         1      0       0       6        0.0%
BITBIGSFR_1lll       1      0       0      19        0.0%
BITBIGSFRlll         1      0       0      23        0.0%
BIGSFR_5             0      0       0     200        0.0%
BIGSFR_4             0      0       0     200        0.0%
BIGSFR_3             0      0       0     200        0.0%
BIGSFR_2             0      0       0     200        0.0%
BIGSFR_1             0      0       0     200        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR_5             0      0       0     200        0.0%
SFR_5                0      0       0     200        0.0%
BITSFR_4             0      0       0     200        0.0%
SFR_4                0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     146      24        0.0%
DATA                 0      0     146      26        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.36 build 20220127204148 
Symbol Table                                                                                   Thu May 26 11:51:28 2022

                TiResetTics@Handle 000005                                 PL2 000EAC  
                               PL4 000EC8                                 PL6 000EF0  
                               PL8 000F06                      ??_KeyGetValue 000005  
                    ??_KeyGetPress 000005                                PL10 000F1A  
                              PL20 000F64                                PL12 000F26  
                              PL30 000156                                PL22 000F6C  
                              PL14 000F2E                                PL40 000FB2  
                              PL32 0000B8                                PL24 000F78  
                              PL16 000F48                                PL50 000FDA  
                              PL42 000FC0                                PL34 000F8A  
                              PL26 000F80                                PL18 000F58  
                              PL60 000144                                PL52 000FE0  
                              PL44 000FC8                                PL36 000F9A  
                              PL28 00001E                                PL70 000FE8  
                              PL62 00006A                                PL54 000010  
                              PL46 000FD0                                PL38 000FAA  
                              PL80 00000C                                PL72 0000CE  
                              PL64 00016E                                PL56 000020  
                              PL48 00013A                                PL90 00100A  
                              PL82 000FEE                                PL74 000152  
                              PL66 000176                                PL58 000164  
                              PL92 001010                                PL84 000FF8  
                              PL76 00003E                                PL68 000180  
                              PL94 00018A                                PL86 000064  
                              PL78 00002E                                PL96 001018  
                              PL88 001002                readEepromScores@num 000005  
                              l310 000248                                l305 00021A  
                              l328 0002F0                                l701 000010  
                              l438 000882                                l702 000016  
                              l703 00001C                                l472 000AF8  
                              l720 00009A                                l714 000082  
                              l580 000020                                l716 00008A  
                              l814 000010                                l583 000028  
                              l592 000066                                l825 00005C  
                              l729 000106                                l818 000022  
                              l586 000044                                l589 000046  
                              l699 00000A                                l956 00006A  
                              l975 000002                                u500 00005A  
                              u440 000012                                u460 000028  
                              u518 00005C                                u480 000042  
                              u458 000014                                u478 00002A  
                              u498 000044                                _SMS 00002E  
                              _aux 00003E                   ??_CantaPartBaixa 000005  
                              prod 000FF3                                wreg 000FE8  
                   ??_KeyGetNumber 000005                   ?_getDoneCharging 000000  
                             l1031 000060                               l1041 0000EE  
                             l1033 0000A8                               l1025 00002E  
                             l1043 000110                               l1036 0000CC  
                             l1045 000116                               l1180 000002  
                             l1192 000002                               l4312 000004  
                             l4320 00000E                               l4304 00001E  
                             l6000 000086                               l4146 000012  
                             l4242 000022                               l4172 000004  
                             l4260 00004A                               l4500 00003E  
                             l4182 000030                               l4254 00003C  
                             l6030 0000B2                               l6102 000002  
                             l4264 000006                               l4168 000038  
                             l4176 000014                               l4192 000064  
                             l4272 00000E                               l4504 00005C  
                             l6024 0000A6                               l6112 000026  
                             l4186 00003E                               l4194 00007E  
                             l4284 000028                               l4276 000014  
                             l7020 00090E                               l6052 0000D2  
                             l6116 00002C                               l7006 0008F8  
                             l4552 000016                               l4608 00003A  
                             l4288 000030                               l4296 000008  
                             l7032 000930                               l6152 00004C  
                             l6136 00002C                               l6144 000036  
                             l6128 000010                               l6160 00006C  
                             l4562 000028                               l7050 00095E  
                             l6402 0000FE                               l6322 000014  
                             l6154 000052                               l6138 00002E  
                             l4556 00001E                               l7212 000B66  
                             l7140 000A7E                               l7124 000A46  
                             l7108 000A0E                               l7060 00097A  
                             l6500 00024C                               l6324 00001A  
                             l6076 000100                               l6148 000044  
                             l4638 00001E                               l6342 000056  
                             l6326 00001E                               l6318 000004  
                             l6094 00011A                               l6190 00005C  
                             l7320 000CA0                               l7312 000C7A  
                             l6440 000180                               l6432 000168  
                             l6424 000148                               l6416 000124  
                             l5800 000068                               l6184 000048  
                             l6168 000006                               l4594 000004  
                             l7306 000C64                               l7226 000B8A  
                             l7218 000B6E                               l7066 000996  
                             l6514 000272                               l6362 000094  
                             l6354 000080                               l6346 00005E  
                             l6338 000046                               l6178 00003E  
                             l7340 000CD4                               l7260 000BDA  
                             l7156 000AC0                               l7076 0009B4  
                             l6700 000530                               l6612 00041A  
                             l6508 00026E                               l6460 0001B4  
                             l6444 000184                               l6436 00016C  
                             l5820 0000A6                               l7246 000BB6  
                             l7086 0009D4                               l6710 000540  
                             l6622 000430                               l6534 0002C2  
                             l6390 0000E2                               l6374 0000B6  
                             l7088 0009DA                               l6712 000544  
                             l6640 000466                               l6384 0000D2  
                             l5840 00003C                               l7186 000B1E  
                             l6730 00057A                               l6650 00047C  
                             l6570 000370                               l6490 000222  
                             l7354 000CF6                               l5826 0000B0  
                             l5834 000002                               l5906 00011A  
                             l6820 000668                               l6812 000654  
                             l6572 000376                               l6548 0002F8  
                             l6476 0001F8                               l6468 0001D8  
                             l5780 000040                               l5756 000002  
                             l5844 00004C                               l7380 00002E  
                             l7428 000052                               l7294 000C38  
                             l7286 000C1A                               l7278 000C0C  
                             l7198 000B42                               l6910 0007B8  
                             l6742 000598                               l6822 00066E  
                             l6718 00054C                               l6670 0004B4  
                             l6566 00036C                               l6558 00031E  
                             l6478 0001FE                               l5918 000002  
                             l5790 000058                               l5774 000036  
                             l5766 000024                               l5870 000096  
                             l5854 00005E                               l5838 000022  
                             l7366 000002                               l7288 000C22  
                             l6904 0007A2                               l6840 0006AA  
                             l6832 000682                               l6752 0005BE  
                             l6680 0004FA                               l6576 000386  
                             l5952 000034                               l7384 00004C  
                             l6922 0007DC                               l6930 0007EC  
                             l6762 0005D8                               l6690 000516  
                             l6594 0003DC                               l6586 0003C4  
                             l5882 0000C8                               l7378 00002A  
                             l6924 0007E2                               l6860 0006E2  
                             l6692 000518                               l6684 0004FE  
                             l6588 0003CC                               l5948 00002C  
                             l5796 000062                               l5868 000092  
                             l7388 000050                               l6934 0007F6  
                             l6926 0007E4                               l6870 0006FA  
                             l6846 0006B8                               l6774 0005F6  
                             l6598 0003E6                               l5878 0000B6  
                             l6944 00081C                               l6880 00073C  
                             l6792 000626                               l5984 00005E  
                             l6874 000720                               l6698 000528  
                             l6956 00083C                               l6892 00076A  
                             l6974 00087E                               l6966 00085A  
                             l6886 000758                               l6986 000892  
                             l6898 000786                               l6996 0008B8  
                             l6998 0008BE                               STR_1 00007F  
                             STR_2 000090                               STR_3 00003F  
                             STR_4 00006E                               STR_5 00005D  
                             STR_6 000000                               STR_7 000000  
                             STR_8 000000                               STR_9 000000  
                             u3110 0000B6                               u3030 000024  
                             u3038 000026                               u2610 000022  
                             u5020 000064                               u2630 00003C  
                             u2710 00003C                               u5110 000042  
                             u2608 00000E                               u5120 000050  
                             u2650 000054                               u2730 000054  
                             u2628 000024                               u2708 000024  
                             u5141 000074                               u2590 00000C  
                             u2670 00000C                               u2910 000018  
                             u2648 00003E                               u2728 00003E  
                             u6200 000A2A                               u2690 000022  
                             u5410 0002EA                               u2668 000056  
                             u2748 000056                               u6220 000A62  
                             u4540 000014                               u6310 000B30  
                             u5190 0000EE                               u4630 000074  
                             u2688 00000E                               u6240 000A9A  
                             u5600 0004F0                               u4640 00007A  
                             u2961 00000A                               u5521 0003F2  
                             u4730 000056                               u2971 00000C  
                             u5451 000346                               u6260 000ADC  
                             u4660 000086                               u4740 000070  
                             u5461 00035A                               u5550 000460  
                             u5470 000380                               u4910 0000AC  
                             u4670 00008A                               u4830 0000C2  
                             u6290 000B02                               u5810 000662  
                             u4850 0000F4                               u4770 00007A  
                             u5820 000666                               u5840 00067C  
                             u5760 000622                               u5890 0006F6  
                             _Rows 00002D                               _cols 000033  
                             _main 000000                               _note 00001A  
                             _show 000023                               _text 000033  
                             fsr1h 000FE2                               fsr2h 000FDA  
                             indf2 000FDF                               fsr1l 000FE1  
                             fsr2l 000FD9                         _LcCursorOn 000000  
                             _rows 000034                               btemp 000000  
                             _user 00001B                     ?_KeyResetValue 000000  
                             prodh 000FF4                               prodl 000FF3  
                  __end_of_LcClear 000016                               start 000000* 
                  __end_of_CantaIR 00001C                      LcInit@columns 000010  
                     ___param_bank 000000                         _LcPutScore 000000  
    _enterPasswordString@Menu$F571 000000                        _writeEeprom 000000  
                      Espera@Timer 00000C                              ?_main 000000  
                  __end_of___lbdiv 000034                              _EEADR 000FA9  
                            STR_10 000000                    __end_of___lbmod 000026  
                    ??_TiInitTimer 000006                              _T0CON 000FD5  
                            i2l927 000038                              _RCREG 000FAE  
                            _RCSTA 000FAB                              _TMR0H 000FD7  
                            _TMR0L 000FD6                              _SPBRG 000FAF  
         __end_of_readEepromScores 00000E                              _TXREG 000FAD  
                            _TXSTA 000FAC                    __end_of_getGame 000004  
  __end_of_getFirstDirectionScores 000014                    __end_of_getUser 000014  
                            _Timer 000029                       _stopTimerPic 000000  
              __end_of_KeyGetValue 000004                __end_of_KeyGetPress 000006  
                            _getRX 000000                    __end_of_initSIO 000018  
                            _auxPM 000048                              _auxPU 000046  
                            _error 000010                              _setTX 000000  
                            _value 000030                              _press 000032  
                      _LcCursorOff 000000                              _state 000039  
                            _users 000000                   __end_of_RSI_High 00002A  
                            tablat 000FF5                    __end_of_motorRX 000086  
                  __end_of_motorTX 000076                    __end_of_textSMS 000033  
                    ??_TiResetTics 000005                              plusw0 000FEB  
                            plusw1 000FE3                              plusw2 000FDB  
                            ttemp5 000001                              ttemp6 000004  
                            ttemp7 000008                              status 000FD8  
                            wtemp8 000001                    ___lbdiv@divisor 000009  
                 __end_of_LcGotoXY 000094                    ___lbdiv@counter 00000B  
                    ??__TiRSITimer 000000                   __end_of_LcScroll 000006  
                       _TXgetState 000000                         _TiGetTimer 000000  
          EscriuPrimeraOrdre@ordre 000006                    __initialization 000000  
                     __end_of_main 000074                       __end_of_text 00003F  
                           ??_main 000018                      __activetblptr 000002  
                    ?_initJoystick 000000                             ?_getRX 000000  
                           _ADCON0 000FC2                             _ADCON1 000FC1  
                           _ADCON2 000FC0                __end_of_TiInitTimer 00003C  
                           _ADRESH 000FC4                             _EEDATA 000FA8  
      _accessMenuString1@Menu$F562 00003D                             ?_setTX 000000  
                           _EECON2 000FA7                          ??_LcClear 000010  
                        ??_CantaIR 000007                             i2l4540 000034  
                           i2l4532 000016                             i2l4536 00001E  
                   LcGotoXY@Fisics 000012                     LcGotoXY@Column 000014  
                  ??_KeyResetValue 000006          _enterUserString@Menu$F570 000005  
                    ??_WaitForBusy 00000C                             _SPBRGH 000FB0  
                      ?_LcCursorOn 000000                             _LcInit 000000  
      _accessMenuString2@Menu$F563 000028                             _RXdata 000000  
                 __end_of_endMusic 000006                             _Espera 000000  
                           _TXbusy 000000                   __end_of_getScore 00000A  
                           _RowAct 00002B                __end_of_TiResetTics 000010  
                           _h_Tics 00000E                       ?_motorEeprom 000000  
                        ??___lbdiv 00000A               __end_of_KeyGetNumber 00000A  
                      ?_LcPutScore 000000                             _gameON 00003B  
                        ??___lbmod 000006                             _centre 000038  
                 __end_of_initData 00004C                   __end_of_initMenu 000026  
              __end_of__TiRSITimer 00003E                             _initTX 000000  
                           clear_0 000046                             clear_1 000052  
                           clear_2 00005E                             _toSend 000016  
      __end_of_getPositionJoystick 000004      _timeRemainingString@Menu$F572 000000  
                        ??_getGame 000005                             isa$std 000001  
                           _option 000045                          ??_getUser 000017  
                   ??_initJoystick 000006                        _KeyGetValue 000000  
                 __end_of_sendMyTX 000016                        _KeyGetPress 000000  
                 __end_of_playNote 000042                          ??_initSIO 000005  
                     __pdataCOMRAM 000000                   __end_of_motorKey 00013A  
                     __mediumconst 000000*                            tblptrh 000FF7  
                           tblptrl 000FF6                             tblptru 000FF8  
                        ??_motorRX 00000C                          ??_motorTX 00000C  
                __end_of_CantaData 000020                   ___lbdiv@dividend 00000A  
                  ___lbmod@divisor 000005                         __accesstop 000000* 
          __end_of__initialization 000064                    ___lbmod@counter 000007  
                __end_of_LcPutChar 000054                  __end_of_LcPutTime 000022  
                    ___rparam_used 000001                        ?_TXgetState 000000  
                      ?_TiGetTimer 000000                     __pcstackCOMRAM 000000  
              __end_of_WaitForBusy 00003E                       __pidataBANK0 000000  
                    __end_of_getRX 000004                  __end_of_KeyGetSMS 00000A  
                    __end_of_setTX 000008                         __end_ofPL2 000EC8  
                       __end_ofPL4 000EF0                         __end_ofPL6 000F06  
                       __end_ofPL8 000F1A                   ___lbdiv@quotient 00000C  
                        ?_RSI_High 000000                  __end_of_TiGetTics 000026  
                      _TiInitTimer 000000                 _numUsers@Data$F581 00004D  
            _resetPositionJoystick 000000                          ?_LcGotoXY 00000D  
                        ?_LcScroll 000000                            ??_getRX 000005  
                          ??_setTX 000005                _byeString@Menu$F577 00000F  
                       __pbssBANK0 000000                         __pbssBANK1 000000  
            __end_of_motorJoystick 0000CE                        _TiResetTics 000000  
                       __pnvCOMRAM 000000                            ?_LcInit 000010  
                    _CantaPartAlta 000000                            ?_RXdata 000000  
      getFirstDirection@numAddress 000005                            ?_Espera 00000C  
                          ?_TXbusy 000000                        __TiRSITimer 000000  
             writeEepromScores@num 000007             writeEepromScores@score 000005  
                          ?_initTX 000000                         ??_RSI_High 000001  
                     ?_writeEeprom 000005                            LcInit@i 000012  
                ?_readEepromScores 000000                         ??_LcGotoXY 00000E  
                       ??_LcScroll 000008                          ?_endMusic 000000  
               ??_readEepromScores 000005                          ?_getScore 000005  
              _seconds@Timer$F1652 000024                       ?_LcCursorOff 000000  
                          _LcClear 000000                            _CantaIR 000000  
                        ?_initData 000000              _menuStrings@Menu$F564 00000A  
                        ?_initMenu 000000                        _WaitForBusy 000000  
         ?_getFirstDirectionScores 000000                     ?_CantaPartAlta 000000  
                          _Columns 00002C               __end_of_initJoystick 00001A  
                    _LcGotoXY$1446 000010                          ?_sendMyTX 000000  
                        ?_playNote 000000                            __Hparam 000000  
                          __Lparam 000000                          ?_motorKey 000000  
                       _initKeypad 000000                         _readEeprom 000000  
                          ___lbdiv 000000                            ___lbmod 000000  
                     __psmallconst 000000                  __end_of_isPressed 000004  
                          __pcinit 000000                       _doneCharging 000020  
                          __ramtop 000000*                           _getGame 000000  
                          __ptext0 000000                            __ptext1 000000  
                          __ptext2 000000                            __ptext3 000000  
                          __ptext4 000000                            __ptext5 000000  
                          __ptext6 000000                            __ptext7 000000  
                          __ptext8 000000                            __ptext9 000000  
                          _getUser 000000             ?_resetPositionJoystick 000000  
                        _T0CONbits 000FD5                  _writeEepromScores 000000  
                        CantaIR@IR 000007                            _initSIO 000000  
                __end_of_initMusic 000018                            _counter 000028  
                __end_of_menuMotor 000EAC                            _receive 000013  
               ?_writeEepromScores 000005                            _minutes 000043  
                          _seconds 000042                            _motorRX 000000  
                          _motorTX 000000                            _timerRX 000018  
                       ??_endMusic 000005                            _timerTX 000019  
                          _pointer 00004A                            _textSMS 000001  
                       ??_getScore 000007                            _stateRX 000012  
                          _stateTX 000017                    WaitForBusy@Busy 00000C  
                       _numAddress 00001D                       _KeyGetNumber 000000  
             end_of_initialization 000064                ??_writeEepromScores 000008  
                       ??_initData 000005                         ??_initMenu 000006  
                    __Lmediumconst 000000*                   TiGetTics@Handle 000009  
                     ??_LcCursorOn 00000D                      LcPutTime@time 000016  
                       ??_sendMyTX 000006                         ??_playNote 00000C  
                    ?_showTimerPic 000000                         ??_motorKey 00000C  
                  TiGetTics@actual 00000A                            postdec1 000FE5  
                          postdec2 000FDD                            postinc0 000FEE  
                          postinc1 000FE6                       ??_LcPutScore 000016  
                          postinc2 000FDE                         _motorTimer 000000  
                       _motorMusic 000000          __end_of_writeEepromScores 00001A  
                       _timerMusic 00000A                         _timerState 000026  
                       _musicState 00001B                          _PORTBbits 000F81  
                        _PORTCbits 000F82                       ?_KeyGetValue 000000  
                     ?_KeyGetPress 000000                 __end_of_LcCursorOn 00000A  
                 ___lbmod@dividend 000006                          _TRISAbits 000F92  
                        _TRISBbits 000F93                          _TRISCbits 000F94  
                        _TRISDbits 000F95                         _startMusic 000000  
                 _pointer@TX$F2031 000015                    ??_CantaPartAlta 000005  
               __end_of_LcPutScore 000064                        ___lbmod@rem 000008  
                        _CantaData 000000                          _TXSTAbits 000FAC  
            __end_of_KeyResetValue 000012                     ??_showTimerPic 000005  
                     ??_TXgetState 000005                      ?_EeInitAction 000000  
                     ??_TiGetTimer 000005                     __end_of_LcInit 0000B8  
                   __end_of_RXdata 000006                          _LcPutChar 000000  
                   __end_of_Espera 000018                        ?_initKeypad 000000  
                   __end_of_TXbusy 000006                        ?_readEeprom 000000  
                        _LcPutTime 000000         __end_of_EscriuPrimeraOrdre 00006A  
                ??_getDoneCharging 000005                        _BAUDCONbits 000FB8  
                    __pidataCOMRAM 000000                     __end_of_initTX 000022  
                        _ColumnAct 00002A                          _KeyGetSMS 000000  
                     ?_TiInitTimer 000000                        __end_ofPL10 000F26  
                      __end_ofPL20 000F6C                        __end_ofPL12 000F2E  
                      __end_ofPL30 000164                        __end_ofPL22 000F78  
                      __end_ofPL14 000F48                        __end_ofPL40 000FC0  
                      __end_ofPL32 0000C2                        __end_ofPL24 000F80  
                      __end_ofPL16 000F58                        __end_ofPL50 000FE0  
                      __end_ofPL42 000FC8                        __end_ofPL34 000F9A  
                      __end_ofPL26 000F8A                        __end_ofPL18 000F64  
                      __end_ofPL60 000152                        __end_ofPL52 000FE8  
                      __end_ofPL44 000FD0                        __end_ofPL36 000FAA  
                      __end_ofPL28 00002C                        __end_ofPL70 000FEE  
                      __end_ofPL62 000078                        __end_ofPL54 00001C  
                      __end_ofPL46 000FDA                        __end_ofPL38 000FB2  
                      __end_ofPL80 000014                        __end_ofPL72 0000D6  
                      __end_ofPL64 000176                        __end_ofPL56 00002E  
                      __end_ofPL48 000144                        __end_ofPL90 001010  
                      __end_ofPL82 000FF8                        __end_ofPL74 00015C  
                      __end_ofPL66 000180                        __end_ofPL58 00016E  
                      __end_ofPL92 001018                        __end_ofPL84 001002  
                      __end_ofPL76 000048                        __end_ofPL68 00018A  
                      __end_ofPL94 000190                        __end_ofPL86 00006C  
                      __end_ofPL78 000038                        __end_ofPL96 001020  
                      __end_ofPL88 00100A                start_initialization 000000  
                 _aux@EEPROM$F1778 00001E                          _TiGetTics 000000  
               __end_of_TXgetState 000004                 __end_of_TiGetTimer 00001E  
                     ?_TiResetTics 000000                         ?_CantaData 000000  
                 _minutesCountdown 000041                           ??_LcInit 000011  
                   ??_EeInitAction 000005                           ??_RXdata 000005  
                     ?__TiRSITimer 000000                           ??_Espera 000010  
                         ??_TXbusy 000005                         ?_LcPutChar 000000  
                       ?_LcPutTime 000000                        ?_motorTimer 000000  
                      ?_motorMusic 000000                        __pdataBANK0 000000  
                         ??_initTX 000006                         ?_KeyGetSMS 000000  
                     _initJoystick 000000                        __pbssCOMRAM 000000  
                    __pcstackBANK1 000000                         ?_TiGetTics 000005  
                    ?_stopTimerPic 000000                   _secondsCountdown 000040  
                      ?_startMusic 000000                           ?_LcClear 000000  
                         ?_CantaIR 000000                     _CantaPartBaixa 000000  
                     ?_WaitForBusy 000000             _errorsString@Menu$F575 000045  
         _timeLeftString@Menu$F573 000033                  _getFirstDirection 000000  
                        __pintcode 000000                     _pointerMarquee 000049  
                         ?___lbdiv 000009                           ?___lbmod 000005  
          ??_resetPositionJoystick 000005                       sendMyTX@send 000006  
               ?_getFirstDirection 000000                    CantaPartBaixa@c 000006  
                         ?_getGame 000000                           ?_getUser 000005  
                         ?_initSIO 000000                        __smallconst 000000* 
                        _isPressed 000000                       playNote@note 00000E  
              ??_getFirstDirection 000005               __end_of_showTimerPic 000006  
                   ??_stopTimerPic 000005                           ?_motorRX 000000  
                         ?_motorTX 000000                          _initMusic 000000  
                        _menuMotor 000000                          _menuState 00004B  
           __end_of_CantaPartBaixa 000062                        ??_CantaData 000007  
                         _LATAbits 000F89                           _LATBbits 000F8A  
                         _LATCbits 000F8B                           _LATDbits 000F8C  
                      _eepromState 00001F          __end_of_getFirstDirection 000016  
                         _PIR1bits 000F9E                      readEeprom@num 000005  
                      ??_LcPutChar 000015                           _RCONbits 000FD0  
   _positionJoystick@Joystick$F722 00003A                        ??_LcPutTime 000016  
                    ??_motorEeprom 000005                          _pointerRX 000014  
                        _timerMenu 00003F                          _timerNote 00001C  
                        _topScores 000000                           _RSI_High 000000  
                       _ADCON0bits 000FC2                        ??_KeyGetSMS 000005  
              _numScores@Data$F582 00004C                         ?_isPressed 000000  
             __end_of_EeInitAction 00000A                           Espera@ms 00000E  
                         _LcGotoXY 000000                        ??_TiGetTics 000007  
                         _LcScroll 000000                         ?_initMusic 000000  
getFirstDirectionScores@numAddress 000005                        LcGotoXY@Row 00000D  
                       ?_menuMotor 000000                        _INTCON2bits 000FF1  
                        copy_data0 000014                          copy_data1 000034  
                  ?_CantaPartBaixa 000000                      _motorJoystick 000000  
                        initData@i 000007                          initData@j 000009  
                        initData@t 000008                    _getDoneCharging 000000  
                       _EECON1bits 000FA6                           __Hrparam 000000* 
                         __Lrparam 000000*               _getPositionJoystick 000000  
                     ??_initKeypad 000006                       ??_readEeprom 000005  
                  LcPutScore@score 000016                __end_of_motorEeprom 000156  
                        setTX@text 000005                      _pointerEeprom 000021  
             ?_getPositionJoystick 000000                           _endMusic 000000  
                         __ptext10 000000                           __ptext11 000000  
               _EscriuPrimeraOrdre 000000                           __ptext20 000000  
                         __ptext12 000000                           __ptext21 000000  
                         __ptext13 000000                           __ptext30 000000  
                         __ptext22 000000                           __ptext14 000000  
                         __ptext31 000000                           __ptext23 000000  
                         __ptext15 000000                           __ptext40 000000  
                         __ptext32 000000                           __ptext24 000000  
                         __ptext16 000000                           __ptext41 000000  
                         __ptext33 000000                           __ptext25 000000  
                         __ptext17 000000                           __ptext50 000000  
                         __ptext42 000000                           __ptext34 000000  
                         __ptext26 000000                           __ptext18 000000  
                         __ptext51 000000                           __ptext43 000000  
                         __ptext35 000000                           __ptext27 000000  
                         __ptext19 000000                           __ptext60 000000  
                         __ptext52 000000                           __ptext44 000000  
                         __ptext36 000000                           __ptext28 000000  
                         __ptext61 000000                           __ptext53 000000  
                         __ptext45 000000                           __ptext37 000000  
                         __ptext29 000000                           __ptext70 000000  
                         __ptext62 000000                           __ptext54 000000  
                         __ptext46 000000                           __ptext38 000000  
                         __ptext63 000000                           __ptext55 000000  
                         __ptext47 000000                           __ptext39 000000  
                         __ptext64 000000                           __ptext56 000000  
                         __ptext48 000000                           __ptext65 000000  
                         __ptext57 000000                           __ptext49 000000  
                         __ptext66 000000                           __ptext58 000000  
                         __ptext67 000000                           __ptext59 000000  
                         __ptext68 000000                           _getScore 000000  
                      _keypadState 000035                     CantaPartAlta@c 000006  
               __end_of_initKeypad 00002E                 __end_of_readEeprom 00000C  
                         _s_Timers 000000                           _keyValue 000044  
                   ?_motorJoystick 000000                           _initData 000000  
                         _initMenu 000000                ?_EscriuPrimeraOrdre 000000  
                    _timerJoystick 000037              __end_of_CantaPartAlta 000062  
                    CantaData@Data 000007                   _readEepromScores 000000  
                         _sendMyTX 000000                           _playNote 000000  
             __end_of_stopTimerPic 000004                           _motorKey 000000  
                         _valueOld 00002F                           isa$xinst 000000  
                         _timerPic 000027                       ??_motorTimer 000000  
                     ??_motorMusic 00000F                           int$flags 000000  
                         _topScore 00000C            _getFirstDirectionScores 000000  
                         _rotating 000031                      ??_writeEeprom 000018  
      _currentTimeString@Menu$F578 00000F                       _prevMaxIndex 00003D  
             ??_EscriuPrimeraOrdre 000005                         LcInit@rows 000011  
                     _prevMaxScore 00003C               _pointer@EEPROM$F1774 000022  
                      ??_isPressed 000005                     writeEeprom@num 000017  
             KeyGetNumber@auxValue 000005                         _INTCONbits 000FF2  
            ??_getPositionJoystick 000005                        ??_initMusic 000006  
          __end_of_getDoneCharging 000004                        ??_menuMotor 000000  
                    ??_LcCursorOff 00000D                       ??_startMusic 000006  
                         intlevel2 000000*                      _timerGeneral 000000  
               __end_of_motorTimer 00006C                 __end_of_motorMusic 000040  
                       LcPutChar@c 000015                       _showTimerPic 000000  
                  KeyGetSMS@auxSMS 000005                        _motorEeprom 000000  
                _getCentreJoystick 000000         _modifyTimeString@Menu$F576 00001C  
                    writeEeprom@us 000005      __end_of_resetPositionJoystick 000004  
               ?_getCentreJoystick 000000                 __end_of_startMusic 000014  
                      _timerKeypad 000036                        _pointerUser 000047  
              _minutes@Timer$F1651 000025              _scoreString@Menu$F574 00004C  
              ??_getCentreJoystick 000005                __end_of_writeEeprom 00001C  
                    ?_KeyGetNumber 000000                    ??_motorJoystick 00000C  
              __end_of_LcCursorOff 00000A                      _KeyResetValue 000000  
                     _EeInitAction 000000          ??_getFirstDirectionScores 000005  
        __end_of_getCentreJoystick 000004  
