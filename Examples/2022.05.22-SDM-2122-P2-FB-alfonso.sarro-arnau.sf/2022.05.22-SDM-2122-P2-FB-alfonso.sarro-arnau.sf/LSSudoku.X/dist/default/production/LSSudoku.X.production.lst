

Microchip MPLAB XC8 Assembler V2.32 build 20210201212658 
                                                                                               Sat May 21 19:52:40 2022

Microchip MPLAB XC8 C Compiler v2.32 (Pro license) build 20210201212658 Og9s 
     1                           	processor	18F4321
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	plic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1,group=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1
    41                           	psect	text27,global,reloc=2,class=CODE,delta=1
    42                           	psect	text28,global,reloc=2,class=CODE,delta=1
    43                           	psect	text29,global,reloc=2,class=CODE,delta=1
    44                           	psect	text30,global,reloc=2,class=CODE,delta=1
    45                           	psect	text31,global,reloc=2,class=CODE,delta=1
    46                           	psect	text32,global,reloc=2,class=CODE,delta=1
    47                           	psect	text33,global,reloc=2,class=CODE,delta=1
    48                           	psect	text34,global,reloc=2,class=CODE,delta=1
    49                           	psect	text35,global,reloc=2,class=CODE,delta=1
    50                           	psect	text36,global,reloc=2,class=CODE,delta=1
    51                           	psect	text37,global,reloc=2,class=CODE,delta=1
    52                           	psect	text38,global,reloc=2,class=CODE,delta=1
    53                           	psect	text39,global,reloc=2,class=CODE,delta=1,group=1
    54                           	psect	text40,global,reloc=2,class=CODE,delta=1,group=1
    55                           	psect	text41,global,reloc=2,class=CODE,delta=1
    56                           	psect	text42,global,reloc=2,class=CODE,delta=1
    57                           	psect	text43,global,reloc=2,class=CODE,delta=1
    58                           	psect	text44,global,reloc=2,class=CODE,delta=1
    59                           	psect	text45,global,reloc=2,class=CODE,delta=1
    60                           	psect	text46,global,reloc=2,class=CODE,delta=1
    61                           	psect	text47,global,reloc=2,class=CODE,delta=1
    62                           	psect	text48,global,reloc=2,class=CODE,delta=1
    63                           	psect	text49,global,reloc=2,class=CODE,delta=1
    64                           	psect	text50,global,reloc=2,class=CODE,delta=1
    65                           	psect	text51,global,reloc=2,class=CODE,delta=1
    66                           	psect	text52,global,reloc=2,class=CODE,delta=1
    67                           	psect	text53,global,reloc=2,class=CODE,delta=1
    68                           	psect	text54,global,reloc=2,class=CODE,delta=1
    69                           	psect	text55,global,reloc=2,class=CODE,delta=1
    70                           	psect	text56,global,reloc=2,class=CODE,delta=1
    71                           	psect	text57,global,reloc=2,class=CODE,delta=1
    72                           	psect	text58,global,reloc=2,class=CODE,delta=1
    73                           	psect	text59,global,reloc=2,class=CODE,delta=1
    74                           	psect	text60,global,reloc=2,class=CODE,delta=1
    75                           	psect	text61,global,reloc=2,class=CODE,delta=1
    76                           	psect	text62,global,reloc=2,class=CODE,delta=1
    77                           	psect	text63,global,reloc=2,class=CODE,delta=1
    78                           	psect	text64,global,reloc=2,class=CODE,delta=1
    79                           	psect	text65,global,reloc=2,class=CODE,delta=1
    80                           	psect	text66,global,reloc=2,class=CODE,delta=1
    81                           	psect	text67,global,reloc=2,class=CODE,delta=1
    82                           	psect	text68,global,reloc=2,class=CODE,delta=1
    83                           	psect	text69,global,reloc=2,class=CODE,delta=1
    84                           	psect	text70,global,reloc=2,class=CODE,delta=1
    85                           	psect	text71,global,reloc=2,class=CODE,delta=1
    86                           	psect	text72,global,reloc=2,class=CODE,delta=1
    87                           	psect	text73,global,reloc=2,class=CODE,delta=1
    88                           	psect	text74,global,reloc=2,class=CODE,delta=1
    89                           	psect	text75,global,reloc=2,class=CODE,delta=1
    90                           	psect	text76,global,reloc=2,class=CODE,delta=1
    91                           	psect	text77,global,reloc=2,class=CODE,delta=1
    92                           	psect	text78,global,reloc=2,class=CODE,delta=1
    93                           	psect	text79,global,reloc=2,class=CODE,delta=1
    94                           	psect	text80,global,reloc=2,class=CODE,delta=1
    95                           	psect	text81,global,reloc=2,class=CODE,delta=1
    96                           	psect	text82,global,reloc=2,class=CODE,delta=1
    97                           	psect	text83,global,reloc=2,class=CODE,delta=1
    98                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    99                           	psect	text85,global,reloc=2,class=CODE,delta=1
   100                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
   101                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   102                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   103                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
   104                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
   105                           	psect	pa_nodes0,global,class=CODE,delta=1
   106  0000                     
   107                           ; Version 2.32
   108                           ; Generated 02/02/2021 GMT
   109                           ; 
   110                           ; Copyright Â© 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
   111                           ; All rights reserved.
   112                           ; 
   113                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   114                           ; 
   115                           ; Redistribution and use in source and binary forms, with or without modification, are
   116                           ; permitted provided that the following conditions are met:
   117                           ; 
   118                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   119                           ;        conditions and the following disclaimer.
   120                           ; 
   121                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   122                           ;        of conditions and the following disclaimer in the documentation and/or other
   123                           ;        materials provided with the distribution. Publication is not required when
   124                           ;        this file is used in an embedded application.
   125                           ; 
   126                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   127                           ;        software without specific prior written permission.
   128                           ; 
   129                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   130                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   131                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   132                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   133                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   134                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   135                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   136                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   137                           ; 
   138                           ; 
   139                           ; Code-generator required, PIC18F4321 Definitions
   140                           ; 
   141                           ; SFR Addresses
   142  0000                     
   143                           	psect	idataCOMRAM
   144  001EDC                     __pidataCOMRAM:
   145                           	callstack 0
   146                           
   147                           ;initializer for _initMins
   148  001EDC  00                 	db	0
   149  001EDD  03                 	db	3
   150                           
   151                           ;initializer for _flag2
   152  001EDE  01                 	db	1
   153                           
   154                           ;initializer for _flag
   155  001EDF  01                 	db	1
   156                           
   157                           	psect	mediumconst
   158  001EF6                     __pmediumconst:
   159                           	callstack 0
   160  001EF6  00                 	db	0
   161  001EF7                     _table:
   162                           	callstack 0
   163  001EF7  31                 	db	49
   164  001EF8  31                 	db	49
   165  001EF9  00                 	db	0
   166  001EFA  00                 	db	0
   167  001EFB  00                 	db	0
   168  001EFC  00                 	db	0
   169  001EFD  32                 	db	50
   170  001EFE  41                 	db	65
   171  001EFF  42                 	db	66
   172  001F00  43                 	db	67
   173  001F01  00                 	db	0
   174  001F02  00                 	db	0
   175  001F03  33                 	db	51
   176  001F04  44                 	db	68
   177  001F05  45                 	db	69
   178  001F06  46                 	db	70
   179  001F07  00                 	db	0
   180  001F08  00                 	db	0
   181  001F09  34                 	db	52
   182  001F0A  47                 	db	71
   183  001F0B  48                 	db	72
   184  001F0C  49                 	db	73
   185  001F0D  00                 	db	0
   186  001F0E  00                 	db	0
   187  001F0F  35                 	db	53
   188  001F10  4A                 	db	74
   189  001F11  4B                 	db	75
   190  001F12  4C                 	db	76
   191  001F13  00                 	db	0
   192  001F14  00                 	db	0
   193  001F15  36                 	db	54
   194  001F16  4D                 	db	77
   195  001F17  4E                 	db	78
   196  001F18  4F                 	db	79
   197  001F19  00                 	db	0
   198  001F1A  00                 	db	0
   199  001F1B  37                 	db	55
   200  001F1C  50                 	db	80
   201  001F1D  51                 	db	81
   202  001F1E  52                 	db	82
   203  001F1F  53                 	db	83
   204  001F20  00                 	db	0
   205  001F21  38                 	db	56
   206  001F22  54                 	db	84
   207  001F23  55                 	db	85
   208  001F24  56                 	db	86
   209  001F25  00                 	db	0
   210  001F26  00                 	db	0
   211  001F27  39                 	db	57
   212  001F28  57                 	db	87
   213  001F29  58                 	db	88
   214  001F2A  59                 	db	89
   215  001F2B  5A                 	db	90
   216  001F2C  00                 	db	0
   217  001F2D  2A                 	db	42
   218  001F2E  00                 	db	0
   219  001F2F  00                 	db	0
   220  001F30  00                 	db	0
   221  001F31  00                 	db	0
   222  001F32  00                 	db	0
   223  001F33  30                 	db	48
   224  001F34  20                 	db	32
   225  001F35  00                 	db	0
   226  001F36  00                 	db	0
   227  001F37  00                 	db	0
   228  001F38  00                 	db	0
   229  001F39  23                 	db	35
   230  001F3A  23                 	db	35
   231  001F3B  00                 	db	0
   232  001F3C  00                 	db	0
   233  001F3D  00                 	db	0
   234  001F3E  00                 	db	0
   235  001F3F                     __end_of_table:
   236                           	callstack 0
   237  0000                     _EECON2	set	4007
   238  0000                     _EECON1bits	set	4006
   239  0000                     _EEDATA	set	4008
   240  0000                     _EEADR	set	4009
   241  0000                     _LATCbits	set	3979
   242  0000                     _RCREG	set	4014
   243  0000                     _PIR1bits	set	3998
   244  0000                     _TXSTAbits	set	4012
   245  0000                     _TXREG	set	4013
   246  0000                     _SPBRG	set	4015
   247  0000                     _BAUDCONbits	set	4024
   248  0000                     _RCSTA	set	4011
   249  0000                     _TXSTA	set	4012
   250  0000                     _TRISCbits	set	3988
   251  0000                     _PORTBbits	set	3969
   252  0000                     _TRISBbits	set	3987
   253  0000                     _TRISE	set	3990
   254  0000                     _LATE	set	3981
   255  0000                     _LATAbits	set	3977
   256  0000                     _ADRESH	set	4036
   257  0000                     _ADCON0bits	set	4034
   258  0000                     _TRISAbits	set	3986
   259  0000                     _ADCON2	set	4032
   260  0000                     _ADCON1	set	4033
   261  0000                     _ADCON0	set	4034
   262  0000                     _T0CONbits	set	4053
   263  0000                     _TMR0L	set	4054
   264  0000                     _TMR0H	set	4055
   265  0000                     _T0CON	set	4053
   266  0000                     _INTCONbits	set	4082
   267  0000                     _RCONbits	set	4048
   268  0000                     _PORTDbits	set	3971
   269  0000                     _LATDbits	set	3980
   270  0000                     _TRISDbits	set	3989
   271  001F3F                     STR_7:
   272  001F3F  33                 	db	51	;'3'
   273  001F40  2E                 	db	46
   274  001F41  53                 	db	83	;'S'
   275  001F42  48                 	db	72	;'H'
   276  001F43  4F                 	db	79	;'O'
   277  001F44  57                 	db	87	;'W'
   278  001F45  20                 	db	32
   279  001F46  47                 	db	71	;'G'
   280  001F47  45                 	db	69	;'E'
   281  001F48  4E                 	db	78	;'N'
   282  001F49  45                 	db	69	;'E'
   283  001F4A  52                 	db	82	;'R'
   284  001F4B  41                 	db	65	;'A'
   285  001F4C  4C                 	db	76	;'L'
   286  001F4D  20                 	db	32
   287  001F4E  54                 	db	84	;'T'
   288  001F4F  4F                 	db	79	;'O'
   289  001F50  50                 	db	80	;'P'
   290  001F51  20                 	db	32
   291  001F52  35                 	db	53	;'5'
   292  001F53  20                 	db	32
   293  001F54  53                 	db	83	;'S'
   294  001F55  43                 	db	67	;'C'
   295  001F56  4F                 	db	79	;'O'
   296  001F57  52                 	db	82	;'R'
   297  001F58  45                 	db	69	;'E'
   298  001F59  53                 	db	83	;'S'
   299  001F5A  20                 	db	32
   300  001F5B  0A                 	db	10
   301  001F5C  00                 	db	0
   302  001F5D                     STR_9:
   303  001F5D  37                 	db	55	;'7'
   304  001F5E  2E                 	db	46
   305  001F5F  53                 	db	83	;'S'
   306  001F60  48                 	db	72	;'H'
   307  001F61  4F                 	db	79	;'O'
   308  001F62  57                 	db	87	;'W'
   309  001F63  20                 	db	32
   310  001F64  41                 	db	65	;'A'
   311  001F65  4C                 	db	76	;'L'
   312  001F66  4C                 	db	76	;'L'
   313  001F67  20                 	db	32
   314  001F68  55                 	db	85	;'U'
   315  001F69  53                 	db	83	;'S'
   316  001F6A  45                 	db	69	;'E'
   317  001F6B  52                 	db	82	;'R'
   318  001F6C  53                 	db	83	;'S'
   319  001F6D  0A                 	db	10
   320  001F6E  00                 	db	0
   321  001F6F                     STR_10:
   322  001F6F  54                 	db	84	;'T'
   323  001F70  49                 	db	73	;'I'
   324  001F71  4D                 	db	77	;'M'
   325  001F72  45                 	db	69	;'E'
   326  001F73  20                 	db	32
   327  001F74  52                 	db	82	;'R'
   328  001F75  45                 	db	69	;'E'
   329  001F76  4D                 	db	77	;'M'
   330  001F77  41                 	db	65	;'A'
   331  001F78  49                 	db	73	;'I'
   332  001F79  4E                 	db	78	;'N'
   333  001F7A  49                 	db	73	;'I'
   334  001F7B  4E                 	db	78	;'N'
   335  001F7C  47                 	db	71	;'G'
   336  001F7D  3A                 	db	58	;':'
   337  001F7E  0A                 	db	10
   338  001F7F  00                 	db	0
   339  001F80                     STR_5:
   340  001F80  31                 	db	49	;'1'
   341  001F81  2E                 	db	46
   342  001F82  50                 	db	80	;'P'
   343  001F83  4C                 	db	76	;'L'
   344  001F84  41                 	db	65	;'A'
   345  001F85  59                 	db	89	;'Y'
   346  001F86  20                 	db	32
   347  001F87  41                 	db	65	;'A'
   348  001F88  20                 	db	32
   349  001F89  47                 	db	71	;'G'
   350  001F8A  41                 	db	65	;'A'
   351  001F8B  4D                 	db	77	;'M'
   352  001F8C  45                 	db	69	;'E'
   353  001F8D  0A                 	db	10
   354  001F8E  00                 	db	0
   355  001F8F                     STR_6:
   356  001F8F  32                 	db	50	;'2'
   357  001F90  2E                 	db	46
   358  001F91  4D                 	db	77	;'M'
   359  001F92  4F                 	db	79	;'O'
   360  001F93  44                 	db	68	;'D'
   361  001F94  49                 	db	73	;'I'
   362  001F95  46                 	db	70	;'F'
   363  001F96  59                 	db	89	;'Y'
   364  001F97  20                 	db	32
   365  001F98  54                 	db	84	;'T'
   366  001F99  49                 	db	73	;'I'
   367  001F9A  4D                 	db	77	;'M'
   368  001F9B  45                 	db	69	;'E'
   369  001F9C  0A                 	db	10
   370  001F9D  00                 	db	0
   371  001F9E                     STR_14:
   372  001F9E  4D                 	db	77	;'M'
   373  001F9F  4F                 	db	79	;'O'
   374  001FA0  44                 	db	68	;'D'
   375  001FA1  49                 	db	73	;'I'
   376  001FA2  46                 	db	70	;'F'
   377  001FA3  59                 	db	89	;'Y'
   378  001FA4  20                 	db	32
   379  001FA5  54                 	db	84	;'T'
   380  001FA6  49                 	db	73	;'I'
   381  001FA7  4D                 	db	77	;'M'
   382  001FA8  45                 	db	69	;'E'
   383  001FA9  3A                 	db	58	;':'
   384  001FAA  0A                 	db	10
   385  001FAB  00                 	db	0
   386  001FAC                     STR_12:
   387  001FAC  54                 	db	84	;'T'
   388  001FAD  49                 	db	73	;'I'
   389  001FAE  4D                 	db	77	;'M'
   390  001FAF  45                 	db	69	;'E'
   391  001FB0  20                 	db	32
   392  001FB1  4C                 	db	76	;'L'
   393  001FB2  45                 	db	69	;'E'
   394  001FB3  46                 	db	70	;'F'
   395  001FB4  54                 	db	84	;'T'
   396  001FB5  3A                 	db	58	;':'
   397  001FB6  20                 	db	32
   398  001FB7  00                 	db	0
   399  001FB8                     STR_2:
   400  001FB8  32                 	db	50	;'2'
   401  001FB9  2E                 	db	46
   402  001FBA  52                 	db	82	;'R'
   403  001FBB  45                 	db	69	;'E'
   404  001FBC  47                 	db	71	;'G'
   405  001FBD  49                 	db	73	;'I'
   406  001FBE  53                 	db	83	;'S'
   407  001FBF  54                 	db	84	;'T'
   408  001FC0  45                 	db	69	;'E'
   409  001FC1  52                 	db	82	;'R'
   410  001FC2  00                 	db	0
   411  001FC3                     STR_8:
   412  001FC3  34                 	db	52	;'4'
   413  001FC4  2E                 	db	46
   414  001FC5  4C                 	db	76	;'L'
   415  001FC6  4F                 	db	79	;'O'
   416  001FC7  47                 	db	71	;'G'
   417  001FC8  4F                 	db	79	;'O'
   418  001FC9  55                 	db	85	;'U'
   419  001FCA  54                 	db	84	;'T'
   420  001FCB  0A                 	db	10
   421  001FCC  00                 	db	0
   422  001FCD                     STR_11:
   423  001FCD  45                 	db	69	;'E'
   424  001FCE  52                 	db	82	;'R'
   425  001FCF  52                 	db	82	;'R'
   426  001FD0  4F                 	db	79	;'O'
   427  001FD1  52                 	db	82	;'R'
   428  001FD2  53                 	db	83	;'S'
   429  001FD3  3A                 	db	58	;':'
   430  001FD4  0A                 	db	10
   431  001FD5  00                 	db	0
   432  001FD6                     STR_1:
   433  001FD6  31                 	db	49	;'1'
   434  001FD7  2E                 	db	46
   435  001FD8  4C                 	db	76	;'L'
   436  001FD9  4F                 	db	79	;'O'
   437  001FDA  47                 	db	71	;'G'
   438  001FDB  49                 	db	73	;'I'
   439  001FDC  4E                 	db	78	;'N'
   440  001FDD  0A                 	db	10
   441  001FDE  00                 	db	0
   442  001FDF                     STR_15:
   443  001FDF  42                 	db	66	;'B'
   444  001FE0  59                 	db	89	;'Y'
   445  001FE1  45                 	db	69	;'E'
   446  001FE2  20                 	db	32
   447  001FE3  42                 	db	66	;'B'
   448  001FE4  59                 	db	89	;'Y'
   449  001FE5  45                 	db	69	;'E'
   450  001FE6  20                 	db	32
   451  001FE7  00                 	db	0
   452  001FE8                     STR_13:
   453  001FE8  53                 	db	83	;'S'
   454  001FE9  43                 	db	67	;'C'
   455  001FEA  4F                 	db	79	;'O'
   456  001FEB  52                 	db	82	;'R'
   457  001FEC  45                 	db	69	;'E'
   458  001FED  3A                 	db	58	;':'
   459  001FEE  20                 	db	32
   460  001FEF  00                 	db	0
   461  001FF0                     STR_4:
   462  001FF0  50                 	db	80	;'P'
   463  001FF1  53                 	db	83	;'S'
   464  001FF2  57                 	db	87	;'W'
   465  001FF3  44                 	db	68	;'D'
   466  001FF4  3A                 	db	58	;':'
   467  001FF5  0A                 	db	10
   468  001FF6  00                 	db	0
   469  001FF7                     STR_3:
   470  001FF7  55                 	db	85	;'U'
   471  001FF8  53                 	db	83	;'S'
   472  001FF9  45                 	db	69	;'E'
   473  001FFA  52                 	db	82	;'R'
   474  001FFB  3A                 	db	58	;':'
   475  001FFC  0A                 	db	10
   476  001FFD  00                 	db	0
   477  001FFE  00                 	db	0	; dummy byte at the end
   478  0000                     
   479                           ; #config settings
   480                           
   481                           	psect	cinit
   482  001634                     __pcinit:
   483                           	callstack 0
   484  001634                     start_initialization:
   485                           	callstack 0
   486  001634                     __initialization:
   487                           	callstack 0
   488                           
   489                           ; Initialize objects allocated to COMRAM (4 bytes)
   490                           ; load TBLPTR registers with __pidataCOMRAM
   491  001634  0EDC               	movlw	low __pidataCOMRAM
   492  001636  6EF6               	movwf	tblptrl,c
   493  001638  0E1E               	movlw	high __pidataCOMRAM
   494  00163A  6EF7               	movwf	tblptrh,c
   495  00163C  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   496  00163E  6EF8               	movwf	tblptru,c
   497  001640  EE00  F075         	lfsr	0,__pdataCOMRAM
   498  001644  EE10 F004          	lfsr	1,4
   499  001648                     copy_data0:
   500  001648  0009               	tblrd		*+
   501  00164A  CFF5 FFEE          	movff	tablat,postinc0
   502  00164E  50E5               	movf	postdec1,w,c
   503  001650  50E1               	movf	fsr1l,w,c
   504  001652  E1FA               	bnz	copy_data0
   505                           
   506                           ; Clear objects allocated to BANK1 (162 bytes)
   507  001654  EE01  F000         	lfsr	0,__pbssBANK1
   508  001658  0EA2               	movlw	162
   509  00165A                     clear_0:
   510  00165A  6AEE               	clrf	postinc0,c
   511  00165C  06E8               	decf	wreg,f,c
   512  00165E  E1FD               	bnz	clear_0
   513                           
   514                           ; Clear objects allocated to BANK0 (95 bytes)
   515  001660  EE00  F080         	lfsr	0,__pbssBANK0
   516  001664  0E5F               	movlw	95
   517  001666                     clear_1:
   518  001666  6AEE               	clrf	postinc0,c
   519  001668  06E8               	decf	wreg,f,c
   520  00166A  E1FD               	bnz	clear_1
   521                           
   522                           ; Clear objects allocated to COMRAM (84 bytes)
   523  00166C  EE00  F001         	lfsr	0,__pbssCOMRAM
   524  001670  0E54               	movlw	84
   525  001672                     clear_2:
   526  001672  6AEE               	clrf	postinc0,c
   527  001674  06E8               	decf	wreg,f,c
   528  001676  E1FD               	bnz	clear_2
   529  001678                     end_of_initialization:
   530                           	callstack 0
   531  001678                     __end_of__initialization:
   532                           	callstack 0
   533  001678  9079               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   534  00167A  9279               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   535  00167C  0E00               	movlw	low (__Lmediumconst shr (0+16))
   536  00167E  6EF8               	movwf	tblptru,c
   537  001680  0100               	movlb	0
   538  001682  EF6C  F00B         	goto	_main	;jump to C main() function
   539                           
   540                           	psect	bssCOMRAM
   541  000001                     __pbssCOMRAM:
   542                           	callstack 0
   543  000001                     _printScore:
   544                           	callstack 0
   545  000001                     	ds	2
   546  000003                     _initSecs:
   547                           	callstack 0
   548  000003                     	ds	2
   549  000005                     _curMins:
   550                           	callstack 0
   551  000005                     	ds	2
   552  000007                     _curSecs:
   553                           	callstack 0
   554  000007                     	ds	2
   555  000009                     _h_Tics:
   556                           	callstack 0
   557  000009                     	ds	2
   558  00000B                     _tMarquee2:
   559                           	callstack 0
   560  00000B                     	ds	2
   561  00000D                     _tMarquee:
   562                           	callstack 0
   563  00000D                     	ds	2
   564  00000F                     _Timer:
   565                           	callstack 0
   566  00000F                     	ds	2
   567  000011                     _newestUserAddress:
   568                           	callstack 0
   569  000011                     	ds	1
   570  000012                     _done:
   571                           	callstack 0
   572  000012                     	ds	1
   573  000013                     _empty:
   574                           	callstack 0
   575  000013                     	ds	1
   576  000014                     _scoreAux:
   577                           	callstack 0
   578  000014                     	ds	1
   579  000015                     _score@EEPROM$F1582:
   580                           	callstack 0
   581  000015                     	ds	1
   582  000016                     _pointer@EEPROM$F1581:
   583                           	callstack 0
   584  000016                     	ds	1
   585  000017                     _flagReading:
   586                           	callstack 0
   587  000017                     	ds	1
   588  000018                     _checkUser:
   589                           	callstack 0
   590  000018                     	ds	1
   591  000019                     _state@EEPROM$F1577:
   592                           	callstack 0
   593  000019                     	ds	1
   594  00001A                     _position@EEPROM$F1576:
   595                           	callstack 0
   596  00001A                     	ds	1
   597  00001B                     _saveScore:
   598                           	callstack 0
   599  00001B                     	ds	1
   600  00001C                     _startUser:
   601                           	callstack 0
   602  00001C                     	ds	1
   603  00001D                     _users:
   604                           	callstack 0
   605  00001D                     	ds	1
   606  00001E                     _address:
   607                           	callstack 0
   608  00001E                     	ds	1
   609  00001F                     _bufferSelect:
   610                           	callstack 0
   611  00001F                     	ds	1
   612  000020                     _userIndex:
   613                           	callstack 0
   614  000020                     	ds	1
   615  000021                     _scoreFlag:
   616                           	callstack 0
   617  000021                     	ds	1
   618  000022                     _flag@Logic$F1451:
   619                           	callstack 0
   620  000022                     	ds	1
   621  000023                     _score:
   622                           	callstack 0
   623  000023                     	ds	1
   624  000024                     _menuPos:
   625                           	callstack 0
   626  000024                     	ds	1
   627  000025                     _writing:
   628                           	callstack 0
   629  000025                     	ds	1
   630  000026                     _position:
   631                           	callstack 0
   632  000026                     	ds	1
   633  000027                     _state@Logic$F1441:
   634                           	callstack 0
   635  000027                     	ds	1
   636  000028                     _key:
   637                           	callstack 0
   638  000028                     	ds	1
   639  000029                     _gameStarted:
   640                           	callstack 0
   641  000029                     	ds	1
   642  00002A                     _tLogic:
   643                           	callstack 0
   644  00002A                     	ds	1
   645  00002B                     _note:
   646                           	callstack 0
   647  00002B                     	ds	1
   648  00002C                     _tSpeaker:
   649                           	callstack 0
   650  00002C                     	ds	1
   651  00002D                     _status@Speaker$F1330:
   652                           	callstack 0
   653  00002D                     	ds	1
   654  00002E                     _index:
   655                           	callstack 0
   656  00002E                     	ds	1
   657  00002F                     _tEUSART:
   658                           	callstack 0
   659  00002F                     	ds	1
   660  000030                     _vit:
   661                           	callstack 0
   662  000030                     	ds	1
   663  000031                     _state@EUSART$F1266:
   664                           	callstack 0
   665  000031                     	ds	1
   666  000032                     _flag@EUSART$F1265:
   667                           	callstack 0
   668  000032                     	ds	1
   669  000033                     _status:
   670                           	callstack 0
   671  000033                     	ds	1
   672  000034                     _sendIndex:
   673                           	callstack 0
   674  000034                     	ds	1
   675  000035                     _tTime:
   676                           	callstack 0
   677  000035                     	ds	1
   678  000036                     motorKeyboard@state:
   679                           	callstack 0
   680  000036                     	ds	1
   681  000037                     _numerical:
   682                           	callstack 0
   683  000037                     	ds	1
   684  000038                     _tSMS:
   685                           	callstack 0
   686  000038                     	ds	1
   687  000039                     _tDebounce:
   688                           	callstack 0
   689  000039                     	ds	1
   690  00003A                     _prev_column:
   691                           	callstack 0
   692  00003A                     	ds	1
   693  00003B                     _prev_row:
   694                           	callstack 0
   695  00003B                     	ds	1
   696  00003C                     _row:
   697                           	callstack 0
   698  00003C                     	ds	1
   699  00003D                     _sms:
   700                           	callstack 0
   701  00003D                     	ds	1
   702  00003E                     _times:
   703                           	callstack 0
   704  00003E                     	ds	1
   705  00003F                     _state:
   706                           	callstack 0
   707  00003F                     	ds	1
   708  000040                     _counter:
   709                           	callstack 0
   710  000040                     	ds	1
   711  000041                     _length2:
   712                           	callstack 0
   713  000041                     	ds	1
   714  000042                     _shift2:
   715                           	callstack 0
   716  000042                     	ds	1
   717  000043                     _pointer2:
   718                           	callstack 0
   719  000043                     	ds	1
   720  000044                     _length:
   721                           	callstack 0
   722  000044                     	ds	1
   723  000045                     _shift:
   724                           	callstack 0
   725  000045                     	ds	1
   726  000046                     _pointer:
   727                           	callstack 0
   728  000046                     	ds	1
   729  000047                     _aux2:
   730                           	callstack 0
   731  000047                     	ds	1
   732  000048                     _aux:
   733                           	callstack 0
   734  000048                     	ds	1
   735  000049                     _ColumnAct:
   736                           	callstack 0
   737  000049                     	ds	1
   738  00004A                     _RowAct:
   739                           	callstack 0
   740  00004A                     	ds	1
   741  00004B                     _Columns:
   742                           	callstack 0
   743  00004B                     	ds	1
   744  00004C                     _user:
   745                           	callstack 0
   746  00004C                     	ds	8
   747  000054                     _column:
   748                           	callstack 0
   749  000054                     	ds	1
   750                           
   751                           	psect	dataCOMRAM
   752  000075                     __pdataCOMRAM:
   753                           	callstack 0
   754  000075                     _initMins:
   755                           	callstack 0
   756  000075                     	ds	2
   757  000077                     _flag2:
   758                           	callstack 0
   759  000077                     	ds	1
   760  000078                     _flag:
   761                           	callstack 0
   762  000078                     	ds	1
   763                           
   764                           	psect	bssBANK0
   765  000080                     __pbssBANK0:
   766                           	callstack 0
   767  000080                     _s_Timers:
   768                           	callstack 0
   769  000080                     	ds	27
   770  00009B                     _pass@EEPROM$F1571:
   771                           	callstack 0
   772  00009B                     	ds	8
   773  0000A3                     _user@EEPROM$F1570:
   774                           	callstack 0
   775  0000A3                     	ds	8
   776  0000AB                     _endTime:
   777                           	callstack 0
   778  0000AB                     	ds	4
   779  0000AF                     _passInputROM:
   780                           	callstack 0
   781  0000AF                     	ds	8
   782  0000B7                     _userInputROM:
   783                           	callstack 0
   784  0000B7                     	ds	8
   785  0000BF                     _passR:
   786                           	callstack 0
   787  0000BF                     	ds	8
   788  0000C7                     _userR:
   789                           	callstack 0
   790  0000C7                     	ds	8
   791  0000CF                     _readAux:
   792                           	callstack 0
   793  0000CF                     	ds	8
   794  0000D7                     _pass:
   795                           	callstack 0
   796  0000D7                     	ds	8
   797                           
   798                           	psect	bssBANK1
   799  000100                     __pbssBANK1:
   800                           	callstack 0
   801  000100                     _buffer:
   802                           	callstack 0
   803  000100                     	ds	162
   804                           
   805                           	psect	cstackBANK0
   806  0000DF                     __pcstackBANK0:
   807                           	callstack 0
   808  0000DF                     motorLogic@aux:
   809                           	callstack 0
   810                           
   811                           ; 1 bytes @ 0x0
   812  0000DF                     	ds	1
   813  0000E0                     motorLogic@x:
   814                           	callstack 0
   815                           
   816                           ; 1 bytes @ 0x1
   817  0000E0                     	ds	1
   818  0000E1                     motorLogic@aux_1500:
   819                           	callstack 0
   820                           
   821                           ; 1 bytes @ 0x2
   822  0000E1                     	ds	1
   823                           
   824                           	psect	cstackCOMRAM
   825  000055                     __pcstackCOMRAM:
   826                           	callstack 0
   827  000055                     
   828                           ; 1 bytes @ 0x0
   829  000055                     	ds	1
   830  000056                     ??_my_interrupts:
   831                           
   832                           ; 1 bytes @ 0x1
   833  000056                     	ds	4
   834  00005A                     ??_EscriuPrimeraOrdre:
   835  00005A                     ??_readUser:
   836  00005A                     ??_CantaPartAlta:
   837  00005A                     ??_CantaPartBaixa:
   838  00005A                     ??_shiftColumns:
   839  00005A                     ??_TimGetEndTime:
   840  00005A                     ?_TiGetTics:
   841                           	callstack 0
   842  00005A                     ?___awdiv:
   843                           	callstack 0
   844  00005A                     ?___awmod:
   845                           	callstack 0
   846  00005A                     TiResetTics@Handle:
   847                           	callstack 0
   848  00005A                     SiSendChar@my_byte:
   849                           	callstack 0
   850  00005A                     writeToROM@value:
   851                           	callstack 0
   852  00005A                     storeUser@positionUser:
   853                           	callstack 0
   854  00005A                     storePass@positionPass:
   855                           	callstack 0
   856  00005A                     login@userInput:
   857                           	callstack 0
   858  00005A                     signup@userInput:
   859                           	callstack 0
   860  00005A                     compare@a:
   861                           	callstack 0
   862  00005A                     storeScore@userLetter:
   863                           	callstack 0
   864  00005A                     ___lbdiv@divisor:
   865                           	callstack 0
   866  00005A                     ___lbmod@divisor:
   867                           	callstack 0
   868  00005A                     GetLength@string:
   869                           	callstack 0
   870  00005A                     GetSecondLength@string2:
   871                           	callstack 0
   872  00005A                     ___awdiv@dividend:
   873                           	callstack 0
   874  00005A                     ___awmod@dividend:
   875                           	callstack 0
   876                           
   877                           ; 2 bytes @ 0x5
   878  00005A                     	ds	1
   879  00005B                     CantaPartAlta@c:
   880                           	callstack 0
   881  00005B                     CantaPartBaixa@c:
   882                           	callstack 0
   883  00005B                     EscriuPrimeraOrdre@ordre:
   884                           	callstack 0
   885  00005B                     EUSendChar@data:
   886                           	callstack 0
   887  00005B                     storeUser@value:
   888                           	callstack 0
   889  00005B                     storePass@value:
   890                           	callstack 0
   891  00005B                     login@passInput:
   892                           	callstack 0
   893  00005B                     compare@b:
   894                           	callstack 0
   895  00005B                     storeScore@pos:
   896                           	callstack 0
   897  00005B                     ___lbdiv@dividend:
   898                           	callstack 0
   899  00005B                     ___lbmod@dividend:
   900                           	callstack 0
   901                           
   902                           ; 1 bytes @ 0x6
   903  00005B                     	ds	1
   904  00005C                     ??_TiGetTics:
   905  00005C                     ??_GetLength:
   906  00005C                     GetSecondLength@aux_x:
   907                           	callstack 0
   908  00005C                     CantaIR@IR:
   909                           	callstack 0
   910  00005C                     CantaData@Data:
   911                           	callstack 0
   912  00005C                     LoGotKey@pressed:
   913                           	callstack 0
   914  00005C                     storeScore@scoreIn:
   915                           	callstack 0
   916  00005C                     ___lbdiv@counter:
   917                           	callstack 0
   918  00005C                     ___lbmod@counter:
   919                           	callstack 0
   920  00005C                     ___awdiv@divisor:
   921                           	callstack 0
   922  00005C                     ___awmod@divisor:
   923                           	callstack 0
   924                           
   925                           ; 2 bytes @ 0x7
   926  00005C                     	ds	1
   927  00005D                     ___lbdiv@quotient:
   928                           	callstack 0
   929  00005D                     ___lbmod@rem:
   930                           	callstack 0
   931                           
   932                           ; 1 bytes @ 0x8
   933  00005D                     	ds	1
   934  00005E                     GetLength@aux_x:
   935                           	callstack 0
   936  00005E                     TiGetTics@Handle:
   937                           	callstack 0
   938  00005E                     readUser@toRead:
   939                           	callstack 0
   940  00005E                     readScore@aux:
   941                           	callstack 0
   942  00005E                     ___awdiv@counter:
   943                           	callstack 0
   944  00005E                     ___awmod@counter:
   945                           	callstack 0
   946                           
   947                           ; 1 bytes @ 0x9
   948  00005E                     	ds	1
   949  00005F                     TimGetEndTime@endPosition:
   950                           	callstack 0
   951  00005F                     ___awdiv@sign:
   952                           	callstack 0
   953  00005F                     ___awmod@sign:
   954                           	callstack 0
   955  00005F                     TiGetTics@actual:
   956                           	callstack 0
   957                           
   958                           ; 2 bytes @ 0xA
   959  00005F                     	ds	1
   960  000060                     ___awdiv@quotient:
   961                           	callstack 0
   962                           
   963                           ; 2 bytes @ 0xB
   964  000060                     	ds	1
   965  000061                     ??_motorEUSART:
   966  000061                     ??_motorSpeaker:
   967  000061                     WaitForBusy@Busy:
   968                           	callstack 0
   969  000061                     Espera@Timer:
   970                           	callstack 0
   971                           
   972                           ; 2 bytes @ 0xC
   973  000061                     	ds	1
   974  000062                     ??_motorROM:
   975  000062                     LcGotoXY@Row:
   976                           	callstack 0
   977                           
   978                           ; 1 bytes @ 0xD
   979  000062                     	ds	1
   980  000063                     LcGotoXY@Fisics:
   981                           	callstack 0
   982  000063                     Espera@ms:
   983                           	callstack 0
   984                           
   985                           ; 2 bytes @ 0xE
   986  000063                     	ds	2
   987  000065                     ??_Espera:
   988  000065                     _LcGotoXY$248:
   989                           	callstack 0
   990                           
   991                           ; 2 bytes @ 0x10
   992  000065                     	ds	1
   993  000066                     LcInit@columns:
   994                           	callstack 0
   995                           
   996                           ; 1 bytes @ 0x11
   997  000066                     	ds	1
   998  000067                     LcInit@rows:
   999                           	callstack 0
  1000  000067                     LcGotoXY@Column:
  1001                           	callstack 0
  1002                           
  1003                           ; 1 bytes @ 0x12
  1004  000067                     	ds	1
  1005  000068                     ??_motorJoystk:
  1006  000068                     LcInit@i:
  1007                           	callstack 0
  1008  000068                     LcPutChar@c:
  1009                           	callstack 0
  1010                           
  1011                           ; 1 bytes @ 0x13
  1012  000068                     	ds	1
  1013  000069                     ??_motorKeyboard:
  1014  000069                     ??_motorTime:
  1015  000069                     TimModifyTime@position:
  1016                           	callstack 0
  1017  000069                     LcPrintLine@c:
  1018                           	callstack 0
  1019  000069                     LcPrintSecondLine@c2:
  1020                           	callstack 0
  1021                           
  1022                           ; 2 bytes @ 0x14
  1023  000069                     	ds	1
  1024  00006A                     ??_TimModifyTime:
  1025                           
  1026                           ; 1 bytes @ 0x15
  1027  00006A                     	ds	1
  1028  00006B                     ??_LcPrintLine:
  1029  00006B                     
  1030                           ; 1 bytes @ 0x16
  1031  00006B                     	ds	4
  1032  00006F                     TimModifyTime@newTime:
  1033                           	callstack 0
  1034                           
  1035                           ; 1 bytes @ 0x1A
  1036  00006F                     	ds	1
  1037  000070                     ??_motorLogic:
  1038                           
  1039                           ; 1 bytes @ 0x1B
  1040  000070                     	ds	5
  1041  000075                     
  1042                           ; 1 bytes @ 0x20
  1043 ;;
  1044 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1045 ;;
  1046 ;; *************** function _main *****************
  1047 ;; Defined at:
  1048 ;;		line 23 in file "main.c"
  1049 ;; Parameters:    Size  Location     Type
  1050 ;;		None
  1051 ;; Auto vars:     Size  Location     Type
  1052 ;;		None
  1053 ;; Return value:  Size  Location     Type
  1054 ;;                  1    wreg      void 
  1055 ;; Registers used:
  1056 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1057 ;; Tracked objects:
  1058 ;;		On entry : 0/0
  1059 ;;		On exit  : 0/0
  1060 ;;		Unchanged: 0/0
  1061 ;; Data sizes:     COMRAM   BANK0   BANK1
  1062 ;;      Params:         0       0       0
  1063 ;;      Locals:         0       0       0
  1064 ;;      Temps:          0       0       0
  1065 ;;      Totals:         0       0       0
  1066 ;;Total ram usage:        0 bytes
  1067 ;; Hardware stack levels required when called: 9
  1068 ;; This function calls:
  1069 ;;		_LcInit
  1070 ;;		_TiInitTimer
  1071 ;;		_initBluetooth
  1072 ;;		_initEUSART
  1073 ;;		_initJoystk
  1074 ;;		_initKeyboard
  1075 ;;		_initLogic
  1076 ;;		_initROM
  1077 ;;		_initSpeaker
  1078 ;;		_initTimeADT
  1079 ;;		_motorEUSART
  1080 ;;		_motorJoystk
  1081 ;;		_motorKeyboard
  1082 ;;		_motorLogic
  1083 ;;		_motorROM
  1084 ;;		_motorSpeaker
  1085 ;;		_motorTime
  1086 ;; This function is called by:
  1087 ;;		Startup code after reset
  1088 ;; This function uses a non-reentrant model
  1089 ;;
  1090                           
  1091                           	psect	text0
  1092  0016D8                     __ptext0:
  1093                           	callstack 0
  1094  0016D8                     _main:
  1095                           	callstack 22
  1096                           
  1097                           ;main.c: 24:         motorTime();
  1098                           
  1099                           ;incstack = 0
  1100  0016D8  ECC9  F00E         	call	_initJoystk	;wreg free
  1101                           
  1102                           ;main.c: 25:         motorEUSART();
  1103  0016DC  ECE3  F00D         	call	_TiInitTimer	;wreg free
  1104                           
  1105                           ;main.c: 26:         motorSpeaker();
  1106  0016E0  0E10               	movlw	16
  1107  0016E2  6E66               	movwf	LcInit@columns^0,c
  1108  0016E4  ECEA  F008         	call	_LcInit
  1109                           
  1110                           ;main.c: 28:         motorROM();
  1111  0016E8  ECCF  F00D         	call	_initKeyboard	;wreg free
  1112                           
  1113                           ;main.c: 29:     }
  1114  0016EC  EC45  F00F         	call	_initTimeADT	;wreg free
  1115                           
  1116                           ;main.c: 30:     return;
  1117  0016F0  ECDD  F00E         	call	_initBluetooth	;wreg free
  1118                           
  1119                           ;main.c: 31: }
  1120  0016F4  ECD3  F00E         	call	_initEUSART	;wreg free
  1121  0016F8  EC1F  F00F         	call	_initSpeaker	;wreg free
  1122  0016FC  ECBF  F00E         	call	_initLogic	;wreg free
  1123  001700  EC0A  F00E         	call	_initROM	;wreg free
  1124  001704  9692               	bcf	146,3,c	;volatile
  1125  001706                     l8170:
  1126  001706  8689               	bsf	137,3,c	;volatile
  1127  001708  EC95  F009         	call	_motorJoystk	;wreg free
  1128  00170C  ECFF  F005         	call	_motorKeyboard	;wreg free
  1129  001710  EC92  F007         	call	_motorTime	;wreg free
  1130  001714  EC17  F008         	call	_motorEUSART	;wreg free
  1131  001718  ECB9  F00B         	call	_motorSpeaker	;wreg free
  1132  00171C  EC1B  F000         	call	_motorLogic	;wreg free
  1133  001720  EC9B  F004         	call	_motorROM	;wreg free
  1134  001724  D7F0               	goto	l8170
  1135  001726                     __end_of_main:
  1136                           	callstack 0
  1137                           
  1138 ;; *************** function _motorTime *****************
  1139 ;; Defined at:
  1140 ;;		line 28 in file "Time.c"
  1141 ;; Parameters:    Size  Location     Type
  1142 ;;		None
  1143 ;; Auto vars:     Size  Location     Type
  1144 ;;		None
  1145 ;; Return value:  Size  Location     Type
  1146 ;;                  1    wreg      void 
  1147 ;; Registers used:
  1148 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1149 ;; Tracked objects:
  1150 ;;		On entry : 0/0
  1151 ;;		On exit  : 0/0
  1152 ;;		Unchanged: 0/0
  1153 ;; Data sizes:     COMRAM   BANK0   BANK1
  1154 ;;      Params:         0       0       0
  1155 ;;      Locals:         0       0       0
  1156 ;;      Temps:          2       0       0
  1157 ;;      Totals:         2       0       0
  1158 ;;Total ram usage:        2 bytes
  1159 ;; Hardware stack levels used: 1
  1160 ;; Hardware stack levels required when called: 8
  1161 ;; This function calls:
  1162 ;;		_EUIsAvailable
  1163 ;;		_EUSendChar
  1164 ;;		_LcGotoXY
  1165 ;;		_LcPutChar
  1166 ;;		_TiGetTics
  1167 ;;		_TiResetTics
  1168 ;;		_TimUpdateTime
  1169 ;; This function is called by:
  1170 ;;		_main
  1171 ;; This function uses a non-reentrant model
  1172 ;;
  1173                           
  1174                           	psect	text1
  1175  000F24                     __ptext1:
  1176                           	callstack 0
  1177  000F24                     _motorTime:
  1178                           	callstack 22
  1179                           
  1180                           ;Time.c: 29:     if(status == 1) {
  1181                           
  1182                           ;incstack = 0
  1183  000F24  0433               	decf	_status^0,w,c
  1184  000F26  E12B               	bnz	l7228
  1185                           
  1186                           ;Time.c: 30:         if(TiGetTics(tTime) >= 1200) {
  1187  000F28  5035               	movf	_tTime^0,w,c
  1188  000F2A  EC1D  F00E         	call	_TiGetTics
  1189  000F2E  BE5B               	btfsc	(?_TiGetTics+1)^0,7,c
  1190  000F30  0012               	return	
  1191  000F32  ECF4  F006         	call	PL50	;call to abstracted procedure
  1192  000F36  A0D8               	btfss	status,0,c
  1193  000F38  0012               	return	
  1194                           
  1195                           ;Time.c: 31:             TiResetTics(tTime);
  1196  000F3A  5035               	movf	_tTime^0,w,c
  1197  000F3C  EC73  F00E         	call	_TiResetTics
  1198                           
  1199                           ;Time.c: 32:             TimUpdateTime();
  1200  000F40  ECAE  F00C         	call	_TimUpdateTime	;wreg free
  1201                           
  1202                           ;Time.c: 33:             LcGotoXY(0, 1);
  1203  000F44  EC8D  F004         	call	PL68	;call to abstracted procedure
  1204  000F48  EC43  F00D         	call	_LcGotoXY
  1205                           
  1206                           ;Time.c: 34:             LcPutChar(curMins[1] + '0');
  1207  000F4C  5006               	movf	(_curMins+1)^0,w,c
  1208  000F4E  0F30               	addlw	48
  1209  000F50  EC76  F00D         	call	_LcPutChar
  1210                           
  1211                           ;Time.c: 35:             LcPutChar(curMins[0] + '0');
  1212  000F54  5005               	movf	_curMins^0,w,c
  1213  000F56  0F30               	addlw	48
  1214  000F58  EC76  F00D         	call	_LcPutChar
  1215                           
  1216                           ;Time.c: 36:             LcPutChar(':');
  1217  000F5C  0E3A               	movlw	58
  1218  000F5E  EC76  F00D         	call	_LcPutChar
  1219                           
  1220                           ;Time.c: 37:             LcPutChar(curSecs[1] + '0');
  1221  000F62  5008               	movf	(_curSecs+1)^0,w,c
  1222  000F64  0F30               	addlw	48
  1223  000F66  EC76  F00D         	call	_LcPutChar
  1224                           
  1225                           ;Time.c: 38:             LcPutChar(curSecs[0] + '0');
  1226  000F6A  5007               	movf	_curSecs^0,w,c
  1227  000F6C  0F30               	addlw	48
  1228  000F6E  EC76  F00D         	call	_LcPutChar
  1229                           
  1230                           ;Time.c: 39:             if(status != 0) status = 2;
  1231  000F72  5033               	movf	_status^0,w,c
  1232  000F74  B4D8               	btfsc	status,2,c
  1233  000F76  0012               	return	
  1234  000F78  0E02               	movlw	2
  1235  000F7A  6E33               	movwf	_status^0,c
  1236                           
  1237                           ;Time.c: 42:     }
  1238                           
  1239                           ;Time.c: 41:         }
  1240  000F7C  0C02               	retlw	2
  1241  000F7E                     l7228:
  1242  000F7E  0E02               	movlw	2
  1243  000F80  1833               	xorwf	_status^0,w,c
  1244  000F82  E042               	bz	l7274
  1245  000F84  0012               	return	
  1246  000F86                     l7232:
  1247                           
  1248                           ;Time.c: 46:                 if(EUIsAvailable()) {
  1249  000F86  EC70  F00F         	call	_EUIsAvailable	;wreg free
  1250  000F8A  0900               	iorlw	0
  1251  000F8C  B4D8               	btfsc	status,2,c
  1252  000F8E  0012               	return	
  1253                           
  1254                           ;Time.c: 47:                     EUSendChar(curMins[1] + '0');
  1255  000F90  5006               	movf	(_curMins+1)^0,w,c
  1256  000F92  0F30               	addlw	48
  1257  000F94  EC11  F00F         	call	_EUSendChar
  1258  000F98                     l7236:
  1259                           
  1260                           ;Time.c: 48:                     sendIndex++;
  1261  000F98  2A34               	incf	_sendIndex^0,f,c
  1262  000F9A  0012               	return	
  1263  000F9C                     l7238:
  1264                           
  1265                           ;Time.c: 52:                 if(EUIsAvailable()) {
  1266  000F9C  EC70  F00F         	call	_EUIsAvailable	;wreg free
  1267  000FA0  0900               	iorlw	0
  1268  000FA2  B4D8               	btfsc	status,2,c
  1269  000FA4  0012               	return	
  1270                           
  1271                           ;Time.c: 53:                     EUSendChar(curMins[0] + '0');
  1272  000FA6  5005               	movf	_curMins^0,w,c
  1273  000FA8  0F30               	addlw	48
  1274  000FAA  EC11  F00F         	call	_EUSendChar
  1275  000FAE  D7F4               	goto	l7236
  1276  000FB0                     l7244:
  1277                           
  1278                           ;Time.c: 58:                 if(EUIsAvailable()) {
  1279  000FB0  EC70  F00F         	call	_EUIsAvailable	;wreg free
  1280  000FB4  0900               	iorlw	0
  1281  000FB6  B4D8               	btfsc	status,2,c
  1282  000FB8  0012               	return	
  1283                           
  1284                           ;Time.c: 59:                     EUSendChar(':');
  1285  000FBA  0E3A               	movlw	58
  1286  000FBC  EC11  F00F         	call	_EUSendChar
  1287  000FC0  D7EB               	goto	l7236
  1288  000FC2                     l7250:
  1289                           
  1290                           ;Time.c: 64:                 if(EUIsAvailable()) {
  1291  000FC2  EC70  F00F         	call	_EUIsAvailable	;wreg free
  1292  000FC6  0900               	iorlw	0
  1293  000FC8  B4D8               	btfsc	status,2,c
  1294  000FCA  0012               	return	
  1295                           
  1296                           ;Time.c: 65:                     EUSendChar(curSecs[1] + '0');
  1297  000FCC  5008               	movf	(_curSecs+1)^0,w,c
  1298  000FCE  0F30               	addlw	48
  1299  000FD0  EC11  F00F         	call	_EUSendChar
  1300  000FD4  D7E1               	goto	l7236
  1301  000FD6                     l7256:
  1302                           
  1303                           ;Time.c: 70:                 if(EUIsAvailable()) {
  1304  000FD6  EC70  F00F         	call	_EUIsAvailable	;wreg free
  1305  000FDA  0900               	iorlw	0
  1306  000FDC  B4D8               	btfsc	status,2,c
  1307  000FDE  0012               	return	
  1308                           
  1309                           ;Time.c: 71:                     EUSendChar(curSecs[0] + '0');
  1310  000FE0  5007               	movf	_curSecs^0,w,c
  1311  000FE2  0F30               	addlw	48
  1312  000FE4  EC11  F00F         	call	_EUSendChar
  1313  000FE8  D7D7               	goto	l7236
  1314  000FEA                     l7262:
  1315                           
  1316                           ;Time.c: 76:                 if(EUIsAvailable()) {
  1317  000FEA  EC70  F00F         	call	_EUIsAvailable	;wreg free
  1318  000FEE  0900               	iorlw	0
  1319  000FF0  B4D8               	btfsc	status,2,c
  1320  000FF2  0012               	return	
  1321                           
  1322                           ;Time.c: 77:                     EUSendChar('\n');
  1323  000FF4  0E0A               	movlw	10
  1324  000FF6  EC11  F00F         	call	_EUSendChar
  1325                           
  1326                           ;Time.c: 78:                     sendIndex = 0;
  1327  000FFA  6A34               	clrf	_sendIndex^0,c
  1328                           
  1329                           ;Time.c: 79:                     if(status != 0) status = 1;
  1330  000FFC  5033               	movf	_status^0,w,c
  1331  000FFE  B4D8               	btfsc	status,2,c
  1332  001000  0012               	return	
  1333  001002  0E01               	movlw	1
  1334  001004  6E33               	movwf	_status^0,c
  1335  001006  0C01               	retlw	1
  1336  001008                     l7274:
  1337  001008  5034               	movf	_sendIndex^0,w,c
  1338  00100A  6E69               	movwf	??_motorTime^0,c
  1339  00100C  6A6A               	clrf	(??_motorTime+1)^0,c
  1340                           
  1341                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1342                           ; Switch size 1, requested type "space"
  1343                           ; Number of cases is 1, Range of values is 0 to 0
  1344                           ; switch strategies available:
  1345                           ; Name         Instructions Cycles
  1346                           ; simple_byte            4     3 (average)
  1347                           ;	Chosen strategy is simple_byte
  1348  00100E  506A               	movf	(??_motorTime+1)^0,w,c
  1349  001010  A4D8               	btfss	status,2,c
  1350  001012  0012               	return	
  1351                           
  1352                           ; Switch size 1, requested type "space"
  1353                           ; Number of cases is 6, Range of values is 0 to 5
  1354                           ; switch strategies available:
  1355                           ; Name         Instructions Cycles
  1356                           ; simple_byte           19    10 (average)
  1357                           ;	Chosen strategy is simple_byte
  1358  001014  5069               	movf	??_motorTime^0,w,c
  1359  001016  E0B7               	bz	l7232
  1360  001018  0A01               	xorlw	1	; case 1
  1361  00101A  E0C0               	bz	l7238
  1362  00101C  0A03               	xorlw	3	; case 2
  1363  00101E  E0C8               	bz	l7244
  1364  001020  0A01               	xorlw	1	; case 3
  1365  001022  E0CF               	bz	l7250
  1366  001024  0A07               	xorlw	7	; case 4
  1367  001026  E0D7               	bz	l7256
  1368  001028  0A01               	xorlw	1	; case 5
  1369  00102A  E0DF               	bz	l7262
  1370  00102C  0012               	return		;funcret
  1371  00102E                     __end_of_motorTime:
  1372                           	callstack 0
  1373                           
  1374 ;; *************** function _TimUpdateTime *****************
  1375 ;; Defined at:
  1376 ;;		line 87 in file "Time.c"
  1377 ;; Parameters:    Size  Location     Type
  1378 ;;		None
  1379 ;; Auto vars:     Size  Location     Type
  1380 ;;		None
  1381 ;; Return value:  Size  Location     Type
  1382 ;;                  1    wreg      void 
  1383 ;; Registers used:
  1384 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1385 ;; Tracked objects:
  1386 ;;		On entry : 0/0
  1387 ;;		On exit  : 0/0
  1388 ;;		Unchanged: 0/0
  1389 ;; Data sizes:     COMRAM   BANK0   BANK1
  1390 ;;      Params:         0       0       0
  1391 ;;      Locals:         0       0       0
  1392 ;;      Temps:          0       0       0
  1393 ;;      Totals:         0       0       0
  1394 ;;Total ram usage:        0 bytes
  1395 ;; Hardware stack levels used: 1
  1396 ;; Hardware stack levels required when called: 7
  1397 ;; This function calls:
  1398 ;;		_LoEndGame
  1399 ;;		_LoPlaySound
  1400 ;;		_SPOneSec
  1401 ;; This function is called by:
  1402 ;;		_motorTime
  1403 ;; This function uses a non-reentrant model
  1404 ;;
  1405                           
  1406                           	psect	text2
  1407  00195C                     __ptext2:
  1408                           	callstack 0
  1409  00195C                     _TimUpdateTime:
  1410                           	callstack 22
  1411                           
  1412                           ;Time.c: 88:     if(curSecs[0] == 0) {
  1413                           
  1414                           ;incstack = 0
  1415  00195C  5007               	movf	_curSecs^0,w,c
  1416  00195E  E11B               	bnz	l6736
  1417                           
  1418                           ;Time.c: 89:         curSecs[0] = 9;
  1419  001960  0E09               	movlw	9
  1420  001962  6E07               	movwf	_curSecs^0,c
  1421                           
  1422                           ;Time.c: 90:         if(curSecs[1] == 0) {
  1423  001964  5008               	movf	(_curSecs+1)^0,w,c
  1424  001966  E115               	bnz	l6734
  1425                           
  1426                           ;Time.c: 91:             curSecs[1] = 5;
  1427  001968  0E05               	movlw	5
  1428  00196A  6E08               	movwf	(_curSecs+1)^0,c
  1429                           
  1430                           ;Time.c: 92:             LoPlaySound();
  1431  00196C  EC4B  F00F         	call	_LoPlaySound	;wreg free
  1432                           
  1433                           ;Time.c: 93:             if(curMins[0] == 0) {
  1434  001970  5005               	movf	_curMins^0,w,c
  1435  001972  E10D               	bnz	l6732
  1436                           
  1437                           ;Time.c: 94:                 curMins[0] = 9;
  1438  001974  0E09               	movlw	9
  1439  001976  6E05               	movwf	_curMins^0,c
  1440                           
  1441                           ;Time.c: 95:                 if(curMins[1] == 0) {
  1442  001978  5006               	movf	(_curMins+1)^0,w,c
  1443  00197A  E107               	bnz	l6730
  1444                           
  1445                           ;Time.c: 96:                     curSecs[0] = 0;
  1446  00197C  6A07               	clrf	_curSecs^0,c
  1447                           
  1448                           ;Time.c: 97:                     curSecs[1] = 0;
  1449  00197E  6A08               	clrf	(_curSecs+1)^0,c
  1450                           
  1451                           ;Time.c: 98:                     curMins[0] = 0;
  1452  001980  6A05               	clrf	_curMins^0,c
  1453                           
  1454                           ;Time.c: 99:                     LoEndGame();
  1455  001982  EC9C  F00E         	call	_LoEndGame	;wreg free
  1456                           
  1457                           ;Time.c: 100:                     status = 0;
  1458  001986  6A33               	clrf	_status^0,c
  1459                           
  1460                           ;Time.c: 101:                 }
  1461  001988  0012               	return	
  1462  00198A                     l6730:
  1463                           
  1464                           ;Time.c: 103:                     curMins[1]--;
  1465  00198A  0606               	decf	(_curMins+1)^0,f,c
  1466  00198C  0012               	return	
  1467  00198E                     l6732:
  1468                           
  1469                           ;Time.c: 107:                 curMins[0]--;
  1470  00198E  0605               	decf	_curMins^0,f,c
  1471  001990  0012               	return	
  1472  001992                     l6734:
  1473                           
  1474                           ;Time.c: 111:             curSecs[1]--;
  1475  001992  0608               	decf	(_curSecs+1)^0,f,c
  1476  001994  0012               	return	
  1477  001996                     l6736:
  1478                           
  1479                           ;Time.c: 115:         curSecs[0]--;
  1480  001996  0607               	decf	_curSecs^0,f,c
  1481                           
  1482                           ;Time.c: 116:         SPOneSec();
  1483  001998  EF2D  F00F         	goto	_SPOneSec	;wreg free
  1484  00199C                     __end_of_TimUpdateTime:
  1485                           	callstack 0
  1486                           
  1487 ;; *************** function _SPOneSec *****************
  1488 ;; Defined at:
  1489 ;;		line 34 in file "Speaker.c"
  1490 ;; Parameters:    Size  Location     Type
  1491 ;;		None
  1492 ;; Auto vars:     Size  Location     Type
  1493 ;;		None
  1494 ;; Return value:  Size  Location     Type
  1495 ;;                  1    wreg      void 
  1496 ;; Registers used:
  1497 ;;		wreg, status,2, status,0
  1498 ;; Tracked objects:
  1499 ;;		On entry : 0/0
  1500 ;;		On exit  : 0/0
  1501 ;;		Unchanged: 0/0
  1502 ;; Data sizes:     COMRAM   BANK0   BANK1
  1503 ;;      Params:         0       0       0
  1504 ;;      Locals:         0       0       0
  1505 ;;      Temps:          0       0       0
  1506 ;;      Totals:         0       0       0
  1507 ;;Total ram usage:        0 bytes
  1508 ;; Hardware stack levels used: 1
  1509 ;; Hardware stack levels required when called: 2
  1510 ;; This function calls:
  1511 ;;		Nothing
  1512 ;; This function is called by:
  1513 ;;		_TimUpdateTime
  1514 ;; This function uses a non-reentrant model
  1515 ;;
  1516                           
  1517                           	psect	text3
  1518  001E5A                     __ptext3:
  1519                           	callstack 0
  1520  001E5A                     _SPOneSec:
  1521                           	callstack 26
  1522                           
  1523                           ;Speaker.c: 35:     if (note > 3) status = 0;
  1524                           
  1525                           ;incstack = 0
  1526  001E5A  0E03               	movlw	3
  1527  001E5C  642B               	cpfsgt	_note^0,c
  1528  001E5E  D001               	goto	l2086
  1529  001E60  6A2D               	clrf	_status@Speaker$F1330^0,c
  1530  001E62                     l2086:
  1531                           
  1532                           ;Speaker.c: 36:     note++;
  1533  001E62  2A2B               	incf	_note^0,f,c
  1534  001E64  0012               	return		;funcret
  1535  001E66                     __end_of_SPOneSec:
  1536                           	callstack 0
  1537                           
  1538 ;; *************** function _LoPlaySound *****************
  1539 ;; Defined at:
  1540 ;;		line 55 in file "Logic.c"
  1541 ;; Parameters:    Size  Location     Type
  1542 ;;		None
  1543 ;; Auto vars:     Size  Location     Type
  1544 ;;		None
  1545 ;; Return value:  Size  Location     Type
  1546 ;;                  1    wreg      void 
  1547 ;; Registers used:
  1548 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1549 ;; Tracked objects:
  1550 ;;		On entry : 0/0
  1551 ;;		On exit  : 0/0
  1552 ;;		Unchanged: 0/0
  1553 ;; Data sizes:     COMRAM   BANK0   BANK1
  1554 ;;      Params:         0       0       0
  1555 ;;      Locals:         0       0       0
  1556 ;;      Temps:          0       0       0
  1557 ;;      Totals:         0       0       0
  1558 ;;Total ram usage:        0 bytes
  1559 ;; Hardware stack levels used: 1
  1560 ;; Hardware stack levels required when called: 4
  1561 ;; This function calls:
  1562 ;;		_SPPlay
  1563 ;; This function is called by:
  1564 ;;		_TimUpdateTime
  1565 ;; This function uses a non-reentrant model
  1566 ;;
  1567                           
  1568                           	psect	text4
  1569  001E96                     __ptext4:
  1570                           	callstack 0
  1571  001E96                     _LoPlaySound:
  1572                           	callstack 24
  1573                           
  1574                           ;Logic.c: 56:     if(gameStarted == 1) {
  1575                           
  1576                           ;incstack = 0
  1577  001E96  0429               	decf	_gameStarted^0,w,c
  1578  001E98  B4D8               	btfsc	status,2,c
  1579                           
  1580                           ;Logic.c: 57:         SPPlay();
  1581  001E9A  ECE7  F00E         	call	_SPPlay	;wreg free
  1582  001E9E  0012               	return		;funcret
  1583  001EA0                     __end_of_LoPlaySound:
  1584                           	callstack 0
  1585                           
  1586 ;; *************** function _SPPlay *****************
  1587 ;; Defined at:
  1588 ;;		line 28 in file "Speaker.c"
  1589 ;; Parameters:    Size  Location     Type
  1590 ;;		None
  1591 ;; Auto vars:     Size  Location     Type
  1592 ;;		None
  1593 ;; Return value:  Size  Location     Type
  1594 ;;                  1    wreg      void 
  1595 ;; Registers used:
  1596 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1597 ;; Tracked objects:
  1598 ;;		On entry : 0/0
  1599 ;;		On exit  : 0/0
  1600 ;;		Unchanged: 0/0
  1601 ;; Data sizes:     COMRAM   BANK0   BANK1
  1602 ;;      Params:         0       0       0
  1603 ;;      Locals:         0       0       0
  1604 ;;      Temps:          0       0       0
  1605 ;;      Totals:         0       0       0
  1606 ;;Total ram usage:        0 bytes
  1607 ;; Hardware stack levels used: 1
  1608 ;; Hardware stack levels required when called: 3
  1609 ;; This function calls:
  1610 ;;		_TiResetTics
  1611 ;; This function is called by:
  1612 ;;		_LoPlaySound
  1613 ;; This function uses a non-reentrant model
  1614 ;;
  1615                           
  1616                           	psect	text5
  1617  001DCE                     __ptext5:
  1618                           	callstack 0
  1619  001DCE                     _SPPlay:
  1620                           	callstack 24
  1621                           
  1622                           ;Speaker.c: 29:     note = 0;
  1623                           
  1624                           ;incstack = 0
  1625  001DCE  6A2B               	clrf	_note^0,c
  1626                           
  1627                           ;Speaker.c: 30:     if (status != 2) status = 1;
  1628  001DD0  0E02               	movlw	2
  1629  001DD2  182D               	xorwf	_status@Speaker$F1330^0,w,c
  1630  001DD4  E002               	bz	l6348
  1631  001DD6  0E01               	movlw	1
  1632  001DD8  6E2D               	movwf	_status@Speaker$F1330^0,c
  1633  001DDA                     l6348:
  1634                           
  1635                           ;Speaker.c: 31:     TiResetTics(tSpeaker);
  1636  001DDA  502C               	movf	_tSpeaker^0,w,c
  1637  001DDC  EF73  F00E         	goto	_TiResetTics
  1638  001DE0                     __end_of_SPPlay:
  1639                           	callstack 0
  1640                           
  1641 ;; *************** function _EUSendChar *****************
  1642 ;; Defined at:
  1643 ;;		line 64 in file "EUSART.c"
  1644 ;; Parameters:    Size  Location     Type
  1645 ;;  data            1    wreg     unsigned char 
  1646 ;; Auto vars:     Size  Location     Type
  1647 ;;  data            1    6[COMRAM] unsigned char 
  1648 ;; Return value:  Size  Location     Type
  1649 ;;                  1    wreg      void 
  1650 ;; Registers used:
  1651 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1652 ;; Tracked objects:
  1653 ;;		On entry : 0/0
  1654 ;;		On exit  : 0/0
  1655 ;;		Unchanged: 0/0
  1656 ;; Data sizes:     COMRAM   BANK0   BANK1
  1657 ;;      Params:         0       0       0
  1658 ;;      Locals:         1       0       0
  1659 ;;      Temps:          0       0       0
  1660 ;;      Totals:         1       0       0
  1661 ;;Total ram usage:        1 bytes
  1662 ;; Hardware stack levels used: 1
  1663 ;; Hardware stack levels required when called: 3
  1664 ;; This function calls:
  1665 ;;		_TiResetTics
  1666 ;; This function is called by:
  1667 ;;		_motorTime
  1668 ;; This function uses a non-reentrant model
  1669 ;;
  1670                           
  1671                           	psect	text6
  1672  001E22                     __ptext6:
  1673                           	callstack 0
  1674  001E22                     _EUSendChar:
  1675                           	callstack 26
  1676                           
  1677                           ;incstack = 0
  1678                           ;EUSendChar@data stored from wreg
  1679  001E22  6E5B               	movwf	EUSendChar@data^0,c
  1680                           
  1681                           ;EUSART.c: 65:     vit = data;
  1682  001E24  C05B  F030         	movff	EUSendChar@data,_vit
  1683                           
  1684                           ;EUSART.c: 66:     flag = 0;
  1685  001E28  6A32               	clrf	_flag@EUSART$F1265^0,c
  1686                           
  1687                           ;EUSART.c: 67:     TiResetTics(tEUSART);
  1688  001E2A  502F               	movf	_tEUSART^0,w,c
  1689  001E2C  EF73  F00E         	goto	_TiResetTics
  1690  001E30                     __end_of_EUSendChar:
  1691                           	callstack 0
  1692                           
  1693 ;; *************** function _EUIsAvailable *****************
  1694 ;; Defined at:
  1695 ;;		line 60 in file "EUSART.c"
  1696 ;; Parameters:    Size  Location     Type
  1697 ;;		None
  1698 ;; Auto vars:     Size  Location     Type
  1699 ;;		None
  1700 ;; Return value:  Size  Location     Type
  1701 ;;                  1    wreg      unsigned char 
  1702 ;; Registers used:
  1703 ;;		wreg, status,2
  1704 ;; Tracked objects:
  1705 ;;		On entry : 0/0
  1706 ;;		On exit  : 0/0
  1707 ;;		Unchanged: 0/0
  1708 ;; Data sizes:     COMRAM   BANK0   BANK1
  1709 ;;      Params:         0       0       0
  1710 ;;      Locals:         0       0       0
  1711 ;;      Temps:          0       0       0
  1712 ;;      Totals:         0       0       0
  1713 ;;Total ram usage:        0 bytes
  1714 ;; Hardware stack levels used: 1
  1715 ;; Hardware stack levels required when called: 2
  1716 ;; This function calls:
  1717 ;;		Nothing
  1718 ;; This function is called by:
  1719 ;;		_motorTime
  1720 ;; This function uses a non-reentrant model
  1721 ;;
  1722                           
  1723                           	psect	text7
  1724  001EE0                     __ptext7:
  1725                           	callstack 0
  1726  001EE0                     _EUIsAvailable:
  1727                           	callstack 27
  1728                           
  1729                           ;EUSART.c: 61:     return flag;
  1730                           
  1731                           ;incstack = 0
  1732  001EE0  5032               	movf	_flag@EUSART$F1265^0,w,c
  1733  001EE2  0012               	return		;funcret
  1734  001EE4                     __end_of_EUIsAvailable:
  1735                           	callstack 0
  1736                           
  1737 ;; *************** function _motorSpeaker *****************
  1738 ;; Defined at:
  1739 ;;		line 21 in file "Speaker.c"
  1740 ;; Parameters:    Size  Location     Type
  1741 ;;		None
  1742 ;; Auto vars:     Size  Location     Type
  1743 ;;		None
  1744 ;; Return value:  Size  Location     Type
  1745 ;;                  1    wreg      void 
  1746 ;; Registers used:
  1747 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1748 ;; Tracked objects:
  1749 ;;		On entry : 0/0
  1750 ;;		On exit  : 0/0
  1751 ;;		Unchanged: 0/0
  1752 ;; Data sizes:     COMRAM   BANK0   BANK1
  1753 ;;      Params:         0       0       0
  1754 ;;      Locals:         0       0       0
  1755 ;;      Temps:          4       0       0
  1756 ;;      Totals:         4       0       0
  1757 ;;Total ram usage:        4 bytes
  1758 ;; Hardware stack levels used: 1
  1759 ;; Hardware stack levels required when called: 3
  1760 ;; This function calls:
  1761 ;;		_TiGetTics
  1762 ;; This function is called by:
  1763 ;;		_main
  1764 ;; This function uses a non-reentrant model
  1765 ;;
  1766                           
  1767                           	psect	text8
  1768  001772                     __ptext8:
  1769                           	callstack 0
  1770  001772                     _motorSpeaker:
  1771                           	callstack 27
  1772                           
  1773                           ;Speaker.c: 22:     if (status == 1) {
  1774                           
  1775                           ;incstack = 0
  1776  001772  042D               	decf	_status@Speaker$F1330^0,w,c
  1777  001774  A4D8               	btfss	status,2,c
  1778  001776  0012               	return	
  1779                           
  1780                           ;Speaker.c: 23:         LATDbits.LATD7 = ((TiGetTics(tSpeaker) & 0x01 << note) != 0);
  1781  001778  C02B  F061         	movff	_note,??_motorSpeaker
  1782  00177C  0E01               	movlw	1
  1783  00177E  6E62               	movwf	(??_motorSpeaker+1)^0,c
  1784  001780  6A63               	clrf	(??_motorSpeaker+2)^0,c
  1785  001782  2A61               	incf	??_motorSpeaker^0,f,c
  1786  001784  D003               	goto	u9164
  1787  001786                     u9165:
  1788  001786  90D8               	bcf	status,0,c
  1789  001788  3662               	rlcf	(??_motorSpeaker+1)^0,f,c
  1790  00178A  3663               	rlcf	(??_motorSpeaker+2)^0,f,c
  1791  00178C                     u9164:
  1792  00178C  2E61               	decfsz	??_motorSpeaker^0,f,c
  1793  00178E  D7FB               	goto	u9165
  1794  001790  502C               	movf	_tSpeaker^0,w,c
  1795  001792  EC1D  F00E         	call	_TiGetTics
  1796  001796  5062               	movf	(??_motorSpeaker+1)^0,w,c
  1797  001798  165A               	andwf	?_TiGetTics^0,f,c
  1798  00179A  5063               	movf	(??_motorSpeaker+2)^0,w,c
  1799  00179C  165B               	andwf	(?_TiGetTics+1)^0,f,c
  1800  00179E  505A               	movf	?_TiGetTics^0,w,c
  1801  0017A0  105B               	iorwf	(?_TiGetTics+1)^0,w,c
  1802  0017A2  E003               	bz	u9170
  1803  0017A4  6A64               	clrf	(??_motorSpeaker+3)^0,c
  1804  0017A6  2A64               	incf	(??_motorSpeaker+3)^0,f,c
  1805  0017A8  D001               	goto	u9188
  1806  0017AA                     u9170:
  1807  0017AA  6A64               	clrf	(??_motorSpeaker+3)^0,c
  1808  0017AC                     u9188:
  1809  0017AC  3264               	rrcf	(??_motorSpeaker+3)^0,f,c
  1810  0017AE  3264               	rrcf	(??_motorSpeaker+3)^0,f,c
  1811  0017B0  508C               	movf	140,w,c	;volatile
  1812  0017B2  1864               	xorwf	(??_motorSpeaker+3)^0,w,c
  1813  0017B4  0B7F               	andlw	-129
  1814  0017B6  1864               	xorwf	(??_motorSpeaker+3)^0,w,c
  1815  0017B8  6E8C               	movwf	140,c	;volatile
  1816  0017BA  0012               	return		;funcret
  1817  0017BC                     __end_of_motorSpeaker:
  1818                           	callstack 0
  1819                           
  1820 ;; *************** function _motorROM *****************
  1821 ;; Defined at:
  1822 ;;		line 61 in file "EEPROM.c"
  1823 ;; Parameters:    Size  Location     Type
  1824 ;;		None
  1825 ;; Auto vars:     Size  Location     Type
  1826 ;;		None
  1827 ;; Return value:  Size  Location     Type
  1828 ;;                  1    wreg      void 
  1829 ;; Registers used:
  1830 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1831 ;; Tracked objects:
  1832 ;;		On entry : 0/0
  1833 ;;		On exit  : 0/0
  1834 ;;		Unchanged: 0/0
  1835 ;; Data sizes:     COMRAM   BANK0   BANK1
  1836 ;;      Params:         0       0       0
  1837 ;;      Locals:         0       0       0
  1838 ;;      Temps:          3       0       0
  1839 ;;      Totals:         3       0       0
  1840 ;;Total ram usage:        3 bytes
  1841 ;; Hardware stack levels used: 1
  1842 ;; Hardware stack levels required when called: 3
  1843 ;; This function calls:
  1844 ;;		___awdiv
  1845 ;;		___lbmod
  1846 ;;		_compare
  1847 ;;		_readFromROM
  1848 ;;		_writeToROM
  1849 ;; This function is called by:
  1850 ;;		_main
  1851 ;; This function uses a non-reentrant model
  1852 ;;
  1853                           
  1854                           	psect	text9
  1855  000936                     __ptext9:
  1856                           	callstack 0
  1857  000936                     _motorROM:
  1858                           	callstack 27
  1859                           
  1860                           ;EEPROM.c: 62:     switch(state) {
  1861                           
  1862                           ;incstack = 0
  1863  000936  D109               	goto	l8144
  1864  000938                     l7950:
  1865                           
  1866                           ;EEPROM.c: 64:             if(startUser == 1) {
  1867  000938  041C               	decf	_startUser^0,w,c
  1868  00093A  E114               	bnz	l7966
  1869                           
  1870                           ;EEPROM.c: 65:                 state++;
  1871  00093C  2A19               	incf	_state@EEPROM$F1577^0,f,c
  1872                           
  1873                           ;EEPROM.c: 66:                 position = 0;
  1874  00093E  6A1A               	clrf	_position@EEPROM$F1576^0,c
  1875                           
  1876                           ;EEPROM.c: 67:                 address = ((users * 16) % 0x80) +16 ;
  1877  000940  501D               	movf	_users^0,w,c
  1878  000942  0D10               	mullw	16
  1879  000944  50F3               	movf	243,w,c
  1880  000946  0B7F               	andlw	127
  1881  000948  0F10               	addlw	16
  1882  00094A  6E1E               	movwf	_address^0,c
  1883                           
  1884                           ;EEPROM.c: 68:                 if(address == 0x00) {
  1885  00094C  501E               	movf	_address^0,w,c
  1886  00094E  E102               	bnz	l7962
  1887                           
  1888                           ;EEPROM.c: 69:                     address = 0x10;
  1889  000950  0E10               	movlw	16
  1890  000952  6E1E               	movwf	_address^0,c
  1891  000954                     l7962:
  1892                           
  1893                           ;EEPROM.c: 71:                 users = users % 0x90;
  1894  000954  0E90               	movlw	144
  1895  000956  6E5A               	movwf	___lbmod@divisor^0,c
  1896  000958  501D               	movf	_users^0,w,c
  1897  00095A  ECF7  F00D         	call	___lbmod
  1898  00095E  6E1D               	movwf	_users^0,c
  1899                           
  1900                           ;EEPROM.c: 72:                 done = 0;
  1901  000960  6A12               	clrf	_done^0,c
  1902                           
  1903                           ;EEPROM.c: 73:             }
  1904  000962  0012               	return	
  1905  000964                     l7966:
  1906  000964  0418               	decf	_checkUser^0,w,c
  1907  000966  E003               	bz	u10240
  1908  000968  0E03               	movlw	3
  1909  00096A  1818               	xorwf	_checkUser^0,w,c
  1910  00096C  E104               	bnz	l7974
  1911  00096E                     u10240:
  1912                           
  1913                           ;EEPROM.c: 75:                 address = 0x10;
  1914  00096E  0E10               	movlw	16
  1915  000970  6E1E               	movwf	_address^0,c
  1916                           
  1917                           ;EEPROM.c: 76:                 position = 0;
  1918  000972  6A1A               	clrf	_position@EEPROM$F1576^0,c
  1919                           
  1920                           ;EEPROM.c: 77:                 state = 3;
  1921                           
  1922                           ;EEPROM.c: 78:             }
  1923  000974  D138               	goto	PL86	;call to abstracted procedure
  1924  000976                     l7974:
  1925  000976  041B               	decf	_saveScore^0,w,c
  1926  000978  A4D8               	btfss	status,2,c
  1927  00097A  0012               	return	
  1928                           
  1929                           ;EEPROM.c: 80:                 address = 0x90;
  1930  00097C  0E90               	movlw	144
  1931  00097E  6E1E               	movwf	_address^0,c
  1932                           
  1933                           ;EEPROM.c: 81:                 position = 0;
  1934  000980  6A1A               	clrf	_position@EEPROM$F1576^0,c
  1935                           
  1936                           ;EEPROM.c: 82:                 state = 8;
  1937  000982  0E08               	movlw	8
  1938  000984  6E19               	movwf	_state@EEPROM$F1577^0,c
  1939                           
  1940                           ;EEPROM.c: 84:             break;
  1941  000986  0C08               	retlw	8
  1942  000988                     l7980:
  1943                           
  1944                           ;EEPROM.c: 86:             if(position < 8) {
  1945  000988  0E08               	movlw	8
  1946  00098A  601A               	cpfslt	_position@EEPROM$F1576^0,c
  1947  00098C  D00F               	goto	l1093
  1948                           
  1949                           ;EEPROM.c: 87:                 if(EECON1bits.WR == 0) {
  1950  00098E  B2A6               	btfsc	166,1,c	;volsfr
  1951  000990  0C08               	retlw	8
  1952                           
  1953                           ;EEPROM.c: 88:                     writeToROM(user[position]);
  1954  000992  501A               	movf	_position@EEPROM$F1576^0,w,c
  1955  000994  0FA3               	addlw	low _user@EEPROM$F1570
  1956  000996  D91A               	call	PL56	;call to abstracted procedure
  1957  000998  EC42  F00E         	call	_writeToROM
  1958                           
  1959                           ;EEPROM.c: 89:                     user[position] = '\0';
  1960  00099C  501A               	movf	_position@EEPROM$F1576^0,w,c
  1961  00099E  0FA3               	addlw	low _user@EEPROM$F1570
  1962  0009A0  6ED9               	movwf	fsr2l,c
  1963  0009A2  6ADA               	clrf	fsr2h,c
  1964  0009A4  6ADF               	clrf	indf2,c
  1965                           
  1966                           ;EEPROM.c: 90:                     position++;
  1967  0009A6  2A1A               	incf	_position@EEPROM$F1576^0,f,c
  1968                           
  1969                           ;EEPROM.c: 91:                     address++;
  1970  0009A8  2A1E               	incf	_address^0,f,c
  1971  0009AA  0C00               	retlw	0
  1972  0009AC                     l1093:
  1973                           
  1974                           ;EEPROM.c: 95:                 position = 0;
  1975  0009AC  6A1A               	clrf	_position@EEPROM$F1576^0,c
  1976  0009AE                     l7992:
  1977                           
  1978                           ;EEPROM.c: 96:                 state++;
  1979  0009AE  2A19               	incf	_state@EEPROM$F1577^0,f,c
  1980  0009B0  0012               	return	
  1981  0009B2                     l7994:
  1982                           
  1983                           ;EEPROM.c: 100:             if(position < 8) {
  1984  0009B2  0E08               	movlw	8
  1985  0009B4  601A               	cpfslt	_position@EEPROM$F1576^0,c
  1986  0009B6  D00A               	goto	l1097
  1987                           
  1988                           ;EEPROM.c: 101:                 if(EECON1bits.WR == 0) {
  1989  0009B8  B2A6               	btfsc	166,1,c	;volsfr
  1990  0009BA  0C08               	retlw	8
  1991                           
  1992                           ;EEPROM.c: 102:                     writeToROM(pass[position]);
  1993  0009BC  501A               	movf	_position@EEPROM$F1576^0,w,c
  1994  0009BE  0F9B               	addlw	low _pass@EEPROM$F1571
  1995  0009C0  D905               	call	PL56	;call to abstracted procedure
  1996  0009C2  EC42  F00E         	call	_writeToROM
  1997                           
  1998                           ;EEPROM.c: 103:                     pass[position] = '\0';
  1999  0009C6  501A               	movf	_position@EEPROM$F1576^0,w,c
  2000  0009C8  0F9B               	addlw	low _pass@EEPROM$F1571
  2001  0009CA  D7EA               	goto	L1
  2002  0009CC                     l1097:
  2003                           
  2004                           ;EEPROM.c: 109:                 if(EECON1bits.WR == 0) {
  2005  0009CC  B2A6               	btfsc	166,1,c	;volsfr
  2006  0009CE  0012               	return	
  2007                           
  2008                           ;EEPROM.c: 110:                     users++;
  2009  0009D0  2A1D               	incf	_users^0,f,c
  2010                           
  2011                           ;EEPROM.c: 111:                     position = address;
  2012  0009D2  C01E  F01A         	movff	_address,_position@EEPROM$F1576
  2013                           
  2014                           ;EEPROM.c: 112:                     address = 0;
  2015  0009D6  6A1E               	clrf	_address^0,c
  2016                           
  2017                           ;EEPROM.c: 113:                     writeToROM(users);
  2018  0009D8  501D               	movf	_users^0,w,c
  2019  0009DA  EC42  F00E         	call	_writeToROM
  2020                           
  2021                           ;EEPROM.c: 114:                     address++;
  2022  0009DE  2A1E               	incf	_address^0,f,c
  2023                           
  2024                           ;EEPROM.c: 115:                     state = 100;
  2025  0009E0  0E64               	movlw	100
  2026  0009E2  6E19               	movwf	_state@EEPROM$F1577^0,c
  2027                           
  2028                           ;EEPROM.c: 116:                     startUser = 0;
  2029  0009E4  6A1C               	clrf	_startUser^0,c
  2030  0009E6  0012               	return	
  2031  0009E8                     l1101:
  2032                           
  2033                           ;EEPROM.c: 121:             if(EECON1bits.WR == 0) {
  2034  0009E8  B2A6               	btfsc	166,1,c	;volsfr
  2035  0009EA  0012               	return	
  2036                           
  2037                           ;EEPROM.c: 122:                 writeToROM(position-16);
  2038  0009EC  501A               	movf	_position@EEPROM$F1576^0,w,c
  2039  0009EE  0FF0               	addlw	240
  2040  0009F0  EC42  F00E         	call	_writeToROM
  2041                           
  2042                           ;EEPROM.c: 123:                 address = position;
  2043  0009F4  C01A  F01E         	movff	_position@EEPROM$F1576,_address
  2044                           
  2045                           ;EEPROM.c: 124:                 position = 0;
  2046  0009F8  6A1A               	clrf	_position@EEPROM$F1576^0,c
  2047                           
  2048                           ;EEPROM.c: 125:                 state = 0;
  2049  0009FA  6A19               	clrf	_state@EEPROM$F1577^0,c
  2050                           
  2051                           ;EEPROM.c: 126:                 done = 1;
  2052  0009FC  D0FD               	goto	PL96	;call to abstracted procedure
  2053  0009FE                     l8030:
  2054                           
  2055                           ;EEPROM.c: 130:             if(position < 8) {
  2056  0009FE  0E08               	movlw	8
  2057  000A00  601A               	cpfslt	_position@EEPROM$F1576^0,c
  2058  000A02  D7D4               	goto	l1093
  2059                           
  2060                           ;EEPROM.c: 131:                 userR[position] = readFromROM();
  2061  000A04  EC90  F009         	call	PL38	;call to abstracted procedure
  2062  000A08  EC26  F00F         	call	_readFromROM	;wreg free
  2063  000A0C  6EDF               	movwf	indf2,c
  2064  000A0E                     l8034:
  2065                           
  2066                           ;EEPROM.c: 132:                 address++;
  2067  000A0E  2A1E               	incf	_address^0,f,c
  2068  000A10                     l8036:
  2069                           
  2070                           ;EEPROM.c: 133:                 position++;
  2071  000A10  2A1A               	incf	_position@EEPROM$F1576^0,f,c
  2072                           
  2073                           ;EEPROM.c: 134:             }
  2074  000A12  0012               	return	
  2075  000A14                     l8040:
  2076                           
  2077                           ;EEPROM.c: 141:             if(position < 8) {
  2078  000A14  0E08               	movlw	8
  2079  000A16  601A               	cpfslt	_position@EEPROM$F1576^0,c
  2080  000A18  D004               	goto	l1107
  2081                           
  2082                           ;EEPROM.c: 142:                 passR[position] = readFromROM();
  2083  000A1A  D8E0               	call	PL76	;call to abstracted procedure
  2084  000A1C  EC26  F00F         	call	_readFromROM	;wreg free
  2085  000A20  D7F5               	goto	L2
  2086  000A22                     l1107:
  2087                           
  2088                           ;EEPROM.c: 147:                 position = 0;
  2089  000A22  6A1A               	clrf	_position@EEPROM$F1576^0,c
  2090                           
  2091                           ;EEPROM.c: 148:                 flagReading = 0;
  2092  000A24  6A17               	clrf	_flagReading^0,c
  2093                           
  2094                           ;EEPROM.c: 149:                 pointer = 0;
  2095  000A26  6A16               	clrf	_pointer@EEPROM$F1581^0,c
  2096  000A28  D7C2               	goto	l7992
  2097  000A2A                     l8050:
  2098                           
  2099                           ;EEPROM.c: 154:             if(compare(userInputROM, userR) != 0) {
  2100  000A2A  0EB7               	movlw	low _userInputROM
  2101  000A2C  6E5A               	movwf	compare@a^0,c
  2102  000A2E  0EC7               	movlw	low _userR
  2103  000A30  6E5B               	movwf	compare@b^0,c
  2104  000A32  EC5D  F00D         	call	_compare	;wreg free
  2105  000A36  0900               	iorlw	0
  2106  000A38  B4D8               	btfsc	status,2,c
  2107  000A3A  0012               	return	
  2108                           
  2109                           ;EEPROM.c: 155:                 if(flagReading == 1) {
  2110  000A3C  0417               	decf	_flagReading^0,w,c
  2111  000A3E  E10C               	bnz	l8064
  2112                           
  2113                           ;EEPROM.c: 156:                     flagReading = 0;
  2114  000A40  6A17               	clrf	_flagReading^0,c
  2115                           
  2116                           ;EEPROM.c: 157:                     pointer = 0;
  2117  000A42  6A16               	clrf	_pointer@EEPROM$F1581^0,c
  2118                           
  2119                           ;EEPROM.c: 158:                     if(checkUser == 1)state++;
  2120  000A44  0418               	decf	_checkUser^0,w,c
  2121  000A46  E101               	bnz	l8060
  2122  000A48  2A19               	incf	_state@EEPROM$F1577^0,f,c
  2123  000A4A                     l8060:
  2124                           
  2125                           ;EEPROM.c: 159:                     if(checkUser == 3) {
  2126  000A4A  0E03               	movlw	3
  2127  000A4C  1818               	xorwf	_checkUser^0,w,c
  2128  000A4E  A4D8               	btfss	status,2,c
  2129  000A50  0012               	return	
  2130                           
  2131                           ;EEPROM.c: 161:                         flagReading = 1;
  2132  000A52  0E01               	movlw	1
  2133  000A54  6E17               	movwf	_flagReading^0,c
  2134                           
  2135                           ;EEPROM.c: 162:                         state = 7;}
  2136  000A56  D0CD               	goto	PL92	;call to abstracted procedure
  2137  000A58                     l8064:
  2138  000A58  0E02               	movlw	2
  2139  000A5A  1817               	xorwf	_flagReading^0,w,c
  2140  000A5C  A4D8               	btfss	status,2,c
  2141  000A5E  0012               	return	
  2142                           
  2143                           ;EEPROM.c: 165:                     if(((address - 16) / 16) >= users) {
  2144  000A60  D89F               	call	PL30	;call to abstracted procedure
  2145  000A62  EC17  F00A         	call	___awdiv	;wreg free
  2146  000A66  D8A9               	call	PL42	;call to abstracted procedure
  2147  000A68  E301               	bnc	l1116
  2148  000A6A                     u10390:
  2149                           
  2150                           ;EEPROM.c: 166:                         state = 7;
  2151                           
  2152                           ;EEPROM.c: 167:                     }
  2153  000A6A  D0C3               	goto	PL92	;call to abstracted procedure
  2154  000A6C                     l1116:
  2155                           
  2156                           ;EEPROM.c: 169:                         flagReading = 0;
  2157  000A6C  6A17               	clrf	_flagReading^0,c
  2158                           
  2159                           ;EEPROM.c: 170:                         pointer = 0;
  2160  000A6E  6A16               	clrf	_pointer@EEPROM$F1581^0,c
  2161                           
  2162                           ;EEPROM.c: 171:                         state = 3;
  2163  000A70  D0BA               	goto	PL86	;call to abstracted procedure
  2164  000A72                     l8072:
  2165                           
  2166                           ;EEPROM.c: 177:             if(compare(passInputROM, passR) != 0) {
  2167  000A72  0EAF               	movlw	low _passInputROM
  2168  000A74  6E5A               	movwf	compare@a^0,c
  2169  000A76  0EBF               	movlw	low _passR
  2170  000A78  6E5B               	movwf	compare@b^0,c
  2171  000A7A  EC5D  F00D         	call	_compare	;wreg free
  2172  000A7E  0900               	iorlw	0
  2173  000A80  B4D8               	btfsc	status,2,c
  2174  000A82  0012               	return	
  2175                           
  2176                           ;EEPROM.c: 178:                 if(flagReading == 1) {
  2177  000A84  0417               	decf	_flagReading^0,w,c
  2178  000A86  E0F1               	bz	u10390
  2179  000A88  0E02               	movlw	2
  2180  000A8A  1817               	xorwf	_flagReading^0,w,c
  2181  000A8C  A4D8               	btfss	status,2,c
  2182  000A8E  0012               	return	
  2183                           
  2184                           ;EEPROM.c: 183:                     if(((address - 16) / 16) >= users) {
  2185  000A90  D887               	call	PL30	;call to abstracted procedure
  2186  000A92  EC17  F00A         	call	___awdiv	;wreg free
  2187  000A96  D891               	call	PL42	;call to abstracted procedure
  2188  000A98  E2E8               	bc	u10390
  2189  000A9A  D7E8               	goto	l1116
  2190  000A9C                     l8086:
  2191                           
  2192                           ;EEPROM.c: 195:             if (position < 8) {
  2193  000A9C  0E08               	movlw	8
  2194  000A9E  601A               	cpfslt	_position@EEPROM$F1576^0,c
  2195  000AA0  D00D               	goto	l1126
  2196                           
  2197                           ;EEPROM.c: 196:                 userInputROM[position] = '\0';
  2198  000AA2  501A               	movf	_position@EEPROM$F1576^0,w,c
  2199  000AA4  0FB7               	addlw	low _userInputROM
  2200  000AA6  D896               	call	PL58	;call to abstracted procedure
  2201                           
  2202                           ;EEPROM.c: 197:                 passInputROM[position] = '\0';
  2203  000AA8  501A               	movf	_position@EEPROM$F1576^0,w,c
  2204  000AAA  0FAF               	addlw	low _passInputROM
  2205  000AAC  D893               	call	PL58	;call to abstracted procedure
  2206                           
  2207                           ;EEPROM.c: 198:                 userR[position] = '\0';
  2208  000AAE  EC90  F009         	call	PL38	;call to abstracted procedure
  2209  000AB2  6ADF               	clrf	indf2,c
  2210                           
  2211                           ;EEPROM.c: 199:                 passR[position] = '\0';
  2212  000AB4  D893               	call	PL76	;call to abstracted procedure
  2213  000AB6  0E00               	movlw	0
  2214  000AB8  6ADF               	clrf	indf2,c
  2215  000ABA  D7AA               	goto	l8036
  2216  000ABC                     l1126:
  2217                           
  2218                           ;EEPROM.c: 202:                 position = 0;
  2219  000ABC  6A1A               	clrf	_position@EEPROM$F1576^0,c
  2220                           
  2221                           ;EEPROM.c: 203:                 state = 0;
  2222  000ABE  6A19               	clrf	_state@EEPROM$F1577^0,c
  2223                           
  2224                           ;EEPROM.c: 204:                 checkUser = 2;
  2225  000AC0  0E02               	movlw	2
  2226  000AC2  6E18               	movwf	_checkUser^0,c
  2227  000AC4  0C02               	retlw	2
  2228  000AC6                     l8094:
  2229                           
  2230                           ;EEPROM.c: 209:             if(readFromROM() == 0xFF) {
  2231  000AC6  EC26  F00F         	call	_readFromROM	;wreg free
  2232  000ACA  0AFF               	xorlw	255
  2233  000ACC  E103               	bnz	l8098
  2234                           
  2235                           ;EEPROM.c: 210:                 empty = 1;
  2236  000ACE  0E01               	movlw	1
  2237  000AD0  6E13               	movwf	_empty^0,c
  2238                           
  2239                           ;EEPROM.c: 211:                 state = 9;
  2240                           
  2241                           ;EEPROM.c: 212:             }
  2242  000AD2  D08C               	goto	PL88	;call to abstracted procedure
  2243  000AD4                     l8098:
  2244                           
  2245                           ;EEPROM.c: 214:                 if(address < 0xD0) {
  2246  000AD4  0ED0               	movlw	208
  2247  000AD6  601E               	cpfslt	_address^0,c
  2248  000AD8  D003               	goto	l8102
  2249  000ADA                     u10460:
  2250                           
  2251                           ;EEPROM.c: 215:                     address = address + 16;
  2252  000ADA  0E10               	movlw	16
  2253  000ADC  261E               	addwf	_address^0,f,c
  2254                           
  2255                           ;EEPROM.c: 216:                 }
  2256  000ADE  0C10               	retlw	16
  2257  000AE0                     l8102:
  2258                           
  2259                           ;EEPROM.c: 218:                     address = 0x90;
  2260  000AE0  0E90               	movlw	144
  2261  000AE2  6E1E               	movwf	_address^0,c
  2262                           
  2263                           ;EEPROM.c: 219:                     state = 11;
  2264  000AE4  0E0B               	movlw	11
  2265  000AE6  6E19               	movwf	_state@EEPROM$F1577^0,c
  2266  000AE8  0C0B               	retlw	11
  2267  000AEA                     l1133:
  2268                           
  2269                           ;EEPROM.c: 226:             if(EECON1bits.WR == 0) {
  2270  000AEA  B2A6               	btfsc	166,1,c	;volsfr
  2271  000AEC  0012               	return	
  2272                           
  2273                           ;EEPROM.c: 227:                 writeToROM(score);
  2274  000AEE  5015               	movf	_score@EEPROM$F1582^0,w,c
  2275  000AF0  EC42  F00E         	call	_writeToROM
  2276                           
  2277                           ;EEPROM.c: 228:                 address++;
  2278  000AF4  2A1E               	incf	_address^0,f,c
  2279  000AF6  D75A               	goto	l1093
  2280  000AF8                     l8112:
  2281                           
  2282                           ;EEPROM.c: 235:             if(position < 8) {
  2283  000AF8  0E08               	movlw	8
  2284  000AFA  601A               	cpfslt	_position@EEPROM$F1576^0,c
  2285  000AFC  D008               	goto	l1136
  2286                           
  2287                           ;EEPROM.c: 236:                 if(EECON1bits.WR == 0) {
  2288  000AFE  B2A6               	btfsc	166,1,c	;volsfr
  2289  000B00  0C08               	retlw	8
  2290                           
  2291                           ;EEPROM.c: 237:                     writeToROM(user[position]);
  2292  000B02  501A               	movf	_position@EEPROM$F1576^0,w,c
  2293  000B04  0FA3               	addlw	low _user@EEPROM$F1570
  2294  000B06  D862               	call	PL56	;call to abstracted procedure
  2295  000B08  EC42  F00E         	call	_writeToROM
  2296  000B0C  D780               	goto	l8034
  2297  000B0E                     l1136:
  2298                           
  2299                           ;EEPROM.c: 243:                 position = 0;
  2300  000B0E  6A1A               	clrf	_position@EEPROM$F1576^0,c
  2301                           
  2302                           ;EEPROM.c: 244:                 if(empty == 1) {
  2303  000B10  0413               	decf	_empty^0,w,c
  2304  000B12  E104               	bnz	l8126
  2305                           
  2306                           ;EEPROM.c: 245:                     saveScore = 0;
  2307  000B14  6A1B               	clrf	_saveScore^0,c
  2308                           
  2309                           ;EEPROM.c: 246:                     empty = 0;
  2310  000B16  6A13               	clrf	_empty^0,c
  2311                           
  2312                           ;EEPROM.c: 247:                     state = 0;
  2313  000B18  6A19               	clrf	_state@EEPROM$F1577^0,c
  2314                           
  2315                           ;EEPROM.c: 248:                 }
  2316  000B1A  0012               	return	
  2317  000B1C                     l8126:
  2318                           
  2319                           ;EEPROM.c: 250:                     address = address + 7;
  2320  000B1C  0E07               	movlw	7
  2321  000B1E  261E               	addwf	_address^0,f,c
  2322                           
  2323                           ;EEPROM.c: 251:                     state = 12;
  2324  000B20  0E0C               	movlw	12
  2325  000B22  6E19               	movwf	_state@EEPROM$F1577^0,c
  2326  000B24  0C0C               	retlw	12
  2327  000B26                     l8130:
  2328                           
  2329                           ;EEPROM.c: 257:             scoreAux = readFromROM();
  2330  000B26  EC26  F00F         	call	_readFromROM	;wreg free
  2331  000B2A  6E14               	movwf	_scoreAux^0,c
  2332                           
  2333                           ;EEPROM.c: 258:             if(scoreAux < score) {
  2334  000B2C  5015               	movf	_score@EEPROM$F1582^0,w,c
  2335  000B2E  5C14               	subwf	_scoreAux^0,w,c
  2336  000B30  E201               	bc	l8136
  2337                           
  2338                           ;EEPROM.c: 259:                 state = 9;
  2339                           
  2340                           ;EEPROM.c: 260:             }
  2341  000B32  D05C               	goto	PL88	;call to abstracted procedure
  2342  000B34                     l8136:
  2343                           
  2344                           ;EEPROM.c: 262:                 if(address < 0xD0) {
  2345  000B34  0ED0               	movlw	208
  2346  000B36  601E               	cpfslt	_address^0,c
  2347  000B38  D001               	goto	l1144
  2348  000B3A  D7CF               	goto	u10460
  2349  000B3C                     l1144:
  2350                           
  2351                           ;EEPROM.c: 266:                     saveScore = 0;
  2352  000B3C  6A1B               	clrf	_saveScore^0,c
  2353                           
  2354                           ;EEPROM.c: 267:                     state = 0;
  2355  000B3E  6A19               	clrf	_state@EEPROM$F1577^0,c
  2356  000B40  0012               	return	
  2357  000B42                     l1146:
  2358                           
  2359                           ;EEPROM.c: 272:             score = scoreAux;
  2360  000B42  C014  F015         	movff	_scoreAux,_score@EEPROM$F1582
  2361                           
  2362                           ;EEPROM.c: 273:             state--;
  2363  000B46  0619               	decf	_state@EEPROM$F1577^0,f,c
  2364                           
  2365                           ;EEPROM.c: 274:             break;
  2366  000B48  0012               	return	
  2367  000B4A                     l8144:
  2368  000B4A  5019               	movf	_state@EEPROM$F1577^0,w,c
  2369  000B4C  6E62               	movwf	??_motorROM^0,c
  2370  000B4E  6A63               	clrf	(??_motorROM+1)^0,c
  2371                           
  2372                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2373                           ; Switch size 1, requested type "space"
  2374                           ; Number of cases is 1, Range of values is 0 to 0
  2375                           ; switch strategies available:
  2376                           ; Name         Instructions Cycles
  2377                           ; simple_byte            4     3 (average)
  2378                           ;	Chosen strategy is simple_byte
  2379  000B50  5063               	movf	(??_motorROM+1)^0,w,c
  2380  000B52  A4D8               	btfss	status,2,c
  2381  000B54  0012               	return	
  2382                           
  2383                           ; Switch size 1, requested type "space"
  2384                           ; Number of cases is 14, Range of values is 0 to 100
  2385                           ; switch strategies available:
  2386                           ; Name         Instructions Cycles
  2387                           ; simple_byte           43    22 (average)
  2388                           ;	Chosen strategy is simple_byte
  2389  000B56  5062               	movf	??_motorROM^0,w,c
  2390  000B58  E101 D6EE          	bz	l7950
  2391  000B5C  0A01               	xorlw	1	; case 1
  2392  000B5E  E101 D713          	bz	l7980
  2393  000B62  0A03               	xorlw	3	; case 2
  2394  000B64  E101 D725          	bz	l7994
  2395  000B68  0A01               	xorlw	1	; case 3
  2396  000B6A  E101 D748          	bz	l8030
  2397  000B6E  0A07               	xorlw	7	; case 4
  2398  000B70  E101 D750          	bz	l8040
  2399  000B74  0A01               	xorlw	1	; case 5
  2400  000B76  E101 D758          	bz	l8050
  2401  000B7A  0A03               	xorlw	3	; case 6
  2402  000B7C  E101 D779          	bz	l8072
  2403  000B80  0A01               	xorlw	1	; case 7
  2404  000B82  E08C               	bz	l8086
  2405  000B84  0A0F               	xorlw	15	; case 8
  2406  000B86  E09F               	bz	l8094
  2407  000B88  0A01               	xorlw	1	; case 9
  2408  000B8A  E0AF               	bz	l1133
  2409  000B8C  0A03               	xorlw	3	; case 10
  2410  000B8E  E0B4               	bz	l8112
  2411  000B90  0A01               	xorlw	1	; case 11
  2412  000B92  E0C9               	bz	l8130
  2413  000B94  0A07               	xorlw	7	; case 12
  2414  000B96  E0D5               	bz	l1146
  2415  000B98  0A68               	xorlw	104	; case 100
  2416  000B9A  E101 D725          	bz	l1101
  2417  000B9E  0012               	return		;funcret
  2418  000BA0                     __end_of_motorROM:
  2419                           	callstack 0
  2420  000BA0                     PL30:
  2421                           	callstack 27
  2422  000BA0  501D               	movf	_users^0,w,c
  2423  000BA2  6E62               	movwf	??_motorROM^0,c
  2424  000BA4  6A63               	clrf	(??_motorROM+1)^0,c
  2425  000BA6  0EF0               	movlw	240
  2426  000BA8  241E               	addwf	_address^0,w,c
  2427  000BAA  6E5A               	movwf	___awdiv@dividend^0,c
  2428  000BAC  6A5B               	clrf	(___awdiv@dividend+1)^0,c
  2429  000BAE  0EFF               	movlw	255
  2430  000BB0  225B               	addwfc	(___awdiv@dividend+1)^0,f,c
  2431  000BB2  6A5D               	clrf	(___awdiv@divisor+1)^0,c
  2432  000BB4  0E10               	movlw	16
  2433  000BB6  6E5C               	movwf	___awdiv@divisor^0,c
  2434  000BB8  0C10               	retlw	16
  2435  000BBA                     __end_ofPL30:
  2436                           	callstack 0
  2437  000BBA                     PL42:
  2438                           	callstack 27
  2439  000BBA  5062               	movf	??_motorROM^0,w,c
  2440  000BBC  5C5A               	subwf	?___awdiv^0,w,c
  2441  000BBE  505B               	movf	(?___awdiv+1)^0,w,c
  2442  000BC0  0A80               	xorlw	128
  2443  000BC2  6E64               	movwf	(??_motorROM+2)^0,c
  2444  000BC4  5063               	movf	(??_motorROM+1)^0,w,c
  2445  000BC6  0A80               	xorlw	128
  2446  000BC8  5864               	subwfb	(??_motorROM+2)^0,w,c
  2447  000BCA  0012               	return	
  2448  000BCC                     __end_ofPL42:
  2449                           	callstack 0
  2450  000BCC                     PL56:
  2451                           	callstack 27
  2452  000BCC  6ED9               	movwf	fsr2l,c
  2453  000BCE  6ADA               	clrf	fsr2h,c
  2454  000BD0  50DF               	movf	indf2,w,c
  2455  000BD2  0012               	return	
  2456  000BD4                     __end_ofPL56:
  2457                           	callstack 0
  2458  000BD4                     PL58:
  2459                           	callstack 27
  2460  000BD4  6ED9               	movwf	fsr2l,c
  2461  000BD6  6ADA               	clrf	fsr2h,c
  2462  000BD8  6ADF               	clrf	indf2,c
  2463  000BDA  0012               	return	
  2464  000BDC                     __end_ofPL58:
  2465                           	callstack 0
  2466  000BDC                     PL76:
  2467                           	callstack 27
  2468  000BDC  501A               	movf	_position@EEPROM$F1576^0,w,c
  2469  000BDE  0FBF               	addlw	low _passR
  2470  000BE0  6ED9               	movwf	fsr2l,c
  2471  000BE2  6ADA               	clrf	fsr2h,c
  2472  000BE4  0012               	return	
  2473  000BE6                     __end_ofPL76:
  2474                           	callstack 0
  2475  000BE6                     PL86:
  2476                           	callstack 27
  2477  000BE6  0E03               	movlw	3
  2478  000BE8  6E19               	movwf	_state@EEPROM$F1577^0,c
  2479  000BEA  0C03               	retlw	3
  2480  000BEC                     __end_ofPL86:
  2481                           	callstack 0
  2482  000BEC                     PL88:
  2483                           	callstack 27
  2484  000BEC  0E09               	movlw	9
  2485  000BEE  6E19               	movwf	_state@EEPROM$F1577^0,c
  2486  000BF0  0C09               	retlw	9
  2487  000BF2                     __end_ofPL88:
  2488                           	callstack 0
  2489  000BF2                     PL92:
  2490                           	callstack 27
  2491  000BF2  0E07               	movlw	7
  2492  000BF4  6E19               	movwf	_state@EEPROM$F1577^0,c
  2493  000BF6  0C07               	retlw	7
  2494  000BF8                     __end_ofPL92:
  2495                           	callstack 0
  2496  000BF8                     PL96:
  2497                           	callstack 27
  2498  000BF8  0E01               	movlw	1
  2499  000BFA  6E12               	movwf	_done^0,c
  2500  000BFC  0C01               	retlw	1	;funcret
  2501  000BFE                     __end_ofPL96:
  2502                           	callstack 0
  2503                           
  2504 ;; *************** function _writeToROM *****************
  2505 ;; Defined at:
  2506 ;;		line 39 in file "EEPROM.c"
  2507 ;; Parameters:    Size  Location     Type
  2508 ;;  value           1    wreg     unsigned char 
  2509 ;; Auto vars:     Size  Location     Type
  2510 ;;  value           1    5[COMRAM] unsigned char 
  2511 ;; Return value:  Size  Location     Type
  2512 ;;                  1    wreg      void 
  2513 ;; Registers used:
  2514 ;;		wreg, status,2
  2515 ;; Tracked objects:
  2516 ;;		On entry : 0/0
  2517 ;;		On exit  : 0/0
  2518 ;;		Unchanged: 0/0
  2519 ;; Data sizes:     COMRAM   BANK0   BANK1
  2520 ;;      Params:         0       0       0
  2521 ;;      Locals:         1       0       0
  2522 ;;      Temps:          0       0       0
  2523 ;;      Totals:         1       0       0
  2524 ;;Total ram usage:        1 bytes
  2525 ;; Hardware stack levels used: 1
  2526 ;; Hardware stack levels required when called: 2
  2527 ;; This function calls:
  2528 ;;		Nothing
  2529 ;; This function is called by:
  2530 ;;		_motorROM
  2531 ;; This function uses a non-reentrant model
  2532 ;;
  2533                           
  2534                           	psect	text10
  2535  001C84                     __ptext10:
  2536                           	callstack 0
  2537  001C84                     _writeToROM:
  2538                           	callstack 27
  2539                           
  2540                           ;incstack = 0
  2541                           ;writeToROM@value stored from wreg
  2542  001C84  6E5A               	movwf	writeToROM@value^0,c
  2543                           
  2544                           ;EEPROM.c: 40:     EEADR = address;
  2545  001C86  C01E  FFA9         	movff	_address,4009	;volatile
  2546                           
  2547                           ;EEPROM.c: 41:     EEDATA = value;
  2548  001C8A  C05A  FFA8         	movff	writeToROM@value,4008	;volatile
  2549                           
  2550                           ;EEPROM.c: 42:     EECON1bits.EEPGD = 0;
  2551  001C8E  9EA6               	bcf	166,7,c	;volsfr
  2552                           
  2553                           ;EEPROM.c: 43:     EECON1bits.CFGS = 0;
  2554  001C90  9CA6               	bcf	166,6,c	;volsfr
  2555                           
  2556                           ;EEPROM.c: 44:     EECON1bits.WREN = 1;
  2557  001C92  84A6               	bsf	166,2,c	;volsfr
  2558                           
  2559                           ;EEPROM.c: 45:     INTCONbits.GIE = 0;
  2560  001C94  9EF2               	bcf	242,7,c	;volatile
  2561                           
  2562                           ;EEPROM.c: 46:     EECON2 = 0x55;
  2563  001C96  0E55               	movlw	85
  2564  001C98  6EA7               	movwf	167,c	;volsfr
  2565                           
  2566                           ;EEPROM.c: 47:     EECON2 = 0xAA;
  2567  001C9A  0EAA               	movlw	170
  2568  001C9C  6EA7               	movwf	167,c	;volsfr
  2569                           
  2570                           ;EEPROM.c: 48:     EECON1bits.WR = 1;
  2571  001C9E  82A6               	bsf	166,1,c	;volsfr
  2572                           
  2573                           ;EEPROM.c: 49:     INTCONbits.GIE = 1;
  2574  001CA0  8EF2               	bsf	242,7,c	;volatile
  2575                           
  2576                           ;EEPROM.c: 50:     EECON1bits.WREN = 0;
  2577  001CA2  94A6               	bcf	166,2,c	;volsfr
  2578  001CA4  0CAA               	retlw	170	;funcret
  2579  001CA6                     __end_of_writeToROM:
  2580                           	callstack 0
  2581                           
  2582 ;; *************** function ___awdiv *****************
  2583 ;; Defined at:
  2584 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\awdiv.c"
  2585 ;; Parameters:    Size  Location     Type
  2586 ;;  dividend        2    5[COMRAM] int 
  2587 ;;  divisor         2    7[COMRAM] int 
  2588 ;; Auto vars:     Size  Location     Type
  2589 ;;  quotient        2   11[COMRAM] int 
  2590 ;;  sign            1   10[COMRAM] unsigned char 
  2591 ;;  counter         1    9[COMRAM] unsigned char 
  2592 ;; Return value:  Size  Location     Type
  2593 ;;                  2    5[COMRAM] int 
  2594 ;; Registers used:
  2595 ;;		wreg, status,2, status,0
  2596 ;; Tracked objects:
  2597 ;;		On entry : 0/0
  2598 ;;		On exit  : 0/0
  2599 ;;		Unchanged: 0/0
  2600 ;; Data sizes:     COMRAM   BANK0   BANK1
  2601 ;;      Params:         4       0       0
  2602 ;;      Locals:         4       0       0
  2603 ;;      Temps:          0       0       0
  2604 ;;      Totals:         8       0       0
  2605 ;;Total ram usage:        8 bytes
  2606 ;; Hardware stack levels used: 1
  2607 ;; Hardware stack levels required when called: 2
  2608 ;; This function calls:
  2609 ;;		Nothing
  2610 ;; This function is called by:
  2611 ;;		_motorROM
  2612 ;; This function uses a non-reentrant model
  2613 ;;
  2614                           
  2615                           	psect	text11
  2616  00142E                     __ptext11:
  2617                           	callstack 0
  2618  00142E                     ___awdiv:
  2619                           	callstack 27
  2620                           
  2621                           ;incstack = 0
  2622  00142E  6A5F               	clrf	___awdiv@sign^0,c
  2623  001430  AE5D               	btfss	(___awdiv@divisor+1)^0,7,c
  2624  001432  D006               	goto	l4868
  2625  001434  6C5C               	negf	___awdiv@divisor^0,c
  2626  001436  1E5D               	comf	(___awdiv@divisor+1)^0,f,c
  2627  001438  B0D8               	btfsc	status,0,c
  2628  00143A  2A5D               	incf	(___awdiv@divisor+1)^0,f,c
  2629  00143C  0E01               	movlw	1
  2630  00143E  6E5F               	movwf	___awdiv@sign^0,c
  2631  001440                     l4868:
  2632  001440  AE5B               	btfss	(___awdiv@dividend+1)^0,7,c
  2633  001442  D006               	goto	l4874
  2634  001444  6C5A               	negf	___awdiv@dividend^0,c
  2635  001446  1E5B               	comf	(___awdiv@dividend+1)^0,f,c
  2636  001448  B0D8               	btfsc	status,0,c
  2637  00144A  2A5B               	incf	(___awdiv@dividend+1)^0,f,c
  2638  00144C  0E01               	movlw	1
  2639  00144E  1A5F               	xorwf	___awdiv@sign^0,f,c
  2640  001450                     l4874:
  2641  001450  6A60               	clrf	___awdiv@quotient^0,c
  2642  001452  6A61               	clrf	(___awdiv@quotient+1)^0,c
  2643  001454  505C               	movf	___awdiv@divisor^0,w,c
  2644  001456  105D               	iorwf	(___awdiv@divisor+1)^0,w,c
  2645  001458  E01B               	bz	l4896
  2646  00145A  0E01               	movlw	1
  2647  00145C  6E5E               	movwf	___awdiv@counter^0,c
  2648  00145E  D004               	goto	l4882
  2649  001460                     l4880:
  2650  001460  90D8               	bcf	status,0,c
  2651  001462  365C               	rlcf	___awdiv@divisor^0,f,c
  2652  001464  365D               	rlcf	(___awdiv@divisor+1)^0,f,c
  2653  001466  2A5E               	incf	___awdiv@counter^0,f,c
  2654  001468                     l4882:
  2655  001468  AE5D               	btfss	(___awdiv@divisor+1)^0,7,c
  2656  00146A  D7FA               	goto	l4880
  2657  00146C                     u4980:
  2658  00146C  90D8               	bcf	status,0,c
  2659  00146E  3660               	rlcf	___awdiv@quotient^0,f,c
  2660  001470  3661               	rlcf	(___awdiv@quotient+1)^0,f,c
  2661  001472  505C               	movf	___awdiv@divisor^0,w,c
  2662  001474  5C5A               	subwf	___awdiv@dividend^0,w,c
  2663  001476  505D               	movf	(___awdiv@divisor+1)^0,w,c
  2664  001478  585B               	subwfb	(___awdiv@dividend+1)^0,w,c
  2665  00147A  E305               	bnc	l4892
  2666  00147C  505C               	movf	___awdiv@divisor^0,w,c
  2667  00147E  5E5A               	subwf	___awdiv@dividend^0,f,c
  2668  001480  505D               	movf	(___awdiv@divisor+1)^0,w,c
  2669  001482  5A5B               	subwfb	(___awdiv@dividend+1)^0,f,c
  2670  001484  8060               	bsf	___awdiv@quotient^0,0,c
  2671  001486                     l4892:
  2672  001486  90D8               	bcf	status,0,c
  2673  001488  325D               	rrcf	(___awdiv@divisor+1)^0,f,c
  2674  00148A  325C               	rrcf	___awdiv@divisor^0,f,c
  2675  00148C  2E5E               	decfsz	___awdiv@counter^0,f,c
  2676  00148E  D7EE               	goto	u4980
  2677  001490                     l4896:
  2678  001490  505F               	movf	___awdiv@sign^0,w,c
  2679  001492  E004               	bz	l4900
  2680  001494  6C60               	negf	___awdiv@quotient^0,c
  2681  001496  1E61               	comf	(___awdiv@quotient+1)^0,f,c
  2682  001498  B0D8               	btfsc	status,0,c
  2683  00149A  2A61               	incf	(___awdiv@quotient+1)^0,f,c
  2684  00149C                     l4900:
  2685  00149C  C060  F05A         	movff	___awdiv@quotient,?___awdiv
  2686  0014A0  C061  F05B         	movff	___awdiv@quotient+1,?___awdiv+1
  2687  0014A4  0012               	return		;funcret
  2688  0014A6                     __end_of___awdiv:
  2689                           	callstack 0
  2690                           
  2691 ;; *************** function _motorLogic *****************
  2692 ;; Defined at:
  2693 ;;		line 142 in file "Logic.c"
  2694 ;; Parameters:    Size  Location     Type
  2695 ;;		None
  2696 ;; Auto vars:     Size  Location     Type
  2697 ;;  aux             1    2[BANK0 ] unsigned char 
  2698 ;;  aux             1    0[BANK0 ] unsigned char 
  2699 ;;  x               1    1[BANK0 ] unsigned char 
  2700 ;; Return value:  Size  Location     Type
  2701 ;;                  1    wreg      void 
  2702 ;; Registers used:
  2703 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2704 ;; Tracked objects:
  2705 ;;		On entry : 0/0
  2706 ;;		On exit  : 0/0
  2707 ;;		Unchanged: 0/0
  2708 ;; Data sizes:     COMRAM   BANK0   BANK1
  2709 ;;      Params:         0       0       0
  2710 ;;      Locals:         0       3       0
  2711 ;;      Temps:          5       0       0
  2712 ;;      Totals:         5       3       0
  2713 ;;Total ram usage:        8 bytes
  2714 ;; Hardware stack levels used: 1
  2715 ;; Hardware stack levels required when called: 7
  2716 ;; This function calls:
  2717 ;;		_KeDisableSMS
  2718 ;;		_KeEnableSMS
  2719 ;;		_LcClear
  2720 ;;		_LcCursorOff
  2721 ;;		_LcCursorOn
  2722 ;;		_LcGotoXY
  2723 ;;		_LcPrintLine
  2724 ;;		_LcPrintSecondLine
  2725 ;;		_LcPutChar
  2726 ;;		_LoEndGame
  2727 ;;		_SiGetChar
  2728 ;;		_SiHasReceived
  2729 ;;		_SiIsAvailable
  2730 ;;		_SiSendChar
  2731 ;;		_TiGetTics
  2732 ;;		_TiResetTics
  2733 ;;		_TimEnableTime
  2734 ;;		_TimGetEndTime
  2735 ;;		_TimModifyTime
  2736 ;;		_TimResetTime
  2737 ;;		___lbdiv
  2738 ;;		___lbmod
  2739 ;;		_anotherScore
  2740 ;;		_compare
  2741 ;;		_doneWritingROM
  2742 ;;		_getFlag
  2743 ;;		_getNumUsers
  2744 ;;		_login
  2745 ;;		_readFromROM
  2746 ;;		_readScore
  2747 ;;		_readUser
  2748 ;;		_setLine
  2749 ;;		_signup
  2750 ;;		_startReadingScore
  2751 ;;		_startReadingUser
  2752 ;;		_startWriteUser
  2753 ;;		_storePass
  2754 ;;		_storeScore
  2755 ;;		_storeUser
  2756 ;; This function is called by:
  2757 ;;		_main
  2758 ;; This function uses a non-reentrant model
  2759 ;;
  2760                           
  2761                           	psect	text12
  2762  000036                     __ptext12:
  2763                           	callstack 0
  2764  000036                     _motorLogic:
  2765                           	callstack 23
  2766                           
  2767                           ;Logic.c: 143:     switch(state) {
  2768                           
  2769                           ;incstack = 0
  2770  000036  D3A4               	goto	l7942
  2771  000038                     l7334:
  2772                           
  2773                           ;Logic.c: 146:             if(LcPrintLine("1.LOGIN\n") == 1) {state++; LcCursorOff();}
  2774  000038  0ED6               	movlw	low STR_1
  2775  00003A  6E69               	movwf	LcPrintLine@c^0,c
  2776  00003C  0E1F               	movlw	high STR_1
  2777  00003E  6E6A               	movwf	(LcPrintLine@c+1)^0,c
  2778  000040  ECF9  F006         	call	_LcPrintLine	;wreg free
  2779  000044  06E8               	decf	wreg,f,c
  2780  000046  A4D8               	btfss	status,2,c
  2781  000048  0012               	return	
  2782  00004A  2A27               	incf	_state@Logic$F1441^0,f,c
  2783  00004C  EF55  F00F         	goto	_LcCursorOff	;wreg free
  2784  000050                     l7340:
  2785                           
  2786                           ;Logic.c: 149:             if(LcPrintLine("2.REGISTER") == 1) {state++; writing = 0;}
  2787  000050  0EB8               	movlw	low STR_2
  2788  000052  6E69               	movwf	LcPrintLine@c^0,c
  2789  000054  0E1F               	movlw	high STR_2
  2790  000056  6E6A               	movwf	(LcPrintLine@c+1)^0,c
  2791  000058  ECF9  F006         	call	_LcPrintLine	;wreg free
  2792  00005C  06E8               	decf	wreg,f,c
  2793  00005E  A4D8               	btfss	status,2,c
  2794  000060  0012               	return	
  2795  000062  2A27               	incf	_state@Logic$F1441^0,f,c
  2796  000064                     l7344:
  2797  000064  6A25               	clrf	_writing^0,c
  2798  000066  0012               	return	
  2799  000068                     l7346:
  2800                           
  2801                           ;Logic.c: 152:             if (key == '2' || key == '1') {
  2802  000068  0E32               	movlw	50
  2803  00006A  1828               	xorwf	_key^0,w,c
  2804  00006C  E003               	bz	u9220
  2805  00006E  0E31               	movlw	49
  2806  000070  1828               	xorwf	_key^0,w,c
  2807  000072  E108               	bnz	l7358
  2808  000074                     u9220:
  2809                           
  2810                           ;Logic.c: 153:                 state++;
  2811  000074  2A27               	incf	_state@Logic$F1441^0,f,c
  2812                           
  2813                           ;Logic.c: 154:                 gameStarted = key - '0' + 1;
  2814  000076  5028               	movf	_key^0,w,c
  2815  000078  0FD1               	addlw	209
  2816  00007A  6E29               	movwf	_gameStarted^0,c
  2817                           
  2818                           ;Logic.c: 155:                 LcClear();
  2819  00007C  EC30  F00E         	call	_LcClear	;wreg free
  2820                           
  2821                           ;Logic.c: 156:                 LcCursorOn();
  2822  000080  EC50  F00F         	call	_LcCursorOn	;wreg free
  2823  000084                     l7358:
  2824                           
  2825                           ;Logic.c: 170:             key = '\0';
  2826  000084  6A28               	clrf	_key^0,c
  2827                           
  2828                           ;Logic.c: 172:             break;
  2829  000086  0012               	return	
  2830  000088                     l7360:
  2831                           
  2832                           ;Logic.c: 174:             if(LcPrintLine("USER:\n") == 1) state++;
  2833  000088  0EF7               	movlw	low STR_3
  2834  00008A  6E69               	movwf	LcPrintLine@c^0,c
  2835  00008C  0E1F               	movlw	high STR_3
  2836  00008E  6E6A               	movwf	(LcPrintLine@c+1)^0,c
  2837  000090  ECF9  F006         	call	_LcPrintLine	;wreg free
  2838  000094  06E8               	decf	wreg,f,c
  2839  000096  A4D8               	btfss	status,2,c
  2840  000098  0012               	return	
  2841  00009A                     u9230:
  2842  00009A  2A27               	incf	_state@Logic$F1441^0,f,c
  2843  00009C  0012               	return	
  2844  00009E                     l7364:
  2845                           
  2846                           ;Logic.c: 177:             if(LcPrintLine("PSWD:\n") == 1) {state++; LcGotoXY(6, 0); KeE
      +                          nableSMS(); position = 0;}
  2847  00009E  0EF0               	movlw	low STR_4
  2848  0000A0  6E69               	movwf	LcPrintLine@c^0,c
  2849  0000A2  0E1F               	movlw	high STR_4
  2850  0000A4  6E6A               	movwf	(LcPrintLine@c+1)^0,c
  2851  0000A6  ECF9  F006         	call	_LcPrintLine	;wreg free
  2852  0000AA  06E8               	decf	wreg,f,c
  2853  0000AC  A4D8               	btfss	status,2,c
  2854  0000AE  0012               	return	
  2855  0000B0  2A27               	incf	_state@Logic$F1441^0,f,c
  2856  0000B2  0E00               	movlw	0
  2857  0000B4  6E62               	movwf	LcGotoXY@Row^0,c
  2858  0000B6  0E06               	movlw	6
  2859  0000B8  EC43  F00D         	call	_LcGotoXY
  2860  0000BC  EC02  F000         	call	_KeEnableSMS	;wreg free
  2861  0000C0                     l7372:
  2862  0000C0  6A26               	clrf	_position^0,c
  2863  0000C2  0012               	return	
  2864  0000C4                     l7374:
  2865                           
  2866                           ;Logic.c: 180:             if(position >= 8) {
  2867  0000C4  0E07               	movlw	7
  2868  0000C6  6426               	cpfsgt	_position^0,c
  2869  0000C8  D002               	goto	l7378
  2870                           
  2871                           ;Logic.c: 181:                 key = '#';
  2872  0000CA  0E23               	movlw	35
  2873  0000CC  6E28               	movwf	_key^0,c
  2874  0000CE                     l7378:
  2875                           
  2876                           ;Logic.c: 183:             if(key == '#') {
  2877  0000CE  0E23               	movlw	35
  2878  0000D0  1828               	xorwf	_key^0,w,c
  2879  0000D2  A4D8               	btfss	status,2,c
  2880  0000D4  0012               	return	
  2881                           
  2882                           ;Logic.c: 184:                 key = '\0';
  2883  0000D6  6A28               	clrf	_key^0,c
  2884                           
  2885                           ;Logic.c: 185:                 position = 0;
  2886  0000D8  6A26               	clrf	_position^0,c
  2887                           
  2888                           ;Logic.c: 186:                 if(writing == 0) {
  2889  0000DA  5025               	movf	_writing^0,w,c
  2890  0000DC  E106               	bnz	l7388
  2891                           
  2892                           ;Logic.c: 187:                     writing = 1;
  2893  0000DE  0E01               	movlw	1
  2894  0000E0  6E25               	movwf	_writing^0,c
  2895                           
  2896                           ;Logic.c: 188:                     LcGotoXY(6,1);
  2897  0000E2  6E62               	movwf	LcGotoXY@Row^0,c
  2898  0000E4  0E06               	movlw	6
  2899  0000E6  EF43  F00D         	goto	_LcGotoXY
  2900  0000EA                     l7388:
  2901                           
  2902                           ;Logic.c: 191:                     LcClear();
  2903  0000EA  EC30  F00E         	call	_LcClear	;wreg free
  2904                           
  2905                           ;Logic.c: 193:                     menuWrite = 0;
  2906  0000EE  0E06               	movlw	6
  2907  0000F0  6E24               	movwf	_menuPos^0,c
  2908                           
  2909                           ;Logic.c: 194:                     KeDisableSMS();
  2910  0000F2  EC5A  F00F         	call	_KeDisableSMS	;wreg free
  2911                           
  2912                           ;Logic.c: 195:                     if(gameStarted == 3) {
  2913  0000F6  0E03               	movlw	3
  2914  0000F8  1829               	xorwf	_gameStarted^0,w,c
  2915  0000FA  E103               	bnz	l7398
  2916                           
  2917                           ;Logic.c: 196:                         state = 86;
  2918  0000FC  0E56               	movlw	86
  2919  0000FE  6E27               	movwf	_state@Logic$F1441^0,c
  2920                           
  2921                           ;Logic.c: 197:                     }
  2922  000100  D7B1               	goto	l7344
  2923  000102                     l7398:
  2924                           
  2925                           ;Logic.c: 200:                         state = 203;
  2926  000102  0ECB               	movlw	203
  2927  000104  6E27               	movwf	_state@Logic$F1441^0,c
  2928                           
  2929                           ;Logic.c: 201:                         position = 0;
  2930  000106  6A26               	clrf	_position^0,c
  2931                           
  2932                           ;Logic.c: 202:                         LcCursorOff();
  2933  000108  EC55  F00F         	call	_LcCursorOff	;wreg free
  2934                           
  2935                           ;Logic.c: 203:                         gameStarted = 2;
  2936  00010C  0E02               	movlw	2
  2937  00010E  6E29               	movwf	_gameStarted^0,c
  2938  000110  D7A9               	goto	l7344
  2939  000112                     l7408:
  2940                           
  2941                           ;Logic.c: 212:             if(signup(user) != 0) {
  2942  000112  0E4C               	movlw	low _user
  2943  000114  6E5A               	movwf	signup@userInput^0,c
  2944  000116  EC48  F00C         	call	_signup	;wreg free
  2945  00011A  0900               	iorlw	0
  2946  00011C  B4D8               	btfsc	status,2,c
  2947  00011E  0012               	return	
  2948                           
  2949                           ;Logic.c: 213:                 flag = getFlag();
  2950  000120  EC72  F00F         	call	_getFlag	;wreg free
  2951  000124  6E22               	movwf	_flag@Logic$F1451^0,c
  2952                           
  2953                           ;Logic.c: 214:                 if (flag == 1){
  2954  000126  0422               	decf	_flag@Logic$F1451^0,w,c
  2955  000128  E102               	bnz	l7416
  2956                           
  2957                           ;Logic.c: 215:                     state = 100;}
  2958  00012A  0E64               	movlw	100
  2959  00012C  6E27               	movwf	_state@Logic$F1441^0,c
  2960  00012E                     l7416:
  2961                           
  2962                           ;Logic.c: 216:                 if (flag == 2) {
  2963  00012E  0E02               	movlw	2
  2964  000130  1822               	xorwf	_flag@Logic$F1451^0,w,c
  2965  000132  A4D8               	btfss	status,2,c
  2966  000134  0012               	return	
  2967                           
  2968                           ;Logic.c: 217:                     startWriteUser();
  2969  000136  EC62  F00F         	call	_startWriteUser	;wreg free
  2970                           
  2971                           ;Logic.c: 218:                     state = 87;}
  2972  00013A  0E57               	movlw	87
  2973  00013C  6E27               	movwf	_state@Logic$F1441^0,c
  2974  00013E  0C57               	retlw	87
  2975  000140                     l7422:
  2976                           
  2977                           ;Logic.c: 222:             if(doneWritingROM() == 1) {
  2978  000140  EC74  F00F         	call	_doneWritingROM	;wreg free
  2979  000144  06E8               	decf	wreg,f,c
  2980  000146  A4D8               	btfss	status,2,c
  2981  000148  0012               	return	
  2982                           
  2983                           ;Logic.c: 223:                 state = 100;
  2984  00014A  0E64               	movlw	100
  2985  00014C  6E27               	movwf	_state@Logic$F1441^0,c
  2986  00014E  D7B8               	goto	l7372
  2987  000150                     l7428:
  2988                           
  2989                           ;Logic.c: 230:             if (login(user, pass) != 0) {
  2990  000150  0E4C               	movlw	low _user
  2991  000152  6E5A               	movwf	login@userInput^0,c
  2992  000154  0ED7               	movlw	low _pass
  2993  000156  6E5B               	movwf	login@passInput^0,c
  2994  000158  EC6A  F00C         	call	_login	;wreg free
  2995  00015C  0900               	iorlw	0
  2996  00015E  B4D8               	btfsc	status,2,c
  2997  000160  0012               	return	
  2998                           
  2999                           ;Logic.c: 231:                 flag = getFlag();
  3000  000162  EC72  F00F         	call	_getFlag	;wreg free
  3001  000166  6E22               	movwf	_flag@Logic$F1451^0,c
  3002                           
  3003                           ;Logic.c: 232:                 if(flag == 1) {
  3004  000168  0422               	decf	_flag@Logic$F1451^0,w,c
  3005  00016A  E102               	bnz	l7438
  3006                           
  3007                           ;Logic.c: 233:                     state = 6;
  3008  00016C  0E06               	movlw	6
  3009                           
  3010                           ;Logic.c: 234:                     gameStarted = 0;
  3011                           
  3012                           ;Logic.c: 235:                 }
  3013  00016E  D3E0               	goto	PL98	;call to abstracted procedure
  3014  000170                     l7438:
  3015  000170  0E02               	movlw	2
  3016  000172  1822               	xorwf	_flag@Logic$F1451^0,w,c
  3017  000174  A4D8               	btfss	status,2,c
  3018  000176  0012               	return	
  3019                           
  3020                           ;Logic.c: 237:                     state = 100;
  3021  000178  0E64               	movlw	100
  3022  00017A  6E27               	movwf	_state@Logic$F1441^0,c
  3023  00017C  0C64               	retlw	100
  3024  00017E                     l7442:
  3025                           
  3026                           ;Logic.c: 242:             if(position < 8) {
  3027  00017E  0E08               	movlw	8
  3028  000180  6026               	cpfslt	_position^0,c
  3029  000182  D006               	goto	l844
  3030                           
  3031                           ;Logic.c: 243:                 user[position] = '\0';
  3032  000184  DB9C               	call	PL18	;call to abstracted procedure
  3033                           
  3034                           ;Logic.c: 244:                 pass[position] = '\0';
  3035                           
  3036                           ;Logic.c: 245:                 storeUser('\0', position);
  3037  000186  DBAD               	call	PL36	;call to abstracted procedure
  3038  000188  ECF9  F00E         	call	_storeUser
  3039  00018C                     l7448:
  3040                           
  3041                           ;Logic.c: 246:                 position++;
  3042  00018C  2A26               	incf	_position^0,f,c
  3043                           
  3044                           ;Logic.c: 247:             }
  3045  00018E  0012               	return	
  3046  000190                     l844:
  3047                           
  3048                           ;Logic.c: 249:                 position = 0;
  3049  000190  6A26               	clrf	_position^0,c
  3050                           
  3051                           ;Logic.c: 250:                 if(gameStarted == 2) {
  3052  000192  0E02               	movlw	2
  3053  000194  1829               	xorwf	_gameStarted^0,w,c
  3054  000196  E105               	bnz	l7456
  3055                           
  3056                           ;Logic.c: 251:                     if(flag == 1) {
  3057  000198  0422               	decf	_flag@Logic$F1451^0,w,c
  3058  00019A  E101               	bnz	l847
  3059                           
  3060                           ;Logic.c: 252:                         state = 3;
  3061                           
  3062                           ;Logic.c: 253:                     }
  3063  00019C  D3C6               	goto	PL94	;call to abstracted procedure
  3064  00019E                     l847:
  3065                           
  3066                           ;Logic.c: 255:                         state = 0;
  3067  00019E  6A27               	clrf	_state@Logic$F1441^0,c
  3068  0001A0  0012               	return	
  3069  0001A2                     l7456:
  3070  0001A2  0E03               	movlw	3
  3071  0001A4  1829               	xorwf	_gameStarted^0,w,c
  3072  0001A6  A4D8               	btfss	status,2,c
  3073  0001A8  0012               	return	
  3074                           
  3075                           ;Logic.c: 259:                     if(flag == 1) {
  3076  0001AA  0422               	decf	_flag@Logic$F1451^0,w,c
  3077  0001AC  E0F8               	bz	l847
  3078                           
  3079                           ;Logic.c: 263:                         gameStarted = 2;
  3080  0001AE  0E02               	movlw	2
  3081  0001B0  6E29               	movwf	_gameStarted^0,c
  3082                           
  3083                           ;Logic.c: 264:                         state = 3;
  3084  0001B2  D3BB               	goto	PL94	;call to abstracted procedure
  3085  0001B4                     l7464:
  3086                           
  3087                           ;Logic.c: 271:             if(LcPrintLine("1.PLAY A GAME\n") == 1) {state++;}
  3088  0001B4  0E80               	movlw	low STR_5
  3089  0001B6  6E69               	movwf	LcPrintLine@c^0,c
  3090  0001B8  0E1F               	movlw	high STR_5
  3091  0001BA  6E6A               	movwf	(LcPrintLine@c+1)^0,c
  3092  0001BC  ECF9  F006         	call	_LcPrintLine	;wreg free
  3093  0001C0                     L8:
  3094  0001C0  06E8               	decf	wreg,f,c
  3095  0001C2  E101 D76A          	bz	u9230
  3096  0001C6  0012               	return	
  3097  0001C8                     l7468:
  3098                           
  3099                           ;Logic.c: 274:             if(LcPrintLine("2.MODIFY TIME\n") == 1) {if(menuPos == 7) {st
      +                          ate++;} else {state = 11;}}
  3100  0001C8  0E8F               	movlw	low STR_6
  3101  0001CA  6E69               	movwf	LcPrintLine@c^0,c
  3102  0001CC  0E1F               	movlw	high STR_6
  3103  0001CE  6E6A               	movwf	(LcPrintLine@c+1)^0,c
  3104  0001D0  ECF9  F006         	call	_LcPrintLine	;wreg free
  3105  0001D4  06E8               	decf	wreg,f,c
  3106  0001D6  A4D8               	btfss	status,2,c
  3107  0001D8  0012               	return	
  3108  0001DA  0E07               	movlw	7
  3109  0001DC  1824               	xorwf	_menuPos^0,w,c
  3110  0001DE  E101 D75C          	bz	u9230
  3111  0001E2                     l7474:
  3112  0001E2  0E0B               	movlw	11
  3113  0001E4  6E27               	movwf	_state@Logic$F1441^0,c
  3114  0001E6  0C0B               	retlw	11
  3115  0001E8                     l7476:
  3116                           
  3117                           ;Logic.c: 277:             if(menuPos == 7 || menuPos == 16) {
  3118  0001E8  0E07               	movlw	7
  3119  0001EA  1824               	xorwf	_menuPos^0,w,c
  3120  0001EC  E003               	bz	u9450
  3121  0001EE  0E10               	movlw	16
  3122  0001F0  1824               	xorwf	_menuPos^0,w,c
  3123  0001F2  E109               	bnz	l7486
  3124  0001F4                     u9450:
  3125                           
  3126                           ;Logic.c: 278:                 if (key != '#') {
  3127  0001F4  0E23               	movlw	35
  3128  0001F6  1828               	xorwf	_key^0,w,c
  3129  0001F8  E0F4               	bz	l7474
  3130                           
  3131                           ;Logic.c: 279:                     LcPrintLine("3.SHOW GENERAL TOP 5 SCORES \n"); }
  3132  0001FA  0E3F               	movlw	low STR_7
  3133  0001FC  6E69               	movwf	LcPrintLine@c^0,c
  3134  0001FE  0E1F               	movlw	high STR_7
  3135  000200  6E6A               	movwf	(LcPrintLine@c+1)^0,c
  3136  000202  EFF9  F006         	goto	_LcPrintLine	;wreg free
  3137  000206                     l7486:
  3138                           
  3139                           ;Logic.c: 284:                 LcGotoXY(0,1);
  3140  000206  DB89               	call	PL68	;call to abstracted procedure
  3141  000208  EC43  F00D         	call	_LcGotoXY
  3142  00020C  D746               	goto	u9230
  3143  00020E                     l7490:
  3144                           
  3145                           ;Logic.c: 289:             if(LcPrintLine("4.LOGOUT\n") == 1) {
  3146  00020E  0EC3               	movlw	low STR_8
  3147  000210  6E69               	movwf	LcPrintLine@c^0,c
  3148  000212  0E1F               	movlw	high STR_8
  3149  000214  6E6A               	movwf	(LcPrintLine@c+1)^0,c
  3150  000216  ECF9  F006         	call	_LcPrintLine	;wreg free
  3151  00021A  06E8               	decf	wreg,f,c
  3152  00021C  A4D8               	btfss	status,2,c
  3153  00021E  0012               	return	
  3154                           
  3155                           ;Logic.c: 290:                 if(menuPos == 9) {state++;}
  3156  000220  0E09               	movlw	9
  3157  000222  1824               	xorwf	_menuPos^0,w,c
  3158  000224  E101 D739          	bz	u9230
  3159  000228  0E00               	movlw	0
  3160  00022A  6E62               	movwf	LcGotoXY@Row^0,c
  3161  00022C  EC43  F00D         	call	_LcGotoXY
  3162  000230  0E10               	movlw	16
  3163  000232  6E24               	movwf	_menuPos^0,c
  3164  000234  0627               	decf	_state@Logic$F1441^0,f,c
  3165  000236  0C10               	retlw	16
  3166  000238                     l7502:
  3167                           
  3168                           ;Logic.c: 295:             if(LcPrintLine("7.SHOW ALL USERS\n") == 1) {
  3169  000238  0E5D               	movlw	low STR_9
  3170  00023A  6E69               	movwf	LcPrintLine@c^0,c
  3171  00023C  0E1F               	movlw	high STR_9
  3172  00023E  6E6A               	movwf	(LcPrintLine@c+1)^0,c
  3173  000240  ECF9  F006         	call	_LcPrintLine	;wreg free
  3174  000244  D7BD               	goto	L8
  3175  000246                     l7506:
  3176                           
  3177                           ;Logic.c: 299:             if(key == '#') {
  3178  000246  0E23               	movlw	35
  3179  000248  1828               	xorwf	_key^0,w,c
  3180  00024A  A4D8               	btfss	status,2,c
  3181  00024C  0012               	return	
  3182                           
  3183                           ;Logic.c: 300:                 key = '\0';
  3184  00024E  6A28               	clrf	_key^0,c
  3185                           
  3186                           ;Logic.c: 301:                 LcClear();
  3187  000250  EC30  F00E         	call	_LcClear	;wreg free
  3188                           
  3189                           ;Logic.c: 302:                 if(menuPos == 6) {
  3190  000254  0E06               	movlw	6
  3191  000256  1824               	xorwf	_menuPos^0,w,c
  3192  000258  E101 D71F          	bz	u9230
  3193  00025C  0E07               	movlw	7
  3194  00025E  1824               	xorwf	_menuPos^0,w,c
  3195  000260  E104               	bnz	l7522
  3196                           
  3197                           ;Logic.c: 306:                     position = 0;
  3198  000262  6A26               	clrf	_position^0,c
  3199                           
  3200                           ;Logic.c: 307:                     state = 26;
  3201  000264  0E1A               	movlw	26
  3202  000266  6E27               	movwf	_state@Logic$F1441^0,c
  3203                           
  3204                           ;Logic.c: 308:                 }
  3205  000268  0C1A               	retlw	26
  3206  00026A                     l7522:
  3207  00026A  0E08               	movlw	8
  3208  00026C  1824               	xorwf	_menuPos^0,w,c
  3209  00026E  E003               	bz	u9540
  3210  000270  0E10               	movlw	16
  3211  000272  1824               	xorwf	_menuPos^0,w,c
  3212  000274  E104               	bnz	l7528
  3213  000276                     u9540:
  3214                           
  3215                           ;Logic.c: 311:                     position = 0;
  3216  000276  6A26               	clrf	_position^0,c
  3217                           
  3218                           ;Logic.c: 312:                     state = 40;
  3219  000278  0E28               	movlw	40
  3220  00027A  6E27               	movwf	_state@Logic$F1441^0,c
  3221                           
  3222                           ;Logic.c: 313:                 }
  3223  00027C  0C28               	retlw	40
  3224  00027E                     l7528:
  3225  00027E  0E09               	movlw	9
  3226  000280  1824               	xorwf	_menuPos^0,w,c
  3227  000282  E103               	bnz	l7532
  3228                           
  3229                           ;Logic.c: 315:                     state = 29;
  3230  000284  0E1D               	movlw	29
  3231  000286  6E27               	movwf	_state@Logic$F1441^0,c
  3232                           
  3233                           ;Logic.c: 316:                 }
  3234  000288  0C1D               	retlw	29
  3235  00028A                     l7532:
  3236  00028A  0E0A               	movlw	10
  3237  00028C  1824               	xorwf	_menuPos^0,w,c
  3238  00028E  E0F3               	bz	u9540
  3239  000290  0012               	return	
  3240  000292                     l7538:
  3241                           
  3242                           ;Logic.c: 326:             if(LcPrintLine("TIME REMAINING:\n") == 1) {
  3243  000292  0E6F               	movlw	low STR_10
  3244  000294  6E69               	movwf	LcPrintLine@c^0,c
  3245  000296  0E1F               	movlw	high STR_10
  3246  000298  6E6A               	movwf	(LcPrintLine@c+1)^0,c
  3247  00029A  ECF9  F006         	call	_LcPrintLine	;wreg free
  3248  00029E  06E8               	decf	wreg,f,c
  3249  0002A0  A4D8               	btfss	status,2,c
  3250  0002A2  0012               	return	
  3251  0002A4                     u9570:
  3252                           
  3253                           ;Logic.c: 327:                 position = 0;
  3254  0002A4  6A26               	clrf	_position^0,c
  3255  0002A6  D6F9               	goto	u9230
  3256  0002A8                     l7544:
  3257                           
  3258                           ;Logic.c: 332:             if(position < 8) {
  3259  0002A8  0E08               	movlw	8
  3260  0002AA  6026               	cpfslt	_position^0,c
  3261  0002AC  D018               	goto	l7562
  3262                           
  3263                           ;Logic.c: 333:                 if(SiIsAvailable()) {
  3264  0002AE  EC6B  F00F         	call	_SiIsAvailable	;wreg free
  3265  0002B2  0900               	iorlw	0
  3266  0002B4  B4D8               	btfsc	status,2,c
  3267  0002B6  0012               	return	
  3268                           
  3269                           ;Logic.c: 334:                     SiSendChar(user[position]);
  3270  0002B8  DB02               	call	PL18	;call to abstracted procedure
  3271  0002BA  50DF               	movf	indf2,w,c
  3272  0002BC  EC5E  F00F         	call	_SiSendChar
  3273                           
  3274                           ;Logic.c: 335:                     if(user[position] == '\0') {
  3275  0002C0  DAFE               	call	PL18	;call to abstracted procedure
  3276  0002C2  50DF               	movf	indf2,w,c
  3277  0002C4  E001 D762          	bnz	l7448
  3278                           
  3279                           ;Logic.c: 336:                         position = 0;
  3280  0002C8  6A26               	clrf	_position^0,c
  3281                           
  3282                           ;Logic.c: 337:                         if(SiHasReceived()) {
  3283  0002CA  EC68  F00F         	call	_SiHasReceived	;wreg free
  3284  0002CE  0900               	iorlw	0
  3285  0002D0  E003               	bz	l7558
  3286                           
  3287                           ;Logic.c: 338:                             state = SiGetChar();
  3288  0002D2  EC76  F00F         	call	_SiGetChar	;wreg free
  3289  0002D6  6E27               	movwf	_state@Logic$F1441^0,c
  3290  0002D8                     l7558:
  3291                           
  3292                           ;Logic.c: 340:                         state = 14;
  3293  0002D8  0E0E               	movlw	14
  3294  0002DA  6E27               	movwf	_state@Logic$F1441^0,c
  3295  0002DC  D757               	goto	l7448
  3296  0002DE                     l7562:
  3297                           
  3298                           ;Logic.c: 346:                 if(SiIsAvailable()) {
  3299  0002DE  EC6B  F00F         	call	_SiIsAvailable	;wreg free
  3300  0002E2  0900               	iorlw	0
  3301  0002E4  B4D8               	btfsc	status,2,c
  3302  0002E6  0012               	return	
  3303                           
  3304                           ;Logic.c: 347:                     SiSendChar('\0');
  3305  0002E8  0E00               	movlw	0
  3306  0002EA  EC5E  F00F         	call	_SiSendChar
  3307                           
  3308                           ;Logic.c: 348:                     position = 0;
  3309  0002EE  6A26               	clrf	_position^0,c
  3310                           
  3311                           ;Logic.c: 349:                     if(SiHasReceived()) {
  3312  0002F0  EC68  F00F         	call	_SiHasReceived	;wreg free
  3313  0002F4  0900               	iorlw	0
  3314  0002F6  E003               	bz	l7572
  3315                           
  3316                           ;Logic.c: 350:                         state = SiGetChar();
  3317  0002F8  EC76  F00F         	call	_SiGetChar	;wreg free
  3318  0002FC  6E27               	movwf	_state@Logic$F1441^0,c
  3319  0002FE                     l7572:
  3320                           
  3321                           ;Logic.c: 352:                     state = 14;
  3322  0002FE  0E0E               	movlw	14
  3323  000300  6E27               	movwf	_state@Logic$F1441^0,c
  3324  000302  0C0E               	retlw	14
  3325  000304                     l7574:
  3326                           
  3327                           ;Logic.c: 357:             if(SiHasReceived()) {
  3328  000304  EC68  F00F         	call	_SiHasReceived	;wreg free
  3329  000308  0900               	iorlw	0
  3330  00030A  B4D8               	btfsc	status,2,c
  3331  00030C  0012               	return	
  3332                           
  3333                           ;Logic.c: 358:                 if(SiGetChar() == 'K') {
  3334  00030E  EC76  F00F         	call	_SiGetChar	;wreg free
  3335  000312  0A4B               	xorlw	75
  3336  000314  A4D8               	btfss	status,2,c
  3337  000316  0012               	return	
  3338                           
  3339                           ;Logic.c: 359:                     TimEnableTime();
  3340  000318  EC8F  F00E         	call	_TimEnableTime	;wreg free
  3341                           
  3342                           ;Logic.c: 360:                     gameStarted = 1;
  3343  00031C  0E01               	movlw	1
  3344  00031E  6E29               	movwf	_gameStarted^0,c
  3345  000320  D6BC               	goto	u9230
  3346  000322                     l7584:
  3347                           
  3348                           ;Logic.c: 366:             if(key == '*') {
  3349  000322  0E2A               	movlw	42
  3350  000324  1828               	xorwf	_key^0,w,c
  3351  000326  E103               	bnz	l7590
  3352                           
  3353                           ;Logic.c: 367:                 key = '\0';
  3354  000328  6A28               	clrf	_key^0,c
  3355                           
  3356                           ;Logic.c: 368:                 LoEndGame();
  3357  00032A  EF9C  F00E         	goto	_LoEndGame	;wreg free
  3358  00032E                     l7590:
  3359  00032E  5028               	movf	_key^0,w,c
  3360  000330  B4D8               	btfsc	status,2,c
  3361  000332  0012               	return	
  3362                           
  3363                           ;Logic.c: 371:                 if(SiIsAvailable()) {
  3364  000334  EC6B  F00F         	call	_SiIsAvailable	;wreg free
  3365  000338  0900               	iorlw	0
  3366  00033A  B4D8               	btfsc	status,2,c
  3367  00033C  0012               	return	
  3368                           
  3369                           ;Logic.c: 372:                     SiSendChar(key);
  3370  00033E  5028               	movf	_key^0,w,c
  3371  000340  EC5E  F00F         	call	_SiSendChar
  3372  000344  D69F               	goto	l7358
  3373  000346                     l7598:
  3374                           
  3375                           ;Logic.c: 378:             if(position < 4) {
  3376  000346  0E04               	movlw	4
  3377  000348  6026               	cpfslt	_position^0,c
  3378  00034A  D7AC               	goto	u9570
  3379                           
  3380                           ;Logic.c: 379:                 endTime[position] = TimGetEndTime(position);
  3381  00034C  5026               	movf	_position^0,w,c
  3382  00034E  EC93  F00B         	call	_TimGetEndTime
  3383  000352  6E70               	movwf	??_motorLogic^0,c
  3384  000354  5026               	movf	_position^0,w,c
  3385  000356  0FAB               	addlw	low _endTime
  3386  000358  6ED9               	movwf	fsr2l,c
  3387  00035A  6ADA               	clrf	fsr2h,c
  3388  00035C  C070  FFDF         	movff	??_motorLogic,indf2
  3389  000360  D715               	goto	l7448
  3390  000362                     l7606:
  3391                           
  3392                           ;Logic.c: 388:             if(SiHasReceived()) {
  3393  000362  EC68  F00F         	call	_SiHasReceived	;wreg free
  3394  000366  0900               	iorlw	0
  3395  000368  B4D8               	btfsc	status,2,c
  3396  00036A  0012               	return	
  3397                           
  3398                           ;Logic.c: 389:                 score = SiGetChar();
  3399  00036C  EC76  F00F         	call	_SiGetChar	;wreg free
  3400  000370  6E23               	movwf	_score^0,c
  3401                           
  3402                           ;Logic.c: 390:                 printScore[1] = score % 10;
  3403  000372  0E0A               	movlw	10
  3404  000374  6E5A               	movwf	___lbmod@divisor^0,c
  3405  000376  5023               	movf	_score^0,w,c
  3406  000378  ECF7  F00D         	call	___lbmod
  3407  00037C  6E02               	movwf	(_printScore+1)^0,c
  3408                           
  3409                           ;Logic.c: 391:                 printScore[0] = score / 10;
  3410  00037E  0E0A               	movlw	10
  3411  000380  6E5A               	movwf	___lbdiv@divisor^0,c
  3412  000382  5023               	movf	_score^0,w,c
  3413  000384  EC29  F00D         	call	___lbdiv
  3414  000388  6E01               	movwf	_printScore^0,c
  3415                           
  3416                           ;Logic.c: 392:                 key = '\0';
  3417  00038A  6A28               	clrf	_key^0,c
  3418                           
  3419                           ;Logic.c: 393:                 TiResetTics(tLogic);
  3420  00038C  502A               	movf	_tLogic^0,w,c
  3421  00038E  EC73  F00E         	call	_TiResetTics
  3422  000392  D683               	goto	u9230
  3423  000394                     l7620:
  3424                           
  3425                           ;Logic.c: 398:             if(SiHasReceived()) {
  3426  000394  EC68  F00F         	call	_SiHasReceived	;wreg free
  3427  000398  0900               	iorlw	0
  3428  00039A  E006               	bz	l7626
  3429                           
  3430                           ;Logic.c: 399:                 TiResetTics(tLogic);
  3431  00039C  502A               	movf	_tLogic^0,w,c
  3432  00039E  EC73  F00E         	call	_TiResetTics
  3433                           
  3434                           ;Logic.c: 400:                 LcClear();
  3435  0003A2  EC30  F00E         	call	_LcClear	;wreg free
  3436  0003A6  D679               	goto	u9230
  3437  0003A8                     l7626:
  3438  0003A8  502A               	movf	_tLogic^0,w,c
  3439  0003AA  EC1D  F00E         	call	_TiGetTics
  3440  0003AE  BE5B               	btfsc	(?_TiGetTics+1)^0,7,c
  3441  0003B0  0012               	return	
  3442  0003B2  DAB6               	call	PL70	;call to abstracted procedure
  3443  0003B4  A0D8               	btfss	status,0,c
  3444  0003B6  0012               	return	
  3445                           
  3446                           ;Logic.c: 404:                 LcClear();
  3447  0003B8  EC30  F00E         	call	_LcClear	;wreg free
  3448  0003BC                     l7630:
  3449                           
  3450                           ;Logic.c: 405:                 state = 69;
  3451  0003BC  0E45               	movlw	69
  3452  0003BE  6E27               	movwf	_state@Logic$F1441^0,c
  3453  0003C0  0C45               	retlw	69
  3454  0003C2                     l7632:
  3455                           
  3456                           ;Logic.c: 409:             if(LcPrintLine("ERRORS:\n") == 1) {
  3457  0003C2  0ECD               	movlw	low STR_11
  3458  0003C4  6E69               	movwf	LcPrintLine@c^0,c
  3459  0003C6  0E1F               	movlw	high STR_11
  3460  0003C8  6E6A               	movwf	(LcPrintLine@c+1)^0,c
  3461  0003CA  ECF9  F006         	call	_LcPrintLine	;wreg free
  3462  0003CE  D6F8               	goto	L8
  3463  0003D0                     l7636:
  3464                           
  3465                           ;Logic.c: 414:             if(SiHasReceived()) {
  3466  0003D0  EC68  F00F         	call	_SiHasReceived	;wreg free
  3467  0003D4  0900               	iorlw	0
  3468  0003D6  E007               	bz	l7640
  3469                           
  3470                           ;Logic.c: 415:                 LcPutChar(SiGetChar());
  3471  0003D8  EC76  F00F         	call	_SiGetChar	;wreg free
  3472  0003DC  EC76  F00D         	call	_LcPutChar
  3473                           
  3474                           ;Logic.c: 416:                 TiResetTics(tLogic);
  3475  0003E0  502A               	movf	_tLogic^0,w,c
  3476  0003E2  EF73  F00E         	goto	_TiResetTics
  3477  0003E6                     l7640:
  3478  0003E6  502A               	movf	_tLogic^0,w,c
  3479  0003E8  EC1D  F00E         	call	_TiGetTics
  3480  0003EC  BE5B               	btfsc	(?_TiGetTics+1)^0,7,c
  3481  0003EE  0012               	return	
  3482  0003F0  0EE8               	movlw	232
  3483  0003F2  5C5A               	subwf	?_TiGetTics^0,w,c
  3484  0003F4  0E03               	movlw	3
  3485  0003F6  585B               	subwfb	(?_TiGetTics+1)^0,w,c
  3486  0003F8  A0D8               	btfss	status,0,c
  3487  0003FA  0012               	return	
  3488                           
  3489                           ;Logic.c: 419:                 LcGotoXY(0,1);
  3490  0003FC  DA8E               	call	PL68	;call to abstracted procedure
  3491  0003FE  EC43  F00D         	call	_LcGotoXY
  3492                           
  3493                           ;Logic.c: 420:                 if(TiGetTics(tLogic) >= 3600) {
  3494  000402  502A               	movf	_tLogic^0,w,c
  3495  000404  EC1D  F00E         	call	_TiGetTics
  3496  000408  BE5B               	btfsc	(?_TiGetTics+1)^0,7,c
  3497  00040A  0012               	return	
  3498  00040C  DA89               	call	PL70	;call to abstracted procedure
  3499  00040E  A0D8               	btfss	status,0,c
  3500  000410  0012               	return	
  3501                           
  3502                           ;Logic.c: 421:                     TiResetTics(tLogic);
  3503  000412  502A               	movf	_tLogic^0,w,c
  3504  000414  EC73  F00E         	call	_TiResetTics
  3505                           
  3506                           ;Logic.c: 422:                     LcClear();
  3507  000418  EC30  F00E         	call	_LcClear	;wreg free
  3508                           
  3509                           ;Logic.c: 423:                     position = 0;
  3510  00041C  6A26               	clrf	_position^0,c
  3511  00041E  D7CE               	goto	l7630
  3512  000420                     l7650:
  3513                           
  3514                           ;Logic.c: 430:             if(position < 8) {
  3515  000420  0E08               	movlw	8
  3516  000422  6026               	cpfslt	_position^0,c
  3517  000424  D009               	goto	l920
  3518                           
  3519                           ;Logic.c: 431:                 storeScore(score, user[position], position);
  3520  000426  DA4B               	call	PL18	;call to abstracted procedure
  3521  000428  50DF               	movf	indf2,w,c
  3522  00042A  6E5A               	movwf	storeScore@userLetter^0,c
  3523  00042C  C026  F05B         	movff	_position,storeScore@pos
  3524  000430  5023               	movf	_score^0,w,c
  3525  000432  EC53  F00E         	call	_storeScore
  3526  000436  D6AA               	goto	l7448
  3527  000438                     l920:
  3528                           
  3529                           ;Logic.c: 435:                 position = 0;
  3530  000438  6A26               	clrf	_position^0,c
  3531                           
  3532                           ;Logic.c: 436:                 state = 21;
  3533  00043A  0E15               	movlw	21
  3534  00043C  6E27               	movwf	_state@Logic$F1441^0,c
  3535  00043E  0C15               	retlw	21
  3536  000440                     l7658:
  3537                           
  3538                           ;Logic.c: 440:             if(LcPrintLine("TIME LEFT: ") == 1) {
  3539  000440  0EAC               	movlw	low STR_12
  3540  000442  6E69               	movwf	LcPrintLine@c^0,c
  3541  000444  0E1F               	movlw	high STR_12
  3542  000446  6E6A               	movwf	(LcPrintLine@c+1)^0,c
  3543  000448  ECF9  F006         	call	_LcPrintLine	;wreg free
  3544  00044C  06E8               	decf	wreg,f,c
  3545  00044E  E101 D729          	bz	u9570
  3546  000452  0012               	return	
  3547  000454                     l7664:
  3548                           
  3549                           ;Logic.c: 446:             if(position < 4) {
  3550  000454  0E04               	movlw	4
  3551  000456  6026               	cpfslt	_position^0,c
  3552  000458  D00D               	goto	l925
  3553                           
  3554                           ;Logic.c: 447:                 LcPutChar(endTime[position]);
  3555  00045A  5026               	movf	_position^0,w,c
  3556  00045C  0FAB               	addlw	low _endTime
  3557  00045E  ECE6  F005         	call	PL56	;call to abstracted procedure
  3558  000462  EC76  F00D         	call	_LcPutChar
  3559                           
  3560                           ;Logic.c: 448:                 if(position == 1) {
  3561  000466  0426               	decf	_position^0,w,c
  3562  000468  E001 D690          	bnz	l7448
  3563                           
  3564                           ;Logic.c: 449:                     LcPutChar(':');
  3565  00046C  0E3A               	movlw	58
  3566  00046E  EC76  F00D         	call	_LcPutChar
  3567  000472  D68C               	goto	l7448
  3568  000474                     l925:
  3569                           
  3570                           ;Logic.c: 454:                 position = 0;
  3571  000474  6A26               	clrf	_position^0,c
  3572                           
  3573                           ;Logic.c: 455:                 LcGotoXY(0,1);
  3574  000476  DA51               	call	PL68	;call to abstracted procedure
  3575  000478  EC43  F00D         	call	_LcGotoXY
  3576  00047C  D60E               	goto	u9230
  3577  00047E                     l7678:
  3578                           
  3579                           ;Logic.c: 460:             if(LcPrintLine("SCORE: ") == 1) {
  3580  00047E  0EE8               	movlw	low STR_13
  3581  000480  6E69               	movwf	LcPrintLine@c^0,c
  3582  000482  0E1F               	movlw	high STR_13
  3583  000484  6E6A               	movwf	(LcPrintLine@c+1)^0,c
  3584  000486  ECF9  F006         	call	_LcPrintLine	;wreg free
  3585  00048A  D69A               	goto	L8
  3586  00048C                     l7682:
  3587                           
  3588                           ;Logic.c: 465:             if(position < 2) {
  3589  00048C  0E02               	movlw	2
  3590  00048E  6026               	cpfslt	_position^0,c
  3591  000490  D709               	goto	u9570
  3592                           
  3593                           ;Logic.c: 466:                 LcPutChar(printScore[position] + '0');
  3594  000492  5026               	movf	_position^0,w,c
  3595  000494  0F01               	addlw	low _printScore
  3596  000496  ECB4  F00B         	call	PL62	;call to abstracted procedure
  3597  00049A  EC76  F00D         	call	_LcPutChar
  3598  00049E  D676               	goto	l7448
  3599  0004A0                     l7690:
  3600                           
  3601                           ;Logic.c: 475:             if(key == '#') {
  3602  0004A0  0E23               	movlw	35
  3603  0004A2  1828               	xorwf	_key^0,w,c
  3604  0004A4  A4D8               	btfss	status,2,c
  3605  0004A6  0012               	return	
  3606  0004A8                     u9830:
  3607                           
  3608                           ;Logic.c: 476:                 LcClear();
  3609  0004A8  EC30  F00E         	call	_LcClear	;wreg free
  3610                           
  3611                           ;Logic.c: 478:                 menuWrite = 0;
  3612  0004AC  6A28               	clrf	_key^0,c
  3613  0004AE                     l7696:
  3614                           
  3615                           ;Logic.c: 479:                 menuPos = 6;
  3616  0004AE  0E06               	movlw	6
  3617  0004B0  6E24               	movwf	_menuPos^0,c
  3618                           
  3619                           ;Logic.c: 480:                 state = 6;
  3620  0004B2  6E27               	movwf	_state@Logic$F1441^0,c
  3621  0004B4  0C06               	retlw	6
  3622  0004B6                     l7700:
  3623                           
  3624                           ;Logic.c: 485:             if(LcPrintLine("MODIFY TIME:\n") == 1) {
  3625  0004B6  0E9E               	movlw	low STR_14
  3626  0004B8  6E69               	movwf	LcPrintLine@c^0,c
  3627  0004BA  0E1F               	movlw	high STR_14
  3628  0004BC  6E6A               	movwf	(LcPrintLine@c+1)^0,c
  3629  0004BE  ECF9  F006         	call	_LcPrintLine	;wreg free
  3630  0004C2  D67E               	goto	L8
  3631  0004C4                     l7704:
  3632                           
  3633                           ;Logic.c: 490:             if(key == '#') {
  3634  0004C4  0E23               	movlw	35
  3635  0004C6  1828               	xorwf	_key^0,w,c
  3636  0004C8  E0EF               	bz	u9830
  3637                           
  3638                           ;Logic.c: 498:                 if(position < 4) {
  3639  0004CA  0E04               	movlw	4
  3640  0004CC  6026               	cpfslt	_position^0,c
  3641  0004CE  0C04               	retlw	4
  3642                           
  3643                           ;Logic.c: 499:                     if(key != '\0') {
  3644  0004D0  5028               	movf	_key^0,w,c
  3645  0004D2  B4D8               	btfsc	status,2,c
  3646  0004D4  0012               	return	
  3647                           
  3648                           ;Logic.c: 500:                         LcPutChar(key);
  3649  0004D6  5028               	movf	_key^0,w,c
  3650  0004D8  EC76  F00D         	call	_LcPutChar
  3651                           
  3652                           ;Logic.c: 501:                         TimModifyTime(key, position);
  3653  0004DC  C026  F069         	movff	_position,TimModifyTime@position
  3654  0004E0  5028               	movf	_key^0,w,c
  3655  0004E2  ECED  F00A         	call	_TimModifyTime
  3656                           
  3657                           ;Logic.c: 502:                         key = '\0';
  3658  0004E6  6A28               	clrf	_key^0,c
  3659  0004E8  D651               	goto	l7448
  3660  0004EA                     l7724:
  3661                           
  3662                           ;Logic.c: 511:             anotherScore();
  3663  0004EA  EC39  F00F         	call	_anotherScore	;wreg free
  3664                           
  3665                           ;Logic.c: 512:             if (readFromROM() == 0xFF) {
  3666  0004EE  EC26  F00F         	call	_readFromROM	;wreg free
  3667  0004F2  0AFF               	xorlw	255
  3668  0004F4  E103               	bnz	l7730
  3669  0004F6                     u9880:
  3670                           
  3671                           ;Logic.c: 515:                 state = 43;
  3672  0004F6  0E2B               	movlw	43
  3673  0004F8  6E27               	movwf	_state@Logic$F1441^0,c
  3674                           
  3675                           ;Logic.c: 516:             }
  3676  0004FA  0C2B               	retlw	43
  3677  0004FC                     l7730:
  3678                           
  3679                           ;Logic.c: 519:                 state = 45;
  3680  0004FC  0E2D               	movlw	45
  3681  0004FE  6E27               	movwf	_state@Logic$F1441^0,c
  3682  000500  0C2D               	retlw	45
  3683  000502                     l7732:
  3684                           
  3685                           ;Logic.c: 523:             if (position < 16) {
  3686  000502  0E10               	movlw	16
  3687  000504  6026               	cpfslt	_position^0,c
  3688  000506  D012               	goto	l946
  3689                           
  3690                           ;Logic.c: 524:                 if (position < 2) {
  3691  000508  0E02               	movlw	2
  3692  00050A  6026               	cpfslt	_position^0,c
  3693  00050C  D00A               	goto	l7742
  3694                           
  3695                           ;Logic.c: 525:                     char aux = readScore();
  3696  00050E  EC02  F00C         	call	_readScore	;wreg free
  3697  000512  0100               	movlb	0	; () banked
  3698  000514  6FDF               	movwf	motorLogic@aux& (0+255),b
  3699                           
  3700                           ; BSR set to: 0
  3701                           ;Logic.c: 526:                     buffer[1][position+(userIndex*16)] = aux;
  3702  000516  D9D8               	call	PL20	;call to abstracted procedure
  3703  000518  D9ED               	call	PL48	;call to abstracted procedure
  3704  00051A  D9C2               	call	PL10	;call to abstracted procedure
  3705  00051C  C0DF  FFDF         	movff	motorLogic@aux,indf2
  3706  000520  D635               	goto	l7448
  3707  000522                     l7742:
  3708                           
  3709                           ;Logic.c: 530:                     buffer[1][position+(userIndex*16)] = ' ';
  3710  000522  D9D2               	call	PL20	;call to abstracted procedure
  3711  000524  D9E7               	call	PL48	;call to abstracted procedure
  3712  000526                     L9:
  3713  000526  D9BC               	call	PL10	;call to abstracted procedure
  3714  000528  0E20               	movlw	32
  3715  00052A  D029               	goto	L5
  3716  00052C                     l946:
  3717                           
  3718                           ;Logic.c: 535:                 position = 0;
  3719  00052C  6A26               	clrf	_position^0,c
  3720                           
  3721                           ;Logic.c: 536:                 scoreFlag = 0;
  3722  00052E  6A21               	clrf	_scoreFlag^0,c
  3723  000530  D5B4               	goto	u9230
  3724  000532                     l7748:
  3725                           
  3726                           ;Logic.c: 541:             if (position < 16) {
  3727  000532  0E10               	movlw	16
  3728  000534  6026               	cpfslt	_position^0,c
  3729  000536  D025               	goto	l951
  3730                           
  3731                           ;Logic.c: 542:                 if (position < 8) {
  3732  000538  0E08               	movlw	8
  3733  00053A  6026               	cpfslt	_position^0,c
  3734  00053C  D014               	goto	l7766
  3735                           
  3736                           ;Logic.c: 543:                     char aux = readScore();
  3737  00053E  EC02  F00C         	call	_readScore	;wreg free
  3738  000542  0100               	movlb	0	; () banked
  3739  000544  6FE1               	movwf	motorLogic@aux_1500& (0+255),b
  3740                           
  3741                           ; BSR set to: 0
  3742                           ;Logic.c: 544:                     if (aux == '\0') {
  3743  000546  51E1               	movf	motorLogic@aux_1500& (0+255),w,b
  3744  000548  E108               	bnz	l7762
  3745                           
  3746                           ; BSR set to: 0
  3747                           ;Logic.c: 545:                         if(scoreFlag == 0) {
  3748  00054A  5021               	movf	_scoreFlag^0,w,c
  3749  00054C  E104               	bnz	l7760
  3750                           
  3751                           ; BSR set to: 0
  3752                           ;Logic.c: 546:                             scoreFlag = 1;
  3753  00054E  0E01               	movlw	1
  3754  000550  6E21               	movwf	_scoreFlag^0,c
  3755                           
  3756                           ;Logic.c: 547:                             aux=':';}
  3757  000552  0E3A               	movlw	58
  3758  000554  D001               	goto	L4
  3759  000556                     l7760:
  3760                           
  3761                           ; BSR set to: 0
  3762                           ;Logic.c: 549:                             aux = ' ';}}
  3763  000556  0E20               	movlw	32
  3764  000558                     L4:
  3765  000558  6FE1               	movwf	motorLogic@aux_1500& (0+255),b
  3766  00055A                     l7762:
  3767                           
  3768                           ; BSR set to: 0
  3769                           ;Logic.c: 550:                     buffer[0][position+(userIndex*16)] = aux;
  3770  00055A  D9B6               	call	PL20	;call to abstracted procedure
  3771  00055C  D9AC               	call	PL16	;call to abstracted procedure
  3772  00055E  D9A0               	call	PL10	;call to abstracted procedure
  3773  000560  C0E1  FFDF         	movff	motorLogic@aux_1500,indf2
  3774  000564  D613               	goto	l7448
  3775  000566                     l7766:
  3776                           
  3777                           ;Logic.c: 554:                     if (scoreFlag == 0) {
  3778  000566  5021               	movf	_scoreFlag^0,w,c
  3779  000568  E107               	bnz	l7772
  3780                           
  3781                           ;Logic.c: 555:                         scoreFlag = 1;
  3782  00056A  0E01               	movlw	1
  3783  00056C  6E21               	movwf	_scoreFlag^0,c
  3784                           
  3785                           ;Logic.c: 556:                         buffer[0][position+(userIndex*16)] = ':';
  3786  00056E  D9AC               	call	PL20	;call to abstracted procedure
  3787  000570  D9A2               	call	PL16	;call to abstracted procedure
  3788  000572  D996               	call	PL10	;call to abstracted procedure
  3789  000574  0E3A               	movlw	58
  3790  000576  D003               	goto	L5
  3791  000578                     l7772:
  3792                           
  3793                           ;Logic.c: 559:                         buffer[0][position+(userIndex*16)] = ' ';
  3794  000578  5020               	movf	_userIndex^0,w,c
  3795  00057A  0D10               	mullw	16
  3796  00057C  D06D               	goto	L6
  3797  00057E                     L5:
  3798  00057E  6EDF               	movwf	indf2,c
  3799  000580  D605               	goto	l7448
  3800  000582                     l951:
  3801                           
  3802                           ;Logic.c: 565:                 position = 0;
  3803  000582  6A26               	clrf	_position^0,c
  3804                           
  3805                           ;Logic.c: 566:                 scoreFlag = 0;
  3806  000584  6A21               	clrf	_scoreFlag^0,c
  3807                           
  3808                           ;Logic.c: 567:                 userIndex++;
  3809  000586  2A20               	incf	_userIndex^0,f,c
  3810  000588                     l7778:
  3811                           
  3812                           ;Logic.c: 568:                 state = 28;
  3813  000588  0E1C               	movlw	28
  3814  00058A  6E27               	movwf	_state@Logic$F1441^0,c
  3815  00058C  0C1C               	retlw	28
  3816  00058E                     l7780:
  3817                           
  3818                           ;Logic.c: 572:             if(LcPrintLine("BYE BYE ") == 1) {
  3819  00058E  0EDF               	movlw	low STR_15
  3820  000590  6E69               	movwf	LcPrintLine@c^0,c
  3821  000592  0E1F               	movlw	high STR_15
  3822  000594  6E6A               	movwf	(LcPrintLine@c+1)^0,c
  3823  000596  ECF9  F006         	call	_LcPrintLine	;wreg free
  3824  00059A  D612               	goto	L8
  3825  00059C                     l7784:
  3826                           
  3827                           ;Logic.c: 577:             if(LcPrintLine(user) == 1) {
  3828  00059C  0E4C               	movlw	low _user
  3829  00059E  6E69               	movwf	LcPrintLine@c^0,c
  3830  0005A0  6A6A               	clrf	(LcPrintLine@c+1)^0,c
  3831  0005A2  ECF9  F006         	call	_LcPrintLine	;wreg free
  3832  0005A6  06E8               	decf	wreg,f,c
  3833  0005A8  A4D8               	btfss	status,2,c
  3834  0005AA  0012               	return	
  3835                           
  3836                           ;Logic.c: 578:                 TiResetTics(tLogic);
  3837  0005AC  502A               	movf	_tLogic^0,w,c
  3838  0005AE  EC73  F00E         	call	_TiResetTics
  3839  0005B2  D573               	goto	u9230
  3840  0005B4                     l7790:
  3841                           
  3842                           ;Logic.c: 583:             if(TiGetTics(tLogic) >= 2400) {
  3843  0005B4  502A               	movf	_tLogic^0,w,c
  3844  0005B6  EC1D  F00E         	call	_TiGetTics
  3845  0005BA  BE5B               	btfsc	(?_TiGetTics+1)^0,7,c
  3846  0005BC  0012               	return	
  3847  0005BE  0E60               	movlw	96
  3848  0005C0  5C5A               	subwf	?_TiGetTics^0,w,c
  3849  0005C2  0E09               	movlw	9
  3850  0005C4  585B               	subwfb	(?_TiGetTics+1)^0,w,c
  3851  0005C6  A0D8               	btfss	status,0,c
  3852  0005C8  0012               	return	
  3853                           
  3854                           ;Logic.c: 584:                 LcClear();
  3855  0005CA  EC30  F00E         	call	_LcClear	;wreg free
  3856  0005CE  D66A               	goto	u9570
  3857  0005D0                     l7798:
  3858                           
  3859                           ;Logic.c: 590:             if(position < 8) {
  3860  0005D0  0E08               	movlw	8
  3861  0005D2  6026               	cpfslt	_position^0,c
  3862  0005D4  D00A               	goto	l7808
  3863                           
  3864                           ;Logic.c: 591:                 user[position] = '\0';
  3865  0005D6  D973               	call	PL18	;call to abstracted procedure
  3866                           
  3867                           ;Logic.c: 592:                 pass[position] = '\0';
  3868                           
  3869                           ;Logic.c: 593:                 storeUser('\0', position);
  3870  0005D8  D984               	call	PL36	;call to abstracted procedure
  3871  0005DA  ECF9  F00E         	call	_storeUser
  3872                           
  3873                           ;Logic.c: 594:                 storePass('\0', position);
  3874  0005DE  C026  F05A         	movff	_position,storePass@positionPass
  3875  0005E2  0E00               	movlw	0
  3876  0005E4  EC01  F00F         	call	_storePass
  3877  0005E8  D5D1               	goto	l7448
  3878  0005EA                     l7808:
  3879                           
  3880                           ;Logic.c: 598:                 TimResetTime();
  3881  0005EA  EC3F  F00F         	call	_TimResetTime	;wreg free
  3882                           
  3883                           ;Logic.c: 599:                 position = 0;
  3884  0005EE  6A26               	clrf	_position^0,c
  3885  0005F0  D5D6               	goto	l847
  3886  0005F2                     l7814:
  3887                           
  3888                           ;Logic.c: 604:             if (position < 81) {
  3889  0005F2  0E51               	movlw	81
  3890  0005F4  6026               	cpfslt	_position^0,c
  3891  0005F6  D010               	goto	l970
  3892                           
  3893                           ;Logic.c: 605:                 buffer[0][position] = '\0';
  3894  0005F8  0E00               	movlw	low _buffer
  3895  0005FA  2426               	addwf	_position^0,w,c
  3896  0005FC  6ED9               	movwf	fsr2l,c
  3897  0005FE  6ADA               	clrf	fsr2h,c
  3898  000600  0E01               	movlw	high _buffer
  3899  000602  22DA               	addwfc	fsr2h,f,c
  3900  000604  6ADF               	clrf	indf2,c
  3901                           
  3902                           ;Logic.c: 606:                 buffer[1][position] = '\0';
  3903  000606  0E51               	movlw	low (_buffer+81)
  3904  000608  2426               	addwf	_position^0,w,c
  3905  00060A  6ED9               	movwf	fsr2l,c
  3906  00060C  6ADA               	clrf	fsr2h,c
  3907  00060E  0E01               	movlw	high (_buffer+81)
  3908  000610  22DA               	addwfc	fsr2h,f,c
  3909  000612  0E00               	movlw	0
  3910  000614  6ADF               	clrf	indf2,c
  3911  000616  D5BA               	goto	l7448
  3912  000618                     l970:
  3913                           
  3914                           ;Logic.c: 610:                 position = 0;
  3915  000618  6A26               	clrf	_position^0,c
  3916                           
  3917                           ;Logic.c: 611:                 userIndex = 0;
  3918  00061A  6A20               	clrf	_userIndex^0,c
  3919                           
  3920                           ;Logic.c: 612:                 if (menuPos == 10) {
  3921  00061C  0E0A               	movlw	10
  3922  00061E  1824               	xorwf	_menuPos^0,w,c
  3923  000620  E106               	bnz	l7828
  3924                           
  3925                           ;Logic.c: 614:                     skippedUser = 0;
  3926  000622  ECF0  F00E         	call	_startReadingUser	;wreg free
  3927                           
  3928                           ;Logic.c: 615:                     bufferSelect = 0;
  3929  000626  6A1F               	clrf	_bufferSelect^0,c
  3930                           
  3931                           ;Logic.c: 616:                     state = 49;
  3932  000628  0E31               	movlw	49
  3933  00062A  6E27               	movwf	_state@Logic$F1441^0,c
  3934                           
  3935                           ;Logic.c: 617:                 } else if (menuPos == 8 || menuPos == 16) {
  3936  00062C  0C31               	retlw	49
  3937  00062E                     l7828:
  3938  00062E  0E08               	movlw	8
  3939  000630  1824               	xorwf	_menuPos^0,w,c
  3940  000632  E004               	bz	u10030
  3941  000634  0E10               	movlw	16
  3942  000636  1824               	xorwf	_menuPos^0,w,c
  3943  000638  A4D8               	btfss	status,2,c
  3944  00063A  0012               	return	
  3945  00063C                     u10030:
  3946                           
  3947                           ;Logic.c: 618:                     startReadingScore();
  3948  00063C  EC65  F00F         	call	_startReadingScore	;wreg free
  3949  000640  D7A3               	goto	l7778
  3950  000642                     l7836:
  3951                           
  3952                           ;Logic.c: 624:             if (position < 16) {
  3953  000642  0E10               	movlw	16
  3954  000644  6026               	cpfslt	_position^0,c
  3955  000646  D00F               	goto	l978
  3956                           
  3957                           ;Logic.c: 625:                 if (position < 8) {
  3958  000648  0E08               	movlw	8
  3959  00064A  6026               	cpfslt	_position^0,c
  3960  00064C  D003               	goto	u10060
  3961                           
  3962                           ;Logic.c: 626:                     if(user[position] == '\0') {
  3963  00064E  D937               	call	PL18	;call to abstracted procedure
  3964  000650  50DF               	movf	indf2,w,c
  3965  000652  E104               	bnz	l7844
  3966  000654                     u10060:
  3967                           
  3968                           ;Logic.c: 627:                         buffer[bufferSelect][position] = ' ';
  3969  000654  501F               	movf	_bufferSelect^0,w,c
  3970  000656  0D51               	mullw	81
  3971  000658                     L6:
  3972  000658  D93B               	call	PL22	;call to abstracted procedure
  3973  00065A  D765               	goto	L9
  3974  00065C                     l7844:
  3975                           
  3976                           ;Logic.c: 630:                         buffer[bufferSelect][position] = user[position];
  3977  00065C  D930               	call	PL18	;call to abstracted procedure
  3978  00065E  501F               	movf	_bufferSelect^0,w,c
  3979  000660  0D51               	mullw	81
  3980  000662  D936               	call	PL22	;call to abstracted procedure
  3981  000664  D046               	goto	L7
  3982  000666                     l978:
  3983                           
  3984                           ;Logic.c: 640:                 position = 0;
  3985  000666  6A26               	clrf	_position^0,c
  3986                           
  3987                           ;Logic.c: 641:                 if(getNumUsers() > 1) {state = 47;}
  3988  000668  EC33  F00F         	call	_getNumUsers	;wreg free
  3989  00066C  6E70               	movwf	??_motorLogic^0,c
  3990  00066E  0E01               	movlw	1
  3991  000670  6470               	cpfsgt	??_motorLogic^0,c
  3992  000672  D003               	goto	l7856
  3993  000674                     u10070:
  3994  000674  0E2F               	movlw	47
  3995  000676  6E27               	movwf	_state@Logic$F1441^0,c
  3996  000678  0C2F               	retlw	47
  3997  00067A                     l7856:
  3998  00067A  0E2C               	movlw	44
  3999  00067C  6E27               	movwf	_state@Logic$F1441^0,c
  4000  00067E  0C2C               	retlw	44
  4001  000680                     l7858:
  4002                           
  4003                           ;Logic.c: 655:             if (position < 8) {
  4004  000680  0E08               	movlw	8
  4005  000682  6026               	cpfslt	_position^0,c
  4006  000684  D00B               	goto	l7868
  4007                           
  4008                           ;Logic.c: 656:                 char x = readUser();
  4009  000686  EC4A  F009         	call	_readUser	;wreg free
  4010  00068A  0100               	movlb	0	; () banked
  4011  00068C  6FE0               	movwf	motorLogic@x& (0+255),b
  4012                           
  4013                           ; BSR set to: 0
  4014                           ;Logic.c: 657:                 if (x != 1) {
  4015  00068E  05E0               	decf	motorLogic@x& (0+255),w,b
  4016  000690  B4D8               	btfsc	status,2,c
  4017  000692  0012               	return	
  4018                           
  4019                           ; BSR set to: 0
  4020                           ;Logic.c: 658:                     readAux[position] = x;
  4021  000694  D937               	call	PL60	;call to abstracted procedure
  4022  000696  C0E0  FFDF         	movff	motorLogic@x,indf2
  4023  00069A  D578               	goto	l7448
  4024  00069C                     l7868:
  4025                           
  4026                           ;Logic.c: 664:                     scoreFlag = compare(readAux, user);
  4027  00069C  0ECF               	movlw	low _readAux
  4028  00069E  6E5A               	movwf	compare@a^0,c
  4029  0006A0  0E4C               	movlw	low _user
  4030  0006A2  6E5B               	movwf	compare@b^0,c
  4031  0006A4  EC5D  F00D         	call	_compare	;wreg free
  4032  0006A8  6E21               	movwf	_scoreFlag^0,c
  4033                           
  4034                           ;Logic.c: 665:                     if(scoreFlag != 0) {
  4035  0006AA  5021               	movf	_scoreFlag^0,w,c
  4036  0006AC  B4D8               	btfsc	status,2,c
  4037  0006AE  0012               	return	
  4038                           
  4039                           ;Logic.c: 666:                         position = 0;
  4040  0006B0  6A26               	clrf	_position^0,c
  4041                           
  4042                           ;Logic.c: 668:                             skippedUser = 1;
  4043  0006B2  0421               	decf	_scoreFlag^0,w,c
  4044  0006B4  E101               	bnz	l7878
  4045  0006B6  0012               	return	
  4046  0006B8                     l7878:
  4047  0006B8  0E02               	movlw	2
  4048  0006BA  1821               	xorwf	_scoreFlag^0,w,c
  4049  0006BC  A4D8               	btfss	status,2,c
  4050  0006BE  0012               	return	
  4051                           
  4052                           ;Logic.c: 671:                             state = 41;
  4053  0006C0  0E29               	movlw	41
  4054  0006C2  6E27               	movwf	_state@Logic$F1441^0,c
  4055                           
  4056                           ;Logic.c: 672:                             bufferSelect = 1 - bufferSelect;
  4057  0006C4  501F               	movf	_bufferSelect^0,w,c
  4058  0006C6  0801               	sublw	1
  4059  0006C8  6E1F               	movwf	_bufferSelect^0,c
  4060  0006CA  0012               	return	
  4061  0006CC                     l7884:
  4062                           
  4063                           ;Logic.c: 682:             if (position < 16) {
  4064  0006CC  0E10               	movlw	16
  4065  0006CE  6026               	cpfslt	_position^0,c
  4066  0006D0  D01D               	goto	l995
  4067                           
  4068                           ;Logic.c: 683:                 if (position < 8) {
  4069  0006D2  0E08               	movlw	8
  4070  0006D4  6026               	cpfslt	_position^0,c
  4071  0006D6  D003               	goto	u10150
  4072                           
  4073                           ;Logic.c: 684:                     if(readAux[position] == '\0') {
  4074  0006D8  D915               	call	PL60	;call to abstracted procedure
  4075  0006DA  50DF               	movf	indf2,w,c
  4076  0006DC  E105               	bnz	l7892
  4077  0006DE                     u10150:
  4078                           
  4079                           ;Logic.c: 685:                         buffer[bufferSelect][position+((userIndex)*16)] =
      +                           ' ';
  4080  0006DE  D8FD               	call	PL34	;call to abstracted procedure
  4081  0006E0  D8EA               	call	PL16	;call to abstracted procedure
  4082  0006E2  50F3               	movf	243,w,c
  4083  0006E4  D914               	call	PL64	;call to abstracted procedure
  4084  0006E6  D71F               	goto	L9
  4085  0006E8                     l7892:
  4086                           
  4087                           ;Logic.c: 688:                         buffer[bufferSelect][position+((userIndex)*16)] =
      +                           readAux[position];
  4088  0006E8  D90D               	call	PL60	;call to abstracted procedure
  4089  0006EA  D8F7               	call	PL34	;call to abstracted procedure
  4090  0006EC  D8E4               	call	PL16	;call to abstracted procedure
  4091  0006EE  50F3               	movf	243,w,c
  4092  0006F0  D90E               	call	PL64	;call to abstracted procedure
  4093  0006F2                     L7:
  4094  0006F2  50F3               	movf	243,w,c
  4095  0006F4  2670               	addwf	??_motorLogic^0,f,c
  4096  0006F6  50F4               	movf	244,w,c
  4097  0006F8  2271               	addwfc	(??_motorLogic+1)^0,f,c
  4098  0006FA  5026               	movf	_position^0,w,c
  4099  0006FC  2470               	addwf	??_motorLogic^0,w,c
  4100  0006FE  6EE1               	movwf	fsr1l,c
  4101  000700  0E00               	movlw	0
  4102  000702  2071               	addwfc	(??_motorLogic+1)^0,w,c
  4103  000704  6EE2               	movwf	fsr1h,c
  4104  000706  CFDF FFE7          	movff	indf2,indf1
  4105  00070A  D540               	goto	l7448
  4106  00070C                     l995:
  4107                           
  4108                           ;Logic.c: 698:                 position = 0;
  4109  00070C  6A26               	clrf	_position^0,c
  4110                           
  4111                           ;Logic.c: 699:                 if (bufferSelect == 1) userIndex++;
  4112  00070E  041F               	decf	_bufferSelect^0,w,c
  4113  000710  E101               	bnz	l7904
  4114  000712  2A20               	incf	_userIndex^0,f,c
  4115  000714                     l7904:
  4116                           
  4117                           ;Logic.c: 700:                 if (userIndex*2+(1-bufferSelect) >= getNumUsers()) {
  4118  000714  EC33  F00F         	call	_getNumUsers	;wreg free
  4119  000718  6E70               	movwf	??_motorLogic^0,c
  4120  00071A  6A71               	clrf	(??_motorLogic+1)^0,c
  4121  00071C  5020               	movf	_userIndex^0,w,c
  4122  00071E  0D02               	mullw	2
  4123  000720  CFF3 F072          	movff	prodl,??_motorLogic+2
  4124  000724  CFF4 F073          	movff	prodh,??_motorLogic+3
  4125  000728  501F               	movf	_bufferSelect^0,w,c
  4126  00072A  5E72               	subwf	(??_motorLogic+2)^0,f,c
  4127  00072C  0E00               	movlw	0
  4128  00072E  5A73               	subwfb	(??_motorLogic+3)^0,f,c
  4129  000730  2A72               	incf	(??_motorLogic+2)^0,f,c
  4130  000732  2273               	addwfc	(??_motorLogic+3)^0,f,c
  4131  000734  5070               	movf	??_motorLogic^0,w,c
  4132  000736  5C72               	subwf	(??_motorLogic+2)^0,w,c
  4133  000738  5073               	movf	(??_motorLogic+3)^0,w,c
  4134  00073A  0A80               	xorlw	128
  4135  00073C  6E74               	movwf	(??_motorLogic+4)^0,c
  4136  00073E  5071               	movf	(??_motorLogic+1)^0,w,c
  4137  000740  0A80               	xorlw	128
  4138  000742  5874               	subwfb	(??_motorLogic+4)^0,w,c
  4139  000744  E397               	bnc	u10070
  4140                           
  4141                           ;Logic.c: 701:                     if (bufferSelect == 0) {
  4142  000746  501F               	movf	_bufferSelect^0,w,c
  4143  000748  E098               	bz	l7856
  4144  00074A  D6D5               	goto	u9880
  4145  00074C                     l7914:
  4146                           
  4147                           ;Logic.c: 714:             if (key != '#') {
  4148  00074C  0E23               	movlw	35
  4149  00074E  1828               	xorwf	_key^0,w,c
  4150  000750  E00E               	bz	l7922
  4151                           
  4152                           ;Logic.c: 715:                 setLine();
  4153  000752  EC18  F00F         	call	_setLine	;wreg free
  4154                           
  4155                           ;Logic.c: 716:                 LcPrintLine(buffer[0]);
  4156  000756  0E00               	movlw	low _buffer
  4157  000758  6E69               	movwf	LcPrintLine@c^0,c
  4158  00075A  0E01               	movlw	high _buffer
  4159  00075C  6E6A               	movwf	(LcPrintLine@c+1)^0,c
  4160  00075E  ECF9  F006         	call	_LcPrintLine	;wreg free
  4161                           
  4162                           ;Logic.c: 717:                 LcPrintSecondLine(buffer[1]);
  4163  000762  0E51               	movlw	low (_buffer+81)
  4164  000764  6E69               	movwf	LcPrintSecondLine@c2^0,c
  4165  000766  0E01               	movlw	high (_buffer+81)
  4166  000768  6E6A               	movwf	(LcPrintSecondLine@c2+1)^0,c
  4167  00076A  EF82  F008         	goto	_LcPrintSecondLine	;wreg free
  4168  00076E                     l7922:
  4169                           
  4170                           ;Logic.c: 719:                 LcClear();
  4171  00076E  EC30  F00E         	call	_LcClear	;wreg free
  4172                           
  4173                           ;Logic.c: 721:                 menuWrite = 0;
  4174  000772  6A28               	clrf	_key^0,c
  4175                           
  4176                           ;Logic.c: 722:                 position = 0;
  4177  000774  6A26               	clrf	_position^0,c
  4178  000776  D69B               	goto	l7696
  4179  000778                     l7932:
  4180                           
  4181                           ;Logic.c: 728:             if (position < 16) {
  4182  000778  0E10               	movlw	16
  4183  00077A  6026               	cpfslt	_position^0,c
  4184  00077C  D6BC               	goto	u9880
  4185  00077E  D6D1               	goto	l7742
  4186  000780                     l7942:
  4187  000780  5027               	movf	_state@Logic$F1441^0,w,c
  4188  000782  6E70               	movwf	??_motorLogic^0,c
  4189  000784  6A71               	clrf	(??_motorLogic+1)^0,c
  4190                           
  4191                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4192                           ; Switch size 1, requested type "space"
  4193                           ; Number of cases is 1, Range of values is 0 to 0
  4194                           ; switch strategies available:
  4195                           ; Name         Instructions Cycles
  4196                           ; simple_byte            4     3 (average)
  4197                           ;	Chosen strategy is simple_byte
  4198  000786  5071               	movf	(??_motorLogic+1)^0,w,c
  4199  000788  A4D8               	btfss	status,2,c
  4200  00078A  0012               	return	
  4201                           
  4202                           ; Switch size 1, requested type "space"
  4203                           ; Number of cases is 46, Range of values is 0 to 203
  4204                           ; switch strategies available:
  4205                           ; Name         Instructions Cycles
  4206                           ; simple_byte          139    70 (average)
  4207                           ;	Chosen strategy is simple_byte
  4208  00078C  5070               	movf	??_motorLogic^0,w,c
  4209  00078E  E101 D453          	bz	l7334
  4210  000792  0A01               	xorlw	1	; case 1
  4211  000794  E101 D45C          	bz	l7340
  4212  000798  0A03               	xorlw	3	; case 2
  4213  00079A  E101 D465          	bz	l7346
  4214  00079E  0A01               	xorlw	1	; case 3
  4215  0007A0  E101 D472          	bz	l7360
  4216  0007A4  0A07               	xorlw	7	; case 4
  4217  0007A6  E101 D47A          	bz	l7364
  4218  0007AA  0A01               	xorlw	1	; case 5
  4219  0007AC  E101 D48A          	bz	l7374
  4220  0007B0  0A03               	xorlw	3	; case 6
  4221  0007B2  E101 D4FF          	bz	l7464
  4222  0007B6  0A01               	xorlw	1	; case 7
  4223  0007B8  E101 D506          	bz	l7468
  4224  0007BC  0A0F               	xorlw	15	; case 8
  4225  0007BE  E101 D513          	bz	l7476
  4226  0007C2  0A01               	xorlw	1	; case 9
  4227  0007C4  E101 D523          	bz	l7490
  4228  0007C8  0A03               	xorlw	3	; case 10
  4229  0007CA  E101 D535          	bz	l7502
  4230  0007CE  0A01               	xorlw	1	; case 11
  4231  0007D0  E101 D539          	bz	l7506
  4232  0007D4  0A07               	xorlw	7	; case 12
  4233  0007D6  E101 D55C          	bz	l7538
  4234  0007DA  0A01               	xorlw	1	; case 13
  4235  0007DC  E101 D564          	bz	l7544
  4236  0007E0  0A03               	xorlw	3	; case 14
  4237  0007E2  E101 D58F          	bz	l7574
  4238  0007E6  0A01               	xorlw	1	; case 15
  4239  0007E8  E101 D59B          	bz	l7584
  4240  0007EC  0A1F               	xorlw	31	; case 16
  4241  0007EE  E101 D5AA          	bz	l7598
  4242  0007F2  0A01               	xorlw	1	; case 17
  4243  0007F4  E101 D5B5          	bz	l7606
  4244  0007F8  0A03               	xorlw	3	; case 18
  4245  0007FA  E101 D5CB          	bz	l7620
  4246  0007FE  0A01               	xorlw	1	; case 19
  4247  000800  E101 D5DF          	bz	l7632
  4248  000804  0A07               	xorlw	7	; case 20
  4249  000806  E101 D5E3          	bz	l7636
  4250  00080A  0A01               	xorlw	1	; case 21
  4251  00080C  E101 D618          	bz	l7658
  4252  000810  0A03               	xorlw	3	; case 22
  4253  000812  E101 D61F          	bz	l7664
  4254  000816  0A01               	xorlw	1	; case 23
  4255  000818  E101 D631          	bz	l7678
  4256  00081C  0A0F               	xorlw	15	; case 24
  4257  00081E  E101 D635          	bz	l7682
  4258  000822  0A01               	xorlw	1	; case 25
  4259  000824  E101 D63C          	bz	l7690
  4260  000828  0A03               	xorlw	3	; case 26
  4261  00082A  E101 D644          	bz	l7700
  4262  00082E  0A01               	xorlw	1	; case 27
  4263  000830  E101 D648          	bz	l7704
  4264  000834  0A07               	xorlw	7	; case 28
  4265  000836  E101 D658          	bz	l7724
  4266  00083A  0A01               	xorlw	1	; case 29
  4267  00083C  E101 D6A7          	bz	l7780
  4268  000840  0A03               	xorlw	3	; case 30
  4269  000842  E101 D6AB          	bz	l7784
  4270  000846  0A01               	xorlw	1	; case 31
  4271  000848  E101 D6B4          	bz	l7790
  4272  00084C  0A3F               	xorlw	63	; case 32
  4273  00084E  E101 D6BF          	bz	l7798
  4274  000852  0A08               	xorlw	8	; case 40
  4275  000854  E101 D6CD          	bz	l7814
  4276  000858  0A01               	xorlw	1	; case 41
  4277  00085A  E101 D737          	bz	l7884
  4278  00085E  0A02               	xorlw	2	; case 43
  4279  000860  E101 D774          	bz	l7914
  4280  000864  0A07               	xorlw	7	; case 44
  4281  000866  E088               	bz	l7932
  4282  000868  0A01               	xorlw	1	; case 45
  4283  00086A  E101 D64A          	bz	l7732
  4284  00086E  0A03               	xorlw	3	; case 46
  4285  000870  E101 D65F          	bz	l7748
  4286  000874  0A01               	xorlw	1	; case 47
  4287  000876  E101 D703          	bz	l7858
  4288  00087A  0A1E               	xorlw	30	; case 49
  4289  00087C  E101 D6E1          	bz	l7836
  4290  000880  0A74               	xorlw	116	; case 69
  4291  000882  E101 D5CD          	bz	l7650
  4292  000886  0A13               	xorlw	19	; case 86
  4293  000888  E101 D443          	bz	l7408
  4294  00088C  0A01               	xorlw	1	; case 87
  4295  00088E  E101 D457          	bz	l7422
  4296  000892  0A33               	xorlw	51	; case 100
  4297  000894  E101 D473          	bz	l7442
  4298  000898  0AAF               	xorlw	175	; case 203
  4299  00089A  E101 D459          	bz	l7428
  4300  00089E  0012               	return		;funcret
  4301  0008A0                     __end_of_motorLogic:
  4302                           	callstack 0
  4303  0008A0                     PL10:
  4304                           	callstack 23
  4305  0008A0  50F3               	movf	243,w,c
  4306  0008A2  2670               	addwf	??_motorLogic^0,f,c
  4307  0008A4  50F4               	movf	244,w,c
  4308  0008A6  2271               	addwfc	(??_motorLogic+1)^0,f,c
  4309  0008A8  5026               	movf	_position^0,w,c
  4310  0008AA  2470               	addwf	??_motorLogic^0,w,c
  4311  0008AC  6ED9               	movwf	fsr2l,c
  4312  0008AE  0E00               	movlw	0
  4313  0008B0  2071               	addwfc	(??_motorLogic+1)^0,w,c
  4314  0008B2  6EDA               	movwf	fsr2h,c
  4315  0008B4  0012               	return	
  4316  0008B6                     __end_ofPL10:
  4317                           	callstack 0
  4318  0008B6                     PL16:
  4319                           	callstack 23
  4320  0008B6  6E70               	movwf	??_motorLogic^0,c
  4321  0008B8  0E01               	movlw	high _buffer
  4322  0008BA  6E71               	movwf	(??_motorLogic+1)^0,c
  4323  0008BC  0012               	return	
  4324  0008BE                     __end_ofPL16:
  4325                           	callstack 0
  4326  0008BE                     PL18:
  4327                           	callstack 26
  4328  0008BE  5026               	movf	_position^0,w,c
  4329  0008C0  0F4C               	addlw	low _user
  4330  0008C2  6ED9               	movwf	fsr2l,c
  4331  0008C4  6ADA               	clrf	fsr2h,c
  4332  0008C6  0012               	return	
  4333  0008C8                     __end_ofPL18:
  4334                           	callstack 0
  4335  0008C8                     PL20:
  4336                           	callstack 23
  4337  0008C8  5020               	movf	_userIndex^0,w,c
  4338  0008CA  0D10               	mullw	16
  4339  0008CC  0E00               	movlw	low _buffer
  4340  0008CE  0012               	return	
  4341  0008D0                     __end_ofPL20:
  4342                           	callstack 0
  4343  0008D0                     PL22:
  4344                           	callstack 23
  4345  0008D0  0E00               	movlw	low _buffer
  4346  0008D2  6E70               	movwf	??_motorLogic^0,c
  4347  0008D4  0E01               	movlw	high _buffer
  4348  0008D6  6E71               	movwf	(??_motorLogic+1)^0,c
  4349  0008D8  0012               	return	
  4350  0008DA                     __end_ofPL22:
  4351                           	callstack 0
  4352  0008DA                     PL34:
  4353                           	callstack 23
  4354  0008DA  501F               	movf	_bufferSelect^0,w,c
  4355  0008DC  0D51               	mullw	81
  4356  0008DE  0E00               	movlw	low _buffer
  4357  0008E0  0012               	return	
  4358  0008E2                     __end_ofPL34:
  4359                           	callstack 0
  4360  0008E2                     PL36:
  4361                           	callstack 23
  4362  0008E2  6ADF               	clrf	indf2,c
  4363  0008E4  5026               	movf	_position^0,w,c
  4364  0008E6  0FD7               	addlw	low _pass
  4365  0008E8  6ED9               	movwf	fsr2l,c
  4366  0008EA  6ADA               	clrf	fsr2h,c
  4367  0008EC  6ADF               	clrf	indf2,c
  4368  0008EE  C026  F05A         	movff	_position,storeUser@positionUser
  4369  0008F2  0C00               	retlw	0
  4370  0008F4                     __end_ofPL36:
  4371                           	callstack 0
  4372  0008F4                     PL48:
  4373                           	callstack 23
  4374  0008F4  6E70               	movwf	??_motorLogic^0,c
  4375  0008F6  0E01               	movlw	high _buffer
  4376  0008F8  6E71               	movwf	(??_motorLogic+1)^0,c
  4377  0008FA  0E51               	movlw	81
  4378  0008FC  2670               	addwf	??_motorLogic^0,f,c
  4379  0008FE  0E00               	movlw	0
  4380  000900  2271               	addwfc	(??_motorLogic+1)^0,f,c
  4381  000902  0C00               	retlw	0
  4382  000904                     __end_ofPL48:
  4383                           	callstack 0
  4384  000904                     PL60:
  4385                           	callstack 23
  4386  000904  5026               	movf	_position^0,w,c
  4387  000906  0FCF               	addlw	low _readAux
  4388  000908  6ED9               	movwf	fsr2l,c
  4389  00090A  6ADA               	clrf	fsr2h,c
  4390  00090C  0012               	return	
  4391  00090E                     __end_ofPL60:
  4392                           	callstack 0
  4393  00090E                     PL64:
  4394                           	callstack 23
  4395  00090E  2670               	addwf	??_motorLogic^0,f,c
  4396  000910  50F4               	movf	244,w,c
  4397  000912  2271               	addwfc	(??_motorLogic+1)^0,f,c
  4398  000914  5020               	movf	_userIndex^0,w,c
  4399  000916  0D10               	mullw	16
  4400  000918  0012               	return	
  4401  00091A                     __end_ofPL64:
  4402                           	callstack 0
  4403  00091A                     PL68:
  4404                           	callstack 22
  4405  00091A  0E01               	movlw	1
  4406  00091C  6E62               	movwf	LcGotoXY@Row^0,c
  4407  00091E  0C00               	retlw	0
  4408  000920                     __end_ofPL68:
  4409                           	callstack 0
  4410  000920                     PL70:
  4411                           	callstack 23
  4412  000920  0E10               	movlw	16
  4413  000922  5C5A               	subwf	?_TiGetTics^0,w,c
  4414  000924  0E0E               	movlw	14
  4415  000926  585B               	subwfb	(?_TiGetTics+1)^0,w,c
  4416  000928  0012               	return	
  4417  00092A                     __end_ofPL70:
  4418                           	callstack 0
  4419  00092A                     PL94:
  4420                           	callstack 23
  4421  00092A  0E03               	movlw	3
  4422  00092C  6E27               	movwf	_state@Logic$F1441^0,c
  4423  00092E  0C03               	retlw	3
  4424  000930                     __end_ofPL94:
  4425                           	callstack 0
  4426  000930                     PL98:
  4427                           	callstack 22
  4428  000930  6E27               	movwf	_state@Logic$F1441^0,c
  4429  000932  6A29               	clrf	_gameStarted^0,c
  4430  000934  0012               	return		;funcret
  4431  000936                     __end_ofPL98:
  4432                           	callstack 0
  4433                           
  4434 ;; *************** function _storeScore *****************
  4435 ;; Defined at:
  4436 ;;		line 361 in file "EEPROM.c"
  4437 ;; Parameters:    Size  Location     Type
  4438 ;;  scoreIn         1    wreg     unsigned char 
  4439 ;;  userLetter      1    5[COMRAM] unsigned char 
  4440 ;;  pos             1    6[COMRAM] unsigned char 
  4441 ;; Auto vars:     Size  Location     Type
  4442 ;;  scoreIn         1    7[COMRAM] unsigned char 
  4443 ;; Return value:  Size  Location     Type
  4444 ;;                  1    wreg      void 
  4445 ;; Registers used:
  4446 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4447 ;; Tracked objects:
  4448 ;;		On entry : 0/0
  4449 ;;		On exit  : 0/0
  4450 ;;		Unchanged: 0/0
  4451 ;; Data sizes:     COMRAM   BANK0   BANK1
  4452 ;;      Params:         2       0       0
  4453 ;;      Locals:         1       0       0
  4454 ;;      Temps:          0       0       0
  4455 ;;      Totals:         3       0       0
  4456 ;;Total ram usage:        3 bytes
  4457 ;; Hardware stack levels used: 1
  4458 ;; Hardware stack levels required when called: 2
  4459 ;; This function calls:
  4460 ;;		Nothing
  4461 ;; This function is called by:
  4462 ;;		_motorLogic
  4463 ;; This function uses a non-reentrant model
  4464 ;;
  4465                           
  4466                           	psect	text13
  4467  001CA6                     __ptext13:
  4468                           	callstack 0
  4469  001CA6                     _storeScore:
  4470                           	callstack 27
  4471                           
  4472                           ;incstack = 0
  4473                           ;storeScore@scoreIn stored from wreg
  4474  001CA6  6E5C               	movwf	storeScore@scoreIn^0,c
  4475                           
  4476                           ;EEPROM.c: 362:     score = scoreIn;
  4477  001CA8  C05C  F015         	movff	storeScore@scoreIn,_score@EEPROM$F1582
  4478                           
  4479                           ;EEPROM.c: 363:     user[pos] = userLetter;
  4480  001CAC  505B               	movf	storeScore@pos^0,w,c
  4481  001CAE  0FA3               	addlw	low _user@EEPROM$F1570
  4482  001CB0  6ED9               	movwf	fsr2l,c
  4483  001CB2  6ADA               	clrf	fsr2h,c
  4484  001CB4  C05A  FFDF         	movff	storeScore@userLetter,indf2
  4485                           
  4486                           ;EEPROM.c: 364:     if(pos == 7) {
  4487  001CB8  0E07               	movlw	7
  4488  001CBA  185B               	xorwf	storeScore@pos^0,w,c
  4489  001CBC  A4D8               	btfss	status,2,c
  4490  001CBE  0012               	return	
  4491                           
  4492                           ;EEPROM.c: 365:         saveScore = 1;
  4493  001CC0  0E01               	movlw	1
  4494  001CC2  6E1B               	movwf	_saveScore^0,c
  4495  001CC4  0C01               	retlw	1	;funcret
  4496  001CC6                     __end_of_storeScore:
  4497                           	callstack 0
  4498                           
  4499 ;; *************** function _startWriteUser *****************
  4500 ;; Defined at:
  4501 ;;		line 286 in file "EEPROM.c"
  4502 ;; Parameters:    Size  Location     Type
  4503 ;;		None
  4504 ;; Auto vars:     Size  Location     Type
  4505 ;;		None
  4506 ;; Return value:  Size  Location     Type
  4507 ;;                  1    wreg      void 
  4508 ;; Registers used:
  4509 ;;		wreg, status,2
  4510 ;; Tracked objects:
  4511 ;;		On entry : 0/0
  4512 ;;		On exit  : 0/0
  4513 ;;		Unchanged: 0/0
  4514 ;; Data sizes:     COMRAM   BANK0   BANK1
  4515 ;;      Params:         0       0       0
  4516 ;;      Locals:         0       0       0
  4517 ;;      Temps:          0       0       0
  4518 ;;      Totals:         0       0       0
  4519 ;;Total ram usage:        0 bytes
  4520 ;; Hardware stack levels used: 1
  4521 ;; Hardware stack levels required when called: 2
  4522 ;; This function calls:
  4523 ;;		Nothing
  4524 ;; This function is called by:
  4525 ;;		_motorLogic
  4526 ;; This function uses a non-reentrant model
  4527 ;;
  4528                           
  4529                           	psect	text14
  4530  001EC4                     __ptext14:
  4531                           	callstack 0
  4532  001EC4                     _startWriteUser:
  4533                           	callstack 27
  4534                           
  4535                           ;EEPROM.c: 287:     startUser = 1;
  4536                           
  4537                           ;incstack = 0
  4538  001EC4  0E01               	movlw	1
  4539  001EC6  6E1C               	movwf	_startUser^0,c
  4540  001EC8  0C01               	retlw	1	;funcret
  4541  001ECA                     __end_of_startWriteUser:
  4542                           	callstack 0
  4543                           
  4544 ;; *************** function _startReadingUser *****************
  4545 ;; Defined at:
  4546 ;;		line 373 in file "EEPROM.c"
  4547 ;; Parameters:    Size  Location     Type
  4548 ;;		None
  4549 ;; Auto vars:     Size  Location     Type
  4550 ;;		None
  4551 ;; Return value:  Size  Location     Type
  4552 ;;                  1    wreg      void 
  4553 ;; Registers used:
  4554 ;;		wreg, status,2, cstack
  4555 ;; Tracked objects:
  4556 ;;		On entry : 0/0
  4557 ;;		On exit  : 0/0
  4558 ;;		Unchanged: 0/0
  4559 ;; Data sizes:     COMRAM   BANK0   BANK1
  4560 ;;      Params:         0       0       0
  4561 ;;      Locals:         0       0       0
  4562 ;;      Temps:          0       0       0
  4563 ;;      Totals:         0       0       0
  4564 ;;Total ram usage:        0 bytes
  4565 ;; Hardware stack levels used: 1
  4566 ;; Hardware stack levels required when called: 3
  4567 ;; This function calls:
  4568 ;;		_readFromROM
  4569 ;; This function is called by:
  4570 ;;		_motorLogic
  4571 ;; This function uses a non-reentrant model
  4572 ;;
  4573                           
  4574                           	psect	text15
  4575  001DE0                     __ptext15:
  4576                           	callstack 0
  4577  001DE0                     _startReadingUser:
  4578                           	callstack 26
  4579                           
  4580                           ;EEPROM.c: 374:     address = 0x01;
  4581                           
  4582                           ;incstack = 0
  4583  001DE0  0E01               	movlw	1
  4584  001DE2  6E1E               	movwf	_address^0,c
  4585                           
  4586                           ;EEPROM.c: 375:     newestUserAddress = readFromROM();
  4587  001DE4  EC26  F00F         	call	_readFromROM	;wreg free
  4588  001DE8  6E11               	movwf	_newestUserAddress^0,c
  4589                           
  4590                           ;EEPROM.c: 376:     address = newestUserAddress;
  4591  001DEA  C011  F01E         	movff	_newestUserAddress,_address
  4592                           
  4593                           ;EEPROM.c: 377:     flagReading = 3;
  4594  001DEE  EF3C  F00F         	goto	__end_of_anotherScore	;call to abstracted procedure
  4595  001DF2                     __end_of_startReadingUser:
  4596                           	callstack 0
  4597                           
  4598 ;; *************** function _startReadingScore *****************
  4599 ;; Defined at:
  4600 ;;		line 414 in file "EEPROM.c"
  4601 ;; Parameters:    Size  Location     Type
  4602 ;;		None
  4603 ;; Auto vars:     Size  Location     Type
  4604 ;;		None
  4605 ;; Return value:  Size  Location     Type
  4606 ;;                  1    wreg      void 
  4607 ;; Registers used:
  4608 ;;		wreg, status,2
  4609 ;; Tracked objects:
  4610 ;;		On entry : 0/0
  4611 ;;		On exit  : 0/0
  4612 ;;		Unchanged: 0/0
  4613 ;; Data sizes:     COMRAM   BANK0   BANK1
  4614 ;;      Params:         0       0       0
  4615 ;;      Locals:         0       0       0
  4616 ;;      Temps:          0       0       0
  4617 ;;      Totals:         0       0       0
  4618 ;;Total ram usage:        0 bytes
  4619 ;; Hardware stack levels used: 1
  4620 ;; Hardware stack levels required when called: 2
  4621 ;; This function calls:
  4622 ;;		Nothing
  4623 ;; This function is called by:
  4624 ;;		_motorLogic
  4625 ;; This function uses a non-reentrant model
  4626 ;;
  4627                           
  4628                           	psect	text16
  4629  001ECA                     __ptext16:
  4630                           	callstack 0
  4631  001ECA                     _startReadingScore:
  4632                           	callstack 27
  4633                           
  4634                           ;EEPROM.c: 415:     address = 0x89;
  4635                           
  4636                           ;incstack = 0
  4637  001ECA  0E89               	movlw	137
  4638  001ECC  6E1E               	movwf	_address^0,c
  4639  001ECE  0C89               	retlw	137	;funcret
  4640  001ED0                     __end_of_startReadingScore:
  4641                           	callstack 0
  4642                           
  4643 ;; *************** function _signup *****************
  4644 ;; Defined at:
  4645 ;;		line 311 in file "EEPROM.c"
  4646 ;; Parameters:    Size  Location     Type
  4647 ;;  userInput       1    5[COMRAM] PTR unsigned char 
  4648 ;;		 -> user(8), 
  4649 ;; Auto vars:     Size  Location     Type
  4650 ;;		None
  4651 ;; Return value:  Size  Location     Type
  4652 ;;                  1    wreg      unsigned char 
  4653 ;; Registers used:
  4654 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  4655 ;; Tracked objects:
  4656 ;;		On entry : 0/0
  4657 ;;		On exit  : 0/0
  4658 ;;		Unchanged: 0/0
  4659 ;; Data sizes:     COMRAM   BANK0   BANK1
  4660 ;;      Params:         1       0       0
  4661 ;;      Locals:         0       0       0
  4662 ;;      Temps:          0       0       0
  4663 ;;      Totals:         1       0       0
  4664 ;;Total ram usage:        1 bytes
  4665 ;; Hardware stack levels used: 1
  4666 ;; Hardware stack levels required when called: 2
  4667 ;; This function calls:
  4668 ;;		Nothing
  4669 ;; This function is called by:
  4670 ;;		_motorLogic
  4671 ;; This function uses a non-reentrant model
  4672 ;;
  4673                           
  4674                           	psect	text17
  4675  001890                     __ptext17:
  4676                           	callstack 0
  4677  001890                     _signup:
  4678                           	callstack 27
  4679                           
  4680                           ;EEPROM.c: 312:     if(position < 8 && checkUser == 0) {
  4681                           
  4682                           ;incstack = 0
  4683  001890  0E08               	movlw	8
  4684  001892  601A               	cpfslt	_position@EEPROM$F1576^0,c
  4685  001894  D007               	goto	l6792
  4686  001896  5018               	movf	_checkUser^0,w,c
  4687  001898  E105               	bnz	l6792
  4688                           
  4689                           ;EEPROM.c: 313:         userInputROM[position] = userInput[position];
  4690  00189A  505A               	movf	signup@userInput^0,w,c
  4691  00189C  241A               	addwf	_position@EEPROM$F1576^0,w,c
  4692  00189E  D80E               	call	PL40	;call to abstracted procedure
  4693                           
  4694                           ;EEPROM.c: 314:         position++;
  4695  0018A0  2A1A               	incf	_position@EEPROM$F1576^0,f,c
  4696                           
  4697                           ;EEPROM.c: 315:     }
  4698  0018A2  0C00               	retlw	0
  4699  0018A4                     l6792:
  4700                           
  4701                           ;EEPROM.c: 317:         if (flagReading != 0 && checkUser == 0) {
  4702  0018A4  5017               	movf	_flagReading^0,w,c
  4703  0018A6  E005               	bz	l6798
  4704  0018A8  5018               	movf	_checkUser^0,w,c
  4705  0018AA  E103               	bnz	l6798
  4706                           
  4707                           ;EEPROM.c: 318:             checkUser = 3;
  4708  0018AC  0E03               	movlw	3
  4709  0018AE  6E18               	movwf	_checkUser^0,c
  4710                           
  4711                           ;EEPROM.c: 319:         }
  4712  0018B0  0C00               	retlw	0
  4713  0018B2                     l6798:
  4714                           
  4715                           ;EEPROM.c: 321:             if (checkUser == 2) {
  4716  0018B2  0E02               	movlw	2
  4717  0018B4  1818               	xorwf	_checkUser^0,w,c
  4718  0018B6  E101               	bnz	l6806
  4719                           
  4720                           ;EEPROM.c: 322:                 checkUser = 0;
  4721                           
  4722                           ;EEPROM.c: 323:                 return flagReading;
  4723  0018B8  D00A               	goto	PL100	;call to abstracted procedure
  4724  0018BA                     l6806:
  4725                           
  4726                           ;EEPROM.c: 328:     return 0;
  4727  0018BA  0C00               	retlw	0	;funcret
  4728  0018BC                     __end_of_signup:
  4729                           	callstack 0
  4730  0018BC                     PL40:
  4731                           	callstack 27
  4732  0018BC  6ED9               	movwf	fsr2l,c
  4733  0018BE  6ADA               	clrf	fsr2h,c
  4734  0018C0  501A               	movf	_position@EEPROM$F1576^0,w,c
  4735  0018C2  0FB7               	addlw	low _userInputROM
  4736  0018C4  6EE1               	movwf	fsr1l,c
  4737  0018C6  6AE2               	clrf	fsr1h,c
  4738  0018C8  CFDF FFE7          	movff	indf2,indf1
  4739  0018CC  0012               	return	
  4740  0018CE                     __end_ofPL40:
  4741                           	callstack 0
  4742  0018CE                     PL100:
  4743                           	callstack 27
  4744  0018CE  6A18               	clrf	_checkUser^0,c
  4745  0018D0  5017               	movf	_flagReading^0,w,c
  4746  0018D2  0012               	return	
  4747  0018D4                     __end_ofPL100:
  4748                           	callstack 0
  4749                           
  4750 ;; *************** function _setLine *****************
  4751 ;; Defined at:
  4752 ;;		line 300 in file "LcTLCD.c"
  4753 ;; Parameters:    Size  Location     Type
  4754 ;;		None
  4755 ;; Auto vars:     Size  Location     Type
  4756 ;;		None
  4757 ;; Return value:  Size  Location     Type
  4758 ;;                  1    wreg      void 
  4759 ;; Registers used:
  4760 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4761 ;; Tracked objects:
  4762 ;;		On entry : 0/0
  4763 ;;		On exit  : 0/0
  4764 ;;		Unchanged: 0/0
  4765 ;; Data sizes:     COMRAM   BANK0   BANK1
  4766 ;;      Params:         0       0       0
  4767 ;;      Locals:         0       0       0
  4768 ;;      Temps:          0       0       0
  4769 ;;      Totals:         0       0       0
  4770 ;;Total ram usage:        0 bytes
  4771 ;; Hardware stack levels used: 1
  4772 ;; Hardware stack levels required when called: 5
  4773 ;; This function calls:
  4774 ;;		_LcGotoXY
  4775 ;;		_WaitForBusy
  4776 ;; This function is called by:
  4777 ;;		_motorLogic
  4778 ;; This function uses a non-reentrant model
  4779 ;;
  4780                           
  4781                           	psect	text18
  4782  001E30                     __ptext18:
  4783                           	callstack 0
  4784  001E30                     _setLine:
  4785                           	callstack 24
  4786                           
  4787                           ;LcTLCD.c: 301:     WaitForBusy();
  4788                           
  4789                           ;incstack = 0
  4790  001E30  ECEE  F00C         	call	_WaitForBusy	;wreg free
  4791                           
  4792                           ;LcTLCD.c: 302:     LcGotoXY(pointer, 0);
  4793  001E34  0E00               	movlw	0
  4794  001E36  6E62               	movwf	LcGotoXY@Row^0,c
  4795  001E38  5046               	movf	_pointer^0,w,c
  4796  001E3A  EF43  F00D         	goto	_LcGotoXY
  4797  001E3E                     __end_of_setLine:
  4798                           	callstack 0
  4799                           
  4800 ;; *************** function _readUser *****************
  4801 ;; Defined at:
  4802 ;;		line 380 in file "EEPROM.c"
  4803 ;; Parameters:    Size  Location     Type
  4804 ;;		None
  4805 ;; Auto vars:     Size  Location     Type
  4806 ;;  toRead          1    9[COMRAM] unsigned char 
  4807 ;; Return value:  Size  Location     Type
  4808 ;;                  1    wreg      unsigned char 
  4809 ;; Registers used:
  4810 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4811 ;; Tracked objects:
  4812 ;;		On entry : 0/0
  4813 ;;		On exit  : 0/0
  4814 ;;		Unchanged: 0/0
  4815 ;; Data sizes:     COMRAM   BANK0   BANK1
  4816 ;;      Params:         0       0       0
  4817 ;;      Locals:         1       0       0
  4818 ;;      Temps:          4       0       0
  4819 ;;      Totals:         5       0       0
  4820 ;;Total ram usage:        5 bytes
  4821 ;; Hardware stack levels used: 1
  4822 ;; Hardware stack levels required when called: 3
  4823 ;; This function calls:
  4824 ;;		_readFromROM
  4825 ;; This function is called by:
  4826 ;;		_motorLogic
  4827 ;; This function uses a non-reentrant model
  4828 ;;
  4829                           
  4830                           	psect	text19
  4831  001294                     __ptext19:
  4832                           	callstack 0
  4833  001294                     _readUser:
  4834                           	callstack 26
  4835                           
  4836                           ;EEPROM.c: 381:     char toRead;;EEPROM.c: 382:     if (flagReading == 3) {
  4837                           
  4838                           ;incstack = 0
  4839  001294  0E03               	movlw	3
  4840  001296  1817               	xorwf	_flagReading^0,w,c
  4841  001298  E103               	bnz	l6916
  4842                           
  4843                           ;EEPROM.c: 383:         flagReading = 2;
  4844  00129A  0E02               	movlw	2
  4845  00129C  6E17               	movwf	_flagReading^0,c
  4846                           
  4847                           ;EEPROM.c: 384:         position = 0;
  4848  00129E  6A1A               	clrf	_position@EEPROM$F1576^0,c
  4849  0012A0                     l6916:
  4850                           
  4851                           ;EEPROM.c: 387:     if (address == 0x18) {
  4852  0012A0  0E18               	movlw	24
  4853  0012A2  181E               	xorwf	_address^0,w,c
  4854  0012A4  E10A               	bnz	l6924
  4855                           
  4856                           ;EEPROM.c: 388:             address = 0x80;
  4857  0012A6  0E80               	movlw	128
  4858  0012A8  6E1E               	movwf	_address^0,c
  4859                           
  4860                           ;EEPROM.c: 389:             if (readFromROM() == 0xFF) {
  4861  0012AA  EC26  F00F         	call	_readFromROM	;wreg free
  4862  0012AE  0AFF               	xorlw	255
  4863  0012B0  E112               	bnz	l6936
  4864                           
  4865                           ;EEPROM.c: 390:                 flagReading = 1;
  4866  0012B2  0E01               	movlw	1
  4867  0012B4  6E17               	movwf	_flagReading^0,c
  4868                           
  4869                           ;EEPROM.c: 391:                 toRead = 1;
  4870  0012B6  6E5E               	movwf	readUser@toRead^0,c
  4871  0012B8  D00E               	goto	l6936
  4872  0012BA                     l6924:
  4873  0012BA  0E08               	movlw	8
  4874  0012BC  601A               	cpfslt	_position@EEPROM$F1576^0,c
  4875  0012BE  D00B               	goto	l6936
  4876                           
  4877                           ;EEPROM.c: 394:         userR[position] = readFromROM();
  4878  0012C0  D82F               	call	PL38	;call to abstracted procedure
  4879  0012C2  EC26  F00F         	call	_readFromROM	;wreg free
  4880  0012C6  6EDF               	movwf	indf2,c
  4881                           
  4882                           ;EEPROM.c: 395:         toRead = userR[position];
  4883  0012C8  D82B               	call	PL38	;call to abstracted procedure
  4884  0012CA  50DF               	movf	indf2,w,c
  4885  0012CC  6E5E               	movwf	readUser@toRead^0,c
  4886                           
  4887                           ;EEPROM.c: 396:         userR[position] = '\0';
  4888  0012CE  D828               	call	PL38	;call to abstracted procedure
  4889  0012D0  6ADF               	clrf	indf2,c
  4890                           
  4891                           ;EEPROM.c: 397:         address++;
  4892  0012D2  2A1E               	incf	_address^0,f,c
  4893                           
  4894                           ;EEPROM.c: 398:         position++;
  4895  0012D4  2A1A               	incf	_position@EEPROM$F1576^0,f,c
  4896  0012D6                     l6936:
  4897                           
  4898                           ;EEPROM.c: 401:     if (position == 8) {
  4899  0012D6  0E08               	movlw	8
  4900  0012D8  181A               	xorwf	_position@EEPROM$F1576^0,w,c
  4901  0012DA  E113               	bnz	l1204
  4902                           
  4903                           ;EEPROM.c: 402:         position = 0;
  4904  0012DC  6A1A               	clrf	_position@EEPROM$F1576^0,c
  4905                           
  4906                           ;EEPROM.c: 403:         if (address != 0x18 && address != newestUserAddress + 24) {
  4907  0012DE  0E18               	movlw	24
  4908  0012E0  181E               	xorwf	_address^0,w,c
  4909  0012E2  E008               	bz	l6946
  4910  0012E4  D810               	call	PL28	;call to abstracted procedure
  4911  0012E6  E103               	bnz	u8390
  4912  0012E8  505B               	movf	(??_readUser+1)^0,w,c
  4913  0012EA  185D               	xorwf	(??_readUser+3)^0,w,c
  4914  0012EC  E003               	bz	l6946
  4915  0012EE                     u8390:
  4916                           
  4917                           ;EEPROM.c: 404:             address = address - 24;
  4918  0012EE  0EE8               	movlw	232
  4919  0012F0  261E               	addwf	_address^0,f,c
  4920                           
  4921                           ;EEPROM.c: 405:         } else if (address == newestUserAddress + 24) {
  4922  0012F2  D007               	goto	l1204
  4923  0012F4                     l6946:
  4924  0012F4  D808               	call	PL28	;call to abstracted procedure
  4925  0012F6  E105               	bnz	l1204
  4926  0012F8  505B               	movf	(??_readUser+1)^0,w,c
  4927  0012FA  185D               	xorwf	(??_readUser+3)^0,w,c
  4928  0012FC  E102               	bnz	l1204
  4929                           
  4930                           ;EEPROM.c: 406:             flagReading = 1;
  4931  0012FE  0E01               	movlw	1
  4932  001300  6E17               	movwf	_flagReading^0,c
  4933  001302                     l1204:
  4934                           
  4935                           ;EEPROM.c: 411:     return toRead;
  4936  001302  505E               	movf	readUser@toRead^0,w,c
  4937  001304  0012               	return		;funcret
  4938  001306                     __end_of_readUser:
  4939                           	callstack 0
  4940  001306                     PL28:
  4941                           	callstack 26
  4942  001306  501E               	movf	_address^0,w,c
  4943  001308  6E5A               	movwf	??_readUser^0,c
  4944  00130A  6A5B               	clrf	(??_readUser+1)^0,c
  4945  00130C  5011               	movf	_newestUserAddress^0,w,c
  4946  00130E  6E5C               	movwf	(??_readUser+2)^0,c
  4947  001310  6A5D               	clrf	(??_readUser+3)^0,c
  4948  001312  0E18               	movlw	24
  4949  001314  265C               	addwf	(??_readUser+2)^0,f,c
  4950  001316  0E00               	movlw	0
  4951  001318  225D               	addwfc	(??_readUser+3)^0,f,c
  4952  00131A  505A               	movf	??_readUser^0,w,c
  4953  00131C  185C               	xorwf	(??_readUser+2)^0,w,c
  4954  00131E  0012               	return	
  4955  001320                     __end_ofPL28:
  4956                           	callstack 0
  4957  001320                     PL38:
  4958                           	callstack 27
  4959  001320  501A               	movf	_position@EEPROM$F1576^0,w,c
  4960  001322  0FC7               	addlw	low _userR
  4961  001324  6ED9               	movwf	fsr2l,c
  4962  001326  6ADA               	clrf	fsr2h,c
  4963  001328  0012               	return	
  4964  00132A                     __end_ofPL38:
  4965                           	callstack 0
  4966                           
  4967 ;; *************** function _readScore *****************
  4968 ;; Defined at:
  4969 ;;		line 424 in file "EEPROM.c"
  4970 ;; Parameters:    Size  Location     Type
  4971 ;;		None
  4972 ;; Auto vars:     Size  Location     Type
  4973 ;;  aux             1    9[COMRAM] unsigned char 
  4974 ;; Return value:  Size  Location     Type
  4975 ;;                  1    wreg      unsigned char 
  4976 ;; Registers used:
  4977 ;;		wreg, status,2, status,0, cstack
  4978 ;; Tracked objects:
  4979 ;;		On entry : 0/0
  4980 ;;		On exit  : 0/0
  4981 ;;		Unchanged: 0/0
  4982 ;; Data sizes:     COMRAM   BANK0   BANK1
  4983 ;;      Params:         0       0       0
  4984 ;;      Locals:         1       0       0
  4985 ;;      Temps:          0       0       0
  4986 ;;      Totals:         1       0       0
  4987 ;;Total ram usage:        1 bytes
  4988 ;; Hardware stack levels used: 1
  4989 ;; Hardware stack levels required when called: 3
  4990 ;; This function calls:
  4991 ;;		___lbdiv
  4992 ;;		___lbmod
  4993 ;;		_readFromROM
  4994 ;; This function is called by:
  4995 ;;		_motorLogic
  4996 ;; This function uses a non-reentrant model
  4997 ;;
  4998                           
  4999                           	psect	text20
  5000  001804                     __ptext20:
  5001                           	callstack 0
  5002  001804                     _readScore:
  5003                           	callstack 26
  5004                           
  5005                           ;EEPROM.c: 425:     char aux;;EEPROM.c: 426:     aux = readFromROM();
  5006                           
  5007                           ;incstack = 0
  5008  001804  EC26  F00F         	call	_readFromROM	;wreg free
  5009  001808  6E5E               	movwf	readScore@aux^0,c
  5010                           
  5011                           ;EEPROM.c: 427:     if (flagReading == 3) {
  5012  00180A  0E03               	movlw	3
  5013  00180C  1817               	xorwf	_flagReading^0,w,c
  5014  00180E  E109               	bnz	l6870
  5015                           
  5016                           ;EEPROM.c: 428:         flagReading = 4;
  5017  001810  0E04               	movlw	4
  5018  001812  6E17               	movwf	_flagReading^0,c
  5019                           
  5020                           ;EEPROM.c: 429:         return (aux / 10) + '0';
  5021  001814  0E0A               	movlw	10
  5022  001816  6E5A               	movwf	___lbdiv@divisor^0,c
  5023  001818  505E               	movf	readScore@aux^0,w,c
  5024  00181A  EC29  F00D         	call	___lbdiv
  5025  00181E  0F30               	addlw	48
  5026  001820  0012               	return	
  5027  001822                     l6870:
  5028  001822  0E04               	movlw	4
  5029  001824  1817               	xorwf	_flagReading^0,w,c
  5030  001826  E10A               	bnz	l6882
  5031                           
  5032                           ;EEPROM.c: 431:         flagReading = 2;
  5033  001828  0E02               	movlw	2
  5034  00182A  6E17               	movwf	_flagReading^0,c
  5035                           
  5036                           ;EEPROM.c: 432:         address++;
  5037  00182C  2A1E               	incf	_address^0,f,c
  5038                           
  5039                           ;EEPROM.c: 433:         return (aux % 10) + '0';
  5040  00182E  0E0A               	movlw	10
  5041  001830  6E5A               	movwf	___lbmod@divisor^0,c
  5042  001832  505E               	movf	readScore@aux^0,w,c
  5043  001834  ECF7  F00D         	call	___lbmod
  5044  001838  0F30               	addlw	48
  5045  00183A  0012               	return	
  5046  00183C                     l6882:
  5047  00183C  0E02               	movlw	2
  5048  00183E  1817               	xorwf	_flagReading^0,w,c
  5049  001840  A4D8               	btfss	status,2,c
  5050  001842  0012               	return	
  5051                           
  5052                           ;EEPROM.c: 435:         address++;
  5053  001844  2A1E               	incf	_address^0,f,c
  5054                           
  5055                           ;EEPROM.c: 436:         return aux;
  5056  001846  505E               	movf	readScore@aux^0,w,c
  5057  001848  0012               	return		;funcret
  5058  00184A                     __end_of_readScore:
  5059                           	callstack 0
  5060                           
  5061 ;; *************** function ___lbdiv *****************
  5062 ;; Defined at:
  5063 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\lbdiv.c"
  5064 ;; Parameters:    Size  Location     Type
  5065 ;;  dividend        1    wreg     unsigned char 
  5066 ;;  divisor         1    5[COMRAM] unsigned char 
  5067 ;; Auto vars:     Size  Location     Type
  5068 ;;  dividend        1    6[COMRAM] unsigned char 
  5069 ;;  quotient        1    8[COMRAM] unsigned char 
  5070 ;;  counter         1    7[COMRAM] unsigned char 
  5071 ;; Return value:  Size  Location     Type
  5072 ;;                  1    wreg      unsigned char 
  5073 ;; Registers used:
  5074 ;;		wreg, status,2, status,0
  5075 ;; Tracked objects:
  5076 ;;		On entry : 0/0
  5077 ;;		On exit  : 0/0
  5078 ;;		Unchanged: 0/0
  5079 ;; Data sizes:     COMRAM   BANK0   BANK1
  5080 ;;      Params:         1       0       0
  5081 ;;      Locals:         3       0       0
  5082 ;;      Temps:          0       0       0
  5083 ;;      Totals:         4       0       0
  5084 ;;Total ram usage:        4 bytes
  5085 ;; Hardware stack levels used: 1
  5086 ;; Hardware stack levels required when called: 2
  5087 ;; This function calls:
  5088 ;;		Nothing
  5089 ;; This function is called by:
  5090 ;;		_motorLogic
  5091 ;;		_readScore
  5092 ;; This function uses a non-reentrant model
  5093 ;;
  5094                           
  5095                           	psect	text21
  5096  001A52                     __ptext21:
  5097                           	callstack 0
  5098  001A52                     ___lbdiv:
  5099                           	callstack 26
  5100                           
  5101                           ;incstack = 0
  5102                           ;___lbdiv@dividend stored from wreg
  5103  001A52  6E5B               	movwf	___lbdiv@dividend^0,c
  5104  001A54  6A5D               	clrf	___lbdiv@quotient^0,c
  5105  001A56  505A               	movf	___lbdiv@divisor^0,w,c
  5106  001A58  E014               	bz	l6488
  5107  001A5A  0E01               	movlw	1
  5108  001A5C  6E5C               	movwf	___lbdiv@counter^0,c
  5109  001A5E  D003               	goto	l6476
  5110  001A60                     l6472:
  5111  001A60  90D8               	bcf	status,0,c
  5112  001A62  365A               	rlcf	___lbdiv@divisor^0,f,c
  5113  001A64  2A5C               	incf	___lbdiv@counter^0,f,c
  5114  001A66                     l6476:
  5115  001A66  AE5A               	btfss	___lbdiv@divisor^0,7,c
  5116  001A68  D7FB               	goto	l6472
  5117  001A6A                     u7530:
  5118  001A6A  90D8               	bcf	status,0,c
  5119  001A6C  365D               	rlcf	___lbdiv@quotient^0,f,c
  5120  001A6E  505A               	movf	___lbdiv@divisor^0,w,c
  5121  001A70  5C5B               	subwf	___lbdiv@dividend^0,w,c
  5122  001A72  E303               	bnc	l6484
  5123  001A74  505A               	movf	___lbdiv@divisor^0,w,c
  5124  001A76  5E5B               	subwf	___lbdiv@dividend^0,f,c
  5125  001A78  805D               	bsf	___lbdiv@quotient^0,0,c
  5126  001A7A                     l6484:
  5127  001A7A  90D8               	bcf	status,0,c
  5128  001A7C  325A               	rrcf	___lbdiv@divisor^0,f,c
  5129  001A7E  2E5C               	decfsz	___lbdiv@counter^0,f,c
  5130  001A80  D7F4               	goto	u7530
  5131  001A82                     l6488:
  5132  001A82  505D               	movf	___lbdiv@quotient^0,w,c
  5133  001A84  0012               	return		;funcret
  5134  001A86                     __end_of___lbdiv:
  5135                           	callstack 0
  5136                           
  5137 ;; *************** function _login *****************
  5138 ;; Defined at:
  5139 ;;		line 290 in file "EEPROM.c"
  5140 ;; Parameters:    Size  Location     Type
  5141 ;;  userInput       1    5[COMRAM] PTR unsigned char 
  5142 ;;		 -> user(8), 
  5143 ;;  passInput       1    6[COMRAM] PTR unsigned char 
  5144 ;;		 -> pass(8), 
  5145 ;; Auto vars:     Size  Location     Type
  5146 ;;		None
  5147 ;; Return value:  Size  Location     Type
  5148 ;;                  1    wreg      unsigned char 
  5149 ;; Registers used:
  5150 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  5151 ;; Tracked objects:
  5152 ;;		On entry : 0/0
  5153 ;;		On exit  : 0/0
  5154 ;;		Unchanged: 0/0
  5155 ;; Data sizes:     COMRAM   BANK0   BANK1
  5156 ;;      Params:         2       0       0
  5157 ;;      Locals:         0       0       0
  5158 ;;      Temps:          0       0       0
  5159 ;;      Totals:         2       0       0
  5160 ;;Total ram usage:        2 bytes
  5161 ;; Hardware stack levels used: 1
  5162 ;; Hardware stack levels required when called: 2
  5163 ;; This function calls:
  5164 ;;		Nothing
  5165 ;; This function is called by:
  5166 ;;		_motorLogic
  5167 ;; This function uses a non-reentrant model
  5168 ;;
  5169                           
  5170                           	psect	text22
  5171  0018D4                     __ptext22:
  5172                           	callstack 0
  5173  0018D4                     _login:
  5174                           	callstack 27
  5175                           
  5176                           ;EEPROM.c: 291:     if(position < 8 && checkUser == 0) {
  5177                           
  5178                           ;incstack = 0
  5179  0018D4  0E08               	movlw	8
  5180  0018D6  601A               	cpfslt	_position@EEPROM$F1576^0,c
  5181  0018D8  D012               	goto	l6828
  5182  0018DA  5018               	movf	_checkUser^0,w,c
  5183  0018DC  E110               	bnz	l6828
  5184                           
  5185                           ;EEPROM.c: 292:         userInputROM[position] = userInput[position];
  5186  0018DE  505A               	movf	login@userInput^0,w,c
  5187  0018E0  241A               	addwf	_position@EEPROM$F1576^0,w,c
  5188  0018E2  EC5E  F00C         	call	PL40	;call to abstracted procedure
  5189                           
  5190                           ;EEPROM.c: 293:         passInputROM[position] = passInput[position];
  5191  0018E6  505B               	movf	login@passInput^0,w,c
  5192  0018E8  241A               	addwf	_position@EEPROM$F1576^0,w,c
  5193  0018EA  6ED9               	movwf	fsr2l,c
  5194  0018EC  6ADA               	clrf	fsr2h,c
  5195  0018EE  501A               	movf	_position@EEPROM$F1576^0,w,c
  5196  0018F0  0FAF               	addlw	low _passInputROM
  5197  0018F2  6EE1               	movwf	fsr1l,c
  5198  0018F4  6AE2               	clrf	fsr1h,c
  5199  0018F6  CFDF FFE7          	movff	indf2,indf1
  5200                           
  5201                           ;EEPROM.c: 294:         position++;
  5202  0018FA  2A1A               	incf	_position@EEPROM$F1576^0,f,c
  5203                           
  5204                           ;EEPROM.c: 295:     }
  5205  0018FC  0C00               	retlw	0
  5206  0018FE                     l6828:
  5207                           
  5208                           ;EEPROM.c: 297:         if (flagReading != 0 && checkUser == 0) {
  5209  0018FE  5017               	movf	_flagReading^0,w,c
  5210  001900  E005               	bz	l6834
  5211  001902  5018               	movf	_checkUser^0,w,c
  5212  001904  E103               	bnz	l6834
  5213                           
  5214                           ;EEPROM.c: 298:             checkUser = 1;
  5215  001906  0E01               	movlw	1
  5216  001908  6E18               	movwf	_checkUser^0,c
  5217                           
  5218                           ;EEPROM.c: 299:         }
  5219  00190A  0C00               	retlw	0
  5220  00190C                     l6834:
  5221                           
  5222                           ;EEPROM.c: 301:             if (checkUser == 2) {
  5223  00190C  0E02               	movlw	2
  5224  00190E  1818               	xorwf	_checkUser^0,w,c
  5225  001910  E102               	bnz	l6842
  5226                           
  5227                           ;EEPROM.c: 302:                 checkUser = 0;
  5228                           
  5229                           ;EEPROM.c: 303:                 return flagReading;
  5230  001912  EF67  F00C         	goto	PL100	;call to abstracted procedure
  5231  001916                     l6842:
  5232                           
  5233                           ;EEPROM.c: 308:     return 0;
  5234  001916  0C00               	retlw	0	;funcret
  5235  001918                     __end_of_login:
  5236                           	callstack 0
  5237                           
  5238 ;; *************** function _getNumUsers *****************
  5239 ;; Defined at:
  5240 ;;		line 335 in file "EEPROM.c"
  5241 ;; Parameters:    Size  Location     Type
  5242 ;;		None
  5243 ;; Auto vars:     Size  Location     Type
  5244 ;;		None
  5245 ;; Return value:  Size  Location     Type
  5246 ;;                  1    wreg      unsigned char 
  5247 ;; Registers used:
  5248 ;;		wreg, status,2, status,0
  5249 ;; Tracked objects:
  5250 ;;		On entry : 0/0
  5251 ;;		On exit  : 0/0
  5252 ;;		Unchanged: 0/0
  5253 ;; Data sizes:     COMRAM   BANK0   BANK1
  5254 ;;      Params:         0       0       0
  5255 ;;      Locals:         0       0       0
  5256 ;;      Temps:          0       0       0
  5257 ;;      Totals:         0       0       0
  5258 ;;Total ram usage:        0 bytes
  5259 ;; Hardware stack levels used: 1
  5260 ;; Hardware stack levels required when called: 2
  5261 ;; This function calls:
  5262 ;;		Nothing
  5263 ;; This function is called by:
  5264 ;;		_motorLogic
  5265 ;; This function uses a non-reentrant model
  5266 ;;
  5267                           
  5268                           	psect	text23
  5269  001E66                     __ptext23:
  5270                           	callstack 0
  5271  001E66                     _getNumUsers:
  5272                           	callstack 27
  5273                           
  5274                           ;EEPROM.c: 336:     if (users > 8) return 8;
  5275                           
  5276                           ;incstack = 0
  5277  001E66  0E08               	movlw	8
  5278  001E68  641D               	cpfsgt	_users^0,c
  5279  001E6A  D001               	goto	l6906
  5280  001E6C  0C08               	retlw	8
  5281  001E6E                     l6906:
  5282                           
  5283                           ;EEPROM.c: 337:     return users;
  5284  001E6E  501D               	movf	_users^0,w,c
  5285  001E70  0012               	return		;funcret
  5286  001E72                     __end_of_getNumUsers:
  5287                           	callstack 0
  5288                           
  5289 ;; *************** function _getFlag *****************
  5290 ;; Defined at:
  5291 ;;		line 331 in file "EEPROM.c"
  5292 ;; Parameters:    Size  Location     Type
  5293 ;;		None
  5294 ;; Auto vars:     Size  Location     Type
  5295 ;;		None
  5296 ;; Return value:  Size  Location     Type
  5297 ;;                  1    wreg      unsigned char 
  5298 ;; Registers used:
  5299 ;;		wreg, status,2
  5300 ;; Tracked objects:
  5301 ;;		On entry : 0/0
  5302 ;;		On exit  : 0/0
  5303 ;;		Unchanged: 0/0
  5304 ;; Data sizes:     COMRAM   BANK0   BANK1
  5305 ;;      Params:         0       0       0
  5306 ;;      Locals:         0       0       0
  5307 ;;      Temps:          0       0       0
  5308 ;;      Totals:         0       0       0
  5309 ;;Total ram usage:        0 bytes
  5310 ;; Hardware stack levels used: 1
  5311 ;; Hardware stack levels required when called: 2
  5312 ;; This function calls:
  5313 ;;		Nothing
  5314 ;; This function is called by:
  5315 ;;		_motorLogic
  5316 ;; This function uses a non-reentrant model
  5317 ;;
  5318                           
  5319                           	psect	text24
  5320  001EE4                     __ptext24:
  5321                           	callstack 0
  5322  001EE4                     _getFlag:
  5323                           	callstack 27
  5324                           
  5325                           ;EEPROM.c: 332:     return flagReading;
  5326                           
  5327                           ;incstack = 0
  5328  001EE4  5017               	movf	_flagReading^0,w,c
  5329  001EE6  0012               	return		;funcret
  5330  001EE8                     __end_of_getFlag:
  5331                           	callstack 0
  5332                           
  5333 ;; *************** function _doneWritingROM *****************
  5334 ;; Defined at:
  5335 ;;		line 369 in file "EEPROM.c"
  5336 ;; Parameters:    Size  Location     Type
  5337 ;;		None
  5338 ;; Auto vars:     Size  Location     Type
  5339 ;;		None
  5340 ;; Return value:  Size  Location     Type
  5341 ;;                  1    wreg      unsigned char 
  5342 ;; Registers used:
  5343 ;;		wreg, status,2
  5344 ;; Tracked objects:
  5345 ;;		On entry : 0/0
  5346 ;;		On exit  : 0/0
  5347 ;;		Unchanged: 0/0
  5348 ;; Data sizes:     COMRAM   BANK0   BANK1
  5349 ;;      Params:         0       0       0
  5350 ;;      Locals:         0       0       0
  5351 ;;      Temps:          0       0       0
  5352 ;;      Totals:         0       0       0
  5353 ;;Total ram usage:        0 bytes
  5354 ;; Hardware stack levels used: 1
  5355 ;; Hardware stack levels required when called: 2
  5356 ;; This function calls:
  5357 ;;		Nothing
  5358 ;; This function is called by:
  5359 ;;		_motorLogic
  5360 ;; This function uses a non-reentrant model
  5361 ;;
  5362                           
  5363                           	psect	text25
  5364  001EE8                     __ptext25:
  5365                           	callstack 0
  5366  001EE8                     _doneWritingROM:
  5367                           	callstack 27
  5368                           
  5369                           ;EEPROM.c: 370:     return done;
  5370                           
  5371                           ;incstack = 0
  5372  001EE8  5012               	movf	_done^0,w,c
  5373  001EEA  0012               	return		;funcret
  5374  001EEC                     __end_of_doneWritingROM:
  5375                           	callstack 0
  5376                           
  5377 ;; *************** function _compare *****************
  5378 ;; Defined at:
  5379 ;;		line 340 in file "EEPROM.c"
  5380 ;; Parameters:    Size  Location     Type
  5381 ;;  a               1    5[COMRAM] PTR unsigned char 
  5382 ;;		 -> passInputROM(8), userInputROM(8), readAux(8), 
  5383 ;;  b               1    6[COMRAM] PTR unsigned char 
  5384 ;;		 -> passR(8), userR(8), user(8), 
  5385 ;; Auto vars:     Size  Location     Type
  5386 ;;		None
  5387 ;; Return value:  Size  Location     Type
  5388 ;;                  1    wreg      unsigned char 
  5389 ;; Registers used:
  5390 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  5391 ;; Tracked objects:
  5392 ;;		On entry : 0/0
  5393 ;;		On exit  : 0/0
  5394 ;;		Unchanged: 0/0
  5395 ;; Data sizes:     COMRAM   BANK0   BANK1
  5396 ;;      Params:         2       0       0
  5397 ;;      Locals:         0       0       0
  5398 ;;      Temps:          2       0       0
  5399 ;;      Totals:         4       0       0
  5400 ;;Total ram usage:        4 bytes
  5401 ;; Hardware stack levels used: 1
  5402 ;; Hardware stack levels required when called: 2
  5403 ;; This function calls:
  5404 ;;		Nothing
  5405 ;; This function is called by:
  5406 ;;		_motorLogic
  5407 ;;		_motorROM
  5408 ;; This function uses a non-reentrant model
  5409 ;;
  5410                           
  5411                           	psect	text26
  5412  001ABA                     __ptext26:
  5413                           	callstack 0
  5414  001ABA                     _compare:
  5415                           	callstack 27
  5416                           
  5417                           ;EEPROM.c: 341:  if (flagReading != 0) {
  5418                           
  5419                           ;incstack = 0
  5420  001ABA  5017               	movf	_flagReading^0,w,c
  5421  001ABC  E002               	bz	l6956
  5422                           
  5423                           ;EEPROM.c: 342:   flagReading = 0;
  5424  001ABE  6A17               	clrf	_flagReading^0,c
  5425                           
  5426                           ;EEPROM.c: 343:   pointer = 0;
  5427  001AC0  6A16               	clrf	_pointer@EEPROM$F1581^0,c
  5428  001AC2                     l6956:
  5429                           
  5430                           ;EEPROM.c: 350:   if (a[pointer] == b[pointer]) {
  5431  001AC2  505B               	movf	compare@b^0,w,c
  5432  001AC4  2416               	addwf	_pointer@EEPROM$F1581^0,w,c
  5433  001AC6  6ED9               	movwf	fsr2l,c
  5434  001AC8  6ADA               	clrf	fsr2h,c
  5435  001ACA  505A               	movf	compare@a^0,w,c
  5436  001ACC  2416               	addwf	_pointer@EEPROM$F1581^0,w,c
  5437  001ACE  6EE1               	movwf	fsr1l,c
  5438  001AD0  6AE2               	clrf	fsr1h,c
  5439  001AD2  50DE               	movf	postinc2,w,c
  5440  001AD4  18E6               	xorwf	postinc1,w,c
  5441  001AD6  E106               	bnz	l6964
  5442                           
  5443                           ;EEPROM.c: 351:    pointer++;
  5444  001AD8  2A16               	incf	_pointer@EEPROM$F1581^0,f,c
  5445                           
  5446                           ;EEPROM.c: 352:             if(pointer == 8) flagReading = 1;
  5447  001ADA  0E08               	movlw	8
  5448  001ADC  1816               	xorwf	_pointer@EEPROM$F1581^0,w,c
  5449  001ADE  E104               	bnz	l1185
  5450  001AE0  0E01               	movlw	1
  5451  001AE2  D001               	goto	L10
  5452  001AE4                     l6964:
  5453                           
  5454                           ;EEPROM.c: 355:    flagReading = 2;
  5455  001AE4  0E02               	movlw	2
  5456  001AE6                     L10:
  5457  001AE6  6E17               	movwf	_flagReading^0,c
  5458  001AE8                     l1185:
  5459                           
  5460                           ;EEPROM.c: 358:  return flagReading;
  5461  001AE8  5017               	movf	_flagReading^0,w,c
  5462  001AEA  0012               	return		;funcret
  5463  001AEC                     __end_of_compare:
  5464                           	callstack 0
  5465                           
  5466 ;; *************** function _anotherScore *****************
  5467 ;; Defined at:
  5468 ;;		line 419 in file "EEPROM.c"
  5469 ;; Parameters:    Size  Location     Type
  5470 ;;		None
  5471 ;; Auto vars:     Size  Location     Type
  5472 ;;		None
  5473 ;; Return value:  Size  Location     Type
  5474 ;;                  1    wreg      void 
  5475 ;; Registers used:
  5476 ;;		wreg, status,2, status,0
  5477 ;; Tracked objects:
  5478 ;;		On entry : 0/0
  5479 ;;		On exit  : 0/0
  5480 ;;		Unchanged: 0/0
  5481 ;; Data sizes:     COMRAM   BANK0   BANK1
  5482 ;;      Params:         0       0       0
  5483 ;;      Locals:         0       0       0
  5484 ;;      Temps:          0       0       0
  5485 ;;      Totals:         0       0       0
  5486 ;;Total ram usage:        0 bytes
  5487 ;; Hardware stack levels used: 1
  5488 ;; Hardware stack levels required when called: 2
  5489 ;; This function calls:
  5490 ;;		Nothing
  5491 ;; This function is called by:
  5492 ;;		_motorLogic
  5493 ;; This function uses a non-reentrant model
  5494 ;;
  5495                           
  5496                           	psect	text27
  5497  001E72                     __ptext27:
  5498                           	callstack 0
  5499  001E72                     _anotherScore:
  5500                           	callstack 27
  5501                           
  5502                           ;EEPROM.c: 420:     address = address + 7;
  5503                           
  5504                           ;incstack = 0
  5505  001E72  0E07               	movlw	7
  5506  001E74  261E               	addwf	_address^0,f,c
  5507                           
  5508                           ;EEPROM.c: 421:     flagReading = 3;
  5509  001E76  D000               	goto	PL90	;call to abstracted procedure
  5510  001E78                     __end_of_anotherScore:
  5511                           	callstack 0
  5512  001E78                     PL90:
  5513                           	callstack 26
  5514  001E78  0E03               	movlw	3
  5515  001E7A  6E17               	movwf	_flagReading^0,c
  5516  001E7C  0C03               	retlw	3	;funcret
  5517  001E7E                     __end_ofPL90:
  5518                           	callstack 0
  5519                           
  5520 ;; *************** function _TimResetTime *****************
  5521 ;; Defined at:
  5522 ;;		line 151 in file "Time.c"
  5523 ;; Parameters:    Size  Location     Type
  5524 ;;		None
  5525 ;; Auto vars:     Size  Location     Type
  5526 ;;		None
  5527 ;; Return value:  Size  Location     Type
  5528 ;;                  1    wreg      void 
  5529 ;; Registers used:
  5530 ;;		wreg, status,2
  5531 ;; Tracked objects:
  5532 ;;		On entry : 0/0
  5533 ;;		On exit  : 0/0
  5534 ;;		Unchanged: 0/0
  5535 ;; Data sizes:     COMRAM   BANK0   BANK1
  5536 ;;      Params:         0       0       0
  5537 ;;      Locals:         0       0       0
  5538 ;;      Temps:          0       0       0
  5539 ;;      Totals:         0       0       0
  5540 ;;Total ram usage:        0 bytes
  5541 ;; Hardware stack levels used: 1
  5542 ;; Hardware stack levels required when called: 2
  5543 ;; This function calls:
  5544 ;;		Nothing
  5545 ;; This function is called by:
  5546 ;;		_motorLogic
  5547 ;; This function uses a non-reentrant model
  5548 ;;
  5549                           
  5550                           	psect	text28
  5551  001E7E                     __ptext28:
  5552                           	callstack 0
  5553  001E7E                     _TimResetTime:
  5554                           	callstack 27
  5555                           
  5556                           ;Time.c: 152:     initSecs[0] = 0;
  5557                           
  5558                           ;incstack = 0
  5559  001E7E  6A03               	clrf	_initSecs^0,c
  5560                           
  5561                           ;Time.c: 153:     initSecs[1] = 0;
  5562  001E80  6A04               	clrf	(_initSecs+1)^0,c
  5563                           
  5564                           ;Time.c: 154:     initMins[0] = 0;
  5565  001E82  6A75               	clrf	_initMins^0,c
  5566                           
  5567                           ;Time.c: 155:     initMins[1] = 3;
  5568  001E84  0E03               	movlw	3
  5569  001E86  6E76               	movwf	(_initMins+1)^0,c
  5570  001E88  0C03               	retlw	3	;funcret
  5571  001E8A                     __end_of_TimResetTime:
  5572                           	callstack 0
  5573                           
  5574 ;; *************** function _TimModifyTime *****************
  5575 ;; Defined at:
  5576 ;;		line 134 in file "Time.c"
  5577 ;; Parameters:    Size  Location     Type
  5578 ;;  newTime         1    wreg     unsigned char 
  5579 ;;  position        1   20[COMRAM] unsigned char 
  5580 ;; Auto vars:     Size  Location     Type
  5581 ;;  newTime         1   26[COMRAM] unsigned char 
  5582 ;; Return value:  Size  Location     Type
  5583 ;;                  1    wreg      void 
  5584 ;; Registers used:
  5585 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5586 ;; Tracked objects:
  5587 ;;		On entry : 0/0
  5588 ;;		On exit  : 0/0
  5589 ;;		Unchanged: 0/0
  5590 ;; Data sizes:     COMRAM   BANK0   BANK1
  5591 ;;      Params:         1       0       0
  5592 ;;      Locals:         1       0       0
  5593 ;;      Temps:          5       0       0
  5594 ;;      Totals:         7       0       0
  5595 ;;Total ram usage:        7 bytes
  5596 ;; Hardware stack levels used: 1
  5597 ;; Hardware stack levels required when called: 6
  5598 ;; This function calls:
  5599 ;;		_LcPutChar
  5600 ;; This function is called by:
  5601 ;;		_motorLogic
  5602 ;; This function uses a non-reentrant model
  5603 ;;
  5604                           
  5605                           	psect	text29
  5606  0015DA                     __ptext29:
  5607                           	callstack 0
  5608  0015DA                     _TimModifyTime:
  5609                           	callstack 23
  5610                           
  5611                           ;incstack = 0
  5612                           ;TimModifyTime@newTime stored from wreg
  5613  0015DA  6E6F               	movwf	TimModifyTime@newTime^0,c
  5614                           
  5615                           ;Time.c: 135:     if(position < 2) {
  5616  0015DC  0E02               	movlw	2
  5617  0015DE  6069               	cpfslt	TimModifyTime@position^0,c
  5618  0015E0  D00F               	goto	l6760
  5619                           
  5620                           ;Time.c: 136:         initMins[!position] = newTime - '0';
  5621  0015E2  5069               	movf	TimModifyTime@position^0,w,c
  5622  0015E4  E103               	bnz	u8070
  5623  0015E6  6A6A               	clrf	??_TimModifyTime^0,c
  5624  0015E8  2A6A               	incf	??_TimModifyTime^0,f,c
  5625  0015EA  D001               	goto	u8088
  5626  0015EC                     u8070:
  5627  0015EC  6A6A               	clrf	??_TimModifyTime^0,c
  5628  0015EE                     u8088:
  5629  0015EE  506A               	movf	??_TimModifyTime^0,w,c
  5630  0015F0  0F75               	addlw	low _initMins
  5631  0015F2  D81A               	call	PL66	;call to abstracted procedure
  5632                           
  5633                           ;Time.c: 137:         if(position == 1) LcPutChar(':');
  5634  0015F4  0469               	decf	TimModifyTime@position^0,w,c
  5635  0015F6  A4D8               	btfss	status,2,c
  5636  0015F8  0012               	return	
  5637  0015FA  0E3A               	movlw	58
  5638  0015FC  EF76  F00D         	goto	_LcPutChar
  5639  001600                     l6760:
  5640                           
  5641                           ;Time.c: 140:         initSecs[!(position - 2)] = newTime - '0';
  5642  001600  0EFE               	movlw	254
  5643  001602  6E6A               	movwf	??_TimModifyTime^0,c
  5644  001604  686B               	setf	(??_TimModifyTime+1)^0,c
  5645  001606  5069               	movf	TimModifyTime@position^0,w,c
  5646  001608  6E6C               	movwf	(??_TimModifyTime+2)^0,c
  5647  00160A  6A6D               	clrf	(??_TimModifyTime+3)^0,c
  5648  00160C  506A               	movf	??_TimModifyTime^0,w,c
  5649  00160E  266C               	addwf	(??_TimModifyTime+2)^0,f,c
  5650  001610  506B               	movf	(??_TimModifyTime+1)^0,w,c
  5651  001612  226D               	addwfc	(??_TimModifyTime+3)^0,f,c
  5652  001614  506C               	movf	(??_TimModifyTime+2)^0,w,c
  5653  001616  106D               	iorwf	(??_TimModifyTime+3)^0,w,c
  5654  001618  E103               	bnz	u8100
  5655  00161A  6A6E               	clrf	(??_TimModifyTime+4)^0,c
  5656  00161C  2A6E               	incf	(??_TimModifyTime+4)^0,f,c
  5657  00161E  D001               	goto	u8118
  5658  001620                     u8100:
  5659  001620  6A6E               	clrf	(??_TimModifyTime+4)^0,c
  5660  001622                     u8118:
  5661  001622  506E               	movf	(??_TimModifyTime+4)^0,w,c
  5662  001624  0F03               	addlw	low _initSecs
  5663  001626  D000               	goto	PL66	;call to abstracted procedure
  5664  001628                     __end_of_TimModifyTime:
  5665                           	callstack 0
  5666  001628                     PL66:
  5667                           	callstack 23
  5668  001628  6ED9               	movwf	fsr2l,c
  5669  00162A  6ADA               	clrf	fsr2h,c
  5670  00162C  506F               	movf	TimModifyTime@newTime^0,w,c
  5671  00162E  0FD0               	addlw	208
  5672  001630  6EDF               	movwf	indf2,c
  5673  001632  0012               	return	
  5674  001634                     __end_ofPL66:
  5675                           	callstack 0
  5676                           
  5677 ;; *************** function _TimGetEndTime *****************
  5678 ;; Defined at:
  5679 ;;		line 144 in file "Time.c"
  5680 ;; Parameters:    Size  Location     Type
  5681 ;;  endPosition     1    wreg     unsigned char 
  5682 ;; Auto vars:     Size  Location     Type
  5683 ;;  endPosition     1   10[COMRAM] unsigned char 
  5684 ;; Return value:  Size  Location     Type
  5685 ;;                  1    wreg      unsigned char 
  5686 ;; Registers used:
  5687 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  5688 ;; Tracked objects:
  5689 ;;		On entry : 0/0
  5690 ;;		On exit  : 0/0
  5691 ;;		Unchanged: 0/0
  5692 ;; Data sizes:     COMRAM   BANK0   BANK1
  5693 ;;      Params:         0       0       0
  5694 ;;      Locals:         1       0       0
  5695 ;;      Temps:          5       0       0
  5696 ;;      Totals:         6       0       0
  5697 ;;Total ram usage:        6 bytes
  5698 ;; Hardware stack levels used: 1
  5699 ;; Hardware stack levels required when called: 2
  5700 ;; This function calls:
  5701 ;;		Nothing
  5702 ;; This function is called by:
  5703 ;;		_motorLogic
  5704 ;; This function uses a non-reentrant model
  5705 ;;
  5706                           
  5707                           	psect	text30
  5708  001726                     __ptext30:
  5709                           	callstack 0
  5710  001726                     _TimGetEndTime:
  5711                           	callstack 27
  5712                           
  5713                           ;incstack = 0
  5714                           ;TimGetEndTime@endPosition stored from wreg
  5715  001726  6E5F               	movwf	TimGetEndTime@endPosition^0,c
  5716                           
  5717                           ;Time.c: 145:     if(endPosition < 2) {
  5718  001728  0E02               	movlw	2
  5719  00172A  605F               	cpfslt	TimGetEndTime@endPosition^0,c
  5720  00172C  D009               	goto	l6768
  5721                           
  5722                           ;Time.c: 146:         return (curMins[(endPosition == 0)] + '0');
  5723  00172E  505F               	movf	TimGetEndTime@endPosition^0,w,c
  5724  001730  E103               	bnz	u8130
  5725  001732  6A5A               	clrf	??_TimGetEndTime^0,c
  5726  001734  2A5A               	incf	??_TimGetEndTime^0,f,c
  5727  001736  D001               	goto	u8148
  5728  001738                     u8130:
  5729  001738  6A5A               	clrf	??_TimGetEndTime^0,c
  5730  00173A                     u8148:
  5731  00173A  505A               	movf	??_TimGetEndTime^0,w,c
  5732  00173C  0F05               	addlw	low _curMins
  5733  00173E  D014               	goto	PL62	;call to abstracted procedure
  5734  001740                     l6768:
  5735                           
  5736                           ;Time.c: 148:     return (curSecs[((endPosition - 2) == 0)] + '0');
  5737  001740  0EFE               	movlw	254
  5738  001742  6E5A               	movwf	??_TimGetEndTime^0,c
  5739  001744  685B               	setf	(??_TimGetEndTime+1)^0,c
  5740  001746  505F               	movf	TimGetEndTime@endPosition^0,w,c
  5741  001748  6E5C               	movwf	(??_TimGetEndTime+2)^0,c
  5742  00174A  6A5D               	clrf	(??_TimGetEndTime+3)^0,c
  5743  00174C  505A               	movf	??_TimGetEndTime^0,w,c
  5744  00174E  265C               	addwf	(??_TimGetEndTime+2)^0,f,c
  5745  001750  505B               	movf	(??_TimGetEndTime+1)^0,w,c
  5746  001752  225D               	addwfc	(??_TimGetEndTime+3)^0,f,c
  5747  001754  505C               	movf	(??_TimGetEndTime+2)^0,w,c
  5748  001756  105D               	iorwf	(??_TimGetEndTime+3)^0,w,c
  5749  001758  E103               	bnz	u8150
  5750  00175A  6A5E               	clrf	(??_TimGetEndTime+4)^0,c
  5751  00175C  2A5E               	incf	(??_TimGetEndTime+4)^0,f,c
  5752  00175E  D001               	goto	u8168
  5753  001760                     u8150:
  5754  001760  6A5E               	clrf	(??_TimGetEndTime+4)^0,c
  5755  001762                     u8168:
  5756  001762  505E               	movf	(??_TimGetEndTime+4)^0,w,c
  5757  001764  0F07               	addlw	low _curSecs
  5758  001766  D000               	goto	PL62	;call to abstracted procedure
  5759  001768                     __end_of_TimGetEndTime:
  5760                           	callstack 0
  5761  001768                     PL62:
  5762                           	callstack 27
  5763  001768  6ED9               	movwf	fsr2l,c
  5764  00176A  6ADA               	clrf	fsr2h,c
  5765  00176C  50DF               	movf	indf2,w,c
  5766  00176E  0F30               	addlw	48
  5767  001770  0012               	return	
  5768  001772                     __end_ofPL62:
  5769                           	callstack 0
  5770                           
  5771 ;; *************** function _TimEnableTime *****************
  5772 ;; Defined at:
  5773 ;;		line 121 in file "Time.c"
  5774 ;; Parameters:    Size  Location     Type
  5775 ;;		None
  5776 ;; Auto vars:     Size  Location     Type
  5777 ;;		None
  5778 ;; Return value:  Size  Location     Type
  5779 ;;                  1    wreg      void 
  5780 ;; Registers used:
  5781 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5782 ;; Tracked objects:
  5783 ;;		On entry : 0/0
  5784 ;;		On exit  : 0/0
  5785 ;;		Unchanged: 0/0
  5786 ;; Data sizes:     COMRAM   BANK0   BANK1
  5787 ;;      Params:         0       0       0
  5788 ;;      Locals:         0       0       0
  5789 ;;      Temps:          0       0       0
  5790 ;;      Totals:         0       0       0
  5791 ;;Total ram usage:        0 bytes
  5792 ;; Hardware stack levels used: 1
  5793 ;; Hardware stack levels required when called: 3
  5794 ;; This function calls:
  5795 ;;		_TiResetTics
  5796 ;; This function is called by:
  5797 ;;		_motorLogic
  5798 ;; This function uses a non-reentrant model
  5799 ;;
  5800                           
  5801                           	psect	text31
  5802  001D1E                     __ptext31:
  5803                           	callstack 0
  5804  001D1E                     _TimEnableTime:
  5805                           	callstack 26
  5806                           
  5807                           ;Time.c: 122:     curSecs[0] = initSecs[0];
  5808                           
  5809                           ;incstack = 0
  5810  001D1E  C003  F007         	movff	_initSecs,_curSecs
  5811                           
  5812                           ;Time.c: 123:     curSecs[1] = initSecs[1];
  5813  001D22  C004  F008         	movff	_initSecs+1,_curSecs+1
  5814                           
  5815                           ;Time.c: 124:     curMins[0] = initMins[0];
  5816  001D26  C075  F005         	movff	_initMins,_curMins
  5817                           
  5818                           ;Time.c: 125:     curMins[1] = initMins[1];
  5819  001D2A  C076  F006         	movff	_initMins+1,_curMins+1
  5820                           
  5821                           ;Time.c: 126:     status = 1;
  5822  001D2E  0E01               	movlw	1
  5823  001D30  6E33               	movwf	_status^0,c
  5824                           
  5825                           ;Time.c: 127:     TiResetTics(tTime);
  5826  001D32  5035               	movf	_tTime^0,w,c
  5827  001D34  EF73  F00E         	goto	_TiResetTics
  5828  001D38                     __end_of_TimEnableTime:
  5829                           	callstack 0
  5830                           
  5831 ;; *************** function _SiHasReceived *****************
  5832 ;; Defined at:
  5833 ;;		line 27 in file "Bluetooth.c"
  5834 ;; Parameters:    Size  Location     Type
  5835 ;;		None
  5836 ;; Auto vars:     Size  Location     Type
  5837 ;;		None
  5838 ;; Return value:  Size  Location     Type
  5839 ;;                  1    wreg      unsigned char 
  5840 ;; Registers used:
  5841 ;;		wreg
  5842 ;; Tracked objects:
  5843 ;;		On entry : 0/0
  5844 ;;		On exit  : 0/0
  5845 ;;		Unchanged: 0/0
  5846 ;; Data sizes:     COMRAM   BANK0   BANK1
  5847 ;;      Params:         0       0       0
  5848 ;;      Locals:         0       0       0
  5849 ;;      Temps:          0       0       0
  5850 ;;      Totals:         0       0       0
  5851 ;;Total ram usage:        0 bytes
  5852 ;; Hardware stack levels used: 1
  5853 ;; Hardware stack levels required when called: 2
  5854 ;; This function calls:
  5855 ;;		Nothing
  5856 ;; This function is called by:
  5857 ;;		_motorLogic
  5858 ;; This function uses a non-reentrant model
  5859 ;;
  5860                           
  5861                           	psect	text32
  5862  001ED0                     __ptext32:
  5863                           	callstack 0
  5864  001ED0                     _SiHasReceived:
  5865                           	callstack 27
  5866                           
  5867                           ;Bluetooth.c: 28:     return (char) PIR1bits.RCIF;
  5868                           
  5869                           ;incstack = 0
  5870  001ED0  BA9E               	btfsc	158,5,c	;volatile
  5871  001ED2  0C01               	retlw	1
  5872  001ED4  0C00               	retlw	0	;funcret
  5873  001ED6                     __end_of_SiHasReceived:
  5874                           	callstack 0
  5875                           
  5876 ;; *************** function _SiGetChar *****************
  5877 ;; Defined at:
  5878 ;;		line 31 in file "Bluetooth.c"
  5879 ;; Parameters:    Size  Location     Type
  5880 ;;		None
  5881 ;; Auto vars:     Size  Location     Type
  5882 ;;		None
  5883 ;; Return value:  Size  Location     Type
  5884 ;;                  1    wreg      unsigned char 
  5885 ;; Registers used:
  5886 ;;		wreg, status,2
  5887 ;; Tracked objects:
  5888 ;;		On entry : 0/0
  5889 ;;		On exit  : 0/0
  5890 ;;		Unchanged: 0/0
  5891 ;; Data sizes:     COMRAM   BANK0   BANK1
  5892 ;;      Params:         0       0       0
  5893 ;;      Locals:         0       0       0
  5894 ;;      Temps:          0       0       0
  5895 ;;      Totals:         0       0       0
  5896 ;;Total ram usage:        0 bytes
  5897 ;; Hardware stack levels used: 1
  5898 ;; Hardware stack levels required when called: 2
  5899 ;; This function calls:
  5900 ;;		Nothing
  5901 ;; This function is called by:
  5902 ;;		_motorLogic
  5903 ;; This function uses a non-reentrant model
  5904 ;;
  5905                           
  5906                           	psect	text33
  5907  001EEC                     __ptext33:
  5908                           	callstack 0
  5909  001EEC                     _SiGetChar:
  5910                           	callstack 27
  5911                           
  5912                           ;Bluetooth.c: 32:     return RCREG;
  5913                           
  5914                           ;incstack = 0
  5915  001EEC  50AE               	movf	174,w,c	;volatile
  5916  001EEE  0012               	return		;funcret
  5917  001EF0                     __end_of_SiGetChar:
  5918                           	callstack 0
  5919                           
  5920 ;; *************** function _LoEndGame *****************
  5921 ;; Defined at:
  5922 ;;		line 61 in file "Logic.c"
  5923 ;; Parameters:    Size  Location     Type
  5924 ;;		None
  5925 ;; Auto vars:     Size  Location     Type
  5926 ;;		None
  5927 ;; Return value:  Size  Location     Type
  5928 ;;                  1    wreg      void 
  5929 ;; Registers used:
  5930 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5931 ;; Tracked objects:
  5932 ;;		On entry : 0/0
  5933 ;;		On exit  : 0/0
  5934 ;;		Unchanged: 0/0
  5935 ;; Data sizes:     COMRAM   BANK0   BANK1
  5936 ;;      Params:         0       0       0
  5937 ;;      Locals:         0       0       0
  5938 ;;      Temps:          0       0       0
  5939 ;;      Totals:         0       0       0
  5940 ;;Total ram usage:        0 bytes
  5941 ;; Hardware stack levels used: 1
  5942 ;; Hardware stack levels required when called: 6
  5943 ;; This function calls:
  5944 ;;		_LcClear
  5945 ;;		_SiSendChar
  5946 ;;		_TimDisableTime
  5947 ;; This function is called by:
  5948 ;;		_TimUpdateTime
  5949 ;;		_motorLogic
  5950 ;; This function uses a non-reentrant model
  5951 ;;
  5952                           
  5953                           	psect	text34
  5954  001D38                     __ptext34:
  5955                           	callstack 0
  5956  001D38                     _LoEndGame:
  5957                           	callstack 22
  5958                           
  5959                           ;Logic.c: 62:     SiSendChar('F');
  5960                           
  5961                           ;incstack = 0
  5962  001D38  0E46               	movlw	70
  5963  001D3A  EC5E  F00F         	call	_SiSendChar
  5964                           
  5965                           ;Logic.c: 63:     TimDisableTime();
  5966  001D3E  EC78  F00F         	call	_TimDisableTime	;wreg free
  5967                           
  5968                           ;Logic.c: 65:     menuWrite = 0;
  5969  001D42  EC30  F00E         	call	_LcClear	;wreg free
  5970                           
  5971                           ;Logic.c: 66:     menuPos = 6;
  5972  001D46  0E06               	movlw	6
  5973  001D48  6E24               	movwf	_menuPos^0,c
  5974                           
  5975                           ;Logic.c: 67:     position = 0;
  5976  001D4A  6A26               	clrf	_position^0,c
  5977                           
  5978                           ;Logic.c: 68:     state = 16;
  5979  001D4C  0E10               	movlw	16
  5980                           
  5981                           ;Logic.c: 69:     gameStarted = 0;
  5982  001D4E  EF98  F004         	goto	PL98	;call to abstracted procedure
  5983  001D52                     __end_of_LoEndGame:
  5984                           	callstack 0
  5985                           
  5986 ;; *************** function _TimDisableTime *****************
  5987 ;; Defined at:
  5988 ;;		line 130 in file "Time.c"
  5989 ;; Parameters:    Size  Location     Type
  5990 ;;		None
  5991 ;; Auto vars:     Size  Location     Type
  5992 ;;		None
  5993 ;; Return value:  Size  Location     Type
  5994 ;;                  1    wreg      void 
  5995 ;; Registers used:
  5996 ;;		None
  5997 ;; Tracked objects:
  5998 ;;		On entry : 0/0
  5999 ;;		On exit  : 0/0
  6000 ;;		Unchanged: 0/0
  6001 ;; Data sizes:     COMRAM   BANK0   BANK1
  6002 ;;      Params:         0       0       0
  6003 ;;      Locals:         0       0       0
  6004 ;;      Temps:          0       0       0
  6005 ;;      Totals:         0       0       0
  6006 ;;Total ram usage:        0 bytes
  6007 ;; Hardware stack levels used: 1
  6008 ;; Hardware stack levels required when called: 2
  6009 ;; This function calls:
  6010 ;;		Nothing
  6011 ;; This function is called by:
  6012 ;;		_LoEndGame
  6013 ;; This function uses a non-reentrant model
  6014 ;;
  6015                           
  6016                           	psect	text35
  6017  001EF0                     __ptext35:
  6018                           	callstack 0
  6019  001EF0                     _TimDisableTime:
  6020                           	callstack 25
  6021                           
  6022                           ;Time.c: 131:     status = 0;
  6023                           
  6024                           ;incstack = 0
  6025  001EF0  6A33               	clrf	_status^0,c
  6026  001EF2  0012               	return		;funcret
  6027  001EF4                     __end_of_TimDisableTime:
  6028                           	callstack 0
  6029                           
  6030 ;; *************** function _LcPrintSecondLine *****************
  6031 ;; Defined at:
  6032 ;;		line 305 in file "LcTLCD.c"
  6033 ;; Parameters:    Size  Location     Type
  6034 ;;  c2              2   20[COMRAM] PTR unsigned char 
  6035 ;;		 -> buffer(162), 
  6036 ;; Auto vars:     Size  Location     Type
  6037 ;;		None
  6038 ;; Return value:  Size  Location     Type
  6039 ;;                  1    wreg      unsigned char 
  6040 ;; Registers used:
  6041 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6042 ;; Tracked objects:
  6043 ;;		On entry : 0/0
  6044 ;;		On exit  : 0/0
  6045 ;;		Unchanged: 0/0
  6046 ;; Data sizes:     COMRAM   BANK0   BANK1
  6047 ;;      Params:         2       0       0
  6048 ;;      Locals:         0       0       0
  6049 ;;      Temps:          0       0       0
  6050 ;;      Totals:         2       0       0
  6051 ;;Total ram usage:        2 bytes
  6052 ;; Hardware stack levels used: 1
  6053 ;; Hardware stack levels required when called: 6
  6054 ;; This function calls:
  6055 ;;		_GetSecondLength
  6056 ;;		_LcGotoXY
  6057 ;;		_LcPutChar
  6058 ;;		_TiGetTics
  6059 ;;		_TiResetTics
  6060 ;;		_WaitForBusy
  6061 ;;		___awmod
  6062 ;;		___lbmod
  6063 ;; This function is called by:
  6064 ;;		_motorLogic
  6065 ;; This function uses a non-reentrant model
  6066 ;;
  6067                           
  6068                           	psect	text36
  6069  001104                     __ptext36:
  6070                           	callstack 0
  6071  001104                     _LcPrintSecondLine:
  6072                           	callstack 23
  6073                           
  6074                           ;LcTLCD.c: 306:     if (flag2 == 1) {
  6075                           
  6076                           ;incstack = 0
  6077  001104  0477               	decf	_flag2^0,w,c
  6078  001106  E107               	bnz	l130
  6079                           
  6080                           ;LcTLCD.c: 307:         flag2 = 0;
  6081  001108  6A77               	clrf	_flag2^0,c
  6082                           
  6083                           ;LcTLCD.c: 308:         pointer2 = 0;
  6084  00110A  6A43               	clrf	_pointer2^0,c
  6085                           
  6086                           ;LcTLCD.c: 309:   length2 = 0;
  6087  00110C  6A41               	clrf	_length2^0,c
  6088                           
  6089                           ;LcTLCD.c: 310:   shift2 = 0;
  6090  00110E  6A42               	clrf	_shift2^0,c
  6091                           
  6092                           ;LcTLCD.c: 311:         TiResetTics(tMarquee2);
  6093  001110  500B               	movf	_tMarquee2^0,w,c
  6094  001112  EC73  F00E         	call	_TiResetTics
  6095  001116                     l130:
  6096                           
  6097                           ;LcTLCD.c: 313:     WaitForBusy();
  6098  001116  ECEE  F00C         	call	_WaitForBusy	;wreg free
  6099                           
  6100                           ;LcTLCD.c: 314:     LcGotoXY(pointer2, 1);
  6101  00111A  0E01               	movlw	1
  6102  00111C  6E62               	movwf	LcGotoXY@Row^0,c
  6103  00111E  5043               	movf	_pointer2^0,w,c
  6104  001120  EC43  F00D         	call	_LcGotoXY
  6105                           
  6106                           ;LcTLCD.c: 315:   if (flag2 == 2 || length2 == 0) {
  6107  001124  0E02               	movlw	2
  6108  001126  1877               	xorwf	_flag2^0,w,c
  6109  001128  E002               	bz	u7740
  6110  00112A  5041               	movf	_length2^0,w,c
  6111  00112C  E10B               	bnz	l6592
  6112  00112E                     u7740:
  6113                           
  6114                           ;LcTLCD.c: 316:    if (GetSecondLength(c2) == 0)
  6115  00112E  C069  F05A         	movff	LcPrintSecondLine@c2,GetSecondLength@string2
  6116  001132  C06A  F05B         	movff	LcPrintSecondLine@c2+1,GetSecondLength@string2+1
  6117  001136  EC8E  F00D         	call	_GetSecondLength	;wreg free
  6118  00113A  0900               	iorlw	0
  6119  00113C  A4D8               	btfss	status,2,c
  6120  00113E  0012               	return	
  6121  001140                     u7750:
  6122                           
  6123                           ;LcTLCD.c: 317:     pointer2 = 0;
  6124  001140  6A43               	clrf	_pointer2^0,c
  6125  001142  0012               	return	
  6126  001144                     l6592:
  6127                           
  6128                           ;LcTLCD.c: 320:                 if (length2 > Columns && pointer2 >= 16) {
  6129  001144  5041               	movf	_length2^0,w,c
  6130  001146  5C4B               	subwf	_Columns^0,w,c
  6131  001148  E21B               	bc	l6608
  6132  00114A  0E0F               	movlw	15
  6133  00114C  6443               	cpfsgt	_pointer2^0,c
  6134  00114E  D018               	goto	l6608
  6135                           
  6136                           ;LcTLCD.c: 321:                     if (TiGetTics(tMarquee2) >= 1200) {
  6137  001150  500B               	movf	_tMarquee2^0,w,c
  6138  001152  EC1D  F00E         	call	_TiGetTics
  6139  001156  BE5B               	btfsc	(?_TiGetTics+1)^0,7,c
  6140  001158  0012               	return	
  6141  00115A  ECF4  F006         	call	PL50	;call to abstracted procedure
  6142  00115E  A0D8               	btfss	status,0,c
  6143  001160  0012               	return	
  6144                           
  6145                           ;LcTLCD.c: 322:                         shift2++;
  6146  001162  2A42               	incf	_shift2^0,f,c
  6147                           
  6148                           ;LcTLCD.c: 323:                         shift2 = shift2 % length2;
  6149  001164  C041  F05A         	movff	_length2,___lbmod@divisor
  6150  001168  5042               	movf	_shift2^0,w,c
  6151  00116A  ECF7  F00D         	call	___lbmod
  6152  00116E  6E42               	movwf	_shift2^0,c
  6153                           
  6154                           ;LcTLCD.c: 324:                         pointer2 = 0;
  6155  001170  6A43               	clrf	_pointer2^0,c
  6156                           
  6157                           ;LcTLCD.c: 325:                         LcGotoXY(0, 1);
  6158  001172  EC8D  F004         	call	PL68	;call to abstracted procedure
  6159  001176  EC43  F00D         	call	_LcGotoXY
  6160                           
  6161                           ;LcTLCD.c: 326:                         TiResetTics(tMarquee2);
  6162  00117A  500B               	movf	_tMarquee2^0,w,c
  6163  00117C  EF73  F00E         	goto	_TiResetTics
  6164  001180                     l6608:
  6165                           
  6166                           ;LcTLCD.c: 330:                     aux2 = *(c2+((pointer2+shift2)%length2));
  6167  001180  5043               	movf	_pointer2^0,w,c
  6168  001182  2442               	addwf	_shift2^0,w,c
  6169  001184  6E5A               	movwf	___awmod@dividend^0,c
  6170  001186  6A5B               	clrf	(___awmod@dividend+1)^0,c
  6171  001188  365B               	rlcf	(___awmod@dividend+1)^0,f,c
  6172  00118A  C041  F05C         	movff	_length2,___awmod@divisor
  6173  00118E  6A5D               	clrf	(___awmod@divisor+1)^0,c
  6174  001190  EC53  F00A         	call	___awmod	;wreg free
  6175  001194  505A               	movf	?___awmod^0,w,c
  6176  001196  2469               	addwf	LcPrintSecondLine@c2^0,w,c
  6177  001198  6ED9               	movwf	fsr2l,c
  6178  00119A  505B               	movf	(?___awmod+1)^0,w,c
  6179  00119C  206A               	addwfc	(LcPrintSecondLine@c2+1)^0,w,c
  6180  00119E  6EDA               	movwf	fsr2h,c
  6181  0011A0  50DF               	movf	indf2,w,c
  6182  0011A2  6E47               	movwf	_aux2^0,c
  6183                           
  6184                           ;LcTLCD.c: 331:                     if ((aux2 && length2 > Columns) || (*(c2+pointer2) &
      +                          & length2 <= Columns)) {
  6185  0011A4  5047               	movf	_aux2^0,w,c
  6186  0011A6  E003               	bz	u7800
  6187  0011A8  5041               	movf	_length2^0,w,c
  6188  0011AA  5C4B               	subwf	_Columns^0,w,c
  6189  0011AC  E30B               	bnc	u7820
  6190  0011AE                     u7800:
  6191  0011AE  5043               	movf	_pointer2^0,w,c
  6192  0011B0  2469               	addwf	LcPrintSecondLine@c2^0,w,c
  6193  0011B2  6ED9               	movwf	fsr2l,c
  6194  0011B4  0E00               	movlw	0
  6195  0011B6  206A               	addwfc	(LcPrintSecondLine@c2+1)^0,w,c
  6196  0011B8  6EDA               	movwf	fsr2h,c
  6197  0011BA  50DF               	movf	indf2,w,c
  6198  0011BC  E008               	bz	l6622
  6199  0011BE  5041               	movf	_length2^0,w,c
  6200  0011C0  5C4B               	subwf	_Columns^0,w,c
  6201  0011C2  E305               	bnc	l6622
  6202  0011C4                     u7820:
  6203                           
  6204                           ;LcTLCD.c: 332:                         LcPutChar(aux2);
  6205  0011C4  5047               	movf	_aux2^0,w,c
  6206  0011C6  EC76  F00D         	call	_LcPutChar
  6207                           
  6208                           ;LcTLCD.c: 333:                         pointer2++;
  6209  0011CA  2A43               	incf	_pointer2^0,f,c
  6210                           
  6211                           ;LcTLCD.c: 334:                     } else {
  6212  0011CC  0012               	return	
  6213  0011CE                     l6622:
  6214                           
  6215                           ;LcTLCD.c: 335:                         flag2 = 1;
  6216  0011CE  0E01               	movlw	1
  6217  0011D0  6E77               	movwf	_flag2^0,c
  6218  0011D2  D7B6               	goto	u7750
  6219  0011D4                     __end_of_LcPrintSecondLine:
  6220                           	callstack 0
  6221                           
  6222 ;; *************** function _GetSecondLength *****************
  6223 ;; Defined at:
  6224 ;;		line 287 in file "LcTLCD.c"
  6225 ;; Parameters:    Size  Location     Type
  6226 ;;  string2         2    5[COMRAM] PTR unsigned char 
  6227 ;;		 -> buffer(162), 
  6228 ;; Auto vars:     Size  Location     Type
  6229 ;;  aux_x           1    7[COMRAM] unsigned char 
  6230 ;; Return value:  Size  Location     Type
  6231 ;;                  1    wreg      unsigned char 
  6232 ;; Registers used:
  6233 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  6234 ;; Tracked objects:
  6235 ;;		On entry : 0/0
  6236 ;;		On exit  : 0/0
  6237 ;;		Unchanged: 0/0
  6238 ;; Data sizes:     COMRAM   BANK0   BANK1
  6239 ;;      Params:         2       0       0
  6240 ;;      Locals:         1       0       0
  6241 ;;      Temps:          0       0       0
  6242 ;;      Totals:         3       0       0
  6243 ;;Total ram usage:        3 bytes
  6244 ;; Hardware stack levels used: 1
  6245 ;; Hardware stack levels required when called: 2
  6246 ;; This function calls:
  6247 ;;		Nothing
  6248 ;; This function is called by:
  6249 ;;		_LcPrintSecondLine
  6250 ;; This function uses a non-reentrant model
  6251 ;;
  6252                           
  6253                           	psect	text37
  6254  001B1C                     __ptext37:
  6255                           	callstack 0
  6256  001B1C                     _GetSecondLength:
  6257                           	callstack 26
  6258                           
  6259                           ;LcTLCD.c: 288:  if (flag2 == 0) flag2 = 2;
  6260                           
  6261                           ;incstack = 0
  6262  001B1C  5077               	movf	_flag2^0,w,c
  6263  001B1E  E102               	bnz	l6386
  6264  001B20  0E02               	movlw	2
  6265  001B22  6E77               	movwf	_flag2^0,c
  6266  001B24                     l6386:
  6267                           
  6268                           ;LcTLCD.c: 289:     char aux_x = *(string2+pointer2);
  6269  001B24  5043               	movf	_pointer2^0,w,c
  6270  001B26  245A               	addwf	GetSecondLength@string2^0,w,c
  6271  001B28  6ED9               	movwf	fsr2l,c
  6272  001B2A  0E00               	movlw	0
  6273  001B2C  205B               	addwfc	(GetSecondLength@string2+1)^0,w,c
  6274  001B2E  6EDA               	movwf	fsr2h,c
  6275  001B30  50DF               	movf	indf2,w,c
  6276  001B32  6E5C               	movwf	GetSecondLength@aux_x^0,c
  6277                           
  6278                           ;LcTLCD.c: 290:  if (aux_x != '\0' && aux_x != '\n') {
  6279  001B34  505C               	movf	GetSecondLength@aux_x^0,w,c
  6280  001B36  E006               	bz	l122
  6281  001B38  0E0A               	movlw	10
  6282  001B3A  185C               	xorwf	GetSecondLength@aux_x^0,w,c
  6283  001B3C  E003               	bz	l122
  6284                           
  6285                           ;LcTLCD.c: 291:   length2++;
  6286  001B3E  2A41               	incf	_length2^0,f,c
  6287                           
  6288                           ;LcTLCD.c: 292:   pointer2++;
  6289  001B40  2A43               	incf	_pointer2^0,f,c
  6290                           
  6291                           ;LcTLCD.c: 293:  }
  6292  001B42  D001               	goto	l6394
  6293  001B44                     l122:
  6294                           
  6295                           ;LcTLCD.c: 295:   flag2 = 0;
  6296  001B44  6A77               	clrf	_flag2^0,c
  6297  001B46                     l6394:
  6298                           
  6299                           ;LcTLCD.c: 297:  return flag2;
  6300  001B46  5077               	movf	_flag2^0,w,c
  6301  001B48  0012               	return		;funcret
  6302  001B4A                     __end_of_GetSecondLength:
  6303                           	callstack 0
  6304                           
  6305 ;; *************** function _LcPrintLine *****************
  6306 ;; Defined at:
  6307 ;;		line 244 in file "LcTLCD.c"
  6308 ;; Parameters:    Size  Location     Type
  6309 ;;  c               2   20[COMRAM] PTR unsigned char 
  6310 ;;		 -> STR_15(9), buffer(162), STR_14(14), STR_13(8), 
  6311 ;;		 -> STR_12(12), STR_11(9), STR_10(17), STR_9(18), 
  6312 ;;		 -> STR_8(10), STR_7(30), STR_6(15), STR_5(15), 
  6313 ;;		 -> STR_4(7), STR_3(7), STR_2(11), STR_1(9), 
  6314 ;;		 -> user(8), 
  6315 ;; Auto vars:     Size  Location     Type
  6316 ;;		None
  6317 ;; Return value:  Size  Location     Type
  6318 ;;                  1    wreg      unsigned char 
  6319 ;; Registers used:
  6320 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6321 ;; Tracked objects:
  6322 ;;		On entry : 0/0
  6323 ;;		On exit  : 0/0
  6324 ;;		Unchanged: 0/0
  6325 ;; Data sizes:     COMRAM   BANK0   BANK1
  6326 ;;      Params:         2       0       0
  6327 ;;      Locals:         0       0       0
  6328 ;;      Temps:          2       0       0
  6329 ;;      Totals:         4       0       0
  6330 ;;Total ram usage:        4 bytes
  6331 ;; Hardware stack levels used: 1
  6332 ;; Hardware stack levels required when called: 6
  6333 ;; This function calls:
  6334 ;;		_GetLength
  6335 ;;		_LcGotoXY
  6336 ;;		_LcPutChar
  6337 ;;		_TiGetTics
  6338 ;;		_TiResetTics
  6339 ;;		_WaitForBusy
  6340 ;;		___awmod
  6341 ;;		___lbmod
  6342 ;; This function is called by:
  6343 ;;		_motorLogic
  6344 ;; This function uses a non-reentrant model
  6345 ;;
  6346                           
  6347                           	psect	text38
  6348  000DF2                     __ptext38:
  6349                           	callstack 0
  6350  000DF2                     _LcPrintLine:
  6351                           	callstack 23
  6352                           
  6353                           ;LcTLCD.c: 245:     if (flag == 1) {
  6354                           
  6355                           ;incstack = 0
  6356  000DF2  0478               	decf	_flag^0,w,c
  6357  000DF4  E107               	bnz	l101
  6358                           
  6359                           ;LcTLCD.c: 246:         flag = 0;
  6360  000DF6  6A78               	clrf	_flag^0,c
  6361                           
  6362                           ;LcTLCD.c: 247:         pointer = 0;
  6363  000DF8  6A46               	clrf	_pointer^0,c
  6364                           
  6365                           ;LcTLCD.c: 248:   length = 0;
  6366  000DFA  6A44               	clrf	_length^0,c
  6367                           
  6368                           ;LcTLCD.c: 249:   shift = 0;
  6369  000DFC  6A45               	clrf	_shift^0,c
  6370                           
  6371                           ;LcTLCD.c: 250:         TiResetTics(tMarquee);
  6372  000DFE  500D               	movf	_tMarquee^0,w,c
  6373  000E00  EC73  F00E         	call	_TiResetTics
  6374  000E04                     l101:
  6375                           
  6376                           ;LcTLCD.c: 252:     WaitForBusy();
  6377  000E04  ECEE  F00C         	call	_WaitForBusy	;wreg free
  6378                           
  6379                           ;LcTLCD.c: 254:   if (flag == 2 || length == 0) {
  6380  000E08  0E02               	movlw	2
  6381  000E0A  1878               	xorwf	_flag^0,w,c
  6382  000E0C  E002               	bz	u7580
  6383  000E0E  5044               	movf	_length^0,w,c
  6384  000E10  E10A               	bnz	l6534
  6385  000E12                     u7580:
  6386                           
  6387                           ;LcTLCD.c: 255:    if (GetLength(c) == 0)
  6388  000E12  C069  F05A         	movff	LcPrintLine@c,GetLength@string
  6389  000E16  C06A  F05B         	movff	LcPrintLine@c+1,GetLength@string+1
  6390  000E1A  EC25  F00C         	call	_GetLength	;wreg free
  6391  000E1E  0900               	iorlw	0
  6392  000E20  E16C               	bnz	l106
  6393  000E22                     u7590:
  6394                           
  6395                           ;LcTLCD.c: 256:     pointer = 0;
  6396  000E22  6A46               	clrf	_pointer^0,c
  6397  000E24  D06A               	goto	l106
  6398  000E26                     l6534:
  6399                           
  6400                           ;LcTLCD.c: 259:                 if (length > Columns && pointer >= 16) {
  6401  000E26  5044               	movf	_length^0,w,c
  6402  000E28  5C4B               	subwf	_Columns^0,w,c
  6403  000E2A  E21C               	bc	l6550
  6404  000E2C  0E0F               	movlw	15
  6405  000E2E  6446               	cpfsgt	_pointer^0,c
  6406  000E30  D019               	goto	l6550
  6407                           
  6408                           ;LcTLCD.c: 260:                     if (TiGetTics(tMarquee) >= 1200) {
  6409  000E32  500D               	movf	_tMarquee^0,w,c
  6410  000E34  EC1D  F00E         	call	_TiGetTics
  6411  000E38  BE5B               	btfsc	(?_TiGetTics+1)^0,7,c
  6412  000E3A  D05F               	goto	l106
  6413  000E3C  ECF4  F006         	call	PL50	;call to abstracted procedure
  6414  000E40  E35C               	bnc	l106
  6415                           
  6416                           ;LcTLCD.c: 261:                         shift++;
  6417  000E42  2A45               	incf	_shift^0,f,c
  6418                           
  6419                           ;LcTLCD.c: 262:                         shift = shift % length;
  6420  000E44  C044  F05A         	movff	_length,___lbmod@divisor
  6421  000E48  5045               	movf	_shift^0,w,c
  6422  000E4A  ECF7  F00D         	call	___lbmod
  6423  000E4E  6E45               	movwf	_shift^0,c
  6424                           
  6425                           ;LcTLCD.c: 263:                         pointer = 0;
  6426  000E50  6A46               	clrf	_pointer^0,c
  6427                           
  6428                           ;LcTLCD.c: 264:                         LcGotoXY(0, RowAct);
  6429  000E52  C04A  F062         	movff	_RowAct,LcGotoXY@Row
  6430  000E56  0E00               	movlw	0
  6431  000E58  EC43  F00D         	call	_LcGotoXY
  6432                           
  6433                           ;LcTLCD.c: 265:                         TiResetTics(tMarquee);
  6434  000E5C  500D               	movf	_tMarquee^0,w,c
  6435  000E5E  EC73  F00E         	call	_TiResetTics
  6436  000E62  D04B               	goto	l106
  6437  000E64                     l6550:
  6438                           
  6439                           ;LcTLCD.c: 269:                     aux = *(c+((pointer+shift)%length));
  6440  000E64  5046               	movf	_pointer^0,w,c
  6441  000E66  2445               	addwf	_shift^0,w,c
  6442  000E68  6E5A               	movwf	___awmod@dividend^0,c
  6443  000E6A  6A5B               	clrf	(___awmod@dividend+1)^0,c
  6444  000E6C  365B               	rlcf	(___awmod@dividend+1)^0,f,c
  6445  000E6E  C044  F05C         	movff	_length,___awmod@divisor
  6446  000E72  6A5D               	clrf	(___awmod@divisor+1)^0,c
  6447  000E74  EC53  F00A         	call	___awmod	;wreg free
  6448  000E78  C069  F06B         	movff	LcPrintLine@c,??_LcPrintLine
  6449  000E7C  C06A  F06C         	movff	LcPrintLine@c+1,??_LcPrintLine+1
  6450  000E80  505A               	movf	?___awmod^0,w,c
  6451  000E82  266B               	addwf	??_LcPrintLine^0,f,c
  6452  000E84  505B               	movf	(?___awmod+1)^0,w,c
  6453  000E86  226C               	addwfc	(??_LcPrintLine+1)^0,f,c
  6454  000E88  C06B  FFF6         	movff	??_LcPrintLine,tblptrl
  6455  000E8C  C06C  FFF7         	movff	??_LcPrintLine+1,tblptrh
  6456  000E90  6AF8               	clrf	tblptru,c
  6457  000E92  0E01               	movlw	(high __ramtop+-1)
  6458  000E94  64F7               	cpfsgt	tblptrh,c
  6459  000E96  D003               	bra	u7637
  6460  000E98  0008               	tblrd		*
  6461  000E9A  50F5               	movf	tablat,w,c
  6462  000E9C  D001               	bra	u7630
  6463  000E9E                     u7637:
  6464  000E9E  D83C               	call	PL32	;call to abstracted procedure
  6465  000EA0                     u7630:
  6466  000EA0  6E48               	movwf	_aux^0,c
  6467                           
  6468                           ;LcTLCD.c: 270:                     if ((aux && length > Columns) || (*(c+pointer) && le
      +                          ngth <= Columns)) {
  6469  000EA2  5048               	movf	_aux^0,w,c
  6470  000EA4  E003               	bz	u7650
  6471  000EA6  5044               	movf	_length^0,w,c
  6472  000EA8  5C4B               	subwf	_Columns^0,w,c
  6473  000EAA  E30C               	bnc	u7680
  6474  000EAC                     u7650:
  6475  000EAC  D828               	call	PL26	;call to abstracted procedure
  6476  000EAE  64F7               	cpfsgt	tblptrh,c
  6477  000EB0  D003               	bra	u7667
  6478  000EB2  0008               	tblrd		*
  6479  000EB4  50F5               	movf	tablat,w,c
  6480  000EB6  D001               	bra	u7660
  6481  000EB8                     u7667:
  6482  000EB8  D82F               	call	PL32	;call to abstracted procedure
  6483  000EBA                     u7660:
  6484  000EBA  0900               	iorlw	0
  6485  000EBC  E01B               	bz	l6570
  6486  000EBE  5044               	movf	_length^0,w,c
  6487  000EC0  5C4B               	subwf	_Columns^0,w,c
  6488  000EC2  E318               	bnc	l6570
  6489  000EC4                     u7680:
  6490                           
  6491                           ;LcTLCD.c: 271:                         if (*(c+pointer) == '\n' && length <= Columns) {
  6492  000EC4  D81C               	call	PL26	;call to abstracted procedure
  6493  000EC6  64F7               	cpfsgt	tblptrh,c
  6494  000EC8  D003               	bra	u7697
  6495  000ECA  0008               	tblrd		*
  6496  000ECC  50F5               	movf	tablat,w,c
  6497  000ECE  D001               	bra	u7690
  6498  000ED0                     u7697:
  6499  000ED0  D823               	call	PL32	;call to abstracted procedure
  6500  000ED2                     u7690:
  6501  000ED2  0A0A               	xorlw	10
  6502  000ED4  E10A               	bnz	l6566
  6503  000ED6  5044               	movf	_length^0,w,c
  6504  000ED8  5C4B               	subwf	_Columns^0,w,c
  6505  000EDA  E307               	bnc	l6566
  6506                           
  6507                           ;LcTLCD.c: 272:                             LcGotoXY(0, 1-RowAct);
  6508  000EDC  504A               	movf	_RowAct^0,w,c
  6509  000EDE  0801               	sublw	1
  6510  000EE0  6E62               	movwf	LcGotoXY@Row^0,c
  6511  000EE2  0E00               	movlw	0
  6512  000EE4  EC43  F00D         	call	_LcGotoXY
  6513                           
  6514                           ;LcTLCD.c: 273:                         }
  6515  000EE8  D003               	goto	l6568
  6516  000EEA                     l6566:
  6517                           
  6518                           ;LcTLCD.c: 275:                             LcPutChar(aux);
  6519  000EEA  5048               	movf	_aux^0,w,c
  6520  000EEC  EC76  F00D         	call	_LcPutChar
  6521  000EF0                     l6568:
  6522                           
  6523                           ;LcTLCD.c: 277:                         pointer++;
  6524  000EF0  2A46               	incf	_pointer^0,f,c
  6525                           
  6526                           ;LcTLCD.c: 278:                     } else {
  6527  000EF2  D003               	goto	l106
  6528  000EF4                     l6570:
  6529                           
  6530                           ;LcTLCD.c: 279:                         flag = 1;
  6531  000EF4  0E01               	movlw	1
  6532  000EF6  6E78               	movwf	_flag^0,c
  6533  000EF8  D794               	goto	u7590
  6534  000EFA                     l106:
  6535                           
  6536                           ;LcTLCD.c: 284:     return flag;
  6537  000EFA  5078               	movf	_flag^0,w,c
  6538  000EFC  0012               	return		;funcret
  6539  000EFE                     __end_of_LcPrintLine:
  6540                           	callstack 0
  6541  000EFE                     PL26:
  6542                           	callstack 23
  6543  000EFE  5046               	movf	_pointer^0,w,c
  6544  000F00  2469               	addwf	LcPrintLine@c^0,w,c
  6545  000F02  6E6B               	movwf	??_LcPrintLine^0,c
  6546  000F04  0E00               	movlw	0
  6547  000F06  206A               	addwfc	(LcPrintLine@c+1)^0,w,c
  6548  000F08  6E6C               	movwf	(??_LcPrintLine+1)^0,c
  6549  000F0A  C06B  FFF6         	movff	??_LcPrintLine,tblptrl
  6550  000F0E  C06C  FFF7         	movff	??_LcPrintLine+1,tblptrh
  6551  000F12  6AF8               	clrf	tblptru,c
  6552  000F14  0E01               	movlw	(high __ramtop+-1)
  6553  000F16  0012               	return	
  6554  000F18                     __end_ofPL26:
  6555                           	callstack 0
  6556  000F18                     PL32:
  6557                           	callstack 26
  6558  000F18  CFF6 FFE1          	movff	tblptrl,fsr1l
  6559  000F1C  CFF7 FFE2          	movff	tblptrh,fsr1h
  6560  000F20  50E7               	movf	indf1,w,c
  6561  000F22  0012               	return	
  6562  000F24                     __end_ofPL32:
  6563                           	callstack 0
  6564                           
  6565 ;; *************** function ___lbmod *****************
  6566 ;; Defined at:
  6567 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\lbmod.c"
  6568 ;; Parameters:    Size  Location     Type
  6569 ;;  dividend        1    wreg     unsigned char 
  6570 ;;  divisor         1    5[COMRAM] unsigned char 
  6571 ;; Auto vars:     Size  Location     Type
  6572 ;;  dividend        1    6[COMRAM] unsigned char 
  6573 ;;  rem             1    8[COMRAM] unsigned char 
  6574 ;;  counter         1    7[COMRAM] unsigned char 
  6575 ;; Return value:  Size  Location     Type
  6576 ;;                  1    wreg      unsigned char 
  6577 ;; Registers used:
  6578 ;;		wreg, status,2, status,0
  6579 ;; Tracked objects:
  6580 ;;		On entry : 0/0
  6581 ;;		On exit  : 0/0
  6582 ;;		Unchanged: 0/0
  6583 ;; Data sizes:     COMRAM   BANK0   BANK1
  6584 ;;      Params:         1       0       0
  6585 ;;      Locals:         3       0       0
  6586 ;;      Temps:          0       0       0
  6587 ;;      Totals:         4       0       0
  6588 ;;Total ram usage:        4 bytes
  6589 ;; Hardware stack levels used: 1
  6590 ;; Hardware stack levels required when called: 2
  6591 ;; This function calls:
  6592 ;;		Nothing
  6593 ;; This function is called by:
  6594 ;;		_LcPrintLine
  6595 ;;		_LcPrintSecondLine
  6596 ;;		_motorLogic
  6597 ;;		_motorROM
  6598 ;;		_readScore
  6599 ;; This function uses a non-reentrant model
  6600 ;;
  6601                           
  6602                           	psect	text39
  6603  001BEE                     __ptext39:
  6604                           	callstack 0
  6605  001BEE                     ___lbmod:
  6606                           	callstack 27
  6607                           
  6608                           ;incstack = 0
  6609                           ;___lbmod@dividend stored from wreg
  6610  001BEE  6E5B               	movwf	___lbmod@dividend^0,c
  6611  001BF0  0E08               	movlw	8
  6612  001BF2  6E5C               	movwf	___lbmod@counter^0,c
  6613  001BF4  6A5D               	clrf	___lbmod@rem^0,c
  6614  001BF6                     l6496:
  6615  001BF6  90D8               	bcf	status,0,c
  6616  001BF8  345B               	rlcf	___lbmod@dividend^0,w,c
  6617  001BFA  345D               	rlcf	___lbmod@rem^0,w,c
  6618  001BFC  6E5D               	movwf	___lbmod@rem^0,c
  6619  001BFE  90D8               	bcf	status,0,c
  6620  001C00  365B               	rlcf	___lbmod@dividend^0,f,c
  6621  001C02  505A               	movf	___lbmod@divisor^0,w,c
  6622  001C04  5C5D               	subwf	___lbmod@rem^0,w,c
  6623  001C06  E302               	bnc	l6504
  6624  001C08  505A               	movf	___lbmod@divisor^0,w,c
  6625  001C0A  5E5D               	subwf	___lbmod@rem^0,f,c
  6626  001C0C                     l6504:
  6627  001C0C  2E5C               	decfsz	___lbmod@counter^0,f,c
  6628  001C0E  D7F3               	goto	l6496
  6629  001C10  505D               	movf	___lbmod@rem^0,w,c
  6630  001C12  0012               	return		;funcret
  6631  001C14                     __end_of___lbmod:
  6632                           	callstack 0
  6633                           
  6634 ;; *************** function ___awmod *****************
  6635 ;; Defined at:
  6636 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\awmod.c"
  6637 ;; Parameters:    Size  Location     Type
  6638 ;;  dividend        2    5[COMRAM] int 
  6639 ;;  divisor         2    7[COMRAM] int 
  6640 ;; Auto vars:     Size  Location     Type
  6641 ;;  sign            1   10[COMRAM] unsigned char 
  6642 ;;  counter         1    9[COMRAM] unsigned char 
  6643 ;; Return value:  Size  Location     Type
  6644 ;;                  2    5[COMRAM] int 
  6645 ;; Registers used:
  6646 ;;		wreg, status,2, status,0
  6647 ;; Tracked objects:
  6648 ;;		On entry : 0/0
  6649 ;;		On exit  : 0/0
  6650 ;;		Unchanged: 0/0
  6651 ;; Data sizes:     COMRAM   BANK0   BANK1
  6652 ;;      Params:         4       0       0
  6653 ;;      Locals:         2       0       0
  6654 ;;      Temps:          0       0       0
  6655 ;;      Totals:         6       0       0
  6656 ;;Total ram usage:        6 bytes
  6657 ;; Hardware stack levels used: 1
  6658 ;; Hardware stack levels required when called: 2
  6659 ;; This function calls:
  6660 ;;		Nothing
  6661 ;; This function is called by:
  6662 ;;		_LcPrintLine
  6663 ;;		_LcPrintSecondLine
  6664 ;; This function uses a non-reentrant model
  6665 ;;
  6666                           
  6667                           	psect	text40
  6668  0014A6                     __ptext40:
  6669                           	callstack 0
  6670  0014A6                     ___awmod:
  6671                           	callstack 26
  6672                           
  6673                           ;incstack = 0
  6674  0014A6  6A5F               	clrf	___awmod@sign^0,c
  6675  0014A8  AE5B               	btfss	(___awmod@dividend+1)^0,7,c
  6676  0014AA  D006               	goto	l6438
  6677  0014AC  6C5A               	negf	___awmod@dividend^0,c
  6678  0014AE  1E5B               	comf	(___awmod@dividend+1)^0,f,c
  6679  0014B0  B0D8               	btfsc	status,0,c
  6680  0014B2  2A5B               	incf	(___awmod@dividend+1)^0,f,c
  6681  0014B4  0E01               	movlw	1
  6682  0014B6  6E5F               	movwf	___awmod@sign^0,c
  6683  0014B8                     l6438:
  6684  0014B8  AE5D               	btfss	(___awmod@divisor+1)^0,7,c
  6685  0014BA  D004               	goto	l6442
  6686  0014BC  6C5C               	negf	___awmod@divisor^0,c
  6687  0014BE  1E5D               	comf	(___awmod@divisor+1)^0,f,c
  6688  0014C0  B0D8               	btfsc	status,0,c
  6689  0014C2  2A5D               	incf	(___awmod@divisor+1)^0,f,c
  6690  0014C4                     l6442:
  6691  0014C4  505C               	movf	___awmod@divisor^0,w,c
  6692  0014C6  105D               	iorwf	(___awmod@divisor+1)^0,w,c
  6693  0014C8  E017               	bz	l6458
  6694  0014CA  0E01               	movlw	1
  6695  0014CC  6E5E               	movwf	___awmod@counter^0,c
  6696  0014CE  D004               	goto	l6448
  6697  0014D0                     l6446:
  6698  0014D0  90D8               	bcf	status,0,c
  6699  0014D2  365C               	rlcf	___awmod@divisor^0,f,c
  6700  0014D4  365D               	rlcf	(___awmod@divisor+1)^0,f,c
  6701  0014D6  2A5E               	incf	___awmod@counter^0,f,c
  6702  0014D8                     l6448:
  6703  0014D8  AE5D               	btfss	(___awmod@divisor+1)^0,7,c
  6704  0014DA  D7FA               	goto	l6446
  6705  0014DC                     u7490:
  6706  0014DC  505C               	movf	___awmod@divisor^0,w,c
  6707  0014DE  5C5A               	subwf	___awmod@dividend^0,w,c
  6708  0014E0  505D               	movf	(___awmod@divisor+1)^0,w,c
  6709  0014E2  585B               	subwfb	(___awmod@dividend+1)^0,w,c
  6710  0014E4  E304               	bnc	l6454
  6711  0014E6  505C               	movf	___awmod@divisor^0,w,c
  6712  0014E8  5E5A               	subwf	___awmod@dividend^0,f,c
  6713  0014EA  505D               	movf	(___awmod@divisor+1)^0,w,c
  6714  0014EC  5A5B               	subwfb	(___awmod@dividend+1)^0,f,c
  6715  0014EE                     l6454:
  6716  0014EE  90D8               	bcf	status,0,c
  6717  0014F0  325D               	rrcf	(___awmod@divisor+1)^0,f,c
  6718  0014F2  325C               	rrcf	___awmod@divisor^0,f,c
  6719  0014F4  2E5E               	decfsz	___awmod@counter^0,f,c
  6720  0014F6  D7F2               	goto	u7490
  6721  0014F8                     l6458:
  6722  0014F8  505F               	movf	___awmod@sign^0,w,c
  6723  0014FA  E004               	bz	l6462
  6724  0014FC  6C5A               	negf	___awmod@dividend^0,c
  6725  0014FE  1E5B               	comf	(___awmod@dividend+1)^0,f,c
  6726  001500  B0D8               	btfsc	status,0,c
  6727  001502  2A5B               	incf	(___awmod@dividend+1)^0,f,c
  6728  001504                     l6462:
  6729  001504  C05A  F05A         	movff	___awmod@dividend,?___awmod
  6730  001508  C05B  F05B         	movff	___awmod@dividend+1,?___awmod+1
  6731  00150C  0012               	return		;funcret
  6732  00150E                     __end_of___awmod:
  6733                           	callstack 0
  6734                           
  6735 ;; *************** function _GetLength *****************
  6736 ;; Defined at:
  6737 ;;		line 231 in file "LcTLCD.c"
  6738 ;; Parameters:    Size  Location     Type
  6739 ;;  string          2    5[COMRAM] PTR unsigned char 
  6740 ;;		 -> STR_15(9), buffer(162), STR_14(14), STR_13(8), 
  6741 ;;		 -> STR_12(12), STR_11(9), STR_10(17), STR_9(18), 
  6742 ;;		 -> STR_8(10), STR_7(30), STR_6(15), STR_5(15), 
  6743 ;;		 -> STR_4(7), STR_3(7), STR_2(11), STR_1(9), 
  6744 ;;		 -> user(8), 
  6745 ;; Auto vars:     Size  Location     Type
  6746 ;;  aux_x           1    9[COMRAM] unsigned char 
  6747 ;; Return value:  Size  Location     Type
  6748 ;;                  1    wreg      unsigned char 
  6749 ;; Registers used:
  6750 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru
  6751 ;; Tracked objects:
  6752 ;;		On entry : 0/0
  6753 ;;		On exit  : 0/0
  6754 ;;		Unchanged: 0/0
  6755 ;; Data sizes:     COMRAM   BANK0   BANK1
  6756 ;;      Params:         2       0       0
  6757 ;;      Locals:         1       0       0
  6758 ;;      Temps:          2       0       0
  6759 ;;      Totals:         5       0       0
  6760 ;;Total ram usage:        5 bytes
  6761 ;; Hardware stack levels used: 1
  6762 ;; Hardware stack levels required when called: 2
  6763 ;; This function calls:
  6764 ;;		Nothing
  6765 ;; This function is called by:
  6766 ;;		_LcPrintLine
  6767 ;; This function uses a non-reentrant model
  6768 ;;
  6769                           
  6770                           	psect	text41
  6771  00184A                     __ptext41:
  6772                           	callstack 0
  6773  00184A                     _GetLength:
  6774                           	callstack 26
  6775                           
  6776                           ;LcTLCD.c: 232:  if (flag == 0) flag = 2;
  6777                           
  6778                           ;incstack = 0
  6779  00184A  5078               	movf	_flag^0,w,c
  6780  00184C  E102               	bnz	l6370
  6781  00184E  0E02               	movlw	2
  6782  001850  6E78               	movwf	_flag^0,c
  6783  001852                     l6370:
  6784                           
  6785                           ;LcTLCD.c: 233:     char aux_x = *(string+pointer);
  6786  001852  5046               	movf	_pointer^0,w,c
  6787  001854  245A               	addwf	GetLength@string^0,w,c
  6788  001856  6E5C               	movwf	??_GetLength^0,c
  6789  001858  0E00               	movlw	0
  6790  00185A  205B               	addwfc	(GetLength@string+1)^0,w,c
  6791  00185C  6E5D               	movwf	(??_GetLength+1)^0,c
  6792  00185E  C05C  FFF6         	movff	??_GetLength,tblptrl
  6793  001862  C05D  FFF7         	movff	??_GetLength+1,tblptrh
  6794  001866  6AF8               	clrf	tblptru,c
  6795  001868  0E01               	movlw	(high __ramtop+-1)
  6796  00186A  64F7               	cpfsgt	tblptrh,c
  6797  00186C  D003               	bra	u7387
  6798  00186E  0008               	tblrd		*
  6799  001870  50F5               	movf	tablat,w,c
  6800  001872  D002               	bra	u7380
  6801  001874                     u7387:
  6802  001874  EC8C  F007         	call	PL32	;call to abstracted procedure
  6803  001878                     u7380:
  6804  001878  6E5E               	movwf	GetLength@aux_x^0,c
  6805                           
  6806                           ;LcTLCD.c: 234:  if (aux_x != '\0' && aux_x != '\n') {
  6807  00187A  505E               	movf	GetLength@aux_x^0,w,c
  6808  00187C  E006               	bz	l96
  6809  00187E  0E0A               	movlw	10
  6810  001880  185E               	xorwf	GetLength@aux_x^0,w,c
  6811  001882  E003               	bz	l96
  6812                           
  6813                           ;LcTLCD.c: 235:   length++;
  6814  001884  2A44               	incf	_length^0,f,c
  6815                           
  6816                           ;LcTLCD.c: 236:   pointer++;
  6817  001886  2A46               	incf	_pointer^0,f,c
  6818                           
  6819                           ;LcTLCD.c: 237:  }
  6820  001888  D001               	goto	l6378
  6821  00188A                     l96:
  6822                           
  6823                           ;LcTLCD.c: 239:   flag = 0;
  6824  00188A  6A78               	clrf	_flag^0,c
  6825  00188C                     l6378:
  6826                           
  6827                           ;LcTLCD.c: 241:  return flag;
  6828  00188C  5078               	movf	_flag^0,w,c
  6829  00188E  0012               	return		;funcret
  6830  001890                     __end_of_GetLength:
  6831                           	callstack 0
  6832                           
  6833 ;; *************** function _LcCursorOn *****************
  6834 ;; Defined at:
  6835 ;;		line 142 in file "LcTLCD.c"
  6836 ;; Parameters:    Size  Location     Type
  6837 ;;		None
  6838 ;; Auto vars:     Size  Location     Type
  6839 ;;		None
  6840 ;; Return value:  Size  Location     Type
  6841 ;;                  1    wreg      void 
  6842 ;; Registers used:
  6843 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6844 ;; Tracked objects:
  6845 ;;		On entry : 0/0
  6846 ;;		On exit  : 0/0
  6847 ;;		Unchanged: 0/0
  6848 ;; Data sizes:     COMRAM   BANK0   BANK1
  6849 ;;      Params:         0       0       0
  6850 ;;      Locals:         0       0       0
  6851 ;;      Temps:          0       0       0
  6852 ;;      Totals:         0       0       0
  6853 ;;Total ram usage:        0 bytes
  6854 ;; Hardware stack levels used: 1
  6855 ;; Hardware stack levels required when called: 4
  6856 ;; This function calls:
  6857 ;;		_CantaIR
  6858 ;;		_WaitForBusy
  6859 ;; This function is called by:
  6860 ;;		_motorLogic
  6861 ;; This function uses a non-reentrant model
  6862 ;;
  6863                           
  6864                           	psect	text42
  6865  001EA0                     __ptext42:
  6866                           	callstack 0
  6867  001EA0                     _LcCursorOn:
  6868                           	callstack 25
  6869                           
  6870                           ;LcTLCD.c: 145:  WaitForBusy();
  6871                           
  6872                           ;incstack = 0
  6873  001EA0  ECEE  F00C         	call	_WaitForBusy	;wreg free
  6874                           
  6875                           ;LcTLCD.c: 146:  CantaIR(0x08 | 0x04 | 0x02);
  6876  001EA4  0E0E               	movlw	14
  6877  001EA6  EF81  F00E         	goto	_CantaIR
  6878  001EAA                     __end_of_LcCursorOn:
  6879                           	callstack 0
  6880                           
  6881 ;; *************** function _LcCursorOff *****************
  6882 ;; Defined at:
  6883 ;;		line 149 in file "LcTLCD.c"
  6884 ;; Parameters:    Size  Location     Type
  6885 ;;		None
  6886 ;; Auto vars:     Size  Location     Type
  6887 ;;		None
  6888 ;; Return value:  Size  Location     Type
  6889 ;;                  1    wreg      void 
  6890 ;; Registers used:
  6891 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6892 ;; Tracked objects:
  6893 ;;		On entry : 0/0
  6894 ;;		On exit  : 0/0
  6895 ;;		Unchanged: 0/0
  6896 ;; Data sizes:     COMRAM   BANK0   BANK1
  6897 ;;      Params:         0       0       0
  6898 ;;      Locals:         0       0       0
  6899 ;;      Temps:          0       0       0
  6900 ;;      Totals:         0       0       0
  6901 ;;Total ram usage:        0 bytes
  6902 ;; Hardware stack levels used: 1
  6903 ;; Hardware stack levels required when called: 4
  6904 ;; This function calls:
  6905 ;;		_CantaIR
  6906 ;;		_WaitForBusy
  6907 ;; This function is called by:
  6908 ;;		_motorLogic
  6909 ;; This function uses a non-reentrant model
  6910 ;;
  6911                           
  6912                           	psect	text43
  6913  001EAA                     __ptext43:
  6914                           	callstack 0
  6915  001EAA                     _LcCursorOff:
  6916                           	callstack 25
  6917                           
  6918                           ;LcTLCD.c: 152:  WaitForBusy();
  6919                           
  6920                           ;incstack = 0
  6921  001EAA  ECEE  F00C         	call	_WaitForBusy	;wreg free
  6922                           
  6923                           ;LcTLCD.c: 153:  CantaIR(0x08 | 0x04);
  6924  001EAE  0E0C               	movlw	12
  6925  001EB0  EF81  F00E         	goto	_CantaIR
  6926  001EB4                     __end_of_LcCursorOff:
  6927                           	callstack 0
  6928                           
  6929 ;; *************** function _KeEnableSMS *****************
  6930 ;; Defined at:
  6931 ;;		line 156 in file "Keyboard.c"
  6932 ;; Parameters:    Size  Location     Type
  6933 ;;		None
  6934 ;; Auto vars:     Size  Location     Type
  6935 ;;		None
  6936 ;; Return value:  Size  Location     Type
  6937 ;;                  1    wreg      void 
  6938 ;; Registers used:
  6939 ;;		None
  6940 ;; Tracked objects:
  6941 ;;		On entry : 0/0
  6942 ;;		On exit  : 0/0
  6943 ;;		Unchanged: 0/0
  6944 ;; Data sizes:     COMRAM   BANK0   BANK1
  6945 ;;      Params:         0       0       0
  6946 ;;      Locals:         0       0       0
  6947 ;;      Temps:          0       0       0
  6948 ;;      Totals:         0       0       0
  6949 ;;Total ram usage:        0 bytes
  6950 ;; Hardware stack levels used: 1
  6951 ;; Hardware stack levels required when called: 2
  6952 ;; This function calls:
  6953 ;;		Nothing
  6954 ;; This function is called by:
  6955 ;;		_motorLogic
  6956 ;; This function uses a non-reentrant model
  6957 ;;
  6958                           
  6959                           	psect	text44
  6960  000004                     __ptext44:
  6961                           	callstack 0
  6962  000004                     _KeEnableSMS:
  6963                           	callstack 27
  6964                           
  6965                           ;Keyboard.c: 157:     numerical = 0;
  6966                           
  6967                           ;incstack = 0
  6968  000004  6A37               	clrf	_numerical^0,c
  6969  000006  0012               	return		;funcret
  6970  000008                     __end_of_KeEnableSMS:
  6971                           	callstack 0
  6972                           
  6973 ;; *************** function _KeDisableSMS *****************
  6974 ;; Defined at:
  6975 ;;		line 160 in file "Keyboard.c"
  6976 ;; Parameters:    Size  Location     Type
  6977 ;;		None
  6978 ;; Auto vars:     Size  Location     Type
  6979 ;;		None
  6980 ;; Return value:  Size  Location     Type
  6981 ;;                  1    wreg      void 
  6982 ;; Registers used:
  6983 ;;		wreg, status,2
  6984 ;; Tracked objects:
  6985 ;;		On entry : 0/0
  6986 ;;		On exit  : 0/0
  6987 ;;		Unchanged: 0/0
  6988 ;; Data sizes:     COMRAM   BANK0   BANK1
  6989 ;;      Params:         0       0       0
  6990 ;;      Locals:         0       0       0
  6991 ;;      Temps:          0       0       0
  6992 ;;      Totals:         0       0       0
  6993 ;;Total ram usage:        0 bytes
  6994 ;; Hardware stack levels used: 1
  6995 ;; Hardware stack levels required when called: 2
  6996 ;; This function calls:
  6997 ;;		Nothing
  6998 ;; This function is called by:
  6999 ;;		_motorLogic
  7000 ;; This function uses a non-reentrant model
  7001 ;;
  7002                           
  7003                           	psect	text45
  7004  001EB4                     __ptext45:
  7005                           	callstack 0
  7006  001EB4                     _KeDisableSMS:
  7007                           	callstack 0
  7008                           
  7009                           ;Keyboard.c: 161:     numerical = 1;
  7010                           
  7011                           ;incstack = 0
  7012  001EB4  D000               	goto	PL102	;call to abstracted procedure
  7013  001EB6                     __end_of_KeDisableSMS:
  7014                           	callstack 0
  7015  001EB6                     PL102:
  7016                           	callstack 27
  7017  001EB6  0E01               	movlw	1
  7018  001EB8  6E37               	movwf	_numerical^0,c
  7019  001EBA  0C01               	retlw	1	;funcret
  7020  001EBC                     __end_ofPL102:
  7021                           	callstack 0
  7022                           
  7023 ;; *************** function _motorKeyboard *****************
  7024 ;; Defined at:
  7025 ;;		line 72 in file "Keyboard.c"
  7026 ;; Parameters:    Size  Location     Type
  7027 ;;		None
  7028 ;; Auto vars:     Size  Location     Type
  7029 ;;		None
  7030 ;; Return value:  Size  Location     Type
  7031 ;;                  1    wreg      void 
  7032 ;; Registers used:
  7033 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7034 ;; Tracked objects:
  7035 ;;		On entry : 0/0
  7036 ;;		On exit  : 0/0
  7037 ;;		Unchanged: 0/0
  7038 ;; Data sizes:     COMRAM   BANK0   BANK1
  7039 ;;      Params:         0       0       0
  7040 ;;      Locals:         0       0       0
  7041 ;;      Temps:          2       0       0
  7042 ;;      Totals:         2       0       0
  7043 ;;Total ram usage:        2 bytes
  7044 ;; Hardware stack levels used: 1
  7045 ;; Hardware stack levels required when called: 6
  7046 ;; This function calls:
  7047 ;;		_LcDelete
  7048 ;;		_LcPutChar
  7049 ;;		_LoGotKey
  7050 ;;		_TiGetTics
  7051 ;;		_TiResetTics
  7052 ;;		_shiftColumns
  7053 ;; This function is called by:
  7054 ;;		_main
  7055 ;; This function uses a non-reentrant model
  7056 ;;
  7057                           
  7058                           	psect	text46
  7059  000BFE                     __ptext46:
  7060                           	callstack 0
  7061  000BFE                     _motorKeyboard:
  7062                           	callstack 24
  7063                           
  7064                           ;Keyboard.c: 73:  static char state = 0;;Keyboard.c: 75:  switch(state) {
  7065                           
  7066                           ;incstack = 0
  7067  000BFE  D0B0               	goto	l7212
  7068  000C00                     l382:
  7069                           
  7070                           ;Keyboard.c: 77:    if ((PORTBbits.RB5 == 1 || PORTBbits.RB4 == 1 || PORTBbits.RB3 == 1 
      +                          || PORTBbits.RB2 == 1)) {
  7071  000C00  AA81               	btfss	129,5,c	;volatile
  7072  000C02  B881               	btfsc	129,4,c	;volatile
  7073  000C04  D005               	goto	u8600
  7074  000C06  B681               	btfsc	129,3,c	;volatile
  7075  000C08  D003               	goto	u8600
  7076  000C0A  A481               	btfss	129,2,c	;volatile
  7077  000C0C  EFBB  F00D         	goto	_shiftColumns
  7078  000C10                     u8600:
  7079                           
  7080                           ;Keyboard.c: 78:                 if (PORTBbits.RB5 == 1) row = 0;
  7081  000C10  AA81               	btfss	129,5,c	;volatile
  7082  000C12  D002               	goto	l386
  7083  000C14  6A3C               	clrf	_row^0,c
  7084  000C16  D008               	goto	l7104
  7085  000C18                     l386:
  7086  000C18  A881               	btfss	129,4,c	;volatile
  7087  000C1A  D002               	goto	l388
  7088  000C1C  0E01               	movlw	1
  7089  000C1E  D003               	goto	l7102
  7090  000C20                     l388:
  7091  000C20  0E02               	movlw	2
  7092  000C22  A681               	btfss	129,3,c	;volatile
  7093  000C24  0E03               	movlw	3
  7094  000C26                     l7102:
  7095  000C26  6E3C               	movwf	_row^0,c
  7096  000C28                     l7104:
  7097                           
  7098                           ;Keyboard.c: 82:     TiResetTics(tDebounce);
  7099  000C28  5039               	movf	_tDebounce^0,w,c
  7100  000C2A  EC73  F00E         	call	_TiResetTics
  7101                           
  7102                           ;Keyboard.c: 83:                 prev_row = row;
  7103  000C2E  C03C  F03B         	movff	_row,_prev_row
  7104                           
  7105                           ;Keyboard.c: 84:                 prev_column = column;
  7106  000C32  C054  F03A         	movff	_column,_prev_column
  7107  000C36                     l7110:
  7108                           
  7109                           ;Keyboard.c: 85:     state++;
  7110  000C36  2A36               	incf	motorKeyboard@state^0,f,c
  7111                           
  7112                           ;Keyboard.c: 86:    }
  7113  000C38  0012               	return	
  7114  000C3A                     l7114:
  7115                           
  7116                           ;Keyboard.c: 92:    if (TiGetTics(tDebounce) >= 10 && !(PORTBbits.RB5 == 1 || PORTBbits.
      +                          RB4 == 1 || PORTBbits.RB3 == 1 || PORTBbits.RB2 == 1)) {
  7117  000C3A  5039               	movf	_tDebounce^0,w,c
  7118  000C3C  EC1D  F00E         	call	_TiGetTics
  7119  000C40  BE5B               	btfsc	(?_TiGetTics+1)^0,7,c
  7120  000C42  D00D               	goto	l7126
  7121  000C44  505B               	movf	(?_TiGetTics+1)^0,w,c
  7122  000C46  E103               	bnz	u8640
  7123  000C48  0E0A               	movlw	10
  7124  000C4A  5C5A               	subwf	?_TiGetTics^0,w,c
  7125  000C4C  E308               	bnc	l7126
  7126  000C4E                     u8640:
  7127  000C4E  AA81               	btfss	129,5,c	;volatile
  7128  000C50  B881               	btfsc	129,4,c	;volatile
  7129  000C52  D005               	goto	l7126
  7130  000C54  A681               	btfss	129,3,c	;volatile
  7131  000C56  B481               	btfsc	129,2,c	;volatile
  7132  000C58  D002               	goto	l7126
  7133                           
  7134                           ;Keyboard.c: 93:     state--;
  7135  000C5A  0636               	decf	motorKeyboard@state^0,f,c
  7136                           
  7137                           ;Keyboard.c: 94:    }
  7138  000C5C  0012               	return	
  7139  000C5E                     l7126:
  7140  000C5E  5039               	movf	_tDebounce^0,w,c
  7141  000C60  EC1D  F00E         	call	_TiGetTics
  7142  000C64  BE5B               	btfsc	(?_TiGetTics+1)^0,7,c
  7143  000C66  0012               	return	
  7144  000C68  505B               	movf	(?_TiGetTics+1)^0,w,c
  7145  000C6A  E104               	bnz	u8690
  7146  000C6C  0E0A               	movlw	10
  7147  000C6E  5C5A               	subwf	?_TiGetTics^0,w,c
  7148  000C70  A0D8               	btfss	status,0,c
  7149  000C72  0012               	return	
  7150  000C74                     u8690:
  7151  000C74  AA81               	btfss	129,5,c	;volatile
  7152  000C76  B881               	btfsc	129,4,c	;volatile
  7153  000C78  D004               	goto	u8730
  7154  000C7A  B681               	btfsc	129,3,c	;volatile
  7155  000C7C  D002               	goto	u8730
  7156  000C7E  A481               	btfss	129,2,c	;volatile
  7157  000C80  0012               	return	
  7158  000C82                     u8730:
  7159                           
  7160                           ;Keyboard.c: 96:     TiResetTics(tSMS);
  7161  000C82  5038               	movf	_tSMS^0,w,c
  7162  000C84  EC73  F00E         	call	_TiResetTics
  7163  000C88  D7D6               	goto	l7110
  7164  000C8A                     l400:
  7165                           
  7166                           ;Keyboard.c: 101:    if (!(PORTBbits.RB5 == 1 || PORTBbits.RB4 == 1 || PORTBbits.RB3 == 
      +                          1 || PORTBbits.RB2 == 1)) {
  7167  000C8A  AA81               	btfss	129,5,c	;volatile
  7168  000C8C  B881               	btfsc	129,4,c	;volatile
  7169  000C8E  0012               	return	
  7170  000C90  A681               	btfss	129,3,c	;volatile
  7171  000C92  B481               	btfsc	129,2,c	;volatile
  7172  000C94  0012               	return	
  7173                           
  7174                           ;Keyboard.c: 102:                 if(!numerical) {
  7175  000C96  5037               	movf	_numerical^0,w,c
  7176  000C98  E1CE               	bnz	l7110
  7177                           
  7178                           ;Keyboard.c: 104:                     if(table[row][column][0] != '#') LcPutChar(table[r
      +                          ow][column][sms]);
  7179  000C9A  D873               	call	PL2	;call to abstracted procedure
  7180  000C9C  D89B               	call	PL8	;call to abstracted procedure
  7181  000C9E  0A23               	xorlw	35
  7182  000CA0  E0CA               	bz	l7110
  7183  000CA2  D86F               	call	PL2	;call to abstracted procedure
  7184  000CA4  D89E               	call	PL14	;call to abstracted procedure
  7185  000CA6  D88E               	call	PL6	;call to abstracted procedure
  7186  000CA8  EC76  F00D         	call	_LcPutChar
  7187  000CAC  D7C4               	goto	l7110
  7188  000CAE                     l7154:
  7189                           
  7190                           ;Keyboard.c: 111:             shiftColumns();
  7191  000CAE  ECBB  F00D         	call	_shiftColumns	;wreg free
  7192                           
  7193                           ;Keyboard.c: 112:             if(numerical) {
  7194  000CB2  5037               	movf	_numerical^0,w,c
  7195  000CB4  E007               	bz	l7162
  7196                           
  7197                           ;Keyboard.c: 113:                LoGotKey(table[prev_row][prev_column][0]);
  7198  000CB6  503B               	movf	_prev_row^0,w,c
  7199  000CB8  D875               	call	PL4	;call to abstracted procedure
  7200  000CBA  D88C               	call	PL8	;call to abstracted procedure
  7201  000CBC  EC43  F00B         	call	_LoGotKey
  7202  000CC0                     l7160:
  7203                           
  7204                           ;Keyboard.c: 114:                state = 0;
  7205  000CC0  6A36               	clrf	motorKeyboard@state^0,c
  7206                           
  7207                           ;Keyboard.c: 115:             }
  7208  000CC2  0012               	return	
  7209  000CC4                     l7162:
  7210                           
  7211                           ;Keyboard.c: 117:                 if (TiGetTics(tSMS) >= 1200) {
  7212  000CC4  5038               	movf	_tSMS^0,w,c
  7213  000CC6  EC1D  F00E         	call	_TiGetTics
  7214  000CCA  BE5B               	btfsc	(?_TiGetTics+1)^0,7,c
  7215  000CCC  D00B               	goto	l7170
  7216  000CCE  D88C               	call	PL50	;call to abstracted procedure
  7217  000CD0  E309               	bnc	l7170
  7218                           
  7219                           ;Keyboard.c: 118:                     LoGotKey(table[prev_row][prev_column][sms]);
  7220  000CD2  503B               	movf	_prev_row^0,w,c
  7221  000CD4  D867               	call	PL4	;call to abstracted procedure
  7222  000CD6  D885               	call	PL14	;call to abstracted procedure
  7223  000CD8  D875               	call	PL6	;call to abstracted procedure
  7224  000CDA  EC43  F00B         	call	_LoGotKey
  7225                           
  7226                           ;Keyboard.c: 119:                     sms = 1;
  7227  000CDE  0E01               	movlw	1
  7228  000CE0  6E3D               	movwf	_sms^0,c
  7229                           
  7230                           ;Keyboard.c: 120:                     state = 0;
  7231  000CE2  6A36               	clrf	motorKeyboard@state^0,c
  7232  000CE4                     l7170:
  7233                           
  7234                           ;Keyboard.c: 123:                 if ((PORTBbits.RB5 == 1 || PORTBbits.RB4 == 1 || PORTB
      +                          bits.RB3 == 1 || PORTBbits.RB2 == 1)) {
  7235  000CE4  AA81               	btfss	129,5,c	;volatile
  7236  000CE6  B881               	btfsc	129,4,c	;volatile
  7237  000CE8  D004               	goto	u8850
  7238  000CEA  B681               	btfsc	129,3,c	;volatile
  7239  000CEC  D002               	goto	u8850
  7240  000CEE  A481               	btfss	129,2,c	;volatile
  7241  000CF0  0012               	return	
  7242  000CF2                     u8850:
  7243                           
  7244                           ;Keyboard.c: 124:                     if (PORTBbits.RB5 == 1) row = 0;
  7245  000CF2  AA81               	btfss	129,5,c	;volatile
  7246  000CF4  D002               	goto	l411
  7247  000CF6  6A3C               	clrf	_row^0,c
  7248  000CF8  D008               	goto	l7186
  7249  000CFA                     l411:
  7250  000CFA  A881               	btfss	129,4,c	;volatile
  7251  000CFC  D002               	goto	l413
  7252  000CFE  0E01               	movlw	1
  7253  000D00  D003               	goto	l7184
  7254  000D02                     l413:
  7255  000D02  0E02               	movlw	2
  7256  000D04  A681               	btfss	129,3,c	;volatile
  7257  000D06  0E03               	movlw	3
  7258  000D08                     l7184:
  7259  000D08  6E3C               	movwf	_row^0,c
  7260  000D0A                     l7186:
  7261                           
  7262                           ;Keyboard.c: 129:                     if (!(prev_row == row && prev_column == column)) {
  7263  000D0A  503C               	movf	_row^0,w,c
  7264  000D0C  183B               	xorwf	_prev_row^0,w,c
  7265  000D0E  E103               	bnz	u8900
  7266  000D10  5054               	movf	_column^0,w,c
  7267  000D12  183A               	xorwf	_prev_column^0,w,c
  7268  000D14  E011               	bz	l7198
  7269  000D16                     u8900:
  7270                           
  7271                           ;Keyboard.c: 130:                         if(numerical) {
  7272  000D16  5037               	movf	_numerical^0,w,c
  7273  000D18  E006               	bz	l7194
  7274                           
  7275                           ;Keyboard.c: 131:                             LoGotKey(table[prev_row][prev_column][0]);
  7276  000D1A  503B               	movf	_prev_row^0,w,c
  7277  000D1C  D843               	call	PL4	;call to abstracted procedure
  7278  000D1E  D85A               	call	PL8	;call to abstracted procedure
  7279  000D20  EC43  F00B         	call	_LoGotKey
  7280                           
  7281                           ;Keyboard.c: 132:                         }
  7282  000D24  D006               	goto	l7196
  7283  000D26                     l7194:
  7284                           
  7285                           ;Keyboard.c: 134:                             LoGotKey(table[prev_row][prev_column][sms]
      +                          );
  7286  000D26  503B               	movf	_prev_row^0,w,c
  7287  000D28  D83D               	call	PL4	;call to abstracted procedure
  7288  000D2A  D85B               	call	PL14	;call to abstracted procedure
  7289  000D2C  D84B               	call	PL6	;call to abstracted procedure
  7290  000D2E  EC43  F00B         	call	_LoGotKey
  7291  000D32                     l7196:
  7292                           
  7293                           ;Keyboard.c: 136:                         sms = 1;
  7294  000D32  0E01               	movlw	1
  7295  000D34  6E3D               	movwf	_sms^0,c
  7296                           
  7297                           ;Keyboard.c: 137:                     }
  7298  000D36  D7C4               	goto	l7160
  7299  000D38                     l7198:
  7300                           
  7301                           ;Keyboard.c: 139:                         if((table[row][column][sms+1] == '\0') || tabl
      +                          e[row][column][0] == '*' || table[row][column][0] == '#') {
  7302  000D38  D824               	call	PL2	;call to abstracted procedure
  7303  000D3A  D853               	call	PL14	;call to abstracted procedure
  7304  000D3C  226A               	addwfc	(??_motorKeyboard+1)^0,f,c
  7305  000D3E  2A69               	incf	??_motorKeyboard^0,f,c
  7306  000D40  D841               	call	PL6	;call to abstracted procedure
  7307  000D42  E008               	bz	u8940
  7308  000D44  D81E               	call	PL2	;call to abstracted procedure
  7309  000D46  D846               	call	PL8	;call to abstracted procedure
  7310  000D48  0A2A               	xorlw	42
  7311  000D4A  E004               	bz	u8940
  7312  000D4C  D81A               	call	PL2	;call to abstracted procedure
  7313  000D4E  D842               	call	PL8	;call to abstracted procedure
  7314  000D50  0A23               	xorlw	35
  7315  000D52  E102               	bnz	l7204
  7316  000D54                     u8940:
  7317                           
  7318                           ;Keyboard.c: 140:                             sms = 0;
  7319  000D54  6A3D               	clrf	_sms^0,c
  7320                           
  7321                           ;Keyboard.c: 141:                         } else {
  7322  000D56  D001               	goto	l7206
  7323  000D58                     l7204:
  7324                           
  7325                           ;Keyboard.c: 142:                             sms++;
  7326  000D58  2A3D               	incf	_sms^0,f,c
  7327  000D5A                     l7206:
  7328                           
  7329                           ;Keyboard.c: 145:                         LcDelete();
  7330  000D5A  EC09  F00F         	call	_LcDelete	;wreg free
  7331  000D5E  D7B0               	goto	l7160
  7332  000D60                     l7212:
  7333  000D60  5036               	movf	motorKeyboard@state^0,w,c
  7334  000D62  6E69               	movwf	??_motorKeyboard^0,c
  7335  000D64  6A6A               	clrf	(??_motorKeyboard+1)^0,c
  7336                           
  7337                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7338                           ; Switch size 1, requested type "space"
  7339                           ; Number of cases is 1, Range of values is 0 to 0
  7340                           ; switch strategies available:
  7341                           ; Name         Instructions Cycles
  7342                           ; simple_byte            4     3 (average)
  7343                           ;	Chosen strategy is simple_byte
  7344  000D66  506A               	movf	(??_motorKeyboard+1)^0,w,c
  7345  000D68  A4D8               	btfss	status,2,c
  7346  000D6A  0012               	return	
  7347                           
  7348                           ; Switch size 1, requested type "space"
  7349                           ; Number of cases is 4, Range of values is 0 to 3
  7350                           ; switch strategies available:
  7351                           ; Name         Instructions Cycles
  7352                           ; simple_byte           13     7 (average)
  7353                           ;	Chosen strategy is simple_byte
  7354  000D6C  5069               	movf	??_motorKeyboard^0,w,c
  7355  000D6E  E101 D747          	bz	l382
  7356  000D72  0A01               	xorlw	1	; case 1
  7357  000D74  E101 D761          	bz	l7114
  7358  000D78  0A03               	xorlw	3	; case 2
  7359  000D7A  E087               	bz	l400
  7360  000D7C  0A01               	xorlw	1	; case 3
  7361  000D7E  E097               	bz	l7154
  7362  000D80  0012               	return		;funcret
  7363  000D82                     __end_of_motorKeyboard:
  7364                           	callstack 0
  7365  000D82                     PL2:
  7366                           	callstack 24
  7367  000D82  503C               	movf	_row^0,w,c
  7368  000D84  0D12               	mullw	18
  7369  000D86  0EF7               	movlw	low _table
  7370  000D88  6E69               	movwf	??_motorKeyboard^0,c
  7371  000D8A  0E1E               	movlw	high _table
  7372  000D8C  6E6A               	movwf	(??_motorKeyboard+1)^0,c
  7373  000D8E  50F3               	movf	243,w,c
  7374  000D90  2669               	addwf	??_motorKeyboard^0,f,c
  7375  000D92  50F4               	movf	244,w,c
  7376  000D94  226A               	addwfc	(??_motorKeyboard+1)^0,f,c
  7377  000D96  5054               	movf	_column^0,w,c
  7378  000D98  0D06               	mullw	6
  7379  000D9A  50F3               	movf	243,w,c
  7380  000D9C  2669               	addwf	??_motorKeyboard^0,f,c
  7381  000D9E  50F4               	movf	244,w,c
  7382  000DA0  226A               	addwfc	(??_motorKeyboard+1)^0,f,c
  7383  000DA2  0012               	return	
  7384  000DA4                     __end_ofPL2:
  7385                           	callstack 0
  7386  000DA4                     PL4:
  7387                           	callstack 24
  7388  000DA4  0D12               	mullw	18
  7389  000DA6  0EF7               	movlw	low _table
  7390  000DA8  6E69               	movwf	??_motorKeyboard^0,c
  7391  000DAA  0E1E               	movlw	high _table
  7392  000DAC  6E6A               	movwf	(??_motorKeyboard+1)^0,c
  7393  000DAE  50F3               	movf	243,w,c
  7394  000DB0  2669               	addwf	??_motorKeyboard^0,f,c
  7395  000DB2  50F4               	movf	244,w,c
  7396  000DB4  226A               	addwfc	(??_motorKeyboard+1)^0,f,c
  7397  000DB6  503A               	movf	_prev_column^0,w,c
  7398  000DB8  0D06               	mullw	6
  7399  000DBA  50F3               	movf	243,w,c
  7400  000DBC  2669               	addwf	??_motorKeyboard^0,f,c
  7401  000DBE  50F4               	movf	244,w,c
  7402  000DC0  226A               	addwfc	(??_motorKeyboard+1)^0,f,c
  7403  000DC2  0012               	return	
  7404  000DC4                     __end_ofPL4:
  7405                           	callstack 0
  7406  000DC4                     PL6:
  7407                           	callstack 24
  7408  000DC4  226A               	addwfc	(??_motorKeyboard+1)^0,f,c
  7409  000DC6  C069  FFF6         	movff	??_motorKeyboard,tblptrl
  7410  000DCA  C06A  FFF7         	movff	??_motorKeyboard+1,tblptrh
  7411  000DCE                     	if	0	;tblptru may be non-zero
  7412  000DCE                     	endif
  7413  000DCE                     	if	0	;tblptru may be non-zero
  7414  000DCE                     	endif
  7415  000DCE  0008               	tblrd		*
  7416  000DD0  50F5               	movf	tablat,w,c
  7417  000DD2  0012               	return	
  7418  000DD4                     __end_ofPL6:
  7419                           	callstack 0
  7420  000DD4                     PL8:
  7421                           	callstack 24
  7422  000DD4  C069  FFF6         	movff	??_motorKeyboard,tblptrl
  7423  000DD8  C06A  FFF7         	movff	??_motorKeyboard+1,tblptrh
  7424  000DDC                     	if	0	;tblptru may be non-zero
  7425  000DDC                     	endif
  7426  000DDC                     	if	0	;tblptru may be non-zero
  7427  000DDC                     	endif
  7428  000DDC  0008               	tblrd		*
  7429  000DDE  50F5               	movf	tablat,w,c
  7430  000DE0  0012               	return	
  7431  000DE2                     __end_ofPL8:
  7432                           	callstack 0
  7433  000DE2                     PL14:
  7434                           	callstack 24
  7435  000DE2  503D               	movf	_sms^0,w,c
  7436  000DE4  2669               	addwf	??_motorKeyboard^0,f,c
  7437  000DE6  0C00               	retlw	0
  7438  000DE8                     __end_ofPL14:
  7439                           	callstack 0
  7440  000DE8                     PL50:
  7441                           	callstack 22
  7442  000DE8  0EB0               	movlw	176
  7443  000DEA  5C5A               	subwf	?_TiGetTics^0,w,c
  7444  000DEC  0E04               	movlw	4
  7445  000DEE  585B               	subwfb	(?_TiGetTics+1)^0,w,c
  7446  000DF0  0012               	return	
  7447  000DF2                     __end_ofPL50:
  7448                           	callstack 0
  7449                           
  7450 ;; *************** function _shiftColumns *****************
  7451 ;; Defined at:
  7452 ;;		line 53 in file "Keyboard.c"
  7453 ;; Parameters:    Size  Location     Type
  7454 ;;		None
  7455 ;; Auto vars:     Size  Location     Type
  7456 ;;		None
  7457 ;; Return value:  Size  Location     Type
  7458 ;;                  1    wreg      void 
  7459 ;; Registers used:
  7460 ;;		wreg, status,2, status,0
  7461 ;; Tracked objects:
  7462 ;;		On entry : 0/0
  7463 ;;		On exit  : 0/0
  7464 ;;		Unchanged: 0/0
  7465 ;; Data sizes:     COMRAM   BANK0   BANK1
  7466 ;;      Params:         0       0       0
  7467 ;;      Locals:         0       0       0
  7468 ;;      Temps:          3       0       0
  7469 ;;      Totals:         3       0       0
  7470 ;;Total ram usage:        3 bytes
  7471 ;; Hardware stack levels used: 1
  7472 ;; Hardware stack levels required when called: 2
  7473 ;; This function calls:
  7474 ;;		Nothing
  7475 ;; This function is called by:
  7476 ;;		_motorKeyboard
  7477 ;; This function uses a non-reentrant model
  7478 ;;
  7479                           
  7480                           	psect	text47
  7481  001B76                     __ptext47:
  7482                           	callstack 0
  7483  001B76                     _shiftColumns:
  7484                           	callstack 27
  7485                           
  7486                           ;Keyboard.c: 54:     column++;
  7487                           
  7488                           ;incstack = 0
  7489  001B76  2A54               	incf	_column^0,f,c
  7490                           
  7491                           ;Keyboard.c: 55:     if (column>2) column = 0;
  7492  001B78  0E02               	movlw	2
  7493  001B7A  6454               	cpfsgt	_column^0,c
  7494  001B7C  D001               	goto	l2390
  7495  001B7E  6A54               	clrf	_column^0,c
  7496  001B80                     l2390:
  7497                           
  7498                           ;Keyboard.c: 56:     LATE = 0x04 >> column;
  7499  001B80  C054  F05A         	movff	_column,??_shiftColumns
  7500  001B84  0E04               	movlw	4
  7501  001B86  6E5B               	movwf	(??_shiftColumns+1)^0,c
  7502  001B88  6A5C               	clrf	(??_shiftColumns+2)^0,c
  7503  001B8A  2A5A               	incf	??_shiftColumns^0,f,c
  7504  001B8C  D003               	goto	u984
  7505  001B8E                     u985:
  7506  001B8E  345C               	rlcf	(??_shiftColumns+2)^0,w,c
  7507  001B90  325C               	rrcf	(??_shiftColumns+2)^0,f,c
  7508  001B92  325B               	rrcf	(??_shiftColumns+1)^0,f,c
  7509  001B94                     u984:
  7510  001B94  2E5A               	decfsz	??_shiftColumns^0,f,c
  7511  001B96  D7FB               	goto	u985
  7512  001B98  505B               	movf	(??_shiftColumns+1)^0,w,c
  7513  001B9A  6E8D               	movwf	141,c	;volatile
  7514  001B9C  0012               	return		;funcret
  7515  001B9E                     __end_of_shiftColumns:
  7516                           	callstack 0
  7517                           
  7518 ;; *************** function _LoGotKey *****************
  7519 ;; Defined at:
  7520 ;;		line 72 in file "Logic.c"
  7521 ;; Parameters:    Size  Location     Type
  7522 ;;  pressed         1    wreg     unsigned char 
  7523 ;; Auto vars:     Size  Location     Type
  7524 ;;  pressed         1    7[COMRAM] unsigned char 
  7525 ;; Return value:  Size  Location     Type
  7526 ;;                  1    wreg      void 
  7527 ;; Registers used:
  7528 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7529 ;; Tracked objects:
  7530 ;;		On entry : 0/0
  7531 ;;		On exit  : 0/0
  7532 ;;		Unchanged: 0/0
  7533 ;; Data sizes:     COMRAM   BANK0   BANK1
  7534 ;;      Params:         0       0       0
  7535 ;;      Locals:         1       0       0
  7536 ;;      Temps:          0       0       0
  7537 ;;      Totals:         1       0       0
  7538 ;;Total ram usage:        1 bytes
  7539 ;; Hardware stack levels used: 1
  7540 ;; Hardware stack levels required when called: 3
  7541 ;; This function calls:
  7542 ;;		_storePass
  7543 ;;		_storeUser
  7544 ;; This function is called by:
  7545 ;;		_motorKeyboard
  7546 ;; This function uses a non-reentrant model
  7547 ;;
  7548                           
  7549                           	psect	text48
  7550  001686                     __ptext48:
  7551                           	callstack 0
  7552  001686                     _LoGotKey:
  7553                           	callstack 26
  7554                           
  7555                           ;incstack = 0
  7556                           ;LoGotKey@pressed stored from wreg
  7557  001686  6E5C               	movwf	LoGotKey@pressed^0,c
  7558                           
  7559                           ;Logic.c: 73:     key = pressed;
  7560  001688  C05C  F028         	movff	LoGotKey@pressed,_key
  7561                           
  7562                           ;Logic.c: 74:     if(state == 5) {
  7563  00168C  0E05               	movlw	5
  7564  00168E  1827               	xorwf	_state@Logic$F1441^0,w,c
  7565  001690  A4D8               	btfss	status,2,c
  7566  001692  0012               	return	
  7567                           
  7568                           ;Logic.c: 75:         if(key != '#') {
  7569  001694  0E23               	movlw	35
  7570  001696  1828               	xorwf	_key^0,w,c
  7571  001698  B4D8               	btfsc	status,2,c
  7572  00169A  0012               	return	
  7573                           
  7574                           ;Logic.c: 76:             if(writing == 0) {
  7575  00169C  5025               	movf	_writing^0,w,c
  7576  00169E  E10D               	bnz	l6702
  7577                           
  7578                           ;Logic.c: 77:                 user[position] = key;
  7579  0016A0  EC5F  F004         	call	PL18	;call to abstracted procedure
  7580  0016A4  C028  FFDF         	movff	_key,indf2
  7581                           
  7582                           ;Logic.c: 78:                 storeUser(user[position], position);
  7583  0016A8  C026  F05A         	movff	_position,storeUser@positionUser
  7584  0016AC  EC5F  F004         	call	PL18	;call to abstracted procedure
  7585  0016B0  50DF               	movf	indf2,w,c
  7586  0016B2  ECF9  F00E         	call	_storeUser
  7587  0016B6                     l6700:
  7588                           
  7589                           ;Logic.c: 79:                 position++;
  7590  0016B6  2A26               	incf	_position^0,f,c
  7591                           
  7592                           ;Logic.c: 80:             }
  7593  0016B8  0012               	return	
  7594  0016BA                     l6702:
  7595                           
  7596                           ;Logic.c: 82:                 pass[position] = key;
  7597  0016BA  D809               	call	PL52	;call to abstracted procedure
  7598  0016BC  C028  FFDF         	movff	_key,indf2
  7599                           
  7600                           ;Logic.c: 83:                 storePass(pass[position], position);
  7601  0016C0  C026  F05A         	movff	_position,storePass@positionPass
  7602  0016C4  D804               	call	PL52	;call to abstracted procedure
  7603  0016C6  50DF               	movf	indf2,w,c
  7604  0016C8  EC01  F00F         	call	_storePass
  7605  0016CC  D7F4               	goto	l6700
  7606  0016CE                     __end_of_LoGotKey:
  7607                           	callstack 0
  7608  0016CE                     PL52:
  7609                           	callstack 26
  7610  0016CE  5026               	movf	_position^0,w,c
  7611  0016D0  0FD7               	addlw	low _pass
  7612  0016D2  6ED9               	movwf	fsr2l,c
  7613  0016D4  6ADA               	clrf	fsr2h,c
  7614  0016D6  0012               	return	
  7615  0016D8                     __end_ofPL52:
  7616                           	callstack 0
  7617                           
  7618 ;; *************** function _storeUser *****************
  7619 ;; Defined at:
  7620 ;;		line 278 in file "EEPROM.c"
  7621 ;; Parameters:    Size  Location     Type
  7622 ;;  value           1    wreg     unsigned char 
  7623 ;;  positionUser    1    5[COMRAM] unsigned char 
  7624 ;; Auto vars:     Size  Location     Type
  7625 ;;  value           1    6[COMRAM] unsigned char 
  7626 ;; Return value:  Size  Location     Type
  7627 ;;                  1    wreg      void 
  7628 ;; Registers used:
  7629 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  7630 ;; Tracked objects:
  7631 ;;		On entry : 0/0
  7632 ;;		On exit  : 0/0
  7633 ;;		Unchanged: 0/0
  7634 ;; Data sizes:     COMRAM   BANK0   BANK1
  7635 ;;      Params:         1       0       0
  7636 ;;      Locals:         1       0       0
  7637 ;;      Temps:          0       0       0
  7638 ;;      Totals:         2       0       0
  7639 ;;Total ram usage:        2 bytes
  7640 ;; Hardware stack levels used: 1
  7641 ;; Hardware stack levels required when called: 2
  7642 ;; This function calls:
  7643 ;;		Nothing
  7644 ;; This function is called by:
  7645 ;;		_LoGotKey
  7646 ;;		_motorLogic
  7647 ;; This function uses a non-reentrant model
  7648 ;;
  7649                           
  7650                           	psect	text49
  7651  001DF2                     __ptext49:
  7652                           	callstack 0
  7653  001DF2                     _storeUser:
  7654                           	callstack 27
  7655                           
  7656                           ;incstack = 0
  7657                           ;storeUser@value stored from wreg
  7658  001DF2  6E5B               	movwf	storeUser@value^0,c
  7659                           
  7660                           ;EEPROM.c: 279:     user[positionUser] = value;
  7661  001DF4  505A               	movf	storeUser@positionUser^0,w,c
  7662  001DF6  0FA3               	addlw	low _user@EEPROM$F1570
  7663  001DF8  6ED9               	movwf	fsr2l,c
  7664  001DFA  6ADA               	clrf	fsr2h,c
  7665  001DFC  C05B  FFDF         	movff	storeUser@value,indf2
  7666  001E00  0012               	return		;funcret
  7667  001E02                     __end_of_storeUser:
  7668                           	callstack 0
  7669                           
  7670 ;; *************** function _storePass *****************
  7671 ;; Defined at:
  7672 ;;		line 282 in file "EEPROM.c"
  7673 ;; Parameters:    Size  Location     Type
  7674 ;;  value           1    wreg     unsigned char 
  7675 ;;  positionPass    1    5[COMRAM] unsigned char 
  7676 ;; Auto vars:     Size  Location     Type
  7677 ;;  value           1    6[COMRAM] unsigned char 
  7678 ;; Return value:  Size  Location     Type
  7679 ;;                  1    wreg      void 
  7680 ;; Registers used:
  7681 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  7682 ;; Tracked objects:
  7683 ;;		On entry : 0/0
  7684 ;;		On exit  : 0/0
  7685 ;;		Unchanged: 0/0
  7686 ;; Data sizes:     COMRAM   BANK0   BANK1
  7687 ;;      Params:         1       0       0
  7688 ;;      Locals:         1       0       0
  7689 ;;      Temps:          0       0       0
  7690 ;;      Totals:         2       0       0
  7691 ;;Total ram usage:        2 bytes
  7692 ;; Hardware stack levels used: 1
  7693 ;; Hardware stack levels required when called: 2
  7694 ;; This function calls:
  7695 ;;		Nothing
  7696 ;; This function is called by:
  7697 ;;		_LoGotKey
  7698 ;;		_motorLogic
  7699 ;; This function uses a non-reentrant model
  7700 ;;
  7701                           
  7702                           	psect	text50
  7703  001E02                     __ptext50:
  7704                           	callstack 0
  7705  001E02                     _storePass:
  7706                           	callstack 27
  7707                           
  7708                           ;incstack = 0
  7709                           ;storePass@value stored from wreg
  7710  001E02  6E5B               	movwf	storePass@value^0,c
  7711                           
  7712                           ;EEPROM.c: 283:     pass[positionPass] = value;
  7713  001E04  505A               	movf	storePass@positionPass^0,w,c
  7714  001E06  0F9B               	addlw	low _pass@EEPROM$F1571
  7715  001E08  6ED9               	movwf	fsr2l,c
  7716  001E0A  6ADA               	clrf	fsr2h,c
  7717  001E0C  C05B  FFDF         	movff	storePass@value,indf2
  7718  001E10  0012               	return		;funcret
  7719  001E12                     __end_of_storePass:
  7720                           	callstack 0
  7721                           
  7722 ;; *************** function _LcPutChar *****************
  7723 ;; Defined at:
  7724 ;;		line 184 in file "LcTLCD.c"
  7725 ;; Parameters:    Size  Location     Type
  7726 ;;  c               1    wreg     unsigned char 
  7727 ;; Auto vars:     Size  Location     Type
  7728 ;;  c               1   19[COMRAM] unsigned char 
  7729 ;; Return value:  Size  Location     Type
  7730 ;;                  1    wreg      void 
  7731 ;; Registers used:
  7732 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7733 ;; Tracked objects:
  7734 ;;		On entry : 0/0
  7735 ;;		On exit  : 0/0
  7736 ;;		Unchanged: 0/0
  7737 ;; Data sizes:     COMRAM   BANK0   BANK1
  7738 ;;      Params:         0       0       0
  7739 ;;      Locals:         1       0       0
  7740 ;;      Temps:          0       0       0
  7741 ;;      Totals:         1       0       0
  7742 ;;Total ram usage:        1 bytes
  7743 ;; Hardware stack levels used: 1
  7744 ;; Hardware stack levels required when called: 5
  7745 ;; This function calls:
  7746 ;;		_CantaData
  7747 ;;		_LcGotoXY
  7748 ;;		_WaitForBusy
  7749 ;; This function is called by:
  7750 ;;		_LcPrintLine
  7751 ;;		_LcPrintSecondLine
  7752 ;;		_motorKeyboard
  7753 ;;		_motorTime
  7754 ;;		_TimModifyTime
  7755 ;;		_motorLogic
  7756 ;; This function uses a non-reentrant model
  7757 ;;
  7758                           
  7759                           	psect	text51
  7760  001AEC                     __ptext51:
  7761                           	callstack 0
  7762  001AEC                     _LcPutChar:
  7763                           	callstack 24
  7764                           
  7765                           ;incstack = 0
  7766                           ;LcPutChar@c stored from wreg
  7767  001AEC  6E68               	movwf	LcPutChar@c^0,c
  7768                           
  7769                           ;LcTLCD.c: 194:  WaitForBusy(); CantaData(c);
  7770  001AEE  ECEE  F00C         	call	_WaitForBusy	;wreg free
  7771  001AF2  5068               	movf	LcPutChar@c^0,w,c
  7772  001AF4  EC0D  F00D         	call	_CantaData
  7773                           
  7774                           ;LcTLCD.c: 196:  ++ColumnAct;
  7775  001AF8  2A49               	incf	_ColumnAct^0,f,c
  7776                           
  7777                           ;LcTLCD.c: 198:     if (ColumnAct >= 40) {
  7778  001AFA  0E27               	movlw	39
  7779  001AFC  6449               	cpfsgt	_ColumnAct^0,c
  7780  001AFE  EFEE  F00C         	goto	_WaitForBusy
  7781                           
  7782                           ;LcTLCD.c: 199:         ColumnAct = 0;
  7783  001B02  6A49               	clrf	_ColumnAct^0,c
  7784                           
  7785                           ;LcTLCD.c: 200:   if (++RowAct >= 2) RowAct = 0;
  7786  001B04  2A4A               	incf	_RowAct^0,f,c
  7787  001B06  0E01               	movlw	1
  7788  001B08  644A               	cpfsgt	_RowAct^0,c
  7789  001B0A  D001               	goto	l6364
  7790  001B0C  6A4A               	clrf	_RowAct^0,c
  7791  001B0E                     l6364:
  7792                           
  7793                           ;LcTLCD.c: 201:   LcGotoXY(ColumnAct, RowAct);
  7794  001B0E  C04A  F062         	movff	_RowAct,LcGotoXY@Row
  7795  001B12  5049               	movf	_ColumnAct^0,w,c
  7796  001B14  EC43  F00D         	call	_LcGotoXY
  7797                           
  7798                           ;LcTLCD.c: 223:     WaitForBusy();
  7799                           
  7800                           ;LcTLCD.c: 202:  }
  7801  001B18  EFEE  F00C         	goto	_WaitForBusy	;wreg free
  7802  001B1C                     __end_of_LcPutChar:
  7803                           	callstack 0
  7804                           
  7805 ;; *************** function _CantaData *****************
  7806 ;; Defined at:
  7807 ;;		line 394 in file "LcTLCD.c"
  7808 ;; Parameters:    Size  Location     Type
  7809 ;;  Data            1    wreg     unsigned char 
  7810 ;; Auto vars:     Size  Location     Type
  7811 ;;  Data            1    7[COMRAM] unsigned char 
  7812 ;; Return value:  Size  Location     Type
  7813 ;;                  1    wreg      void 
  7814 ;; Registers used:
  7815 ;;		wreg, status,2, status,0, cstack
  7816 ;; Tracked objects:
  7817 ;;		On entry : 0/0
  7818 ;;		On exit  : 0/0
  7819 ;;		Unchanged: 0/0
  7820 ;; Data sizes:     COMRAM   BANK0   BANK1
  7821 ;;      Params:         0       0       0
  7822 ;;      Locals:         1       0       0
  7823 ;;      Temps:          0       0       0
  7824 ;;      Totals:         1       0       0
  7825 ;;Total ram usage:        1 bytes
  7826 ;; Hardware stack levels used: 1
  7827 ;; Hardware stack levels required when called: 3
  7828 ;; This function calls:
  7829 ;;		_CantaPartAlta
  7830 ;;		_CantaPartBaixa
  7831 ;; This function is called by:
  7832 ;;		_LcPutChar
  7833 ;; This function uses a non-reentrant model
  7834 ;;
  7835                           
  7836                           	psect	text52
  7837  001A1A                     __ptext52:
  7838                           	callstack 0
  7839  001A1A                     _CantaData:
  7840                           	callstack 25
  7841                           
  7842                           ;incstack = 0
  7843                           ;CantaData@Data stored from wreg
  7844  001A1A  6E5C               	movwf	CantaData@Data^0,c
  7845                           
  7846                           ;LcTLCD.c: 395:  (TRISDbits.TRISD0 = TRISDbits.TRISD1 = TRISDbits.TRISD2 = TRISDbits.TRI
      +                          SD3 = 0);
  7847  001A1C  9695               	bcf	149,3,c	;volatile
  7848  001A1E  9495               	bcf	149,2,c	;volatile
  7849  001A20  9295               	bcf	149,1,c	;volatile
  7850  001A22  9095               	bcf	149,0,c	;volatile
  7851                           
  7852                           ;LcTLCD.c: 396:  (LATDbits.LATD6 = 1);
  7853  001A24  8C8C               	bsf	140,6,c	;volatile
  7854                           
  7855                           ;LcTLCD.c: 397:  (LATDbits.LATD5 = 0);
  7856  001A26  9A8C               	bcf	140,5,c	;volatile
  7857                           
  7858                           ;LcTLCD.c: 398:  (LATDbits.LATD4 = 1);
  7859  001A28  888C               	bsf	140,4,c	;volatile
  7860                           
  7861                           ;LcTLCD.c: 399:  CantaPartAlta(Data);
  7862  001A2A  505C               	movf	CantaData@Data^0,w,c
  7863  001A2C  ECBA  F00A         	call	_CantaPartAlta
  7864                           
  7865                           ;LcTLCD.c: 400:  (LATDbits.LATD4 = 1);
  7866                           
  7867                           ;LcTLCD.c: 401:  (LATDbits.LATD4 = 0);
  7868                           
  7869                           ;LcTLCD.c: 402:  (LATDbits.LATD4 = 0);
  7870                           
  7871                           ;LcTLCD.c: 403:  (LATDbits.LATD4 = 1);
  7872  001A30  D80B               	call	PL74	;call to abstracted procedure
  7873                           
  7874                           ;LcTLCD.c: 404:  CantaPartBaixa(Data);
  7875  001A32  505C               	movf	CantaData@Data^0,w,c
  7876  001A34  EC87  F00A         	call	_CantaPartBaixa
  7877                           
  7878                           ;LcTLCD.c: 405:  (LATDbits.LATD4 = 1);
  7879                           
  7880                           ;LcTLCD.c: 406:  (LATDbits.LATD4 = 0);
  7881                           
  7882                           ;LcTLCD.c: 407:  (TRISDbits.TRISD0 = TRISDbits.TRISD1 = TRISDbits.TRISD2 = TRISDbits.TRI
      +                          SD3 = 1);
  7883  001A38  D000               	goto	PL46	;call to abstracted procedure
  7884  001A3A                     __end_of_CantaData:
  7885                           	callstack 0
  7886  001A3A                     PL46:
  7887                           	callstack 22
  7888  001A3A  888C               	bsf	140,4,c	;volatile
  7889  001A3C  988C               	bcf	140,4,c	;volatile
  7890  001A3E  8695               	bsf	149,3,c	;volatile
  7891  001A40  8495               	bsf	149,2,c	;volatile
  7892  001A42  8295               	bsf	149,1,c	;volatile
  7893  001A44  8095               	bsf	149,0,c	;volatile
  7894  001A46  0012               	return		;funcret
  7895  001A48                     __end_ofPL46:
  7896                           	callstack 0
  7897  001A48                     PL74:
  7898                           	callstack 22
  7899  001A48  888C               	bsf	140,4,c	;volatile
  7900  001A4A  988C               	bcf	140,4,c	;volatile
  7901  001A4C  988C               	bcf	140,4,c	;volatile
  7902  001A4E  888C               	bsf	140,4,c	;volatile
  7903  001A50  0012               	return	
  7904  001A52                     __end_ofPL74:
  7905                           	callstack 0
  7906                           
  7907 ;; *************** function _LcDelete *****************
  7908 ;; Defined at:
  7909 ;;		line 226 in file "LcTLCD.c"
  7910 ;; Parameters:    Size  Location     Type
  7911 ;;		None
  7912 ;; Auto vars:     Size  Location     Type
  7913 ;;		None
  7914 ;; Return value:  Size  Location     Type
  7915 ;;                  1    wreg      void 
  7916 ;; Registers used:
  7917 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7918 ;; Tracked objects:
  7919 ;;		On entry : 0/0
  7920 ;;		On exit  : 0/0
  7921 ;;		Unchanged: 0/0
  7922 ;; Data sizes:     COMRAM   BANK0   BANK1
  7923 ;;      Params:         0       0       0
  7924 ;;      Locals:         0       0       0
  7925 ;;      Temps:          0       0       0
  7926 ;;      Totals:         0       0       0
  7927 ;;Total ram usage:        0 bytes
  7928 ;; Hardware stack levels used: 1
  7929 ;; Hardware stack levels required when called: 5
  7930 ;; This function calls:
  7931 ;;		_LcGotoXY
  7932 ;;		_WaitForBusy
  7933 ;; This function is called by:
  7934 ;;		_motorKeyboard
  7935 ;; This function uses a non-reentrant model
  7936 ;;
  7937                           
  7938                           	psect	text53
  7939  001E12                     __ptext53:
  7940                           	callstack 0
  7941  001E12                     _LcDelete:
  7942                           	callstack 24
  7943                           
  7944                           ;LcTLCD.c: 227:     LcGotoXY(--ColumnAct, RowAct);
  7945                           
  7946                           ;incstack = 0
  7947  001E12  C04A  F062         	movff	_RowAct,LcGotoXY@Row
  7948  001E16  0649               	decf	_ColumnAct^0,f,c
  7949  001E18  5049               	movf	_ColumnAct^0,w,c
  7950  001E1A  EC43  F00D         	call	_LcGotoXY
  7951                           
  7952                           ;LcTLCD.c: 228:     WaitForBusy();
  7953  001E1E  EFEE  F00C         	goto	_WaitForBusy	;wreg free
  7954  001E22                     __end_of_LcDelete:
  7955                           	callstack 0
  7956                           
  7957 ;; *************** function _motorJoystk *****************
  7958 ;; Defined at:
  7959 ;;		line 25 in file "Joystick.c"
  7960 ;; Parameters:    Size  Location     Type
  7961 ;;		None
  7962 ;; Auto vars:     Size  Location     Type
  7963 ;;		None
  7964 ;; Return value:  Size  Location     Type
  7965 ;;                  1    wreg      void 
  7966 ;; Registers used:
  7967 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7968 ;; Tracked objects:
  7969 ;;		On entry : 0/0
  7970 ;;		On exit  : 0/0
  7971 ;;		Unchanged: 0/0
  7972 ;; Data sizes:     COMRAM   BANK0   BANK1
  7973 ;;      Params:         0       0       0
  7974 ;;      Locals:         0       0       0
  7975 ;;      Temps:          2       0       0
  7976 ;;      Totals:         2       0       0
  7977 ;;Total ram usage:        2 bytes
  7978 ;; Hardware stack levels used: 1
  7979 ;; Hardware stack levels required when called: 7
  7980 ;; This function calls:
  7981 ;;		_LoMoveDown
  7982 ;;		_LoMoveLeft
  7983 ;;		_LoMoveRight
  7984 ;;		_LoMoveUp
  7985 ;; This function is called by:
  7986 ;;		_main
  7987 ;; This function uses a non-reentrant model
  7988 ;;
  7989                           
  7990                           	psect	text54
  7991  00132A                     __ptext54:
  7992                           	callstack 0
  7993  00132A                     _motorJoystk:
  7994                           	callstack 23
  7995                           
  7996                           ;Joystick.c: 26:  switch(state) {
  7997                           
  7998                           ;incstack = 0
  7999  00132A  D036               	goto	l7064
  8000  00132C                     l255:
  8001                           
  8002                           ;Joystick.c: 28:    if(ADCON0bits.GODONE == 0) {
  8003  00132C  B2C2               	btfsc	194,1,c	;volatile
  8004  00132E  0012               	return	
  8005                           
  8006                           ;Joystick.c: 29:     if (ADRESH == 0x00 || ADRESH == 0x03) {
  8007  001330  50C4               	movf	196,w,c	;volatile
  8008  001332  E003               	bz	u8470
  8009  001334  0E03               	movlw	3
  8010  001336  18C4               	xorwf	196,w,c	;volatile
  8011  001338  E118               	bnz	l7040
  8012  00133A                     u8470:
  8013                           
  8014                           ;Joystick.c: 31:                     if(times == 10) {
  8015  00133A  0E0A               	movlw	10
  8016  00133C  183E               	xorwf	_times^0,w,c
  8017  00133E  E113               	bnz	l7038
  8018                           
  8019                           ;Joystick.c: 32:                         if(ADRESH == 0x00) {
  8020  001340  50C4               	movf	196,w,c	;volatile
  8021  001342  E108               	bnz	l7030
  8022                           
  8023                           ;Joystick.c: 33:                             if(ADCON0 == 0x01) {
  8024  001344  04C2               	decf	194,w,c	;volatile
  8025  001346  E103               	bnz	l7028
  8026                           
  8027                           ;Joystick.c: 34:                                 LoMoveUp();
  8028  001348  ECCE  F00C         	call	_LoMoveUp	;wreg free
  8029                           
  8030                           ;Joystick.c: 35:                             }
  8031  00134C  D00A               	goto	l7036
  8032  00134E                     l7028:
  8033                           
  8034                           ;Joystick.c: 37:                                 LoMoveRight();
  8035  00134E  ECA9  F00E         	call	_LoMoveRight	;wreg free
  8036  001352  D007               	goto	l7036
  8037  001354                     l7030:
  8038                           
  8039                           ;Joystick.c: 40:                             if(ADCON0 == 0x01) {
  8040  001354  04C2               	decf	194,w,c	;volatile
  8041  001356  E103               	bnz	l7034
  8042                           
  8043                           ;Joystick.c: 41:                                 LoMoveDown();
  8044  001358  EC8C  F00C         	call	_LoMoveDown	;wreg free
  8045                           
  8046                           ;Joystick.c: 42:                             }
  8047  00135C  D002               	goto	l7036
  8048  00135E                     l7034:
  8049                           
  8050                           ;Joystick.c: 44:                                 LoMoveLeft();
  8051  00135E  ECB4  F00E         	call	_LoMoveLeft	;wreg free
  8052  001362                     l7036:
  8053                           
  8054                           ;Joystick.c: 47:                         state++;
  8055  001362  2A3F               	incf	_state^0,f,c
  8056                           
  8057                           ;Joystick.c: 48:                     }
  8058  001364  D005               	goto	l7044
  8059  001366                     l7038:
  8060                           
  8061                           ;Joystick.c: 50:                         times++;
  8062  001366  2A3E               	incf	_times^0,f,c
  8063  001368  D003               	goto	l7044
  8064  00136A                     l7040:
  8065                           
  8066                           ;Joystick.c: 59:                     state = 2;
  8067  00136A  0E02               	movlw	2
  8068  00136C  6E3F               	movwf	_state^0,c
  8069                           
  8070                           ;Joystick.c: 60:                     times = 0;
  8071  00136E  6A3E               	clrf	_times^0,c
  8072  001370                     l7044:
  8073                           
  8074                           ;Joystick.c: 62:                 ADCON0bits.GODONE = 1;
  8075  001370  82C2               	bsf	194,1,c	;volatile
  8076  001372  0012               	return	
  8077  001374                     l270:
  8078                           
  8079                           ;Joystick.c: 67:    if(ADCON0bits.GODONE == 0) {
  8080  001374  B2C2               	btfsc	194,1,c	;volatile
  8081  001376  0012               	return	
  8082                           
  8083                           ;Joystick.c: 68:     if (ADRESH == 0x02 || ADRESH == 0x01) {
  8084  001378  0E02               	movlw	2
  8085  00137A  18C4               	xorwf	196,w,c	;volatile
  8086  00137C  E002               	bz	u8540
  8087  00137E  04C4               	decf	196,w,c	;volatile
  8088  001380  E102               	bnz	l7052
  8089  001382                     u8540:
  8090                           
  8091                           ;Joystick.c: 69:                     times = 0;
  8092  001382  6A3E               	clrf	_times^0,c
  8093                           
  8094                           ;Joystick.c: 70:      state--;
  8095  001384  063F               	decf	_state^0,f,c
  8096  001386                     l7052:
  8097                           
  8098                           ;Joystick.c: 72:                 ADCON0bits.GODONE = 1;
  8099  001386  82C2               	bsf	194,1,c	;volatile
  8100  001388  0012               	return	
  8101  00138A                     l7054:
  8102                           
  8103                           ;Joystick.c: 76:             if(ADCON0 == 0x01) {
  8104  00138A  04C2               	decf	194,w,c	;volatile
  8105                           
  8106                           ;Joystick.c: 77:                 ADCON0 = 0x05;
  8107  00138C  0E05               	movlw	5
  8108  00138E  A4D8               	btfss	status,2,c
  8109                           
  8110                           ;Joystick.c: 80:                 ADCON0 = 0x01;
  8111  001390  0E01               	movlw	1
  8112                           
  8113                           ;Joystick.c: 78:             }
  8114  001392  6EC2               	movwf	194,c	;volatile
  8115                           
  8116                           ;Joystick.c: 82:             state--;
  8117  001394  063F               	decf	_state^0,f,c
  8118                           
  8119                           ;Joystick.c: 83:             break;
  8120  001396  0012               	return	
  8121  001398                     l7064:
  8122  001398  503F               	movf	_state^0,w,c
  8123  00139A  6E68               	movwf	??_motorJoystk^0,c
  8124  00139C  6A69               	clrf	(??_motorJoystk+1)^0,c
  8125                           
  8126                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  8127                           ; Switch size 1, requested type "space"
  8128                           ; Number of cases is 1, Range of values is 0 to 0
  8129                           ; switch strategies available:
  8130                           ; Name         Instructions Cycles
  8131                           ; simple_byte            4     3 (average)
  8132                           ;	Chosen strategy is simple_byte
  8133  00139E  5069               	movf	(??_motorJoystk+1)^0,w,c
  8134  0013A0  A4D8               	btfss	status,2,c
  8135  0013A2  0012               	return	
  8136                           
  8137                           ; Switch size 1, requested type "space"
  8138                           ; Number of cases is 3, Range of values is 0 to 2
  8139                           ; switch strategies available:
  8140                           ; Name         Instructions Cycles
  8141                           ; simple_byte           10     6 (average)
  8142                           ;	Chosen strategy is simple_byte
  8143  0013A4  5068               	movf	??_motorJoystk^0,w,c
  8144  0013A6  E0C2               	bz	l255
  8145  0013A8  0A01               	xorlw	1	; case 1
  8146  0013AA  E0E4               	bz	l270
  8147  0013AC  0A03               	xorlw	3	; case 2
  8148  0013AE  E0ED               	bz	l7054
  8149  0013B0  0012               	return		;funcret
  8150  0013B2                     __end_of_motorJoystk:
  8151                           	callstack 0
  8152                           
  8153 ;; *************** function _LoMoveUp *****************
  8154 ;; Defined at:
  8155 ;;		line 90 in file "Logic.c"
  8156 ;; Parameters:    Size  Location     Type
  8157 ;;		None
  8158 ;; Auto vars:     Size  Location     Type
  8159 ;;		None
  8160 ;; Return value:  Size  Location     Type
  8161 ;;                  1    wreg      void 
  8162 ;; Registers used:
  8163 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8164 ;; Tracked objects:
  8165 ;;		On entry : 0/0
  8166 ;;		On exit  : 0/0
  8167 ;;		Unchanged: 0/0
  8168 ;; Data sizes:     COMRAM   BANK0   BANK1
  8169 ;;      Params:         0       0       0
  8170 ;;      Locals:         0       0       0
  8171 ;;      Temps:          0       0       0
  8172 ;;      Totals:         0       0       0
  8173 ;;Total ram usage:        0 bytes
  8174 ;; Hardware stack levels used: 1
  8175 ;; Hardware stack levels required when called: 6
  8176 ;; This function calls:
  8177 ;;		_LcClear
  8178 ;;		_SiIsAvailable
  8179 ;;		_SiSendChar
  8180 ;; This function is called by:
  8181 ;;		_motorJoystk
  8182 ;; This function uses a non-reentrant model
  8183 ;;
  8184                           
  8185                           	psect	text55
  8186  00199C                     __ptext55:
  8187                           	callstack 0
  8188  00199C                     _LoMoveUp:
  8189                           	callstack 23
  8190                           
  8191                           ;Logic.c: 91:     if (menuPos == 16) menuPos = 8;
  8192                           
  8193                           ;incstack = 0
  8194  00199C  0E10               	movlw	16
  8195  00199E  1824               	xorwf	_menuPos^0,w,c
  8196  0019A0  E102               	bnz	l6632
  8197  0019A2  0E08               	movlw	8
  8198  0019A4  6E24               	movwf	_menuPos^0,c
  8199  0019A6                     l6632:
  8200                           
  8201                           ;Logic.c: 92:     if(state == 11 || state == 8) {
  8202  0019A6  0E0B               	movlw	11
  8203  0019A8  1827               	xorwf	_state@Logic$F1441^0,w,c
  8204  0019AA  E003               	bz	u7850
  8205  0019AC  0E08               	movlw	8
  8206  0019AE  1827               	xorwf	_state@Logic$F1441^0,w,c
  8207  0019B0  E10A               	bnz	l6646
  8208  0019B2                     u7850:
  8209                           
  8210                           ;Logic.c: 94:         menuWrite = 0;
  8211  0019B2  0624               	decf	_menuPos^0,f,c
  8212                           
  8213                           ;Logic.c: 95:         if(menuPos == 5) {
  8214  0019B4  0E05               	movlw	5
  8215  0019B6  1824               	xorwf	_menuPos^0,w,c
  8216  0019B8  E102               	bnz	l6642
  8217                           
  8218                           ;Logic.c: 96:             menuPos = 6;
  8219  0019BA  0E06               	movlw	6
  8220  0019BC  6E24               	movwf	_menuPos^0,c
  8221  0019BE                     l6642:
  8222                           
  8223                           ;Logic.c: 98:         LcClear();
  8224  0019BE  EC30  F00E         	call	_LcClear	;wreg free
  8225                           
  8226                           ;Logic.c: 99:         state = menuPos;
  8227                           
  8228                           ;Logic.c: 100:     }
  8229  0019C2  EFAB  F00C         	goto	__end_of_LoMoveDown	;call to abstracted procedure
  8230  0019C6                     l6646:
  8231  0019C6  0429               	decf	_gameStarted^0,w,c
  8232  0019C8  A4D8               	btfss	status,2,c
  8233  0019CA  0012               	return	
  8234                           
  8235                           ;Logic.c: 102:         if(SiIsAvailable()) {
  8236  0019CC  EC6B  F00F         	call	_SiIsAvailable	;wreg free
  8237  0019D0  0900               	iorlw	0
  8238  0019D2  B4D8               	btfsc	status,2,c
  8239  0019D4  0012               	return	
  8240                           
  8241                           ;Logic.c: 103:             SiSendChar('W');
  8242  0019D6  0E57               	movlw	87
  8243  0019D8  EF5E  F00F         	goto	_SiSendChar
  8244  0019DC                     __end_of_LoMoveUp:
  8245                           	callstack 0
  8246                           
  8247 ;; *************** function _LoMoveRight *****************
  8248 ;; Defined at:
  8249 ;;		line 134 in file "Logic.c"
  8250 ;; Parameters:    Size  Location     Type
  8251 ;;		None
  8252 ;; Auto vars:     Size  Location     Type
  8253 ;;		None
  8254 ;; Return value:  Size  Location     Type
  8255 ;;                  1    wreg      void 
  8256 ;; Registers used:
  8257 ;;		wreg, status,2, status,0, cstack
  8258 ;; Tracked objects:
  8259 ;;		On entry : 0/0
  8260 ;;		On exit  : 0/0
  8261 ;;		Unchanged: 0/0
  8262 ;; Data sizes:     COMRAM   BANK0   BANK1
  8263 ;;      Params:         0       0       0
  8264 ;;      Locals:         0       0       0
  8265 ;;      Temps:          0       0       0
  8266 ;;      Totals:         0       0       0
  8267 ;;Total ram usage:        0 bytes
  8268 ;; Hardware stack levels used: 1
  8269 ;; Hardware stack levels required when called: 3
  8270 ;; This function calls:
  8271 ;;		_SiIsAvailable
  8272 ;;		_SiSendChar
  8273 ;; This function is called by:
  8274 ;;		_motorJoystk
  8275 ;; This function uses a non-reentrant model
  8276 ;;
  8277                           
  8278                           	psect	text56
  8279  001D52                     __ptext56:
  8280                           	callstack 0
  8281  001D52                     _LoMoveRight:
  8282                           	callstack 26
  8283                           
  8284                           ;Logic.c: 135:     if(gameStarted == 1) {
  8285                           
  8286                           ;incstack = 0
  8287  001D52  0429               	decf	_gameStarted^0,w,c
  8288  001D54  A4D8               	btfss	status,2,c
  8289  001D56  0012               	return	
  8290                           
  8291                           ;Logic.c: 136:         if(SiIsAvailable()) {
  8292  001D58  EC6B  F00F         	call	_SiIsAvailable	;wreg free
  8293  001D5C  0900               	iorlw	0
  8294  001D5E  B4D8               	btfsc	status,2,c
  8295  001D60  0012               	return	
  8296                           
  8297                           ;Logic.c: 137:             SiSendChar('D');
  8298  001D62  0E44               	movlw	68
  8299  001D64  EF5E  F00F         	goto	_SiSendChar
  8300  001D68                     __end_of_LoMoveRight:
  8301                           	callstack 0
  8302                           
  8303 ;; *************** function _LoMoveLeft *****************
  8304 ;; Defined at:
  8305 ;;		line 126 in file "Logic.c"
  8306 ;; Parameters:    Size  Location     Type
  8307 ;;		None
  8308 ;; Auto vars:     Size  Location     Type
  8309 ;;		None
  8310 ;; Return value:  Size  Location     Type
  8311 ;;                  1    wreg      void 
  8312 ;; Registers used:
  8313 ;;		wreg, status,2, status,0, cstack
  8314 ;; Tracked objects:
  8315 ;;		On entry : 0/0
  8316 ;;		On exit  : 0/0
  8317 ;;		Unchanged: 0/0
  8318 ;; Data sizes:     COMRAM   BANK0   BANK1
  8319 ;;      Params:         0       0       0
  8320 ;;      Locals:         0       0       0
  8321 ;;      Temps:          0       0       0
  8322 ;;      Totals:         0       0       0
  8323 ;;Total ram usage:        0 bytes
  8324 ;; Hardware stack levels used: 1
  8325 ;; Hardware stack levels required when called: 3
  8326 ;; This function calls:
  8327 ;;		_SiIsAvailable
  8328 ;;		_SiSendChar
  8329 ;; This function is called by:
  8330 ;;		_motorJoystk
  8331 ;; This function uses a non-reentrant model
  8332 ;;
  8333                           
  8334                           	psect	text57
  8335  001D68                     __ptext57:
  8336                           	callstack 0
  8337  001D68                     _LoMoveLeft:
  8338                           	callstack 26
  8339                           
  8340                           ;Logic.c: 127:     if(gameStarted == 1) {
  8341                           
  8342                           ;incstack = 0
  8343  001D68  0429               	decf	_gameStarted^0,w,c
  8344  001D6A  A4D8               	btfss	status,2,c
  8345  001D6C  0012               	return	
  8346                           
  8347                           ;Logic.c: 128:         if(SiIsAvailable()) {
  8348  001D6E  EC6B  F00F         	call	_SiIsAvailable	;wreg free
  8349  001D72  0900               	iorlw	0
  8350  001D74  B4D8               	btfsc	status,2,c
  8351  001D76  0012               	return	
  8352                           
  8353                           ;Logic.c: 129:             SiSendChar('A');
  8354  001D78  0E41               	movlw	65
  8355  001D7A  EF5E  F00F         	goto	_SiSendChar
  8356  001D7E                     __end_of_LoMoveLeft:
  8357                           	callstack 0
  8358                           
  8359 ;; *************** function _LoMoveDown *****************
  8360 ;; Defined at:
  8361 ;;		line 108 in file "Logic.c"
  8362 ;; Parameters:    Size  Location     Type
  8363 ;;		None
  8364 ;; Auto vars:     Size  Location     Type
  8365 ;;		None
  8366 ;; Return value:  Size  Location     Type
  8367 ;;                  1    wreg      void 
  8368 ;; Registers used:
  8369 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8370 ;; Tracked objects:
  8371 ;;		On entry : 0/0
  8372 ;;		On exit  : 0/0
  8373 ;;		Unchanged: 0/0
  8374 ;; Data sizes:     COMRAM   BANK0   BANK1
  8375 ;;      Params:         0       0       0
  8376 ;;      Locals:         0       0       0
  8377 ;;      Temps:          0       0       0
  8378 ;;      Totals:         0       0       0
  8379 ;;Total ram usage:        0 bytes
  8380 ;; Hardware stack levels used: 1
  8381 ;; Hardware stack levels required when called: 6
  8382 ;; This function calls:
  8383 ;;		_LcClear
  8384 ;;		_SiIsAvailable
  8385 ;;		_SiSendChar
  8386 ;; This function is called by:
  8387 ;;		_motorJoystk
  8388 ;; This function uses a non-reentrant model
  8389 ;;
  8390                           
  8391                           	psect	text58
  8392  001918                     __ptext58:
  8393                           	callstack 0
  8394  001918                     _LoMoveDown:
  8395                           	callstack 23
  8396                           
  8397                           ;Logic.c: 109:     if (menuPos == 16) menuPos = 8;
  8398                           
  8399                           ;incstack = 0
  8400  001918  0E10               	movlw	16
  8401  00191A  1824               	xorwf	_menuPos^0,w,c
  8402  00191C  E102               	bnz	l6662
  8403  00191E  0E08               	movlw	8
  8404  001920  6E24               	movwf	_menuPos^0,c
  8405  001922                     l6662:
  8406                           
  8407                           ;Logic.c: 110:     if(state == 11 || state == 8) {
  8408  001922  0E0B               	movlw	11
  8409  001924  1827               	xorwf	_state@Logic$F1441^0,w,c
  8410  001926  E003               	bz	u7930
  8411  001928  0E08               	movlw	8
  8412  00192A  1827               	xorwf	_state@Logic$F1441^0,w,c
  8413  00192C  E109               	bnz	l6676
  8414  00192E                     u7930:
  8415                           
  8416                           ;Logic.c: 112:         menuWrite = 0;
  8417  00192E  2A24               	incf	_menuPos^0,f,c
  8418                           
  8419                           ;Logic.c: 113:         if(menuPos == 11) {
  8420  001930  0E0B               	movlw	11
  8421  001932  1824               	xorwf	_menuPos^0,w,c
  8422  001934  E102               	bnz	l6672
  8423                           
  8424                           ;Logic.c: 114:             menuPos = 10;
  8425  001936  0E0A               	movlw	10
  8426  001938  6E24               	movwf	_menuPos^0,c
  8427  00193A                     l6672:
  8428                           
  8429                           ;Logic.c: 116:         LcClear();
  8430  00193A  EC30  F00E         	call	_LcClear	;wreg free
  8431                           
  8432                           ;Logic.c: 117:         state = menuPos;
  8433                           
  8434                           ;Logic.c: 118:     }
  8435  00193E  D00B               	goto	PL84	;call to abstracted procedure
  8436  001940                     l6676:
  8437  001940  0429               	decf	_gameStarted^0,w,c
  8438  001942  A4D8               	btfss	status,2,c
  8439  001944  0012               	return	
  8440                           
  8441                           ;Logic.c: 120:         if(SiIsAvailable()) {
  8442  001946  EC6B  F00F         	call	_SiIsAvailable	;wreg free
  8443  00194A  0900               	iorlw	0
  8444  00194C  B4D8               	btfsc	status,2,c
  8445  00194E  0012               	return	
  8446                           
  8447                           ;Logic.c: 121:             SiSendChar('S');
  8448  001950  0E53               	movlw	83
  8449  001952  EF5E  F00F         	goto	_SiSendChar
  8450  001956                     __end_of_LoMoveDown:
  8451                           	callstack 0
  8452  001956                     PL84:
  8453                           	callstack 23
  8454  001956  C024  F027         	movff	_menuPos,_state@Logic$F1441
  8455  00195A  0012               	return	
  8456  00195C                     __end_ofPL84:
  8457                           	callstack 0
  8458                           
  8459 ;; *************** function _SiSendChar *****************
  8460 ;; Defined at:
  8461 ;;		line 15 in file "Bluetooth.c"
  8462 ;; Parameters:    Size  Location     Type
  8463 ;;  my_byte         1    wreg     unsigned char 
  8464 ;; Auto vars:     Size  Location     Type
  8465 ;;  my_byte         1    5[COMRAM] unsigned char 
  8466 ;; Return value:  Size  Location     Type
  8467 ;;                  1    wreg      void 
  8468 ;; Registers used:
  8469 ;;		wreg
  8470 ;; Tracked objects:
  8471 ;;		On entry : 0/0
  8472 ;;		On exit  : 0/0
  8473 ;;		Unchanged: 0/0
  8474 ;; Data sizes:     COMRAM   BANK0   BANK1
  8475 ;;      Params:         0       0       0
  8476 ;;      Locals:         1       0       0
  8477 ;;      Temps:          0       0       0
  8478 ;;      Totals:         1       0       0
  8479 ;;Total ram usage:        1 bytes
  8480 ;; Hardware stack levels used: 1
  8481 ;; Hardware stack levels required when called: 2
  8482 ;; This function calls:
  8483 ;;		Nothing
  8484 ;; This function is called by:
  8485 ;;		_LoEndGame
  8486 ;;		_LoMoveUp
  8487 ;;		_LoMoveDown
  8488 ;;		_LoMoveLeft
  8489 ;;		_LoMoveRight
  8490 ;;		_motorLogic
  8491 ;; This function uses a non-reentrant model
  8492 ;;
  8493                           
  8494                           	psect	text59
  8495  001EBC                     __ptext59:
  8496                           	callstack 0
  8497  001EBC                     _SiSendChar:
  8498                           	callstack 25
  8499                           
  8500                           ;incstack = 0
  8501                           ;SiSendChar@my_byte stored from wreg
  8502  001EBC  6E5A               	movwf	SiSendChar@my_byte^0,c
  8503                           
  8504                           ;Bluetooth.c: 18:  TXREG = my_byte;
  8505  001EBE  C05A  FFAD         	movff	SiSendChar@my_byte,4013	;volatile
  8506  001EC2  0012               	return		;funcret
  8507  001EC4                     __end_of_SiSendChar:
  8508                           	callstack 0
  8509                           
  8510 ;; *************** function _SiIsAvailable *****************
  8511 ;; Defined at:
  8512 ;;		line 21 in file "Bluetooth.c"
  8513 ;; Parameters:    Size  Location     Type
  8514 ;;		None
  8515 ;; Auto vars:     Size  Location     Type
  8516 ;;		None
  8517 ;; Return value:  Size  Location     Type
  8518 ;;                  1    wreg      unsigned char 
  8519 ;; Registers used:
  8520 ;;		wreg
  8521 ;; Tracked objects:
  8522 ;;		On entry : 0/0
  8523 ;;		On exit  : 0/0
  8524 ;;		Unchanged: 0/0
  8525 ;; Data sizes:     COMRAM   BANK0   BANK1
  8526 ;;      Params:         0       0       0
  8527 ;;      Locals:         0       0       0
  8528 ;;      Temps:          0       0       0
  8529 ;;      Totals:         0       0       0
  8530 ;;Total ram usage:        0 bytes
  8531 ;; Hardware stack levels used: 1
  8532 ;; Hardware stack levels required when called: 2
  8533 ;; This function calls:
  8534 ;;		Nothing
  8535 ;; This function is called by:
  8536 ;;		_LoMoveUp
  8537 ;;		_LoMoveDown
  8538 ;;		_LoMoveLeft
  8539 ;;		_LoMoveRight
  8540 ;;		_motorLogic
  8541 ;; This function uses a non-reentrant model
  8542 ;;
  8543                           
  8544                           	psect	text60
  8545  001ED6                     __ptext60:
  8546                           	callstack 0
  8547  001ED6                     _SiIsAvailable:
  8548                           	callstack 27
  8549                           
  8550                           ;Bluetooth.c: 24:  return (char) TXSTAbits.TRMT;
  8551                           
  8552                           ;incstack = 0
  8553  001ED6  B2AC               	btfsc	172,1,c	;volatile
  8554  001ED8  0C01               	retlw	1
  8555  001EDA  0C00               	retlw	0	;funcret
  8556  001EDC                     __end_of_SiIsAvailable:
  8557                           	callstack 0
  8558                           
  8559 ;; *************** function _LcClear *****************
  8560 ;; Defined at:
  8561 ;;		line 132 in file "LcTLCD.c"
  8562 ;; Parameters:    Size  Location     Type
  8563 ;;		None
  8564 ;; Auto vars:     Size  Location     Type
  8565 ;;		None
  8566 ;; Return value:  Size  Location     Type
  8567 ;;                  1    wreg      void 
  8568 ;; Registers used:
  8569 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8570 ;; Tracked objects:
  8571 ;;		On entry : 0/0
  8572 ;;		On exit  : 0/0
  8573 ;;		Unchanged: 0/0
  8574 ;; Data sizes:     COMRAM   BANK0   BANK1
  8575 ;;      Params:         0       0       0
  8576 ;;      Locals:         0       0       0
  8577 ;;      Temps:          0       0       0
  8578 ;;      Totals:         0       0       0
  8579 ;;Total ram usage:        0 bytes
  8580 ;; Hardware stack levels used: 1
  8581 ;; Hardware stack levels required when called: 5
  8582 ;; This function calls:
  8583 ;;		_CantaIR
  8584 ;;		_Espera
  8585 ;;		_LcGotoXY
  8586 ;;		_WaitForBusy
  8587 ;; This function is called by:
  8588 ;;		_LoEndGame
  8589 ;;		_LoMoveUp
  8590 ;;		_LoMoveDown
  8591 ;;		_motorLogic
  8592 ;; This function uses a non-reentrant model
  8593 ;;
  8594                           
  8595                           	psect	text61
  8596  001C60                     __ptext61:
  8597                           	callstack 0
  8598  001C60                     _LcClear:
  8599                           	callstack 22
  8600                           
  8601                           ;LcTLCD.c: 135:  WaitForBusy(); CantaIR(0x01);
  8602                           
  8603                           ;incstack = 0
  8604  001C60  ECEE  F00C         	call	_WaitForBusy	;wreg free
  8605  001C64  0E01               	movlw	1
  8606  001C66  EC81  F00E         	call	_CantaIR
  8607                           
  8608                           ;LcTLCD.c: 136:     flag = 1;
  8609  001C6A  0E01               	movlw	1
  8610  001C6C  6E78               	movwf	_flag^0,c
  8611                           
  8612                           ;LcTLCD.c: 137:     flag2 = 1;
  8613  001C6E  6E77               	movwf	_flag2^0,c
  8614                           
  8615                           ;LcTLCD.c: 138:  Espera(Timer, 4);
  8616  001C70  EC44  F009         	call	PL12	;call to abstracted procedure
  8617  001C74  0E04               	movlw	4
  8618  001C76  6E63               	movwf	Espera@ms^0,c
  8619  001C78  EC63  F00E         	call	_Espera	;wreg free
  8620                           
  8621                           ;LcTLCD.c: 139:     LcGotoXY(0,0);
  8622  001C7C  0E00               	movlw	0
  8623  001C7E  6E62               	movwf	LcGotoXY@Row^0,c
  8624  001C80  EF43  F00D         	goto	_LcGotoXY
  8625  001C84                     __end_of_LcClear:
  8626                           	callstack 0
  8627                           
  8628 ;; *************** function _LcGotoXY *****************
  8629 ;; Defined at:
  8630 ;;		line 156 in file "LcTLCD.c"
  8631 ;; Parameters:    Size  Location     Type
  8632 ;;  Column          1    wreg     unsigned char 
  8633 ;;  Row             1   13[COMRAM] unsigned char 
  8634 ;; Auto vars:     Size  Location     Type
  8635 ;;  Column          1   18[COMRAM] unsigned char 
  8636 ;;  Fisics          2   14[COMRAM] int 
  8637 ;; Return value:  Size  Location     Type
  8638 ;;                  1    wreg      void 
  8639 ;; Registers used:
  8640 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8641 ;; Tracked objects:
  8642 ;;		On entry : 0/0
  8643 ;;		On exit  : 0/0
  8644 ;;		Unchanged: 0/0
  8645 ;; Data sizes:     COMRAM   BANK0   BANK1
  8646 ;;      Params:         1       0       0
  8647 ;;      Locals:         5       0       0
  8648 ;;      Temps:          0       0       0
  8649 ;;      Totals:         6       0       0
  8650 ;;Total ram usage:        6 bytes
  8651 ;; Hardware stack levels used: 1
  8652 ;; Hardware stack levels required when called: 4
  8653 ;; This function calls:
  8654 ;;		_CantaIR
  8655 ;;		_WaitForBusy
  8656 ;; This function is called by:
  8657 ;;		_LcClear
  8658 ;;		_LcPutChar
  8659 ;;		_LcDelete
  8660 ;;		_LcPrintLine
  8661 ;;		_setLine
  8662 ;;		_LcPrintSecondLine
  8663 ;;		_motorTime
  8664 ;;		_motorLogic
  8665 ;; This function uses a non-reentrant model
  8666 ;;
  8667                           
  8668                           	psect	text62
  8669  001A86                     __ptext62:
  8670                           	callstack 0
  8671  001A86                     _LcGotoXY:
  8672                           	callstack 22
  8673                           
  8674                           ;incstack = 0
  8675                           ;LcGotoXY@Column stored from wreg
  8676  001A86  6E67               	movwf	LcGotoXY@Column^0,c
  8677                           
  8678                           ;LcTLCD.c: 160:  int Fisics;;LcTLCD.c: 161:     Fisics = Column + (!Row ? 0 : 0x40);
  8679  001A88  5062               	movf	LcGotoXY@Row^0,w,c
  8680  001A8A  E004               	bz	l81
  8681  001A8C  6A66               	clrf	(_LcGotoXY$248+1)^0,c
  8682  001A8E  0E40               	movlw	64
  8683  001A90  6E65               	movwf	_LcGotoXY$248^0,c
  8684  001A92  D002               	goto	l6298
  8685  001A94                     l81:
  8686  001A94  6A65               	clrf	_LcGotoXY$248^0,c
  8687  001A96  6A66               	clrf	(_LcGotoXY$248+1)^0,c
  8688  001A98                     l6298:
  8689  001A98  5067               	movf	LcGotoXY@Column^0,w,c
  8690  001A9A  2465               	addwf	_LcGotoXY$248^0,w,c
  8691  001A9C  6E63               	movwf	LcGotoXY@Fisics^0,c
  8692  001A9E  0E00               	movlw	0
  8693  001AA0  2066               	addwfc	(_LcGotoXY$248+1)^0,w,c
  8694  001AA2  6E64               	movwf	(LcGotoXY@Fisics+1)^0,c
  8695                           
  8696                           ;LcTLCD.c: 177:  WaitForBusy();
  8697  001AA4  ECEE  F00C         	call	_WaitForBusy	;wreg free
  8698                           
  8699                           ;LcTLCD.c: 178:  CantaIR(0x80 | Fisics);
  8700  001AA8  5063               	movf	LcGotoXY@Fisics^0,w,c
  8701  001AAA  0980               	iorlw	128
  8702  001AAC  EC81  F00E         	call	_CantaIR
  8703                           
  8704                           ;LcTLCD.c: 180:  RowAct = Row;
  8705  001AB0  C062  F04A         	movff	LcGotoXY@Row,_RowAct
  8706                           
  8707                           ;LcTLCD.c: 181:  ColumnAct = Column;
  8708  001AB4  C067  F049         	movff	LcGotoXY@Column,_ColumnAct
  8709  001AB8  0012               	return		;funcret
  8710  001ABA                     __end_of_LcGotoXY:
  8711                           	callstack 0
  8712                           
  8713 ;; *************** function _motorEUSART *****************
  8714 ;; Defined at:
  8715 ;;		line 26 in file "EUSART.c"
  8716 ;; Parameters:    Size  Location     Type
  8717 ;;		None
  8718 ;; Auto vars:     Size  Location     Type
  8719 ;;		None
  8720 ;; Return value:  Size  Location     Type
  8721 ;;                  1    wreg      void 
  8722 ;; Registers used:
  8723 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8724 ;; Tracked objects:
  8725 ;;		On entry : 0/0
  8726 ;;		On exit  : 0/0
  8727 ;;		Unchanged: 0/0
  8728 ;; Data sizes:     COMRAM   BANK0   BANK1
  8729 ;;      Params:         0       0       0
  8730 ;;      Locals:         0       0       0
  8731 ;;      Temps:          3       0       0
  8732 ;;      Totals:         3       0       0
  8733 ;;Total ram usage:        3 bytes
  8734 ;; Hardware stack levels used: 1
  8735 ;; Hardware stack levels required when called: 3
  8736 ;; This function calls:
  8737 ;;		_TiGetTics
  8738 ;;		_TiResetTics
  8739 ;; This function is called by:
  8740 ;;		_main
  8741 ;; This function uses a non-reentrant model
  8742 ;;
  8743                           
  8744                           	psect	text63
  8745  00102E                     __ptext63:
  8746                           	callstack 0
  8747  00102E                     _motorEUSART:
  8748                           	callstack 27
  8749                           
  8750                           ;EUSART.c: 27:     switch (state) {
  8751                           
  8752                           ;incstack = 0
  8753  00102E  D05B               	goto	l7322
  8754  001030                     l7282:
  8755                           
  8756                           ;EUSART.c: 29:             if (flag == 0 && TiGetTics(tEUSART) >= 1) {
  8757  001030  5032               	movf	_flag@EUSART$F1265^0,w,c
  8758  001032  A4D8               	btfss	status,2,c
  8759  001034  0012               	return	
  8760  001036  502F               	movf	_tEUSART^0,w,c
  8761  001038  EC1D  F00E         	call	_TiGetTics
  8762  00103C  BE5B               	btfsc	(?_TiGetTics+1)^0,7,c
  8763  00103E  0012               	return	
  8764  001040  505B               	movf	(?_TiGetTics+1)^0,w,c
  8765  001042  E103               	bnz	u9070
  8766  001044  045A               	decf	?_TiGetTics^0,w,c
  8767  001046  A0D8               	btfss	status,0,c
  8768  001048  0012               	return	
  8769  00104A                     u9070:
  8770                           
  8771                           ;EUSART.c: 30:                 state++;
  8772  00104A  2A31               	incf	_state@EUSART$F1266^0,f,c
  8773                           
  8774                           ;EUSART.c: 31:                 LATCbits.LATC4 = 0;
  8775  00104C  988B               	bcf	139,4,c	;volatile
  8776                           
  8777                           ;EUSART.c: 32:                 TiResetTics(tEUSART);
  8778  00104E  502F               	movf	_tEUSART^0,w,c
  8779  001050  EF73  F00E         	goto	_TiResetTics
  8780  001054                     l7292:
  8781                           
  8782                           ;EUSART.c: 36:             if (TiGetTics(tEUSART) >= 1) {
  8783  001054  502F               	movf	_tEUSART^0,w,c
  8784  001056  EC1D  F00E         	call	_TiGetTics
  8785  00105A  BE5B               	btfsc	(?_TiGetTics+1)^0,7,c
  8786  00105C  0012               	return	
  8787  00105E  505B               	movf	(?_TiGetTics+1)^0,w,c
  8788  001060  E103               	bnz	u9080
  8789  001062  045A               	decf	?_TiGetTics^0,w,c
  8790  001064  A0D8               	btfss	status,0,c
  8791  001066  0012               	return	
  8792  001068                     u9080:
  8793                           
  8794                           ;EUSART.c: 37:                 TiResetTics(tEUSART);
  8795  001068  502F               	movf	_tEUSART^0,w,c
  8796  00106A  EC73  F00E         	call	_TiResetTics
  8797                           
  8798                           ;EUSART.c: 38:                 LATCbits.LATC4 = ((vit & 0x01 << index) != 0);
  8799  00106E  C02E  F061         	movff	_index,??_motorEUSART
  8800  001072  0E01               	movlw	1
  8801  001074  6E62               	movwf	(??_motorEUSART+1)^0,c
  8802  001076  2A61               	incf	??_motorEUSART^0,f,c
  8803  001078  D002               	goto	u9094
  8804  00107A                     u9095:
  8805  00107A  90D8               	bcf	status,0,c
  8806  00107C  3662               	rlcf	(??_motorEUSART+1)^0,f,c
  8807  00107E                     u9094:
  8808  00107E  2E61               	decfsz	??_motorEUSART^0,f,c
  8809  001080  D7FC               	goto	u9095
  8810  001082  5062               	movf	(??_motorEUSART+1)^0,w,c
  8811  001084  1430               	andwf	_vit^0,w,c
  8812  001086  E003               	bz	u9100
  8813  001088  6A63               	clrf	(??_motorEUSART+2)^0,c
  8814  00108A  2A63               	incf	(??_motorEUSART+2)^0,f,c
  8815  00108C  D001               	goto	u9118
  8816  00108E                     u9100:
  8817  00108E  6A63               	clrf	(??_motorEUSART+2)^0,c
  8818  001090                     u9118:
  8819  001090  3A63               	swapf	(??_motorEUSART+2)^0,f,c
  8820  001092  508B               	movf	139,w,c	;volatile
  8821  001094  1863               	xorwf	(??_motorEUSART+2)^0,w,c
  8822  001096  0BEF               	andlw	-17
  8823  001098  1863               	xorwf	(??_motorEUSART+2)^0,w,c
  8824  00109A  6E8B               	movwf	139,c	;volatile
  8825                           
  8826                           ;EUSART.c: 39:                 index++;
  8827  00109C  2A2E               	incf	_index^0,f,c
  8828                           
  8829                           ;EUSART.c: 40:                 if (index > 7) state++;
  8830  00109E  0E07               	movlw	7
  8831  0010A0  642E               	cpfsgt	_index^0,c
  8832  0010A2  0C07               	retlw	7
  8833  0010A4  2A31               	incf	_state@EUSART$F1266^0,f,c
  8834  0010A6  0C07               	retlw	7
  8835  0010A8                     l7304:
  8836                           
  8837                           ;EUSART.c: 44:             if (TiGetTics(tEUSART) >= 1) {
  8838  0010A8  502F               	movf	_tEUSART^0,w,c
  8839  0010AA  EC1D  F00E         	call	_TiGetTics
  8840  0010AE  BE5B               	btfsc	(?_TiGetTics+1)^0,7,c
  8841  0010B0  0012               	return	
  8842  0010B2  505B               	movf	(?_TiGetTics+1)^0,w,c
  8843  0010B4  E103               	bnz	u9130
  8844  0010B6  045A               	decf	?_TiGetTics^0,w,c
  8845  0010B8  A0D8               	btfss	status,0,c
  8846  0010BA  0012               	return	
  8847  0010BC                     u9130:
  8848                           
  8849                           ;EUSART.c: 45:                 TiResetTics(tEUSART);
  8850  0010BC  502F               	movf	_tEUSART^0,w,c
  8851  0010BE  EC73  F00E         	call	_TiResetTics
  8852                           
  8853                           ;EUSART.c: 46:                 LATCbits.LATC4 = 1;
  8854  0010C2  888B               	bsf	139,4,c	;volatile
  8855                           
  8856                           ;EUSART.c: 47:                 state++;
  8857  0010C4  2A31               	incf	_state@EUSART$F1266^0,f,c
  8858                           
  8859                           ;EUSART.c: 48:                 index = 0;
  8860  0010C6  6A2E               	clrf	_index^0,c
  8861  0010C8  0012               	return	
  8862  0010CA                     l7314:
  8863                           
  8864                           ;EUSART.c: 52:             if (TiGetTics(tEUSART) >= 1) {
  8865  0010CA  502F               	movf	_tEUSART^0,w,c
  8866  0010CC  EC1D  F00E         	call	_TiGetTics
  8867  0010D0  BE5B               	btfsc	(?_TiGetTics+1)^0,7,c
  8868  0010D2  0012               	return	
  8869  0010D4  505B               	movf	(?_TiGetTics+1)^0,w,c
  8870  0010D6  E103               	bnz	u9140
  8871  0010D8  045A               	decf	?_TiGetTics^0,w,c
  8872  0010DA  A0D8               	btfss	status,0,c
  8873  0010DC  0012               	return	
  8874  0010DE                     u9140:
  8875                           
  8876                           ;EUSART.c: 53:                 state = 0;
  8877  0010DE  6A31               	clrf	_state@EUSART$F1266^0,c
  8878                           
  8879                           ;EUSART.c: 54:                 flag = 1;
  8880  0010E0  0E01               	movlw	1
  8881  0010E2  6E32               	movwf	_flag@EUSART$F1265^0,c
  8882  0010E4  0C01               	retlw	1
  8883  0010E6                     l7322:
  8884  0010E6  5031               	movf	_state@EUSART$F1266^0,w,c
  8885  0010E8  6E61               	movwf	??_motorEUSART^0,c
  8886  0010EA  6A62               	clrf	(??_motorEUSART+1)^0,c
  8887                           
  8888                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  8889                           ; Switch size 1, requested type "space"
  8890                           ; Number of cases is 1, Range of values is 0 to 0
  8891                           ; switch strategies available:
  8892                           ; Name         Instructions Cycles
  8893                           ; simple_byte            4     3 (average)
  8894                           ;	Chosen strategy is simple_byte
  8895  0010EC  5062               	movf	(??_motorEUSART+1)^0,w,c
  8896  0010EE  A4D8               	btfss	status,2,c
  8897  0010F0  0012               	return	
  8898                           
  8899                           ; Switch size 1, requested type "space"
  8900                           ; Number of cases is 4, Range of values is 0 to 3
  8901                           ; switch strategies available:
  8902                           ; Name         Instructions Cycles
  8903                           ; simple_byte           13     7 (average)
  8904                           ;	Chosen strategy is simple_byte
  8905  0010F2  5061               	movf	??_motorEUSART^0,w,c
  8906  0010F4  E09D               	bz	l7282
  8907  0010F6  0A01               	xorlw	1	; case 1
  8908  0010F8  E0AD               	bz	l7292
  8909  0010FA  0A03               	xorlw	3	; case 2
  8910  0010FC  E0D5               	bz	l7304
  8911  0010FE  0A01               	xorlw	1	; case 3
  8912  001100  E0E4               	bz	l7314
  8913  001102  0012               	return		;funcret
  8914  001104                     __end_of_motorEUSART:
  8915                           	callstack 0
  8916                           
  8917 ;; *************** function _initTimeADT *****************
  8918 ;; Defined at:
  8919 ;;		line 22 in file "Time.c"
  8920 ;; Parameters:    Size  Location     Type
  8921 ;;		None
  8922 ;; Auto vars:     Size  Location     Type
  8923 ;;		None
  8924 ;; Return value:  Size  Location     Type
  8925 ;;                  1    wreg      void 
  8926 ;; Registers used:
  8927 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8928 ;; Tracked objects:
  8929 ;;		On entry : 0/0
  8930 ;;		On exit  : 0/0
  8931 ;;		Unchanged: 0/0
  8932 ;; Data sizes:     COMRAM   BANK0   BANK1
  8933 ;;      Params:         0       0       0
  8934 ;;      Locals:         0       0       0
  8935 ;;      Temps:          0       0       0
  8936 ;;      Totals:         0       0       0
  8937 ;;Total ram usage:        0 bytes
  8938 ;; Hardware stack levels used: 1
  8939 ;; Hardware stack levels required when called: 3
  8940 ;; This function calls:
  8941 ;;		_TiGetTimer
  8942 ;; This function is called by:
  8943 ;;		_main
  8944 ;; This function uses a non-reentrant model
  8945 ;;
  8946                           
  8947                           	psect	text64
  8948  001E8A                     __ptext64:
  8949                           	callstack 0
  8950  001E8A                     _initTimeADT:
  8951                           	callstack 27
  8952                           
  8953                           ;Time.c: 23:     sendIndex = 0;
  8954                           
  8955                           ;incstack = 0
  8956  001E8A  6A34               	clrf	_sendIndex^0,c
  8957                           
  8958                           ;Time.c: 24:     tTime = TiGetTimer();
  8959  001E8C  ECA5  F00D         	call	_TiGetTimer	;wreg free
  8960  001E90  6E35               	movwf	_tTime^0,c
  8961                           
  8962                           ;Time.c: 25:     status = 0;
  8963  001E92  6A33               	clrf	_status^0,c
  8964  001E94  0012               	return		;funcret
  8965  001E96                     __end_of_initTimeADT:
  8966                           	callstack 0
  8967                           
  8968 ;; *************** function _initSpeaker *****************
  8969 ;; Defined at:
  8970 ;;		line 15 in file "Speaker.c"
  8971 ;; Parameters:    Size  Location     Type
  8972 ;;		None
  8973 ;; Auto vars:     Size  Location     Type
  8974 ;;		None
  8975 ;; Return value:  Size  Location     Type
  8976 ;;                  1    wreg      void 
  8977 ;; Registers used:
  8978 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8979 ;; Tracked objects:
  8980 ;;		On entry : 0/0
  8981 ;;		On exit  : 0/0
  8982 ;;		Unchanged: 0/0
  8983 ;; Data sizes:     COMRAM   BANK0   BANK1
  8984 ;;      Params:         0       0       0
  8985 ;;      Locals:         0       0       0
  8986 ;;      Temps:          0       0       0
  8987 ;;      Totals:         0       0       0
  8988 ;;Total ram usage:        0 bytes
  8989 ;; Hardware stack levels used: 1
  8990 ;; Hardware stack levels required when called: 3
  8991 ;; This function calls:
  8992 ;;		_TiGetTimer
  8993 ;; This function is called by:
  8994 ;;		_main
  8995 ;; This function uses a non-reentrant model
  8996 ;;
  8997                           
  8998                           	psect	text65
  8999  001E3E                     __ptext65:
  9000                           	callstack 0
  9001  001E3E                     _initSpeaker:
  9002                           	callstack 27
  9003                           
  9004                           ;Speaker.c: 16:     TRISDbits.TRISD7 = 0;
  9005                           
  9006                           ;incstack = 0
  9007  001E3E  9E95               	bcf	149,7,c	;volatile
  9008                           
  9009                           ;Speaker.c: 17:     status = 2;
  9010  001E40  0E02               	movlw	2
  9011  001E42  6E2D               	movwf	_status@Speaker$F1330^0,c
  9012                           
  9013                           ;Speaker.c: 18:     tSpeaker = TiGetTimer();
  9014  001E44  ECA5  F00D         	call	_TiGetTimer	;wreg free
  9015  001E48  6E2C               	movwf	_tSpeaker^0,c
  9016  001E4A  0012               	return		;funcret
  9017  001E4C                     __end_of_initSpeaker:
  9018                           	callstack 0
  9019                           
  9020 ;; *************** function _initROM *****************
  9021 ;; Defined at:
  9022 ;;		line 26 in file "EEPROM.c"
  9023 ;; Parameters:    Size  Location     Type
  9024 ;;		None
  9025 ;; Auto vars:     Size  Location     Type
  9026 ;;		None
  9027 ;; Return value:  Size  Location     Type
  9028 ;;                  1    wreg      void 
  9029 ;; Registers used:
  9030 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  9031 ;; Tracked objects:
  9032 ;;		On entry : 0/0
  9033 ;;		On exit  : 0/0
  9034 ;;		Unchanged: 0/0
  9035 ;; Data sizes:     COMRAM   BANK0   BANK1
  9036 ;;      Params:         0       0       0
  9037 ;;      Locals:         0       0       0
  9038 ;;      Temps:          0       0       0
  9039 ;;      Totals:         0       0       0
  9040 ;;Total ram usage:        0 bytes
  9041 ;; Hardware stack levels used: 1
  9042 ;; Hardware stack levels required when called: 3
  9043 ;; This function calls:
  9044 ;;		_readFromROM
  9045 ;; This function is called by:
  9046 ;;		_main
  9047 ;; This function uses a non-reentrant model
  9048 ;;
  9049                           
  9050                           	psect	text66
  9051  001C14                     __ptext66:
  9052                           	callstack 0
  9053  001C14                     _initROM:
  9054                           	callstack 27
  9055                           
  9056                           ;EEPROM.c: 27:     flagReading = 1;
  9057                           
  9058                           ;incstack = 0
  9059  001C14  0E01               	movlw	1
  9060  001C16  6E17               	movwf	_flagReading^0,c
  9061                           
  9062                           ;EEPROM.c: 29:     pointer = 0;
  9063                           
  9064                           ;EEPROM.c: 28:     flagReading = 1;
  9065  001C18  6A16               	clrf	_pointer@EEPROM$F1581^0,c
  9066                           
  9067                           ;EEPROM.c: 30:     address = 0;
  9068  001C1A  6A1E               	clrf	_address^0,c
  9069                           
  9070                           ;EEPROM.c: 31:     users = readFromROM();
  9071  001C1C  EC26  F00F         	call	_readFromROM	;wreg free
  9072  001C20  6E1D               	movwf	_users^0,c
  9073                           
  9074                           ;EEPROM.c: 32:     if(users == 0xFF) users = 0;
  9075  001C22  281D               	incf	_users^0,w,c
  9076  001C24  E101               	bnz	l1071
  9077  001C26  6A1D               	clrf	_users^0,c
  9078  001C28                     l1071:
  9079                           
  9080                           ;EEPROM.c: 33:     startUser = 0;
  9081  001C28  6A1C               	clrf	_startUser^0,c
  9082                           
  9083                           ;EEPROM.c: 34:     address = 16 + users * 16;
  9084  001C2A  501D               	movf	_users^0,w,c
  9085  001C2C  0D10               	mullw	16
  9086  001C2E  50F3               	movf	243,w,c
  9087  001C30  0F10               	addlw	16
  9088  001C32  6E1E               	movwf	_address^0,c
  9089                           
  9090                           ;EEPROM.c: 35:     checkUser = 0;
  9091  001C34  6A18               	clrf	_checkUser^0,c
  9092                           
  9093                           ;EEPROM.c: 36:     done = 1;
  9094  001C36  EFFC  F005         	goto	PL96	;call to abstracted procedure
  9095  001C3A                     __end_of_initROM:
  9096                           	callstack 0
  9097                           
  9098 ;; *************** function _readFromROM *****************
  9099 ;; Defined at:
  9100 ;;		line 53 in file "EEPROM.c"
  9101 ;; Parameters:    Size  Location     Type
  9102 ;;		None
  9103 ;; Auto vars:     Size  Location     Type
  9104 ;;		None
  9105 ;; Return value:  Size  Location     Type
  9106 ;;                  1    wreg      unsigned char 
  9107 ;; Registers used:
  9108 ;;		wreg, status,2
  9109 ;; Tracked objects:
  9110 ;;		On entry : 0/0
  9111 ;;		On exit  : 0/0
  9112 ;;		Unchanged: 0/0
  9113 ;; Data sizes:     COMRAM   BANK0   BANK1
  9114 ;;      Params:         0       0       0
  9115 ;;      Locals:         0       0       0
  9116 ;;      Temps:          0       0       0
  9117 ;;      Totals:         0       0       0
  9118 ;;Total ram usage:        0 bytes
  9119 ;; Hardware stack levels used: 1
  9120 ;; Hardware stack levels required when called: 2
  9121 ;; This function calls:
  9122 ;;		Nothing
  9123 ;; This function is called by:
  9124 ;;		_motorLogic
  9125 ;;		_initROM
  9126 ;;		_motorROM
  9127 ;;		_startReadingUser
  9128 ;;		_readUser
  9129 ;;		_readScore
  9130 ;; This function uses a non-reentrant model
  9131 ;;
  9132                           
  9133                           	psect	text67
  9134  001E4C                     __ptext67:
  9135                           	callstack 0
  9136  001E4C                     _readFromROM:
  9137                           	callstack 27
  9138                           
  9139                           ;EEPROM.c: 54:     EEADR = address;
  9140                           
  9141                           ;incstack = 0
  9142  001E4C  C01E  FFA9         	movff	_address,4009	;volatile
  9143                           
  9144                           ;EEPROM.c: 55:     EECON1bits.CFGS = 0;
  9145  001E50  9CA6               	bcf	166,6,c	;volsfr
  9146                           
  9147                           ;EEPROM.c: 56:     EECON1bits.EEPGD = 0;
  9148  001E52  9EA6               	bcf	166,7,c	;volsfr
  9149                           
  9150                           ;EEPROM.c: 57:     EECON1bits.RD = 1;
  9151  001E54  80A6               	bsf	166,0,c	;volsfr
  9152                           
  9153                           ;EEPROM.c: 58:     return EEDATA;
  9154  001E56  50A8               	movf	168,w,c	;volatile
  9155  001E58  0012               	return		;funcret
  9156  001E5A                     __end_of_readFromROM:
  9157                           	callstack 0
  9158                           
  9159 ;; *************** function _initLogic *****************
  9160 ;; Defined at:
  9161 ;;		line 40 in file "Logic.c"
  9162 ;; Parameters:    Size  Location     Type
  9163 ;;		None
  9164 ;; Auto vars:     Size  Location     Type
  9165 ;;		None
  9166 ;; Return value:  Size  Location     Type
  9167 ;;                  1    wreg      void 
  9168 ;; Registers used:
  9169 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9170 ;; Tracked objects:
  9171 ;;		On entry : 0/0
  9172 ;;		On exit  : 0/0
  9173 ;;		Unchanged: 0/0
  9174 ;; Data sizes:     COMRAM   BANK0   BANK1
  9175 ;;      Params:         0       0       0
  9176 ;;      Locals:         0       0       0
  9177 ;;      Temps:          0       0       0
  9178 ;;      Totals:         0       0       0
  9179 ;;Total ram usage:        0 bytes
  9180 ;; Hardware stack levels used: 1
  9181 ;; Hardware stack levels required when called: 3
  9182 ;; This function calls:
  9183 ;;		_TiGetTimer
  9184 ;; This function is called by:
  9185 ;;		_main
  9186 ;; This function uses a non-reentrant model
  9187 ;;
  9188                           
  9189                           	psect	text68
  9190  001D7E                     __ptext68:
  9191                           	callstack 0
  9192  001D7E                     _initLogic:
  9193                           	callstack 27
  9194                           
  9195                           ;Logic.c: 41:     tLogic = TiGetTimer();
  9196                           
  9197                           ;incstack = 0
  9198  001D7E  ECA5  F00D         	call	_TiGetTimer	;wreg free
  9199  001D82  6E2A               	movwf	_tLogic^0,c
  9200                           
  9201                           ;Logic.c: 42:     gameStarted = 0;
  9202  001D84  6A29               	clrf	_gameStarted^0,c
  9203                           
  9204                           ;Logic.c: 43:     key = '0';
  9205  001D86  0E30               	movlw	48
  9206  001D88  6E28               	movwf	_key^0,c
  9207                           
  9208                           ;Logic.c: 44:     state = 0;
  9209  001D8A  6A27               	clrf	_state@Logic$F1441^0,c
  9210                           
  9211                           ;Logic.c: 45:     position = 0;
  9212  001D8C  6A26               	clrf	_position^0,c
  9213                           
  9214                           ;Logic.c: 46:     flag = 0;
  9215  001D8E  6A22               	clrf	_flag@Logic$F1451^0,c
  9216  001D90  0012               	return		;funcret
  9217  001D92                     __end_of_initLogic:
  9218                           	callstack 0
  9219                           
  9220 ;; *************** function _initKeyboard *****************
  9221 ;; Defined at:
  9222 ;;		line 59 in file "Keyboard.c"
  9223 ;; Parameters:    Size  Location     Type
  9224 ;;		None
  9225 ;; Auto vars:     Size  Location     Type
  9226 ;;		None
  9227 ;; Return value:  Size  Location     Type
  9228 ;;                  1    wreg      void 
  9229 ;; Registers used:
  9230 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9231 ;; Tracked objects:
  9232 ;;		On entry : 0/0
  9233 ;;		On exit  : 0/0
  9234 ;;		Unchanged: 0/0
  9235 ;; Data sizes:     COMRAM   BANK0   BANK1
  9236 ;;      Params:         0       0       0
  9237 ;;      Locals:         0       0       0
  9238 ;;      Temps:          0       0       0
  9239 ;;      Totals:         0       0       0
  9240 ;;Total ram usage:        0 bytes
  9241 ;; Hardware stack levels used: 1
  9242 ;; Hardware stack levels required when called: 3
  9243 ;; This function calls:
  9244 ;;		_TiGetTimer
  9245 ;; This function is called by:
  9246 ;;		_main
  9247 ;; This function uses a non-reentrant model
  9248 ;;
  9249                           
  9250                           	psect	text69
  9251  001B9E                     __ptext69:
  9252                           	callstack 0
  9253  001B9E                     _initKeyboard:
  9254                           	callstack 27
  9255                           
  9256                           ;Keyboard.c: 60:  sms = 1;
  9257                           
  9258                           ;incstack = 0
  9259  001B9E  0E01               	movlw	1
  9260  001BA0  6E3D               	movwf	_sms^0,c
  9261                           
  9262                           ;Keyboard.c: 61:  row = prev_row = 0;
  9263  001BA2  6A3B               	clrf	_prev_row^0,c
  9264  001BA4  6A3C               	clrf	_row^0,c
  9265                           
  9266                           ;Keyboard.c: 62:  column = prev_column = 0;
  9267  001BA6  6A3A               	clrf	_prev_column^0,c
  9268  001BA8  6A54               	clrf	_column^0,c
  9269                           
  9270                           ;Keyboard.c: 63:  tDebounce = TiGetTimer();
  9271  001BAA  ECA5  F00D         	call	_TiGetTimer	;wreg free
  9272  001BAE  6E39               	movwf	_tDebounce^0,c
  9273                           
  9274                           ;Keyboard.c: 64:  tSMS = TiGetTimer();
  9275  001BB0  ECA5  F00D         	call	_TiGetTimer	;wreg free
  9276  001BB4  6E38               	movwf	_tSMS^0,c
  9277                           
  9278                           ;Keyboard.c: 65:     TRISE = 0x08;
  9279  001BB6  0E08               	movlw	8
  9280  001BB8  6E96               	movwf	150,c	;volatile
  9281                           
  9282                           ;Keyboard.c: 66:     TRISBbits.TRISB2 = TRISBbits.TRISB3 = TRISBbits.TRISB4 = TRISBbits.
      +                          TRISB5 = 1;
  9283  001BBA  8A93               	bsf	147,5,c	;volatile
  9284  001BBC  8893               	bsf	147,4,c	;volatile
  9285  001BBE  8693               	bsf	147,3,c	;volatile
  9286  001BC0  8493               	bsf	147,2,c	;volatile
  9287                           
  9288                           ;Keyboard.c: 67:     numerical = 1;
  9289  001BC2  EF5B  F00F         	goto	PL102	;call to abstracted procedure
  9290  001BC6                     __end_of_initKeyboard:
  9291                           	callstack 0
  9292                           
  9293 ;; *************** function _initJoystk *****************
  9294 ;; Defined at:
  9295 ;;		line 15 in file "Joystick.c"
  9296 ;; Parameters:    Size  Location     Type
  9297 ;;		None
  9298 ;; Auto vars:     Size  Location     Type
  9299 ;;		None
  9300 ;; Return value:  Size  Location     Type
  9301 ;;                  1    wreg      void 
  9302 ;; Registers used:
  9303 ;;		wreg, status,2
  9304 ;; Tracked objects:
  9305 ;;		On entry : 0/0
  9306 ;;		On exit  : 0/0
  9307 ;;		Unchanged: 0/0
  9308 ;; Data sizes:     COMRAM   BANK0   BANK1
  9309 ;;      Params:         0       0       0
  9310 ;;      Locals:         0       0       0
  9311 ;;      Temps:          0       0       0
  9312 ;;      Totals:         0       0       0
  9313 ;;Total ram usage:        0 bytes
  9314 ;; Hardware stack levels used: 1
  9315 ;; Hardware stack levels required when called: 2
  9316 ;; This function calls:
  9317 ;;		Nothing
  9318 ;; This function is called by:
  9319 ;;		_main
  9320 ;; This function uses a non-reentrant model
  9321 ;;
  9322                           
  9323                           	psect	text70
  9324  001D92                     __ptext70:
  9325                           	callstack 0
  9326  001D92                     _initJoystk:
  9327                           	callstack 28
  9328                           
  9329                           ;Joystick.c: 16:  state = 0;
  9330                           
  9331                           ;incstack = 0
  9332  001D92  6A3F               	clrf	_state^0,c
  9333                           
  9334                           ;Joystick.c: 17:  ADCON0 = 0x01;
  9335  001D94  0E01               	movlw	1
  9336  001D96  6EC2               	movwf	194,c	;volatile
  9337                           
  9338                           ;Joystick.c: 18:  ADCON1 = 0x0C;
  9339  001D98  0E0C               	movlw	12
  9340  001D9A  6EC1               	movwf	193,c	;volatile
  9341                           
  9342                           ;Joystick.c: 19:  ADCON2 = 0x89;
  9343  001D9C  0E89               	movlw	137
  9344  001D9E  6EC0               	movwf	192,c	;volatile
  9345                           
  9346                           ;Joystick.c: 20:  TRISAbits.RA0 = 1;
  9347  001DA0  8092               	bsf	146,0,c	;volatile
  9348                           
  9349                           ;Joystick.c: 21:     times = 0;
  9350  001DA2  6A3E               	clrf	_times^0,c
  9351  001DA4  0012               	return		;funcret
  9352  001DA6                     __end_of_initJoystk:
  9353                           	callstack 0
  9354                           
  9355 ;; *************** function _initEUSART *****************
  9356 ;; Defined at:
  9357 ;;		line 16 in file "EUSART.c"
  9358 ;; Parameters:    Size  Location     Type
  9359 ;;		None
  9360 ;; Auto vars:     Size  Location     Type
  9361 ;;		None
  9362 ;; Return value:  Size  Location     Type
  9363 ;;                  1    wreg      void 
  9364 ;; Registers used:
  9365 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9366 ;; Tracked objects:
  9367 ;;		On entry : 0/0
  9368 ;;		On exit  : 0/0
  9369 ;;		Unchanged: 0/0
  9370 ;; Data sizes:     COMRAM   BANK0   BANK1
  9371 ;;      Params:         0       0       0
  9372 ;;      Locals:         0       0       0
  9373 ;;      Temps:          0       0       0
  9374 ;;      Totals:         0       0       0
  9375 ;;Total ram usage:        0 bytes
  9376 ;; Hardware stack levels used: 1
  9377 ;; Hardware stack levels required when called: 3
  9378 ;; This function calls:
  9379 ;;		_TiGetTimer
  9380 ;; This function is called by:
  9381 ;;		_main
  9382 ;; This function uses a non-reentrant model
  9383 ;;
  9384                           
  9385                           	psect	text71
  9386  001DA6                     __ptext71:
  9387                           	callstack 0
  9388  001DA6                     _initEUSART:
  9389                           	callstack 27
  9390                           
  9391                           ;EUSART.c: 17:     TRISCbits.TRISC4 = 0;
  9392                           
  9393                           ;incstack = 0
  9394  001DA6  9894               	bcf	148,4,c	;volatile
  9395                           
  9396                           ;EUSART.c: 19:     index = 0;
  9397  001DA8  6A2E               	clrf	_index^0,c
  9398                           
  9399                           ;EUSART.c: 20:     state = 0;
  9400  001DAA  6A31               	clrf	_state@EUSART$F1266^0,c
  9401                           
  9402                           ;EUSART.c: 21:     flag = 1;
  9403  001DAC  0E01               	movlw	1
  9404  001DAE  6E32               	movwf	_flag@EUSART$F1265^0,c
  9405                           
  9406                           ;EUSART.c: 22:     LATCbits.LATC4 = 1;
  9407  001DB0  888B               	bsf	139,4,c	;volatile
  9408                           
  9409                           ;EUSART.c: 23:     tEUSART = TiGetTimer();
  9410  001DB2  ECA5  F00D         	call	_TiGetTimer	;wreg free
  9411  001DB6  6E2F               	movwf	_tEUSART^0,c
  9412  001DB8  0012               	return		;funcret
  9413  001DBA                     __end_of_initEUSART:
  9414                           	callstack 0
  9415                           
  9416 ;; *************** function _initBluetooth *****************
  9417 ;; Defined at:
  9418 ;;		line 5 in file "Bluetooth.c"
  9419 ;; Parameters:    Size  Location     Type
  9420 ;;		None
  9421 ;; Auto vars:     Size  Location     Type
  9422 ;;		None
  9423 ;; Return value:  Size  Location     Type
  9424 ;;                  1    wreg      void 
  9425 ;; Registers used:
  9426 ;;		wreg, status,2
  9427 ;; Tracked objects:
  9428 ;;		On entry : 0/0
  9429 ;;		On exit  : 0/0
  9430 ;;		Unchanged: 0/0
  9431 ;; Data sizes:     COMRAM   BANK0   BANK1
  9432 ;;      Params:         0       0       0
  9433 ;;      Locals:         0       0       0
  9434 ;;      Temps:          0       0       0
  9435 ;;      Totals:         0       0       0
  9436 ;;Total ram usage:        0 bytes
  9437 ;; Hardware stack levels used: 1
  9438 ;; Hardware stack levels required when called: 2
  9439 ;; This function calls:
  9440 ;;		Nothing
  9441 ;; This function is called by:
  9442 ;;		_main
  9443 ;; This function uses a non-reentrant model
  9444 ;;
  9445                           
  9446                           	psect	text72
  9447  001DBA                     __ptext72:
  9448                           	callstack 0
  9449  001DBA                     _initBluetooth:
  9450                           	callstack 28
  9451                           
  9452                           ;Bluetooth.c: 7:  TRISCbits.TRISC6 = 1;
  9453                           
  9454                           ;incstack = 0
  9455  001DBA  8C94               	bsf	148,6,c	;volatile
  9456                           
  9457                           ;Bluetooth.c: 8:  TRISCbits.TRISC7 = 1;
  9458  001DBC  8E94               	bsf	148,7,c	;volatile
  9459                           
  9460                           ;Bluetooth.c: 9:  TXSTA = 0x20;
  9461  001DBE  0E20               	movlw	32
  9462  001DC0  6EAC               	movwf	172,c	;volatile
  9463                           
  9464                           ;Bluetooth.c: 10:  RCSTA = 0x90;
  9465  001DC2  0E90               	movlw	144
  9466  001DC4  6EAB               	movwf	171,c	;volatile
  9467                           
  9468                           ;Bluetooth.c: 11:  BAUDCONbits.BRG16 = 0;
  9469  001DC6  96B8               	bcf	184,3,c	;volatile
  9470                           
  9471                           ;Bluetooth.c: 12:  SPBRG = 64;
  9472  001DC8  0E40               	movlw	64
  9473  001DCA  6EAF               	movwf	175,c	;volatile
  9474  001DCC  0C40               	retlw	64	;funcret
  9475  001DCE                     __end_of_initBluetooth:
  9476                           	callstack 0
  9477                           
  9478 ;; *************** function _TiInitTimer *****************
  9479 ;; Defined at:
  9480 ;;		line 16 in file "TTimer.c"
  9481 ;; Parameters:    Size  Location     Type
  9482 ;;		None
  9483 ;; Auto vars:     Size  Location     Type
  9484 ;;		None
  9485 ;; Return value:  Size  Location     Type
  9486 ;;                  1    wreg      void 
  9487 ;; Registers used:
  9488 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  9489 ;; Tracked objects:
  9490 ;;		On entry : 0/0
  9491 ;;		On exit  : 0/0
  9492 ;;		Unchanged: 0/0
  9493 ;; Data sizes:     COMRAM   BANK0   BANK1
  9494 ;;      Params:         0       0       0
  9495 ;;      Locals:         0       0       0
  9496 ;;      Temps:          0       0       0
  9497 ;;      Totals:         0       0       0
  9498 ;;Total ram usage:        0 bytes
  9499 ;; Hardware stack levels used: 1
  9500 ;; Hardware stack levels required when called: 2
  9501 ;; This function calls:
  9502 ;;		Nothing
  9503 ;; This function is called by:
  9504 ;;		_main
  9505 ;; This function uses a non-reentrant model
  9506 ;;
  9507                           
  9508                           	psect	text73
  9509  001BC6                     __ptext73:
  9510                           	callstack 0
  9511  001BC6                     _TiInitTimer:
  9512                           	callstack 28
  9513                           
  9514                           ;TTimer.c: 19:     RCONbits.IPEN = 0;
  9515                           
  9516                           ;incstack = 0
  9517  001BC6  9ED0               	bcf	208,7,c	;volatile
  9518                           
  9519                           ;TTimer.c: 20:     INTCONbits.GIE_GIEH = 1;
  9520  001BC8  8EF2               	bsf	242,7,c	;volatile
  9521                           
  9522                           ;TTimer.c: 21:     INTCONbits.PEIE_GIEL = 1;
  9523  001BCA  8CF2               	bsf	242,6,c	;volatile
  9524                           
  9525                           ;TTimer.c: 22:     INTCONbits.TMR0IE = 1;
  9526  001BCC  8AF2               	bsf	242,5,c	;volatile
  9527                           
  9528                           ;TTimer.c: 23:     INTCONbits.TMR0IF = 0;
  9529  001BCE  94F2               	bcf	242,2,c	;volatile
  9530                           
  9531                           ;TTimer.c: 24:     T0CON = 0x08;
  9532  001BD0  0E08               	movlw	8
  9533  001BD2  6ED5               	movwf	213,c	;volatile
  9534                           
  9535                           ;TTimer.c: 26:     TMR0H = 0xDF;
  9536                           
  9537                           ;TTimer.c: 27:     TMR0L = 0x73;
  9538  001BD4  ECFD  F00B         	call	PL72	;call to abstracted procedure
  9539                           
  9540                           ;TTimer.c: 28:     T0CONbits.TMR0ON = 1;
  9541  001BD8  8ED5               	bsf	213,7,c	;volatile
  9542                           
  9543                           ;TTimer.c: 30:     for (counter=0;counter<9;counter++) {
  9544  001BDA  6A40               	clrf	_counter^0,c
  9545  001BDC                     l4958:
  9546  001BDC  0E08               	movlw	8
  9547  001BDE  6440               	cpfsgt	_counter^0,c
  9548  001BE0  D001               	goto	l4962
  9549  001BE2  0C08               	retlw	8
  9550  001BE4                     l4962:
  9551                           
  9552                           ;TTimer.c: 31:         s_Timers[counter].b_busy=0;
  9553  001BE4  ECB4  F00D         	call	PL24	;call to abstracted procedure
  9554  001BE8  6ADF               	clrf	indf2,c
  9555                           
  9556                           ;TTimer.c: 32:     }
  9557  001BEA  2A40               	incf	_counter^0,f,c
  9558  001BEC  D7F7               	goto	l4958
  9559  001BEE                     __end_of_TiInitTimer:
  9560                           	callstack 0
  9561                           
  9562 ;; *************** function _LcInit *****************
  9563 ;; Defined at:
  9564 ;;		line 85 in file "LcTLCD.c"
  9565 ;; Parameters:    Size  Location     Type
  9566 ;;  rows            1    wreg     unsigned char 
  9567 ;;  columns         1   17[COMRAM] unsigned char 
  9568 ;; Auto vars:     Size  Location     Type
  9569 ;;  rows            1   18[COMRAM] unsigned char 
  9570 ;;  i               1   19[COMRAM] unsigned char 
  9571 ;; Return value:  Size  Location     Type
  9572 ;;                  1    wreg      void 
  9573 ;; Registers used:
  9574 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9575 ;; Tracked objects:
  9576 ;;		On entry : 0/0
  9577 ;;		On exit  : 0/0
  9578 ;;		Unchanged: 0/0
  9579 ;; Data sizes:     COMRAM   BANK0   BANK1
  9580 ;;      Params:         1       0       0
  9581 ;;      Locals:         2       0       0
  9582 ;;      Temps:          0       0       0
  9583 ;;      Totals:         3       0       0
  9584 ;;Total ram usage:        3 bytes
  9585 ;; Hardware stack levels used: 1
  9586 ;; Hardware stack levels required when called: 4
  9587 ;; This function calls:
  9588 ;;		_CantaIR
  9589 ;;		_EscriuPrimeraOrdre
  9590 ;;		_Espera
  9591 ;;		_TiGetTimer
  9592 ;;		_WaitForBusy
  9593 ;; This function is called by:
  9594 ;;		_main
  9595 ;; This function uses a non-reentrant model
  9596 ;;
  9597                           
  9598                           	psect	text74
  9599  0011D4                     __ptext74:
  9600                           	callstack 0
  9601  0011D4                     _LcInit:
  9602                           	callstack 26
  9603                           
  9604                           ;LcTLCD.c: 91:  char i;;LcTLCD.c: 92:     tMarquee = TiGetTimer();
  9605                           
  9606                           ;incstack = 0
  9607  0011D4  ECA5  F00D         	call	_TiGetTimer	;wreg free
  9608  0011D8  6E0D               	movwf	_tMarquee^0,c
  9609  0011DA  6A0E               	clrf	(_tMarquee+1)^0,c
  9610                           
  9611                           ;LcTLCD.c: 93:     tMarquee2 = TiGetTimer();
  9612  0011DC  ECA5  F00D         	call	_TiGetTimer	;wreg free
  9613  0011E0  6E0B               	movwf	_tMarquee2^0,c
  9614  0011E2  6A0C               	clrf	(_tMarquee2+1)^0,c
  9615                           
  9616                           ;LcTLCD.c: 95:  Rows = rows; Columns = columns;
  9617  0011E4  ECA5  F00D         	call	_TiGetTimer	;wreg free
  9618  0011E8  6E0F               	movwf	_Timer^0,c
  9619  0011EA  6A10               	clrf	(_Timer+1)^0,c
  9620  0011EC  C066  F04B         	movff	LcInit@columns,_Columns
  9621                           
  9622                           ;LcTLCD.c: 96:  RowAct = ColumnAct = 0;
  9623  0011F0  6A49               	clrf	_ColumnAct^0,c
  9624  0011F2  6A4A               	clrf	_RowAct^0,c
  9625                           
  9626                           ;LcTLCD.c: 97:  (TRISDbits.TRISD4 = TRISDbits.TRISD5 = TRISDbits.TRISD6 = 0);
  9627  0011F4  9C95               	bcf	149,6,c	;volatile
  9628  0011F6  9A95               	bcf	149,5,c	;volatile
  9629  0011F8  9895               	bcf	149,4,c	;volatile
  9630                           
  9631                           ;LcTLCD.c: 98:  for (i = 0; i < 2; i++) {
  9632  0011FA  6A68               	clrf	LcInit@i^0,c
  9633  0011FC                     l6982:
  9634                           
  9635                           ;LcTLCD.c: 99:   Espera(Timer, 100);
  9636  0011FC  D845               	call	PL12	;call to abstracted procedure
  9637  0011FE  0E64               	movlw	100
  9638  001200  6E63               	movwf	Espera@ms^0,c
  9639  001202  EC63  F00E         	call	_Espera	;wreg free
  9640                           
  9641                           ;LcTLCD.c: 102:   EscriuPrimeraOrdre(0x02 | 0x01);
  9642  001206  0E03               	movlw	3
  9643  001208  ECD9  F009         	call	_EscriuPrimeraOrdre
  9644                           
  9645                           ;LcTLCD.c: 103:   Espera(Timer, 6);
  9646  00120C  D83D               	call	PL12	;call to abstracted procedure
  9647  00120E  0E06               	movlw	6
  9648  001210  6E63               	movwf	Espera@ms^0,c
  9649  001212  EC63  F00E         	call	_Espera	;wreg free
  9650                           
  9651                           ;LcTLCD.c: 104:   EscriuPrimeraOrdre(0x02 | 0x01);
  9652  001216  0E03               	movlw	3
  9653  001218  ECD9  F009         	call	_EscriuPrimeraOrdre
  9654                           
  9655                           ;LcTLCD.c: 105:   Espera(Timer, 2);
  9656  00121C  D835               	call	PL12	;call to abstracted procedure
  9657  00121E  0E02               	movlw	2
  9658  001220  6E63               	movwf	Espera@ms^0,c
  9659  001222  EC63  F00E         	call	_Espera	;wreg free
  9660                           
  9661                           ;LcTLCD.c: 106:   EscriuPrimeraOrdre(0x02 | 0x01);
  9662  001226  0E03               	movlw	3
  9663  001228  ECD9  F009         	call	_EscriuPrimeraOrdre
  9664                           
  9665                           ;LcTLCD.c: 107:   Espera(Timer, 2);
  9666  00122C  D82D               	call	PL12	;call to abstracted procedure
  9667  00122E  0E02               	movlw	2
  9668  001230  6E63               	movwf	Espera@ms^0,c
  9669  001232  EC63  F00E         	call	_Espera	;wreg free
  9670                           
  9671                           ;LcTLCD.c: 110:   EscriuPrimeraOrdre(0x02);
  9672  001236  0E02               	movlw	2
  9673  001238  ECD9  F009         	call	_EscriuPrimeraOrdre
  9674                           
  9675                           ;LcTLCD.c: 111:   Espera(Timer, 2);
  9676  00123C  D825               	call	PL12	;call to abstracted procedure
  9677  00123E  0E02               	movlw	2
  9678  001240  6E63               	movwf	Espera@ms^0,c
  9679  001242  EC63  F00E         	call	_Espera	;wreg free
  9680                           
  9681                           ;LcTLCD.c: 112:   CantaIR(0x20 | 0x08);
  9682  001246  0E28               	movlw	40
  9683  001248  EC81  F00E         	call	_CantaIR
  9684                           
  9685                           ;LcTLCD.c: 115:   WaitForBusy(); CantaIR(0x08);
  9686  00124C  ECEE  F00C         	call	_WaitForBusy	;wreg free
  9687  001250  0E08               	movlw	8
  9688  001252  EC81  F00E         	call	_CantaIR
  9689                           
  9690                           ;LcTLCD.c: 116:   WaitForBusy(); CantaIR(0x01);
  9691  001256  ECEE  F00C         	call	_WaitForBusy	;wreg free
  9692  00125A  0E01               	movlw	1
  9693  00125C  EC81  F00E         	call	_CantaIR
  9694                           
  9695                           ;LcTLCD.c: 117:   Espera(Timer,4);
  9696  001260  D813               	call	PL12	;call to abstracted procedure
  9697  001262  0E04               	movlw	4
  9698  001264  6E63               	movwf	Espera@ms^0,c
  9699  001266  EC63  F00E         	call	_Espera	;wreg free
  9700                           
  9701                           ;LcTLCD.c: 118:   WaitForBusy(); CantaIR(0x04 | 0x02);
  9702  00126A  ECEE  F00C         	call	_WaitForBusy	;wreg free
  9703  00126E  0E06               	movlw	6
  9704  001270  EC81  F00E         	call	_CantaIR
  9705                           
  9706                           ;LcTLCD.c: 119:   WaitForBusy(); CantaIR(0x08 | 0x04 | 0x02 | 0x01);
  9707  001274  ECEE  F00C         	call	_WaitForBusy	;wreg free
  9708  001278  0E0F               	movlw	15
  9709  00127A  EC81  F00E         	call	_CantaIR
  9710                           
  9711                           ;LcTLCD.c: 120:  }
  9712  00127E  2A68               	incf	LcInit@i^0,f,c
  9713  001280  0E01               	movlw	1
  9714  001282  6468               	cpfsgt	LcInit@i^0,c
  9715  001284  D7BB               	goto	l6982
  9716  001286  0C01               	retlw	1
  9717  001288                     __end_of_LcInit:
  9718                           	callstack 0
  9719  001288                     PL12:
  9720                           	callstack 26
  9721  001288  C00F  F061         	movff	_Timer,Espera@Timer
  9722  00128C  C010  F062         	movff	_Timer+1,Espera@Timer+1
  9723  001290  6A64               	clrf	(Espera@ms+1)^0,c
  9724  001292  0012               	return	
  9725  001294                     __end_ofPL12:
  9726                           	callstack 0
  9727                           
  9728 ;; *************** function _WaitForBusy *****************
  9729 ;; Defined at:
  9730 ;;		line 410 in file "LcTLCD.c"
  9731 ;; Parameters:    Size  Location     Type
  9732 ;;		None
  9733 ;; Auto vars:     Size  Location     Type
  9734 ;;  Busy            1   12[COMRAM] unsigned char 
  9735 ;; Return value:  Size  Location     Type
  9736 ;;                  1    wreg      void 
  9737 ;; Registers used:
  9738 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9739 ;; Tracked objects:
  9740 ;;		On entry : 0/0
  9741 ;;		On exit  : 0/0
  9742 ;;		Unchanged: 0/0
  9743 ;; Data sizes:     COMRAM   BANK0   BANK1
  9744 ;;      Params:         0       0       0
  9745 ;;      Locals:         1       0       0
  9746 ;;      Temps:          0       0       0
  9747 ;;      Totals:         1       0       0
  9748 ;;Total ram usage:        1 bytes
  9749 ;; Hardware stack levels used: 1
  9750 ;; Hardware stack levels required when called: 3
  9751 ;; This function calls:
  9752 ;;		_TiGetTics
  9753 ;;		_TiResetTics
  9754 ;; This function is called by:
  9755 ;;		_LcInit
  9756 ;;		_LcClear
  9757 ;;		_LcCursorOn
  9758 ;;		_LcCursorOff
  9759 ;;		_LcGotoXY
  9760 ;;		_LcPutChar
  9761 ;;		_LcDelete
  9762 ;;		_LcPrintLine
  9763 ;;		_setLine
  9764 ;;		_LcPrintSecondLine
  9765 ;; This function uses a non-reentrant model
  9766 ;;
  9767                           
  9768                           	psect	text75
  9769  0019DC                     __ptext75:
  9770                           	callstack 0
  9771  0019DC                     _WaitForBusy:
  9772                           	callstack 23
  9773                           
  9774                           ;LcTLCD.c: 411:  (TRISDbits.TRISD0 = TRISDbits.TRISD1 = TRISDbits.TRISD2 = TRISDbits.TRI
      +                          SD3 = 1);
  9775                           
  9776                           ;incstack = 0
  9777  0019DC  8695               	bsf	149,3,c	;volatile
  9778  0019DE  8495               	bsf	149,2,c	;volatile
  9779  0019E0  8295               	bsf	149,1,c	;volatile
  9780  0019E2  8095               	bsf	149,0,c	;volatile
  9781                           
  9782                           ;LcTLCD.c: 412:  (LATDbits.LATD6 = 0);
  9783  0019E4  9C8C               	bcf	140,6,c	;volatile
  9784                           
  9785                           ;LcTLCD.c: 413:  (LATDbits.LATD5 = 1);
  9786  0019E6  8A8C               	bsf	140,5,c	;volatile
  9787                           
  9788                           ;LcTLCD.c: 414:  TiResetTics(Timer);
  9789  0019E8  500F               	movf	_Timer^0,w,c
  9790  0019EA  EC73  F00E         	call	_TiResetTics
  9791  0019EE                     l6266:
  9792                           
  9793                           ;LcTLCD.c: 416:   (LATDbits.LATD4 = 1);(LATDbits.LATD4 = 1);
  9794  0019EE  888C               	bsf	140,4,c	;volatile
  9795  0019F0  888C               	bsf	140,4,c	;volatile
  9796                           
  9797                           ;LcTLCD.c: 417:   Busy = (PORTDbits.RD1);
  9798  0019F2  0E00               	movlw	0
  9799  0019F4  B283               	btfsc	131,1,c	;volatile
  9800  0019F6  0E01               	movlw	1
  9801  0019F8  6E61               	movwf	WaitForBusy@Busy^0,c
  9802                           
  9803                           ;LcTLCD.c: 418:   (LATDbits.LATD4 = 0);
  9804  0019FA  988C               	bcf	140,4,c	;volatile
  9805                           
  9806                           ;LcTLCD.c: 419:   (LATDbits.LATD4 = 0);
  9807  0019FC  988C               	bcf	140,4,c	;volatile
  9808                           
  9809                           ;LcTLCD.c: 420:   (LATDbits.LATD4 = 1);(LATDbits.LATD4 = 1);
  9810  0019FE  888C               	bsf	140,4,c	;volatile
  9811  001A00  888C               	bsf	140,4,c	;volatile
  9812                           
  9813                           ;LcTLCD.c: 422:   (LATDbits.LATD4 = 0);
  9814  001A02  988C               	bcf	140,4,c	;volatile
  9815                           
  9816                           ;LcTLCD.c: 423:   (LATDbits.LATD4 = 0);
  9817  001A04  988C               	bcf	140,4,c	;volatile
  9818                           
  9819                           ;LcTLCD.c: 424:   if (TiGetTics(Timer)) break;
  9820  001A06  500F               	movf	_Timer^0,w,c
  9821  001A08  EC1D  F00E         	call	_TiGetTics
  9822  001A0C  505A               	movf	?_TiGetTics^0,w,c
  9823  001A0E  105B               	iorwf	(?_TiGetTics+1)^0,w,c
  9824  001A10  E001               	bz	l6288
  9825  001A12  0012               	return	
  9826  001A14                     l6288:
  9827                           
  9828                           ;LcTLCD.c: 425:  } while(Busy);
  9829  001A14  5061               	movf	WaitForBusy@Busy^0,w,c
  9830  001A16  E1EB               	bnz	l6266
  9831  001A18  0012               	return		;funcret
  9832  001A1A                     __end_of_WaitForBusy:
  9833                           	callstack 0
  9834                           
  9835 ;; *************** function _TiGetTimer *****************
  9836 ;; Defined at:
  9837 ;;		line 71 in file "TTimer.c"
  9838 ;; Parameters:    Size  Location     Type
  9839 ;;		None
  9840 ;; Auto vars:     Size  Location     Type
  9841 ;;		None
  9842 ;; Return value:  Size  Location     Type
  9843 ;;                  1    wreg      unsigned char 
  9844 ;; Registers used:
  9845 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  9846 ;; Tracked objects:
  9847 ;;		On entry : 0/0
  9848 ;;		On exit  : 0/0
  9849 ;;		Unchanged: 0/0
  9850 ;; Data sizes:     COMRAM   BANK0   BANK1
  9851 ;;      Params:         0       0       0
  9852 ;;      Locals:         0       0       0
  9853 ;;      Temps:          1       0       0
  9854 ;;      Totals:         1       0       0
  9855 ;;Total ram usage:        1 bytes
  9856 ;; Hardware stack levels used: 1
  9857 ;; Hardware stack levels required when called: 2
  9858 ;; This function calls:
  9859 ;;		Nothing
  9860 ;; This function is called by:
  9861 ;;		_LcInit
  9862 ;;		_initKeyboard
  9863 ;;		_initTimeADT
  9864 ;;		_initEUSART
  9865 ;;		_initSpeaker
  9866 ;;		_initLogic
  9867 ;; This function uses a non-reentrant model
  9868 ;;
  9869                           
  9870                           	psect	text76
  9871  001B4A                     __ptext76:
  9872                           	callstack 0
  9873  001B4A                     _TiGetTimer:
  9874                           	callstack 27
  9875                           
  9876                           ;TTimer.c: 75:     counter=0;
  9877                           
  9878                           ;incstack = 0
  9879  001B4A  6A40               	clrf	_counter^0,c
  9880                           
  9881                           ;TTimer.c: 76:     while (s_Timers[counter].b_busy==1) {
  9882  001B4C  D005               	goto	l4372
  9883  001B4E                     l4364:
  9884                           
  9885                           ;TTimer.c: 77:         counter++;
  9886  001B4E  2A40               	incf	_counter^0,f,c
  9887                           
  9888                           ;TTimer.c: 78:  if (counter == 9) return -1;
  9889  001B50  0E09               	movlw	9
  9890  001B52  1840               	xorwf	_counter^0,w,c
  9891  001B54  E101               	bnz	l4372
  9892  001B56  0CFF               	retlw	255
  9893  001B58                     l4372:
  9894                           
  9895                           ;TTimer.c: 76:     while (s_Timers[counter].b_busy==1) {
  9896  001B58  D807               	call	PL24	;call to abstracted procedure
  9897  001B5A  04DE               	decf	postinc2,w,c
  9898  001B5C  E0F8               	bz	l4364
  9899                           
  9900                           ;TTimer.c: 80:     s_Timers[counter].b_busy=1;
  9901  001B5E  D804               	call	PL24	;call to abstracted procedure
  9902  001B60  0E01               	movlw	1
  9903  001B62  6EDF               	movwf	indf2,c
  9904                           
  9905                           ;TTimer.c: 81:     return (counter);
  9906  001B64  5040               	movf	_counter^0,w,c
  9907  001B66  0012               	return		;funcret
  9908  001B68                     __end_of_TiGetTimer:
  9909                           	callstack 0
  9910  001B68                     PL24:
  9911                           	callstack 28
  9912  001B68  5040               	movf	_counter^0,w,c
  9913  001B6A  0D03               	mullw	3
  9914  001B6C  50F3               	movf	243,w,c
  9915  001B6E  0F82               	addlw	low (_s_Timers+2)
  9916  001B70  6ED9               	movwf	fsr2l,c
  9917  001B72  6ADA               	clrf	fsr2h,c
  9918  001B74  0012               	return	
  9919  001B76                     __end_ofPL24:
  9920                           	callstack 0
  9921                           
  9922 ;; *************** function _Espera *****************
  9923 ;; Defined at:
  9924 ;;		line 359 in file "LcTLCD.c"
  9925 ;; Parameters:    Size  Location     Type
  9926 ;;  Timer           2   12[COMRAM] int 
  9927 ;;  ms              2   14[COMRAM] int 
  9928 ;; Auto vars:     Size  Location     Type
  9929 ;;		None
  9930 ;; Return value:  Size  Location     Type
  9931 ;;                  1    wreg      void 
  9932 ;; Registers used:
  9933 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9934 ;; Tracked objects:
  9935 ;;		On entry : 0/0
  9936 ;;		On exit  : 0/0
  9937 ;;		Unchanged: 0/0
  9938 ;; Data sizes:     COMRAM   BANK0   BANK1
  9939 ;;      Params:         4       0       0
  9940 ;;      Locals:         0       0       0
  9941 ;;      Temps:          1       0       0
  9942 ;;      Totals:         5       0       0
  9943 ;;Total ram usage:        5 bytes
  9944 ;; Hardware stack levels used: 1
  9945 ;; Hardware stack levels required when called: 3
  9946 ;; This function calls:
  9947 ;;		_TiGetTics
  9948 ;;		_TiResetTics
  9949 ;; This function is called by:
  9950 ;;		_LcInit
  9951 ;;		_LcClear
  9952 ;; This function uses a non-reentrant model
  9953 ;;
  9954                           
  9955                           	psect	text77
  9956  001CC6                     __ptext77:
  9957                           	callstack 0
  9958  001CC6                     _Espera:
  9959                           	callstack 23
  9960                           
  9961                           ;LcTLCD.c: 360:  TiResetTics(Timer);
  9962                           
  9963                           ;incstack = 0
  9964  001CC6  5061               	movf	Espera@Timer^0,w,c
  9965  001CC8  EC73  F00E         	call	_TiResetTics
  9966  001CCC                     l6292:
  9967  001CCC  5061               	movf	Espera@Timer^0,w,c
  9968  001CCE  EC1D  F00E         	call	_TiGetTics
  9969  001CD2  5063               	movf	Espera@ms^0,w,c
  9970  001CD4  5C5A               	subwf	?_TiGetTics^0,w,c
  9971  001CD6  505B               	movf	(?_TiGetTics+1)^0,w,c
  9972  001CD8  0A80               	xorlw	128
  9973  001CDA  6E65               	movwf	??_Espera^0,c
  9974  001CDC  5064               	movf	(Espera@ms+1)^0,w,c
  9975  001CDE  0A80               	xorlw	128
  9976  001CE0  5865               	subwfb	??_Espera^0,w,c
  9977  001CE2  E3F4               	bnc	l6292
  9978  001CE4  0012               	return		;funcret
  9979  001CE6                     __end_of_Espera:
  9980                           	callstack 0
  9981                           
  9982 ;; *************** function _TiResetTics *****************
  9983 ;; Defined at:
  9984 ;;		line 56 in file "TTimer.c"
  9985 ;; Parameters:    Size  Location     Type
  9986 ;;  Handle          1    wreg     unsigned char 
  9987 ;; Auto vars:     Size  Location     Type
  9988 ;;  Handle          1    5[COMRAM] unsigned char 
  9989 ;; Return value:  Size  Location     Type
  9990 ;;                  1    wreg      void 
  9991 ;; Registers used:
  9992 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  9993 ;; Tracked objects:
  9994 ;;		On entry : 0/0
  9995 ;;		On exit  : 0/0
  9996 ;;		Unchanged: 0/0
  9997 ;; Data sizes:     COMRAM   BANK0   BANK1
  9998 ;;      Params:         0       0       0
  9999 ;;      Locals:         1       0       0
 10000 ;;      Temps:          0       0       0
 10001 ;;      Totals:         1       0       0
 10002 ;;Total ram usage:        1 bytes
 10003 ;; Hardware stack levels used: 1
 10004 ;; Hardware stack levels required when called: 2
 10005 ;; This function calls:
 10006 ;;		Nothing
 10007 ;; This function is called by:
 10008 ;;		_LcPrintLine
 10009 ;;		_LcPrintSecondLine
 10010 ;;		_Espera
 10011 ;;		_WaitForBusy
 10012 ;;		_motorKeyboard
 10013 ;;		_motorTime
 10014 ;;		_TimEnableTime
 10015 ;;		_motorEUSART
 10016 ;;		_EUSendChar
 10017 ;;		_SPPlay
 10018 ;;		_motorLogic
 10019 ;; This function uses a non-reentrant model
 10020 ;;
 10021                           
 10022                           	psect	text78
 10023  001CE6                     __ptext78:
 10024                           	callstack 0
 10025  001CE6                     _TiResetTics:
 10026                           	callstack 24
 10027                           
 10028                           ;incstack = 0
 10029                           ;TiResetTics@Handle stored from wreg
 10030  001CE6  6E5A               	movwf	TiResetTics@Handle^0,c
 10031                           
 10032                           ;TTimer.c: 60:     s_Timers[Handle].h_initialTics=h_Tics;
 10033  001CE8  505A               	movf	TiResetTics@Handle^0,w,c
 10034  001CEA  D805               	call	PL44	;call to abstracted procedure
 10035  001CEC  C009  FFDE         	movff	_h_Tics,postinc2
 10036  001CF0  C00A  FFDD         	movff	_h_Tics+1,postdec2
 10037  001CF4  0012               	return		;funcret
 10038  001CF6                     __end_of_TiResetTics:
 10039                           	callstack 0
 10040  001CF6                     PL44:
 10041                           	callstack 22
 10042  001CF6  0D03               	mullw	3
 10043  001CF8  50F3               	movf	243,w,c
 10044  001CFA  0F80               	addlw	low _s_Timers
 10045  001CFC  6ED9               	movwf	fsr2l,c
 10046  001CFE  6ADA               	clrf	fsr2h,c
 10047  001D00  0012               	return	
 10048  001D02                     __end_ofPL44:
 10049                           	callstack 0
 10050                           
 10051 ;; *************** function _TiGetTics *****************
 10052 ;; Defined at:
 10053 ;;		line 62 in file "TTimer.c"
 10054 ;; Parameters:    Size  Location     Type
 10055 ;;  Handle          1    wreg     unsigned char 
 10056 ;; Auto vars:     Size  Location     Type
 10057 ;;  Handle          1    9[COMRAM] unsigned char 
 10058 ;;  actual          2   10[COMRAM] volatile unsigned int 
 10059 ;; Return value:  Size  Location     Type
 10060 ;;                  2    5[COMRAM] int 
 10061 ;; Registers used:
 10062 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 10063 ;; Tracked objects:
 10064 ;;		On entry : 0/0
 10065 ;;		On exit  : 0/0
 10066 ;;		Unchanged: 0/0
 10067 ;; Data sizes:     COMRAM   BANK0   BANK1
 10068 ;;      Params:         2       0       0
 10069 ;;      Locals:         3       0       0
 10070 ;;      Temps:          2       0       0
 10071 ;;      Totals:         7       0       0
 10072 ;;Total ram usage:        7 bytes
 10073 ;; Hardware stack levels used: 1
 10074 ;; Hardware stack levels required when called: 2
 10075 ;; This function calls:
 10076 ;;		Nothing
 10077 ;; This function is called by:
 10078 ;;		_LcPrintLine
 10079 ;;		_LcPrintSecondLine
 10080 ;;		_Espera
 10081 ;;		_WaitForBusy
 10082 ;;		_motorKeyboard
 10083 ;;		_motorTime
 10084 ;;		_motorEUSART
 10085 ;;		_motorSpeaker
 10086 ;;		_motorLogic
 10087 ;; This function uses a non-reentrant model
 10088 ;;
 10089                           
 10090                           	psect	text79
 10091  001C3A                     __ptext79:
 10092                           	callstack 0
 10093  001C3A                     _TiGetTics:
 10094                           	callstack 23
 10095                           
 10096                           ;incstack = 0
 10097                           ;TiGetTics@Handle stored from wreg
 10098  001C3A  6E5E               	movwf	TiGetTics@Handle^0,c
 10099                           
 10100                           ;TTimer.c: 66:     volatile unsigned int actual;;TTimer.c: 67:     actual=h_Tics;
 10101  001C3C  C009  F05F         	movff	_h_Tics,TiGetTics@actual	;volatile
 10102  001C40  C00A  F060         	movff	_h_Tics+1,TiGetTics@actual+1	;volatile
 10103                           
 10104                           ;TTimer.c: 68:     return (actual-(s_Timers[Handle].h_initialTics));
 10105  001C44  505E               	movf	TiGetTics@Handle^0,w,c
 10106  001C46  EC7B  F00E         	call	PL44	;call to abstracted procedure
 10107  001C4A  CFDE F05C          	movff	postinc2,??_TiGetTics
 10108  001C4E  CFDD F05D          	movff	postdec2,??_TiGetTics+1
 10109  001C52  505C               	movf	??_TiGetTics^0,w,c
 10110  001C54  5C5F               	subwf	TiGetTics@actual^0,w,c	;volatile
 10111  001C56  6E5A               	movwf	?_TiGetTics^0,c
 10112  001C58  505D               	movf	(??_TiGetTics+1)^0,w,c
 10113  001C5A  5860               	subwfb	(TiGetTics@actual+1)^0,w,c	;volatile
 10114  001C5C  6E5B               	movwf	(?_TiGetTics+1)^0,c
 10115  001C5E  0012               	return		;funcret
 10116  001C60                     __end_of_TiGetTics:
 10117                           	callstack 0
 10118                           
 10119 ;; *************** function _EscriuPrimeraOrdre *****************
 10120 ;; Defined at:
 10121 ;;		line 428 in file "LcTLCD.c"
 10122 ;; Parameters:    Size  Location     Type
 10123 ;;  ordre           1    wreg     unsigned char 
 10124 ;; Auto vars:     Size  Location     Type
 10125 ;;  ordre           1    6[COMRAM] unsigned char 
 10126 ;; Return value:  Size  Location     Type
 10127 ;;                  1    wreg      void 
 10128 ;; Registers used:
 10129 ;;		wreg, status,2, status,0
 10130 ;; Tracked objects:
 10131 ;;		On entry : 0/0
 10132 ;;		On exit  : 0/0
 10133 ;;		Unchanged: 0/0
 10134 ;; Data sizes:     COMRAM   BANK0   BANK1
 10135 ;;      Params:         0       0       0
 10136 ;;      Locals:         1       0       0
 10137 ;;      Temps:          1       0       0
 10138 ;;      Totals:         2       0       0
 10139 ;;Total ram usage:        2 bytes
 10140 ;; Hardware stack levels used: 1
 10141 ;; Hardware stack levels required when called: 2
 10142 ;; This function calls:
 10143 ;;		Nothing
 10144 ;; This function is called by:
 10145 ;;		_LcInit
 10146 ;; This function uses a non-reentrant model
 10147 ;;
 10148                           
 10149                           	psect	text80
 10150  0013B2                     __ptext80:
 10151                           	callstack 0
 10152  0013B2                     _EscriuPrimeraOrdre:
 10153                           	callstack 27
 10154                           
 10155                           ;incstack = 0
 10156                           ;EscriuPrimeraOrdre@ordre stored from wreg
 10157  0013B2  6E5B               	movwf	EscriuPrimeraOrdre@ordre^0,c
 10158                           
 10159                           ;LcTLCD.c: 430:  (TRISDbits.TRISD0 = TRISDbits.TRISD1 = TRISDbits.TRISD2 = TRISDbits.TRI
      +                          SD3 = 0); (LATDbits.LATD6 = 0); (LATDbits.LATD5 = 0);
 10160  0013B4  9695               	bcf	149,3,c	;volatile
 10161                           
 10162                           ;LcTLCD.c: 431:  (LATDbits.LATD4 = 1); (LATDbits.LATD4 = 1);
 10163  0013B6  D82F               	call	PL54	;call to abstracted procedure
 10164  0013B8  888C               	bsf	140,4,c	;volatile
 10165                           
 10166                           ;LcTLCD.c: 432:   (LATDbits.LATD1 = (ordre & 0x08 ? 1 : 0));
 10167  0013BA  A65B               	btfss	EscriuPrimeraOrdre@ordre^0,3,c
 10168  0013BC  D003               	goto	u460
 10169  0013BE  6A5A               	clrf	??_EscriuPrimeraOrdre^0,c
 10170  0013C0  2A5A               	incf	??_EscriuPrimeraOrdre^0,f,c
 10171  0013C2  D001               	goto	u478
 10172  0013C4                     u460:
 10173  0013C4  6A5A               	clrf	??_EscriuPrimeraOrdre^0,c
 10174  0013C6                     u478:
 10175  0013C6  465A               	rlncf	??_EscriuPrimeraOrdre^0,f,c
 10176  0013C8  508C               	movf	140,w,c	;volatile
 10177  0013CA  185A               	xorwf	??_EscriuPrimeraOrdre^0,w,c
 10178  0013CC  0BFD               	andlw	-3
 10179  0013CE  185A               	xorwf	??_EscriuPrimeraOrdre^0,w,c
 10180  0013D0  6E8C               	movwf	140,c	;volatile
 10181                           
 10182                           ;LcTLCD.c: 433:   (LATDbits.LATD0 = (ordre & 0x04 ? 1 : 0));
 10183  0013D2  A45B               	btfss	EscriuPrimeraOrdre@ordre^0,2,c
 10184  0013D4  D003               	goto	u480
 10185  0013D6  6A5A               	clrf	??_EscriuPrimeraOrdre^0,c
 10186  0013D8  2A5A               	incf	??_EscriuPrimeraOrdre^0,f,c
 10187  0013DA  D001               	goto	u498
 10188  0013DC                     u480:
 10189  0013DC  6A5A               	clrf	??_EscriuPrimeraOrdre^0,c
 10190  0013DE                     u498:
 10191  0013DE  508C               	movf	140,w,c	;volatile
 10192  0013E0  185A               	xorwf	??_EscriuPrimeraOrdre^0,w,c
 10193  0013E2  0BFE               	andlw	-2
 10194  0013E4  185A               	xorwf	??_EscriuPrimeraOrdre^0,w,c
 10195  0013E6  6E8C               	movwf	140,c	;volatile
 10196                           
 10197                           ;LcTLCD.c: 434:   (LATDbits.LATD2 = (ordre & 0x02 ? 1 : 0));
 10198  0013E8  A25B               	btfss	EscriuPrimeraOrdre@ordre^0,1,c
 10199  0013EA  D003               	goto	u500
 10200  0013EC  6A5A               	clrf	??_EscriuPrimeraOrdre^0,c
 10201  0013EE  2A5A               	incf	??_EscriuPrimeraOrdre^0,f,c
 10202  0013F0  D001               	goto	u518
 10203  0013F2                     u500:
 10204  0013F2  6A5A               	clrf	??_EscriuPrimeraOrdre^0,c
 10205  0013F4                     u518:
 10206  0013F4  D817               	call	PL80	;call to abstracted procedure
 10207  0013F6  0BFB               	andlw	-5
 10208  0013F8  185A               	xorwf	??_EscriuPrimeraOrdre^0,w,c
 10209  0013FA  6E8C               	movwf	140,c	;volatile
 10210                           
 10211                           ;LcTLCD.c: 435:   (LATDbits.LATD3 = (ordre & 0x01 ? 1 : 0));
 10212  0013FC  A05B               	btfss	EscriuPrimeraOrdre@ordre^0,0,c
 10213  0013FE  D003               	goto	u520
 10214  001400  6A5A               	clrf	??_EscriuPrimeraOrdre^0,c
 10215  001402  2A5A               	incf	??_EscriuPrimeraOrdre^0,f,c
 10216  001404  D001               	goto	u538
 10217  001406                     u520:
 10218  001406  6A5A               	clrf	??_EscriuPrimeraOrdre^0,c
 10219  001408                     u538:
 10220  001408  465A               	rlncf	??_EscriuPrimeraOrdre^0,f,c
 10221  00140A  D80C               	call	PL80	;call to abstracted procedure
 10222  00140C  0BF7               	andlw	-9
 10223  00140E  185A               	xorwf	??_EscriuPrimeraOrdre^0,w,c
 10224  001410  6E8C               	movwf	140,c	;volatile
 10225                           
 10226                           ;LcTLCD.c: 436:  (LATDbits.LATD4 = 0);
 10227  001412  988C               	bcf	140,4,c	;volatile
 10228  001414  0012               	return		;funcret
 10229  001416                     __end_of_EscriuPrimeraOrdre:
 10230                           	callstack 0
 10231  001416                     PL54:
 10232                           	callstack 22
 10233  001416  9495               	bcf	149,2,c	;volatile
 10234  001418  9295               	bcf	149,1,c	;volatile
 10235  00141A  9095               	bcf	149,0,c	;volatile
 10236  00141C  9C8C               	bcf	140,6,c	;volatile
 10237  00141E  9A8C               	bcf	140,5,c	;volatile
 10238  001420  888C               	bsf	140,4,c	;volatile
 10239  001422  0012               	return	
 10240  001424                     __end_ofPL54:
 10241                           	callstack 0
 10242  001424                     PL80:
 10243                           	callstack 27
 10244  001424  465A               	rlncf	??_EscriuPrimeraOrdre^0,f,c
 10245  001426  465A               	rlncf	??_EscriuPrimeraOrdre^0,f,c
 10246  001428  508C               	movf	140,w,c	;volatile
 10247  00142A  185A               	xorwf	??_EscriuPrimeraOrdre^0,w,c
 10248  00142C  0012               	return	
 10249  00142E                     __end_ofPL80:
 10250                           	callstack 0
 10251                           
 10252 ;; *************** function _CantaIR *****************
 10253 ;; Defined at:
 10254 ;;		line 378 in file "LcTLCD.c"
 10255 ;; Parameters:    Size  Location     Type
 10256 ;;  IR              1    wreg     unsigned char 
 10257 ;; Auto vars:     Size  Location     Type
 10258 ;;  IR              1    7[COMRAM] unsigned char 
 10259 ;; Return value:  Size  Location     Type
 10260 ;;                  1    wreg      void 
 10261 ;; Registers used:
 10262 ;;		wreg, status,2, status,0, cstack
 10263 ;; Tracked objects:
 10264 ;;		On entry : 0/0
 10265 ;;		On exit  : 0/0
 10266 ;;		Unchanged: 0/0
 10267 ;; Data sizes:     COMRAM   BANK0   BANK1
 10268 ;;      Params:         0       0       0
 10269 ;;      Locals:         1       0       0
 10270 ;;      Temps:          0       0       0
 10271 ;;      Totals:         1       0       0
 10272 ;;Total ram usage:        1 bytes
 10273 ;; Hardware stack levels used: 1
 10274 ;; Hardware stack levels required when called: 3
 10275 ;; This function calls:
 10276 ;;		_CantaPartAlta
 10277 ;;		_CantaPartBaixa
 10278 ;; This function is called by:
 10279 ;;		_LcInit
 10280 ;;		_LcClear
 10281 ;;		_LcCursorOn
 10282 ;;		_LcCursorOff
 10283 ;;		_LcGotoXY
 10284 ;; This function uses a non-reentrant model
 10285 ;;
 10286                           
 10287                           	psect	text81
 10288  001D02                     __ptext81:
 10289                           	callstack 0
 10290  001D02                     _CantaIR:
 10291                           	callstack 22
 10292                           
 10293                           ;incstack = 0
 10294                           ;CantaIR@IR stored from wreg
 10295  001D02  6E5C               	movwf	CantaIR@IR^0,c
 10296                           
 10297                           ;LcTLCD.c: 379:  (TRISDbits.TRISD0 = TRISDbits.TRISD1 = TRISDbits.TRISD2 = TRISDbits.TRI
      +                          SD3 = 0);
 10298  001D04  9695               	bcf	149,3,c	;volatile
 10299                           
 10300                           ;LcTLCD.c: 380:  (LATDbits.LATD6 = 0);
 10301                           
 10302                           ;LcTLCD.c: 381:  (LATDbits.LATD5 = 0);
 10303                           
 10304                           ;LcTLCD.c: 382:  (LATDbits.LATD4 = 1);
 10305  001D06  EC0B  F00A         	call	PL54	;call to abstracted procedure
 10306                           
 10307                           ;LcTLCD.c: 383:  CantaPartAlta(IR);
 10308  001D0A  505C               	movf	CantaIR@IR^0,w,c
 10309  001D0C  ECBA  F00A         	call	_CantaPartAlta
 10310                           
 10311                           ;LcTLCD.c: 384:  (LATDbits.LATD4 = 1);
 10312                           
 10313                           ;LcTLCD.c: 385:  (LATDbits.LATD4 = 0);
 10314                           
 10315                           ;LcTLCD.c: 386:  (LATDbits.LATD4 = 0);
 10316                           
 10317                           ;LcTLCD.c: 387:  (LATDbits.LATD4 = 1);
 10318  001D10  EC24  F00D         	call	PL74	;call to abstracted procedure
 10319                           
 10320                           ;LcTLCD.c: 388:  CantaPartBaixa(IR);
 10321  001D14  505C               	movf	CantaIR@IR^0,w,c
 10322  001D16  EC87  F00A         	call	_CantaPartBaixa
 10323                           
 10324                           ;LcTLCD.c: 389:  (LATDbits.LATD4 = 1);
 10325                           
 10326                           ;LcTLCD.c: 390:  (LATDbits.LATD4 = 0);
 10327                           
 10328                           ;LcTLCD.c: 391:  (TRISDbits.TRISD0 = TRISDbits.TRISD1 = TRISDbits.TRISD2 = TRISDbits.TRI
      +                          SD3 = 1);
 10329  001D1A  EF1D  F00D         	goto	PL46	;call to abstracted procedure
 10330  001D1E                     __end_of_CantaIR:
 10331                           	callstack 0
 10332                           
 10333 ;; *************** function _CantaPartBaixa *****************
 10334 ;; Defined at:
 10335 ;;		line 371 in file "LcTLCD.c"
 10336 ;; Parameters:    Size  Location     Type
 10337 ;;  c               1    wreg     unsigned char 
 10338 ;; Auto vars:     Size  Location     Type
 10339 ;;  c               1    6[COMRAM] unsigned char 
 10340 ;; Return value:  Size  Location     Type
 10341 ;;                  1    wreg      void 
 10342 ;; Registers used:
 10343 ;;		wreg, status,2, status,0
 10344 ;; Tracked objects:
 10345 ;;		On entry : 0/0
 10346 ;;		On exit  : 0/0
 10347 ;;		Unchanged: 0/0
 10348 ;; Data sizes:     COMRAM   BANK0   BANK1
 10349 ;;      Params:         0       0       0
 10350 ;;      Locals:         1       0       0
 10351 ;;      Temps:          1       0       0
 10352 ;;      Totals:         2       0       0
 10353 ;;Total ram usage:        2 bytes
 10354 ;; Hardware stack levels used: 1
 10355 ;; Hardware stack levels required when called: 2
 10356 ;; This function calls:
 10357 ;;		Nothing
 10358 ;; This function is called by:
 10359 ;;		_CantaIR
 10360 ;;		_CantaData
 10361 ;; This function uses a non-reentrant model
 10362 ;;
 10363                           
 10364                           	psect	text82
 10365  00150E                     __ptext82:
 10366                           	callstack 0
 10367  00150E                     _CantaPartBaixa:
 10368                           	callstack 22
 10369                           
 10370                           ;incstack = 0
 10371                           ;CantaPartBaixa@c stored from wreg
 10372  00150E  6E5B               	movwf	CantaPartBaixa@c^0,c
 10373                           
 10374                           ;LcTLCD.c: 372:   (LATDbits.LATD1 = (c & 0x08 ? 1 : 0));
 10375  001510  A65B               	btfss	CantaPartBaixa@c^0,3,c
 10376  001512  D003               	goto	u7220
 10377  001514  6A5A               	clrf	??_CantaPartBaixa^0,c
 10378  001516  2A5A               	incf	??_CantaPartBaixa^0,f,c
 10379  001518  D001               	goto	u7238
 10380  00151A                     u7220:
 10381  00151A  6A5A               	clrf	??_CantaPartBaixa^0,c
 10382  00151C                     u7238:
 10383  00151C  465A               	rlncf	??_CantaPartBaixa^0,f,c
 10384  00151E  508C               	movf	140,w,c	;volatile
 10385  001520  185A               	xorwf	??_CantaPartBaixa^0,w,c
 10386  001522  0BFD               	andlw	-3
 10387  001524  185A               	xorwf	??_CantaPartBaixa^0,w,c
 10388  001526  6E8C               	movwf	140,c	;volatile
 10389                           
 10390                           ;LcTLCD.c: 373:   (LATDbits.LATD0 = (c & 0x04 ? 1 : 0));
 10391  001528  A45B               	btfss	CantaPartBaixa@c^0,2,c
 10392  00152A  D003               	goto	u7240
 10393  00152C  6A5A               	clrf	??_CantaPartBaixa^0,c
 10394  00152E  2A5A               	incf	??_CantaPartBaixa^0,f,c
 10395  001530  D001               	goto	u7258
 10396  001532                     u7240:
 10397  001532  6A5A               	clrf	??_CantaPartBaixa^0,c
 10398  001534                     u7258:
 10399  001534  508C               	movf	140,w,c	;volatile
 10400  001536  185A               	xorwf	??_CantaPartBaixa^0,w,c
 10401  001538  0BFE               	andlw	-2
 10402  00153A  185A               	xorwf	??_CantaPartBaixa^0,w,c
 10403  00153C  6E8C               	movwf	140,c	;volatile
 10404                           
 10405                           ;LcTLCD.c: 374:   (LATDbits.LATD2 = (c & 0x02 ? 1 : 0));
 10406  00153E  A25B               	btfss	CantaPartBaixa@c^0,1,c
 10407  001540  D003               	goto	u7260
 10408  001542  6A5A               	clrf	??_CantaPartBaixa^0,c
 10409  001544  2A5A               	incf	??_CantaPartBaixa^0,f,c
 10410  001546  D001               	goto	u7278
 10411  001548                     u7260:
 10412  001548  6A5A               	clrf	??_CantaPartBaixa^0,c
 10413  00154A                     u7278:
 10414  00154A  D80F               	call	PL78	;call to abstracted procedure
 10415  00154C  0BFB               	andlw	-5
 10416  00154E  185A               	xorwf	??_CantaPartBaixa^0,w,c
 10417  001550  6E8C               	movwf	140,c	;volatile
 10418                           
 10419                           ;LcTLCD.c: 375:   (LATDbits.LATD3 = (c & 0x01 ? 1 : 0));
 10420  001552  A05B               	btfss	CantaPartBaixa@c^0,0,c
 10421  001554  D003               	goto	u7280
 10422  001556  6A5A               	clrf	??_CantaPartBaixa^0,c
 10423  001558  2A5A               	incf	??_CantaPartBaixa^0,f,c
 10424  00155A  D001               	goto	u7298
 10425  00155C                     u7280:
 10426  00155C  6A5A               	clrf	??_CantaPartBaixa^0,c
 10427  00155E                     u7298:
 10428  00155E  465A               	rlncf	??_CantaPartBaixa^0,f,c
 10429  001560  D804               	call	PL78	;call to abstracted procedure
 10430  001562  0BF7               	andlw	-9
 10431  001564  185A               	xorwf	??_CantaPartBaixa^0,w,c
 10432  001566  6E8C               	movwf	140,c	;volatile
 10433  001568  0012               	return		;funcret
 10434  00156A                     __end_of_CantaPartBaixa:
 10435                           	callstack 0
 10436  00156A                     PL78:
 10437                           	callstack 22
 10438  00156A  465A               	rlncf	??_CantaPartBaixa^0,f,c
 10439  00156C  465A               	rlncf	??_CantaPartBaixa^0,f,c
 10440  00156E  508C               	movf	140,w,c	;volatile
 10441  001570  185A               	xorwf	??_CantaPartBaixa^0,w,c
 10442  001572  0012               	return	
 10443  001574                     __end_ofPL78:
 10444                           	callstack 0
 10445                           
 10446 ;; *************** function _CantaPartAlta *****************
 10447 ;; Defined at:
 10448 ;;		line 364 in file "LcTLCD.c"
 10449 ;; Parameters:    Size  Location     Type
 10450 ;;  c               1    wreg     unsigned char 
 10451 ;; Auto vars:     Size  Location     Type
 10452 ;;  c               1    6[COMRAM] unsigned char 
 10453 ;; Return value:  Size  Location     Type
 10454 ;;                  1    wreg      void 
 10455 ;; Registers used:
 10456 ;;		wreg, status,2, status,0
 10457 ;; Tracked objects:
 10458 ;;		On entry : 0/0
 10459 ;;		On exit  : 0/0
 10460 ;;		Unchanged: 0/0
 10461 ;; Data sizes:     COMRAM   BANK0   BANK1
 10462 ;;      Params:         0       0       0
 10463 ;;      Locals:         1       0       0
 10464 ;;      Temps:          1       0       0
 10465 ;;      Totals:         2       0       0
 10466 ;;Total ram usage:        2 bytes
 10467 ;; Hardware stack levels used: 1
 10468 ;; Hardware stack levels required when called: 2
 10469 ;; This function calls:
 10470 ;;		Nothing
 10471 ;; This function is called by:
 10472 ;;		_CantaIR
 10473 ;;		_CantaData
 10474 ;; This function uses a non-reentrant model
 10475 ;;
 10476                           
 10477                           	psect	text83
 10478  001574                     __ptext83:
 10479                           	callstack 0
 10480  001574                     _CantaPartAlta:
 10481                           	callstack 22
 10482                           
 10483                           ;incstack = 0
 10484                           ;CantaPartAlta@c stored from wreg
 10485  001574  6E5B               	movwf	CantaPartAlta@c^0,c
 10486                           
 10487                           ;LcTLCD.c: 365:   (LATDbits.LATD1 = (c & 0x80 ? 1 : 0));
 10488  001576  AE5B               	btfss	CantaPartAlta@c^0,7,c
 10489  001578  D003               	goto	u7140
 10490  00157A  6A5A               	clrf	??_CantaPartAlta^0,c
 10491  00157C  2A5A               	incf	??_CantaPartAlta^0,f,c
 10492  00157E  D001               	goto	u7158
 10493  001580                     u7140:
 10494  001580  6A5A               	clrf	??_CantaPartAlta^0,c
 10495  001582                     u7158:
 10496  001582  465A               	rlncf	??_CantaPartAlta^0,f,c
 10497  001584  508C               	movf	140,w,c	;volatile
 10498  001586  185A               	xorwf	??_CantaPartAlta^0,w,c
 10499  001588  0BFD               	andlw	-3
 10500  00158A  185A               	xorwf	??_CantaPartAlta^0,w,c
 10501  00158C  6E8C               	movwf	140,c	;volatile
 10502                           
 10503                           ;LcTLCD.c: 366:   (LATDbits.LATD0 = (c & 0x40 ? 1 : 0));
 10504  00158E  AC5B               	btfss	CantaPartAlta@c^0,6,c
 10505  001590  D003               	goto	u7160
 10506  001592  6A5A               	clrf	??_CantaPartAlta^0,c
 10507  001594  2A5A               	incf	??_CantaPartAlta^0,f,c
 10508  001596  D001               	goto	u7178
 10509  001598                     u7160:
 10510  001598  6A5A               	clrf	??_CantaPartAlta^0,c
 10511  00159A                     u7178:
 10512  00159A  508C               	movf	140,w,c	;volatile
 10513  00159C  185A               	xorwf	??_CantaPartAlta^0,w,c
 10514  00159E  0BFE               	andlw	-2
 10515  0015A0  185A               	xorwf	??_CantaPartAlta^0,w,c
 10516  0015A2  6E8C               	movwf	140,c	;volatile
 10517                           
 10518                           ;LcTLCD.c: 367:   (LATDbits.LATD2 = (c & 0x20 ? 1 : 0));
 10519  0015A4  AA5B               	btfss	CantaPartAlta@c^0,5,c
 10520  0015A6  D003               	goto	u7180
 10521  0015A8  6A5A               	clrf	??_CantaPartAlta^0,c
 10522  0015AA  2A5A               	incf	??_CantaPartAlta^0,f,c
 10523  0015AC  D001               	goto	u7198
 10524  0015AE                     u7180:
 10525  0015AE  6A5A               	clrf	??_CantaPartAlta^0,c
 10526  0015B0                     u7198:
 10527  0015B0  D80F               	call	PL82	;call to abstracted procedure
 10528  0015B2  0BFB               	andlw	-5
 10529  0015B4  185A               	xorwf	??_CantaPartAlta^0,w,c
 10530  0015B6  6E8C               	movwf	140,c	;volatile
 10531                           
 10532                           ;LcTLCD.c: 368:   (LATDbits.LATD3 = (c & 0x10 ? 1 : 0));
 10533  0015B8  A85B               	btfss	CantaPartAlta@c^0,4,c
 10534  0015BA  D003               	goto	u7200
 10535  0015BC  6A5A               	clrf	??_CantaPartAlta^0,c
 10536  0015BE  2A5A               	incf	??_CantaPartAlta^0,f,c
 10537  0015C0  D001               	goto	u7218
 10538  0015C2                     u7200:
 10539  0015C2  6A5A               	clrf	??_CantaPartAlta^0,c
 10540  0015C4                     u7218:
 10541  0015C4  465A               	rlncf	??_CantaPartAlta^0,f,c
 10542  0015C6  D804               	call	PL82	;call to abstracted procedure
 10543  0015C8  0BF7               	andlw	-9
 10544  0015CA  185A               	xorwf	??_CantaPartAlta^0,w,c
 10545  0015CC  6E8C               	movwf	140,c	;volatile
 10546  0015CE  0012               	return		;funcret
 10547  0015D0                     __end_of_CantaPartAlta:
 10548                           	callstack 0
 10549  0015D0                     PL82:
 10550                           	callstack 22
 10551  0015D0  465A               	rlncf	??_CantaPartAlta^0,f,c
 10552  0015D2  465A               	rlncf	??_CantaPartAlta^0,f,c
 10553  0015D4  508C               	movf	140,w,c	;volatile
 10554  0015D6  185A               	xorwf	??_CantaPartAlta^0,w,c
 10555  0015D8  0012               	return	
 10556  0015DA                     __end_ofPL82:
 10557                           	callstack 0
 10558                           
 10559 ;; *************** function _my_interrupts *****************
 10560 ;; Defined at:
 10561 ;;		line 19 in file "main.c"
 10562 ;; Parameters:    Size  Location     Type
 10563 ;;		None
 10564 ;; Auto vars:     Size  Location     Type
 10565 ;;		None
 10566 ;; Return value:  Size  Location     Type
 10567 ;;                  1    wreg      void 
 10568 ;; Registers used:
 10569 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 10570 ;; Tracked objects:
 10571 ;;		On entry : 0/0
 10572 ;;		On exit  : 0/0
 10573 ;;		Unchanged: 0/0
 10574 ;; Data sizes:     COMRAM   BANK0   BANK1
 10575 ;;      Params:         0       0       0
 10576 ;;      Locals:         0       0       0
 10577 ;;      Temps:          4       0       0
 10578 ;;      Totals:         4       0       0
 10579 ;;Total ram usage:        4 bytes
 10580 ;; Hardware stack levels used: 1
 10581 ;; Hardware stack levels required when called: 1
 10582 ;; This function calls:
 10583 ;;		__TiRSITimer
 10584 ;; This function is called by:
 10585 ;;		Interrupt level 2
 10586 ;; This function uses a non-reentrant model
 10587 ;;
 10588                           
 10589                           	psect	intcode
 10590  000008                     __pintcode:
 10591                           	callstack 0
 10592  000008                     _my_interrupts:
 10593                           	callstack 22
 10594                           
 10595                           ;incstack = 0
 10596  000008  8279               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 10597  00000A  CFD9 F056          	movff	fsr2l,??_my_interrupts
 10598  00000E  CFDA F057          	movff	fsr2h,??_my_interrupts+1
 10599  000012  CFF3 F058          	movff	prodl,??_my_interrupts+2
 10600  000016  CFF4 F059          	movff	prodh,??_my_interrupts+3
 10601                           
 10602                           ;main.c: 20:         LATAbits.LA3 = 1;
 10603  00001A  ECDE  F00B         	call	__TiRSITimer	;wreg free
 10604  00001E  C059  FFF4         	movff	??_my_interrupts+3,prodh
 10605  000022  C058  FFF3         	movff	??_my_interrupts+2,prodl
 10606  000026  C057  FFDA         	movff	??_my_interrupts+1,fsr2h
 10607  00002A  C056  FFD9         	movff	??_my_interrupts,fsr2l
 10608  00002E  9279               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 10609  000030  0011               	retfie		f
 10610  000032                     __end_of_my_interrupts:
 10611                           	callstack 0
 10612                           
 10613 ;; *************** function __TiRSITimer *****************
 10614 ;; Defined at:
 10615 ;;		line 36 in file "TTimer.c"
 10616 ;; Parameters:    Size  Location     Type
 10617 ;;		None
 10618 ;; Auto vars:     Size  Location     Type
 10619 ;;		None
 10620 ;; Return value:  Size  Location     Type
 10621 ;;                  1    wreg      void 
 10622 ;; Registers used:
 10623 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 10624 ;; Tracked objects:
 10625 ;;		On entry : 0/0
 10626 ;;		On exit  : 0/0
 10627 ;;		Unchanged: 0/0
 10628 ;; Data sizes:     COMRAM   BANK0   BANK1
 10629 ;;      Params:         0       0       0
 10630 ;;      Locals:         0       0       0
 10631 ;;      Temps:          1       0       0
 10632 ;;      Totals:         1       0       0
 10633 ;;Total ram usage:        1 bytes
 10634 ;; Hardware stack levels used: 1
 10635 ;; This function calls:
 10636 ;;		Nothing
 10637 ;; This function is called by:
 10638 ;;		_my_interrupts
 10639 ;; This function uses a non-reentrant model
 10640 ;;
 10641                           
 10642                           	psect	text85
 10643  0017BC                     __ptext85:
 10644                           	callstack 0
 10645  0017BC                     __TiRSITimer:
 10646                           	callstack 0
 10647                           
 10648                           ;TTimer.c: 39:     TMR0H = 0xDF;
 10649                           
 10650                           ;incstack = 0
 10651                           
 10652                           ;TTimer.c: 40:     TMR0L = 0x73;
 10653  0017BC  D81E               	call	PL72	;call to abstracted procedure
 10654                           
 10655                           ;TTimer.c: 42:     INTCONbits.TMR0IF = 0;
 10656  0017BE  94F2               	bcf	242,2,c	;volatile
 10657                           
 10658                           ;TTimer.c: 43:     h_Tics++;
 10659  0017C0  4A09               	infsnz	_h_Tics^0,f,c
 10660  0017C2  2A0A               	incf	(_h_Tics+1)^0,f,c
 10661                           
 10662                           ;TTimer.c: 45:     if (h_Tics>=30000) {
 10663  0017C4  0E30               	movlw	48
 10664  0017C6  5C09               	subwf	_h_Tics^0,w,c
 10665  0017C8  0E75               	movlw	117
 10666  0017CA  580A               	subwfb	(_h_Tics+1)^0,w,c
 10667  0017CC  A0D8               	btfss	status,0,c
 10668  0017CE  0012               	return	
 10669                           
 10670                           ;TTimer.c: 47:         for (counter=0; counter<9; counter++){
 10671  0017D0  6A40               	clrf	_counter^0,c
 10672  0017D2                     i2l4978:
 10673  0017D2  0E08               	movlw	8
 10674  0017D4  6440               	cpfsgt	_counter^0,c
 10675  0017D6  D001               	goto	i2l4982
 10676  0017D8  D00D               	goto	i2l206
 10677  0017DA                     i2l4982:
 10678                           
 10679                           ;TTimer.c: 48:             if (s_Timers[counter].b_busy==1){
 10680  0017DA  ECB4  F00D         	call	PL24	;call to abstracted procedure
 10681  0017DE  04DE               	decf	postinc2,w,c
 10682  0017E0  E107               	bnz	i2l4986
 10683                           
 10684                           ;TTimer.c: 49:                 s_Timers[counter].h_initialTics -= h_Tics;
 10685  0017E2  5040               	movf	_counter^0,w,c
 10686  0017E4  EC7B  F00E         	call	PL44	;call to abstracted procedure
 10687  0017E8  5009               	movf	_h_Tics^0,w,c
 10688  0017EA  5EDE               	subwf	postinc2,f,c
 10689  0017EC  500A               	movf	(_h_Tics+1)^0,w,c
 10690  0017EE  5ADD               	subwfb	postdec2,f,c
 10691  0017F0                     i2l4986:
 10692                           
 10693                           ;TTimer.c: 51:         }
 10694  0017F0  2A40               	incf	_counter^0,f,c
 10695  0017F2  D7EF               	goto	i2l4978
 10696  0017F4                     i2l206:
 10697                           
 10698                           ;TTimer.c: 52:         h_Tics=0;
 10699  0017F4  6A09               	clrf	_h_Tics^0,c
 10700  0017F6  6A0A               	clrf	(_h_Tics+1)^0,c
 10701  0017F8  0012               	return		;funcret
 10702  0017FA                     __end_of__TiRSITimer:
 10703                           	callstack 0
 10704  0017FA                     PL72:
 10705                           	callstack 28
 10706  0017FA  0EDF               	movlw	223
 10707  0017FC  6ED7               	movwf	215,c	;volatile
 10708  0017FE  0E73               	movlw	115
 10709  001800  6ED6               	movwf	214,c	;volatile
 10710  001802  0C73               	retlw	115
 10711  001804                     __end_ofPL72:
 10712                           	callstack 0
 10713                           
 10714                           	psect	rparam
 10715  0000                     
 10716                           	psect	temp
 10717  000079                     btemp:
 10718                           	callstack 0
 10719  000079                     	ds	1
 10720  0000                     int$flags	set	btemp
 10721  0000                     wtemp8	set	btemp+1
 10722  0000                     ttemp5	set	btemp+1
 10723  0000                     ttemp6	set	btemp+4
 10724  0000                     ttemp7	set	btemp+8
 10725                           
 10726                           	psect	idloc
 10727                           
 10728                           ;Config register IDLOC0 @ 0x200000
 10729                           ;	unspecified, using default values
 10730  200000                     	org	2097152
 10731  200000  FF                 	db	255
 10732                           
 10733                           ;Config register IDLOC1 @ 0x200001
 10734                           ;	unspecified, using default values
 10735  200001                     	org	2097153
 10736  200001  FF                 	db	255
 10737                           
 10738                           ;Config register IDLOC2 @ 0x200002
 10739                           ;	unspecified, using default values
 10740  200002                     	org	2097154
 10741  200002  FF                 	db	255
 10742                           
 10743                           ;Config register IDLOC3 @ 0x200003
 10744                           ;	unspecified, using default values
 10745  200003                     	org	2097155
 10746  200003  FF                 	db	255
 10747                           
 10748                           ;Config register IDLOC4 @ 0x200004
 10749                           ;	unspecified, using default values
 10750  200004                     	org	2097156
 10751  200004  FF                 	db	255
 10752                           
 10753                           ;Config register IDLOC5 @ 0x200005
 10754                           ;	unspecified, using default values
 10755  200005                     	org	2097157
 10756  200005  FF                 	db	255
 10757                           
 10758                           ;Config register IDLOC6 @ 0x200006
 10759                           ;	unspecified, using default values
 10760  200006                     	org	2097158
 10761  200006  FF                 	db	255
 10762                           
 10763                           ;Config register IDLOC7 @ 0x200007
 10764                           ;	unspecified, using default values
 10765  200007                     	org	2097159
 10766  200007  FF                 	db	255
 10767                           
 10768                           	psect	config
 10769                           
 10770                           ; Padding undefined space
 10771  300000                     	org	3145728
 10772  300000  FF                 	db	255
 10773                           
 10774                           ;Config register CONFIG1H @ 0x300001
 10775                           ;	Oscillator
 10776                           ;	OSC = HSPLL, HS oscillator, PLL enabled (Clock Frequency = 4 x FOSC1)
 10777                           ;	Fail-Safe Clock Monitor Enable bit
 10778                           ;	FCMEN = 0x0, unprogrammed default
 10779                           ;	Internal/External Oscillator Switchover bit
 10780                           ;	IESO = 0x0, unprogrammed default
 10781  300001                     	org	3145729
 10782  300001  06                 	db	6
 10783                           
 10784                           ;Config register CONFIG2L @ 0x300002
 10785                           ;	unspecified, using default values
 10786                           ;	Power-up Timer Enable bit
 10787                           ;	PWRT = 0x1, unprogrammed default
 10788                           ;	Brown-out Reset Enable bits
 10789                           ;	BOR = 0x3, unprogrammed default
 10790                           ;	Brown-out Reset Voltage bits
 10791                           ;	BORV = 0x3, unprogrammed default
 10792  300002                     	org	3145730
 10793  300002  1F                 	db	31
 10794                           
 10795                           ;Config register CONFIG2H @ 0x300003
 10796                           ;	Watchdog Timer Enable bit
 10797                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
 10798                           ;	Watchdog Timer Postscale Select bits
 10799                           ;	WDTPS = 0xF, unprogrammed default
 10800  300003                     	org	3145731
 10801  300003  1E                 	db	30
 10802                           
 10803                           ; Padding undefined space
 10804  300004                     	org	3145732
 10805  300004  FF                 	db	255
 10806                           
 10807                           ;Config register CONFIG3H @ 0x300005
 10808                           ;	CCP2 MUX bit
 10809                           ;	CCP2MX = 0x1, unprogrammed default
 10810                           ;	PORTB A/D Enable bit
 10811                           ;	PBADEN = DIG, PORTB<4:0> pins are configured as digital I/O on Reset
 10812                           ;	Low-Power Timer1 Oscillator Enable bit
 10813                           ;	LPT1OSC = 0x0, unprogrammed default
 10814                           ;	MCLR Pin Enable bit
 10815                           ;	MCLRE = 0x1, unprogrammed default
 10816  300005                     	org	3145733
 10817  300005  81                 	db	129
 10818                           
 10819                           ;Config register CONFIG4L @ 0x300006
 10820                           ;	Stack Full/Underflow Reset Enable bit
 10821                           ;	STVREN = 0x1, unprogrammed default
 10822                           ;	Single-Supply ICSP Enable bit
 10823                           ;	LVP = OFF, Single-Supply ICSP disabled
 10824                           ;	Boot Block Size Select bits
 10825                           ;	BBSIZ = 0x0, unprogrammed default
 10826                           ;	Extended Instruction Set Enable bit
 10827                           ;	XINST = 0x0, unprogrammed default
 10828                           ;	Background Debugger Enable bit
 10829                           ;	DEBUG = OFF, Background debugger disabled, RB6 and RB7 configured as general purpose I
      +                          /O pins
 10830  300006                     	org	3145734
 10831  300006  81                 	db	129
 10832                           
 10833                           ; Padding undefined space
 10834  300007                     	org	3145735
 10835  300007  FF                 	db	255
 10836                           
 10837                           ;Config register CONFIG5L @ 0x300008
 10838                           ;	unspecified, using default values
 10839                           ;	Code Protection bit
 10840                           ;	CP0 = 0x1, unprogrammed default
 10841                           ;	Code Protection bit
 10842                           ;	CP1 = 0x1, unprogrammed default
 10843  300008                     	org	3145736
 10844  300008  03                 	db	3
 10845                           
 10846                           ;Config register CONFIG5H @ 0x300009
 10847                           ;	unspecified, using default values
 10848                           ;	Boot Block Code Protection bitProtect Boot
 10849                           ;	CPB = 0x1, unprogrammed default
 10850                           ;	Data EEPROM Code Protection bit
 10851                           ;	CPD = 0x1, unprogrammed default
 10852  300009                     	org	3145737
 10853  300009  C0                 	db	192
 10854                           
 10855                           ;Config register CONFIG6L @ 0x30000A
 10856                           ;	unspecified, using default values
 10857                           ;	Write Protection bit
 10858                           ;	WRT0 = 0x1, unprogrammed default
 10859                           ;	Write Protection bit
 10860                           ;	WRT1 = 0x1, unprogrammed default
 10861  30000A                     	org	3145738
 10862  30000A  03                 	db	3
 10863                           
 10864                           ;Config register CONFIG6H @ 0x30000B
 10865                           ;	unspecified, using default values
 10866                           ;	Configuration Register Write Protection bit
 10867                           ;	WRTC = 0x1, unprogrammed default
 10868                           ;	Boot Block Write Protection bit
 10869                           ;	WRTB = 0x1, unprogrammed default
 10870                           ;	Data EEPROM Write Protection bit
 10871                           ;	WRTD = 0x1, unprogrammed default
 10872  30000B                     	org	3145739
 10873  30000B  E0                 	db	224
 10874                           
 10875                           ;Config register CONFIG7L @ 0x30000C
 10876                           ;	unspecified, using default values
 10877                           ;	Table Read Protection bit
 10878                           ;	EBTR0 = 0x1, unprogrammed default
 10879                           ;	Table Read Protection bit
 10880                           ;	EBTR1 = 0x1, unprogrammed default
 10881  30000C                     	org	3145740
 10882  30000C  03                 	db	3
 10883                           
 10884                           ;Config register CONFIG7H @ 0x30000D
 10885                           ;	unspecified, using default values
 10886                           ;	Boot Block Table Read Protection bit
 10887                           ;	EBTRB = 0x1, unprogrammed default
 10888  30000D                     	org	3145741
 10889  30000D  40                 	db	64
 10890                           tosu	equ	0xFFF
 10891                           tosh	equ	0xFFE
 10892                           tosl	equ	0xFFD
 10893                           stkptr	equ	0xFFC
 10894                           pclatu	equ	0xFFB
 10895                           pclath	equ	0xFFA
 10896                           pcl	equ	0xFF9
 10897                           tblptru	equ	0xFF8
 10898                           tblptrh	equ	0xFF7
 10899                           tblptrl	equ	0xFF6
 10900                           tablat	equ	0xFF5
 10901                           prodh	equ	0xFF4
 10902                           prodl	equ	0xFF3
 10903                           indf0	equ	0xFEF
 10904                           postinc0	equ	0xFEE
 10905                           postdec0	equ	0xFED
 10906                           preinc0	equ	0xFEC
 10907                           plusw0	equ	0xFEB
 10908                           fsr0h	equ	0xFEA
 10909                           fsr0l	equ	0xFE9
 10910                           wreg	equ	0xFE8
 10911                           indf1	equ	0xFE7
 10912                           postinc1	equ	0xFE6
 10913                           postdec1	equ	0xFE5
 10914                           preinc1	equ	0xFE4
 10915                           plusw1	equ	0xFE3
 10916                           fsr1h	equ	0xFE2
 10917                           fsr1l	equ	0xFE1
 10918                           bsr	equ	0xFE0
 10919                           indf2	equ	0xFDF
 10920                           postinc2	equ	0xFDE
 10921                           postdec2	equ	0xFDD
 10922                           preinc2	equ	0xFDC
 10923                           plusw2	equ	0xFDB
 10924                           fsr2h	equ	0xFDA
 10925                           fsr2l	equ	0xFD9
 10926                           status	equ	0xFD8

Data Sizes:
    Strings     191
    Constant    72
    Data        4
    BSS         341
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     32     120
    BANK0           128      3      98
    BANK1           256      0     162

Pointer List with Targets:

    compare@b	PTR unsigned char  size(1) Largest target is 8
		 -> passR(BANK0[8]), userR(BANK0[8]), user(COMRAM[8]), 

    compare@a	PTR unsigned char  size(1) Largest target is 8
		 -> passInputROM(BANK0[8]), userInputROM(BANK0[8]), readAux(BANK0[8]), 

    signup@userInput	PTR unsigned char  size(1) Largest target is 8
		 -> user(COMRAM[8]), 

    login@passInput	PTR unsigned char  size(1) Largest target is 8
		 -> pass(BANK0[8]), 

    login@userInput	PTR unsigned char  size(1) Largest target is 8
		 -> user(COMRAM[8]), 

    LcPrintSecondLine@c2	PTR unsigned char  size(2) Largest target is 162
		 -> buffer(BANK1[162]), 

    GetSecondLength@string2	PTR unsigned char  size(2) Largest target is 162
		 -> buffer(BANK1[162]), 

    LcPrintLine@c	PTR unsigned char  size(2) Largest target is 162
		 -> STR_15(CODE[9]), buffer(BANK1[162]), STR_14(CODE[14]), STR_13(CODE[8]), 
		 -> STR_12(CODE[12]), STR_11(CODE[9]), STR_10(CODE[17]), STR_9(CODE[18]), 
		 -> STR_8(CODE[10]), STR_7(CODE[30]), STR_6(CODE[15]), STR_5(CODE[15]), 
		 -> STR_4(CODE[7]), STR_3(CODE[7]), STR_2(CODE[11]), STR_1(CODE[9]), 
		 -> user(COMRAM[8]), 

    GetLength@string	PTR unsigned char  size(2) Largest target is 162
		 -> STR_15(CODE[9]), buffer(BANK1[162]), STR_14(CODE[14]), STR_13(CODE[8]), 
		 -> STR_12(CODE[12]), STR_11(CODE[9]), STR_10(CODE[17]), STR_9(CODE[18]), 
		 -> STR_8(CODE[10]), STR_7(CODE[30]), STR_6(CODE[15]), STR_5(CODE[15]), 
		 -> STR_4(CODE[7]), STR_3(CODE[7]), STR_2(CODE[11]), STR_1(CODE[9]), 
		 -> user(COMRAM[8]), 


Critical Paths under _main in COMRAM

    _main->_motorLogic
    _motorTime->_LcPutChar
    _SPPlay->_TiResetTics
    _EUSendChar->_TiResetTics
    _motorSpeaker->_TiGetTics
    _motorROM->___awdiv
    _motorLogic->_TimModifyTime
    _setLine->_LcGotoXY
    _readScore->___lbdiv
    _readScore->___lbmod
    _TimModifyTime->_LcPutChar
    _TimEnableTime->_TiResetTics
    _LcPrintSecondLine->_LcPutChar
    _LcPrintLine->_LcPutChar
    _LcCursorOn->_WaitForBusy
    _LcCursorOff->_WaitForBusy
    _motorKeyboard->_LcPutChar
    _LoGotKey->_storePass
    _LoGotKey->_storeUser
    _LcPutChar->_LcGotoXY
    _CantaData->_CantaPartAlta
    _CantaData->_CantaPartBaixa
    _LcDelete->_LcGotoXY
    _LoMoveRight->_SiSendChar
    _LoMoveLeft->_SiSendChar
    _LcClear->_LcGotoXY
    _LcGotoXY->_WaitForBusy
    _motorEUSART->_TiGetTics
    _initTimeADT->_TiGetTimer
    _initSpeaker->_TiGetTimer
    _initLogic->_TiGetTimer
    _initKeyboard->_TiGetTimer
    _initEUSART->_TiGetTimer
    _LcInit->_Espera
    _WaitForBusy->_TiGetTics
    _Espera->_TiGetTics
    _CantaIR->_CantaPartAlta
    _CantaIR->_CantaPartBaixa

Critical Paths under _my_interrupts in COMRAM

    _my_interrupts->__TiRSITimer

Critical Paths under _main in BANK0

    _main->_motorLogic

Critical Paths under _my_interrupts in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _my_interrupts in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   62944
                             _LcInit
                        _TiInitTimer
                      _initBluetooth
                         _initEUSART
                         _initJoystk
                       _initKeyboard
                          _initLogic
                            _initROM
                        _initSpeaker
                        _initTimeADT
                        _motorEUSART
                        _motorJoystk
                      _motorKeyboard
                         _motorLogic
                           _motorROM
                       _motorSpeaker
                          _motorTime
 ---------------------------------------------------------------------------------
 (1) _motorTime                                            2     2      0    8535
                                             20 COMRAM     2     2      0
                      _EUIsAvailable
                         _EUSendChar
                           _LcGotoXY
                          _LcPutChar
                          _TiGetTics
                        _TiResetTics
                      _TimUpdateTime
 ---------------------------------------------------------------------------------
 (2) _TimUpdateTime                                        0     0      0    3936
                          _LoEndGame
                        _LoPlaySound
                           _SPOneSec
 ---------------------------------------------------------------------------------
 (3) _SPOneSec                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _LoPlaySound                                          0     0      0      31
                             _SPPlay
 ---------------------------------------------------------------------------------
 (4) _SPPlay                                               0     0      0      31
                        _TiResetTics
 ---------------------------------------------------------------------------------
 (2) _EUSendChar                                           1     1      0      62
                                              6 COMRAM     1     1      0
                        _TiResetTics
 ---------------------------------------------------------------------------------
 (2) _EUIsAvailable                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _motorSpeaker                                         4     4      0      65
                                             12 COMRAM     4     4      0
                          _TiGetTics
 ---------------------------------------------------------------------------------
 (1) _motorROM                                             3     3      0    1910
                                             13 COMRAM     3     3      0
                            ___awdiv
                            ___lbmod
                            _compare
                        _readFromROM
                         _writeToROM
 ---------------------------------------------------------------------------------
 (2) _writeToROM                                           1     1      0      22
                                              5 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4     604
                                              5 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (1) _motorLogic                                           8     8      0   37043
                                             27 COMRAM     5     5      0
                                              0 BANK0      3     3      0
                       _KeDisableSMS
                        _KeEnableSMS
                            _LcClear
                        _LcCursorOff
                         _LcCursorOn
                           _LcGotoXY
                        _LcPrintLine
                  _LcPrintSecondLine
                          _LcPutChar
                          _LoEndGame
                          _SiGetChar
                      _SiHasReceived
                      _SiIsAvailable
                         _SiSendChar
                          _TiGetTics
                        _TiResetTics
                      _TimEnableTime
                      _TimGetEndTime
                      _TimModifyTime
                       _TimResetTime
                            ___lbdiv
                            ___lbmod
                       _anotherScore
                            _compare
                     _doneWritingROM
                            _getFlag
                        _getNumUsers
                              _login
                        _readFromROM
                          _readScore
                           _readUser
                            _setLine
                             _signup
                  _startReadingScore
                   _startReadingUser
                     _startWriteUser
                          _storePass
                         _storeScore
                          _storeUser
 ---------------------------------------------------------------------------------
 (2) _storeScore                                           3     1      2     304
                                              5 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (2) _startWriteUser                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _startReadingUser                                     0     0      0       0
                        _readFromROM
 ---------------------------------------------------------------------------------
 (2) _startReadingScore                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _signup                                               1     0      1     121
                                              5 COMRAM     1     0      1
 ---------------------------------------------------------------------------------
 (2) _setLine                                              0     0      0    2115
                           _LcGotoXY
                        _WaitForBusy
 ---------------------------------------------------------------------------------
 (2) _readUser                                             5     5      0      37
                                              5 COMRAM     5     5      0
                        _readFromROM
 ---------------------------------------------------------------------------------
 (2) _readScore                                            1     1      0    1199
                                              9 COMRAM     1     1      0
                            ___lbdiv
                            ___lbmod
                        _readFromROM
 ---------------------------------------------------------------------------------
 (3) ___lbdiv                                              4     3      1     421
                                              5 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 (2) _login                                                2     0      2     242
                                              5 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _getNumUsers                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _getFlag                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _doneWritingROM                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _compare                                              4     2      2     602
                                              5 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (2) _anotherScore                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TimResetTime                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TimModifyTime                                        7     6      1    2732
                                             20 COMRAM     7     6      1
                          _LcPutChar
 ---------------------------------------------------------------------------------
 (2) _TimGetEndTime                                        6     6      0      93
                                              5 COMRAM     6     6      0
 ---------------------------------------------------------------------------------
 (2) _TimEnableTime                                        0     0      0      31
                        _TiResetTics
 ---------------------------------------------------------------------------------
 (2) _SiHasReceived                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _SiGetChar                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _LoEndGame                                            0     0      0    3905
                            _LcClear
                         _SiSendChar
                     _TimDisableTime
 ---------------------------------------------------------------------------------
 (4) _TimDisableTime                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _LcPrintSecondLine                                    2     0      2    6511
                                             20 COMRAM     2     0      2
                    _GetSecondLength
                           _LcGotoXY
                          _LcPutChar
                          _TiGetTics
                        _TiResetTics
                        _WaitForBusy
                            ___awmod
                            ___lbmod
 ---------------------------------------------------------------------------------
 (3) _GetSecondLength                                      3     1      2     186
                                              5 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (2) _LcPrintLine                                          4     2      2    7982
                                             20 COMRAM     4     2      2
                          _GetLength
                           _LcGotoXY
                          _LcPutChar
                          _TiGetTics
                        _TiResetTics
                        _WaitForBusy
                            ___awmod
                            ___lbmod
 ---------------------------------------------------------------------------------
 (2) ___lbmod                                              4     3      1     682
                                              5 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              6     2      4     793
                                              5 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) _GetLength                                            5     3      2     186
                                              5 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (2) _LcCursorOn                                           0     0      0     440
                            _CantaIR
                        _WaitForBusy
 ---------------------------------------------------------------------------------
 (2) _LcCursorOff                                          0     0      0     440
                            _CantaIR
                        _WaitForBusy
 ---------------------------------------------------------------------------------
 (2) _KeEnableSMS                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _KeDisableSMS                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _motorKeyboard                                        2     2      0    5272
                                             20 COMRAM     2     2      0
                           _LcDelete
                          _LcPutChar
                           _LoGotKey
                          _TiGetTics
                        _TiResetTics
                       _shiftColumns
 ---------------------------------------------------------------------------------
 (2) _shiftColumns                                         3     3      0       0
                                              5 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) _LoGotKey                                             1     1      0     605
                                              7 COMRAM     1     1      0
                          _storePass
                          _storeUser
 ---------------------------------------------------------------------------------
 (2) _storeUser                                            2     1      1     332
                                              5 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (2) _storePass                                            2     1      1     242
                                              5 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (2) _LcPutChar                                            1     1      0    2456
                                             19 COMRAM     1     1      0
                          _CantaData
                           _LcGotoXY
                        _WaitForBusy
 ---------------------------------------------------------------------------------
 (3) _CantaData                                            1     1      0     310
                                              7 COMRAM     1     1      0
                      _CantaPartAlta
                     _CantaPartBaixa
 ---------------------------------------------------------------------------------
 (2) _LcDelete                                             0     0      0    2115
                           _LcGotoXY
                        _WaitForBusy
 ---------------------------------------------------------------------------------
 (1) _motorJoystk                                          2     2      0    7872
                                             19 COMRAM     2     2      0
                         _LoMoveDown
                         _LoMoveLeft
                        _LoMoveRight
                           _LoMoveUp
 ---------------------------------------------------------------------------------
 (2) _LoMoveUp                                             0     0      0    3905
                            _LcClear
                      _SiIsAvailable
                         _SiSendChar
 ---------------------------------------------------------------------------------
 (2) _LoMoveRight                                          0     0      0      31
                      _SiIsAvailable
                         _SiSendChar
 ---------------------------------------------------------------------------------
 (2) _LoMoveLeft                                           0     0      0      31
                      _SiIsAvailable
                         _SiSendChar
 ---------------------------------------------------------------------------------
 (2) _LoMoveDown                                           0     0      0    3905
                            _LcClear
                      _SiIsAvailable
                         _SiSendChar
 ---------------------------------------------------------------------------------
 (4) _SiSendChar                                           1     1      0      31
                                              5 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _SiIsAvailable                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _LcClear                                              0     0      0    3874
                            _CantaIR
                             _Espera
                           _LcGotoXY
                        _WaitForBusy
 ---------------------------------------------------------------------------------
 (5) _LcGotoXY                                             6     5      1    1985
                                             13 COMRAM     6     5      1
                            _CantaIR
                        _WaitForBusy
 ---------------------------------------------------------------------------------
 (1) _motorEUSART                                          3     3      0      96
                                             12 COMRAM     3     3      0
                          _TiGetTics
                        _TiResetTics
 ---------------------------------------------------------------------------------
 (1) _initTimeADT                                          0     0      0       0
                         _TiGetTimer
 ---------------------------------------------------------------------------------
 (1) _initSpeaker                                          0     0      0       0
                         _TiGetTimer
 ---------------------------------------------------------------------------------
 (1) _initROM                                              0     0      0       0
                        _readFromROM
 ---------------------------------------------------------------------------------
 (2) _readFromROM                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initLogic                                            0     0      0       0
                         _TiGetTimer
 ---------------------------------------------------------------------------------
 (1) _initKeyboard                                         0     0      0       0
                         _TiGetTimer
 ---------------------------------------------------------------------------------
 (1) _initJoystk                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initEUSART                                           0     0      0       0
                         _TiGetTimer
 ---------------------------------------------------------------------------------
 (1) _initBluetooth                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _TiInitTimer                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _LcInit                                               3     2      1    2151
                                             17 COMRAM     3     2      1
                            _CantaIR
                 _EscriuPrimeraOrdre
                             _Espera
                         _TiGetTimer
                        _WaitForBusy
 ---------------------------------------------------------------------------------
 (5) _WaitForBusy                                          1     1      0     130
                                             12 COMRAM     1     1      0
                          _TiGetTics
                        _TiResetTics
 ---------------------------------------------------------------------------------
 (2) _TiGetTimer                                           1     1      0       0
                                              5 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (5) _Espera                                               5     1      4    1449
                                             12 COMRAM     5     1      4
                          _TiGetTics
                        _TiResetTics
 ---------------------------------------------------------------------------------
 (5) _TiResetTics                                          1     1      0      31
                                              5 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (6) _TiGetTics                                            7     5      2      65
                                              5 COMRAM     7     5      2
 ---------------------------------------------------------------------------------
 (2) _EscriuPrimeraOrdre                                   2     2      0      60
                                              5 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (6) _CantaIR                                              1     1      0     310
                                              7 COMRAM     1     1      0
                      _CantaPartAlta
                     _CantaPartBaixa
 ---------------------------------------------------------------------------------
 (7) _CantaPartBaixa                                       2     2      0     124
                                              5 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (7) _CantaPartAlta                                        2     2      0     124
                                              5 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _my_interrupts                                        4     4      0       0
                                              1 COMRAM     4     4      0
                        __TiRSITimer
 ---------------------------------------------------------------------------------
 (9) __TiRSITimer                                          1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _LcInit
     _CantaIR
       _CantaPartAlta
       _CantaPartBaixa
     _EscriuPrimeraOrdre
     _Espera
       _TiGetTics
       _TiResetTics
     _TiGetTimer
     _WaitForBusy
       _TiGetTics
       _TiResetTics
   _TiInitTimer
   _initBluetooth
   _initEUSART
     _TiGetTimer
   _initJoystk
   _initKeyboard
     _TiGetTimer
   _initLogic
     _TiGetTimer
   _initROM
     _readFromROM
   _initSpeaker
     _TiGetTimer
   _initTimeADT
     _TiGetTimer
   _motorEUSART
     _TiGetTics
     _TiResetTics
   _motorJoystk
     _LoMoveDown
       _LcClear
         _CantaIR
         _Espera
         _LcGotoXY
           _CantaIR
           _WaitForBusy
         _WaitForBusy
       _SiIsAvailable
       _SiSendChar
     _LoMoveLeft
       _SiIsAvailable
       _SiSendChar
     _LoMoveRight
       _SiIsAvailable
       _SiSendChar
     _LoMoveUp
       _LcClear
       _SiIsAvailable
       _SiSendChar
   _motorKeyboard
     _LcDelete
       _LcGotoXY
       _WaitForBusy
     _LcPutChar
       _CantaData
         _CantaPartAlta
         _CantaPartBaixa
       _LcGotoXY
       _WaitForBusy
     _LoGotKey
       _storePass
       _storeUser
     _TiGetTics
     _TiResetTics
     _shiftColumns
   _motorLogic
     _KeDisableSMS
     _KeEnableSMS
     _LcClear
     _LcCursorOff
       _CantaIR
       _WaitForBusy
     _LcCursorOn
       _CantaIR
       _WaitForBusy
     _LcGotoXY
     _LcPrintLine
       _GetLength
       _LcGotoXY
       _LcPutChar
       _TiGetTics
       _TiResetTics
       _WaitForBusy
       ___awmod
       ___lbmod
     _LcPrintSecondLine
       _GetSecondLength
       _LcGotoXY
       _LcPutChar
       _TiGetTics
       _TiResetTics
       _WaitForBusy
       ___awmod
       ___lbmod
     _LcPutChar
     _LoEndGame
       _LcClear
       _SiSendChar
       _TimDisableTime
     _SiGetChar
     _SiHasReceived
     _SiIsAvailable
     _SiSendChar
     _TiGetTics
     _TiResetTics
     _TimEnableTime
       _TiResetTics
     _TimGetEndTime
     _TimModifyTime
       _LcPutChar
     _TimResetTime
     ___lbdiv
     ___lbmod
     _anotherScore
     _compare
     _doneWritingROM
     _getFlag
     _getNumUsers
     _login
     _readFromROM
     _readScore
       ___lbdiv
       ___lbmod
       _readFromROM
     _readUser
       _readFromROM
     _setLine
       _LcGotoXY
       _WaitForBusy
     _signup
     _startReadingScore
     _startReadingUser
       _readFromROM
     _startWriteUser
     _storePass
     _storeScore
     _storeUser
   _motorROM
     ___awdiv
     ___lbmod
     _compare
     _readFromROM
     _writeToROM
   _motorSpeaker
     _TiGetTics
   _motorTime
     _EUIsAvailable
     _EUSendChar
       _TiResetTics
     _LcGotoXY
     _LcPutChar
     _TiGetTics
     _TiResetTics
     _TimUpdateTime
       _LoEndGame
       _LoPlaySound
         _SPPlay
           _TiResetTics
       _SPOneSec

 _my_interrupts (ROOT)
   __TiRSITimer

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             1FF      0       0       8        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK1           100      0       0       5        0.0%
BANK1              100      0      A2       6       63.3%
BITBANK0            80      0       0       3        0.0%
BANK0               80      3      62       4       76.6%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     20      78       1       95.2%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     17C       7        0.0%
DATA                 0      0     17C       9        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.32 build 20210201212658 
Symbol Table                                                                                   Sat May 21 19:52:40 2022

          TiResetTics@Handle 005A            ?_startReadingUser 0055           ?_startReadingScore 0055  
   TimGetEndTime@endPosition 005F                           PL2 0D82                           PL4 0DA4  
                         PL6 0DC4                           PL8 0DD4                           l81 1A94  
                         l96 188A           ??_startReadingUser 005A                 ___awdiv@sign 005F  
             ?_SiHasReceived 0055                          PL10 08A0                          PL20 08C8  
                        PL12 1288                          PL30 0BA0                          PL22 08D0  
                        PL14 0DE2                          PL40 18BC                          PL32 0F18  
                        PL24 1B68                          PL16 08B6                          PL50 0DE8  
                        PL42 0BBA                          PL34 08DA                          PL26 0EFE  
                        PL18 08BE                          PL60 0904                          PL52 16CE  
                        PL44 1CF6                          PL36 08E2                          PL28 1306  
                        PL70 0920                          PL62 1768                          PL54 1416  
                        PL46 1A3A                          PL38 1320                          PL80 1424  
                        PL72 17FA                          PL64 090E                          PL56 0BCC  
                        PL48 08F4                          PL90 1E78                          PL82 15D0  
                        PL74 1A48                          PL66 1628                          PL58 0BD4  
                        PL92 0BF2                          PL84 1956                          PL76 0BDC  
                        PL68 091A                          PL94 092A                          PL86 0BE6  
                        PL78 156A                          PL96 0BF8                          PL88 0BEC  
                        PL98 0930              ?_doneWritingROM 0055                          l101 0E04  
                        l106 0EFA                          l122 1B44                          l130 1116  
                        l400 0C8A                          l411 0CFA                          l413 0D02  
                        l270 1374                          l255 132C          ??_startReadingScore 005A  
                        l382 0C00                          l386 0C18                          l388 0C20  
                        l920 0438                          l844 0190                          l925 0474  
                        l951 0582                          l847 019E                          l970 0618  
                        l946 052C                          l978 0666                          l995 070C  
                        u500 13F2                          u520 1406                          u460 13C4  
                        u518 13F4                          u480 13DC                          u538 1408  
                        u478 13C6                          u498 13DE                          u984 1B94  
                        u985 1B8E                ??_LoPlaySound 005B                          _aux 0048  
                        _key 0028          __end_of_LcPrintLine 0EFE                          _sms 003D  
                        _row 003C                          _vit 0030                ??_LoMoveRight 005B  
           ??_CantaPartBaixa 005A                 ___awmod@sign 005F                          wreg 000FE8  
      __end_of_TimModifyTime 1628                         PL100 18CE                         PL102 1EB6  
             ??_anotherScore 005A                         l1101 09E8                         l1107 0A22  
                       l1204 1302                         l1116 0A6C                         l1133 0AEA  
                       l1126 0ABC                         l1071 1C28                         l1144 0B3C  
                       l1136 0B0E                         l1146 0B42                         l1093 09AC  
                       l1185 1AE8                         l1097 09CC                         l2086 1E62  
                       l2390 1B80                         l4364 1B4E                         l4372 1B58  
                       l7030 1354                         l7110 0C36                         l7102 0C26  
                       l7040 136A                         l7104 0C28                         l7034 135E  
                       l7114 0C3A                         l7052 1386                         l7044 1370  
                       l7036 1362                         l7028 134E                         l7204 0D58  
                       l7212 0D60                         l4900 149C                         l7054 138A  
                       l7038 1366                         l7206 0D5A                         l7126 0C5E  
                       l8102 0AE0                         l8030 09FE                         l7304 10A8  
                       l7064 1398                         l7160 0CC0                         l6504 1C0C  
                       l8112 0AF8                         l8040 0A14                         l7232 0F86  
                       l6266 19EE                         l7314 10CA                         l7322 10E6  
                       l7170 0CE4                         l7162 0CC4                         l7154 0CAE  
                       l6370 1852                         l6442 14C4                         l8130 0B26  
                       l8050 0A2A                         l8034 0A0E                         l7250 0FC2  
                       l6292 1CCC                         l6364 1B0E                         l6700 16B6  
                       l7340 0050                         l8060 0A4A                         l8036 0A10  
                       l6348 1DDA                         l7244 0FB0                         l7236 0F98  
                       l7228 0F7E                         l6702 16BA                         l6462 1504  
                       l6454 14EE                         l6446 14D0                         l6438 14B8  
                       l6550 0E64                         l6534 0E26                         l6622 11CE  
                       l7502 0238                         l7422 0140                         l7334 0038  
                       l8126 0B1C                         l7262 0FEA                         l7238 0F9C  
                       l6288 1A14                         l6632 19A6                         l7184 0D08  
                       l6448 14D8                         l6608 1180                         l6472 1A60  
                       l7416 012E                         l7408 0112                         l7360 0088  
                       l7344 0064                         l4880 1460                         l8136 0B34  
                       l8072 0A72                         l8064 0A58                         l8144 0B4A  
                       l7256 0FD6                         l4962 1BE4                         l7282 1030  
                       l6298 1A98                         l6642 19BE                         l7194 0D26  
                       l7186 0D0A                         l6378 188C                         l6458 14F8  
                       l6570 0EF4                         l6394 1B46                         l6386 1B24  
                       l7522 026A                         l7506 0246                         l7442 017E  
                       l7346 0068                         l4882 1468                         l4874 1450  
                       l6730 198A                         l7274 1008                         l8170 1706  
                       l7292 1054                         l7196 0D32                         l6484 1A7A  
                       l6476 1A66                         l7700 04B6                         l7620 0394  
                       l7532 028A                         l7428 0150                         l7372 00C0  
                       l7364 009E                         l4892 1486                         l4868 1440  
                       l6732 198E                         l4958 1BDC                         l6662 1922  
                       l6646 19C6                         l7198 0D38                         l6566 0EEA  
                       l6806 18BA                         l7630 03BC                         l7606 0362  
                       l7438 0170                         l7374 00C4                         l7358 0084  
                       l8094 0AC6                         l8086 0A9C                         l6734 1992  
                       l6672 193A                         l6496 1BF6                         l6568 0EF0  
                       l6592 1144                         l6760 1600                         l6488 1A82  
                       l7704 04C4                         l7640 03E6                         l7632 03C2  
                       l7544 02A8                         l7528 027E                         l7464 01B4  
                       l7456 01A2                         l7448 018C                         l4896 1490  
                       l6736 1996                         l6906 1E6E                         l6834 190C  
                       l6842 1916                         l7730 04FC                         l7650 0420  
                       l7626 03A8                         l7562 02DE                         l7538 0292  
                       l7490 020E                         l7474 01E2                         l7378 00CE  
                       l8098 0AD4                         l6676 1940                         l6828 18FE  
                       l6924 12BA                         l6916 12A0                         l7732 0502  
                       l7724 04EA                         l7636 03D0                         l7572 02FE  
                       l7476 01E8                         l7468 01C8                         l7388 00EA  
                       l6870 1822                         l7814 05F2                         l7742 0522  
                       l7590 032E                         l7574 0304                         l7558 02D8  
                       l7486 0206                         l7398 0102                         l6768 1740  
                       l6936 12D6                         l6792 18A4                         l7904 0714  
                       l7808 05EA                         l7760 0556                         l7664 0454  
                       l7584 0322                         l6882 183C                         l6946 12F4  
                       l7922 076E                         l7914 074C                         l7762 055A  
                       l7690 04A0                         l7682 048C                         l7658 0440  
                       l6964 1AE4                         l6956 1AC2                         l7932 0778  
                       l7844 065C                         l7836 0642                         l7828 062E  
                       l7780 058E                         l7772 0578                         l7748 0532  
                       l6982 11FC                         l6798 18B2                         l7790 05B4  
                       l7766 0566                         l7678 047E                         l7598 0346  
                       l7942 0780                         l7950 0938                         l7856 067A  
                       l7784 059C                         l7696 04AE                         l7858 0680  
                       l7778 0588                         l7962 0954                         l7892 06E8  
                       l7884 06CC                         l7868 069C                         l7980 0988  
                       l7878 06B8                         l7798 05D0                         l7974 0976  
                       l7966 0964                         l7992 09AE                         l7994 09B2  
                       STR_1 1FD6                         STR_2 1FB8                         STR_3 1FF7  
                       STR_4 1FF0                         STR_5 1F80                         STR_6 1F8F  
                       STR_7 1F3F                         STR_8 1FC3                         STR_9 1F5D  
                       _LATE 000F8D                         u7200 15C2                         u7140 1580  
                       u7220 151A                         u8100 1620                         u7160 1598  
                       u7240 1532                         u7218 15C4                         u8130 1738  
                       u7180 15AE                         u7260 1548                         u9100 108E  
                       u7158 1582                         u7238 151C                         u8150 1760  
                       u8118 1622                         u8070 15EC                         u7280 155C  
                       u7178 159A                         u7258 1534                         u9130 10BC  
                       u7530 1A6A                         u9140 10DE                         u7380 1878  
                       u8148 173A                         u9220 0074                         u4980 146C  
                       u7198 15B0                         u7278 154A                         u9118 1090  
                       u9070 104A                         u7630 0EA0                         u9230 009A  
                       u9080 1068                         u8600 0C10                         u7800 11AE  
                       u8168 1762                         u8088 15EE                         u7298 155E  
                       u7490 14DC                         u7650 0EAC                         u9170 17AA  
                       u7387 1874                         u8540 1382                         u7660 0EBA  
                       u7580 0E12                         u7820 11C4                         u7740 112E  
                       u9164 178C                         u7637 0E9E                         u9165 1786  
                       u9094 107E                         u8470 133A                         u7590 0E22  
                       u7750 1140                         u8390 12EE                         u9095 107A  
                       u8640 0C4E                         u7680 0EC4                         u7930 192E  
                       u7850 19B2                         u8730 0C82                         u7690 0ED2  
                       u9450 01F4                         u7667 0EB8                         u8900 0D16  
                       u9540 0276                         u9188 17AC                         u7697 0ED0  
                       u8850 0CF2                         u8690 0C74                         u9570 02A4  
                       u8940 0D54                         u9830 04A8                         u9880 04F6  
             ?_SiIsAvailable 0055                         _tSMS 0038                         _aux2 0047  
                       _flag 0078                         _done 0012                         _main 16D8  
                       _pass 00D7                         _note 002B                         fsr1h 000FE2  
                       fsr2h 000FDA                         indf1 000FE7                         indf2 000FDF  
                       fsr1l 000FE1                         fsr2l 000FD9                   _LcCursorOn 1EA0  
                       btemp 0079                         _user 004C    __end_of_startReadingScore 1ED0  
                       prodh 000FF4                         prodl 000FF3              __end_of_LcClear 1C84  
                       start 0032              __end_of_CantaIR 1D1E                 _userInputROM 00B7  
              LcInit@columns 0066           motorKeyboard@state 0036                 ___param_bank 000000  
                _KeEnableSMS 0004                  ?_EUSendChar 0055                 ?_initTimeADT 0055  
               ?_readFromROM 0055                 ?_initSpeaker 0055                  Espera@Timer 0061  
                      ?_main 0055              __end_of___awdiv 14A6              __end_of___lbdiv 1A86  
                      _EEADR 000FA9                        STR_10 1F6F                        STR_11 1FCD  
                      STR_12 1FAC                        STR_13 1FE8                        STR_14 1F9E  
                      STR_15 1FDF              __end_of___awmod 150E              __end_of___lbmod 1C14  
   __size_of_GetSecondLength 002E                ??_TiInitTimer 005A                        u10030 063C  
                      u10060 0654                        u10150 06DE                        u10070 0674  
                      u10240 096E                        _T0CON 000FD5                        u10460 0ADA  
            ___awdiv@divisor 005C                        u10390 0A6A                        i2l206 17F4  
            ___awdiv@counter 005E                        _RCREG 000FAE                        _RCSTA 000FAB  
                      _TMR0H 000FD7                        _TMR0L 000FD6                        _SPBRG 000FAF  
                      _TRISE 000F96                        _TXREG 000FAD                        _TXSTA 000FAC  
            __end_of_getFlag 1EE8                        _Timer 000F              __end_of_compare 1AEC  
      __end_of_TimUpdateTime 199C        __size_of_KeDisableSMS 0002                        _flag2 0077  
     __size_of_initBluetooth 0014              __end_of_initROM 1C3A                        _tTime 0035  
                      _index 002E                        _empty 0013                        _passR 00BF  
                      _table 1EF7                        _login 18D4                        _score 0023  
                      _shift 0045                        _times 003E          __end_of_LoPlaySound 1EA0  
                _LcCursorOff 1EAA                        _state 003F                        _userR 00C7  
                      _users 001D              __end_of_setLine 1E3E          __end_of_LoMoveRight 1D68  
                      tablat 000FF5                   _LoMoveLeft 1D68                   _LoMoveDown 1918  
              ??_TiResetTics 005A             __end_of_LcDelete 1E22                        ttemp5 007A  
                      ttemp6 007D                        ttemp7 0081             __end_of_SPOneSec 1E66  
                      status 000FD8                        wtemp8 007A              ___lbdiv@divisor 005A  
               __end_ofPL100 18D4             __end_of_LcGotoXY 1ABA                 __end_ofPL102 1EBC  
            ___lbdiv@counter 005C               login@passInput 005B                ??__TiRSITimer 0055  
       storeScore@userLetter 005A                   _TiGetTimer 1B4A      EscriuPrimeraOrdre@ordre 005B  
          storeScore@scoreIn 005C              __initialization 1634             __end_of_LoGotKey 16CE  
         __size_of_CantaData 0020                 __end_of_main 1726             __end_of_LoMoveUp 19DC  
         motorLogic@aux_1500 00E1              ??_SiHasReceived 005A                ?_initKeyboard 0055  
                _LcPrintLine 0DF2                   _SiSendChar 1EBC                 _KeDisableSMS 1EB4  
                     ??_main 0075           __size_of_LcPutChar 0030           __size_of_GetLength 0046  
              __activetblptr 000002           __size_of_LoEndGame 001A               login@userInput 005A  
                     _ADCON0 000FC2                       _ADCON1 000FC1                       _ADCON2 000FC0  
        __end_of_TiInitTimer 1BEE                       _ADRESH 000FC4                       ?_login 005A  
                     _EEDATA 000FA8                       _EECON2 000FA7             ___awdiv@dividend 005A  
            ??_SiIsAvailable 005A           __size_of_SiGetChar 0004         __size_of_getNumUsers 000C  
                  ??_LcClear 0068          __size_of_EUSendChar 000E                    ??_CantaIR 005C  
                     i2l4982 17DA                       i2l4986 17F0                       i2l4978 17D2  
             LcGotoXY@Fisics 0063               LcGotoXY@Column 0067                ??_WaitForBusy 0061  
         __size_of_TiGetTics 0026               _startWriteUser 1EC4                  ?_LcCursorOn 0055  
 __size_of_startReadingScore 0006                       _SPPlay 1DCE                       _LcInit 11D4  
               ?_motorEUSART 0055                       _Espera 1CC6                 _LcGotoXY$248 0065  
                     _RowAct 004A          __end_of_TiResetTics 1CF6                _initBluetooth 1DBA  
                     _h_Tics 0009                    ??___awdiv 005E                    ??___lbdiv 005B  
             ??_initKeyboard 005B                    ??___awmod 005E                    ??___lbmod 005B  
       __end_of_anotherScore 1E78                       _tLogic 002A                       _buffer 0100  
                     _column 0054          __end_of__TiRSITimer 17FA                 ?_motorJoystk 0055  
                     _length 0044             __end_of_readUser 1306        storePass@positionPass 005A  
                     clear_0 165A                       clear_1 1666                       clear_2 1672  
           ___awdiv@quotient 0060                       _shift2 0042              ___awmod@divisor 005C  
                  ??_getFlag 005A                       isa$std 000001                       _signup 1890  
            ___awmod@counter 005E                       _status 0033  __size_of_EscriuPrimeraOrdre 0064  
                  ??_compare 005C                    ??_initROM 005A                 __pdataCOMRAM 0075  
     __size_of_CantaPartAlta 005C             __end_of_motorROM 0BA0             ??_TimDisableTime 005A  
                _LoPlaySound 1E96                    ??_setLine 0068                  _LoMoveRight 1D52  
               __mediumconst 1EF6                       tblptrh 000FF7                       tblptrl 000FF6  
                     tblptru 000FF8            ??_GetSecondLength 005C            __end_of_CantaData 1A3A  
           ___lbdiv@dividend 005B       __end_of_startWriteUser 1ECA                  ?_LoMoveLeft 0055  
                ?_LoMoveDown 0055              ___lbmod@divisor 005A                   __accesstop 0080  
    __end_of__initialization 1678              ___lbmod@counter 005C            __end_of_LcPutChar 1B1C  
          __end_of_GetLength 1890                ___rparam_used 000001            __end_of_LoEndGame 1D52  
     __size_of_EUIsAvailable 0004                  ?_TiGetTimer 0055               ?_initBluetooth 0055  
             __pcstackCOMRAM 0055          __end_of_WaitForBusy 1A1A            _LcPrintSecondLine 1104  
           ??_doneWritingROM 005A            SiSendChar@my_byte 005A                __end_of_table 1F3F  
              __end_of_login 1918                  ?_SiSendChar 0055           ?_LcPrintSecondLine 0069  
          __end_of_SiGetChar 1EF0                   __end_ofPL2 0DA4                   __end_ofPL4 0DC4  
                 __end_ofPL6 0DD4                   __end_ofPL8 0DE2             ___lbdiv@quotient 005D  
       __size_of_initTimeADT 000C            __end_of_TiGetTics 1C60         __size_of_readFromROM 000E  
          _state@Logic$F1441 0027         __size_of_initSpeaker 000E                  _TiInitTimer 1BC6  
                  ?_LcDelete 0055                    ?_SPOneSec 0055          __size_of_LcCursorOn 000A  
        ??_LcPrintSecondLine 006B              LoGotKey@pressed 005C                    ?_LcGotoXY 0062  
              ?_TimResetTime 0055    __size_of_startReadingUser 0012        __end_of_motorKeyboard 0D82  
      __end_of_my_interrupts 0032                      ??_login 005C                    ?_LoGotKey 0055  
     __size_of_TimGetEndTime 0042                   __pbssBANK0 0080                   __pbssBANK1 0100  
                  ?_LoMoveUp 0055              ?_startWriteUser 0055                  _TiResetTics 1CE6  
         __size_of_initLogic 0014       __size_of_TimEnableTime 001A           _state@EEPROM$F1577 0019  
                    ?_SPPlay 0055           __size_of_readScore 0046                      ?_LcInit 0066  
              _CantaPartAlta 1574    __end_of_LcPrintSecondLine 11D4                      ?_Espera 0061  
                __TiRSITimer 17BC                 ?_KeEnableSMS 0055                 ??_EUSendChar 005B  
                    ?_signup 005A          __size_of_LoMoveLeft 0016          __size_of_LoMoveDown 003E  
         __size_of_motorTime 010A                   ??_LcDelete 0068                   ??_SPOneSec 005A  
                    LcInit@i 0068                _EUIsAvailable 1EE0               ??_TimResetTime 005A  
                 ??_LcGotoXY 0063          __size_of_TiGetTimer 001E        _position@EEPROM$F1576 001A  
              ?_shiftColumns 0055                   ??_LoGotKey 005C                 ?_LcCursorOff 0055  
       __end_of_initKeyboard 1BC6                   ??_LoMoveUp 0068                      _LcClear 1C60  
                    _CantaIR 1D02          __size_of_SiSendChar 0008           __end_of_EUSendChar 1E30  
         __size_of_storePass 0010           __size_of_storeUser 0010                  _WaitForBusy 19DC  
                  ?_readUser 0055                   _initEUSART 1DA6               ?_CantaPartAlta 0055  
                    _Columns 004B              ??_initBluetooth 005A              __size_of_SPPlay 0012  
            __size_of_LcInit 00B4        __size_of_anotherScore 0006                      __Hparam 0000  
            __size_of_Espera 0020                      __Lparam 0000                    ?_motorROM 0055  
       __size_of_motorEUSART 00D6                      _tEUSART 002F                   _initJoystk 1D92  
                    ___awdiv 142E                      ___lbdiv 1A52                      ___awmod 14A6  
                    ___lbmod 1BEE       __size_of_TimModifyTime 004E                _TimGetEndTime 1726  
               ?_LcPrintLine 0069                      _address 001E                 readScore@aux 005E  
                    __pcinit 1634                      __ramtop 0200                      _getFlag 1EE4  
                    _endTime 00AB                      __ptext0 16D8                      __ptext1 0F24  
                    __ptext2 195C                      __ptext3 1E5A                      __ptext4 1E96  
                    __ptext5 1DCE                      __ptext6 1E22                      __ptext7 1EE0  
                    __ptext8 1772                      __ptext9 0936              __size_of_signup 002C  
              _TimEnableTime 1D1E                      _compare 1ABA                    _T0CONbits 000FD5  
       __size_of_motorJoystk 0088                      _curMins 0005                      _curSecs 0007  
          __end_of_initLogic 1D92                    CantaIR@IR 005C                      _initROM 1C14  
             ?_EUIsAvailable 0055                      _counter 0040                      _length2 0041  
                    _readAux 00CF            __end_of_readScore 184A                ?_motorSpeaker 0055  
                    _menuPos 0024             ___awmod@dividend 005A                      _setLine 1E30  
             ??_shiftColumns 005A                      _pointer 0046          LcPrintSecondLine@c2 0069  
            WaitForBusy@Busy 0061         end_of_initialization 1678                      _writing 0025  
               _anotherScore 1E72      __size_of_CantaPartBaixa 005C                __Lmediumconst 1EF6  
            TiGetTics@Handle 005E                   ??_readUser 005A         TimModifyTime@newTime 006F  
       GetSecondLength@aux_x 005C                 ??_LcCursorOn 0062                  motorLogic@x 00E0  
      storeUser@positionUser 005A            __end_of_motorTime 102E                 _bufferSelect 001F  
 __size_of_LcPrintSecondLine 00D0            _flag@EUSART$F1265 0032                   ??_motorROM 0062  
            TiGetTics@actual 005F                      postdec1 000FE5                      postdec2 000FDD  
             ?_TimGetEndTime 0055                   _motorLogic 0036                      postinc0 000FEE  
                    postinc1 000FE6                      postinc2 000FDE       __size_of_TimUpdateTime 0040  
            signup@userInput 005A               ?_TimEnableTime 0055              _GetSecondLength 1B1C  
      __end_of_SiHasReceived 1ED6               storePass@value 005B            __end_of_storePass 1E12  
                  _PORTBbits 000F81                    _PORTDbits 000F83            __end_of_storeUser 1E02  
                 _printScore 0001               ??_motorSpeaker 0061                 ?_LoPlaySound 0055  
         __end_of_LcCursorOn 1EAA                 ?_LoMoveRight 0055             ___lbmod@dividend 005B  
                  _TRISAbits 000F92                    _TRISBbits 000F93                    _TRISCbits 000F94  
                  _TRISDbits 000F95             _startReadingUser 1DE0                ??_getNumUsers 005A  
              _TimModifyTime 15DA                 ??_LoMoveLeft 005B                 ??_LoMoveDown 0068  
            ??_CantaPartAlta 005A        __end_of_SiIsAvailable 1EDC                  ___lbmod@rem 005D  
                  _CantaData 1A1A                  ?_initEUSART 0055                    _TXSTAbits 000FAC  
             __end_of_SPPlay 1DE0                 ??_TiGetTimer 005A                   _storeScore 1CA6  
             __end_of_LcInit 1288         __end_of_TimResetTime 1E8A                    _LcPutChar 1AEC  
             __end_of_Espera 1CE6                    _GetLength 184A                  ?_initJoystk 0055  
                  _LoEndGame 1D38                 ??_SiSendChar 005A                   _writeToROM 1C84  
 __end_of_EscriuPrimeraOrdre 1416                  _BAUDCONbits 000FB8         __size_of_KeEnableSMS 0004  
              __pidataCOMRAM 1EDC              ??_EUIsAvailable 005A                    _ColumnAct 0049  
         __end_of_LoMoveLeft 1D7E           __end_of_LoMoveDown 1956                 ?_TiInitTimer 0055  
             __end_of_signup 18BC                    _SiGetChar 1EEC           _state@EUSART$F1266 0031  
                __end_ofPL10 08B6                  __end_ofPL20 08D0                  __end_ofPL12 1294  
                __end_ofPL30 0BBA                  __end_ofPL22 08DA                  __end_ofPL14 0DE8  
                __end_ofPL40 18CE                  __end_ofPL32 0F24                  __end_ofPL24 1B76  
                __end_ofPL16 08BE                  __end_ofPL50 0DF2                  __end_ofPL42 0BCC  
                __end_ofPL34 08E2                  __end_ofPL26 0F18                  __end_ofPL18 08C8  
                __end_ofPL60 090E                  __end_ofPL52 16D8                  __end_ofPL44 1D02  
                __end_ofPL36 08F4                  __end_ofPL28 1320                  __end_ofPL70 092A  
                __end_ofPL62 1772                  __end_ofPL54 1424                  __end_ofPL46 1A48  
                __end_ofPL38 132A                  __end_ofPL80 142E                  __end_ofPL72 1804  
                __end_ofPL64 091A                  __end_ofPL56 0BD4                  __end_ofPL48 0904  
                __end_ofPL90 1E7E                  __end_ofPL82 15DA                  __end_ofPL74 1A52  
                __end_ofPL66 1634                  __end_ofPL58 0BDC                  __end_ofPL92 0BF8  
                __end_ofPL84 195C                  __end_ofPL76 0BE6                  __end_ofPL68 0920  
                __end_ofPL94 0930                  __end_ofPL86 0BEC                  __end_ofPL78 1574  
                __end_ofPL96 0BFE                  __end_ofPL88 0BF2                  __end_ofPL98 0936  
        start_initialization 1634        __size_of_initKeyboard 0028             ??_startWriteUser 005A  
                  _TiGetTics 1C3A            __size_of_LcDelete 0010            __size_of_SPOneSec 000C  
             ?_TimModifyTime 0069            __size_of_LcGotoXY 0034               storeUser@value 005B  
              _TimUpdateTime 195C           __end_of_TiGetTimer 1B68            __size_of_LoGotKey 0048  
               ?_TiResetTics 0055         __size_of_LcCursorOff 000A                   ?_CantaData 0055  
         __end_of_SiSendChar 1EC4          __end_of_getNumUsers 1E72            __size_of_LoMoveUp 0040  
                   ??_SPPlay 005B                     ??_LcInit 0067                 ?__TiRSITimer 0055  
                   ??_Espera 0065              ??_TimGetEndTime 005A            _newestUserAddress 0011  
    __end_of_GetSecondLength 1B4A                   ?_LcPutChar 0055            _pass@EEPROM$F1571 009B  
                 ?_GetLength 005A         __end_of_shiftColumns 1B9E                  ?_motorLogic 0055  
                 ?_LoEndGame 0055                ??_initTimeADT 005B              ??_TimEnableTime 005B  
              ??_readFromROM 005A                ??_initSpeaker 005B                 _initKeyboard 1B9E  
                   ??_signup 005B         __size_of_LcPrintLine 010C          __size_of_initEUSART 0014  
                 ?_SiGetChar 0055                  __pbssCOMRAM 0001                __pcstackBANK0 00DF  
                 ?_TiGetTics 005A               ?_TimUpdateTime 0055          __size_of_initJoystk 0014  
                   ?_LcClear 0055                     ?_CantaIR 0055               _CantaPartBaixa 150E  
    __size_of_TimDisableTime 0004                 ?_WaitForBusy 0055                    _tDebounce 0039  
                  _checkUser 0018               EUSendChar@data 005B         __end_of_motorSpeaker 17BC  
                _gameStarted 0029            __size_of_readUser 0072                  ?_storeScore 005A  
                  __pintcode 0008                __pmediumconst 1EF6                     ?___awdiv 005A  
                   ?___lbdiv 005A       __size_of_motorKeyboard 0184                     ?___awmod 005A  
                   ?___lbmod 005A            __size_of_motorROM 026A                  ?_writeToROM 0055  
                _flagReading 0017       __size_of_my_interrupts 002A              CantaPartBaixa@c 005B  
                  _tMarquee2 000B                ?_KeDisableSMS 0055                     ?_getFlag 0055  
                   ?_compare 005A                     ?_initROM 0055          __end_of_initTimeADT 1E96  
        __end_of_readFromROM 1E5A              ??_TimModifyTime 006A      __size_of_doneWritingROM 0004  
        __end_of_initSpeaker 1E4C                     ?_setLine 0055                    _initLogic 1D7E  
       __size_of_LoPlaySound 000A                  _getNumUsers 1E66                    _readScore 1804  
       __size_of_LoMoveRight 0016       __end_of_CantaPartBaixa 156A               __size_of_login 0044  
        __size_of_motorLogic 086A                 LcPrintLine@c 0069                 _passInputROM 00AF  
                ??_CantaData 005C        __size_of_TimResetTime 000C                     _LATAbits 000F89  
                   _LATCbits 000F8B                    _sendIndex 0034                     _LATDbits 000F8C  
            GetLength@string 005A                    _saveScore 001B                ??_motorEUSART 0061  
                  _scoreFlag 0021        __end_of_initBluetooth 1DCE                     _PIR1bits 000F9E  
   __end_of_startReadingUser 1DF2                  ??_LcPutChar 0068             ?_GetSecondLength 005A  
                ??_GetLength 005C                     _RCONbits 000FD0                    _motorTime 0F24  
           _flag@Logic$F1451 0022                  ??_LoEndGame 0068                    _numerical 0037  
              ??_motorJoystk 0068               ??_KeDisableSMS 005A                   _ADCON0bits 000FC2  
                  _startUser 001C                    _userIndex 0020                     _LcDelete 1E12  
                ??_SiGetChar 005A                storeScore@pos 005B                     _SPOneSec 1E5A  
                   Espera@ms 0063              ??_TimUpdateTime 0068                     _LcGotoXY 1A86  
                  _storePass 1E02                  ??_TiGetTics 005C                    _storeUser 1DF2  
       __size_of_TiInitTimer 0028                 _TimResetTime 1E7E          __size_of_storeScore 0020  
                 ?_initLogic 0055               readUser@toRead 005E                   ?_readScore 0055  
              _motorKeyboard 0BFE                  LcGotoXY@Row 0062                     _LoGotKey 1686  
                  copy_data0 1648              ?_CantaPartBaixa 0055                _my_interrupts 0008  
                   _LoMoveUp 199C          __size_of_writeToROM 0022             __size_of_LcClear 0024  
           __size_of_CantaIR 001C                 ??_initEUSART 005B        __size_of_shiftColumns 0028  
                 _EECON1bits 000FA6         __size_of_TiResetTics 0010                     __Hrparam 0000  
                   __Lrparam 0000                   ?_motorTime 0055         __size_of__TiRSITimer 003E  
               ??_initJoystk 005A          __end_of_motorEUSART 1104                  _initTimeADT 1E8A  
           __size_of___awdiv 0078             __size_of___lbdiv 0034                  _readFromROM 1E4C  
           __size_of___awmod 0068             __size_of___lbmod 0026                  _initSpeaker 1E3E  
              motorLogic@aux 00DF             __size_of_getFlag 0004             __size_of_compare 0032  
         __end_of_initEUSART 1DBA          __end_of_motorJoystk 13B2             __size_of_initROM 0026  
     GetSecondLength@string2 005A                   ?_storePass 005A                   ?_storeUser 005A  
           __size_of_setLine 000E               ?_motorKeyboard 0055                     __ptext10 1C84  
                   __ptext11 142E           _EscriuPrimeraOrdre 13B2                     __ptext20 1804  
                   __ptext12 0036                     __ptext21 1A52                     __ptext13 1CA6  
                   __ptext30 1726                     __ptext22 18D4                     __ptext14 1EC4  
                   __ptext31 1D1E                     __ptext23 1E66                     __ptext15 1DE0  
                   __ptext40 14A6                     __ptext32 1ED0                     __ptext24 1EE4  
                   __ptext16 1ECA                     __ptext41 184A                     __ptext33 1EEC  
                   __ptext25 1EE8                     __ptext17 1890                     __ptext50 1E02  
                   __ptext42 1EA0                     __ptext34 1D38                     __ptext26 1ABA  
                   __ptext18 1E30                     __ptext51 1AEC                     __ptext43 1EAA  
                   __ptext35 1EF0                     __ptext27 1E72                     __ptext19 1294  
                   __ptext60 1ED6                     __ptext52 1A1A                     __ptext44 0004  
                   __ptext36 1104                     __ptext28 1E7E                     __ptext61 1C60  
                   __ptext53 1E12                     __ptext45 1EB4                     __ptext37 1B1C  
                   __ptext29 15DA                     __ptext70 1D92                     __ptext62 1A86  
                   __ptext54 132A                     __ptext46 0BFE                     __ptext38 0DF2  
                   __ptext71 1DA6                     __ptext63 102E                     __ptext55 199C  
                   __ptext47 1B76                     __ptext39 1BEE                     __ptext80 13B2  
                   __ptext72 1DBA                     __ptext64 1E8A                     __ptext56 1D52  
                   __ptext48 1686                     __ptext81 1D02                     __ptext73 1BC6  
                   __ptext65 1E3E                     __ptext57 1D68                     __ptext49 1DF2  
                   __ptext82 150E                     __ptext74 11D4                     __ptext66 1C14  
                   __ptext58 1918                     __ptext83 1574                     __ptext75 19DC  
                   __ptext67 1E4C                     __ptext59 1EBC                     __ptext76 1B4A  
                   __ptext68 1D7E                     __ptext85 17BC                     __ptext77 1CC6  
                   __ptext69 1B9E                     __ptext78 1CE6                     __ptext79 1C3A  
                   _tMarquee 000D                 _shiftColumns 1B76               ?_my_interrupts 0055  
             CantaPartAlta@c 005B            _user@EEPROM$F1570 00A3        __size_of_motorSpeaker 004A  
                   _s_Timers 0080           __end_of_initJoystk 1DA6                     _tSpeaker 002C  
             _TimDisableTime 1EF0                     _initMins 0075                     _initSecs 0003  
        ?_EscriuPrimeraOrdre 0055                __size_of_main 004E                     _readUser 1294  
      __end_of_CantaPartAlta 15D0       __size_of_SiHasReceived 0006                CantaData@Data 005C  
             GetLength@aux_x 005E         __size_of_WaitForBusy 003E                     _scoreAux 0014  
                   _motorROM 0936                     _pointer2 0043                     isa$xinst 000000  
              ??_KeEnableSMS 005A                 ??_motorLogic 0070                     _prev_row 003B  
                   int$flags 0079                     _position 0026              writeToROM@value 005A  
                   compare@a 005A                     compare@b 005B         ??_EscriuPrimeraOrdre 005A  
                 LcInit@rows 0067       __size_of_SiIsAvailable 0006        __end_of_EUIsAvailable 1EE4  
       _pointer@EEPROM$F1581 0016                   _INTCONbits 000FF2               _doneWritingROM 1EE8  
               _motorSpeaker 1772                  ??_initLogic 005B                  ??_readScore 005E  
       _status@Speaker$F1330 002D                ??_LcCursorOff 0062       __end_of_TimDisableTime 1EF4  
                   intlevel2 0000           __end_of_motorLogic 08A0         __end_of_KeDisableSMS 1EB6  
                 LcPutChar@c 0068        TimModifyTime@position 0069                  _motorEUSART 102E  
               ??_storeScore 005C                  ??_motorTime 0069        __end_of_TimGetEndTime 1768  
                 _EUSendChar 1E22                ??_LcPrintLine 006B                 ??_writeToROM 005A  
                _motorJoystk 132A           _score@EEPROM$F1582 0015        __end_of_TimEnableTime 1D38  
     __end_of_doneWritingROM 1EEC                _SiHasReceived 1ED0          __end_of_KeEnableSMS 0008  
            ??_motorKeyboard 0069                  ??_storePass 005B                  _prev_column 003A  
                ??_storeUser 005B              ??_my_interrupts 0056                 ?_getNumUsers 0055  
         __end_of_storeScore 1CC6              ?_TimDisableTime 0055                ?_anotherScore 0055  
         __end_of_writeToROM 1CA6                _SiIsAvailable 1ED6      __size_of_startWriteUser 0006  
        __end_of_LcCursorOff 1EB4            _startReadingScore 1ECA  
