

Microchip MPLAB XC8 Assembler V2.36 build 20220127204148 
                                                                                               Sat Jul 02 05:32:23 2022

Microchip MPLAB XC8 C Compiler v2.36 (Pro license) build 20220127204148 Og9s 
     1                           	processor	18F4321
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	plic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    14                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    15                           	psect	text0,global,reloc=2,class=CODE,delta=1
    16                           	psect	text1,global,reloc=2,class=CODE,delta=1
    17                           	psect	text2,global,reloc=2,class=CODE,delta=1
    18                           	psect	text3,global,reloc=2,class=CODE,delta=1
    19                           	psect	text4,global,reloc=2,class=CODE,delta=1
    20                           	psect	text5,global,reloc=2,class=CODE,delta=1
    21                           	psect	text6,global,reloc=2,class=CODE,delta=1
    22                           	psect	text7,global,reloc=2,class=CODE,delta=1
    23                           	psect	text8,global,reloc=2,class=CODE,delta=1
    24                           	psect	text9,global,reloc=2,class=CODE,delta=1
    25                           	psect	text10,global,reloc=2,class=CODE,delta=1
    26                           	psect	text11,global,reloc=2,class=CODE,delta=1
    27                           	psect	text12,global,reloc=2,class=CODE,delta=1
    28                           	psect	text13,global,reloc=2,class=CODE,delta=1
    29                           	psect	text14,global,reloc=2,class=CODE,delta=1
    30                           	psect	text15,global,reloc=2,class=CODE,delta=1
    31                           	psect	text16,global,reloc=2,class=CODE,delta=1
    32                           	psect	text17,global,reloc=2,class=CODE,delta=1
    33                           	psect	text18,global,reloc=2,class=CODE,delta=1
    34                           	psect	text19,global,reloc=2,class=CODE,delta=1
    35                           	psect	text20,global,reloc=2,class=CODE,delta=1
    36                           	psect	text21,global,reloc=2,class=CODE,delta=1
    37                           	psect	text22,global,reloc=2,class=CODE,delta=1
    38                           	psect	text23,global,reloc=2,class=CODE,delta=1
    39                           	psect	text24,global,reloc=2,class=CODE,delta=1
    40                           	psect	text25,global,reloc=2,class=CODE,delta=1
    41                           	psect	text26,global,reloc=2,class=CODE,delta=1
    42                           	psect	text27,global,reloc=2,class=CODE,delta=1
    43                           	psect	text28,global,reloc=2,class=CODE,delta=1
    44                           	psect	text29,global,reloc=2,class=CODE,delta=1
    45                           	psect	text30,global,reloc=2,class=CODE,delta=1
    46                           	psect	text31,global,reloc=2,class=CODE,delta=1
    47                           	psect	text32,global,reloc=2,class=CODE,delta=1
    48                           	psect	text33,global,reloc=2,class=CODE,delta=1
    49                           	psect	text34,global,reloc=2,class=CODE,delta=1
    50                           	psect	text35,global,reloc=2,class=CODE,delta=1
    51                           	psect	text36,global,reloc=2,class=CODE,delta=1
    52                           	psect	text37,global,reloc=2,class=CODE,delta=1
    53                           	psect	text38,global,reloc=2,class=CODE,delta=1
    54                           	psect	text39,global,reloc=2,class=CODE,delta=1
    55                           	psect	text40,global,reloc=2,class=CODE,delta=1
    56                           	psect	text41,global,reloc=2,class=CODE,delta=1
    57                           	psect	text42,global,reloc=2,class=CODE,delta=1
    58                           	psect	text43,global,reloc=2,class=CODE,delta=1
    59                           	psect	text44,global,reloc=2,class=CODE,delta=1
    60                           	psect	text45,global,reloc=2,class=CODE,delta=1
    61                           	psect	text46,global,reloc=2,class=CODE,delta=1
    62                           	psect	text47,global,reloc=2,class=CODE,delta=1
    63                           	psect	text48,global,reloc=2,class=CODE,delta=1
    64                           	psect	text49,global,reloc=2,class=CODE,delta=1
    65                           	psect	text50,global,reloc=2,class=CODE,delta=1
    66                           	psect	text51,global,reloc=2,class=CODE,delta=1
    67                           	psect	text52,global,reloc=2,class=CODE,delta=1
    68                           	psect	text53,global,reloc=2,class=CODE,delta=1
    69                           	psect	text54,global,reloc=2,class=CODE,delta=1
    70                           	psect	text55,global,reloc=2,class=CODE,delta=1
    71                           	psect	text56,global,reloc=2,class=CODE,delta=1
    72                           	psect	text57,global,reloc=2,class=CODE,delta=1
    73                           	psect	text58,global,reloc=2,class=CODE,delta=1
    74                           	psect	text59,global,reloc=2,class=CODE,delta=1
    75                           	psect	text60,global,reloc=2,class=CODE,delta=1,group=1
    76                           	psect	text61,global,reloc=2,class=CODE,delta=1,group=1
    77                           	psect	text62,global,reloc=2,class=CODE,delta=1
    78                           	psect	text63,global,reloc=2,class=CODE,delta=1
    79                           	psect	text64,global,reloc=2,class=CODE,delta=1
    80                           	psect	text65,global,reloc=2,class=CODE,delta=1
    81                           	psect	text66,global,reloc=2,class=CODE,delta=1
    82                           	psect	text67,global,reloc=2,class=CODE,delta=1
    83                           	psect	text68,global,reloc=2,class=CODE,delta=1
    84                           	psect	text69,global,reloc=2,class=CODE,delta=1,group=1
    85                           	psect	text70,global,reloc=2,class=CODE,delta=1
    86                           	psect	text71,global,reloc=2,class=CODE,delta=1
    87                           	psect	text72,global,reloc=2,class=CODE,delta=1
    88                           	psect	text73,global,reloc=2,class=CODE,delta=1
    89                           	psect	text74,global,reloc=2,class=CODE,delta=1
    90                           	psect	text75,global,reloc=2,class=CODE,delta=1
    91                           	psect	text76,global,reloc=2,class=CODE,delta=1
    92                           	psect	text77,global,reloc=2,class=CODE,delta=1
    93                           	psect	text78,global,reloc=2,class=CODE,delta=1
    94                           	psect	text79,global,reloc=2,class=CODE,delta=1
    95                           	psect	text80,global,reloc=2,class=CODE,delta=1
    96                           	psect	text81,global,reloc=2,class=CODE,delta=1
    97                           	psect	text82,global,reloc=2,class=CODE,delta=1
    98                           	psect	text83,global,reloc=2,class=CODE,delta=1
    99                           	psect	text84,global,reloc=2,class=CODE,delta=1
   100                           	psect	intcode,global,reloc=2,class=CODE,delta=1
   101                           	psect	text86,global,reloc=2,class=CODE,delta=1
   102                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
   103                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   104                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   105                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
   106                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
   107                           	psect	pa_nodes0,global,class=CODE,delta=1
   108  0000                     
   109                           ; Version 2.36
   110                           ; Generated 28/01/2022 GMT
   111                           ; 
   112                           ; Copyright Â© 2022, Microchip Technology Inc. and its subsidiaries ("Microchip")
   113                           ; All rights reserved.
   114                           ; 
   115                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   116                           ; 
   117                           ; Redistribution and use in source and binary forms, with or without modification, are
   118                           ; permitted provided that the following conditions are met:
   119                           ; 
   120                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   121                           ;        conditions and the following disclaimer.
   122                           ; 
   123                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   124                           ;        of conditions and the following disclaimer in the documentation and/or other
   125                           ;        materials provided with the distribution. Publication is not required when
   126                           ;        this file is used in an embedded application.
   127                           ; 
   128                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   129                           ;        software without specific prior written permission.
   130                           ; 
   131                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   132                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   133                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   134                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   135                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   136                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   137                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   138                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   139                           ; 
   140                           ; 
   141                           ; Code-generator required, PIC18F4321 Definitions
   142                           ; 
   143                           ; SFR Addresses
   144  0000                     
   145                           	psect	idataCOMRAM
   146  00005E                     __pidataCOMRAM:
   147                           	callstack 0
   148                           
   149                           ;initializer for _ERROR
   150  00005E  45                 	db	69
   151  00005F  52                 	db	82
   152  000060  52                 	db	82
   153  000061  4F                 	db	79
   154  000062  52                 	db	82
   155  000063  53                 	db	83
   156  000064  3A                 	db	58
   157  000065  20                 	db	32
   158  000066  00                 	db	0
   159                           
   160                           ;initializer for _MAINMENUSIZE
   161  000067  0E                 	db	14
   162  000068  0E                 	db	14
   163  000069  1C                 	db	28
   164  00006A  09                 	db	9
   165  00006B  0C                 	db	12
   166                           
   167                           ;initializer for _minute
   168  00006C  1E                 	db	30
   169                           
   170                           ;initializer for _minutes
   171  00006D  1E                 	db	30
   172                           
   173                           	psect	idataBANK0
   174  0018AA                     __pidataBANK0:
   175                           	callstack 0
   176                           
   177                           ;initializer for _RESULTS
   178  0018AA  54                 	db	84
   179  0018AB  49                 	db	73
   180  0018AC  4D                 	db	77
   181  0018AD  45                 	db	69
   182  0018AE  20                 	db	32
   183  0018AF  4C                 	db	76
   184  0018B0  45                 	db	69
   185  0018B1  46                 	db	70
   186  0018B2  54                 	db	84
   187  0018B3  3A                 	db	58
   188  0018B4  00                 	db	0
   189  0018B5  53                 	db	83
   190  0018B6  43                 	db	67
   191  0018B7  4F                 	db	79
   192  0018B8  52                 	db	82
   193  0018B9  45                 	db	69
   194  0018BA  3A                 	db	58
   195  0018BB  00                 	db	0
   196  0018BC  00                 	db	0
   197  0018BD  00                 	db	0
   198  0018BE  00                 	db	0
   199  0018BF  00                 	db	0
   200                           
   201                           ;initializer for _LOGOUTMESSAGE
   202  0018C0  42                 	db	66
   203  0018C1  59                 	db	89
   204  0018C2  45                 	db	69
   205  0018C3  20                 	db	32
   206  0018C4  42                 	db	66
   207  0018C5  59                 	db	89
   208  0018C6  45                 	db	69
   209  0018C7  20                 	db	32
   210  0018C8  00                 	db	0
   211                           
   212                           ;initializer for _LOGINMENU
   213  0018C9  31                 	db	49
   214  0018CA  2E                 	db	46
   215  0018CB  4C                 	db	76
   216  0018CC  4F                 	db	79
   217  0018CD  47                 	db	71
   218  0018CE  49                 	db	73
   219  0018CF  4E                 	db	78
   220  0018D0  00                 	db	0
   221  0018D1  00                 	db	0
   222  0018D2  00                 	db	0
   223  0018D3  00                 	db	0
   224  0018D4  32                 	db	50
   225  0018D5  2E                 	db	46
   226  0018D6  52                 	db	82
   227  0018D7  45                 	db	69
   228  0018D8  47                 	db	71
   229  0018D9  49                 	db	73
   230  0018DA  53                 	db	83
   231  0018DB  54                 	db	84
   232  0018DC  45                 	db	69
   233  0018DD  52                 	db	82
   234  0018DE  00                 	db	0
   235                           
   236                           ;initializer for _TIME
   237  0018DF  54                 	db	84
   238  0018E0  49                 	db	73
   239  0018E1  4D                 	db	77
   240  0018E2  45                 	db	69
   241  0018E3  20                 	db	32
   242  0018E4  52                 	db	82
   243  0018E5  45                 	db	69
   244  0018E6  4D                 	db	77
   245  0018E7  41                 	db	65
   246  0018E8  49                 	db	73
   247  0018E9  4E                 	db	78
   248  0018EA  49                 	db	73
   249  0018EB  4E                 	db	78
   250  0018EC  47                 	db	71
   251  0018ED  3A                 	db	58
   252  0018EE  20                 	db	32
   253                           
   254                           ;initializer for _sysTime
   255  0018EF  43                 	db	67
   256  0018F0  55                 	db	85
   257  0018F1  52                 	db	82
   258  0018F2  52                 	db	82
   259  0018F3  45                 	db	69
   260  0018F4  4E                 	db	78
   261  0018F5  54                 	db	84
   262  0018F6  20                 	db	32
   263  0018F7  54                 	db	84
   264  0018F8  49                 	db	73
   265  0018F9  4D                 	db	77
   266  0018FA  45                 	db	69
   267  0018FB  3A                 	db	58
   268  0018FC  00                 	db	0
   269                           
   270                           ;initializer for _modifyTimeString
   271  0018FD  4D                 	db	77
   272  0018FE  4F                 	db	79
   273  0018FF  44                 	db	68
   274  001900  49                 	db	73
   275  001901  46                 	db	70
   276  001902  59                 	db	89
   277  001903  20                 	db	32
   278  001904  54                 	db	84
   279  001905  49                 	db	73
   280  001906  4D                 	db	77
   281  001907  45                 	db	69
   282  001908  3A                 	db	58
   283  001909  00                 	db	0
   284                           
   285                           ;initializer for _LOGREGSCREEN
   286  00190A  55                 	db	85
   287  00190B  53                 	db	83
   288  00190C  45                 	db	69
   289  00190D  52                 	db	82
   290  00190E  3A                 	db	58
   291  00190F  00                 	db	0
   292  001910  50                 	db	80
   293  001911  53                 	db	83
   294  001912  57                 	db	87
   295  001913  44                 	db	68
   296  001914  3A                 	db	58
   297  001915  00                 	db	0
   298                           
   299                           	psect	smallconst
   300  000200                     __psmallconst:
   301                           	callstack 0
   302  000200  00                 	db	0
   303  000201                     _TABLE:
   304                           	callstack 0
   305  000201  31                 	db	49
   306  000202  32                 	db	50
   307  000203  33                 	db	51
   308  000204  34                 	db	52
   309  000205  35                 	db	53
   310  000206  36                 	db	54
   311  000207  37                 	db	55
   312  000208  38                 	db	56
   313  000209  39                 	db	57
   314  00020A  2A                 	db	42
   315  00020B  30                 	db	48
   316  00020C  23                 	db	35
   317  00020D                     __end_of_TABLE:
   318                           	callstack 0
   319  00020D                     _MAINMENU:
   320                           	callstack 0
   321  00020D  31                 	db	49
   322  00020E  2E                 	db	46
   323  00020F  50                 	db	80
   324  000210  4C                 	db	76
   325  000211  41                 	db	65
   326  000212  59                 	db	89
   327  000213  20                 	db	32
   328  000214  41                 	db	65
   329  000215  20                 	db	32
   330  000216  47                 	db	71
   331  000217  41                 	db	65
   332  000218  4D                 	db	77
   333  000219  45                 	db	69
   334  00021A  00                 	db	0
   335  00021B  00                 	db	0
   336  00021C  00                 	db	0
   337  00021D  00                 	db	0
   338  00021E  00                 	db	0
   339  00021F  00                 	db	0
   340  000220  00                 	db	0
   341  000221  00                 	db	0
   342  000222  00                 	db	0
   343  000223  00                 	db	0
   344  000224  00                 	db	0
   345  000225  00                 	db	0
   346  000226  00                 	db	0
   347  000227  00                 	db	0
   348  000228  00                 	db	0
   349  000229  32                 	db	50
   350  00022A  2E                 	db	46
   351  00022B  4D                 	db	77
   352  00022C  4F                 	db	79
   353  00022D  44                 	db	68
   354  00022E  49                 	db	73
   355  00022F  46                 	db	70
   356  000230  59                 	db	89
   357  000231  20                 	db	32
   358  000232  54                 	db	84
   359  000233  49                 	db	73
   360  000234  4D                 	db	77
   361  000235  45                 	db	69
   362  000236  00                 	db	0
   363  000237  00                 	db	0
   364  000238  00                 	db	0
   365  000239  00                 	db	0
   366  00023A  00                 	db	0
   367  00023B  00                 	db	0
   368  00023C  00                 	db	0
   369  00023D  00                 	db	0
   370  00023E  00                 	db	0
   371  00023F  00                 	db	0
   372  000240  00                 	db	0
   373  000241  00                 	db	0
   374  000242  00                 	db	0
   375  000243  00                 	db	0
   376  000244  00                 	db	0
   377  000245  33                 	db	51
   378  000246  2E                 	db	46
   379  000247  53                 	db	83
   380  000248  48                 	db	72
   381  000249  4F                 	db	79
   382  00024A  57                 	db	87
   383  00024B  20                 	db	32
   384  00024C  47                 	db	71
   385  00024D  45                 	db	69
   386  00024E  4E                 	db	78
   387  00024F  45                 	db	69
   388  000250  52                 	db	82
   389  000251  41                 	db	65
   390  000252  4C                 	db	76
   391  000253  20                 	db	32
   392  000254  54                 	db	84
   393  000255  4F                 	db	79
   394  000256  50                 	db	80
   395  000257  20                 	db	32
   396  000258  35                 	db	53
   397  000259  20                 	db	32
   398  00025A  53                 	db	83
   399  00025B  43                 	db	67
   400  00025C  4F                 	db	79
   401  00025D  52                 	db	82
   402  00025E  45                 	db	69
   403  00025F  53                 	db	83
   404  000260  20                 	db	32
   405  000261  34                 	db	52
   406  000262  2E                 	db	46
   407  000263  4C                 	db	76
   408  000264  4F                 	db	79
   409  000265  47                 	db	71
   410  000266  4F                 	db	79
   411  000267  55                 	db	85
   412  000268  54                 	db	84
   413  000269  00                 	db	0
   414  00026A  00                 	db	0
   415  00026B  00                 	db	0
   416  00026C  00                 	db	0
   417  00026D  00                 	db	0
   418  00026E  00                 	db	0
   419  00026F  00                 	db	0
   420  000270  00                 	db	0
   421  000271  00                 	db	0
   422  000272  00                 	db	0
   423  000273  00                 	db	0
   424  000274  00                 	db	0
   425  000275  00                 	db	0
   426  000276  00                 	db	0
   427  000277  00                 	db	0
   428  000278  00                 	db	0
   429  000279  00                 	db	0
   430  00027A  00                 	db	0
   431  00027B  00                 	db	0
   432  00027C  00                 	db	0
   433  00027D  35                 	db	53
   434  00027E  2E                 	db	46
   435  00027F  53                 	db	83
   436  000280  48                 	db	72
   437  000281  4F                 	db	79
   438  000282  57                 	db	87
   439  000283  20                 	db	32
   440  000284  54                 	db	84
   441  000285  49                 	db	73
   442  000286  4D                 	db	77
   443  000287  45                 	db	69
   444  000288  00                 	db	0
   445  000289  00                 	db	0
   446  00028A  00                 	db	0
   447  00028B  00                 	db	0
   448  00028C  00                 	db	0
   449  00028D  00                 	db	0
   450  00028E  00                 	db	0
   451  00028F  00                 	db	0
   452  000290  00                 	db	0
   453  000291  00                 	db	0
   454  000292  00                 	db	0
   455  000293  00                 	db	0
   456  000294  00                 	db	0
   457  000295  00                 	db	0
   458  000296  00                 	db	0
   459  000297  00                 	db	0
   460  000298  00                 	db	0
   461  000299                     __end_of_MAINMENU:
   462                           	callstack 0
   463  000299                     _SMSTABLE:
   464                           	callstack 0
   465  000299  31                 	db	49
   466  00029A  00                 	db	0
   467  00029B  00                 	db	0
   468  00029C  00                 	db	0
   469  00029D  00                 	db	0
   470  00029E  00                 	db	0
   471  00029F  41                 	db	65
   472  0002A0  42                 	db	66
   473  0002A1  43                 	db	67
   474  0002A2  32                 	db	50
   475  0002A3  00                 	db	0
   476  0002A4  00                 	db	0
   477  0002A5  44                 	db	68
   478  0002A6  45                 	db	69
   479  0002A7  46                 	db	70
   480  0002A8  33                 	db	51
   481  0002A9  00                 	db	0
   482  0002AA  00                 	db	0
   483  0002AB  47                 	db	71
   484  0002AC  48                 	db	72
   485  0002AD  49                 	db	73
   486  0002AE  34                 	db	52
   487  0002AF  00                 	db	0
   488  0002B0  00                 	db	0
   489  0002B1  4A                 	db	74
   490  0002B2  4B                 	db	75
   491  0002B3  4C                 	db	76
   492  0002B4  35                 	db	53
   493  0002B5  00                 	db	0
   494  0002B6  00                 	db	0
   495  0002B7  4D                 	db	77
   496  0002B8  4E                 	db	78
   497  0002B9  4F                 	db	79
   498  0002BA  36                 	db	54
   499  0002BB  00                 	db	0
   500  0002BC  00                 	db	0
   501  0002BD  50                 	db	80
   502  0002BE  51                 	db	81
   503  0002BF  52                 	db	82
   504  0002C0  53                 	db	83
   505  0002C1  37                 	db	55
   506  0002C2  00                 	db	0
   507  0002C3  54                 	db	84
   508  0002C4  55                 	db	85
   509  0002C5  56                 	db	86
   510  0002C6  38                 	db	56
   511  0002C7  00                 	db	0
   512  0002C8  00                 	db	0
   513  0002C9  57                 	db	87
   514  0002CA  58                 	db	88
   515  0002CB  59                 	db	89
   516  0002CC  5A                 	db	90
   517  0002CD  39                 	db	57
   518  0002CE  00                 	db	0
   519  0002CF                     __end_of_SMSTABLE:
   520                           	callstack 0
   521  0000                     _EECON2	set	4007
   522  0000                     _EEDATA	set	4008
   523  0000                     _EEADR	set	4009
   524  0000                     _PORTCbits	set	3970
   525  0000                     _RCREG	set	4014
   526  0000                     _TXREG	set	4013
   527  0000                     _SPBRG	set	4015
   528  0000                     _BAUDCONbits	set	4024
   529  0000                     _LATCbits	set	3979
   530  0000                     _TRISCbits	set	3988
   531  0000                     _PORTDbits	set	3971
   532  0000                     _LATDbits	set	3980
   533  0000                     _TRISDbits	set	3989
   534  0000                     _LATBbits	set	3978
   535  0000                     _TMR0L	set	4054
   536  0000                     _TMR0H	set	4055
   537  0000                     _ADCON0bits	set	4034
   538  0000                     _T0CONbits	set	4053
   539  0000                     _PORTBbits	set	3969
   540  0000                     _TRISAbits	set	3986
   541  0000                     _TRISBbits	set	3987
   542  0000                     _RCONbits	set	4048
   543  0000                     _T0CON	set	4053
   544  0000                     _INTCONbits	set	4082
   545  0000                     _INTCON2bits	set	4081
   546  0000                     _PIR1bits	set	3998
   547  0000                     _RCSTAbits	set	4011
   548  0000                     _TXSTAbits	set	4012
   549  0000                     _ADCON2	set	4032
   550  0000                     _ADCON1	set	4033
   551  0000                     _ADCON0	set	4034
   552  0000                     _ADRESH	set	4036
   553  0000                     _EECON1bits	set	4006
   554  0002CF  00                 	db	0	; dummy byte at the end
   555  0000                     
   556                           ; #config settings
   557                           
   558                           	psect	cinit
   559  001838                     __pcinit:
   560                           	callstack 0
   561  001838                     start_initialization:
   562                           	callstack 0
   563  001838                     __initialization:
   564                           	callstack 0
   565                           
   566                           ; Initialize objects allocated to BANK0 (108 bytes)
   567                           ; load TBLPTR registers with __pidataBANK0
   568  001838  0EAA               	movlw	low __pidataBANK0
   569  00183A  6EF6               	movwf	tblptrl,c
   570  00183C  0E18               	movlw	high __pidataBANK0
   571  00183E  6EF7               	movwf	tblptrh,c
   572  001840  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   573  001842  6EF8               	movwf	tblptru,c
   574  001844  EE00  F080         	lfsr	0,__pdataBANK0
   575  001848  EE10 F06C          	lfsr	1,108
   576  00184C                     copy_data0:
   577  00184C  0009               	tblrd		*+
   578  00184E  CFF5 FFEE          	movff	tablat,postinc0
   579  001852  50E5               	movf	postdec1,w,c
   580  001854  50E1               	movf	fsr1l,w,c
   581  001856  E1FA               	bnz	copy_data0
   582                           
   583                           ; Initialize objects allocated to COMRAM (16 bytes)
   584                           ; load TBLPTR registers with __pidataCOMRAM
   585  001858  0E5E               	movlw	low __pidataCOMRAM
   586  00185A  6EF6               	movwf	tblptrl,c
   587  00185C  0E00               	movlw	high __pidataCOMRAM
   588  00185E  6EF7               	movwf	tblptrh,c
   589  001860  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   590  001862  6EF8               	movwf	tblptru,c
   591  001864  EE00  F067         	lfsr	0,__pdataCOMRAM
   592  001868  EE10 F010          	lfsr	1,16
   593  00186C                     copy_data1:
   594  00186C  0009               	tblrd		*+
   595  00186E  CFF5 FFEE          	movff	tablat,postinc0
   596  001872  50E5               	movf	postdec1,w,c
   597  001874  50E1               	movf	fsr1l,w,c
   598  001876  E1FA               	bnz	copy_data1
   599                           
   600                           ; Clear objects allocated to BANK1 (219 bytes)
   601  001878  EE01  F000         	lfsr	0,__pbssBANK1
   602  00187C  0EDB               	movlw	219
   603  00187E                     clear_0:
   604  00187E  6AEE               	clrf	postinc0,c
   605  001880  06E8               	decf	wreg,f,c
   606  001882  E1FD               	bnz	clear_0
   607                           
   608                           ; Clear objects allocated to BANK0 (18 bytes)
   609  001884  EE00  F0EC         	lfsr	0,__pbssBANK0
   610  001888  0E12               	movlw	18
   611  00188A                     clear_1:
   612  00188A  6AEE               	clrf	postinc0,c
   613  00188C  06E8               	decf	wreg,f,c
   614  00188E  E1FD               	bnz	clear_1
   615                           
   616                           ; Clear objects allocated to COMRAM (75 bytes)
   617  001890  EE00  F001         	lfsr	0,__pbssCOMRAM
   618  001894  0E4B               	movlw	75
   619  001896                     clear_2:
   620  001896  6AEE               	clrf	postinc0,c
   621  001898  06E8               	decf	wreg,f,c
   622  00189A  E1FD               	bnz	clear_2
   623  00189C                     end_of_initialization:
   624                           	callstack 0
   625  00189C                     __end_of__initialization:
   626                           	callstack 0
   627  00189C  9077               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   628  00189E  9277               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   629  0018A0  0E00               	movlw	low (__Lmediumconst shr (0+16))
   630  0018A2  6EF8               	movwf	tblptru,c
   631  0018A4  0100               	movlb	0
   632  0018A6  EF83  F00D         	goto	_main	;jump to C main() function
   633                           
   634                           	psect	bssCOMRAM
   635  000001                     __pbssCOMRAM:
   636                           	callstack 0
   637  000001                     _topScores:
   638                           	callstack 0
   639  000001                     	ds	10
   640  00000B                     _mUser@EEPROM$F1707:
   641                           	callstack 0
   642  00000B                     	ds	2
   643  00000D                     _Timer:
   644                           	callstack 0
   645  00000D                     	ds	2
   646  00000F                     _h_Tics:
   647                           	callstack 0
   648  00000F                     	ds	2
   649  000011                     _val@time$F1789:
   650                           	callstack 0
   651  000011                     	ds	1
   652  000012                     _game:
   653                           	callstack 0
   654  000012                     	ds	1
   655  000013                     _state@time$F1787:
   656                           	callstack 0
   657  000013                     	ds	1
   658  000014                     _timer@time$F1786:
   659                           	callstack 0
   660  000014                     	ds	1
   661  000015                     _sysMinute:
   662                           	callstack 0
   663  000015                     	ds	1
   664  000016                     _sysSecond:
   665                           	callstack 0
   666  000016                     	ds	1
   667  000017                     _second:
   668                           	callstack 0
   669  000017                     	ds	1
   670  000018                     _seconds:
   671                           	callstack 0
   672  000018                     	ds	1
   673  000019                     _wrongState:
   674                           	callstack 0
   675  000019                     	ds	1
   676  00001A                     _saveState:
   677                           	callstack 0
   678  00001A                     	ds	1
   679  00001B                     _saveScore:
   680                           	callstack 0
   681  00001B                     	ds	1
   682  00001C                     _lastUserPointer:
   683                           	callstack 0
   684  00001C                     	ds	1
   685  00001D                     _status:
   686                           	callstack 0
   687  00001D                     	ds	1
   688  00001E                     _userNum:
   689                           	callstack 0
   690  00001E                     	ds	1
   691  00001F                     _state@EEPROM$F1704:
   692                           	callstack 0
   693  00001F                     	ds	1
   694  000020                     _position:
   695                           	callstack 0
   696  000020                     	ds	1
   697  000021                     _numScores:
   698                           	callstack 0
   699  000021                     	ds	1
   700  000022                     _allowed:
   701                           	callstack 0
   702  000022                     	ds	1
   703  000023                     _counterTX:
   704                           	callstack 0
   705  000023                     	ds	1
   706  000024                     _dataTX:
   707                           	callstack 0
   708  000024                     	ds	1
   709  000025                     _timerTX:
   710                           	callstack 0
   711  000025                     	ds	1
   712  000026                     _stateTX:
   713                           	callstack 0
   714  000026                     	ds	1
   715  000027                     _counterRX:
   716                           	callstack 0
   717  000027                     	ds	1
   718  000028                     _dataRX:
   719                           	callstack 0
   720  000028                     	ds	1
   721  000029                     _timerRX:
   722                           	callstack 0
   723  000029                     	ds	1
   724  00002A                     _stateRX:
   725                           	callstack 0
   726  00002A                     	ds	1
   727  00002B                     _joyMode:
   728                           	callstack 0
   729  00002B                     	ds	1
   730  00002C                     _stateJoy:
   731                           	callstack 0
   732  00002C                     	ds	1
   733  00002D                     _moved:
   734                           	callstack 0
   735  00002D                     	ds	1
   736  00002E                     _y:
   737                           	callstack 0
   738  00002E                     	ds	1
   739  00002F                     _x:
   740                           	callstack 0
   741  00002F                     	ds	1
   742  000030                     _send:
   743                           	callstack 0
   744  000030                     	ds	1
   745  000031                     menuMotor@state:
   746                           	callstack 0
   747  000031                     	ds	1
   748  000032                     _skipState:
   749                           	callstack 0
   750  000032                     	ds	1
   751  000033                     _mScore:
   752                           	callstack 0
   753  000033                     	ds	1
   754  000034                     _pos:
   755                           	callstack 0
   756  000034                     	ds	1
   757  000035                     _val:
   758                           	callstack 0
   759  000035                     	ds	1
   760  000036                     _LCDcolm:
   761                           	callstack 0
   762  000036                     	ds	1
   763  000037                     _LCDcol:
   764                           	callstack 0
   765  000037                     	ds	1
   766  000038                     _LCDrow:
   767                           	callstack 0
   768  000038                     	ds	1
   769  000039                     _timer:
   770                           	callstack 0
   771  000039                     	ds	1
   772  00003A                     _gameTime:
   773                           	callstack 0
   774  00003A                     	ds	1
   775  00003B                     _period:
   776                           	callstack 0
   777  00003B                     	ds	1
   778  00003C                     _timerSong:
   779                           	callstack 0
   780  00003C                     	ds	1
   781  00003D                     _periodTimer:
   782                           	callstack 0
   783  00003D                     	ds	1
   784  00003E                     _state@Audio$F919:
   785                           	callstack 0
   786  00003E                     	ds	1
   787  00003F                     _ColumnAct:
   788                           	callstack 0
   789  00003F                     	ds	1
   790  000040                     _RowAct:
   791                           	callstack 0
   792  000040                     	ds	1
   793  000041                     _stateSMS:
   794                           	callstack 0
   795  000041                     	ds	1
   796  000042                     _state:
   797                           	callstack 0
   798  000042                     	ds	1
   799  000043                     _available:
   800                           	callstack 0
   801  000043                     	ds	1
   802  000044                     _numPresses:
   803                           	callstack 0
   804  000044                     	ds	1
   805  000045                     _pressed:
   806                           	callstack 0
   807  000045                     	ds	1
   808  000046                     _previous:
   809                           	callstack 0
   810  000046                     	ds	1
   811  000047                     _currentKey:
   812                           	callstack 0
   813  000047                     	ds	1
   814  000048                     _timer_SMS:
   815                           	callstack 0
   816  000048                     	ds	1
   817  000049                     _timerBounces:
   818                           	callstack 0
   819  000049                     	ds	1
   820  00004A                     _row:
   821                           	callstack 0
   822  00004A                     	ds	1
   823  00004B                     _counter:
   824                           	callstack 0
   825  00004B                     	ds	1
   826                           
   827                           	psect	dataCOMRAM
   828  000067                     __pdataCOMRAM:
   829                           	callstack 0
   830  000067                     _ERROR:
   831                           	callstack 0
   832  000067                     	ds	9
   833  000070                     _MAINMENUSIZE:
   834                           	callstack 0
   835  000070                     	ds	5
   836  000075                     _minute:
   837                           	callstack 0
   838  000075                     	ds	1
   839  000076                     _minutes:
   840                           	callstack 0
   841  000076                     	ds	1
   842                           
   843                           	psect	bssBANK0
   844  0000EC                     __pbssBANK0:
   845                           	callstack 0
   846  0000EC                     _mUser:
   847                           	callstack 0
   848  0000EC                     	ds	18
   849                           
   850                           	psect	dataBANK0
   851  000080                     __pdataBANK0:
   852                           	callstack 0
   853  000080                     _RESULTS:
   854                           	callstack 0
   855  000080                     	ds	22
   856  000096                     _LOGOUTMESSAGE:
   857                           	callstack 0
   858  000096                     	ds	9
   859  00009F                     _LOGINMENU:
   860                           	callstack 0
   861  00009F                     	ds	22
   862  0000B5                     _TIME:
   863                           	callstack 0
   864  0000B5                     	ds	16
   865  0000C5                     _sysTime:
   866                           	callstack 0
   867  0000C5                     	ds	14
   868  0000D3                     _modifyTimeString:
   869                           	callstack 0
   870  0000D3                     	ds	13
   871  0000E0                     _LOGREGSCREEN:
   872                           	callstack 0
   873  0000E0                     	ds	12
   874                           
   875                           	psect	bssBANK1
   876  000100                     __pbssBANK1:
   877                           	callstack 0
   878  000100                     _users:
   879                           	callstack 0
   880  000100                     	ds	144
   881  000190                     _s_Timers:
   882                           	callstack 0
   883  000190                     	ds	75
   884                           
   885                           	psect	cstackCOMRAM
   886  00004C                     __pcstackCOMRAM:
   887                           	callstack 0
   888  00004C                     
   889                           ; 1 bytes @ 0x0
   890  00004C                     	ds	1
   891  00004D                     ??_RSI_High:
   892                           
   893                           ; 1 bytes @ 0x1
   894  00004D                     	ds	4
   895  000051                     ??_KeGetGenericValue:
   896  000051                     ??_getFullValue:
   897  000051                     ??_EscriuPrimeraOrdre:
   898  000051                     ??_CantaPartAlta:
   899  000051                     ??_CantaPartBaixa:
   900  000051                     ?_TiGetTics:
   901                           	callstack 0
   902  000051                     ?___awmod:
   903                           	callstack 0
   904  000051                     TiResetTics@Handle:
   905                           	callstack 0
   906  000051                     _isPressed$590:
   907                           	callstack 0
   908  000051                     JoSetMode@mode:
   909                           	callstack 0
   910  000051                     SiSendChar@myByte:
   911                           	callstack 0
   912  000051                     DaSaveUser@regUser:
   913                           	callstack 0
   914  000051                     saveEEPROM@data:
   915                           	callstack 0
   916  000051                     readEEPROM@address:
   917                           	callstack 0
   918  000051                     ___lbdiv@divisor:
   919                           	callstack 0
   920  000051                     ___lbmod@divisor:
   921                           	callstack 0
   922  000051                     ___awmod@dividend:
   923                           	callstack 0
   924                           
   925                           ; 2 bytes @ 0x5
   926  000051                     	ds	1
   927  000052                     ??_joystickMotor:
   928  000052                     ??_readUserData:
   929  000052                     KeSetMode@menuMode:
   930                           	callstack 0
   931  000052                     CantaPartAlta@c:
   932                           	callstack 0
   933  000052                     CantaPartBaixa@c:
   934                           	callstack 0
   935  000052                     EscriuPrimeraOrdre@ordre:
   936                           	callstack 0
   937  000052                     btSendByte@byte:
   938                           	callstack 0
   939  000052                     saveEEPROM@ad:
   940                           	callstack 0
   941  000052                     ___lbdiv@dividend:
   942                           	callstack 0
   943  000052                     ___lbmod@dividend:
   944                           	callstack 0
   945                           
   946                           ; 1 bytes @ 0x6
   947  000052                     	ds	1
   948  000053                     ??_TiGetTics:
   949  000053                     CantaIR@IR:
   950                           	callstack 0
   951  000053                     CantaData@Data:
   952                           	callstack 0
   953  000053                     ___lbdiv@counter:
   954                           	callstack 0
   955  000053                     ___lbmod@counter:
   956                           	callstack 0
   957  000053                     ___awmod@divisor:
   958                           	callstack 0
   959                           
   960                           ; 2 bytes @ 0x7
   961  000053                     	ds	1
   962  000054                     ___lbdiv@quotient:
   963                           	callstack 0
   964  000054                     ___lbmod@rem:
   965                           	callstack 0
   966                           
   967                           ; 1 bytes @ 0x8
   968  000054                     	ds	1
   969  000055                     TiGetTics@Handle:
   970                           	callstack 0
   971  000055                     getFullValue@generic:
   972                           	callstack 0
   973  000055                     ___awmod@counter:
   974                           	callstack 0
   975                           
   976                           ; 1 bytes @ 0x9
   977  000055                     	ds	1
   978  000056                     ___awmod@sign:
   979                           	callstack 0
   980  000056                     TiGetTics@actual:
   981                           	callstack 0
   982                           
   983                           ; 2 bytes @ 0xA
   984  000056                     	ds	2
   985  000058                     ??_audioMotor:
   986  000058                     ??_SMSMotor:
   987  000058                     ??_KeypadMotor:
   988  000058                     ??_btMotor:
   989  000058                     WaitForBusy@Busy:
   990                           	callstack 0
   991  000058                     Espera@Timer:
   992                           	callstack 0
   993                           
   994                           ; 2 bytes @ 0xC
   995  000058                     	ds	1
   996  000059                     LcGotoXY@Row:
   997                           	callstack 0
   998                           
   999                           ; 1 bytes @ 0xD
  1000  000059                     	ds	1
  1001  00005A                     _LcGotoXY$795:
  1002                           	callstack 0
  1003  00005A                     Espera@ms:
  1004                           	callstack 0
  1005                           
  1006                           ; 2 bytes @ 0xE
  1007  00005A                     	ds	2
  1008  00005C                     ??_Espera:
  1009  00005C                     LcGotoXY@Fisics:
  1010                           	callstack 0
  1011                           
  1012                           ; 1 bytes @ 0x10
  1013  00005C                     	ds	1
  1014  00005D                     LcInit@columns:
  1015                           	callstack 0
  1016  00005D                     LcGotoXY@Column:
  1017                           	callstack 0
  1018                           
  1019                           ; 1 bytes @ 0x11
  1020  00005D                     	ds	1
  1021  00005E                     LcInit@rows:
  1022                           	callstack 0
  1023  00005E                     LcPutChar@c:
  1024                           	callstack 0
  1025  00005E                     DaFindUser@logUser:
  1026                           	callstack 0
  1027                           
  1028                           ; 1 bytes @ 0x12
  1029  00005E                     	ds	1
  1030  00005F                     ??_dataMotor:
  1031  00005F                     ??_timeMotor:
  1032  00005F                     ??_mainMenu:
  1033  00005F                     LcInit@i:
  1034                           	callstack 0
  1035  00005F                     displayString@string:
  1036                           	callstack 0
  1037  00005F                     DaSaveScore@userScore:
  1038                           	callstack 0
  1039                           
  1040                           ; 1 bytes @ 0x13
  1041  00005F                     	ds	1
  1042  000060                     
  1043                           ; 1 bytes @ 0x14
  1044  000060                     	ds	1
  1045  000061                     ??_menuMotor:
  1046                           
  1047                           ; 1 bytes @ 0x15
  1048  000061                     	ds	4
  1049  000065                     _dataMotor$1730:
  1050                           	callstack 0
  1051                           
  1052                           ; 2 bytes @ 0x19
  1053  000065                     	ds	2
  1054  000067                     
  1055                           ; 1 bytes @ 0x1B
  1056 ;;
  1057 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1058 ;;
  1059 ;; *************** function _main *****************
  1060 ;; Defined at:
  1061 ;;		line 35 in file "main.c"
  1062 ;; Parameters:    Size  Location     Type
  1063 ;;		None
  1064 ;; Auto vars:     Size  Location     Type
  1065 ;;		None
  1066 ;; Return value:  Size  Location     Type
  1067 ;;                  1    wreg      void 
  1068 ;; Registers used:
  1069 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1070 ;; Tracked objects:
  1071 ;;		On entry : 0/0
  1072 ;;		On exit  : 0/0
  1073 ;;		Unchanged: 0/0
  1074 ;; Data sizes:     COMRAM   BANK0   BANK1
  1075 ;;      Params:         0       0       0
  1076 ;;      Locals:         0       0       0
  1077 ;;      Temps:          0       0       0
  1078 ;;      Totals:         0       0       0
  1079 ;;Total ram usage:        0 bytes
  1080 ;; Hardware stack levels required when called: 8
  1081 ;; This function calls:
  1082 ;;		_KeypadMotor
  1083 ;;		_LcInit
  1084 ;;		_SMSMotor
  1085 ;;		_TiInitTimer
  1086 ;;		_audioMotor
  1087 ;;		_btMotor
  1088 ;;		_dataMotor
  1089 ;;		_initAudio
  1090 ;;		_initData
  1091 ;;		_initJoystick
  1092 ;;		_initKeypad
  1093 ;;		_initMenu
  1094 ;;		_initSIO
  1095 ;;		_initTime
  1096 ;;		_joystickMotor
  1097 ;;		_menuMotor
  1098 ;;		_timeMotor
  1099 ;; This function is called by:
  1100 ;;		Startup code after reset
  1101 ;; This function uses a non-reentrant model
  1102 ;;
  1103                           
  1104                           	psect	text0
  1105  001B06                     __ptext0:
  1106                           	callstack 0
  1107  001B06                     _main:
  1108                           	callstack 23
  1109                           
  1110                           ;incstack = 0
  1111  001B06  ECA6  F00E         	call	_TiInitTimer	;wreg free
  1112  001B0A  ECB1  F00F         	call	_initJoystick	;wreg free
  1113  001B0E  EC62  F00F         	call	_initKeypad	;wreg free
  1114  001B12  0E10               	movlw	16
  1115  001B14  6E5D               	movwf	LcInit@columns^0,c
  1116  001B16  ECA6  F00A         	call	_LcInit
  1117  001B1A  EC2F  F00F         	call	_initSIO	;wreg free
  1118  001B1E  EC6C  F000         	call	_initMenu	;wreg free
  1119  001B22  EC4F  F000         	call	_initAudio	;wreg free
  1120  001B26  EC65  F000         	call	_initTime	;wreg free
  1121  001B2A  EC25  F00D         	call	_initData	;wreg free
  1122  001B2E                     l5719:
  1123  001B2E  EC47  F00A         	call	_audioMotor	;wreg free
  1124  001B32  ECFC  F00A         	call	_SMSMotor	;wreg free
  1125  001B36  EC5D  F009         	call	_KeypadMotor	;wreg free
  1126  001B3A  EC68  F001         	call	_menuMotor	;wreg free
  1127  001B3E  ECE8  F009         	call	_joystickMotor	;wreg free
  1128  001B42  ECE9  F004         	call	_dataMotor	;wreg free
  1129  001B46  EC2D  F007         	call	_timeMotor	;wreg free
  1130  001B4A  ECC5  F008         	call	_btMotor	;wreg free
  1131  001B4E  D7EF               	goto	l5719
  1132  001B50                     __end_of_main:
  1133                           	callstack 0
  1134                           
  1135 ;; *************** function _timeMotor *****************
  1136 ;; Defined at:
  1137 ;;		line 21 in file "time.c"
  1138 ;; Parameters:    Size  Location     Type
  1139 ;;		None
  1140 ;; Auto vars:     Size  Location     Type
  1141 ;;		None
  1142 ;; Return value:  Size  Location     Type
  1143 ;;                  1    wreg      void 
  1144 ;; Registers used:
  1145 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1146 ;; Tracked objects:
  1147 ;;		On entry : 0/0
  1148 ;;		On exit  : 0/0
  1149 ;;		Unchanged: 0/0
  1150 ;; Data sizes:     COMRAM   BANK0   BANK1
  1151 ;;      Params:         0       0       0
  1152 ;;      Locals:         0       0       0
  1153 ;;      Temps:          2       0       0
  1154 ;;      Totals:         2       0       0
  1155 ;;Total ram usage:        2 bytes
  1156 ;; Hardware stack levels used: 1
  1157 ;; Hardware stack levels required when called: 7
  1158 ;; This function calls:
  1159 ;;		_KeGetGenericValue
  1160 ;;		_LcCursorOn
  1161 ;;		_LcGotoXY
  1162 ;;		_LcPutChar
  1163 ;;		_TiGetTics
  1164 ;;		_TiResetTics
  1165 ;;		___lbdiv
  1166 ;;		___lbmod
  1167 ;;		_btAvailable
  1168 ;;		_btSendByte
  1169 ;;		_isPressed
  1170 ;;		_sendChar
  1171 ;;		_updateGameTime
  1172 ;;		_updateSysTime
  1173 ;; This function is called by:
  1174 ;;		_main
  1175 ;; This function uses a non-reentrant model
  1176 ;;
  1177                           
  1178                           	psect	text1
  1179  000E5A                     __ptext1:
  1180                           	callstack 0
  1181  000E5A                     _timeMotor:
  1182                           	callstack 23
  1183                           
  1184                           ;time.c: 22:     switch (state){
  1185                           
  1186                           ;incstack = 0
  1187  000E5A  D134               	goto	l5611
  1188  000E5C                     l1039:
  1189                           
  1190                           ;time.c: 24:             state = game;
  1191  000E5C  C012  F013         	movff	_game,_state@time$F1787
  1192                           
  1193                           ;time.c: 25:             if (TiGetTics(timer) >= 1200){
  1194  000E60  5014               	movf	_timer@time$F1786^0,w,c
  1195  000E62  ECF8  F00E         	call	_TiGetTics
  1196  000E66  BE52               	btfsc	(?_TiGetTics+1)^0,7,c
  1197  000E68  0012               	return	
  1198  000E6A  ECC3  F004         	call	PL24	;call to abstracted procedure
  1199  000E6E  A0D8               	btfss	status,0,c
  1200  000E70  0012               	return	
  1201                           
  1202                           ;time.c: 26:                 TiResetTics(timer);
  1203  000E72  5014               	movf	_timer@time$F1786^0,w,c
  1204  000E74  EC92  F00F         	call	_TiResetTics
  1205                           
  1206                           ;time.c: 27:                 updateSysTime();
  1207  000E78  EF37  F000         	goto	_updateSysTime	;wreg free
  1208  000E7C                     l5459:
  1209                           
  1210                           ;time.c: 31:             if (TiGetTics(timer) >= 1200){
  1211  000E7C  5014               	movf	_timer@time$F1786^0,w,c
  1212  000E7E  ECF8  F00E         	call	_TiGetTics
  1213  000E82  BE52               	btfsc	(?_TiGetTics+1)^0,7,c
  1214  000E84  0012               	return	
  1215  000E86  ECC3  F004         	call	PL24	;call to abstracted procedure
  1216  000E8A  A0D8               	btfss	status,0,c
  1217  000E8C  0012               	return	
  1218                           
  1219                           ;time.c: 32:                 TiResetTics(timer);
  1220  000E8E  5014               	movf	_timer@time$F1786^0,w,c
  1221  000E90  EC92  F00F         	call	_TiResetTics
  1222                           
  1223                           ;time.c: 33:                 state = 2;
  1224  000E94  0E02               	movlw	2
  1225                           
  1226                           ;time.c: 34:                 LcGotoXY(0,1);
  1227  000E96  D960               	call	PL42	;call to abstracted procedure
  1228  000E98  EC8F  F00E         	call	_LcGotoXY
  1229                           
  1230                           ;time.c: 35:                 updateGameTime();
  1231  000E9C  ECDA  F00F         	call	_updateGameTime	;wreg free
  1232  000EA0  EF37  F000         	goto	_updateSysTime
  1233  000EA4                     l5471:
  1234                           
  1235                           ;time.c: 40:             val = minute/10;
  1236  000EA4  D962               	call	PL82	;call to abstracted procedure
  1237  000EA6  EC5D  F00E         	call	___lbdiv
  1238  000EAA                     L1:
  1239  000EAA  6E11               	movwf	_val@time$F1789^0,c
  1240                           
  1241                           ;time.c: 41:             sendChar();
  1242  000EAC  EFA2  F00F         	goto	_sendChar	;wreg free
  1243  000EB0                     l5475:
  1244                           
  1245                           ;time.c: 45:             val = minute%10;
  1246  000EB0  D964               	call	PL92	;call to abstracted procedure
  1247  000EB2  ECE5  F00E         	call	___lbmod
  1248  000EB6  D7F9               	goto	L1
  1249  000EB8                     l5479:
  1250                           
  1251                           ;time.c: 49:             val = 10;
  1252  000EB8  0E0A               	movlw	10
  1253  000EBA  D7F7               	goto	L1
  1254  000EBC                     l5483:
  1255                           
  1256                           ;time.c: 53:             val = second/10;
  1257  000EBC  D962               	call	PL94	;call to abstracted procedure
  1258  000EBE  EC5D  F00E         	call	___lbdiv
  1259  000EC2  D7F3               	goto	L1
  1260  000EC4                     l5487:
  1261                           
  1262                           ;time.c: 57:             val = second%10;
  1263  000EC4  D956               	call	PL86	;call to abstracted procedure
  1264  000EC6  ECE5  F00E         	call	___lbmod
  1265  000ECA  D7EF               	goto	L1
  1266  000ECC                     l5491:
  1267                           
  1268                           ;time.c: 61:             if (btAvailable()){
  1269  000ECC  EC9C  F000         	call	_btAvailable	;wreg free
  1270  000ED0  0900               	iorlw	0
  1271  000ED2  B4D8               	btfsc	status,2,c
  1272  000ED4  0012               	return	
  1273                           
  1274                           ;time.c: 62:                 btSendByte(' ');
  1275  000ED6  0E20               	movlw	32
  1276  000ED8  ECF2  F00F         	call	_btSendByte
  1277                           
  1278                           ;time.c: 63:                 state = 1;
  1279  000EDC  0E01               	movlw	1
  1280  000EDE  6E13               	movwf	_state@time$F1787^0,c
  1281  000EE0  0C01               	retlw	1
  1282  000EE2                     l5497:
  1283                           
  1284                           ;time.c: 67:             LcPutChar(minute/10+'0');
  1285  000EE2  D943               	call	PL82	;call to abstracted procedure
  1286  000EE4  EC5D  F00E         	call	___lbdiv
  1287  000EE8  0F30               	addlw	48
  1288  000EEA  ECBC  F00E         	call	_LcPutChar
  1289                           
  1290                           ;time.c: 68:             state = 21;
  1291  000EEE  0E15               	movlw	21
  1292  000EF0  6E13               	movwf	_state@time$F1787^0,c
  1293                           
  1294                           ;time.c: 69:             break;
  1295  000EF2  0C15               	retlw	21
  1296  000EF4                     l5501:
  1297                           
  1298                           ;time.c: 71:             LcPutChar(minute%10+'0');
  1299  000EF4  D942               	call	PL92	;call to abstracted procedure
  1300  000EF6  ECE5  F00E         	call	___lbmod
  1301  000EFA  0F30               	addlw	48
  1302  000EFC  ECBC  F00E         	call	_LcPutChar
  1303                           
  1304                           ;time.c: 72:             state = 22;
  1305  000F00  0E16               	movlw	22
  1306  000F02  6E13               	movwf	_state@time$F1787^0,c
  1307                           
  1308                           ;time.c: 73:             break;
  1309  000F04  0C16               	retlw	22
  1310  000F06                     l5505:
  1311                           
  1312                           ;time.c: 75:             LcPutChar(':');
  1313  000F06  0E3A               	movlw	58
  1314  000F08  ECBC  F00E         	call	_LcPutChar
  1315                           
  1316                           ;time.c: 76:             state = 23;
  1317  000F0C  0E17               	movlw	23
  1318  000F0E  6E13               	movwf	_state@time$F1787^0,c
  1319                           
  1320                           ;time.c: 77:             break;
  1321  000F10  0C17               	retlw	23
  1322  000F12                     l5509:
  1323                           
  1324                           ;time.c: 79:             LcPutChar(second/10+'0');
  1325  000F12  D937               	call	PL94	;call to abstracted procedure
  1326  000F14  EC5D  F00E         	call	___lbdiv
  1327  000F18  0F30               	addlw	48
  1328  000F1A  ECBC  F00E         	call	_LcPutChar
  1329                           
  1330                           ;time.c: 80:             state = 24;
  1331  000F1E  0E18               	movlw	24
  1332  000F20  6E13               	movwf	_state@time$F1787^0,c
  1333                           
  1334                           ;time.c: 81:             break;
  1335  000F22  0C18               	retlw	24
  1336  000F24                     l5513:
  1337                           
  1338                           ;time.c: 83:             LcPutChar(second%10+'0');
  1339  000F24  D926               	call	PL86	;call to abstracted procedure
  1340  000F26  ECE5  F00E         	call	___lbmod
  1341  000F2A  0F30               	addlw	48
  1342  000F2C  ECBC  F00E         	call	_LcPutChar
  1343                           
  1344                           ;time.c: 84:             LcGotoXY(0,1);
  1345  000F30  EC27  F007         	call	PL54	;call to abstracted procedure
  1346  000F34  EC8F  F00E         	call	_LcGotoXY
  1347                           
  1348                           ;time.c: 85:             state = 0;
  1349  000F38  6A13               	clrf	_state@time$F1787^0,c
  1350                           
  1351                           ;time.c: 86:             if (game != 0){
  1352  000F3A  5012               	movf	_game^0,w,c
  1353  000F3C  E002               	bz	l5521
  1354                           
  1355                           ;time.c: 87:                 LcCursorOn();
  1356  000F3E  EC8D  F000         	call	_LcCursorOn	;wreg free
  1357  000F42                     l5521:
  1358                           
  1359                           ;time.c: 91:             state = 0;
  1360  000F42  6A13               	clrf	_state@time$F1787^0,c
  1361                           
  1362                           ;time.c: 92:             if (isPressed() && KeGetGenericValue() != '*' && KeGetGenericVa
      +                          lue() != '#' ){
  1363  000F44  ECE6  F00F         	call	_isPressed	;wreg free
  1364  000F48  0900               	iorlw	0
  1365  000F4A  B4D8               	btfsc	status,2,c
  1366  000F4C  0012               	return	
  1367  000F4E  EC72  F00F         	call	_KeGetGenericValue	;wreg free
  1368  000F52  0A2A               	xorlw	42
  1369  000F54  B4D8               	btfsc	status,2,c
  1370  000F56  0012               	return	
  1371  000F58  EC72  F00F         	call	_KeGetGenericValue	;wreg free
  1372  000F5C  0A23               	xorlw	35
  1373  000F5E  B4D8               	btfsc	status,2,c
  1374  000F60  0012               	return	
  1375                           
  1376                           ;time.c: 93:                 minute = KeGetGenericValue()-'0';
  1377  000F62  EC72  F00F         	call	_KeGetGenericValue	;wreg free
  1378  000F66  0FD0               	addlw	208
  1379  000F68  6E75               	movwf	_minute^0,c
  1380                           
  1381                           ;time.c: 94:                 LcPutChar(KeGetGenericValue());
  1382  000F6A  EC72  F00F         	call	_KeGetGenericValue	;wreg free
  1383  000F6E  ECBC  F00E         	call	_LcPutChar
  1384  000F72                     l5533:
  1385                           
  1386                           ;time.c: 95:                 game++;
  1387  000F72  2A12               	incf	_game^0,f,c
  1388  000F74  0012               	return	
  1389  000F76                     l1059:
  1390                           
  1391                           ;time.c: 99:             state = 0;
  1392  000F76  6A13               	clrf	_state@time$F1787^0,c
  1393                           
  1394                           ;time.c: 100:             if (isPressed() && KeGetGenericValue() != '*' && KeGetGenericV
      +                          alue() != '#' ){
  1395  000F78  ECE6  F00F         	call	_isPressed	;wreg free
  1396  000F7C  0900               	iorlw	0
  1397  000F7E  B4D8               	btfsc	status,2,c
  1398  000F80  0012               	return	
  1399  000F82  EC72  F00F         	call	_KeGetGenericValue	;wreg free
  1400  000F86  0A2A               	xorlw	42
  1401  000F88  B4D8               	btfsc	status,2,c
  1402  000F8A  0012               	return	
  1403  000F8C  EC72  F00F         	call	_KeGetGenericValue	;wreg free
  1404  000F90  0A23               	xorlw	35
  1405  000F92  B4D8               	btfsc	status,2,c
  1406  000F94  0012               	return	
  1407                           
  1408                           ;time.c: 101:                 minute = minute*10 +KeGetGenericValue()-'0';
  1409  000F96  EC72  F00F         	call	_KeGetGenericValue	;wreg free
  1410  000F9A  6E5F               	movwf	??_timeMotor^0,c
  1411  000F9C  5075               	movf	_minute^0,w,c
  1412  000F9E  D8E0               	call	PL72	;call to abstracted procedure
  1413  000FA0  6E75               	movwf	_minute^0,c
  1414                           
  1415                           ;time.c: 102:                 LcPutChar(KeGetGenericValue());
  1416  000FA2  EC72  F00F         	call	_KeGetGenericValue	;wreg free
  1417  000FA6  ECBC  F00E         	call	_LcPutChar
  1418                           
  1419                           ;time.c: 103:                 LcPutChar(':');
  1420  000FAA  0E3A               	movlw	58
  1421  000FAC  ECBC  F00E         	call	_LcPutChar
  1422  000FB0  D7E0               	goto	l5533
  1423  000FB2                     l1061:
  1424                           
  1425                           ;time.c: 108:             state = 0;
  1426  000FB2  6A13               	clrf	_state@time$F1787^0,c
  1427                           
  1428                           ;time.c: 109:             if (isPressed() && KeGetGenericValue() != '*' && KeGetGenericV
      +                          alue() != '#' ){
  1429  000FB4  ECE6  F00F         	call	_isPressed	;wreg free
  1430  000FB8  0900               	iorlw	0
  1431  000FBA  B4D8               	btfsc	status,2,c
  1432  000FBC  0012               	return	
  1433  000FBE  EC72  F00F         	call	_KeGetGenericValue	;wreg free
  1434  000FC2  0A2A               	xorlw	42
  1435  000FC4  B4D8               	btfsc	status,2,c
  1436  000FC6  0012               	return	
  1437  000FC8  EC72  F00F         	call	_KeGetGenericValue	;wreg free
  1438  000FCC  0A23               	xorlw	35
  1439  000FCE  B4D8               	btfsc	status,2,c
  1440  000FD0  0012               	return	
  1441                           
  1442                           ;time.c: 110:                 second = KeGetGenericValue()-'0';
  1443  000FD2  EC72  F00F         	call	_KeGetGenericValue	;wreg free
  1444  000FD6  0FD0               	addlw	208
  1445  000FD8  6E17               	movwf	_second^0,c
  1446                           
  1447                           ;time.c: 111:                 LcPutChar(KeGetGenericValue());
  1448  000FDA  EC72  F00F         	call	_KeGetGenericValue	;wreg free
  1449  000FDE  ECBC  F00E         	call	_LcPutChar
  1450  000FE2  D7C7               	goto	l5533
  1451  000FE4                     l1063:
  1452                           
  1453                           ;time.c: 116:             state = 0;
  1454  000FE4  6A13               	clrf	_state@time$F1787^0,c
  1455                           
  1456                           ;time.c: 117:             if (isPressed() && KeGetGenericValue() != '*' && KeGetGenericV
      +                          alue() != '#' ){
  1457  000FE6  ECE6  F00F         	call	_isPressed	;wreg free
  1458  000FEA  0900               	iorlw	0
  1459  000FEC  B4D8               	btfsc	status,2,c
  1460  000FEE  0012               	return	
  1461  000FF0  EC72  F00F         	call	_KeGetGenericValue	;wreg free
  1462  000FF4  0A2A               	xorlw	42
  1463  000FF6  B4D8               	btfsc	status,2,c
  1464  000FF8  0012               	return	
  1465  000FFA  EC72  F00F         	call	_KeGetGenericValue	;wreg free
  1466  000FFE  0A23               	xorlw	35
  1467  001000  B4D8               	btfsc	status,2,c
  1468  001002  0012               	return	
  1469                           
  1470                           ;time.c: 118:                 second = second*10 +KeGetGenericValue()-'0';
  1471  001004  EC72  F00F         	call	_KeGetGenericValue	;wreg free
  1472  001008  6E5F               	movwf	??_timeMotor^0,c
  1473  00100A  5017               	movf	_second^0,w,c
  1474  00100C  D8A9               	call	PL72	;call to abstracted procedure
  1475  00100E  6E17               	movwf	_second^0,c
  1476                           
  1477                           ;time.c: 119:                 LcPutChar(KeGetGenericValue());
  1478  001010  EC72  F00F         	call	_KeGetGenericValue	;wreg free
  1479  001014  ECBC  F00E         	call	_LcPutChar
  1480  001018  D7AC               	goto	l5533
  1481  00101A                     l1065:
  1482                           
  1483                           ;time.c: 124:             state = 0;
  1484  00101A  6A13               	clrf	_state@time$F1787^0,c
  1485                           
  1486                           ;time.c: 125:             if (isPressed() && KeGetGenericValue() == '#'){
  1487  00101C  ECE6  F00F         	call	_isPressed	;wreg free
  1488  001020  0900               	iorlw	0
  1489  001022  B4D8               	btfsc	status,2,c
  1490  001024  0012               	return	
  1491  001026  EC72  F00F         	call	_KeGetGenericValue	;wreg free
  1492  00102A  0A23               	xorlw	35
  1493  00102C  A4D8               	btfss	status,2,c
  1494  00102E  0012               	return	
  1495                           
  1496                           ;time.c: 126:                 seconds = second;
  1497  001030  C017  F018         	movff	_second,_seconds
  1498                           
  1499                           ;time.c: 127:                 minutes = minute;
  1500  001034  C075  F076         	movff	_minute,_minutes
  1501                           
  1502                           ;time.c: 128:                 game = 0;
  1503  001038  6A12               	clrf	_game^0,c
  1504  00103A  0012               	return	
  1505  00103C                     l5579:
  1506                           
  1507                           ;time.c: 133:             LcPutChar(sysMinute/10+'0');
  1508  00103C  0E0A               	movlw	10
  1509  00103E  6E51               	movwf	___lbdiv@divisor^0,c
  1510  001040  5015               	movf	_sysMinute^0,w,c
  1511  001042  EC5D  F00E         	call	___lbdiv
  1512  001046  0F30               	addlw	48
  1513  001048  ECBC  F00E         	call	_LcPutChar
  1514                           
  1515                           ;time.c: 134:             state = 31;
  1516  00104C  0E1F               	movlw	31
  1517  00104E  6E13               	movwf	_state@time$F1787^0,c
  1518                           
  1519                           ;time.c: 135:             break;
  1520  001050  0C1F               	retlw	31
  1521  001052                     l5583:
  1522                           
  1523                           ;time.c: 138:             LcPutChar(sysMinute%10+'0');
  1524  001052  0E0A               	movlw	10
  1525  001054  6E51               	movwf	___lbmod@divisor^0,c
  1526  001056  5015               	movf	_sysMinute^0,w,c
  1527  001058  ECE5  F00E         	call	___lbmod
  1528  00105C  0F30               	addlw	48
  1529  00105E  ECBC  F00E         	call	_LcPutChar
  1530                           
  1531                           ;time.c: 139:             state = 32;
  1532  001062  0E20               	movlw	32
  1533  001064  6E13               	movwf	_state@time$F1787^0,c
  1534                           
  1535                           ;time.c: 140:             break;
  1536  001066  0C20               	retlw	32
  1537  001068                     l5587:
  1538                           
  1539                           ;time.c: 143:             LcPutChar(':');
  1540  001068  0E3A               	movlw	58
  1541  00106A  ECBC  F00E         	call	_LcPutChar
  1542                           
  1543                           ;time.c: 144:             state = 33;
  1544  00106E  0E21               	movlw	33
  1545  001070  6E13               	movwf	_state@time$F1787^0,c
  1546                           
  1547                           ;time.c: 145:             break;
  1548  001072  0C21               	retlw	33
  1549  001074                     l5591:
  1550                           
  1551                           ;time.c: 148:             LcPutChar(sysSecond/10+'0');
  1552  001074  0E0A               	movlw	10
  1553  001076  6E51               	movwf	___lbdiv@divisor^0,c
  1554  001078  5016               	movf	_sysSecond^0,w,c
  1555  00107A  EC5D  F00E         	call	___lbdiv
  1556  00107E  0F30               	addlw	48
  1557  001080  ECBC  F00E         	call	_LcPutChar
  1558                           
  1559                           ;time.c: 149:             state = 34;
  1560  001084  0E22               	movlw	34
  1561  001086  6E13               	movwf	_state@time$F1787^0,c
  1562                           
  1563                           ;time.c: 150:             break;
  1564  001088  0C22               	retlw	34
  1565  00108A                     l5595:
  1566                           
  1567                           ;time.c: 153:             LcPutChar(sysSecond%10+'0');
  1568  00108A  0E0A               	movlw	10
  1569  00108C  6E51               	movwf	___lbmod@divisor^0,c
  1570  00108E  5016               	movf	_sysSecond^0,w,c
  1571  001090  ECE5  F00E         	call	___lbmod
  1572  001094  0F30               	addlw	48
  1573  001096  ECBC  F00E         	call	_LcPutChar
  1574                           
  1575                           ;time.c: 154:             state = 35;
  1576  00109A  0E23               	movlw	35
  1577  00109C  6E13               	movwf	_state@time$F1787^0,c
  1578                           
  1579                           ;time.c: 155:             break;
  1580  00109E  0C23               	retlw	35
  1581  0010A0                     l5599:
  1582                           
  1583                           ;time.c: 157:             if (TiGetTics(timer) >= 1200){
  1584  0010A0  5014               	movf	_timer@time$F1786^0,w,c
  1585  0010A2  ECF8  F00E         	call	_TiGetTics
  1586  0010A6  BE52               	btfsc	(?_TiGetTics+1)^0,7,c
  1587  0010A8  0012               	return	
  1588  0010AA  ECC3  F004         	call	PL24	;call to abstracted procedure
  1589  0010AE  A0D8               	btfss	status,0,c
  1590  0010B0  0012               	return	
  1591                           
  1592                           ;time.c: 158:                 TiResetTics(timer);
  1593  0010B2  5014               	movf	_timer@time$F1786^0,w,c
  1594  0010B4  EC92  F00F         	call	_TiResetTics
  1595                           
  1596                           ;time.c: 159:                 updateSysTime();
  1597  0010B8  EC37  F000         	call	_updateSysTime	;wreg free
  1598                           
  1599                           ;time.c: 160:                 state = 30;
  1600  0010BC  0E1E               	movlw	30
  1601                           
  1602                           ;time.c: 161:                 LcGotoXY(0,1);
  1603  0010BE  D84C               	call	PL42	;call to abstracted procedure
  1604  0010C0  EF8F  F00E         	goto	_LcGotoXY
  1605  0010C4                     l5611:
  1606  0010C4  5013               	movf	_state@time$F1787^0,w,c
  1607  0010C6  6E5F               	movwf	??_timeMotor^0,c
  1608  0010C8  6A60               	clrf	(??_timeMotor+1)^0,c
  1609                           
  1610                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1611                           ; Switch size 1, requested type "space"
  1612                           ; Number of cases is 1, Range of values is 0 to 0
  1613                           ; switch strategies available:
  1614                           ; Name         Instructions Cycles
  1615                           ; simple_byte            4     3 (average)
  1616                           ;	Chosen strategy is simple_byte
  1617  0010CA  5060               	movf	(??_timeMotor+1)^0,w,c
  1618  0010CC  A4D8               	btfss	status,2,c
  1619  0010CE  0012               	return	
  1620                           
  1621                           ; Switch size 1, requested type "space"
  1622                           ; Number of cases is 24, Range of values is 0 to 35
  1623                           ; switch strategies available:
  1624                           ; Name         Instructions Cycles
  1625                           ; simple_byte           73    37 (average)
  1626                           ;	Chosen strategy is simple_byte
  1627  0010D0  505F               	movf	??_timeMotor^0,w,c
  1628  0010D2  E101 D6C3          	bz	l1039
  1629  0010D6  0A01               	xorlw	1	; case 1
  1630  0010D8  E101 D6D0          	bz	l5459
  1631  0010DC  0A03               	xorlw	3	; case 2
  1632  0010DE  E101 D6E1          	bz	l5471
  1633  0010E2  0A01               	xorlw	1	; case 3
  1634  0010E4  E101 D6E4          	bz	l5475
  1635  0010E8  0A07               	xorlw	7	; case 4
  1636  0010EA  E101 D6E5          	bz	l5479
  1637  0010EE  0A01               	xorlw	1	; case 5
  1638  0010F0  E101 D6E4          	bz	l5483
  1639  0010F4  0A03               	xorlw	3	; case 6
  1640  0010F6  E101 D6E5          	bz	l5487
  1641  0010FA  0A01               	xorlw	1	; case 7
  1642  0010FC  E101 D6E6          	bz	l5491
  1643  001100  0A13               	xorlw	19	; case 20
  1644  001102  E101 D6EE          	bz	l5497
  1645  001106  0A01               	xorlw	1	; case 21
  1646  001108  E101 D6F4          	bz	l5501
  1647  00110C  0A03               	xorlw	3	; case 22
  1648  00110E  E101 D6FA          	bz	l5505
  1649  001112  0A01               	xorlw	1	; case 23
  1650  001114  E101 D6FD          	bz	l5509
  1651  001118  0A0F               	xorlw	15	; case 24
  1652  00111A  E101 D703          	bz	l5513
  1653  00111E  0A01               	xorlw	1	; case 25
  1654  001120  E101 D70F          	bz	l5521
  1655  001124  0A03               	xorlw	3	; case 26
  1656  001126  E101 D726          	bz	l1059
  1657  00112A  0A01               	xorlw	1	; case 27
  1658  00112C  E101 D741          	bz	l1061
  1659  001130  0A07               	xorlw	7	; case 28
  1660  001132  E101 D757          	bz	l1063
  1661  001136  0A01               	xorlw	1	; case 29
  1662  001138  E101 D76F          	bz	l1065
  1663  00113C  0A03               	xorlw	3	; case 30
  1664  00113E  E101 D77D          	bz	l5579
  1665  001142  0A01               	xorlw	1	; case 31
  1666  001144  E086               	bz	l5583
  1667  001146  0A3F               	xorlw	63	; case 32
  1668  001148  E08F               	bz	l5587
  1669  00114A  0A01               	xorlw	1	; case 33
  1670  00114C  E093               	bz	l5591
  1671  00114E  0A03               	xorlw	3	; case 34
  1672  001150  E09C               	bz	l5595
  1673  001152  0A01               	xorlw	1	; case 35
  1674  001154  E0A5               	bz	l5599
  1675  001156  0012               	return		;funcret
  1676  001158                     __end_of_timeMotor:
  1677                           	callstack 0
  1678  001158                     PL42:
  1679                           	callstack 23
  1680  001158  6E13               	movwf	_state@time$F1787^0,c
  1681  00115A  0E01               	movlw	1
  1682  00115C  6E59               	movwf	LcGotoXY@Row^0,c
  1683  00115E  0C00               	retlw	0
  1684  001160                     __end_ofPL42:
  1685                           	callstack 0
  1686  001160                     PL72:
  1687                           	callstack 23
  1688  001160  0D0A               	mullw	10
  1689  001162  50F3               	movf	243,w,c
  1690  001164  245F               	addwf	??_timeMotor^0,w,c
  1691  001166  0FD0               	addlw	208
  1692  001168  0012               	return	
  1693  00116A                     __end_ofPL72:
  1694                           	callstack 0
  1695  00116A                     PL82:
  1696                           	callstack 23
  1697  00116A  0E0A               	movlw	10
  1698  00116C  6E51               	movwf	___lbdiv@divisor^0,c
  1699  00116E  5075               	movf	_minute^0,w,c
  1700  001170  0012               	return	
  1701  001172                     __end_ofPL82:
  1702                           	callstack 0
  1703  001172                     PL86:
  1704                           	callstack 23
  1705  001172  0E0A               	movlw	10
  1706  001174  6E51               	movwf	___lbmod@divisor^0,c
  1707  001176  5017               	movf	_second^0,w,c
  1708  001178  0012               	return	
  1709  00117A                     __end_ofPL86:
  1710                           	callstack 0
  1711  00117A                     PL92:
  1712                           	callstack 23
  1713  00117A  0E0A               	movlw	10
  1714  00117C  6E51               	movwf	___lbmod@divisor^0,c
  1715  00117E  5075               	movf	_minute^0,w,c
  1716  001180  0012               	return	
  1717  001182                     __end_ofPL92:
  1718                           	callstack 0
  1719  001182                     PL94:
  1720                           	callstack 23
  1721  001182  0E0A               	movlw	10
  1722  001184  6E51               	movwf	___lbdiv@divisor^0,c
  1723  001186  5017               	movf	_second^0,w,c
  1724  001188  0012               	return	
  1725  00118A                     __end_ofPL94:
  1726                           	callstack 0
  1727                           
  1728 ;; *************** function _updateSysTime *****************
  1729 ;; Defined at:
  1730 ;;		line 204 in file "time.c"
  1731 ;; Parameters:    Size  Location     Type
  1732 ;;		None
  1733 ;; Auto vars:     Size  Location     Type
  1734 ;;		None
  1735 ;; Return value:  Size  Location     Type
  1736 ;;                  1    wreg      void 
  1737 ;; Registers used:
  1738 ;;		wreg, status,2, status,0
  1739 ;; Tracked objects:
  1740 ;;		On entry : 0/0
  1741 ;;		On exit  : 0/0
  1742 ;;		Unchanged: 0/0
  1743 ;; Data sizes:     COMRAM   BANK0   BANK1
  1744 ;;      Params:         0       0       0
  1745 ;;      Locals:         0       0       0
  1746 ;;      Temps:          0       0       0
  1747 ;;      Totals:         0       0       0
  1748 ;;Total ram usage:        0 bytes
  1749 ;; Hardware stack levels used: 1
  1750 ;; Hardware stack levels required when called: 2
  1751 ;; This function calls:
  1752 ;;		Nothing
  1753 ;; This function is called by:
  1754 ;;		_timeMotor
  1755 ;; This function uses a non-reentrant model
  1756 ;;
  1757                           
  1758                           	psect	text2
  1759  00006E                     __ptext2:
  1760                           	callstack 0
  1761  00006E                     _updateSysTime:
  1762                           	callstack 27
  1763                           
  1764                           ;time.c: 205:     if (sysSecond == 59){
  1765                           
  1766                           ;incstack = 0
  1767  00006E  0E3B               	movlw	59
  1768  000070  1816               	xorwf	_sysSecond^0,w,c
  1769  000072  E103               	bnz	l2377
  1770                           
  1771                           ;time.c: 206:         sysSecond = 0;
  1772  000074  6A16               	clrf	_sysSecond^0,c
  1773                           
  1774                           ;time.c: 207:         sysMinute++;
  1775  000076  2A15               	incf	_sysMinute^0,f,c
  1776                           
  1777                           ;time.c: 208:     } else {
  1778  000078  0012               	return	
  1779  00007A                     l2377:
  1780                           
  1781                           ;time.c: 209:         sysSecond++;
  1782  00007A  2A16               	incf	_sysSecond^0,f,c
  1783  00007C  0012               	return		;funcret
  1784  00007E                     __end_of_updateSysTime:
  1785                           	callstack 0
  1786                           
  1787 ;; *************** function _updateGameTime *****************
  1788 ;; Defined at:
  1789 ;;		line 190 in file "time.c"
  1790 ;; Parameters:    Size  Location     Type
  1791 ;;		None
  1792 ;; Auto vars:     Size  Location     Type
  1793 ;;		None
  1794 ;; Return value:  Size  Location     Type
  1795 ;;                  1    wreg      void 
  1796 ;; Registers used:
  1797 ;;		wreg, status,2, status,0
  1798 ;; Tracked objects:
  1799 ;;		On entry : 0/0
  1800 ;;		On exit  : 0/0
  1801 ;;		Unchanged: 0/0
  1802 ;; Data sizes:     COMRAM   BANK0   BANK1
  1803 ;;      Params:         0       0       0
  1804 ;;      Locals:         0       0       0
  1805 ;;      Temps:          0       0       0
  1806 ;;      Totals:         0       0       0
  1807 ;;Total ram usage:        0 bytes
  1808 ;; Hardware stack levels used: 1
  1809 ;; Hardware stack levels required when called: 2
  1810 ;; This function calls:
  1811 ;;		Nothing
  1812 ;; This function is called by:
  1813 ;;		_timeMotor
  1814 ;; This function uses a non-reentrant model
  1815 ;;
  1816                           
  1817                           	psect	text3
  1818  001FB4                     __ptext3:
  1819                           	callstack 0
  1820  001FB4                     _updateGameTime:
  1821                           	callstack 27
  1822                           
  1823                           ;time.c: 192:     if (second == 0){
  1824                           
  1825                           ;incstack = 0
  1826  001FB4  5017               	movf	_second^0,w,c
  1827  001FB6  E108               	bnz	l2389
  1828                           
  1829                           ;time.c: 193:         if (minute == 0){
  1830  001FB8  5075               	movf	_minute^0,w,c
  1831  001FBA  E102               	bnz	l2385
  1832                           
  1833                           ;time.c: 194:             state = 0;
  1834  001FBC  6A13               	clrf	_state@time$F1787^0,c
  1835                           
  1836                           ;time.c: 195:         }else{
  1837  001FBE  0012               	return	
  1838  001FC0                     l2385:
  1839                           
  1840                           ;time.c: 196:             second = 59;
  1841  001FC0  0E3B               	movlw	59
  1842  001FC2  6E17               	movwf	_second^0,c
  1843                           
  1844                           ;time.c: 197:             minute--;
  1845  001FC4  0675               	decf	_minute^0,f,c
  1846  001FC6  0C3B               	retlw	59
  1847  001FC8                     l2389:
  1848                           
  1849                           ;time.c: 201:         second--;
  1850  001FC8  0617               	decf	_second^0,f,c
  1851  001FCA  0012               	return		;funcret
  1852  001FCC                     __end_of_updateGameTime:
  1853                           	callstack 0
  1854                           
  1855 ;; *************** function _sendChar *****************
  1856 ;; Defined at:
  1857 ;;		line 222 in file "time.c"
  1858 ;; Parameters:    Size  Location     Type
  1859 ;;		None
  1860 ;; Auto vars:     Size  Location     Type
  1861 ;;		None
  1862 ;; Return value:  Size  Location     Type
  1863 ;;                  1    wreg      void 
  1864 ;; Registers used:
  1865 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1866 ;; Tracked objects:
  1867 ;;		On entry : 0/0
  1868 ;;		On exit  : 0/0
  1869 ;;		Unchanged: 0/0
  1870 ;; Data sizes:     COMRAM   BANK0   BANK1
  1871 ;;      Params:         0       0       0
  1872 ;;      Locals:         0       0       0
  1873 ;;      Temps:          0       0       0
  1874 ;;      Totals:         0       0       0
  1875 ;;Total ram usage:        0 bytes
  1876 ;; Hardware stack levels used: 1
  1877 ;; Hardware stack levels required when called: 6
  1878 ;; This function calls:
  1879 ;;		_LcPutChar
  1880 ;;		_btAvailable
  1881 ;;		_btSendByte
  1882 ;; This function is called by:
  1883 ;;		_timeMotor
  1884 ;; This function uses a non-reentrant model
  1885 ;;
  1886                           
  1887                           	psect	text4
  1888  001F44                     __ptext4:
  1889                           	callstack 0
  1890  001F44                     _sendChar:
  1891                           	callstack 23
  1892                           
  1893                           ;time.c: 223:     if (btAvailable()){
  1894                           
  1895                           ;incstack = 0
  1896  001F44  EC9C  F000         	call	_btAvailable	;wreg free
  1897  001F48  0900               	iorlw	0
  1898  001F4A  B4D8               	btfsc	status,2,c
  1899  001F4C  0012               	return	
  1900                           
  1901                           ;time.c: 224:         LcPutChar(val+'0');
  1902  001F4E  5011               	movf	_val@time$F1789^0,w,c
  1903  001F50  0F30               	addlw	48
  1904  001F52  ECBC  F00E         	call	_LcPutChar
  1905                           
  1906                           ;time.c: 225:         btSendByte(val+'0');
  1907  001F56  5011               	movf	_val@time$F1789^0,w,c
  1908  001F58  0F30               	addlw	48
  1909  001F5A  ECF2  F00F         	call	_btSendByte
  1910                           
  1911                           ;time.c: 226:         state++;
  1912  001F5E  2A13               	incf	_state@time$F1787^0,f,c
  1913  001F60  0012               	return		;funcret
  1914  001F62                     __end_of_sendChar:
  1915                           	callstack 0
  1916                           
  1917 ;; *************** function _btSendByte *****************
  1918 ;; Defined at:
  1919 ;;		line 134 in file "SIO.c"
  1920 ;; Parameters:    Size  Location     Type
  1921 ;;  byte            1    wreg     unsigned char 
  1922 ;; Auto vars:     Size  Location     Type
  1923 ;;  byte            1    6[COMRAM] unsigned char 
  1924 ;; Return value:  Size  Location     Type
  1925 ;;                  1    wreg      void 
  1926 ;; Registers used:
  1927 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1928 ;; Tracked objects:
  1929 ;;		On entry : 0/0
  1930 ;;		On exit  : 0/0
  1931 ;;		Unchanged: 0/0
  1932 ;; Data sizes:     COMRAM   BANK0   BANK1
  1933 ;;      Params:         0       0       0
  1934 ;;      Locals:         1       0       0
  1935 ;;      Temps:          0       0       0
  1936 ;;      Totals:         1       0       0
  1937 ;;Total ram usage:        1 bytes
  1938 ;; Hardware stack levels used: 1
  1939 ;; Hardware stack levels required when called: 3
  1940 ;; This function calls:
  1941 ;;		_TiResetTics
  1942 ;; This function is called by:
  1943 ;;		_timeMotor
  1944 ;;		_sendChar
  1945 ;; This function uses a non-reentrant model
  1946 ;;
  1947                           
  1948                           	psect	text5
  1949  001FE4                     __ptext5:
  1950                           	callstack 0
  1951  001FE4                     _btSendByte:
  1952                           	callstack 25
  1953                           
  1954                           ;incstack = 0
  1955                           ;btSendByte@byte stored from wreg
  1956  001FE4  6E52               	movwf	btSendByte@byte^0,c
  1957                           
  1958                           ;SIO.c: 135:     if (allowed){
  1959  001FE6  5022               	movf	_allowed^0,w,c
  1960  001FE8  B4D8               	btfsc	status,2,c
  1961  001FEA  0012               	return	
  1962                           
  1963                           ;SIO.c: 136:         stateTX = 1;
  1964  001FEC  0E01               	movlw	1
  1965  001FEE  6E26               	movwf	_stateTX^0,c
  1966                           
  1967                           ;SIO.c: 137:         dataTX = byte;
  1968  001FF0  C052  F024         	movff	btSendByte@byte,_dataTX
  1969                           
  1970                           ;SIO.c: 138:         TiResetTics(timerTX);
  1971  001FF4  5025               	movf	_timerTX^0,w,c
  1972  001FF6  EF92  F00F         	goto	_TiResetTics
  1973  001FFA                     __end_of_btSendByte:
  1974                           	callstack 0
  1975                           
  1976 ;; *************** function _btAvailable *****************
  1977 ;; Defined at:
  1978 ;;		line 131 in file "SIO.c"
  1979 ;; Parameters:    Size  Location     Type
  1980 ;;		None
  1981 ;; Auto vars:     Size  Location     Type
  1982 ;;		None
  1983 ;; Return value:  Size  Location     Type
  1984 ;;                  1    wreg      unsigned char 
  1985 ;; Registers used:
  1986 ;;		wreg, status,2
  1987 ;; Tracked objects:
  1988 ;;		On entry : 0/0
  1989 ;;		On exit  : 0/0
  1990 ;;		Unchanged: 0/0
  1991 ;; Data sizes:     COMRAM   BANK0   BANK1
  1992 ;;      Params:         0       0       0
  1993 ;;      Locals:         0       0       0
  1994 ;;      Temps:          0       0       0
  1995 ;;      Totals:         0       0       0
  1996 ;;Total ram usage:        0 bytes
  1997 ;; Hardware stack levels used: 1
  1998 ;; Hardware stack levels required when called: 2
  1999 ;; This function calls:
  2000 ;;		Nothing
  2001 ;; This function is called by:
  2002 ;;		_timeMotor
  2003 ;;		_sendChar
  2004 ;; This function uses a non-reentrant model
  2005 ;;
  2006                           
  2007                           	psect	text6
  2008  000138                     __ptext6:
  2009                           	callstack 0
  2010  000138                     _btAvailable:
  2011                           	callstack 26
  2012                           
  2013                           ;SIO.c: 132:     return stateTX == 0;
  2014                           
  2015                           ;incstack = 0
  2016  000138  5026               	movf	_stateTX^0,w,c
  2017  00013A  B4D8               	btfsc	status,2,c
  2018  00013C  0C01               	retlw	1
  2019  00013E  0C00               	retlw	0	;funcret
  2020  000140                     __end_of_btAvailable:
  2021                           	callstack 0
  2022                           
  2023 ;; *************** function _menuMotor *****************
  2024 ;; Defined at:
  2025 ;;		line 42 in file "Menu.c"
  2026 ;; Parameters:    Size  Location     Type
  2027 ;;		None
  2028 ;; Auto vars:     Size  Location     Type
  2029 ;;		None
  2030 ;; Return value:  Size  Location     Type
  2031 ;;                  1    wreg      void 
  2032 ;; Registers used:
  2033 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2034 ;; Tracked objects:
  2035 ;;		On entry : 0/0
  2036 ;;		On exit  : 0/0
  2037 ;;		Unchanged: 0/0
  2038 ;; Data sizes:     COMRAM   BANK0   BANK1
  2039 ;;      Params:         0       0       0
  2040 ;;      Locals:         0       0       0
  2041 ;;      Temps:          2       0       0
  2042 ;;      Totals:         2       0       0
  2043 ;;Total ram usage:        2 bytes
  2044 ;; Hardware stack levels used: 1
  2045 ;; Hardware stack levels required when called: 7
  2046 ;; This function calls:
  2047 ;;		_DaFindUser
  2048 ;;		_DaGetIdle
  2049 ;;		_DaGetNumScores
  2050 ;;		_DaGetStatus
  2051 ;;		_DaSaveScore
  2052 ;;		_DaSaveUser
  2053 ;;		_JoDirection
  2054 ;;		_JoMoved
  2055 ;;		_JoSetMode
  2056 ;;		_KeGetCharValue
  2057 ;;		_KeGetGenericValue
  2058 ;;		_KeSetMode
  2059 ;;		_LcCursorOff
  2060 ;;		_LcCursorOn
  2061 ;;		_LcGotoXY
  2062 ;;		_LcPutChar
  2063 ;;		_LcScroll
  2064 ;;		_SiIsAvailable
  2065 ;;		_SiReadByte
  2066 ;;		_SiRecievedByte
  2067 ;;		_SiSendChar
  2068 ;;		_TiGetTics
  2069 ;;		_TiResetTics
  2070 ;;		___lbdiv
  2071 ;;		___lbmod
  2072 ;;		_displayError
  2073 ;;		_displayLogOut
  2074 ;;		_displayResults
  2075 ;;		_displayScoresMarquee
  2076 ;;		_displayString
  2077 ;;		_displaySysTime
  2078 ;;		_displayTimeRemaining
  2079 ;;		_getPresses
  2080 ;;		_incrementPosition
  2081 ;;		_isPressed
  2082 ;;		_mainMenu
  2083 ;;		_modifyTime
  2084 ;;		_resetDisplay
  2085 ;;		_resetPosition
  2086 ;;		_resetTimer
  2087 ;;		_setResetTXRX
  2088 ;;		_startSong
  2089 ;;		_startTimer
  2090 ;;		_stopSong
  2091 ;;		_stopTimer
  2092 ;;		_timerOver
  2093 ;; This function is called by:
  2094 ;;		_main
  2095 ;; This function uses a non-reentrant model
  2096 ;;
  2097                           
  2098                           	psect	text7
  2099  0002D0                     __ptext7:
  2100                           	callstack 0
  2101  0002D0                     _menuMotor:
  2102                           	callstack 23
  2103                           
  2104                           ;Menu.c: 43:     static char state = 0;;Menu.c: 44:     switch (state){
  2105                           
  2106                           ;incstack = 0
  2107  0002D0  D2EB               	goto	l5169
  2108  0002D2                     l4665:
  2109                           
  2110                           ;Menu.c: 46:             mUser.username[pos] = '\0';
  2111  0002D2  5034               	movf	_pos^0,w,c
  2112  0002D4  0FEC               	addlw	low _mUser
  2113  0002D6  6ED9               	movwf	fsr2l,c
  2114  0002D8  6ADA               	clrf	fsr2h,c
  2115  0002DA  6ADF               	clrf	indf2,c
  2116                           
  2117                           ;Menu.c: 47:             mUser.password[pos] = '\0';
  2118  0002DC  5034               	movf	_pos^0,w,c
  2119  0002DE  0FF5               	addlw	low (_mUser+9)
  2120  0002E0  6ED9               	movwf	fsr2l,c
  2121  0002E2  6ADA               	clrf	fsr2h,c
  2122  0002E4  6ADF               	clrf	indf2,c
  2123                           
  2124                           ;Menu.c: 48:             pos++;
  2125  0002E6  2A34               	incf	_pos^0,f,c
  2126                           
  2127                           ;Menu.c: 49:             if (pos == 9){
  2128  0002E8  0E09               	movlw	9
  2129  0002EA  1834               	xorwf	_pos^0,w,c
  2130  0002EC  A4D8               	btfss	status,2,c
  2131  0002EE  0012               	return	
  2132                           
  2133                           ;Menu.c: 50:                 state = 1;
  2134  0002F0  0E01               	movlw	1
  2135  0002F2  6E31               	movwf	menuMotor@state^0,c
  2136                           
  2137                           ;Menu.c: 51:                 resetDisplay();
  2138  0002F4  EC7E  F000         	call	_resetDisplay	;wreg free
  2139  0002F8                     l4675:
  2140                           
  2141                           ;Menu.c: 52:                 pos = 0;
  2142  0002F8  6A34               	clrf	_pos^0,c
  2143                           
  2144                           ;Menu.c: 54:             break;
  2145                           
  2146                           ;Menu.c: 53:             }
  2147  0002FA  0012               	return	
  2148  0002FC                     l4677:
  2149                           
  2150                           ;Menu.c: 56:             if (skipState){
  2151  0002FC  5032               	movf	_skipState^0,w,c
  2152  0002FE  E006               	bz	l4683
  2153                           
  2154                           ;Menu.c: 57:                 state = 3;
  2155  000300  0E03               	movlw	3
  2156  000302  6E31               	movwf	menuMotor@state^0,c
  2157                           
  2158                           ;Menu.c: 58:                 val = 1;
  2159  000304  0E01               	movlw	1
  2160  000306  6E35               	movwf	_val^0,c
  2161                           
  2162                           ;Menu.c: 59:                 skipState = 0;
  2163  000308  6A32               	clrf	_skipState^0,c
  2164                           
  2165                           ;Menu.c: 60:             }else {
  2166  00030A  0012               	return	
  2167  00030C                     l4683:
  2168                           
  2169                           ;Menu.c: 61:                 displayString(&LOGINMENU[LCDrow]);
  2170  00030C  5038               	movf	_LCDrow^0,w,c
  2171  00030E  0D0B               	mullw	11
  2172  000310  50F3               	movf	243,w,c
  2173  000312  0F9F               	addlw	low _LOGINMENU
  2174  000314  6E5F               	movwf	displayString@string^0,c
  2175  000316  EC0B  F00F         	call	_displayString	;wreg free
  2176                           
  2177                           ;Menu.c: 62:                 if (LCDrow == 2){
  2178  00031A  0E02               	movlw	2
  2179  00031C  1838               	xorwf	_LCDrow^0,w,c
  2180  00031E  A4D8               	btfss	status,2,c
  2181  000320  0012               	return	
  2182                           
  2183                           ;Menu.c: 63:                     LcCursorOff();
  2184  000322  EC92  F000         	call	_LcCursorOff	;wreg free
  2185                           
  2186                           ;Menu.c: 64:                     KeSetMode(0);
  2187  000326  0E00               	movlw	0
  2188  000328  EC1D  F00F         	call	_KeSetMode
  2189                           
  2190                           ;Menu.c: 65:                     state = 2;
  2191  00032C  0E02               	movlw	2
  2192  00032E  6E31               	movwf	menuMotor@state^0,c
  2193  000330  0C02               	retlw	2
  2194  000332                     l4691:
  2195                           
  2196                           ;Menu.c: 71:             if (isPressed()){
  2197  000332  ECE6  F00F         	call	_isPressed	;wreg free
  2198  000336  0900               	iorlw	0
  2199  000338  B4D8               	btfsc	status,2,c
  2200  00033A  0012               	return	
  2201                           
  2202                           ;Menu.c: 72:                 val = KeGetGenericValue() - '0';
  2203  00033C  EC72  F00F         	call	_KeGetGenericValue	;wreg free
  2204  000340  0FD0               	addlw	208
  2205  000342  6E35               	movwf	_val^0,c
  2206                           
  2207                           ;Menu.c: 73:                 if (val == 1||val == 2){
  2208  000344  0435               	decf	_val^0,w,c
  2209  000346  E004               	bz	u3730
  2210  000348  0E02               	movlw	2
  2211  00034A  1835               	xorwf	_val^0,w,c
  2212  00034C  A4D8               	btfss	status,2,c
  2213  00034E  0012               	return	
  2214  000350                     u3730:
  2215                           
  2216                           ;Menu.c: 74:                     resetDisplay();
  2217  000350  EC7E  F000         	call	_resetDisplay	;wreg free
  2218                           
  2219                           ;Menu.c: 75:                     state = 3;
  2220  000354  0E03               	movlw	3
  2221  000356  6E31               	movwf	menuMotor@state^0,c
  2222  000358  0C03               	retlw	3
  2223  00035A                     l4703:
  2224                           
  2225                           ;Menu.c: 81:             displayString(&LOGREGSCREEN[LCDrow]);
  2226  00035A  5038               	movf	_LCDrow^0,w,c
  2227  00035C  0D06               	mullw	6
  2228  00035E  50F3               	movf	243,w,c
  2229  000360  0FE0               	addlw	low _LOGREGSCREEN
  2230  000362  6E5F               	movwf	displayString@string^0,c
  2231  000364  EC0B  F00F         	call	_displayString	;wreg free
  2232                           
  2233                           ;Menu.c: 82:             if (LCDrow == 2){
  2234  000368  0E02               	movlw	2
  2235  00036A  1838               	xorwf	_LCDrow^0,w,c
  2236  00036C  A4D8               	btfss	status,2,c
  2237  00036E  0012               	return	
  2238                           
  2239                           ;Menu.c: 83:                 LCDrow = 0;
  2240  000370  6A38               	clrf	_LCDrow^0,c
  2241                           
  2242                           ;Menu.c: 84:                 LCDcol = 5;
  2243                           
  2244                           ;Menu.c: 85:                 LcGotoXY(LCDcol,LCDrow);
  2245  000372  DB1C               	call	PL60	;call to abstracted procedure
  2246  000374  EC8F  F00E         	call	_LcGotoXY
  2247                           
  2248                           ;Menu.c: 86:                 LcCursorOn();
  2249  000378  EC8D  F000         	call	_LcCursorOn	;wreg free
  2250                           
  2251                           ;Menu.c: 87:                 state = 4;
  2252  00037C  0E04               	movlw	4
  2253  00037E  6E31               	movwf	menuMotor@state^0,c
  2254                           
  2255                           ;Menu.c: 88:                 pos = 0;
  2256  000380  6A34               	clrf	_pos^0,c
  2257  000382  D034               	goto	l4749
  2258  000384                     l4719:
  2259                           
  2260                           ;Menu.c: 93:             if (LCDcol >= 12 && TiGetTics(timer) >= 1200){
  2261  000384  0E0B               	movlw	11
  2262  000386  6437               	cpfsgt	_LCDcol^0,c
  2263  000388  D00A               	goto	l4725
  2264  00038A  5039               	movf	_timer^0,w,c
  2265  00038C  ECF8  F00E         	call	_TiGetTics
  2266  000390  BE52               	btfsc	(?_TiGetTics+1)^0,7,c
  2267  000392  D005               	goto	l4725
  2268  000394  DAF8               	call	PL24	;call to abstracted procedure
  2269  000396  E303               	bnc	l4725
  2270                           
  2271                           ;Menu.c: 94:                 state = 5;
  2272  000398  0E05               	movlw	5
  2273  00039A  6E31               	movwf	menuMotor@state^0,c
  2274                           
  2275                           ;Menu.c: 95:             }else if (isPressed()){
  2276  00039C  0C05               	retlw	5
  2277  00039E                     l4725:
  2278  00039E  ECE6  F00F         	call	_isPressed	;wreg free
  2279  0003A2  0900               	iorlw	0
  2280  0003A4  B4D8               	btfsc	status,2,c
  2281  0003A6  0012               	return	
  2282                           
  2283                           ;Menu.c: 113:                 TiResetTics(timer);
  2284  0003A8  5039               	movf	_timer^0,w,c
  2285  0003AA  EC92  F00F         	call	_TiResetTics
  2286                           
  2287                           ;Menu.c: 114:                 if (getPresses() == 2){
  2288  0003AE  ECC7  F000         	call	_getPresses	;wreg free
  2289  0003B2  0A02               	xorlw	2
  2290  0003B4  E104               	bnz	l4735
  2291                           
  2292                           ;Menu.c: 115:                     LcGotoXY(LCDcol,LCDrow);
  2293  0003B6  DB00               	call	PL64	;call to abstracted procedure
  2294  0003B8  EC8F  F00E         	call	_LcGotoXY
  2295                           
  2296                           ;Menu.c: 116:                     LCDcol--;
  2297  0003BC  0637               	decf	_LCDcol^0,f,c
  2298  0003BE                     l4735:
  2299                           
  2300                           ;Menu.c: 118:                 if (KeGetGenericValue() != '#'){
  2301  0003BE  EC72  F00F         	call	_KeGetGenericValue	;wreg free
  2302  0003C2  0A23               	xorlw	35
  2303  0003C4  E011               	bz	l4747
  2304                           
  2305                           ;Menu.c: 119:                     mUser.username[LCDcol-4] = KeGetCharValue();
  2306  0003C6  DAED               	call	PL58	;call to abstracted procedure
  2307  0003C8  ECA8  F000         	call	_KeGetCharValue	;wreg free
  2308  0003CC  6EDF               	movwf	indf2,c
  2309                           
  2310                           ;Menu.c: 120:                     LcPutChar(mUser.username[LCDcol-4]);
  2311  0003CE  5037               	movf	_LCDcol^0,w,c
  2312  0003D0  0FE8               	addlw	low (_mUser+252)
  2313  0003D2  DADE               	call	PL32	;call to abstracted procedure
  2314  0003D4  ECBC  F00E         	call	_LcPutChar
  2315                           
  2316                           ;Menu.c: 121:                     LCDcol++;
  2317  0003D8  2A37               	incf	_LCDcol^0,f,c
  2318                           
  2319                           ;Menu.c: 122:                     if (getPresses() == 1){
  2320  0003DA  ECC7  F000         	call	_getPresses	;wreg free
  2321  0003DE  06E8               	decf	wreg,f,c
  2322  0003E0  A4D8               	btfss	status,2,c
  2323  0003E2  0012               	return	
  2324  0003E4                     u3800:
  2325                           
  2326                           ;Menu.c: 123:                       pos++;
  2327  0003E4  2A34               	incf	_pos^0,f,c
  2328  0003E6  0012               	return	
  2329  0003E8                     l4747:
  2330                           
  2331                           ;Menu.c: 129:                     state = 5;
  2332  0003E8  0E05               	movlw	5
  2333  0003EA  6E31               	movwf	menuMotor@state^0,c
  2334  0003EC                     l4749:
  2335                           
  2336                           ;Menu.c: 130:                     KeSetMode(1);
  2337  0003EC  0E01               	movlw	1
  2338  0003EE  EF1D  F00F         	goto	_KeSetMode
  2339  0003F2                     l4751:
  2340                           
  2341                           ;Menu.c: 137:             mUser.username[LCDcol-4] = '\0';
  2342  0003F2  DAD7               	call	PL58	;call to abstracted procedure
  2343  0003F4  0E00               	movlw	0
  2344  0003F6  6EDF               	movwf	indf2,c
  2345                           
  2346                           ;Menu.c: 138:             LCDrow = 1;
  2347  0003F8  0E01               	movlw	1
  2348  0003FA  6E38               	movwf	_LCDrow^0,c
  2349                           
  2350                           ;Menu.c: 139:             LCDcol = 5;
  2351                           
  2352                           ;Menu.c: 140:             LcGotoXY(LCDcol,LCDrow);
  2353  0003FC  DAD7               	call	PL60	;call to abstracted procedure
  2354  0003FE  EC8F  F00E         	call	_LcGotoXY
  2355                           
  2356                           ;Menu.c: 141:             state = 6;
  2357  000402  0E06               	movlw	6
  2358  000404  6E31               	movwf	menuMotor@state^0,c
  2359  000406  D778               	goto	l4675
  2360  000408                     l4763:
  2361                           
  2362                           ;Menu.c: 145:             if (isPressed()){
  2363  000408  ECE6  F00F         	call	_isPressed	;wreg free
  2364  00040C  0900               	iorlw	0
  2365  00040E  B4D8               	btfsc	status,2,c
  2366  000410  0012               	return	
  2367                           
  2368                           ;Menu.c: 146:                 if (getPresses() == 2){
  2369  000412  ECC7  F000         	call	_getPresses	;wreg free
  2370  000416  0A02               	xorlw	2
  2371  000418  E104               	bnz	l4771
  2372                           
  2373                           ;Menu.c: 147:                     LcGotoXY(LCDcol,LCDrow);
  2374  00041A  DACE               	call	PL64	;call to abstracted procedure
  2375  00041C  EC8F  F00E         	call	_LcGotoXY
  2376                           
  2377                           ;Menu.c: 148:                     LCDcol--;
  2378  000420  0637               	decf	_LCDcol^0,f,c
  2379  000422                     l4771:
  2380                           
  2381                           ;Menu.c: 151:                 if (KeGetGenericValue() != '#'){
  2382  000422  EC72  F00F         	call	_KeGetGenericValue	;wreg free
  2383  000426  0A23               	xorlw	35
  2384  000428  E00F               	bz	l4783
  2385                           
  2386                           ;Menu.c: 152:                     mUser.password[LCDcol-4] = KeGetCharValue();
  2387  00042A  DAB6               	call	PL56	;call to abstracted procedure
  2388  00042C  ECA8  F000         	call	_KeGetCharValue	;wreg free
  2389  000430  6EDF               	movwf	indf2,c
  2390                           
  2391                           ;Menu.c: 153:                     LcPutChar(mUser.password[LCDcol-4]);
  2392  000432  5037               	movf	_LCDcol^0,w,c
  2393  000434  0FF1               	addlw	low (_mUser+5)
  2394  000436  DAAC               	call	PL32	;call to abstracted procedure
  2395  000438  ECBC  F00E         	call	_LcPutChar
  2396                           
  2397                           ;Menu.c: 154:                     LCDcol++;
  2398  00043C  2A37               	incf	_LCDcol^0,f,c
  2399                           
  2400                           ;Menu.c: 155:                     if (getPresses() == 1){
  2401  00043E  ECC7  F000         	call	_getPresses	;wreg free
  2402  000442  06E8               	decf	wreg,f,c
  2403  000444  E0CF               	bz	u3800
  2404  000446  0012               	return	
  2405  000448                     l4783:
  2406                           
  2407                           ;Menu.c: 159:                     mUser.password[LCDcol-4] = '\0';
  2408  000448  DAA7               	call	PL56	;call to abstracted procedure
  2409  00044A  6ADF               	clrf	indf2,c
  2410                           
  2411                           ;Menu.c: 160:                     pos = 0;
  2412  00044C  6A34               	clrf	_pos^0,c
  2413                           
  2414                           ;Menu.c: 161:                     state = 7;
  2415  00044E  0E07               	movlw	7
  2416  000450  6E31               	movwf	menuMotor@state^0,c
  2417  000452  0C07               	retlw	7
  2418  000454                     l4789:
  2419                           
  2420                           ;Menu.c: 167:             if (val == 1){
  2421  000454  0435               	decf	_val^0,w,c
  2422  000456  E105               	bnz	l4793
  2423                           
  2424                           ;Menu.c: 168:                 DaFindUser(&mUser);
  2425  000458  0EEC               	movlw	low _mUser
  2426  00045A  6E5E               	movwf	DaFindUser@logUser^0,c
  2427  00045C  EC52  F00F         	call	_DaFindUser	;wreg free
  2428                           
  2429                           ;Menu.c: 170:             } else {
  2430  000460  D004               	goto	l4795
  2431  000462                     l4793:
  2432                           
  2433                           ;Menu.c: 171:                 DaSaveUser(&mUser);
  2434  000462  0EEC               	movlw	low _mUser
  2435  000464  6E51               	movwf	DaSaveUser@regUser^0,c
  2436  000466  ECCD  F00F         	call	_DaSaveUser	;wreg free
  2437  00046A                     l4795:
  2438                           
  2439                           ;Menu.c: 173:             state = 8;
  2440  00046A  0E08               	movlw	8
  2441  00046C  6E31               	movwf	menuMotor@state^0,c
  2442                           
  2443                           ;Menu.c: 174:             break;
  2444  00046E  0C08               	retlw	8
  2445  000470                     l4797:
  2446                           
  2447                           ;Menu.c: 176:             if (DaGetIdle()){
  2448  000470  ECB0  F000         	call	_DaGetIdle	;wreg free
  2449  000474  0900               	iorlw	0
  2450  000476  B4D8               	btfsc	status,2,c
  2451  000478  0012               	return	
  2452                           
  2453                           ;Menu.c: 177:                 state = 0;
  2454  00047A  6A31               	clrf	menuMotor@state^0,c
  2455                           
  2456                           ;Menu.c: 178:                 KeSetMode(0);
  2457  00047C  0E00               	movlw	0
  2458  00047E  EC1D  F00F         	call	_KeSetMode
  2459                           
  2460                           ;Menu.c: 179:                 pos = 0;
  2461  000482  6A34               	clrf	_pos^0,c
  2462                           
  2463                           ;Menu.c: 180:                 if (val == 1){
  2464  000484  0435               	decf	_val^0,w,c
  2465  000486  E10B               	bnz	l4815
  2466                           
  2467                           ;Menu.c: 181:                     resetDisplay();
  2468  000488  EC7E  F000         	call	_resetDisplay	;wreg free
  2469                           
  2470                           ;Menu.c: 182:                     if (DaGetStatus() == 0){
  2471  00048C  ECCF  F000         	call	_DaGetStatus	;wreg free
  2472  000490  0900               	iorlw	0
  2473  000492  E002 EF7E  F000    	bnz	_resetDisplay
  2474                           
  2475                           ;Menu.c: 184:                         val =0;
  2476  000498  6A35               	clrf	_val^0,c
  2477  00049A                     l4813:
  2478                           
  2479                           ;Menu.c: 185:                         state = 9;
  2480  00049A  0E09               	movlw	9
  2481  00049C  D128               	goto	L3
  2482  00049E                     l4815:
  2483                           
  2484                           ;Menu.c: 188:                     if (DaGetStatus() == 3){
  2485  00049E  ECCF  F000         	call	_DaGetStatus	;wreg free
  2486  0004A2  0A03               	xorlw	3
  2487  0004A4  E002 EF7E  F000    	bnz	_resetDisplay
  2488                           
  2489                           ;Menu.c: 190:                         skipState = 1;
  2490  0004AA  0E01               	movlw	1
  2491  0004AC  6E32               	movwf	_skipState^0,c
  2492                           
  2493                           ;Menu.c: 194:                 resetDisplay();
  2494  0004AE  EF7E  F000         	goto	_resetDisplay	;wreg free
  2495  0004B2                     l4821:
  2496                           
  2497                           ;Menu.c: 198:             mainMenu();
  2498  0004B2  EC4B  F00B         	call	_mainMenu	;wreg free
  2499                           
  2500                           ;Menu.c: 199:             if (LCDrow == 2 || LCDrow+val >= 5){
  2501  0004B6  0E02               	movlw	2
  2502  0004B8  1838               	xorwf	_LCDrow^0,w,c
  2503  0004BA  E00F               	bz	u3910
  2504  0004BC  5035               	movf	_val^0,w,c
  2505  0004BE  C038  F061         	movff	_LCDrow,??_menuMotor
  2506  0004C2  6A62               	clrf	(??_menuMotor+1)^0,c
  2507  0004C4  2661               	addwf	??_menuMotor^0,f,c
  2508  0004C6  0E00               	movlw	0
  2509  0004C8  2262               	addwfc	(??_menuMotor+1)^0,f,c
  2510  0004CA  BE62               	btfsc	(??_menuMotor+1)^0,7,c
  2511  0004CC  0C00               	retlw	0
  2512  0004CE  5062               	movf	(??_menuMotor+1)^0,w,c
  2513  0004D0  E104               	bnz	u3910
  2514  0004D2  0E05               	movlw	5
  2515  0004D4  5C61               	subwf	??_menuMotor^0,w,c
  2516  0004D6  A0D8               	btfss	status,0,c
  2517  0004D8  0012               	return	
  2518  0004DA                     u3910:
  2519                           
  2520                           ;Menu.c: 200:                 LcCursorOff();
  2521  0004DA  EC92  F000         	call	_LcCursorOff	;wreg free
  2522                           
  2523                           ;Menu.c: 201:                 state = 10;
  2524  0004DE  0E0A               	movlw	10
  2525  0004E0  6E31               	movwf	menuMotor@state^0,c
  2526  0004E2  0C0A               	retlw	10
  2527  0004E4                     l4831:
  2528                           
  2529                           ;Menu.c: 205:             if (!JoMoved()){
  2530  0004E4  ECCB  F000         	call	_JoMoved	;wreg free
  2531  0004E8  0900               	iorlw	0
  2532  0004EA  A4D8               	btfss	status,2,c
  2533  0004EC  0012               	return	
  2534                           
  2535                           ;Menu.c: 206:                 state = 11;
  2536  0004EE  0E0B               	movlw	11
  2537  0004F0  D0B4               	goto	L4
  2538  0004F2                     l4835:
  2539                           
  2540                           ;Menu.c: 207:                 TiResetTics(timer);
  2541  0004F2  5039               	movf	_timer^0,w,c
  2542  0004F4  EF92  F00F         	goto	_TiResetTics
  2543  0004F8                     l4837:
  2544                           
  2545                           ;Menu.c: 211:             if (val < 4 && val > 0){
  2546  0004F8  0E04               	movlw	4
  2547  0004FA  6035               	cpfslt	_val^0,c
  2548  0004FC  D015               	goto	l546
  2549  0004FE  5035               	movf	_val^0,w,c
  2550  000500  E013               	bz	l546
  2551                           
  2552                           ;Menu.c: 212:                 if (TiGetTics(timer) >= 1200){
  2553  000502  5039               	movf	_timer^0,w,c
  2554  000504  ECF8  F00E         	call	_TiGetTics
  2555  000508  BE52               	btfsc	(?_TiGetTics+1)^0,7,c
  2556  00050A  D00F               	goto	l4851
  2557  00050C  DA3C               	call	PL24	;call to abstracted procedure
  2558  00050E  E30D               	bnc	l4851
  2559                           
  2560                           ;Menu.c: 213:                     LCDcolm++;
  2561  000510  2A36               	incf	_LCDcolm^0,f,c
  2562                           
  2563                           ;Menu.c: 214:                     LCDcolm = LCDcolm % MAINMENUSIZE[2];
  2564  000512  C072  F051         	movff	_MAINMENUSIZE+2,___lbmod@divisor
  2565  000516  5036               	movf	_LCDcolm^0,w,c
  2566  000518  ECE5  F00E         	call	___lbmod
  2567  00051C  6E36               	movwf	_LCDcolm^0,c
  2568                           
  2569                           ;Menu.c: 215:                     state = 9;
  2570  00051E  0E09               	movlw	9
  2571  000520  6E31               	movwf	menuMotor@state^0,c
  2572                           
  2573                           ;Menu.c: 216:                     resetDisplay();
  2574  000522  EC7E  F000         	call	_resetDisplay	;wreg free
  2575  000526  D001               	goto	l4851
  2576  000528                     l546:
  2577                           
  2578                           ;Menu.c: 219:                 LCDcolm = 0;
  2579  000528  6A36               	clrf	_LCDcolm^0,c
  2580  00052A                     l4851:
  2581                           
  2582                           ;Menu.c: 221:             if (JoMoved()){
  2583  00052A  ECCB  F000         	call	_JoMoved	;wreg free
  2584  00052E  0900               	iorlw	0
  2585  000530  E011               	bz	l4869
  2586                           
  2587                           ;Menu.c: 222:                 if (JoDirection() == 'S' && val < 4){
  2588  000532  ECCD  F000         	call	_JoDirection	;wreg free
  2589  000536  0A53               	xorlw	83
  2590  000538  E105               	bnz	l4859
  2591  00053A  0E04               	movlw	4
  2592  00053C  6035               	cpfslt	_val^0,c
  2593  00053E  D002               	goto	l4859
  2594                           
  2595                           ;Menu.c: 223:                     val++;
  2596  000540  2A35               	incf	_val^0,f,c
  2597                           
  2598                           ;Menu.c: 224:                 } else if(JoDirection() == 'W' && val > 0){
  2599  000542  D7AB               	goto	l4813
  2600  000544                     l4859:
  2601  000544  ECCD  F000         	call	_JoDirection	;wreg free
  2602  000548  0A57               	xorlw	87
  2603  00054A  E1A7               	bnz	l4813
  2604  00054C  5035               	movf	_val^0,w,c
  2605  00054E  E0A5               	bz	l4813
  2606                           
  2607                           ;Menu.c: 225:                     val--;
  2608  000550  0635               	decf	_val^0,f,c
  2609  000552  D7A3               	goto	l4813
  2610  000554                     l4869:
  2611  000554  ECE6  F00F         	call	_isPressed	;wreg free
  2612  000558  0900               	iorlw	0
  2613  00055A  B4D8               	btfsc	status,2,c
  2614  00055C  0012               	return	
  2615  00055E  EC72  F00F         	call	_KeGetGenericValue	;wreg free
  2616  000562  0A23               	xorlw	35
  2617  000564  A4D8               	btfss	status,2,c
  2618  000566  0012               	return	
  2619                           
  2620                           ;Menu.c: 230:                 resetDisplay();
  2621  000568  EC7E  F000         	call	_resetDisplay	;wreg free
  2622                           
  2623                           ;Menu.c: 231:                 state = (val+1)*20;
  2624  00056C  2835               	incf	_val^0,w,c
  2625  00056E  0D14               	mullw	20
  2626  000570  CFF3 F031          	movff	prodl,menuMotor@state
  2627                           
  2628                           ;Menu.c: 232:                 resetPosition();
  2629  000574  ECC3  F000         	call	_resetPosition	;wreg free
  2630                           
  2631                           ;Menu.c: 233:                 if (val == 0){
  2632  000578  5035               	movf	_val^0,w,c
  2633  00057A  E102               	bnz	l4883
  2634                           
  2635                           ;Menu.c: 234:                     state = 12;
  2636  00057C  0E0C               	movlw	12
  2637  00057E  6E31               	movwf	menuMotor@state^0,c
  2638  000580                     l4883:
  2639                           
  2640                           ;Menu.c: 236:                 LCDcolm = 0;
  2641  000580  6A36               	clrf	_LCDcolm^0,c
  2642  000582  0012               	return	
  2643  000584                     l4885:
  2644                           
  2645                           ;Menu.c: 246:             if (SiIsAvailable()){
  2646  000584  ECBE  F000         	call	_SiIsAvailable	;wreg free
  2647  000588  0900               	iorlw	0
  2648  00058A  B4D8               	btfsc	status,2,c
  2649  00058C  0012               	return	
  2650                           
  2651                           ;Menu.c: 247:                 SiSendChar(mUser.username[val]);
  2652  00058E  5035               	movf	_val^0,w,c
  2653  000590  0FEC               	addlw	low _mUser
  2654  000592  D9FE               	call	PL32	;call to abstracted procedure
  2655  000594  ECB4  F000         	call	_SiSendChar
  2656                           
  2657                           ;Menu.c: 248:                 if (mUser.username[val] == '\0'){
  2658  000598  5035               	movf	_val^0,w,c
  2659  00059A  ECC7  F00D         	call	PL44	;call to abstracted procedure
  2660  00059E  E103               	bnz	l4893
  2661                           
  2662                           ;Menu.c: 249:                     state = 13;
  2663  0005A0  0E0D               	movlw	13
  2664  0005A2  6E31               	movwf	menuMotor@state^0,c
  2665                           
  2666                           ;Menu.c: 250:                 } else {
  2667  0005A4  0C0D               	retlw	13
  2668  0005A6                     l4893:
  2669                           
  2670                           ;Menu.c: 251:                     val++;
  2671  0005A6  2A35               	incf	_val^0,f,c
  2672  0005A8  0012               	return	
  2673  0005AA                     l4895:
  2674                           
  2675                           ;Menu.c: 256:             if (SiRecievedByte()){
  2676  0005AA  ECB8  F000         	call	_SiRecievedByte	;wreg free
  2677  0005AE  0900               	iorlw	0
  2678  0005B0  B4D8               	btfsc	status,2,c
  2679  0005B2  0012               	return	
  2680                           
  2681                           ;Menu.c: 257:                 val = SiReadByte();
  2682  0005B4  ECC9  F000         	call	_SiReadByte	;wreg free
  2683  0005B8  6E35               	movwf	_val^0,c
  2684                           
  2685                           ;Menu.c: 258:                 if (val == 'K'){
  2686  0005BA  0E4B               	movlw	75
  2687  0005BC  1835               	xorwf	_val^0,w,c
  2688  0005BE  A4D8               	btfss	status,2,c
  2689  0005C0  0012               	return	
  2690                           
  2691                           ;Menu.c: 259:                     state = 14;
  2692  0005C2  0E0E               	movlw	14
  2693  0005C4  6E31               	movwf	menuMotor@state^0,c
  2694                           
  2695                           ;Menu.c: 260:                     JoSetMode(1);
  2696  0005C6  0E01               	movlw	1
  2697  0005C8  ECAC  F000         	call	_JoSetMode
  2698                           
  2699                           ;Menu.c: 261:                     resetDisplay();
  2700  0005CC  EC7E  F000         	call	_resetDisplay	;wreg free
  2701                           
  2702                           ;Menu.c: 262:                     setResetTXRX();
  2703  0005D0  EC73  F000         	call	_setResetTXRX	;wreg free
  2704                           
  2705                           ;Menu.c: 263:                     startSong();
  2706  0005D4  EF57  F000         	goto	_startSong	;wreg free
  2707  0005D8                     l4911:
  2708                           
  2709                           ;Menu.c: 269:             displayString(&TIME);
  2710  0005D8  0EB5               	movlw	low _TIME
  2711  0005DA  6E5F               	movwf	displayString@string^0,c
  2712  0005DC  EC0B  F00F         	call	_displayString	;wreg free
  2713                           
  2714                           ;Menu.c: 270:             if (LCDrow == 1){
  2715  0005E0  0438               	decf	_LCDrow^0,w,c
  2716  0005E2  A4D8               	btfss	status,2,c
  2717  0005E4  0012               	return	
  2718                           
  2719                           ;Menu.c: 271:                 LcCursorOff();
  2720  0005E6  EC92  F000         	call	_LcCursorOff	;wreg free
  2721                           
  2722                           ;Menu.c: 272:                 resetTimer();
  2723  0005EA  EC79  F000         	call	_resetTimer	;wreg free
  2724                           
  2725                           ;Menu.c: 273:                 startTimer();
  2726  0005EE  EC3F  F000         	call	_startTimer	;wreg free
  2727  0005F2                     l4921:
  2728                           
  2729                           ;Menu.c: 274:                 state = 15;
  2730  0005F2  0E0F               	movlw	15
  2731  0005F4  6E31               	movwf	menuMotor@state^0,c
  2732  0005F6  0C0F               	retlw	15
  2733  0005F8                     l4923:
  2734                           
  2735                           ;Menu.c: 278:             if (timerOver()){
  2736  0005F8  ECA0  F000         	call	_timerOver	;wreg free
  2737  0005FC  0900               	iorlw	0
  2738  0005FE  E006               	bz	l4929
  2739                           
  2740                           ;Menu.c: 279:                 JoSetMode(0);
  2741  000600  0E00               	movlw	0
  2742  000602  ECAC  F000         	call	_JoSetMode
  2743  000606                     l4927:
  2744                           
  2745                           ;Menu.c: 280:                 state = 17;
  2746  000606  0E11               	movlw	17
  2747  000608  6E31               	movwf	menuMotor@state^0,c
  2748                           
  2749                           ;Menu.c: 281:             } else if (isPressed()){
  2750  00060A  0C11               	retlw	17
  2751  00060C                     l4929:
  2752  00060C  ECE6  F00F         	call	_isPressed	;wreg free
  2753  000610  0900               	iorlw	0
  2754  000612  E014               	bz	l4945
  2755                           
  2756                           ;Menu.c: 282:                 val = KeGetGenericValue();
  2757  000614  EC72  F00F         	call	_KeGetGenericValue	;wreg free
  2758  000618  6E35               	movwf	_val^0,c
  2759                           
  2760                           ;Menu.c: 283:                 if (val == '*' || val == '#'){
  2761  00061A  0E2A               	movlw	42
  2762  00061C  1835               	xorwf	_val^0,w,c
  2763  00061E  E003               	bz	u4120
  2764  000620  0E23               	movlw	35
  2765  000622  1835               	xorwf	_val^0,w,c
  2766  000624  E108               	bnz	l4943
  2767  000626                     u4120:
  2768                           
  2769                           ;Menu.c: 284:                     if (val == '*'){
  2770  000626  0E2A               	movlw	42
  2771  000628  1835               	xorwf	_val^0,w,c
  2772  00062A  A4D8               	btfss	status,2,c
  2773  00062C  0012               	return	
  2774                           
  2775                           ;Menu.c: 285:                         JoSetMode(0);
  2776  00062E  0E00               	movlw	0
  2777  000630  ECAC  F000         	call	_JoSetMode
  2778  000634  D7E8               	goto	l4927
  2779  000636                     l4943:
  2780                           
  2781                           ;Menu.c: 289:                     state = 16;
  2782  000636  0E10               	movlw	16
  2783  000638  6E31               	movwf	menuMotor@state^0,c
  2784  00063A  0C10               	retlw	16
  2785  00063C                     l4945:
  2786  00063C  ECB8  F000         	call	_SiRecievedByte	;wreg free
  2787  000640  0900               	iorlw	0
  2788  000642  B4D8               	btfsc	status,2,c
  2789  000644  0012               	return	
  2790                           
  2791                           ;Menu.c: 293:                 mScore = SiReadByte();
  2792  000646  ECC9  F000         	call	_SiReadByte	;wreg free
  2793  00064A  6E33               	movwf	_mScore^0,c
  2794                           
  2795                           ;Menu.c: 295:                 setResetTXRX();
  2796  00064C  EC73  F000         	call	_setResetTXRX	;wreg free
  2797                           
  2798                           ;Menu.c: 296:                 stopTimer();
  2799  000650  ECC1  F000         	call	_stopTimer	;wreg free
  2800                           
  2801                           ;Menu.c: 297:                 stopSong();
  2802  000654  ECFD  F00F         	call	_stopSong	;wreg free
  2803  000658  D02B               	goto	u4180
  2804  00065A                     L4:
  2805  00065A  6E31               	movwf	menuMotor@state^0,c
  2806  00065C  D74A               	goto	l4835
  2807  00065E                     l4957:
  2808                           
  2809                           ;Menu.c: 303:             if (SiIsAvailable()){
  2810  00065E  ECBE  F000         	call	_SiIsAvailable	;wreg free
  2811  000662  0900               	iorlw	0
  2812  000664  B4D8               	btfsc	status,2,c
  2813  000666  0012               	return	
  2814                           
  2815                           ;Menu.c: 304:                 SiSendChar(val);
  2816  000668  5035               	movf	_val^0,w,c
  2817  00066A  ECB4  F000         	call	_SiSendChar
  2818  00066E  D7C1               	goto	l4921
  2819  000670                     l4963:
  2820                           
  2821                           ;Menu.c: 309:             if (SiIsAvailable()){
  2822  000670  ECBE  F000         	call	_SiIsAvailable	;wreg free
  2823  000674  0900               	iorlw	0
  2824  000676  B4D8               	btfsc	status,2,c
  2825  000678  0012               	return	
  2826                           
  2827                           ;Menu.c: 310:                 SiSendChar('F');
  2828  00067A  0E46               	movlw	70
  2829  00067C  ECB4  F000         	call	_SiSendChar
  2830                           
  2831                           ;Menu.c: 311:                 setResetTXRX();
  2832  000680  EC73  F000         	call	_setResetTXRX	;wreg free
  2833                           
  2834                           ;Menu.c: 312:                 stopTimer();
  2835  000684  ECC1  F000         	call	_stopTimer	;wreg free
  2836                           
  2837                           ;Menu.c: 313:                 stopSong();
  2838  000688  ECFD  F00F         	call	_stopSong	;wreg free
  2839                           
  2840                           ;Menu.c: 314:                 state = 18;
  2841  00068C  0E12               	movlw	18
  2842  00068E  6E31               	movwf	menuMotor@state^0,c
  2843  000690  0C12               	retlw	18
  2844  000692                     l4975:
  2845                           
  2846                           ;Menu.c: 318:             if (SiRecievedByte()){
  2847  000692  ECB8  F000         	call	_SiRecievedByte	;wreg free
  2848  000696  0900               	iorlw	0
  2849  000698  B4D8               	btfsc	status,2,c
  2850  00069A  0012               	return	
  2851                           
  2852                           ;Menu.c: 319:                 mScore = SiReadByte();
  2853  00069C  ECC9  F000         	call	_SiReadByte	;wreg free
  2854  0006A0  6E33               	movwf	_mScore^0,c
  2855  0006A2  D006               	goto	u4180
  2856  0006A4                     l4983:
  2857                           
  2858                           ;Menu.c: 325:             displayError();
  2859  0006A4  EC29  F00E         	call	_displayError	;wreg free
  2860                           
  2861                           ;Menu.c: 326:             if(LCDrow == 2){
  2862  0006A8  0E02               	movlw	2
  2863  0006AA  1838               	xorwf	_LCDrow^0,w,c
  2864  0006AC  A4D8               	btfss	status,2,c
  2865  0006AE  0012               	return	
  2866  0006B0                     u4180:
  2867                           
  2868                           ;Menu.c: 327:                 state = 20;
  2869  0006B0  0E14               	movlw	20
  2870  0006B2  D7D3               	goto	L4
  2871  0006B4                     l4991:
  2872                           
  2873                           ;Menu.c: 332:             if (TiGetTics(timer) >= 3600){
  2874  0006B4  5039               	movf	_timer^0,w,c
  2875  0006B6  ECF8  F00E         	call	_TiGetTics
  2876  0006BA  BE52               	btfsc	(?_TiGetTics+1)^0,7,c
  2877  0006BC  D004               	goto	l4997
  2878  0006BE  D980               	call	PL76	;call to abstracted procedure
  2879  0006C0  E302               	bnc	l4997
  2880                           
  2881                           ;Menu.c: 333:                 state = 22;
  2882  0006C2  0E16               	movlw	22
  2883  0006C4  D014               	goto	L3
  2884  0006C6                     l4997:
  2885  0006C6  ECB8  F000         	call	_SiRecievedByte	;wreg free
  2886  0006CA  0900               	iorlw	0
  2887  0006CC  B4D8               	btfsc	status,2,c
  2888  0006CE  0012               	return	
  2889                           
  2890                           ;Menu.c: 336:                 val = SiReadByte();
  2891  0006D0  ECC9  F000         	call	_SiReadByte	;wreg free
  2892  0006D4  6E35               	movwf	_val^0,c
  2893                           
  2894                           ;Menu.c: 337:                 state = 21;
  2895  0006D6  0E15               	movlw	21
  2896  0006D8  6E31               	movwf	menuMotor@state^0,c
  2897  0006DA  0C15               	retlw	21
  2898  0006DC                     l5003:
  2899                           
  2900                           ;Menu.c: 341:             if (SiRecievedByte()){
  2901  0006DC  ECB8  F000         	call	_SiRecievedByte	;wreg free
  2902  0006E0  0900               	iorlw	0
  2903  0006E2  B4D8               	btfsc	status,2,c
  2904  0006E4  0012               	return	
  2905                           
  2906                           ;Menu.c: 342:                 LCDcolm = SiReadByte();
  2907  0006E6  ECC9  F000         	call	_SiReadByte	;wreg free
  2908  0006EA  6E36               	movwf	_LCDcolm^0,c
  2909                           
  2910                           ;Menu.c: 343:                 state = 19;
  2911  0006EC  0E13               	movlw	19
  2912  0006EE                     L3:
  2913  0006EE  6E31               	movwf	menuMotor@state^0,c
  2914  0006F0  EF7E  F000         	goto	_resetDisplay
  2915  0006F4                     l5011:
  2916                           
  2917                           ;Menu.c: 348:             displayResults();
  2918  0006F4  ECD1  F00E         	call	_displayResults	;wreg free
  2919                           
  2920                           ;Menu.c: 349:             if(LCDrow == 2){
  2921  0006F8  0E02               	movlw	2
  2922  0006FA  1838               	xorwf	_LCDrow^0,w,c
  2923  0006FC  A4D8               	btfss	status,2,c
  2924  0006FE  0012               	return	
  2925                           
  2926                           ;Menu.c: 350:                 LcGotoXY(7,1);
  2927  000700  0E01               	movlw	1
  2928  000702  6E59               	movwf	LcGotoXY@Row^0,c
  2929  000704  0E07               	movlw	7
  2930  000706  EC8F  F00E         	call	_LcGotoXY
  2931                           
  2932                           ;Menu.c: 351:                 LcPutChar((mScore/10)+'0');
  2933  00070A  0E0A               	movlw	10
  2934  00070C  6E51               	movwf	___lbdiv@divisor^0,c
  2935  00070E  5033               	movf	_mScore^0,w,c
  2936  000710  EC5D  F00E         	call	___lbdiv
  2937  000714  0F30               	addlw	48
  2938  000716  ECBC  F00E         	call	_LcPutChar
  2939                           
  2940                           ;Menu.c: 352:                 LcPutChar((mScore%10)+'0');
  2941  00071A  0E0A               	movlw	10
  2942  00071C  6E51               	movwf	___lbmod@divisor^0,c
  2943  00071E  5033               	movf	_mScore^0,w,c
  2944  000720  ECE5  F00E         	call	___lbmod
  2945  000724  0F30               	addlw	48
  2946  000726  ECBC  F00E         	call	_LcPutChar
  2947                           
  2948                           ;Menu.c: 353:                 displayTimeRemaining();
  2949  00072A  EC26  F000         	call	_displayTimeRemaining	;wreg free
  2950                           
  2951                           ;Menu.c: 354:                 state = 23;
  2952  00072E  0E17               	movlw	23
  2953  000730  6E31               	movwf	menuMotor@state^0,c
  2954  000732  0C17               	retlw	23
  2955  000734                     l5019:
  2956                           
  2957                           ;Menu.c: 358:             if (isPressed() && KeGetGenericValue() == '#'){
  2958  000734  ECE6  F00F         	call	_isPressed	;wreg free
  2959  000738  0900               	iorlw	0
  2960  00073A  B4D8               	btfsc	status,2,c
  2961  00073C  0012               	return	
  2962  00073E  EC72  F00F         	call	_KeGetGenericValue	;wreg free
  2963  000742  0A23               	xorlw	35
  2964  000744  A4D8               	btfss	status,2,c
  2965  000746  0012               	return	
  2966                           
  2967                           ;Menu.c: 359:                 DaSaveScore(mScore);
  2968  000748  5033               	movf	_mScore^0,w,c
  2969  00074A  EC43  F00E         	call	_DaSaveScore
  2970                           
  2971                           ;Menu.c: 360:                 resetTimer();
  2972  00074E  EC79  F000         	call	_resetTimer	;wreg free
  2973                           
  2974                           ;Menu.c: 361:                 state = 24;
  2975  000752  0E18               	movlw	24
  2976  000754  6E31               	movwf	menuMotor@state^0,c
  2977  000756  0C18               	retlw	24
  2978  000758                     l5029:
  2979                           
  2980                           ;Menu.c: 365:             if (DaGetIdle()){
  2981  000758  ECB0  F000         	call	_DaGetIdle	;wreg free
  2982  00075C  0900               	iorlw	0
  2983  00075E  B4D8               	btfsc	status,2,c
  2984  000760  0012               	return	
  2985                           
  2986                           ;Menu.c: 366:                 state = 9;
  2987  000762  0E09               	movlw	9
  2988  000764  6E31               	movwf	menuMotor@state^0,c
  2989                           
  2990                           ;Menu.c: 367:                 resetDisplay();
  2991  000766  EC7E  F000         	call	_resetDisplay	;wreg free
  2992                           
  2993                           ;Menu.c: 368:                 val = LCDcolm = 0;
  2994  00076A  6A36               	clrf	_LCDcolm^0,c
  2995  00076C  6A35               	clrf	_val^0,c
  2996  00076E  0012               	return	
  2997  000770                     l5037:
  2998                           
  2999                           ;Menu.c: 373:             displayString(&modifyTimeString);
  3000  000770  0ED3               	movlw	low _modifyTimeString
  3001  000772  6E5F               	movwf	displayString@string^0,c
  3002  000774  EC0B  F00F         	call	_displayString	;wreg free
  3003                           
  3004                           ;Menu.c: 374:             if(LCDrow == 1){
  3005  000778  0438               	decf	_LCDrow^0,w,c
  3006  00077A  A4D8               	btfss	status,2,c
  3007  00077C  0012               	return	
  3008                           
  3009                           ;Menu.c: 375:                 modifyTime();
  3010  00077E  EC83  F000         	call	_modifyTime	;wreg free
  3011                           
  3012                           ;Menu.c: 376:                 state = 41;
  3013  000782  0E29               	movlw	41
  3014  000784  6E31               	movwf	menuMotor@state^0,c
  3015  000786  0C29               	retlw	41
  3016  000788                     l5045:
  3017                           
  3018                           ;Menu.c: 380:             if (isPressed()){
  3019  000788  ECE6  F00F         	call	_isPressed	;wreg free
  3020  00078C  0900               	iorlw	0
  3021  00078E  B4D8               	btfsc	status,2,c
  3022  000790  0012               	return	
  3023                           
  3024                           ;Menu.c: 381:                 if(KeGetGenericValue() == '*' ){
  3025  000792  EC72  F00F         	call	_KeGetGenericValue	;wreg free
  3026  000796  0A2A               	xorlw	42
  3027  000798  E107               	bnz	l5059
  3028                           
  3029                           ;Menu.c: 382:                     resetDisplay();
  3030  00079A  EC7E  F000         	call	_resetDisplay	;wreg free
  3031                           
  3032                           ;Menu.c: 383:                     resetTimer();
  3033  00079E  EC79  F000         	call	_resetTimer	;wreg free
  3034  0007A2                     l5053:
  3035                           
  3036                           ;Menu.c: 384:                     LCDcolm = 0;
  3037                           
  3038                           ;Menu.c: 385:                     state = 9;
  3039  0007A2  D913               	call	PL96	;call to abstracted procedure
  3040  0007A4                     l5057:
  3041                           
  3042                           ;Menu.c: 386:                     val =0;
  3043  0007A4  6A35               	clrf	_val^0,c
  3044                           
  3045                           ;Menu.c: 387:                 } else if (KeGetGenericValue() == '#'){
  3046  0007A6  0012               	return	
  3047  0007A8                     l5059:
  3048  0007A8  EC72  F00F         	call	_KeGetGenericValue	;wreg free
  3049  0007AC  0A23               	xorlw	35
  3050  0007AE  E001 D6FA          	bnz	l4893
  3051                           
  3052                           ;Menu.c: 388:                     if (val >= 4){
  3053  0007B2  0E03               	movlw	3
  3054  0007B4  6435               	cpfsgt	_val^0,c
  3055  0007B6  0C03               	retlw	3
  3056  0007B8                     u4300:
  3057                           
  3058                           ;Menu.c: 389:                         resetDisplay();
  3059  0007B8  EC7E  F000         	call	_resetDisplay	;wreg free
  3060  0007BC  D7F2               	goto	l5053
  3061  0007BE                     l5073:
  3062                           
  3063                           ;Menu.c: 401:             if (DaGetNumScores() == 0){
  3064  0007BE  ECD1  F000         	call	_DaGetNumScores	;wreg free
  3065  0007C2  0900               	iorlw	0
  3066  0007C4  E103               	bnz	l5077
  3067                           
  3068                           ;Menu.c: 402:                 state = 9;
  3069  0007C6  0E09               	movlw	9
  3070  0007C8  6E31               	movwf	menuMotor@state^0,c
  3071                           
  3072                           ;Menu.c: 403:             }else{
  3073  0007CA  0C09               	retlw	9
  3074  0007CC                     l5077:
  3075                           
  3076                           ;Menu.c: 405:                 displayScoresMarquee();
  3077  0007CC  ECA4  F000         	call	_displayScoresMarquee	;wreg free
  3078                           
  3079                           ;Menu.c: 406:                 state = 61;
  3080  0007D0  0E3D               	movlw	61
  3081  0007D2  6E31               	movwf	menuMotor@state^0,c
  3082                           
  3083                           ;Menu.c: 407:                 if (DaGetNumScores() == 1) state+=2;
  3084  0007D4  ECD1  F000         	call	_DaGetNumScores	;wreg free
  3085  0007D8  06E8               	decf	wreg,f,c
  3086  0007DA  A4D8               	btfss	status,2,c
  3087  0007DC  0012               	return	
  3088  0007DE  0E02               	movlw	2
  3089  0007E0  2631               	addwf	menuMotor@state^0,f,c
  3090  0007E2  0C02               	retlw	2
  3091  0007E4                     l5085:
  3092                           
  3093                           ;Menu.c: 412:             if (DaGetIdle()){
  3094  0007E4  ECB0  F000         	call	_DaGetIdle	;wreg free
  3095  0007E8  0900               	iorlw	0
  3096  0007EA  B4D8               	btfsc	status,2,c
  3097  0007EC  0012               	return	
  3098                           
  3099                           ;Menu.c: 413:                 state = 62;
  3100  0007EE  0E3E               	movlw	62
  3101  0007F0  D734               	goto	L4
  3102  0007F2                     l5091:
  3103                           
  3104                           ;Menu.c: 418:             state = 63;
  3105  0007F2  0E3F               	movlw	63
  3106  0007F4  6E31               	movwf	menuMotor@state^0,c
  3107                           
  3108                           ;Menu.c: 419:             if (TiGetTics(timer) >= 1200){
  3109  0007F6  5039               	movf	_timer^0,w,c
  3110  0007F8  ECF8  F00E         	call	_TiGetTics
  3111  0007FC  BE52               	btfsc	(?_TiGetTics+1)^0,7,c
  3112  0007FE  0012               	return	
  3113  000800  D8C2               	call	PL24	;call to abstracted procedure
  3114  000802  A0D8               	btfss	status,0,c
  3115  000804  0012               	return	
  3116                           
  3117                           ;Menu.c: 420:                 LcScroll();
  3118  000806  ECBB  F000         	call	_LcScroll	;wreg free
  3119                           
  3120                           ;Menu.c: 421:                 LCDcolm++;
  3121  00080A  2A36               	incf	_LCDcolm^0,f,c
  3122                           
  3123                           ;Menu.c: 422:                 if (LCDcolm == 16){
  3124  00080C  0E10               	movlw	16
  3125  00080E  1836               	xorwf	_LCDcolm^0,w,c
  3126  000810  E001 D66F          	bnz	l4835
  3127                           
  3128                           ;Menu.c: 423:                     resetDisplay();
  3129  000814  EC7E  F000         	call	_resetDisplay	;wreg free
  3130                           
  3131                           ;Menu.c: 424:                     LCDcolm = 0;
  3132  000818  6A36               	clrf	_LCDcolm^0,c
  3133                           
  3134                           ;Menu.c: 425:                     state = 60;
  3135  00081A  0E3C               	movlw	60
  3136  00081C  6E31               	movwf	menuMotor@state^0,c
  3137                           
  3138                           ;Menu.c: 426:                     incrementPosition();
  3139  00081E  ECC5  F000         	call	_incrementPosition	;wreg free
  3140  000822  D667               	goto	l4835
  3141  000824                     l5111:
  3142                           
  3143                           ;Menu.c: 433:             if (DaGetNumScores() > 1) state = 62;
  3144  000824  ECD1  F000         	call	_DaGetNumScores	;wreg free
  3145  000828  6E61               	movwf	??_menuMotor^0,c
  3146  00082A  0E01               	movlw	1
  3147  00082C  6461               	cpfsgt	??_menuMotor^0,c
  3148  00082E  D002               	goto	l5115
  3149  000830  0E3E               	movlw	62
  3150  000832  6E31               	movwf	menuMotor@state^0,c
  3151  000834                     l5115:
  3152                           
  3153                           ;Menu.c: 434:             if (isPressed() && KeGetGenericValue() == '#'){
  3154  000834  ECE6  F00F         	call	_isPressed	;wreg free
  3155  000838  0900               	iorlw	0
  3156  00083A  B4D8               	btfsc	status,2,c
  3157  00083C  0012               	return	
  3158  00083E  EC72  F00F         	call	_KeGetGenericValue	;wreg free
  3159  000842  0A23               	xorlw	35
  3160  000844  E0B9               	bz	u4300
  3161  000846  0012               	return	
  3162  000848                     l5127:
  3163                           
  3164                           ;Menu.c: 444:             displayLogOut();
  3165  000848  ECA8  F00D         	call	_displayLogOut	;wreg free
  3166                           
  3167                           ;Menu.c: 445:             if (LCDrow == 1){
  3168  00084C  0438               	decf	_LCDrow^0,w,c
  3169  00084E  A4D8               	btfss	status,2,c
  3170  000850  0012               	return	
  3171                           
  3172                           ;Menu.c: 446:                 state = 81;
  3173  000852  0E51               	movlw	81
  3174  000854  D702               	goto	L4
  3175  000856                     l5135:
  3176                           
  3177                           ;Menu.c: 451:             if (TiGetTics(timer) >= 3600){
  3178  000856  5039               	movf	_timer^0,w,c
  3179  000858  ECF8  F00E         	call	_TiGetTics
  3180  00085C  BE52               	btfsc	(?_TiGetTics+1)^0,7,c
  3181  00085E  0012               	return	
  3182  000860  D8AF               	call	PL76	;call to abstracted procedure
  3183  000862  A0D8               	btfss	status,0,c
  3184  000864  0012               	return	
  3185                           
  3186                           ;Menu.c: 452:                 state = 0;
  3187  000866  6A31               	clrf	menuMotor@state^0,c
  3188                           
  3189                           ;Menu.c: 453:                 resetDisplay();
  3190  000868  EC7E  F000         	call	_resetDisplay	;wreg free
  3191                           
  3192                           ;Menu.c: 454:                 LCDcolm = 0;
  3193  00086C  6A36               	clrf	_LCDcolm^0,c
  3194  00086E  D79A               	goto	l5057
  3195  000870                     l5145:
  3196                           
  3197                           ;Menu.c: 459:             displayString(&sysTime);
  3198  000870  0EC5               	movlw	low _sysTime
  3199  000872  6E5F               	movwf	displayString@string^0,c
  3200  000874  EC0B  F00F         	call	_displayString	;wreg free
  3201                           
  3202                           ;Menu.c: 460:             if(LCDrow == 1){
  3203  000878  0438               	decf	_LCDrow^0,w,c
  3204  00087A  A4D8               	btfss	status,2,c
  3205  00087C  0012               	return	
  3206                           
  3207                           ;Menu.c: 461:                 displaySysTime();
  3208  00087E  EC88  F000         	call	_displaySysTime	;wreg free
  3209                           
  3210                           ;Menu.c: 462:                 state = 101;
  3211  000882  0E65               	movlw	101
  3212  000884  6E31               	movwf	menuMotor@state^0,c
  3213  000886  0C65               	retlw	101
  3214  000888                     l5153:
  3215                           
  3216                           ;Menu.c: 466:             if (isPressed() && KeGetGenericValue() == '#'){
  3217  000888  ECE6  F00F         	call	_isPressed	;wreg free
  3218  00088C  0900               	iorlw	0
  3219  00088E  B4D8               	btfsc	status,2,c
  3220  000890  0012               	return	
  3221  000892  EC72  F00F         	call	_KeGetGenericValue	;wreg free
  3222  000896  0A23               	xorlw	35
  3223  000898  A4D8               	btfss	status,2,c
  3224  00089A  0012               	return	
  3225                           
  3226                           ;Menu.c: 467:                 resetDisplay();
  3227  00089C  EC7E  F000         	call	_resetDisplay	;wreg free
  3228                           
  3229                           ;Menu.c: 468:                 LCDcolm = 0;
  3230                           
  3231                           ;Menu.c: 469:                 state = 9;
  3232  0008A0  D894               	call	PL96	;call to abstracted procedure
  3233                           
  3234                           ;Menu.c: 470:                 stopTimer();
  3235  0008A2  ECC1  F000         	call	_stopTimer	;wreg free
  3236  0008A6  D77E               	goto	l5057
  3237  0008A8                     l5169:
  3238  0008A8  5031               	movf	menuMotor@state^0,w,c
  3239  0008AA  6E61               	movwf	??_menuMotor^0,c
  3240  0008AC  6A62               	clrf	(??_menuMotor+1)^0,c
  3241                           
  3242                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3243                           ; Switch size 1, requested type "space"
  3244                           ; Number of cases is 1, Range of values is 0 to 0
  3245                           ; switch strategies available:
  3246                           ; Name         Instructions Cycles
  3247                           ; simple_byte            4     3 (average)
  3248                           ;	Chosen strategy is simple_byte
  3249  0008AE  5062               	movf	(??_menuMotor+1)^0,w,c
  3250  0008B0  A4D8               	btfss	status,2,c
  3251  0008B2  0012               	return	
  3252                           
  3253                           ; Switch size 1, requested type "space"
  3254                           ; Number of cases is 35, Range of values is 0 to 101
  3255                           ; switch strategies available:
  3256                           ; Name         Instructions Cycles
  3257                           ; simple_byte          106    54 (average)
  3258                           ;	Chosen strategy is simple_byte
  3259  0008B4  5061               	movf	??_menuMotor^0,w,c
  3260  0008B6  E101 D50C          	bz	l4665
  3261  0008BA  0A01               	xorlw	1	; case 1
  3262  0008BC  E101 D51E          	bz	l4677
  3263  0008C0  0A03               	xorlw	3	; case 2
  3264  0008C2  E101 D536          	bz	l4691
  3265  0008C6  0A01               	xorlw	1	; case 3
  3266  0008C8  E101 D547          	bz	l4703
  3267  0008CC  0A07               	xorlw	7	; case 4
  3268  0008CE  E101 D559          	bz	l4719
  3269  0008D2  0A01               	xorlw	1	; case 5
  3270  0008D4  E101 D58D          	bz	l4751
  3271  0008D8  0A03               	xorlw	3	; case 6
  3272  0008DA  E101 D595          	bz	l4763
  3273  0008DE  0A01               	xorlw	1	; case 7
  3274  0008E0  E101 D5B8          	bz	l4789
  3275  0008E4  0A0F               	xorlw	15	; case 8
  3276  0008E6  E101 D5C3          	bz	l4797
  3277  0008EA  0A01               	xorlw	1	; case 9
  3278  0008EC  E101 D5E1          	bz	l4821
  3279  0008F0  0A03               	xorlw	3	; case 10
  3280  0008F2  E101 D5F7          	bz	l4831
  3281  0008F6  0A01               	xorlw	1	; case 11
  3282  0008F8  E101 D5FE          	bz	l4837
  3283  0008FC  0A07               	xorlw	7	; case 12
  3284  0008FE  E101 D641          	bz	l4885
  3285  000902  0A01               	xorlw	1	; case 13
  3286  000904  E101 D651          	bz	l4895
  3287  000908  0A03               	xorlw	3	; case 14
  3288  00090A  E101 D665          	bz	l4911
  3289  00090E  0A01               	xorlw	1	; case 15
  3290  000910  E101 D672          	bz	l4923
  3291  000914  0A1F               	xorlw	31	; case 16
  3292  000916  E101 D6A2          	bz	l4957
  3293  00091A  0A01               	xorlw	1	; case 17
  3294  00091C  E101 D6A8          	bz	l4963
  3295  000920  0A03               	xorlw	3	; case 18
  3296  000922  E101 D6B6          	bz	l4975
  3297  000926  0A01               	xorlw	1	; case 19
  3298  000928  E101 D6BC          	bz	l4983
  3299  00092C  0A07               	xorlw	7	; case 20
  3300  00092E  E101 D6C1          	bz	l4991
  3301  000932  0A01               	xorlw	1	; case 21
  3302  000934  E101 D6D2          	bz	l5003
  3303  000938  0A03               	xorlw	3	; case 22
  3304  00093A  E101 D6DB          	bz	l5011
  3305  00093E  0A01               	xorlw	1	; case 23
  3306  000940  E101 D6F8          	bz	l5019
  3307  000944  0A0F               	xorlw	15	; case 24
  3308  000946  E101 D707          	bz	l5029
  3309  00094A  0A30               	xorlw	48	; case 40
  3310  00094C  E101 D710          	bz	l5037
  3311  000950  0A01               	xorlw	1	; case 41
  3312  000952  E101 D719          	bz	l5045
  3313  000956  0A15               	xorlw	21	; case 60
  3314  000958  E101 D731          	bz	l5073
  3315  00095C  0A01               	xorlw	1	; case 61
  3316  00095E  E101 D741          	bz	l5085
  3317  000962  0A03               	xorlw	3	; case 62
  3318  000964  E101 D745          	bz	l5091
  3319  000968  0A01               	xorlw	1	; case 63
  3320  00096A  E101 D75B          	bz	l5111
  3321  00096E  0A6F               	xorlw	111	; case 80
  3322  000970  E101 D76A          	bz	l5127
  3323  000974  0A01               	xorlw	1	; case 81
  3324  000976  E101 D76E          	bz	l5135
  3325  00097A  0A35               	xorlw	53	; case 100
  3326  00097C  E101 D778          	bz	l5145
  3327  000980  0A01               	xorlw	1	; case 101
  3328  000982  E082               	bz	l5153
  3329  000984  0012               	return		;funcret
  3330  000986                     __end_of_menuMotor:
  3331                           	callstack 0
  3332  000986                     PL24:
  3333                           	callstack 23
  3334  000986  0EB0               	movlw	176
  3335  000988  5C51               	subwf	?_TiGetTics^0,w,c
  3336  00098A  0E04               	movlw	4
  3337  00098C  5852               	subwfb	(?_TiGetTics+1)^0,w,c
  3338  00098E  0012               	return	
  3339  000990                     __end_ofPL24:
  3340                           	callstack 0
  3341  000990                     PL32:
  3342                           	callstack 23
  3343  000990  6ED9               	movwf	fsr2l,c
  3344  000992  6ADA               	clrf	fsr2h,c
  3345  000994  50DF               	movf	indf2,w,c
  3346  000996  0012               	return	
  3347  000998                     __end_ofPL32:
  3348                           	callstack 0
  3349  000998                     PL56:
  3350                           	callstack 23
  3351  000998  5037               	movf	_LCDcol^0,w,c
  3352  00099A  0FF1               	addlw	low (_mUser+5)
  3353  00099C  6ED9               	movwf	fsr2l,c
  3354  00099E  6ADA               	clrf	fsr2h,c
  3355  0009A0  0012               	return	
  3356  0009A2                     __end_ofPL56:
  3357                           	callstack 0
  3358  0009A2                     PL58:
  3359                           	callstack 23
  3360  0009A2  5037               	movf	_LCDcol^0,w,c
  3361  0009A4  0FE8               	addlw	low (_mUser+252)
  3362  0009A6  6ED9               	movwf	fsr2l,c
  3363  0009A8  6ADA               	clrf	fsr2h,c
  3364  0009AA  0012               	return	
  3365  0009AC                     __end_ofPL58:
  3366                           	callstack 0
  3367  0009AC                     PL60:
  3368                           	callstack 23
  3369  0009AC  0E05               	movlw	5
  3370  0009AE  6E37               	movwf	_LCDcol^0,c
  3371  0009B0  C038  F059         	movff	_LCDrow,LcGotoXY@Row
  3372  0009B4  5037               	movf	_LCDcol^0,w,c
  3373  0009B6  0012               	return	
  3374  0009B8                     __end_ofPL60:
  3375                           	callstack 0
  3376  0009B8                     PL64:
  3377                           	callstack 23
  3378  0009B8  C038  F059         	movff	_LCDrow,LcGotoXY@Row
  3379  0009BC  5037               	movf	_LCDcol^0,w,c
  3380  0009BE  0012               	return	
  3381  0009C0                     __end_ofPL64:
  3382                           	callstack 0
  3383  0009C0                     PL76:
  3384                           	callstack 23
  3385  0009C0  0E10               	movlw	16
  3386  0009C2  5C51               	subwf	?_TiGetTics^0,w,c
  3387  0009C4  0E0E               	movlw	14
  3388  0009C6  5852               	subwfb	(?_TiGetTics+1)^0,w,c
  3389  0009C8  0012               	return	
  3390  0009CA                     __end_ofPL76:
  3391                           	callstack 0
  3392  0009CA                     PL96:
  3393                           	callstack 23
  3394  0009CA  6A36               	clrf	_LCDcolm^0,c
  3395  0009CC  0E09               	movlw	9
  3396  0009CE  6E31               	movwf	menuMotor@state^0,c
  3397  0009D0  0C09               	retlw	9
  3398  0009D2                     __end_ofPL96:
  3399                           	callstack 0
  3400                           
  3401 ;; *************** function _timerOver *****************
  3402 ;; Defined at:
  3403 ;;		line 218 in file "time.c"
  3404 ;; Parameters:    Size  Location     Type
  3405 ;;		None
  3406 ;; Auto vars:     Size  Location     Type
  3407 ;;		None
  3408 ;; Return value:  Size  Location     Type
  3409 ;;                  1    wreg      unsigned char 
  3410 ;; Registers used:
  3411 ;;		wreg, status,2
  3412 ;; Tracked objects:
  3413 ;;		On entry : 0/0
  3414 ;;		On exit  : 0/0
  3415 ;;		Unchanged: 0/0
  3416 ;; Data sizes:     COMRAM   BANK0   BANK1
  3417 ;;      Params:         0       0       0
  3418 ;;      Locals:         0       0       0
  3419 ;;      Temps:          0       0       0
  3420 ;;      Totals:         0       0       0
  3421 ;;Total ram usage:        0 bytes
  3422 ;; Hardware stack levels used: 1
  3423 ;; Hardware stack levels required when called: 2
  3424 ;; This function calls:
  3425 ;;		Nothing
  3426 ;; This function is called by:
  3427 ;;		_menuMotor
  3428 ;; This function uses a non-reentrant model
  3429 ;;
  3430                           
  3431                           	psect	text8
  3432  000140                     __ptext8:
  3433                           	callstack 0
  3434  000140                     _timerOver:
  3435                           	callstack 27
  3436                           
  3437                           ;time.c: 219:     return state == 0;
  3438                           
  3439                           ;incstack = 0
  3440  000140  5013               	movf	_state@time$F1787^0,w,c
  3441  000142  B4D8               	btfsc	status,2,c
  3442  000144  0C01               	retlw	1
  3443  000146  0C00               	retlw	0	;funcret
  3444  000148                     __end_of_timerOver:
  3445                           	callstack 0
  3446                           
  3447 ;; *************** function _stopTimer *****************
  3448 ;; Defined at:
  3449 ;;		line 172 in file "time.c"
  3450 ;; Parameters:    Size  Location     Type
  3451 ;;		None
  3452 ;; Auto vars:     Size  Location     Type
  3453 ;;		None
  3454 ;; Return value:  Size  Location     Type
  3455 ;;                  1    wreg      void 
  3456 ;; Registers used:
  3457 ;;		None
  3458 ;; Tracked objects:
  3459 ;;		On entry : 0/0
  3460 ;;		On exit  : 0/0
  3461 ;;		Unchanged: 0/0
  3462 ;; Data sizes:     COMRAM   BANK0   BANK1
  3463 ;;      Params:         0       0       0
  3464 ;;      Locals:         0       0       0
  3465 ;;      Temps:          0       0       0
  3466 ;;      Totals:         0       0       0
  3467 ;;Total ram usage:        0 bytes
  3468 ;; Hardware stack levels used: 1
  3469 ;; Hardware stack levels required when called: 2
  3470 ;; This function calls:
  3471 ;;		Nothing
  3472 ;; This function is called by:
  3473 ;;		_menuMotor
  3474 ;; This function uses a non-reentrant model
  3475 ;;
  3476                           
  3477                           	psect	text9
  3478  000182                     __ptext9:
  3479                           	callstack 0
  3480  000182                     _stopTimer:
  3481                           	callstack 27
  3482                           
  3483                           ;time.c: 173:     state = 0;
  3484                           
  3485                           ;incstack = 0
  3486  000182  6A13               	clrf	_state@time$F1787^0,c
  3487  000184  0012               	return		;funcret
  3488  000186                     __end_of_stopTimer:
  3489                           	callstack 0
  3490                           
  3491 ;; *************** function _stopSong *****************
  3492 ;; Defined at:
  3493 ;;		line 71 in file "Audio.c"
  3494 ;; Parameters:    Size  Location     Type
  3495 ;;		None
  3496 ;; Auto vars:     Size  Location     Type
  3497 ;;		None
  3498 ;; Return value:  Size  Location     Type
  3499 ;;                  1    wreg      void 
  3500 ;; Registers used:
  3501 ;;		None
  3502 ;; Tracked objects:
  3503 ;;		On entry : 0/0
  3504 ;;		On exit  : 0/0
  3505 ;;		Unchanged: 0/0
  3506 ;; Data sizes:     COMRAM   BANK0   BANK1
  3507 ;;      Params:         0       0       0
  3508 ;;      Locals:         0       0       0
  3509 ;;      Temps:          0       0       0
  3510 ;;      Totals:         0       0       0
  3511 ;;Total ram usage:        0 bytes
  3512 ;; Hardware stack levels used: 1
  3513 ;; Hardware stack levels required when called: 2
  3514 ;; This function calls:
  3515 ;;		Nothing
  3516 ;; This function is called by:
  3517 ;;		_menuMotor
  3518 ;; This function uses a non-reentrant model
  3519 ;;
  3520                           
  3521                           	psect	text10
  3522  001FFA                     __ptext10:
  3523                           	callstack 0
  3524  001FFA                     _stopSong:
  3525                           	callstack 27
  3526                           
  3527                           ;Audio.c: 72:     LATCbits.LATC3=0;;
  3528                           
  3529                           ;incstack = 0
  3530  001FFA  968B               	bcf	139,3,c	;volatile
  3531                           
  3532                           ;Audio.c: 73:     state = 0;
  3533  001FFC  6A3E               	clrf	_state@Audio$F919^0,c
  3534  001FFE  0012               	return		;funcret
  3535  002000                     __end_of_stopSong:
  3536                           	callstack 0
  3537                           
  3538 ;; *************** function _startTimer *****************
  3539 ;; Defined at:
  3540 ;;		line 167 in file "time.c"
  3541 ;; Parameters:    Size  Location     Type
  3542 ;;		None
  3543 ;; Auto vars:     Size  Location     Type
  3544 ;;		None
  3545 ;; Return value:  Size  Location     Type
  3546 ;;                  1    wreg      void 
  3547 ;; Registers used:
  3548 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3549 ;; Tracked objects:
  3550 ;;		On entry : 0/0
  3551 ;;		On exit  : 0/0
  3552 ;;		Unchanged: 0/0
  3553 ;; Data sizes:     COMRAM   BANK0   BANK1
  3554 ;;      Params:         0       0       0
  3555 ;;      Locals:         0       0       0
  3556 ;;      Temps:          0       0       0
  3557 ;;      Totals:         0       0       0
  3558 ;;Total ram usage:        0 bytes
  3559 ;; Hardware stack levels used: 1
  3560 ;; Hardware stack levels required when called: 5
  3561 ;; This function calls:
  3562 ;;		_LcGotoXY
  3563 ;;		_TiResetTics
  3564 ;; This function is called by:
  3565 ;;		_menuMotor
  3566 ;; This function uses a non-reentrant model
  3567 ;;
  3568                           
  3569                           	psect	text11
  3570  00007E                     __ptext11:
  3571                           	callstack 0
  3572  00007E                     _startTimer:
  3573                           	callstack 24
  3574                           
  3575                           ;time.c: 168:     state = 2;
  3576                           
  3577                           ;incstack = 0
  3578  00007E  0E02               	movlw	2
  3579                           
  3580                           ;time.c: 169:     LcGotoXY(0,1);
  3581  000080  ECAC  F008         	call	PL42	;call to abstracted procedure
  3582  000084  EC8F  F00E         	call	_LcGotoXY
  3583                           
  3584                           ;time.c: 170:     TiResetTics(timer);
  3585  000088  5014               	movf	_timer@time$F1786^0,w,c
  3586  00008A  EF92  F00F         	goto	_TiResetTics
  3587  00008E                     __end_of_startTimer:
  3588                           	callstack 0
  3589                           
  3590 ;; *************** function _startSong *****************
  3591 ;; Defined at:
  3592 ;;		line 65 in file "Audio.c"
  3593 ;; Parameters:    Size  Location     Type
  3594 ;;		None
  3595 ;; Auto vars:     Size  Location     Type
  3596 ;;		None
  3597 ;; Return value:  Size  Location     Type
  3598 ;;                  1    wreg      void 
  3599 ;; Registers used:
  3600 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3601 ;; Tracked objects:
  3602 ;;		On entry : 0/0
  3603 ;;		On exit  : 0/0
  3604 ;;		Unchanged: 0/0
  3605 ;; Data sizes:     COMRAM   BANK0   BANK1
  3606 ;;      Params:         0       0       0
  3607 ;;      Locals:         0       0       0
  3608 ;;      Temps:          0       0       0
  3609 ;;      Totals:         0       0       0
  3610 ;;Total ram usage:        0 bytes
  3611 ;; Hardware stack levels used: 1
  3612 ;; Hardware stack levels required when called: 3
  3613 ;; This function calls:
  3614 ;;		_TiResetTics
  3615 ;; This function is called by:
  3616 ;;		_menuMotor
  3617 ;; This function uses a non-reentrant model
  3618 ;;
  3619                           
  3620                           	psect	text12
  3621  0000AE                     __ptext12:
  3622                           	callstack 0
  3623  0000AE                     _startSong:
  3624                           	callstack 26
  3625                           
  3626                           ;Audio.c: 66:     TiResetTics(periodTimer);
  3627                           
  3628                           ;incstack = 0
  3629  0000AE  503D               	movf	_periodTimer^0,w,c
  3630  0000B0  EC92  F00F         	call	_TiResetTics
  3631                           
  3632                           ;Audio.c: 67:     gameTime = 0;
  3633  0000B4  6A3A               	clrf	_gameTime^0,c
  3634                           
  3635                           ;Audio.c: 69:     state = 1;
  3636  0000B6  0E01               	movlw	1
  3637  0000B8  6E3E               	movwf	_state@Audio$F919^0,c
  3638  0000BA  0C01               	retlw	1	;funcret
  3639  0000BC                     __end_of_startSong:
  3640                           	callstack 0
  3641                           
  3642 ;; *************** function _setResetTXRX *****************
  3643 ;; Defined at:
  3644 ;;		line 142 in file "SIO.c"
  3645 ;; Parameters:    Size  Location     Type
  3646 ;;		None
  3647 ;; Auto vars:     Size  Location     Type
  3648 ;;		None
  3649 ;; Return value:  Size  Location     Type
  3650 ;;                  1    wreg      void 
  3651 ;; Registers used:
  3652 ;;		wreg, status,2
  3653 ;; Tracked objects:
  3654 ;;		On entry : 0/0
  3655 ;;		On exit  : 0/0
  3656 ;;		Unchanged: 0/0
  3657 ;; Data sizes:     COMRAM   BANK0   BANK1
  3658 ;;      Params:         0       0       0
  3659 ;;      Locals:         0       0       0
  3660 ;;      Temps:          0       0       0
  3661 ;;      Totals:         0       0       0
  3662 ;;Total ram usage:        0 bytes
  3663 ;; Hardware stack levels used: 1
  3664 ;; Hardware stack levels required when called: 2
  3665 ;; This function calls:
  3666 ;;		Nothing
  3667 ;; This function is called by:
  3668 ;;		_menuMotor
  3669 ;; This function uses a non-reentrant model
  3670 ;;
  3671                           
  3672                           	psect	text13
  3673  0000E6                     __ptext13:
  3674                           	callstack 0
  3675  0000E6                     _setResetTXRX:
  3676                           	callstack 27
  3677                           
  3678                           ;SIO.c: 143:     allowed = !allowed;
  3679                           
  3680                           ;incstack = 0
  3681  0000E6  5022               	movf	_allowed^0,w,c
  3682  0000E8  0E01               	movlw	1
  3683  0000EA  A4D8               	btfss	status,2,c
  3684  0000EC  0E00               	movlw	0
  3685  0000EE  6E22               	movwf	_allowed^0,c
  3686  0000F0  0012               	return		;funcret
  3687  0000F2                     __end_of_setResetTXRX:
  3688                           	callstack 0
  3689                           
  3690 ;; *************** function _resetTimer *****************
  3691 ;; Defined at:
  3692 ;;		line 180 in file "time.c"
  3693 ;; Parameters:    Size  Location     Type
  3694 ;;		None
  3695 ;; Auto vars:     Size  Location     Type
  3696 ;;		None
  3697 ;; Return value:  Size  Location     Type
  3698 ;;                  1    wreg      void 
  3699 ;; Registers used:
  3700 ;;		None
  3701 ;; Tracked objects:
  3702 ;;		On entry : 0/0
  3703 ;;		On exit  : 0/0
  3704 ;;		Unchanged: 0/0
  3705 ;; Data sizes:     COMRAM   BANK0   BANK1
  3706 ;;      Params:         0       0       0
  3707 ;;      Locals:         0       0       0
  3708 ;;      Temps:          0       0       0
  3709 ;;      Totals:         0       0       0
  3710 ;;Total ram usage:        0 bytes
  3711 ;; Hardware stack levels used: 1
  3712 ;; Hardware stack levels required when called: 2
  3713 ;; This function calls:
  3714 ;;		Nothing
  3715 ;; This function is called by:
  3716 ;;		_menuMotor
  3717 ;; This function uses a non-reentrant model
  3718 ;;
  3719                           
  3720                           	psect	text14
  3721  0000F2                     __ptext14:
  3722                           	callstack 0
  3723  0000F2                     _resetTimer:
  3724                           	callstack 27
  3725                           
  3726                           ;time.c: 181:     second = seconds;
  3727                           
  3728                           ;incstack = 0
  3729  0000F2  C018  F017         	movff	_seconds,_second
  3730                           
  3731                           ;time.c: 182:     minute = minutes;
  3732  0000F6  C076  F075         	movff	_minutes,_minute
  3733  0000FA  0012               	return		;funcret
  3734  0000FC                     __end_of_resetTimer:
  3735                           	callstack 0
  3736                           
  3737 ;; *************** function _resetPosition *****************
  3738 ;; Defined at:
  3739 ;;		line 386 in file "EEPROM.c"
  3740 ;; Parameters:    Size  Location     Type
  3741 ;;		None
  3742 ;; Auto vars:     Size  Location     Type
  3743 ;;		None
  3744 ;; Return value:  Size  Location     Type
  3745 ;;                  1    wreg      void 
  3746 ;; Registers used:
  3747 ;;		None
  3748 ;; Tracked objects:
  3749 ;;		On entry : 0/0
  3750 ;;		On exit  : 0/0
  3751 ;;		Unchanged: 0/0
  3752 ;; Data sizes:     COMRAM   BANK0   BANK1
  3753 ;;      Params:         0       0       0
  3754 ;;      Locals:         0       0       0
  3755 ;;      Temps:          0       0       0
  3756 ;;      Totals:         0       0       0
  3757 ;;Total ram usage:        0 bytes
  3758 ;; Hardware stack levels used: 1
  3759 ;; Hardware stack levels required when called: 2
  3760 ;; This function calls:
  3761 ;;		Nothing
  3762 ;; This function is called by:
  3763 ;;		_menuMotor
  3764 ;; This function uses a non-reentrant model
  3765 ;;
  3766                           
  3767                           	psect	text15
  3768  000186                     __ptext15:
  3769                           	callstack 0
  3770  000186                     _resetPosition:
  3771                           	callstack 27
  3772                           
  3773                           ;EEPROM.c: 387:     position = 0;
  3774                           
  3775                           ;incstack = 0
  3776  000186  6A20               	clrf	_position^0,c
  3777  000188  0012               	return		;funcret
  3778  00018A                     __end_of_resetPosition:
  3779                           	callstack 0
  3780                           
  3781 ;; *************** function _resetDisplay *****************
  3782 ;; Defined at:
  3783 ;;		line 477 in file "Menu.c"
  3784 ;; Parameters:    Size  Location     Type
  3785 ;;		None
  3786 ;; Auto vars:     Size  Location     Type
  3787 ;;		None
  3788 ;; Return value:  Size  Location     Type
  3789 ;;                  1    wreg      void 
  3790 ;; Registers used:
  3791 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3792 ;; Tracked objects:
  3793 ;;		On entry : 0/0
  3794 ;;		On exit  : 0/0
  3795 ;;		Unchanged: 0/0
  3796 ;; Data sizes:     COMRAM   BANK0   BANK1
  3797 ;;      Params:         0       0       0
  3798 ;;      Locals:         0       0       0
  3799 ;;      Temps:          0       0       0
  3800 ;;      Totals:         0       0       0
  3801 ;;Total ram usage:        0 bytes
  3802 ;; Hardware stack levels used: 1
  3803 ;; Hardware stack levels required when called: 5
  3804 ;; This function calls:
  3805 ;;		_LcClear
  3806 ;; This function is called by:
  3807 ;;		_menuMotor
  3808 ;; This function uses a non-reentrant model
  3809 ;;
  3810                           
  3811                           	psect	text16
  3812  0000FC                     __ptext16:
  3813                           	callstack 0
  3814  0000FC                     _resetDisplay:
  3815                           	callstack 24
  3816                           
  3817                           ;Menu.c: 478:     LcClear();
  3818                           
  3819                           ;incstack = 0
  3820  0000FC  EC1B  F000         	call	_LcClear	;wreg free
  3821                           
  3822                           ;Menu.c: 479:     LCDcol = LCDrow = 0;
  3823  000100  6A38               	clrf	_LCDrow^0,c
  3824  000102  6A37               	clrf	_LCDcol^0,c
  3825  000104  0012               	return		;funcret
  3826  000106                     __end_of_resetDisplay:
  3827                           	callstack 0
  3828                           
  3829 ;; *************** function _modifyTime *****************
  3830 ;; Defined at:
  3831 ;;		line 185 in file "time.c"
  3832 ;; Parameters:    Size  Location     Type
  3833 ;;		None
  3834 ;; Auto vars:     Size  Location     Type
  3835 ;;		None
  3836 ;; Return value:  Size  Location     Type
  3837 ;;                  1    wreg      void 
  3838 ;; Registers used:
  3839 ;;		wreg, status,2
  3840 ;; Tracked objects:
  3841 ;;		On entry : 0/0
  3842 ;;		On exit  : 0/0
  3843 ;;		Unchanged: 0/0
  3844 ;; Data sizes:     COMRAM   BANK0   BANK1
  3845 ;;      Params:         0       0       0
  3846 ;;      Locals:         0       0       0
  3847 ;;      Temps:          0       0       0
  3848 ;;      Totals:         0       0       0
  3849 ;;Total ram usage:        0 bytes
  3850 ;; Hardware stack levels used: 1
  3851 ;; Hardware stack levels required when called: 2
  3852 ;; This function calls:
  3853 ;;		Nothing
  3854 ;; This function is called by:
  3855 ;;		_menuMotor
  3856 ;; This function uses a non-reentrant model
  3857 ;;
  3858                           
  3859                           	psect	text17
  3860  000106                     __ptext17:
  3861                           	callstack 0
  3862  000106                     _modifyTime:
  3863                           	callstack 27
  3864                           
  3865                           ;time.c: 186:     state = 20;
  3866                           
  3867                           ;incstack = 0
  3868  000106  0E14               	movlw	20
  3869  000108  6E13               	movwf	_state@time$F1787^0,c
  3870                           
  3871                           ;time.c: 187:     game = 25;
  3872  00010A  0E19               	movlw	25
  3873  00010C  6E12               	movwf	_game^0,c
  3874  00010E  0C19               	retlw	25	;funcret
  3875  000110                     __end_of_modifyTime:
  3876                           	callstack 0
  3877                           
  3878 ;; *************** function _mainMenu *****************
  3879 ;; Defined at:
  3880 ;;		line 492 in file "Menu.c"
  3881 ;; Parameters:    Size  Location     Type
  3882 ;;		None
  3883 ;; Auto vars:     Size  Location     Type
  3884 ;;		None
  3885 ;; Return value:  Size  Location     Type
  3886 ;;                  1    wreg      void 
  3887 ;; Registers used:
  3888 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3889 ;; Tracked objects:
  3890 ;;		On entry : 0/0
  3891 ;;		On exit  : 0/0
  3892 ;;		Unchanged: 0/0
  3893 ;; Data sizes:     COMRAM   BANK0   BANK1
  3894 ;;      Params:         0       0       0
  3895 ;;      Locals:         0       0       0
  3896 ;;      Temps:          2       0       0
  3897 ;;      Totals:         2       0       0
  3898 ;;Total ram usage:        2 bytes
  3899 ;; Hardware stack levels used: 1
  3900 ;; Hardware stack levels required when called: 6
  3901 ;; This function calls:
  3902 ;;		_LcPutChar
  3903 ;;		___awmod
  3904 ;;		_nextRow
  3905 ;; This function is called by:
  3906 ;;		_menuMotor
  3907 ;; This function uses a non-reentrant model
  3908 ;;
  3909                           
  3910                           	psect	text18
  3911  001696                     __ptext18:
  3912                           	callstack 0
  3913  001696                     _mainMenu:
  3914                           	callstack 23
  3915                           
  3916                           ;Menu.c: 493:     if (LCDrow+val < 5){
  3917                           
  3918                           ;incstack = 0
  3919  001696  5035               	movf	_val^0,w,c
  3920  001698  C038  F05F         	movff	_LCDrow,??_mainMenu
  3921  00169C  6A60               	clrf	(??_mainMenu+1)^0,c
  3922  00169E  265F               	addwf	??_mainMenu^0,f,c
  3923  0016A0  0E00               	movlw	0
  3924  0016A2  2260               	addwfc	(??_mainMenu+1)^0,f,c
  3925  0016A4  BE60               	btfsc	(??_mainMenu+1)^0,7,c
  3926  0016A6  D006               	goto	u3120
  3927  0016A8  5060               	movf	(??_mainMenu+1)^0,w,c
  3928  0016AA  E129               	bnz	l643
  3929  0016AC  0E05               	movlw	5
  3930  0016AE  5C5F               	subwf	??_mainMenu^0,w,c
  3931  0016B0  B0D8               	btfsc	status,0,c
  3932  0016B2  0012               	return	
  3933  0016B4                     u3120:
  3934                           
  3935                           ;Menu.c: 494:         if (MAINMENUSIZE[LCDrow+val] > 16){
  3936  0016B4  D837               	call	PL62	;call to abstracted procedure
  3937  0016B6  0E10               	movlw	16
  3938  0016B8  64DF               	cpfsgt	indf2,c
  3939  0016BA  D015               	goto	l4217
  3940                           
  3941                           ;Menu.c: 495:             if (LCDcol < 16){
  3942  0016BC  6037               	cpfslt	_LCDcol^0,c
  3943  0016BE  EF5E  F000         	goto	_nextRow
  3944                           
  3945                           ;Menu.c: 496:                 LcPutChar(MAINMENU[LCDrow+val][(LCDcol+LCDcolm) % MAINMENU
      +                          SIZE[LCDrow+val]]);
  3946  0016C2  5037               	movf	_LCDcol^0,w,c
  3947  0016C4  2436               	addwf	_LCDcolm^0,w,c
  3948  0016C6  6E51               	movwf	___awmod@dividend^0,c
  3949  0016C8  6A52               	clrf	(___awmod@dividend+1)^0,c
  3950  0016CA  3652               	rlcf	(___awmod@dividend+1)^0,f,c
  3951  0016CC  D82B               	call	PL62	;call to abstracted procedure
  3952  0016CE  50DF               	movf	indf2,w,c
  3953  0016D0  6E53               	movwf	___awmod@divisor^0,c
  3954  0016D2  6A54               	clrf	(___awmod@divisor+1)^0,c
  3955  0016D4  EC8B  F00C         	call	___awmod	;wreg free
  3956  0016D8  D813               	call	PL16	;call to abstracted procedure
  3957  0016DA  2451               	addwf	?___awmod^0,w,c
  3958  0016DC  D81B               	call	PL26	;call to abstracted procedure
  3959  0016DE  ECBC  F00E         	call	_LcPutChar
  3960  0016E2                     l4213:
  3961                           
  3962                           ;Menu.c: 497:                 LCDcol++;
  3963  0016E2  2A37               	incf	_LCDcol^0,f,c
  3964                           
  3965                           ;Menu.c: 498:             }else {
  3966  0016E4  0012               	return	
  3967  0016E6                     l4217:
  3968  0016E6  D80C               	call	PL16	;call to abstracted procedure
  3969  0016E8  2437               	addwf	_LCDcol^0,w,c
  3970  0016EA  D814               	call	PL26	;call to abstracted procedure
  3971  0016EC  E102 EF5E  F000    	bz	_nextRow
  3972                           
  3973                           ;Menu.c: 503:             LcPutChar(MAINMENU[LCDrow+val][LCDcol]);
  3974  0016F2  D806               	call	PL16	;call to abstracted procedure
  3975  0016F4  2437               	addwf	_LCDcol^0,w,c
  3976  0016F6  D80E               	call	PL26	;call to abstracted procedure
  3977  0016F8  ECBC  F00E         	call	_LcPutChar
  3978  0016FC  D7F2               	goto	l4213
  3979  0016FE                     l643:
  3980  0016FE  0012               	return		;funcret
  3981  001700                     __end_of_mainMenu:
  3982                           	callstack 0
  3983  001700                     PL16:
  3984                           	callstack 23
  3985  001700  5035               	movf	_val^0,w,c
  3986  001702  0D1C               	mullw	28
  3987  001704  CFF3 F05F          	movff	prodl,??_mainMenu
  3988  001708  5038               	movf	_LCDrow^0,w,c
  3989  00170A  0D1C               	mullw	28
  3990  00170C  50F3               	movf	243,w,c
  3991  00170E  0F0D               	addlw	low _MAINMENU
  3992  001710  245F               	addwf	??_mainMenu^0,w,c
  3993  001712  0012               	return	
  3994  001714                     __end_ofPL16:
  3995                           	callstack 0
  3996  001714                     PL26:
  3997                           	callstack 23
  3998  001714  6E60               	movwf	(??_mainMenu+1)^0,c
  3999  001716  C060  FFF6         	movff	??_mainMenu+1,tblptrl
  4000  00171A                     	if	1	;There is more than 1 active tblptr byte
  4001  00171A  0E02               	movlw	high __smallconst
  4002  00171C  6EF7               	movwf	tblptrh,c
  4003  00171E                     	endif
  4004  00171E                     	if	0	;tblptru may be non-zero
  4005  00171E                     	endif
  4006  00171E                     	if	0	;tblptru may be non-zero
  4007  00171E                     	endif
  4008  00171E  0008               	tblrd		*
  4009  001720  50F5               	movf	tablat,w,c
  4010  001722  0012               	return	
  4011  001724                     __end_ofPL26:
  4012                           	callstack 0
  4013  001724                     PL62:
  4014                           	callstack 23
  4015  001724  5038               	movf	_LCDrow^0,w,c
  4016  001726  0F70               	addlw	low _MAINMENUSIZE
  4017  001728  2435               	addwf	_val^0,w,c
  4018  00172A  6ED9               	movwf	fsr2l,c
  4019  00172C  6ADA               	clrf	fsr2h,c
  4020  00172E  0012               	return	
  4021  001730                     __end_ofPL62:
  4022                           	callstack 0
  4023                           
  4024 ;; *************** function _isPressed *****************
  4025 ;; Defined at:
  4026 ;;		line 202 in file "keypad.c"
  4027 ;; Parameters:    Size  Location     Type
  4028 ;;		None
  4029 ;; Auto vars:     Size  Location     Type
  4030 ;;		None
  4031 ;; Return value:  Size  Location     Type
  4032 ;;                  1    wreg      unsigned char 
  4033 ;; Registers used:
  4034 ;;		wreg, status,2, status,0
  4035 ;; Tracked objects:
  4036 ;;		On entry : 0/0
  4037 ;;		On exit  : 0/0
  4038 ;;		Unchanged: 0/0
  4039 ;; Data sizes:     COMRAM   BANK0   BANK1
  4040 ;;      Params:         0       0       0
  4041 ;;      Locals:         1       0       0
  4042 ;;      Temps:          0       0       0
  4043 ;;      Totals:         1       0       0
  4044 ;;Total ram usage:        1 bytes
  4045 ;; Hardware stack levels used: 1
  4046 ;; Hardware stack levels required when called: 2
  4047 ;; This function calls:
  4048 ;;		Nothing
  4049 ;; This function is called by:
  4050 ;;		_menuMotor
  4051 ;;		_timeMotor
  4052 ;; This function uses a non-reentrant model
  4053 ;;
  4054                           
  4055                           	psect	text19
  4056  001FCC                     __ptext19:
  4057                           	callstack 0
  4058  001FCC                     _isPressed:
  4059                           	callstack 27
  4060                           
  4061                           ;keypad.c: 204:  return pressed && (stateSMS == 1||stateSMS == 4);
  4062                           
  4063                           ;incstack = 0
  4064  001FCC  6A51               	clrf	_isPressed$590^0,c
  4065  001FCE  5045               	movf	_pressed^0,w,c
  4066  001FD0  E007               	bz	l193
  4067  001FD2  0441               	decf	_stateSMS^0,w,c
  4068  001FD4  E003               	bz	u3060
  4069  001FD6  0E04               	movlw	4
  4070  001FD8  1841               	xorwf	_stateSMS^0,w,c
  4071  001FDA  E102               	bnz	l193
  4072  001FDC                     u3060:
  4073  001FDC  0E01               	movlw	1
  4074  001FDE  6E51               	movwf	_isPressed$590^0,c
  4075  001FE0                     l193:
  4076  001FE0  5051               	movf	_isPressed$590^0,w,c
  4077  001FE2  0012               	return		;funcret
  4078  001FE4                     __end_of_isPressed:
  4079                           	callstack 0
  4080                           
  4081 ;; *************** function _incrementPosition *****************
  4082 ;; Defined at:
  4083 ;;		line 382 in file "EEPROM.c"
  4084 ;; Parameters:    Size  Location     Type
  4085 ;;		None
  4086 ;; Auto vars:     Size  Location     Type
  4087 ;;		None
  4088 ;; Return value:  Size  Location     Type
  4089 ;;                  1    wreg      void 
  4090 ;; Registers used:
  4091 ;;		status,2, status,0
  4092 ;; Tracked objects:
  4093 ;;		On entry : 0/0
  4094 ;;		On exit  : 0/0
  4095 ;;		Unchanged: 0/0
  4096 ;; Data sizes:     COMRAM   BANK0   BANK1
  4097 ;;      Params:         0       0       0
  4098 ;;      Locals:         0       0       0
  4099 ;;      Temps:          0       0       0
  4100 ;;      Totals:         0       0       0
  4101 ;;Total ram usage:        0 bytes
  4102 ;; Hardware stack levels used: 1
  4103 ;; Hardware stack levels required when called: 2
  4104 ;; This function calls:
  4105 ;;		Nothing
  4106 ;; This function is called by:
  4107 ;;		_menuMotor
  4108 ;; This function uses a non-reentrant model
  4109 ;;
  4110                           
  4111                           	psect	text20
  4112  00018A                     __ptext20:
  4113                           	callstack 0
  4114  00018A                     _incrementPosition:
  4115                           	callstack 27
  4116                           
  4117                           ;EEPROM.c: 383:     position++;
  4118                           
  4119                           ;incstack = 0
  4120  00018A  2A20               	incf	_position^0,f,c
  4121  00018C  0012               	return		;funcret
  4122  00018E                     __end_of_incrementPosition:
  4123                           	callstack 0
  4124                           
  4125 ;; *************** function _getPresses *****************
  4126 ;; Defined at:
  4127 ;;		line 234 in file "keypad.c"
  4128 ;; Parameters:    Size  Location     Type
  4129 ;;		None
  4130 ;; Auto vars:     Size  Location     Type
  4131 ;;		None
  4132 ;; Return value:  Size  Location     Type
  4133 ;;                  1    wreg      unsigned char 
  4134 ;; Registers used:
  4135 ;;		wreg, status,2
  4136 ;; Tracked objects:
  4137 ;;		On entry : 0/0
  4138 ;;		On exit  : 0/0
  4139 ;;		Unchanged: 0/0
  4140 ;; Data sizes:     COMRAM   BANK0   BANK1
  4141 ;;      Params:         0       0       0
  4142 ;;      Locals:         0       0       0
  4143 ;;      Temps:          0       0       0
  4144 ;;      Totals:         0       0       0
  4145 ;;Total ram usage:        0 bytes
  4146 ;; Hardware stack levels used: 1
  4147 ;; Hardware stack levels required when called: 2
  4148 ;; This function calls:
  4149 ;;		Nothing
  4150 ;; This function is called by:
  4151 ;;		_menuMotor
  4152 ;; This function uses a non-reentrant model
  4153 ;;
  4154                           
  4155                           	psect	text21
  4156  00018E                     __ptext21:
  4157                           	callstack 0
  4158  00018E                     _getPresses:
  4159                           	callstack 27
  4160                           
  4161                           ;keypad.c: 235:     return available;
  4162                           
  4163                           ;incstack = 0
  4164  00018E  5043               	movf	_available^0,w,c
  4165  000190  0012               	return		;funcret
  4166  000192                     __end_of_getPresses:
  4167                           	callstack 0
  4168                           
  4169 ;; *************** function _displayTimeRemaining *****************
  4170 ;; Defined at:
  4171 ;;		line 175 in file "time.c"
  4172 ;; Parameters:    Size  Location     Type
  4173 ;;		None
  4174 ;; Auto vars:     Size  Location     Type
  4175 ;;		None
  4176 ;; Return value:  Size  Location     Type
  4177 ;;                  1    wreg      void 
  4178 ;; Registers used:
  4179 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4180 ;; Tracked objects:
  4181 ;;		On entry : 0/0
  4182 ;;		On exit  : 0/0
  4183 ;;		Unchanged: 0/0
  4184 ;; Data sizes:     COMRAM   BANK0   BANK1
  4185 ;;      Params:         0       0       0
  4186 ;;      Locals:         0       0       0
  4187 ;;      Temps:          0       0       0
  4188 ;;      Totals:         0       0       0
  4189 ;;Total ram usage:        0 bytes
  4190 ;; Hardware stack levels used: 1
  4191 ;; Hardware stack levels required when called: 5
  4192 ;; This function calls:
  4193 ;;		_LcGotoXY
  4194 ;; This function is called by:
  4195 ;;		_menuMotor
  4196 ;; This function uses a non-reentrant model
  4197 ;;
  4198                           
  4199                           	psect	text22
  4200  00004C                     __ptext22:
  4201                           	callstack 0
  4202  00004C                     _displayTimeRemaining:
  4203                           	callstack 24
  4204                           
  4205                           ;time.c: 176:     game = 0;
  4206                           
  4207                           ;incstack = 0
  4208  00004C  6A12               	clrf	_game^0,c
  4209                           
  4210                           ;time.c: 177:     LcGotoXY(11,0);
  4211  00004E  0E00               	movlw	0
  4212  000050  6E59               	movwf	LcGotoXY@Row^0,c
  4213  000052  0E0B               	movlw	11
  4214  000054  EC8F  F00E         	call	_LcGotoXY
  4215                           
  4216                           ;time.c: 178:     state = 20;
  4217  000058  0E14               	movlw	20
  4218  00005A  6E13               	movwf	_state@time$F1787^0,c
  4219  00005C  0C14               	retlw	20	;funcret
  4220  00005E                     __end_of_displayTimeRemaining:
  4221                           	callstack 0
  4222                           
  4223 ;; *************** function _displaySysTime *****************
  4224 ;; Defined at:
  4225 ;;		line 213 in file "time.c"
  4226 ;; Parameters:    Size  Location     Type
  4227 ;;		None
  4228 ;; Auto vars:     Size  Location     Type
  4229 ;;		None
  4230 ;; Return value:  Size  Location     Type
  4231 ;;                  1    wreg      void 
  4232 ;; Registers used:
  4233 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4234 ;; Tracked objects:
  4235 ;;		On entry : 0/0
  4236 ;;		On exit  : 0/0
  4237 ;;		Unchanged: 0/0
  4238 ;; Data sizes:     COMRAM   BANK0   BANK1
  4239 ;;      Params:         0       0       0
  4240 ;;      Locals:         0       0       0
  4241 ;;      Temps:          0       0       0
  4242 ;;      Totals:         0       0       0
  4243 ;;Total ram usage:        0 bytes
  4244 ;; Hardware stack levels used: 1
  4245 ;; Hardware stack levels required when called: 5
  4246 ;; This function calls:
  4247 ;;		_LcGotoXY
  4248 ;; This function is called by:
  4249 ;;		_menuMotor
  4250 ;; This function uses a non-reentrant model
  4251 ;;
  4252                           
  4253                           	psect	text23
  4254  000110                     __ptext23:
  4255                           	callstack 0
  4256  000110                     _displaySysTime:
  4257                           	callstack 24
  4258                           
  4259                           ;time.c: 214:     state = 30;
  4260                           
  4261                           ;incstack = 0
  4262  000110  0E1E               	movlw	30
  4263                           
  4264                           ;time.c: 215:     LcGotoXY(0,1);
  4265  000112  ECAC  F008         	call	PL42	;call to abstracted procedure
  4266  000116  EF8F  F00E         	goto	_LcGotoXY
  4267  00011A                     __end_of_displaySysTime:
  4268                           	callstack 0
  4269                           
  4270 ;; *************** function _displayString *****************
  4271 ;; Defined at:
  4272 ;;		line 482 in file "Menu.c"
  4273 ;; Parameters:    Size  Location     Type
  4274 ;;  string          1   19[COMRAM] PTR unsigned char 
  4275 ;;		 -> sysTime(14), modifyTimeString(13), TIME(16), LOGREGSCREEN(12), 
  4276 ;;		 -> LOGINMENU(22), 
  4277 ;; Auto vars:     Size  Location     Type
  4278 ;;		None
  4279 ;; Return value:  Size  Location     Type
  4280 ;;                  1    wreg      void 
  4281 ;; Registers used:
  4282 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4283 ;; Tracked objects:
  4284 ;;		On entry : 0/0
  4285 ;;		On exit  : 0/0
  4286 ;;		Unchanged: 0/0
  4287 ;; Data sizes:     COMRAM   BANK0   BANK1
  4288 ;;      Params:         1       0       0
  4289 ;;      Locals:         0       0       0
  4290 ;;      Temps:          0       0       0
  4291 ;;      Totals:         1       0       0
  4292 ;;Total ram usage:        1 bytes
  4293 ;; Hardware stack levels used: 1
  4294 ;; Hardware stack levels required when called: 6
  4295 ;; This function calls:
  4296 ;;		_LcPutChar
  4297 ;;		_nextRow
  4298 ;; This function is called by:
  4299 ;;		_menuMotor
  4300 ;; This function uses a non-reentrant model
  4301 ;;
  4302                           
  4303                           	psect	text24
  4304  001E16                     __ptext24:
  4305                           	callstack 0
  4306  001E16                     _displayString:
  4307                           	callstack 0
  4308                           
  4309                           ;Menu.c: 483:     if (string[LCDcol+LCDcolm] != '\0'){
  4310                           
  4311                           ;incstack = 0
  4312  001E16  D80D               	call	PL48	;call to abstracted procedure
  4313  001E18  6ED9               	movwf	fsr2l,c
  4314  001E1A  6ADA               	clrf	fsr2h,c
  4315  001E1C  50DF               	movf	indf2,w,c
  4316  001E1E  E102 EF5E  F000    	bz	_nextRow
  4317                           
  4318                           ;Menu.c: 484:         LcPutChar(string[LCDcol+LCDcolm]);
  4319  001E24  D806               	call	PL48	;call to abstracted procedure
  4320  001E26  ECC8  F004         	call	PL32	;call to abstracted procedure
  4321  001E2A  ECBC  F00E         	call	_LcPutChar
  4322                           
  4323                           ;Menu.c: 485:         LCDcol++;
  4324  001E2E  2A37               	incf	_LCDcol^0,f,c
  4325                           
  4326                           ;Menu.c: 486:     } else {
  4327  001E30  0012               	return	
  4328  001E32                     __end_of_displayString:
  4329                           	callstack 0
  4330  001E32                     PL48:
  4331                           	callstack 23
  4332  001E32  505F               	movf	displayString@string^0,w,c
  4333  001E34  2437               	addwf	_LCDcol^0,w,c
  4334  001E36  2436               	addwf	_LCDcolm^0,w,c
  4335  001E38  0012               	return	
  4336  001E3A                     __end_ofPL48:
  4337                           	callstack 0
  4338                           
  4339 ;; *************** function _displayScoresMarquee *****************
  4340 ;; Defined at:
  4341 ;;		line 295 in file "EEPROM.c"
  4342 ;; Parameters:    Size  Location     Type
  4343 ;;		None
  4344 ;; Auto vars:     Size  Location     Type
  4345 ;;		None
  4346 ;; Return value:  Size  Location     Type
  4347 ;;                  1    wreg      void 
  4348 ;; Registers used:
  4349 ;;		wreg, status,2
  4350 ;; Tracked objects:
  4351 ;;		On entry : 0/0
  4352 ;;		On exit  : 0/0
  4353 ;;		Unchanged: 0/0
  4354 ;; Data sizes:     COMRAM   BANK0   BANK1
  4355 ;;      Params:         0       0       0
  4356 ;;      Locals:         0       0       0
  4357 ;;      Temps:          0       0       0
  4358 ;;      Totals:         0       0       0
  4359 ;;Total ram usage:        0 bytes
  4360 ;; Hardware stack levels used: 1
  4361 ;; Hardware stack levels required when called: 2
  4362 ;; This function calls:
  4363 ;;		Nothing
  4364 ;; This function is called by:
  4365 ;;		_menuMotor
  4366 ;; This function uses a non-reentrant model
  4367 ;;
  4368                           
  4369                           	psect	text25
  4370  000148                     __ptext25:
  4371                           	callstack 0
  4372  000148                     _displayScoresMarquee:
  4373                           	callstack 27
  4374                           
  4375                           ;EEPROM.c: 296:     state = 50;
  4376                           
  4377                           ;incstack = 0
  4378  000148  0E32               	movlw	50
  4379  00014A  6E1F               	movwf	_state@EEPROM$F1704^0,c
  4380                           
  4381                           ;EEPROM.c: 297:     status = 0;
  4382  00014C  6A1D               	clrf	_status^0,c
  4383  00014E  0012               	return		;funcret
  4384  000150                     __end_of_displayScoresMarquee:
  4385                           	callstack 0
  4386                           
  4387 ;; *************** function _displayResults *****************
  4388 ;; Defined at:
  4389 ;;		line 525 in file "Menu.c"
  4390 ;; Parameters:    Size  Location     Type
  4391 ;;		None
  4392 ;; Auto vars:     Size  Location     Type
  4393 ;;		None
  4394 ;; Return value:  Size  Location     Type
  4395 ;;                  1    wreg      void 
  4396 ;; Registers used:
  4397 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4398 ;; Tracked objects:
  4399 ;;		On entry : 0/0
  4400 ;;		On exit  : 0/0
  4401 ;;		Unchanged: 0/0
  4402 ;; Data sizes:     COMRAM   BANK0   BANK1
  4403 ;;      Params:         0       0       0
  4404 ;;      Locals:         0       0       0
  4405 ;;      Temps:          0       0       0
  4406 ;;      Totals:         0       0       0
  4407 ;;Total ram usage:        0 bytes
  4408 ;; Hardware stack levels used: 1
  4409 ;; Hardware stack levels required when called: 6
  4410 ;; This function calls:
  4411 ;;		_LcPutChar
  4412 ;;		_nextRow
  4413 ;; This function is called by:
  4414 ;;		_menuMotor
  4415 ;; This function uses a non-reentrant model
  4416 ;;
  4417                           
  4418                           	psect	text26
  4419  001DA2                     __ptext26:
  4420                           	callstack 0
  4421  001DA2                     _displayResults:
  4422                           	callstack 0
  4423                           
  4424                           ;Menu.c: 526:     if (RESULTS[LCDrow][LCDcol] != '\0'){
  4425                           
  4426                           ;incstack = 0
  4427  001DA2  D80D               	call	PL36	;call to abstracted procedure
  4428  001DA4  6ED9               	movwf	fsr2l,c
  4429  001DA6  6ADA               	clrf	fsr2h,c
  4430  001DA8  50DF               	movf	indf2,w,c
  4431  001DAA  E102 EF5E  F000    	bz	_nextRow
  4432                           
  4433                           ;Menu.c: 527:         LcPutChar(RESULTS[LCDrow][LCDcol]);
  4434  001DB0  D806               	call	PL36	;call to abstracted procedure
  4435  001DB2  ECC8  F004         	call	PL32	;call to abstracted procedure
  4436  001DB6  ECBC  F00E         	call	_LcPutChar
  4437                           
  4438                           ;Menu.c: 528:         LCDcol++;
  4439  001DBA  2A37               	incf	_LCDcol^0,f,c
  4440                           
  4441                           ;Menu.c: 529:     } else {
  4442  001DBC  0012               	return	
  4443  001DBE                     __end_of_displayResults:
  4444                           	callstack 0
  4445  001DBE                     PL36:
  4446                           	callstack 23
  4447  001DBE  5038               	movf	_LCDrow^0,w,c
  4448  001DC0  0D0B               	mullw	11
  4449  001DC2  50F3               	movf	243,w,c
  4450  001DC4  0F80               	addlw	low _RESULTS
  4451  001DC6  2437               	addwf	_LCDcol^0,w,c
  4452  001DC8  0012               	return	
  4453  001DCA                     __end_ofPL36:
  4454                           	callstack 0
  4455                           
  4456 ;; *************** function _displayLogOut *****************
  4457 ;; Defined at:
  4458 ;;		line 534 in file "Menu.c"
  4459 ;; Parameters:    Size  Location     Type
  4460 ;;		None
  4461 ;; Auto vars:     Size  Location     Type
  4462 ;;		None
  4463 ;; Return value:  Size  Location     Type
  4464 ;;                  1    wreg      void 
  4465 ;; Registers used:
  4466 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4467 ;; Tracked objects:
  4468 ;;		On entry : 0/0
  4469 ;;		On exit  : 0/0
  4470 ;;		Unchanged: 0/0
  4471 ;; Data sizes:     COMRAM   BANK0   BANK1
  4472 ;;      Params:         0       0       0
  4473 ;;      Locals:         0       0       0
  4474 ;;      Temps:          0       0       0
  4475 ;;      Totals:         0       0       0
  4476 ;;Total ram usage:        0 bytes
  4477 ;; Hardware stack levels used: 1
  4478 ;; Hardware stack levels required when called: 6
  4479 ;; This function calls:
  4480 ;;		_LcPutChar
  4481 ;;		_nextRow
  4482 ;; This function is called by:
  4483 ;;		_menuMotor
  4484 ;; This function uses a non-reentrant model
  4485 ;;
  4486                           
  4487                           	psect	text27
  4488  001B50                     __ptext27:
  4489                           	callstack 0
  4490  001B50                     _displayLogOut:
  4491                           	callstack 23
  4492                           
  4493                           ;Menu.c: 535:     if (LOGOUTMESSAGE[LCDcol] != '\0'){
  4494                           
  4495                           ;incstack = 0
  4496  001B50  5037               	movf	_LCDcol^0,w,c
  4497  001B52  0F96               	addlw	low _LOGOUTMESSAGE
  4498  001B54  6ED9               	movwf	fsr2l,c
  4499  001B56  6ADA               	clrf	fsr2h,c
  4500  001B58  50DF               	movf	indf2,w,c
  4501  001B5A  E008               	bz	l4327
  4502                           
  4503                           ;Menu.c: 536:         LcPutChar(LOGOUTMESSAGE[LCDcol]);
  4504  001B5C  5037               	movf	_LCDcol^0,w,c
  4505  001B5E  0F96               	addlw	low _LOGOUTMESSAGE
  4506  001B60  ECC8  F004         	call	PL32	;call to abstracted procedure
  4507  001B64  ECBC  F00E         	call	_LcPutChar
  4508                           
  4509                           ;Menu.c: 537:         LCDcol++;
  4510  001B68  2A37               	incf	_LCDcol^0,f,c
  4511                           
  4512                           ;Menu.c: 538:     } else if (mUser.username[LCDcolm] != '\0' && LCDcolm < 8) {
  4513  001B6A  0012               	return	
  4514  001B6C                     l4327:
  4515  001B6C  5036               	movf	_LCDcolm^0,w,c
  4516  001B6E  D80F               	call	PL44	;call to abstracted procedure
  4517  001B70  E102 EF5E  F000    	bz	_nextRow
  4518  001B76  0E08               	movlw	8
  4519  001B78  6036               	cpfslt	_LCDcolm^0,c
  4520  001B7A  EF5E  F000         	goto	_nextRow
  4521                           
  4522                           ;Menu.c: 539:         LcPutChar(mUser.username[LCDcolm]);
  4523  001B7E  5036               	movf	_LCDcolm^0,w,c
  4524  001B80  0FEC               	addlw	low _mUser
  4525  001B82  ECC8  F004         	call	PL32	;call to abstracted procedure
  4526  001B86  ECBC  F00E         	call	_LcPutChar
  4527                           
  4528                           ;Menu.c: 540:         LCDcolm++;
  4529  001B8A  2A36               	incf	_LCDcolm^0,f,c
  4530                           
  4531                           ;Menu.c: 541:     } else {
  4532  001B8C  0012               	return	
  4533  001B8E                     __end_of_displayLogOut:
  4534                           	callstack 0
  4535  001B8E                     PL44:
  4536                           	callstack 23
  4537  001B8E  0FEC               	addlw	low _mUser
  4538  001B90  6ED9               	movwf	fsr2l,c
  4539  001B92  6ADA               	clrf	fsr2h,c
  4540  001B94  50DF               	movf	indf2,w,c
  4541  001B96  0012               	return	
  4542  001B98                     __end_ofPL44:
  4543                           	callstack 0
  4544                           
  4545 ;; *************** function _displayError *****************
  4546 ;; Defined at:
  4547 ;;		line 511 in file "Menu.c"
  4548 ;; Parameters:    Size  Location     Type
  4549 ;;		None
  4550 ;; Auto vars:     Size  Location     Type
  4551 ;;		None
  4552 ;; Return value:  Size  Location     Type
  4553 ;;                  1    wreg      void 
  4554 ;; Registers used:
  4555 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4556 ;; Tracked objects:
  4557 ;;		On entry : 0/0
  4558 ;;		On exit  : 0/0
  4559 ;;		Unchanged: 0/0
  4560 ;; Data sizes:     COMRAM   BANK0   BANK1
  4561 ;;      Params:         0       0       0
  4562 ;;      Locals:         0       0       0
  4563 ;;      Temps:          0       0       0
  4564 ;;      Totals:         0       0       0
  4565 ;;Total ram usage:        0 bytes
  4566 ;; Hardware stack levels used: 1
  4567 ;; Hardware stack levels required when called: 6
  4568 ;; This function calls:
  4569 ;;		_LcPutChar
  4570 ;;		_nextRow
  4571 ;; This function is called by:
  4572 ;;		_menuMotor
  4573 ;; This function uses a non-reentrant model
  4574 ;;
  4575                           
  4576                           	psect	text28
  4577  001C52                     __ptext28:
  4578                           	callstack 0
  4579  001C52                     _displayError:
  4580                           	callstack 23
  4581                           
  4582                           ;Menu.c: 512:     if (LCDrow == 0){
  4583                           
  4584                           ;incstack = 0
  4585  001C52  5038               	movf	_LCDrow^0,w,c
  4586  001C54  E110               	bnz	l4277
  4587                           
  4588                           ;Menu.c: 513:        if (ERROR[LCDcol] != '\0'){
  4589  001C56  5037               	movf	_LCDcol^0,w,c
  4590  001C58  0F67               	addlw	low _ERROR
  4591  001C5A  6ED9               	movwf	fsr2l,c
  4592  001C5C  6ADA               	clrf	fsr2h,c
  4593  001C5E  50DF               	movf	indf2,w,c
  4594  001C60  E102 EF5E  F000    	bz	_nextRow
  4595                           
  4596                           ;Menu.c: 514:             LcPutChar(ERROR[LCDcol]);
  4597  001C66  5037               	movf	_LCDcol^0,w,c
  4598  001C68  0F67               	addlw	low _ERROR
  4599  001C6A  ECC8  F004         	call	PL32	;call to abstracted procedure
  4600  001C6E  ECBC  F00E         	call	_LcPutChar
  4601                           
  4602                           ;Menu.c: 515:             LCDcol++;
  4603  001C72  2A37               	incf	_LCDcol^0,f,c
  4604                           
  4605                           ;Menu.c: 516:         } else {
  4606  001C74  0012               	return	
  4607  001C76                     l4277:
  4608                           
  4609                           ;Menu.c: 520:         LcPutChar(val);
  4610  001C76  5035               	movf	_val^0,w,c
  4611  001C78  ECBC  F00E         	call	_LcPutChar
  4612                           
  4613                           ;Menu.c: 521:         LcPutChar(LCDcolm);
  4614  001C7C  5036               	movf	_LCDcolm^0,w,c
  4615  001C7E  ECBC  F00E         	call	_LcPutChar
  4616                           
  4617                           ;Menu.c: 522:         LCDrow++;
  4618  001C82  2A38               	incf	_LCDrow^0,f,c
  4619  001C84  0012               	return		;funcret
  4620  001C86                     __end_of_displayError:
  4621                           	callstack 0
  4622                           
  4623 ;; *************** function _nextRow *****************
  4624 ;; Defined at:
  4625 ;;		line 546 in file "Menu.c"
  4626 ;; Parameters:    Size  Location     Type
  4627 ;;		None
  4628 ;; Auto vars:     Size  Location     Type
  4629 ;;		None
  4630 ;; Return value:  Size  Location     Type
  4631 ;;                  1    wreg      void 
  4632 ;; Registers used:
  4633 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4634 ;; Tracked objects:
  4635 ;;		On entry : 0/0
  4636 ;;		On exit  : 0/0
  4637 ;;		Unchanged: 0/0
  4638 ;; Data sizes:     COMRAM   BANK0   BANK1
  4639 ;;      Params:         0       0       0
  4640 ;;      Locals:         0       0       0
  4641 ;;      Temps:          0       0       0
  4642 ;;      Totals:         0       0       0
  4643 ;;Total ram usage:        0 bytes
  4644 ;; Hardware stack levels used: 1
  4645 ;; Hardware stack levels required when called: 5
  4646 ;; This function calls:
  4647 ;;		_LcGotoXY
  4648 ;; This function is called by:
  4649 ;;		_displayString
  4650 ;;		_mainMenu
  4651 ;;		_displayError
  4652 ;;		_displayResults
  4653 ;;		_displayLogOut
  4654 ;; This function uses a non-reentrant model
  4655 ;;
  4656                           
  4657                           	psect	text29
  4658  0000BC                     __ptext29:
  4659                           	callstack 0
  4660  0000BC                     _nextRow:
  4661                           	callstack 23
  4662                           
  4663                           ;Menu.c: 547:     LCDrow++;
  4664                           
  4665                           ;incstack = 0
  4666  0000BC  2A38               	incf	_LCDrow^0,f,c
  4667                           
  4668                           ;Menu.c: 548:     LcGotoXY(0,1);
  4669  0000BE  EC27  F007         	call	PL54	;call to abstracted procedure
  4670  0000C2  EC8F  F00E         	call	_LcGotoXY
  4671                           
  4672                           ;Menu.c: 549:     LCDcol = 0;
  4673  0000C6  6A37               	clrf	_LCDcol^0,c
  4674  0000C8  0012               	return		;funcret
  4675  0000CA                     __end_of_nextRow:
  4676                           	callstack 0
  4677                           
  4678 ;; *************** function _SiRecievedByte *****************
  4679 ;; Defined at:
  4680 ;;		line 45 in file "SIO.c"
  4681 ;; Parameters:    Size  Location     Type
  4682 ;;		None
  4683 ;; Auto vars:     Size  Location     Type
  4684 ;;		None
  4685 ;; Return value:  Size  Location     Type
  4686 ;;                  1    wreg      unsigned char 
  4687 ;; Registers used:
  4688 ;;		wreg
  4689 ;; Tracked objects:
  4690 ;;		On entry : 0/0
  4691 ;;		On exit  : 0/0
  4692 ;;		Unchanged: 0/0
  4693 ;; Data sizes:     COMRAM   BANK0   BANK1
  4694 ;;      Params:         0       0       0
  4695 ;;      Locals:         0       0       0
  4696 ;;      Temps:          0       0       0
  4697 ;;      Totals:         0       0       0
  4698 ;;Total ram usage:        0 bytes
  4699 ;; Hardware stack levels used: 1
  4700 ;; Hardware stack levels required when called: 2
  4701 ;; This function calls:
  4702 ;;		Nothing
  4703 ;; This function is called by:
  4704 ;;		_menuMotor
  4705 ;; This function uses a non-reentrant model
  4706 ;;
  4707                           
  4708                           	psect	text30
  4709  000170                     __ptext30:
  4710                           	callstack 0
  4711  000170                     _SiRecievedByte:
  4712                           	callstack 27
  4713                           
  4714                           ;SIO.c: 46:     return PIR1bits.RCIF;
  4715                           
  4716                           ;incstack = 0
  4717  000170  BA9E               	btfsc	158,5,c	;volatile
  4718  000172  0C01               	retlw	1
  4719  000174  0C00               	retlw	0	;funcret
  4720  000176                     __end_of_SiRecievedByte:
  4721                           	callstack 0
  4722                           
  4723 ;; *************** function _SiReadByte *****************
  4724 ;; Defined at:
  4725 ;;		line 49 in file "SIO.c"
  4726 ;; Parameters:    Size  Location     Type
  4727 ;;		None
  4728 ;; Auto vars:     Size  Location     Type
  4729 ;;		None
  4730 ;; Return value:  Size  Location     Type
  4731 ;;                  1    wreg      unsigned char 
  4732 ;; Registers used:
  4733 ;;		wreg, status,2
  4734 ;; Tracked objects:
  4735 ;;		On entry : 0/0
  4736 ;;		On exit  : 0/0
  4737 ;;		Unchanged: 0/0
  4738 ;; Data sizes:     COMRAM   BANK0   BANK1
  4739 ;;      Params:         0       0       0
  4740 ;;      Locals:         0       0       0
  4741 ;;      Temps:          0       0       0
  4742 ;;      Totals:         0       0       0
  4743 ;;Total ram usage:        0 bytes
  4744 ;; Hardware stack levels used: 1
  4745 ;; Hardware stack levels required when called: 2
  4746 ;; This function calls:
  4747 ;;		Nothing
  4748 ;; This function is called by:
  4749 ;;		_menuMotor
  4750 ;; This function uses a non-reentrant model
  4751 ;;
  4752                           
  4753                           	psect	text31
  4754  000192                     __ptext31:
  4755                           	callstack 0
  4756  000192                     _SiReadByte:
  4757                           	callstack 27
  4758                           
  4759                           ;SIO.c: 50:     return RCREG;
  4760                           
  4761                           ;incstack = 0
  4762  000192  50AE               	movf	174,w,c	;volatile
  4763  000194  0012               	return		;funcret
  4764  000196                     __end_of_SiReadByte:
  4765                           	callstack 0
  4766                           
  4767 ;; *************** function _LcScroll *****************
  4768 ;; Defined at:
  4769 ;;		line 227 in file "LcTLCD.c"
  4770 ;; Parameters:    Size  Location     Type
  4771 ;;		None
  4772 ;; Auto vars:     Size  Location     Type
  4773 ;;		None
  4774 ;; Return value:  Size  Location     Type
  4775 ;;                  1    wreg      void 
  4776 ;; Registers used:
  4777 ;;		wreg, status,2, status,0, cstack
  4778 ;; Tracked objects:
  4779 ;;		On entry : 0/0
  4780 ;;		On exit  : 0/0
  4781 ;;		Unchanged: 0/0
  4782 ;; Data sizes:     COMRAM   BANK0   BANK1
  4783 ;;      Params:         0       0       0
  4784 ;;      Locals:         0       0       0
  4785 ;;      Temps:          0       0       0
  4786 ;;      Totals:         0       0       0
  4787 ;;Total ram usage:        0 bytes
  4788 ;; Hardware stack levels used: 1
  4789 ;; Hardware stack levels required when called: 4
  4790 ;; This function calls:
  4791 ;;		_CantaIR
  4792 ;; This function is called by:
  4793 ;;		_menuMotor
  4794 ;; This function uses a non-reentrant model
  4795 ;;
  4796                           
  4797                           	psect	text32
  4798  000176                     __ptext32:
  4799                           	callstack 0
  4800  000176                     _LcScroll:
  4801                           	callstack 25
  4802                           
  4803                           ;LcTLCD.c: 228:     CantaIR(0x10 | 0x08);
  4804                           
  4805                           ;incstack = 0
  4806  000176  0E18               	movlw	24
  4807  000178  EFBF  F00F         	goto	_CantaIR
  4808  00017C                     __end_of_LcScroll:
  4809                           	callstack 0
  4810                           
  4811 ;; *************** function _LcCursorOn *****************
  4812 ;; Defined at:
  4813 ;;		line 112 in file "LcTLCD.c"
  4814 ;; Parameters:    Size  Location     Type
  4815 ;;		None
  4816 ;; Auto vars:     Size  Location     Type
  4817 ;;		None
  4818 ;; Return value:  Size  Location     Type
  4819 ;;                  1    wreg      void 
  4820 ;; Registers used:
  4821 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4822 ;; Tracked objects:
  4823 ;;		On entry : 0/0
  4824 ;;		On exit  : 0/0
  4825 ;;		Unchanged: 0/0
  4826 ;; Data sizes:     COMRAM   BANK0   BANK1
  4827 ;;      Params:         0       0       0
  4828 ;;      Locals:         0       0       0
  4829 ;;      Temps:          0       0       0
  4830 ;;      Totals:         0       0       0
  4831 ;;Total ram usage:        0 bytes
  4832 ;; Hardware stack levels used: 1
  4833 ;; Hardware stack levels required when called: 4
  4834 ;; This function calls:
  4835 ;;		_CantaIR
  4836 ;;		_WaitForBusy
  4837 ;; This function is called by:
  4838 ;;		_menuMotor
  4839 ;;		_timeMotor
  4840 ;; This function uses a non-reentrant model
  4841 ;;
  4842                           
  4843                           	psect	text33
  4844  00011A                     __ptext33:
  4845                           	callstack 0
  4846  00011A                     _LcCursorOn:
  4847                           	callstack 25
  4848                           
  4849                           ;LcTLCD.c: 115:  WaitForBusy();
  4850                           
  4851                           ;incstack = 0
  4852  00011A  ECEE  F00D         	call	_WaitForBusy	;wreg free
  4853                           
  4854                           ;LcTLCD.c: 116:  CantaIR(0x08 | 0x04 | 0x02);
  4855  00011E  0E0E               	movlw	14
  4856  000120  EFBF  F00F         	goto	_CantaIR
  4857  000124                     __end_of_LcCursorOn:
  4858                           	callstack 0
  4859                           
  4860 ;; *************** function _LcCursorOff *****************
  4861 ;; Defined at:
  4862 ;;		line 119 in file "LcTLCD.c"
  4863 ;; Parameters:    Size  Location     Type
  4864 ;;		None
  4865 ;; Auto vars:     Size  Location     Type
  4866 ;;		None
  4867 ;; Return value:  Size  Location     Type
  4868 ;;                  1    wreg      void 
  4869 ;; Registers used:
  4870 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4871 ;; Tracked objects:
  4872 ;;		On entry : 0/0
  4873 ;;		On exit  : 0/0
  4874 ;;		Unchanged: 0/0
  4875 ;; Data sizes:     COMRAM   BANK0   BANK1
  4876 ;;      Params:         0       0       0
  4877 ;;      Locals:         0       0       0
  4878 ;;      Temps:          0       0       0
  4879 ;;      Totals:         0       0       0
  4880 ;;Total ram usage:        0 bytes
  4881 ;; Hardware stack levels used: 1
  4882 ;; Hardware stack levels required when called: 4
  4883 ;; This function calls:
  4884 ;;		_CantaIR
  4885 ;;		_WaitForBusy
  4886 ;; This function is called by:
  4887 ;;		_menuMotor
  4888 ;; This function uses a non-reentrant model
  4889 ;;
  4890                           
  4891                           	psect	text34
  4892  000124                     __ptext34:
  4893                           	callstack 0
  4894  000124                     _LcCursorOff:
  4895                           	callstack 25
  4896                           
  4897                           ;LcTLCD.c: 122:  WaitForBusy();
  4898                           
  4899                           ;incstack = 0
  4900  000124  ECEE  F00D         	call	_WaitForBusy	;wreg free
  4901                           
  4902                           ;LcTLCD.c: 123:  CantaIR(0x08 | 0x04);
  4903  000128  0E0C               	movlw	12
  4904  00012A  EFBF  F00F         	goto	_CantaIR
  4905  00012E                     __end_of_LcCursorOff:
  4906                           	callstack 0
  4907                           
  4908 ;; *************** function _KeSetMode *****************
  4909 ;; Defined at:
  4910 ;;		line 239 in file "keypad.c"
  4911 ;; Parameters:    Size  Location     Type
  4912 ;;  menuMode        1    wreg     unsigned char 
  4913 ;; Auto vars:     Size  Location     Type
  4914 ;;  menuMode        1    6[COMRAM] unsigned char 
  4915 ;; Return value:  Size  Location     Type
  4916 ;;                  1    wreg      void 
  4917 ;; Registers used:
  4918 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4919 ;; Tracked objects:
  4920 ;;		On entry : 0/0
  4921 ;;		On exit  : 0/0
  4922 ;;		Unchanged: 0/0
  4923 ;; Data sizes:     COMRAM   BANK0   BANK1
  4924 ;;      Params:         0       0       0
  4925 ;;      Locals:         1       0       0
  4926 ;;      Temps:          0       0       0
  4927 ;;      Totals:         1       0       0
  4928 ;;Total ram usage:        1 bytes
  4929 ;; Hardware stack levels used: 1
  4930 ;; Hardware stack levels required when called: 3
  4931 ;; This function calls:
  4932 ;;		_TiResetTics
  4933 ;; This function is called by:
  4934 ;;		_menuMotor
  4935 ;; This function uses a non-reentrant model
  4936 ;;
  4937                           
  4938                           	psect	text35
  4939  001E3A                     __ptext35:
  4940                           	callstack 0
  4941  001E3A                     _KeSetMode:
  4942                           	callstack 26
  4943                           
  4944                           ;incstack = 0
  4945                           ;KeSetMode@menuMode stored from wreg
  4946  001E3A  6E52               	movwf	KeSetMode@menuMode^0,c
  4947                           
  4948                           ;keypad.c: 240:     if (menuMode == 1){
  4949  001E3C  0452               	decf	KeSetMode@menuMode^0,w,c
  4950  001E3E  E108               	bnz	l4137
  4951                           
  4952                           ;keypad.c: 241:         previous = 0;
  4953  001E40  6A46               	clrf	_previous^0,c
  4954                           
  4955                           ;keypad.c: 242:         numPresses = 0;
  4956  001E42  6A44               	clrf	_numPresses^0,c
  4957                           
  4958                           ;keypad.c: 243:         available = 0;
  4959  001E44  6A43               	clrf	_available^0,c
  4960                           
  4961                           ;keypad.c: 244:         stateSMS = 2;
  4962  001E46  0E02               	movlw	2
  4963  001E48  6E41               	movwf	_stateSMS^0,c
  4964                           
  4965                           ;keypad.c: 245:         TiResetTics(timer_SMS);
  4966  001E4A  5048               	movf	_timer_SMS^0,w,c
  4967  001E4C  EF92  F00F         	goto	_TiResetTics
  4968  001E50                     l4137:
  4969  001E50  5052               	movf	KeSetMode@menuMode^0,w,c
  4970  001E52  A4D8               	btfss	status,2,c
  4971  001E54  0012               	return	
  4972                           
  4973                           ;keypad.c: 247:         stateSMS = 4;
  4974  001E56  D000               	goto	PL90	;call to abstracted procedure
  4975  001E58                     __end_of_KeSetMode:
  4976                           	callstack 0
  4977  001E58                     PL90:
  4978                           	callstack 26
  4979  001E58  0E04               	movlw	4
  4980  001E5A  6E41               	movwf	_stateSMS^0,c
  4981  001E5C  0C04               	retlw	4
  4982  001E5E                     __end_ofPL90:
  4983                           	callstack 0
  4984                           
  4985 ;; *************** function _KeGetCharValue *****************
  4986 ;; Defined at:
  4987 ;;		line 213 in file "keypad.c"
  4988 ;; Parameters:    Size  Location     Type
  4989 ;;		None
  4990 ;; Auto vars:     Size  Location     Type
  4991 ;;		None
  4992 ;; Return value:  Size  Location     Type
  4993 ;;                  1    wreg      unsigned char 
  4994 ;; Registers used:
  4995 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4996 ;; Tracked objects:
  4997 ;;		On entry : 0/0
  4998 ;;		On exit  : 0/0
  4999 ;;		Unchanged: 0/0
  5000 ;; Data sizes:     COMRAM   BANK0   BANK1
  5001 ;;      Params:         0       0       0
  5002 ;;      Locals:         0       0       0
  5003 ;;      Temps:          0       0       0
  5004 ;;      Totals:         0       0       0
  5005 ;;Total ram usage:        0 bytes
  5006 ;; Hardware stack levels used: 1
  5007 ;; Hardware stack levels required when called: 4
  5008 ;; This function calls:
  5009 ;;		_KeGetGenericValue
  5010 ;;		_getFullValue
  5011 ;; This function is called by:
  5012 ;;		_menuMotor
  5013 ;; This function uses a non-reentrant model
  5014 ;;
  5015                           
  5016                           	psect	text36
  5017  000150                     __ptext36:
  5018                           	callstack 0
  5019  000150                     _KeGetCharValue:
  5020                           	callstack 25
  5021                           
  5022                           ;keypad.c: 214:     return getFullValue(KeGetGenericValue());
  5023                           
  5024                           ;incstack = 0
  5025  000150  EC72  F00F         	call	_KeGetGenericValue	;wreg free
  5026  000154  EF56  F00D         	goto	_getFullValue
  5027  000158                     __end_of_KeGetCharValue:
  5028                           	callstack 0
  5029                           
  5030 ;; *************** function _getFullValue *****************
  5031 ;; Defined at:
  5032 ;;		line 222 in file "keypad.c"
  5033 ;; Parameters:    Size  Location     Type
  5034 ;;  generic         1    wreg     unsigned char 
  5035 ;; Auto vars:     Size  Location     Type
  5036 ;;  generic         1    9[COMRAM] unsigned char 
  5037 ;; Return value:  Size  Location     Type
  5038 ;;                  1    wreg      unsigned char 
  5039 ;; Registers used:
  5040 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
  5041 ;; Tracked objects:
  5042 ;;		On entry : 0/0
  5043 ;;		On exit  : 0/0
  5044 ;;		Unchanged: 0/0
  5045 ;; Data sizes:     COMRAM   BANK0   BANK1
  5046 ;;      Params:         0       0       0
  5047 ;;      Locals:         1       0       0
  5048 ;;      Temps:          4       0       0
  5049 ;;      Totals:         5       0       0
  5050 ;;Total ram usage:        5 bytes
  5051 ;; Hardware stack levels used: 1
  5052 ;; Hardware stack levels required when called: 2
  5053 ;; This function calls:
  5054 ;;		Nothing
  5055 ;; This function is called by:
  5056 ;;		_KeGetCharValue
  5057 ;; This function uses a non-reentrant model
  5058 ;;
  5059                           
  5060                           	psect	text37
  5061  001AAC                     __ptext37:
  5062                           	callstack 0
  5063  001AAC                     _getFullValue:
  5064                           	callstack 26
  5065                           
  5066                           ;incstack = 0
  5067                           ;getFullValue@generic stored from wreg
  5068  001AAC  6E55               	movwf	getFullValue@generic^0,c
  5069                           
  5070                           ;keypad.c: 224:     if (generic - '0' >= 2 && generic - '0' <= 9){
  5071  001AAE  D81F               	call	PL30	;call to abstracted procedure
  5072  001AB0  E103               	bnz	u2860
  5073  001AB2  0E02               	movlw	2
  5074  001AB4  5C53               	subwf	(??_getFullValue+2)^0,w,c
  5075  001AB6  E30A               	bnc	l3971
  5076  001AB8                     u2860:
  5077  001AB8  D81A               	call	PL30	;call to abstracted procedure
  5078  001ABA  E108               	bnz	l3971
  5079  001ABC  0E0A               	movlw	10
  5080  001ABE  5C53               	subwf	(??_getFullValue+2)^0,w,c
  5081  001AC0  E205               	bc	l3971
  5082                           
  5083                           ;keypad.c: 225:         if (SMSTABLE[generic - '0' - 1][(numPresses-1)] == '\0'){
  5084  001AC2  D806               	call	PL20	;call to abstracted procedure
  5085  001AC4  E105               	bnz	PL20
  5086                           
  5087                           ;keypad.c: 226:             numPresses = 1;
  5088  001AC6  0E01               	movlw	1
  5089  001AC8  6E44               	movwf	_numPresses^0,c
  5090  001ACA                     l3967:
  5091                           
  5092                           ;keypad.c: 228:         return SMSTABLE[generic - '0' - 1][(numPresses-1)];
  5093  001ACA  D002               	goto	PL20	;call to abstracted procedure
  5094  001ACC                     l3971:
  5095                           
  5096                           ;keypad.c: 230:     return generic;
  5097  001ACC  5055               	movf	getFullValue@generic^0,w,c
  5098  001ACE  0012               	return		;funcret
  5099  001AD0                     __end_of_getFullValue:
  5100                           	callstack 0
  5101  001AD0                     PL20:
  5102                           	callstack 26
  5103  001AD0  5055               	movf	getFullValue@generic^0,w,c
  5104  001AD2  0D06               	mullw	6
  5105  001AD4  50F3               	movf	243,w,c
  5106  001AD6  0F99               	addlw	low _SMSTABLE
  5107  001AD8  2444               	addwf	_numPresses^0,w,c
  5108  001ADA  6E51               	movwf	??_getFullValue^0,c
  5109  001ADC  0ED9               	movlw	217
  5110  001ADE  2651               	addwf	??_getFullValue^0,f,c
  5111  001AE0  C051  FFF6         	movff	??_getFullValue,tblptrl
  5112  001AE4                     	if	1	;There is more than 1 active tblptr byte
  5113  001AE4  0E02               	movlw	high __smallconst
  5114  001AE6  6EF7               	movwf	tblptrh,c
  5115  001AE8                     	endif
  5116  001AE8                     	if	0	;tblptru may be non-zero
  5117  001AE8                     	endif
  5118  001AE8                     	if	0	;tblptru may be non-zero
  5119  001AE8                     	endif
  5120  001AE8  0008               	tblrd		*
  5121  001AEA  50F5               	movf	tablat,w,c
  5122  001AEC  0012               	return	
  5123  001AEE                     __end_ofPL20:
  5124                           	callstack 0
  5125  001AEE                     PL30:
  5126                           	callstack 26
  5127  001AEE  0ED0               	movlw	208
  5128  001AF0  6E51               	movwf	??_getFullValue^0,c
  5129  001AF2  6852               	setf	(??_getFullValue+1)^0,c
  5130  001AF4  5055               	movf	getFullValue@generic^0,w,c
  5131  001AF6  6E53               	movwf	(??_getFullValue+2)^0,c
  5132  001AF8  6A54               	clrf	(??_getFullValue+3)^0,c
  5133  001AFA  5051               	movf	??_getFullValue^0,w,c
  5134  001AFC  2653               	addwf	(??_getFullValue+2)^0,f,c
  5135  001AFE  5052               	movf	(??_getFullValue+1)^0,w,c
  5136  001B00  2254               	addwfc	(??_getFullValue+3)^0,f,c
  5137  001B02  5054               	movf	(??_getFullValue+3)^0,w,c
  5138  001B04  0012               	return	
  5139  001B06                     __end_ofPL30:
  5140                           	callstack 0
  5141                           
  5142 ;; *************** function _JoSetMode *****************
  5143 ;; Defined at:
  5144 ;;		line 107 in file "Joystick.c"
  5145 ;; Parameters:    Size  Location     Type
  5146 ;;  mode            1    wreg     unsigned char 
  5147 ;; Auto vars:     Size  Location     Type
  5148 ;;  mode            1    5[COMRAM] unsigned char 
  5149 ;; Return value:  Size  Location     Type
  5150 ;;                  1    wreg      void 
  5151 ;; Registers used:
  5152 ;;		wreg
  5153 ;; Tracked objects:
  5154 ;;		On entry : 0/0
  5155 ;;		On exit  : 0/0
  5156 ;;		Unchanged: 0/0
  5157 ;; Data sizes:     COMRAM   BANK0   BANK1
  5158 ;;      Params:         0       0       0
  5159 ;;      Locals:         1       0       0
  5160 ;;      Temps:          0       0       0
  5161 ;;      Totals:         1       0       0
  5162 ;;Total ram usage:        1 bytes
  5163 ;; Hardware stack levels used: 1
  5164 ;; Hardware stack levels required when called: 2
  5165 ;; This function calls:
  5166 ;;		Nothing
  5167 ;; This function is called by:
  5168 ;;		_menuMotor
  5169 ;; This function uses a non-reentrant model
  5170 ;;
  5171                           
  5172                           	psect	text38
  5173  000158                     __ptext38:
  5174                           	callstack 0
  5175  000158                     _JoSetMode:
  5176                           	callstack 27
  5177                           
  5178                           ;incstack = 0
  5179                           ;JoSetMode@mode stored from wreg
  5180  000158  6E51               	movwf	JoSetMode@mode^0,c
  5181                           
  5182                           ;Joystick.c: 108:     joyMode = mode;
  5183  00015A  C051  F02B         	movff	JoSetMode@mode,_joyMode
  5184  00015E  0012               	return		;funcret
  5185  000160                     __end_of_JoSetMode:
  5186                           	callstack 0
  5187                           
  5188 ;; *************** function _JoMoved *****************
  5189 ;; Defined at:
  5190 ;;		line 99 in file "Joystick.c"
  5191 ;; Parameters:    Size  Location     Type
  5192 ;;		None
  5193 ;; Auto vars:     Size  Location     Type
  5194 ;;		None
  5195 ;; Return value:  Size  Location     Type
  5196 ;;                  1    wreg      unsigned char 
  5197 ;; Registers used:
  5198 ;;		wreg, status,2
  5199 ;; Tracked objects:
  5200 ;;		On entry : 0/0
  5201 ;;		On exit  : 0/0
  5202 ;;		Unchanged: 0/0
  5203 ;; Data sizes:     COMRAM   BANK0   BANK1
  5204 ;;      Params:         0       0       0
  5205 ;;      Locals:         0       0       0
  5206 ;;      Temps:          0       0       0
  5207 ;;      Totals:         0       0       0
  5208 ;;Total ram usage:        0 bytes
  5209 ;; Hardware stack levels used: 1
  5210 ;; Hardware stack levels required when called: 2
  5211 ;; This function calls:
  5212 ;;		Nothing
  5213 ;; This function is called by:
  5214 ;;		_menuMotor
  5215 ;; This function uses a non-reentrant model
  5216 ;;
  5217                           
  5218                           	psect	text39
  5219  000196                     __ptext39:
  5220                           	callstack 0
  5221  000196                     _JoMoved:
  5222                           	callstack 27
  5223                           
  5224                           ;Joystick.c: 100:     return moved;
  5225                           
  5226                           ;incstack = 0
  5227  000196  502D               	movf	_moved^0,w,c
  5228  000198  0012               	return		;funcret
  5229  00019A                     __end_of_JoMoved:
  5230                           	callstack 0
  5231                           
  5232 ;; *************** function _JoDirection *****************
  5233 ;; Defined at:
  5234 ;;		line 103 in file "Joystick.c"
  5235 ;; Parameters:    Size  Location     Type
  5236 ;;		None
  5237 ;; Auto vars:     Size  Location     Type
  5238 ;;		None
  5239 ;; Return value:  Size  Location     Type
  5240 ;;                  1    wreg      unsigned char 
  5241 ;; Registers used:
  5242 ;;		wreg, status,2
  5243 ;; Tracked objects:
  5244 ;;		On entry : 0/0
  5245 ;;		On exit  : 0/0
  5246 ;;		Unchanged: 0/0
  5247 ;; Data sizes:     COMRAM   BANK0   BANK1
  5248 ;;      Params:         0       0       0
  5249 ;;      Locals:         0       0       0
  5250 ;;      Temps:          0       0       0
  5251 ;;      Totals:         0       0       0
  5252 ;;Total ram usage:        0 bytes
  5253 ;; Hardware stack levels used: 1
  5254 ;; Hardware stack levels required when called: 2
  5255 ;; This function calls:
  5256 ;;		Nothing
  5257 ;; This function is called by:
  5258 ;;		_menuMotor
  5259 ;; This function uses a non-reentrant model
  5260 ;;
  5261                           
  5262                           	psect	text40
  5263  00019A                     __ptext40:
  5264                           	callstack 0
  5265  00019A                     _JoDirection:
  5266                           	callstack 27
  5267                           
  5268                           ;Joystick.c: 104:     return send;
  5269                           
  5270                           ;incstack = 0
  5271  00019A  5030               	movf	_send^0,w,c
  5272  00019C  0012               	return		;funcret
  5273  00019E                     __end_of_JoDirection:
  5274                           	callstack 0
  5275                           
  5276 ;; *************** function _DaSaveUser *****************
  5277 ;; Defined at:
  5278 ;;		line 315 in file "EEPROM.c"
  5279 ;; Parameters:    Size  Location     Type
  5280 ;;  regUser         1    5[COMRAM] PTR struct .
  5281 ;;		 -> mUser(18), 
  5282 ;; Auto vars:     Size  Location     Type
  5283 ;;		None
  5284 ;; Return value:  Size  Location     Type
  5285 ;;                  1    wreg      void 
  5286 ;; Registers used:
  5287 ;;		wreg, status,2, status,0
  5288 ;; Tracked objects:
  5289 ;;		On entry : 0/0
  5290 ;;		On exit  : 0/0
  5291 ;;		Unchanged: 0/0
  5292 ;; Data sizes:     COMRAM   BANK0   BANK1
  5293 ;;      Params:         1       0       0
  5294 ;;      Locals:         0       0       0
  5295 ;;      Temps:          0       0       0
  5296 ;;      Totals:         1       0       0
  5297 ;;Total ram usage:        1 bytes
  5298 ;; Hardware stack levels used: 1
  5299 ;; Hardware stack levels required when called: 2
  5300 ;; This function calls:
  5301 ;;		Nothing
  5302 ;; This function is called by:
  5303 ;;		_menuMotor
  5304 ;; This function uses a non-reentrant model
  5305 ;;
  5306                           
  5307                           	psect	text41
  5308  001F9A                     __ptext41:
  5309                           	callstack 0
  5310  001F9A                     _DaSaveUser:
  5311                           	callstack 27
  5312                           
  5313                           ;EEPROM.c: 316:     state = 1;
  5314                           
  5315                           ;incstack = 0
  5316  001F9A  0E01               	movlw	1
  5317  001F9C  6E1F               	movwf	_state@EEPROM$F1704^0,c
  5318                           
  5319                           ;EEPROM.c: 317:     saveState = 0;
  5320  001F9E  6A1A               	clrf	_saveState^0,c
  5321                           
  5322                           ;EEPROM.c: 318:     wrongState = 10;
  5323  001FA0  0E0A               	movlw	10
  5324  001FA2  6E19               	movwf	_wrongState^0,c
  5325                           
  5326                           ;EEPROM.c: 319:     position = 0;
  5327  001FA4  6A20               	clrf	_position^0,c
  5328                           
  5329                           ;EEPROM.c: 320:     userNum = 0;
  5330  001FA6  6A1E               	clrf	_userNum^0,c
  5331                           
  5332                           ;EEPROM.c: 321:     mUser = regUser;
  5333  001FA8  C051  F00B         	movff	DaSaveUser@regUser,_mUser@EEPROM$F1707
  5334  001FAC  6A0C               	clrf	(_mUser@EEPROM$F1707+1)^0,c
  5335                           
  5336                           ;EEPROM.c: 322:     status = 2;
  5337  001FAE  0E02               	movlw	2
  5338  001FB0  6E1D               	movwf	_status^0,c
  5339  001FB2  0C02               	retlw	2	;funcret
  5340  001FB4                     __end_of_DaSaveUser:
  5341                           	callstack 0
  5342                           
  5343 ;; *************** function _DaSaveScore *****************
  5344 ;; Defined at:
  5345 ;;		line 333 in file "EEPROM.c"
  5346 ;; Parameters:    Size  Location     Type
  5347 ;;  userScore       1    wreg     unsigned char 
  5348 ;; Auto vars:     Size  Location     Type
  5349 ;;  userScore       1   19[COMRAM] unsigned char 
  5350 ;; Return value:  Size  Location     Type
  5351 ;;                  1    wreg      void 
  5352 ;; Registers used:
  5353 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5354 ;; Tracked objects:
  5355 ;;		On entry : 0/0
  5356 ;;		On exit  : 0/0
  5357 ;;		Unchanged: 0/0
  5358 ;; Data sizes:     COMRAM   BANK0   BANK1
  5359 ;;      Params:         0       0       0
  5360 ;;      Locals:         1       0       0
  5361 ;;      Temps:          0       0       0
  5362 ;;      Totals:         1       0       0
  5363 ;;Total ram usage:        1 bytes
  5364 ;; Hardware stack levels used: 1
  5365 ;; Hardware stack levels required when called: 6
  5366 ;; This function calls:
  5367 ;;		_LcClear
  5368 ;;		_LcPutChar
  5369 ;;		___lbdiv
  5370 ;;		___lbmod
  5371 ;; This function is called by:
  5372 ;;		_menuMotor
  5373 ;; This function uses a non-reentrant model
  5374 ;;
  5375                           
  5376                           	psect	text42
  5377  001C86                     __ptext42:
  5378                           	callstack 0
  5379  001C86                     _DaSaveScore:
  5380                           	callstack 23
  5381                           
  5382                           ;incstack = 0
  5383                           ;DaSaveScore@userScore stored from wreg
  5384  001C86  6E5F               	movwf	DaSaveScore@userScore^0,c
  5385                           
  5386                           ;EEPROM.c: 334:     saveScore = userScore;
  5387  001C88  C05F  F01B         	movff	DaSaveScore@userScore,_saveScore
  5388                           
  5389                           ;EEPROM.c: 335:     LcClear();
  5390  001C8C  EC1B  F000         	call	_LcClear	;wreg free
  5391                           
  5392                           ;EEPROM.c: 336:     LcPutChar((saveScore/10)+'0');
  5393  001C90  0E0A               	movlw	10
  5394  001C92  6E51               	movwf	___lbdiv@divisor^0,c
  5395  001C94  501B               	movf	_saveScore^0,w,c
  5396  001C96  EC5D  F00E         	call	___lbdiv
  5397  001C9A  0F30               	addlw	48
  5398  001C9C  ECBC  F00E         	call	_LcPutChar
  5399                           
  5400                           ;EEPROM.c: 337:     LcPutChar((saveScore%10)+'0');
  5401  001CA0  0E0A               	movlw	10
  5402  001CA2  6E51               	movwf	___lbmod@divisor^0,c
  5403  001CA4  501B               	movf	_saveScore^0,w,c
  5404  001CA6  ECE5  F00E         	call	___lbmod
  5405  001CAA  0F30               	addlw	48
  5406  001CAC  ECBC  F00E         	call	_LcPutChar
  5407                           
  5408                           ;EEPROM.c: 338:     position = 0;
  5409  001CB0  6A20               	clrf	_position^0,c
  5410                           
  5411                           ;EEPROM.c: 339:     status = 0;
  5412  001CB2  6A1D               	clrf	_status^0,c
  5413                           
  5414                           ;EEPROM.c: 340:     state = 20;
  5415  001CB4  0E14               	movlw	20
  5416  001CB6  6E1F               	movwf	_state@EEPROM$F1704^0,c
  5417  001CB8  0C14               	retlw	20	;funcret
  5418  001CBA                     __end_of_DaSaveScore:
  5419                           	callstack 0
  5420                           
  5421 ;; *************** function _LcClear *****************
  5422 ;; Defined at:
  5423 ;;		line 105 in file "LcTLCD.c"
  5424 ;; Parameters:    Size  Location     Type
  5425 ;;		None
  5426 ;; Auto vars:     Size  Location     Type
  5427 ;;		None
  5428 ;; Return value:  Size  Location     Type
  5429 ;;                  1    wreg      void 
  5430 ;; Registers used:
  5431 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5432 ;; Tracked objects:
  5433 ;;		On entry : 0/0
  5434 ;;		On exit  : 0/0
  5435 ;;		Unchanged: 0/0
  5436 ;; Data sizes:     COMRAM   BANK0   BANK1
  5437 ;;      Params:         0       0       0
  5438 ;;      Locals:         0       0       0
  5439 ;;      Temps:          0       0       0
  5440 ;;      Totals:         0       0       0
  5441 ;;Total ram usage:        0 bytes
  5442 ;; Hardware stack levels used: 1
  5443 ;; Hardware stack levels required when called: 4
  5444 ;; This function calls:
  5445 ;;		_CantaIR
  5446 ;;		_Espera
  5447 ;;		_WaitForBusy
  5448 ;; This function is called by:
  5449 ;;		_resetDisplay
  5450 ;;		_DaSaveScore
  5451 ;; This function uses a non-reentrant model
  5452 ;;
  5453                           
  5454                           	psect	text43
  5455  000036                     __ptext43:
  5456                           	callstack 0
  5457  000036                     _LcClear:
  5458                           	callstack 24
  5459                           
  5460                           ;LcTLCD.c: 108:  WaitForBusy(); CantaIR(0x01);
  5461                           
  5462                           ;incstack = 0
  5463  000036  ECEE  F00D         	call	_WaitForBusy	;wreg free
  5464  00003A  0E01               	movlw	1
  5465  00003C  ECBF  F00F         	call	_CantaIR
  5466                           
  5467                           ;LcTLCD.c: 109:  Espera(Timer, 3);
  5468  000040  ECF6  F00A         	call	PL12	;call to abstracted procedure
  5469  000044  0E03               	movlw	3
  5470  000046  6E5A               	movwf	Espera@ms^0,c
  5471  000048  EF82  F00F         	goto	_Espera	;wreg free
  5472  00004C                     __end_of_LcClear:
  5473                           	callstack 0
  5474                           
  5475 ;; *************** function _DaGetStatus *****************
  5476 ;; Defined at:
  5477 ;;		line 325 in file "EEPROM.c"
  5478 ;; Parameters:    Size  Location     Type
  5479 ;;		None
  5480 ;; Auto vars:     Size  Location     Type
  5481 ;;		None
  5482 ;; Return value:  Size  Location     Type
  5483 ;;                  1    wreg      unsigned char 
  5484 ;; Registers used:
  5485 ;;		wreg, status,2
  5486 ;; Tracked objects:
  5487 ;;		On entry : 0/0
  5488 ;;		On exit  : 0/0
  5489 ;;		Unchanged: 0/0
  5490 ;; Data sizes:     COMRAM   BANK0   BANK1
  5491 ;;      Params:         0       0       0
  5492 ;;      Locals:         0       0       0
  5493 ;;      Temps:          0       0       0
  5494 ;;      Totals:         0       0       0
  5495 ;;Total ram usage:        0 bytes
  5496 ;; Hardware stack levels used: 1
  5497 ;; Hardware stack levels required when called: 2
  5498 ;; This function calls:
  5499 ;;		Nothing
  5500 ;; This function is called by:
  5501 ;;		_menuMotor
  5502 ;; This function uses a non-reentrant model
  5503 ;;
  5504                           
  5505                           	psect	text44
  5506  00019E                     __ptext44:
  5507                           	callstack 0
  5508  00019E                     _DaGetStatus:
  5509                           	callstack 27
  5510                           
  5511                           ;EEPROM.c: 326:     return status;
  5512                           
  5513                           ;incstack = 0
  5514  00019E  501D               	movf	_status^0,w,c
  5515  0001A0  0012               	return		;funcret
  5516  0001A2                     __end_of_DaGetStatus:
  5517                           	callstack 0
  5518                           
  5519 ;; *************** function _DaGetNumScores *****************
  5520 ;; Defined at:
  5521 ;;		line 379 in file "EEPROM.c"
  5522 ;; Parameters:    Size  Location     Type
  5523 ;;		None
  5524 ;; Auto vars:     Size  Location     Type
  5525 ;;		None
  5526 ;; Return value:  Size  Location     Type
  5527 ;;                  1    wreg      unsigned char 
  5528 ;; Registers used:
  5529 ;;		wreg, status,2
  5530 ;; Tracked objects:
  5531 ;;		On entry : 0/0
  5532 ;;		On exit  : 0/0
  5533 ;;		Unchanged: 0/0
  5534 ;; Data sizes:     COMRAM   BANK0   BANK1
  5535 ;;      Params:         0       0       0
  5536 ;;      Locals:         0       0       0
  5537 ;;      Temps:          0       0       0
  5538 ;;      Totals:         0       0       0
  5539 ;;Total ram usage:        0 bytes
  5540 ;; Hardware stack levels used: 1
  5541 ;; Hardware stack levels required when called: 2
  5542 ;; This function calls:
  5543 ;;		Nothing
  5544 ;; This function is called by:
  5545 ;;		_menuMotor
  5546 ;; This function uses a non-reentrant model
  5547 ;;
  5548                           
  5549                           	psect	text45
  5550  0001A2                     __ptext45:
  5551                           	callstack 0
  5552  0001A2                     _DaGetNumScores:
  5553                           	callstack 27
  5554                           
  5555                           ;EEPROM.c: 380:     return numScores;
  5556                           
  5557                           ;incstack = 0
  5558  0001A2  5021               	movf	_numScores^0,w,c
  5559  0001A4  0012               	return		;funcret
  5560  0001A6                     __end_of_DaGetNumScores:
  5561                           	callstack 0
  5562                           
  5563 ;; *************** function _DaGetIdle *****************
  5564 ;; Defined at:
  5565 ;;		line 329 in file "EEPROM.c"
  5566 ;; Parameters:    Size  Location     Type
  5567 ;;		None
  5568 ;; Auto vars:     Size  Location     Type
  5569 ;;		None
  5570 ;; Return value:  Size  Location     Type
  5571 ;;                  1    wreg      unsigned char 
  5572 ;; Registers used:
  5573 ;;		wreg, status,2
  5574 ;; Tracked objects:
  5575 ;;		On entry : 0/0
  5576 ;;		On exit  : 0/0
  5577 ;;		Unchanged: 0/0
  5578 ;; Data sizes:     COMRAM   BANK0   BANK1
  5579 ;;      Params:         0       0       0
  5580 ;;      Locals:         0       0       0
  5581 ;;      Temps:          0       0       0
  5582 ;;      Totals:         0       0       0
  5583 ;;Total ram usage:        0 bytes
  5584 ;; Hardware stack levels used: 1
  5585 ;; Hardware stack levels required when called: 2
  5586 ;; This function calls:
  5587 ;;		Nothing
  5588 ;; This function is called by:
  5589 ;;		_menuMotor
  5590 ;; This function uses a non-reentrant model
  5591 ;;
  5592                           
  5593                           	psect	text46
  5594  000160                     __ptext46:
  5595                           	callstack 0
  5596  000160                     _DaGetIdle:
  5597                           	callstack 27
  5598                           
  5599                           ;EEPROM.c: 330:     return state == 0;
  5600                           
  5601                           ;incstack = 0
  5602  000160  501F               	movf	_state@EEPROM$F1704^0,w,c
  5603  000162  B4D8               	btfsc	status,2,c
  5604  000164  0C01               	retlw	1
  5605  000166  0C00               	retlw	0	;funcret
  5606  000168                     __end_of_DaGetIdle:
  5607                           	callstack 0
  5608                           
  5609 ;; *************** function _DaFindUser *****************
  5610 ;; Defined at:
  5611 ;;		line 299 in file "EEPROM.c"
  5612 ;; Parameters:    Size  Location     Type
  5613 ;;  logUser         1   18[COMRAM] PTR struct .
  5614 ;;		 -> mUser(18), 
  5615 ;; Auto vars:     Size  Location     Type
  5616 ;;		None
  5617 ;; Return value:  Size  Location     Type
  5618 ;;                  1    wreg      void 
  5619 ;; Registers used:
  5620 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5621 ;; Tracked objects:
  5622 ;;		On entry : 0/0
  5623 ;;		On exit  : 0/0
  5624 ;;		Unchanged: 0/0
  5625 ;; Data sizes:     COMRAM   BANK0   BANK1
  5626 ;;      Params:         1       0       0
  5627 ;;      Locals:         0       0       0
  5628 ;;      Temps:          0       0       0
  5629 ;;      Totals:         1       0       0
  5630 ;;Total ram usage:        1 bytes
  5631 ;; Hardware stack levels used: 1
  5632 ;; Hardware stack levels required when called: 5
  5633 ;; This function calls:
  5634 ;;		_LcGotoXY
  5635 ;; This function is called by:
  5636 ;;		_menuMotor
  5637 ;; This function uses a non-reentrant model
  5638 ;;
  5639                           
  5640                           	psect	text47
  5641  001EA4                     __ptext47:
  5642                           	callstack 0
  5643  001EA4                     _DaFindUser:
  5644                           	callstack 24
  5645                           
  5646                           ;EEPROM.c: 300:     state = 1;
  5647                           
  5648                           ;incstack = 0
  5649  001EA4  0E01               	movlw	1
  5650  001EA6  6E1F               	movwf	_state@EEPROM$F1704^0,c
  5651                           
  5652                           ;EEPROM.c: 301:     userNum = 0;
  5653  001EA8  6A1E               	clrf	_userNum^0,c
  5654                           
  5655                           ;EEPROM.c: 302:     mUser = logUser;
  5656  001EAA  C05E  F00B         	movff	DaFindUser@logUser,_mUser@EEPROM$F1707
  5657  001EAE  6A0C               	clrf	(_mUser@EEPROM$F1707+1)^0,c
  5658                           
  5659                           ;EEPROM.c: 303:     saveState = 3;
  5660  001EB0  0E03               	movlw	3
  5661  001EB2  6E1A               	movwf	_saveState^0,c
  5662                           
  5663                           ;EEPROM.c: 304:     wrongState = 0;
  5664  001EB4  6A19               	clrf	_wrongState^0,c
  5665                           
  5666                           ;EEPROM.c: 305:     status = 2;
  5667  001EB6  0E02               	movlw	2
  5668  001EB8  6E1D               	movwf	_status^0,c
  5669                           
  5670                           ;EEPROM.c: 306:     LcGotoXY(10,0);
  5671  001EBA  0E00               	movlw	0
  5672  001EBC  6E59               	movwf	LcGotoXY@Row^0,c
  5673  001EBE  0E0A               	movlw	10
  5674  001EC0  EF8F  F00E         	goto	_LcGotoXY
  5675  001EC4                     __end_of_DaFindUser:
  5676                           	callstack 0
  5677                           
  5678 ;; *************** function _joystickMotor *****************
  5679 ;; Defined at:
  5680 ;;		line 29 in file "Joystick.c"
  5681 ;; Parameters:    Size  Location     Type
  5682 ;;		None
  5683 ;; Auto vars:     Size  Location     Type
  5684 ;;		None
  5685 ;; Return value:  Size  Location     Type
  5686 ;;                  1    wreg      void 
  5687 ;; Registers used:
  5688 ;;		wreg, status,2, status,0, cstack
  5689 ;; Tracked objects:
  5690 ;;		On entry : 0/0
  5691 ;;		On exit  : 0/0
  5692 ;;		Unchanged: 0/0
  5693 ;; Data sizes:     COMRAM   BANK0   BANK1
  5694 ;;      Params:         0       0       0
  5695 ;;      Locals:         0       0       0
  5696 ;;      Temps:          2       0       0
  5697 ;;      Totals:         2       0       0
  5698 ;;Total ram usage:        2 bytes
  5699 ;; Hardware stack levels used: 1
  5700 ;; Hardware stack levels required when called: 3
  5701 ;; This function calls:
  5702 ;;		_SiIsAvailable
  5703 ;;		_SiSendChar
  5704 ;; This function is called by:
  5705 ;;		_main
  5706 ;; This function uses a non-reentrant model
  5707 ;;
  5708                           
  5709                           	psect	text48
  5710  0013D0                     __ptext48:
  5711                           	callstack 0
  5712  0013D0                     _joystickMotor:
  5713                           	callstack 27
  5714                           
  5715                           ;Joystick.c: 30:     switch (stateJoy){
  5716                           
  5717                           ;incstack = 0
  5718  0013D0  D04B               	goto	l5233
  5719  0013D2                     l700:
  5720                           
  5721                           ;Joystick.c: 32:             if (ADCON0bits.GO_DONE == 0){
  5722  0013D2  B2C2               	btfsc	194,1,c	;volatile
  5723  0013D4  0012               	return	
  5724                           
  5725                           ;Joystick.c: 33:                 y = ADRESH;
  5726  0013D6  CFC4 F02E          	movff	4036,_y	;volatile
  5727                           
  5728                           ;Joystick.c: 34:                 ADCON0bits.CHS0=1;
  5729  0013DA  84C2               	bsf	194,2,c	;volatile
  5730                           
  5731                           ;Joystick.c: 35:                 ADCON0bits.CHS1=0;
  5732  0013DC  96C2               	bcf	194,3,c	;volatile
  5733                           
  5734                           ;Joystick.c: 36:                 stateJoy = 1;
  5735  0013DE  0E01               	movlw	1
  5736  0013E0  6E2C               	movwf	_stateJoy^0,c
  5737                           
  5738                           ;Joystick.c: 37:                 ADCON0bits.GO_DONE=1;
  5739  0013E2  82C2               	bsf	194,1,c	;volatile
  5740  0013E4  0C01               	retlw	1
  5741  0013E6                     l703:
  5742                           
  5743                           ;Joystick.c: 41:             if (ADCON0bits.GO_DONE == 0){
  5744  0013E6  B2C2               	btfsc	194,1,c	;volatile
  5745  0013E8  0012               	return	
  5746                           
  5747                           ;Joystick.c: 42:                 x = ADRESH;
  5748  0013EA  CFC4 F02F          	movff	4036,_x	;volatile
  5749                           
  5750                           ;Joystick.c: 43:                 ADCON0bits.CHS0=0;
  5751  0013EE  94C2               	bcf	194,2,c	;volatile
  5752                           
  5753                           ;Joystick.c: 44:                 ADCON0bits.CHS1=1;
  5754  0013F0  86C2               	bsf	194,3,c	;volatile
  5755                           
  5756                           ;Joystick.c: 45:                 stateJoy = 2;
  5757  0013F2  0E02               	movlw	2
  5758  0013F4  6E2C               	movwf	_stateJoy^0,c
  5759  0013F6  0C02               	retlw	2
  5760  0013F8                     l5187:
  5761                           
  5762                           ;Joystick.c: 49:             stateJoy = 4;
  5763  0013F8  0E04               	movlw	4
  5764  0013FA  6E2C               	movwf	_stateJoy^0,c
  5765                           
  5766                           ;Joystick.c: 50:             if (moved){
  5767  0013FC  502D               	movf	_moved^0,w,c
  5768  0013FE  E00E               	bz	l5199
  5769                           
  5770                           ;Joystick.c: 51:                 if (x >= 100 && x <= 150 && y >= 100 && y <= 150){
  5771  001400  0E63               	movlw	99
  5772  001402  642F               	cpfsgt	_x^0,c
  5773  001404  0C63               	retlw	99
  5774  001406  0E97               	movlw	151
  5775  001408  602F               	cpfslt	_x^0,c
  5776  00140A  0C97               	retlw	151
  5777  00140C  0E63               	movlw	99
  5778  00140E  642E               	cpfsgt	_y^0,c
  5779  001410  0C63               	retlw	99
  5780  001412  0E97               	movlw	151
  5781  001414  602E               	cpfslt	_y^0,c
  5782  001416  0C97               	retlw	151
  5783                           
  5784                           ;Joystick.c: 52:                     moved = 0;
  5785  001418  6A2D               	clrf	_moved^0,c
  5786                           
  5787                           ;Joystick.c: 54:             }else {
  5788                           
  5789                           ;Joystick.c: 53:                 }
  5790  00141A  0012               	return	
  5791  00141C                     l5199:
  5792                           
  5793                           ;Joystick.c: 55:                 if (x <= 10){
  5794  00141C  0E0B               	movlw	11
  5795  00141E  602F               	cpfslt	_x^0,c
  5796  001420  D008               	goto	l5205
  5797                           
  5798                           ;Joystick.c: 56:                     send = 'A';
  5799  001422  0E41               	movlw	65
  5800  001424                     L5:
  5801  001424  6E30               	movwf	_send^0,c
  5802                           
  5803                           ;Joystick.c: 57:                     moved = 1;
  5804  001426  0E01               	movlw	1
  5805  001428  6E2D               	movwf	_moved^0,c
  5806                           
  5807                           ;Joystick.c: 58:                     stateJoy = 4+joyMode;
  5808  00142A  502B               	movf	_joyMode^0,w,c
  5809  00142C  0F04               	addlw	4
  5810  00142E  6E2C               	movwf	_stateJoy^0,c
  5811                           
  5812                           ;Joystick.c: 59:                 } else if (x >= 240){
  5813  001430  0012               	return	
  5814  001432                     l5205:
  5815  001432  0EEF               	movlw	239
  5816  001434  642F               	cpfsgt	_x^0,c
  5817  001436  D002               	goto	l5211
  5818                           
  5819                           ;Joystick.c: 60:                     send = 'D';
  5820  001438  0E44               	movlw	68
  5821  00143A  D7F4               	goto	L5
  5822  00143C                     l5211:
  5823  00143C  0E0B               	movlw	11
  5824  00143E  602E               	cpfslt	_y^0,c
  5825  001440  D002               	goto	l5217
  5826                           
  5827                           ;Joystick.c: 64:                     send = 'S';
  5828  001442  0E53               	movlw	83
  5829  001444  D7EF               	goto	L5
  5830  001446                     l5217:
  5831  001446  0EEF               	movlw	239
  5832  001448  642E               	cpfsgt	_y^0,c
  5833  00144A  0CEF               	retlw	239
  5834                           
  5835                           ;Joystick.c: 68:                     send = 'W';
  5836  00144C  0E57               	movlw	87
  5837  00144E  D7EA               	goto	L5
  5838  001450                     l716:
  5839                           
  5840                           ;Joystick.c: 80:             stateJoy = 0;
  5841                           
  5842                           ;Joystick.c: 81:             ADCON0bits.GO_DONE=1;
  5843                           
  5844                           ;Joystick.c: 82:             break;
  5845  001450  D01B               	goto	PL80	;call to abstracted procedure
  5846  001452                     l5223:
  5847                           
  5848                           ;Joystick.c: 85:             if(SiIsAvailable()){
  5849  001452  ECBE  F000         	call	_SiIsAvailable	;wreg free
  5850  001456  0900               	iorlw	0
  5851  001458  B4D8               	btfsc	status,2,c
  5852  00145A  0012               	return	
  5853                           
  5854                           ;Joystick.c: 86:                 SiSendChar(send);
  5855  00145C  5030               	movf	_send^0,w,c
  5856  00145E  ECB4  F000         	call	_SiSendChar
  5857                           
  5858                           ;Joystick.c: 87:                 stateJoy = 0;
  5859                           
  5860                           ;Joystick.c: 88:                 ADCON0bits.GO_DONE=1;
  5861  001462  D012               	goto	PL80	;call to abstracted procedure
  5862  001464                     l719:
  5863                           
  5864                           ;Joystick.c: 92:             stateJoy = 0;
  5865  001464  6A2C               	clrf	_stateJoy^0,c
  5866                           
  5867                           ;Joystick.c: 93:             break;
  5868  001466  0012               	return	
  5869  001468                     l5233:
  5870  001468  502C               	movf	_stateJoy^0,w,c
  5871  00146A  6E52               	movwf	??_joystickMotor^0,c
  5872  00146C  6A53               	clrf	(??_joystickMotor+1)^0,c
  5873                           
  5874                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5875                           ; Switch size 1, requested type "space"
  5876                           ; Number of cases is 1, Range of values is 0 to 0
  5877                           ; switch strategies available:
  5878                           ; Name         Instructions Cycles
  5879                           ; simple_byte            4     3 (average)
  5880                           ;	Chosen strategy is simple_byte
  5881  00146E  5053               	movf	(??_joystickMotor+1)^0,w,c
  5882  001470  E1F9               	bnz	l719
  5883                           
  5884                           ; Switch size 1, requested type "space"
  5885                           ; Number of cases is 5, Range of values is 0 to 5
  5886                           ; switch strategies available:
  5887                           ; Name         Instructions Cycles
  5888                           ; simple_byte           16     9 (average)
  5889                           ;	Chosen strategy is simple_byte
  5890  001472  5052               	movf	??_joystickMotor^0,w,c
  5891  001474  E0AE               	bz	l700
  5892  001476  0A01               	xorlw	1	; case 1
  5893  001478  E0B6               	bz	l703
  5894  00147A  0A03               	xorlw	3	; case 2
  5895  00147C  E0BD               	bz	l5187
  5896  00147E  0A06               	xorlw	6	; case 4
  5897  001480  E003               	bz	PL80
  5898  001482  0A01               	xorlw	1	; case 5
  5899  001484  E0E6               	bz	l5223
  5900  001486  D7EE               	goto	l719
  5901  001488                     __end_of_joystickMotor:
  5902                           	callstack 0
  5903  001488                     PL80:
  5904                           	callstack 27
  5905  001488  6A2C               	clrf	_stateJoy^0,c
  5906  00148A  82C2               	bsf	194,1,c	;volatile
  5907  00148C  0012               	return	
  5908  00148E                     __end_ofPL80:
  5909                           	callstack 0
  5910                           
  5911 ;; *************** function _initTime *****************
  5912 ;; Defined at:
  5913 ;;		line 14 in file "time.c"
  5914 ;; Parameters:    Size  Location     Type
  5915 ;;		None
  5916 ;; Auto vars:     Size  Location     Type
  5917 ;;		None
  5918 ;; Return value:  Size  Location     Type
  5919 ;;                  1    wreg      void 
  5920 ;; Registers used:
  5921 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5922 ;; Tracked objects:
  5923 ;;		On entry : 0/0
  5924 ;;		On exit  : 0/0
  5925 ;;		Unchanged: 0/0
  5926 ;; Data sizes:     COMRAM   BANK0   BANK1
  5927 ;;      Params:         0       0       0
  5928 ;;      Locals:         0       0       0
  5929 ;;      Temps:          0       0       0
  5930 ;;      Totals:         0       0       0
  5931 ;;Total ram usage:        0 bytes
  5932 ;; Hardware stack levels used: 1
  5933 ;; Hardware stack levels required when called: 3
  5934 ;; This function calls:
  5935 ;;		_TiGetTimer
  5936 ;; This function is called by:
  5937 ;;		_main
  5938 ;; This function uses a non-reentrant model
  5939 ;;
  5940                           
  5941                           	psect	text49
  5942  0000CA                     __ptext49:
  5943                           	callstack 0
  5944  0000CA                     _initTime:
  5945                           	callstack 27
  5946                           
  5947                           ;time.c: 15:     timer = TiGetTimer();
  5948                           
  5949                           ;incstack = 0
  5950  0000CA  EC77  F00E         	call	_TiGetTimer	;wreg free
  5951  0000CE  6E14               	movwf	_timer@time$F1786^0,c
  5952                           
  5953                           ;time.c: 16:     sysSecond = 0;
  5954  0000D0  6A16               	clrf	_sysSecond^0,c
  5955                           
  5956                           ;time.c: 17:     sysMinute = 0;
  5957  0000D2  6A15               	clrf	_sysMinute^0,c
  5958                           
  5959                           ;time.c: 18:     game = 0;
  5960  0000D4  6A12               	clrf	_game^0,c
  5961  0000D6  0012               	return		;funcret
  5962  0000D8                     __end_of_initTime:
  5963                           	callstack 0
  5964                           
  5965 ;; *************** function _initSIO *****************
  5966 ;; Defined at:
  5967 ;;		line 16 in file "SIO.c"
  5968 ;; Parameters:    Size  Location     Type
  5969 ;;		None
  5970 ;; Auto vars:     Size  Location     Type
  5971 ;;		None
  5972 ;; Return value:  Size  Location     Type
  5973 ;;                  1    wreg      void 
  5974 ;; Registers used:
  5975 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5976 ;; Tracked objects:
  5977 ;;		On entry : 0/0
  5978 ;;		On exit  : 0/0
  5979 ;;		Unchanged: 0/0
  5980 ;; Data sizes:     COMRAM   BANK0   BANK1
  5981 ;;      Params:         0       0       0
  5982 ;;      Locals:         0       0       0
  5983 ;;      Temps:          0       0       0
  5984 ;;      Totals:         0       0       0
  5985 ;;Total ram usage:        0 bytes
  5986 ;; Hardware stack levels used: 1
  5987 ;; Hardware stack levels required when called: 3
  5988 ;; This function calls:
  5989 ;;		_TiGetTimer
  5990 ;; This function is called by:
  5991 ;;		_main
  5992 ;; This function uses a non-reentrant model
  5993 ;;
  5994                           
  5995                           	psect	text50
  5996  001E5E                     __ptext50:
  5997                           	callstack 0
  5998  001E5E                     _initSIO:
  5999                           	callstack 27
  6000                           
  6001                           ;SIO.c: 17:     TRISCbits.TRISC7 = 1;
  6002                           
  6003                           ;incstack = 0
  6004  001E5E  8E94               	bsf	148,7,c	;volatile
  6005                           
  6006                           ;SIO.c: 18:     TRISCbits.TRISC6 = 1;
  6007  001E60  8C94               	bsf	148,6,c	;volatile
  6008                           
  6009                           ;SIO.c: 19:     TXSTAbits.BRGH = 1;
  6010  001E62  84AC               	bsf	172,2,c	;volatile
  6011                           
  6012                           ;SIO.c: 20:     TXSTAbits.TXEN = 1;
  6013  001E64  8AAC               	bsf	172,5,c	;volatile
  6014                           
  6015                           ;SIO.c: 21:     TXSTAbits.SYNC = 0;
  6016  001E66  98AC               	bcf	172,4,c	;volatile
  6017                           
  6018                           ;SIO.c: 23:     RCSTAbits.SPEN = 1;
  6019  001E68  8EAB               	bsf	171,7,c	;volatile
  6020                           
  6021                           ;SIO.c: 24:     RCSTAbits.CREN = 1;
  6022  001E6A  88AB               	bsf	171,4,c	;volatile
  6023                           
  6024                           ;SIO.c: 26:     BAUDCONbits.BRG16 = 0;
  6025  001E6C  96B8               	bcf	184,3,c	;volatile
  6026                           
  6027                           ;SIO.c: 28:     SPBRG = 255;
  6028  001E6E  68AF               	setf	175,c	;volatile
  6029                           
  6030                           ;SIO.c: 31:     TRISCbits.TRISC5 = 1;
  6031  001E70  8A94               	bsf	148,5,c	;volatile
  6032                           
  6033                           ;SIO.c: 32:     TRISCbits.TRISC4 = 0;
  6034  001E72  9894               	bcf	148,4,c	;volatile
  6035                           
  6036                           ;SIO.c: 33:     timerRX = TiGetTimer();
  6037  001E74  EC77  F00E         	call	_TiGetTimer	;wreg free
  6038  001E78  6E29               	movwf	_timerRX^0,c
  6039                           
  6040                           ;SIO.c: 34:     timerTX = TiGetTimer();
  6041  001E7A  EC77  F00E         	call	_TiGetTimer	;wreg free
  6042  001E7E  6E25               	movwf	_timerTX^0,c
  6043  001E80  0012               	return		;funcret
  6044  001E82                     __end_of_initSIO:
  6045                           	callstack 0
  6046                           
  6047 ;; *************** function _initMenu *****************
  6048 ;; Defined at:
  6049 ;;		line 34 in file "Menu.c"
  6050 ;; Parameters:    Size  Location     Type
  6051 ;;		None
  6052 ;; Auto vars:     Size  Location     Type
  6053 ;;		None
  6054 ;; Return value:  Size  Location     Type
  6055 ;;                  1    wreg      void 
  6056 ;; Registers used:
  6057 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6058 ;; Tracked objects:
  6059 ;;		On entry : 0/0
  6060 ;;		On exit  : 0/0
  6061 ;;		Unchanged: 0/0
  6062 ;; Data sizes:     COMRAM   BANK0   BANK1
  6063 ;;      Params:         0       0       0
  6064 ;;      Locals:         0       0       0
  6065 ;;      Temps:          0       0       0
  6066 ;;      Totals:         0       0       0
  6067 ;;Total ram usage:        0 bytes
  6068 ;; Hardware stack levels used: 1
  6069 ;; Hardware stack levels required when called: 3
  6070 ;; This function calls:
  6071 ;;		_TiGetTimer
  6072 ;; This function is called by:
  6073 ;;		_main
  6074 ;; This function uses a non-reentrant model
  6075 ;;
  6076                           
  6077                           	psect	text51
  6078  0000D8                     __ptext51:
  6079                           	callstack 0
  6080  0000D8                     _initMenu:
  6081                           	callstack 27
  6082                           
  6083                           ;Menu.c: 35:     timer = TiGetTimer();
  6084                           
  6085                           ;incstack = 0
  6086  0000D8  EC77  F00E         	call	_TiGetTimer	;wreg free
  6087  0000DC  6E39               	movwf	_timer^0,c
  6088                           
  6089                           ;Menu.c: 36:     val = 0;
  6090  0000DE  6A35               	clrf	_val^0,c
  6091                           
  6092                           ;Menu.c: 37:     skipState = 0;
  6093  0000E0  6A32               	clrf	_skipState^0,c
  6094                           
  6095                           ;Menu.c: 38:     pos = 0;
  6096  0000E2  6A34               	clrf	_pos^0,c
  6097  0000E4  0012               	return		;funcret
  6098  0000E6                     __end_of_initMenu:
  6099                           	callstack 0
  6100                           
  6101 ;; *************** function _initKeypad *****************
  6102 ;; Defined at:
  6103 ;;		line 29 in file "keypad.c"
  6104 ;; Parameters:    Size  Location     Type
  6105 ;;		None
  6106 ;; Auto vars:     Size  Location     Type
  6107 ;;		None
  6108 ;; Return value:  Size  Location     Type
  6109 ;;                  1    wreg      void 
  6110 ;; Registers used:
  6111 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6112 ;; Tracked objects:
  6113 ;;		On entry : 0/0
  6114 ;;		On exit  : 0/0
  6115 ;;		Unchanged: 0/0
  6116 ;; Data sizes:     COMRAM   BANK0   BANK1
  6117 ;;      Params:         0       0       0
  6118 ;;      Locals:         0       0       0
  6119 ;;      Temps:          0       0       0
  6120 ;;      Totals:         0       0       0
  6121 ;;Total ram usage:        0 bytes
  6122 ;; Hardware stack levels used: 1
  6123 ;; Hardware stack levels required when called: 3
  6124 ;; This function calls:
  6125 ;;		_TiGetTimer
  6126 ;; This function is called by:
  6127 ;;		_main
  6128 ;; This function uses a non-reentrant model
  6129 ;;
  6130                           
  6131                           	psect	text52
  6132  001EC4                     __ptext52:
  6133                           	callstack 0
  6134  001EC4                     _initKeypad:
  6135                           	callstack 27
  6136                           
  6137                           ;keypad.c: 30:     INTCON2bits.RBPU = 0;
  6138                           
  6139                           ;incstack = 0
  6140  001EC4  9EF1               	bcf	241,7,c	;volatile
  6141                           
  6142                           ;keypad.c: 32:     TRISBbits.TRISB0 = 1;
  6143  001EC6  8093               	bsf	147,0,c	;volatile
  6144                           
  6145                           ;keypad.c: 33:     TRISBbits.TRISB1 = 1;
  6146  001EC8  8293               	bsf	147,1,c	;volatile
  6147                           
  6148                           ;keypad.c: 34:     TRISBbits.TRISB2 = 1;
  6149  001ECA  8493               	bsf	147,2,c	;volatile
  6150                           
  6151                           ;keypad.c: 35:     TRISBbits.TRISB3 = 0;
  6152  001ECC  9693               	bcf	147,3,c	;volatile
  6153                           
  6154                           ;keypad.c: 36:     TRISBbits.TRISB4 = 0;
  6155  001ECE  9893               	bcf	147,4,c	;volatile
  6156                           
  6157                           ;keypad.c: 37:     TRISBbits.TRISB5 = 0;
  6158  001ED0  9A93               	bcf	147,5,c	;volatile
  6159                           
  6160                           ;keypad.c: 38:     TRISBbits.TRISB6 = 0;
  6161  001ED2  9C93               	bcf	147,6,c	;volatile
  6162                           
  6163                           ;keypad.c: 39:     TRISAbits.TRISA4 = 0;
  6164  001ED4  9892               	bcf	146,4,c	;volatile
  6165                           
  6166                           ;keypad.c: 40:     timerBounces = TiGetTimer();
  6167  001ED6  EC77  F00E         	call	_TiGetTimer	;wreg free
  6168  001EDA  6E49               	movwf	_timerBounces^0,c
  6169                           
  6170                           ;keypad.c: 41:     timer_SMS = TiGetTimer();
  6171  001EDC  EC77  F00E         	call	_TiGetTimer	;wreg free
  6172  001EE0  6E48               	movwf	_timer_SMS^0,c
  6173  001EE2  0012               	return		;funcret
  6174  001EE4                     __end_of_initKeypad:
  6175                           	callstack 0
  6176                           
  6177 ;; *************** function _initJoystick *****************
  6178 ;; Defined at:
  6179 ;;		line 11 in file "Joystick.c"
  6180 ;; Parameters:    Size  Location     Type
  6181 ;;		None
  6182 ;; Auto vars:     Size  Location     Type
  6183 ;;		None
  6184 ;; Return value:  Size  Location     Type
  6185 ;;                  1    wreg      void 
  6186 ;; Registers used:
  6187 ;;		wreg, status,2
  6188 ;; Tracked objects:
  6189 ;;		On entry : 0/0
  6190 ;;		On exit  : 0/0
  6191 ;;		Unchanged: 0/0
  6192 ;; Data sizes:     COMRAM   BANK0   BANK1
  6193 ;;      Params:         0       0       0
  6194 ;;      Locals:         0       0       0
  6195 ;;      Temps:          0       0       0
  6196 ;;      Totals:         0       0       0
  6197 ;;Total ram usage:        0 bytes
  6198 ;; Hardware stack levels used: 1
  6199 ;; Hardware stack levels required when called: 2
  6200 ;; This function calls:
  6201 ;;		Nothing
  6202 ;; This function is called by:
  6203 ;;		_main
  6204 ;; This function uses a non-reentrant model
  6205 ;;
  6206                           
  6207                           	psect	text53
  6208  001F62                     __ptext53:
  6209                           	callstack 0
  6210  001F62                     _initJoystick:
  6211                           	callstack 28
  6212                           
  6213                           ;Joystick.c: 12:     TRISAbits.TRISA0 = 1;
  6214                           
  6215                           ;incstack = 0
  6216  001F62  8092               	bsf	146,0,c	;volatile
  6217                           
  6218                           ;Joystick.c: 13:     TRISAbits.TRISA1 = 1;
  6219  001F64  8292               	bsf	146,1,c	;volatile
  6220                           
  6221                           ;Joystick.c: 14:     ADCON0 = 0x03;
  6222  001F66  0E03               	movlw	3
  6223  001F68  6EC2               	movwf	194,c	;volatile
  6224                           
  6225                           ;Joystick.c: 15:     ADCON1 = 0x0C;
  6226  001F6A  0E0C               	movlw	12
  6227  001F6C  6EC1               	movwf	193,c	;volatile
  6228                           
  6229                           ;Joystick.c: 16:     ADCON2 = 0x44;
  6230  001F6E  0E44               	movlw	68
  6231  001F70  6EC0               	movwf	192,c	;volatile
  6232                           
  6233                           ;Joystick.c: 21:     moved = 0;
  6234  001F72  6A2D               	clrf	_moved^0,c
  6235                           
  6236                           ;Joystick.c: 22:     ADCON0bits.GO_DONE=1;
  6237  001F74  82C2               	bsf	194,1,c	;volatile
  6238                           
  6239                           ;Joystick.c: 23:     ADCON0bits.CHS0=0;
  6240  001F76  94C2               	bcf	194,2,c	;volatile
  6241                           
  6242                           ;Joystick.c: 24:     ADCON0bits.CHS1=1;
  6243  001F78  86C2               	bsf	194,3,c	;volatile
  6244                           
  6245                           ;Joystick.c: 25:     stateJoy = 0;
  6246  001F7A  6A2C               	clrf	_stateJoy^0,c
  6247  001F7C  0012               	return		;funcret
  6248  001F7E                     __end_of_initJoystick:
  6249                           	callstack 0
  6250                           
  6251 ;; *************** function _initData *****************
  6252 ;; Defined at:
  6253 ;;		line 29 in file "EEPROM.c"
  6254 ;; Parameters:    Size  Location     Type
  6255 ;;		None
  6256 ;; Auto vars:     Size  Location     Type
  6257 ;;		None
  6258 ;; Return value:  Size  Location     Type
  6259 ;;                  1    wreg      void 
  6260 ;; Registers used:
  6261 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6262 ;; Tracked objects:
  6263 ;;		On entry : 0/0
  6264 ;;		On exit  : 0/0
  6265 ;;		Unchanged: 0/0
  6266 ;; Data sizes:     COMRAM   BANK0   BANK1
  6267 ;;      Params:         0       0       0
  6268 ;;      Locals:         0       0       0
  6269 ;;      Temps:          0       0       0
  6270 ;;      Totals:         0       0       0
  6271 ;;Total ram usage:        0 bytes
  6272 ;; Hardware stack levels used: 1
  6273 ;; Hardware stack levels required when called: 4
  6274 ;; This function calls:
  6275 ;;		_readEEPROM
  6276 ;;		_readUserData
  6277 ;; This function is called by:
  6278 ;;		_main
  6279 ;; This function uses a non-reentrant model
  6280 ;;
  6281                           
  6282                           	psect	text54
  6283  001A4A                     __ptext54:
  6284                           	callstack 0
  6285  001A4A                     _initData:
  6286                           	callstack 26
  6287                           
  6288                           ;EEPROM.c: 30:     state = 0;
  6289                           
  6290                           ;incstack = 0
  6291  001A4A  6A1F               	clrf	_state@EEPROM$F1704^0,c
  6292                           
  6293                           ;EEPROM.c: 31:     for (userNum = 0; userNum < 8; userNum++){
  6294  001A4C  6A1E               	clrf	_userNum^0,c
  6295  001A4E                     l2525:
  6296  001A4E  0E07               	movlw	7
  6297  001A50  641E               	cpfsgt	_userNum^0,c
  6298  001A52  D001               	goto	l2529
  6299  001A54  D004               	goto	l873
  6300  001A56                     l2529:
  6301                           
  6302                           ;EEPROM.c: 32:         readUserData();
  6303  001A56  EC98  F00B         	call	_readUserData	;wreg free
  6304                           
  6305                           ;EEPROM.c: 33:     }
  6306  001A5A  2A1E               	incf	_userNum^0,f,c
  6307  001A5C  D7F8               	goto	l2525
  6308  001A5E                     l873:
  6309                           
  6310                           ;EEPROM.c: 34:     for (position = 0; position < 5;){
  6311  001A5E  6A20               	clrf	_position^0,c
  6312  001A60                     l2535:
  6313  001A60  0E04               	movlw	4
  6314  001A62  6420               	cpfsgt	_position^0,c
  6315  001A64  D001               	goto	l2539
  6316  001A66  D013               	goto	l2545
  6317  001A68                     l2539:
  6318                           
  6319                           ;EEPROM.c: 35:         topScores[position].score = readEEPROM((0x90)+position);
  6320  001A68  5020               	movf	_position^0,w,c
  6321  001A6A  EC0C  F007         	call	PL8	;call to abstracted procedure
  6322  001A6E  5020               	movf	_position^0,w,c
  6323  001A70  0F90               	addlw	144
  6324  001A72  EC47  F000         	call	_readEEPROM
  6325  001A76  6EDF               	movwf	indf2,c
  6326                           
  6327                           ;EEPROM.c: 36:         topScores[position].userNum = readEEPROM((0xA0)+position);
  6328  001A78  5020               	movf	_position^0,w,c
  6329  001A7A  0D02               	mullw	2
  6330  001A7C  ECFA  F006         	call	PL4	;call to abstracted procedure
  6331  001A80  5020               	movf	_position^0,w,c
  6332  001A82  0FA0               	addlw	160
  6333  001A84  EC47  F000         	call	_readEEPROM
  6334  001A88  6EDF               	movwf	indf2,c
  6335                           
  6336                           ;EEPROM.c: 37:         position++;
  6337  001A8A  2A20               	incf	_position^0,f,c
  6338  001A8C  D7E9               	goto	l2535
  6339  001A8E                     l2545:
  6340                           
  6341                           ;EEPROM.c: 39:     lastUserPointer = readEEPROM(0xFF);
  6342  001A8E  0EFF               	movlw	255
  6343  001A90  EC47  F000         	call	_readEEPROM
  6344  001A94  6E1C               	movwf	_lastUserPointer^0,c
  6345                           
  6346                           ;EEPROM.c: 40:     numScores = readEEPROM(0xFE);
  6347  001A96  0EFE               	movlw	254
  6348  001A98  EC47  F000         	call	_readEEPROM
  6349  001A9C  6E21               	movwf	_numScores^0,c
  6350                           
  6351                           ;EEPROM.c: 41:     if (lastUserPointer == 0xFF){
  6352  001A9E  281C               	incf	_lastUserPointer^0,w,c
  6353  001AA0  E101               	bnz	l2551
  6354                           
  6355                           ;EEPROM.c: 42:         lastUserPointer = 0;
  6356  001AA2  6A1C               	clrf	_lastUserPointer^0,c
  6357  001AA4                     l2551:
  6358                           
  6359                           ;EEPROM.c: 44:     if (numScores == 0xFF){
  6360  001AA4  2821               	incf	_numScores^0,w,c
  6361  001AA6  B4D8               	btfsc	status,2,c
  6362                           
  6363                           ;EEPROM.c: 45:         numScores = 0;
  6364  001AA8  6A21               	clrf	_numScores^0,c
  6365  001AAA  0012               	return		;funcret
  6366  001AAC                     __end_of_initData:
  6367                           	callstack 0
  6368                           
  6369 ;; *************** function _readUserData *****************
  6370 ;; Defined at:
  6371 ;;		line 343 in file "EEPROM.c"
  6372 ;; Parameters:    Size  Location     Type
  6373 ;;		None
  6374 ;; Auto vars:     Size  Location     Type
  6375 ;;		None
  6376 ;; Return value:  Size  Location     Type
  6377 ;;                  1    wreg      void 
  6378 ;; Registers used:
  6379 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6380 ;; Tracked objects:
  6381 ;;		On entry : 0/0
  6382 ;;		On exit  : 0/0
  6383 ;;		Unchanged: 0/0
  6384 ;; Data sizes:     COMRAM   BANK0   BANK1
  6385 ;;      Params:         0       0       0
  6386 ;;      Locals:         0       0       0
  6387 ;;      Temps:          2       0       0
  6388 ;;      Totals:         2       0       0
  6389 ;;Total ram usage:        2 bytes
  6390 ;; Hardware stack levels used: 1
  6391 ;; Hardware stack levels required when called: 3
  6392 ;; This function calls:
  6393 ;;		_readEEPROM
  6394 ;; This function is called by:
  6395 ;;		_initData
  6396 ;; This function uses a non-reentrant model
  6397 ;;
  6398                           
  6399                           	psect	text55
  6400  001730                     __ptext55:
  6401                           	callstack 0
  6402  001730                     _readUserData:
  6403                           	callstack 26
  6404                           
  6405                           ;EEPROM.c: 344:     for (position = 0; position < 8; position++){
  6406                           
  6407                           ;incstack = 0
  6408  001730  6A20               	clrf	_position^0,c
  6409  001732                     l2323:
  6410  001732  0E07               	movlw	7
  6411  001734  6420               	cpfsgt	_position^0,c
  6412  001736  D001               	goto	l2327
  6413  001738  D007               	goto	l2333
  6414  00173A                     l2327:
  6415                           
  6416                           ;EEPROM.c: 345:         users[userNum].username[position] = readEEPROM((userNum*16)+posi
      +                          tion);
  6417  00173A  D839               	call	PL52	;call to abstracted procedure
  6418  00173C  D829               	call	PL18	;call to abstracted procedure
  6419  00173E  EC47  F000         	call	_readEEPROM
  6420  001742  6EDF               	movwf	indf2,c
  6421                           
  6422                           ;EEPROM.c: 346:     }
  6423  001744  2A20               	incf	_position^0,f,c
  6424  001746  D7F5               	goto	l2323
  6425  001748                     l2333:
  6426                           
  6427                           ;EEPROM.c: 347:     users[userNum].username[8] = '\0';
  6428  001748  501E               	movf	_userNum^0,w,c
  6429  00174A  0D12               	mullw	18
  6430  00174C  0E08               	movlw	low (_users+8)
  6431  00174E  24F3               	addwf	243,w,c
  6432  001750  6ED9               	movwf	fsr2l,c
  6433  001752  0E01               	movlw	high (_users+8)
  6434  001754  20F4               	addwfc	prodh,w,c
  6435  001756  6EDA               	movwf	fsr2h,c
  6436  001758  6ADF               	clrf	indf2,c
  6437                           
  6438                           ;EEPROM.c: 348:     for (position = 0; position < 8; position++){
  6439  00175A  6A20               	clrf	_position^0,c
  6440  00175C                     l2337:
  6441  00175C  0E07               	movlw	7
  6442  00175E  6420               	cpfsgt	_position^0,c
  6443  001760  D001               	goto	l2341
  6444  001762  D00C               	goto	l2347
  6445  001764                     l2341:
  6446                           
  6447                           ;EEPROM.c: 349:         users[userNum].password[position] = readEEPROM((userNum*16)+8+po
      +                          sition);
  6448  001764  D824               	call	PL52	;call to abstracted procedure
  6449  001766  0E09               	movlw	9
  6450  001768  2652               	addwf	??_readUserData^0,f,c
  6451  00176A  0E00               	movlw	0
  6452  00176C  2253               	addwfc	(??_readUserData+1)^0,f,c
  6453  00176E  D810               	call	PL18	;call to abstracted procedure
  6454  001770  0F08               	addlw	8
  6455  001772  EC47  F000         	call	_readEEPROM
  6456  001776  6EDF               	movwf	indf2,c
  6457                           
  6458                           ;EEPROM.c: 350:     }
  6459  001778  2A20               	incf	_position^0,f,c
  6460  00177A  D7F0               	goto	l2337
  6461  00177C                     l2347:
  6462                           
  6463                           ;EEPROM.c: 351:     users[userNum].password[8] = '\0';
  6464  00177C  501E               	movf	_userNum^0,w,c
  6465  00177E  0D12               	mullw	18
  6466  001780  0E11               	movlw	low (_users+17)
  6467  001782  24F3               	addwf	243,w,c
  6468  001784  6ED9               	movwf	fsr2l,c
  6469  001786  0E01               	movlw	high (_users+17)
  6470  001788  20F4               	addwfc	prodh,w,c
  6471  00178A  6EDA               	movwf	fsr2h,c
  6472  00178C  6ADF               	clrf	indf2,c
  6473  00178E  0C00               	retlw	0	;funcret
  6474  001790                     __end_of_readUserData:
  6475                           	callstack 0
  6476  001790                     PL18:
  6477                           	callstack 26
  6478  001790  50F3               	movf	243,w,c
  6479  001792  2652               	addwf	??_readUserData^0,f,c
  6480  001794  50F4               	movf	244,w,c
  6481  001796  2253               	addwfc	(??_readUserData+1)^0,f,c
  6482  001798  5020               	movf	_position^0,w,c
  6483  00179A  2452               	addwf	??_readUserData^0,w,c
  6484  00179C  6ED9               	movwf	fsr2l,c
  6485  00179E  0E00               	movlw	0
  6486  0017A0  2053               	addwfc	(??_readUserData+1)^0,w,c
  6487  0017A2  6EDA               	movwf	fsr2h,c
  6488  0017A4  501E               	movf	_userNum^0,w,c
  6489  0017A6  0D10               	mullw	16
  6490  0017A8  50F3               	movf	243,w,c
  6491  0017AA  2420               	addwf	_position^0,w,c
  6492  0017AC  0012               	return	
  6493  0017AE                     __end_ofPL18:
  6494                           	callstack 0
  6495  0017AE                     PL52:
  6496                           	callstack 26
  6497  0017AE  501E               	movf	_userNum^0,w,c
  6498  0017B0  0D12               	mullw	18
  6499  0017B2  0E00               	movlw	low _users
  6500  0017B4  6E52               	movwf	??_readUserData^0,c
  6501  0017B6  0E01               	movlw	high _users
  6502  0017B8  6E53               	movwf	(??_readUserData+1)^0,c
  6503  0017BA  0012               	return	
  6504  0017BC                     __end_ofPL52:
  6505                           	callstack 0
  6506                           
  6507 ;; *************** function _readEEPROM *****************
  6508 ;; Defined at:
  6509 ;;		line 371 in file "EEPROM.c"
  6510 ;; Parameters:    Size  Location     Type
  6511 ;;  address         1    wreg     unsigned char 
  6512 ;; Auto vars:     Size  Location     Type
  6513 ;;  address         1    5[COMRAM] unsigned char 
  6514 ;; Return value:  Size  Location     Type
  6515 ;;                  1    wreg      unsigned char 
  6516 ;; Registers used:
  6517 ;;		wreg, status,2
  6518 ;; Tracked objects:
  6519 ;;		On entry : 0/0
  6520 ;;		On exit  : 0/0
  6521 ;;		Unchanged: 0/0
  6522 ;; Data sizes:     COMRAM   BANK0   BANK1
  6523 ;;      Params:         0       0       0
  6524 ;;      Locals:         1       0       0
  6525 ;;      Temps:          0       0       0
  6526 ;;      Totals:         1       0       0
  6527 ;;Total ram usage:        1 bytes
  6528 ;; Hardware stack levels used: 1
  6529 ;; Hardware stack levels required when called: 2
  6530 ;; This function calls:
  6531 ;;		Nothing
  6532 ;; This function is called by:
  6533 ;;		_initData
  6534 ;;		_readUserData
  6535 ;; This function uses a non-reentrant model
  6536 ;;
  6537                           
  6538                           	psect	text56
  6539  00008E                     __ptext56:
  6540                           	callstack 0
  6541  00008E                     _readEEPROM:
  6542                           	callstack 26
  6543                           
  6544                           ;incstack = 0
  6545                           ;readEEPROM@address stored from wreg
  6546  00008E  6E51               	movwf	readEEPROM@address^0,c
  6547                           
  6548                           ;EEPROM.c: 372:     EECON1bits.EEPGD = 0;
  6549  000090  9EA6               	bcf	166,7,c	;volsfr
  6550                           
  6551                           ;EEPROM.c: 373:     EECON1bits.CFGS = 0;
  6552  000092  9CA6               	bcf	166,6,c	;volsfr
  6553                           
  6554                           ;EEPROM.c: 374:     EEADR = address;
  6555  000094  C051  FFA9         	movff	readEEPROM@address,4009	;volatile
  6556                           
  6557                           ;EEPROM.c: 375:     EECON1bits.RD = 1;
  6558  000098  80A6               	bsf	166,0,c	;volsfr
  6559                           
  6560                           ;EEPROM.c: 376:     return EEDATA;
  6561  00009A  50A8               	movf	168,w,c	;volatile
  6562  00009C  0012               	return		;funcret
  6563  00009E                     __end_of_readEEPROM:
  6564                           	callstack 0
  6565                           
  6566 ;; *************** function _initAudio *****************
  6567 ;; Defined at:
  6568 ;;		line 20 in file "Audio.c"
  6569 ;; Parameters:    Size  Location     Type
  6570 ;;		None
  6571 ;; Auto vars:     Size  Location     Type
  6572 ;;		None
  6573 ;; Return value:  Size  Location     Type
  6574 ;;                  1    wreg      void 
  6575 ;; Registers used:
  6576 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6577 ;; Tracked objects:
  6578 ;;		On entry : 0/0
  6579 ;;		On exit  : 0/0
  6580 ;;		Unchanged: 0/0
  6581 ;; Data sizes:     COMRAM   BANK0   BANK1
  6582 ;;      Params:         0       0       0
  6583 ;;      Locals:         0       0       0
  6584 ;;      Temps:          0       0       0
  6585 ;;      Totals:         0       0       0
  6586 ;;Total ram usage:        0 bytes
  6587 ;; Hardware stack levels used: 1
  6588 ;; Hardware stack levels required when called: 3
  6589 ;; This function calls:
  6590 ;;		_TiGetTimer
  6591 ;; This function is called by:
  6592 ;;		_main
  6593 ;; This function uses a non-reentrant model
  6594 ;;
  6595                           
  6596                           	psect	text57
  6597  00009E                     __ptext57:
  6598                           	callstack 0
  6599  00009E                     _initAudio:
  6600                           	callstack 27
  6601                           
  6602                           ;Audio.c: 21:     TRISCbits.TRISC3 = 0;
  6603                           
  6604                           ;incstack = 0
  6605  00009E  9694               	bcf	148,3,c	;volatile
  6606                           
  6607                           ;Audio.c: 22:     periodTimer = TiGetTimer();
  6608  0000A0  EC77  F00E         	call	_TiGetTimer	;wreg free
  6609  0000A4  6E3D               	movwf	_periodTimer^0,c
  6610                           
  6611                           ;Audio.c: 23:     timerSong = TiGetTimer();
  6612  0000A6  EC77  F00E         	call	_TiGetTimer	;wreg free
  6613  0000AA  6E3C               	movwf	_timerSong^0,c
  6614  0000AC  0012               	return		;funcret
  6615  0000AE                     __end_of_initAudio:
  6616                           	callstack 0
  6617                           
  6618 ;; *************** function _dataMotor *****************
  6619 ;; Defined at:
  6620 ;;		line 49 in file "EEPROM.c"
  6621 ;; Parameters:    Size  Location     Type
  6622 ;;		None
  6623 ;; Auto vars:     Size  Location     Type
  6624 ;;		None
  6625 ;; Return value:  Size  Location     Type
  6626 ;;                  1    wreg      void 
  6627 ;; Registers used:
  6628 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6629 ;; Tracked objects:
  6630 ;;		On entry : 0/0
  6631 ;;		On exit  : 0/0
  6632 ;;		Unchanged: 0/0
  6633 ;; Data sizes:     COMRAM   BANK0   BANK1
  6634 ;;      Params:         0       0       0
  6635 ;;      Locals:         2       0       0
  6636 ;;      Temps:          6       0       0
  6637 ;;      Totals:         8       0       0
  6638 ;;Total ram usage:        8 bytes
  6639 ;; Hardware stack levels used: 1
  6640 ;; Hardware stack levels required when called: 6
  6641 ;; This function calls:
  6642 ;;		_LcGotoXY
  6643 ;;		_LcPutChar
  6644 ;;		___lbdiv
  6645 ;;		___lbmod
  6646 ;;		_saveEEPROM
  6647 ;; This function is called by:
  6648 ;;		_main
  6649 ;; This function uses a non-reentrant model
  6650 ;;
  6651                           
  6652                           	psect	text58
  6653  0009D2                     __ptext58:
  6654                           	callstack 0
  6655  0009D2                     _dataMotor:
  6656                           	callstack 24
  6657                           
  6658                           ;EEPROM.c: 50:     switch(state){
  6659                           
  6660                           ;incstack = 0
  6661  0009D2  D1B4               	goto	l5445
  6662  0009D4                     l5241:
  6663                           
  6664                           ;EEPROM.c: 55:             status = 2;
  6665  0009D4  0E02               	movlw	2
  6666  0009D6  6E1D               	movwf	_status^0,c
  6667                           
  6668                           ;EEPROM.c: 56:             if (userNum != 8){
  6669  0009D8  0E08               	movlw	8
  6670  0009DA  181E               	xorwf	_userNum^0,w,c
  6671  0009DC  E003               	bz	l5247
  6672                           
  6673                           ;EEPROM.c: 57:                 state = 2;
  6674  0009DE  0E02               	movlw	2
  6675  0009E0  6E1F               	movwf	_state@EEPROM$F1704^0,c
  6676                           
  6677                           ;EEPROM.c: 61:             } else {
  6678  0009E2  0C02               	retlw	2
  6679  0009E4                     l5247:
  6680                           
  6681                           ;EEPROM.c: 62:                 status = 1;
  6682  0009E4  0E01               	movlw	1
  6683  0009E6  6E1D               	movwf	_status^0,c
  6684                           
  6685                           ;EEPROM.c: 63:                 state = wrongState;
  6686  0009E8  C019  F01F         	movff	_wrongState,_state@EEPROM$F1704
  6687  0009EC                     l5251:
  6688                           
  6689                           ;EEPROM.c: 64:                 position = 0;
  6690  0009EC  6A20               	clrf	_position^0,c
  6691  0009EE  0012               	return	
  6692  0009F0                     l5253:
  6693                           
  6694                           ;EEPROM.c: 71:             if (users[userNum].username[position] == (*mUser).username[po
      +                          sition]){
  6695  0009F0  DA20               	call	PL22	;call to abstracted procedure
  6696  0009F2  501E               	movf	_userNum^0,w,c
  6697  0009F4  0D12               	mullw	18
  6698  0009F6  0E00               	movlw	low _users
  6699  0009F8  6E60               	movwf	(??_dataMotor+1)^0,c
  6700  0009FA  0E01               	movlw	high _users
  6701  0009FC  6E61               	movwf	(??_dataMotor+2)^0,c
  6702  0009FE  50F3               	movf	243,w,c
  6703  000A00  2660               	addwf	(??_dataMotor+1)^0,f,c
  6704  000A02  50F4               	movf	244,w,c
  6705  000A04  2261               	addwfc	(??_dataMotor+2)^0,f,c
  6706  000A06  5020               	movf	_position^0,w,c
  6707  000A08  2460               	addwf	(??_dataMotor+1)^0,w,c
  6708  000A0A  6EE1               	movwf	fsr1l,c
  6709  000A0C  0E00               	movlw	0
  6710  000A0E  2061               	addwfc	(??_dataMotor+2)^0,w,c
  6711  000A10  6EE2               	movwf	fsr1h,c
  6712  000A12  50DE               	movf	postinc2,w,c
  6713  000A14  18E6               	xorwf	postinc1,w,c
  6714  000A16  E109               	bnz	l888
  6715                           
  6716                           ;EEPROM.c: 73:                 if ((*mUser).username[position] == '\0'){
  6717  000A18  DA0C               	call	PL22	;call to abstracted procedure
  6718  000A1A  50DF               	movf	indf2,w,c
  6719  000A1C  E104               	bnz	l5259
  6720                           
  6721                           ;EEPROM.c: 74:                     state = saveState;
  6722  000A1E  C01A  F01F         	movff	_saveState,_state@EEPROM$F1704
  6723                           
  6724                           ;EEPROM.c: 75:                     position = 0;
  6725  000A22  6A20               	clrf	_position^0,c
  6726                           
  6727                           ;EEPROM.c: 76:                 } else {
  6728  000A24  0012               	return	
  6729  000A26                     l5259:
  6730                           
  6731                           ;EEPROM.c: 77:                     position++;
  6732  000A26  2A20               	incf	_position^0,f,c
  6733  000A28  0012               	return	
  6734  000A2A                     l888:
  6735                           
  6736                           ;EEPROM.c: 80:                 position = 0;
  6737  000A2A  6A20               	clrf	_position^0,c
  6738                           
  6739                           ;EEPROM.c: 81:                 userNum++;
  6740  000A2C  2A1E               	incf	_userNum^0,f,c
  6741                           
  6742                           ;EEPROM.c: 82:                 state = 1;
  6743  000A2E  0E01               	movlw	1
  6744  000A30  6E1F               	movwf	_state@EEPROM$F1704^0,c
  6745  000A32  0C01               	retlw	1
  6746  000A34                     l5265:
  6747                           
  6748                           ;EEPROM.c: 89:             if (users[userNum].password[position] == (*mUser).password[po
      +                          sition]){
  6749  000A34  D9E4               	call	PL6	;call to abstracted procedure
  6750  000A36  501E               	movf	_userNum^0,w,c
  6751  000A38  0D12               	mullw	18
  6752  000A3A  0E00               	movlw	low _users
  6753  000A3C  6E62               	movwf	(??_dataMotor+3)^0,c
  6754  000A3E  0E01               	movlw	high _users
  6755  000A40  6E63               	movwf	(??_dataMotor+4)^0,c
  6756  000A42  0E09               	movlw	9
  6757  000A44  2662               	addwf	(??_dataMotor+3)^0,f,c
  6758  000A46  0E00               	movlw	0
  6759  000A48  2263               	addwfc	(??_dataMotor+4)^0,f,c
  6760  000A4A  50F3               	movf	243,w,c
  6761  000A4C  2662               	addwf	(??_dataMotor+3)^0,f,c
  6762  000A4E  50F4               	movf	244,w,c
  6763  000A50  2263               	addwfc	(??_dataMotor+4)^0,f,c
  6764  000A52  5020               	movf	_position^0,w,c
  6765  000A54  2462               	addwf	(??_dataMotor+3)^0,w,c
  6766  000A56  6EE1               	movwf	fsr1l,c
  6767  000A58  0E00               	movlw	0
  6768  000A5A  2063               	addwfc	(??_dataMotor+4)^0,w,c
  6769  000A5C  6EE2               	movwf	fsr1h,c
  6770  000A5E  50DE               	movf	postinc2,w,c
  6771  000A60  18E6               	xorwf	postinc1,w,c
  6772  000A62  E106               	bnz	l5273
  6773                           
  6774                           ;EEPROM.c: 91:                 if ((*mUser).password[position] == '\0'){
  6775  000A64  D9CC               	call	PL6	;call to abstracted procedure
  6776  000A66  50DF               	movf	indf2,w,c
  6777  000A68  E1DE               	bnz	l5259
  6778                           
  6779                           ;EEPROM.c: 92:                     state = 0;
  6780  000A6A  6A1F               	clrf	_state@EEPROM$F1704^0,c
  6781                           
  6782                           ;EEPROM.c: 93:                     status = 0;
  6783  000A6C  6A1D               	clrf	_status^0,c
  6784                           
  6785                           ;EEPROM.c: 94:                 }else {
  6786  000A6E  0012               	return	
  6787  000A70                     l5273:
  6788                           
  6789                           ;EEPROM.c: 99:                 status = 1;
  6790  000A70  0E01               	movlw	1
  6791  000A72  6E1D               	movwf	_status^0,c
  6792  000A74                     l5275:
  6793                           
  6794                           ;EEPROM.c: 100:                 state = 0;
  6795  000A74  6A1F               	clrf	_state@EEPROM$F1704^0,c
  6796  000A76  0012               	return	
  6797  000A78                     l5277:
  6798                           
  6799                           ;EEPROM.c: 137:             saveEEPROM((lastUserPointer*16)+position ,(*mUser).username[
      +                          position]);
  6800  000A78  D9DC               	call	PL22	;call to abstracted procedure
  6801  000A7A  D9E2               	call	PL46	;call to abstracted procedure
  6802  000A7C  EC41  F00F         	call	_saveEEPROM
  6803                           
  6804                           ;EEPROM.c: 138:             users[lastUserPointer].username[position] = (*mUser).usernam
      +                          e[position];
  6805  000A80  D9D8               	call	PL22	;call to abstracted procedure
  6806  000A82  501C               	movf	_lastUserPointer^0,w,c
  6807  000A84  0D12               	mullw	18
  6808  000A86  0E00               	movlw	low _users
  6809  000A88  6E5F               	movwf	??_dataMotor^0,c
  6810  000A8A  0E01               	movlw	high _users
  6811  000A8C  6E60               	movwf	(??_dataMotor+1)^0,c
  6812  000A8E  50F3               	movf	243,w,c
  6813  000A90  265F               	addwf	??_dataMotor^0,f,c
  6814  000A92  50F4               	movf	244,w,c
  6815  000A94  2260               	addwfc	(??_dataMotor+1)^0,f,c
  6816  000A96  5020               	movf	_position^0,w,c
  6817  000A98  245F               	addwf	??_dataMotor^0,w,c
  6818  000A9A  6EE1               	movwf	fsr1l,c
  6819  000A9C  0E00               	movlw	0
  6820  000A9E  2060               	addwfc	(??_dataMotor+1)^0,w,c
  6821  000AA0  6EE2               	movwf	fsr1h,c
  6822  000AA2  CFDF FFE7          	movff	indf2,indf1
  6823                           
  6824                           ;EEPROM.c: 139:             if(position < 7){
  6825  000AA6  0E07               	movlw	7
  6826  000AA8  6020               	cpfslt	_position^0,c
  6827  000AAA  D003               	goto	l898
  6828                           
  6829                           ;EEPROM.c: 140:                 position++;
  6830  000AAC  2A20               	incf	_position^0,f,c
  6831                           
  6832                           ;EEPROM.c: 141:                 saveState = 10;
  6833  000AAE  0E0A               	movlw	10
  6834  000AB0  D002               	goto	L6
  6835  000AB2                     l898:
  6836                           
  6837                           ;EEPROM.c: 143:                 position = 0;
  6838  000AB2  6A20               	clrf	_position^0,c
  6839  000AB4                     l5287:
  6840                           
  6841                           ;EEPROM.c: 144:                 saveState = 12;
  6842  000AB4  0E0C               	movlw	12
  6843  000AB6                     L6:
  6844  000AB6  6E1A               	movwf	_saveState^0,c
  6845  000AB8                     l899:
  6846                           
  6847                           ;EEPROM.c: 146:             state = 11;
  6848  000AB8  0E0B               	movlw	11
  6849  000ABA  6E1F               	movwf	_state@EEPROM$F1704^0,c
  6850                           
  6851                           ;EEPROM.c: 147:             break;
  6852  000ABC  0C0B               	retlw	11
  6853  000ABE                     l900:
  6854                           
  6855                           ;EEPROM.c: 149:             if(EECON1bits.WR == 0){
  6856  000ABE  B2A6               	btfsc	166,1,c	;volsfr
  6857  000AC0  0012               	return	
  6858                           
  6859                           ;EEPROM.c: 150:                 state = saveState;
  6860  000AC2  C01A  F01F         	movff	_saveState,_state@EEPROM$F1704
  6861  000AC6  0012               	return	
  6862  000AC8                     l5291:
  6863                           
  6864                           ;EEPROM.c: 154:             users[lastUserPointer].password[position] = (*mUser).passwor
      +                          d[position];
  6865  000AC8  D99A               	call	PL6	;call to abstracted procedure
  6866  000ACA  501C               	movf	_lastUserPointer^0,w,c
  6867  000ACC  0D12               	mullw	18
  6868  000ACE  0E00               	movlw	low _users
  6869  000AD0  6E61               	movwf	(??_dataMotor+2)^0,c
  6870  000AD2  0E01               	movlw	high _users
  6871  000AD4  6E62               	movwf	(??_dataMotor+3)^0,c
  6872  000AD6  0E09               	movlw	9
  6873  000AD8  2661               	addwf	(??_dataMotor+2)^0,f,c
  6874  000ADA  0E00               	movlw	0
  6875  000ADC  2262               	addwfc	(??_dataMotor+3)^0,f,c
  6876  000ADE  50F3               	movf	243,w,c
  6877  000AE0  2661               	addwf	(??_dataMotor+2)^0,f,c
  6878  000AE2  50F4               	movf	244,w,c
  6879  000AE4  2262               	addwfc	(??_dataMotor+3)^0,f,c
  6880  000AE6  5020               	movf	_position^0,w,c
  6881  000AE8  2461               	addwf	(??_dataMotor+2)^0,w,c
  6882  000AEA  6EE1               	movwf	fsr1l,c
  6883  000AEC  0E00               	movlw	0
  6884  000AEE  2062               	addwfc	(??_dataMotor+3)^0,w,c
  6885  000AF0  6EE2               	movwf	fsr1h,c
  6886  000AF2  CFDF FFE7          	movff	indf2,indf1
  6887                           
  6888                           ;EEPROM.c: 155:             saveEEPROM((lastUserPointer*16)+position+8,(*mUser).password
      +                          [position]);
  6889  000AF6  D983               	call	PL6	;call to abstracted procedure
  6890  000AF8  D9A3               	call	PL46	;call to abstracted procedure
  6891  000AFA  0F08               	addlw	8
  6892  000AFC  EC41  F00F         	call	_saveEEPROM
  6893                           
  6894                           ;EEPROM.c: 156:             if(position < 7){
  6895  000B00  0E07               	movlw	7
  6896  000B02  6020               	cpfslt	_position^0,c
  6897  000B04  D002               	goto	l903
  6898                           
  6899                           ;EEPROM.c: 157:                 position++;
  6900  000B06  2A20               	incf	_position^0,f,c
  6901  000B08  D7D5               	goto	l5287
  6902  000B0A                     l903:
  6903                           
  6904                           ;EEPROM.c: 160:                 position = 0;
  6905  000B0A  6A20               	clrf	_position^0,c
  6906                           
  6907                           ;EEPROM.c: 161:                 saveState = 14;
  6908  000B0C  0E0E               	movlw	14
  6909  000B0E  D7D3               	goto	L6
  6910  000B10                     l5303:
  6911                           
  6912                           ;EEPROM.c: 166:             if (position >= numScores){
  6913  000B10  5021               	movf	_numScores^0,w,c
  6914  000B12  5C20               	subwf	_position^0,w,c
  6915  000B14  E303               	bnc	l5309
  6916                           
  6917                           ;EEPROM.c: 167:                 state = 16;
  6918  000B16  0E10               	movlw	16
  6919  000B18  6E1F               	movwf	_state@EEPROM$F1704^0,c
  6920  000B1A  D768               	goto	l5251
  6921  000B1C                     l5309:
  6922  000B1C  5020               	movf	_position^0,w,c
  6923  000B1E  0D02               	mullw	2
  6924  000B20  D969               	call	PL4	;call to abstracted procedure
  6925  000B22  501C               	movf	_lastUserPointer^0,w,c
  6926  000B24  18DE               	xorwf	postinc2,w,c
  6927  000B26  E001 D77E          	bnz	l5259
  6928                           
  6929                           ;EEPROM.c: 170:                 topScores[position].userNum = 0xFF;
  6930  000B2A  5020               	movf	_position^0,w,c
  6931  000B2C  0D02               	mullw	2
  6932  000B2E  D962               	call	PL4	;call to abstracted procedure
  6933  000B30  68DF               	setf	indf2,c
  6934                           
  6935                           ;EEPROM.c: 171:                 topScores[position].score = 0xFF;
  6936  000B32  5020               	movf	_position^0,w,c
  6937  000B34  D971               	call	PL8	;call to abstracted procedure
  6938  000B36  68DF               	setf	indf2,c
  6939                           
  6940                           ;EEPROM.c: 172:                 numScores--;
  6941  000B38  0621               	decf	_numScores^0,f,c
  6942                           
  6943                           ;EEPROM.c: 173:                 state = 15;
  6944  000B3A  0E0F               	movlw	15
  6945  000B3C  6E1F               	movwf	_state@EEPROM$F1704^0,c
  6946                           
  6947                           ;EEPROM.c: 174:             }else{
  6948  000B3E  0C0F               	retlw	15
  6949  000B40                     l5319:
  6950                           
  6951                           ;EEPROM.c: 179:             if (position < numScores){
  6952  000B40  5021               	movf	_numScores^0,w,c
  6953  000B42  5C20               	subwf	_position^0,w,c
  6954  000B44  E218               	bc	l911
  6955                           
  6956                           ;EEPROM.c: 180:                 topScores[position].userNum = topScores[position+1].user
      +                          Num;
  6957  000B46  5020               	movf	_position^0,w,c
  6958  000B48  0D02               	mullw	2
  6959  000B4A  50F3               	movf	243,w,c
  6960  000B4C  0F04               	addlw	low (_topScores+3)
  6961  000B4E  6ED9               	movwf	fsr2l,c
  6962  000B50  6ADA               	clrf	fsr2h,c
  6963  000B52  5020               	movf	_position^0,w,c
  6964  000B54  0D02               	mullw	2
  6965  000B56  50F3               	movf	243,w,c
  6966  000B58  0F02               	addlw	low (_topScores+1)
  6967  000B5A  6EE1               	movwf	fsr1l,c
  6968  000B5C  6AE2               	clrf	fsr1h,c
  6969  000B5E  CFDF FFE7          	movff	indf2,indf1
  6970                           
  6971                           ;EEPROM.c: 181:                 topScores[position].score = topScores[position+1].score;
  6972  000B62  5020               	movf	_position^0,w,c
  6973  000B64  0D02               	mullw	2
  6974  000B66  50F3               	movf	243,w,c
  6975  000B68  0F03               	addlw	low (_topScores+2)
  6976  000B6A  6ED9               	movwf	fsr2l,c
  6977  000B6C  6ADA               	clrf	fsr2h,c
  6978  000B6E  D95A               	call	PL14	;call to abstracted procedure
  6979  000B70  CFDF FFE7          	movff	indf2,indf1
  6980  000B74  D758               	goto	l5259
  6981  000B76                     l911:
  6982                           
  6983                           ;EEPROM.c: 184:                 position = 0;
  6984  000B76  6A20               	clrf	_position^0,c
  6985                           
  6986                           ;EEPROM.c: 185:                 state = 14;
  6987  000B78  0E0E               	movlw	14
  6988  000B7A  6E1F               	movwf	_state@EEPROM$F1704^0,c
  6989  000B7C  0C0E               	retlw	14
  6990  000B7E                     l5327:
  6991                           
  6992                           ;EEPROM.c: 189:             if (position < 5){
  6993  000B7E  0E05               	movlw	5
  6994  000B80  6020               	cpfslt	_position^0,c
  6995  000B82  D00A               	goto	l5335
  6996                           
  6997                           ;EEPROM.c: 190:                 saveEEPROM(0x90 + position, topScores[position].score);
  6998  000B84  5020               	movf	_position^0,w,c
  6999  000B86  D948               	call	PL8	;call to abstracted procedure
  7000  000B88  50DF               	movf	indf2,w,c
  7001  000B8A  6E51               	movwf	saveEEPROM@data^0,c
  7002  000B8C  5020               	movf	_position^0,w,c
  7003  000B8E  0F90               	addlw	144
  7004  000B90  EC41  F00F         	call	_saveEEPROM
  7005                           
  7006                           ;EEPROM.c: 191:                 saveState = 17;
  7007  000B94  0E11               	movlw	17
  7008  000B96  D78F               	goto	L6
  7009  000B98                     l5335:
  7010                           
  7011                           ;EEPROM.c: 194:                 state = 18;
  7012  000B98  0E12               	movlw	18
  7013  000B9A  6E1F               	movwf	_state@EEPROM$F1704^0,c
  7014  000B9C  0C12               	retlw	18
  7015  000B9E                     l5337:
  7016                           
  7017                           ;EEPROM.c: 199:             saveEEPROM(0xA0 + position, topScores[position].userNum);
  7018  000B9E  5020               	movf	_position^0,w,c
  7019  000BA0  0D02               	mullw	2
  7020  000BA2  D928               	call	PL4	;call to abstracted procedure
  7021  000BA4  50DF               	movf	indf2,w,c
  7022  000BA6  6E51               	movwf	saveEEPROM@data^0,c
  7023  000BA8  5020               	movf	_position^0,w,c
  7024  000BAA  0FA0               	addlw	160
  7025  000BAC  EC41  F00F         	call	_saveEEPROM
  7026                           
  7027                           ;EEPROM.c: 200:             saveState = 16;
  7028  000BB0  0E10               	movlw	16
  7029  000BB2  6E1A               	movwf	_saveState^0,c
  7030                           
  7031                           ;EEPROM.c: 201:             state = 11;
  7032  000BB4  0E0B               	movlw	11
  7033  000BB6  6E1F               	movwf	_state@EEPROM$F1704^0,c
  7034  000BB8  D736               	goto	l5259
  7035  000BBA                     l5345:
  7036                           
  7037                           ;EEPROM.c: 207:             saveEEPROM(0xFE,numScores);
  7038  000BBA  D94C               	call	PL78	;call to abstracted procedure
  7039  000BBC  EC41  F00F         	call	_saveEEPROM
  7040                           
  7041                           ;EEPROM.c: 209:             saveState = 19;
  7042  000BC0  0E13               	movlw	19
  7043  000BC2  D779               	goto	L6
  7044  000BC4                     l5351:
  7045                           
  7046                           ;EEPROM.c: 213:             lastUserPointer = (lastUserPointer+1)%8;
  7047  000BC4  281C               	incf	_lastUserPointer^0,w,c
  7048  000BC6  0B07               	andlw	7
  7049  000BC8  6E1C               	movwf	_lastUserPointer^0,c
  7050                           
  7051                           ;EEPROM.c: 214:             saveEEPROM(0xFF,lastUserPointer);
  7052  000BCA  C01C  F051         	movff	_lastUserPointer,saveEEPROM@data
  7053  000BCE  0EFF               	movlw	255
  7054  000BD0  EC41  F00F         	call	_saveEEPROM
  7055                           
  7056                           ;EEPROM.c: 215:             saveState = 0;
  7057  000BD4  6A1A               	clrf	_saveState^0,c
  7058                           
  7059                           ;EEPROM.c: 216:             status = 3;
  7060  000BD6  0E03               	movlw	3
  7061  000BD8  6E1D               	movwf	_status^0,c
  7062  000BDA  D76E               	goto	l899
  7063  000BDC                     l5361:
  7064                           
  7065                           ;EEPROM.c: 221:             if (numScores < 5){
  7066  000BDC  0E05               	movlw	5
  7067  000BDE  6021               	cpfslt	_numScores^0,c
  7068  000BE0  D008               	goto	l5373
  7069                           
  7070                           ;EEPROM.c: 222:                 status = numScores;
  7071  000BE2  C021  F01D         	movff	_numScores,_status
  7072                           
  7073                           ;EEPROM.c: 223:                 numScores++;
  7074  000BE6  2A21               	incf	_numScores^0,f,c
  7075                           
  7076                           ;EEPROM.c: 224:                 saveEEPROM(0xFE,numScores);
  7077  000BE8  D935               	call	PL78	;call to abstracted procedure
  7078  000BEA  EC41  F00F         	call	_saveEEPROM
  7079                           
  7080                           ;EEPROM.c: 226:                 saveState = 21;
  7081  000BEE  0E15               	movlw	21
  7082  000BF0  D762               	goto	L6
  7083  000BF2                     l5373:
  7084  000BF2  0E05               	movlw	5
  7085  000BF4  1820               	xorwf	_position^0,w,c
  7086  000BF6  E109               	bnz	l5379
  7087                           
  7088                           ;EEPROM.c: 230:                 if (topScores[status].score < saveScore){
  7089  000BF8  501D               	movf	_status^0,w,c
  7090  000BFA  D90E               	call	PL8	;call to abstracted procedure
  7091  000BFC  501B               	movf	_saveScore^0,w,c
  7092  000BFE  5CDE               	subwf	postinc2,w,c
  7093  000C00  E301 D738          	bc	l5275
  7094                           
  7095                           ;EEPROM.c: 231:                     state = 21;
  7096  000C04  0E15               	movlw	21
  7097  000C06  6E1F               	movwf	_state@EEPROM$F1704^0,c
  7098                           
  7099                           ;EEPROM.c: 232:                 } else{
  7100  000C08  0C15               	retlw	21
  7101  000C0A                     l5379:
  7102                           
  7103                           ;EEPROM.c: 236:                 if (topScores[position].score < topScores[status].score)
      +                          {
  7104  000C0A  501D               	movf	_status^0,w,c
  7105  000C0C  D905               	call	PL8	;call to abstracted procedure
  7106  000C0E  D90A               	call	PL14	;call to abstracted procedure
  7107  000C10  50DE               	movf	postinc2,w,c
  7108  000C12  5CE6               	subwf	postinc1,w,c
  7109  000C14  E301 D707          	bc	l5259
  7110                           
  7111                           ;EEPROM.c: 237:                     status = position;
  7112  000C18  C020  F01D         	movff	_position,_status
  7113  000C1C  D704               	goto	l5259
  7114  000C1E                     l5385:
  7115                           
  7116                           ;EEPROM.c: 243:             topScores[status].score = saveScore;
  7117  000C1E  501D               	movf	_status^0,w,c
  7118  000C20  D8FB               	call	PL8	;call to abstracted procedure
  7119  000C22  C01B  FFDF         	movff	_saveScore,indf2
  7120                           
  7121                           ;EEPROM.c: 244:             topScores[status].userNum = userNum;
  7122  000C26  501D               	movf	_status^0,w,c
  7123  000C28  0D02               	mullw	2
  7124  000C2A  D8E4               	call	PL4	;call to abstracted procedure
  7125  000C2C  C01E  FFDF         	movff	_userNum,indf2
  7126                           
  7127                           ;EEPROM.c: 245:             state = 22;
  7128  000C30  0E16               	movlw	22
  7129  000C32  6E1F               	movwf	_state@EEPROM$F1704^0,c
  7130                           
  7131                           ;EEPROM.c: 246:             break;
  7132  000C34  0C16               	retlw	22
  7133  000C36                     l5389:
  7134                           
  7135                           ;EEPROM.c: 248:             saveEEPROM(0x90 + status,saveScore);
  7136  000C36  C01B  F051         	movff	_saveScore,saveEEPROM@data
  7137  000C3A  501D               	movf	_status^0,w,c
  7138  000C3C  0F90               	addlw	144
  7139  000C3E  EC41  F00F         	call	_saveEEPROM
  7140                           
  7141                           ;EEPROM.c: 249:             saveState = 23;
  7142  000C42  0E17               	movlw	23
  7143  000C44  D738               	goto	L6
  7144  000C46                     l5395:
  7145                           
  7146                           ;EEPROM.c: 253:             saveEEPROM(0xA0 + status,userNum);
  7147  000C46  C01E  F051         	movff	_userNum,saveEEPROM@data
  7148  000C4A  501D               	movf	_status^0,w,c
  7149  000C4C  0FA0               	addlw	160
  7150  000C4E  EC41  F00F         	call	_saveEEPROM
  7151                           
  7152                           ;EEPROM.c: 254:             saveState = 0;
  7153  000C52  6A1A               	clrf	_saveState^0,c
  7154  000C54  D731               	goto	l899
  7155  000C56                     l5401:
  7156                           
  7157                           ;EEPROM.c: 258:             if (users[topScores[position].userNum].username[status] != '
      +                          \0'){
  7158  000C56  5020               	movf	_position^0,w,c
  7159  000C58  D8B6               	call	PL2	;call to abstracted procedure
  7160  000C5A  E006               	bz	l5407
  7161                           
  7162                           ;EEPROM.c: 259:                 LcPutChar(users[topScores[position].userNum].username[st
      +                          atus]);
  7163  000C5C  5020               	movf	_position^0,w,c
  7164  000C5E  D8B3               	call	PL2	;call to abstracted procedure
  7165  000C60  ECBC  F00E         	call	_LcPutChar
  7166  000C64                     l5405:
  7167                           
  7168                           ;EEPROM.c: 260:                 status++;
  7169  000C64  2A1D               	incf	_status^0,f,c
  7170                           
  7171                           ;EEPROM.c: 261:             } else {
  7172  000C66  0012               	return	
  7173  000C68                     l5407:
  7174                           
  7175                           ;EEPROM.c: 262:                 LcPutChar(':');
  7176  000C68  0E3A               	movlw	58
  7177  000C6A  ECBC  F00E         	call	_LcPutChar
  7178                           
  7179                           ;EEPROM.c: 263:                 state = 51;
  7180  000C6E  0E33               	movlw	51
  7181  000C70  6E1F               	movwf	_state@EEPROM$F1704^0,c
  7182                           
  7183                           ;EEPROM.c: 264:                 LcGotoXY(0,1);
  7184  000C72  D8ED               	call	PL54	;call to abstracted procedure
  7185  000C74  EC8F  F00E         	call	_LcGotoXY
  7186                           
  7187                           ;EEPROM.c: 265:                 status = 0;
  7188  000C78  6A1D               	clrf	_status^0,c
  7189  000C7A  0012               	return	
  7190  000C7C                     l5415:
  7191                           
  7192                           ;EEPROM.c: 269:             LcPutChar((topScores[position].score/10)+'0');
  7193  000C7C  0E0A               	movlw	10
  7194  000C7E  6E51               	movwf	___lbdiv@divisor^0,c
  7195  000C80  5020               	movf	_position^0,w,c
  7196  000C82  D8CA               	call	PL8	;call to abstracted procedure
  7197  000C84  50DF               	movf	indf2,w,c
  7198  000C86  EC5D  F00E         	call	___lbdiv
  7199  000C8A  0F30               	addlw	48
  7200  000C8C  ECBC  F00E         	call	_LcPutChar
  7201                           
  7202                           ;EEPROM.c: 270:             LcPutChar((topScores[position].score%10)+'0');
  7203  000C90  0E0A               	movlw	10
  7204  000C92  6E51               	movwf	___lbmod@divisor^0,c
  7205  000C94  5020               	movf	_position^0,w,c
  7206  000C96  D8C0               	call	PL8	;call to abstracted procedure
  7207  000C98  50DF               	movf	indf2,w,c
  7208  000C9A  ECE5  F00E         	call	___lbmod
  7209  000C9E  0F30               	addlw	48
  7210  000CA0  ECBC  F00E         	call	_LcPutChar
  7211                           
  7212                           ;EEPROM.c: 271:             LcGotoXY(16,0);
  7213  000CA4  0E00               	movlw	0
  7214  000CA6  6E59               	movwf	LcGotoXY@Row^0,c
  7215  000CA8  0E10               	movlw	16
  7216  000CAA  EC8F  F00E         	call	_LcGotoXY
  7217                           
  7218                           ;EEPROM.c: 272:             if (position == numScores){ position = 0;}
  7219  000CAE  5021               	movf	_numScores^0,w,c
  7220  000CB0  1820               	xorwf	_position^0,w,c
  7221  000CB2  E101               	bnz	l5421
  7222  000CB4  6A20               	clrf	_position^0,c
  7223  000CB6                     l5421:
  7224                           
  7225                           ;EEPROM.c: 273:             state = 52;
  7226  000CB6  0E34               	movlw	52
  7227  000CB8  6E1F               	movwf	_state@EEPROM$F1704^0,c
  7228                           
  7229                           ;EEPROM.c: 274:             break;
  7230  000CBA  0C34               	retlw	52
  7231  000CBC                     l5423:
  7232                           
  7233                           ;EEPROM.c: 276:             saveState = position+1 == numScores? 0:position+1;
  7234  000CBC  5021               	movf	_numScores^0,w,c
  7235  000CBE  6E5F               	movwf	??_dataMotor^0,c
  7236  000CC0  6A60               	clrf	(??_dataMotor+1)^0,c
  7237  000CC2  5020               	movf	_position^0,w,c
  7238  000CC4  6E61               	movwf	(??_dataMotor+2)^0,c
  7239  000CC6  6A62               	clrf	(??_dataMotor+3)^0,c
  7240  000CC8  2A61               	incf	(??_dataMotor+2)^0,f,c
  7241  000CCA  0E00               	movlw	0
  7242  000CCC  2262               	addwfc	(??_dataMotor+3)^0,f,c
  7243  000CCE  505F               	movf	??_dataMotor^0,w,c
  7244  000CD0  1861               	xorwf	(??_dataMotor+2)^0,w,c
  7245  000CD2  E103               	bnz	u4740
  7246  000CD4  5060               	movf	(??_dataMotor+1)^0,w,c
  7247  000CD6  1862               	xorwf	(??_dataMotor+3)^0,w,c
  7248  000CD8  E006               	bz	l937
  7249  000CDA                     u4740:
  7250  000CDA  2820               	incf	_position^0,w,c
  7251  000CDC  6E65               	movwf	_dataMotor$1730^0,c
  7252  000CDE  6A66               	clrf	(_dataMotor$1730+1)^0,c
  7253  000CE0  0E00               	movlw	0
  7254  000CE2  2266               	addwfc	(_dataMotor$1730+1)^0,f,c
  7255  000CE4  D002               	goto	l939
  7256  000CE6                     l937:
  7257  000CE6  6A65               	clrf	_dataMotor$1730^0,c
  7258  000CE8  6A66               	clrf	(_dataMotor$1730+1)^0,c
  7259  000CEA                     l939:
  7260  000CEA  C065  F01A         	movff	_dataMotor$1730,_saveState
  7261                           
  7262                           ;EEPROM.c: 277:             if (users[topScores[saveState].userNum].username[status] != 
      +                          '\0'){
  7263  000CEE  501A               	movf	_saveState^0,w,c
  7264  000CF0  D86A               	call	PL2	;call to abstracted procedure
  7265  000CF2  E005               	bz	l5433
  7266                           
  7267                           ;EEPROM.c: 278:                 LcPutChar(users[topScores[saveState].userNum].username[s
      +                          tatus]);
  7268  000CF4  501A               	movf	_saveState^0,w,c
  7269  000CF6  D867               	call	PL2	;call to abstracted procedure
  7270  000CF8  ECBC  F00E         	call	_LcPutChar
  7271  000CFC  D7B3               	goto	l5405
  7272  000CFE                     l5433:
  7273                           
  7274                           ;EEPROM.c: 281:                 LcPutChar(':');
  7275  000CFE  0E3A               	movlw	58
  7276  000D00  ECBC  F00E         	call	_LcPutChar
  7277                           
  7278                           ;EEPROM.c: 282:                 state = 53;
  7279  000D04  0E35               	movlw	53
  7280  000D06  6E1F               	movwf	_state@EEPROM$F1704^0,c
  7281                           
  7282                           ;EEPROM.c: 283:                 LcGotoXY(16,1);
  7283  000D08  0E01               	movlw	1
  7284  000D0A  6E59               	movwf	LcGotoXY@Row^0,c
  7285  000D0C  0E10               	movlw	16
  7286  000D0E  EF8F  F00E         	goto	_LcGotoXY
  7287  000D12                     l5439:
  7288                           
  7289                           ;EEPROM.c: 287:             LcPutChar((topScores[saveState].score/10)+'0');
  7290  000D12  0E0A               	movlw	10
  7291  000D14  6E51               	movwf	___lbdiv@divisor^0,c
  7292  000D16  501A               	movf	_saveState^0,w,c
  7293  000D18  D87F               	call	PL8	;call to abstracted procedure
  7294  000D1A  50DF               	movf	indf2,w,c
  7295  000D1C  EC5D  F00E         	call	___lbdiv
  7296  000D20  0F30               	addlw	48
  7297  000D22  ECBC  F00E         	call	_LcPutChar
  7298                           
  7299                           ;EEPROM.c: 288:             LcPutChar((topScores[saveState].score%10)+'0');
  7300  000D26  0E0A               	movlw	10
  7301  000D28  6E51               	movwf	___lbmod@divisor^0,c
  7302  000D2A  501A               	movf	_saveState^0,w,c
  7303  000D2C  D875               	call	PL8	;call to abstracted procedure
  7304  000D2E  50DF               	movf	indf2,w,c
  7305  000D30  ECE5  F00E         	call	___lbmod
  7306  000D34  0F30               	addlw	48
  7307  000D36  ECBC  F00E         	call	_LcPutChar
  7308  000D3A  D69C               	goto	l5275
  7309  000D3C                     l5445:
  7310  000D3C  501F               	movf	_state@EEPROM$F1704^0,w,c
  7311  000D3E  6E5F               	movwf	??_dataMotor^0,c
  7312  000D40  6A60               	clrf	(??_dataMotor+1)^0,c
  7313                           
  7314                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7315                           ; Switch size 1, requested type "space"
  7316                           ; Number of cases is 1, Range of values is 0 to 0
  7317                           ; switch strategies available:
  7318                           ; Name         Instructions Cycles
  7319                           ; simple_byte            4     3 (average)
  7320                           ;	Chosen strategy is simple_byte
  7321  000D42  5060               	movf	(??_dataMotor+1)^0,w,c
  7322  000D44  A4D8               	btfss	status,2,c
  7323  000D46  0012               	return	
  7324                           
  7325                           ; Switch size 1, requested type "space"
  7326                           ; Number of cases is 21, Range of values is 0 to 53
  7327                           ; switch strategies available:
  7328                           ; Name         Instructions Cycles
  7329                           ; simple_byte           64    33 (average)
  7330                           ;	Chosen strategy is simple_byte
  7331  000D48  505F               	movf	??_dataMotor^0,w,c
  7332  000D4A  B4D8               	btfsc	status,2,c
  7333  000D4C  0012               	return	
  7334  000D4E  0A01               	xorlw	1	; case 1
  7335  000D50  E101 D640          	bz	l5241
  7336  000D54  0A03               	xorlw	3	; case 2
  7337  000D56  E101 D64B          	bz	l5253
  7338  000D5A  0A01               	xorlw	1	; case 3
  7339  000D5C  E101 D66A          	bz	l5265
  7340  000D60  0A09               	xorlw	9	; case 10
  7341  000D62  E101 D689          	bz	l5277
  7342  000D66  0A01               	xorlw	1	; case 11
  7343  000D68  E101 D6A9          	bz	l900
  7344  000D6C  0A07               	xorlw	7	; case 12
  7345  000D6E  E101 D6AB          	bz	l5291
  7346  000D72  0A02               	xorlw	2	; case 14
  7347  000D74  E101 D6CC          	bz	l5303
  7348  000D78  0A01               	xorlw	1	; case 15
  7349  000D7A  E101 D6E1          	bz	l5319
  7350  000D7E  0A1F               	xorlw	31	; case 16
  7351  000D80  E101 D6FD          	bz	l5327
  7352  000D84  0A01               	xorlw	1	; case 17
  7353  000D86  E101 D70A          	bz	l5337
  7354  000D8A  0A03               	xorlw	3	; case 18
  7355  000D8C  E101 D715          	bz	l5345
  7356  000D90  0A01               	xorlw	1	; case 19
  7357  000D92  E101 D717          	bz	l5351
  7358  000D96  0A07               	xorlw	7	; case 20
  7359  000D98  E101 D720          	bz	l5361
  7360  000D9C  0A01               	xorlw	1	; case 21
  7361  000D9E  E101 D73E          	bz	l5385
  7362  000DA2  0A03               	xorlw	3	; case 22
  7363  000DA4  E101 D747          	bz	l5389
  7364  000DA8  0A01               	xorlw	1	; case 23
  7365  000DAA  E101 D74C          	bz	l5395
  7366  000DAE  0A25               	xorlw	37	; case 50
  7367  000DB0  E101 D751          	bz	l5401
  7368  000DB4  0A01               	xorlw	1	; case 51
  7369  000DB6  E101 D761          	bz	l5415
  7370  000DBA  0A07               	xorlw	7	; case 52
  7371  000DBC  E101 D77E          	bz	l5423
  7372  000DC0  0A01               	xorlw	1	; case 53
  7373  000DC2  E0A7               	bz	l5439
  7374  000DC4  0012               	return		;funcret
  7375  000DC6                     __end_of_dataMotor:
  7376                           	callstack 0
  7377  000DC6                     PL2:
  7378                           	callstack 24
  7379  000DC6  0D02               	mullw	2
  7380  000DC8  50F3               	movf	243,w,c
  7381  000DCA  0F02               	addlw	low (_topScores+1)
  7382  000DCC  6ED9               	movwf	fsr2l,c
  7383  000DCE  6ADA               	clrf	fsr2h,c
  7384  000DD0  50DF               	movf	indf2,w,c
  7385  000DD2  0D12               	mullw	18
  7386  000DD4  0E00               	movlw	low _users
  7387  000DD6  6E5F               	movwf	??_dataMotor^0,c
  7388  000DD8  0E01               	movlw	high _users
  7389  000DDA  6E60               	movwf	(??_dataMotor+1)^0,c
  7390  000DDC  50F3               	movf	243,w,c
  7391  000DDE  265F               	addwf	??_dataMotor^0,f,c
  7392  000DE0  50F4               	movf	244,w,c
  7393  000DE2  2260               	addwfc	(??_dataMotor+1)^0,f,c
  7394  000DE4  501D               	movf	_status^0,w,c
  7395  000DE6  245F               	addwf	??_dataMotor^0,w,c
  7396  000DE8  6ED9               	movwf	fsr2l,c
  7397  000DEA  0E00               	movlw	0
  7398  000DEC  2060               	addwfc	(??_dataMotor+1)^0,w,c
  7399  000DEE  6EDA               	movwf	fsr2h,c
  7400  000DF0  50DF               	movf	indf2,w,c
  7401  000DF2  0012               	return	
  7402  000DF4                     __end_ofPL2:
  7403                           	callstack 0
  7404  000DF4                     PL4:
  7405                           	callstack 26
  7406  000DF4  50F3               	movf	243,w,c
  7407  000DF6  0F02               	addlw	low (_topScores+1)
  7408  000DF8  6ED9               	movwf	fsr2l,c
  7409  000DFA  6ADA               	clrf	fsr2h,c
  7410  000DFC  0012               	return	
  7411  000DFE                     __end_ofPL4:
  7412                           	callstack 0
  7413  000DFE                     PL6:
  7414                           	callstack 24
  7415  000DFE  5020               	movf	_position^0,w,c
  7416  000E00  240B               	addwf	_mUser@EEPROM$F1707^0,w,c
  7417  000E02  6E5F               	movwf	??_dataMotor^0,c
  7418  000E04  0E00               	movlw	0
  7419  000E06  200C               	addwfc	(_mUser@EEPROM$F1707+1)^0,w,c
  7420  000E08  6E60               	movwf	(??_dataMotor+1)^0,c
  7421  000E0A  0E09               	movlw	9
  7422  000E0C  245F               	addwf	??_dataMotor^0,w,c
  7423  000E0E  6ED9               	movwf	fsr2l,c
  7424  000E10  0E00               	movlw	0
  7425  000E12  2060               	addwfc	(??_dataMotor+1)^0,w,c
  7426  000E14  6EDA               	movwf	fsr2h,c
  7427  000E16  0012               	return	
  7428  000E18                     __end_ofPL6:
  7429                           	callstack 0
  7430  000E18                     PL8:
  7431                           	callstack 26
  7432  000E18  0D02               	mullw	2
  7433  000E1A  50F3               	movf	243,w,c
  7434  000E1C  0F01               	addlw	low _topScores
  7435  000E1E  6ED9               	movwf	fsr2l,c
  7436  000E20  6ADA               	clrf	fsr2h,c
  7437  000E22  0012               	return	
  7438  000E24                     __end_ofPL8:
  7439                           	callstack 0
  7440  000E24                     PL14:
  7441                           	callstack 24
  7442  000E24  5020               	movf	_position^0,w,c
  7443  000E26  0D02               	mullw	2
  7444  000E28  50F3               	movf	243,w,c
  7445  000E2A  0F01               	addlw	low _topScores
  7446  000E2C  6EE1               	movwf	fsr1l,c
  7447  000E2E  6AE2               	clrf	fsr1h,c
  7448  000E30  0012               	return	
  7449  000E32                     __end_ofPL14:
  7450                           	callstack 0
  7451  000E32                     PL22:
  7452                           	callstack 24
  7453  000E32  5020               	movf	_position^0,w,c
  7454  000E34  240B               	addwf	_mUser@EEPROM$F1707^0,w,c
  7455  000E36  6ED9               	movwf	fsr2l,c
  7456  000E38  0E00               	movlw	0
  7457  000E3A  200C               	addwfc	(_mUser@EEPROM$F1707+1)^0,w,c
  7458  000E3C  6EDA               	movwf	fsr2h,c
  7459  000E3E  0012               	return	
  7460  000E40                     __end_ofPL22:
  7461                           	callstack 0
  7462  000E40                     PL46:
  7463                           	callstack 24
  7464  000E40  50DF               	movf	indf2,w,c
  7465  000E42  6E51               	movwf	saveEEPROM@data^0,c
  7466  000E44  501C               	movf	_lastUserPointer^0,w,c
  7467  000E46  0D10               	mullw	16
  7468  000E48  50F3               	movf	243,w,c
  7469  000E4A  2420               	addwf	_position^0,w,c
  7470  000E4C  0012               	return	
  7471  000E4E                     __end_ofPL46:
  7472                           	callstack 0
  7473  000E4E                     PL54:
  7474                           	callstack 23
  7475  000E4E  0E01               	movlw	1
  7476  000E50  6E59               	movwf	LcGotoXY@Row^0,c
  7477  000E52  0C00               	retlw	0
  7478  000E54                     __end_ofPL54:
  7479                           	callstack 0
  7480  000E54                     PL78:
  7481                           	callstack 24
  7482  000E54  C021  F051         	movff	_numScores,saveEEPROM@data
  7483  000E58  0CFE               	retlw	254
  7484  000E5A                     __end_ofPL78:
  7485                           	callstack 0
  7486                           
  7487 ;; *************** function _saveEEPROM *****************
  7488 ;; Defined at:
  7489 ;;		line 354 in file "EEPROM.c"
  7490 ;; Parameters:    Size  Location     Type
  7491 ;;  ad              1    wreg     unsigned char 
  7492 ;;  data            1    5[COMRAM] unsigned char 
  7493 ;; Auto vars:     Size  Location     Type
  7494 ;;  ad              1    6[COMRAM] unsigned char 
  7495 ;; Return value:  Size  Location     Type
  7496 ;;                  1    wreg      void 
  7497 ;; Registers used:
  7498 ;;		wreg, status,2
  7499 ;; Tracked objects:
  7500 ;;		On entry : 0/0
  7501 ;;		On exit  : 0/0
  7502 ;;		Unchanged: 0/0
  7503 ;; Data sizes:     COMRAM   BANK0   BANK1
  7504 ;;      Params:         1       0       0
  7505 ;;      Locals:         1       0       0
  7506 ;;      Temps:          0       0       0
  7507 ;;      Totals:         2       0       0
  7508 ;;Total ram usage:        2 bytes
  7509 ;; Hardware stack levels used: 1
  7510 ;; Hardware stack levels required when called: 2
  7511 ;; This function calls:
  7512 ;;		Nothing
  7513 ;; This function is called by:
  7514 ;;		_dataMotor
  7515 ;; This function uses a non-reentrant model
  7516 ;;
  7517                           
  7518                           	psect	text59
  7519  001E82                     __ptext59:
  7520                           	callstack 0
  7521  001E82                     _saveEEPROM:
  7522                           	callstack 27
  7523                           
  7524                           ;incstack = 0
  7525                           ;saveEEPROM@ad stored from wreg
  7526  001E82  6E52               	movwf	saveEEPROM@ad^0,c
  7527                           
  7528                           ;EEPROM.c: 355:     EEADR = ad;
  7529  001E84  C052  FFA9         	movff	saveEEPROM@ad,4009	;volatile
  7530                           
  7531                           ;EEPROM.c: 356:     EEDATA = data;
  7532  001E88  C051  FFA8         	movff	saveEEPROM@data,4008	;volatile
  7533                           
  7534                           ;EEPROM.c: 357:     EECON1bits.EEPGD = 0;
  7535  001E8C  9EA6               	bcf	166,7,c	;volsfr
  7536                           
  7537                           ;EEPROM.c: 358:     EECON1bits.CFGS = 0;
  7538  001E8E  9CA6               	bcf	166,6,c	;volsfr
  7539                           
  7540                           ;EEPROM.c: 359:     EECON1bits.WREN = 1;
  7541  001E90  84A6               	bsf	166,2,c	;volsfr
  7542                           
  7543                           ;EEPROM.c: 360:     INTCONbits.GIE = 0;
  7544  001E92  9EF2               	bcf	242,7,c	;volatile
  7545                           
  7546                           ;EEPROM.c: 361:     EECON2 = 0x55;
  7547  001E94  0E55               	movlw	85
  7548  001E96  6EA7               	movwf	167,c	;volsfr
  7549                           
  7550                           ;EEPROM.c: 362:     EECON2 = 0xAA;
  7551  001E98  0EAA               	movlw	170
  7552  001E9A  6EA7               	movwf	167,c	;volsfr
  7553                           
  7554                           ;EEPROM.c: 363:     EECON1bits.WR = 1;
  7555  001E9C  82A6               	bsf	166,1,c	;volsfr
  7556                           
  7557                           ;EEPROM.c: 364:     INTCONbits.GIE = 1;
  7558  001E9E  8EF2               	bsf	242,7,c	;volatile
  7559                           
  7560                           ;EEPROM.c: 365:     EECON1bits.WREN = 0;
  7561  001EA0  94A6               	bcf	166,2,c	;volsfr
  7562  001EA2  0CAA               	retlw	170	;funcret
  7563  001EA4                     __end_of_saveEEPROM:
  7564                           	callstack 0
  7565                           
  7566 ;; *************** function ___lbmod *****************
  7567 ;; Defined at:
  7568 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\lbmod.c"
  7569 ;; Parameters:    Size  Location     Type
  7570 ;;  dividend        1    wreg     unsigned char 
  7571 ;;  divisor         1    5[COMRAM] unsigned char 
  7572 ;; Auto vars:     Size  Location     Type
  7573 ;;  dividend        1    6[COMRAM] unsigned char 
  7574 ;;  rem             1    8[COMRAM] unsigned char 
  7575 ;;  counter         1    7[COMRAM] unsigned char 
  7576 ;; Return value:  Size  Location     Type
  7577 ;;                  1    wreg      unsigned char 
  7578 ;; Registers used:
  7579 ;;		wreg, status,2, status,0
  7580 ;; Tracked objects:
  7581 ;;		On entry : 0/0
  7582 ;;		On exit  : 0/0
  7583 ;;		Unchanged: 0/0
  7584 ;; Data sizes:     COMRAM   BANK0   BANK1
  7585 ;;      Params:         1       0       0
  7586 ;;      Locals:         3       0       0
  7587 ;;      Temps:          0       0       0
  7588 ;;      Totals:         4       0       0
  7589 ;;Total ram usage:        4 bytes
  7590 ;; Hardware stack levels used: 1
  7591 ;; Hardware stack levels required when called: 2
  7592 ;; This function calls:
  7593 ;;		Nothing
  7594 ;; This function is called by:
  7595 ;;		_menuMotor
  7596 ;;		_dataMotor
  7597 ;;		_DaSaveScore
  7598 ;;		_timeMotor
  7599 ;; This function uses a non-reentrant model
  7600 ;;
  7601                           
  7602                           	psect	text60
  7603  001DCA                     __ptext60:
  7604                           	callstack 0
  7605  001DCA                     ___lbmod:
  7606                           	callstack 27
  7607                           
  7608                           ;incstack = 0
  7609                           ;___lbmod@dividend stored from wreg
  7610  001DCA  6E52               	movwf	___lbmod@dividend^0,c
  7611  001DCC  0E08               	movlw	8
  7612  001DCE  6E53               	movwf	___lbmod@counter^0,c
  7613  001DD0  6A54               	clrf	___lbmod@rem^0,c
  7614  001DD2                     l4077:
  7615  001DD2  90D8               	bcf	status,0,c
  7616  001DD4  3452               	rlcf	___lbmod@dividend^0,w,c
  7617  001DD6  3454               	rlcf	___lbmod@rem^0,w,c
  7618  001DD8  6E54               	movwf	___lbmod@rem^0,c
  7619  001DDA  90D8               	bcf	status,0,c
  7620  001DDC  3652               	rlcf	___lbmod@dividend^0,f,c
  7621  001DDE  5051               	movf	___lbmod@divisor^0,w,c
  7622  001DE0  5C54               	subwf	___lbmod@rem^0,w,c
  7623  001DE2  E302               	bnc	l4085
  7624  001DE4  5051               	movf	___lbmod@divisor^0,w,c
  7625  001DE6  5E54               	subwf	___lbmod@rem^0,f,c
  7626  001DE8                     l4085:
  7627  001DE8  2E53               	decfsz	___lbmod@counter^0,f,c
  7628  001DEA  D7F3               	goto	l4077
  7629  001DEC  5054               	movf	___lbmod@rem^0,w,c
  7630  001DEE  0012               	return		;funcret
  7631  001DF0                     __end_of___lbmod:
  7632                           	callstack 0
  7633                           
  7634 ;; *************** function ___lbdiv *****************
  7635 ;; Defined at:
  7636 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\lbdiv.c"
  7637 ;; Parameters:    Size  Location     Type
  7638 ;;  dividend        1    wreg     unsigned char 
  7639 ;;  divisor         1    5[COMRAM] unsigned char 
  7640 ;; Auto vars:     Size  Location     Type
  7641 ;;  dividend        1    6[COMRAM] unsigned char 
  7642 ;;  quotient        1    8[COMRAM] unsigned char 
  7643 ;;  counter         1    7[COMRAM] unsigned char 
  7644 ;; Return value:  Size  Location     Type
  7645 ;;                  1    wreg      unsigned char 
  7646 ;; Registers used:
  7647 ;;		wreg, status,2, status,0
  7648 ;; Tracked objects:
  7649 ;;		On entry : 0/0
  7650 ;;		On exit  : 0/0
  7651 ;;		Unchanged: 0/0
  7652 ;; Data sizes:     COMRAM   BANK0   BANK1
  7653 ;;      Params:         1       0       0
  7654 ;;      Locals:         3       0       0
  7655 ;;      Temps:          0       0       0
  7656 ;;      Totals:         4       0       0
  7657 ;;Total ram usage:        4 bytes
  7658 ;; Hardware stack levels used: 1
  7659 ;; Hardware stack levels required when called: 2
  7660 ;; This function calls:
  7661 ;;		Nothing
  7662 ;; This function is called by:
  7663 ;;		_menuMotor
  7664 ;;		_dataMotor
  7665 ;;		_DaSaveScore
  7666 ;;		_timeMotor
  7667 ;; This function uses a non-reentrant model
  7668 ;;
  7669                           
  7670                           	psect	text61
  7671  001CBA                     __ptext61:
  7672                           	callstack 0
  7673  001CBA                     ___lbdiv:
  7674                           	callstack 27
  7675                           
  7676                           ;incstack = 0
  7677                           ;___lbdiv@dividend stored from wreg
  7678  001CBA  6E52               	movwf	___lbdiv@dividend^0,c
  7679  001CBC  6A54               	clrf	___lbdiv@quotient^0,c
  7680  001CBE  5051               	movf	___lbdiv@divisor^0,w,c
  7681  001CC0  E014               	bz	l4069
  7682  001CC2  0E01               	movlw	1
  7683  001CC4  6E53               	movwf	___lbdiv@counter^0,c
  7684  001CC6  D003               	goto	l4057
  7685  001CC8                     l4053:
  7686  001CC8  90D8               	bcf	status,0,c
  7687  001CCA  3651               	rlcf	___lbdiv@divisor^0,f,c
  7688  001CCC  2A53               	incf	___lbdiv@counter^0,f,c
  7689  001CCE                     l4057:
  7690  001CCE  AE51               	btfss	___lbdiv@divisor^0,7,c
  7691  001CD0  D7FB               	goto	l4053
  7692  001CD2                     u2990:
  7693  001CD2  90D8               	bcf	status,0,c
  7694  001CD4  3654               	rlcf	___lbdiv@quotient^0,f,c
  7695  001CD6  5051               	movf	___lbdiv@divisor^0,w,c
  7696  001CD8  5C52               	subwf	___lbdiv@dividend^0,w,c
  7697  001CDA  E303               	bnc	l4065
  7698  001CDC  5051               	movf	___lbdiv@divisor^0,w,c
  7699  001CDE  5E52               	subwf	___lbdiv@dividend^0,f,c
  7700  001CE0  8054               	bsf	___lbdiv@quotient^0,0,c
  7701  001CE2                     l4065:
  7702  001CE2  90D8               	bcf	status,0,c
  7703  001CE4  3251               	rrcf	___lbdiv@divisor^0,f,c
  7704  001CE6  2E53               	decfsz	___lbdiv@counter^0,f,c
  7705  001CE8  D7F4               	goto	u2990
  7706  001CEA                     l4069:
  7707  001CEA  5054               	movf	___lbdiv@quotient^0,w,c
  7708  001CEC  0012               	return		;funcret
  7709  001CEE                     __end_of___lbdiv:
  7710                           	callstack 0
  7711                           
  7712 ;; *************** function _LcPutChar *****************
  7713 ;; Defined at:
  7714 ;;		line 154 in file "LcTLCD.c"
  7715 ;; Parameters:    Size  Location     Type
  7716 ;;  c               1    wreg     unsigned char 
  7717 ;; Auto vars:     Size  Location     Type
  7718 ;;  c               1   18[COMRAM] unsigned char 
  7719 ;; Return value:  Size  Location     Type
  7720 ;;                  1    wreg      void 
  7721 ;; Registers used:
  7722 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7723 ;; Tracked objects:
  7724 ;;		On entry : 0/0
  7725 ;;		On exit  : 0/0
  7726 ;;		Unchanged: 0/0
  7727 ;; Data sizes:     COMRAM   BANK0   BANK1
  7728 ;;      Params:         0       0       0
  7729 ;;      Locals:         1       0       0
  7730 ;;      Temps:          0       0       0
  7731 ;;      Totals:         1       0       0
  7732 ;;Total ram usage:        1 bytes
  7733 ;; Hardware stack levels used: 1
  7734 ;; Hardware stack levels required when called: 5
  7735 ;; This function calls:
  7736 ;;		_CantaData
  7737 ;;		_LcGotoXY
  7738 ;;		_WaitForBusy
  7739 ;; This function is called by:
  7740 ;;		_menuMotor
  7741 ;;		_displayString
  7742 ;;		_mainMenu
  7743 ;;		_displayError
  7744 ;;		_displayResults
  7745 ;;		_displayLogOut
  7746 ;;		_dataMotor
  7747 ;;		_DaSaveScore
  7748 ;;		_timeMotor
  7749 ;;		_sendChar
  7750 ;; This function uses a non-reentrant model
  7751 ;;
  7752                           
  7753                           	psect	text62
  7754  001D78                     __ptext62:
  7755                           	callstack 0
  7756  001D78                     _LcPutChar:
  7757                           	callstack 23
  7758                           
  7759                           ;incstack = 0
  7760                           ;LcPutChar@c stored from wreg
  7761  001D78  6E5E               	movwf	LcPutChar@c^0,c
  7762                           
  7763                           ;LcTLCD.c: 164:  WaitForBusy(); CantaData(c);
  7764  001D7A  ECEE  F00D         	call	_WaitForBusy	;wreg free
  7765  001D7E  505E               	movf	LcPutChar@c^0,w,c
  7766  001D80  EC0D  F00E         	call	_CantaData
  7767                           
  7768                           ;LcTLCD.c: 166:  ++ColumnAct;
  7769  001D84  2A3F               	incf	_ColumnAct^0,f,c
  7770                           
  7771                           ;LcTLCD.c: 168:     if (ColumnAct >= 40) {
  7772  001D86  0E27               	movlw	39
  7773  001D88  643F               	cpfsgt	_ColumnAct^0,c
  7774  001D8A  0C27               	retlw	39
  7775                           
  7776                           ;LcTLCD.c: 169:         ColumnAct = 0;
  7777  001D8C  6A3F               	clrf	_ColumnAct^0,c
  7778                           
  7779                           ;LcTLCD.c: 170:   if (++RowAct >= 2) RowAct = 0;
  7780  001D8E  2A40               	incf	_RowAct^0,f,c
  7781  001D90  0E01               	movlw	1
  7782  001D92  6440               	cpfsgt	_RowAct^0,c
  7783  001D94  D001               	goto	l3995
  7784  001D96  6A40               	clrf	_RowAct^0,c
  7785  001D98                     l3995:
  7786                           
  7787                           ;LcTLCD.c: 171:   LcGotoXY(ColumnAct, RowAct);
  7788  001D98  C040  F059         	movff	_RowAct,LcGotoXY@Row
  7789  001D9C  503F               	movf	_ColumnAct^0,w,c
  7790  001D9E  EF8F  F00E         	goto	_LcGotoXY
  7791  001DA2                     __end_of_LcPutChar:
  7792                           	callstack 0
  7793                           
  7794 ;; *************** function _LcGotoXY *****************
  7795 ;; Defined at:
  7796 ;;		line 126 in file "LcTLCD.c"
  7797 ;; Parameters:    Size  Location     Type
  7798 ;;  Column          1    wreg     unsigned char 
  7799 ;;  Row             1   13[COMRAM] unsigned char 
  7800 ;; Auto vars:     Size  Location     Type
  7801 ;;  Column          1   17[COMRAM] unsigned char 
  7802 ;;  Fisics          1   16[COMRAM] unsigned char 
  7803 ;; Return value:  Size  Location     Type
  7804 ;;                  1    wreg      void 
  7805 ;; Registers used:
  7806 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7807 ;; Tracked objects:
  7808 ;;		On entry : 0/0
  7809 ;;		On exit  : 0/0
  7810 ;;		Unchanged: 0/0
  7811 ;; Data sizes:     COMRAM   BANK0   BANK1
  7812 ;;      Params:         1       0       0
  7813 ;;      Locals:         4       0       0
  7814 ;;      Temps:          0       0       0
  7815 ;;      Totals:         5       0       0
  7816 ;;Total ram usage:        5 bytes
  7817 ;; Hardware stack levels used: 1
  7818 ;; Hardware stack levels required when called: 4
  7819 ;; This function calls:
  7820 ;;		_CantaIR
  7821 ;;		_WaitForBusy
  7822 ;; This function is called by:
  7823 ;;		_LcPutChar
  7824 ;;		_menuMotor
  7825 ;;		_nextRow
  7826 ;;		_dataMotor
  7827 ;;		_DaFindUser
  7828 ;;		_timeMotor
  7829 ;;		_startTimer
  7830 ;;		_displayTimeRemaining
  7831 ;;		_displaySysTime
  7832 ;; This function uses a non-reentrant model
  7833 ;;
  7834                           
  7835                           	psect	text63
  7836  001D1E                     __ptext63:
  7837                           	callstack 0
  7838  001D1E                     _LcGotoXY:
  7839                           	callstack 23
  7840                           
  7841                           ;incstack = 0
  7842                           ;LcGotoXY@Column stored from wreg
  7843  001D1E  6E5D               	movwf	LcGotoXY@Column^0,c
  7844                           
  7845                           ;LcTLCD.c: 130:  char Fisics;;LcTLCD.c: 132:  Fisics = Column + (!Row ? 0 : 0x40);
  7846  001D20  5059               	movf	LcGotoXY@Row^0,w,c
  7847  001D22  E004               	bz	l274
  7848  001D24  6A5B               	clrf	(_LcGotoXY$795+1)^0,c
  7849  001D26  0E40               	movlw	64
  7850  001D28  6E5A               	movwf	_LcGotoXY$795^0,c
  7851  001D2A  D002               	goto	l3927
  7852  001D2C                     l274:
  7853  001D2C  6A5A               	clrf	_LcGotoXY$795^0,c
  7854  001D2E  6A5B               	clrf	(_LcGotoXY$795+1)^0,c
  7855  001D30                     l3927:
  7856  001D30  505D               	movf	LcGotoXY@Column^0,w,c
  7857  001D32  245A               	addwf	_LcGotoXY$795^0,w,c
  7858  001D34  6E5C               	movwf	LcGotoXY@Fisics^0,c
  7859                           
  7860                           ;LcTLCD.c: 147:  WaitForBusy();
  7861  001D36  ECEE  F00D         	call	_WaitForBusy	;wreg free
  7862                           
  7863                           ;LcTLCD.c: 148:  CantaIR(0x80 | Fisics);
  7864  001D3A  505C               	movf	LcGotoXY@Fisics^0,w,c
  7865  001D3C  0980               	iorlw	128
  7866  001D3E  ECBF  F00F         	call	_CantaIR
  7867                           
  7868                           ;LcTLCD.c: 150:  RowAct = Row;
  7869  001D42  C059  F040         	movff	LcGotoXY@Row,_RowAct
  7870                           
  7871                           ;LcTLCD.c: 151:  ColumnAct = Column;
  7872  001D46  C05D  F03F         	movff	LcGotoXY@Column,_ColumnAct
  7873  001D4A  0012               	return		;funcret
  7874  001D4C                     __end_of_LcGotoXY:
  7875                           	callstack 0
  7876                           
  7877 ;; *************** function _CantaData *****************
  7878 ;; Defined at:
  7879 ;;		line 246 in file "LcTLCD.c"
  7880 ;; Parameters:    Size  Location     Type
  7881 ;;  Data            1    wreg     unsigned char 
  7882 ;; Auto vars:     Size  Location     Type
  7883 ;;  Data            1    7[COMRAM] unsigned char 
  7884 ;; Return value:  Size  Location     Type
  7885 ;;                  1    wreg      void 
  7886 ;; Registers used:
  7887 ;;		wreg, status,2, status,0, cstack
  7888 ;; Tracked objects:
  7889 ;;		On entry : 0/0
  7890 ;;		On exit  : 0/0
  7891 ;;		Unchanged: 0/0
  7892 ;; Data sizes:     COMRAM   BANK0   BANK1
  7893 ;;      Params:         0       0       0
  7894 ;;      Locals:         1       0       0
  7895 ;;      Temps:          0       0       0
  7896 ;;      Totals:         1       0       0
  7897 ;;Total ram usage:        1 bytes
  7898 ;; Hardware stack levels used: 1
  7899 ;; Hardware stack levels required when called: 3
  7900 ;; This function calls:
  7901 ;;		_CantaPartAlta
  7902 ;;		_CantaPartBaixa
  7903 ;; This function is called by:
  7904 ;;		_LcPutChar
  7905 ;; This function uses a non-reentrant model
  7906 ;;
  7907                           
  7908                           	psect	text64
  7909  001C1A                     __ptext64:
  7910                           	callstack 0
  7911  001C1A                     _CantaData:
  7912                           	callstack 24
  7913                           
  7914                           ;incstack = 0
  7915                           ;CantaData@Data stored from wreg
  7916  001C1A  6E53               	movwf	CantaData@Data^0,c
  7917                           
  7918                           ;LcTLCD.c: 247:  (TRISDbits.TRISD0 = TRISDbits.TRISD1 = TRISDbits.TRISD2 = TRISDbits.TRI
      +                          SD3 = 0);
  7919  001C1C  9695               	bcf	149,3,c	;volatile
  7920  001C1E  9495               	bcf	149,2,c	;volatile
  7921  001C20  9295               	bcf	149,1,c	;volatile
  7922  001C22  9095               	bcf	149,0,c	;volatile
  7923                           
  7924                           ;LcTLCD.c: 248:  (LATDbits.LATD4 = 1);
  7925  001C24  888C               	bsf	140,4,c	;volatile
  7926                           
  7927                           ;LcTLCD.c: 249:  (LATDbits.LATD5 = 0);
  7928  001C26  9A8C               	bcf	140,5,c	;volatile
  7929                           
  7930                           ;LcTLCD.c: 250:  (LATDbits.LATD6 = 1);
  7931  001C28  8C8C               	bsf	140,6,c	;volatile
  7932                           
  7933                           ;LcTLCD.c: 251:  CantaPartAlta(Data);
  7934  001C2A  5053               	movf	CantaData@Data^0,w,c
  7935  001C2C  ECF2  F00C         	call	_CantaPartAlta
  7936                           
  7937                           ;LcTLCD.c: 252:  (LATDbits.LATD6 = 1);
  7938                           
  7939                           ;LcTLCD.c: 253:  (LATDbits.LATD6 = 0);
  7940                           
  7941                           ;LcTLCD.c: 254:  (LATDbits.LATD6 = 0);
  7942                           
  7943                           ;LcTLCD.c: 255:  (LATDbits.LATD6 = 1);
  7944  001C30  D80B               	call	PL66	;call to abstracted procedure
  7945                           
  7946                           ;LcTLCD.c: 256:  CantaPartBaixa(Data);
  7947  001C32  5053               	movf	CantaData@Data^0,w,c
  7948  001C34  ECBF  F00C         	call	_CantaPartBaixa
  7949                           
  7950                           ;LcTLCD.c: 257:  (LATDbits.LATD6 = 1);
  7951                           
  7952                           ;LcTLCD.c: 258:  (LATDbits.LATD6 = 0);
  7953                           
  7954                           ;LcTLCD.c: 259:  (TRISDbits.TRISD0 = TRISDbits.TRISD1 = TRISDbits.TRISD2 = TRISDbits.TRI
      +                          SD3 = 1);
  7955  001C38  D000               	goto	PL38	;call to abstracted procedure
  7956  001C3A                     __end_of_CantaData:
  7957                           	callstack 0
  7958  001C3A                     PL38:
  7959                           	callstack 23
  7960  001C3A  8C8C               	bsf	140,6,c	;volatile
  7961  001C3C  9C8C               	bcf	140,6,c	;volatile
  7962  001C3E  8695               	bsf	149,3,c	;volatile
  7963  001C40  8495               	bsf	149,2,c	;volatile
  7964  001C42  8295               	bsf	149,1,c	;volatile
  7965  001C44  8095               	bsf	149,0,c	;volatile
  7966  001C46  0012               	return		;funcret
  7967  001C48                     __end_ofPL38:
  7968                           	callstack 0
  7969  001C48                     PL66:
  7970                           	callstack 23
  7971  001C48  8C8C               	bsf	140,6,c	;volatile
  7972  001C4A  9C8C               	bcf	140,6,c	;volatile
  7973  001C4C  9C8C               	bcf	140,6,c	;volatile
  7974  001C4E  8C8C               	bsf	140,6,c	;volatile
  7975  001C50  0012               	return	
  7976  001C52                     __end_ofPL66:
  7977                           	callstack 0
  7978                           
  7979 ;; *************** function _btMotor *****************
  7980 ;; Defined at:
  7981 ;;		line 53 in file "SIO.c"
  7982 ;; Parameters:    Size  Location     Type
  7983 ;;		None
  7984 ;; Auto vars:     Size  Location     Type
  7985 ;;		None
  7986 ;; Return value:  Size  Location     Type
  7987 ;;                  1    wreg      void 
  7988 ;; Registers used:
  7989 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7990 ;; Tracked objects:
  7991 ;;		On entry : 0/0
  7992 ;;		On exit  : 0/0
  7993 ;;		Unchanged: 0/0
  7994 ;; Data sizes:     COMRAM   BANK0   BANK1
  7995 ;;      Params:         0       0       0
  7996 ;;      Locals:         0       0       0
  7997 ;;      Temps:          3       0       0
  7998 ;;      Totals:         3       0       0
  7999 ;;Total ram usage:        3 bytes
  8000 ;; Hardware stack levels used: 1
  8001 ;; Hardware stack levels required when called: 3
  8002 ;; This function calls:
  8003 ;;		_SiIsAvailable
  8004 ;;		_SiSendChar
  8005 ;;		_TiGetTics
  8006 ;;		_TiResetTics
  8007 ;; This function is called by:
  8008 ;;		_main
  8009 ;; This function uses a non-reentrant model
  8010 ;;
  8011                           
  8012                           	psect	text65
  8013  00118A                     __ptext65:
  8014                           	callstack 0
  8015  00118A                     _btMotor:
  8016                           	callstack 27
  8017                           
  8018                           ;SIO.c: 54:     switch (stateRX){
  8019                           
  8020                           ;incstack = 0
  8021  00118A  D038               	goto	l5657
  8022  00118C                     l792:
  8023                           
  8024                           ;SIO.c: 56:             if (!PORTCbits.RC5){
  8025  00118C  BA82               	btfsc	130,5,c	;volatile
  8026  00118E  D086               	goto	l5689
  8027                           
  8028                           ;SIO.c: 58:                 TiResetTics(timerRX);
  8029  001190  5029               	movf	_timerRX^0,w,c
  8030  001192  EC92  F00F         	call	_TiResetTics
  8031                           
  8032                           ;SIO.c: 59:                 dataRX =0;
  8033  001196  6A28               	clrf	_dataRX^0,c
  8034                           
  8035                           ;SIO.c: 60:                 counterRX = 0;
  8036  001198  6A27               	clrf	_counterRX^0,c
  8037                           
  8038                           ;SIO.c: 61:                 stateRX = 1;
  8039  00119A  0E01               	movlw	1
  8040  00119C  D018               	goto	L7
  8041  00119E                     l5627:
  8042                           
  8043                           ;SIO.c: 65:             if (TiGetTics(timerRX) >= 1){
  8044  00119E  5029               	movf	_timerRX^0,w,c
  8045  0011A0  ECF8  F00E         	call	_TiGetTics
  8046  0011A4  BE52               	btfsc	(?_TiGetTics+1)^0,7,c
  8047  0011A6  D07A               	goto	l5689
  8048  0011A8  5052               	movf	(?_TiGetTics+1)^0,w,c
  8049  0011AA  E102               	bnz	u4960
  8050  0011AC  0451               	decf	?_TiGetTics^0,w,c
  8051  0011AE  E376               	bnc	l5689
  8052  0011B0                     u4960:
  8053                           
  8054                           ;SIO.c: 66:                 if(PORTCbits.RC5){
  8055  0011B0  AA82               	btfss	130,5,c	;volatile
  8056  0011B2  D002               	goto	l5633
  8057                           
  8058                           ;SIO.c: 67:                     dataRX = dataRX | 0x80;
  8059  0011B4  8E28               	bsf	_dataRX^0,7,c
  8060                           
  8061                           ;SIO.c: 68:                 }else {
  8062  0011B6  D001               	goto	l5635
  8063  0011B8                     l5633:
  8064                           
  8065                           ;SIO.c: 69:                     dataRX = dataRX & 0x7F;
  8066  0011B8  9E28               	bcf	_dataRX^0,7,c
  8067  0011BA                     l5635:
  8068                           
  8069                           ;SIO.c: 71:                 dataRX = (dataRX >>1);
  8070  0011BA  90D8               	bcf	status,0,c
  8071  0011BC  3228               	rrcf	_dataRX^0,f,c
  8072                           
  8073                           ;SIO.c: 72:                 TiResetTics(timerRX);
  8074  0011BE  5029               	movf	_timerRX^0,w,c
  8075  0011C0  EC92  F00F         	call	_TiResetTics
  8076                           
  8077                           ;SIO.c: 73:                 counterRX++;
  8078  0011C4  2A27               	incf	_counterRX^0,f,c
  8079                           
  8080                           ;SIO.c: 74:                 if (counterRX == 8){
  8081  0011C6  0E08               	movlw	8
  8082  0011C8  1827               	xorwf	_counterRX^0,w,c
  8083  0011CA  E168               	bnz	l5689
  8084                           
  8085                           ;SIO.c: 75:                     stateRX = 2;
  8086  0011CC  0E02               	movlw	2
  8087  0011CE                     L7:
  8088  0011CE  6E2A               	movwf	_stateRX^0,c
  8089  0011D0  D065               	goto	l5689
  8090  0011D2                     l5645:
  8091                           
  8092                           ;SIO.c: 80:             if(TiGetTics(timerRX) >= 24){
  8093  0011D2  5029               	movf	_timerRX^0,w,c
  8094  0011D4  ECF8  F00E         	call	_TiGetTics
  8095  0011D8  BE52               	btfsc	(?_TiGetTics+1)^0,7,c
  8096  0011DA  D060               	goto	l5689
  8097  0011DC  5052               	movf	(?_TiGetTics+1)^0,w,c
  8098  0011DE  E103               	bnz	u4990
  8099  0011E0  0E18               	movlw	24
  8100  0011E2  5C51               	subwf	?_TiGetTics^0,w,c
  8101  0011E4  E35B               	bnc	l5689
  8102  0011E6                     u4990:
  8103                           
  8104                           ;SIO.c: 81:                 if (allowed && SiIsAvailable()){
  8105  0011E6  5022               	movf	_allowed^0,w,c
  8106  0011E8  E007               	bz	l5653
  8107  0011EA  ECBE  F000         	call	_SiIsAvailable	;wreg free
  8108  0011EE  0900               	iorlw	0
  8109  0011F0  E003               	bz	l5653
  8110                           
  8111                           ;SIO.c: 82:                     SiSendChar(dataRX);
  8112  0011F2  5028               	movf	_dataRX^0,w,c
  8113  0011F4  ECB4  F000         	call	_SiSendChar
  8114  0011F8                     l5653:
  8115                           
  8116                           ;SIO.c: 88:                 stateRX=0;
  8117  0011F8  6A2A               	clrf	_stateRX^0,c
  8118  0011FA  D050               	goto	l5689
  8119  0011FC                     l5657:
  8120  0011FC  502A               	movf	_stateRX^0,w,c
  8121  0011FE  6E58               	movwf	??_btMotor^0,c
  8122  001200  6A59               	clrf	(??_btMotor+1)^0,c
  8123                           
  8124                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  8125                           ; Switch size 1, requested type "space"
  8126                           ; Number of cases is 1, Range of values is 0 to 0
  8127                           ; switch strategies available:
  8128                           ; Name         Instructions Cycles
  8129                           ; simple_byte            4     3 (average)
  8130                           ;	Chosen strategy is simple_byte
  8131  001202  5059               	movf	(??_btMotor+1)^0,w,c
  8132  001204  E14B               	bnz	l5689
  8133                           
  8134                           ; Switch size 1, requested type "space"
  8135                           ; Number of cases is 3, Range of values is 0 to 2
  8136                           ; switch strategies available:
  8137                           ; Name         Instructions Cycles
  8138                           ; simple_byte           10     6 (average)
  8139                           ;	Chosen strategy is simple_byte
  8140  001206  5058               	movf	??_btMotor^0,w,c
  8141  001208  E0C1               	bz	l792
  8142  00120A  0A01               	xorlw	1	; case 1
  8143  00120C  E0C8               	bz	l5627
  8144  00120E  0A03               	xorlw	3	; case 2
  8145  001210  E0E0               	bz	l5645
  8146                           
  8147                           ;SIO.c: 94:     switch (stateTX){
  8148  001212  D044               	goto	l5689
  8149  001214                     l804:
  8150                           
  8151                           ;SIO.c: 97:             LATCbits.LATC4 = 1;
  8152  001214  888B               	bsf	139,4,c	;volatile
  8153                           
  8154                           ;SIO.c: 98:             counterTX = 0;
  8155  001216  6A23               	clrf	_counterTX^0,c
  8156                           
  8157                           ;SIO.c: 99:             break;
  8158  001218  0012               	return	
  8159  00121A                     l5659:
  8160                           
  8161                           ;SIO.c: 101:             if (TiGetTics(timerTX) >= 1) {
  8162  00121A  5025               	movf	_timerTX^0,w,c
  8163  00121C  ECF8  F00E         	call	_TiGetTics
  8164  001220  BE52               	btfsc	(?_TiGetTics+1)^0,7,c
  8165  001222  0012               	return	
  8166  001224  5052               	movf	(?_TiGetTics+1)^0,w,c
  8167  001226  E103               	bnz	u5020
  8168  001228  0451               	decf	?_TiGetTics^0,w,c
  8169  00122A  A0D8               	btfss	status,0,c
  8170  00122C  0012               	return	
  8171  00122E                     u5020:
  8172                           
  8173                           ;SIO.c: 102:                 stateTX++;
  8174  00122E  2A26               	incf	_stateTX^0,f,c
  8175                           
  8176                           ;SIO.c: 103:                 LATCbits.LATC4 = 0;
  8177  001230  988B               	bcf	139,4,c	;volatile
  8178                           
  8179                           ;SIO.c: 104:                 TiResetTics(timerTX);
  8180  001232  5025               	movf	_timerTX^0,w,c
  8181  001234  EF92  F00F         	goto	_TiResetTics
  8182  001238                     l5667:
  8183                           
  8184                           ;SIO.c: 108:             if (TiGetTics(timerTX) >= 1) {
  8185  001238  5025               	movf	_timerTX^0,w,c
  8186  00123A  ECF8  F00E         	call	_TiGetTics
  8187  00123E  BE52               	btfsc	(?_TiGetTics+1)^0,7,c
  8188  001240  0012               	return	
  8189  001242  5052               	movf	(?_TiGetTics+1)^0,w,c
  8190  001244  E103               	bnz	u5030
  8191  001246  0451               	decf	?_TiGetTics^0,w,c
  8192  001248  A0D8               	btfss	status,0,c
  8193  00124A  0012               	return	
  8194  00124C                     u5030:
  8195                           
  8196                           ;SIO.c: 109:                 if (counterTX > 7){
  8197  00124C  0E07               	movlw	7
  8198  00124E  6423               	cpfsgt	_counterTX^0,c
  8199  001250  D002               	goto	l5673
  8200                           
  8201                           ;SIO.c: 110:                     stateTX++;
  8202  001252  2A26               	incf	_stateTX^0,f,c
  8203                           
  8204                           ;SIO.c: 111:                 }else{
  8205  001254  0C07               	retlw	7
  8206  001256                     l5673:
  8207                           
  8208                           ;SIO.c: 112:                     TiResetTics(timerTX);
  8209  001256  5025               	movf	_timerTX^0,w,c
  8210  001258  EC92  F00F         	call	_TiResetTics
  8211                           
  8212                           ;SIO.c: 113:                     LATCbits.LATC4 = ((dataTX & 0x01 << counterTX) != 0);
  8213  00125C  C023  F058         	movff	_counterTX,??_btMotor
  8214  001260  0E01               	movlw	1
  8215  001262  6E59               	movwf	(??_btMotor+1)^0,c
  8216  001264  2A58               	incf	??_btMotor^0,f,c
  8217  001266  D002               	goto	u5054
  8218  001268                     u5055:
  8219  001268  90D8               	bcf	status,0,c
  8220  00126A  3659               	rlcf	(??_btMotor+1)^0,f,c
  8221  00126C                     u5054:
  8222  00126C  2E58               	decfsz	??_btMotor^0,f,c
  8223  00126E  D7FC               	goto	u5055
  8224  001270  5059               	movf	(??_btMotor+1)^0,w,c
  8225  001272  1424               	andwf	_dataTX^0,w,c
  8226  001274  E003               	bz	u5060
  8227  001276  6A5A               	clrf	(??_btMotor+2)^0,c
  8228  001278  2A5A               	incf	(??_btMotor+2)^0,f,c
  8229  00127A  D001               	goto	u5078
  8230  00127C                     u5060:
  8231  00127C  6A5A               	clrf	(??_btMotor+2)^0,c
  8232  00127E                     u5078:
  8233  00127E  3A5A               	swapf	(??_btMotor+2)^0,f,c
  8234  001280  508B               	movf	139,w,c	;volatile
  8235  001282  185A               	xorwf	(??_btMotor+2)^0,w,c
  8236  001284  0BEF               	andlw	-17
  8237  001286  185A               	xorwf	(??_btMotor+2)^0,w,c
  8238  001288  6E8B               	movwf	139,c	;volatile
  8239                           
  8240                           ;SIO.c: 114:                     counterTX++;
  8241  00128A  2A23               	incf	_counterTX^0,f,c
  8242  00128C  0012               	return	
  8243  00128E                     l5679:
  8244                           
  8245                           ;SIO.c: 121:             TiResetTics(timerTX);
  8246  00128E  5025               	movf	_timerTX^0,w,c
  8247  001290  EC92  F00F         	call	_TiResetTics
  8248                           
  8249                           ;SIO.c: 122:             LATCbits.LATC4 = 1;
  8250  001294  888B               	bsf	139,4,c	;volatile
  8251                           
  8252                           ;SIO.c: 123:             stateTX = 0;
  8253  001296  6A26               	clrf	_stateTX^0,c
  8254                           
  8255                           ;SIO.c: 124:             counterTX = 0;
  8256  001298  6A23               	clrf	_counterTX^0,c
  8257                           
  8258                           ;SIO.c: 126:             break;
  8259  00129A  0012               	return	
  8260  00129C                     l5689:
  8261  00129C  5026               	movf	_stateTX^0,w,c
  8262  00129E  6E58               	movwf	??_btMotor^0,c
  8263  0012A0  6A59               	clrf	(??_btMotor+1)^0,c
  8264                           
  8265                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  8266                           ; Switch size 1, requested type "space"
  8267                           ; Number of cases is 1, Range of values is 0 to 0
  8268                           ; switch strategies available:
  8269                           ; Name         Instructions Cycles
  8270                           ; simple_byte            4     3 (average)
  8271                           ;	Chosen strategy is simple_byte
  8272  0012A2  5059               	movf	(??_btMotor+1)^0,w,c
  8273  0012A4  A4D8               	btfss	status,2,c
  8274  0012A6  0012               	return	
  8275                           
  8276                           ; Switch size 1, requested type "space"
  8277                           ; Number of cases is 4, Range of values is 0 to 3
  8278                           ; switch strategies available:
  8279                           ; Name         Instructions Cycles
  8280                           ; simple_byte           13     7 (average)
  8281                           ;	Chosen strategy is simple_byte
  8282  0012A8  5058               	movf	??_btMotor^0,w,c
  8283  0012AA  E0B4               	bz	l804
  8284  0012AC  0A01               	xorlw	1	; case 1
  8285  0012AE  E0B5               	bz	l5659
  8286  0012B0  0A03               	xorlw	3	; case 2
  8287  0012B2  E0C2               	bz	l5667
  8288  0012B4  0A01               	xorlw	1	; case 3
  8289  0012B6  E0EB               	bz	l5679
  8290  0012B8  0012               	return		;funcret
  8291  0012BA                     __end_of_btMotor:
  8292                           	callstack 0
  8293                           
  8294 ;; *************** function _SiSendChar *****************
  8295 ;; Defined at:
  8296 ;;		line 41 in file "SIO.c"
  8297 ;; Parameters:    Size  Location     Type
  8298 ;;  myByte          1    wreg     unsigned char 
  8299 ;; Auto vars:     Size  Location     Type
  8300 ;;  myByte          1    5[COMRAM] unsigned char 
  8301 ;; Return value:  Size  Location     Type
  8302 ;;                  1    wreg      void 
  8303 ;; Registers used:
  8304 ;;		wreg
  8305 ;; Tracked objects:
  8306 ;;		On entry : 0/0
  8307 ;;		On exit  : 0/0
  8308 ;;		Unchanged: 0/0
  8309 ;; Data sizes:     COMRAM   BANK0   BANK1
  8310 ;;      Params:         0       0       0
  8311 ;;      Locals:         1       0       0
  8312 ;;      Temps:          0       0       0
  8313 ;;      Totals:         1       0       0
  8314 ;;Total ram usage:        1 bytes
  8315 ;; Hardware stack levels used: 1
  8316 ;; Hardware stack levels required when called: 2
  8317 ;; This function calls:
  8318 ;;		Nothing
  8319 ;; This function is called by:
  8320 ;;		_menuMotor
  8321 ;;		_joystickMotor
  8322 ;;		_btMotor
  8323 ;; This function uses a non-reentrant model
  8324 ;;
  8325                           
  8326                           	psect	text66
  8327  000168                     __ptext66:
  8328                           	callstack 0
  8329  000168                     _SiSendChar:
  8330                           	callstack 27
  8331                           
  8332                           ;incstack = 0
  8333                           ;SiSendChar@myByte stored from wreg
  8334  000168  6E51               	movwf	SiSendChar@myByte^0,c
  8335                           
  8336                           ;SIO.c: 42:     TXREG = myByte;
  8337  00016A  C051  FFAD         	movff	SiSendChar@myByte,4013	;volatile
  8338  00016E  0012               	return		;funcret
  8339  000170                     __end_of_SiSendChar:
  8340                           	callstack 0
  8341                           
  8342 ;; *************** function _SiIsAvailable *****************
  8343 ;; Defined at:
  8344 ;;		line 37 in file "SIO.c"
  8345 ;; Parameters:    Size  Location     Type
  8346 ;;		None
  8347 ;; Auto vars:     Size  Location     Type
  8348 ;;		None
  8349 ;; Return value:  Size  Location     Type
  8350 ;;                  1    wreg      unsigned char 
  8351 ;; Registers used:
  8352 ;;		wreg
  8353 ;; Tracked objects:
  8354 ;;		On entry : 0/0
  8355 ;;		On exit  : 0/0
  8356 ;;		Unchanged: 0/0
  8357 ;; Data sizes:     COMRAM   BANK0   BANK1
  8358 ;;      Params:         0       0       0
  8359 ;;      Locals:         0       0       0
  8360 ;;      Temps:          0       0       0
  8361 ;;      Totals:         0       0       0
  8362 ;;Total ram usage:        0 bytes
  8363 ;; Hardware stack levels used: 1
  8364 ;; Hardware stack levels required when called: 2
  8365 ;; This function calls:
  8366 ;;		Nothing
  8367 ;; This function is called by:
  8368 ;;		_menuMotor
  8369 ;;		_joystickMotor
  8370 ;;		_btMotor
  8371 ;; This function uses a non-reentrant model
  8372 ;;
  8373                           
  8374                           	psect	text67
  8375  00017C                     __ptext67:
  8376                           	callstack 0
  8377  00017C                     _SiIsAvailable:
  8378                           	callstack 27
  8379                           
  8380                           ;SIO.c: 38:     return TXSTAbits.TRMT;
  8381                           
  8382                           ;incstack = 0
  8383  00017C  B2AC               	btfsc	172,1,c	;volatile
  8384  00017E  0C01               	retlw	1
  8385  000180  0C00               	retlw	0	;funcret
  8386  000182                     __end_of_SiIsAvailable:
  8387                           	callstack 0
  8388                           
  8389 ;; *************** function _audioMotor *****************
  8390 ;; Defined at:
  8391 ;;		line 26 in file "Audio.c"
  8392 ;; Parameters:    Size  Location     Type
  8393 ;;		None
  8394 ;; Auto vars:     Size  Location     Type
  8395 ;;		None
  8396 ;; Return value:  Size  Location     Type
  8397 ;;                  1    wreg      void 
  8398 ;; Registers used:
  8399 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8400 ;; Tracked objects:
  8401 ;;		On entry : 0/0
  8402 ;;		On exit  : 0/0
  8403 ;;		Unchanged: 0/0
  8404 ;; Data sizes:     COMRAM   BANK0   BANK1
  8405 ;;      Params:         0       0       0
  8406 ;;      Locals:         0       0       0
  8407 ;;      Temps:          3       0       0
  8408 ;;      Totals:         3       0       0
  8409 ;;Total ram usage:        3 bytes
  8410 ;; Hardware stack levels used: 1
  8411 ;; Hardware stack levels required when called: 3
  8412 ;; This function calls:
  8413 ;;		_TiGetTics
  8414 ;;		_TiResetTics
  8415 ;;		___awmod
  8416 ;; This function is called by:
  8417 ;;		_main
  8418 ;; This function uses a non-reentrant model
  8419 ;;
  8420                           
  8421                           	psect	text68
  8422  00148E                     __ptext68:
  8423                           	callstack 0
  8424  00148E                     _audioMotor:
  8425                           	callstack 27
  8426                           
  8427                           ;Audio.c: 27:     switch(state){
  8428                           
  8429                           ;incstack = 0
  8430  00148E  D03B               	goto	l4517
  8431  001490                     l4483:
  8432                           
  8433                           ;Audio.c: 30:             period = 2;
  8434                           
  8435                           ;Audio.c: 31:             break;
  8436  001490  D05A               	goto	PL84	;call to abstracted procedure
  8437  001492                     l4485:
  8438                           
  8439                           ;Audio.c: 33:             if (TiGetTics(periodTimer)>= (period+1)){
  8440  001492  D851               	call	PL40	;call to abstracted procedure
  8441  001494  ECF8  F00E         	call	_TiGetTics
  8442  001498  D845               	call	PL34	;call to abstracted procedure
  8443  00149A  A0D8               	btfss	status,0,c
  8444  00149C  0012               	return	
  8445                           
  8446                           ;Audio.c: 34:                 TiResetTics(periodTimer);
  8447  00149E  503D               	movf	_periodTimer^0,w,c
  8448  0014A0  EC92  F00F         	call	_TiResetTics
  8449                           
  8450                           ;Audio.c: 35:                 LATCbits.LATC3=1;;
  8451  0014A4  868B               	bsf	139,3,c	;volatile
  8452                           
  8453                           ;Audio.c: 36:                 state = 2;
  8454  0014A6  0E02               	movlw	2
  8455  0014A8  6E3E               	movwf	_state@Audio$F919^0,c
  8456  0014AA  0C02               	retlw	2
  8457  0014AC                     l4493:
  8458                           
  8459                           ;Audio.c: 40:             if (TiGetTics(periodTimer)>= (period+1)){
  8460  0014AC  D844               	call	PL40	;call to abstracted procedure
  8461  0014AE  ECF8  F00E         	call	_TiGetTics
  8462  0014B2  D838               	call	PL34	;call to abstracted procedure
  8463  0014B4  A0D8               	btfss	status,0,c
  8464  0014B6  0012               	return	
  8465                           
  8466                           ;Audio.c: 41:                 TiResetTics(periodTimer);
  8467  0014B8  503D               	movf	_periodTimer^0,w,c
  8468  0014BA  EC92  F00F         	call	_TiResetTics
  8469                           
  8470                           ;Audio.c: 42:                 LATCbits.LATC3=0;;
  8471  0014BE  968B               	bcf	139,3,c	;volatile
  8472                           
  8473                           ;Audio.c: 43:                 state = 3;
  8474  0014C0  0E03               	movlw	3
  8475  0014C2  6E3E               	movwf	_state@Audio$F919^0,c
  8476  0014C4  0C03               	retlw	3
  8477  0014C6                     l4501:
  8478                           
  8479                           ;Audio.c: 48:             state = 1;
  8480  0014C6  0E01               	movlw	1
  8481  0014C8  6E3E               	movwf	_state@Audio$F919^0,c
  8482                           
  8483                           ;Audio.c: 50:             if (TiGetTics(timerSong) >= 1200){
  8484  0014CA  503C               	movf	_timerSong^0,w,c
  8485  0014CC  ECF8  F00E         	call	_TiGetTics
  8486  0014D0  BE52               	btfsc	(?_TiGetTics+1)^0,7,c
  8487  0014D2  D013               	goto	l4511
  8488  0014D4  ECC3  F004         	call	PL24	;call to abstracted procedure
  8489  0014D8  E310               	bnc	l4511
  8490                           
  8491                           ;Audio.c: 51:                 period++;
  8492  0014DA  2A3B               	incf	_period^0,f,c
  8493                           
  8494                           ;Audio.c: 52:                 TiResetTics(timerSong);
  8495  0014DC  503C               	movf	_timerSong^0,w,c
  8496  0014DE  EC92  F00F         	call	_TiResetTics
  8497                           
  8498                           ;Audio.c: 53:                 gameTime = (gameTime+1)%60;
  8499  0014E2  283A               	incf	_gameTime^0,w,c
  8500  0014E4  6E51               	movwf	___awmod@dividend^0,c
  8501  0014E6  6A52               	clrf	(___awmod@dividend+1)^0,c
  8502  0014E8  0E00               	movlw	0
  8503  0014EA  2252               	addwfc	(___awmod@dividend+1)^0,f,c
  8504  0014EC  6A54               	clrf	(___awmod@divisor+1)^0,c
  8505  0014EE  0E3C               	movlw	60
  8506  0014F0  6E53               	movwf	___awmod@divisor^0,c
  8507  0014F2  EC8B  F00C         	call	___awmod	;wreg free
  8508  0014F6  5051               	movf	?___awmod^0,w,c
  8509  0014F8  6E3A               	movwf	_gameTime^0,c
  8510  0014FA                     l4511:
  8511                           
  8512                           ;Audio.c: 56:             if (gameTime > 6){
  8513  0014FA  0E06               	movlw	6
  8514  0014FC  643A               	cpfsgt	_gameTime^0,c
  8515  0014FE  0C06               	retlw	6
  8516                           
  8517                           ;Audio.c: 57:                 state = 3;
  8518  001500  0E03               	movlw	3
  8519  001502  6E3E               	movwf	_state@Audio$F919^0,c
  8520                           
  8521                           ;Audio.c: 58:                 period = 2;
  8522  001504  D020               	goto	PL84	;call to abstracted procedure
  8523  001506                     l4517:
  8524  001506  503E               	movf	_state@Audio$F919^0,w,c
  8525  001508  6E58               	movwf	??_audioMotor^0,c
  8526  00150A  6A59               	clrf	(??_audioMotor+1)^0,c
  8527                           
  8528                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  8529                           ; Switch size 1, requested type "space"
  8530                           ; Number of cases is 1, Range of values is 0 to 0
  8531                           ; switch strategies available:
  8532                           ; Name         Instructions Cycles
  8533                           ; simple_byte            4     3 (average)
  8534                           ;	Chosen strategy is simple_byte
  8535  00150C  5059               	movf	(??_audioMotor+1)^0,w,c
  8536  00150E  A4D8               	btfss	status,2,c
  8537  001510  0012               	return	
  8538                           
  8539                           ; Switch size 1, requested type "space"
  8540                           ; Number of cases is 4, Range of values is 0 to 3
  8541                           ; switch strategies available:
  8542                           ; Name         Instructions Cycles
  8543                           ; simple_byte           13     7 (average)
  8544                           ;	Chosen strategy is simple_byte
  8545  001512  5058               	movf	??_audioMotor^0,w,c
  8546  001514  E018               	bz	PL84
  8547  001516  0A01               	xorlw	1	; case 1
  8548  001518  E0BC               	bz	l4485
  8549  00151A  0A03               	xorlw	3	; case 2
  8550  00151C  E0C7               	bz	l4493
  8551  00151E  0A01               	xorlw	1	; case 3
  8552  001520  E0D2               	bz	l4501
  8553  001522  0012               	return		;funcret
  8554  001524                     __end_of_audioMotor:
  8555                           	callstack 0
  8556  001524                     PL34:
  8557                           	callstack 27
  8558  001524  5058               	movf	??_audioMotor^0,w,c
  8559  001526  5C51               	subwf	?_TiGetTics^0,w,c
  8560  001528  5052               	movf	(?_TiGetTics+1)^0,w,c
  8561  00152A  0A80               	xorlw	128
  8562  00152C  6E5A               	movwf	(??_audioMotor+2)^0,c
  8563  00152E  5059               	movf	(??_audioMotor+1)^0,w,c
  8564  001530  0A80               	xorlw	128
  8565  001532  585A               	subwfb	(??_audioMotor+2)^0,w,c
  8566  001534  0012               	return	
  8567  001536                     __end_ofPL34:
  8568                           	callstack 0
  8569  001536                     PL40:
  8570                           	callstack 27
  8571  001536  503B               	movf	_period^0,w,c
  8572  001538  6E58               	movwf	??_audioMotor^0,c
  8573  00153A  6A59               	clrf	(??_audioMotor+1)^0,c
  8574  00153C  2A58               	incf	??_audioMotor^0,f,c
  8575  00153E  0E00               	movlw	0
  8576  001540  2259               	addwfc	(??_audioMotor+1)^0,f,c
  8577  001542  503D               	movf	_periodTimer^0,w,c
  8578  001544  0012               	return	
  8579  001546                     __end_ofPL40:
  8580                           	callstack 0
  8581  001546                     PL84:
  8582                           	callstack 27
  8583  001546  0E02               	movlw	2
  8584  001548  6E3B               	movwf	_period^0,c
  8585  00154A  0C02               	retlw	2
  8586  00154C                     __end_ofPL84:
  8587                           	callstack 0
  8588                           
  8589 ;; *************** function ___awmod *****************
  8590 ;; Defined at:
  8591 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\awmod.c"
  8592 ;; Parameters:    Size  Location     Type
  8593 ;;  dividend        2    5[COMRAM] int 
  8594 ;;  divisor         2    7[COMRAM] int 
  8595 ;; Auto vars:     Size  Location     Type
  8596 ;;  sign            1   10[COMRAM] unsigned char 
  8597 ;;  counter         1    9[COMRAM] unsigned char 
  8598 ;; Return value:  Size  Location     Type
  8599 ;;                  2    5[COMRAM] int 
  8600 ;; Registers used:
  8601 ;;		wreg, status,2, status,0
  8602 ;; Tracked objects:
  8603 ;;		On entry : 0/0
  8604 ;;		On exit  : 0/0
  8605 ;;		Unchanged: 0/0
  8606 ;; Data sizes:     COMRAM   BANK0   BANK1
  8607 ;;      Params:         4       0       0
  8608 ;;      Locals:         2       0       0
  8609 ;;      Temps:          0       0       0
  8610 ;;      Totals:         6       0       0
  8611 ;;Total ram usage:        6 bytes
  8612 ;; Hardware stack levels used: 1
  8613 ;; Hardware stack levels required when called: 2
  8614 ;; This function calls:
  8615 ;;		Nothing
  8616 ;; This function is called by:
  8617 ;;		_audioMotor
  8618 ;;		_mainMenu
  8619 ;; This function uses a non-reentrant model
  8620 ;;
  8621                           
  8622                           	psect	text69
  8623  001916                     __ptext69:
  8624                           	callstack 0
  8625  001916                     ___awmod:
  8626                           	callstack 26
  8627                           
  8628                           ;incstack = 0
  8629  001916  6A56               	clrf	___awmod@sign^0,c
  8630  001918  AE52               	btfss	(___awmod@dividend+1)^0,7,c
  8631  00191A  D006               	goto	l4019
  8632  00191C  6C51               	negf	___awmod@dividend^0,c
  8633  00191E  1E52               	comf	(___awmod@dividend+1)^0,f,c
  8634  001920  B0D8               	btfsc	status,0,c
  8635  001922  2A52               	incf	(___awmod@dividend+1)^0,f,c
  8636  001924  0E01               	movlw	1
  8637  001926  6E56               	movwf	___awmod@sign^0,c
  8638  001928                     l4019:
  8639  001928  AE54               	btfss	(___awmod@divisor+1)^0,7,c
  8640  00192A  D004               	goto	l4023
  8641  00192C  6C53               	negf	___awmod@divisor^0,c
  8642  00192E  1E54               	comf	(___awmod@divisor+1)^0,f,c
  8643  001930  B0D8               	btfsc	status,0,c
  8644  001932  2A54               	incf	(___awmod@divisor+1)^0,f,c
  8645  001934                     l4023:
  8646  001934  5053               	movf	___awmod@divisor^0,w,c
  8647  001936  1054               	iorwf	(___awmod@divisor+1)^0,w,c
  8648  001938  E017               	bz	l4039
  8649  00193A  0E01               	movlw	1
  8650  00193C  6E55               	movwf	___awmod@counter^0,c
  8651  00193E  D004               	goto	l4029
  8652  001940                     l4027:
  8653  001940  90D8               	bcf	status,0,c
  8654  001942  3653               	rlcf	___awmod@divisor^0,f,c
  8655  001944  3654               	rlcf	(___awmod@divisor+1)^0,f,c
  8656  001946  2A55               	incf	___awmod@counter^0,f,c
  8657  001948                     l4029:
  8658  001948  AE54               	btfss	(___awmod@divisor+1)^0,7,c
  8659  00194A  D7FA               	goto	l4027
  8660  00194C                     u2950:
  8661  00194C  5053               	movf	___awmod@divisor^0,w,c
  8662  00194E  5C51               	subwf	___awmod@dividend^0,w,c
  8663  001950  5054               	movf	(___awmod@divisor+1)^0,w,c
  8664  001952  5852               	subwfb	(___awmod@dividend+1)^0,w,c
  8665  001954  E304               	bnc	l4035
  8666  001956  5053               	movf	___awmod@divisor^0,w,c
  8667  001958  5E51               	subwf	___awmod@dividend^0,f,c
  8668  00195A  5054               	movf	(___awmod@divisor+1)^0,w,c
  8669  00195C  5A52               	subwfb	(___awmod@dividend+1)^0,f,c
  8670  00195E                     l4035:
  8671  00195E  90D8               	bcf	status,0,c
  8672  001960  3254               	rrcf	(___awmod@divisor+1)^0,f,c
  8673  001962  3253               	rrcf	___awmod@divisor^0,f,c
  8674  001964  2E55               	decfsz	___awmod@counter^0,f,c
  8675  001966  D7F2               	goto	u2950
  8676  001968                     l4039:
  8677  001968  5056               	movf	___awmod@sign^0,w,c
  8678  00196A  E004               	bz	l4043
  8679  00196C  6C51               	negf	___awmod@dividend^0,c
  8680  00196E  1E52               	comf	(___awmod@dividend+1)^0,f,c
  8681  001970  B0D8               	btfsc	status,0,c
  8682  001972  2A52               	incf	(___awmod@dividend+1)^0,f,c
  8683  001974                     l4043:
  8684  001974  C051  F051         	movff	___awmod@dividend,?___awmod
  8685  001978  C052  F052         	movff	___awmod@dividend+1,?___awmod+1
  8686  00197C  0012               	return		;funcret
  8687  00197E                     __end_of___awmod:
  8688                           	callstack 0
  8689                           
  8690 ;; *************** function _TiInitTimer *****************
  8691 ;; Defined at:
  8692 ;;		line 17 in file "TTimer.c"
  8693 ;; Parameters:    Size  Location     Type
  8694 ;;		None
  8695 ;; Auto vars:     Size  Location     Type
  8696 ;;		None
  8697 ;; Return value:  Size  Location     Type
  8698 ;;                  1    wreg      void 
  8699 ;; Registers used:
  8700 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  8701 ;; Tracked objects:
  8702 ;;		On entry : 0/0
  8703 ;;		On exit  : 0/0
  8704 ;;		Unchanged: 0/0
  8705 ;; Data sizes:     COMRAM   BANK0   BANK1
  8706 ;;      Params:         0       0       0
  8707 ;;      Locals:         0       0       0
  8708 ;;      Temps:          0       0       0
  8709 ;;      Totals:         0       0       0
  8710 ;;Total ram usage:        0 bytes
  8711 ;; Hardware stack levels used: 1
  8712 ;; Hardware stack levels required when called: 2
  8713 ;; This function calls:
  8714 ;;		Nothing
  8715 ;; This function is called by:
  8716 ;;		_main
  8717 ;; This function uses a non-reentrant model
  8718 ;;
  8719                           
  8720                           	psect	text70
  8721  001D4C                     __ptext70:
  8722                           	callstack 0
  8723  001D4C                     _TiInitTimer:
  8724                           	callstack 28
  8725                           
  8726                           ;TTimer.c: 20:     RCONbits.IPEN = 0;
  8727                           
  8728                           ;incstack = 0
  8729  001D4C  9ED0               	bcf	208,7,c	;volatile
  8730                           
  8731                           ;TTimer.c: 21:     INTCONbits.GIE_GIEH = 1;
  8732  001D4E  8EF2               	bsf	242,7,c	;volatile
  8733                           
  8734                           ;TTimer.c: 22:     INTCONbits.PEIE_GIEL = 1;
  8735  001D50  8CF2               	bsf	242,6,c	;volatile
  8736                           
  8737                           ;TTimer.c: 23:     INTCONbits.TMR0IE = 1;
  8738  001D52  8AF2               	bsf	242,5,c	;volatile
  8739                           
  8740                           ;TTimer.c: 24:     INTCONbits.TMR0IF = 0;
  8741  001D54  94F2               	bcf	242,2,c	;volatile
  8742                           
  8743                           ;TTimer.c: 25:     T0CON = 0x08;
  8744  001D56  0E08               	movlw	8
  8745  001D58  6ED5               	movwf	213,c	;volatile
  8746                           
  8747                           ;TTimer.c: 27:     TMR0H = 0xD8;
  8748  001D5A  0ED8               	movlw	216
  8749  001D5C  6ED7               	movwf	215,c	;volatile
  8750                           
  8751                           ;TTimer.c: 28:     TMR0L = 0xF0;
  8752  001D5E  0EF0               	movlw	240
  8753  001D60  6ED6               	movwf	214,c	;volatile
  8754                           
  8755                           ;TTimer.c: 29:     T0CONbits.TMR0ON = 1;
  8756  001D62  8ED5               	bsf	213,7,c	;volatile
  8757                           
  8758                           ;TTimer.c: 31:     for (counter=0;counter<25;counter++) {
  8759  001D64  6A4B               	clrf	_counter^0,c
  8760  001D66                     l4399:
  8761  001D66  0E18               	movlw	24
  8762  001D68  644B               	cpfsgt	_counter^0,c
  8763  001D6A  D001               	goto	l4403
  8764  001D6C  0C18               	retlw	24
  8765  001D6E                     l4403:
  8766                           
  8767                           ;TTimer.c: 32:  s_Timers[counter].b_busy=0;
  8768  001D6E  EC86  F00E         	call	PL10	;call to abstracted procedure
  8769  001D72  6ADF               	clrf	indf2,c
  8770                           
  8771                           ;TTimer.c: 33:     }
  8772  001D74  2A4B               	incf	_counter^0,f,c
  8773  001D76  D7F7               	goto	l4399
  8774  001D78                     __end_of_TiInitTimer:
  8775                           	callstack 0
  8776                           
  8777 ;; *************** function _SMSMotor *****************
  8778 ;; Defined at:
  8779 ;;		line 133 in file "keypad.c"
  8780 ;; Parameters:    Size  Location     Type
  8781 ;;		None
  8782 ;; Auto vars:     Size  Location     Type
  8783 ;;		None
  8784 ;; Return value:  Size  Location     Type
  8785 ;;                  1    wreg      void 
  8786 ;; Registers used:
  8787 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8788 ;; Tracked objects:
  8789 ;;		On entry : 0/0
  8790 ;;		On exit  : 0/0
  8791 ;;		Unchanged: 0/0
  8792 ;; Data sizes:     COMRAM   BANK0   BANK1
  8793 ;;      Params:         0       0       0
  8794 ;;      Locals:         0       0       0
  8795 ;;      Temps:          2       0       0
  8796 ;;      Totals:         2       0       0
  8797 ;;Total ram usage:        2 bytes
  8798 ;; Hardware stack levels used: 1
  8799 ;; Hardware stack levels required when called: 4
  8800 ;; This function calls:
  8801 ;;		_KeGetGenericValue
  8802 ;;		_TiGetTics
  8803 ;;		_TiResetTics
  8804 ;; This function is called by:
  8805 ;;		_main
  8806 ;; This function uses a non-reentrant model
  8807 ;;
  8808                           
  8809                           	psect	text71
  8810  0015F8                     __ptext71:
  8811                           	callstack 0
  8812  0015F8                     _SMSMotor:
  8813                           	callstack 26
  8814                           
  8815                           ;keypad.c: 134:     switch(stateSMS){
  8816                           
  8817                           ;incstack = 0
  8818  0015F8  D03B               	goto	l4567
  8819  0015FA                     l4525:
  8820                           
  8821                           ;keypad.c: 139:             if(pressed){
  8822  0015FA  5045               	movf	_pressed^0,w,c
  8823  0015FC  E01C               	bz	l175
  8824                           
  8825                           ;keypad.c: 140:                 stateSMS=1;
  8826  0015FE  0E01               	movlw	1
  8827  001600  6E41               	movwf	_stateSMS^0,c
  8828                           
  8829                           ;keypad.c: 141:                 currentKey = KeGetGenericValue();
  8830  001602  EC72  F00F         	call	_KeGetGenericValue	;wreg free
  8831  001606  6E47               	movwf	_currentKey^0,c
  8832                           
  8833                           ;keypad.c: 142:                 available = 2;
  8834  001608  0E02               	movlw	2
  8835  00160A  6E43               	movwf	_available^0,c
  8836                           
  8837                           ;keypad.c: 143:                 if(numPresses != 0 && (previous != currentKey ||TiGetTic
      +                          s(timer_SMS)>=1200)){
  8838  00160C  5044               	movf	_numPresses^0,w,c
  8839  00160E  B4D8               	btfsc	status,2,c
  8840  001610  0012               	return	
  8841  001612  5047               	movf	_currentKey^0,w,c
  8842  001614  1846               	xorwf	_previous^0,w,c
  8843  001616  E109               	bnz	u3410
  8844  001618  5048               	movf	_timer_SMS^0,w,c
  8845  00161A  ECF8  F00E         	call	_TiGetTics
  8846  00161E  BE52               	btfsc	(?_TiGetTics+1)^0,7,c
  8847  001620  0012               	return	
  8848  001622  ECC3  F004         	call	PL24	;call to abstracted procedure
  8849  001626  A0D8               	btfss	status,0,c
  8850  001628  0012               	return	
  8851  00162A                     u3410:
  8852                           
  8853                           ;keypad.c: 145:                     available = 1;
  8854  00162A  0E01               	movlw	1
  8855  00162C  6E43               	movwf	_available^0,c
  8856                           
  8857                           ;keypad.c: 147:                     previous = currentKey;
  8858  00162E  C047  F046         	movff	_currentKey,_previous
  8859                           
  8860                           ;keypad.c: 149:                     numPresses = 0;
  8861  001632  6A44               	clrf	_numPresses^0,c
  8862  001634  0012               	return	
  8863  001636                     l175:
  8864                           
  8865                           ;keypad.c: 156:               previous=currentKey;
  8866  001636  C047  F046         	movff	_currentKey,_previous
  8867  00163A  0012               	return	
  8868  00163C                     l4545:
  8869                           
  8870                           ;keypad.c: 168:             numPresses++;
  8871  00163C  2A44               	incf	_numPresses^0,f,c
  8872                           
  8873                           ;keypad.c: 169:             stateSMS = 2;
  8874  00163E  0E02               	movlw	2
  8875  001640  6E41               	movwf	_stateSMS^0,c
  8876                           
  8877                           ;keypad.c: 170:             break;
  8878  001642  0C02               	retlw	2
  8879  001644                     l4549:
  8880                           
  8881                           ;keypad.c: 173:             if (!pressed){
  8882  001644  5045               	movf	_pressed^0,w,c
  8883  001646  A4D8               	btfss	status,2,c
  8884  001648  0012               	return	
  8885                           
  8886                           ;keypad.c: 174:                 TiResetTics(timer_SMS);
  8887  00164A  5048               	movf	_timer_SMS^0,w,c
  8888  00164C  EC92  F00F         	call	_TiResetTics
  8889                           
  8890                           ;keypad.c: 176:                 stateSMS = 0;
  8891  001650  6A41               	clrf	_stateSMS^0,c
  8892  001652  0012               	return	
  8893  001654                     l4555:
  8894                           
  8895                           ;keypad.c: 181:             if(pressed){
  8896  001654  5045               	movf	_pressed^0,w,c
  8897  001656  B4D8               	btfsc	status,2,c
  8898  001658  0012               	return	
  8899                           
  8900                           ;keypad.c: 182:                 stateSMS = 4;
  8901  00165A  EF2C  F00F         	goto	PL90	;call to abstracted procedure
  8902  00165E                     l4559:
  8903                           
  8904                           ;keypad.c: 187:             stateSMS = 5;
  8905  00165E  0E05               	movlw	5
  8906  001660  6E41               	movwf	_stateSMS^0,c
  8907                           
  8908                           ;keypad.c: 188:             break;
  8909  001662  0C05               	retlw	5
  8910  001664                     l4561:
  8911                           
  8912                           ;keypad.c: 190:             if (!pressed){
  8913  001664  5045               	movf	_pressed^0,w,c
  8914  001666  A4D8               	btfss	status,2,c
  8915  001668  0012               	return	
  8916                           
  8917                           ;keypad.c: 192:                 stateSMS = 3;
  8918  00166A  0E03               	movlw	3
  8919  00166C  6E41               	movwf	_stateSMS^0,c
  8920  00166E  0C03               	retlw	3
  8921  001670                     l4567:
  8922  001670  5041               	movf	_stateSMS^0,w,c
  8923  001672  6E58               	movwf	??_SMSMotor^0,c
  8924  001674  6A59               	clrf	(??_SMSMotor+1)^0,c
  8925                           
  8926                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  8927                           ; Switch size 1, requested type "space"
  8928                           ; Number of cases is 1, Range of values is 0 to 0
  8929                           ; switch strategies available:
  8930                           ; Name         Instructions Cycles
  8931                           ; simple_byte            4     3 (average)
  8932                           ;	Chosen strategy is simple_byte
  8933  001676  5059               	movf	(??_SMSMotor+1)^0,w,c
  8934  001678  A4D8               	btfss	status,2,c
  8935  00167A  0012               	return	
  8936                           
  8937                           ; Switch size 1, requested type "space"
  8938                           ; Number of cases is 6, Range of values is 0 to 5
  8939                           ; switch strategies available:
  8940                           ; Name         Instructions Cycles
  8941                           ; simple_byte           19    10 (average)
  8942                           ;	Chosen strategy is simple_byte
  8943  00167C  5058               	movf	??_SMSMotor^0,w,c
  8944  00167E  E0BD               	bz	l4525
  8945  001680  0A01               	xorlw	1	; case 1
  8946  001682  E0DC               	bz	l4545
  8947  001684  0A03               	xorlw	3	; case 2
  8948  001686  E0DE               	bz	l4549
  8949  001688  0A01               	xorlw	1	; case 3
  8950  00168A  E0E4               	bz	l4555
  8951  00168C  0A07               	xorlw	7	; case 4
  8952  00168E  E0E7               	bz	l4559
  8953  001690  0A01               	xorlw	1	; case 5
  8954  001692  E0E8               	bz	l4561
  8955  001694  0012               	return		;funcret
  8956  001696                     __end_of_SMSMotor:
  8957                           	callstack 0
  8958                           
  8959 ;; *************** function _KeGetGenericValue *****************
  8960 ;; Defined at:
  8961 ;;		line 216 in file "keypad.c"
  8962 ;; Parameters:    Size  Location     Type
  8963 ;;		None
  8964 ;; Auto vars:     Size  Location     Type
  8965 ;;		None
  8966 ;; Return value:  Size  Location     Type
  8967 ;;                  1    wreg      unsigned char 
  8968 ;; Registers used:
  8969 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8970 ;; Tracked objects:
  8971 ;;		On entry : 0/0
  8972 ;;		On exit  : 0/0
  8973 ;;		Unchanged: 0/0
  8974 ;; Data sizes:     COMRAM   BANK0   BANK1
  8975 ;;      Params:         0       0       0
  8976 ;;      Locals:         0       0       0
  8977 ;;      Temps:          2       0       0
  8978 ;;      Totals:         2       0       0
  8979 ;;Total ram usage:        2 bytes
  8980 ;; Hardware stack levels used: 1
  8981 ;; Hardware stack levels required when called: 3
  8982 ;; This function calls:
  8983 ;;		_getColumn
  8984 ;; This function is called by:
  8985 ;;		_SMSMotor
  8986 ;;		_KeGetCharValue
  8987 ;;		_menuMotor
  8988 ;;		_timeMotor
  8989 ;; This function uses a non-reentrant model
  8990 ;;
  8991                           
  8992                           	psect	text72
  8993  001EE4                     __ptext72:
  8994                           	callstack 0
  8995  001EE4                     _KeGetGenericValue:
  8996                           	callstack 26
  8997                           
  8998                           ;keypad.c: 217:     return TABLE[(row*3)+getColumn()];
  8999                           
  9000                           ;incstack = 0
  9001  001EE4  EC97  F000         	call	_getColumn	;wreg free
  9002  001EE8  6E51               	movwf	??_KeGetGenericValue^0,c
  9003  001EEA  504A               	movf	_row^0,w,c
  9004  001EEC  0D03               	mullw	3
  9005  001EEE  50F3               	movf	243,w,c
  9006  001EF0  0F01               	addlw	low _TABLE
  9007  001EF2  2451               	addwf	??_KeGetGenericValue^0,w,c
  9008  001EF4  6E52               	movwf	(??_KeGetGenericValue+1)^0,c
  9009  001EF6  C052  FFF6         	movff	??_KeGetGenericValue+1,tblptrl
  9010  001EFA                     	if	1	;There is more than 1 active tblptr byte
  9011  001EFA  0E02               	movlw	high __smallconst
  9012  001EFC  6EF7               	movwf	tblptrh,c
  9013  001EFE                     	endif
  9014  001EFE                     	if	0	;tblptru may be non-zero
  9015  001EFE                     	endif
  9016  001EFE                     	if	0	;tblptru may be non-zero
  9017  001EFE                     	endif
  9018  001EFE  0008               	tblrd		*
  9019  001F00  50F5               	movf	tablat,w,c
  9020  001F02  0012               	return		;funcret
  9021  001F04                     __end_of_KeGetGenericValue:
  9022                           	callstack 0
  9023                           
  9024 ;; *************** function _getColumn *****************
  9025 ;; Defined at:
  9026 ;;		line 206 in file "keypad.c"
  9027 ;; Parameters:    Size  Location     Type
  9028 ;;		None
  9029 ;; Auto vars:     Size  Location     Type
  9030 ;;		None
  9031 ;; Return value:  Size  Location     Type
  9032 ;;                  1    wreg      unsigned char 
  9033 ;; Registers used:
  9034 ;;		wreg
  9035 ;; Tracked objects:
  9036 ;;		On entry : 0/0
  9037 ;;		On exit  : 0/0
  9038 ;;		Unchanged: 0/0
  9039 ;; Data sizes:     COMRAM   BANK0   BANK1
  9040 ;;      Params:         0       0       0
  9041 ;;      Locals:         0       0       0
  9042 ;;      Temps:          0       0       0
  9043 ;;      Totals:         0       0       0
  9044 ;;Total ram usage:        0 bytes
  9045 ;; Hardware stack levels used: 1
  9046 ;; Hardware stack levels required when called: 2
  9047 ;; This function calls:
  9048 ;;		Nothing
  9049 ;; This function is called by:
  9050 ;;		_KeGetGenericValue
  9051 ;; This function uses a non-reentrant model
  9052 ;;
  9053                           
  9054                           	psect	text73
  9055  00012E                     __ptext73:
  9056                           	callstack 0
  9057  00012E                     _getColumn:
  9058                           	callstack 26
  9059                           
  9060                           ;keypad.c: 207:     if (!PORTBbits.RB0) return 0;
  9061                           
  9062                           ;incstack = 0
  9063  00012E  A081               	btfss	129,0,c	;volatile
  9064  000130  0C00               	retlw	0
  9065                           
  9066                           ;keypad.c: 208:     if (!PORTBbits.RB1) return 1;
  9067  000132  A281               	btfss	129,1,c	;volatile
  9068  000134  0C01               	retlw	1
  9069                           
  9070                           ;keypad.c: 209:     return 2;
  9071  000136  0C02               	retlw	2	;funcret
  9072  000138                     __end_of_getColumn:
  9073                           	callstack 0
  9074                           
  9075 ;; *************** function _LcInit *****************
  9076 ;; Defined at:
  9077 ;;		line 60 in file "LcTLCD.c"
  9078 ;; Parameters:    Size  Location     Type
  9079 ;;  rows            1    wreg     unsigned char 
  9080 ;;  columns         1   17[COMRAM] unsigned char 
  9081 ;; Auto vars:     Size  Location     Type
  9082 ;;  rows            1   18[COMRAM] unsigned char 
  9083 ;;  i               1   19[COMRAM] unsigned char 
  9084 ;; Return value:  Size  Location     Type
  9085 ;;                  1    wreg      void 
  9086 ;; Registers used:
  9087 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9088 ;; Tracked objects:
  9089 ;;		On entry : 0/0
  9090 ;;		On exit  : 0/0
  9091 ;;		Unchanged: 0/0
  9092 ;; Data sizes:     COMRAM   BANK0   BANK1
  9093 ;;      Params:         1       0       0
  9094 ;;      Locals:         2       0       0
  9095 ;;      Temps:          0       0       0
  9096 ;;      Totals:         3       0       0
  9097 ;;Total ram usage:        3 bytes
  9098 ;; Hardware stack levels used: 1
  9099 ;; Hardware stack levels required when called: 4
  9100 ;; This function calls:
  9101 ;;		_CantaIR
  9102 ;;		_EscriuPrimeraOrdre
  9103 ;;		_Espera
  9104 ;;		_TiGetTimer
  9105 ;;		_WaitForBusy
  9106 ;; This function is called by:
  9107 ;;		_main
  9108 ;; This function uses a non-reentrant model
  9109 ;;
  9110                           
  9111                           	psect	text74
  9112  00154C                     __ptext74:
  9113                           	callstack 0
  9114  00154C                     _LcInit:
  9115                           	callstack 26
  9116                           
  9117                           ;LcTLCD.c: 68:  Rows = rows; Columns = columns;
  9118                           
  9119                           ;incstack = 0
  9120  00154C  EC77  F00E         	call	_TiGetTimer	;wreg free
  9121  001550  6E0D               	movwf	_Timer^0,c
  9122  001552  6A0E               	clrf	(_Timer+1)^0,c
  9123                           
  9124                           ;LcTLCD.c: 69:  RowAct = ColumnAct = 0;
  9125  001554  6A3F               	clrf	_ColumnAct^0,c
  9126  001556  6A40               	clrf	_RowAct^0,c
  9127                           
  9128                           ;LcTLCD.c: 70:  (TRISDbits.TRISD4 = TRISDbits.TRISD5 = TRISDbits.TRISD6 = 0);
  9129  001558  9C95               	bcf	149,6,c	;volatile
  9130  00155A  9A95               	bcf	149,5,c	;volatile
  9131  00155C  9895               	bcf	149,4,c	;volatile
  9132                           
  9133                           ;LcTLCD.c: 71:  for (i = 0; i < 2; i++) {
  9134  00155E  6A5F               	clrf	LcInit@i^0,c
  9135  001560                     l4425:
  9136                           
  9137                           ;LcTLCD.c: 72:   Espera(Timer, 100);
  9138  001560  D845               	call	PL12	;call to abstracted procedure
  9139  001562  0E64               	movlw	100
  9140  001564  6E5A               	movwf	Espera@ms^0,c
  9141  001566  EC82  F00F         	call	_Espera	;wreg free
  9142                           
  9143                           ;LcTLCD.c: 75:   EscriuPrimeraOrdre(0x02 | 0x01);
  9144  00156A  0E03               	movlw	3
  9145  00156C  ECDE  F00B         	call	_EscriuPrimeraOrdre
  9146                           
  9147                           ;LcTLCD.c: 76:   Espera(Timer, 5);
  9148  001570  D83D               	call	PL12	;call to abstracted procedure
  9149  001572  0E05               	movlw	5
  9150  001574  6E5A               	movwf	Espera@ms^0,c
  9151  001576  EC82  F00F         	call	_Espera	;wreg free
  9152                           
  9153                           ;LcTLCD.c: 77:   EscriuPrimeraOrdre(0x02 | 0x01);
  9154  00157A  0E03               	movlw	3
  9155  00157C  ECDE  F00B         	call	_EscriuPrimeraOrdre
  9156                           
  9157                           ;LcTLCD.c: 78:   Espera(Timer, 1);
  9158  001580  D835               	call	PL12	;call to abstracted procedure
  9159  001582  0E01               	movlw	1
  9160  001584  6E5A               	movwf	Espera@ms^0,c
  9161  001586  EC82  F00F         	call	_Espera	;wreg free
  9162                           
  9163                           ;LcTLCD.c: 79:   EscriuPrimeraOrdre(0x02 | 0x01);
  9164  00158A  0E03               	movlw	3
  9165  00158C  ECDE  F00B         	call	_EscriuPrimeraOrdre
  9166                           
  9167                           ;LcTLCD.c: 80:   Espera(Timer, 1);
  9168  001590  D82D               	call	PL12	;call to abstracted procedure
  9169  001592  0E01               	movlw	1
  9170  001594  6E5A               	movwf	Espera@ms^0,c
  9171  001596  EC82  F00F         	call	_Espera	;wreg free
  9172                           
  9173                           ;LcTLCD.c: 83:   EscriuPrimeraOrdre(0x02);
  9174  00159A  0E02               	movlw	2
  9175  00159C  ECDE  F00B         	call	_EscriuPrimeraOrdre
  9176                           
  9177                           ;LcTLCD.c: 84:   Espera(Timer, 1);
  9178  0015A0  D825               	call	PL12	;call to abstracted procedure
  9179  0015A2  0E01               	movlw	1
  9180  0015A4  6E5A               	movwf	Espera@ms^0,c
  9181  0015A6  EC82  F00F         	call	_Espera	;wreg free
  9182                           
  9183                           ;LcTLCD.c: 85:   CantaIR(0x20 | 0x08);
  9184  0015AA  0E28               	movlw	40
  9185  0015AC  ECBF  F00F         	call	_CantaIR
  9186                           
  9187                           ;LcTLCD.c: 88:   WaitForBusy(); CantaIR(0x08);
  9188  0015B0  ECEE  F00D         	call	_WaitForBusy	;wreg free
  9189  0015B4  0E08               	movlw	8
  9190  0015B6  ECBF  F00F         	call	_CantaIR
  9191                           
  9192                           ;LcTLCD.c: 89:   WaitForBusy(); CantaIR(0x01);
  9193  0015BA  ECEE  F00D         	call	_WaitForBusy	;wreg free
  9194  0015BE  0E01               	movlw	1
  9195  0015C0  ECBF  F00F         	call	_CantaIR
  9196                           
  9197                           ;LcTLCD.c: 90:   Espera(Timer,3);
  9198  0015C4  D813               	call	PL12	;call to abstracted procedure
  9199  0015C6  0E03               	movlw	3
  9200  0015C8  6E5A               	movwf	Espera@ms^0,c
  9201  0015CA  EC82  F00F         	call	_Espera	;wreg free
  9202                           
  9203                           ;LcTLCD.c: 91:   WaitForBusy(); CantaIR(0x04 | 0x02);
  9204  0015CE  ECEE  F00D         	call	_WaitForBusy	;wreg free
  9205  0015D2  0E06               	movlw	6
  9206  0015D4  ECBF  F00F         	call	_CantaIR
  9207                           
  9208                           ;LcTLCD.c: 92:   WaitForBusy(); CantaIR(0x08 | 0x04 | 0x02 | 0x01);
  9209  0015D8  ECEE  F00D         	call	_WaitForBusy	;wreg free
  9210  0015DC  0E0F               	movlw	15
  9211  0015DE  ECBF  F00F         	call	_CantaIR
  9212                           
  9213                           ;LcTLCD.c: 93:  }
  9214  0015E2  2A5F               	incf	LcInit@i^0,f,c
  9215  0015E4  0E01               	movlw	1
  9216  0015E6  645F               	cpfsgt	LcInit@i^0,c
  9217  0015E8  D7BB               	goto	l4425
  9218  0015EA  0C01               	retlw	1
  9219  0015EC                     __end_of_LcInit:
  9220                           	callstack 0
  9221  0015EC                     PL12:
  9222                           	callstack 26
  9223  0015EC  C00D  F058         	movff	_Timer,Espera@Timer
  9224  0015F0  C00E  F059         	movff	_Timer+1,Espera@Timer+1
  9225  0015F4  6A5B               	clrf	(Espera@ms+1)^0,c
  9226  0015F6  0012               	return	
  9227  0015F8                     __end_ofPL12:
  9228                           	callstack 0
  9229                           
  9230 ;; *************** function _WaitForBusy *****************
  9231 ;; Defined at:
  9232 ;;		line 262 in file "LcTLCD.c"
  9233 ;; Parameters:    Size  Location     Type
  9234 ;;		None
  9235 ;; Auto vars:     Size  Location     Type
  9236 ;;  Busy            1   12[COMRAM] unsigned char 
  9237 ;; Return value:  Size  Location     Type
  9238 ;;                  1    wreg      void 
  9239 ;; Registers used:
  9240 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9241 ;; Tracked objects:
  9242 ;;		On entry : 0/0
  9243 ;;		On exit  : 0/0
  9244 ;;		Unchanged: 0/0
  9245 ;; Data sizes:     COMRAM   BANK0   BANK1
  9246 ;;      Params:         0       0       0
  9247 ;;      Locals:         1       0       0
  9248 ;;      Temps:          0       0       0
  9249 ;;      Totals:         1       0       0
  9250 ;;Total ram usage:        1 bytes
  9251 ;; Hardware stack levels used: 1
  9252 ;; Hardware stack levels required when called: 3
  9253 ;; This function calls:
  9254 ;;		_TiGetTics
  9255 ;;		_TiResetTics
  9256 ;; This function is called by:
  9257 ;;		_LcInit
  9258 ;;		_LcClear
  9259 ;;		_LcCursorOn
  9260 ;;		_LcCursorOff
  9261 ;;		_LcGotoXY
  9262 ;;		_LcPutChar
  9263 ;; This function uses a non-reentrant model
  9264 ;;
  9265                           
  9266                           	psect	text75
  9267  001BDC                     __ptext75:
  9268                           	callstack 0
  9269  001BDC                     _WaitForBusy:
  9270                           	callstack 24
  9271                           
  9272                           ;LcTLCD.c: 263:  (TRISDbits.TRISD0 = TRISDbits.TRISD1 = TRISDbits.TRISD2 = TRISDbits.TRI
      +                          SD3 = 1);
  9273                           
  9274                           ;incstack = 0
  9275  001BDC  8695               	bsf	149,3,c	;volatile
  9276  001BDE  8495               	bsf	149,2,c	;volatile
  9277  001BE0  8295               	bsf	149,1,c	;volatile
  9278  001BE2  8095               	bsf	149,0,c	;volatile
  9279                           
  9280                           ;LcTLCD.c: 264:  (LATDbits.LATD4 = 0);
  9281  001BE4  988C               	bcf	140,4,c	;volatile
  9282                           
  9283                           ;LcTLCD.c: 265:  (LATDbits.LATD5 = 1);
  9284  001BE6  8A8C               	bsf	140,5,c	;volatile
  9285                           
  9286                           ;LcTLCD.c: 266:  TiResetTics(Timer);
  9287  001BE8  500D               	movf	_Timer^0,w,c
  9288  001BEA  EC92  F00F         	call	_TiResetTics
  9289  001BEE                     l3881:
  9290                           
  9291                           ;LcTLCD.c: 268:   (LATDbits.LATD6 = 1);(LATDbits.LATD6 = 1);
  9292  001BEE  8C8C               	bsf	140,6,c	;volatile
  9293  001BF0  8C8C               	bsf	140,6,c	;volatile
  9294                           
  9295                           ;LcTLCD.c: 269:   Busy = (PORTDbits.RD3);
  9296  001BF2  0E00               	movlw	0
  9297  001BF4  B683               	btfsc	131,3,c	;volatile
  9298  001BF6  0E01               	movlw	1
  9299  001BF8  6E58               	movwf	WaitForBusy@Busy^0,c
  9300                           
  9301                           ;LcTLCD.c: 270:   (LATDbits.LATD6 = 0);
  9302  001BFA  9C8C               	bcf	140,6,c	;volatile
  9303                           
  9304                           ;LcTLCD.c: 271:   (LATDbits.LATD6 = 0);
  9305  001BFC  9C8C               	bcf	140,6,c	;volatile
  9306                           
  9307                           ;LcTLCD.c: 272:   (LATDbits.LATD6 = 1);(LATDbits.LATD6 = 1);
  9308  001BFE  8C8C               	bsf	140,6,c	;volatile
  9309  001C00  8C8C               	bsf	140,6,c	;volatile
  9310                           
  9311                           ;LcTLCD.c: 274:   (LATDbits.LATD6 = 0);
  9312  001C02  9C8C               	bcf	140,6,c	;volatile
  9313                           
  9314                           ;LcTLCD.c: 275:   (LATDbits.LATD6 = 0);
  9315  001C04  9C8C               	bcf	140,6,c	;volatile
  9316                           
  9317                           ;LcTLCD.c: 276:   if (TiGetTics(Timer)) break;
  9318  001C06  500D               	movf	_Timer^0,w,c
  9319  001C08  ECF8  F00E         	call	_TiGetTics
  9320  001C0C  5051               	movf	?_TiGetTics^0,w,c
  9321  001C0E  1052               	iorwf	(?_TiGetTics+1)^0,w,c
  9322  001C10  E001               	bz	l3903
  9323  001C12  0012               	return	
  9324  001C14                     l3903:
  9325                           
  9326                           ;LcTLCD.c: 277:  } while(Busy);
  9327  001C14  5058               	movf	WaitForBusy@Busy^0,w,c
  9328  001C16  E1EB               	bnz	l3881
  9329  001C18  0012               	return		;funcret
  9330  001C1A                     __end_of_WaitForBusy:
  9331                           	callstack 0
  9332                           
  9333 ;; *************** function _TiGetTimer *****************
  9334 ;; Defined at:
  9335 ;;		line 74 in file "TTimer.c"
  9336 ;; Parameters:    Size  Location     Type
  9337 ;;		None
  9338 ;; Auto vars:     Size  Location     Type
  9339 ;;		None
  9340 ;; Return value:  Size  Location     Type
  9341 ;;                  1    wreg      unsigned char 
  9342 ;; Registers used:
  9343 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  9344 ;; Tracked objects:
  9345 ;;		On entry : 0/0
  9346 ;;		On exit  : 0/0
  9347 ;;		Unchanged: 0/0
  9348 ;; Data sizes:     COMRAM   BANK0   BANK1
  9349 ;;      Params:         0       0       0
  9350 ;;      Locals:         0       0       0
  9351 ;;      Temps:          1       0       0
  9352 ;;      Totals:         1       0       0
  9353 ;;Total ram usage:        1 bytes
  9354 ;; Hardware stack levels used: 1
  9355 ;; Hardware stack levels required when called: 2
  9356 ;; This function calls:
  9357 ;;		Nothing
  9358 ;; This function is called by:
  9359 ;;		_initKeypad
  9360 ;;		_LcInit
  9361 ;;		_initAudio
  9362 ;;		_initMenu
  9363 ;;		_initSIO
  9364 ;;		_initTime
  9365 ;; This function uses a non-reentrant model
  9366 ;;
  9367                           
  9368                           	psect	text76
  9369  001CEE                     __ptext76:
  9370                           	callstack 0
  9371  001CEE                     _TiGetTimer:
  9372                           	callstack 27
  9373                           
  9374                           ;TTimer.c: 78:     counter=0;
  9375                           
  9376                           ;incstack = 0
  9377  001CEE  6A4B               	clrf	_counter^0,c
  9378                           
  9379                           ;TTimer.c: 79:     while (s_Timers[counter].b_busy==1) {
  9380  001CF0  D005               	goto	l4101
  9381  001CF2                     l4093:
  9382                           
  9383                           ;TTimer.c: 80:         counter++;
  9384  001CF2  2A4B               	incf	_counter^0,f,c
  9385                           
  9386                           ;TTimer.c: 81:  if (counter == 25) return -1;
  9387  001CF4  0E19               	movlw	25
  9388  001CF6  184B               	xorwf	_counter^0,w,c
  9389  001CF8  E101               	bnz	l4101
  9390  001CFA  0CFF               	retlw	255
  9391  001CFC                     l4101:
  9392                           
  9393                           ;TTimer.c: 79:     while (s_Timers[counter].b_busy==1) {
  9394  001CFC  D807               	call	PL10	;call to abstracted procedure
  9395  001CFE  04DE               	decf	postinc2,w,c
  9396  001D00  E0F8               	bz	l4093
  9397                           
  9398                           ;TTimer.c: 83:     s_Timers[counter].b_busy=1;
  9399  001D02  D804               	call	PL10	;call to abstracted procedure
  9400  001D04  0E01               	movlw	1
  9401  001D06  6EDF               	movwf	indf2,c
  9402                           
  9403                           ;TTimer.c: 84:     return (counter);
  9404  001D08  504B               	movf	_counter^0,w,c
  9405  001D0A  0012               	return		;funcret
  9406  001D0C                     __end_of_TiGetTimer:
  9407                           	callstack 0
  9408  001D0C                     PL10:
  9409                           	callstack 28
  9410  001D0C  504B               	movf	_counter^0,w,c
  9411  001D0E  0D03               	mullw	3
  9412  001D10  0E92               	movlw	low (_s_Timers+2)
  9413  001D12  24F3               	addwf	243,w,c
  9414  001D14  6ED9               	movwf	fsr2l,c
  9415  001D16  0E01               	movlw	high (_s_Timers+2)
  9416  001D18  20F4               	addwfc	prodh,w,c
  9417  001D1A  6EDA               	movwf	fsr2h,c
  9418  001D1C  0012               	return	
  9419  001D1E                     __end_ofPL10:
  9420                           	callstack 0
  9421                           
  9422 ;; *************** function _Espera *****************
  9423 ;; Defined at:
  9424 ;;		line 209 in file "LcTLCD.c"
  9425 ;; Parameters:    Size  Location     Type
  9426 ;;  Timer           2   12[COMRAM] int 
  9427 ;;  ms              2   14[COMRAM] int 
  9428 ;; Auto vars:     Size  Location     Type
  9429 ;;		None
  9430 ;; Return value:  Size  Location     Type
  9431 ;;                  1    wreg      void 
  9432 ;; Registers used:
  9433 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9434 ;; Tracked objects:
  9435 ;;		On entry : 0/0
  9436 ;;		On exit  : 0/0
  9437 ;;		Unchanged: 0/0
  9438 ;; Data sizes:     COMRAM   BANK0   BANK1
  9439 ;;      Params:         4       0       0
  9440 ;;      Locals:         0       0       0
  9441 ;;      Temps:          1       0       0
  9442 ;;      Totals:         5       0       0
  9443 ;;Total ram usage:        5 bytes
  9444 ;; Hardware stack levels used: 1
  9445 ;; Hardware stack levels required when called: 3
  9446 ;; This function calls:
  9447 ;;		_TiGetTics
  9448 ;;		_TiResetTics
  9449 ;; This function is called by:
  9450 ;;		_LcInit
  9451 ;;		_LcClear
  9452 ;; This function uses a non-reentrant model
  9453 ;;
  9454                           
  9455                           	psect	text77
  9456  001F04                     __ptext77:
  9457                           	callstack 0
  9458  001F04                     _Espera:
  9459                           	callstack 24
  9460                           
  9461                           ;LcTLCD.c: 210:  TiResetTics(Timer);
  9462                           
  9463                           ;incstack = 0
  9464  001F04  5058               	movf	Espera@Timer^0,w,c
  9465  001F06  EC92  F00F         	call	_TiResetTics
  9466  001F0A                     l3921:
  9467  001F0A  5058               	movf	Espera@Timer^0,w,c
  9468  001F0C  ECF8  F00E         	call	_TiGetTics
  9469  001F10  505A               	movf	Espera@ms^0,w,c
  9470  001F12  5C51               	subwf	?_TiGetTics^0,w,c
  9471  001F14  5052               	movf	(?_TiGetTics+1)^0,w,c
  9472  001F16  0A80               	xorlw	128
  9473  001F18  6E5C               	movwf	??_Espera^0,c
  9474  001F1A  505B               	movf	(Espera@ms+1)^0,w,c
  9475  001F1C  0A80               	xorlw	128
  9476  001F1E  585C               	subwfb	??_Espera^0,w,c
  9477  001F20  E3F4               	bnc	l3921
  9478  001F22  0012               	return		;funcret
  9479  001F24                     __end_of_Espera:
  9480                           	callstack 0
  9481                           
  9482 ;; *************** function _EscriuPrimeraOrdre *****************
  9483 ;; Defined at:
  9484 ;;		line 280 in file "LcTLCD.c"
  9485 ;; Parameters:    Size  Location     Type
  9486 ;;  ordre           1    wreg     unsigned char 
  9487 ;; Auto vars:     Size  Location     Type
  9488 ;;  ordre           1    6[COMRAM] unsigned char 
  9489 ;; Return value:  Size  Location     Type
  9490 ;;                  1    wreg      void 
  9491 ;; Registers used:
  9492 ;;		wreg, status,2, status,0
  9493 ;; Tracked objects:
  9494 ;;		On entry : 0/0
  9495 ;;		On exit  : 0/0
  9496 ;;		Unchanged: 0/0
  9497 ;; Data sizes:     COMRAM   BANK0   BANK1
  9498 ;;      Params:         0       0       0
  9499 ;;      Locals:         1       0       0
  9500 ;;      Temps:          1       0       0
  9501 ;;      Totals:         2       0       0
  9502 ;;Total ram usage:        2 bytes
  9503 ;; Hardware stack levels used: 1
  9504 ;; Hardware stack levels required when called: 2
  9505 ;; This function calls:
  9506 ;;		Nothing
  9507 ;; This function is called by:
  9508 ;;		_LcInit
  9509 ;; This function uses a non-reentrant model
  9510 ;;
  9511                           
  9512                           	psect	text78
  9513  0017BC                     __ptext78:
  9514                           	callstack 0
  9515  0017BC                     _EscriuPrimeraOrdre:
  9516                           	callstack 27
  9517                           
  9518                           ;incstack = 0
  9519                           ;EscriuPrimeraOrdre@ordre stored from wreg
  9520  0017BC  6E52               	movwf	EscriuPrimeraOrdre@ordre^0,c
  9521                           
  9522                           ;LcTLCD.c: 282:  (TRISDbits.TRISD0 = TRISDbits.TRISD1 = TRISDbits.TRISD2 = TRISDbits.TRI
      +                          SD3 = 0); (LATDbits.LATD4 = 0); (LATDbits.LATD5 = 0);
  9523  0017BE  9695               	bcf	149,3,c	;volatile
  9524                           
  9525                           ;LcTLCD.c: 283:  (LATDbits.LATD6 = 1); (LATDbits.LATD6 = 1);
  9526  0017C0  D82F               	call	PL50	;call to abstracted procedure
  9527  0017C2  8C8C               	bsf	140,6,c	;volatile
  9528                           
  9529                           ;LcTLCD.c: 284:   (LATDbits.LATD3 = (ordre & 0x08 ? 1 : 0));
  9530  0017C4  A652               	btfss	EscriuPrimeraOrdre@ordre^0,3,c
  9531  0017C6  D003               	goto	u480
  9532  0017C8  6A51               	clrf	??_EscriuPrimeraOrdre^0,c
  9533  0017CA  2A51               	incf	??_EscriuPrimeraOrdre^0,f,c
  9534  0017CC  D001               	goto	u498
  9535  0017CE                     u480:
  9536  0017CE  6A51               	clrf	??_EscriuPrimeraOrdre^0,c
  9537  0017D0                     u498:
  9538  0017D0  4651               	rlncf	??_EscriuPrimeraOrdre^0,f,c
  9539  0017D2  D82D               	call	PL70	;call to abstracted procedure
  9540  0017D4  0BF7               	andlw	-9
  9541  0017D6  1851               	xorwf	??_EscriuPrimeraOrdre^0,w,c
  9542  0017D8  6E8C               	movwf	140,c	;volatile
  9543                           
  9544                           ;LcTLCD.c: 285:   (LATDbits.LATD2 = (ordre & 0x04 ? 1 : 0));
  9545  0017DA  A452               	btfss	EscriuPrimeraOrdre@ordre^0,2,c
  9546  0017DC  D003               	goto	u500
  9547  0017DE  6A51               	clrf	??_EscriuPrimeraOrdre^0,c
  9548  0017E0  2A51               	incf	??_EscriuPrimeraOrdre^0,f,c
  9549  0017E2  D001               	goto	u518
  9550  0017E4                     u500:
  9551  0017E4  6A51               	clrf	??_EscriuPrimeraOrdre^0,c
  9552  0017E6                     u518:
  9553  0017E6  D823               	call	PL70	;call to abstracted procedure
  9554  0017E8  0BFB               	andlw	-5
  9555  0017EA  1851               	xorwf	??_EscriuPrimeraOrdre^0,w,c
  9556  0017EC  6E8C               	movwf	140,c	;volatile
  9557                           
  9558                           ;LcTLCD.c: 286:   (LATDbits.LATD1 = (ordre & 0x02 ? 1 : 0));
  9559  0017EE  A252               	btfss	EscriuPrimeraOrdre@ordre^0,1,c
  9560  0017F0  D003               	goto	u520
  9561  0017F2  6A51               	clrf	??_EscriuPrimeraOrdre^0,c
  9562  0017F4  2A51               	incf	??_EscriuPrimeraOrdre^0,f,c
  9563  0017F6  D001               	goto	u538
  9564  0017F8                     u520:
  9565  0017F8  6A51               	clrf	??_EscriuPrimeraOrdre^0,c
  9566  0017FA                     u538:
  9567  0017FA  4651               	rlncf	??_EscriuPrimeraOrdre^0,f,c
  9568  0017FC  508C               	movf	140,w,c	;volatile
  9569  0017FE  1851               	xorwf	??_EscriuPrimeraOrdre^0,w,c
  9570  001800  0BFD               	andlw	-3
  9571  001802  1851               	xorwf	??_EscriuPrimeraOrdre^0,w,c
  9572  001804  6E8C               	movwf	140,c	;volatile
  9573                           
  9574                           ;LcTLCD.c: 287:   (LATDbits.LATD0 = (ordre & 0x01 ? 1 : 0));
  9575  001806  A052               	btfss	EscriuPrimeraOrdre@ordre^0,0,c
  9576  001808  D003               	goto	u540
  9577  00180A  6A51               	clrf	??_EscriuPrimeraOrdre^0,c
  9578  00180C  2A51               	incf	??_EscriuPrimeraOrdre^0,f,c
  9579  00180E  D001               	goto	u558
  9580  001810                     u540:
  9581  001810  6A51               	clrf	??_EscriuPrimeraOrdre^0,c
  9582  001812                     u558:
  9583  001812  508C               	movf	140,w,c	;volatile
  9584  001814  1851               	xorwf	??_EscriuPrimeraOrdre^0,w,c
  9585  001816  0BFE               	andlw	-2
  9586  001818  1851               	xorwf	??_EscriuPrimeraOrdre^0,w,c
  9587  00181A  6E8C               	movwf	140,c	;volatile
  9588                           
  9589                           ;LcTLCD.c: 288:  (LATDbits.LATD6 = 0);
  9590  00181C  9C8C               	bcf	140,6,c	;volatile
  9591  00181E  0012               	return		;funcret
  9592  001820                     __end_of_EscriuPrimeraOrdre:
  9593                           	callstack 0
  9594  001820                     PL50:
  9595                           	callstack 23
  9596  001820  9495               	bcf	149,2,c	;volatile
  9597  001822  9295               	bcf	149,1,c	;volatile
  9598  001824  9095               	bcf	149,0,c	;volatile
  9599  001826  988C               	bcf	140,4,c	;volatile
  9600  001828  9A8C               	bcf	140,5,c	;volatile
  9601  00182A  8C8C               	bsf	140,6,c	;volatile
  9602  00182C  0012               	return	
  9603  00182E                     __end_ofPL50:
  9604                           	callstack 0
  9605  00182E                     PL70:
  9606                           	callstack 27
  9607  00182E  4651               	rlncf	??_EscriuPrimeraOrdre^0,f,c
  9608  001830  4651               	rlncf	??_EscriuPrimeraOrdre^0,f,c
  9609  001832  508C               	movf	140,w,c	;volatile
  9610  001834  1851               	xorwf	??_EscriuPrimeraOrdre^0,w,c
  9611  001836  0012               	return	
  9612  001838                     __end_ofPL70:
  9613                           	callstack 0
  9614                           
  9615 ;; *************** function _CantaIR *****************
  9616 ;; Defined at:
  9617 ;;		line 230 in file "LcTLCD.c"
  9618 ;; Parameters:    Size  Location     Type
  9619 ;;  IR              1    wreg     unsigned char 
  9620 ;; Auto vars:     Size  Location     Type
  9621 ;;  IR              1    7[COMRAM] unsigned char 
  9622 ;; Return value:  Size  Location     Type
  9623 ;;                  1    wreg      void 
  9624 ;; Registers used:
  9625 ;;		wreg, status,2, status,0, cstack
  9626 ;; Tracked objects:
  9627 ;;		On entry : 0/0
  9628 ;;		On exit  : 0/0
  9629 ;;		Unchanged: 0/0
  9630 ;; Data sizes:     COMRAM   BANK0   BANK1
  9631 ;;      Params:         0       0       0
  9632 ;;      Locals:         1       0       0
  9633 ;;      Temps:          0       0       0
  9634 ;;      Totals:         1       0       0
  9635 ;;Total ram usage:        1 bytes
  9636 ;; Hardware stack levels used: 1
  9637 ;; Hardware stack levels required when called: 3
  9638 ;; This function calls:
  9639 ;;		_CantaPartAlta
  9640 ;;		_CantaPartBaixa
  9641 ;; This function is called by:
  9642 ;;		_LcInit
  9643 ;;		_LcClear
  9644 ;;		_LcCursorOn
  9645 ;;		_LcCursorOff
  9646 ;;		_LcGotoXY
  9647 ;;		_LcScroll
  9648 ;; This function uses a non-reentrant model
  9649 ;;
  9650                           
  9651                           	psect	text79
  9652  001F7E                     __ptext79:
  9653                           	callstack 0
  9654  001F7E                     _CantaIR:
  9655                           	callstack 23
  9656                           
  9657                           ;incstack = 0
  9658                           ;CantaIR@IR stored from wreg
  9659  001F7E  6E53               	movwf	CantaIR@IR^0,c
  9660                           
  9661                           ;LcTLCD.c: 231:  (TRISDbits.TRISD0 = TRISDbits.TRISD1 = TRISDbits.TRISD2 = TRISDbits.TRI
      +                          SD3 = 0);
  9662  001F80  9695               	bcf	149,3,c	;volatile
  9663                           
  9664                           ;LcTLCD.c: 232:  (LATDbits.LATD4 = 0);
  9665                           
  9666                           ;LcTLCD.c: 233:  (LATDbits.LATD5 = 0);
  9667                           
  9668                           ;LcTLCD.c: 234:  (LATDbits.LATD6 = 1);
  9669  001F82  EC10  F00C         	call	PL50	;call to abstracted procedure
  9670                           
  9671                           ;LcTLCD.c: 235:  CantaPartAlta(IR);
  9672  001F86  5053               	movf	CantaIR@IR^0,w,c
  9673  001F88  ECF2  F00C         	call	_CantaPartAlta
  9674                           
  9675                           ;LcTLCD.c: 236:  (LATDbits.LATD6 = 1);
  9676                           
  9677                           ;LcTLCD.c: 237:  (LATDbits.LATD6 = 0);
  9678                           
  9679                           ;LcTLCD.c: 238:  (LATDbits.LATD6 = 0);
  9680                           
  9681                           ;LcTLCD.c: 239:  (LATDbits.LATD6 = 1);
  9682  001F8C  EC24  F00E         	call	PL66	;call to abstracted procedure
  9683                           
  9684                           ;LcTLCD.c: 240:  CantaPartBaixa(IR);
  9685  001F90  5053               	movf	CantaIR@IR^0,w,c
  9686  001F92  ECBF  F00C         	call	_CantaPartBaixa
  9687                           
  9688                           ;LcTLCD.c: 241:  (LATDbits.LATD6 = 1);
  9689                           
  9690                           ;LcTLCD.c: 242:  (LATDbits.LATD6 = 0);
  9691                           
  9692                           ;LcTLCD.c: 243:  (TRISDbits.TRISD0 = TRISDbits.TRISD1 = TRISDbits.TRISD2 = TRISDbits.TRI
      +                          SD3 = 1);
  9693  001F96  EF1D  F00E         	goto	PL38	;call to abstracted procedure
  9694  001F9A                     __end_of_CantaIR:
  9695                           	callstack 0
  9696                           
  9697 ;; *************** function _CantaPartBaixa *****************
  9698 ;; Defined at:
  9699 ;;		line 221 in file "LcTLCD.c"
  9700 ;; Parameters:    Size  Location     Type
  9701 ;;  c               1    wreg     unsigned char 
  9702 ;; Auto vars:     Size  Location     Type
  9703 ;;  c               1    6[COMRAM] unsigned char 
  9704 ;; Return value:  Size  Location     Type
  9705 ;;                  1    wreg      void 
  9706 ;; Registers used:
  9707 ;;		wreg, status,2, status,0
  9708 ;; Tracked objects:
  9709 ;;		On entry : 0/0
  9710 ;;		On exit  : 0/0
  9711 ;;		Unchanged: 0/0
  9712 ;; Data sizes:     COMRAM   BANK0   BANK1
  9713 ;;      Params:         0       0       0
  9714 ;;      Locals:         1       0       0
  9715 ;;      Temps:          1       0       0
  9716 ;;      Totals:         2       0       0
  9717 ;;Total ram usage:        2 bytes
  9718 ;; Hardware stack levels used: 1
  9719 ;; Hardware stack levels required when called: 2
  9720 ;; This function calls:
  9721 ;;		Nothing
  9722 ;; This function is called by:
  9723 ;;		_CantaIR
  9724 ;;		_CantaData
  9725 ;; This function uses a non-reentrant model
  9726 ;;
  9727                           
  9728                           	psect	text80
  9729  00197E                     __ptext80:
  9730                           	callstack 0
  9731  00197E                     _CantaPartBaixa:
  9732                           	callstack 23
  9733                           
  9734                           ;incstack = 0
  9735                           ;CantaPartBaixa@c stored from wreg
  9736  00197E  6E52               	movwf	CantaPartBaixa@c^0,c
  9737                           
  9738                           ;LcTLCD.c: 222:   (LATDbits.LATD3 = (c & 0x08 ? 1 : 0));
  9739  001980  A652               	btfss	CantaPartBaixa@c^0,3,c
  9740  001982  D003               	goto	u2720
  9741  001984  6A51               	clrf	??_CantaPartBaixa^0,c
  9742  001986  2A51               	incf	??_CantaPartBaixa^0,f,c
  9743  001988  D001               	goto	u2738
  9744  00198A                     u2720:
  9745  00198A  6A51               	clrf	??_CantaPartBaixa^0,c
  9746  00198C                     u2738:
  9747  00198C  4651               	rlncf	??_CantaPartBaixa^0,f,c
  9748  00198E  D825               	call	PL68	;call to abstracted procedure
  9749  001990  0BF7               	andlw	-9
  9750  001992  1851               	xorwf	??_CantaPartBaixa^0,w,c
  9751  001994  6E8C               	movwf	140,c	;volatile
  9752                           
  9753                           ;LcTLCD.c: 223:   (LATDbits.LATD2 = (c & 0x04 ? 1 : 0));
  9754  001996  A452               	btfss	CantaPartBaixa@c^0,2,c
  9755  001998  D003               	goto	u2740
  9756  00199A  6A51               	clrf	??_CantaPartBaixa^0,c
  9757  00199C  2A51               	incf	??_CantaPartBaixa^0,f,c
  9758  00199E  D001               	goto	u2758
  9759  0019A0                     u2740:
  9760  0019A0  6A51               	clrf	??_CantaPartBaixa^0,c
  9761  0019A2                     u2758:
  9762  0019A2  D81B               	call	PL68	;call to abstracted procedure
  9763  0019A4  0BFB               	andlw	-5
  9764  0019A6  1851               	xorwf	??_CantaPartBaixa^0,w,c
  9765  0019A8  6E8C               	movwf	140,c	;volatile
  9766                           
  9767                           ;LcTLCD.c: 224:   (LATDbits.LATD1 = (c & 0x02 ? 1 : 0));
  9768  0019AA  A252               	btfss	CantaPartBaixa@c^0,1,c
  9769  0019AC  D003               	goto	u2760
  9770  0019AE  6A51               	clrf	??_CantaPartBaixa^0,c
  9771  0019B0  2A51               	incf	??_CantaPartBaixa^0,f,c
  9772  0019B2  D001               	goto	u2778
  9773  0019B4                     u2760:
  9774  0019B4  6A51               	clrf	??_CantaPartBaixa^0,c
  9775  0019B6                     u2778:
  9776  0019B6  4651               	rlncf	??_CantaPartBaixa^0,f,c
  9777  0019B8  508C               	movf	140,w,c	;volatile
  9778  0019BA  1851               	xorwf	??_CantaPartBaixa^0,w,c
  9779  0019BC  0BFD               	andlw	-3
  9780  0019BE  1851               	xorwf	??_CantaPartBaixa^0,w,c
  9781  0019C0  6E8C               	movwf	140,c	;volatile
  9782                           
  9783                           ;LcTLCD.c: 225:   (LATDbits.LATD0 = (c & 0x01 ? 1 : 0));
  9784  0019C2  A052               	btfss	CantaPartBaixa@c^0,0,c
  9785  0019C4  D003               	goto	u2780
  9786  0019C6  6A51               	clrf	??_CantaPartBaixa^0,c
  9787  0019C8  2A51               	incf	??_CantaPartBaixa^0,f,c
  9788  0019CA  D001               	goto	u2798
  9789  0019CC                     u2780:
  9790  0019CC  6A51               	clrf	??_CantaPartBaixa^0,c
  9791  0019CE                     u2798:
  9792  0019CE  508C               	movf	140,w,c	;volatile
  9793  0019D0  1851               	xorwf	??_CantaPartBaixa^0,w,c
  9794  0019D2  0BFE               	andlw	-2
  9795  0019D4  1851               	xorwf	??_CantaPartBaixa^0,w,c
  9796  0019D6  6E8C               	movwf	140,c	;volatile
  9797  0019D8  0012               	return		;funcret
  9798  0019DA                     __end_of_CantaPartBaixa:
  9799                           	callstack 0
  9800  0019DA                     PL68:
  9801                           	callstack 23
  9802  0019DA  4651               	rlncf	??_CantaPartBaixa^0,f,c
  9803  0019DC  4651               	rlncf	??_CantaPartBaixa^0,f,c
  9804  0019DE  508C               	movf	140,w,c	;volatile
  9805  0019E0  1851               	xorwf	??_CantaPartBaixa^0,w,c
  9806  0019E2  0012               	return	
  9807  0019E4                     __end_ofPL68:
  9808                           	callstack 0
  9809                           
  9810 ;; *************** function _CantaPartAlta *****************
  9811 ;; Defined at:
  9812 ;;		line 214 in file "LcTLCD.c"
  9813 ;; Parameters:    Size  Location     Type
  9814 ;;  c               1    wreg     unsigned char 
  9815 ;; Auto vars:     Size  Location     Type
  9816 ;;  c               1    6[COMRAM] unsigned char 
  9817 ;; Return value:  Size  Location     Type
  9818 ;;                  1    wreg      void 
  9819 ;; Registers used:
  9820 ;;		wreg, status,2, status,0
  9821 ;; Tracked objects:
  9822 ;;		On entry : 0/0
  9823 ;;		On exit  : 0/0
  9824 ;;		Unchanged: 0/0
  9825 ;; Data sizes:     COMRAM   BANK0   BANK1
  9826 ;;      Params:         0       0       0
  9827 ;;      Locals:         1       0       0
  9828 ;;      Temps:          1       0       0
  9829 ;;      Totals:         2       0       0
  9830 ;;Total ram usage:        2 bytes
  9831 ;; Hardware stack levels used: 1
  9832 ;; Hardware stack levels required when called: 2
  9833 ;; This function calls:
  9834 ;;		Nothing
  9835 ;; This function is called by:
  9836 ;;		_CantaIR
  9837 ;;		_CantaData
  9838 ;; This function uses a non-reentrant model
  9839 ;;
  9840                           
  9841                           	psect	text81
  9842  0019E4                     __ptext81:
  9843                           	callstack 0
  9844  0019E4                     _CantaPartAlta:
  9845                           	callstack 23
  9846                           
  9847                           ;incstack = 0
  9848                           ;CantaPartAlta@c stored from wreg
  9849  0019E4  6E52               	movwf	CantaPartAlta@c^0,c
  9850                           
  9851                           ;LcTLCD.c: 215:   (LATDbits.LATD3 = (c & 0x80 ? 1 : 0));
  9852  0019E6  AE52               	btfss	CantaPartAlta@c^0,7,c
  9853  0019E8  D003               	goto	u2640
  9854  0019EA  6A51               	clrf	??_CantaPartAlta^0,c
  9855  0019EC  2A51               	incf	??_CantaPartAlta^0,f,c
  9856  0019EE  D001               	goto	u2658
  9857  0019F0                     u2640:
  9858  0019F0  6A51               	clrf	??_CantaPartAlta^0,c
  9859  0019F2                     u2658:
  9860  0019F2  4651               	rlncf	??_CantaPartAlta^0,f,c
  9861  0019F4  D825               	call	PL74	;call to abstracted procedure
  9862  0019F6  0BF7               	andlw	-9
  9863  0019F8  1851               	xorwf	??_CantaPartAlta^0,w,c
  9864  0019FA  6E8C               	movwf	140,c	;volatile
  9865                           
  9866                           ;LcTLCD.c: 216:   (LATDbits.LATD2 = (c & 0x40 ? 1 : 0));
  9867  0019FC  AC52               	btfss	CantaPartAlta@c^0,6,c
  9868  0019FE  D003               	goto	u2660
  9869  001A00  6A51               	clrf	??_CantaPartAlta^0,c
  9870  001A02  2A51               	incf	??_CantaPartAlta^0,f,c
  9871  001A04  D001               	goto	u2678
  9872  001A06                     u2660:
  9873  001A06  6A51               	clrf	??_CantaPartAlta^0,c
  9874  001A08                     u2678:
  9875  001A08  D81B               	call	PL74	;call to abstracted procedure
  9876  001A0A  0BFB               	andlw	-5
  9877  001A0C  1851               	xorwf	??_CantaPartAlta^0,w,c
  9878  001A0E  6E8C               	movwf	140,c	;volatile
  9879                           
  9880                           ;LcTLCD.c: 217:   (LATDbits.LATD1 = (c & 0x20 ? 1 : 0));
  9881  001A10  AA52               	btfss	CantaPartAlta@c^0,5,c
  9882  001A12  D003               	goto	u2680
  9883  001A14  6A51               	clrf	??_CantaPartAlta^0,c
  9884  001A16  2A51               	incf	??_CantaPartAlta^0,f,c
  9885  001A18  D001               	goto	u2698
  9886  001A1A                     u2680:
  9887  001A1A  6A51               	clrf	??_CantaPartAlta^0,c
  9888  001A1C                     u2698:
  9889  001A1C  4651               	rlncf	??_CantaPartAlta^0,f,c
  9890  001A1E  508C               	movf	140,w,c	;volatile
  9891  001A20  1851               	xorwf	??_CantaPartAlta^0,w,c
  9892  001A22  0BFD               	andlw	-3
  9893  001A24  1851               	xorwf	??_CantaPartAlta^0,w,c
  9894  001A26  6E8C               	movwf	140,c	;volatile
  9895                           
  9896                           ;LcTLCD.c: 218:   (LATDbits.LATD0 = (c & 0x10 ? 1 : 0));
  9897  001A28  A852               	btfss	CantaPartAlta@c^0,4,c
  9898  001A2A  D003               	goto	u2700
  9899  001A2C  6A51               	clrf	??_CantaPartAlta^0,c
  9900  001A2E  2A51               	incf	??_CantaPartAlta^0,f,c
  9901  001A30  D001               	goto	u2718
  9902  001A32                     u2700:
  9903  001A32  6A51               	clrf	??_CantaPartAlta^0,c
  9904  001A34                     u2718:
  9905  001A34  508C               	movf	140,w,c	;volatile
  9906  001A36  1851               	xorwf	??_CantaPartAlta^0,w,c
  9907  001A38  0BFE               	andlw	-2
  9908  001A3A  1851               	xorwf	??_CantaPartAlta^0,w,c
  9909  001A3C  6E8C               	movwf	140,c	;volatile
  9910  001A3E  0012               	return		;funcret
  9911  001A40                     __end_of_CantaPartAlta:
  9912                           	callstack 0
  9913  001A40                     PL74:
  9914                           	callstack 23
  9915  001A40  4651               	rlncf	??_CantaPartAlta^0,f,c
  9916  001A42  4651               	rlncf	??_CantaPartAlta^0,f,c
  9917  001A44  508C               	movf	140,w,c	;volatile
  9918  001A46  1851               	xorwf	??_CantaPartAlta^0,w,c
  9919  001A48  0012               	return	
  9920  001A4A                     __end_ofPL74:
  9921                           	callstack 0
  9922                           
  9923 ;; *************** function _KeypadMotor *****************
  9924 ;; Defined at:
  9925 ;;		line 46 in file "keypad.c"
  9926 ;; Parameters:    Size  Location     Type
  9927 ;;		None
  9928 ;; Auto vars:     Size  Location     Type
  9929 ;;		None
  9930 ;; Return value:  Size  Location     Type
  9931 ;;                  1    wreg      void 
  9932 ;; Registers used:
  9933 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9934 ;; Tracked objects:
  9935 ;;		On entry : 0/0
  9936 ;;		On exit  : 0/0
  9937 ;;		Unchanged: 0/0
  9938 ;; Data sizes:     COMRAM   BANK0   BANK1
  9939 ;;      Params:         0       0       0
  9940 ;;      Locals:         0       0       0
  9941 ;;      Temps:          2       0       0
  9942 ;;      Totals:         2       0       0
  9943 ;;Total ram usage:        2 bytes
  9944 ;; Hardware stack levels used: 1
  9945 ;; Hardware stack levels required when called: 3
  9946 ;; This function calls:
  9947 ;;		_TiGetTics
  9948 ;;		_TiResetTics
  9949 ;; This function is called by:
  9950 ;;		_main
  9951 ;; This function uses a non-reentrant model
  9952 ;;
  9953                           
  9954                           	psect	text82
  9955  0012BA                     __ptext82:
  9956                           	callstack 0
  9957  0012BA                     _KeypadMotor:
  9958                           	callstack 27
  9959                           
  9960                           ;keypad.c: 48:     switch (state){
  9961                           
  9962                           ;incstack = 0
  9963  0012BA  D070               	goto	l4657
  9964  0012BC                     l146:
  9965                           
  9966                           ;keypad.c: 51:             if (!!(PORTBbits.RB0 && PORTBbits.RB1 && PORTBbits.RB2)){
  9967  0012BC  B081               	btfsc	129,0,c	;volatile
  9968  0012BE  A281               	btfss	129,1,c	;volatile
  9969  0012C0  D00A               	goto	l4585
  9970  0012C2  A481               	btfss	129,2,c	;volatile
  9971  0012C4  D008               	goto	l4585
  9972                           
  9973                           ;keypad.c: 52:                 LATBbits.LATB3=0;
  9974  0012C6  968A               	bcf	138,3,c	;volatile
  9975                           
  9976                           ;keypad.c: 53:                 LATBbits.LATB4=1;
  9977  0012C8  888A               	bsf	138,4,c	;volatile
  9978                           
  9979                           ;keypad.c: 54:                 LATBbits.LATB5=1;
  9980  0012CA  8A8A               	bsf	138,5,c	;volatile
  9981                           
  9982                           ;keypad.c: 55:                 LATBbits.LATB6=1;
  9983  0012CC  8C8A               	bsf	138,6,c	;volatile
  9984                           
  9985                           ;keypad.c: 56:                 state=1;
  9986  0012CE  0E01               	movlw	1
  9987  0012D0  6E42               	movwf	_state^0,c
  9988                           
  9989                           ;keypad.c: 57:                 row=0;
  9990  0012D2  6A4A               	clrf	_row^0,c
  9991                           
  9992                           ;keypad.c: 58:             }else{
  9993  0012D4  0012               	return	
  9994  0012D6                     l4585:
  9995                           
  9996                           ;keypad.c: 59:                 state=4;
  9997  0012D6  0E04               	movlw	4
  9998  0012D8  6E42               	movwf	_state^0,c
  9999  0012DA  0C04               	retlw	4
 10000  0012DC                     l150:
 10001                           
 10002                           ;keypad.c: 63:            if (!!(PORTBbits.RB0 && PORTBbits.RB1 && PORTBbits.RB2)){
 10003  0012DC  B081               	btfsc	129,0,c	;volatile
 10004  0012DE  A281               	btfss	129,1,c	;volatile
 10005  0012E0  D7FA               	goto	l4585
 10006  0012E2  A481               	btfss	129,2,c	;volatile
 10007  0012E4  D7F8               	goto	l4585
 10008                           
 10009                           ;keypad.c: 64:                 LATBbits.LATB3=1;
 10010  0012E6  868A               	bsf	138,3,c	;volatile
 10011                           
 10012                           ;keypad.c: 65:                 LATBbits.LATB4=0;
 10013  0012E8  988A               	bcf	138,4,c	;volatile
 10014                           
 10015                           ;keypad.c: 66:                 LATBbits.LATB5=1;
 10016  0012EA  8A8A               	bsf	138,5,c	;volatile
 10017                           
 10018                           ;keypad.c: 67:                 LATBbits.LATB6=1;
 10019  0012EC  8C8A               	bsf	138,6,c	;volatile
 10020                           
 10021                           ;keypad.c: 68:                 state=2;
 10022  0012EE  0E02               	movlw	2
 10023  0012F0  6E42               	movwf	_state^0,c
 10024                           
 10025                           ;keypad.c: 69:                 row=1;
 10026  0012F2  0E01               	movlw	1
 10027  0012F4  6E4A               	movwf	_row^0,c
 10028                           
 10029                           ;keypad.c: 71:             }else{
 10030  0012F6  0C01               	retlw	1
 10031  0012F8                     l153:
 10032                           
 10033                           ;keypad.c: 76:             if (!!(PORTBbits.RB0 && PORTBbits.RB1 && PORTBbits.RB2)){
 10034  0012F8  B081               	btfsc	129,0,c	;volatile
 10035  0012FA  A281               	btfss	129,1,c	;volatile
 10036  0012FC  D7EC               	goto	l4585
 10037  0012FE  A481               	btfss	129,2,c	;volatile
 10038  001300  D7EA               	goto	l4585
 10039                           
 10040                           ;keypad.c: 77:                 LATBbits.LATB3=1;
 10041  001302  868A               	bsf	138,3,c	;volatile
 10042                           
 10043                           ;keypad.c: 78:                 LATBbits.LATB4=1;
 10044  001304  888A               	bsf	138,4,c	;volatile
 10045                           
 10046                           ;keypad.c: 79:                 LATBbits.LATB5=0;
 10047  001306  9A8A               	bcf	138,5,c	;volatile
 10048                           
 10049                           ;keypad.c: 80:                 LATBbits.LATB6=1;
 10050  001308  8C8A               	bsf	138,6,c	;volatile
 10051                           
 10052                           ;keypad.c: 81:                 state=3;
 10053  00130A  0E03               	movlw	3
 10054  00130C  6E42               	movwf	_state^0,c
 10055                           
 10056                           ;keypad.c: 82:                 row=2;
 10057  00130E  0E02               	movlw	2
 10058  001310  6E4A               	movwf	_row^0,c
 10059                           
 10060                           ;keypad.c: 83:             }else{
 10061  001312  0C02               	retlw	2
 10062  001314                     l156:
 10063                           
 10064                           ;keypad.c: 88:             if (!!(PORTBbits.RB0 && PORTBbits.RB1 && PORTBbits.RB2)){
 10065  001314  B081               	btfsc	129,0,c	;volatile
 10066  001316  A281               	btfss	129,1,c	;volatile
 10067  001318  D7DE               	goto	l4585
 10068  00131A  A481               	btfss	129,2,c	;volatile
 10069  00131C  D7DC               	goto	l4585
 10070                           
 10071                           ;keypad.c: 89:                 LATBbits.LATB3=1;
 10072  00131E  868A               	bsf	138,3,c	;volatile
 10073                           
 10074                           ;keypad.c: 90:                 LATBbits.LATB4=1;
 10075  001320  888A               	bsf	138,4,c	;volatile
 10076                           
 10077                           ;keypad.c: 91:                 LATBbits.LATB5=1;
 10078  001322  8A8A               	bsf	138,5,c	;volatile
 10079                           
 10080                           ;keypad.c: 92:                 LATBbits.LATB6=0;
 10081  001324  9C8A               	bcf	138,6,c	;volatile
 10082                           
 10083                           ;keypad.c: 93:                 row=3;
 10084  001326  0E03               	movlw	3
 10085  001328  6E4A               	movwf	_row^0,c
 10086  00132A                     l4615:
 10087                           
 10088                           ;keypad.c: 94:                 state=0;
 10089  00132A  6A42               	clrf	_state^0,c
 10090                           
 10091                           ;keypad.c: 95:             }else{
 10092  00132C  0012               	return	
 10093  00132E                     l4619:
 10094                           
 10095                           ;keypad.c: 100:             state=5;
 10096  00132E  0E05               	movlw	5
 10097  001330  6E42               	movwf	_state^0,c
 10098                           
 10099                           ;keypad.c: 101:             TiResetTics(timerBounces);
 10100  001332  5049               	movf	_timerBounces^0,w,c
 10101  001334  EF92  F00F         	goto	_TiResetTics
 10102  001338                     l4623:
 10103                           
 10104                           ;keypad.c: 104:             if (TiGetTics(timerBounces) >= 25){
 10105  001338  5049               	movf	_timerBounces^0,w,c
 10106  00133A  ECF8  F00E         	call	_TiGetTics
 10107  00133E  BE52               	btfsc	(?_TiGetTics+1)^0,7,c
 10108  001340  0012               	return	
 10109  001342  5052               	movf	(?_TiGetTics+1)^0,w,c
 10110  001344  E104               	bnz	u3570
 10111  001346  0E19               	movlw	25
 10112  001348  5C51               	subwf	?_TiGetTics^0,w,c
 10113  00134A  A0D8               	btfss	status,0,c
 10114  00134C  0012               	return	
 10115  00134E                     u3570:
 10116                           
 10117                           ;keypad.c: 105:                 if (!!(PORTBbits.RB0 && PORTBbits.RB1 && PORTBbits.RB2))
      +                          {
 10118  00134E  B081               	btfsc	129,0,c	;volatile
 10119  001350  A281               	btfss	129,1,c	;volatile
 10120  001352  D002               	goto	l4633
 10121  001354  B481               	btfsc	129,2,c	;volatile
 10122  001356  D7E9               	goto	l4615
 10123  001358                     l4633:
 10124                           
 10125                           ;keypad.c: 108:                     pressed = 1;
 10126  001358  0E01               	movlw	1
 10127  00135A  6E45               	movwf	_pressed^0,c
 10128                           
 10129                           ;keypad.c: 109:                     state = 6;
 10130  00135C  D036               	goto	PL88	;call to abstracted procedure
 10131  00135E                     l164:
 10132                           
 10133                           ;keypad.c: 114:             if (!!(PORTBbits.RB0 && PORTBbits.RB1 && PORTBbits.RB2)){
 10134  00135E  B081               	btfsc	129,0,c	;volatile
 10135  001360  A281               	btfss	129,1,c	;volatile
 10136  001362  0012               	return	
 10137  001364  A481               	btfss	129,2,c	;volatile
 10138  001366  0012               	return	
 10139                           
 10140                           ;keypad.c: 115:                 TiResetTics(timerBounces);
 10141  001368  5049               	movf	_timerBounces^0,w,c
 10142  00136A  EC92  F00F         	call	_TiResetTics
 10143                           
 10144                           ;keypad.c: 116:                 state = 7;
 10145  00136E  0E07               	movlw	7
 10146  001370  6E42               	movwf	_state^0,c
 10147  001372  0C07               	retlw	7
 10148  001374                     l4643:
 10149                           
 10150                           ;keypad.c: 120:             if (TiGetTics(timerBounces) >= 25){
 10151  001374  5049               	movf	_timerBounces^0,w,c
 10152  001376  ECF8  F00E         	call	_TiGetTics
 10153  00137A  BE52               	btfsc	(?_TiGetTics+1)^0,7,c
 10154  00137C  0012               	return	
 10155  00137E  5052               	movf	(?_TiGetTics+1)^0,w,c
 10156  001380  E104               	bnz	u3640
 10157  001382  0E19               	movlw	25
 10158  001384  5C51               	subwf	?_TiGetTics^0,w,c
 10159  001386  A0D8               	btfss	status,0,c
 10160  001388  0012               	return	
 10161  00138A                     u3640:
 10162                           
 10163                           ;keypad.c: 121:                 if (!!(PORTBbits.RB0 && PORTBbits.RB1 && PORTBbits.RB2))
      +                          {
 10164  00138A  B081               	btfsc	129,0,c	;volatile
 10165  00138C  A281               	btfss	129,1,c	;volatile
 10166  00138E  D01D               	goto	PL88
 10167  001390  A481               	btfss	129,2,c	;volatile
 10168  001392  D01B               	goto	PL88
 10169                           
 10170                           ;keypad.c: 122:                     pressed = 0;
 10171  001394  6A45               	clrf	_pressed^0,c
 10172                           
 10173                           ;keypad.c: 123:                     state = 0;
 10174  001396  6A42               	clrf	_state^0,c
 10175                           
 10176                           ;keypad.c: 124:                 } else {
 10177  001398  0012               	return	
 10178  00139A                     l4653:
 10179                           
 10180                           ;keypad.c: 125:                     state = 6;
 10181  00139A  D017               	goto	PL88	;call to abstracted procedure
 10182  00139C                     l4657:
 10183  00139C  5042               	movf	_state^0,w,c
 10184  00139E  6E58               	movwf	??_KeypadMotor^0,c
 10185  0013A0  6A59               	clrf	(??_KeypadMotor+1)^0,c
 10186                           
 10187                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 10188                           ; Switch size 1, requested type "space"
 10189                           ; Number of cases is 1, Range of values is 0 to 0
 10190                           ; switch strategies available:
 10191                           ; Name         Instructions Cycles
 10192                           ; simple_byte            4     3 (average)
 10193                           ;	Chosen strategy is simple_byte
 10194  0013A2  5059               	movf	(??_KeypadMotor+1)^0,w,c
 10195  0013A4  A4D8               	btfss	status,2,c
 10196  0013A6  0012               	return	
 10197                           
 10198                           ; Switch size 1, requested type "space"
 10199                           ; Number of cases is 8, Range of values is 0 to 7
 10200                           ; switch strategies available:
 10201                           ; Name         Instructions Cycles
 10202                           ; simple_byte           25    13 (average)
 10203                           ;	Chosen strategy is simple_byte
 10204  0013A8  5058               	movf	??_KeypadMotor^0,w,c
 10205  0013AA  E088               	bz	l146
 10206  0013AC  0A01               	xorlw	1	; case 1
 10207  0013AE  E096               	bz	l150
 10208  0013B0  0A03               	xorlw	3	; case 2
 10209  0013B2  E0A2               	bz	l153
 10210  0013B4  0A01               	xorlw	1	; case 3
 10211  0013B6  E0AE               	bz	l156
 10212  0013B8  0A07               	xorlw	7	; case 4
 10213  0013BA  E0B9               	bz	l4619
 10214  0013BC  0A01               	xorlw	1	; case 5
 10215  0013BE  E0BC               	bz	l4623
 10216  0013C0  0A03               	xorlw	3	; case 6
 10217  0013C2  E0CD               	bz	l164
 10218  0013C4  0A01               	xorlw	1	; case 7
 10219  0013C6  E0D6               	bz	l4643
 10220  0013C8  0012               	return		;funcret
 10221  0013CA                     __end_of_KeypadMotor:
 10222                           	callstack 0
 10223  0013CA                     PL88:
 10224                           	callstack 27
 10225  0013CA  0E06               	movlw	6
 10226  0013CC  6E42               	movwf	_state^0,c
 10227  0013CE  0C06               	retlw	6
 10228  0013D0                     __end_ofPL88:
 10229                           	callstack 0
 10230                           
 10231 ;; *************** function _TiResetTics *****************
 10232 ;; Defined at:
 10233 ;;		line 59 in file "TTimer.c"
 10234 ;; Parameters:    Size  Location     Type
 10235 ;;  Handle          1    wreg     unsigned char 
 10236 ;; Auto vars:     Size  Location     Type
 10237 ;;  Handle          1    5[COMRAM] unsigned char 
 10238 ;; Return value:  Size  Location     Type
 10239 ;;                  1    wreg      void 
 10240 ;; Registers used:
 10241 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 10242 ;; Tracked objects:
 10243 ;;		On entry : 0/0
 10244 ;;		On exit  : 0/0
 10245 ;;		Unchanged: 0/0
 10246 ;; Data sizes:     COMRAM   BANK0   BANK1
 10247 ;;      Params:         0       0       0
 10248 ;;      Locals:         1       0       0
 10249 ;;      Temps:          0       0       0
 10250 ;;      Totals:         1       0       0
 10251 ;;Total ram usage:        1 bytes
 10252 ;; Hardware stack levels used: 1
 10253 ;; Hardware stack levels required when called: 2
 10254 ;; This function calls:
 10255 ;;		Nothing
 10256 ;; This function is called by:
 10257 ;;		_KeypadMotor
 10258 ;;		_SMSMotor
 10259 ;;		_KeSetMode
 10260 ;;		_Espera
 10261 ;;		_WaitForBusy
 10262 ;;		_audioMotor
 10263 ;;		_startSong
 10264 ;;		_menuMotor
 10265 ;;		_btMotor
 10266 ;;		_btSendByte
 10267 ;;		_timeMotor
 10268 ;;		_startTimer
 10269 ;; This function uses a non-reentrant model
 10270 ;;
 10271                           
 10272                           	psect	text83
 10273  001F24                     __ptext83:
 10274                           	callstack 0
 10275  001F24                     _TiResetTics:
 10276                           	callstack 25
 10277                           
 10278                           ;incstack = 0
 10279                           ;TiResetTics@Handle stored from wreg
 10280  001F24  6E51               	movwf	TiResetTics@Handle^0,c
 10281                           
 10282                           ;TTimer.c: 63:     s_Timers[Handle].h_initialTics=h_Tics;
 10283  001F26  5051               	movf	TiResetTics@Handle^0,w,c
 10284  001F28  D805               	call	PL28	;call to abstracted procedure
 10285  001F2A  C00F  FFDE         	movff	_h_Tics,postinc2
 10286  001F2E  C010  FFDD         	movff	_h_Tics+1,postdec2
 10287  001F32  0012               	return		;funcret
 10288  001F34                     __end_of_TiResetTics:
 10289                           	callstack 0
 10290  001F34                     PL28:
 10291                           	callstack 23
 10292  001F34  0D03               	mullw	3
 10293  001F36  0E90               	movlw	low _s_Timers
 10294  001F38  24F3               	addwf	243,w,c
 10295  001F3A  6ED9               	movwf	fsr2l,c
 10296  001F3C  0E01               	movlw	high _s_Timers
 10297  001F3E  20F4               	addwfc	prodh,w,c
 10298  001F40  6EDA               	movwf	fsr2h,c
 10299  001F42  0012               	return	
 10300  001F44                     __end_ofPL28:
 10301                           	callstack 0
 10302                           
 10303 ;; *************** function _TiGetTics *****************
 10304 ;; Defined at:
 10305 ;;		line 65 in file "TTimer.c"
 10306 ;; Parameters:    Size  Location     Type
 10307 ;;  Handle          1    wreg     unsigned char 
 10308 ;; Auto vars:     Size  Location     Type
 10309 ;;  Handle          1    9[COMRAM] unsigned char 
 10310 ;;  actual          2   10[COMRAM] volatile unsigned int 
 10311 ;; Return value:  Size  Location     Type
 10312 ;;                  2    5[COMRAM] int 
 10313 ;; Registers used:
 10314 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 10315 ;; Tracked objects:
 10316 ;;		On entry : 0/0
 10317 ;;		On exit  : 0/0
 10318 ;;		Unchanged: 0/0
 10319 ;; Data sizes:     COMRAM   BANK0   BANK1
 10320 ;;      Params:         2       0       0
 10321 ;;      Locals:         3       0       0
 10322 ;;      Temps:          2       0       0
 10323 ;;      Totals:         7       0       0
 10324 ;;Total ram usage:        7 bytes
 10325 ;; Hardware stack levels used: 1
 10326 ;; Hardware stack levels required when called: 2
 10327 ;; This function calls:
 10328 ;;		Nothing
 10329 ;; This function is called by:
 10330 ;;		_KeypadMotor
 10331 ;;		_SMSMotor
 10332 ;;		_Espera
 10333 ;;		_WaitForBusy
 10334 ;;		_audioMotor
 10335 ;;		_menuMotor
 10336 ;;		_btMotor
 10337 ;;		_timeMotor
 10338 ;; This function uses a non-reentrant model
 10339 ;;
 10340                           
 10341                           	psect	text84
 10342  001DF0                     __ptext84:
 10343                           	callstack 0
 10344  001DF0                     _TiGetTics:
 10345                           	callstack 24
 10346                           
 10347                           ;incstack = 0
 10348                           ;TiGetTics@Handle stored from wreg
 10349  001DF0  6E55               	movwf	TiGetTics@Handle^0,c
 10350                           
 10351                           ;TTimer.c: 69:     volatile unsigned int actual;;TTimer.c: 70:     actual=h_Tics;
 10352  001DF2  C00F  F056         	movff	_h_Tics,TiGetTics@actual	;volatile
 10353  001DF6  C010  F057         	movff	_h_Tics+1,TiGetTics@actual+1	;volatile
 10354                           
 10355                           ;TTimer.c: 71:     return (actual-(s_Timers[Handle].h_initialTics));
 10356  001DFA  5055               	movf	TiGetTics@Handle^0,w,c
 10357  001DFC  EC9A  F00F         	call	PL28	;call to abstracted procedure
 10358  001E00  CFDE F053          	movff	postinc2,??_TiGetTics
 10359  001E04  CFDD F054          	movff	postdec2,??_TiGetTics+1
 10360  001E08  5053               	movf	??_TiGetTics^0,w,c
 10361  001E0A  5C56               	subwf	TiGetTics@actual^0,w,c	;volatile
 10362  001E0C  6E51               	movwf	?_TiGetTics^0,c
 10363  001E0E  5054               	movf	(??_TiGetTics+1)^0,w,c
 10364  001E10  5857               	subwfb	(TiGetTics@actual+1)^0,w,c	;volatile
 10365  001E12  6E52               	movwf	(?_TiGetTics+1)^0,c
 10366  001E14  0012               	return		;funcret
 10367  001E16                     __end_of_TiGetTics:
 10368                           	callstack 0
 10369                           
 10370 ;; *************** function _RSI_High *****************
 10371 ;; Defined at:
 10372 ;;		line 29 in file "main.c"
 10373 ;; Parameters:    Size  Location     Type
 10374 ;;		None
 10375 ;; Auto vars:     Size  Location     Type
 10376 ;;		None
 10377 ;; Return value:  Size  Location     Type
 10378 ;;                  1    wreg      void 
 10379 ;; Registers used:
 10380 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 10381 ;; Tracked objects:
 10382 ;;		On entry : 0/0
 10383 ;;		On exit  : 0/0
 10384 ;;		Unchanged: 0/0
 10385 ;; Data sizes:     COMRAM   BANK0   BANK1
 10386 ;;      Params:         0       0       0
 10387 ;;      Locals:         0       0       0
 10388 ;;      Temps:          4       0       0
 10389 ;;      Totals:         4       0       0
 10390 ;;Total ram usage:        4 bytes
 10391 ;; Hardware stack levels used: 1
 10392 ;; Hardware stack levels required when called: 1
 10393 ;; This function calls:
 10394 ;;		__TiRSITimer
 10395 ;; This function is called by:
 10396 ;;		Interrupt level 2
 10397 ;; This function uses a non-reentrant model
 10398 ;;
 10399                           
 10400                           	psect	intcode
 10401  000008                     __pintcode:
 10402                           	callstack 0
 10403  000008                     _RSI_High:
 10404                           	callstack 23
 10405                           
 10406                           ;incstack = 0
 10407  000008  8277               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 10408  00000A  CFD9 F04D          	movff	fsr2l,??_RSI_High
 10409  00000E  CFDA F04E          	movff	fsr2h,??_RSI_High+1
 10410  000012  CFF3 F04F          	movff	prodl,??_RSI_High+2
 10411  000016  CFF4 F050          	movff	prodh,??_RSI_High+3
 10412                           
 10413                           ;main.c: 31:         btMotor();
 10414  00001A  ECCC  F00D         	call	__TiRSITimer	;wreg free
 10415  00001E  C050  FFF4         	movff	??_RSI_High+3,prodh
 10416  000022  C04F  FFF3         	movff	??_RSI_High+2,prodl
 10417  000026  C04E  FFDA         	movff	??_RSI_High+1,fsr2h
 10418  00002A  C04D  FFD9         	movff	??_RSI_High,fsr2l
 10419  00002E  9277               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 10420  000030  0011               	retfie		f
 10421  000032                     __end_of_RSI_High:
 10422                           	callstack 0
 10423                           
 10424 ;; *************** function __TiRSITimer *****************
 10425 ;; Defined at:
 10426 ;;		line 37 in file "TTimer.c"
 10427 ;; Parameters:    Size  Location     Type
 10428 ;;		None
 10429 ;; Auto vars:     Size  Location     Type
 10430 ;;		None
 10431 ;; Return value:  Size  Location     Type
 10432 ;;                  1    wreg      void 
 10433 ;; Registers used:
 10434 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 10435 ;; Tracked objects:
 10436 ;;		On entry : 0/0
 10437 ;;		On exit  : 0/0
 10438 ;;		Unchanged: 0/0
 10439 ;; Data sizes:     COMRAM   BANK0   BANK1
 10440 ;;      Params:         0       0       0
 10441 ;;      Locals:         0       0       0
 10442 ;;      Temps:          1       0       0
 10443 ;;      Totals:         1       0       0
 10444 ;;Total ram usage:        1 bytes
 10445 ;; Hardware stack levels used: 1
 10446 ;; This function calls:
 10447 ;;		Nothing
 10448 ;; This function is called by:
 10449 ;;		_RSI_High
 10450 ;; This function uses a non-reentrant model
 10451 ;;
 10452                           
 10453                           	psect	text86
 10454  001B98                     __ptext86:
 10455                           	callstack 0
 10456  001B98                     __TiRSITimer:
 10457                           	callstack 23
 10458                           
 10459                           ;TTimer.c: 43:     TMR0H = 0xDF;
 10460                           
 10461                           ;incstack = 0
 10462  001B98  0EDF               	movlw	223
 10463  001B9A  6ED7               	movwf	215,c	;volatile
 10464                           
 10465                           ;TTimer.c: 44:     TMR0L = 0x73;
 10466  001B9C  0E73               	movlw	115
 10467  001B9E  6ED6               	movwf	214,c	;volatile
 10468                           
 10469                           ;TTimer.c: 45:     INTCONbits.TMR0IF = 0;
 10470  001BA0  94F2               	bcf	242,2,c	;volatile
 10471                           
 10472                           ;TTimer.c: 46:     h_Tics++;
 10473  001BA2  4A0F               	infsnz	_h_Tics^0,f,c
 10474  001BA4  2A10               	incf	(_h_Tics+1)^0,f,c
 10475                           
 10476                           ;TTimer.c: 48:     if (h_Tics>=30000) {
 10477  001BA6  0E30               	movlw	48
 10478  001BA8  5C0F               	subwf	_h_Tics^0,w,c
 10479  001BAA  0E75               	movlw	117
 10480  001BAC  5810               	subwfb	(_h_Tics+1)^0,w,c
 10481  001BAE  A0D8               	btfss	status,0,c
 10482  001BB0  0012               	return	
 10483                           
 10484                           ;TTimer.c: 50:         for (counter=0;counter<25;counter++){
 10485  001BB2  6A4B               	clrf	_counter^0,c
 10486  001BB4                     i2l4379:
 10487  001BB4  0E18               	movlw	24
 10488  001BB6  644B               	cpfsgt	_counter^0,c
 10489  001BB8  D001               	goto	i2l4383
 10490  001BBA  D00D               	goto	i2l77
 10491  001BBC                     i2l4383:
 10492                           
 10493                           ;TTimer.c: 51:             if (s_Timers[counter].b_busy==1){
 10494  001BBC  EC86  F00E         	call	PL10	;call to abstracted procedure
 10495  001BC0  04DE               	decf	postinc2,w,c
 10496  001BC2  E107               	bnz	i2l4387
 10497                           
 10498                           ;TTimer.c: 52:                 s_Timers[counter].h_initialTics -= h_Tics;
 10499  001BC4  504B               	movf	_counter^0,w,c
 10500  001BC6  EC9A  F00F         	call	PL28	;call to abstracted procedure
 10501  001BCA  500F               	movf	_h_Tics^0,w,c
 10502  001BCC  5EDE               	subwf	postinc2,f,c
 10503  001BCE  5010               	movf	(_h_Tics+1)^0,w,c
 10504  001BD0  5ADD               	subwfb	postdec2,f,c
 10505  001BD2                     i2l4387:
 10506                           
 10507                           ;TTimer.c: 54:         }
 10508  001BD2  2A4B               	incf	_counter^0,f,c
 10509  001BD4  D7EF               	goto	i2l4379
 10510  001BD6                     i2l77:
 10511                           
 10512                           ;TTimer.c: 55:         h_Tics=0;
 10513  001BD6  6A0F               	clrf	_h_Tics^0,c
 10514  001BD8  6A10               	clrf	(_h_Tics+1)^0,c
 10515  001BDA  0012               	return		;funcret
 10516  001BDC                     __end_of__TiRSITimer:
 10517                           	callstack 0
 10518                           
 10519                           	psect	rparam
 10520  0000                     
 10521                           	psect	temp
 10522  000077                     btemp:
 10523                           	callstack 0
 10524  000077                     	ds	1
 10525  0000                     int$flags	set	btemp
 10526  0000                     wtemp8	set	btemp+1
 10527  0000                     ttemp5	set	btemp+1
 10528  0000                     ttemp6	set	btemp+4
 10529  0000                     ttemp7	set	btemp+8
 10530                           
 10531                           	psect	idloc
 10532                           
 10533                           ;Config register IDLOC0 @ 0x200000
 10534                           ;	unspecified, using default values
 10535  200000                     	org	2097152
 10536  200000  FF                 	db	255
 10537                           
 10538                           ;Config register IDLOC1 @ 0x200001
 10539                           ;	unspecified, using default values
 10540  200001                     	org	2097153
 10541  200001  FF                 	db	255
 10542                           
 10543                           ;Config register IDLOC2 @ 0x200002
 10544                           ;	unspecified, using default values
 10545  200002                     	org	2097154
 10546  200002  FF                 	db	255
 10547                           
 10548                           ;Config register IDLOC3 @ 0x200003
 10549                           ;	unspecified, using default values
 10550  200003                     	org	2097155
 10551  200003  FF                 	db	255
 10552                           
 10553                           ;Config register IDLOC4 @ 0x200004
 10554                           ;	unspecified, using default values
 10555  200004                     	org	2097156
 10556  200004  FF                 	db	255
 10557                           
 10558                           ;Config register IDLOC5 @ 0x200005
 10559                           ;	unspecified, using default values
 10560  200005                     	org	2097157
 10561  200005  FF                 	db	255
 10562                           
 10563                           ;Config register IDLOC6 @ 0x200006
 10564                           ;	unspecified, using default values
 10565  200006                     	org	2097158
 10566  200006  FF                 	db	255
 10567                           
 10568                           ;Config register IDLOC7 @ 0x200007
 10569                           ;	unspecified, using default values
 10570  200007                     	org	2097159
 10571  200007  FF                 	db	255
 10572                           
 10573                           	psect	config
 10574                           
 10575                           ; Padding undefined space
 10576  300000                     	org	3145728
 10577  300000  FF                 	db	255
 10578                           
 10579                           ;Config register CONFIG1H @ 0x300001
 10580                           ;	Oscillator
 10581                           ;	OSC = HSPLL, HS oscillator, PLL enabled (Clock Frequency = 4 x FOSC1)
 10582                           ;	Fail-Safe Clock Monitor Enable bit
 10583                           ;	FCMEN = 0x0, unprogrammed default
 10584                           ;	Internal/External Oscillator Switchover bit
 10585                           ;	IESO = 0x0, unprogrammed default
 10586  300001                     	org	3145729
 10587  300001  06                 	db	6
 10588                           
 10589                           ;Config register CONFIG2L @ 0x300002
 10590                           ;	Power-up Timer Enable bit
 10591                           ;	PWRT = OFF, PWRT disabled
 10592                           ;	Brown-out Reset Enable bits
 10593                           ;	BOR = OFF, Brown-out Reset disabled in hardware and software
 10594                           ;	Brown-out Reset Voltage bits
 10595                           ;	BORV = 0x3, unprogrammed default
 10596  300002                     	org	3145730
 10597  300002  19                 	db	25
 10598                           
 10599                           ;Config register CONFIG2H @ 0x300003
 10600                           ;	Watchdog Timer Enable bit
 10601                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
 10602                           ;	Watchdog Timer Postscale Select bits
 10603                           ;	WDTPS = 0xF, unprogrammed default
 10604  300003                     	org	3145731
 10605  300003  1E                 	db	30
 10606                           
 10607                           ; Padding undefined space
 10608  300004                     	org	3145732
 10609  300004  FF                 	db	255
 10610                           
 10611                           ;Config register CONFIG3H @ 0x300005
 10612                           ;	CCP2 MUX bit
 10613                           ;	CCP2MX = 0x1, unprogrammed default
 10614                           ;	PORTB A/D Enable bit
 10615                           ;	PBADEN = DIG, PORTB<4:0> pins are configured as digital I/O on Reset
 10616                           ;	Low-Power Timer1 Oscillator Enable bit
 10617                           ;	LPT1OSC = 0x0, unprogrammed default
 10618                           ;	MCLR Pin Enable bit
 10619                           ;	MCLRE = OFF, RE3 input pin enabled; MCLR disabled
 10620  300005                     	org	3145733
 10621  300005  01                 	db	1
 10622                           
 10623                           ;Config register CONFIG4L @ 0x300006
 10624                           ;	Stack Full/Underflow Reset Enable bit
 10625                           ;	STVREN = 0x1, unprogrammed default
 10626                           ;	Single-Supply ICSP Enable bit
 10627                           ;	LVP = OFF, Single-Supply ICSP disabled
 10628                           ;	Boot Block Size Select bits
 10629                           ;	BBSIZ = 0x0, unprogrammed default
 10630                           ;	Extended Instruction Set Enable bit
 10631                           ;	XINST = 0x0, unprogrammed default
 10632                           ;	Background Debugger Enable bit
 10633                           ;	DEBUG = OFF, Background debugger disabled, RB6 and RB7 configured as general purpose I
      +                          /O pins
 10634  300006                     	org	3145734
 10635  300006  81                 	db	129
 10636                           
 10637                           ; Padding undefined space
 10638  300007                     	org	3145735
 10639  300007  FF                 	db	255
 10640                           
 10641                           ;Config register CONFIG5L @ 0x300008
 10642                           ;	unspecified, using default values
 10643                           ;	Code Protection bit
 10644                           ;	CP0 = 0x1, unprogrammed default
 10645                           ;	Code Protection bit
 10646                           ;	CP1 = 0x1, unprogrammed default
 10647  300008                     	org	3145736
 10648  300008  03                 	db	3
 10649                           
 10650                           ;Config register CONFIG5H @ 0x300009
 10651                           ;	unspecified, using default values
 10652                           ;	Boot Block Code Protection bitProtect Boot
 10653                           ;	CPB = 0x1, unprogrammed default
 10654                           ;	Data EEPROM Code Protection bit
 10655                           ;	CPD = 0x1, unprogrammed default
 10656  300009                     	org	3145737
 10657  300009  C0                 	db	192
 10658                           
 10659                           ;Config register CONFIG6L @ 0x30000A
 10660                           ;	unspecified, using default values
 10661                           ;	Write Protection bit
 10662                           ;	WRT0 = 0x1, unprogrammed default
 10663                           ;	Write Protection bit
 10664                           ;	WRT1 = 0x1, unprogrammed default
 10665  30000A                     	org	3145738
 10666  30000A  03                 	db	3
 10667                           
 10668                           ;Config register CONFIG6H @ 0x30000B
 10669                           ;	unspecified, using default values
 10670                           ;	Configuration Register Write Protection bit
 10671                           ;	WRTC = 0x1, unprogrammed default
 10672                           ;	Boot Block Write Protection bit
 10673                           ;	WRTB = 0x1, unprogrammed default
 10674                           ;	Data EEPROM Write Protection bit
 10675                           ;	WRTD = 0x1, unprogrammed default
 10676  30000B                     	org	3145739
 10677  30000B  E0                 	db	224
 10678                           
 10679                           ;Config register CONFIG7L @ 0x30000C
 10680                           ;	unspecified, using default values
 10681                           ;	Table Read Protection bit
 10682                           ;	EBTR0 = 0x1, unprogrammed default
 10683                           ;	Table Read Protection bit
 10684                           ;	EBTR1 = 0x1, unprogrammed default
 10685  30000C                     	org	3145740
 10686  30000C  03                 	db	3
 10687                           
 10688                           ;Config register CONFIG7H @ 0x30000D
 10689                           ;	unspecified, using default values
 10690                           ;	Boot Block Table Read Protection bit
 10691                           ;	EBTRB = 0x1, unprogrammed default
 10692  30000D                     	org	3145741
 10693  30000D  40                 	db	64
 10694                           tosu	equ	0xFFF
 10695                           tosh	equ	0xFFE
 10696                           tosl	equ	0xFFD
 10697                           stkptr	equ	0xFFC
 10698                           pclatu	equ	0xFFB
 10699                           pclath	equ	0xFFA
 10700                           pcl	equ	0xFF9
 10701                           tblptru	equ	0xFF8
 10702                           tblptrh	equ	0xFF7
 10703                           tblptrl	equ	0xFF6
 10704                           tablat	equ	0xFF5
 10705                           prodh	equ	0xFF4
 10706                           prodl	equ	0xFF3
 10707                           indf0	equ	0xFEF
 10708                           postinc0	equ	0xFEE
 10709                           postdec0	equ	0xFED
 10710                           preinc0	equ	0xFEC
 10711                           plusw0	equ	0xFEB
 10712                           fsr0h	equ	0xFEA
 10713                           fsr0l	equ	0xFE9
 10714                           wreg	equ	0xFE8
 10715                           indf1	equ	0xFE7
 10716                           postinc1	equ	0xFE6
 10717                           postdec1	equ	0xFE5
 10718                           preinc1	equ	0xFE4
 10719                           plusw1	equ	0xFE3
 10720                           fsr1h	equ	0xFE2
 10721                           fsr1l	equ	0xFE1
 10722                           bsr	equ	0xFE0
 10723                           indf2	equ	0xFDF
 10724                           postinc2	equ	0xFDE
 10725                           postdec2	equ	0xFDD
 10726                           preinc2	equ	0xFDC
 10727                           plusw2	equ	0xFDB
 10728                           fsr2h	equ	0xFDA
 10729                           fsr2l	equ	0xFD9
 10730                           status	equ	0xFD8

Data Sizes:
    Strings     0
    Constant    206
    Data        124
    BSS         312
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     27     118
    BANK0           128      0     126
    BANK1           256      0     219

Pointer List with Targets:

    DaSaveUser@regUser	PTR struct . size(1) Largest target is 18
		 -> mUser(BANK0[18]), 

    DaFindUser@logUser	PTR struct . size(1) Largest target is 18
		 -> mUser(BANK0[18]), 

    mUser@EEPROM$F1707	PTR struct . size(2) Largest target is 18
		 -> NULL(NULL[0]), mUser(BANK0[18]), 

    displayString@string	PTR unsigned char  size(1) Largest target is 22
		 -> sysTime(BANK0[14]), modifyTimeString(BANK0[13]), TIME(BANK0[16]), LOGREGSCREEN(BANK0[12]), 
		 -> LOGINMENU(BANK0[22]), 


Critical Paths under _main in COMRAM

    _main->_dataMotor
    _timeMotor->_LcPutChar
    _sendChar->_LcPutChar
    _btSendByte->_TiResetTics
    _menuMotor->_mainMenu
    _startTimer->_LcGotoXY
    _startSong->_TiResetTics
    _mainMenu->_LcPutChar
    _displayTimeRemaining->_LcGotoXY
    _displaySysTime->_LcGotoXY
    _displayString->_LcPutChar
    _displayResults->_LcPutChar
    _displayLogOut->_LcPutChar
    _displayError->_LcPutChar
    _nextRow->_LcGotoXY
    _LcScroll->_CantaIR
    _LcCursorOn->_WaitForBusy
    _LcCursorOff->_WaitForBusy
    _KeSetMode->_TiResetTics
    _KeGetCharValue->_getFullValue
    _DaSaveScore->_LcPutChar
    _LcClear->_Espera
    _DaFindUser->_LcGotoXY
    _joystickMotor->_SiSendChar
    _initTime->_TiGetTimer
    _initSIO->_TiGetTimer
    _initMenu->_TiGetTimer
    _initKeypad->_TiGetTimer
    _initData->_readUserData
    _readUserData->_readEEPROM
    _initAudio->_TiGetTimer
    _dataMotor->_LcPutChar
    _LcPutChar->_LcGotoXY
    _LcGotoXY->_WaitForBusy
    _CantaData->_CantaPartAlta
    _CantaData->_CantaPartBaixa
    _btMotor->_TiGetTics
    _audioMotor->_TiGetTics
    _SMSMotor->_TiGetTics
    _LcInit->_Espera
    _WaitForBusy->_TiGetTics
    _Espera->_TiGetTics
    _CantaIR->_CantaPartAlta
    _CantaIR->_CantaPartBaixa
    _KeypadMotor->_TiGetTics

Critical Paths under _RSI_High in COMRAM

    _RSI_High->__TiRSITimer

Critical Paths under _main in BANK0

    None.

Critical Paths under _RSI_High in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _RSI_High in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   58547
                        _KeypadMotor
                             _LcInit
                           _SMSMotor
                        _TiInitTimer
                         _audioMotor
                            _btMotor
                          _dataMotor
                          _initAudio
                           _initData
                       _initJoystick
                         _initKeypad
                           _initMenu
                            _initSIO
                           _initTime
                      _joystickMotor
                          _menuMotor
                          _timeMotor
 ---------------------------------------------------------------------------------
 (1) _timeMotor                                            2     2      0    8281
                                             19 COMRAM     2     2      0
                  _KeGetGenericValue
                         _LcCursorOn
                           _LcGotoXY
                          _LcPutChar
                          _TiGetTics
                        _TiResetTics
                            ___lbdiv
                            ___lbmod
                        _btAvailable
                         _btSendByte
                          _isPressed
                           _sendChar
                     _updateGameTime
                      _updateSysTime
 ---------------------------------------------------------------------------------
 (2) _updateSysTime                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _updateGameTime                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _sendChar                                             0     0      0    2113
                          _LcPutChar
                        _btAvailable
                         _btSendByte
 ---------------------------------------------------------------------------------
 (3) _btSendByte                                           1     1      0      44
                                              6 COMRAM     1     1      0
                        _TiResetTics
 ---------------------------------------------------------------------------------
 (3) _btAvailable                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _menuMotor                                            2     2      0   41138
                                             21 COMRAM     2     2      0
                         _DaFindUser
                          _DaGetIdle
                     _DaGetNumScores
                        _DaGetStatus
                        _DaSaveScore
                         _DaSaveUser
                        _JoDirection
                            _JoMoved
                          _JoSetMode
                     _KeGetCharValue
                  _KeGetGenericValue
                          _KeSetMode
                        _LcCursorOff
                         _LcCursorOn
                           _LcGotoXY
                          _LcPutChar
                           _LcScroll
                      _SiIsAvailable
                         _SiReadByte
                     _SiRecievedByte
                         _SiSendChar
                          _TiGetTics
                        _TiResetTics
                            ___lbdiv
                            ___lbmod
                       _displayError
                      _displayLogOut
                     _displayResults
               _displayScoresMarquee
                      _displayString
                     _displaySysTime
               _displayTimeRemaining
                         _getPresses
                  _incrementPosition
                          _isPressed
                           _mainMenu
                         _modifyTime
                       _resetDisplay
                      _resetPosition
                         _resetTimer
                       _setResetTXRX
                          _startSong
                         _startTimer
                           _stopSong
                          _stopTimer
                          _timerOver
 ---------------------------------------------------------------------------------
 (2) _timerOver                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _stopTimer                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _stopSong                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _startTimer                                           0     0      0    1759
                           _LcGotoXY
                        _TiResetTics
 ---------------------------------------------------------------------------------
 (2) _startSong                                            0     0      0      22
                        _TiResetTics
 ---------------------------------------------------------------------------------
 (2) _setResetTXRX                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _resetTimer                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _resetPosition                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _resetDisplay                                         0     0      0    1507
                            _LcClear
 ---------------------------------------------------------------------------------
 (2) _modifyTime                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _mainMenu                                             2     2      0    4406
                                             19 COMRAM     2     2      0
                          _LcPutChar
                            ___awmod
                            _nextRow
 ---------------------------------------------------------------------------------
 (2) _isPressed                                            1     1      0      24
                                              5 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _incrementPosition                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _getPresses                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _displayTimeRemaining                                 0     0      0    1737
                           _LcGotoXY
 ---------------------------------------------------------------------------------
 (2) _displaySysTime                                       0     0      0    1737
                           _LcGotoXY
 ---------------------------------------------------------------------------------
 (2) _displayString                                        1     0      1    4230
                                             19 COMRAM     1     0      1
                          _LcPutChar
                            _nextRow
 ---------------------------------------------------------------------------------
 (2) _displayScoresMarquee                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _displayResults                                       0     0      0    3806
                          _LcPutChar
                            _nextRow
 ---------------------------------------------------------------------------------
 (2) _displayLogOut                                        0     0      0    3806
                          _LcPutChar
                            _nextRow
 ---------------------------------------------------------------------------------
 (2) _displayError                                         0     0      0    3806
                          _LcPutChar
                            _nextRow
 ---------------------------------------------------------------------------------
 (3) _nextRow                                              0     0      0    1737
                           _LcGotoXY
 ---------------------------------------------------------------------------------
 (2) _SiRecievedByte                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _SiReadByte                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _LcScroll                                             0     0      0     220
                            _CantaIR
 ---------------------------------------------------------------------------------
 (2) _LcCursorOn                                           0     0      0     310
                            _CantaIR
                        _WaitForBusy
 ---------------------------------------------------------------------------------
 (2) _LcCursorOff                                          0     0      0     310
                            _CantaIR
                        _WaitForBusy
 ---------------------------------------------------------------------------------
 (2) _KeSetMode                                            1     1      0      66
                                              6 COMRAM     1     1      0
                        _TiResetTics
 ---------------------------------------------------------------------------------
 (2) _KeGetCharValue                                       0     0      0     110
                  _KeGetGenericValue
                       _getFullValue
 ---------------------------------------------------------------------------------
 (3) _getFullValue                                         5     5      0     110
                                              5 COMRAM     5     5      0
 ---------------------------------------------------------------------------------
 (2) _JoSetMode                                            1     1      0      22
                                              5 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _JoMoved                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _JoDirection                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _DaSaveUser                                           1     0      1      98
                                              5 COMRAM     1     0      1
 ---------------------------------------------------------------------------------
 (2) _DaSaveScore                                          1     1      0    5515
                                             19 COMRAM     1     1      0
                            _LcClear
                          _LcPutChar
                            ___lbdiv
                            ___lbmod
 ---------------------------------------------------------------------------------
 (3) _LcClear                                              0     0      0    1507
                            _CantaIR
                             _Espera
                        _WaitForBusy
 ---------------------------------------------------------------------------------
 (2) _DaGetStatus                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _DaGetNumScores                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _DaGetIdle                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _DaFindUser                                           1     0      1    1835
                                             18 COMRAM     1     0      1
                           _LcGotoXY
 ---------------------------------------------------------------------------------
 (1) _joystickMotor                                        2     2      0      22
                                              6 COMRAM     2     2      0
                      _SiIsAvailable
                         _SiSendChar
 ---------------------------------------------------------------------------------
 (1) _initTime                                             0     0      0       0
                         _TiGetTimer
 ---------------------------------------------------------------------------------
 (1) _initSIO                                              0     0      0       0
                         _TiGetTimer
 ---------------------------------------------------------------------------------
 (1) _initMenu                                             0     0      0       0
                         _TiGetTimer
 ---------------------------------------------------------------------------------
 (1) _initKeypad                                           0     0      0       0
                         _TiGetTimer
 ---------------------------------------------------------------------------------
 (1) _initJoystick                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initData                                             0     0      0      30
                         _readEEPROM
                       _readUserData
 ---------------------------------------------------------------------------------
 (2) _readUserData                                         2     2      0      15
                                              6 COMRAM     2     2      0
                         _readEEPROM
 ---------------------------------------------------------------------------------
 (3) _readEEPROM                                           1     1      0      15
                                              5 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _initAudio                                            0     0      0       0
                         _TiGetTimer
 ---------------------------------------------------------------------------------
 (1) _dataMotor                                            8     8      0    6475
                                             19 COMRAM     8     8      0
                           _LcGotoXY
                          _LcPutChar
                            ___lbdiv
                            ___lbmod
                         _saveEEPROM
 ---------------------------------------------------------------------------------
 (2) _saveEEPROM                                           2     1      1     728
                                              5 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (2) ___lbmod                                              4     3      1     995
                                              5 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 (2) ___lbdiv                                              4     3      1     922
                                              5 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 (3) _LcPutChar                                            1     1      0    2069
                                             18 COMRAM     1     1      0
                          _CantaData
                           _LcGotoXY
                        _WaitForBusy
 ---------------------------------------------------------------------------------
 (4) _LcGotoXY                                             5     4      1    1737
                                             13 COMRAM     5     4      1
                            _CantaIR
                        _WaitForBusy
 ---------------------------------------------------------------------------------
 (4) _CantaData                                            1     1      0     220
                                              7 COMRAM     1     1      0
                      _CantaPartAlta
                     _CantaPartBaixa
 ---------------------------------------------------------------------------------
 (1) _btMotor                                              3     3      0      89
                                             12 COMRAM     3     3      0
                      _SiIsAvailable
                         _SiSendChar
                          _TiGetTics
                        _TiResetTics
 ---------------------------------------------------------------------------------
 (2) _SiSendChar                                           1     1      0      22
                                              5 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _SiIsAvailable                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _audioMotor                                           3     3      0     667
                                             12 COMRAM     3     3      0
                          _TiGetTics
                        _TiResetTics
                            ___awmod
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              6     2      4     600
                                              5 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (1) _TiInitTimer                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SMSMotor                                             2     2      0      67
                                             12 COMRAM     2     2      0
                  _KeGetGenericValue
                          _TiGetTics
                        _TiResetTics
 ---------------------------------------------------------------------------------
 (2) _KeGetGenericValue                                    2     2      0       0
                                              5 COMRAM     2     2      0
                          _getColumn
 ---------------------------------------------------------------------------------
 (3) _getColumn                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _LcInit                                               3     2      1    1711
                                             17 COMRAM     3     2      1
                            _CantaIR
                 _EscriuPrimeraOrdre
                             _Espera
                         _TiGetTimer
                        _WaitForBusy
 ---------------------------------------------------------------------------------
 (4) _WaitForBusy                                          1     1      0      90
                                             12 COMRAM     1     1      0
                          _TiGetTics
                        _TiResetTics
 ---------------------------------------------------------------------------------
 (2) _TiGetTimer                                           1     1      0       0
                                              5 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (4) _Espera                                               5     1      4    1197
                                             12 COMRAM     5     1      4
                          _TiGetTics
                        _TiResetTics
 ---------------------------------------------------------------------------------
 (2) _EscriuPrimeraOrdre                                   2     2      0      60
                                              5 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (5) _CantaIR                                              1     1      0     220
                                              7 COMRAM     1     1      0
                      _CantaPartAlta
                     _CantaPartBaixa
 ---------------------------------------------------------------------------------
 (6) _CantaPartBaixa                                       2     2      0      88
                                              5 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (6) _CantaPartAlta                                        2     2      0      88
                                              5 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _KeypadMotor                                          2     2      0      67
                                             12 COMRAM     2     2      0
                          _TiGetTics
                        _TiResetTics
 ---------------------------------------------------------------------------------
 (4) _TiResetTics                                          1     1      0      22
                                              5 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (5) _TiGetTics                                            7     5      2      45
                                              5 COMRAM     7     5      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _RSI_High                                             4     4      0       0
                                              1 COMRAM     4     4      0
                        __TiRSITimer
 ---------------------------------------------------------------------------------
 (8) __TiRSITimer                                          1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _KeypadMotor
     _TiGetTics
     _TiResetTics
   _LcInit
     _CantaIR
       _CantaPartAlta
       _CantaPartBaixa
     _EscriuPrimeraOrdre
     _Espera
       _TiGetTics
       _TiResetTics
     _TiGetTimer
     _WaitForBusy
       _TiGetTics
       _TiResetTics
   _SMSMotor
     _KeGetGenericValue
       _getColumn
     _TiGetTics
     _TiResetTics
   _TiInitTimer
   _audioMotor
     _TiGetTics
     _TiResetTics
     ___awmod
   _btMotor
     _SiIsAvailable
     _SiSendChar
     _TiGetTics
     _TiResetTics
   _dataMotor
     _LcGotoXY
       _CantaIR
       _WaitForBusy
     _LcPutChar
       _CantaData
         _CantaPartAlta
         _CantaPartBaixa
       _LcGotoXY
       _WaitForBusy
     ___lbdiv
     ___lbmod
     _saveEEPROM
   _initAudio
     _TiGetTimer
   _initData
     _readEEPROM
     _readUserData
       _readEEPROM
   _initJoystick
   _initKeypad
     _TiGetTimer
   _initMenu
     _TiGetTimer
   _initSIO
     _TiGetTimer
   _initTime
     _TiGetTimer
   _joystickMotor
     _SiIsAvailable
     _SiSendChar
   _menuMotor
     _DaFindUser
       _LcGotoXY
     _DaGetIdle
     _DaGetNumScores
     _DaGetStatus
     _DaSaveScore
       _LcClear
         _CantaIR
         _Espera
         _WaitForBusy
       _LcPutChar
       ___lbdiv
       ___lbmod
     _DaSaveUser
     _JoDirection
     _JoMoved
     _JoSetMode
     _KeGetCharValue
       _KeGetGenericValue
       _getFullValue
     _KeGetGenericValue
     _KeSetMode
       _TiResetTics
     _LcCursorOff
       _CantaIR
       _WaitForBusy
     _LcCursorOn
       _CantaIR
       _WaitForBusy
     _LcGotoXY
     _LcPutChar
     _LcScroll
       _CantaIR
     _SiIsAvailable
     _SiReadByte
     _SiRecievedByte
     _SiSendChar
     _TiGetTics
     _TiResetTics
     ___lbdiv
     ___lbmod
     _displayError
       _LcPutChar
       _nextRow
         _LcGotoXY
     _displayLogOut
       _LcPutChar
       _nextRow
     _displayResults
       _LcPutChar
       _nextRow
     _displayScoresMarquee
     _displayString
       _LcPutChar
       _nextRow
     _displaySysTime
       _LcGotoXY
     _displayTimeRemaining
       _LcGotoXY
     _getPresses
     _incrementPosition
     _isPressed
     _mainMenu
       _LcPutChar
       ___awmod
       _nextRow
     _modifyTime
     _resetDisplay
       _LcClear
     _resetPosition
     _resetTimer
     _setResetTXRX
     _startSong
       _TiResetTics
     _startTimer
       _LcGotoXY
       _TiResetTics
     _stopSong
     _stopTimer
     _timerOver
   _timeMotor
     _KeGetGenericValue
     _LcCursorOn
     _LcGotoXY
     _LcPutChar
     _TiGetTics
     _TiResetTics
     ___lbdiv
     ___lbmod
     _btAvailable
     _btSendByte
       _TiResetTics
     _isPressed
     _sendChar
       _LcPutChar
       _btAvailable
       _btSendByte
     _updateGameTime
     _updateSysTime

 _RSI_High (ROOT)
   __TiRSITimer

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             1FF      0       0      22        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      DB       7       85.5%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0      7E       5       98.4%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     1B      76       1       93.7%
BITBIGSFRhlhh       19      0       0       9        0.0%
BITBIGSFRhh          D      0       0       8        0.0%
BITBIGSFRlhhhh       B      0       0      11        0.0%
BITBIGSFRlhhlhl      8      0       0      14        0.0%
BITBIGSFRlhhlll      8      0       0      17        0.0%
BITBIGSFRlhhllh      7      0       0      16        0.0%
BITBIGSFRlhhlhh      7      0       0      13        0.0%
BITBIGSFRllhlh       6      0       0      19        0.0%
BITBIGSFRllhhh       5      0       0      18        0.0%
BITBIGSFRhll         4      0       0      10        0.0%
BITBIGSFRlhhllh      1      0       0      15        0.0%
BITBIGSFRlhhhl       1      0       0      12        0.0%
BITBIGSFRlll         1      0       0      20        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     1CF      21        0.0%
DATA                 0      0     1CF       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.36 build 20220127204148 
Symbol Table                                                                                   Sat Jul 02 05:32:23 2022

           TiResetTics@Handle 0051                 _updateSysTime 006E                             _x 002F  
                           _y 002E        ??_displayTimeRemaining 005E                            PL2 0DC6  
                          PL4 0DF4                            PL6 0DFE                            PL8 0E18  
      __end_of_displayResults 1DBE        __end_of_updateGameTime 1FCC        __end_of_displaySysTime 011A  
               ?_displayError 004C                           PL10 1D0C                           PL20 1AD0  
                         PL12 15EC                           PL30 1AEE                           PL22 0E32  
                         PL14 0E24                           PL40 1536                           PL32 0990  
                         PL24 0986                           PL16 1700                           PL50 1820  
                         PL42 1158                           PL34 1524                           PL26 1714  
                         PL18 1790                           PL60 09AC                           PL52 17AE  
                         PL44 1B8E                           PL36 1DBE                           PL28 1F34  
                         PL70 182E                           PL62 1724                           PL54 0E4E  
                         PL46 0E40                           PL38 1C3A                           PL80 1488  
                         PL72 1160                           PL64 09B8                           PL56 0998  
                         PL48 1E32                           PL90 1E58                           PL82 116A  
                         PL74 1A40                           PL66 1C48                           PL58 09A2  
                         PL92 117A                           PL84 1546                           PL76 09C0  
                         PL68 19DA                           PL94 1182                           PL86 1172  
                         PL78 0E54                           PL96 09CA                           PL88 13CA  
                         l150 12DC                           l153 12F8                           l146 12BC  
                         l164 135E                           l156 1314                           l175 1636  
                         l193 1FE0                           l274 1D2C                           l700 13D2  
                         l703 13E6                           l546 0528                           l643 16FE  
                         l804 1214                           l900 0ABE                           l716 1450  
                         l911 0B76                           l903 0B0A                           l719 1464  
                         l792 118C                           l937 0CE6                           l873 1A5E  
                         l939 0CEA                           l888 0A2A                           l898 0AB2  
                         l899 0AB8                           u500 17E4                           u520 17F8  
                         u540 1810                           u518 17E6                           u480 17CE  
                         u538 17FA                           u558 1812                           u498 17D0  
                         _val 0035                           _pos 0034                           _row 004A  
            ??_CantaPartBaixa 0051                  ___awmod@sign 0056                           prod 000FF3  
                         wreg 000FE8           __end_of_JoDirection 019E                ?_displayLogOut 004C  
              ?_displayString 005F                          l1061 0FB2                          l1063 0FE4  
                        l1039 0E5C                          l1065 101A                          l1059 0F76  
                        l2323 1732                          l4101 1CFC                          l2341 1764  
                        l2333 1748                          l4023 1934                          l2327 173A  
                        l2337 175C                          l4043 1974                          l4035 195E  
                        l4027 1940                          l4019 1928                          l2347 177C  
                        l5011 06F4                          l5003 06DC                          l4029 1948  
                        l4053 1CC8                          l2525 1A4E                          l4213 16E2  
                        l4039 1968                          l2551 1AA4                          l2535 1A60  
                        l5111 0824                          l4065 1CE2                          l4057 1CCE  
                        l2545 1A8E                          l2529 1A56                          l4137 1E50  
                        l4217 16E6                          l2385 1FC0                          l2377 007A  
                        l4403 1D6E                          l2539 1A68                          l5211 143C  
                        l5115 0834                          l5019 0734                          l4093 1CF2  
                        l4501 14C6                          l4069 1CEA                          l4085 1DE8  
                        l4077 1DD2                          l5205 1432                          l5053 07A2  
                        l5045 0788                          l5037 0770                          l5029 0758  
                        l2389 1FC8                          l4511 14FA                          l5303 0B10  
                        l5223 1452                          l4327 1B6C                          l5135 0856  
                        l5127 0848                          l4425 1560                          l5401 0C56  
                        l5241 09D4                          l5217 1446                          l5233 1468  
                        l5153 0888                          l5145 0870                          l5073 07BE  
                        l5057 07A4                          l5251 09EC                          l5091 07F2  
                        l5059 07A8                          l4525 15FA                          l4517 1506  
                        l5421 0CB6                          l5405 0C64                          l5309 0B1C  
                        l5253 09F0                          l4277 1C76                          l5085 07E4  
                        l5077 07CC                          l5501 0EF4                          l4623 1338  
                        l4615 132A                          l3903 1C14                          l5423 0CBC  
                        l5415 0C7C                          l5407 0C68                          l5351 0BC4  
                        l5335 0B98                          l5327 0B7E                          l5319 0B40  
                        l5247 09E4                          l4703 035A                          l4633 1358  
                        l3921 1F0A                          l4561 1664                          l4545 163C  
                        l5433 0CFE                          l5361 0BDC                          l5345 0BBA  
                        l5337 0B9E                          l5273 0A70                          l5265 0A34  
                        l5169 08A8                          l5521 0F42                          l5513 0F24  
                        l5505 0F06                          l4643 1374                          l4619 132E  
                        l4555 1654                          l4483 1490                          l5291 0AC8  
                        l5275 0A74                          l5259 0A26                          l5187 13F8  
                        l5611 10C4                          l4653 139A                          l4549 1644  
                        l4493 14AC                          l4485 1492                          l5373 0BF2  
                        l5277 0A78                          l5445 0D3C                          l4821 04B2  
                        l4813 049A                          l4725 039E                          l5533 0F72  
                        l5509 0F12                          l4559 165E                          l4567 1670  
                        l4399 1D66                          l3927 1D30                          l5439 0D12  
                        l5287 0AB4                          l5199 141C                          l4911 05D8  
                        l4831 04E4                          l4815 049E                          l4751 03F2  
                        l4735 03BE                          l4719 0384                          l5471 0EA4  
                        l4585 12D6                          l4657 139C                          l3881 1BEE  
                        l5633 11B8                          l5385 0C1E                          l4921 05F2  
                        l4665 02D2                          l5635 11BA                          l5627 119E  
                        l5395 0C46                          l5379 0C0A                          l3971 1ACC  
                        l4923 05F8                          l4851 052A                          l4835 04F2  
                        l4771 0422                          l4763 0408                          l4747 03E8  
                        l4691 0332                          l4683 030C                          l4675 02F8  
                        l5491 0ECC                          l5483 0EBC                          l5475 0EB0  
                        l5459 0E7C                          l5653 11F8                          l5645 11D2  
                        l5389 0C36                          l4837 04F8                          l4749 03EC  
                        l4677 02FC                          l3967 1ACA                          l4943 0636  
                        l4927 0606                          l4783 0448                          l5591 1074  
                        l5583 1052                          l5487 0EC4                          l5479 0EB8  
                        l5719 1B2E                          l5673 1256                          l5657 11FC  
                        l4945 063C                          l4929 060C                          l4793 0462  
                        l5497 0EE2                          l5667 1238                          l5659 121A  
                        l3995 1D98                          l4963 0670                          l4883 0580  
                        l4859 0544                          l4795 046A                          l5595 108A  
                        l5587 1068                          l5579 103C                          l4957 065E  
                        l4893 05A6                          l4885 0584                          l4869 0554  
                        l4797 0470                          l4789 0454                          l5679 128E  
                        l4991 06B4                          l4983 06A4                          l4975 0692  
                        l4895 05AA                          l5599 10A0                          l5689 129C  
                        l4997 06C6                          u3120 16B4                          u3060 1FDC  
                        u4120 0626                          u3410 162A                          u2700 1A32  
                        u5020 122E                          u4300 07B8                          u5030 124C  
                        u2640 19F0                          u2720 198A                          u2660 1A06  
                        u2740 19A0                          u5060 127C                          u4180 06B0  
                        u2718 1A34                          u5054 126C                          u5055 1268  
                        u3640 138A                          u2680 1A1A                          u2760 19B4  
                        u3800 03E4                          u3570 134E                          u2658 19F2  
                        u2738 198C                          u3730 0350                          u2780 19CC  
                        u2860 1AB8                          u2678 1A08                          u2758 19A2  
                        u2950 194C                          u5078 127E                          u3910 04DA  
                        u2698 1A1C                          u2778 19B6                          u4740 0CDA  
                        u2798 19CE                          u2990 1CD2                          u4960 11B0  
                        i2l77 1BD6                          u4990 11E6                          _TIME 00B5  
              ?_SiIsAvailable 004C                          _game 0012                          _main 1B06  
                        _send 0030                          fsr1h 000FE2                          fsr2h 000FDA  
                        indf1 000FE7                          indf2 000FDF                          fsr1l 000FE1  
                        fsr2l 000FD9                    _LcCursorOn 011A                          btemp 0077  
                        prodh 000FF4                          prodl 000FF3               __end_of_LcClear 004C  
                        start 0032               __end_of_CantaIR 1F9A                 LcInit@columns 005D  
              ?_updateSysTime 004C               __end_of_JoMoved 019A                  ___param_bank 000000  
               _isPressed$590 0051              __end_of_MAINMENU 0299               ?_displayResults 004C  
              ??_displayError 005F               ?_updateGameTime 004C               ?_displaySysTime 004C  
                 Espera@Timer 0058                         ?_main 004C               __end_of___lbdiv 1CEE  
                       _EEADR 000FA9               __end_of___awmod 197E               __end_of___lbmod 1DF0  
               ??_TiInitTimer 0051                         _T0CON 000FD5                         _ERROR 0067  
                       _TABLE 0201                         _RCREG 000FAE                 ??_KeypadMotor 0058  
                       _TMR0H 000FD7                         _TMR0L 000FD6                         _SPBRG 000FAF  
                       _TXREG 000FAD               __end_of_btMotor 12BA                   ?_DaFindUser 005E  
                       _Timer 000D              __end_of_SMSTABLE 02CF               __end_of_initSIO 1E82  
                       _mUser 00EC                         _moved 002D                         _timer 0039  
                 _LcCursorOff 0124                         _state 0042                         _users 0100  
            __end_of_RSI_High 0032               __end_of_nextRow 00CA              __end_of_SMSMotor 1696  
                       tablat 000FF5                 ??_TiResetTics 0051                         ttemp5 0078  
                       ttemp6 007B                         ttemp7 007F                         status 000FD8  
                 ?_DaSaveUser 0051                         wtemp8 0078               ___lbdiv@divisor 0051  
            __end_of_LcGotoXY 1D4C                saveEEPROM@data 0051               ___lbdiv@counter 0053  
               ??__TiRSITimer 004C              __end_of_LcScroll 017C                    _TiGetTimer 1CEE  
     EscriuPrimeraOrdre@ordre 0052               __initialization 1838                    _SiReadByte 0192  
                __end_of_main 1B50          __end_of_getFullValue 1AD0                    _SiSendChar 0168  
                 _JoDirection 019A                        ??_main 0067                 __activetblptr 000002  
               ?_initJoystick 004C               ??_displayLogOut 005F               ??_displayString 0060  
                      _ADCON0 000FC2                        _ADCON1 000FC1                        _ADCON2 000FC0  
         __end_of_TiInitTimer 1D78                        _ADRESH 000FC4                        _EEDATA 000FA8  
                      _EECON2 000FA7               ??_SiIsAvailable 0051           __end_of_KeypadMotor 13CA  
                   ??_LcClear 005D                     ??_CantaIR 0053                        i2l4383 1BBC  
                      i2l4387 1BD2                        i2l4379 1BB4                        _LCDcol 0037  
              LcGotoXY@Fisics 005C                LcGotoXY@Column 005D                        _LCDrow 0038  
               ??_WaitForBusy 0058                 ?_readUserData 004C            _mUser@EEPROM$F1707 000B  
                   ??_JoMoved 0051                   ?_LcCursorOn 004C             KeSetMode@menuMode 0052  
                      _LcInit 154C               ??_updateSysTime 0051                  ?_DaGetStatus 004C  
                      _Espera 1F04                  _LcGotoXY$795 005A             __end_of_DaGetIdle 0168  
                      _RowAct 0040           __end_of_TiResetTics 1F34              __end_of_mainMenu 1700  
                      _h_Tics 000F                        _dataRX 0028                        _dataTX 0024  
                   ??___lbdiv 0052                     ??___awmod 0055                     ??___lbmod 0052  
                      _mScore 0033              __end_of_initData 1AAC              __end_of_initMenu 00E6  
            __end_of_initTime 00D8           __end_of__TiRSITimer 1BDC                        clear_0 187E  
                      clear_1 188A                        clear_2 1896                        _minute 0075  
                      _second 0017                        _period 003B                     ??_btMotor 0058  
             ___awmod@divisor 0053                        isa$std 000001               ___awmod@counter 0055  
            __end_of_sendChar 1F62                        _status 001D                ??_initJoystick 0051  
                   ??_initSIO 0052                  __pdataCOMRAM 0067         __end_of_resetPosition 018A  
                   ??_nextRow 005E                  __mediumconst 0000                        tblptrh 000FF7  
                      tblptrl 000FF6                        tblptru 000FF8                  ?_DaSaveScore 004C  
           __end_of_CantaData 1C3A              __end_of_stopSong 2000              ___lbdiv@dividend 0052  
              ??_readUserData 0052               ___lbmod@divisor 0051          __end_of_displayError 1C86  
                  __accesstop 0080       __end_of__initialization 189C             __end_of_KeSetMode 1E58  
             ___lbmod@counter 0053                 _LOGOUTMESSAGE 0096             __end_of_LcPutChar 1DA2  
        DaSaveScore@userScore 005F                 ___rparam_used 000001                 __end_of_TABLE 020D  
                 ?_TiGetTimer 004C             __end_of_JoSetMode 0160                __pcstackCOMRAM 004C  
         __end_of_WaitForBusy 1C1A                   ?_SiReadByte 004C                  __pidataBANK0 18AA  
       __end_of_joystickMotor 1488                   ?_SiSendChar 004C                    __end_ofPL2 0DF4  
                  __end_ofPL4 0DFE                    __end_ofPL6 0E18                    __end_ofPL8 0E24  
            ___lbdiv@quotient 0054                     ?_RSI_High 004C                     ?_SMSMotor 004C  
           __end_of_TiGetTics 1E16                _SiRecievedByte 0170                   _TiInitTimer 1D4C  
                 _KeypadMotor 12BA                     ?_LcGotoXY 0059                     ?_LcScroll 004C  
                  __pbssBANK0 00EC                    __pbssBANK1 0100                   _TiResetTics 1F24  
                  _btSendByte 1FE4            _state@EEPROM$F1704 001F                       ?_LcInit 005D  
               _CantaPartAlta 19E4                       ?_Espera 0058                   __TiRSITimer 1B98  
            ??_displayResults 005F              ??_updateGameTime 0051              ??_displaySysTime 005E  
               ?_setResetTXRX 004C        __end_of_SiRecievedByte 0176                    ??_RSI_High 004D  
                  ??_SMSMotor 0058                    _getPresses 018E                    _audioMotor 148E  
                     LcInit@i 005F                       _LCDcolm 0036                  ??_DaFindUser 005F  
                  ??_LcGotoXY 005A                 ?_resetDisplay 004C                    ??_LcScroll 0054  
                     _RESULTS 0080                  ?_LcCursorOff 004C                  _getFullValue 1AAC  
           __end_of_dataMotor 0DC6                     ?_mainMenu 004C                       _LcClear 0036  
                     _CantaIR 1F7E                     ?_initData 004C                     ?_initMenu 004C  
                   ?_initTime 004C                  ??_DaSaveUser 0052                   _WaitForBusy 1BDC  
                     _JoMoved 0196                    _readEEPROM 008E                ?_CantaPartAlta 004C  
           __end_of_getColumn 0138          __end_of_initJoystick 1F7E                 ??_btAvailable 0051  
                   ?_sendChar 004C                _DaGetNumScores 01A2                       __Hparam 0000  
                     __Lparam 0000                ??_setResetTXRX 0051                    _initKeypad 1EC4  
          __end_of_DaFindUser 1EC4                       ___lbdiv 1CBA                       ___awmod 1916  
                     ___lbmod 1DCA                  _MAINMENUSIZE 0070                  __psmallconst 0200  
                  _currentKey 0047             __end_of_isPressed 1FE4                  ?_JoDirection 004C  
                   ?_stopSong 004C                       __pcinit 1838               ?_SiRecievedByte 004C  
                     _btMotor 118A                       __ramtop 0200          __end_of_readUserData 1790  
                     _allowed 0022                       __ptext0 1B06                       __ptext1 0E5A  
                     __ptext2 006E                       __ptext3 1FB4                       __ptext4 1F44  
                     __ptext5 1FE4                       __ptext6 0138                       __ptext7 02D0  
                     __ptext8 0140                       __ptext9 0182             __end_of_initAudio 00AE  
                   _T0CONbits 000FD5                     CantaIR@IR 0053                       _initSIO 1E5E  
                     _counter 004B                    _saveEEPROM 1E82             __end_of_menuMotor 0986  
                     _joyMode 002B            __end_of_DaSaveUser 1FB4              ___awmod@dividend 0051  
              ??_resetDisplay 005D                       _nextRow 00BC                       _minutes 0076  
                     _seconds 0018                    _modifyTime 0106                       _timerRX 0029  
                     _timerTX 0025                       _pressed 0045                       _stateRX 002A  
                     _stateTX 0026               WaitForBusy@Busy 0058                       _userNum 001E  
                     _sysTime 00C5          end_of_initialization 189C                    ??_mainMenu 005F  
                   _LOGINMENU 009F                    ??_initData 0054                    ??_initMenu 0052  
                  ??_initTime 0052        __end_of_DaGetNumScores 01A6                   ?_btSendByte 004C  
               __Lmediumconst 0000               TiGetTics@Handle 0055                  ??_LcCursorOn 0059  
           __end_of_timeMotor 1158                    ??_sendChar 005F             __end_of_timerOver 0148  
                  _resetTimer 00F2                    _numPresses 0044               TiGetTics@actual 0056  
                   _RCSTAbits 000FAB                       postdec1 000FE5                       postdec2 000FDD  
                     postinc0 000FEE                       postinc1 000FE6                       postinc2 000FDE  
           __end_of_startSong 00BC           __end_of_btAvailable 0140                     _DaGetIdle 0160  
                  ??_stopSong 0051             __end_of_stopTimer 0186                     _PORTBbits 000F81  
                _displayError 1C52                     _PORTCbits 000F82                     _PORTDbits 000F83  
                 ?_getPresses 004C                   ?_audioMotor 004C             _KeGetGenericValue 1EE4  
           _incrementPosition 018A            __end_of_LcCursorOn 0124              ___lbmod@dividend 0052  
          ?_KeGetGenericValue 004C                     _TRISAbits 000F92                     _TRISBbits 000F93  
                   _TRISCbits 000F94                     _TRISDbits 000F95         __end_of_displayLogOut 1B8E  
          ?_incrementPosition 004C             readEEPROM@address 0051         __end_of_displayString 1E32  
         getFullValue@generic 0055                    _startTimer 007E           ??_KeGetGenericValue 0051  
             ??_CantaPartAlta 0051         __end_of_SiIsAvailable 0182                   ___lbmod@rem 0054  
         ??_incrementPosition 0051                     _CantaData 1C1A               ?_DaGetNumScores 004C  
                 ?_readEEPROM 004C                     _TXSTAbits 000FAC                  ??_TiGetTimer 0051  
                saveEEPROM@ad 0052                __end_of_LcInit 15EC                     _KeSetMode 1E3A  
       __end_of_updateSysTime 007E                     _LcPutChar 1D78                  ??_SiReadByte 0051  
              __end_of_Espera 1F24                   ?_initKeypad 004C                _KeGetCharValue 0150  
                ??_SiSendChar 0051    __end_of_EscriuPrimeraOrdre 1820                    ?_DaGetIdle 004C  
                 _BAUDCONbits 000FB8                     _JoSetMode 0158     __end_of_KeGetGenericValue 1F04  
               __pidataCOMRAM 005E              _timer@time$F1786 0014     __end_of_incrementPosition 018E  
                   _ColumnAct 003F                    _wrongState 0019                  ?_TiInitTimer 004C  
                 ?_saveEEPROM 0051                  ?_KeypadMotor 004C                   __end_ofPL10 1D1E  
                 __end_ofPL20 1AEE                   __end_ofPL12 15F8                   __end_ofPL30 1B06  
                 __end_ofPL22 0E40                   __end_ofPL14 0E32                   __end_ofPL40 1546  
                 __end_ofPL32 0998                   __end_ofPL24 0990                   __end_ofPL16 1714  
                 __end_ofPL50 182E                   __end_ofPL42 1160                   __end_ofPL34 1536  
                 __end_ofPL26 1724                   __end_ofPL18 17AE                   __end_ofPL60 09B8  
                 __end_ofPL52 17BC                   __end_ofPL44 1B98                   __end_ofPL36 1DCA  
                 __end_ofPL28 1F44                   __end_ofPL70 1838                   __end_ofPL62 1730  
                 __end_ofPL54 0E54                   __end_ofPL46 0E4E                   __end_ofPL38 1C48  
                 __end_ofPL80 148E                   __end_ofPL72 116A                   __end_ofPL64 09C0  
                 __end_ofPL56 09A2                   __end_ofPL48 1E3A                   __end_ofPL90 1E5E  
                 __end_ofPL82 1172                   __end_ofPL74 1A4A                   __end_ofPL66 1C52  
                 __end_ofPL58 09AC                   __end_ofPL92 1182                   __end_ofPL84 154C  
                 __end_ofPL76 09CA                   __end_ofPL68 19E4                   __end_ofPL94 118A  
                 __end_ofPL86 117A                   __end_ofPL78 0E5A                   __end_ofPL96 09D2  
                 __end_ofPL88 13D0           start_initialization 1838                     _TiGetTics 1DF0  
                 ?_modifyTime 004C          __end_of_setResetTXRX 00F2            __end_of_TiGetTimer 1D0C  
            _state@Audio$F919 003E            __end_of_SiReadByte 0196                  ?_TiResetTics 004C  
                  ?_CantaData 004C            __end_of_SiSendChar 0170                      ??_LcInit 005E  
                _LOGREGSCREEN 00E0                   _btAvailable 0138                   ?_resetTimer 004C  
      __end_of_KeGetCharValue 0158                  ?__TiRSITimer 004C                      ??_Espera 005C  
__end_of_displayScoresMarquee 0150                    ?_KeSetMode 004C          __end_of_resetDisplay 0106  
                  ?_LcPutChar 004C                   __pdataBANK0 0080           displayString@string 005F  
                  ?_JoSetMode 004C                  _initJoystick 1F62                   __pbssCOMRAM 0001  
                  ?_TiGetTics 0051              SiSendChar@myByte 0051                   ?_startTimer 004C  
__end_of_displayTimeRemaining 005E                      ?_LcClear 004C                      ?_CantaIR 004C  
              _CantaPartBaixa 197E                  ?_WaitForBusy 004C                  _readUserData 1730  
                    ?_JoMoved 004C                     _dataMotor 09D2               ?_KeGetCharValue 004C  
            ??_SiRecievedByte 0051                     __pintcode 0008                     _getColumn 012E  
                    ?___lbdiv 0051                      ?___awmod 0051                      ?___lbmod 0051  
                   _available 0043               CantaPartBaixa@c 0052                   ??_DaGetIdle 0051  
                    ?_btMotor 004C                      ?_initSIO 004C                   __smallconst 0200  
                   _isPressed 1FCC                      ?_nextRow 004C                     _counterRX 0027  
                   _counterTX 0023                     _initAudio 009E                 _resetPosition 0186  
                   _menuMotor 02D0        __end_of_CantaPartBaixa 19DA                      _MAINMENU 020D  
                 ??_CantaData 0053                  ??_btSendByte 0052                      _LATBbits 000F8A  
                    _LATCbits 000F8B                      _LATDbits 000F8C                    ?_dataMotor 004C  
                   _saveScore 001B                 ??_DaGetStatus 0051                     _saveState 001A  
                 ??_KeSetMode 0052                     _numScores 0021                      _PIR1bits 000F9E  
                 ??_LcPutChar 005E                     _timeMotor 0E5A                      _RCONbits 000FD0  
                  ?_getColumn 004C                     _skipState 0032                     _timer_SMS 0048  
                   _timerOver 0140                     _timerSong 003C                      _SMSTABLE 0299  
               _joystickMotor 13D0                   ??_JoSetMode 0051                     _topScores 0001  
                    _RSI_High 0008                    _ADCON0bits 000FC2                  ??_getPresses 0051  
                    _SMSMotor 15F8                  ??_audioMotor 0058                     _startSong 00AE  
              btSendByte@byte 0052                    ?_isPressed 004C            __end_of_btSendByte 1FFA  
                    Espera@ms 005A                     _stopTimer 0182                      _LcGotoXY 1D1E  
              ?_resetPosition 004C                   ??_TiGetTics 0053                    ?_initAudio 004C  
                   _sysMinute 0015                     _sysSecond 0016                      _LcScroll 0176  
        _displayScoresMarquee 0148                 ??_DaSaveScore 005F              ??_DaGetNumScores 0051  
                 LcGotoXY@Row 0059                    ?_menuMotor 004C                   _INTCON2bits 000FF1  
                   copy_data0 184C                     copy_data1 186C               ?_CantaPartBaixa 004C  
            _modifyTimeString 00D3                  ??_readEEPROM 0051                menuMotor@state 0031  
                  _EECON1bits 000FA6            __end_of_getPresses 0192                      __Hrparam 0000  
          __end_of_audioMotor 1524                      __Lrparam 0000                  ??_initKeypad 0052  
                  ?_timeMotor 004C                 JoSetMode@mode 0051                  _setResetTXRX 00E6  
                  ?_timerOver 004C                ?_joystickMotor 004C           __end_of_DaGetStatus 01A2  
        _displayTimeRemaining 004C                    ?_startSong 004C                  ??_saveEEPROM 0052  
          __end_of_readEEPROM 009E                    ?_stopTimer 004C                      _gameTime 003A  
       ?_displayScoresMarquee 004C                  ??_modifyTime 0051                _val@time$F1789 0011  
                _resetDisplay 00FC                      __ptext10 1FFA                      __ptext11 007E  
          _EscriuPrimeraOrdre 17BC                      __ptext20 018A                      __ptext12 00AE  
                    __ptext21 018E                      __ptext13 00E6                      __ptext30 0170  
                    __ptext22 004C                      __ptext14 00F2                      __ptext31 0192  
                    __ptext23 0110                      __ptext15 0186                      __ptext40 019A  
                    __ptext32 0176                      __ptext24 1E16                      __ptext16 00FC  
                    __ptext41 1F9A                      __ptext33 011A                      __ptext25 0148  
                    __ptext17 0106                      __ptext50 1E5E                      __ptext42 1C86  
                    __ptext34 0124                      __ptext26 1DA2                      __ptext18 1696  
                    __ptext51 00D8                      __ptext43 0036                      __ptext35 1E3A  
                    __ptext27 1B50                      __ptext19 1FCC                      __ptext60 1DCA  
                    __ptext52 1EC4                      __ptext44 019E                      __ptext36 0150  
                    __ptext28 1C52                      __ptext61 1CBA                      __ptext53 1F62  
                    __ptext45 01A2                      __ptext37 1AAC                      __ptext29 00BC  
                    __ptext70 1D4C                      __ptext62 1D78                      __ptext54 1A4A  
                    __ptext46 0160                      __ptext38 0158                      __ptext71 15F8  
                    __ptext63 1D1E                      __ptext55 1730                      __ptext47 1EA4  
                    __ptext39 0196                      __ptext80 197E                      __ptext72 1EE4  
                    __ptext64 1C1A                      __ptext56 008E                      __ptext48 13D0  
                    __ptext81 19E4                      __ptext73 012E                      __ptext65 118A  
                    __ptext57 009E                      __ptext49 00CA                      __ptext82 12BA  
                    __ptext74 154C                      __ptext66 0168                      __ptext58 09D2  
                    __ptext83 1F24                      __ptext75 1BDC                      __ptext67 017C  
                    __ptext59 1E82                      __ptext84 1DF0                      __ptext76 1CEE  
                    __ptext68 148E                      __ptext77 1F04                      __ptext69 1916  
                    __ptext86 1B98                      __ptext78 17BC                      __ptext79 1F7E  
              CantaPartAlta@c 0052               _lastUserPointer 001C                      _mainMenu 1696  
          __end_of_initKeypad 1EE4                      _s_Timers 0190                      _initData 1A4A  
                    _initMenu 00D8                      _initTime 00CA           ?_EscriuPrimeraOrdre 004C  
       __end_of_CantaPartAlta 1A40           __end_of_DaSaveScore 1CBA                   ??_dataMotor 005F  
               CantaData@Data 0053                      _sendChar 1F44                  ?_btAvailable 004C  
                ??_resetTimer 0051            __end_of_saveEEPROM 1EA4                   ??_getColumn 0051  
                    isa$xinst 000000                      _previous 0046                      int$flags 0077  
                    _position 0020                      _stateSMS 0041            __end_of_modifyTime 0110  
                    _stateJoy 002C         ?_displayTimeRemaining 004C                      _stopSong 1FFA  
        ??_EscriuPrimeraOrdre 0051                    LcInit@rows 005E               ??_resetPosition 0051  
                 _periodTimer 003D                   ??_isPressed 0051                    _INTCONbits 000FF2  
                 ??_initAudio 0052            __end_of_resetTimer 00FC                   ??_menuMotor 0061  
               ??_LcCursorOff 0059                 ?_getFullValue 004C                  ??_startTimer 005E  
                    intlevel2 0000              ??_KeGetCharValue 0056                  _timerBounces 0049  
                  LcPutChar@c 005E                   _DaGetStatus 019E               ??_joystickMotor 0052  
                 ??_timeMotor 005F              _state@time$F1787 0013                   ??_timerOver 0051  
               ??_JoDirection 0051            __end_of_startTimer 008E                _displayResults 1DA2  
                 ??_startSong 0052                _updateGameTime 1FB4                _displaySysTime 0110  
      ??_displayScoresMarquee 0051                   ??_stopTimer 0051                    _DaFindUser 1EA4  
           DaFindUser@logUser 005E                ??_getFullValue 0051                 _displayLogOut 1B50  
                 _DaSaveScore 1C86                _dataMotor$1730 0065                 _displayString 1E16  
               _SiIsAvailable 017C                    _DaSaveUser 1F9A           __end_of_LcCursorOff 012E  
           DaSaveUser@regUser 0051  
