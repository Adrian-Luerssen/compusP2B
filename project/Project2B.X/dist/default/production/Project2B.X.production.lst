

Microchip MPLAB XC8 Assembler V2.36 build 20220127204148 
                                                                                               Mon Jun 06 23:38:09 2022

Microchip MPLAB XC8 C Compiler v2.36 (Pro license) build 20220127204148 Og9s 
     1                           	processor	18F4321
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	plic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    12                           	psect	text0,global,reloc=2,class=CODE,delta=1
    13                           	psect	text1,global,reloc=2,class=CODE,delta=1
    14                           	psect	text2,global,reloc=2,class=CODE,delta=1
    15                           	psect	text3,global,reloc=2,class=CODE,delta=1
    16                           	psect	text4,global,reloc=2,class=CODE,delta=1
    17                           	psect	text5,global,reloc=2,class=CODE,delta=1
    18                           	psect	text6,global,reloc=2,class=CODE,delta=1
    19                           	psect	text7,global,reloc=2,class=CODE,delta=1
    20                           	psect	text8,global,reloc=2,class=CODE,delta=1
    21                           	psect	text9,global,reloc=2,class=CODE,delta=1
    22                           	psect	text10,global,reloc=2,class=CODE,delta=1
    23                           	psect	text11,global,reloc=2,class=CODE,delta=1
    24                           	psect	text12,global,reloc=2,class=CODE,delta=1
    25                           	psect	text13,global,reloc=2,class=CODE,delta=1
    26                           	psect	text14,global,reloc=2,class=CODE,delta=1
    27                           	psect	text15,global,reloc=2,class=CODE,delta=1
    28                           	psect	text16,global,reloc=2,class=CODE,delta=1
    29                           	psect	text17,global,reloc=2,class=CODE,delta=1
    30                           	psect	text18,global,reloc=2,class=CODE,delta=1
    31                           	psect	text19,global,reloc=2,class=CODE,delta=1
    32                           	psect	text20,global,reloc=2,class=CODE,delta=1
    33                           	psect	text21,global,reloc=2,class=CODE,delta=1
    34                           	psect	text22,global,reloc=2,class=CODE,delta=1
    35                           	psect	text23,global,reloc=2,class=CODE,delta=1,group=1
    36                           	psect	text24,global,reloc=2,class=CODE,delta=1
    37                           	psect	text25,global,reloc=2,class=CODE,delta=1
    38                           	psect	text26,global,reloc=2,class=CODE,delta=1
    39                           	psect	text27,global,reloc=2,class=CODE,delta=1
    40                           	psect	text28,global,reloc=2,class=CODE,delta=1
    41                           	psect	text29,global,reloc=2,class=CODE,delta=1
    42                           	psect	text30,global,reloc=2,class=CODE,delta=1
    43                           	psect	text31,global,reloc=2,class=CODE,delta=1
    44                           	psect	text32,global,reloc=2,class=CODE,delta=1
    45                           	psect	text33,global,reloc=2,class=CODE,delta=1
    46                           	psect	text34,global,reloc=2,class=CODE,delta=1
    47                           	psect	text35,global,reloc=2,class=CODE,delta=1
    48                           	psect	text36,global,reloc=2,class=CODE,delta=1
    49                           	psect	text37,global,reloc=2,class=CODE,delta=1
    50                           	psect	text38,global,reloc=2,class=CODE,delta=1
    51                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    52                           	psect	text40,global,reloc=2,class=CODE,delta=1
    53                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    54                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    55                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    56                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    57                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    58                           	psect	pa_nodes0,global,class=CODE,delta=1
    59  0000                     
    60                           ; Version 2.36
    61                           ; Generated 28/01/2022 GMT
    62                           ; 
    63                           ; Copyright Â© 2022, Microchip Technology Inc. and its subsidiaries ("Microchip")
    64                           ; All rights reserved.
    65                           ; 
    66                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    67                           ; 
    68                           ; Redistribution and use in source and binary forms, with or without modification, are
    69                           ; permitted provided that the following conditions are met:
    70                           ; 
    71                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    72                           ;        conditions and the following disclaimer.
    73                           ; 
    74                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    75                           ;        of conditions and the following disclaimer in the documentation and/or other
    76                           ;        materials provided with the distribution. Publication is not required when
    77                           ;        this file is used in an embedded application.
    78                           ; 
    79                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    80                           ;        software without specific prior written permission.
    81                           ; 
    82                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    83                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    84                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    85                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    86                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    87                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    88                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    89                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    90                           ; 
    91                           ; 
    92                           ; Code-generator required, PIC18F4321 Definitions
    93                           ; 
    94                           ; SFR Addresses
    95  0000                     
    96                           	psect	idataCOMRAM
    97  000E30                     __pidataCOMRAM:
    98                           	callstack 0
    99                           
   100                           ;initializer for menuMotor@state
   101  000E30  01                 	db	1
   102                           
   103                           	psect	smallconst
   104  000200                     __psmallconst:
   105                           	callstack 0
   106  000200  00                 	db	0
   107  000201                     _LOGREGSCREEN:
   108                           	callstack 0
   109  000201  55                 	db	85
   110  000202  53                 	db	83
   111  000203  45                 	db	69
   112  000204  52                 	db	82
   113  000205  3A                 	db	58
   114  000206  00                 	db	0
   115  000207  50                 	db	80
   116  000208  53                 	db	83
   117  000209  57                 	db	87
   118  00020A  44                 	db	68
   119  00020B  3A                 	db	58
   120  00020C  00                 	db	0
   121  00020D                     __end_of_LOGREGSCREEN:
   122                           	callstack 0
   123  00020D                     _TABLE:
   124                           	callstack 0
   125  00020D  31                 	db	49
   126  00020E  32                 	db	50
   127  00020F  33                 	db	51
   128  000210  34                 	db	52
   129  000211  35                 	db	53
   130  000212  36                 	db	54
   131  000213  37                 	db	55
   132  000214  38                 	db	56
   133  000215  39                 	db	57
   134  000216  2A                 	db	42
   135  000217  30                 	db	48
   136  000218  23                 	db	35
   137  000219                     __end_of_TABLE:
   138                           	callstack 0
   139  000219                     _SMSTABLE:
   140                           	callstack 0
   141  000219  31                 	db	49
   142  00021A  00                 	db	0
   143  00021B  00                 	db	0
   144  00021C  00                 	db	0
   145  00021D  00                 	db	0
   146  00021E  00                 	db	0
   147  00021F  41                 	db	65
   148  000220  42                 	db	66
   149  000221  43                 	db	67
   150  000222  32                 	db	50
   151  000223  00                 	db	0
   152  000224  00                 	db	0
   153  000225  44                 	db	68
   154  000226  45                 	db	69
   155  000227  46                 	db	70
   156  000228  33                 	db	51
   157  000229  00                 	db	0
   158  00022A  00                 	db	0
   159  00022B  47                 	db	71
   160  00022C  48                 	db	72
   161  00022D  49                 	db	73
   162  00022E  34                 	db	52
   163  00022F  00                 	db	0
   164  000230  00                 	db	0
   165  000231  4A                 	db	74
   166  000232  4B                 	db	75
   167  000233  4C                 	db	76
   168  000234  35                 	db	53
   169  000235  00                 	db	0
   170  000236  00                 	db	0
   171  000237  4D                 	db	77
   172  000238  4E                 	db	78
   173  000239  4F                 	db	79
   174  00023A  36                 	db	54
   175  00023B  00                 	db	0
   176  00023C  00                 	db	0
   177  00023D  50                 	db	80
   178  00023E  51                 	db	81
   179  00023F  52                 	db	82
   180  000240  53                 	db	83
   181  000241  37                 	db	55
   182  000242  00                 	db	0
   183  000243  54                 	db	84
   184  000244  55                 	db	85
   185  000245  56                 	db	86
   186  000246  38                 	db	56
   187  000247  00                 	db	0
   188  000248  00                 	db	0
   189  000249  57                 	db	87
   190  00024A  58                 	db	88
   191  00024B  59                 	db	89
   192  00024C  5A                 	db	90
   193  00024D  39                 	db	57
   194  00024E  00                 	db	0
   195  00024F                     __end_of_SMSTABLE:
   196                           	callstack 0
   197  00024F                     _LOGINMENU:
   198                           	callstack 0
   199  00024F  31                 	db	49
   200  000250  2E                 	db	46
   201  000251  4C                 	db	76
   202  000252  4F                 	db	79
   203  000253  47                 	db	71
   204  000254  49                 	db	73
   205  000255  4E                 	db	78
   206  000256  00                 	db	0
   207  000257  00                 	db	0
   208  000258  00                 	db	0
   209  000259  00                 	db	0
   210  00025A  32                 	db	50
   211  00025B  2E                 	db	46
   212  00025C  52                 	db	82
   213  00025D  45                 	db	69
   214  00025E  47                 	db	71
   215  00025F  49                 	db	73
   216  000260  53                 	db	83
   217  000261  54                 	db	84
   218  000262  45                 	db	69
   219  000263  52                 	db	82
   220  000264  00                 	db	0
   221  000265                     __end_of_LOGINMENU:
   222                           	callstack 0
   223  0000                     _LATCbits	set	3979
   224  0000                     _TRISCbits	set	3988
   225  0000                     _LATDbits	set	3980
   226  0000                     _TRISDbits	set	3989
   227  0000                     _TMR0L	set	4054
   228  0000                     _TMR0H	set	4055
   229  0000                     _ADCON0bits	set	4034
   230  0000                     _T0CONbits	set	4053
   231  0000                     _PORTBbits	set	3969
   232  0000                     _TRISBbits	set	3987
   233  0000                     _RCONbits	set	4048
   234  0000                     _T0CON	set	4053
   235  0000                     _INTCONbits	set	4082
   236  0000                     _INTCON2bits	set	4081
   237  0000                     _PORTDbits	set	3971
   238  0000                     _LATBbits	set	3978
   239  0000                     _RCSTAbits	set	4011
   240  0000                     _TXSTAbits	set	4012
   241  0000                     _ADCON2	set	4032
   242  0000                     _ADCON1	set	4033
   243  0000                     _ADCON0	set	4034
   244  0000                     _TRISAbits	set	3986
   245  0000                     _ADRESH	set	4036
   246  0000                     _TXREG	set	4013
   247  0000                     _SPBRG	set	4015
   248  0000                     _BAUDCONbits	set	4024
   249  000265  00                 	db	0	; dummy byte at the end
   250  0000                     
   251                           ; #config settings
   252                           
   253                           	psect	cinit
   254  000BA0                     __pcinit:
   255                           	callstack 0
   256  000BA0                     start_initialization:
   257                           	callstack 0
   258  000BA0                     __initialization:
   259                           	callstack 0
   260                           
   261                           ; Initialize objects allocated to COMRAM (1 bytes)
   262                           ; load TBLPTR registers with __pidataCOMRAM
   263  000BA0  0E30               	movlw	low __pidataCOMRAM
   264  000BA2  6EF6               	movwf	tblptrl,c
   265  000BA4  0E0E               	movlw	high __pidataCOMRAM
   266  000BA6  6EF7               	movwf	tblptrh,c
   267  000BA8  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   268  000BAA  6EF8               	movwf	tblptru,c
   269  000BAC  0009               	tblrd		*+	;fetch initializer
   270  000BAE  CFF5 F03D          	movff	tablat,__pdataCOMRAM
   271                           
   272                           ; Clear objects allocated to BANK0 (75 bytes)
   273  000BB2  EE00  F080         	lfsr	0,__pbssBANK0
   274  000BB6  0E4B               	movlw	75
   275  000BB8                     clear_0:
   276  000BB8  6AEE               	clrf	postinc0,c
   277  000BBA  06E8               	decf	wreg,f,c
   278  000BBC  E1FD               	bnz	clear_0
   279                           
   280                           ; Clear objects allocated to COMRAM (32 bytes)
   281  000BBE  EE00  F001         	lfsr	0,__pbssCOMRAM
   282  000BC2  0E20               	movlw	32
   283  000BC4                     clear_1:
   284  000BC4  6AEE               	clrf	postinc0,c
   285  000BC6  06E8               	decf	wreg,f,c
   286  000BC8  E1FD               	bnz	clear_1
   287  000BCA                     end_of_initialization:
   288                           	callstack 0
   289  000BCA                     __end_of__initialization:
   290                           	callstack 0
   291  000BCA  903E               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   292  000BCC  923E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   293  000BCE  0E00               	movlw	low (__Lmediumconst shr (0+16))
   294  000BD0  6EF8               	movwf	tblptru,c
   295  000BD2  0100               	movlb	0
   296  000BD4  EFEC  F005         	goto	_main	;jump to C main() function
   297                           
   298                           	psect	bssCOMRAM
   299  000001                     __pbssCOMRAM:
   300                           	callstack 0
   301  000001                     _Timer:
   302                           	callstack 0
   303  000001                     	ds	2
   304  000003                     _h_Tics:
   305                           	callstack 0
   306  000003                     	ds	2
   307  000005                     joystickMotor@state:
   308                           	callstack 0
   309  000005                     	ds	1
   310  000006                     _moved:
   311                           	callstack 0
   312  000006                     	ds	1
   313  000007                     _y:
   314                           	callstack 0
   315  000007                     	ds	1
   316  000008                     _x:
   317                           	callstack 0
   318  000008                     	ds	1
   319  000009                     _send:
   320                           	callstack 0
   321  000009                     	ds	1
   322  00000A                     _val:
   323                           	callstack 0
   324  00000A                     	ds	1
   325  00000B                     _LCDcol:
   326                           	callstack 0
   327  00000B                     	ds	1
   328  00000C                     _LCDrow:
   329                           	callstack 0
   330  00000C                     	ds	1
   331  00000D                     _timer:
   332                           	callstack 0
   333  00000D                     	ds	1
   334  00000E                     _period:
   335                           	callstack 0
   336  00000E                     	ds	1
   337  00000F                     _timerSong:
   338                           	callstack 0
   339  00000F                     	ds	1
   340  000010                     _periodTimer:
   341                           	callstack 0
   342  000010                     	ds	1
   343  000011                     _state@Audio$F854:
   344                           	callstack 0
   345  000011                     	ds	1
   346  000012                     _ColumnAct:
   347                           	callstack 0
   348  000012                     	ds	1
   349  000013                     _RowAct:
   350                           	callstack 0
   351  000013                     	ds	1
   352  000014                     _Columns:
   353                           	callstack 0
   354  000014                     	ds	1
   355  000015                     _Rows:
   356                           	callstack 0
   357  000015                     	ds	1
   358  000016                     _stateSMS:
   359                           	callstack 0
   360  000016                     	ds	1
   361  000017                     _state:
   362                           	callstack 0
   363  000017                     	ds	1
   364  000018                     _available:
   365                           	callstack 0
   366  000018                     	ds	1
   367  000019                     _numPresses:
   368                           	callstack 0
   369  000019                     	ds	1
   370  00001A                     _pressed:
   371                           	callstack 0
   372  00001A                     	ds	1
   373  00001B                     _previous:
   374                           	callstack 0
   375  00001B                     	ds	1
   376  00001C                     _currentKey:
   377                           	callstack 0
   378  00001C                     	ds	1
   379  00001D                     _timer_SMS:
   380                           	callstack 0
   381  00001D                     	ds	1
   382  00001E                     _timerBounces:
   383                           	callstack 0
   384  00001E                     	ds	1
   385  00001F                     _row:
   386                           	callstack 0
   387  00001F                     	ds	1
   388  000020                     _counter:
   389                           	callstack 0
   390  000020                     	ds	1
   391                           
   392                           	psect	dataCOMRAM
   393  00003D                     __pdataCOMRAM:
   394                           	callstack 0
   395  00003D                     menuMotor@state:
   396                           	callstack 0
   397  00003D                     	ds	1
   398                           
   399                           	psect	bssBANK0
   400  000080                     __pbssBANK0:
   401                           	callstack 0
   402  000080                     _s_Timers:
   403                           	callstack 0
   404  000080                     	ds	75
   405                           
   406                           	psect	cstackCOMRAM
   407  000021                     __pcstackCOMRAM:
   408                           	callstack 0
   409  000021                     
   410                           ; 1 bytes @ 0x0
   411  000021                     	ds	1
   412  000022                     ??_RSI_High:
   413                           
   414                           ; 1 bytes @ 0x1
   415  000022                     	ds	4
   416  000026                     ??_KeGetGenericValue:
   417  000026                     ??_getFullValue:
   418  000026                     ??_EscriuPrimeraOrdre:
   419  000026                     ??_CantaPartAlta:
   420  000026                     ??_CantaPartBaixa:
   421  000026                     ?_TiGetTics:
   422                           	callstack 0
   423  000026                     ?___awmod:
   424                           	callstack 0
   425  000026                     TiResetTics@Handle:
   426                           	callstack 0
   427  000026                     _isPressed$525:
   428                           	callstack 0
   429  000026                     SiSendChar@myByte:
   430                           	callstack 0
   431  000026                     ___awmod@dividend:
   432                           	callstack 0
   433                           
   434                           ; 2 bytes @ 0x5
   435  000026                     	ds	1
   436  000027                     ??_joystickMotor:
   437  000027                     KeSetMode@menuMode:
   438                           	callstack 0
   439  000027                     CantaPartAlta@c:
   440                           	callstack 0
   441  000027                     CantaPartBaixa@c:
   442                           	callstack 0
   443  000027                     EscriuPrimeraOrdre@ordre:
   444                           	callstack 0
   445                           
   446                           ; 1 bytes @ 0x6
   447  000027                     	ds	1
   448  000028                     ??_TiGetTics:
   449  000028                     CantaIR@IR:
   450                           	callstack 0
   451  000028                     CantaData@Data:
   452                           	callstack 0
   453  000028                     ___awmod@divisor:
   454                           	callstack 0
   455                           
   456                           ; 2 bytes @ 0x7
   457  000028                     	ds	2
   458  00002A                     TiGetTics@Handle:
   459                           	callstack 0
   460  00002A                     getFullValue@generic:
   461                           	callstack 0
   462  00002A                     ___awmod@counter:
   463                           	callstack 0
   464                           
   465                           ; 1 bytes @ 0x9
   466  00002A                     	ds	1
   467  00002B                     ___awmod@sign:
   468                           	callstack 0
   469  00002B                     TiGetTics@actual:
   470                           	callstack 0
   471                           
   472                           ; 2 bytes @ 0xA
   473  00002B                     	ds	2
   474  00002D                     ??_audioMotor:
   475  00002D                     ??_SMSMotor:
   476  00002D                     ??_KeypadMotor:
   477  00002D                     WaitForBusy@Busy:
   478                           	callstack 0
   479  00002D                     Espera@Timer:
   480                           	callstack 0
   481                           
   482                           ; 2 bytes @ 0xC
   483  00002D                     	ds	1
   484  00002E                     LcGotoXY@Row:
   485                           	callstack 0
   486                           
   487                           ; 1 bytes @ 0xD
   488  00002E                     	ds	1
   489  00002F                     ??_LcGotoXY:
   490  00002F                     Espera@ms:
   491                           	callstack 0
   492                           
   493                           ; 2 bytes @ 0xE
   494  00002F                     	ds	2
   495  000031                     ??_Espera:
   496  000031                     _LcGotoXY$731:
   497                           	callstack 0
   498                           
   499                           ; 2 bytes @ 0x10
   500  000031                     	ds	1
   501  000032                     LcInit@columns:
   502                           	callstack 0
   503                           
   504                           ; 1 bytes @ 0x11
   505  000032                     	ds	1
   506  000033                     LcInit@rows:
   507                           	callstack 0
   508  000033                     LcGotoXY@Fisics:
   509                           	callstack 0
   510                           
   511                           ; 2 bytes @ 0x12
   512  000033                     	ds	1
   513  000034                     LcInit@i:
   514                           	callstack 0
   515                           
   516                           ; 2 bytes @ 0x13
   517  000034                     	ds	1
   518  000035                     LcGotoXY@Column:
   519                           	callstack 0
   520                           
   521                           ; 1 bytes @ 0x14
   522  000035                     	ds	1
   523  000036                     LcPutChar@c:
   524                           	callstack 0
   525                           
   526                           ; 1 bytes @ 0x15
   527  000036                     	ds	1
   528  000037                     displayMenu@row:
   529                           	callstack 0
   530                           
   531                           ; 1 bytes @ 0x16
   532  000037                     	ds	1
   533  000038                     ??_displayMenu:
   534                           
   535                           ; 1 bytes @ 0x17
   536  000038                     	ds	2
   537  00003A                     displayMenu@menuMode:
   538                           	callstack 0
   539                           
   540                           ; 1 bytes @ 0x19
   541  00003A                     	ds	1
   542  00003B                     ??_menuMotor:
   543                           
   544                           ; 1 bytes @ 0x1A
   545  00003B                     	ds	2
   546  00003D                     
   547                           ; 1 bytes @ 0x1C
   548 ;;
   549 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   550 ;;
   551 ;; *************** function _main *****************
   552 ;; Defined at:
   553 ;;		line 44 in file "main.c"
   554 ;; Parameters:    Size  Location     Type
   555 ;;		None
   556 ;; Auto vars:     Size  Location     Type
   557 ;;		None
   558 ;; Return value:  Size  Location     Type
   559 ;;                  1    wreg      void 
   560 ;; Registers used:
   561 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   562 ;; Tracked objects:
   563 ;;		On entry : 0/0
   564 ;;		On exit  : 0/0
   565 ;;		Unchanged: 0/0
   566 ;; Data sizes:     COMRAM   BANK0   BANK1
   567 ;;      Params:         0       0       0
   568 ;;      Locals:         0       0       0
   569 ;;      Temps:          0       0       0
   570 ;;      Totals:         0       0       0
   571 ;;Total ram usage:        0 bytes
   572 ;; Hardware stack levels required when called: 8
   573 ;; This function calls:
   574 ;;		_KeypadMotor
   575 ;;		_LcInit
   576 ;;		_SMSMotor
   577 ;;		_TiInitTimer
   578 ;;		_audioMotor
   579 ;;		_initAudio
   580 ;;		_initJoystick
   581 ;;		_initKeypad
   582 ;;		_initMenu
   583 ;;		_initSIO
   584 ;;		_joystickMotor
   585 ;;		_menuMotor
   586 ;; This function is called by:
   587 ;;		Startup code after reset
   588 ;; This function uses a non-reentrant model
   589 ;;
   590                           
   591                           	psect	text0
   592  000BD8                     __ptext0:
   593                           	callstack 0
   594  000BD8                     _main:
   595                           	callstack 23
   596                           
   597                           ;incstack = 0
   598  000BD8  EC3A  F006         	call	_TiInitTimer	;wreg free
   599  000BDC  ECA2  F006         	call	_initJoystick	;wreg free
   600  000BE0  EC93  F006         	call	_initKeypad	;wreg free
   601  000BE4  0E10               	movlw	16
   602  000BE6  6E32               	movwf	LcInit@columns^0,c
   603  000BE8  0E02               	movlw	2
   604  000BEA  EC6A  F002         	call	_LcInit
   605  000BEE  ECEE  F006         	call	_initSIO	;wreg free
   606  000BF2  EC0F  F007         	call	_initMenu	;wreg free
   607  000BF6  ECE3  F006         	call	_initAudio	;wreg free
   608  000BFA                     l2739:
   609  000BFA  EC7F  F003         	call	_audioMotor	;wreg free
   610  000BFE  EC28  F003         	call	_SMSMotor	;wreg free
   611  000C02  ECDF  F001         	call	_KeypadMotor	;wreg free
   612  000C06  EC33  F001         	call	_menuMotor	;wreg free
   613  000C0A  ECCD  F002         	call	_joystickMotor	;wreg free
   614  000C0E  D7F5               	goto	l2739
   615  000C10                     __end_of_main:
   616                           	callstack 0
   617                           
   618 ;; *************** function _menuMotor *****************
   619 ;; Defined at:
   620 ;;		line 23 in file "Menu.c"
   621 ;; Parameters:    Size  Location     Type
   622 ;;		None
   623 ;; Auto vars:     Size  Location     Type
   624 ;;		None
   625 ;; Return value:  Size  Location     Type
   626 ;;                  1    wreg      void 
   627 ;; Registers used:
   628 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   629 ;; Tracked objects:
   630 ;;		On entry : 0/0
   631 ;;		On exit  : 0/0
   632 ;;		Unchanged: 0/0
   633 ;; Data sizes:     COMRAM   BANK0   BANK1
   634 ;;      Params:         0       0       0
   635 ;;      Locals:         0       0       0
   636 ;;      Temps:          2       0       0
   637 ;;      Totals:         2       0       0
   638 ;;Total ram usage:        2 bytes
   639 ;; Hardware stack levels used: 1
   640 ;; Hardware stack levels required when called: 7
   641 ;; This function calls:
   642 ;;		_KeGetCharValue
   643 ;;		_KeGetGenericValue
   644 ;;		_KeSetMode
   645 ;;		_LcClear
   646 ;;		_LcCursorOff
   647 ;;		_LcCursorOn
   648 ;;		_LcGotoXY
   649 ;;		_LcPutChar
   650 ;;		_TiGetTics
   651 ;;		_TiResetTics
   652 ;;		_displayMenu
   653 ;;		_getPresses
   654 ;;		_isPressed
   655 ;; This function is called by:
   656 ;;		_main
   657 ;; This function uses a non-reentrant model
   658 ;;
   659                           
   660                           	psect	text1
   661  000266                     __ptext1:
   662                           	callstack 0
   663  000266                     _menuMotor:
   664                           	callstack 23
   665                           
   666                           ;Menu.c: 24:     static char state = 1;;Menu.c: 25:     switch (state){
   667                           
   668                           ;incstack = 0
   669  000266  D08C               	goto	l2717
   670  000268                     l2629:
   671                           
   672                           ;Menu.c: 27:             displayMenu(0,0);
   673  000268  0E00               	movlw	0
   674  00026A  6E37               	movwf	displayMenu@row^0,c
   675  00026C  EC1F  F004         	call	_displayMenu
   676                           
   677                           ;Menu.c: 28:             if (LCDrow == 2){
   678  000270  0E02               	movlw	2
   679  000272  180C               	xorwf	_LCDrow^0,w,c
   680  000274  A4D8               	btfss	status,2,c
   681  000276  0012               	return	
   682                           
   683                           ;Menu.c: 29:                 LcCursorOff();
   684  000278  ECFD  F006         	call	_LcCursorOff	;wreg free
   685                           
   686                           ;Menu.c: 30:                 KeSetMode(0);
   687  00027C  0E00               	movlw	0
   688  00027E  EC61  F006         	call	_KeSetMode
   689                           
   690                           ;Menu.c: 31:                 state = 2;
   691  000282  0E02               	movlw	2
   692  000284  6E3D               	movwf	menuMotor@state^0,c
   693  000286  0C02               	retlw	2
   694  000288                     l2637:
   695                           
   696                           ;Menu.c: 35:             if (isPressed()){
   697  000288  ECCC  F006         	call	_isPressed	;wreg free
   698  00028C  0900               	iorlw	0
   699  00028E  B4D8               	btfsc	status,2,c
   700  000290  0012               	return	
   701                           
   702                           ;Menu.c: 36:                 val = KeGetGenericValue() - '0';
   703  000292  EC73  F006         	call	_KeGetGenericValue	;wreg free
   704  000296  0FD0               	addlw	208
   705  000298  6E0A               	movwf	_val^0,c
   706                           
   707                           ;Menu.c: 37:                 if (val == 1||val == 2){
   708  00029A  040A               	decf	_val^0,w,c
   709  00029C  E004               	bz	u2150
   710  00029E  0E02               	movlw	2
   711  0002A0  180A               	xorwf	_val^0,w,c
   712  0002A2  A4D8               	btfss	status,2,c
   713  0002A4  0012               	return	
   714  0002A6                     u2150:
   715                           
   716                           ;Menu.c: 38:                     LcClear();
   717  0002A6  ECD8  F006         	call	_LcClear	;wreg free
   718                           
   719                           ;Menu.c: 39:                     LcGotoXY(0,0);
   720  0002AA  0E00               	movlw	0
   721  0002AC  6A2E               	clrf	LcGotoXY@Row^0,c
   722  0002AE  ECD5  F003         	call	_LcGotoXY
   723                           
   724                           ;Menu.c: 40:                     KeSetMode(1);
   725  0002B2  0E01               	movlw	1
   726  0002B4  EC61  F006         	call	_KeSetMode
   727                           
   728                           ;Menu.c: 41:                     LCDcol = LCDrow = 0;
   729  0002B8  6A0C               	clrf	_LCDrow^0,c
   730  0002BA  6A0B               	clrf	_LCDcol^0,c
   731                           
   732                           ;Menu.c: 42:                     state = 3;
   733  0002BC  0E03               	movlw	3
   734  0002BE  6E3D               	movwf	menuMotor@state^0,c
   735  0002C0  0C03               	retlw	3
   736  0002C2                     l2651:
   737                           
   738                           ;Menu.c: 48:             displayMenu(1,0);
   739  0002C2  0E00               	movlw	0
   740  0002C4  6E37               	movwf	displayMenu@row^0,c
   741  0002C6  0E01               	movlw	1
   742  0002C8  EC1F  F004         	call	_displayMenu
   743                           
   744                           ;Menu.c: 49:             if (LCDrow == 2){
   745  0002CC  0E02               	movlw	2
   746  0002CE  180C               	xorwf	_LCDrow^0,w,c
   747  0002D0  A4D8               	btfss	status,2,c
   748  0002D2  0012               	return	
   749                           
   750                           ;Menu.c: 50:                 LCDrow = 0;
   751  0002D4  6A0C               	clrf	_LCDrow^0,c
   752                           
   753                           ;Menu.c: 51:                 LCDcol = 5;
   754  0002D6  0E05               	movlw	5
   755  0002D8  6E0B               	movwf	_LCDcol^0,c
   756                           
   757                           ;Menu.c: 52:                 LcGotoXY(LCDcol,LCDrow);
   758  0002DA  D86D               	call	PL28	;call to abstracted procedure
   759  0002DC  ECD5  F003         	call	_LcGotoXY
   760                           
   761                           ;Menu.c: 53:                 LcCursorOn();
   762  0002E0  ECF8  F006         	call	_LcCursorOn	;wreg free
   763                           
   764                           ;Menu.c: 54:                 state = 4;
   765  0002E4  0E04               	movlw	4
   766  0002E6  6E3D               	movwf	menuMotor@state^0,c
   767  0002E8  0C04               	retlw	4
   768  0002EA                     l2663:
   769                           
   770                           ;Menu.c: 58:             if (LCDcol >= 12 && TiGetTics(timer) >= 1000){
   771  0002EA  0E0B               	movlw	11
   772  0002EC  640B               	cpfsgt	_LCDcol^0,c
   773  0002EE  D00A               	goto	l2669
   774  0002F0  500D               	movf	_timer^0,w,c
   775  0002F2  EC4E  F006         	call	_TiGetTics
   776  0002F6  BE27               	btfsc	(?_TiGetTics+1)^0,7,c
   777  0002F8  D005               	goto	l2669
   778  0002FA  D858               	call	PL26	;call to abstracted procedure
   779  0002FC  E303               	bnc	l2669
   780  0002FE                     u2180:
   781                           
   782                           ;Menu.c: 59:                 state = 5;
   783  0002FE  0E05               	movlw	5
   784  000300  6E3D               	movwf	menuMotor@state^0,c
   785                           
   786                           ;Menu.c: 60:             }else if (isPressed()){
   787  000302  0C05               	retlw	5
   788  000304                     l2669:
   789  000304  ECCC  F006         	call	_isPressed	;wreg free
   790  000308  0900               	iorlw	0
   791  00030A  B4D8               	btfsc	status,2,c
   792  00030C  0012               	return	
   793                           
   794                           ;Menu.c: 61:                 TiResetTics(timer);
   795  00030E  500D               	movf	_timer^0,w,c
   796  000310  ECBE  F006         	call	_TiResetTics
   797                           
   798                           ;Menu.c: 62:                 if (getPresses() == 2){
   799  000314  EC16  F007         	call	_getPresses	;wreg free
   800  000318  0A02               	xorlw	2
   801  00031A  E104               	bnz	l2679
   802                           
   803                           ;Menu.c: 63:                     LcGotoXY(LCDcol--,LCDrow);
   804  00031C  D84C               	call	PL28	;call to abstracted procedure
   805  00031E  ECD5  F003         	call	_LcGotoXY
   806  000322  060B               	decf	_LCDcol^0,f,c
   807  000324                     l2679:
   808                           
   809                           ;Menu.c: 65:                 if (KeGetGenericValue() != '#'){
   810  000324  EC73  F006         	call	_KeGetGenericValue	;wreg free
   811  000328  0A23               	xorlw	35
   812  00032A  E0E9               	bz	u2180
   813                           
   814                           ;Menu.c: 66:                     LcPutChar(KeGetCharValue());
   815  00032C  EC07  F007         	call	_KeGetCharValue	;wreg free
   816  000330  EC63  F005         	call	_LcPutChar
   817  000334                     l2683:
   818                           
   819                           ;Menu.c: 67:                     LCDcol++;
   820  000334  2A0B               	incf	_LCDcol^0,f,c
   821  000336  0012               	return	
   822  000338                     l2691:
   823                           
   824                           ;Menu.c: 83:             LCDrow = 1;
   825  000338  0E01               	movlw	1
   826  00033A  6E0C               	movwf	_LCDrow^0,c
   827                           
   828                           ;Menu.c: 84:             LCDcol = 5;
   829  00033C  0E05               	movlw	5
   830  00033E  6E0B               	movwf	_LCDcol^0,c
   831                           
   832                           ;Menu.c: 85:             KeSetMode(1);
   833  000340  0E01               	movlw	1
   834  000342  EC61  F006         	call	_KeSetMode
   835                           
   836                           ;Menu.c: 86:             LcGotoXY(LCDcol,LCDrow);
   837  000346  D837               	call	PL28	;call to abstracted procedure
   838  000348  ECD5  F003         	call	_LcGotoXY
   839                           
   840                           ;Menu.c: 87:             state = 6;
   841  00034C  0E06               	movlw	6
   842  00034E  6E3D               	movwf	menuMotor@state^0,c
   843                           
   844                           ;Menu.c: 88:             break;
   845  000350  0C06               	retlw	6
   846  000352                     l2697:
   847                           
   848                           ;Menu.c: 90:             if (isPressed()){
   849  000352  ECCC  F006         	call	_isPressed	;wreg free
   850  000356  0900               	iorlw	0
   851  000358  B4D8               	btfsc	status,2,c
   852  00035A  0012               	return	
   853                           
   854                           ;Menu.c: 91:                 if (getPresses() == 2){
   855  00035C  EC16  F007         	call	_getPresses	;wreg free
   856  000360  0A02               	xorlw	2
   857  000362  E104               	bnz	l2705
   858                           
   859                           ;Menu.c: 92:                     LcGotoXY(LCDcol--,LCDrow);
   860  000364  D828               	call	PL28	;call to abstracted procedure
   861  000366  ECD5  F003         	call	_LcGotoXY
   862  00036A  060B               	decf	_LCDcol^0,f,c
   863  00036C                     l2705:
   864                           
   865                           ;Menu.c: 95:                 if (KeGetGenericValue() != '#'){
   866  00036C  EC73  F006         	call	_KeGetGenericValue	;wreg free
   867  000370  0A23               	xorlw	35
   868  000372  B4D8               	btfsc	status,2,c
   869  000374  0012               	return	
   870                           
   871                           ;Menu.c: 96:                     LcPutChar(KeGetCharValue());
   872  000376  EC07  F007         	call	_KeGetCharValue	;wreg free
   873  00037A  EC63  F005         	call	_LcPutChar
   874  00037E  D7DA               	goto	l2683
   875  000380                     l2717:
   876  000380  503D               	movf	menuMotor@state^0,w,c
   877  000382  6E3B               	movwf	??_menuMotor^0,c
   878  000384  6A3C               	clrf	(??_menuMotor+1)^0,c
   879                           
   880                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
   881                           ; Switch size 1, requested type "space"
   882                           ; Number of cases is 1, Range of values is 0 to 0
   883                           ; switch strategies available:
   884                           ; Name         Instructions Cycles
   885                           ; simple_byte            4     3 (average)
   886                           ;	Chosen strategy is simple_byte
   887  000386  503C               	movf	(??_menuMotor+1)^0,w,c
   888  000388  A4D8               	btfss	status,2,c
   889  00038A  0012               	return	
   890                           
   891                           ; Switch size 1, requested type "space"
   892                           ; Number of cases is 6, Range of values is 1 to 6
   893                           ; switch strategies available:
   894                           ; Name         Instructions Cycles
   895                           ; simple_byte           19    10 (average)
   896                           ;	Chosen strategy is simple_byte
   897  00038C  503B               	movf	??_menuMotor^0,w,c
   898  00038E  0A01               	xorlw	1	; case 1
   899  000390  E101 D76A          	bz	l2629
   900  000394  0A03               	xorlw	3	; case 2
   901  000396  E101 D777          	bz	l2637
   902  00039A  0A01               	xorlw	1	; case 3
   903  00039C  E092               	bz	l2651
   904  00039E  0A07               	xorlw	7	; case 4
   905  0003A0  E0A4               	bz	l2663
   906  0003A2  0A01               	xorlw	1	; case 5
   907  0003A4  E0C9               	bz	l2691
   908  0003A6  0A03               	xorlw	3	; case 6
   909  0003A8  E0D4               	bz	l2697
   910  0003AA  0012               	return		;funcret
   911  0003AC                     __end_of_menuMotor:
   912                           	callstack 0
   913  0003AC                     PL26:
   914                           	callstack 27
   915  0003AC  0EE8               	movlw	232
   916  0003AE  5C26               	subwf	?_TiGetTics^0,w,c
   917  0003B0  0E03               	movlw	3
   918  0003B2  5827               	subwfb	(?_TiGetTics+1)^0,w,c
   919  0003B4  0012               	return	
   920  0003B6                     __end_ofPL26:
   921                           	callstack 0
   922  0003B6                     PL28:
   923                           	callstack 23
   924  0003B6  C00C  F02E         	movff	_LCDrow,LcGotoXY@Row
   925  0003BA  500B               	movf	_LCDcol^0,w,c
   926  0003BC  0012               	return	
   927  0003BE                     __end_ofPL28:
   928                           	callstack 0
   929                           
   930 ;; *************** function _isPressed *****************
   931 ;; Defined at:
   932 ;;		line 207 in file "keypad.c"
   933 ;; Parameters:    Size  Location     Type
   934 ;;		None
   935 ;; Auto vars:     Size  Location     Type
   936 ;;		None
   937 ;; Return value:  Size  Location     Type
   938 ;;                  1    wreg      unsigned char 
   939 ;; Registers used:
   940 ;;		wreg, status,2, status,0
   941 ;; Tracked objects:
   942 ;;		On entry : 0/0
   943 ;;		On exit  : 0/0
   944 ;;		Unchanged: 0/0
   945 ;; Data sizes:     COMRAM   BANK0   BANK1
   946 ;;      Params:         0       0       0
   947 ;;      Locals:         1       0       0
   948 ;;      Temps:          0       0       0
   949 ;;      Totals:         1       0       0
   950 ;;Total ram usage:        1 bytes
   951 ;; Hardware stack levels used: 1
   952 ;; Hardware stack levels required when called: 2
   953 ;; This function calls:
   954 ;;		Nothing
   955 ;; This function is called by:
   956 ;;		_menuMotor
   957 ;; This function uses a non-reentrant model
   958 ;;
   959                           
   960                           	psect	text2
   961  000D98                     __ptext2:
   962                           	callstack 0
   963  000D98                     _isPressed:
   964                           	callstack 27
   965                           
   966                           ;keypad.c: 209:  return pressed && (stateSMS == 1||stateSMS == 4);
   967                           
   968                           ;incstack = 0
   969  000D98  6A26               	clrf	_isPressed$525^0,c
   970  000D9A  501A               	movf	_pressed^0,w,c
   971  000D9C  E007               	bz	l188
   972  000D9E  0416               	decf	_stateSMS^0,w,c
   973  000DA0  E003               	bz	u1610
   974  000DA2  0E04               	movlw	4
   975  000DA4  1816               	xorwf	_stateSMS^0,w,c
   976  000DA6  E102               	bnz	l188
   977  000DA8                     u1610:
   978  000DA8  0E01               	movlw	1
   979  000DAA  6E26               	movwf	_isPressed$525^0,c
   980  000DAC                     l188:
   981  000DAC  5026               	movf	_isPressed$525^0,w,c
   982  000DAE  0012               	return		;funcret
   983  000DB0                     __end_of_isPressed:
   984                           	callstack 0
   985                           
   986 ;; *************** function _getPresses *****************
   987 ;; Defined at:
   988 ;;		line 242 in file "keypad.c"
   989 ;; Parameters:    Size  Location     Type
   990 ;;		None
   991 ;; Auto vars:     Size  Location     Type
   992 ;;		None
   993 ;; Return value:  Size  Location     Type
   994 ;;                  1    wreg      unsigned char 
   995 ;; Registers used:
   996 ;;		wreg, status,2
   997 ;; Tracked objects:
   998 ;;		On entry : 0/0
   999 ;;		On exit  : 0/0
  1000 ;;		Unchanged: 0/0
  1001 ;; Data sizes:     COMRAM   BANK0   BANK1
  1002 ;;      Params:         0       0       0
  1003 ;;      Locals:         0       0       0
  1004 ;;      Temps:          0       0       0
  1005 ;;      Totals:         0       0       0
  1006 ;;Total ram usage:        0 bytes
  1007 ;; Hardware stack levels used: 1
  1008 ;; Hardware stack levels required when called: 2
  1009 ;; This function calls:
  1010 ;;		Nothing
  1011 ;; This function is called by:
  1012 ;;		_menuMotor
  1013 ;; This function uses a non-reentrant model
  1014 ;;
  1015                           
  1016                           	psect	text3
  1017  000E2C                     __ptext3:
  1018                           	callstack 0
  1019  000E2C                     _getPresses:
  1020                           	callstack 27
  1021                           
  1022                           ;keypad.c: 243:     return available;
  1023                           
  1024                           ;incstack = 0
  1025  000E2C  5018               	movf	_available^0,w,c
  1026  000E2E  0012               	return		;funcret
  1027  000E30                     __end_of_getPresses:
  1028                           	callstack 0
  1029                           
  1030 ;; *************** function _displayMenu *****************
  1031 ;; Defined at:
  1032 ;;		line 112 in file "Menu.c"
  1033 ;; Parameters:    Size  Location     Type
  1034 ;;  menuMode        1    wreg     unsigned char 
  1035 ;;  row             1   22[COMRAM] unsigned char 
  1036 ;; Auto vars:     Size  Location     Type
  1037 ;;  menuMode        1   25[COMRAM] unsigned char 
  1038 ;; Return value:  Size  Location     Type
  1039 ;;                  1    wreg      void 
  1040 ;; Registers used:
  1041 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1042 ;; Tracked objects:
  1043 ;;		On entry : 0/0
  1044 ;;		On exit  : 0/0
  1045 ;;		Unchanged: 0/0
  1046 ;; Data sizes:     COMRAM   BANK0   BANK1
  1047 ;;      Params:         1       0       0
  1048 ;;      Locals:         1       0       0
  1049 ;;      Temps:          2       0       0
  1050 ;;      Totals:         4       0       0
  1051 ;;Total ram usage:        4 bytes
  1052 ;; Hardware stack levels used: 1
  1053 ;; Hardware stack levels required when called: 6
  1054 ;; This function calls:
  1055 ;;		_LcGotoXY
  1056 ;;		_LcPutChar
  1057 ;; This function is called by:
  1058 ;;		_menuMotor
  1059 ;; This function uses a non-reentrant model
  1060 ;;
  1061                           
  1062                           	psect	text4
  1063  00083E                     __ptext4:
  1064                           	callstack 0
  1065  00083E                     _displayMenu:
  1066                           	callstack 23
  1067                           
  1068                           ;incstack = 0
  1069                           ;displayMenu@menuMode stored from wreg
  1070  00083E  6E3A               	movwf	displayMenu@menuMode^0,c
  1071                           
  1072                           ;Menu.c: 113:     if (menuMode == 0){
  1073  000840  503A               	movf	displayMenu@menuMode^0,w,c
  1074  000842  E10C               	bnz	l2293
  1075                           
  1076                           ;Menu.c: 114:         if (LOGINMENU[LCDrow+row][LCDcol] != '\0'){
  1077  000844  D818               	call	PL4	;call to abstracted procedure
  1078  000846  E005               	bz	l2287
  1079                           
  1080                           ;Menu.c: 115:             LcPutChar(LOGINMENU[LCDrow+row][LCDcol]);
  1081  000848  D816               	call	PL4	;call to abstracted procedure
  1082  00084A  EC63  F005         	call	_LcPutChar
  1083  00084E                     l2285:
  1084                           
  1085                           ;Menu.c: 116:             LCDcol++;
  1086  00084E  2A0B               	incf	_LCDcol^0,f,c
  1087                           
  1088                           ;Menu.c: 117:         } else {
  1089  000850  0012               	return	
  1090  000852                     l2287:
  1091                           
  1092                           ;Menu.c: 118:             LCDrow++;
  1093                           
  1094                           ;Menu.c: 119:             LcGotoXY(0,1);
  1095  000852  D830               	call	PL32	;call to abstracted procedure
  1096  000854  ECD5  F003         	call	_LcGotoXY
  1097  000858                     l2291:
  1098                           
  1099                           ;Menu.c: 120:             LCDcol = 0;
  1100  000858  6A0B               	clrf	_LCDcol^0,c
  1101  00085A  0012               	return	
  1102  00085C                     l2293:
  1103  00085C  043A               	decf	displayMenu@menuMode^0,w,c
  1104  00085E  A4D8               	btfss	status,2,c
  1105  000860  0012               	return	
  1106                           
  1107                           ;Menu.c: 123:         if (LOGREGSCREEN[LCDrow][LCDcol] != '\0'){
  1108  000862  D81B               	call	PL12	;call to abstracted procedure
  1109  000864  E004               	bz	l2301
  1110                           
  1111                           ;Menu.c: 124:             LcPutChar(LOGREGSCREEN[LCDrow][LCDcol]);
  1112  000866  D819               	call	PL12	;call to abstracted procedure
  1113  000868  EC63  F005         	call	_LcPutChar
  1114  00086C  D7F0               	goto	l2285
  1115  00086E                     l2301:
  1116                           
  1117                           ;Menu.c: 127:             LCDrow++;
  1118                           
  1119                           ;Menu.c: 128:             LcGotoXY(0,1);
  1120  00086E  D822               	call	PL32	;call to abstracted procedure
  1121  000870  ECD5  F003         	call	_LcGotoXY
  1122  000874  D7F1               	goto	l2291
  1123  000876                     __end_of_displayMenu:
  1124                           	callstack 0
  1125  000876                     PL4:
  1126                           	callstack 23
  1127  000876  5037               	movf	displayMenu@row^0,w,c
  1128  000878  0D0B               	mullw	11
  1129  00087A  CFF3 F038          	movff	prodl,??_displayMenu
  1130  00087E  500C               	movf	_LCDrow^0,w,c
  1131  000880  0D0B               	mullw	11
  1132  000882  50F3               	movf	243,w,c
  1133  000884  0F4F               	addlw	low _LOGINMENU
  1134  000886  2438               	addwf	??_displayMenu^0,w,c
  1135  000888  240B               	addwf	_LCDcol^0,w,c
  1136  00088A  6E39               	movwf	(??_displayMenu+1)^0,c
  1137  00088C  C039  FFF6         	movff	??_displayMenu+1,tblptrl
  1138  000890                     	if	1	;There is more than 1 active tblptr byte
  1139  000890  0E02               	movlw	high __smallconst
  1140  000892  6EF7               	movwf	tblptrh,c
  1141  000894                     	endif
  1142  000894                     	if	0	;tblptru may be non-zero
  1143  000894                     	endif
  1144  000894                     	if	0	;tblptru may be non-zero
  1145  000894                     	endif
  1146  000894  0008               	tblrd		*
  1147  000896  50F5               	movf	tablat,w,c
  1148  000898  0012               	return	
  1149  00089A                     __end_ofPL4:
  1150                           	callstack 0
  1151  00089A                     PL12:
  1152                           	callstack 23
  1153  00089A  500C               	movf	_LCDrow^0,w,c
  1154  00089C  0D06               	mullw	6
  1155  00089E  50F3               	movf	243,w,c
  1156  0008A0  0F01               	addlw	low _LOGREGSCREEN
  1157  0008A2  240B               	addwf	_LCDcol^0,w,c
  1158  0008A4  6E38               	movwf	??_displayMenu^0,c
  1159  0008A6  C038  FFF6         	movff	??_displayMenu,tblptrl
  1160  0008AA                     	if	1	;There is more than 1 active tblptr byte
  1161  0008AA  0E02               	movlw	high __smallconst
  1162  0008AC  6EF7               	movwf	tblptrh,c
  1163  0008AE                     	endif
  1164  0008AE                     	if	0	;tblptru may be non-zero
  1165  0008AE                     	endif
  1166  0008AE                     	if	0	;tblptru may be non-zero
  1167  0008AE                     	endif
  1168  0008AE  0008               	tblrd		*
  1169  0008B0  50F5               	movf	tablat,w,c
  1170  0008B2  0012               	return	
  1171  0008B4                     __end_ofPL12:
  1172                           	callstack 0
  1173  0008B4                     PL32:
  1174                           	callstack 23
  1175  0008B4  2A0C               	incf	_LCDrow^0,f,c
  1176  0008B6  0E01               	movlw	1
  1177  0008B8  6E2E               	movwf	LcGotoXY@Row^0,c
  1178  0008BA  0C00               	retlw	0
  1179  0008BC                     __end_ofPL32:
  1180                           	callstack 0
  1181                           
  1182 ;; *************** function _LcPutChar *****************
  1183 ;; Defined at:
  1184 ;;		line 161 in file "LcTLCD.c"
  1185 ;; Parameters:    Size  Location     Type
  1186 ;;  c               1    wreg     unsigned char 
  1187 ;; Auto vars:     Size  Location     Type
  1188 ;;  c               1   21[COMRAM] unsigned char 
  1189 ;; Return value:  Size  Location     Type
  1190 ;;                  1    wreg      void 
  1191 ;; Registers used:
  1192 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1193 ;; Tracked objects:
  1194 ;;		On entry : 0/0
  1195 ;;		On exit  : 0/0
  1196 ;;		Unchanged: 0/0
  1197 ;; Data sizes:     COMRAM   BANK0   BANK1
  1198 ;;      Params:         0       0       0
  1199 ;;      Locals:         1       0       0
  1200 ;;      Temps:          0       0       0
  1201 ;;      Totals:         1       0       0
  1202 ;;Total ram usage:        1 bytes
  1203 ;; Hardware stack levels used: 1
  1204 ;; Hardware stack levels required when called: 5
  1205 ;; This function calls:
  1206 ;;		_CantaData
  1207 ;;		_LcGotoXY
  1208 ;;		_WaitForBusy
  1209 ;; This function is called by:
  1210 ;;		_menuMotor
  1211 ;;		_displayMenu
  1212 ;; This function uses a non-reentrant model
  1213 ;;
  1214                           
  1215                           	psect	text5
  1216  000AC6                     __ptext5:
  1217                           	callstack 0
  1218  000AC6                     _LcPutChar:
  1219                           	callstack 23
  1220                           
  1221                           ;incstack = 0
  1222                           ;LcPutChar@c stored from wreg
  1223  000AC6  6E36               	movwf	LcPutChar@c^0,c
  1224                           
  1225                           ;LcTLCD.c: 171:  WaitForBusy(); CantaData(c);
  1226  000AC8  ECB1  F005         	call	_WaitForBusy	;wreg free
  1227  000ACC  5036               	movf	LcPutChar@c^0,w,c
  1228  000ACE  EC08  F006         	call	_CantaData
  1229                           
  1230                           ;LcTLCD.c: 173:  ++ColumnAct;
  1231  000AD2  2A12               	incf	_ColumnAct^0,f,c
  1232                           
  1233                           ;LcTLCD.c: 174:  if (Rows == 3) {
  1234  000AD4  0E03               	movlw	3
  1235  000AD6  1815               	xorwf	_Rows^0,w,c
  1236  000AD8  E107               	bnz	l2203
  1237                           
  1238                           ;LcTLCD.c: 175:   if (ColumnAct >= 20) {
  1239  000ADA  0E13               	movlw	19
  1240  000ADC  6412               	cpfsgt	_ColumnAct^0,c
  1241  000ADE  0C13               	retlw	19
  1242                           
  1243                           ;LcTLCD.c: 176:    ColumnAct = 0;
  1244  000AE0  6A12               	clrf	_ColumnAct^0,c
  1245                           
  1246                           ;LcTLCD.c: 177:    if (++RowAct >= 4) RowAct = 0;
  1247  000AE2  2A13               	incf	_RowAct^0,f,c
  1248  000AE4  0E03               	movlw	3
  1249  000AE6  D009               	goto	L1
  1250  000AE8                     l2203:
  1251                           
  1252                           ;LcTLCD.c: 181:  if (Rows == 2) {
  1253  000AE8  0E02               	movlw	2
  1254  000AEA  1815               	xorwf	_Rows^0,w,c
  1255  000AEC  E10A               	bnz	l2215
  1256                           
  1257                           ;LcTLCD.c: 182:   if (ColumnAct >= 40) {
  1258  000AEE  0E27               	movlw	39
  1259  000AF0  6412               	cpfsgt	_ColumnAct^0,c
  1260  000AF2  0C27               	retlw	39
  1261                           
  1262                           ;LcTLCD.c: 183:    ColumnAct = 0;
  1263  000AF4  6A12               	clrf	_ColumnAct^0,c
  1264                           
  1265                           ;LcTLCD.c: 184:    if (++RowAct >= 2) RowAct = 0;
  1266  000AF6  2A13               	incf	_RowAct^0,f,c
  1267  000AF8  0E01               	movlw	1
  1268  000AFA                     L1:
  1269  000AFA  6413               	cpfsgt	_RowAct^0,c
  1270  000AFC  D009               	goto	l2221
  1271  000AFE  6A13               	clrf	_RowAct^0,c
  1272  000B00  D007               	goto	l2221
  1273  000B02                     l2215:
  1274                           
  1275                           ;LcTLCD.c: 188:  if (RowAct == 1) {
  1276  000B02  0413               	decf	_RowAct^0,w,c
  1277  000B04  A4D8               	btfss	status,2,c
  1278  000B06  0012               	return	
  1279                           
  1280                           ;LcTLCD.c: 189:   if (ColumnAct >= 40) ColumnAct = 0;
  1281  000B08  0E27               	movlw	39
  1282  000B0A  6412               	cpfsgt	_ColumnAct^0,c
  1283  000B0C  D001               	goto	l2221
  1284  000B0E  6A12               	clrf	_ColumnAct^0,c
  1285  000B10                     l2221:
  1286                           
  1287                           ;LcTLCD.c: 190:   LcGotoXY(ColumnAct, RowAct);
  1288  000B10  C013  F02E         	movff	_RowAct,LcGotoXY@Row
  1289  000B14  5012               	movf	_ColumnAct^0,w,c
  1290  000B16  EFD5  F003         	goto	_LcGotoXY
  1291  000B1A                     __end_of_LcPutChar:
  1292                           	callstack 0
  1293                           
  1294 ;; *************** function _LcGotoXY *****************
  1295 ;; Defined at:
  1296 ;;		line 134 in file "LcTLCD.c"
  1297 ;; Parameters:    Size  Location     Type
  1298 ;;  Column          1    wreg     unsigned char 
  1299 ;;  Row             1   13[COMRAM] unsigned char 
  1300 ;; Auto vars:     Size  Location     Type
  1301 ;;  Column          1   20[COMRAM] unsigned char 
  1302 ;;  Fisics          2   18[COMRAM] int 
  1303 ;; Return value:  Size  Location     Type
  1304 ;;                  1    wreg      void 
  1305 ;; Registers used:
  1306 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1307 ;; Tracked objects:
  1308 ;;		On entry : 0/0
  1309 ;;		On exit  : 0/0
  1310 ;;		Unchanged: 0/0
  1311 ;; Data sizes:     COMRAM   BANK0   BANK1
  1312 ;;      Params:         1       0       0
  1313 ;;      Locals:         5       0       0
  1314 ;;      Temps:          2       0       0
  1315 ;;      Totals:         8       0       0
  1316 ;;Total ram usage:        8 bytes
  1317 ;; Hardware stack levels used: 1
  1318 ;; Hardware stack levels required when called: 4
  1319 ;; This function calls:
  1320 ;;		_CantaIR
  1321 ;;		_WaitForBusy
  1322 ;; This function is called by:
  1323 ;;		_LcPutChar
  1324 ;;		_menuMotor
  1325 ;;		_displayMenu
  1326 ;; This function uses a non-reentrant model
  1327 ;;
  1328                           
  1329                           	psect	text6
  1330  0007AA                     __ptext6:
  1331                           	callstack 0
  1332  0007AA                     _LcGotoXY:
  1333                           	callstack 23
  1334                           
  1335                           ;incstack = 0
  1336                           ;LcGotoXY@Column stored from wreg
  1337  0007AA  6E35               	movwf	LcGotoXY@Column^0,c
  1338                           
  1339                           ;LcTLCD.c: 138:  int Fisics;;LcTLCD.c: 140:  switch (Rows) {
  1340  0007AC  D030               	goto	l2149
  1341  0007AE                     l2129:
  1342                           
  1343                           ;LcTLCD.c: 142:    Fisics = Column + (!Row ? 0 : 0x40); break;
  1344  0007AE  502E               	movf	LcGotoXY@Row^0,w,c
  1345  0007B0  E004               	bz	l274
  1346  0007B2  6A32               	clrf	(_LcGotoXY$731+1)^0,c
  1347  0007B4  0E40               	movlw	64
  1348  0007B6  6E31               	movwf	_LcGotoXY$731^0,c
  1349  0007B8  D002               	goto	l2133
  1350  0007BA                     l274:
  1351  0007BA  6A31               	clrf	_LcGotoXY$731^0,c
  1352  0007BC  6A32               	clrf	(_LcGotoXY$731+1)^0,c
  1353  0007BE                     l2133:
  1354  0007BE  5035               	movf	LcGotoXY@Column^0,w,c
  1355  0007C0  2431               	addwf	_LcGotoXY$731^0,w,c
  1356  0007C2  6E33               	movwf	LcGotoXY@Fisics^0,c
  1357  0007C4  0E00               	movlw	0
  1358  0007C6  2032               	addwfc	(_LcGotoXY$731+1)^0,w,c
  1359  0007C8  6E34               	movwf	(LcGotoXY@Fisics+1)^0,c
  1360  0007CA  D02E               	goto	l2151
  1361  0007CC                     l278:
  1362                           
  1363                           ;LcTLCD.c: 144:    Fisics = Column;
  1364  0007CC  C035  F033         	movff	LcGotoXY@Column,LcGotoXY@Fisics
  1365  0007D0  6A34               	clrf	(LcGotoXY@Fisics+1)^0,c
  1366                           
  1367                           ;LcTLCD.c: 145:    if (Row == 1) Fisics += 0x40; else
  1368  0007D2  042E               	decf	LcGotoXY@Row^0,w,c
  1369  0007D4  E102               	bnz	l2139
  1370  0007D6  0E40               	movlw	64
  1371  0007D8  D004               	goto	L2
  1372  0007DA                     l2139:
  1373                           
  1374                           ;LcTLCD.c: 146:    if (Row == 2) Fisics += Columns; else
  1375  0007DA  0E02               	movlw	2
  1376  0007DC  182E               	xorwf	LcGotoXY@Row^0,w,c
  1377  0007DE  E104               	bnz	l2143
  1378  0007E0  5014               	movf	_Columns^0,w,c
  1379  0007E2                     L2:
  1380  0007E2  2633               	addwf	LcGotoXY@Fisics^0,f,c
  1381  0007E4  0E00               	movlw	0
  1382  0007E6  D00D               	goto	L3
  1383  0007E8                     l2143:
  1384                           
  1385                           ;LcTLCD.c: 147:    if (Row == 3) Fisics += 0x40+Columns;
  1386  0007E8  0E03               	movlw	3
  1387  0007EA  182E               	xorwf	LcGotoXY@Row^0,w,c
  1388  0007EC  E11D               	bnz	l2151
  1389  0007EE  5014               	movf	_Columns^0,w,c
  1390  0007F0  6E2F               	movwf	??_LcGotoXY^0,c
  1391  0007F2  6A30               	clrf	(??_LcGotoXY+1)^0,c
  1392  0007F4  0E40               	movlw	64
  1393  0007F6  262F               	addwf	??_LcGotoXY^0,f,c
  1394  0007F8  0E00               	movlw	0
  1395  0007FA  2230               	addwfc	(??_LcGotoXY+1)^0,f,c
  1396  0007FC  502F               	movf	??_LcGotoXY^0,w,c
  1397  0007FE  2633               	addwf	LcGotoXY@Fisics^0,f,c
  1398  000800  5030               	movf	(??_LcGotoXY+1)^0,w,c
  1399  000802                     L3:
  1400  000802  2234               	addwfc	(LcGotoXY@Fisics+1)^0,f,c
  1401                           
  1402                           ;LcTLCD.c: 148:    break;
  1403  000804  D011               	goto	l2151
  1404  000806                     l285:
  1405                           
  1406                           ;LcTLCD.c: 151:    Fisics = Column; break;
  1407  000806  C035  F033         	movff	LcGotoXY@Column,LcGotoXY@Fisics
  1408  00080A  6A34               	clrf	(LcGotoXY@Fisics+1)^0,c
  1409  00080C  D00D               	goto	l2151
  1410  00080E                     l2149:
  1411  00080E  5015               	movf	_Rows^0,w,c
  1412  000810  6E2F               	movwf	??_LcGotoXY^0,c
  1413  000812  6A30               	clrf	(??_LcGotoXY+1)^0,c
  1414                           
  1415                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1416                           ; Switch size 1, requested type "space"
  1417                           ; Number of cases is 1, Range of values is 0 to 0
  1418                           ; switch strategies available:
  1419                           ; Name         Instructions Cycles
  1420                           ; simple_byte            4     3 (average)
  1421                           ;	Chosen strategy is simple_byte
  1422  000814  5030               	movf	(??_LcGotoXY+1)^0,w,c
  1423  000816  E1F7               	bnz	l285
  1424                           
  1425                           ; Switch size 1, requested type "space"
  1426                           ; Number of cases is 3, Range of values is 1 to 4
  1427                           ; switch strategies available:
  1428                           ; Name         Instructions Cycles
  1429                           ; simple_byte           10     6 (average)
  1430                           ;	Chosen strategy is simple_byte
  1431  000818  502F               	movf	??_LcGotoXY^0,w,c
  1432  00081A  0A01               	xorlw	1	; case 1
  1433  00081C  E0F4               	bz	l285
  1434  00081E  0A03               	xorlw	3	; case 2
  1435  000820  E0C6               	bz	l2129
  1436  000822  0A06               	xorlw	6	; case 4
  1437  000824  E0D3               	bz	l278
  1438  000826  D7EF               	goto	l285
  1439  000828                     l2151:
  1440                           
  1441                           ;LcTLCD.c: 154:  WaitForBusy();
  1442  000828  ECB1  F005         	call	_WaitForBusy	;wreg free
  1443                           
  1444                           ;LcTLCD.c: 155:  CantaIR(0x80 | Fisics);
  1445  00082C  5033               	movf	LcGotoXY@Fisics^0,w,c
  1446  00082E  0980               	iorlw	128
  1447  000830  ECB0  F006         	call	_CantaIR
  1448                           
  1449                           ;LcTLCD.c: 157:  RowAct = Row;
  1450  000834  C02E  F013         	movff	LcGotoXY@Row,_RowAct
  1451                           
  1452                           ;LcTLCD.c: 158:  ColumnAct = Column;
  1453  000838  C035  F012         	movff	LcGotoXY@Column,_ColumnAct
  1454  00083C  0012               	return		;funcret
  1455  00083E                     __end_of_LcGotoXY:
  1456                           	callstack 0
  1457                           
  1458 ;; *************** function _CantaData *****************
  1459 ;; Defined at:
  1460 ;;		line 245 in file "LcTLCD.c"
  1461 ;; Parameters:    Size  Location     Type
  1462 ;;  Data            1    wreg     unsigned char 
  1463 ;; Auto vars:     Size  Location     Type
  1464 ;;  Data            1    7[COMRAM] unsigned char 
  1465 ;; Return value:  Size  Location     Type
  1466 ;;                  1    wreg      void 
  1467 ;; Registers used:
  1468 ;;		wreg, status,2, status,0, cstack
  1469 ;; Tracked objects:
  1470 ;;		On entry : 0/0
  1471 ;;		On exit  : 0/0
  1472 ;;		Unchanged: 0/0
  1473 ;; Data sizes:     COMRAM   BANK0   BANK1
  1474 ;;      Params:         0       0       0
  1475 ;;      Locals:         1       0       0
  1476 ;;      Temps:          0       0       0
  1477 ;;      Totals:         1       0       0
  1478 ;;Total ram usage:        1 bytes
  1479 ;; Hardware stack levels used: 1
  1480 ;; Hardware stack levels required when called: 3
  1481 ;; This function calls:
  1482 ;;		_CantaPartAlta
  1483 ;;		_CantaPartBaixa
  1484 ;; This function is called by:
  1485 ;;		_LcPutChar
  1486 ;; This function uses a non-reentrant model
  1487 ;;
  1488                           
  1489                           	psect	text7
  1490  000C10                     __ptext7:
  1491                           	callstack 0
  1492  000C10                     _CantaData:
  1493                           	callstack 24
  1494                           
  1495                           ;incstack = 0
  1496                           ;CantaData@Data stored from wreg
  1497  000C10  6E28               	movwf	CantaData@Data^0,c
  1498                           
  1499                           ;LcTLCD.c: 246:  (TRISDbits.TRISD0 = TRISDbits.TRISD1 = TRISDbits.TRISD2 = TRISDbits.TRI
      +                          SD3 = 0);
  1500  000C12  9695               	bcf	149,3,c	;volatile
  1501  000C14  9495               	bcf	149,2,c	;volatile
  1502  000C16  9295               	bcf	149,1,c	;volatile
  1503  000C18  9095               	bcf	149,0,c	;volatile
  1504                           
  1505                           ;LcTLCD.c: 247:  (LATDbits.LATD4 = 1);
  1506  000C1A  888C               	bsf	140,4,c	;volatile
  1507                           
  1508                           ;LcTLCD.c: 248:  (LATDbits.LATD5 = 0);
  1509  000C1C  9A8C               	bcf	140,5,c	;volatile
  1510                           
  1511                           ;LcTLCD.c: 249:  (LATDbits.LATD6 = 1);
  1512  000C1E  8C8C               	bsf	140,6,c	;volatile
  1513                           
  1514                           ;LcTLCD.c: 250:  CantaPartAlta(Data);
  1515  000C20  5028               	movf	CantaData@Data^0,w,c
  1516  000C22  EC03  F005         	call	_CantaPartAlta
  1517                           
  1518                           ;LcTLCD.c: 251:  (LATDbits.LATD6 = 1);
  1519                           
  1520                           ;LcTLCD.c: 252:  (LATDbits.LATD6 = 0);
  1521                           
  1522                           ;LcTLCD.c: 253:  (LATDbits.LATD6 = 0);
  1523                           
  1524                           ;LcTLCD.c: 254:  (LATDbits.LATD6 = 1);
  1525  000C26  D80B               	call	PL38	;call to abstracted procedure
  1526                           
  1527                           ;LcTLCD.c: 255:  CantaPartBaixa(Data);
  1528  000C28  5028               	movf	CantaData@Data^0,w,c
  1529  000C2A  ECD0  F004         	call	_CantaPartBaixa
  1530                           
  1531                           ;LcTLCD.c: 256:  (LATDbits.LATD6 = 1);
  1532                           
  1533                           ;LcTLCD.c: 257:  (LATDbits.LATD6 = 0);
  1534                           
  1535                           ;LcTLCD.c: 258:  (TRISDbits.TRISD0 = TRISDbits.TRISD1 = TRISDbits.TRISD2 = TRISDbits.TRI
      +                          SD3 = 1);
  1536  000C2E  D000               	goto	PL20	;call to abstracted procedure
  1537  000C30                     __end_of_CantaData:
  1538                           	callstack 0
  1539  000C30                     PL20:
  1540                           	callstack 23
  1541  000C30  8C8C               	bsf	140,6,c	;volatile
  1542  000C32  9C8C               	bcf	140,6,c	;volatile
  1543  000C34  8695               	bsf	149,3,c	;volatile
  1544  000C36  8495               	bsf	149,2,c	;volatile
  1545  000C38  8295               	bsf	149,1,c	;volatile
  1546  000C3A  8095               	bsf	149,0,c	;volatile
  1547  000C3C  0012               	return		;funcret
  1548  000C3E                     __end_ofPL20:
  1549                           	callstack 0
  1550  000C3E                     PL38:
  1551                           	callstack 23
  1552  000C3E  8C8C               	bsf	140,6,c	;volatile
  1553  000C40  9C8C               	bcf	140,6,c	;volatile
  1554  000C42  9C8C               	bcf	140,6,c	;volatile
  1555  000C44  8C8C               	bsf	140,6,c	;volatile
  1556  000C46  0012               	return	
  1557  000C48                     __end_ofPL38:
  1558                           	callstack 0
  1559                           
  1560 ;; *************** function _LcCursorOn *****************
  1561 ;; Defined at:
  1562 ;;		line 120 in file "LcTLCD.c"
  1563 ;; Parameters:    Size  Location     Type
  1564 ;;		None
  1565 ;; Auto vars:     Size  Location     Type
  1566 ;;		None
  1567 ;; Return value:  Size  Location     Type
  1568 ;;                  1    wreg      void 
  1569 ;; Registers used:
  1570 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1571 ;; Tracked objects:
  1572 ;;		On entry : 0/0
  1573 ;;		On exit  : 0/0
  1574 ;;		Unchanged: 0/0
  1575 ;; Data sizes:     COMRAM   BANK0   BANK1
  1576 ;;      Params:         0       0       0
  1577 ;;      Locals:         0       0       0
  1578 ;;      Temps:          0       0       0
  1579 ;;      Totals:         0       0       0
  1580 ;;Total ram usage:        0 bytes
  1581 ;; Hardware stack levels used: 1
  1582 ;; Hardware stack levels required when called: 4
  1583 ;; This function calls:
  1584 ;;		_CantaIR
  1585 ;;		_WaitForBusy
  1586 ;; This function is called by:
  1587 ;;		_menuMotor
  1588 ;; This function uses a non-reentrant model
  1589 ;;
  1590                           
  1591                           	psect	text8
  1592  000DF0                     __ptext8:
  1593                           	callstack 0
  1594  000DF0                     _LcCursorOn:
  1595                           	callstack 25
  1596                           
  1597                           ;LcTLCD.c: 123:  WaitForBusy();
  1598                           
  1599                           ;incstack = 0
  1600  000DF0  ECB1  F005         	call	_WaitForBusy	;wreg free
  1601                           
  1602                           ;LcTLCD.c: 124:  CantaIR(0x08 | 0x04 | 0x02);
  1603  000DF4  0E0E               	movlw	14
  1604  000DF6  EFB0  F006         	goto	_CantaIR
  1605  000DFA                     __end_of_LcCursorOn:
  1606                           	callstack 0
  1607                           
  1608 ;; *************** function _LcCursorOff *****************
  1609 ;; Defined at:
  1610 ;;		line 127 in file "LcTLCD.c"
  1611 ;; Parameters:    Size  Location     Type
  1612 ;;		None
  1613 ;; Auto vars:     Size  Location     Type
  1614 ;;		None
  1615 ;; Return value:  Size  Location     Type
  1616 ;;                  1    wreg      void 
  1617 ;; Registers used:
  1618 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1619 ;; Tracked objects:
  1620 ;;		On entry : 0/0
  1621 ;;		On exit  : 0/0
  1622 ;;		Unchanged: 0/0
  1623 ;; Data sizes:     COMRAM   BANK0   BANK1
  1624 ;;      Params:         0       0       0
  1625 ;;      Locals:         0       0       0
  1626 ;;      Temps:          0       0       0
  1627 ;;      Totals:         0       0       0
  1628 ;;Total ram usage:        0 bytes
  1629 ;; Hardware stack levels used: 1
  1630 ;; Hardware stack levels required when called: 4
  1631 ;; This function calls:
  1632 ;;		_CantaIR
  1633 ;;		_WaitForBusy
  1634 ;; This function is called by:
  1635 ;;		_menuMotor
  1636 ;; This function uses a non-reentrant model
  1637 ;;
  1638                           
  1639                           	psect	text9
  1640  000DFA                     __ptext9:
  1641                           	callstack 0
  1642  000DFA                     _LcCursorOff:
  1643                           	callstack 25
  1644                           
  1645                           ;LcTLCD.c: 130:  WaitForBusy();
  1646                           
  1647                           ;incstack = 0
  1648  000DFA  ECB1  F005         	call	_WaitForBusy	;wreg free
  1649                           
  1650                           ;LcTLCD.c: 131:  CantaIR(0x08 | 0x04);
  1651  000DFE  0E0C               	movlw	12
  1652  000E00  EFB0  F006         	goto	_CantaIR
  1653  000E04                     __end_of_LcCursorOff:
  1654                           	callstack 0
  1655                           
  1656 ;; *************** function _LcClear *****************
  1657 ;; Defined at:
  1658 ;;		line 113 in file "LcTLCD.c"
  1659 ;; Parameters:    Size  Location     Type
  1660 ;;		None
  1661 ;; Auto vars:     Size  Location     Type
  1662 ;;		None
  1663 ;; Return value:  Size  Location     Type
  1664 ;;                  1    wreg      void 
  1665 ;; Registers used:
  1666 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1667 ;; Tracked objects:
  1668 ;;		On entry : 0/0
  1669 ;;		On exit  : 0/0
  1670 ;;		Unchanged: 0/0
  1671 ;; Data sizes:     COMRAM   BANK0   BANK1
  1672 ;;      Params:         0       0       0
  1673 ;;      Locals:         0       0       0
  1674 ;;      Temps:          0       0       0
  1675 ;;      Totals:         0       0       0
  1676 ;;Total ram usage:        0 bytes
  1677 ;; Hardware stack levels used: 1
  1678 ;; Hardware stack levels required when called: 4
  1679 ;; This function calls:
  1680 ;;		_CantaIR
  1681 ;;		_Espera
  1682 ;;		_WaitForBusy
  1683 ;; This function is called by:
  1684 ;;		_menuMotor
  1685 ;; This function uses a non-reentrant model
  1686 ;;
  1687                           
  1688                           	psect	text10
  1689  000DB0                     __ptext10:
  1690                           	callstack 0
  1691  000DB0                     _LcClear:
  1692                           	callstack 25
  1693                           
  1694                           ;LcTLCD.c: 116:  WaitForBusy(); CantaIR(0x01);
  1695                           
  1696                           ;incstack = 0
  1697  000DB0  ECB1  F005         	call	_WaitForBusy	;wreg free
  1698  000DB4  0E01               	movlw	1
  1699  000DB6  ECB0  F006         	call	_CantaIR
  1700                           
  1701                           ;LcTLCD.c: 117:  Espera(Timer, 3);
  1702  000DBA  ECC7  F002         	call	PL2	;call to abstracted procedure
  1703  000DBE  0E03               	movlw	3
  1704  000DC0  6E2F               	movwf	Espera@ms^0,c
  1705  000DC2  EF83  F006         	goto	_Espera	;wreg free
  1706  000DC6                     __end_of_LcClear:
  1707                           	callstack 0
  1708                           
  1709 ;; *************** function _KeSetMode *****************
  1710 ;; Defined at:
  1711 ;;		line 247 in file "keypad.c"
  1712 ;; Parameters:    Size  Location     Type
  1713 ;;  menuMode        1    wreg     unsigned char 
  1714 ;; Auto vars:     Size  Location     Type
  1715 ;;  menuMode        1    6[COMRAM] unsigned char 
  1716 ;; Return value:  Size  Location     Type
  1717 ;;                  1    wreg      void 
  1718 ;; Registers used:
  1719 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1720 ;; Tracked objects:
  1721 ;;		On entry : 0/0
  1722 ;;		On exit  : 0/0
  1723 ;;		Unchanged: 0/0
  1724 ;; Data sizes:     COMRAM   BANK0   BANK1
  1725 ;;      Params:         0       0       0
  1726 ;;      Locals:         1       0       0
  1727 ;;      Temps:          0       0       0
  1728 ;;      Totals:         1       0       0
  1729 ;;Total ram usage:        1 bytes
  1730 ;; Hardware stack levels used: 1
  1731 ;; Hardware stack levels required when called: 3
  1732 ;; This function calls:
  1733 ;;		_TiResetTics
  1734 ;; This function is called by:
  1735 ;;		_menuMotor
  1736 ;; This function uses a non-reentrant model
  1737 ;;
  1738                           
  1739                           	psect	text11
  1740  000CC2                     __ptext11:
  1741                           	callstack 0
  1742  000CC2                     _KeSetMode:
  1743                           	callstack 26
  1744                           
  1745                           ;incstack = 0
  1746                           ;KeSetMode@menuMode stored from wreg
  1747  000CC2  6E27               	movwf	KeSetMode@menuMode^0,c
  1748                           
  1749                           ;keypad.c: 248:     if (menuMode == 1){
  1750  000CC4  0427               	decf	KeSetMode@menuMode^0,w,c
  1751  000CC6  E108               	bnz	l2261
  1752                           
  1753                           ;keypad.c: 249:         previous = 0;
  1754  000CC8  6A1B               	clrf	_previous^0,c
  1755                           
  1756                           ;keypad.c: 250:         numPresses = 0;
  1757  000CCA  6A19               	clrf	_numPresses^0,c
  1758                           
  1759                           ;keypad.c: 251:         available = 0;
  1760  000CCC  6A18               	clrf	_available^0,c
  1761                           
  1762                           ;keypad.c: 252:         stateSMS = 2;
  1763  000CCE  0E02               	movlw	2
  1764  000CD0  6E16               	movwf	_stateSMS^0,c
  1765                           
  1766                           ;keypad.c: 253:         TiResetTics(timer_SMS);
  1767  000CD2  501D               	movf	_timer_SMS^0,w,c
  1768  000CD4  EFBE  F006         	goto	_TiResetTics
  1769  000CD8                     l2261:
  1770  000CD8  5027               	movf	KeSetMode@menuMode^0,w,c
  1771  000CDA  A4D8               	btfss	status,2,c
  1772  000CDC  0012               	return	
  1773                           
  1774                           ;keypad.c: 255:         stateSMS = 4;
  1775  000CDE  D000               	goto	PL44	;call to abstracted procedure
  1776  000CE0                     __end_of_KeSetMode:
  1777                           	callstack 0
  1778  000CE0                     PL44:
  1779                           	callstack 26
  1780  000CE0  0E04               	movlw	4
  1781  000CE2  6E16               	movwf	_stateSMS^0,c
  1782  000CE4  0C04               	retlw	4
  1783  000CE6                     __end_ofPL44:
  1784                           	callstack 0
  1785                           
  1786 ;; *************** function _KeGetCharValue *****************
  1787 ;; Defined at:
  1788 ;;		line 221 in file "keypad.c"
  1789 ;; Parameters:    Size  Location     Type
  1790 ;;		None
  1791 ;; Auto vars:     Size  Location     Type
  1792 ;;		None
  1793 ;; Return value:  Size  Location     Type
  1794 ;;                  1    wreg      unsigned char 
  1795 ;; Registers used:
  1796 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1797 ;; Tracked objects:
  1798 ;;		On entry : 0/0
  1799 ;;		On exit  : 0/0
  1800 ;;		Unchanged: 0/0
  1801 ;; Data sizes:     COMRAM   BANK0   BANK1
  1802 ;;      Params:         0       0       0
  1803 ;;      Locals:         0       0       0
  1804 ;;      Temps:          0       0       0
  1805 ;;      Totals:         0       0       0
  1806 ;;Total ram usage:        0 bytes
  1807 ;; Hardware stack levels used: 1
  1808 ;; Hardware stack levels required when called: 4
  1809 ;; This function calls:
  1810 ;;		_KeGetGenericValue
  1811 ;;		_getFullValue
  1812 ;; This function is called by:
  1813 ;;		_menuMotor
  1814 ;; This function uses a non-reentrant model
  1815 ;;
  1816                           
  1817                           	psect	text12
  1818  000E0E                     __ptext12:
  1819                           	callstack 0
  1820  000E0E                     _KeGetCharValue:
  1821                           	callstack 25
  1822                           
  1823                           ;keypad.c: 222:     return getFullValue(KeGetGenericValue());
  1824                           
  1825                           ;incstack = 0
  1826  000E0E  EC73  F006         	call	_KeGetGenericValue	;wreg free
  1827  000E12  EF36  F005         	goto	_getFullValue
  1828  000E16                     __end_of_KeGetCharValue:
  1829                           	callstack 0
  1830                           
  1831 ;; *************** function _getFullValue *****************
  1832 ;; Defined at:
  1833 ;;		line 230 in file "keypad.c"
  1834 ;; Parameters:    Size  Location     Type
  1835 ;;  generic         1    wreg     unsigned char 
  1836 ;; Auto vars:     Size  Location     Type
  1837 ;;  generic         1    9[COMRAM] unsigned char 
  1838 ;; Return value:  Size  Location     Type
  1839 ;;                  1    wreg      unsigned char 
  1840 ;; Registers used:
  1841 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
  1842 ;; Tracked objects:
  1843 ;;		On entry : 0/0
  1844 ;;		On exit  : 0/0
  1845 ;;		Unchanged: 0/0
  1846 ;; Data sizes:     COMRAM   BANK0   BANK1
  1847 ;;      Params:         0       0       0
  1848 ;;      Locals:         1       0       0
  1849 ;;      Temps:          4       0       0
  1850 ;;      Totals:         5       0       0
  1851 ;;Total ram usage:        5 bytes
  1852 ;; Hardware stack levels used: 1
  1853 ;; Hardware stack levels required when called: 2
  1854 ;; This function calls:
  1855 ;;		Nothing
  1856 ;; This function is called by:
  1857 ;;		_KeGetCharValue
  1858 ;; This function uses a non-reentrant model
  1859 ;;
  1860                           
  1861                           	psect	text13
  1862  000A6C                     __ptext13:
  1863                           	callstack 0
  1864  000A6C                     _getFullValue:
  1865                           	callstack 26
  1866                           
  1867                           ;incstack = 0
  1868                           ;getFullValue@generic stored from wreg
  1869  000A6C  6E2A               	movwf	getFullValue@generic^0,c
  1870                           
  1871                           ;keypad.c: 232:     if (generic - '0' >= 2 && generic - '0' <= 9){
  1872  000A6E  D81F               	call	PL14	;call to abstracted procedure
  1873  000A70  E103               	bnz	u250
  1874  000A72  0E02               	movlw	2
  1875  000A74  5C28               	subwf	(??_getFullValue+2)^0,w,c
  1876  000A76  E30A               	bnc	l1379
  1877  000A78                     u250:
  1878  000A78  D81A               	call	PL14	;call to abstracted procedure
  1879  000A7A  E108               	bnz	l1379
  1880  000A7C  0E0A               	movlw	10
  1881  000A7E  5C28               	subwf	(??_getFullValue+2)^0,w,c
  1882  000A80  E205               	bc	l1379
  1883                           
  1884                           ;keypad.c: 233:         if (SMSTABLE[generic - '0' - 1][(numPresses-1)] == '\0'){
  1885  000A82  D806               	call	PL6	;call to abstracted procedure
  1886  000A84  E105               	bnz	PL6
  1887                           
  1888                           ;keypad.c: 234:             numPresses = 1;
  1889  000A86  0E01               	movlw	1
  1890  000A88  6E19               	movwf	_numPresses^0,c
  1891  000A8A                     l1375:
  1892                           
  1893                           ;keypad.c: 236:         return SMSTABLE[generic - '0' - 1][(numPresses-1)];
  1894  000A8A  D002               	goto	PL6	;call to abstracted procedure
  1895  000A8C                     l1379:
  1896                           
  1897                           ;keypad.c: 238:     return generic;
  1898  000A8C  502A               	movf	getFullValue@generic^0,w,c
  1899  000A8E  0012               	return		;funcret
  1900  000A90                     __end_of_getFullValue:
  1901                           	callstack 0
  1902  000A90                     PL6:
  1903                           	callstack 26
  1904  000A90  502A               	movf	getFullValue@generic^0,w,c
  1905  000A92  0D06               	mullw	6
  1906  000A94  50F3               	movf	243,w,c
  1907  000A96  0F19               	addlw	low _SMSTABLE
  1908  000A98  2419               	addwf	_numPresses^0,w,c
  1909  000A9A  6E26               	movwf	??_getFullValue^0,c
  1910  000A9C  0ED9               	movlw	217
  1911  000A9E  2626               	addwf	??_getFullValue^0,f,c
  1912  000AA0  C026  FFF6         	movff	??_getFullValue,tblptrl
  1913  000AA4                     	if	1	;There is more than 1 active tblptr byte
  1914  000AA4  0E02               	movlw	high __smallconst
  1915  000AA6  6EF7               	movwf	tblptrh,c
  1916  000AA8                     	endif
  1917  000AA8                     	if	0	;tblptru may be non-zero
  1918  000AA8                     	endif
  1919  000AA8                     	if	0	;tblptru may be non-zero
  1920  000AA8                     	endif
  1921  000AA8  0008               	tblrd		*
  1922  000AAA  50F5               	movf	tablat,w,c
  1923  000AAC  0012               	return	
  1924  000AAE                     __end_ofPL6:
  1925                           	callstack 0
  1926  000AAE                     PL14:
  1927                           	callstack 26
  1928  000AAE  0ED0               	movlw	208
  1929  000AB0  6E26               	movwf	??_getFullValue^0,c
  1930  000AB2  6827               	setf	(??_getFullValue+1)^0,c
  1931  000AB4  502A               	movf	getFullValue@generic^0,w,c
  1932  000AB6  6E28               	movwf	(??_getFullValue+2)^0,c
  1933  000AB8  6A29               	clrf	(??_getFullValue+3)^0,c
  1934  000ABA  5026               	movf	??_getFullValue^0,w,c
  1935  000ABC  2628               	addwf	(??_getFullValue+2)^0,f,c
  1936  000ABE  5027               	movf	(??_getFullValue+1)^0,w,c
  1937  000AC0  2229               	addwfc	(??_getFullValue+3)^0,f,c
  1938  000AC2  5029               	movf	(??_getFullValue+3)^0,w,c
  1939  000AC4  0012               	return	
  1940  000AC6                     __end_ofPL14:
  1941                           	callstack 0
  1942                           
  1943 ;; *************** function _joystickMotor *****************
  1944 ;; Defined at:
  1945 ;;		line 24 in file "Joystick.c"
  1946 ;; Parameters:    Size  Location     Type
  1947 ;;		None
  1948 ;; Auto vars:     Size  Location     Type
  1949 ;;		None
  1950 ;; Return value:  Size  Location     Type
  1951 ;;                  1    wreg      void 
  1952 ;; Registers used:
  1953 ;;		wreg, status,2, status,0, cstack
  1954 ;; Tracked objects:
  1955 ;;		On entry : 0/0
  1956 ;;		On exit  : 0/0
  1957 ;;		Unchanged: 0/0
  1958 ;; Data sizes:     COMRAM   BANK0   BANK1
  1959 ;;      Params:         0       0       0
  1960 ;;      Locals:         0       0       0
  1961 ;;      Temps:          2       0       0
  1962 ;;      Totals:         2       0       0
  1963 ;;Total ram usage:        2 bytes
  1964 ;; Hardware stack levels used: 1
  1965 ;; Hardware stack levels required when called: 3
  1966 ;; This function calls:
  1967 ;;		_SiIsAvailable
  1968 ;;		_SiSendChar
  1969 ;; This function is called by:
  1970 ;;		_main
  1971 ;; This function uses a non-reentrant model
  1972 ;;
  1973                           
  1974                           	psect	text14
  1975  00059A                     __ptext14:
  1976                           	callstack 0
  1977  00059A                     _joystickMotor:
  1978                           	callstack 27
  1979                           
  1980                           ;Joystick.c: 25:     static char state = 0;;Joystick.c: 27:     switch (state){
  1981                           
  1982                           ;incstack = 0
  1983  00059A  D040               	goto	l2011
  1984  00059C                     l495:
  1985                           
  1986                           ;Joystick.c: 29:             if (ADCON0bits.GO_DONE == 0){
  1987  00059C  B2C2               	btfsc	194,1,c	;volatile
  1988  00059E  0012               	return	
  1989                           
  1990                           ;Joystick.c: 30:                 y = ADRESH;
  1991  0005A0  CFC4 F007          	movff	4036,_y	;volatile
  1992                           
  1993                           ;Joystick.c: 31:                 ADCON0bits.CHS0=0;
  1994  0005A4  94C2               	bcf	194,2,c	;volatile
  1995                           
  1996                           ;Joystick.c: 32:                 state = 1;
  1997  0005A6  0E01               	movlw	1
  1998  0005A8  6E05               	movwf	joystickMotor@state^0,c
  1999                           
  2000                           ;Joystick.c: 33:                 ADCON0bits.GO_DONE=1;
  2001  0005AA  82C2               	bsf	194,1,c	;volatile
  2002  0005AC  0C01               	retlw	1
  2003  0005AE                     l498:
  2004                           
  2005                           ;Joystick.c: 37:             if (ADCON0bits.GO_DONE == 0){
  2006  0005AE  B2C2               	btfsc	194,1,c	;volatile
  2007  0005B0  0012               	return	
  2008                           
  2009                           ;Joystick.c: 38:                 x = ADRESH;
  2010  0005B2  CFC4 F008          	movff	4036,_x	;volatile
  2011                           
  2012                           ;Joystick.c: 39:                 ADCON0bits.CHS0=1;
  2013  0005B6  84C2               	bsf	194,2,c	;volatile
  2014                           
  2015                           ;Joystick.c: 40:                 state = 2;
  2016  0005B8  0E02               	movlw	2
  2017  0005BA  6E05               	movwf	joystickMotor@state^0,c
  2018  0005BC  0C02               	retlw	2
  2019  0005BE                     l1973:
  2020                           
  2021                           ;Joystick.c: 44:             state = 10;
  2022  0005BE  0E0A               	movlw	10
  2023  0005C0  6E05               	movwf	joystickMotor@state^0,c
  2024                           
  2025                           ;Joystick.c: 45:             if (moved){
  2026  0005C2  5006               	movf	_moved^0,w,c
  2027  0005C4  E00E               	bz	l1985
  2028                           
  2029                           ;Joystick.c: 46:                 if (x >= 100 && x <= 150 && y >= 100 && y <= 150){
  2030  0005C6  0E63               	movlw	99
  2031  0005C8  6408               	cpfsgt	_x^0,c
  2032  0005CA  0C63               	retlw	99
  2033  0005CC  0E97               	movlw	151
  2034  0005CE  6008               	cpfslt	_x^0,c
  2035  0005D0  0C97               	retlw	151
  2036  0005D2  0E63               	movlw	99
  2037  0005D4  6407               	cpfsgt	_y^0,c
  2038  0005D6  0C63               	retlw	99
  2039  0005D8  0E97               	movlw	151
  2040  0005DA  6007               	cpfslt	_y^0,c
  2041  0005DC  0C97               	retlw	151
  2042                           
  2043                           ;Joystick.c: 47:                     moved = 0;
  2044  0005DE  6A06               	clrf	_moved^0,c
  2045                           
  2046                           ;Joystick.c: 49:             }else {
  2047                           
  2048                           ;Joystick.c: 48:                 }
  2049  0005E0  0012               	return	
  2050  0005E2                     l1985:
  2051                           
  2052                           ;Joystick.c: 50:                 if (x <= 10){
  2053  0005E2  0E0B               	movlw	11
  2054  0005E4  6008               	cpfslt	_x^0,c
  2055  0005E6  D002               	goto	l1989
  2056                           
  2057                           ;Joystick.c: 51:                     send = 0x41;
  2058  0005E8  0E41               	movlw	65
  2059                           
  2060                           ;Joystick.c: 52:                     moved = 1;
  2061                           
  2062                           ;Joystick.c: 53:                     state = 4;
  2063                           
  2064                           ;Joystick.c: 54:                 } else if (x >= 240){
  2065  0005EA  D029               	goto	PL10	;call to abstracted procedure
  2066  0005EC                     l1989:
  2067  0005EC  0EEF               	movlw	239
  2068  0005EE  6408               	cpfsgt	_x^0,c
  2069  0005F0  D002               	goto	l1993
  2070                           
  2071                           ;Joystick.c: 55:                     send = 0x44;
  2072  0005F2  0E44               	movlw	68
  2073                           
  2074                           ;Joystick.c: 56:                     moved = 1;
  2075                           
  2076                           ;Joystick.c: 57:                     state = 4;
  2077                           
  2078                           ;Joystick.c: 58:                 } else if (y <= 10){
  2079  0005F4  D024               	goto	PL10	;call to abstracted procedure
  2080  0005F6                     l1993:
  2081  0005F6  0E0B               	movlw	11
  2082  0005F8  6007               	cpfslt	_y^0,c
  2083  0005FA  D002               	goto	l1997
  2084                           
  2085                           ;Joystick.c: 59:                     send = 83;
  2086  0005FC  0E53               	movlw	83
  2087                           
  2088                           ;Joystick.c: 60:                     moved = 1;
  2089                           
  2090                           ;Joystick.c: 61:                     state = 4;
  2091                           
  2092                           ;Joystick.c: 62:                 } else if (y >= 240){
  2093  0005FE  D01F               	goto	PL10	;call to abstracted procedure
  2094  000600                     l1997:
  2095  000600  0EEF               	movlw	239
  2096  000602  6407               	cpfsgt	_y^0,c
  2097  000604  0CEF               	retlw	239
  2098                           
  2099                           ;Joystick.c: 63:                     send = 87;
  2100  000606  0E57               	movlw	87
  2101                           
  2102                           ;Joystick.c: 64:                     moved = 1;
  2103                           
  2104                           ;Joystick.c: 65:                     state = 4;
  2105  000608  D01A               	goto	PL10	;call to abstracted procedure
  2106  00060A                     l2001:
  2107                           
  2108                           ;Joystick.c: 74:             if(SiIsAvailable()){
  2109  00060A  EC13  F007         	call	_SiIsAvailable	;wreg free
  2110  00060E  0900               	iorlw	0
  2111  000610  B4D8               	btfsc	status,2,c
  2112  000612  0012               	return	
  2113                           
  2114                           ;Joystick.c: 75:                 SiSendChar(send);
  2115  000614  5009               	movf	_send^0,w,c
  2116  000616  EC0B  F007         	call	_SiSendChar
  2117  00061A                     l513:
  2118                           
  2119                           ;Joystick.c: 83:             state = 0;
  2120                           
  2121                           ;Joystick.c: 84:             ADCON0bits.GO_DONE=1;
  2122                           
  2123                           ;Joystick.c: 85:             break;
  2124  00061A  D017               	goto	PL46	;call to abstracted procedure
  2125  00061C                     l2011:
  2126  00061C  5005               	movf	joystickMotor@state^0,w,c
  2127  00061E  6E27               	movwf	??_joystickMotor^0,c
  2128  000620  6A28               	clrf	(??_joystickMotor+1)^0,c
  2129                           
  2130                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2131                           ; Switch size 1, requested type "space"
  2132                           ; Number of cases is 1, Range of values is 0 to 0
  2133                           ; switch strategies available:
  2134                           ; Name         Instructions Cycles
  2135                           ; simple_byte            4     3 (average)
  2136                           ;	Chosen strategy is simple_byte
  2137  000622  5028               	movf	(??_joystickMotor+1)^0,w,c
  2138  000624  A4D8               	btfss	status,2,c
  2139  000626  0012               	return	
  2140                           
  2141                           ; Switch size 1, requested type "space"
  2142                           ; Number of cases is 5, Range of values is 0 to 10
  2143                           ; switch strategies available:
  2144                           ; Name         Instructions Cycles
  2145                           ; simple_byte           16     9 (average)
  2146                           ;	Chosen strategy is simple_byte
  2147  000628  5027               	movf	??_joystickMotor^0,w,c
  2148  00062A  E0B8               	bz	l495
  2149  00062C  0A01               	xorlw	1	; case 1
  2150  00062E  E0BF               	bz	l498
  2151  000630  0A03               	xorlw	3	; case 2
  2152  000632  E0C5               	bz	l1973
  2153  000634  0A06               	xorlw	6	; case 4
  2154  000636  E0E9               	bz	l2001
  2155  000638  0A0E               	xorlw	14	; case 10
  2156  00063A  E007               	bz	PL46
  2157  00063C  0012               	return		;funcret
  2158  00063E                     __end_of_joystickMotor:
  2159                           	callstack 0
  2160  00063E                     PL10:
  2161                           	callstack 27
  2162  00063E  6E09               	movwf	_send^0,c
  2163  000640  0E01               	movlw	1
  2164  000642  6E06               	movwf	_moved^0,c
  2165  000644  0E04               	movlw	4
  2166  000646  6E05               	movwf	joystickMotor@state^0,c
  2167  000648  0C04               	retlw	4
  2168  00064A                     __end_ofPL10:
  2169                           	callstack 0
  2170  00064A                     PL46:
  2171                           	callstack 27
  2172  00064A  6A05               	clrf	joystickMotor@state^0,c
  2173  00064C  82C2               	bsf	194,1,c	;volatile
  2174  00064E  0012               	return	
  2175  000650                     __end_ofPL46:
  2176                           	callstack 0
  2177                           
  2178 ;; *************** function _SiSendChar *****************
  2179 ;; Defined at:
  2180 ;;		line 33 in file "SIO.c"
  2181 ;; Parameters:    Size  Location     Type
  2182 ;;  myByte          1    wreg     unsigned char 
  2183 ;; Auto vars:     Size  Location     Type
  2184 ;;  myByte          1    5[COMRAM] unsigned char 
  2185 ;; Return value:  Size  Location     Type
  2186 ;;                  1    wreg      void 
  2187 ;; Registers used:
  2188 ;;		wreg
  2189 ;; Tracked objects:
  2190 ;;		On entry : 0/0
  2191 ;;		On exit  : 0/0
  2192 ;;		Unchanged: 0/0
  2193 ;; Data sizes:     COMRAM   BANK0   BANK1
  2194 ;;      Params:         0       0       0
  2195 ;;      Locals:         1       0       0
  2196 ;;      Temps:          0       0       0
  2197 ;;      Totals:         1       0       0
  2198 ;;Total ram usage:        1 bytes
  2199 ;; Hardware stack levels used: 1
  2200 ;; Hardware stack levels required when called: 2
  2201 ;; This function calls:
  2202 ;;		Nothing
  2203 ;; This function is called by:
  2204 ;;		_joystickMotor
  2205 ;; This function uses a non-reentrant model
  2206 ;;
  2207                           
  2208                           	psect	text15
  2209  000E16                     __ptext15:
  2210                           	callstack 0
  2211  000E16                     _SiSendChar:
  2212                           	callstack 27
  2213                           
  2214                           ;incstack = 0
  2215                           ;SiSendChar@myByte stored from wreg
  2216  000E16  6E26               	movwf	SiSendChar@myByte^0,c
  2217                           
  2218                           ;SIO.c: 34:     TXREG = myByte;
  2219  000E18  C026  FFAD         	movff	SiSendChar@myByte,4013	;volatile
  2220  000E1C  0012               	return		;funcret
  2221  000E1E                     __end_of_SiSendChar:
  2222                           	callstack 0
  2223                           
  2224 ;; *************** function _SiIsAvailable *****************
  2225 ;; Defined at:
  2226 ;;		line 29 in file "SIO.c"
  2227 ;; Parameters:    Size  Location     Type
  2228 ;;		None
  2229 ;; Auto vars:     Size  Location     Type
  2230 ;;		None
  2231 ;; Return value:  Size  Location     Type
  2232 ;;                  1    wreg      unsigned char 
  2233 ;; Registers used:
  2234 ;;		wreg
  2235 ;; Tracked objects:
  2236 ;;		On entry : 0/0
  2237 ;;		On exit  : 0/0
  2238 ;;		Unchanged: 0/0
  2239 ;; Data sizes:     COMRAM   BANK0   BANK1
  2240 ;;      Params:         0       0       0
  2241 ;;      Locals:         0       0       0
  2242 ;;      Temps:          0       0       0
  2243 ;;      Totals:         0       0       0
  2244 ;;Total ram usage:        0 bytes
  2245 ;; Hardware stack levels used: 1
  2246 ;; Hardware stack levels required when called: 2
  2247 ;; This function calls:
  2248 ;;		Nothing
  2249 ;; This function is called by:
  2250 ;;		_joystickMotor
  2251 ;; This function uses a non-reentrant model
  2252 ;;
  2253                           
  2254                           	psect	text16
  2255  000E26                     __ptext16:
  2256                           	callstack 0
  2257  000E26                     _SiIsAvailable:
  2258                           	callstack 27
  2259                           
  2260                           ;SIO.c: 30:     return TXSTAbits.TRMT;
  2261                           
  2262                           ;incstack = 0
  2263  000E26  B2AC               	btfsc	172,1,c	;volatile
  2264  000E28  0C01               	retlw	1
  2265  000E2A  0C00               	retlw	0	;funcret
  2266  000E2C                     __end_of_SiIsAvailable:
  2267                           	callstack 0
  2268                           
  2269 ;; *************** function _initSIO *****************
  2270 ;; Defined at:
  2271 ;;		line 5 in file "SIO.c"
  2272 ;; Parameters:    Size  Location     Type
  2273 ;;		None
  2274 ;; Auto vars:     Size  Location     Type
  2275 ;;		None
  2276 ;; Return value:  Size  Location     Type
  2277 ;;                  1    wreg      void 
  2278 ;; Registers used:
  2279 ;;		None
  2280 ;; Tracked objects:
  2281 ;;		On entry : 0/0
  2282 ;;		On exit  : 0/0
  2283 ;;		Unchanged: 0/0
  2284 ;; Data sizes:     COMRAM   BANK0   BANK1
  2285 ;;      Params:         0       0       0
  2286 ;;      Locals:         0       0       0
  2287 ;;      Temps:          0       0       0
  2288 ;;      Totals:         0       0       0
  2289 ;;Total ram usage:        0 bytes
  2290 ;; Hardware stack levels used: 1
  2291 ;; Hardware stack levels required when called: 2
  2292 ;; This function calls:
  2293 ;;		Nothing
  2294 ;; This function is called by:
  2295 ;;		_main
  2296 ;; This function uses a non-reentrant model
  2297 ;;
  2298                           
  2299                           	psect	text17
  2300  000DDC                     __ptext17:
  2301                           	callstack 0
  2302  000DDC                     _initSIO:
  2303                           	callstack 28
  2304                           
  2305                           ;SIO.c: 14:     TRISCbits.TRISC7 = 1;
  2306                           
  2307                           ;incstack = 0
  2308  000DDC  8E94               	bsf	148,7,c	;volatile
  2309                           
  2310                           ;SIO.c: 15:     TRISCbits.TRISC6 = 1;
  2311  000DDE  8C94               	bsf	148,6,c	;volatile
  2312                           
  2313                           ;SIO.c: 16:     TXSTAbits.BRGH = 1;
  2314  000DE0  84AC               	bsf	172,2,c	;volatile
  2315                           
  2316                           ;SIO.c: 17:     TXSTAbits.TXEN = 1;
  2317  000DE2  8AAC               	bsf	172,5,c	;volatile
  2318                           
  2319                           ;SIO.c: 18:     TXSTAbits.SYNC = 0;
  2320  000DE4  98AC               	bcf	172,4,c	;volatile
  2321                           
  2322                           ;SIO.c: 20:     RCSTAbits.SPEN = 1;
  2323  000DE6  8EAB               	bsf	171,7,c	;volatile
  2324                           
  2325                           ;SIO.c: 21:     RCSTAbits.CREN = 1;
  2326  000DE8  88AB               	bsf	171,4,c	;volatile
  2327                           
  2328                           ;SIO.c: 23:     BAUDCONbits.BRG16 = 0;
  2329  000DEA  96B8               	bcf	184,3,c	;volatile
  2330                           
  2331                           ;SIO.c: 25:     SPBRG = 255;
  2332  000DEC  68AF               	setf	175,c	;volatile
  2333  000DEE  0012               	return		;funcret
  2334  000DF0                     __end_of_initSIO:
  2335                           	callstack 0
  2336                           
  2337 ;; *************** function _initMenu *****************
  2338 ;; Defined at:
  2339 ;;		line 18 in file "Menu.c"
  2340 ;; Parameters:    Size  Location     Type
  2341 ;;		None
  2342 ;; Auto vars:     Size  Location     Type
  2343 ;;		None
  2344 ;; Return value:  Size  Location     Type
  2345 ;;                  1    wreg      void 
  2346 ;; Registers used:
  2347 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2348 ;; Tracked objects:
  2349 ;;		On entry : 0/0
  2350 ;;		On exit  : 0/0
  2351 ;;		Unchanged: 0/0
  2352 ;; Data sizes:     COMRAM   BANK0   BANK1
  2353 ;;      Params:         0       0       0
  2354 ;;      Locals:         0       0       0
  2355 ;;      Temps:          0       0       0
  2356 ;;      Totals:         0       0       0
  2357 ;;Total ram usage:        0 bytes
  2358 ;; Hardware stack levels used: 1
  2359 ;; Hardware stack levels required when called: 3
  2360 ;; This function calls:
  2361 ;;		_TiGetTimer
  2362 ;; This function is called by:
  2363 ;;		_main
  2364 ;; This function uses a non-reentrant model
  2365 ;;
  2366                           
  2367                           	psect	text18
  2368  000E1E                     __ptext18:
  2369                           	callstack 0
  2370  000E1E                     _initMenu:
  2371                           	callstack 27
  2372                           
  2373                           ;Menu.c: 19:     timer = TiGetTimer();
  2374                           
  2375                           ;incstack = 0
  2376  000E1E  EC24  F006         	call	_TiGetTimer	;wreg free
  2377  000E22  6E0D               	movwf	_timer^0,c
  2378  000E24  0012               	return		;funcret
  2379  000E26                     __end_of_initMenu:
  2380                           	callstack 0
  2381                           
  2382 ;; *************** function _initKeypad *****************
  2383 ;; Defined at:
  2384 ;;		line 29 in file "keypad.c"
  2385 ;; Parameters:    Size  Location     Type
  2386 ;;		None
  2387 ;; Auto vars:     Size  Location     Type
  2388 ;;		None
  2389 ;; Return value:  Size  Location     Type
  2390 ;;                  1    wreg      void 
  2391 ;; Registers used:
  2392 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2393 ;; Tracked objects:
  2394 ;;		On entry : 0/0
  2395 ;;		On exit  : 0/0
  2396 ;;		Unchanged: 0/0
  2397 ;; Data sizes:     COMRAM   BANK0   BANK1
  2398 ;;      Params:         0       0       0
  2399 ;;      Locals:         0       0       0
  2400 ;;      Temps:          0       0       0
  2401 ;;      Totals:         0       0       0
  2402 ;;Total ram usage:        0 bytes
  2403 ;; Hardware stack levels used: 1
  2404 ;; Hardware stack levels required when called: 3
  2405 ;; This function calls:
  2406 ;;		_TiGetTimer
  2407 ;; This function is called by:
  2408 ;;		_main
  2409 ;; This function uses a non-reentrant model
  2410 ;;
  2411                           
  2412                           	psect	text19
  2413  000D26                     __ptext19:
  2414                           	callstack 0
  2415  000D26                     _initKeypad:
  2416                           	callstack 27
  2417                           
  2418                           ;keypad.c: 30:     INTCON2bits.RBPU = 0;
  2419                           
  2420                           ;incstack = 0
  2421  000D26  9EF1               	bcf	241,7,c	;volatile
  2422                           
  2423                           ;keypad.c: 33:     TRISBbits.TRISB0 = 1;
  2424  000D28  8093               	bsf	147,0,c	;volatile
  2425                           
  2426                           ;keypad.c: 34:     TRISBbits.TRISB1 = 1;
  2427  000D2A  8293               	bsf	147,1,c	;volatile
  2428                           
  2429                           ;keypad.c: 35:     TRISBbits.TRISB2 = 1;
  2430  000D2C  8493               	bsf	147,2,c	;volatile
  2431                           
  2432                           ;keypad.c: 36:     TRISBbits.TRISB3 = 0;
  2433  000D2E  9693               	bcf	147,3,c	;volatile
  2434                           
  2435                           ;keypad.c: 37:     TRISBbits.TRISB4 = 0;
  2436  000D30  9893               	bcf	147,4,c	;volatile
  2437                           
  2438                           ;keypad.c: 38:     TRISBbits.TRISB5 = 0;
  2439  000D32  9A93               	bcf	147,5,c	;volatile
  2440                           
  2441                           ;keypad.c: 39:     TRISBbits.TRISB6 = 0;
  2442  000D34  9C93               	bcf	147,6,c	;volatile
  2443                           
  2444                           ;keypad.c: 40:     timerBounces = TiGetTimer();
  2445  000D36  EC24  F006         	call	_TiGetTimer	;wreg free
  2446  000D3A  6E1E               	movwf	_timerBounces^0,c
  2447                           
  2448                           ;keypad.c: 41:     timer_SMS = TiGetTimer();
  2449  000D3C  EC24  F006         	call	_TiGetTimer	;wreg free
  2450  000D40  6E1D               	movwf	_timer_SMS^0,c
  2451  000D42  0012               	return		;funcret
  2452  000D44                     __end_of_initKeypad:
  2453                           	callstack 0
  2454                           
  2455 ;; *************** function _initJoystick *****************
  2456 ;; Defined at:
  2457 ;;		line 9 in file "Joystick.c"
  2458 ;; Parameters:    Size  Location     Type
  2459 ;;		None
  2460 ;; Auto vars:     Size  Location     Type
  2461 ;;		None
  2462 ;; Return value:  Size  Location     Type
  2463 ;;                  1    wreg      void 
  2464 ;; Registers used:
  2465 ;;		wreg, status,2
  2466 ;; Tracked objects:
  2467 ;;		On entry : 0/0
  2468 ;;		On exit  : 0/0
  2469 ;;		Unchanged: 0/0
  2470 ;; Data sizes:     COMRAM   BANK0   BANK1
  2471 ;;      Params:         0       0       0
  2472 ;;      Locals:         0       0       0
  2473 ;;      Temps:          0       0       0
  2474 ;;      Totals:         0       0       0
  2475 ;;Total ram usage:        0 bytes
  2476 ;; Hardware stack levels used: 1
  2477 ;; Hardware stack levels required when called: 2
  2478 ;; This function calls:
  2479 ;;		Nothing
  2480 ;; This function is called by:
  2481 ;;		_main
  2482 ;; This function uses a non-reentrant model
  2483 ;;
  2484                           
  2485                           	psect	text20
  2486  000D44                     __ptext20:
  2487                           	callstack 0
  2488  000D44                     _initJoystick:
  2489                           	callstack 28
  2490                           
  2491                           ;Joystick.c: 10:     TRISAbits.TRISA0 = 1;
  2492                           
  2493                           ;incstack = 0
  2494  000D44  8092               	bsf	146,0,c	;volatile
  2495                           
  2496                           ;Joystick.c: 11:     TRISAbits.TRISA1 = 1;
  2497  000D46  8292               	bsf	146,1,c	;volatile
  2498                           
  2499                           ;Joystick.c: 12:     ADCON0 = 0x03;
  2500  000D48  0E03               	movlw	3
  2501  000D4A  6EC2               	movwf	194,c	;volatile
  2502                           
  2503                           ;Joystick.c: 13:     ADCON1 = 0x0D;
  2504  000D4C  0E0D               	movlw	13
  2505  000D4E  6EC1               	movwf	193,c	;volatile
  2506                           
  2507                           ;Joystick.c: 14:     ADCON2 = 0x44;
  2508  000D50  0E44               	movlw	68
  2509  000D52  6EC0               	movwf	192,c	;volatile
  2510                           
  2511                           ;Joystick.c: 16:     TRISCbits.TRISC0 = 0;
  2512  000D54  9094               	bcf	148,0,c	;volatile
  2513                           
  2514                           ;Joystick.c: 17:     TRISCbits.TRISC1 = 0;
  2515  000D56  9294               	bcf	148,1,c	;volatile
  2516                           
  2517                           ;Joystick.c: 18:     TRISCbits.TRISC2 = 0;
  2518  000D58  9494               	bcf	148,2,c	;volatile
  2519                           
  2520                           ;Joystick.c: 19:     TRISCbits.TRISC3 = 0;
  2521  000D5A  9694               	bcf	148,3,c	;volatile
  2522                           
  2523                           ;Joystick.c: 20:     moved = 0;
  2524  000D5C  6A06               	clrf	_moved^0,c
  2525  000D5E  0012               	return		;funcret
  2526  000D60                     __end_of_initJoystick:
  2527                           	callstack 0
  2528                           
  2529 ;; *************** function _initAudio *****************
  2530 ;; Defined at:
  2531 ;;		line 20 in file "Audio.c"
  2532 ;; Parameters:    Size  Location     Type
  2533 ;;		None
  2534 ;; Auto vars:     Size  Location     Type
  2535 ;;		None
  2536 ;; Return value:  Size  Location     Type
  2537 ;;                  1    wreg      void 
  2538 ;; Registers used:
  2539 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2540 ;; Tracked objects:
  2541 ;;		On entry : 0/0
  2542 ;;		On exit  : 0/0
  2543 ;;		Unchanged: 0/0
  2544 ;; Data sizes:     COMRAM   BANK0   BANK1
  2545 ;;      Params:         0       0       0
  2546 ;;      Locals:         0       0       0
  2547 ;;      Temps:          0       0       0
  2548 ;;      Totals:         0       0       0
  2549 ;;Total ram usage:        0 bytes
  2550 ;; Hardware stack levels used: 1
  2551 ;; Hardware stack levels required when called: 3
  2552 ;; This function calls:
  2553 ;;		_TiGetTimer
  2554 ;; This function is called by:
  2555 ;;		_main
  2556 ;; This function uses a non-reentrant model
  2557 ;;
  2558                           
  2559                           	psect	text21
  2560  000DC6                     __ptext21:
  2561                           	callstack 0
  2562  000DC6                     _initAudio:
  2563                           	callstack 27
  2564                           
  2565                           ;Audio.c: 21:     TRISCbits.TRISC3 = 0;
  2566                           
  2567                           ;incstack = 0
  2568  000DC6  9694               	bcf	148,3,c	;volatile
  2569                           
  2570                           ;Audio.c: 22:     state = 0;
  2571  000DC8  6A11               	clrf	_state@Audio$F854^0,c
  2572                           
  2573                           ;Audio.c: 23:     periodTimer = TiGetTimer();
  2574  000DCA  EC24  F006         	call	_TiGetTimer	;wreg free
  2575  000DCE  6E10               	movwf	_periodTimer^0,c
  2576                           
  2577                           ;Audio.c: 24:     timerSong = TiGetTimer();
  2578  000DD0  EC24  F006         	call	_TiGetTimer	;wreg free
  2579  000DD4  6E0F               	movwf	_timerSong^0,c
  2580                           
  2581                           ;Audio.c: 25:     period = 1;
  2582  000DD6  0E01               	movlw	1
  2583  000DD8  6E0E               	movwf	_period^0,c
  2584  000DDA  0C01               	retlw	1	;funcret
  2585  000DDC                     __end_of_initAudio:
  2586                           	callstack 0
  2587                           
  2588 ;; *************** function _audioMotor *****************
  2589 ;; Defined at:
  2590 ;;		line 28 in file "Audio.c"
  2591 ;; Parameters:    Size  Location     Type
  2592 ;;		None
  2593 ;; Auto vars:     Size  Location     Type
  2594 ;;		None
  2595 ;; Return value:  Size  Location     Type
  2596 ;;                  1    wreg      void 
  2597 ;; Registers used:
  2598 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2599 ;; Tracked objects:
  2600 ;;		On entry : 0/0
  2601 ;;		On exit  : 0/0
  2602 ;;		Unchanged: 0/0
  2603 ;; Data sizes:     COMRAM   BANK0   BANK1
  2604 ;;      Params:         0       0       0
  2605 ;;      Locals:         0       0       0
  2606 ;;      Temps:          3       0       0
  2607 ;;      Totals:         3       0       0
  2608 ;;Total ram usage:        3 bytes
  2609 ;; Hardware stack levels used: 1
  2610 ;; Hardware stack levels required when called: 3
  2611 ;; This function calls:
  2612 ;;		_TiGetTics
  2613 ;;		_TiResetTics
  2614 ;;		___awmod
  2615 ;; This function is called by:
  2616 ;;		_main
  2617 ;; This function uses a non-reentrant model
  2618 ;;
  2619                           
  2620                           	psect	text22
  2621  0006FE                     __ptext22:
  2622                           	callstack 0
  2623  0006FE                     _audioMotor:
  2624                           	callstack 27
  2625                           
  2626                           ;Audio.c: 29:     switch(state){
  2627                           
  2628                           ;incstack = 0
  2629  0006FE  D034               	goto	l2471
  2630  000700                     l2445:
  2631                           
  2632                           ;Audio.c: 34:             if (TiGetTics(periodTimer)>= (period+1)){
  2633  000700  D84C               	call	PL22	;call to abstracted procedure
  2634  000702  EC4E  F006         	call	_TiGetTics
  2635  000706  D840               	call	PL16	;call to abstracted procedure
  2636  000708  A0D8               	btfss	status,0,c
  2637  00070A  0012               	return	
  2638                           
  2639                           ;Audio.c: 35:                 TiResetTics(periodTimer);
  2640  00070C  5010               	movf	_periodTimer^0,w,c
  2641  00070E  ECBE  F006         	call	_TiResetTics
  2642                           
  2643                           ;Audio.c: 36:                 LATCbits.LATC3=1;;
  2644  000712  868B               	bsf	139,3,c	;volatile
  2645                           
  2646                           ;Audio.c: 37:                 state = 2;
  2647  000714  0E02               	movlw	2
  2648  000716  6E11               	movwf	_state@Audio$F854^0,c
  2649  000718  0C02               	retlw	2
  2650  00071A                     l2453:
  2651                           
  2652                           ;Audio.c: 41:             if (TiGetTics(periodTimer)>= (period+1)){
  2653  00071A  D83F               	call	PL22	;call to abstracted procedure
  2654  00071C  EC4E  F006         	call	_TiGetTics
  2655  000720  D833               	call	PL16	;call to abstracted procedure
  2656  000722  A0D8               	btfss	status,0,c
  2657  000724  0012               	return	
  2658                           
  2659                           ;Audio.c: 42:                 TiResetTics(periodTimer);
  2660  000726  5010               	movf	_periodTimer^0,w,c
  2661  000728  ECBE  F006         	call	_TiResetTics
  2662                           
  2663                           ;Audio.c: 43:                 LATCbits.LATC3=0;;
  2664  00072C  968B               	bcf	139,3,c	;volatile
  2665                           
  2666                           ;Audio.c: 44:                 state = 3;
  2667  00072E  0E03               	movlw	3
  2668  000730  6E11               	movwf	_state@Audio$F854^0,c
  2669  000732  0C03               	retlw	3
  2670  000734                     l2461:
  2671                           
  2672                           ;Audio.c: 49:             state = 1;
  2673  000734  0E01               	movlw	1
  2674  000736  6E11               	movwf	_state@Audio$F854^0,c
  2675                           
  2676                           ;Audio.c: 50:             if (TiGetTics(timerSong) >= 1000){
  2677  000738  500F               	movf	_timerSong^0,w,c
  2678  00073A  EC4E  F006         	call	_TiGetTics
  2679  00073E  BE27               	btfsc	(?_TiGetTics+1)^0,7,c
  2680  000740  0012               	return	
  2681  000742  ECD6  F001         	call	PL26	;call to abstracted procedure
  2682  000746  A0D8               	btfss	status,0,c
  2683  000748  0012               	return	
  2684                           
  2685                           ;Audio.c: 51:                 period = (period+1)%5;
  2686  00074A  280E               	incf	_period^0,w,c
  2687  00074C  6E26               	movwf	___awmod@dividend^0,c
  2688  00074E  6A27               	clrf	(___awmod@dividend+1)^0,c
  2689  000750  0E00               	movlw	0
  2690  000752  2227               	addwfc	(___awmod@dividend+1)^0,f,c
  2691  000754  6A29               	clrf	(___awmod@divisor+1)^0,c
  2692  000756  0E05               	movlw	5
  2693  000758  6E28               	movwf	___awmod@divisor^0,c
  2694  00075A  EC9C  F004         	call	___awmod	;wreg free
  2695  00075E  5026               	movf	?___awmod^0,w,c
  2696  000760  6E0E               	movwf	_period^0,c
  2697                           
  2698                           ;Audio.c: 52:                 TiResetTics(timerSong);
  2699  000762  500F               	movf	_timerSong^0,w,c
  2700  000764  EFBE  F006         	goto	_TiResetTics
  2701  000768                     l2471:
  2702  000768  5011               	movf	_state@Audio$F854^0,w,c
  2703  00076A  6E2D               	movwf	??_audioMotor^0,c
  2704  00076C  6A2E               	clrf	(??_audioMotor+1)^0,c
  2705                           
  2706                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2707                           ; Switch size 1, requested type "space"
  2708                           ; Number of cases is 1, Range of values is 0 to 0
  2709                           ; switch strategies available:
  2710                           ; Name         Instructions Cycles
  2711                           ; simple_byte            4     3 (average)
  2712                           ;	Chosen strategy is simple_byte
  2713  00076E  502E               	movf	(??_audioMotor+1)^0,w,c
  2714  000770  A4D8               	btfss	status,2,c
  2715  000772  0012               	return	
  2716                           
  2717                           ; Switch size 1, requested type "space"
  2718                           ; Number of cases is 4, Range of values is 0 to 3
  2719                           ; switch strategies available:
  2720                           ; Name         Instructions Cycles
  2721                           ; simple_byte           13     7 (average)
  2722                           ;	Chosen strategy is simple_byte
  2723  000774  502D               	movf	??_audioMotor^0,w,c
  2724  000776  B4D8               	btfsc	status,2,c
  2725  000778  0012               	return	
  2726  00077A  0A01               	xorlw	1	; case 1
  2727  00077C  E0C1               	bz	l2445
  2728  00077E  0A03               	xorlw	3	; case 2
  2729  000780  E0CC               	bz	l2453
  2730  000782  0A01               	xorlw	1	; case 3
  2731  000784  E0D7               	bz	l2461
  2732  000786  0012               	return		;funcret
  2733  000788                     __end_of_audioMotor:
  2734                           	callstack 0
  2735  000788                     PL16:
  2736                           	callstack 27
  2737  000788  502D               	movf	??_audioMotor^0,w,c
  2738  00078A  5C26               	subwf	?_TiGetTics^0,w,c
  2739  00078C  5027               	movf	(?_TiGetTics+1)^0,w,c
  2740  00078E  0A80               	xorlw	128
  2741  000790  6E2F               	movwf	(??_audioMotor+2)^0,c
  2742  000792  502E               	movf	(??_audioMotor+1)^0,w,c
  2743  000794  0A80               	xorlw	128
  2744  000796  582F               	subwfb	(??_audioMotor+2)^0,w,c
  2745  000798  0012               	return	
  2746  00079A                     __end_ofPL16:
  2747                           	callstack 0
  2748  00079A                     PL22:
  2749                           	callstack 27
  2750  00079A  500E               	movf	_period^0,w,c
  2751  00079C  6E2D               	movwf	??_audioMotor^0,c
  2752  00079E  6A2E               	clrf	(??_audioMotor+1)^0,c
  2753  0007A0  2A2D               	incf	??_audioMotor^0,f,c
  2754  0007A2  0E00               	movlw	0
  2755  0007A4  222E               	addwfc	(??_audioMotor+1)^0,f,c
  2756  0007A6  5010               	movf	_periodTimer^0,w,c
  2757  0007A8  0012               	return	
  2758  0007AA                     __end_ofPL22:
  2759                           	callstack 0
  2760                           
  2761 ;; *************** function ___awmod *****************
  2762 ;; Defined at:
  2763 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\awmod.c"
  2764 ;; Parameters:    Size  Location     Type
  2765 ;;  dividend        2    5[COMRAM] int 
  2766 ;;  divisor         2    7[COMRAM] int 
  2767 ;; Auto vars:     Size  Location     Type
  2768 ;;  sign            1   10[COMRAM] unsigned char 
  2769 ;;  counter         1    9[COMRAM] unsigned char 
  2770 ;; Return value:  Size  Location     Type
  2771 ;;                  2    5[COMRAM] int 
  2772 ;; Registers used:
  2773 ;;		wreg, status,2, status,0
  2774 ;; Tracked objects:
  2775 ;;		On entry : 0/0
  2776 ;;		On exit  : 0/0
  2777 ;;		Unchanged: 0/0
  2778 ;; Data sizes:     COMRAM   BANK0   BANK1
  2779 ;;      Params:         4       0       0
  2780 ;;      Locals:         2       0       0
  2781 ;;      Temps:          0       0       0
  2782 ;;      Totals:         6       0       0
  2783 ;;Total ram usage:        6 bytes
  2784 ;; Hardware stack levels used: 1
  2785 ;; Hardware stack levels required when called: 2
  2786 ;; This function calls:
  2787 ;;		Nothing
  2788 ;; This function is called by:
  2789 ;;		_audioMotor
  2790 ;; This function uses a non-reentrant model
  2791 ;;
  2792                           
  2793                           	psect	text23
  2794  000938                     __ptext23:
  2795                           	callstack 0
  2796  000938                     ___awmod:
  2797                           	callstack 27
  2798                           
  2799                           ;incstack = 0
  2800  000938  6A2B               	clrf	___awmod@sign^0,c
  2801  00093A  AE27               	btfss	(___awmod@dividend+1)^0,7,c
  2802  00093C  D006               	goto	l2315
  2803  00093E  6C26               	negf	___awmod@dividend^0,c
  2804  000940  1E27               	comf	(___awmod@dividend+1)^0,f,c
  2805  000942  B0D8               	btfsc	status,0,c
  2806  000944  2A27               	incf	(___awmod@dividend+1)^0,f,c
  2807  000946  0E01               	movlw	1
  2808  000948  6E2B               	movwf	___awmod@sign^0,c
  2809  00094A                     l2315:
  2810  00094A  AE29               	btfss	(___awmod@divisor+1)^0,7,c
  2811  00094C  D004               	goto	l2319
  2812  00094E  6C28               	negf	___awmod@divisor^0,c
  2813  000950  1E29               	comf	(___awmod@divisor+1)^0,f,c
  2814  000952  B0D8               	btfsc	status,0,c
  2815  000954  2A29               	incf	(___awmod@divisor+1)^0,f,c
  2816  000956                     l2319:
  2817  000956  5028               	movf	___awmod@divisor^0,w,c
  2818  000958  1029               	iorwf	(___awmod@divisor+1)^0,w,c
  2819  00095A  E017               	bz	l2335
  2820  00095C  0E01               	movlw	1
  2821  00095E  6E2A               	movwf	___awmod@counter^0,c
  2822  000960  D004               	goto	l2325
  2823  000962                     l2323:
  2824  000962  90D8               	bcf	status,0,c
  2825  000964  3628               	rlcf	___awmod@divisor^0,f,c
  2826  000966  3629               	rlcf	(___awmod@divisor+1)^0,f,c
  2827  000968  2A2A               	incf	___awmod@counter^0,f,c
  2828  00096A                     l2325:
  2829  00096A  AE29               	btfss	(___awmod@divisor+1)^0,7,c
  2830  00096C  D7FA               	goto	l2323
  2831  00096E                     u1710:
  2832  00096E  5028               	movf	___awmod@divisor^0,w,c
  2833  000970  5C26               	subwf	___awmod@dividend^0,w,c
  2834  000972  5029               	movf	(___awmod@divisor+1)^0,w,c
  2835  000974  5827               	subwfb	(___awmod@dividend+1)^0,w,c
  2836  000976  E304               	bnc	l2331
  2837  000978  5028               	movf	___awmod@divisor^0,w,c
  2838  00097A  5E26               	subwf	___awmod@dividend^0,f,c
  2839  00097C  5029               	movf	(___awmod@divisor+1)^0,w,c
  2840  00097E  5A27               	subwfb	(___awmod@dividend+1)^0,f,c
  2841  000980                     l2331:
  2842  000980  90D8               	bcf	status,0,c
  2843  000982  3229               	rrcf	(___awmod@divisor+1)^0,f,c
  2844  000984  3228               	rrcf	___awmod@divisor^0,f,c
  2845  000986  2E2A               	decfsz	___awmod@counter^0,f,c
  2846  000988  D7F2               	goto	u1710
  2847  00098A                     l2335:
  2848  00098A  502B               	movf	___awmod@sign^0,w,c
  2849  00098C  E004               	bz	l2339
  2850  00098E  6C26               	negf	___awmod@dividend^0,c
  2851  000990  1E27               	comf	(___awmod@dividend+1)^0,f,c
  2852  000992  B0D8               	btfsc	status,0,c
  2853  000994  2A27               	incf	(___awmod@dividend+1)^0,f,c
  2854  000996                     l2339:
  2855  000996  C026  F026         	movff	___awmod@dividend,?___awmod
  2856  00099A  C027  F027         	movff	___awmod@dividend+1,?___awmod+1
  2857  00099E  0012               	return		;funcret
  2858  0009A0                     __end_of___awmod:
  2859                           	callstack 0
  2860                           
  2861 ;; *************** function _TiInitTimer *****************
  2862 ;; Defined at:
  2863 ;;		line 17 in file "TTimer.c"
  2864 ;; Parameters:    Size  Location     Type
  2865 ;;		None
  2866 ;; Auto vars:     Size  Location     Type
  2867 ;;		None
  2868 ;; Return value:  Size  Location     Type
  2869 ;;                  1    wreg      void 
  2870 ;; Registers used:
  2871 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  2872 ;; Tracked objects:
  2873 ;;		On entry : 0/0
  2874 ;;		On exit  : 0/0
  2875 ;;		Unchanged: 0/0
  2876 ;; Data sizes:     COMRAM   BANK0   BANK1
  2877 ;;      Params:         0       0       0
  2878 ;;      Locals:         0       0       0
  2879 ;;      Temps:          0       0       0
  2880 ;;      Totals:         0       0       0
  2881 ;;Total ram usage:        0 bytes
  2882 ;; Hardware stack levels used: 1
  2883 ;; Hardware stack levels required when called: 2
  2884 ;; This function calls:
  2885 ;;		Nothing
  2886 ;; This function is called by:
  2887 ;;		_main
  2888 ;; This function uses a non-reentrant model
  2889 ;;
  2890                           
  2891                           	psect	text24
  2892  000C74                     __ptext24:
  2893                           	callstack 0
  2894  000C74                     _TiInitTimer:
  2895                           	callstack 28
  2896                           
  2897                           ;TTimer.c: 20:     RCONbits.IPEN = 0;
  2898                           
  2899                           ;incstack = 0
  2900  000C74  9ED0               	bcf	208,7,c	;volatile
  2901                           
  2902                           ;TTimer.c: 21:     INTCONbits.GIE_GIEH = 1;
  2903  000C76  8EF2               	bsf	242,7,c	;volatile
  2904                           
  2905                           ;TTimer.c: 22:     INTCONbits.PEIE_GIEL = 1;
  2906  000C78  8CF2               	bsf	242,6,c	;volatile
  2907                           
  2908                           ;TTimer.c: 23:     INTCONbits.TMR0IE = 1;
  2909  000C7A  8AF2               	bsf	242,5,c	;volatile
  2910                           
  2911                           ;TTimer.c: 24:     INTCONbits.TMR0IF = 0;
  2912  000C7C  94F2               	bcf	242,2,c	;volatile
  2913                           
  2914                           ;TTimer.c: 25:     T0CON = 0x08;
  2915  000C7E  0E08               	movlw	8
  2916  000C80  6ED5               	movwf	213,c	;volatile
  2917                           
  2918                           ;TTimer.c: 27:     TMR0H = 0xD8;
  2919                           
  2920                           ;TTimer.c: 28:     TMR0L = 0xF0;
  2921  000C82  ECAC  F005         	call	PL36	;call to abstracted procedure
  2922                           
  2923                           ;TTimer.c: 29:     T0CONbits.TMR0ON = 1;
  2924  000C86  8ED5               	bsf	213,7,c	;volatile
  2925                           
  2926                           ;TTimer.c: 31:     for (counter=0;counter<25;counter++) {
  2927  000C88  6A20               	clrf	_counter^0,c
  2928  000C8A                     l2373:
  2929  000C8A  0E18               	movlw	24
  2930  000C8C  6420               	cpfsgt	_counter^0,c
  2931  000C8E  D001               	goto	l2377
  2932  000C90  0C18               	retlw	24
  2933  000C92                     l2377:
  2934                           
  2935                           ;TTimer.c: 32:  s_Timers[counter].b_busy=0;
  2936  000C92  EC33  F006         	call	PL8	;call to abstracted procedure
  2937  000C96  6ADF               	clrf	indf2,c
  2938                           
  2939                           ;TTimer.c: 33:     }
  2940  000C98  2A20               	incf	_counter^0,f,c
  2941  000C9A  D7F7               	goto	l2373
  2942  000C9C                     __end_of_TiInitTimer:
  2943                           	callstack 0
  2944                           
  2945 ;; *************** function _SMSMotor *****************
  2946 ;; Defined at:
  2947 ;;		line 133 in file "keypad.c"
  2948 ;; Parameters:    Size  Location     Type
  2949 ;;		None
  2950 ;; Auto vars:     Size  Location     Type
  2951 ;;		None
  2952 ;; Return value:  Size  Location     Type
  2953 ;;                  1    wreg      void 
  2954 ;; Registers used:
  2955 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2956 ;; Tracked objects:
  2957 ;;		On entry : 0/0
  2958 ;;		On exit  : 0/0
  2959 ;;		Unchanged: 0/0
  2960 ;; Data sizes:     COMRAM   BANK0   BANK1
  2961 ;;      Params:         0       0       0
  2962 ;;      Locals:         0       0       0
  2963 ;;      Temps:          2       0       0
  2964 ;;      Totals:         2       0       0
  2965 ;;Total ram usage:        2 bytes
  2966 ;; Hardware stack levels used: 1
  2967 ;; Hardware stack levels required when called: 4
  2968 ;; This function calls:
  2969 ;;		_KeGetGenericValue
  2970 ;;		_TiGetTics
  2971 ;;		_TiResetTics
  2972 ;; This function is called by:
  2973 ;;		_main
  2974 ;; This function uses a non-reentrant model
  2975 ;;
  2976                           
  2977                           	psect	text25
  2978  000650                     __ptext25:
  2979                           	callstack 0
  2980  000650                     _SMSMotor:
  2981                           	callstack 26
  2982                           
  2983                           ;keypad.c: 134:     switch(stateSMS){
  2984                           
  2985                           ;incstack = 0
  2986  000650  D043               	goto	l2531
  2987  000652                     l2479:
  2988                           
  2989                           ;keypad.c: 139:             if(pressed){
  2990  000652  501A               	movf	_pressed^0,w,c
  2991  000654  E021               	bz	l170
  2992                           
  2993                           ;keypad.c: 140:                 stateSMS=1;
  2994  000656  0E01               	movlw	1
  2995  000658  6E16               	movwf	_stateSMS^0,c
  2996                           
  2997                           ;keypad.c: 141:                 currentKey = KeGetGenericValue();
  2998  00065A  EC73  F006         	call	_KeGetGenericValue	;wreg free
  2999  00065E  6E1C               	movwf	_currentKey^0,c
  3000                           
  3001                           ;keypad.c: 142:                 available = 2;
  3002  000660  0E02               	movlw	2
  3003  000662  6E18               	movwf	_available^0,c
  3004                           
  3005                           ;keypad.c: 143:                 if (TiGetTics(timer_SMS)>=1000){
  3006  000664  501D               	movf	_timer_SMS^0,w,c
  3007  000666  EC4E  F006         	call	_TiGetTics
  3008  00066A  BE27               	btfsc	(?_TiGetTics+1)^0,7,c
  3009  00066C  D008               	goto	l2495
  3010  00066E  ECD6  F001         	call	PL26	;call to abstracted procedure
  3011  000672  E305               	bnc	l2495
  3012                           
  3013                           ;keypad.c: 144:                     available = 1;
  3014  000674  0E01               	movlw	1
  3015  000676  6E18               	movwf	_available^0,c
  3016                           
  3017                           ;keypad.c: 145:                     numPresses = 0;
  3018  000678  6A19               	clrf	_numPresses^0,c
  3019                           
  3020                           ;keypad.c: 146:                     previous = 0;
  3021  00067A  6A1B               	clrf	_previous^0,c
  3022                           
  3023                           ;keypad.c: 147:                 } else if(numPresses != 0 && previous != currentKey ){
  3024  00067C  D00A               	goto	l2505
  3025  00067E                     l2495:
  3026  00067E  5019               	movf	_numPresses^0,w,c
  3027  000680  E008               	bz	l2505
  3028  000682  501C               	movf	_currentKey^0,w,c
  3029  000684  181B               	xorwf	_previous^0,w,c
  3030  000686  E005               	bz	l2505
  3031                           
  3032                           ;keypad.c: 149:                     available = 1;
  3033  000688  0E01               	movlw	1
  3034  00068A  6E18               	movwf	_available^0,c
  3035                           
  3036                           ;keypad.c: 151:                     previous = currentKey;
  3037  00068C  C01C  F01B         	movff	_currentKey,_previous
  3038                           
  3039                           ;keypad.c: 153:                     numPresses = 0;
  3040  000690  6A19               	clrf	_numPresses^0,c
  3041  000692                     l2505:
  3042                           
  3043                           ;keypad.c: 157:                 TiResetTics(timer_SMS);
  3044  000692  501D               	movf	_timer_SMS^0,w,c
  3045  000694  EFBE  F006         	goto	_TiResetTics
  3046  000698                     l170:
  3047                           
  3048                           ;keypad.c: 160:               previous=currentKey;
  3049  000698  C01C  F01B         	movff	_currentKey,_previous
  3050  00069C  0012               	return	
  3051  00069E                     l2507:
  3052                           
  3053                           ;keypad.c: 172:             numPresses++;
  3054  00069E  2A19               	incf	_numPresses^0,f,c
  3055                           
  3056                           ;keypad.c: 173:             stateSMS = 2;
  3057  0006A0  0E02               	movlw	2
  3058  0006A2  6E16               	movwf	_stateSMS^0,c
  3059                           
  3060                           ;keypad.c: 174:             break;
  3061  0006A4  0C02               	retlw	2
  3062  0006A6                     l2511:
  3063                           
  3064                           ;keypad.c: 177:             if (!pressed){
  3065  0006A6  501A               	movf	_pressed^0,w,c
  3066  0006A8  A4D8               	btfss	status,2,c
  3067  0006AA  0012               	return	
  3068                           
  3069                           ;keypad.c: 178:                 TiResetTics(timer_SMS);
  3070  0006AC  501D               	movf	_timer_SMS^0,w,c
  3071  0006AE  ECBE  F006         	call	_TiResetTics
  3072                           
  3073                           ;keypad.c: 180:                 stateSMS = 0;
  3074  0006B2  6A16               	clrf	_stateSMS^0,c
  3075  0006B4  0012               	return	
  3076  0006B6                     l2517:
  3077                           
  3078                           ;keypad.c: 185:             if(pressed){
  3079  0006B6  501A               	movf	_pressed^0,w,c
  3080  0006B8  B4D8               	btfsc	status,2,c
  3081  0006BA  0012               	return	
  3082                           
  3083                           ;keypad.c: 186:                 stateSMS = 4;
  3084  0006BC  EF70  F006         	goto	PL44	;call to abstracted procedure
  3085  0006C0                     l2521:
  3086                           
  3087                           ;keypad.c: 191:             stateSMS = 5;
  3088  0006C0  0E05               	movlw	5
  3089  0006C2  6E16               	movwf	_stateSMS^0,c
  3090                           
  3091                           ;keypad.c: 192:             break;
  3092  0006C4  0C05               	retlw	5
  3093  0006C6                     l2523:
  3094                           
  3095                           ;keypad.c: 194:             if (!pressed){
  3096  0006C6  501A               	movf	_pressed^0,w,c
  3097  0006C8  A4D8               	btfss	status,2,c
  3098  0006CA  0012               	return	
  3099                           
  3100                           ;keypad.c: 195:                 TiResetTics(timer_SMS);
  3101  0006CC  501D               	movf	_timer_SMS^0,w,c
  3102  0006CE  ECBE  F006         	call	_TiResetTics
  3103                           
  3104                           ;keypad.c: 197:                 stateSMS = 3;
  3105  0006D2  0E03               	movlw	3
  3106  0006D4  6E16               	movwf	_stateSMS^0,c
  3107  0006D6  0C03               	retlw	3
  3108  0006D8                     l2531:
  3109  0006D8  5016               	movf	_stateSMS^0,w,c
  3110  0006DA  6E2D               	movwf	??_SMSMotor^0,c
  3111  0006DC  6A2E               	clrf	(??_SMSMotor+1)^0,c
  3112                           
  3113                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3114                           ; Switch size 1, requested type "space"
  3115                           ; Number of cases is 1, Range of values is 0 to 0
  3116                           ; switch strategies available:
  3117                           ; Name         Instructions Cycles
  3118                           ; simple_byte            4     3 (average)
  3119                           ;	Chosen strategy is simple_byte
  3120  0006DE  502E               	movf	(??_SMSMotor+1)^0,w,c
  3121  0006E0  A4D8               	btfss	status,2,c
  3122  0006E2  0012               	return	
  3123                           
  3124                           ; Switch size 1, requested type "space"
  3125                           ; Number of cases is 6, Range of values is 0 to 5
  3126                           ; switch strategies available:
  3127                           ; Name         Instructions Cycles
  3128                           ; simple_byte           19    10 (average)
  3129                           ;	Chosen strategy is simple_byte
  3130  0006E4  502D               	movf	??_SMSMotor^0,w,c
  3131  0006E6  E0B5               	bz	l2479
  3132  0006E8  0A01               	xorlw	1	; case 1
  3133  0006EA  E0D9               	bz	l2507
  3134  0006EC  0A03               	xorlw	3	; case 2
  3135  0006EE  E0DB               	bz	l2511
  3136  0006F0  0A01               	xorlw	1	; case 3
  3137  0006F2  E0E1               	bz	l2517
  3138  0006F4  0A07               	xorlw	7	; case 4
  3139  0006F6  E0E4               	bz	l2521
  3140  0006F8  0A01               	xorlw	1	; case 5
  3141  0006FA  E0E5               	bz	l2523
  3142  0006FC  0012               	return		;funcret
  3143  0006FE                     __end_of_SMSMotor:
  3144                           	callstack 0
  3145                           
  3146 ;; *************** function _KeGetGenericValue *****************
  3147 ;; Defined at:
  3148 ;;		line 224 in file "keypad.c"
  3149 ;; Parameters:    Size  Location     Type
  3150 ;;		None
  3151 ;; Auto vars:     Size  Location     Type
  3152 ;;		None
  3153 ;; Return value:  Size  Location     Type
  3154 ;;                  1    wreg      unsigned char 
  3155 ;; Registers used:
  3156 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3157 ;; Tracked objects:
  3158 ;;		On entry : 0/0
  3159 ;;		On exit  : 0/0
  3160 ;;		Unchanged: 0/0
  3161 ;; Data sizes:     COMRAM   BANK0   BANK1
  3162 ;;      Params:         0       0       0
  3163 ;;      Locals:         0       0       0
  3164 ;;      Temps:          2       0       0
  3165 ;;      Totals:         2       0       0
  3166 ;;Total ram usage:        2 bytes
  3167 ;; Hardware stack levels used: 1
  3168 ;; Hardware stack levels required when called: 3
  3169 ;; This function calls:
  3170 ;;		_getColumn
  3171 ;; This function is called by:
  3172 ;;		_SMSMotor
  3173 ;;		_KeGetCharValue
  3174 ;;		_menuMotor
  3175 ;; This function uses a non-reentrant model
  3176 ;;
  3177                           
  3178                           	psect	text26
  3179  000CE6                     __ptext26:
  3180                           	callstack 0
  3181  000CE6                     _KeGetGenericValue:
  3182                           	callstack 26
  3183                           
  3184                           ;keypad.c: 225:     return TABLE[(row*3)+getColumn()];
  3185                           
  3186                           ;incstack = 0
  3187  000CE6  EC02  F007         	call	_getColumn	;wreg free
  3188  000CEA  6E26               	movwf	??_KeGetGenericValue^0,c
  3189  000CEC  501F               	movf	_row^0,w,c
  3190  000CEE  0D03               	mullw	3
  3191  000CF0  50F3               	movf	243,w,c
  3192  000CF2  0F0D               	addlw	low _TABLE
  3193  000CF4  2426               	addwf	??_KeGetGenericValue^0,w,c
  3194  000CF6  6E27               	movwf	(??_KeGetGenericValue+1)^0,c
  3195  000CF8  C027  FFF6         	movff	??_KeGetGenericValue+1,tblptrl
  3196  000CFC                     	if	1	;There is more than 1 active tblptr byte
  3197  000CFC  0E02               	movlw	high __smallconst
  3198  000CFE  6EF7               	movwf	tblptrh,c
  3199  000D00                     	endif
  3200  000D00                     	if	0	;tblptru may be non-zero
  3201  000D00                     	endif
  3202  000D00                     	if	0	;tblptru may be non-zero
  3203  000D00                     	endif
  3204  000D00  0008               	tblrd		*
  3205  000D02  50F5               	movf	tablat,w,c
  3206  000D04  0012               	return		;funcret
  3207  000D06                     __end_of_KeGetGenericValue:
  3208                           	callstack 0
  3209                           
  3210 ;; *************** function _getColumn *****************
  3211 ;; Defined at:
  3212 ;;		line 211 in file "keypad.c"
  3213 ;; Parameters:    Size  Location     Type
  3214 ;;		None
  3215 ;; Auto vars:     Size  Location     Type
  3216 ;;		None
  3217 ;; Return value:  Size  Location     Type
  3218 ;;                  1    wreg      unsigned char 
  3219 ;; Registers used:
  3220 ;;		wreg
  3221 ;; Tracked objects:
  3222 ;;		On entry : 0/0
  3223 ;;		On exit  : 0/0
  3224 ;;		Unchanged: 0/0
  3225 ;; Data sizes:     COMRAM   BANK0   BANK1
  3226 ;;      Params:         0       0       0
  3227 ;;      Locals:         0       0       0
  3228 ;;      Temps:          0       0       0
  3229 ;;      Totals:         0       0       0
  3230 ;;Total ram usage:        0 bytes
  3231 ;; Hardware stack levels used: 1
  3232 ;; Hardware stack levels required when called: 2
  3233 ;; This function calls:
  3234 ;;		Nothing
  3235 ;; This function is called by:
  3236 ;;		_KeGetGenericValue
  3237 ;; This function uses a non-reentrant model
  3238 ;;
  3239                           
  3240                           	psect	text27
  3241  000E04                     __ptext27:
  3242                           	callstack 0
  3243  000E04                     _getColumn:
  3244                           	callstack 26
  3245                           
  3246                           ;keypad.c: 212:     if (!PORTBbits.RB0) return 0;
  3247                           
  3248                           ;incstack = 0
  3249  000E04  A081               	btfss	129,0,c	;volatile
  3250  000E06  0C00               	retlw	0
  3251                           
  3252                           ;keypad.c: 213:     if (!PORTBbits.RB1) return 1;
  3253  000E08  A281               	btfss	129,1,c	;volatile
  3254  000E0A  0C01               	retlw	1
  3255                           
  3256                           ;keypad.c: 214:     return 2;
  3257  000E0C  0C02               	retlw	2	;funcret
  3258  000E0E                     __end_of_getColumn:
  3259                           	callstack 0
  3260                           
  3261 ;; *************** function _LcInit *****************
  3262 ;; Defined at:
  3263 ;;		line 68 in file "LcTLCD.c"
  3264 ;; Parameters:    Size  Location     Type
  3265 ;;  rows            1    wreg     unsigned char 
  3266 ;;  columns         1   17[COMRAM] unsigned char 
  3267 ;; Auto vars:     Size  Location     Type
  3268 ;;  rows            1   18[COMRAM] unsigned char 
  3269 ;;  i               2   19[COMRAM] int 
  3270 ;; Return value:  Size  Location     Type
  3271 ;;                  1    wreg      void 
  3272 ;; Registers used:
  3273 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3274 ;; Tracked objects:
  3275 ;;		On entry : 0/0
  3276 ;;		On exit  : 0/0
  3277 ;;		Unchanged: 0/0
  3278 ;; Data sizes:     COMRAM   BANK0   BANK1
  3279 ;;      Params:         1       0       0
  3280 ;;      Locals:         3       0       0
  3281 ;;      Temps:          0       0       0
  3282 ;;      Totals:         4       0       0
  3283 ;;Total ram usage:        4 bytes
  3284 ;; Hardware stack levels used: 1
  3285 ;; Hardware stack levels required when called: 4
  3286 ;; This function calls:
  3287 ;;		_CantaIR
  3288 ;;		_EscriuPrimeraOrdre
  3289 ;;		_Espera
  3290 ;;		_TiGetTimer
  3291 ;;		_WaitForBusy
  3292 ;; This function is called by:
  3293 ;;		_main
  3294 ;; This function uses a non-reentrant model
  3295 ;;
  3296                           
  3297                           	psect	text28
  3298  0004D4                     __ptext28:
  3299                           	callstack 0
  3300  0004D4                     _LcInit:
  3301                           	callstack 26
  3302                           
  3303                           ;incstack = 0
  3304                           ;LcInit@rows stored from wreg
  3305  0004D4  6E33               	movwf	LcInit@rows^0,c
  3306                           
  3307                           ;LcTLCD.c: 74:  int i;;LcTLCD.c: 75:  Timer = TiGetTimer();
  3308  0004D6  EC24  F006         	call	_TiGetTimer	;wreg free
  3309  0004DA  6E01               	movwf	_Timer^0,c
  3310  0004DC  6A02               	clrf	(_Timer+1)^0,c
  3311                           
  3312                           ;LcTLCD.c: 76:  Rows = rows; Columns = columns;
  3313  0004DE  C033  F015         	movff	LcInit@rows,_Rows
  3314  0004E2  C032  F014         	movff	LcInit@columns,_Columns
  3315                           
  3316                           ;LcTLCD.c: 77:  RowAct = ColumnAct = 0;
  3317  0004E6  6A12               	clrf	_ColumnAct^0,c
  3318  0004E8  6A13               	clrf	_RowAct^0,c
  3319                           
  3320                           ;LcTLCD.c: 78:  (TRISDbits.TRISD4 = TRISDbits.TRISD5 = TRISDbits.TRISD6 = 0);
  3321  0004EA  9C95               	bcf	149,6,c	;volatile
  3322  0004EC  9A95               	bcf	149,5,c	;volatile
  3323  0004EE  9895               	bcf	149,4,c	;volatile
  3324                           
  3325                           ;LcTLCD.c: 79:  for (i = 0; i < 2; i++) {
  3326  0004F0  6A34               	clrf	LcInit@i^0,c
  3327  0004F2  6A35               	clrf	(LcInit@i+1)^0,c
  3328  0004F4                     l2403:
  3329                           
  3330                           ;LcTLCD.c: 80:   Espera(Timer, 100);
  3331  0004F4  D84C               	call	PL2	;call to abstracted procedure
  3332  0004F6  0E64               	movlw	100
  3333  0004F8  6E2F               	movwf	Espera@ms^0,c
  3334  0004FA  EC83  F006         	call	_Espera	;wreg free
  3335                           
  3336                           ;LcTLCD.c: 83:   EscriuPrimeraOrdre(0x02 | 0x01);
  3337  0004FE  0E03               	movlw	3
  3338  000500  EC5E  F004         	call	_EscriuPrimeraOrdre
  3339                           
  3340                           ;LcTLCD.c: 84:   Espera(Timer, 5);
  3341  000504  D844               	call	PL2	;call to abstracted procedure
  3342  000506  0E05               	movlw	5
  3343  000508  6E2F               	movwf	Espera@ms^0,c
  3344  00050A  EC83  F006         	call	_Espera	;wreg free
  3345                           
  3346                           ;LcTLCD.c: 85:   EscriuPrimeraOrdre(0x02 | 0x01);
  3347  00050E  0E03               	movlw	3
  3348  000510  EC5E  F004         	call	_EscriuPrimeraOrdre
  3349                           
  3350                           ;LcTLCD.c: 86:   Espera(Timer, 1);
  3351  000514  D83C               	call	PL2	;call to abstracted procedure
  3352  000516  0E01               	movlw	1
  3353  000518  6E2F               	movwf	Espera@ms^0,c
  3354  00051A  EC83  F006         	call	_Espera	;wreg free
  3355                           
  3356                           ;LcTLCD.c: 87:   EscriuPrimeraOrdre(0x02 | 0x01);
  3357  00051E  0E03               	movlw	3
  3358  000520  EC5E  F004         	call	_EscriuPrimeraOrdre
  3359                           
  3360                           ;LcTLCD.c: 88:   Espera(Timer, 1);
  3361  000524  D834               	call	PL2	;call to abstracted procedure
  3362  000526  0E01               	movlw	1
  3363  000528  6E2F               	movwf	Espera@ms^0,c
  3364  00052A  EC83  F006         	call	_Espera	;wreg free
  3365                           
  3366                           ;LcTLCD.c: 91:   EscriuPrimeraOrdre(0x02);
  3367  00052E  0E02               	movlw	2
  3368  000530  EC5E  F004         	call	_EscriuPrimeraOrdre
  3369                           
  3370                           ;LcTLCD.c: 92:   Espera(Timer, 1);
  3371  000534  D82C               	call	PL2	;call to abstracted procedure
  3372  000536  0E01               	movlw	1
  3373  000538  6E2F               	movwf	Espera@ms^0,c
  3374  00053A  EC83  F006         	call	_Espera	;wreg free
  3375                           
  3376                           ;LcTLCD.c: 93:   CantaIR(0x20 | 0x08);
  3377  00053E  0E28               	movlw	40
  3378  000540  ECB0  F006         	call	_CantaIR
  3379                           
  3380                           ;LcTLCD.c: 96:   WaitForBusy(); CantaIR(0x08);
  3381  000544  ECB1  F005         	call	_WaitForBusy	;wreg free
  3382  000548  0E08               	movlw	8
  3383  00054A  ECB0  F006         	call	_CantaIR
  3384                           
  3385                           ;LcTLCD.c: 97:   WaitForBusy(); CantaIR(0x01);
  3386  00054E  ECB1  F005         	call	_WaitForBusy	;wreg free
  3387  000552  0E01               	movlw	1
  3388  000554  ECB0  F006         	call	_CantaIR
  3389                           
  3390                           ;LcTLCD.c: 98:   Espera(Timer,3);
  3391  000558  D81A               	call	PL2	;call to abstracted procedure
  3392  00055A  0E03               	movlw	3
  3393  00055C  6E2F               	movwf	Espera@ms^0,c
  3394  00055E  EC83  F006         	call	_Espera	;wreg free
  3395                           
  3396                           ;LcTLCD.c: 99:   WaitForBusy(); CantaIR(0x04 | 0x02);
  3397  000562  ECB1  F005         	call	_WaitForBusy	;wreg free
  3398  000566  0E06               	movlw	6
  3399  000568  ECB0  F006         	call	_CantaIR
  3400                           
  3401                           ;LcTLCD.c: 100:   WaitForBusy(); CantaIR(0x08 | 0x04 | 0x02 | 0x01);
  3402  00056C  ECB1  F005         	call	_WaitForBusy	;wreg free
  3403  000570  0E0F               	movlw	15
  3404  000572  ECB0  F006         	call	_CantaIR
  3405                           
  3406                           ;LcTLCD.c: 101:  }
  3407  000576  4A34               	infsnz	LcInit@i^0,f,c
  3408  000578  2A35               	incf	(LcInit@i+1)^0,f,c
  3409  00057A  BE35               	btfsc	(LcInit@i+1)^0,7,c
  3410  00057C  D7BB               	goto	l2403
  3411  00057E  5035               	movf	(LcInit@i+1)^0,w,c
  3412  000580  E105               	bnz	u1780
  3413  000582  0E02               	movlw	2
  3414  000584  5C34               	subwf	LcInit@i^0,w,c
  3415  000586  B0D8               	btfsc	status,0,c
  3416  000588  0012               	return	
  3417  00058A  D7B4               	goto	l2403
  3418  00058C                     u1780:
  3419  00058C  0012               	return		;funcret
  3420  00058E                     __end_of_LcInit:
  3421                           	callstack 0
  3422  00058E                     PL2:
  3423                           	callstack 26
  3424  00058E  C001  F02D         	movff	_Timer,Espera@Timer
  3425  000592  C002  F02E         	movff	_Timer+1,Espera@Timer+1
  3426  000596  6A30               	clrf	(Espera@ms+1)^0,c
  3427  000598  0012               	return	
  3428  00059A                     __end_ofPL2:
  3429                           	callstack 0
  3430                           
  3431 ;; *************** function _WaitForBusy *****************
  3432 ;; Defined at:
  3433 ;;		line 261 in file "LcTLCD.c"
  3434 ;; Parameters:    Size  Location     Type
  3435 ;;		None
  3436 ;; Auto vars:     Size  Location     Type
  3437 ;;  Busy            1   12[COMRAM] unsigned char 
  3438 ;; Return value:  Size  Location     Type
  3439 ;;                  1    wreg      void 
  3440 ;; Registers used:
  3441 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3442 ;; Tracked objects:
  3443 ;;		On entry : 0/0
  3444 ;;		On exit  : 0/0
  3445 ;;		Unchanged: 0/0
  3446 ;; Data sizes:     COMRAM   BANK0   BANK1
  3447 ;;      Params:         0       0       0
  3448 ;;      Locals:         1       0       0
  3449 ;;      Temps:          0       0       0
  3450 ;;      Totals:         1       0       0
  3451 ;;Total ram usage:        1 bytes
  3452 ;; Hardware stack levels used: 1
  3453 ;; Hardware stack levels required when called: 3
  3454 ;; This function calls:
  3455 ;;		_TiGetTics
  3456 ;;		_TiResetTics
  3457 ;; This function is called by:
  3458 ;;		_LcInit
  3459 ;;		_LcClear
  3460 ;;		_LcCursorOn
  3461 ;;		_LcCursorOff
  3462 ;;		_LcGotoXY
  3463 ;;		_LcPutChar
  3464 ;; This function uses a non-reentrant model
  3465 ;;
  3466                           
  3467                           	psect	text29
  3468  000B62                     __ptext29:
  3469                           	callstack 0
  3470  000B62                     _WaitForBusy:
  3471                           	callstack 24
  3472                           
  3473                           ;LcTLCD.c: 262:  (TRISDbits.TRISD0 = TRISDbits.TRISD1 = TRISDbits.TRISD2 = TRISDbits.TRI
      +                          SD3 = 1);
  3474                           
  3475                           ;incstack = 0
  3476  000B62  8695               	bsf	149,3,c	;volatile
  3477  000B64  8495               	bsf	149,2,c	;volatile
  3478  000B66  8295               	bsf	149,1,c	;volatile
  3479  000B68  8095               	bsf	149,0,c	;volatile
  3480                           
  3481                           ;LcTLCD.c: 263:  (LATDbits.LATD4 = 0);
  3482  000B6A  988C               	bcf	140,4,c	;volatile
  3483                           
  3484                           ;LcTLCD.c: 264:  (LATDbits.LATD5 = 1);
  3485  000B6C  8A8C               	bsf	140,5,c	;volatile
  3486                           
  3487                           ;LcTLCD.c: 265:  TiResetTics(Timer);
  3488  000B6E  5001               	movf	_Timer^0,w,c
  3489  000B70  ECBE  F006         	call	_TiResetTics
  3490  000B74                     l2103:
  3491                           
  3492                           ;LcTLCD.c: 267:   (LATDbits.LATD6 = 1);(LATDbits.LATD6 = 1);
  3493  000B74  8C8C               	bsf	140,6,c	;volatile
  3494  000B76  8C8C               	bsf	140,6,c	;volatile
  3495                           
  3496                           ;LcTLCD.c: 268:   Busy = (PORTDbits.RD3);
  3497  000B78  0E00               	movlw	0
  3498  000B7A  B683               	btfsc	131,3,c	;volatile
  3499  000B7C  0E01               	movlw	1
  3500  000B7E  6E2D               	movwf	WaitForBusy@Busy^0,c
  3501                           
  3502                           ;LcTLCD.c: 269:   (LATDbits.LATD6 = 0);
  3503  000B80  9C8C               	bcf	140,6,c	;volatile
  3504                           
  3505                           ;LcTLCD.c: 270:   (LATDbits.LATD6 = 0);
  3506  000B82  9C8C               	bcf	140,6,c	;volatile
  3507                           
  3508                           ;LcTLCD.c: 271:   (LATDbits.LATD6 = 1);(LATDbits.LATD6 = 1);
  3509  000B84  8C8C               	bsf	140,6,c	;volatile
  3510  000B86  8C8C               	bsf	140,6,c	;volatile
  3511                           
  3512                           ;LcTLCD.c: 273:   (LATDbits.LATD6 = 0);
  3513  000B88  9C8C               	bcf	140,6,c	;volatile
  3514                           
  3515                           ;LcTLCD.c: 274:   (LATDbits.LATD6 = 0);
  3516  000B8A  9C8C               	bcf	140,6,c	;volatile
  3517                           
  3518                           ;LcTLCD.c: 275:   if (TiGetTics(Timer)) break;
  3519  000B8C  5001               	movf	_Timer^0,w,c
  3520  000B8E  EC4E  F006         	call	_TiGetTics
  3521  000B92  5026               	movf	?_TiGetTics^0,w,c
  3522  000B94  1027               	iorwf	(?_TiGetTics+1)^0,w,c
  3523  000B96  E001               	bz	l2125
  3524  000B98  0012               	return	
  3525  000B9A                     l2125:
  3526                           
  3527                           ;LcTLCD.c: 276:  } while(Busy);
  3528  000B9A  502D               	movf	WaitForBusy@Busy^0,w,c
  3529  000B9C  E1EB               	bnz	l2103
  3530  000B9E  0012               	return		;funcret
  3531  000BA0                     __end_of_WaitForBusy:
  3532                           	callstack 0
  3533                           
  3534 ;; *************** function _TiGetTimer *****************
  3535 ;; Defined at:
  3536 ;;		line 72 in file "TTimer.c"
  3537 ;; Parameters:    Size  Location     Type
  3538 ;;		None
  3539 ;; Auto vars:     Size  Location     Type
  3540 ;;		None
  3541 ;; Return value:  Size  Location     Type
  3542 ;;                  1    wreg      unsigned char 
  3543 ;; Registers used:
  3544 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  3545 ;; Tracked objects:
  3546 ;;		On entry : 0/0
  3547 ;;		On exit  : 0/0
  3548 ;;		Unchanged: 0/0
  3549 ;; Data sizes:     COMRAM   BANK0   BANK1
  3550 ;;      Params:         0       0       0
  3551 ;;      Locals:         0       0       0
  3552 ;;      Temps:          1       0       0
  3553 ;;      Totals:         1       0       0
  3554 ;;Total ram usage:        1 bytes
  3555 ;; Hardware stack levels used: 1
  3556 ;; Hardware stack levels required when called: 2
  3557 ;; This function calls:
  3558 ;;		Nothing
  3559 ;; This function is called by:
  3560 ;;		_initKeypad
  3561 ;;		_LcInit
  3562 ;;		_initAudio
  3563 ;;		_initMenu
  3564 ;; This function uses a non-reentrant model
  3565 ;;
  3566                           
  3567                           	psect	text30
  3568  000C48                     __ptext30:
  3569                           	callstack 0
  3570  000C48                     _TiGetTimer:
  3571                           	callstack 27
  3572                           
  3573                           ;TTimer.c: 76:     counter=0;
  3574                           
  3575                           ;incstack = 0
  3576  000C48  6A20               	clrf	_counter^0,c
  3577                           
  3578                           ;TTimer.c: 77:     while (s_Timers[counter].b_busy==1) {
  3579  000C4A  D005               	goto	l2233
  3580  000C4C                     l2225:
  3581                           
  3582                           ;TTimer.c: 78:         counter++;
  3583  000C4C  2A20               	incf	_counter^0,f,c
  3584                           
  3585                           ;TTimer.c: 79:  if (counter == 25) return -1;
  3586  000C4E  0E19               	movlw	25
  3587  000C50  1820               	xorwf	_counter^0,w,c
  3588  000C52  E101               	bnz	l2233
  3589  000C54  0CFF               	retlw	255
  3590  000C56                     l2233:
  3591                           
  3592                           ;TTimer.c: 77:     while (s_Timers[counter].b_busy==1) {
  3593  000C56  D807               	call	PL8	;call to abstracted procedure
  3594  000C58  04DE               	decf	postinc2,w,c
  3595  000C5A  E0F8               	bz	l2225
  3596                           
  3597                           ;TTimer.c: 81:     s_Timers[counter].b_busy=1;
  3598  000C5C  D804               	call	PL8	;call to abstracted procedure
  3599  000C5E  0E01               	movlw	1
  3600  000C60  6EDF               	movwf	indf2,c
  3601                           
  3602                           ;TTimer.c: 82:     return (counter);
  3603  000C62  5020               	movf	_counter^0,w,c
  3604  000C64  0012               	return		;funcret
  3605  000C66                     __end_of_TiGetTimer:
  3606                           	callstack 0
  3607  000C66                     PL8:
  3608                           	callstack 28
  3609  000C66  5020               	movf	_counter^0,w,c
  3610  000C68  0D03               	mullw	3
  3611  000C6A  50F3               	movf	243,w,c
  3612  000C6C  0F82               	addlw	low (_s_Timers+2)
  3613  000C6E  6ED9               	movwf	fsr2l,c
  3614  000C70  6ADA               	clrf	fsr2h,c
  3615  000C72  0012               	return	
  3616  000C74                     __end_ofPL8:
  3617                           	callstack 0
  3618                           
  3619 ;; *************** function _Espera *****************
  3620 ;; Defined at:
  3621 ;;		line 210 in file "LcTLCD.c"
  3622 ;; Parameters:    Size  Location     Type
  3623 ;;  Timer           2   12[COMRAM] int 
  3624 ;;  ms              2   14[COMRAM] int 
  3625 ;; Auto vars:     Size  Location     Type
  3626 ;;		None
  3627 ;; Return value:  Size  Location     Type
  3628 ;;                  1    wreg      void 
  3629 ;; Registers used:
  3630 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3631 ;; Tracked objects:
  3632 ;;		On entry : 0/0
  3633 ;;		On exit  : 0/0
  3634 ;;		Unchanged: 0/0
  3635 ;; Data sizes:     COMRAM   BANK0   BANK1
  3636 ;;      Params:         4       0       0
  3637 ;;      Locals:         0       0       0
  3638 ;;      Temps:          1       0       0
  3639 ;;      Totals:         5       0       0
  3640 ;;Total ram usage:        5 bytes
  3641 ;; Hardware stack levels used: 1
  3642 ;; Hardware stack levels required when called: 3
  3643 ;; This function calls:
  3644 ;;		_TiGetTics
  3645 ;;		_TiResetTics
  3646 ;; This function is called by:
  3647 ;;		_LcInit
  3648 ;;		_LcClear
  3649 ;; This function uses a non-reentrant model
  3650 ;;
  3651                           
  3652                           	psect	text31
  3653  000D06                     __ptext31:
  3654                           	callstack 0
  3655  000D06                     _Espera:
  3656                           	callstack 25
  3657                           
  3658                           ;LcTLCD.c: 211:  TiResetTics(Timer);
  3659                           
  3660                           ;incstack = 0
  3661  000D06  502D               	movf	Espera@Timer^0,w,c
  3662  000D08  ECBE  F006         	call	_TiResetTics
  3663  000D0C                     l2183:
  3664  000D0C  502D               	movf	Espera@Timer^0,w,c
  3665  000D0E  EC4E  F006         	call	_TiGetTics
  3666  000D12  502F               	movf	Espera@ms^0,w,c
  3667  000D14  5C26               	subwf	?_TiGetTics^0,w,c
  3668  000D16  5027               	movf	(?_TiGetTics+1)^0,w,c
  3669  000D18  0A80               	xorlw	128
  3670  000D1A  6E31               	movwf	??_Espera^0,c
  3671  000D1C  5030               	movf	(Espera@ms+1)^0,w,c
  3672  000D1E  0A80               	xorlw	128
  3673  000D20  5831               	subwfb	??_Espera^0,w,c
  3674  000D22  E3F4               	bnc	l2183
  3675  000D24  0012               	return		;funcret
  3676  000D26                     __end_of_Espera:
  3677                           	callstack 0
  3678                           
  3679 ;; *************** function _EscriuPrimeraOrdre *****************
  3680 ;; Defined at:
  3681 ;;		line 279 in file "LcTLCD.c"
  3682 ;; Parameters:    Size  Location     Type
  3683 ;;  ordre           1    wreg     unsigned char 
  3684 ;; Auto vars:     Size  Location     Type
  3685 ;;  ordre           1    6[COMRAM] unsigned char 
  3686 ;; Return value:  Size  Location     Type
  3687 ;;                  1    wreg      void 
  3688 ;; Registers used:
  3689 ;;		wreg, status,2, status,0
  3690 ;; Tracked objects:
  3691 ;;		On entry : 0/0
  3692 ;;		On exit  : 0/0
  3693 ;;		Unchanged: 0/0
  3694 ;; Data sizes:     COMRAM   BANK0   BANK1
  3695 ;;      Params:         0       0       0
  3696 ;;      Locals:         1       0       0
  3697 ;;      Temps:          1       0       0
  3698 ;;      Totals:         2       0       0
  3699 ;;Total ram usage:        2 bytes
  3700 ;; Hardware stack levels used: 1
  3701 ;; Hardware stack levels required when called: 2
  3702 ;; This function calls:
  3703 ;;		Nothing
  3704 ;; This function is called by:
  3705 ;;		_LcInit
  3706 ;; This function uses a non-reentrant model
  3707 ;;
  3708                           
  3709                           	psect	text32
  3710  0008BC                     __ptext32:
  3711                           	callstack 0
  3712  0008BC                     _EscriuPrimeraOrdre:
  3713                           	callstack 27
  3714                           
  3715                           ;incstack = 0
  3716                           ;EscriuPrimeraOrdre@ordre stored from wreg
  3717  0008BC  6E27               	movwf	EscriuPrimeraOrdre@ordre^0,c
  3718                           
  3719                           ;LcTLCD.c: 281:  (TRISDbits.TRISD0 = TRISDbits.TRISD1 = TRISDbits.TRISD2 = TRISDbits.TRI
      +                          SD3 = 0); (LATDbits.LATD4 = 0); (LATDbits.LATD5 = 0);
  3720  0008BE  9695               	bcf	149,3,c	;volatile
  3721                           
  3722                           ;LcTLCD.c: 282:  (LATDbits.LATD6 = 1); (LATDbits.LATD6 = 1);
  3723  0008C0  D82F               	call	PL24	;call to abstracted procedure
  3724  0008C2  8C8C               	bsf	140,6,c	;volatile
  3725                           
  3726                           ;LcTLCD.c: 283:   (LATDbits.LATD3 = (ordre & 0x08 ? 1 : 0));
  3727  0008C4  A627               	btfss	EscriuPrimeraOrdre@ordre^0,3,c
  3728  0008C6  D003               	goto	u440
  3729  0008C8  6A26               	clrf	??_EscriuPrimeraOrdre^0,c
  3730  0008CA  2A26               	incf	??_EscriuPrimeraOrdre^0,f,c
  3731  0008CC  D001               	goto	u458
  3732  0008CE                     u440:
  3733  0008CE  6A26               	clrf	??_EscriuPrimeraOrdre^0,c
  3734  0008D0                     u458:
  3735  0008D0  4626               	rlncf	??_EscriuPrimeraOrdre^0,f,c
  3736  0008D2  D82D               	call	PL30	;call to abstracted procedure
  3737  0008D4  0BF7               	andlw	-9
  3738  0008D6  1826               	xorwf	??_EscriuPrimeraOrdre^0,w,c
  3739  0008D8  6E8C               	movwf	140,c	;volatile
  3740                           
  3741                           ;LcTLCD.c: 284:   (LATDbits.LATD2 = (ordre & 0x04 ? 1 : 0));
  3742  0008DA  A427               	btfss	EscriuPrimeraOrdre@ordre^0,2,c
  3743  0008DC  D003               	goto	u460
  3744  0008DE  6A26               	clrf	??_EscriuPrimeraOrdre^0,c
  3745  0008E0  2A26               	incf	??_EscriuPrimeraOrdre^0,f,c
  3746  0008E2  D001               	goto	u478
  3747  0008E4                     u460:
  3748  0008E4  6A26               	clrf	??_EscriuPrimeraOrdre^0,c
  3749  0008E6                     u478:
  3750  0008E6  D823               	call	PL30	;call to abstracted procedure
  3751  0008E8  0BFB               	andlw	-5
  3752  0008EA  1826               	xorwf	??_EscriuPrimeraOrdre^0,w,c
  3753  0008EC  6E8C               	movwf	140,c	;volatile
  3754                           
  3755                           ;LcTLCD.c: 285:   (LATDbits.LATD1 = (ordre & 0x02 ? 1 : 0));
  3756  0008EE  A227               	btfss	EscriuPrimeraOrdre@ordre^0,1,c
  3757  0008F0  D003               	goto	u480
  3758  0008F2  6A26               	clrf	??_EscriuPrimeraOrdre^0,c
  3759  0008F4  2A26               	incf	??_EscriuPrimeraOrdre^0,f,c
  3760  0008F6  D001               	goto	u498
  3761  0008F8                     u480:
  3762  0008F8  6A26               	clrf	??_EscriuPrimeraOrdre^0,c
  3763  0008FA                     u498:
  3764  0008FA  4626               	rlncf	??_EscriuPrimeraOrdre^0,f,c
  3765  0008FC  508C               	movf	140,w,c	;volatile
  3766  0008FE  1826               	xorwf	??_EscriuPrimeraOrdre^0,w,c
  3767  000900  0BFD               	andlw	-3
  3768  000902  1826               	xorwf	??_EscriuPrimeraOrdre^0,w,c
  3769  000904  6E8C               	movwf	140,c	;volatile
  3770                           
  3771                           ;LcTLCD.c: 286:   (LATDbits.LATD0 = (ordre & 0x01 ? 1 : 0));
  3772  000906  A027               	btfss	EscriuPrimeraOrdre@ordre^0,0,c
  3773  000908  D003               	goto	u500
  3774  00090A  6A26               	clrf	??_EscriuPrimeraOrdre^0,c
  3775  00090C  2A26               	incf	??_EscriuPrimeraOrdre^0,f,c
  3776  00090E  D001               	goto	u518
  3777  000910                     u500:
  3778  000910  6A26               	clrf	??_EscriuPrimeraOrdre^0,c
  3779  000912                     u518:
  3780  000912  508C               	movf	140,w,c	;volatile
  3781  000914  1826               	xorwf	??_EscriuPrimeraOrdre^0,w,c
  3782  000916  0BFE               	andlw	-2
  3783  000918  1826               	xorwf	??_EscriuPrimeraOrdre^0,w,c
  3784  00091A  6E8C               	movwf	140,c	;volatile
  3785                           
  3786                           ;LcTLCD.c: 287:  (LATDbits.LATD6 = 0);
  3787  00091C  9C8C               	bcf	140,6,c	;volatile
  3788  00091E  0012               	return		;funcret
  3789  000920                     __end_of_EscriuPrimeraOrdre:
  3790                           	callstack 0
  3791  000920                     PL24:
  3792                           	callstack 23
  3793  000920  9495               	bcf	149,2,c	;volatile
  3794  000922  9295               	bcf	149,1,c	;volatile
  3795  000924  9095               	bcf	149,0,c	;volatile
  3796  000926  988C               	bcf	140,4,c	;volatile
  3797  000928  9A8C               	bcf	140,5,c	;volatile
  3798  00092A  8C8C               	bsf	140,6,c	;volatile
  3799  00092C  0012               	return	
  3800  00092E                     __end_ofPL24:
  3801                           	callstack 0
  3802  00092E                     PL30:
  3803                           	callstack 27
  3804  00092E  4626               	rlncf	??_EscriuPrimeraOrdre^0,f,c
  3805  000930  4626               	rlncf	??_EscriuPrimeraOrdre^0,f,c
  3806  000932  508C               	movf	140,w,c	;volatile
  3807  000934  1826               	xorwf	??_EscriuPrimeraOrdre^0,w,c
  3808  000936  0012               	return	
  3809  000938                     __end_ofPL30:
  3810                           	callstack 0
  3811                           
  3812 ;; *************** function _CantaIR *****************
  3813 ;; Defined at:
  3814 ;;		line 229 in file "LcTLCD.c"
  3815 ;; Parameters:    Size  Location     Type
  3816 ;;  IR              1    wreg     unsigned char 
  3817 ;; Auto vars:     Size  Location     Type
  3818 ;;  IR              1    7[COMRAM] unsigned char 
  3819 ;; Return value:  Size  Location     Type
  3820 ;;                  1    wreg      void 
  3821 ;; Registers used:
  3822 ;;		wreg, status,2, status,0, cstack
  3823 ;; Tracked objects:
  3824 ;;		On entry : 0/0
  3825 ;;		On exit  : 0/0
  3826 ;;		Unchanged: 0/0
  3827 ;; Data sizes:     COMRAM   BANK0   BANK1
  3828 ;;      Params:         0       0       0
  3829 ;;      Locals:         1       0       0
  3830 ;;      Temps:          0       0       0
  3831 ;;      Totals:         1       0       0
  3832 ;;Total ram usage:        1 bytes
  3833 ;; Hardware stack levels used: 1
  3834 ;; Hardware stack levels required when called: 3
  3835 ;; This function calls:
  3836 ;;		_CantaPartAlta
  3837 ;;		_CantaPartBaixa
  3838 ;; This function is called by:
  3839 ;;		_LcInit
  3840 ;;		_LcClear
  3841 ;;		_LcCursorOn
  3842 ;;		_LcCursorOff
  3843 ;;		_LcGotoXY
  3844 ;; This function uses a non-reentrant model
  3845 ;;
  3846                           
  3847                           	psect	text33
  3848  000D60                     __ptext33:
  3849                           	callstack 0
  3850  000D60                     _CantaIR:
  3851                           	callstack 23
  3852                           
  3853                           ;incstack = 0
  3854                           ;CantaIR@IR stored from wreg
  3855  000D60  6E28               	movwf	CantaIR@IR^0,c
  3856                           
  3857                           ;LcTLCD.c: 230:  (TRISDbits.TRISD0 = TRISDbits.TRISD1 = TRISDbits.TRISD2 = TRISDbits.TRI
      +                          SD3 = 0);
  3858  000D62  9695               	bcf	149,3,c	;volatile
  3859                           
  3860                           ;LcTLCD.c: 231:  (LATDbits.LATD4 = 0);
  3861                           
  3862                           ;LcTLCD.c: 232:  (LATDbits.LATD5 = 0);
  3863                           
  3864                           ;LcTLCD.c: 233:  (LATDbits.LATD6 = 1);
  3865  000D64  EC90  F004         	call	PL24	;call to abstracted procedure
  3866                           
  3867                           ;LcTLCD.c: 234:  CantaPartAlta(IR);
  3868  000D68  5028               	movf	CantaIR@IR^0,w,c
  3869  000D6A  EC03  F005         	call	_CantaPartAlta
  3870                           
  3871                           ;LcTLCD.c: 235:  (LATDbits.LATD6 = 1);
  3872                           
  3873                           ;LcTLCD.c: 236:  (LATDbits.LATD6 = 0);
  3874                           
  3875                           ;LcTLCD.c: 237:  (LATDbits.LATD6 = 0);
  3876                           
  3877                           ;LcTLCD.c: 238:  (LATDbits.LATD6 = 1);
  3878  000D6E  EC1F  F006         	call	PL38	;call to abstracted procedure
  3879                           
  3880                           ;LcTLCD.c: 239:  CantaPartBaixa(IR);
  3881  000D72  5028               	movf	CantaIR@IR^0,w,c
  3882  000D74  ECD0  F004         	call	_CantaPartBaixa
  3883                           
  3884                           ;LcTLCD.c: 240:  (LATDbits.LATD6 = 1);
  3885                           
  3886                           ;LcTLCD.c: 241:  (LATDbits.LATD6 = 0);
  3887                           
  3888                           ;LcTLCD.c: 242:  (TRISDbits.TRISD0 = TRISDbits.TRISD1 = TRISDbits.TRISD2 = TRISDbits.TRI
      +                          SD3 = 1);
  3889  000D78  EF18  F006         	goto	PL20	;call to abstracted procedure
  3890  000D7C                     __end_of_CantaIR:
  3891                           	callstack 0
  3892                           
  3893 ;; *************** function _CantaPartBaixa *****************
  3894 ;; Defined at:
  3895 ;;		line 222 in file "LcTLCD.c"
  3896 ;; Parameters:    Size  Location     Type
  3897 ;;  c               1    wreg     unsigned char 
  3898 ;; Auto vars:     Size  Location     Type
  3899 ;;  c               1    6[COMRAM] unsigned char 
  3900 ;; Return value:  Size  Location     Type
  3901 ;;                  1    wreg      void 
  3902 ;; Registers used:
  3903 ;;		wreg, status,2, status,0
  3904 ;; Tracked objects:
  3905 ;;		On entry : 0/0
  3906 ;;		On exit  : 0/0
  3907 ;;		Unchanged: 0/0
  3908 ;; Data sizes:     COMRAM   BANK0   BANK1
  3909 ;;      Params:         0       0       0
  3910 ;;      Locals:         1       0       0
  3911 ;;      Temps:          1       0       0
  3912 ;;      Totals:         2       0       0
  3913 ;;Total ram usage:        2 bytes
  3914 ;; Hardware stack levels used: 1
  3915 ;; Hardware stack levels required when called: 2
  3916 ;; This function calls:
  3917 ;;		Nothing
  3918 ;; This function is called by:
  3919 ;;		_CantaIR
  3920 ;;		_CantaData
  3921 ;; This function uses a non-reentrant model
  3922 ;;
  3923                           
  3924                           	psect	text34
  3925  0009A0                     __ptext34:
  3926                           	callstack 0
  3927  0009A0                     _CantaPartBaixa:
  3928                           	callstack 23
  3929                           
  3930                           ;incstack = 0
  3931                           ;CantaPartBaixa@c stored from wreg
  3932  0009A0  6E27               	movwf	CantaPartBaixa@c^0,c
  3933                           
  3934                           ;LcTLCD.c: 223:   (LATDbits.LATD3 = (c & 0x08 ? 1 : 0));
  3935  0009A2  A627               	btfss	CantaPartBaixa@c^0,3,c
  3936  0009A4  D003               	goto	u1340
  3937  0009A6  6A26               	clrf	??_CantaPartBaixa^0,c
  3938  0009A8  2A26               	incf	??_CantaPartBaixa^0,f,c
  3939  0009AA  D001               	goto	u1358
  3940  0009AC                     u1340:
  3941  0009AC  6A26               	clrf	??_CantaPartBaixa^0,c
  3942  0009AE                     u1358:
  3943  0009AE  4626               	rlncf	??_CantaPartBaixa^0,f,c
  3944  0009B0  D825               	call	PL40	;call to abstracted procedure
  3945  0009B2  0BF7               	andlw	-9
  3946  0009B4  1826               	xorwf	??_CantaPartBaixa^0,w,c
  3947  0009B6  6E8C               	movwf	140,c	;volatile
  3948                           
  3949                           ;LcTLCD.c: 224:   (LATDbits.LATD2 = (c & 0x04 ? 1 : 0));
  3950  0009B8  A427               	btfss	CantaPartBaixa@c^0,2,c
  3951  0009BA  D003               	goto	u1360
  3952  0009BC  6A26               	clrf	??_CantaPartBaixa^0,c
  3953  0009BE  2A26               	incf	??_CantaPartBaixa^0,f,c
  3954  0009C0  D001               	goto	u1378
  3955  0009C2                     u1360:
  3956  0009C2  6A26               	clrf	??_CantaPartBaixa^0,c
  3957  0009C4                     u1378:
  3958  0009C4  D81B               	call	PL40	;call to abstracted procedure
  3959  0009C6  0BFB               	andlw	-5
  3960  0009C8  1826               	xorwf	??_CantaPartBaixa^0,w,c
  3961  0009CA  6E8C               	movwf	140,c	;volatile
  3962                           
  3963                           ;LcTLCD.c: 225:   (LATDbits.LATD1 = (c & 0x02 ? 1 : 0));
  3964  0009CC  A227               	btfss	CantaPartBaixa@c^0,1,c
  3965  0009CE  D003               	goto	u1380
  3966  0009D0  6A26               	clrf	??_CantaPartBaixa^0,c
  3967  0009D2  2A26               	incf	??_CantaPartBaixa^0,f,c
  3968  0009D4  D001               	goto	u1398
  3969  0009D6                     u1380:
  3970  0009D6  6A26               	clrf	??_CantaPartBaixa^0,c
  3971  0009D8                     u1398:
  3972  0009D8  4626               	rlncf	??_CantaPartBaixa^0,f,c
  3973  0009DA  508C               	movf	140,w,c	;volatile
  3974  0009DC  1826               	xorwf	??_CantaPartBaixa^0,w,c
  3975  0009DE  0BFD               	andlw	-3
  3976  0009E0  1826               	xorwf	??_CantaPartBaixa^0,w,c
  3977  0009E2  6E8C               	movwf	140,c	;volatile
  3978                           
  3979                           ;LcTLCD.c: 226:   (LATDbits.LATD0 = (c & 0x01 ? 1 : 0));
  3980  0009E4  A027               	btfss	CantaPartBaixa@c^0,0,c
  3981  0009E6  D003               	goto	u1400
  3982  0009E8  6A26               	clrf	??_CantaPartBaixa^0,c
  3983  0009EA  2A26               	incf	??_CantaPartBaixa^0,f,c
  3984  0009EC  D001               	goto	u1418
  3985  0009EE                     u1400:
  3986  0009EE  6A26               	clrf	??_CantaPartBaixa^0,c
  3987  0009F0                     u1418:
  3988  0009F0  508C               	movf	140,w,c	;volatile
  3989  0009F2  1826               	xorwf	??_CantaPartBaixa^0,w,c
  3990  0009F4  0BFE               	andlw	-2
  3991  0009F6  1826               	xorwf	??_CantaPartBaixa^0,w,c
  3992  0009F8  6E8C               	movwf	140,c	;volatile
  3993  0009FA  0012               	return		;funcret
  3994  0009FC                     __end_of_CantaPartBaixa:
  3995                           	callstack 0
  3996  0009FC                     PL40:
  3997                           	callstack 23
  3998  0009FC  4626               	rlncf	??_CantaPartBaixa^0,f,c
  3999  0009FE  4626               	rlncf	??_CantaPartBaixa^0,f,c
  4000  000A00  508C               	movf	140,w,c	;volatile
  4001  000A02  1826               	xorwf	??_CantaPartBaixa^0,w,c
  4002  000A04  0012               	return	
  4003  000A06                     __end_ofPL40:
  4004                           	callstack 0
  4005                           
  4006 ;; *************** function _CantaPartAlta *****************
  4007 ;; Defined at:
  4008 ;;		line 215 in file "LcTLCD.c"
  4009 ;; Parameters:    Size  Location     Type
  4010 ;;  c               1    wreg     unsigned char 
  4011 ;; Auto vars:     Size  Location     Type
  4012 ;;  c               1    6[COMRAM] unsigned char 
  4013 ;; Return value:  Size  Location     Type
  4014 ;;                  1    wreg      void 
  4015 ;; Registers used:
  4016 ;;		wreg, status,2, status,0
  4017 ;; Tracked objects:
  4018 ;;		On entry : 0/0
  4019 ;;		On exit  : 0/0
  4020 ;;		Unchanged: 0/0
  4021 ;; Data sizes:     COMRAM   BANK0   BANK1
  4022 ;;      Params:         0       0       0
  4023 ;;      Locals:         1       0       0
  4024 ;;      Temps:          1       0       0
  4025 ;;      Totals:         2       0       0
  4026 ;;Total ram usage:        2 bytes
  4027 ;; Hardware stack levels used: 1
  4028 ;; Hardware stack levels required when called: 2
  4029 ;; This function calls:
  4030 ;;		Nothing
  4031 ;; This function is called by:
  4032 ;;		_CantaIR
  4033 ;;		_CantaData
  4034 ;; This function uses a non-reentrant model
  4035 ;;
  4036                           
  4037                           	psect	text35
  4038  000A06                     __ptext35:
  4039                           	callstack 0
  4040  000A06                     _CantaPartAlta:
  4041                           	callstack 23
  4042                           
  4043                           ;incstack = 0
  4044                           ;CantaPartAlta@c stored from wreg
  4045  000A06  6E27               	movwf	CantaPartAlta@c^0,c
  4046                           
  4047                           ;LcTLCD.c: 216:   (LATDbits.LATD3 = (c & 0x80 ? 1 : 0));
  4048  000A08  AE27               	btfss	CantaPartAlta@c^0,7,c
  4049  000A0A  D003               	goto	u1260
  4050  000A0C  6A26               	clrf	??_CantaPartAlta^0,c
  4051  000A0E  2A26               	incf	??_CantaPartAlta^0,f,c
  4052  000A10  D001               	goto	u1278
  4053  000A12                     u1260:
  4054  000A12  6A26               	clrf	??_CantaPartAlta^0,c
  4055  000A14                     u1278:
  4056  000A14  4626               	rlncf	??_CantaPartAlta^0,f,c
  4057  000A16  D825               	call	PL34	;call to abstracted procedure
  4058  000A18  0BF7               	andlw	-9
  4059  000A1A  1826               	xorwf	??_CantaPartAlta^0,w,c
  4060  000A1C  6E8C               	movwf	140,c	;volatile
  4061                           
  4062                           ;LcTLCD.c: 217:   (LATDbits.LATD2 = (c & 0x40 ? 1 : 0));
  4063  000A1E  AC27               	btfss	CantaPartAlta@c^0,6,c
  4064  000A20  D003               	goto	u1280
  4065  000A22  6A26               	clrf	??_CantaPartAlta^0,c
  4066  000A24  2A26               	incf	??_CantaPartAlta^0,f,c
  4067  000A26  D001               	goto	u1298
  4068  000A28                     u1280:
  4069  000A28  6A26               	clrf	??_CantaPartAlta^0,c
  4070  000A2A                     u1298:
  4071  000A2A  D81B               	call	PL34	;call to abstracted procedure
  4072  000A2C  0BFB               	andlw	-5
  4073  000A2E  1826               	xorwf	??_CantaPartAlta^0,w,c
  4074  000A30  6E8C               	movwf	140,c	;volatile
  4075                           
  4076                           ;LcTLCD.c: 218:   (LATDbits.LATD1 = (c & 0x20 ? 1 : 0));
  4077  000A32  AA27               	btfss	CantaPartAlta@c^0,5,c
  4078  000A34  D003               	goto	u1300
  4079  000A36  6A26               	clrf	??_CantaPartAlta^0,c
  4080  000A38  2A26               	incf	??_CantaPartAlta^0,f,c
  4081  000A3A  D001               	goto	u1318
  4082  000A3C                     u1300:
  4083  000A3C  6A26               	clrf	??_CantaPartAlta^0,c
  4084  000A3E                     u1318:
  4085  000A3E  4626               	rlncf	??_CantaPartAlta^0,f,c
  4086  000A40  508C               	movf	140,w,c	;volatile
  4087  000A42  1826               	xorwf	??_CantaPartAlta^0,w,c
  4088  000A44  0BFD               	andlw	-3
  4089  000A46  1826               	xorwf	??_CantaPartAlta^0,w,c
  4090  000A48  6E8C               	movwf	140,c	;volatile
  4091                           
  4092                           ;LcTLCD.c: 219:   (LATDbits.LATD0 = (c & 0x10 ? 1 : 0));
  4093  000A4A  A827               	btfss	CantaPartAlta@c^0,4,c
  4094  000A4C  D003               	goto	u1320
  4095  000A4E  6A26               	clrf	??_CantaPartAlta^0,c
  4096  000A50  2A26               	incf	??_CantaPartAlta^0,f,c
  4097  000A52  D001               	goto	u1338
  4098  000A54                     u1320:
  4099  000A54  6A26               	clrf	??_CantaPartAlta^0,c
  4100  000A56                     u1338:
  4101  000A56  508C               	movf	140,w,c	;volatile
  4102  000A58  1826               	xorwf	??_CantaPartAlta^0,w,c
  4103  000A5A  0BFE               	andlw	-2
  4104  000A5C  1826               	xorwf	??_CantaPartAlta^0,w,c
  4105  000A5E  6E8C               	movwf	140,c	;volatile
  4106  000A60  0012               	return		;funcret
  4107  000A62                     __end_of_CantaPartAlta:
  4108                           	callstack 0
  4109  000A62                     PL34:
  4110                           	callstack 23
  4111  000A62  4626               	rlncf	??_CantaPartAlta^0,f,c
  4112  000A64  4626               	rlncf	??_CantaPartAlta^0,f,c
  4113  000A66  508C               	movf	140,w,c	;volatile
  4114  000A68  1826               	xorwf	??_CantaPartAlta^0,w,c
  4115  000A6A  0012               	return	
  4116  000A6C                     __end_ofPL34:
  4117                           	callstack 0
  4118                           
  4119 ;; *************** function _KeypadMotor *****************
  4120 ;; Defined at:
  4121 ;;		line 46 in file "keypad.c"
  4122 ;; Parameters:    Size  Location     Type
  4123 ;;		None
  4124 ;; Auto vars:     Size  Location     Type
  4125 ;;		None
  4126 ;; Return value:  Size  Location     Type
  4127 ;;                  1    wreg      void 
  4128 ;; Registers used:
  4129 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4130 ;; Tracked objects:
  4131 ;;		On entry : 0/0
  4132 ;;		On exit  : 0/0
  4133 ;;		Unchanged: 0/0
  4134 ;; Data sizes:     COMRAM   BANK0   BANK1
  4135 ;;      Params:         0       0       0
  4136 ;;      Locals:         0       0       0
  4137 ;;      Temps:          2       0       0
  4138 ;;      Totals:         2       0       0
  4139 ;;Total ram usage:        2 bytes
  4140 ;; Hardware stack levels used: 1
  4141 ;; Hardware stack levels required when called: 3
  4142 ;; This function calls:
  4143 ;;		_TiGetTics
  4144 ;;		_TiResetTics
  4145 ;; This function is called by:
  4146 ;;		_main
  4147 ;; This function uses a non-reentrant model
  4148 ;;
  4149                           
  4150                           	psect	text36
  4151  0003BE                     __ptext36:
  4152                           	callstack 0
  4153  0003BE                     _KeypadMotor:
  4154                           	callstack 27
  4155                           
  4156                           ;keypad.c: 48:     switch (state){
  4157                           
  4158                           ;incstack = 0
  4159  0003BE  D070               	goto	l2621
  4160  0003C0                     l141:
  4161                           
  4162                           ;keypad.c: 51:             if (!!(PORTBbits.RB0 && PORTBbits.RB1 && PORTBbits.RB2)){
  4163  0003C0  B081               	btfsc	129,0,c	;volatile
  4164  0003C2  A281               	btfss	129,1,c	;volatile
  4165  0003C4  D00A               	goto	l2549
  4166  0003C6  A481               	btfss	129,2,c	;volatile
  4167  0003C8  D008               	goto	l2549
  4168                           
  4169                           ;keypad.c: 52:                 LATBbits.LATB3=0;
  4170  0003CA  968A               	bcf	138,3,c	;volatile
  4171                           
  4172                           ;keypad.c: 53:                 LATBbits.LATB4=1;
  4173  0003CC  888A               	bsf	138,4,c	;volatile
  4174                           
  4175                           ;keypad.c: 54:                 LATBbits.LATB5=1;
  4176  0003CE  8A8A               	bsf	138,5,c	;volatile
  4177                           
  4178                           ;keypad.c: 55:                 LATBbits.LATB6=1;
  4179  0003D0  8C8A               	bsf	138,6,c	;volatile
  4180                           
  4181                           ;keypad.c: 56:                 state=1;
  4182  0003D2  0E01               	movlw	1
  4183  0003D4  6E17               	movwf	_state^0,c
  4184                           
  4185                           ;keypad.c: 57:                 row=0;
  4186  0003D6  6A1F               	clrf	_row^0,c
  4187                           
  4188                           ;keypad.c: 58:             }else{
  4189  0003D8  0012               	return	
  4190  0003DA                     l2549:
  4191                           
  4192                           ;keypad.c: 59:                 state=4;
  4193  0003DA  0E04               	movlw	4
  4194  0003DC  6E17               	movwf	_state^0,c
  4195  0003DE  0C04               	retlw	4
  4196  0003E0                     l145:
  4197                           
  4198                           ;keypad.c: 63:            if (!!(PORTBbits.RB0 && PORTBbits.RB1 && PORTBbits.RB2)){
  4199  0003E0  B081               	btfsc	129,0,c	;volatile
  4200  0003E2  A281               	btfss	129,1,c	;volatile
  4201  0003E4  D7FA               	goto	l2549
  4202  0003E6  A481               	btfss	129,2,c	;volatile
  4203  0003E8  D7F8               	goto	l2549
  4204                           
  4205                           ;keypad.c: 64:                 LATBbits.LATB3=1;
  4206  0003EA  868A               	bsf	138,3,c	;volatile
  4207                           
  4208                           ;keypad.c: 65:                 LATBbits.LATB4=0;
  4209  0003EC  988A               	bcf	138,4,c	;volatile
  4210                           
  4211                           ;keypad.c: 66:                 LATBbits.LATB5=1;
  4212  0003EE  8A8A               	bsf	138,5,c	;volatile
  4213                           
  4214                           ;keypad.c: 67:                 LATBbits.LATB6=1;
  4215  0003F0  8C8A               	bsf	138,6,c	;volatile
  4216                           
  4217                           ;keypad.c: 68:                 state=2;
  4218  0003F2  0E02               	movlw	2
  4219  0003F4  6E17               	movwf	_state^0,c
  4220                           
  4221                           ;keypad.c: 69:                 row=1;
  4222  0003F6  0E01               	movlw	1
  4223  0003F8  6E1F               	movwf	_row^0,c
  4224                           
  4225                           ;keypad.c: 71:             }else{
  4226  0003FA  0C01               	retlw	1
  4227  0003FC                     l148:
  4228                           
  4229                           ;keypad.c: 76:             if (!!(PORTBbits.RB0 && PORTBbits.RB1 && PORTBbits.RB2)){
  4230  0003FC  B081               	btfsc	129,0,c	;volatile
  4231  0003FE  A281               	btfss	129,1,c	;volatile
  4232  000400  D7EC               	goto	l2549
  4233  000402  A481               	btfss	129,2,c	;volatile
  4234  000404  D7EA               	goto	l2549
  4235                           
  4236                           ;keypad.c: 77:                 LATBbits.LATB3=1;
  4237  000406  868A               	bsf	138,3,c	;volatile
  4238                           
  4239                           ;keypad.c: 78:                 LATBbits.LATB4=1;
  4240  000408  888A               	bsf	138,4,c	;volatile
  4241                           
  4242                           ;keypad.c: 79:                 LATBbits.LATB5=0;
  4243  00040A  9A8A               	bcf	138,5,c	;volatile
  4244                           
  4245                           ;keypad.c: 80:                 LATBbits.LATB6=1;
  4246  00040C  8C8A               	bsf	138,6,c	;volatile
  4247                           
  4248                           ;keypad.c: 81:                 state=3;
  4249  00040E  0E03               	movlw	3
  4250  000410  6E17               	movwf	_state^0,c
  4251                           
  4252                           ;keypad.c: 82:                 row=2;
  4253  000412  0E02               	movlw	2
  4254  000414  6E1F               	movwf	_row^0,c
  4255                           
  4256                           ;keypad.c: 83:             }else{
  4257  000416  0C02               	retlw	2
  4258  000418                     l151:
  4259                           
  4260                           ;keypad.c: 88:             if (!!(PORTBbits.RB0 && PORTBbits.RB1 && PORTBbits.RB2)){
  4261  000418  B081               	btfsc	129,0,c	;volatile
  4262  00041A  A281               	btfss	129,1,c	;volatile
  4263  00041C  D7DE               	goto	l2549
  4264  00041E  A481               	btfss	129,2,c	;volatile
  4265  000420  D7DC               	goto	l2549
  4266                           
  4267                           ;keypad.c: 89:                 LATBbits.LATB3=1;
  4268  000422  868A               	bsf	138,3,c	;volatile
  4269                           
  4270                           ;keypad.c: 90:                 LATBbits.LATB4=1;
  4271  000424  888A               	bsf	138,4,c	;volatile
  4272                           
  4273                           ;keypad.c: 91:                 LATBbits.LATB5=1;
  4274  000426  8A8A               	bsf	138,5,c	;volatile
  4275                           
  4276                           ;keypad.c: 92:                 LATBbits.LATB6=0;
  4277  000428  9C8A               	bcf	138,6,c	;volatile
  4278                           
  4279                           ;keypad.c: 93:                 row=3;
  4280  00042A  0E03               	movlw	3
  4281  00042C  6E1F               	movwf	_row^0,c
  4282  00042E                     l2579:
  4283                           
  4284                           ;keypad.c: 94:                 state=0;
  4285  00042E  6A17               	clrf	_state^0,c
  4286                           
  4287                           ;keypad.c: 95:             }else{
  4288  000430  0012               	return	
  4289  000432                     l2583:
  4290                           
  4291                           ;keypad.c: 100:             state=5;
  4292  000432  0E05               	movlw	5
  4293  000434  6E17               	movwf	_state^0,c
  4294                           
  4295                           ;keypad.c: 101:             TiResetTics(timerBounces);
  4296  000436  501E               	movf	_timerBounces^0,w,c
  4297  000438  EFBE  F006         	goto	_TiResetTics
  4298  00043C                     l2587:
  4299                           
  4300                           ;keypad.c: 104:             if (TiGetTics(timerBounces) >= 25){
  4301  00043C  501E               	movf	_timerBounces^0,w,c
  4302  00043E  EC4E  F006         	call	_TiGetTics
  4303  000442  BE27               	btfsc	(?_TiGetTics+1)^0,7,c
  4304  000444  0012               	return	
  4305  000446  5027               	movf	(?_TiGetTics+1)^0,w,c
  4306  000448  E104               	bnz	u2010
  4307  00044A  0E19               	movlw	25
  4308  00044C  5C26               	subwf	?_TiGetTics^0,w,c
  4309  00044E  A0D8               	btfss	status,0,c
  4310  000450  0012               	return	
  4311  000452                     u2010:
  4312                           
  4313                           ;keypad.c: 105:                 if (!!(PORTBbits.RB0 && PORTBbits.RB1 && PORTBbits.RB2))
      +                          {
  4314  000452  B081               	btfsc	129,0,c	;volatile
  4315  000454  A281               	btfss	129,1,c	;volatile
  4316  000456  D002               	goto	l2597
  4317  000458  B481               	btfsc	129,2,c	;volatile
  4318  00045A  D7E9               	goto	l2579
  4319  00045C                     l2597:
  4320                           
  4321                           ;keypad.c: 108:                     pressed = 1;
  4322  00045C  0E01               	movlw	1
  4323  00045E  6E1A               	movwf	_pressed^0,c
  4324                           
  4325                           ;keypad.c: 109:                     state = 6;
  4326  000460  D036               	goto	PL42	;call to abstracted procedure
  4327  000462                     l159:
  4328                           
  4329                           ;keypad.c: 114:             if (!!(PORTBbits.RB0 && PORTBbits.RB1 && PORTBbits.RB2)){
  4330  000462  B081               	btfsc	129,0,c	;volatile
  4331  000464  A281               	btfss	129,1,c	;volatile
  4332  000466  0012               	return	
  4333  000468  A481               	btfss	129,2,c	;volatile
  4334  00046A  0012               	return	
  4335                           
  4336                           ;keypad.c: 115:                 TiResetTics(timerBounces);
  4337  00046C  501E               	movf	_timerBounces^0,w,c
  4338  00046E  ECBE  F006         	call	_TiResetTics
  4339                           
  4340                           ;keypad.c: 116:                 state = 7;
  4341  000472  0E07               	movlw	7
  4342  000474  6E17               	movwf	_state^0,c
  4343  000476  0C07               	retlw	7
  4344  000478                     l2607:
  4345                           
  4346                           ;keypad.c: 120:             if (TiGetTics(timerBounces) >= 25){
  4347  000478  501E               	movf	_timerBounces^0,w,c
  4348  00047A  EC4E  F006         	call	_TiGetTics
  4349  00047E  BE27               	btfsc	(?_TiGetTics+1)^0,7,c
  4350  000480  0012               	return	
  4351  000482  5027               	movf	(?_TiGetTics+1)^0,w,c
  4352  000484  E104               	bnz	u2080
  4353  000486  0E19               	movlw	25
  4354  000488  5C26               	subwf	?_TiGetTics^0,w,c
  4355  00048A  A0D8               	btfss	status,0,c
  4356  00048C  0012               	return	
  4357  00048E                     u2080:
  4358                           
  4359                           ;keypad.c: 121:                 if (!!(PORTBbits.RB0 && PORTBbits.RB1 && PORTBbits.RB2))
      +                          {
  4360  00048E  B081               	btfsc	129,0,c	;volatile
  4361  000490  A281               	btfss	129,1,c	;volatile
  4362  000492  D01D               	goto	PL42
  4363  000494  A481               	btfss	129,2,c	;volatile
  4364  000496  D01B               	goto	PL42
  4365                           
  4366                           ;keypad.c: 122:                     pressed = 0;
  4367  000498  6A1A               	clrf	_pressed^0,c
  4368                           
  4369                           ;keypad.c: 123:                     state = 0;
  4370  00049A  6A17               	clrf	_state^0,c
  4371                           
  4372                           ;keypad.c: 124:                 } else {
  4373  00049C  0012               	return	
  4374  00049E                     l2617:
  4375                           
  4376                           ;keypad.c: 125:                     state = 6;
  4377  00049E  D017               	goto	PL42	;call to abstracted procedure
  4378  0004A0                     l2621:
  4379  0004A0  5017               	movf	_state^0,w,c
  4380  0004A2  6E2D               	movwf	??_KeypadMotor^0,c
  4381  0004A4  6A2E               	clrf	(??_KeypadMotor+1)^0,c
  4382                           
  4383                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4384                           ; Switch size 1, requested type "space"
  4385                           ; Number of cases is 1, Range of values is 0 to 0
  4386                           ; switch strategies available:
  4387                           ; Name         Instructions Cycles
  4388                           ; simple_byte            4     3 (average)
  4389                           ;	Chosen strategy is simple_byte
  4390  0004A6  502E               	movf	(??_KeypadMotor+1)^0,w,c
  4391  0004A8  A4D8               	btfss	status,2,c
  4392  0004AA  0012               	return	
  4393                           
  4394                           ; Switch size 1, requested type "space"
  4395                           ; Number of cases is 8, Range of values is 0 to 7
  4396                           ; switch strategies available:
  4397                           ; Name         Instructions Cycles
  4398                           ; simple_byte           25    13 (average)
  4399                           ;	Chosen strategy is simple_byte
  4400  0004AC  502D               	movf	??_KeypadMotor^0,w,c
  4401  0004AE  E088               	bz	l141
  4402  0004B0  0A01               	xorlw	1	; case 1
  4403  0004B2  E096               	bz	l145
  4404  0004B4  0A03               	xorlw	3	; case 2
  4405  0004B6  E0A2               	bz	l148
  4406  0004B8  0A01               	xorlw	1	; case 3
  4407  0004BA  E0AE               	bz	l151
  4408  0004BC  0A07               	xorlw	7	; case 4
  4409  0004BE  E0B9               	bz	l2583
  4410  0004C0  0A01               	xorlw	1	; case 5
  4411  0004C2  E0BC               	bz	l2587
  4412  0004C4  0A03               	xorlw	3	; case 6
  4413  0004C6  E0CD               	bz	l159
  4414  0004C8  0A01               	xorlw	1	; case 7
  4415  0004CA  E0D6               	bz	l2607
  4416  0004CC  0012               	return		;funcret
  4417  0004CE                     __end_of_KeypadMotor:
  4418                           	callstack 0
  4419  0004CE                     PL42:
  4420                           	callstack 27
  4421  0004CE  0E06               	movlw	6
  4422  0004D0  6E17               	movwf	_state^0,c
  4423  0004D2  0C06               	retlw	6
  4424  0004D4                     __end_ofPL42:
  4425                           	callstack 0
  4426                           
  4427 ;; *************** function _TiResetTics *****************
  4428 ;; Defined at:
  4429 ;;		line 57 in file "TTimer.c"
  4430 ;; Parameters:    Size  Location     Type
  4431 ;;  Handle          1    wreg     unsigned char 
  4432 ;; Auto vars:     Size  Location     Type
  4433 ;;  Handle          1    5[COMRAM] unsigned char 
  4434 ;; Return value:  Size  Location     Type
  4435 ;;                  1    wreg      void 
  4436 ;; Registers used:
  4437 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  4438 ;; Tracked objects:
  4439 ;;		On entry : 0/0
  4440 ;;		On exit  : 0/0
  4441 ;;		Unchanged: 0/0
  4442 ;; Data sizes:     COMRAM   BANK0   BANK1
  4443 ;;      Params:         0       0       0
  4444 ;;      Locals:         1       0       0
  4445 ;;      Temps:          0       0       0
  4446 ;;      Totals:         1       0       0
  4447 ;;Total ram usage:        1 bytes
  4448 ;; Hardware stack levels used: 1
  4449 ;; Hardware stack levels required when called: 2
  4450 ;; This function calls:
  4451 ;;		Nothing
  4452 ;; This function is called by:
  4453 ;;		_KeypadMotor
  4454 ;;		_SMSMotor
  4455 ;;		_KeSetMode
  4456 ;;		_Espera
  4457 ;;		_WaitForBusy
  4458 ;;		_audioMotor
  4459 ;;		_menuMotor
  4460 ;; This function uses a non-reentrant model
  4461 ;;
  4462                           
  4463                           	psect	text37
  4464  000D7C                     __ptext37:
  4465                           	callstack 0
  4466  000D7C                     _TiResetTics:
  4467                           	callstack 24
  4468                           
  4469                           ;incstack = 0
  4470                           ;TiResetTics@Handle stored from wreg
  4471  000D7C  6E26               	movwf	TiResetTics@Handle^0,c
  4472                           
  4473                           ;TTimer.c: 61:     s_Timers[Handle].h_initialTics=h_Tics;
  4474  000D7E  5026               	movf	TiResetTics@Handle^0,w,c
  4475  000D80  D805               	call	PL18	;call to abstracted procedure
  4476  000D82  C003  FFDE         	movff	_h_Tics,postinc2
  4477  000D86  C004  FFDD         	movff	_h_Tics+1,postdec2
  4478  000D8A  0012               	return		;funcret
  4479  000D8C                     __end_of_TiResetTics:
  4480                           	callstack 0
  4481  000D8C                     PL18:
  4482                           	callstack 23
  4483  000D8C  0D03               	mullw	3
  4484  000D8E  50F3               	movf	243,w,c
  4485  000D90  0F80               	addlw	low _s_Timers
  4486  000D92  6ED9               	movwf	fsr2l,c
  4487  000D94  6ADA               	clrf	fsr2h,c
  4488  000D96  0012               	return	
  4489  000D98                     __end_ofPL18:
  4490                           	callstack 0
  4491                           
  4492 ;; *************** function _TiGetTics *****************
  4493 ;; Defined at:
  4494 ;;		line 63 in file "TTimer.c"
  4495 ;; Parameters:    Size  Location     Type
  4496 ;;  Handle          1    wreg     unsigned char 
  4497 ;; Auto vars:     Size  Location     Type
  4498 ;;  Handle          1    9[COMRAM] unsigned char 
  4499 ;;  actual          2   10[COMRAM] volatile unsigned int 
  4500 ;; Return value:  Size  Location     Type
  4501 ;;                  2    5[COMRAM] int 
  4502 ;; Registers used:
  4503 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  4504 ;; Tracked objects:
  4505 ;;		On entry : 0/0
  4506 ;;		On exit  : 0/0
  4507 ;;		Unchanged: 0/0
  4508 ;; Data sizes:     COMRAM   BANK0   BANK1
  4509 ;;      Params:         2       0       0
  4510 ;;      Locals:         3       0       0
  4511 ;;      Temps:          2       0       0
  4512 ;;      Totals:         7       0       0
  4513 ;;Total ram usage:        7 bytes
  4514 ;; Hardware stack levels used: 1
  4515 ;; Hardware stack levels required when called: 2
  4516 ;; This function calls:
  4517 ;;		Nothing
  4518 ;; This function is called by:
  4519 ;;		_KeypadMotor
  4520 ;;		_SMSMotor
  4521 ;;		_Espera
  4522 ;;		_WaitForBusy
  4523 ;;		_audioMotor
  4524 ;;		_menuMotor
  4525 ;; This function uses a non-reentrant model
  4526 ;;
  4527                           
  4528                           	psect	text38
  4529  000C9C                     __ptext38:
  4530                           	callstack 0
  4531  000C9C                     _TiGetTics:
  4532                           	callstack 24
  4533                           
  4534                           ;incstack = 0
  4535                           ;TiGetTics@Handle stored from wreg
  4536  000C9C  6E2A               	movwf	TiGetTics@Handle^0,c
  4537                           
  4538                           ;TTimer.c: 67:     volatile unsigned int actual;;TTimer.c: 68:     actual=h_Tics;
  4539  000C9E  C003  F02B         	movff	_h_Tics,TiGetTics@actual	;volatile
  4540  000CA2  C004  F02C         	movff	_h_Tics+1,TiGetTics@actual+1	;volatile
  4541                           
  4542                           ;TTimer.c: 69:     return (actual-(s_Timers[Handle].h_initialTics));
  4543  000CA6  502A               	movf	TiGetTics@Handle^0,w,c
  4544  000CA8  ECC6  F006         	call	PL18	;call to abstracted procedure
  4545  000CAC  CFDE F028          	movff	postinc2,??_TiGetTics
  4546  000CB0  CFDD F029          	movff	postdec2,??_TiGetTics+1
  4547  000CB4  5028               	movf	??_TiGetTics^0,w,c
  4548  000CB6  5C2B               	subwf	TiGetTics@actual^0,w,c	;volatile
  4549  000CB8  6E26               	movwf	?_TiGetTics^0,c
  4550  000CBA  5029               	movf	(??_TiGetTics+1)^0,w,c
  4551  000CBC  582C               	subwfb	(TiGetTics@actual+1)^0,w,c	;volatile
  4552  000CBE  6E27               	movwf	(?_TiGetTics+1)^0,c
  4553  000CC0  0012               	return		;funcret
  4554  000CC2                     __end_of_TiGetTics:
  4555                           	callstack 0
  4556                           
  4557 ;; *************** function _RSI_High *****************
  4558 ;; Defined at:
  4559 ;;		line 30 in file "main.c"
  4560 ;; Parameters:    Size  Location     Type
  4561 ;;		None
  4562 ;; Auto vars:     Size  Location     Type
  4563 ;;		None
  4564 ;; Return value:  Size  Location     Type
  4565 ;;                  1    wreg      void 
  4566 ;; Registers used:
  4567 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4568 ;; Tracked objects:
  4569 ;;		On entry : 0/0
  4570 ;;		On exit  : 0/0
  4571 ;;		Unchanged: 0/0
  4572 ;; Data sizes:     COMRAM   BANK0   BANK1
  4573 ;;      Params:         0       0       0
  4574 ;;      Locals:         0       0       0
  4575 ;;      Temps:          4       0       0
  4576 ;;      Totals:         4       0       0
  4577 ;;Total ram usage:        4 bytes
  4578 ;; Hardware stack levels used: 1
  4579 ;; Hardware stack levels required when called: 1
  4580 ;; This function calls:
  4581 ;;		__TiRSITimer
  4582 ;; This function is called by:
  4583 ;;		Interrupt level 2
  4584 ;; This function uses a non-reentrant model
  4585 ;;
  4586                           
  4587                           	psect	intcode
  4588  000008                     __pintcode:
  4589                           	callstack 0
  4590  000008                     _RSI_High:
  4591                           	callstack 23
  4592                           
  4593                           ;incstack = 0
  4594  000008  823E               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  4595  00000A  CFD9 F022          	movff	fsr2l,??_RSI_High
  4596  00000E  CFDA F023          	movff	fsr2h,??_RSI_High+1
  4597  000012  CFF3 F024          	movff	prodl,??_RSI_High+2
  4598  000016  CFF4 F025          	movff	prodh,??_RSI_High+3
  4599                           
  4600                           ;main.c: 32:         KeypadMotor();
  4601  00001A  EC8D  F005         	call	__TiRSITimer	;wreg free
  4602  00001E  C025  FFF4         	movff	??_RSI_High+3,prodh
  4603  000022  C024  FFF3         	movff	??_RSI_High+2,prodl
  4604  000026  C023  FFDA         	movff	??_RSI_High+1,fsr2h
  4605  00002A  C022  FFD9         	movff	??_RSI_High,fsr2l
  4606  00002E  923E               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  4607  000030  0011               	retfie		f
  4608  000032                     __end_of_RSI_High:
  4609                           	callstack 0
  4610                           
  4611 ;; *************** function __TiRSITimer *****************
  4612 ;; Defined at:
  4613 ;;		line 37 in file "TTimer.c"
  4614 ;; Parameters:    Size  Location     Type
  4615 ;;		None
  4616 ;; Auto vars:     Size  Location     Type
  4617 ;;		None
  4618 ;; Return value:  Size  Location     Type
  4619 ;;                  1    wreg      void 
  4620 ;; Registers used:
  4621 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  4622 ;; Tracked objects:
  4623 ;;		On entry : 0/0
  4624 ;;		On exit  : 0/0
  4625 ;;		Unchanged: 0/0
  4626 ;; Data sizes:     COMRAM   BANK0   BANK1
  4627 ;;      Params:         0       0       0
  4628 ;;      Locals:         0       0       0
  4629 ;;      Temps:          1       0       0
  4630 ;;      Totals:         1       0       0
  4631 ;;Total ram usage:        1 bytes
  4632 ;; Hardware stack levels used: 1
  4633 ;; This function calls:
  4634 ;;		Nothing
  4635 ;; This function is called by:
  4636 ;;		_RSI_High
  4637 ;; This function uses a non-reentrant model
  4638 ;;
  4639                           
  4640                           	psect	text40
  4641  000B1A                     __ptext40:
  4642                           	callstack 0
  4643  000B1A                     __TiRSITimer:
  4644                           	callstack 0
  4645                           
  4646                           ;TTimer.c: 40:     TMR0H = 0xD8;
  4647                           
  4648                           ;incstack = 0
  4649                           
  4650                           ;TTimer.c: 41:     TMR0L = 0xF0;
  4651  000B1A  D81E               	call	PL36	;call to abstracted procedure
  4652                           
  4653                           ;TTimer.c: 43:     INTCONbits.TMR0IF = 0;
  4654  000B1C  94F2               	bcf	242,2,c	;volatile
  4655                           
  4656                           ;TTimer.c: 44:     h_Tics++;
  4657  000B1E  4A03               	infsnz	_h_Tics^0,f,c
  4658  000B20  2A04               	incf	(_h_Tics+1)^0,f,c
  4659                           
  4660                           ;TTimer.c: 46:     if (h_Tics>=30000) {
  4661  000B22  0E30               	movlw	48
  4662  000B24  5C03               	subwf	_h_Tics^0,w,c
  4663  000B26  0E75               	movlw	117
  4664  000B28  5804               	subwfb	(_h_Tics+1)^0,w,c
  4665  000B2A  A0D8               	btfss	status,0,c
  4666  000B2C  0012               	return	
  4667                           
  4668                           ;TTimer.c: 48:         for (counter=0;counter<25;counter++){
  4669  000B2E  6A20               	clrf	_counter^0,c
  4670  000B30                     i2l2353:
  4671  000B30  0E18               	movlw	24
  4672  000B32  6420               	cpfsgt	_counter^0,c
  4673  000B34  D001               	goto	i2l2357
  4674  000B36  D00D               	goto	i2l74
  4675  000B38                     i2l2357:
  4676                           
  4677                           ;TTimer.c: 49:             if (s_Timers[counter].b_busy==1){
  4678  000B38  EC33  F006         	call	PL8	;call to abstracted procedure
  4679  000B3C  04DE               	decf	postinc2,w,c
  4680  000B3E  E107               	bnz	i2l2361
  4681                           
  4682                           ;TTimer.c: 50:                 s_Timers[counter].h_initialTics -= h_Tics;
  4683  000B40  5020               	movf	_counter^0,w,c
  4684  000B42  ECC6  F006         	call	PL18	;call to abstracted procedure
  4685  000B46  5003               	movf	_h_Tics^0,w,c
  4686  000B48  5EDE               	subwf	postinc2,f,c
  4687  000B4A  5004               	movf	(_h_Tics+1)^0,w,c
  4688  000B4C  5ADD               	subwfb	postdec2,f,c
  4689  000B4E                     i2l2361:
  4690                           
  4691                           ;TTimer.c: 52:         }
  4692  000B4E  2A20               	incf	_counter^0,f,c
  4693  000B50  D7EF               	goto	i2l2353
  4694  000B52                     i2l74:
  4695                           
  4696                           ;TTimer.c: 53:         h_Tics=0;
  4697  000B52  6A03               	clrf	_h_Tics^0,c
  4698  000B54  6A04               	clrf	(_h_Tics+1)^0,c
  4699  000B56  0012               	return		;funcret
  4700  000B58                     __end_of__TiRSITimer:
  4701                           	callstack 0
  4702  000B58                     PL36:
  4703                           	callstack 28
  4704  000B58  0ED8               	movlw	216
  4705  000B5A  6ED7               	movwf	215,c	;volatile
  4706  000B5C  0EF0               	movlw	240
  4707  000B5E  6ED6               	movwf	214,c	;volatile
  4708  000B60  0CF0               	retlw	240
  4709  000B62                     __end_ofPL36:
  4710                           	callstack 0
  4711                           
  4712                           	psect	rparam
  4713  0000                     
  4714                           	psect	temp
  4715  00003E                     btemp:
  4716                           	callstack 0
  4717  00003E                     	ds	1
  4718  0000                     int$flags	set	btemp
  4719  0000                     wtemp8	set	btemp+1
  4720  0000                     ttemp5	set	btemp+1
  4721  0000                     ttemp6	set	btemp+4
  4722  0000                     ttemp7	set	btemp+8
  4723                           
  4724                           	psect	idloc
  4725                           
  4726                           ;Config register IDLOC0 @ 0x200000
  4727                           ;	unspecified, using default values
  4728  200000                     	org	2097152
  4729  200000  FF                 	db	255
  4730                           
  4731                           ;Config register IDLOC1 @ 0x200001
  4732                           ;	unspecified, using default values
  4733  200001                     	org	2097153
  4734  200001  FF                 	db	255
  4735                           
  4736                           ;Config register IDLOC2 @ 0x200002
  4737                           ;	unspecified, using default values
  4738  200002                     	org	2097154
  4739  200002  FF                 	db	255
  4740                           
  4741                           ;Config register IDLOC3 @ 0x200003
  4742                           ;	unspecified, using default values
  4743  200003                     	org	2097155
  4744  200003  FF                 	db	255
  4745                           
  4746                           ;Config register IDLOC4 @ 0x200004
  4747                           ;	unspecified, using default values
  4748  200004                     	org	2097156
  4749  200004  FF                 	db	255
  4750                           
  4751                           ;Config register IDLOC5 @ 0x200005
  4752                           ;	unspecified, using default values
  4753  200005                     	org	2097157
  4754  200005  FF                 	db	255
  4755                           
  4756                           ;Config register IDLOC6 @ 0x200006
  4757                           ;	unspecified, using default values
  4758  200006                     	org	2097158
  4759  200006  FF                 	db	255
  4760                           
  4761                           ;Config register IDLOC7 @ 0x200007
  4762                           ;	unspecified, using default values
  4763  200007                     	org	2097159
  4764  200007  FF                 	db	255
  4765                           
  4766                           	psect	config
  4767                           
  4768                           ; Padding undefined space
  4769  300000                     	org	3145728
  4770  300000  FF                 	db	255
  4771                           
  4772                           ;Config register CONFIG1H @ 0x300001
  4773                           ;	Oscillator
  4774                           ;	OSC = HSPLL, HS oscillator, PLL enabled (Clock Frequency = 4 x FOSC1)
  4775                           ;	Fail-Safe Clock Monitor Enable bit
  4776                           ;	FCMEN = 0x0, unprogrammed default
  4777                           ;	Internal/External Oscillator Switchover bit
  4778                           ;	IESO = 0x0, unprogrammed default
  4779  300001                     	org	3145729
  4780  300001  06                 	db	6
  4781                           
  4782                           ;Config register CONFIG2L @ 0x300002
  4783                           ;	Power-up Timer Enable bit
  4784                           ;	PWRT = OFF, PWRT disabled
  4785                           ;	Brown-out Reset Enable bits
  4786                           ;	BOR = OFF, Brown-out Reset disabled in hardware and software
  4787                           ;	Brown-out Reset Voltage bits
  4788                           ;	BORV = 0x3, unprogrammed default
  4789  300002                     	org	3145730
  4790  300002  19                 	db	25
  4791                           
  4792                           ;Config register CONFIG2H @ 0x300003
  4793                           ;	Watchdog Timer Enable bit
  4794                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
  4795                           ;	Watchdog Timer Postscale Select bits
  4796                           ;	WDTPS = 0xF, unprogrammed default
  4797  300003                     	org	3145731
  4798  300003  1E                 	db	30
  4799                           
  4800                           ; Padding undefined space
  4801  300004                     	org	3145732
  4802  300004  FF                 	db	255
  4803                           
  4804                           ;Config register CONFIG3H @ 0x300005
  4805                           ;	CCP2 MUX bit
  4806                           ;	CCP2MX = 0x1, unprogrammed default
  4807                           ;	PORTB A/D Enable bit
  4808                           ;	PBADEN = DIG, PORTB<4:0> pins are configured as digital I/O on Reset
  4809                           ;	Low-Power Timer1 Oscillator Enable bit
  4810                           ;	LPT1OSC = 0x0, unprogrammed default
  4811                           ;	MCLR Pin Enable bit
  4812                           ;	MCLRE = OFF, RE3 input pin enabled; MCLR disabled
  4813  300005                     	org	3145733
  4814  300005  01                 	db	1
  4815                           
  4816                           ;Config register CONFIG4L @ 0x300006
  4817                           ;	Stack Full/Underflow Reset Enable bit
  4818                           ;	STVREN = 0x1, unprogrammed default
  4819                           ;	Single-Supply ICSP Enable bit
  4820                           ;	LVP = OFF, Single-Supply ICSP disabled
  4821                           ;	Boot Block Size Select bits
  4822                           ;	BBSIZ = 0x0, unprogrammed default
  4823                           ;	Extended Instruction Set Enable bit
  4824                           ;	XINST = 0x0, unprogrammed default
  4825                           ;	Background Debugger Enable bit
  4826                           ;	DEBUG = OFF, Background debugger disabled, RB6 and RB7 configured as general purpose I
      +                          /O pins
  4827  300006                     	org	3145734
  4828  300006  81                 	db	129
  4829                           
  4830                           ; Padding undefined space
  4831  300007                     	org	3145735
  4832  300007  FF                 	db	255
  4833                           
  4834                           ;Config register CONFIG5L @ 0x300008
  4835                           ;	unspecified, using default values
  4836                           ;	Code Protection bit
  4837                           ;	CP0 = 0x1, unprogrammed default
  4838                           ;	Code Protection bit
  4839                           ;	CP1 = 0x1, unprogrammed default
  4840  300008                     	org	3145736
  4841  300008  03                 	db	3
  4842                           
  4843                           ;Config register CONFIG5H @ 0x300009
  4844                           ;	unspecified, using default values
  4845                           ;	Boot Block Code Protection bitProtect Boot
  4846                           ;	CPB = 0x1, unprogrammed default
  4847                           ;	Data EEPROM Code Protection bit
  4848                           ;	CPD = 0x1, unprogrammed default
  4849  300009                     	org	3145737
  4850  300009  C0                 	db	192
  4851                           
  4852                           ;Config register CONFIG6L @ 0x30000A
  4853                           ;	unspecified, using default values
  4854                           ;	Write Protection bit
  4855                           ;	WRT0 = 0x1, unprogrammed default
  4856                           ;	Write Protection bit
  4857                           ;	WRT1 = 0x1, unprogrammed default
  4858  30000A                     	org	3145738
  4859  30000A  03                 	db	3
  4860                           
  4861                           ;Config register CONFIG6H @ 0x30000B
  4862                           ;	unspecified, using default values
  4863                           ;	Configuration Register Write Protection bit
  4864                           ;	WRTC = 0x1, unprogrammed default
  4865                           ;	Boot Block Write Protection bit
  4866                           ;	WRTB = 0x1, unprogrammed default
  4867                           ;	Data EEPROM Write Protection bit
  4868                           ;	WRTD = 0x1, unprogrammed default
  4869  30000B                     	org	3145739
  4870  30000B  E0                 	db	224
  4871                           
  4872                           ;Config register CONFIG7L @ 0x30000C
  4873                           ;	unspecified, using default values
  4874                           ;	Table Read Protection bit
  4875                           ;	EBTR0 = 0x1, unprogrammed default
  4876                           ;	Table Read Protection bit
  4877                           ;	EBTR1 = 0x1, unprogrammed default
  4878  30000C                     	org	3145740
  4879  30000C  03                 	db	3
  4880                           
  4881                           ;Config register CONFIG7H @ 0x30000D
  4882                           ;	unspecified, using default values
  4883                           ;	Boot Block Table Read Protection bit
  4884                           ;	EBTRB = 0x1, unprogrammed default
  4885  30000D                     	org	3145741
  4886  30000D  40                 	db	64
  4887                           tosu	equ	0xFFF
  4888                           tosh	equ	0xFFE
  4889                           tosl	equ	0xFFD
  4890                           stkptr	equ	0xFFC
  4891                           pclatu	equ	0xFFB
  4892                           pclath	equ	0xFFA
  4893                           pcl	equ	0xFF9
  4894                           tblptru	equ	0xFF8
  4895                           tblptrh	equ	0xFF7
  4896                           tblptrl	equ	0xFF6
  4897                           tablat	equ	0xFF5
  4898                           prodh	equ	0xFF4
  4899                           prodl	equ	0xFF3
  4900                           indf0	equ	0xFEF
  4901                           postinc0	equ	0xFEE
  4902                           postdec0	equ	0xFED
  4903                           preinc0	equ	0xFEC
  4904                           plusw0	equ	0xFEB
  4905                           fsr0h	equ	0xFEA
  4906                           fsr0l	equ	0xFE9
  4907                           wreg	equ	0xFE8
  4908                           indf1	equ	0xFE7
  4909                           postinc1	equ	0xFE6
  4910                           postdec1	equ	0xFE5
  4911                           preinc1	equ	0xFE4
  4912                           plusw1	equ	0xFE3
  4913                           fsr1h	equ	0xFE2
  4914                           fsr1l	equ	0xFE1
  4915                           bsr	equ	0xFE0
  4916                           indf2	equ	0xFDF
  4917                           postinc2	equ	0xFDE
  4918                           postdec2	equ	0xFDD
  4919                           preinc2	equ	0xFDC
  4920                           plusw2	equ	0xFDB
  4921                           fsr2h	equ	0xFDA
  4922                           fsr2l	equ	0xFD9
  4923                           status	equ	0xFD8

Data Sizes:
    Strings     0
    Constant    100
    Data        1
    BSS         107
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     28      61
    BANK0           128      0      75
    BANK1           256      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMRAM

    _main->_menuMotor
    _menuMotor->_displayMenu
    _displayMenu->_LcPutChar
    _LcPutChar->_LcGotoXY
    _LcGotoXY->_WaitForBusy
    _CantaData->_CantaPartAlta
    _CantaData->_CantaPartBaixa
    _LcCursorOn->_WaitForBusy
    _LcCursorOff->_WaitForBusy
    _LcClear->_Espera
    _KeSetMode->_TiResetTics
    _KeGetCharValue->_getFullValue
    _joystickMotor->_SiSendChar
    _initMenu->_TiGetTimer
    _initKeypad->_TiGetTimer
    _initAudio->_TiGetTimer
    _audioMotor->_TiGetTics
    _SMSMotor->_TiGetTics
    _LcInit->_Espera
    _WaitForBusy->_TiGetTics
    _Espera->_TiGetTics
    _CantaIR->_CantaPartAlta
    _CantaIR->_CantaPartBaixa
    _KeypadMotor->_TiGetTics

Critical Paths under _RSI_High in COMRAM

    _RSI_High->__TiRSITimer

Critical Paths under _main in BANK0

    None.

Critical Paths under _RSI_High in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _RSI_High in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   10940
                        _KeypadMotor
                             _LcInit
                           _SMSMotor
                        _TiInitTimer
                         _audioMotor
                          _initAudio
                       _initJoystick
                         _initKeypad
                           _initMenu
                            _initSIO
                      _joystickMotor
                          _menuMotor
 ---------------------------------------------------------------------------------
 (1) _menuMotor                                            2     2      0    8543
                                             26 COMRAM     2     2      0
                     _KeGetCharValue
                  _KeGetGenericValue
                          _KeSetMode
                            _LcClear
                        _LcCursorOff
                         _LcCursorOn
                           _LcGotoXY
                          _LcPutChar
                          _TiGetTics
                        _TiResetTics
                        _displayMenu
                         _getPresses
                          _isPressed
 ---------------------------------------------------------------------------------
 (2) _isPressed                                            1     1      0      24
                                              5 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _getPresses                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _displayMenu                                          4     3      1    3212
                                             22 COMRAM     4     3      1
                           _LcGotoXY
                          _LcPutChar
 ---------------------------------------------------------------------------------
 (3) _LcPutChar                                            1     1      0    1652
                                             21 COMRAM     1     1      0
                          _CantaData
                           _LcGotoXY
                        _WaitForBusy
 ---------------------------------------------------------------------------------
 (4) _LcGotoXY                                             8     7      1    1320
                                             13 COMRAM     8     7      1
                            _CantaIR
                        _WaitForBusy
 ---------------------------------------------------------------------------------
 (4) _CantaData                                            1     1      0     220
                                              7 COMRAM     1     1      0
                      _CantaPartAlta
                     _CantaPartBaixa
 ---------------------------------------------------------------------------------
 (2) _LcCursorOn                                           0     0      0     310
                            _CantaIR
                        _WaitForBusy
 ---------------------------------------------------------------------------------
 (2) _LcCursorOff                                          0     0      0     310
                            _CantaIR
                        _WaitForBusy
 ---------------------------------------------------------------------------------
 (2) _LcClear                                              0     0      0    1507
                            _CantaIR
                             _Espera
                        _WaitForBusy
 ---------------------------------------------------------------------------------
 (2) _KeSetMode                                            1     1      0      66
                                              6 COMRAM     1     1      0
                        _TiResetTics
 ---------------------------------------------------------------------------------
 (2) _KeGetCharValue                                       0     0      0      75
                  _KeGetGenericValue
                       _getFullValue
 ---------------------------------------------------------------------------------
 (3) _getFullValue                                         5     5      0      75
                                              5 COMRAM     5     5      0
 ---------------------------------------------------------------------------------
 (1) _joystickMotor                                        2     2      0      15
                                              6 COMRAM     2     2      0
                      _SiIsAvailable
                         _SiSendChar
 ---------------------------------------------------------------------------------
 (2) _SiSendChar                                           1     1      0      15
                                              5 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _SiIsAvailable                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initSIO                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initMenu                                             0     0      0       0
                         _TiGetTimer
 ---------------------------------------------------------------------------------
 (1) _initKeypad                                           0     0      0       0
                         _TiGetTimer
 ---------------------------------------------------------------------------------
 (1) _initJoystick                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initAudio                                            0     0      0       0
                         _TiGetTimer
 ---------------------------------------------------------------------------------
 (1) _audioMotor                                           3     3      0     515
                                             12 COMRAM     3     3      0
                          _TiGetTics
                        _TiResetTics
                            ___awmod
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              6     2      4     448
                                              5 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (1) _TiInitTimer                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SMSMotor                                             2     2      0      67
                                             12 COMRAM     2     2      0
                  _KeGetGenericValue
                          _TiGetTics
                        _TiResetTics
 ---------------------------------------------------------------------------------
 (2) _KeGetGenericValue                                    2     2      0       0
                                              5 COMRAM     2     2      0
                          _getColumn
 ---------------------------------------------------------------------------------
 (3) _getColumn                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _LcInit                                               4     3      1    1733
                                             17 COMRAM     4     3      1
                            _CantaIR
                 _EscriuPrimeraOrdre
                             _Espera
                         _TiGetTimer
                        _WaitForBusy
 ---------------------------------------------------------------------------------
 (4) _WaitForBusy                                          1     1      0      90
                                             12 COMRAM     1     1      0
                          _TiGetTics
                        _TiResetTics
 ---------------------------------------------------------------------------------
 (2) _TiGetTimer                                           1     1      0       0
                                              5 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _Espera                                               5     1      4    1197
                                             12 COMRAM     5     1      4
                          _TiGetTics
                        _TiResetTics
 ---------------------------------------------------------------------------------
 (2) _EscriuPrimeraOrdre                                   2     2      0      60
                                              5 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (5) _CantaIR                                              1     1      0     220
                                              7 COMRAM     1     1      0
                      _CantaPartAlta
                     _CantaPartBaixa
 ---------------------------------------------------------------------------------
 (6) _CantaPartBaixa                                       2     2      0      88
                                              5 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (6) _CantaPartAlta                                        2     2      0      88
                                              5 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _KeypadMotor                                          2     2      0      67
                                             12 COMRAM     2     2      0
                          _TiGetTics
                        _TiResetTics
 ---------------------------------------------------------------------------------
 (5) _TiResetTics                                          1     1      0      22
                                              5 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (5) _TiGetTics                                            7     5      2      45
                                              5 COMRAM     7     5      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _RSI_High                                             4     4      0       0
                                              1 COMRAM     4     4      0
                        __TiRSITimer
 ---------------------------------------------------------------------------------
 (8) __TiRSITimer                                          1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _KeypadMotor
     _TiGetTics
     _TiResetTics
   _LcInit
     _CantaIR
       _CantaPartAlta
       _CantaPartBaixa
     _EscriuPrimeraOrdre
     _Espera
       _TiGetTics
       _TiResetTics
     _TiGetTimer
     _WaitForBusy
       _TiGetTics
       _TiResetTics
   _SMSMotor
     _KeGetGenericValue
       _getColumn
     _TiGetTics
     _TiResetTics
   _TiInitTimer
   _audioMotor
     _TiGetTics
     _TiResetTics
     ___awmod
   _initAudio
     _TiGetTimer
   _initJoystick
   _initKeypad
     _TiGetTimer
   _initMenu
     _TiGetTimer
   _initSIO
   _joystickMotor
     _SiIsAvailable
     _SiSendChar
   _menuMotor
     _KeGetCharValue
       _KeGetGenericValue
       _getFullValue
     _KeGetGenericValue
     _KeSetMode
       _TiResetTics
     _LcClear
       _CantaIR
       _Espera
       _WaitForBusy
     _LcCursorOff
       _CantaIR
       _WaitForBusy
     _LcCursorOn
       _CantaIR
       _WaitForBusy
     _LcGotoXY
       _CantaIR
       _WaitForBusy
     _LcPutChar
       _CantaData
         _CantaPartAlta
         _CantaPartBaixa
       _LcGotoXY
       _WaitForBusy
     _TiGetTics
     _TiResetTics
     _displayMenu
       _LcGotoXY
       _LcPutChar
     _getPresses
     _isPressed

 _RSI_High (ROOT)
   __TiRSITimer

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             1FF      0       0      22        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0      4B       5       58.6%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     1C      3D       1       48.4%
BITBIGSFRhlhh       19      0       0       9        0.0%
BITBIGSFRlhhll      15      0       0      16        0.0%
BITBIGSFRhh          D      0       0       8        0.0%
BITBIGSFRlhhhh       B      0       0      11        0.0%
BITBIGSFRlhhlhl      8      0       0      14        0.0%
BITBIGSFRlhhlhh      7      0       0      13        0.0%
BITBIGSFRllhlh       6      0       0      18        0.0%
BITBIGSFRllhhh       5      0       0      17        0.0%
BITBIGSFRhll         4      0       0      10        0.0%
BITBIGSFRlhhlhl      1      0       0      15        0.0%
BITBIGSFRlhhhl       1      0       0      12        0.0%
BITBIGSFRllhll       1      0       0      19        0.0%
BITBIGSFRlll         1      0       0      20        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      88      21        0.0%
DATA                 0      0      88       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.36 build 20220127204148 
Symbol Table                                                                                   Mon Jun 06 23:38:09 2022

         TiResetTics@Handle 0026                           _x 0008                           _y 0007  
              ?_displayMenu 0037                          PL2 058E                          PL4 0876  
                        PL6 0A90                          PL8 0C66                         PL10 063E  
                       PL20 0C30                         PL12 089A                         PL30 092E  
                       PL22 079A                         PL14 0AAE                         PL40 09FC  
                       PL32 08B4                         PL24 0920                         PL16 0788  
                       PL42 04CE                         PL34 0A62                         PL26 03AC  
                       PL18 0D8C                         PL44 0CE0                         PL36 0B58  
                       PL28 03B6                         PL46 064A                         PL38 0C3E  
                       l141 03C0                         l151 0418                         l145 03E0  
                       l170 0698                         l148 03FC                         l159 0462  
                       l513 061A                         l274 07BA                         l188 0DAC  
                       l285 0806                         l278 07CC                         l495 059C  
                       l498 05AE                         u250 0A78                         u500 0910  
                       u440 08CE                         u460 08E4                         u518 0912  
                       u480 08F8                         u458 08D0                         u478 08E6  
                       u498 08FA                         _val 000A                         _row 001F  
          ??_CantaPartBaixa 0026                ___awmod@sign 002B                         wreg 000FE8  
                      l2001 060A                        l2011 061C                        l2103 0B74  
                      l2203 0AE8                        l2125 0B9A                        l2133 07BE  
                      l2221 0B10                        l2301 086E                        l2143 07E8  
                      l2151 0828                        l2215 0B02                        l2225 0C4C  
                      l2233 0C56                        l2129 07AE                        l2403 04F4  
                      l2331 0980                        l2323 0962                        l2315 094A  
                      l2139 07DA                        l2325 096A                        l2261 0CD8  
                      l2149 080E                        l2183 0D0C                        l2511 06A6  
                      l2335 098A                        l2319 0956                        l1375 0A8A  
                      l2521 06C0                        l2505 0692                        l2523 06C6  
                      l2507 069E                        l2531 06D8                        l2339 0996  
                      l1379 0A8C                        l2291 0858                        l2621 04A0  
                      l2517 06B6                        l2373 0C8A                        l2461 0734  
                      l2453 071A                        l2445 0700                        l2285 084E  
                      l2293 085C                        l2607 0478                        l2471 0768  
                      l2287 0852                        l2617 049E                        l2377 0C92  
                      l2705 036C                        l2651 02C2                        l2549 03DA  
                      l2637 0288                        l2629 0268                        l2717 0380  
                      l2583 0432                        l2495 067E                        l2479 0652  
                      l2663 02EA                        l2587 043C                        l2579 042E  
                      l2691 0338                        l2683 0334                        l2739 0BFA  
                      l2597 045C                        l1973 05BE                        l2669 0304  
                      l2679 0324                        l1993 05F6                        l1985 05E2  
                      l2697 0352                        l1997 0600                        l1989 05EC  
                      u2010 0452                        u1300 0A3C                        u1320 0A54  
                      u1400 09EE                        u1260 0A12                        u1340 09AC  
                      u1318 0A3E                        u2150 02A6                        u2080 048E  
                      u1280 0A28                        u1360 09C2                        u1338 0A56  
                      u1418 09F0                        u1610 0DA8                        u1380 09D6  
                      u2180 02FE                        u1278 0A14                        u1358 09AE  
                      u1710 096E                        u1298 0A2A                        u1378 09C4  
                      u1398 09D8                        u1780 058C                        i2l74 0B52  
            ?_SiIsAvailable 0021                        _Rows 0015                        _main 0BD8  
                      _send 0009                        fsr2h 000FDA                        indf2 000FDF  
                      fsr2l 000FD9                  _LcCursorOn 0DF0                        btemp 003E  
                      prodh 000FF4                        prodl 000FF3             __end_of_LcClear 0DC6  
                      start 0032             __end_of_CantaIR 0D7C               LcInit@columns 0032  
              ___param_bank 000000               _isPressed$525 0026                 Espera@Timer 002D  
                     ?_main 0021             __end_of___awmod 09A0               ??_TiInitTimer 0026  
                     _T0CON 000FD5                       _TABLE 020D               ??_KeypadMotor 002D  
                     _TMR0H 000FD7                       _TMR0L 000FD6                       _SPBRG 000FAF  
                     _TXREG 000FAD                       _Timer 0001            __end_of_SMSTABLE 024F  
           __end_of_initSIO 0DF0                       _moved 0006                       _timer 000D  
               _LcCursorOff 0DFA                       _state 0017            __end_of_RSI_High 0032  
          __end_of_SMSMotor 06FE                       tablat 000FF5               ??_TiResetTics 0026  
                     ttemp5 003F                       ttemp6 0042                       ttemp7 0046  
                     status 000FD8                       wtemp8 003F            __end_of_LcGotoXY 083E  
             ??__TiRSITimer 0021                  _TiGetTimer 0C48     EscriuPrimeraOrdre@ordre 0027  
           __initialization 0BA0                __end_of_main 0C10        __end_of_getFullValue 0A90  
                _SiSendChar 0E16                      ??_main 003D               __activetblptr 000002  
             ?_initJoystick 0021           __end_of_LOGINMENU 0265                      _ADCON0 000FC2  
                    _ADCON1 000FC1                      _ADCON2 000FC0         __end_of_TiInitTimer 0C9C  
                    _ADRESH 000FC4             ??_SiIsAvailable 0026         __end_of_KeypadMotor 04CE  
                 ??_LcClear 0032                   ??_CantaIR 0028                      i2l2361 0B4E  
                    i2l2353 0B30                      i2l2357 0B38                      _LCDcol 000B  
            LcGotoXY@Fisics 0033              LcGotoXY@Column 0035                      _LCDrow 000C  
             ??_WaitForBusy 002D                 ?_LcCursorOn 0021           KeSetMode@menuMode 0027  
                    _LcInit 04D4                      _Espera 0D06                _LcGotoXY$731 0031  
                    _RowAct 0013         __end_of_TiResetTics 0D8C                      _h_Tics 0003  
                 ??___awmod 002A            __end_of_initMenu 0E26         __end_of__TiRSITimer 0B58  
                    clear_0 0BB8                      clear_1 0BC4                      _period 000E  
           ___awmod@divisor 0028                      isa$std 000001             ___awmod@counter 002A  
            ??_initJoystick 0026                   ??_initSIO 0026                __pdataCOMRAM 003D  
              __mediumconst 0000                      tblptrh 000FF7                      tblptrl 000FF6  
                    tblptru 000FF8           __end_of_CantaData 0C30                  __accesstop 0080  
   __end_of__initialization 0BCA           __end_of_KeSetMode 0CE0           __end_of_LcPutChar 0B1A  
             ___rparam_used 000001               __end_of_TABLE 0219                 ?_TiGetTimer 0021  
            __pcstackCOMRAM 0021         __end_of_WaitForBusy 0BA0       __end_of_joystickMotor 063E  
               ?_SiSendChar 0021                  __end_ofPL2 059A                  __end_ofPL4 089A  
                __end_ofPL6 0AAE                  __end_ofPL8 0C74                   ?_RSI_High 0021  
                 ?_SMSMotor 0021           __end_of_TiGetTics 0CC2                 _TiInitTimer 0C74  
               _KeypadMotor 03BE                   ?_LcGotoXY 002E                  __pbssBANK0 0080  
               _TiResetTics 0D7C                     ?_LcInit 0032               _CantaPartAlta 0A06  
                   ?_Espera 002D                 __TiRSITimer 0B1A                  ??_RSI_High 0022  
                ??_SMSMotor 002D                  _getPresses 0E2C                  _audioMotor 06FE  
      __end_of_LOGREGSCREEN 020D                     LcInit@i 0034                  ??_LcGotoXY 002F  
              ?_LcCursorOff 0021                _getFullValue 0A6C                     _LcClear 0DB0  
                   _CantaIR 0D60          joystickMotor@state 0005                   ?_initMenu 0021  
               _WaitForBusy 0B62              ?_CantaPartAlta 0021                     _Columns 0014  
         __end_of_getColumn 0E0E        __end_of_initJoystick 0D60                     __Hparam 0000  
                   __Lparam 0000                  _initKeypad 0D26                     ___awmod 0938  
              __psmallconst 0200                  _currentKey 001C           __end_of_isPressed 0DB0  
                   __pcinit 0BA0                     __ramtop 0200                     __ptext0 0BD8  
                   __ptext1 0266                     __ptext2 0D98                     __ptext3 0E2C  
                   __ptext4 083E                     __ptext5 0AC6                     __ptext6 07AA  
                   __ptext7 0C10                     __ptext8 0DF0                     __ptext9 0DFA  
         __end_of_initAudio 0DDC                   _T0CONbits 000FD5                   CantaIR@IR 0028  
                   _initSIO 0DDC                     _counter 0020              displayMenu@row 0037  
         __end_of_menuMotor 03AC            ___awmod@dividend 0026                     _pressed 001A  
           WaitForBusy@Busy 002D        end_of_initialization 0BCA                   _LOGINMENU 024F  
                ??_initMenu 0027               __Lmediumconst 0000             TiGetTics@Handle 002A  
              ??_LcCursorOn 002E                  _numPresses 0019             TiGetTics@actual 002B  
                 _RCSTAbits 000FAB                     postdec2 000FDD                     postinc0 000FEE  
                   postinc2 000FDE                   _PORTBbits 000F81                   _PORTDbits 000F83  
               ?_getPresses 0021                 ?_audioMotor 0021           _KeGetGenericValue 0CE6  
        __end_of_LcCursorOn 0DFA          ?_KeGetGenericValue 0021                   _TRISAbits 000F92  
                 _TRISBbits 000F93                   _TRISCbits 000F94                   _TRISDbits 000F95  
       getFullValue@generic 002A         ??_KeGetGenericValue 0026             ??_CantaPartAlta 0026  
     __end_of_SiIsAvailable 0E2C                   _CantaData 0C10                   _TXSTAbits 000FAC  
              ??_TiGetTimer 0026              __end_of_LcInit 058E                   _KeSetMode 0CC2  
                 _LcPutChar 0AC6              __end_of_Espera 0D26                 ?_initKeypad 0021  
            _KeGetCharValue 0E0E               ??_displayMenu 0038                ??_SiSendChar 0026  
__end_of_EscriuPrimeraOrdre 0920                 _BAUDCONbits 000FB8   __end_of_KeGetGenericValue 0D06  
             __pidataCOMRAM 0E30                   _ColumnAct 0012                ?_TiInitTimer 0021  
              ?_KeypadMotor 0021                 __end_ofPL10 064A                 __end_ofPL20 0C3E  
               __end_ofPL12 08B4                 __end_ofPL30 0938                 __end_ofPL22 07AA  
               __end_ofPL14 0AC6                 __end_ofPL40 0A06                 __end_ofPL32 08BC  
               __end_ofPL24 092E                 __end_ofPL16 079A                 __end_ofPL42 04D4  
               __end_ofPL34 0A6C                 __end_ofPL26 03B6                 __end_ofPL18 0D98  
               __end_ofPL44 0CE6                 __end_ofPL36 0B62                 __end_ofPL28 03BE  
               __end_ofPL46 0650                 __end_ofPL38 0C48         start_initialization 0BA0  
                 _TiGetTics 0C9C          __end_of_TiGetTimer 0C66            _state@Audio$F854 0011  
       displayMenu@menuMode 003A                ?_TiResetTics 0021                  ?_CantaData 0021  
        __end_of_SiSendChar 0E1E                    ??_LcInit 0033                _LOGREGSCREEN 0201  
    __end_of_KeGetCharValue 0E16                ?__TiRSITimer 0021                    ??_Espera 0031  
                ?_KeSetMode 0021                  ?_LcPutChar 0021         __end_of_displayMenu 0876  
              _initJoystick 0D44                 __pbssCOMRAM 0001                  ?_TiGetTics 0026  
          SiSendChar@myByte 0026                    ?_LcClear 0021                    ?_CantaIR 0021  
            _CantaPartBaixa 09A0                ?_WaitForBusy 0021             ?_KeGetCharValue 0021  
                 __pintcode 0008                   _getColumn 0E04                    ?___awmod 0026  
                 _available 0018             CantaPartBaixa@c 0027                    ?_initSIO 0021  
               __smallconst 0200                   _isPressed 0D98                   _initAudio 0DC6  
                 _menuMotor 0266      __end_of_CantaPartBaixa 09FC                 ??_CantaData 0028  
                  _LATBbits 000F8A                    _LATCbits 000F8B                    _LATDbits 000F8C  
               ??_KeSetMode 0027                 ??_LcPutChar 0036                    _RCONbits 000FD0  
                ?_getColumn 0021                   _timer_SMS 001D                   _timerSong 000F  
               _displayMenu 083E                    _SMSTABLE 0219               _joystickMotor 059A  
                  _RSI_High 0008                  _ADCON0bits 000FC2                ??_getPresses 0026  
                  _SMSMotor 0650                ??_audioMotor 002D                  ?_isPressed 0021  
                  Espera@ms 002F                    _LcGotoXY 07AA                 ??_TiGetTics 0028  
                ?_initAudio 0021                 LcGotoXY@Row 002E                  ?_menuMotor 0021  
               _INTCON2bits 000FF1             ?_CantaPartBaixa 0021              menuMotor@state 003D  
        __end_of_getPresses 0E30                    __Hrparam 0000          __end_of_audioMotor 0788  
                  __Lrparam 0000                ??_initKeypad 0027              ?_joystickMotor 0021  
                  __ptext10 0DB0                    __ptext11 0CC2          _EscriuPrimeraOrdre 08BC  
                  __ptext20 0D44                    __ptext12 0E0E                    __ptext21 0DC6  
                  __ptext13 0A6C                    __ptext30 0C48                    __ptext22 06FE  
                  __ptext14 059A                    __ptext31 0D06                    __ptext23 0938  
                  __ptext15 0E16                    __ptext40 0B1A                    __ptext32 08BC  
                  __ptext24 0C74                    __ptext16 0E26                    __ptext33 0D60  
                  __ptext25 0650                    __ptext17 0DDC                    __ptext34 09A0  
                  __ptext26 0CE6                    __ptext18 0E1E                    __ptext35 0A06  
                  __ptext27 0E04                    __ptext19 0D26                    __ptext36 03BE  
                  __ptext28 04D4                    __ptext37 0D7C                    __ptext29 0B62  
                  __ptext38 0C9C              CantaPartAlta@c 0027          __end_of_initKeypad 0D44  
                  _s_Timers 0080                    _initMenu 0E1E         ?_EscriuPrimeraOrdre 0021  
     __end_of_CantaPartAlta 0A62               CantaData@Data 0028                 ??_getColumn 0026  
                  isa$xinst 000000                    _previous 001B                    int$flags 003E  
                  _stateSMS 0016        ??_EscriuPrimeraOrdre 0026                  LcInit@rows 0033  
               _periodTimer 0010                 ??_isPressed 0026                  _INTCONbits 000FF2  
               ??_initAudio 0027                 ??_menuMotor 003B               ??_LcCursorOff 002E  
             ?_getFullValue 0021                    intlevel2 0000            ??_KeGetCharValue 002B  
              _timerBounces 001E                  LcPutChar@c 0036             ??_joystickMotor 0027  
            ??_getFullValue 0026               _SiIsAvailable 0E26         __end_of_LcCursorOff 0E04  
