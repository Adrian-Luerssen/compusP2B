

Microchip MPLAB XC8 Assembler V2.36 build 20220127204148 
                                                                                               Mon Jun 13 22:57:36 2022

Microchip MPLAB XC8 C Compiler v2.36 (Pro license) build 20220127204148 Og9s 
     1                           	processor	18F4321
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	plic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1
    41                           	psect	text27,global,reloc=2,class=CODE,delta=1
    42                           	psect	text28,global,reloc=2,class=CODE,delta=1
    43                           	psect	text29,global,reloc=2,class=CODE,delta=1
    44                           	psect	text30,global,reloc=2,class=CODE,delta=1
    45                           	psect	text31,global,reloc=2,class=CODE,delta=1
    46                           	psect	text32,global,reloc=2,class=CODE,delta=1
    47                           	psect	text33,global,reloc=2,class=CODE,delta=1
    48                           	psect	text34,global,reloc=2,class=CODE,delta=1
    49                           	psect	text35,global,reloc=2,class=CODE,delta=1
    50                           	psect	text36,global,reloc=2,class=CODE,delta=1
    51                           	psect	text37,global,reloc=2,class=CODE,delta=1
    52                           	psect	text38,global,reloc=2,class=CODE,delta=1
    53                           	psect	text39,global,reloc=2,class=CODE,delta=1
    54                           	psect	text40,global,reloc=2,class=CODE,delta=1
    55                           	psect	text41,global,reloc=2,class=CODE,delta=1
    56                           	psect	text42,global,reloc=2,class=CODE,delta=1
    57                           	psect	text43,global,reloc=2,class=CODE,delta=1
    58                           	psect	text44,global,reloc=2,class=CODE,delta=1
    59                           	psect	text45,global,reloc=2,class=CODE,delta=1
    60                           	psect	text46,global,reloc=2,class=CODE,delta=1
    61                           	psect	text47,global,reloc=2,class=CODE,delta=1
    62                           	psect	text48,global,reloc=2,class=CODE,delta=1
    63                           	psect	text49,global,reloc=2,class=CODE,delta=1
    64                           	psect	text50,global,reloc=2,class=CODE,delta=1
    65                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    66                           	psect	text52,global,reloc=2,class=CODE,delta=1
    67                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    68                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    69                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    70                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    71                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    72                           	psect	pa_nodes0,global,class=CODE,delta=1
    73  0000                     
    74                           ; Version 2.36
    75                           ; Generated 28/01/2022 GMT
    76                           ; 
    77                           ; Copyright Â© 2022, Microchip Technology Inc. and its subsidiaries ("Microchip")
    78                           ; All rights reserved.
    79                           ; 
    80                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    81                           ; 
    82                           ; Redistribution and use in source and binary forms, with or without modification, are
    83                           ; permitted provided that the following conditions are met:
    84                           ; 
    85                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    86                           ;        conditions and the following disclaimer.
    87                           ; 
    88                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    89                           ;        of conditions and the following disclaimer in the documentation and/or other
    90                           ;        materials provided with the distribution. Publication is not required when
    91                           ;        this file is used in an embedded application.
    92                           ; 
    93                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    94                           ;        software without specific prior written permission.
    95                           ; 
    96                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    97                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    98                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    99                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   100                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   101                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   102                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   103                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   104                           ; 
   105                           ; 
   106                           ; Code-generator required, PIC18F4321 Definitions
   107                           ; 
   108                           ; SFR Addresses
   109  0000                     
   110                           	psect	idataCOMRAM
   111  001702                     __pidataCOMRAM:
   112                           	callstack 0
   113                           
   114                           ;initializer for menuMotor@state
   115  001702  01                 	db	1
   116                           
   117                           	psect	smallconst
   118  000200                     __psmallconst:
   119                           	callstack 0
   120  000200  00                 	db	0
   121  000201                     _LOGINMENU:
   122                           	callstack 0
   123  000201  31                 	db	49
   124  000202  2E                 	db	46
   125  000203  4C                 	db	76
   126  000204  4F                 	db	79
   127  000205  47                 	db	71
   128  000206  49                 	db	73
   129  000207  4E                 	db	78
   130  000208  00                 	db	0
   131  000209  00                 	db	0
   132  00020A  00                 	db	0
   133  00020B  00                 	db	0
   134  00020C  32                 	db	50
   135  00020D  2E                 	db	46
   136  00020E  52                 	db	82
   137  00020F  45                 	db	69
   138  000210  47                 	db	71
   139  000211  49                 	db	73
   140  000212  53                 	db	83
   141  000213  54                 	db	84
   142  000214  45                 	db	69
   143  000215  52                 	db	82
   144  000216  00                 	db	0
   145  000217                     __end_of_LOGINMENU:
   146                           	callstack 0
   147  000217                     _LOGREGSCREEN:
   148                           	callstack 0
   149  000217  55                 	db	85
   150  000218  53                 	db	83
   151  000219  45                 	db	69
   152  00021A  52                 	db	82
   153  00021B  3A                 	db	58
   154  00021C  00                 	db	0
   155  00021D  50                 	db	80
   156  00021E  53                 	db	83
   157  00021F  57                 	db	87
   158  000220  44                 	db	68
   159  000221  3A                 	db	58
   160  000222  00                 	db	0
   161  000223                     __end_of_LOGREGSCREEN:
   162                           	callstack 0
   163  000223                     _TABLE:
   164                           	callstack 0
   165  000223  31                 	db	49
   166  000224  32                 	db	50
   167  000225  33                 	db	51
   168  000226  34                 	db	52
   169  000227  35                 	db	53
   170  000228  36                 	db	54
   171  000229  37                 	db	55
   172  00022A  38                 	db	56
   173  00022B  39                 	db	57
   174  00022C  2A                 	db	42
   175  00022D  30                 	db	48
   176  00022E  23                 	db	35
   177  00022F                     __end_of_TABLE:
   178                           	callstack 0
   179  00022F                     _MAINMENUSIZE:
   180                           	callstack 0
   181  00022F  0E                 	db	14
   182  000230  0E                 	db	14
   183  000231  1C                 	db	28
   184  000232  09                 	db	9
   185  000233                     __end_of_MAINMENUSIZE:
   186                           	callstack 0
   187  000233                     _MAINMENU:
   188                           	callstack 0
   189  000233  31                 	db	49
   190  000234  2E                 	db	46
   191  000235  50                 	db	80
   192  000236  4C                 	db	76
   193  000237  41                 	db	65
   194  000238  59                 	db	89
   195  000239  20                 	db	32
   196  00023A  41                 	db	65
   197  00023B  20                 	db	32
   198  00023C  47                 	db	71
   199  00023D  41                 	db	65
   200  00023E  4D                 	db	77
   201  00023F  45                 	db	69
   202  000240  00                 	db	0
   203  000241  00                 	db	0
   204  000242  00                 	db	0
   205  000243  00                 	db	0
   206  000244  00                 	db	0
   207  000245  00                 	db	0
   208  000246  00                 	db	0
   209  000247  00                 	db	0
   210  000248  00                 	db	0
   211  000249  00                 	db	0
   212  00024A  00                 	db	0
   213  00024B  00                 	db	0
   214  00024C  00                 	db	0
   215  00024D  00                 	db	0
   216  00024E  00                 	db	0
   217  00024F  32                 	db	50
   218  000250  2E                 	db	46
   219  000251  4D                 	db	77
   220  000252  4F                 	db	79
   221  000253  44                 	db	68
   222  000254  49                 	db	73
   223  000255  46                 	db	70
   224  000256  59                 	db	89
   225  000257  20                 	db	32
   226  000258  54                 	db	84
   227  000259  49                 	db	73
   228  00025A  4D                 	db	77
   229  00025B  45                 	db	69
   230  00025C  00                 	db	0
   231  00025D  00                 	db	0
   232  00025E  00                 	db	0
   233  00025F  00                 	db	0
   234  000260  00                 	db	0
   235  000261  00                 	db	0
   236  000262  00                 	db	0
   237  000263  00                 	db	0
   238  000264  00                 	db	0
   239  000265  00                 	db	0
   240  000266  00                 	db	0
   241  000267  00                 	db	0
   242  000268  00                 	db	0
   243  000269  00                 	db	0
   244  00026A  00                 	db	0
   245  00026B  33                 	db	51
   246  00026C  2E                 	db	46
   247  00026D  53                 	db	83
   248  00026E  48                 	db	72
   249  00026F  4F                 	db	79
   250  000270  57                 	db	87
   251  000271  20                 	db	32
   252  000272  47                 	db	71
   253  000273  45                 	db	69
   254  000274  4E                 	db	78
   255  000275  45                 	db	69
   256  000276  52                 	db	82
   257  000277  41                 	db	65
   258  000278  4C                 	db	76
   259  000279  20                 	db	32
   260  00027A  54                 	db	84
   261  00027B  4F                 	db	79
   262  00027C  50                 	db	80
   263  00027D  20                 	db	32
   264  00027E  35                 	db	53
   265  00027F  20                 	db	32
   266  000280  53                 	db	83
   267  000281  43                 	db	67
   268  000282  4F                 	db	79
   269  000283  52                 	db	82
   270  000284  45                 	db	69
   271  000285  53                 	db	83
   272  000286  20                 	db	32
   273  000287  34                 	db	52
   274  000288  2E                 	db	46
   275  000289  4C                 	db	76
   276  00028A  4F                 	db	79
   277  00028B  47                 	db	71
   278  00028C  4F                 	db	79
   279  00028D  55                 	db	85
   280  00028E  54                 	db	84
   281  00028F  00                 	db	0
   282  000290  00                 	db	0
   283  000291  00                 	db	0
   284  000292  00                 	db	0
   285  000293  00                 	db	0
   286  000294  00                 	db	0
   287  000295  00                 	db	0
   288  000296  00                 	db	0
   289  000297  00                 	db	0
   290  000298  00                 	db	0
   291  000299  00                 	db	0
   292  00029A  00                 	db	0
   293  00029B  00                 	db	0
   294  00029C  00                 	db	0
   295  00029D  00                 	db	0
   296  00029E  00                 	db	0
   297  00029F  00                 	db	0
   298  0002A0  00                 	db	0
   299  0002A1  00                 	db	0
   300  0002A2  00                 	db	0
   301  0002A3                     __end_of_MAINMENU:
   302                           	callstack 0
   303  0002A3                     _SMSTABLE:
   304                           	callstack 0
   305  0002A3  31                 	db	49
   306  0002A4  00                 	db	0
   307  0002A5  00                 	db	0
   308  0002A6  00                 	db	0
   309  0002A7  00                 	db	0
   310  0002A8  00                 	db	0
   311  0002A9  41                 	db	65
   312  0002AA  42                 	db	66
   313  0002AB  43                 	db	67
   314  0002AC  32                 	db	50
   315  0002AD  00                 	db	0
   316  0002AE  00                 	db	0
   317  0002AF  44                 	db	68
   318  0002B0  45                 	db	69
   319  0002B1  46                 	db	70
   320  0002B2  33                 	db	51
   321  0002B3  00                 	db	0
   322  0002B4  00                 	db	0
   323  0002B5  47                 	db	71
   324  0002B6  48                 	db	72
   325  0002B7  49                 	db	73
   326  0002B8  34                 	db	52
   327  0002B9  00                 	db	0
   328  0002BA  00                 	db	0
   329  0002BB  4A                 	db	74
   330  0002BC  4B                 	db	75
   331  0002BD  4C                 	db	76
   332  0002BE  35                 	db	53
   333  0002BF  00                 	db	0
   334  0002C0  00                 	db	0
   335  0002C1  4D                 	db	77
   336  0002C2  4E                 	db	78
   337  0002C3  4F                 	db	79
   338  0002C4  36                 	db	54
   339  0002C5  00                 	db	0
   340  0002C6  00                 	db	0
   341  0002C7  50                 	db	80
   342  0002C8  51                 	db	81
   343  0002C9  52                 	db	82
   344  0002CA  53                 	db	83
   345  0002CB  37                 	db	55
   346  0002CC  00                 	db	0
   347  0002CD  54                 	db	84
   348  0002CE  55                 	db	85
   349  0002CF  56                 	db	86
   350  0002D0  38                 	db	56
   351  0002D1  00                 	db	0
   352  0002D2  00                 	db	0
   353  0002D3  57                 	db	87
   354  0002D4  58                 	db	88
   355  0002D5  59                 	db	89
   356  0002D6  5A                 	db	90
   357  0002D7  39                 	db	57
   358  0002D8  00                 	db	0
   359  0002D9                     __end_of_SMSTABLE:
   360                           	callstack 0
   361  0000                     _EECON2	set	4007
   362  0000                     _EEDATA	set	4008
   363  0000                     _EEADR	set	4009
   364  0000                     _RCREG	set	4014
   365  0000                     _TXREG	set	4013
   366  0000                     _SPBRG	set	4015
   367  0000                     _BAUDCONbits	set	4024
   368  0000                     _LATCbits	set	3979
   369  0000                     _TRISCbits	set	3988
   370  0000                     _LATDbits	set	3980
   371  0000                     _TRISDbits	set	3989
   372  0000                     _TMR0L	set	4054
   373  0000                     _TMR0H	set	4055
   374  0000                     _LATC	set	3979
   375  0000                     _ADCON0bits	set	4034
   376  0000                     _T0CONbits	set	4053
   377  0000                     _PORTBbits	set	3969
   378  0000                     _TRISBbits	set	3987
   379  0000                     _RCONbits	set	4048
   380  0000                     _T0CON	set	4053
   381  0000                     _INTCONbits	set	4082
   382  0000                     _INTCON2bits	set	4081
   383  0000                     _PORTDbits	set	3971
   384  0000                     _LATBbits	set	3978
   385  0000                     _PIR1bits	set	3998
   386  0000                     _RCSTAbits	set	4011
   387  0000                     _TXSTAbits	set	4012
   388  0000                     _ADCON2	set	4032
   389  0000                     _ADCON1	set	4033
   390  0000                     _ADCON0	set	4034
   391  0000                     _TRISAbits	set	3986
   392  0000                     _ADRESH	set	4036
   393  0000                     _EECON1bits	set	4006
   394  0002D9  00                 	db	0	; dummy byte at the end
   395  0000                     
   396                           ; #config settings
   397                           
   398                           	psect	cinit
   399  001356                     __pcinit:
   400                           	callstack 0
   401  001356                     start_initialization:
   402                           	callstack 0
   403  001356                     __initialization:
   404                           	callstack 0
   405                           
   406                           ; Initialize objects allocated to COMRAM (1 bytes)
   407                           ; load TBLPTR registers with __pidataCOMRAM
   408  001356  0E02               	movlw	low __pidataCOMRAM
   409  001358  6EF6               	movwf	tblptrl,c
   410  00135A  0E17               	movlw	high __pidataCOMRAM
   411  00135C  6EF7               	movwf	tblptrh,c
   412  00135E  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   413  001360  6EF8               	movwf	tblptru,c
   414  001362  0009               	tblrd		*+	;fetch initializer
   415  001364  CFF5 F071          	movff	tablat,__pdataCOMRAM
   416                           
   417                           ; Clear objects allocated to BANK1 (144 bytes)
   418  001368  EE01  F000         	lfsr	0,__pbssBANK1
   419  00136C  0E90               	movlw	144
   420  00136E                     clear_0:
   421  00136E  6AEE               	clrf	postinc0,c
   422  001370  06E8               	decf	wreg,f,c
   423  001372  E1FD               	bnz	clear_0
   424                           
   425                           ; Clear objects allocated to BANK0 (75 bytes)
   426  001374  EE00  F080         	lfsr	0,__pbssBANK0
   427  001378  0E4B               	movlw	75
   428  00137A                     clear_1:
   429  00137A  6AEE               	clrf	postinc0,c
   430  00137C  06E8               	decf	wreg,f,c
   431  00137E  E1FD               	bnz	clear_1
   432                           
   433                           ; Clear objects allocated to COMRAM (83 bytes)
   434  001380  EE00  F001         	lfsr	0,__pbssCOMRAM
   435  001384  0E53               	movlw	83
   436  001386                     clear_2:
   437  001386  6AEE               	clrf	postinc0,c
   438  001388  06E8               	decf	wreg,f,c
   439  00138A  E1FD               	bnz	clear_2
   440  00138C                     end_of_initialization:
   441                           	callstack 0
   442  00138C                     __end_of__initialization:
   443                           	callstack 0
   444  00138C  9072               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   445  00138E  9272               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   446  001390  0E00               	movlw	low (__Lmediumconst shr (0+16))
   447  001392  6EF8               	movwf	tblptru,c
   448  001394  0100               	movlb	0
   449  001396  EF0E  F00A         	goto	_main	;jump to C main() function
   450                           
   451                           	psect	bssCOMRAM
   452  000001                     __pbssCOMRAM:
   453                           	callstack 0
   454  000001                     _mUser@EEPROM$F1485:
   455                           	callstack 0
   456  000001                     	ds	18
   457  000013                     _mUser:
   458                           	callstack 0
   459  000013                     	ds	18
   460  000025                     _topScores:
   461                           	callstack 0
   462  000025                     	ds	10
   463  00002F                     _Timer:
   464                           	callstack 0
   465  00002F                     	ds	2
   466  000031                     _h_Tics:
   467                           	callstack 0
   468  000031                     	ds	2
   469  000033                     _saveScore:
   470                           	callstack 0
   471  000033                     	ds	1
   472  000034                     _lastUserPointer:
   473                           	callstack 0
   474  000034                     	ds	1
   475  000035                     _status:
   476                           	callstack 0
   477  000035                     	ds	1
   478  000036                     _position:
   479                           	callstack 0
   480  000036                     	ds	1
   481  000037                     _userNum:
   482                           	callstack 0
   483  000037                     	ds	1
   484  000038                     _state@EEPROM$F1481:
   485                           	callstack 0
   486  000038                     	ds	1
   487  000039                     _joyMode:
   488                           	callstack 0
   489  000039                     	ds	1
   490  00003A                     _stateJoy:
   491                           	callstack 0
   492  00003A                     	ds	1
   493  00003B                     _moved:
   494                           	callstack 0
   495  00003B                     	ds	1
   496  00003C                     _y:
   497                           	callstack 0
   498  00003C                     	ds	1
   499  00003D                     _x:
   500                           	callstack 0
   501  00003D                     	ds	1
   502  00003E                     _send:
   503                           	callstack 0
   504  00003E                     	ds	1
   505  00003F                     _mScore:
   506                           	callstack 0
   507  00003F                     	ds	1
   508  000040                     _val:
   509                           	callstack 0
   510  000040                     	ds	1
   511  000041                     _LCDcolm:
   512                           	callstack 0
   513  000041                     	ds	1
   514  000042                     _LCDcol:
   515                           	callstack 0
   516  000042                     	ds	1
   517  000043                     _LCDrow:
   518                           	callstack 0
   519  000043                     	ds	1
   520  000044                     _timer:
   521                           	callstack 0
   522  000044                     	ds	1
   523  000045                     _ColumnAct:
   524                           	callstack 0
   525  000045                     	ds	1
   526  000046                     _RowAct:
   527                           	callstack 0
   528  000046                     	ds	1
   529  000047                     _Columns:
   530                           	callstack 0
   531  000047                     	ds	1
   532  000048                     _Rows:
   533                           	callstack 0
   534  000048                     	ds	1
   535  000049                     _stateSMS:
   536                           	callstack 0
   537  000049                     	ds	1
   538  00004A                     _state:
   539                           	callstack 0
   540  00004A                     	ds	1
   541  00004B                     _available:
   542                           	callstack 0
   543  00004B                     	ds	1
   544  00004C                     _numPresses:
   545                           	callstack 0
   546  00004C                     	ds	1
   547  00004D                     _pressed:
   548                           	callstack 0
   549  00004D                     	ds	1
   550  00004E                     _previous:
   551                           	callstack 0
   552  00004E                     	ds	1
   553  00004F                     _currentKey:
   554                           	callstack 0
   555  00004F                     	ds	1
   556  000050                     _timer_SMS:
   557                           	callstack 0
   558  000050                     	ds	1
   559  000051                     _timerBounces:
   560                           	callstack 0
   561  000051                     	ds	1
   562  000052                     _row:
   563                           	callstack 0
   564  000052                     	ds	1
   565  000053                     _counter:
   566                           	callstack 0
   567  000053                     	ds	1
   568                           
   569                           	psect	dataCOMRAM
   570  000071                     __pdataCOMRAM:
   571                           	callstack 0
   572  000071                     menuMotor@state:
   573                           	callstack 0
   574  000071                     	ds	1
   575                           
   576                           	psect	bssBANK0
   577  000080                     __pbssBANK0:
   578                           	callstack 0
   579  000080                     _s_Timers:
   580                           	callstack 0
   581  000080                     	ds	75
   582                           
   583                           	psect	bssBANK1
   584  000100                     __pbssBANK1:
   585                           	callstack 0
   586  000100                     _users:
   587                           	callstack 0
   588  000100                     	ds	144
   589                           
   590                           	psect	cstackBANK0
   591  0000CB                     __pcstackBANK0:
   592                           	callstack 0
   593  0000CB                     DaFindUser@logUser:
   594                           	callstack 0
   595                           
   596                           ; 18 bytes @ 0x0
   597  0000CB                     	ds	18
   598                           
   599                           	psect	cstackCOMRAM
   600  000054                     __pcstackCOMRAM:
   601                           	callstack 0
   602  000054                     
   603                           ; 1 bytes @ 0x0
   604  000054                     	ds	1
   605  000055                     ??_RSI_High:
   606                           
   607                           ; 1 bytes @ 0x1
   608  000055                     	ds	4
   609  000059                     ??_KeGetGenericValue:
   610  000059                     ??_getFullValue:
   611  000059                     ??_EscriuPrimeraOrdre:
   612  000059                     ??_readUserData:
   613  000059                     ??_CantaPartAlta:
   614  000059                     ??_CantaPartBaixa:
   615  000059                     ?_TiGetTics:
   616                           	callstack 0
   617  000059                     ?___awmod:
   618                           	callstack 0
   619  000059                     TiResetTics@Handle:
   620                           	callstack 0
   621  000059                     _isPressed$522:
   622                           	callstack 0
   623  000059                     JoSetMode@mode:
   624                           	callstack 0
   625  000059                     SiSendChar@myByte:
   626                           	callstack 0
   627  000059                     DaSaveScore@userScore:
   628                           	callstack 0
   629  000059                     ___lbmod@divisor:
   630                           	callstack 0
   631  000059                     ___awmod@dividend:
   632                           	callstack 0
   633  000059                     DaSaveUser@regUser:
   634                           	callstack 0
   635                           
   636                           ; 18 bytes @ 0x5
   637  000059                     	ds	1
   638  00005A                     ??_joystickMotor:
   639  00005A                     KeSetMode@menuMode:
   640                           	callstack 0
   641  00005A                     CantaPartAlta@c:
   642                           	callstack 0
   643  00005A                     CantaPartBaixa@c:
   644                           	callstack 0
   645  00005A                     EscriuPrimeraOrdre@ordre:
   646                           	callstack 0
   647  00005A                     ___lbmod@dividend:
   648                           	callstack 0
   649                           
   650                           ; 1 bytes @ 0x6
   651  00005A                     	ds	1
   652  00005B                     ??_TiGetTics:
   653  00005B                     CantaIR@IR:
   654                           	callstack 0
   655  00005B                     CantaData@Data:
   656                           	callstack 0
   657  00005B                     ___lbmod@counter:
   658                           	callstack 0
   659  00005B                     ___awmod@divisor:
   660                           	callstack 0
   661                           
   662                           ; 2 bytes @ 0x7
   663  00005B                     	ds	1
   664  00005C                     ___lbmod@rem:
   665                           	callstack 0
   666                           
   667                           ; 1 bytes @ 0x8
   668  00005C                     	ds	1
   669  00005D                     TiGetTics@Handle:
   670                           	callstack 0
   671  00005D                     getFullValue@generic:
   672                           	callstack 0
   673  00005D                     ___awmod@counter:
   674                           	callstack 0
   675                           
   676                           ; 1 bytes @ 0x9
   677  00005D                     	ds	1
   678  00005E                     ___awmod@sign:
   679                           	callstack 0
   680  00005E                     TiGetTics@actual:
   681                           	callstack 0
   682                           
   683                           ; 2 bytes @ 0xA
   684  00005E                     	ds	2
   685  000060                     ??_SMSMotor:
   686  000060                     ??_KeypadMotor:
   687  000060                     WaitForBusy@Busy:
   688                           	callstack 0
   689  000060                     Espera@Timer:
   690                           	callstack 0
   691                           
   692                           ; 2 bytes @ 0xC
   693  000060                     	ds	1
   694  000061                     LcGotoXY@Row:
   695                           	callstack 0
   696                           
   697                           ; 1 bytes @ 0xD
   698  000061                     	ds	1
   699  000062                     ??_LcGotoXY:
   700  000062                     Espera@ms:
   701                           	callstack 0
   702                           
   703                           ; 2 bytes @ 0xE
   704  000062                     	ds	2
   705  000064                     ??_Espera:
   706  000064                     _LcGotoXY$728:
   707                           	callstack 0
   708                           
   709                           ; 2 bytes @ 0x10
   710  000064                     	ds	1
   711  000065                     LcInit@columns:
   712                           	callstack 0
   713                           
   714                           ; 1 bytes @ 0x11
   715  000065                     	ds	1
   716  000066                     LcInit@rows:
   717                           	callstack 0
   718  000066                     LcGotoXY@Fisics:
   719                           	callstack 0
   720                           
   721                           ; 2 bytes @ 0x12
   722  000066                     	ds	1
   723  000067                     LcInit@i:
   724                           	callstack 0
   725                           
   726                           ; 2 bytes @ 0x13
   727  000067                     	ds	1
   728  000068                     LcGotoXY@Column:
   729                           	callstack 0
   730                           
   731                           ; 1 bytes @ 0x14
   732  000068                     	ds	1
   733  000069                     ??_dataMotor:
   734  000069                     LcPutChar@c:
   735                           	callstack 0
   736                           
   737                           ; 1 bytes @ 0x15
   738  000069                     	ds	1
   739  00006A                     displayMenu@row:
   740                           	callstack 0
   741                           
   742                           ; 1 bytes @ 0x16
   743  00006A                     	ds	1
   744  00006B                     ??_displayMenu:
   745  00006B                     
   746                           ; 1 bytes @ 0x17
   747  00006B                     	ds	3
   748  00006E                     displayMenu@menuMode:
   749                           	callstack 0
   750                           
   751                           ; 1 bytes @ 0x1A
   752  00006E                     	ds	1
   753  00006F                     ??_menuMotor:
   754                           
   755                           ; 1 bytes @ 0x1B
   756  00006F                     	ds	2
   757  000071                     
   758                           ; 1 bytes @ 0x1D
   759 ;;
   760 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   761 ;;
   762 ;; *************** function _main *****************
   763 ;; Defined at:
   764 ;;		line 37 in file "main.c"
   765 ;; Parameters:    Size  Location     Type
   766 ;;		None
   767 ;; Auto vars:     Size  Location     Type
   768 ;;		None
   769 ;; Return value:  Size  Location     Type
   770 ;;                  1    wreg      void 
   771 ;; Registers used:
   772 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   773 ;; Tracked objects:
   774 ;;		On entry : 0/0
   775 ;;		On exit  : 0/0
   776 ;;		Unchanged: 0/0
   777 ;; Data sizes:     COMRAM   BANK0   BANK1
   778 ;;      Params:         0       0       0
   779 ;;      Locals:         0       0       0
   780 ;;      Temps:          0       0       0
   781 ;;      Totals:         0       0       0
   782 ;;Total ram usage:        0 bytes
   783 ;; Hardware stack levels required when called: 8
   784 ;; This function calls:
   785 ;;		_KeypadMotor
   786 ;;		_LcInit
   787 ;;		_SMSMotor
   788 ;;		_TiInitTimer
   789 ;;		_dataMotor
   790 ;;		_initData
   791 ;;		_initJoystick
   792 ;;		_initKeypad
   793 ;;		_initMenu
   794 ;;		_initSIO
   795 ;;		_joystickMotor
   796 ;;		_menuMotor
   797 ;; This function is called by:
   798 ;;		Startup code after reset
   799 ;; This function uses a non-reentrant model
   800 ;;
   801                           
   802                           	psect	text0
   803  00141C                     __ptext0:
   804                           	callstack 0
   805  00141C                     _main:
   806                           	callstack 23
   807                           
   808                           ;incstack = 0
   809  00141C  EC46  F00A         	call	_TiInitTimer	;wreg free
   810  001420  ECBC  F00A         	call	_initJoystick	;wreg free
   811  001424  ECED  F00A         	call	_initKeypad	;wreg free
   812  001428  0E10               	movlw	16
   813  00142A  6E65               	movwf	LcInit@columns^0,c
   814  00142C  0E02               	movlw	2
   815  00142E  EC99  F006         	call	_LcInit
   816  001432  EC3C  F00B         	call	_initSIO	;wreg free
   817  001436  EC6D  F00B         	call	_initMenu	;wreg free
   818  00143A  EC83  F008         	call	_initData	;wreg free
   819  00143E                     l4477:
   820  00143E  EC5E  F007         	call	_SMSMotor	;wreg free
   821  001442  EC0E  F006         	call	_KeypadMotor	;wreg free
   822  001446  EC6D  F001         	call	_menuMotor	;wreg free
   823  00144A  ECFC  F006         	call	_joystickMotor	;wreg free
   824  00144E  ECEB  F003         	call	_dataMotor	;wreg free
   825  001452  D7F5               	goto	l4477
   826  001454                     __end_of_main:
   827                           	callstack 0
   828                           
   829 ;; *************** function _menuMotor *****************
   830 ;; Defined at:
   831 ;;		line 26 in file "Menu.c"
   832 ;; Parameters:    Size  Location     Type
   833 ;;		None
   834 ;; Auto vars:     Size  Location     Type
   835 ;;		None
   836 ;; Return value:  Size  Location     Type
   837 ;;                  1    wreg      void 
   838 ;; Registers used:
   839 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   840 ;; Tracked objects:
   841 ;;		On entry : 0/0
   842 ;;		On exit  : 0/0
   843 ;;		Unchanged: 0/0
   844 ;; Data sizes:     COMRAM   BANK0   BANK1
   845 ;;      Params:         0       0       0
   846 ;;      Locals:         0       0       0
   847 ;;      Temps:          2       0       0
   848 ;;      Totals:         2       0       0
   849 ;;Total ram usage:        2 bytes
   850 ;; Hardware stack levels used: 1
   851 ;; Hardware stack levels required when called: 7
   852 ;; This function calls:
   853 ;;		_DaFindUser
   854 ;;		_DaGetIdle
   855 ;;		_DaGetStatus
   856 ;;		_DaSaveScore
   857 ;;		_DaSaveUser
   858 ;;		_JoDirection
   859 ;;		_JoMoved
   860 ;;		_JoSetMode
   861 ;;		_KeGetCharValue
   862 ;;		_KeGetGenericValue
   863 ;;		_KeSetMode
   864 ;;		_LcClear
   865 ;;		_LcCursorOff
   866 ;;		_LcCursorOn
   867 ;;		_LcGotoXY
   868 ;;		_LcPutChar
   869 ;;		_SiIsAvailable
   870 ;;		_SiReadByte
   871 ;;		_SiRecievedByte
   872 ;;		_SiSendChar
   873 ;;		_TiGetTics
   874 ;;		_TiResetTics
   875 ;;		___lbmod
   876 ;;		_displayMenu
   877 ;;		_getPresses
   878 ;;		_isPressed
   879 ;; This function is called by:
   880 ;;		_main
   881 ;; This function uses a non-reentrant model
   882 ;;
   883                           
   884                           	psect	text1
   885  0002DA                     __ptext1:
   886                           	callstack 0
   887  0002DA                     _menuMotor:
   888                           	callstack 23
   889                           
   890                           ;Menu.c: 27:     static char state = 1;;Menu.c: 28:     switch (state){
   891                           
   892                           ;incstack = 0
   893  0002DA  D21A               	goto	l4457
   894  0002DC                     l4139:
   895                           
   896                           ;Menu.c: 30:             displayMenu(0,0);
   897  0002DC  0E00               	movlw	0
   898  0002DE  6E6A               	movwf	displayMenu@row^0,c
   899  0002E0  EC74  F005         	call	_displayMenu
   900                           
   901                           ;Menu.c: 31:             if (LCDrow == 2){
   902  0002E4  0E02               	movlw	2
   903  0002E6  1843               	xorwf	_LCDrow^0,w,c
   904  0002E8  A4D8               	btfss	status,2,c
   905  0002EA  0012               	return	
   906                           
   907                           ;Menu.c: 32:                 LcCursorOff();
   908  0002EC  EC53  F00B         	call	_LcCursorOff	;wreg free
   909                           
   910                           ;Menu.c: 33:                 KeSetMode(0);
   911  0002F0  0E00               	movlw	0
   912  0002F2  EC98  F00A         	call	_KeSetMode
   913                           
   914                           ;Menu.c: 34:                 state = 2;
   915  0002F6  0E02               	movlw	2
   916  0002F8  6E71               	movwf	menuMotor@state^0,c
   917  0002FA  0C02               	retlw	2
   918  0002FC                     l4147:
   919                           
   920                           ;Menu.c: 38:             if (isPressed()){
   921  0002FC  EC25  F00B         	call	_isPressed	;wreg free
   922  000300  0900               	iorlw	0
   923  000302  B4D8               	btfsc	status,2,c
   924  000304  0012               	return	
   925                           
   926                           ;Menu.c: 39:                 val = KeGetGenericValue() - '0';
   927  000306  EC18  F00B         	call	_KeGetGenericValue	;wreg free
   928  00030A  0FD0               	addlw	208
   929  00030C  6E40               	movwf	_val^0,c
   930                           
   931                           ;Menu.c: 40:                 if (val == 1||val == 2){
   932  00030E  0440               	decf	_val^0,w,c
   933  000310  E004               	bz	u3690
   934  000312  0E02               	movlw	2
   935  000314  1840               	xorwf	_val^0,w,c
   936  000316  A4D8               	btfss	status,2,c
   937  000318  0012               	return	
   938  00031A                     u3690:
   939                           
   940                           ;Menu.c: 41:                     LcClear();
   941  00031A  EC31  F00B         	call	_LcClear	;wreg free
   942                           
   943                           ;Menu.c: 42:                     LcGotoXY(0,0);
   944  00031E  0E00               	movlw	0
   945  000320  6A61               	clrf	LcGotoXY@Row^0,c
   946  000322  ECB9  F007         	call	_LcGotoXY
   947                           
   948                           ;Menu.c: 43:                     KeSetMode(1);
   949  000326  0E01               	movlw	1
   950  000328  EC98  F00A         	call	_KeSetMode
   951                           
   952                           ;Menu.c: 44:                     LCDcol = LCDrow = 0;
   953  00032C  6A43               	clrf	_LCDrow^0,c
   954  00032E  6A42               	clrf	_LCDcol^0,c
   955                           
   956                           ;Menu.c: 45:                     state = 3;
   957  000330  0E03               	movlw	3
   958  000332  6E71               	movwf	menuMotor@state^0,c
   959  000334  0C03               	retlw	3
   960  000336                     l4161:
   961                           
   962                           ;Menu.c: 51:             displayMenu(1,0);
   963  000336  0E00               	movlw	0
   964  000338  6E6A               	movwf	displayMenu@row^0,c
   965  00033A  0E01               	movlw	1
   966  00033C  EC74  F005         	call	_displayMenu
   967                           
   968                           ;Menu.c: 52:             if (LCDrow == 2){
   969  000340  0E02               	movlw	2
   970  000342  1843               	xorwf	_LCDrow^0,w,c
   971  000344  A4D8               	btfss	status,2,c
   972  000346  0012               	return	
   973                           
   974                           ;Menu.c: 53:                 LCDrow = 0;
   975  000348  6A43               	clrf	_LCDrow^0,c
   976                           
   977                           ;Menu.c: 54:                 LCDcol = 5;
   978  00034A  0E05               	movlw	5
   979  00034C  6E42               	movwf	_LCDcol^0,c
   980                           
   981                           ;Menu.c: 55:                 LcGotoXY(LCDcol,LCDrow);
   982  00034E  DA3C               	call	PL58	;call to abstracted procedure
   983  000350  ECB9  F007         	call	_LcGotoXY
   984                           
   985                           ;Menu.c: 56:                 LcCursorOn();
   986  000354  EC4E  F00B         	call	_LcCursorOn	;wreg free
   987                           
   988                           ;Menu.c: 57:                 state = 4;
   989  000358  0E04               	movlw	4
   990  00035A  6E71               	movwf	menuMotor@state^0,c
   991  00035C  0C04               	retlw	4
   992  00035E                     l4173:
   993                           
   994                           ;Menu.c: 61:             if (LCDcol >= 12 && TiGetTics(timer) >= 1200){
   995  00035E  0E0B               	movlw	11
   996  000360  6442               	cpfsgt	_LCDcol^0,c
   997  000362  D00B               	goto	l4179
   998  000364  5044               	movf	_timer^0,w,c
   999  000366  EC85  F00A         	call	_TiGetTics
  1000  00036A  BE5A               	btfsc	(?_TiGetTics+1)^0,7,c
  1001  00036C  D006               	goto	l4179
  1002  00036E  ECB4  F007         	call	PL68	;call to abstracted procedure
  1003  000372  E303               	bnc	l4179
  1004  000374                     u3720:
  1005                           
  1006                           ;Menu.c: 62:                 state = 5;
  1007  000374  0E05               	movlw	5
  1008  000376  6E71               	movwf	menuMotor@state^0,c
  1009                           
  1010                           ;Menu.c: 63:             }else if (isPressed()){
  1011  000378  0C05               	retlw	5
  1012  00037A                     l4179:
  1013  00037A  EC25  F00B         	call	_isPressed	;wreg free
  1014  00037E  0900               	iorlw	0
  1015  000380  B4D8               	btfsc	status,2,c
  1016  000382  0012               	return	
  1017                           
  1018                           ;Menu.c: 64:                 TiResetTics(timer);
  1019  000384  5044               	movf	_timer^0,w,c
  1020  000386  EC0A  F00B         	call	_TiResetTics
  1021                           
  1022                           ;Menu.c: 65:                 if (getPresses() == 2){
  1023  00038A  EC77  F00B         	call	_getPresses	;wreg free
  1024  00038E  0A02               	xorlw	2
  1025  000390  E104               	bnz	l4189
  1026                           
  1027                           ;Menu.c: 66:                     LcGotoXY(LCDcol,LCDrow);
  1028  000392  DA1A               	call	PL58	;call to abstracted procedure
  1029  000394  ECB9  F007         	call	_LcGotoXY
  1030                           
  1031                           ;Menu.c: 67:                     LCDcol--;
  1032  000398  0642               	decf	_LCDcol^0,f,c
  1033  00039A                     l4189:
  1034                           
  1035                           ;Menu.c: 69:                 if (KeGetGenericValue() != '#'){
  1036  00039A  EC18  F00B         	call	_KeGetGenericValue	;wreg free
  1037  00039E  0A23               	xorlw	35
  1038  0003A0  E0E9               	bz	u3720
  1039                           
  1040                           ;Menu.c: 70:                     mUser.username[LCDcol-4] = KeGetCharValue();
  1041  0003A2  DA07               	call	PL50	;call to abstracted procedure
  1042  0003A4  EC5D  F00B         	call	_KeGetCharValue	;wreg free
  1043  0003A8  6EDF               	movwf	indf2,c
  1044                           
  1045                           ;Menu.c: 71:                     LcPutChar(mUser.username[LCDcol-4]);
  1046  0003AA  DA03               	call	PL50	;call to abstracted procedure
  1047  0003AC  50DF               	movf	indf2,w,c
  1048  0003AE  EC81  F009         	call	_LcPutChar
  1049  0003B2                     l4195:
  1050                           
  1051                           ;Menu.c: 72:                     LCDcol++;
  1052  0003B2  2A42               	incf	_LCDcol^0,f,c
  1053                           
  1054                           ;Menu.c: 76:                 } else {
  1055  0003B4  0012               	return	
  1056  0003B6                     l4199:
  1057                           
  1058                           ;Menu.c: 84:             mUser.username[LCDcol-4] = '\0';
  1059  0003B6  D9FD               	call	PL50	;call to abstracted procedure
  1060  0003B8  6ADF               	clrf	indf2,c
  1061                           
  1062                           ;Menu.c: 85:             LCDrow = 1;
  1063  0003BA  0E01               	movlw	1
  1064  0003BC  6E43               	movwf	_LCDrow^0,c
  1065                           
  1066                           ;Menu.c: 86:             LCDcol = 5;
  1067  0003BE  0E05               	movlw	5
  1068  0003C0  6E42               	movwf	_LCDcol^0,c
  1069                           
  1070                           ;Menu.c: 87:             KeSetMode(1);
  1071  0003C2  0E01               	movlw	1
  1072  0003C4  EC98  F00A         	call	_KeSetMode
  1073                           
  1074                           ;Menu.c: 88:             LcGotoXY(LCDcol,LCDrow);
  1075  0003C8  D9FF               	call	PL58	;call to abstracted procedure
  1076  0003CA  ECB9  F007         	call	_LcGotoXY
  1077                           
  1078                           ;Menu.c: 89:             state = 6;
  1079  0003CE  0E06               	movlw	6
  1080  0003D0  6E71               	movwf	menuMotor@state^0,c
  1081                           
  1082                           ;Menu.c: 90:             break;
  1083  0003D2  0C06               	retlw	6
  1084  0003D4                     l4211:
  1085                           
  1086                           ;Menu.c: 92:             if (isPressed()){
  1087  0003D4  EC25  F00B         	call	_isPressed	;wreg free
  1088  0003D8  0900               	iorlw	0
  1089  0003DA  B4D8               	btfsc	status,2,c
  1090  0003DC  0012               	return	
  1091                           
  1092                           ;Menu.c: 93:                 if (getPresses() == 2){
  1093  0003DE  EC77  F00B         	call	_getPresses	;wreg free
  1094  0003E2  0A02               	xorlw	2
  1095  0003E4  E104               	bnz	l4219
  1096                           
  1097                           ;Menu.c: 94:                     LcGotoXY(LCDcol,LCDrow);
  1098  0003E6  D9F0               	call	PL58	;call to abstracted procedure
  1099  0003E8  ECB9  F007         	call	_LcGotoXY
  1100                           
  1101                           ;Menu.c: 95:                     LCDcol--;
  1102  0003EC  0642               	decf	_LCDcol^0,f,c
  1103  0003EE                     l4219:
  1104                           
  1105                           ;Menu.c: 98:                 if (KeGetGenericValue() != '#'){
  1106  0003EE  EC18  F00B         	call	_KeGetGenericValue	;wreg free
  1107  0003F2  0A23               	xorlw	35
  1108  0003F4  E009               	bz	l4227
  1109                           
  1110                           ;Menu.c: 99:                     mUser.password[LCDcol-4] = KeGetCharValue();
  1111  0003F6  D9D8               	call	PL48	;call to abstracted procedure
  1112  0003F8  EC5D  F00B         	call	_KeGetCharValue	;wreg free
  1113  0003FC  6EDF               	movwf	indf2,c
  1114                           
  1115                           ;Menu.c: 100:                     LcPutChar(mUser.password[LCDcol-4]);
  1116  0003FE  D9D4               	call	PL48	;call to abstracted procedure
  1117  000400  50DF               	movf	indf2,w,c
  1118  000402  EC81  F009         	call	_LcPutChar
  1119  000406  D7D5               	goto	l4195
  1120  000408                     l4227:
  1121                           
  1122                           ;Menu.c: 103:                     mUser.password[LCDcol-4] = '\0';
  1123  000408  D9CF               	call	PL48	;call to abstracted procedure
  1124  00040A  6ADF               	clrf	indf2,c
  1125                           
  1126                           ;Menu.c: 104:                     state = 7;
  1127  00040C  0E07               	movlw	7
  1128  00040E  6E71               	movwf	menuMotor@state^0,c
  1129  000410  0C07               	retlw	7
  1130  000412                     l4231:
  1131                           
  1132                           ;Menu.c: 110:             if (val == 1){
  1133  000412  0440               	decf	_val^0,w,c
  1134  000414  E10C               	bnz	l4235
  1135                           
  1136                           ;Menu.c: 111:                 DaFindUser(mUser);
  1137  000416  EE20  F013         	lfsr	2,_mUser
  1138  00041A  EE00  F0CB         	lfsr	0,DaFindUser@logUser
  1139  00041E  0E11               	movlw	17
  1140  000420                     u3801:
  1141  000420  CFDB FFEB          	movff	plusw2,plusw0
  1142  000424  06E8               	decf	wreg,f,c
  1143  000426  E2FC               	bc	u3801
  1144  000428  ECAA  F00A         	call	_DaFindUser	;wreg free
  1145                           
  1146                           ;Menu.c: 113:             } else {
  1147  00042C  D00B               	goto	l4237
  1148  00042E                     l4235:
  1149                           
  1150                           ;Menu.c: 114:                 DaSaveUser(mUser);
  1151  00042E  EE20  F013         	lfsr	2,_mUser
  1152  000432  EE00  F059         	lfsr	0,DaSaveUser@regUser
  1153  000436  0E11               	movlw	17
  1154  000438                     u3811:
  1155  000438  CFDB FFEB          	movff	plusw2,plusw0
  1156  00043C  06E8               	decf	wreg,f,c
  1157  00043E  E2FC               	bc	u3811
  1158  000440  ECCD  F00A         	call	_DaSaveUser	;wreg free
  1159  000444                     l4237:
  1160                           
  1161                           ;Menu.c: 116:             state = 8;
  1162  000444  0E08               	movlw	8
  1163  000446  6E71               	movwf	menuMotor@state^0,c
  1164                           
  1165                           ;Menu.c: 117:             break;
  1166  000448  0C08               	retlw	8
  1167  00044A                     l4239:
  1168                           
  1169                           ;Menu.c: 119:             if (DaGetIdle()){
  1170  00044A  EC65  F00B         	call	_DaGetIdle	;wreg free
  1171  00044E  0900               	iorlw	0
  1172  000450  B4D8               	btfsc	status,2,c
  1173  000452  0012               	return	
  1174                           
  1175                           ;Menu.c: 120:                 if (val == 1){
  1176  000454  0440               	decf	_val^0,w,c
  1177  000456  E112               	bnz	l4255
  1178                           
  1179                           ;Menu.c: 121:                     KeSetMode(0);
  1180  000458  0E00               	movlw	0
  1181  00045A  EC98  F00A         	call	_KeSetMode
  1182                           
  1183                           ;Menu.c: 122:                     if (DaGetStatus() == 0){
  1184  00045E  EC7F  F00B         	call	_DaGetStatus	;wreg free
  1185  000462  0900               	iorlw	0
  1186  000464  E104               	bnz	l4251
  1187                           
  1188                           ;Menu.c: 124:                         state = 9;
  1189  000466  0E09               	movlw	9
  1190  000468  6E71               	movwf	menuMotor@state^0,c
  1191                           
  1192                           ;Menu.c: 125:                         val =0;
  1193  00046A  6A40               	clrf	_val^0,c
  1194                           
  1195                           ;Menu.c: 126:                     } else if (DaGetStatus() == 1){
  1196  00046C  D01B               	goto	l4269
  1197  00046E                     l4251:
  1198  00046E  EC7F  F00B         	call	_DaGetStatus	;wreg free
  1199  000472  06E8               	decf	wreg,f,c
  1200  000474  E117               	bnz	l4269
  1201  000476                     u3850:
  1202                           
  1203                           ;Menu.c: 127:                         state = 1;
  1204  000476  0E01               	movlw	1
  1205  000478  6E71               	movwf	menuMotor@state^0,c
  1206  00047A  D014               	goto	l4269
  1207  00047C                     l4255:
  1208                           
  1209                           ;Menu.c: 131:                     if (DaGetStatus() == 3){
  1210  00047C  EC7F  F00B         	call	_DaGetStatus	;wreg free
  1211  000480  0A03               	xorlw	3
  1212  000482  E108               	bnz	l4263
  1213                           
  1214                           ;Menu.c: 132:                         KeSetMode(1);
  1215  000484  0E01               	movlw	1
  1216  000486  EC98  F00A         	call	_KeSetMode
  1217                           
  1218                           ;Menu.c: 133:                         state = 3;
  1219  00048A  0E03               	movlw	3
  1220  00048C  6E71               	movwf	menuMotor@state^0,c
  1221                           
  1222                           ;Menu.c: 134:                         val = 1;
  1223  00048E  0E01               	movlw	1
  1224  000490  6E40               	movwf	_val^0,c
  1225                           
  1226                           ;Menu.c: 135:                     } else if (DaGetStatus() == 4){
  1227  000492  D008               	goto	l4269
  1228  000494                     l4263:
  1229  000494  EC7F  F00B         	call	_DaGetStatus	;wreg free
  1230  000498  0A04               	xorlw	4
  1231  00049A  E104               	bnz	l4269
  1232                           
  1233                           ;Menu.c: 136:                         KeSetMode(0);
  1234  00049C  0E00               	movlw	0
  1235  00049E  EC98  F00A         	call	_KeSetMode
  1236  0004A2  D7E9               	goto	u3850
  1237  0004A4                     l4269:
  1238                           
  1239                           ;Menu.c: 141:                 LcClear();
  1240  0004A4  EC31  F00B         	call	_LcClear	;wreg free
  1241                           
  1242                           ;Menu.c: 142:                 LcGotoXY(0,0);
  1243  0004A8  0E00               	movlw	0
  1244  0004AA  6A61               	clrf	LcGotoXY@Row^0,c
  1245  0004AC  ECB9  F007         	call	_LcGotoXY
  1246  0004B0                     l4273:
  1247                           
  1248                           ;Menu.c: 143:                 LCDcol = LCDrow = 0;
  1249  0004B0  6A43               	clrf	_LCDrow^0,c
  1250  0004B2  6A42               	clrf	_LCDcol^0,c
  1251  0004B4  0012               	return	
  1252  0004B6                     l4275:
  1253                           
  1254                           ;Menu.c: 148:             displayMenu(2,val);
  1255  0004B6  C040  F06A         	movff	_val,displayMenu@row
  1256  0004BA  0E02               	movlw	2
  1257  0004BC  EC74  F005         	call	_displayMenu
  1258                           
  1259                           ;Menu.c: 149:             if (LCDrow == 2 || LCDrow+val >= 4){
  1260  0004C0  0E02               	movlw	2
  1261  0004C2  1843               	xorwf	_LCDrow^0,w,c
  1262  0004C4  E00F               	bz	u3890
  1263  0004C6  5040               	movf	_val^0,w,c
  1264  0004C8  C043  F06F         	movff	_LCDrow,??_menuMotor
  1265  0004CC  6A70               	clrf	(??_menuMotor+1)^0,c
  1266  0004CE  266F               	addwf	??_menuMotor^0,f,c
  1267  0004D0  0E00               	movlw	0
  1268  0004D2  2270               	addwfc	(??_menuMotor+1)^0,f,c
  1269  0004D4  BE70               	btfsc	(??_menuMotor+1)^0,7,c
  1270  0004D6  0C00               	retlw	0
  1271  0004D8  5070               	movf	(??_menuMotor+1)^0,w,c
  1272  0004DA  E104               	bnz	u3890
  1273  0004DC  0E04               	movlw	4
  1274  0004DE  5C6F               	subwf	??_menuMotor^0,w,c
  1275  0004E0  A0D8               	btfss	status,0,c
  1276  0004E2  0012               	return	
  1277  0004E4                     u3890:
  1278                           
  1279                           ;Menu.c: 150:                 LcCursorOff();
  1280  0004E4  EC53  F00B         	call	_LcCursorOff	;wreg free
  1281                           
  1282                           ;Menu.c: 151:                 state = 10;
  1283  0004E8  0E0A               	movlw	10
  1284  0004EA  6E71               	movwf	menuMotor@state^0,c
  1285  0004EC  0C0A               	retlw	10
  1286  0004EE                     l4285:
  1287                           
  1288                           ;Menu.c: 155:             if (!JoMoved()){
  1289  0004EE  EC7B  F00B         	call	_JoMoved	;wreg free
  1290  0004F2  0900               	iorlw	0
  1291  0004F4  A4D8               	btfss	status,2,c
  1292  0004F6  0012               	return	
  1293                           
  1294                           ;Menu.c: 156:                 state = 11;
  1295  0004F8  0E0B               	movlw	11
  1296  0004FA  D0A9               	goto	L1
  1297  0004FC                     l4289:
  1298                           
  1299                           ;Menu.c: 157:                 TiResetTics(timer);
  1300  0004FC  5044               	movf	_timer^0,w,c
  1301  0004FE  EF0A  F00B         	goto	_TiResetTics
  1302  000502                     l4291:
  1303                           
  1304                           ;Menu.c: 161:             if (TiGetTics(timer) >= 600){
  1305  000502  5044               	movf	_timer^0,w,c
  1306  000504  EC85  F00A         	call	_TiGetTics
  1307  000508  BE5A               	btfsc	(?_TiGetTics+1)^0,7,c
  1308  00050A  D016               	goto	l4303
  1309  00050C  0E58               	movlw	88
  1310  00050E  5C59               	subwf	?_TiGetTics^0,w,c
  1311  000510  0E02               	movlw	2
  1312  000512  585A               	subwfb	(?_TiGetTics+1)^0,w,c
  1313  000514  E311               	bnc	l4303
  1314                           
  1315                           ;Menu.c: 162:                 LCDcolm++;
  1316  000516  2A41               	incf	_LCDcolm^0,f,c
  1317                           
  1318                           ;Menu.c: 163:                 LCDcolm = LCDcolm % MAINMENUSIZE[2];
  1319  000518  0E31               	movlw	low (_MAINMENUSIZE+2)
  1320  00051A  6EF6               	movwf	tblptrl,c
  1321  00051C                     	if	1	;There is more than 1 active tblptr byte
  1322  00051C  0E02               	movlw	high __smallconst
  1323  00051E  6EF7               	movwf	tblptrh,c
  1324  000520                     	endif
  1325  000520                     	if	0	;tblptru may be non-zero
  1326  000520                     	endif
  1327  000520                     	if	0	;tblptru may be non-zero
  1328  000520                     	endif
  1329  000520  0008               	tblrd		*
  1330  000522  CFF5 F059          	movff	tablat,___lbmod@divisor
  1331  000526  5041               	movf	_LCDcolm^0,w,c
  1332  000528  EC72  F00A         	call	___lbmod
  1333  00052C  6E41               	movwf	_LCDcolm^0,c
  1334  00052E                     l4297:
  1335                           
  1336                           ;Menu.c: 164:                 state = 9;
  1337  00052E  0E09               	movlw	9
  1338  000530  6E71               	movwf	menuMotor@state^0,c
  1339                           
  1340                           ;Menu.c: 165:                 LcClear();
  1341  000532  EC31  F00B         	call	_LcClear	;wreg free
  1342  000536  D7BC               	goto	l4273
  1343  000538                     l4303:
  1344  000538  EC7B  F00B         	call	_JoMoved	;wreg free
  1345  00053C  0900               	iorlw	0
  1346  00053E  E011               	bz	l4323
  1347                           
  1348                           ;Menu.c: 168:                 if (JoDirection() == 'S' && val < 4){
  1349  000540  EC7D  F00B         	call	_JoDirection	;wreg free
  1350  000544  0A53               	xorlw	83
  1351  000546  E105               	bnz	l4311
  1352  000548  0E04               	movlw	4
  1353  00054A  6040               	cpfslt	_val^0,c
  1354  00054C  D002               	goto	l4311
  1355                           
  1356                           ;Menu.c: 169:                     val++;
  1357  00054E  2A40               	incf	_val^0,f,c
  1358                           
  1359                           ;Menu.c: 170:                 } else if(JoDirection() == 'W' && val > 0){
  1360  000550  D7EE               	goto	l4297
  1361  000552                     l4311:
  1362  000552  EC7D  F00B         	call	_JoDirection	;wreg free
  1363  000556  0A57               	xorlw	87
  1364  000558  E1EA               	bnz	l4297
  1365  00055A  5040               	movf	_val^0,w,c
  1366  00055C  E0E8               	bz	l4297
  1367                           
  1368                           ;Menu.c: 171:                     val--;
  1369  00055E  0640               	decf	_val^0,f,c
  1370  000560  D7E6               	goto	l4297
  1371  000562                     l4323:
  1372  000562  EC25  F00B         	call	_isPressed	;wreg free
  1373  000566  0900               	iorlw	0
  1374  000568  B4D8               	btfsc	status,2,c
  1375  00056A  0012               	return	
  1376  00056C  EC18  F00B         	call	_KeGetGenericValue	;wreg free
  1377  000570  0A23               	xorlw	35
  1378  000572  A4D8               	btfss	status,2,c
  1379  000574  0012               	return	
  1380                           
  1381                           ;Menu.c: 177:                 if (val == 0){
  1382  000576  5040               	movf	_val^0,w,c
  1383  000578  E104               	bnz	l4333
  1384                           
  1385                           ;Menu.c: 178:                     val = 0;
  1386  00057A  6A40               	clrf	_val^0,c
  1387                           
  1388                           ;Menu.c: 179:                     state = 12;
  1389  00057C  0E0C               	movlw	12
  1390  00057E  6E71               	movwf	menuMotor@state^0,c
  1391                           
  1392                           ;Menu.c: 180:                 }else {
  1393  000580  0C0C               	retlw	12
  1394  000582                     l4333:
  1395                           
  1396                           ;Menu.c: 181:                    state = (val+1)*20;
  1397  000582  2840               	incf	_val^0,w,c
  1398  000584  0D14               	mullw	20
  1399  000586  CFF3 F071          	movff	prodl,menuMotor@state
  1400  00058A  0012               	return	
  1401  00058C                     l4335:
  1402                           
  1403                           ;Menu.c: 191:             if (SiIsAvailable()){
  1404  00058C  EC74  F00B         	call	_SiIsAvailable	;wreg free
  1405  000590  0900               	iorlw	0
  1406  000592  B4D8               	btfsc	status,2,c
  1407  000594  0012               	return	
  1408                           
  1409                           ;Menu.c: 192:                 SiSendChar(mUser.username[val]);
  1410  000596  D912               	call	PL56	;call to abstracted procedure
  1411  000598  EC69  F00B         	call	_SiSendChar
  1412                           
  1413                           ;Menu.c: 193:                 if (mUser.username[val] == '\0'){
  1414  00059C  D90F               	call	PL56	;call to abstracted procedure
  1415  00059E  E103               	bnz	l4343
  1416                           
  1417                           ;Menu.c: 194:                     state = 13;
  1418  0005A0  0E0D               	movlw	13
  1419  0005A2  6E71               	movwf	menuMotor@state^0,c
  1420                           
  1421                           ;Menu.c: 195:                 } else {
  1422  0005A4  0C0D               	retlw	13
  1423  0005A6                     l4343:
  1424                           
  1425                           ;Menu.c: 196:                     val++;
  1426  0005A6  2A40               	incf	_val^0,f,c
  1427  0005A8  0012               	return	
  1428  0005AA                     l4345:
  1429                           
  1430                           ;Menu.c: 201:             if (SiRecievedByte()){
  1431  0005AA  EC71  F00B         	call	_SiRecievedByte	;wreg free
  1432  0005AE  0900               	iorlw	0
  1433  0005B0  B4D8               	btfsc	status,2,c
  1434  0005B2  0012               	return	
  1435                           
  1436                           ;Menu.c: 202:                 val = SiReadByte();
  1437  0005B4  EC79  F00B         	call	_SiReadByte	;wreg free
  1438  0005B8  6E40               	movwf	_val^0,c
  1439                           
  1440                           ;Menu.c: 203:                 if (val == 'K'){
  1441  0005BA  0E4B               	movlw	75
  1442  0005BC  1840               	xorwf	_val^0,w,c
  1443  0005BE  A4D8               	btfss	status,2,c
  1444  0005C0  0012               	return	
  1445                           
  1446                           ;Menu.c: 204:                     state = 14;
  1447  0005C2  0E0E               	movlw	14
  1448  0005C4  6E71               	movwf	menuMotor@state^0,c
  1449                           
  1450                           ;Menu.c: 205:                     JoSetMode(1);
  1451  0005C6  0E01               	movlw	1
  1452  0005C8  EF61  F00B         	goto	_JoSetMode
  1453  0005CC                     l4355:
  1454                           
  1455                           ;Menu.c: 211:             displayMenu(3,0);
  1456  0005CC  D901               	call	PL72	;call to abstracted procedure
  1457  0005CE  EC74  F005         	call	_displayMenu
  1458                           
  1459                           ;Menu.c: 212:             if (LCDrow == 2){
  1460  0005D2  0E02               	movlw	2
  1461  0005D4  1843               	xorwf	_LCDrow^0,w,c
  1462  0005D6  A4D8               	btfss	status,2,c
  1463  0005D8  0012               	return	
  1464                           
  1465                           ;Menu.c: 213:                 LcCursorOff();
  1466  0005DA  EC53  F00B         	call	_LcCursorOff	;wreg free
  1467  0005DE                     l4361:
  1468                           
  1469                           ;Menu.c: 214:                 state = 15;
  1470  0005DE  0E0F               	movlw	15
  1471  0005E0  6E71               	movwf	menuMotor@state^0,c
  1472  0005E2  0C0F               	retlw	15
  1473  0005E4                     l4363:
  1474                           
  1475                           ;Menu.c: 218:             if (isPressed()){
  1476  0005E4  EC25  F00B         	call	_isPressed	;wreg free
  1477  0005E8  0900               	iorlw	0
  1478  0005EA  B4D8               	btfsc	status,2,c
  1479  0005EC  0012               	return	
  1480                           
  1481                           ;Menu.c: 219:                 val = KeGetGenericValue();
  1482  0005EE  EC18  F00B         	call	_KeGetGenericValue	;wreg free
  1483  0005F2  6E40               	movwf	_val^0,c
  1484                           
  1485                           ;Menu.c: 220:                 if (val == '*' || val == '#'){
  1486  0005F4  0E2A               	movlw	42
  1487  0005F6  1840               	xorwf	_val^0,w,c
  1488  0005F8  E003               	bz	u4070
  1489  0005FA  0E23               	movlw	35
  1490  0005FC  1840               	xorwf	_val^0,w,c
  1491  0005FE  E107               	bnz	l4375
  1492  000600                     u4070:
  1493                           
  1494                           ;Menu.c: 221:                     if (val == '*'){
  1495  000600  0E2A               	movlw	42
  1496  000602  1840               	xorwf	_val^0,w,c
  1497  000604  A4D8               	btfss	status,2,c
  1498  000606  0012               	return	
  1499                           
  1500                           ;Menu.c: 222:                         state = 17;
  1501  000608  0E11               	movlw	17
  1502  00060A  6E71               	movwf	menuMotor@state^0,c
  1503  00060C  0C11               	retlw	17
  1504  00060E                     l4375:
  1505                           
  1506                           ;Menu.c: 225:                     state = 16;
  1507  00060E  0E10               	movlw	16
  1508  000610  6E71               	movwf	menuMotor@state^0,c
  1509  000612  0C10               	retlw	16
  1510  000614                     l4377:
  1511                           
  1512                           ;Menu.c: 231:             if (SiIsAvailable()){
  1513  000614  EC74  F00B         	call	_SiIsAvailable	;wreg free
  1514  000618  0900               	iorlw	0
  1515  00061A  B4D8               	btfsc	status,2,c
  1516  00061C  0012               	return	
  1517                           
  1518                           ;Menu.c: 232:                 SiSendChar(val);
  1519  00061E  5040               	movf	_val^0,w,c
  1520  000620  EC69  F00B         	call	_SiSendChar
  1521  000624  D7DC               	goto	l4361
  1522  000626                     l4383:
  1523                           
  1524                           ;Menu.c: 237:             if (SiIsAvailable()){
  1525  000626  EC74  F00B         	call	_SiIsAvailable	;wreg free
  1526  00062A  0900               	iorlw	0
  1527  00062C  B4D8               	btfsc	status,2,c
  1528  00062E  0012               	return	
  1529                           
  1530                           ;Menu.c: 238:                 SiSendChar('F');
  1531  000630  0E46               	movlw	70
  1532  000632  EC69  F00B         	call	_SiSendChar
  1533                           
  1534                           ;Menu.c: 239:                 state = 18;
  1535  000636  0E12               	movlw	18
  1536  000638  6E71               	movwf	menuMotor@state^0,c
  1537  00063A  0C12               	retlw	18
  1538  00063C                     l4389:
  1539                           
  1540                           ;Menu.c: 243:             if (SiRecievedByte()){
  1541  00063C  EC71  F00B         	call	_SiRecievedByte	;wreg free
  1542  000640  0900               	iorlw	0
  1543  000642  B4D8               	btfsc	status,2,c
  1544  000644  0012               	return	
  1545                           
  1546                           ;Menu.c: 244:                 mScore = SiReadByte();
  1547  000646  EC79  F00B         	call	_SiReadByte	;wreg free
  1548  00064A  6E3F               	movwf	_mScore^0,c
  1549                           
  1550                           ;Menu.c: 245:                 state = 20;
  1551  00064C  0E14               	movlw	20
  1552  00064E                     L1:
  1553  00064E  6E71               	movwf	menuMotor@state^0,c
  1554  000650  D755               	goto	l4289
  1555  000652                     l4397:
  1556                           
  1557                           ;Menu.c: 250:             displayMenu(3,0);
  1558  000652  D8BE               	call	PL72	;call to abstracted procedure
  1559  000654  EC74  F005         	call	_displayMenu
  1560                           
  1561                           ;Menu.c: 251:             if(LCDrow == 2){
  1562  000658  0E02               	movlw	2
  1563  00065A  1843               	xorwf	_LCDrow^0,w,c
  1564  00065C  A4D8               	btfss	status,2,c
  1565  00065E  0012               	return	
  1566                           
  1567                           ;Menu.c: 252:                 state = 20;
  1568  000660  0E14               	movlw	20
  1569  000662  6E71               	movwf	menuMotor@state^0,c
  1570  000664  0C14               	retlw	20
  1571  000666                     l4403:
  1572                           
  1573                           ;Menu.c: 256:             if (TiGetTics(timer) >= 1200*3){
  1574  000666  5044               	movf	_timer^0,w,c
  1575  000668  EC85  F00A         	call	_TiGetTics
  1576  00066C  BE5A               	btfsc	(?_TiGetTics+1)^0,7,c
  1577  00066E  D00E               	goto	l4413
  1578  000670  0E10               	movlw	16
  1579  000672  5C59               	subwf	?_TiGetTics^0,w,c
  1580  000674  0E0E               	movlw	14
  1581  000676  585A               	subwfb	(?_TiGetTics+1)^0,w,c
  1582  000678  E309               	bnc	l4413
  1583                           
  1584                           ;Menu.c: 257:                 state = 22;
  1585  00067A  0E16               	movlw	22
  1586  00067C  6E71               	movwf	menuMotor@state^0,c
  1587                           
  1588                           ;Menu.c: 258:                 LcClear();
  1589  00067E  EC31  F00B         	call	_LcClear	;wreg free
  1590  000682  D043               	goto	L2
  1591  000684                     l4411:
  1592                           
  1593                           ;Menu.c: 260:                 LcGotoXY(0,0);
  1594  000684  0E00               	movlw	0
  1595  000686  6A61               	clrf	LcGotoXY@Row^0,c
  1596  000688  EFB9  F007         	goto	_LcGotoXY
  1597  00068C                     l4413:
  1598  00068C  EC71  F00B         	call	_SiRecievedByte	;wreg free
  1599  000690  0900               	iorlw	0
  1600  000692  B4D8               	btfsc	status,2,c
  1601  000694  0012               	return	
  1602                           
  1603                           ;Menu.c: 262:                 val = SiReadByte();
  1604  000696  EC79  F00B         	call	_SiReadByte	;wreg free
  1605  00069A  6E40               	movwf	_val^0,c
  1606                           
  1607                           ;Menu.c: 263:                 state = 21;
  1608  00069C  0E15               	movlw	21
  1609  00069E  6E71               	movwf	menuMotor@state^0,c
  1610  0006A0  0C15               	retlw	21
  1611  0006A2                     l4419:
  1612                           
  1613                           ;Menu.c: 267:             if (SiRecievedByte()){
  1614  0006A2  EC71  F00B         	call	_SiRecievedByte	;wreg free
  1615  0006A6  0900               	iorlw	0
  1616  0006A8  B4D8               	btfsc	status,2,c
  1617  0006AA  0012               	return	
  1618                           
  1619                           ;Menu.c: 268:                 LCDcolm = SiReadByte();
  1620  0006AC  EC79  F00B         	call	_SiReadByte	;wreg free
  1621  0006B0  6E41               	movwf	_LCDcolm^0,c
  1622                           
  1623                           ;Menu.c: 269:                 state = 19;
  1624  0006B2  0E13               	movlw	19
  1625  0006B4  6E71               	movwf	menuMotor@state^0,c
  1626                           
  1627                           ;Menu.c: 270:                 LcClear();
  1628  0006B6  EC31  F00B         	call	_LcClear	;wreg free
  1629  0006BA  D027               	goto	L2
  1630  0006BC                     l4431:
  1631                           
  1632                           ;Menu.c: 276:             displayMenu(4,0);
  1633  0006BC  0E00               	movlw	0
  1634  0006BE  6E6A               	movwf	displayMenu@row^0,c
  1635  0006C0  0E04               	movlw	4
  1636  0006C2  EC74  F005         	call	_displayMenu
  1637                           
  1638                           ;Menu.c: 277:             if(LCDrow == 2){
  1639  0006C6  0E02               	movlw	2
  1640  0006C8  1843               	xorwf	_LCDrow^0,w,c
  1641  0006CA  A4D8               	btfss	status,2,c
  1642  0006CC  0012               	return	
  1643                           
  1644                           ;Menu.c: 278:                 state = 23;
  1645  0006CE  0E17               	movlw	23
  1646  0006D0  6E71               	movwf	menuMotor@state^0,c
  1647  0006D2  0C17               	retlw	23
  1648  0006D4                     l4437:
  1649                           
  1650                           ;Menu.c: 282:             if (isPressed() && KeGetGenericValue() == '#'){
  1651  0006D4  EC25  F00B         	call	_isPressed	;wreg free
  1652  0006D8  0900               	iorlw	0
  1653  0006DA  B4D8               	btfsc	status,2,c
  1654  0006DC  0012               	return	
  1655  0006DE  EC18  F00B         	call	_KeGetGenericValue	;wreg free
  1656  0006E2  0A23               	xorlw	35
  1657  0006E4  A4D8               	btfss	status,2,c
  1658  0006E6  0012               	return	
  1659                           
  1660                           ;Menu.c: 283:                 DaSaveScore(mScore);
  1661  0006E8  503F               	movf	_mScore^0,w,c
  1662  0006EA  EC46  F00B         	call	_DaSaveScore
  1663                           
  1664                           ;Menu.c: 284:                 state = 24;
  1665  0006EE  0E18               	movlw	24
  1666  0006F0  6E71               	movwf	menuMotor@state^0,c
  1667  0006F2  0C18               	retlw	24
  1668  0006F4                     l4445:
  1669                           
  1670                           ;Menu.c: 288:             if (DaGetIdle()){
  1671  0006F4  EC65  F00B         	call	_DaGetIdle	;wreg free
  1672  0006F8  0900               	iorlw	0
  1673  0006FA  B4D8               	btfsc	status,2,c
  1674  0006FC  0012               	return	
  1675                           
  1676                           ;Menu.c: 289:                 state = 9;
  1677  0006FE  0E09               	movlw	9
  1678  000700  6E71               	movwf	menuMotor@state^0,c
  1679                           
  1680                           ;Menu.c: 290:                 LcClear();
  1681  000702  EC31  F00B         	call	_LcClear	;wreg free
  1682                           
  1683                           ;Menu.c: 291:                 LCDcol = LCDrow = val = LCDcolm = 0;
  1684  000706  6A41               	clrf	_LCDcolm^0,c
  1685  000708  6A40               	clrf	_val^0,c
  1686  00070A                     L2:
  1687  00070A  6A43               	clrf	_LCDrow^0,c
  1688  00070C  6A42               	clrf	_LCDcol^0,c
  1689  00070E  D7BA               	goto	l4411
  1690  000710                     l4457:
  1691  000710  5071               	movf	menuMotor@state^0,w,c
  1692  000712  6E6F               	movwf	??_menuMotor^0,c
  1693  000714  6A70               	clrf	(??_menuMotor+1)^0,c
  1694                           
  1695                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1696                           ; Switch size 1, requested type "space"
  1697                           ; Number of cases is 1, Range of values is 0 to 0
  1698                           ; switch strategies available:
  1699                           ; Name         Instructions Cycles
  1700                           ; simple_byte            4     3 (average)
  1701                           ;	Chosen strategy is simple_byte
  1702  000716  5070               	movf	(??_menuMotor+1)^0,w,c
  1703  000718  A4D8               	btfss	status,2,c
  1704  00071A  0012               	return	
  1705                           
  1706                           ; Switch size 1, requested type "space"
  1707                           ; Number of cases is 24, Range of values is 1 to 24
  1708                           ; switch strategies available:
  1709                           ; Name         Instructions Cycles
  1710                           ; simple_byte           73    37 (average)
  1711                           ;	Chosen strategy is simple_byte
  1712  00071C  506F               	movf	??_menuMotor^0,w,c
  1713  00071E  0A01               	xorlw	1	; case 1
  1714  000720  E101 D5DC          	bz	l4139
  1715  000724  0A03               	xorlw	3	; case 2
  1716  000726  E101 D5E9          	bz	l4147
  1717  00072A  0A01               	xorlw	1	; case 3
  1718  00072C  E101 D603          	bz	l4161
  1719  000730  0A07               	xorlw	7	; case 4
  1720  000732  E101 D614          	bz	l4173
  1721  000736  0A01               	xorlw	1	; case 5
  1722  000738  E101 D63D          	bz	l4199
  1723  00073C  0A03               	xorlw	3	; case 6
  1724  00073E  E101 D649          	bz	l4211
  1725  000742  0A01               	xorlw	1	; case 7
  1726  000744  E101 D665          	bz	l4231
  1727  000748  0A0F               	xorlw	15	; case 8
  1728  00074A  E101 D67E          	bz	l4239
  1729  00074E  0A01               	xorlw	1	; case 9
  1730  000750  E101 D6B1          	bz	l4275
  1731  000754  0A03               	xorlw	3	; case 10
  1732  000756  E101 D6CA          	bz	l4285
  1733  00075A  0A01               	xorlw	1	; case 11
  1734  00075C  E101 D6D1          	bz	l4291
  1735  000760  0A07               	xorlw	7	; case 12
  1736  000762  E101 D713          	bz	l4335
  1737  000766  0A01               	xorlw	1	; case 13
  1738  000768  E101 D71F          	bz	l4345
  1739  00076C  0A03               	xorlw	3	; case 14
  1740  00076E  E101 D72D          	bz	l4355
  1741  000772  0A01               	xorlw	1	; case 15
  1742  000774  E101 D736          	bz	l4363
  1743  000778  0A1F               	xorlw	31	; case 16
  1744  00077A  E101 D74B          	bz	l4377
  1745  00077E  0A01               	xorlw	1	; case 17
  1746  000780  E101 D751          	bz	l4383
  1747  000784  0A03               	xorlw	3	; case 18
  1748  000786  E101 D759          	bz	l4389
  1749  00078A  0A01               	xorlw	1	; case 19
  1750  00078C  E101 D761          	bz	l4397
  1751  000790  0A07               	xorlw	7	; case 20
  1752  000792  E101 D768          	bz	l4403
  1753  000796  0A01               	xorlw	1	; case 21
  1754  000798  E084               	bz	l4419
  1755  00079A  0A03               	xorlw	3	; case 22
  1756  00079C  E08F               	bz	l4431
  1757  00079E  0A01               	xorlw	1	; case 23
  1758  0007A0  E099               	bz	l4437
  1759  0007A2  0A0F               	xorlw	15	; case 24
  1760  0007A4  E0A7               	bz	l4445
  1761  0007A6  0012               	return		;funcret
  1762  0007A8                     __end_of_menuMotor:
  1763                           	callstack 0
  1764  0007A8                     PL48:
  1765                           	callstack 23
  1766  0007A8  5042               	movf	_LCDcol^0,w,c
  1767  0007AA  0F18               	addlw	low (_mUser+5)
  1768  0007AC  6ED9               	movwf	fsr2l,c
  1769  0007AE  6ADA               	clrf	fsr2h,c
  1770  0007B0  0012               	return	
  1771  0007B2                     __end_ofPL48:
  1772                           	callstack 0
  1773  0007B2                     PL50:
  1774                           	callstack 23
  1775  0007B2  5042               	movf	_LCDcol^0,w,c
  1776  0007B4  0F0F               	addlw	low (_mUser+252)
  1777  0007B6  6ED9               	movwf	fsr2l,c
  1778  0007B8  6ADA               	clrf	fsr2h,c
  1779  0007BA  0012               	return	
  1780  0007BC                     __end_ofPL50:
  1781                           	callstack 0
  1782  0007BC                     PL56:
  1783                           	callstack 23
  1784  0007BC  5040               	movf	_val^0,w,c
  1785  0007BE  0F13               	addlw	low _mUser
  1786  0007C0  6ED9               	movwf	fsr2l,c
  1787  0007C2  6ADA               	clrf	fsr2h,c
  1788  0007C4  50DF               	movf	indf2,w,c
  1789  0007C6  0012               	return	
  1790  0007C8                     __end_ofPL56:
  1791                           	callstack 0
  1792  0007C8                     PL58:
  1793                           	callstack 23
  1794  0007C8  C043  F061         	movff	_LCDrow,LcGotoXY@Row
  1795  0007CC  5042               	movf	_LCDcol^0,w,c
  1796  0007CE  0012               	return	
  1797  0007D0                     __end_ofPL58:
  1798                           	callstack 0
  1799  0007D0                     PL72:
  1800                           	callstack 23
  1801  0007D0  0E00               	movlw	0
  1802  0007D2  6E6A               	movwf	displayMenu@row^0,c
  1803  0007D4  0C03               	retlw	3
  1804  0007D6                     __end_ofPL72:
  1805                           	callstack 0
  1806                           
  1807 ;; *************** function _isPressed *****************
  1808 ;; Defined at:
  1809 ;;		line 207 in file "keypad.c"
  1810 ;; Parameters:    Size  Location     Type
  1811 ;;		None
  1812 ;; Auto vars:     Size  Location     Type
  1813 ;;		None
  1814 ;; Return value:  Size  Location     Type
  1815 ;;                  1    wreg      unsigned char 
  1816 ;; Registers used:
  1817 ;;		wreg, status,2, status,0
  1818 ;; Tracked objects:
  1819 ;;		On entry : 0/0
  1820 ;;		On exit  : 0/0
  1821 ;;		Unchanged: 0/0
  1822 ;; Data sizes:     COMRAM   BANK0   BANK1
  1823 ;;      Params:         0       0       0
  1824 ;;      Locals:         1       0       0
  1825 ;;      Temps:          0       0       0
  1826 ;;      Totals:         1       0       0
  1827 ;;Total ram usage:        1 bytes
  1828 ;; Hardware stack levels used: 1
  1829 ;; Hardware stack levels required when called: 2
  1830 ;; This function calls:
  1831 ;;		Nothing
  1832 ;; This function is called by:
  1833 ;;		_menuMotor
  1834 ;; This function uses a non-reentrant model
  1835 ;;
  1836                           
  1837                           	psect	text2
  1838  00164A                     __ptext2:
  1839                           	callstack 0
  1840  00164A                     _isPressed:
  1841                           	callstack 27
  1842                           
  1843                           ;keypad.c: 209:  return pressed && (stateSMS == 1||stateSMS == 4);
  1844                           
  1845                           ;incstack = 0
  1846  00164A  6A59               	clrf	_isPressed$522^0,c
  1847  00164C  504D               	movf	_pressed^0,w,c
  1848  00164E  E007               	bz	l181
  1849  001650  0449               	decf	_stateSMS^0,w,c
  1850  001652  E003               	bz	u2430
  1851  001654  0E04               	movlw	4
  1852  001656  1849               	xorwf	_stateSMS^0,w,c
  1853  001658  E102               	bnz	l181
  1854  00165A                     u2430:
  1855  00165A  0E01               	movlw	1
  1856  00165C  6E59               	movwf	_isPressed$522^0,c
  1857  00165E                     l181:
  1858  00165E  5059               	movf	_isPressed$522^0,w,c
  1859  001660  0012               	return		;funcret
  1860  001662                     __end_of_isPressed:
  1861                           	callstack 0
  1862                           
  1863 ;; *************** function _getPresses *****************
  1864 ;; Defined at:
  1865 ;;		line 242 in file "keypad.c"
  1866 ;; Parameters:    Size  Location     Type
  1867 ;;		None
  1868 ;; Auto vars:     Size  Location     Type
  1869 ;;		None
  1870 ;; Return value:  Size  Location     Type
  1871 ;;                  1    wreg      unsigned char 
  1872 ;; Registers used:
  1873 ;;		wreg, status,2
  1874 ;; Tracked objects:
  1875 ;;		On entry : 0/0
  1876 ;;		On exit  : 0/0
  1877 ;;		Unchanged: 0/0
  1878 ;; Data sizes:     COMRAM   BANK0   BANK1
  1879 ;;      Params:         0       0       0
  1880 ;;      Locals:         0       0       0
  1881 ;;      Temps:          0       0       0
  1882 ;;      Totals:         0       0       0
  1883 ;;Total ram usage:        0 bytes
  1884 ;; Hardware stack levels used: 1
  1885 ;; Hardware stack levels required when called: 2
  1886 ;; This function calls:
  1887 ;;		Nothing
  1888 ;; This function is called by:
  1889 ;;		_menuMotor
  1890 ;; This function uses a non-reentrant model
  1891 ;;
  1892                           
  1893                           	psect	text3
  1894  0016EE                     __ptext3:
  1895                           	callstack 0
  1896  0016EE                     _getPresses:
  1897                           	callstack 27
  1898                           
  1899                           ;keypad.c: 243:     return available;
  1900                           
  1901                           ;incstack = 0
  1902  0016EE  504B               	movf	_available^0,w,c
  1903  0016F0  0012               	return		;funcret
  1904  0016F2                     __end_of_getPresses:
  1905                           	callstack 0
  1906                           
  1907 ;; *************** function _displayMenu *****************
  1908 ;; Defined at:
  1909 ;;		line 300 in file "Menu.c"
  1910 ;; Parameters:    Size  Location     Type
  1911 ;;  menuMode        1    wreg     unsigned char 
  1912 ;;  row             1   22[COMRAM] unsigned char 
  1913 ;; Auto vars:     Size  Location     Type
  1914 ;;  menuMode        1   26[COMRAM] unsigned char 
  1915 ;; Return value:  Size  Location     Type
  1916 ;;                  1    wreg      void 
  1917 ;; Registers used:
  1918 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1919 ;; Tracked objects:
  1920 ;;		On entry : 0/0
  1921 ;;		On exit  : 0/0
  1922 ;;		Unchanged: 0/0
  1923 ;; Data sizes:     COMRAM   BANK0   BANK1
  1924 ;;      Params:         1       0       0
  1925 ;;      Locals:         1       0       0
  1926 ;;      Temps:          3       0       0
  1927 ;;      Totals:         5       0       0
  1928 ;;Total ram usage:        5 bytes
  1929 ;; Hardware stack levels used: 1
  1930 ;; Hardware stack levels required when called: 6
  1931 ;; This function calls:
  1932 ;;		_LcGotoXY
  1933 ;;		_LcPutChar
  1934 ;;		___awmod
  1935 ;; This function is called by:
  1936 ;;		_menuMotor
  1937 ;; This function uses a non-reentrant model
  1938 ;;
  1939                           
  1940                           	psect	text4
  1941  000AE8                     __ptext4:
  1942                           	callstack 0
  1943  000AE8                     _displayMenu:
  1944                           	callstack 23
  1945                           
  1946                           ;incstack = 0
  1947                           ;displayMenu@menuMode stored from wreg
  1948  000AE8  6E6E               	movwf	displayMenu@menuMode^0,c
  1949                           
  1950                           ;Menu.c: 301:     if (menuMode == 0){
  1951  000AEA  506E               	movf	displayMenu@menuMode^0,w,c
  1952  000AEC  E10E               	bnz	l3191
  1953                           
  1954                           ;Menu.c: 302:         if (LOGINMENU[LCDrow][LCDcol] != '\0'){
  1955  000AEE  D888               	call	PL22	;call to abstracted procedure
  1956  000AF0  D866               	call	PL6	;call to abstracted procedure
  1957  000AF2  E006               	bz	l3185
  1958                           
  1959                           ;Menu.c: 303:             LcPutChar(LOGINMENU[LCDrow][LCDcol]);
  1960  000AF4  D885               	call	PL22	;call to abstracted procedure
  1961  000AF6  D863               	call	PL6	;call to abstracted procedure
  1962  000AF8  EC81  F009         	call	_LcPutChar
  1963  000AFC                     l3183:
  1964                           
  1965                           ;Menu.c: 304:             LCDcol++;
  1966  000AFC  2A42               	incf	_LCDcol^0,f,c
  1967                           
  1968                           ;Menu.c: 305:         } else {
  1969  000AFE  0012               	return	
  1970  000B00                     l3185:
  1971                           
  1972                           ;Menu.c: 306:             LCDrow++;
  1973                           
  1974                           ;Menu.c: 307:             LcGotoXY(0,1);
  1975  000B00  D889               	call	PL40	;call to abstracted procedure
  1976  000B02  ECB9  F007         	call	_LcGotoXY
  1977  000B06                     l3189:
  1978                           
  1979                           ;Menu.c: 308:             LCDcol = 0;
  1980  000B06  6A42               	clrf	_LCDcol^0,c
  1981  000B08  0012               	return	
  1982  000B0A                     l3191:
  1983  000B0A  046E               	decf	displayMenu@menuMode^0,w,c
  1984  000B0C  E10C               	bnz	l3205
  1985                           
  1986                           ;Menu.c: 311:         if (LOGREGSCREEN[LCDrow][LCDcol] != '\0'){
  1987  000B0E  D872               	call	PL20	;call to abstracted procedure
  1988  000B10  D856               	call	PL6	;call to abstracted procedure
  1989  000B12  E005               	bz	l3199
  1990                           
  1991                           ;Menu.c: 312:             LcPutChar(LOGREGSCREEN[LCDrow][LCDcol]);
  1992  000B14  D86F               	call	PL20	;call to abstracted procedure
  1993  000B16  D853               	call	PL6	;call to abstracted procedure
  1994  000B18  EC81  F009         	call	_LcPutChar
  1995  000B1C  D7EF               	goto	l3183
  1996  000B1E                     l3199:
  1997                           
  1998                           ;Menu.c: 315:             LCDrow++;
  1999                           
  2000                           ;Menu.c: 316:             LcGotoXY(0,1);
  2001  000B1E  D87A               	call	PL40	;call to abstracted procedure
  2002  000B20  ECB9  F007         	call	_LcGotoXY
  2003  000B24  D7F0               	goto	l3189
  2004  000B26                     l3205:
  2005  000B26  0E02               	movlw	2
  2006  000B28  186E               	xorwf	displayMenu@menuMode^0,w,c
  2007  000B2A  A4D8               	btfss	status,2,c
  2008  000B2C  0012               	return	
  2009                           
  2010                           ;Menu.c: 320:         if (LCDrow+row < 4){
  2011  000B2E  506A               	movf	displayMenu@row^0,w,c
  2012  000B30  C043  F06B         	movff	_LCDrow,??_displayMenu
  2013  000B34  6A6C               	clrf	(??_displayMenu+1)^0,c
  2014  000B36  266B               	addwf	??_displayMenu^0,f,c
  2015  000B38  0E00               	movlw	0
  2016  000B3A  226C               	addwfc	(??_displayMenu+1)^0,f,c
  2017  000B3C  BE6C               	btfsc	(??_displayMenu+1)^0,7,c
  2018  000B3E  D006               	goto	u2510
  2019  000B40  506C               	movf	(??_displayMenu+1)^0,w,c
  2020  000B42  E13C               	bnz	l557
  2021  000B44  0E04               	movlw	4
  2022  000B46  5C6B               	subwf	??_displayMenu^0,w,c
  2023  000B48  B0D8               	btfsc	status,0,c
  2024  000B4A  0012               	return	
  2025  000B4C                     u2510:
  2026                           
  2027                           ;Menu.c: 321:             if (MAINMENUSIZE[LCDrow+row] > 16){
  2028  000B4C  D85F               	call	PL34	;call to abstracted procedure
  2029  000B4E  6E6B               	movwf	??_displayMenu^0,c
  2030  000B50  C06B  FFF6         	movff	??_displayMenu,tblptrl
  2031  000B54                     	if	1	;There is more than 1 active tblptr byte
  2032  000B54  0E02               	movlw	high __smallconst
  2033  000B56  6EF7               	movwf	tblptrh,c
  2034  000B58                     	endif
  2035  000B58                     	if	0	;tblptru may be non-zero
  2036  000B58                     	endif
  2037  000B58                     	if	0	;tblptru may be non-zero
  2038  000B58                     	endif
  2039  000B58  0E10               	movlw	16
  2040  000B5A  0008               	tblrd		*
  2041  000B5C  64F5               	cpfsgt	tablat,c
  2042  000B5E  D022               	goto	l3223
  2043                           
  2044                           ;Menu.c: 322:                 if (LCDcol < 16){
  2045  000B60  6042               	cpfslt	_LCDcol^0,c
  2046  000B62  D01C               	goto	l3217
  2047                           
  2048                           ;Menu.c: 323:                     LcPutChar(MAINMENU[LCDrow+row][(LCDcol+LCDcolm) % MAIN
      +                          MENUSIZE[LCDrow+row]]);
  2049  000B64  5042               	movf	_LCDcol^0,w,c
  2050  000B66  2441               	addwf	_LCDcolm^0,w,c
  2051  000B68  6E59               	movwf	___awmod@dividend^0,c
  2052  000B6A  6A5A               	clrf	(___awmod@dividend+1)^0,c
  2053  000B6C  365A               	rlcf	(___awmod@dividend+1)^0,f,c
  2054  000B6E  D84E               	call	PL34	;call to abstracted procedure
  2055  000B70  D826               	call	PL6	;call to abstracted procedure
  2056  000B72  6E5B               	movwf	___awmod@divisor^0,c
  2057  000B74  6A5C               	clrf	(___awmod@divisor+1)^0,c
  2058  000B76  ECBA  F008         	call	___awmod	;wreg free
  2059  000B7A  506A               	movf	displayMenu@row^0,w,c
  2060  000B7C  0D1C               	mullw	28
  2061  000B7E  CFF3 F06C          	movff	prodl,??_displayMenu+1
  2062  000B82  5043               	movf	_LCDrow^0,w,c
  2063  000B84  0D1C               	mullw	28
  2064  000B86  50F3               	movf	243,w,c
  2065  000B88  0F33               	addlw	low _MAINMENU
  2066  000B8A  246C               	addwf	(??_displayMenu+1)^0,w,c
  2067  000B8C  2459               	addwf	?___awmod^0,w,c
  2068  000B8E  6E6D               	movwf	(??_displayMenu+2)^0,c
  2069  000B90  C06D  FFF6         	movff	??_displayMenu+2,tblptrl
  2070  000B94                     	if	1	;There is more than 1 active tblptr byte
  2071  000B94  D81C               	call	PL10	;call to abstracted procedure
  2072  000B96  EC81  F009         	call	_LcPutChar
  2073  000B9A  D7B0               	goto	l3183
  2074  000B9C                     l3217:
  2075                           
  2076                           ;Menu.c: 326:                     LCDrow++;
  2077                           
  2078                           ;Menu.c: 327:                     LcGotoXY(0,1);
  2079  000B9C  D83B               	call	PL40	;call to abstracted procedure
  2080  000B9E  ECB9  F007         	call	_LcGotoXY
  2081  000BA2  D7B1               	goto	l3189
  2082  000BA4                     l3223:
  2083  000BA4  D819               	call	PL12	;call to abstracted procedure
  2084  000BA6  D813               	call	PL10	;call to abstracted procedure
  2085  000BA8  E005               	bz	l3229
  2086                           
  2087                           ;Menu.c: 332:                 LcPutChar(MAINMENU[LCDrow+row][LCDcol]);
  2088  000BAA  D816               	call	PL12	;call to abstracted procedure
  2089  000BAC  D810               	call	PL10	;call to abstracted procedure
  2090  000BAE  EC81  F009         	call	_LcPutChar
  2091  000BB2  D7A4               	goto	l3183
  2092  000BB4                     l3229:
  2093                           
  2094                           ;Menu.c: 335:                 LCDrow++;
  2095                           
  2096                           ;Menu.c: 336:                 LcGotoXY(0,1);
  2097  000BB4  D82F               	call	PL40	;call to abstracted procedure
  2098  000BB6  ECB9  F007         	call	_LcGotoXY
  2099  000BBA  D7A5               	goto	l3189
  2100  000BBC                     l557:
  2101  000BBC  0012               	return		;funcret
  2102  000BBE                     __end_of_displayMenu:
  2103                           	callstack 0
  2104  000BBE                     PL6:
  2105                           	callstack 23
  2106  000BBE  6E6B               	movwf	??_displayMenu^0,c
  2107  000BC0  C06B  FFF6         	movff	??_displayMenu,tblptrl
  2108  000BC4                     	if	1	;There is more than 1 active tblptr byte
  2109  000BC4  0E02               	movlw	high __smallconst
  2110  000BC6  6EF7               	movwf	tblptrh,c
  2111  000BC8                     	endif
  2112  000BC8                     	if	0	;tblptru may be non-zero
  2113  000BC8                     	endif
  2114  000BC8                     	if	0	;tblptru may be non-zero
  2115  000BC8                     	endif
  2116  000BC8  0008               	tblrd		*
  2117  000BCA  50F5               	movf	tablat,w,c
  2118  000BCC  0012               	return	
  2119  000BCE                     __end_ofPL6:
  2120                           	callstack 0
  2121  000BCE                     PL10:
  2122                           	callstack 26
  2123  000BCE  0E02               	movlw	high __smallconst
  2124  000BD0  6EF7               	movwf	tblptrh,c
  2125  000BD2                     	endif
  2126  000BD2                     	if	0	;tblptru may be non-zero
  2127  000BD2                     	endif
  2128  000BD2                     	if	0	;tblptru may be non-zero
  2129  000BD2                     	endif
  2130  000BD2  0008               	tblrd		*
  2131  000BD4  50F5               	movf	tablat,w,c
  2132  000BD6  0012               	return	
  2133  000BD8                     __end_ofPL10:
  2134                           	callstack 0
  2135  000BD8                     PL12:
  2136                           	callstack 23
  2137  000BD8  506A               	movf	displayMenu@row^0,w,c
  2138  000BDA  0D1C               	mullw	28
  2139  000BDC  CFF3 F06B          	movff	prodl,??_displayMenu
  2140  000BE0  5043               	movf	_LCDrow^0,w,c
  2141  000BE2  0D1C               	mullw	28
  2142  000BE4  50F3               	movf	243,w,c
  2143  000BE6  0F33               	addlw	low _MAINMENU
  2144  000BE8  246B               	addwf	??_displayMenu^0,w,c
  2145  000BEA  2442               	addwf	_LCDcol^0,w,c
  2146  000BEC  6E6C               	movwf	(??_displayMenu+1)^0,c
  2147  000BEE  C06C  FFF6         	movff	??_displayMenu+1,tblptrl
  2148  000BF2                     	if	1	;There is more than 1 active tblptr byte
  2149  000BF2  0012               	return	
  2150  000BF4                     __end_ofPL12:
  2151                           	callstack 0
  2152  000BF4                     PL20:
  2153                           	callstack 23
  2154  000BF4  5043               	movf	_LCDrow^0,w,c
  2155  000BF6  0D06               	mullw	6
  2156  000BF8  50F3               	movf	243,w,c
  2157  000BFA  0F17               	addlw	low _LOGREGSCREEN
  2158  000BFC  2442               	addwf	_LCDcol^0,w,c
  2159  000BFE  0012               	return	
  2160  000C00                     __end_ofPL20:
  2161                           	callstack 0
  2162  000C00                     PL22:
  2163                           	callstack 23
  2164  000C00  5043               	movf	_LCDrow^0,w,c
  2165  000C02  0D0B               	mullw	11
  2166  000C04  50F3               	movf	243,w,c
  2167  000C06  0F01               	addlw	low _LOGINMENU
  2168  000C08  2442               	addwf	_LCDcol^0,w,c
  2169  000C0A  0012               	return	
  2170  000C0C                     __end_ofPL22:
  2171                           	callstack 0
  2172  000C0C                     PL34:
  2173                           	callstack 23
  2174  000C0C  5043               	movf	_LCDrow^0,w,c
  2175  000C0E  0F2F               	addlw	low _MAINMENUSIZE
  2176  000C10  246A               	addwf	displayMenu@row^0,w,c
  2177  000C12  0012               	return	
  2178  000C14                     __end_ofPL34:
  2179                           	callstack 0
  2180  000C14                     PL40:
  2181                           	callstack 23
  2182  000C14  2A43               	incf	_LCDrow^0,f,c
  2183  000C16  0E01               	movlw	1
  2184  000C18  6E61               	movwf	LcGotoXY@Row^0,c
  2185  000C1A  0C00               	retlw	0
  2186  000C1C                     __end_ofPL40:
  2187                           	callstack 0
  2188                           
  2189 ;; *************** function ___awmod *****************
  2190 ;; Defined at:
  2191 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\awmod.c"
  2192 ;; Parameters:    Size  Location     Type
  2193 ;;  dividend        2    5[COMRAM] int 
  2194 ;;  divisor         2    7[COMRAM] int 
  2195 ;; Auto vars:     Size  Location     Type
  2196 ;;  sign            1   10[COMRAM] unsigned char 
  2197 ;;  counter         1    9[COMRAM] unsigned char 
  2198 ;; Return value:  Size  Location     Type
  2199 ;;                  2    5[COMRAM] int 
  2200 ;; Registers used:
  2201 ;;		wreg, status,2, status,0
  2202 ;; Tracked objects:
  2203 ;;		On entry : 0/0
  2204 ;;		On exit  : 0/0
  2205 ;;		Unchanged: 0/0
  2206 ;; Data sizes:     COMRAM   BANK0   BANK1
  2207 ;;      Params:         4       0       0
  2208 ;;      Locals:         2       0       0
  2209 ;;      Temps:          0       0       0
  2210 ;;      Totals:         6       0       0
  2211 ;;Total ram usage:        6 bytes
  2212 ;; Hardware stack levels used: 1
  2213 ;; Hardware stack levels required when called: 2
  2214 ;; This function calls:
  2215 ;;		Nothing
  2216 ;; This function is called by:
  2217 ;;		_displayMenu
  2218 ;; This function uses a non-reentrant model
  2219 ;;
  2220                           
  2221                           	psect	text5
  2222  001174                     __ptext5:
  2223                           	callstack 0
  2224  001174                     ___awmod:
  2225                           	callstack 26
  2226                           
  2227                           ;incstack = 0
  2228  001174  6A5E               	clrf	___awmod@sign^0,c
  2229  001176  AE5A               	btfss	(___awmod@dividend+1)^0,7,c
  2230  001178  D006               	goto	l3093
  2231  00117A  6C59               	negf	___awmod@dividend^0,c
  2232  00117C  1E5A               	comf	(___awmod@dividend+1)^0,f,c
  2233  00117E  B0D8               	btfsc	status,0,c
  2234  001180  2A5A               	incf	(___awmod@dividend+1)^0,f,c
  2235  001182  0E01               	movlw	1
  2236  001184  6E5E               	movwf	___awmod@sign^0,c
  2237  001186                     l3093:
  2238  001186  AE5C               	btfss	(___awmod@divisor+1)^0,7,c
  2239  001188  D004               	goto	l3097
  2240  00118A  6C5B               	negf	___awmod@divisor^0,c
  2241  00118C  1E5C               	comf	(___awmod@divisor+1)^0,f,c
  2242  00118E  B0D8               	btfsc	status,0,c
  2243  001190  2A5C               	incf	(___awmod@divisor+1)^0,f,c
  2244  001192                     l3097:
  2245  001192  505B               	movf	___awmod@divisor^0,w,c
  2246  001194  105C               	iorwf	(___awmod@divisor+1)^0,w,c
  2247  001196  E017               	bz	l3113
  2248  001198  0E01               	movlw	1
  2249  00119A  6E5D               	movwf	___awmod@counter^0,c
  2250  00119C  D004               	goto	l3103
  2251  00119E                     l3101:
  2252  00119E  90D8               	bcf	status,0,c
  2253  0011A0  365B               	rlcf	___awmod@divisor^0,f,c
  2254  0011A2  365C               	rlcf	(___awmod@divisor+1)^0,f,c
  2255  0011A4  2A5D               	incf	___awmod@counter^0,f,c
  2256  0011A6                     l3103:
  2257  0011A6  AE5C               	btfss	(___awmod@divisor+1)^0,7,c
  2258  0011A8  D7FA               	goto	l3101
  2259  0011AA                     u2360:
  2260  0011AA  505B               	movf	___awmod@divisor^0,w,c
  2261  0011AC  5C59               	subwf	___awmod@dividend^0,w,c
  2262  0011AE  505C               	movf	(___awmod@divisor+1)^0,w,c
  2263  0011B0  585A               	subwfb	(___awmod@dividend+1)^0,w,c
  2264  0011B2  E304               	bnc	l3109
  2265  0011B4  505B               	movf	___awmod@divisor^0,w,c
  2266  0011B6  5E59               	subwf	___awmod@dividend^0,f,c
  2267  0011B8  505C               	movf	(___awmod@divisor+1)^0,w,c
  2268  0011BA  5A5A               	subwfb	(___awmod@dividend+1)^0,f,c
  2269  0011BC                     l3109:
  2270  0011BC  90D8               	bcf	status,0,c
  2271  0011BE  325C               	rrcf	(___awmod@divisor+1)^0,f,c
  2272  0011C0  325B               	rrcf	___awmod@divisor^0,f,c
  2273  0011C2  2E5D               	decfsz	___awmod@counter^0,f,c
  2274  0011C4  D7F2               	goto	u2360
  2275  0011C6                     l3113:
  2276  0011C6  505E               	movf	___awmod@sign^0,w,c
  2277  0011C8  E004               	bz	l3117
  2278  0011CA  6C59               	negf	___awmod@dividend^0,c
  2279  0011CC  1E5A               	comf	(___awmod@dividend+1)^0,f,c
  2280  0011CE  B0D8               	btfsc	status,0,c
  2281  0011D0  2A5A               	incf	(___awmod@dividend+1)^0,f,c
  2282  0011D2                     l3117:
  2283  0011D2  C059  F059         	movff	___awmod@dividend,?___awmod
  2284  0011D6  C05A  F05A         	movff	___awmod@dividend+1,?___awmod+1
  2285  0011DA  0012               	return		;funcret
  2286  0011DC                     __end_of___awmod:
  2287                           	callstack 0
  2288                           
  2289 ;; *************** function _LcPutChar *****************
  2290 ;; Defined at:
  2291 ;;		line 161 in file "LcTLCD.c"
  2292 ;; Parameters:    Size  Location     Type
  2293 ;;  c               1    wreg     unsigned char 
  2294 ;; Auto vars:     Size  Location     Type
  2295 ;;  c               1   21[COMRAM] unsigned char 
  2296 ;; Return value:  Size  Location     Type
  2297 ;;                  1    wreg      void 
  2298 ;; Registers used:
  2299 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2300 ;; Tracked objects:
  2301 ;;		On entry : 0/0
  2302 ;;		On exit  : 0/0
  2303 ;;		Unchanged: 0/0
  2304 ;; Data sizes:     COMRAM   BANK0   BANK1
  2305 ;;      Params:         0       0       0
  2306 ;;      Locals:         1       0       0
  2307 ;;      Temps:          0       0       0
  2308 ;;      Totals:         1       0       0
  2309 ;;Total ram usage:        1 bytes
  2310 ;; Hardware stack levels used: 1
  2311 ;; Hardware stack levels required when called: 5
  2312 ;; This function calls:
  2313 ;;		_CantaData
  2314 ;;		_LcGotoXY
  2315 ;;		_WaitForBusy
  2316 ;; This function is called by:
  2317 ;;		_menuMotor
  2318 ;;		_displayMenu
  2319 ;; This function uses a non-reentrant model
  2320 ;;
  2321                           
  2322                           	psect	text6
  2323  001302                     __ptext6:
  2324                           	callstack 0
  2325  001302                     _LcPutChar:
  2326                           	callstack 23
  2327                           
  2328                           ;incstack = 0
  2329                           ;LcPutChar@c stored from wreg
  2330  001302  6E69               	movwf	LcPutChar@c^0,c
  2331                           
  2332                           ;LcTLCD.c: 171:  WaitForBusy(); CantaData(c);
  2333  001304  ECEF  F009         	call	_WaitForBusy	;wreg free
  2334  001308  5069               	movf	LcPutChar@c^0,w,c
  2335  00130A  EC2A  F00A         	call	_CantaData
  2336                           
  2337                           ;LcTLCD.c: 173:  ++ColumnAct;
  2338  00130E  2A45               	incf	_ColumnAct^0,f,c
  2339                           
  2340                           ;LcTLCD.c: 174:  if (Rows == 3) {
  2341  001310  0E03               	movlw	3
  2342  001312  1848               	xorwf	_Rows^0,w,c
  2343  001314  E107               	bnz	l3065
  2344                           
  2345                           ;LcTLCD.c: 175:   if (ColumnAct >= 20) {
  2346  001316  0E13               	movlw	19
  2347  001318  6445               	cpfsgt	_ColumnAct^0,c
  2348  00131A  0C13               	retlw	19
  2349                           
  2350                           ;LcTLCD.c: 176:    ColumnAct = 0;
  2351  00131C  6A45               	clrf	_ColumnAct^0,c
  2352                           
  2353                           ;LcTLCD.c: 177:    if (++RowAct >= 4) RowAct = 0;
  2354  00131E  2A46               	incf	_RowAct^0,f,c
  2355  001320  0E03               	movlw	3
  2356  001322  D009               	goto	L3
  2357  001324                     l3065:
  2358                           
  2359                           ;LcTLCD.c: 181:  if (Rows == 2) {
  2360  001324  0E02               	movlw	2
  2361  001326  1848               	xorwf	_Rows^0,w,c
  2362  001328  E10A               	bnz	l3077
  2363                           
  2364                           ;LcTLCD.c: 182:   if (ColumnAct >= 40) {
  2365  00132A  0E27               	movlw	39
  2366  00132C  6445               	cpfsgt	_ColumnAct^0,c
  2367  00132E  0C27               	retlw	39
  2368                           
  2369                           ;LcTLCD.c: 183:    ColumnAct = 0;
  2370  001330  6A45               	clrf	_ColumnAct^0,c
  2371                           
  2372                           ;LcTLCD.c: 184:    if (++RowAct >= 2) RowAct = 0;
  2373  001332  2A46               	incf	_RowAct^0,f,c
  2374  001334  0E01               	movlw	1
  2375  001336                     L3:
  2376  001336  6446               	cpfsgt	_RowAct^0,c
  2377  001338  D009               	goto	l3083
  2378  00133A  6A46               	clrf	_RowAct^0,c
  2379  00133C  D007               	goto	l3083
  2380  00133E                     l3077:
  2381                           
  2382                           ;LcTLCD.c: 188:  if (RowAct == 1) {
  2383  00133E  0446               	decf	_RowAct^0,w,c
  2384  001340  A4D8               	btfss	status,2,c
  2385  001342  0012               	return	
  2386                           
  2387                           ;LcTLCD.c: 189:   if (ColumnAct >= 40) ColumnAct = 0;
  2388  001344  0E27               	movlw	39
  2389  001346  6445               	cpfsgt	_ColumnAct^0,c
  2390  001348  D001               	goto	l3083
  2391  00134A  6A45               	clrf	_ColumnAct^0,c
  2392  00134C                     l3083:
  2393                           
  2394                           ;LcTLCD.c: 190:   LcGotoXY(ColumnAct, RowAct);
  2395  00134C  C046  F061         	movff	_RowAct,LcGotoXY@Row
  2396  001350  5045               	movf	_ColumnAct^0,w,c
  2397  001352  EFB9  F007         	goto	_LcGotoXY
  2398  001356                     __end_of_LcPutChar:
  2399                           	callstack 0
  2400                           
  2401 ;; *************** function _CantaData *****************
  2402 ;; Defined at:
  2403 ;;		line 245 in file "LcTLCD.c"
  2404 ;; Parameters:    Size  Location     Type
  2405 ;;  Data            1    wreg     unsigned char 
  2406 ;; Auto vars:     Size  Location     Type
  2407 ;;  Data            1    7[COMRAM] unsigned char 
  2408 ;; Return value:  Size  Location     Type
  2409 ;;                  1    wreg      void 
  2410 ;; Registers used:
  2411 ;;		wreg, status,2, status,0, cstack
  2412 ;; Tracked objects:
  2413 ;;		On entry : 0/0
  2414 ;;		On exit  : 0/0
  2415 ;;		Unchanged: 0/0
  2416 ;; Data sizes:     COMRAM   BANK0   BANK1
  2417 ;;      Params:         0       0       0
  2418 ;;      Locals:         1       0       0
  2419 ;;      Temps:          0       0       0
  2420 ;;      Totals:         1       0       0
  2421 ;;Total ram usage:        1 bytes
  2422 ;; Hardware stack levels used: 1
  2423 ;; Hardware stack levels required when called: 3
  2424 ;; This function calls:
  2425 ;;		_CantaPartAlta
  2426 ;;		_CantaPartBaixa
  2427 ;; This function is called by:
  2428 ;;		_LcPutChar
  2429 ;; This function uses a non-reentrant model
  2430 ;;
  2431                           
  2432                           	psect	text7
  2433  001454                     __ptext7:
  2434                           	callstack 0
  2435  001454                     _CantaData:
  2436                           	callstack 24
  2437                           
  2438                           ;incstack = 0
  2439                           ;CantaData@Data stored from wreg
  2440  001454  6E5B               	movwf	CantaData@Data^0,c
  2441                           
  2442                           ;LcTLCD.c: 246:  (TRISDbits.TRISD0 = TRISDbits.TRISD1 = TRISDbits.TRISD2 = TRISDbits.TRI
      +                          SD3 = 0);
  2443  001456  9695               	bcf	149,3,c	;volatile
  2444  001458  9495               	bcf	149,2,c	;volatile
  2445  00145A  9295               	bcf	149,1,c	;volatile
  2446  00145C  9095               	bcf	149,0,c	;volatile
  2447                           
  2448                           ;LcTLCD.c: 247:  (LATDbits.LATD4 = 1);
  2449  00145E  888C               	bsf	140,4,c	;volatile
  2450                           
  2451                           ;LcTLCD.c: 248:  (LATDbits.LATD5 = 0);
  2452  001460  9A8C               	bcf	140,5,c	;volatile
  2453                           
  2454                           ;LcTLCD.c: 249:  (LATDbits.LATD6 = 1);
  2455  001462  8C8C               	bsf	140,6,c	;volatile
  2456                           
  2457                           ;LcTLCD.c: 250:  CantaPartAlta(Data);
  2458  001464  505B               	movf	CantaData@Data^0,w,c
  2459  001466  EC21  F009         	call	_CantaPartAlta
  2460                           
  2461                           ;LcTLCD.c: 251:  (LATDbits.LATD6 = 1);
  2462                           
  2463                           ;LcTLCD.c: 252:  (LATDbits.LATD6 = 0);
  2464                           
  2465                           ;LcTLCD.c: 253:  (LATDbits.LATD6 = 0);
  2466                           
  2467                           ;LcTLCD.c: 254:  (LATDbits.LATD6 = 1);
  2468  00146A  D80B               	call	PL60	;call to abstracted procedure
  2469                           
  2470                           ;LcTLCD.c: 255:  CantaPartBaixa(Data);
  2471  00146C  505B               	movf	CantaData@Data^0,w,c
  2472  00146E  ECEE  F008         	call	_CantaPartBaixa
  2473                           
  2474                           ;LcTLCD.c: 256:  (LATDbits.LATD6 = 1);
  2475                           
  2476                           ;LcTLCD.c: 257:  (LATDbits.LATD6 = 0);
  2477                           
  2478                           ;LcTLCD.c: 258:  (TRISDbits.TRISD0 = TRISDbits.TRISD1 = TRISDbits.TRISD2 = TRISDbits.TRI
      +                          SD3 = 1);
  2479  001472  D000               	goto	PL38	;call to abstracted procedure
  2480  001474                     __end_of_CantaData:
  2481                           	callstack 0
  2482  001474                     PL38:
  2483                           	callstack 23
  2484  001474  8C8C               	bsf	140,6,c	;volatile
  2485  001476  9C8C               	bcf	140,6,c	;volatile
  2486  001478  8695               	bsf	149,3,c	;volatile
  2487  00147A  8495               	bsf	149,2,c	;volatile
  2488  00147C  8295               	bsf	149,1,c	;volatile
  2489  00147E  8095               	bsf	149,0,c	;volatile
  2490  001480  0012               	return		;funcret
  2491  001482                     __end_ofPL38:
  2492                           	callstack 0
  2493  001482                     PL60:
  2494                           	callstack 23
  2495  001482  8C8C               	bsf	140,6,c	;volatile
  2496  001484  9C8C               	bcf	140,6,c	;volatile
  2497  001486  9C8C               	bcf	140,6,c	;volatile
  2498  001488  8C8C               	bsf	140,6,c	;volatile
  2499  00148A  0012               	return	
  2500  00148C                     __end_ofPL60:
  2501                           	callstack 0
  2502                           
  2503 ;; *************** function ___lbmod *****************
  2504 ;; Defined at:
  2505 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\lbmod.c"
  2506 ;; Parameters:    Size  Location     Type
  2507 ;;  dividend        1    wreg     unsigned char 
  2508 ;;  divisor         1    5[COMRAM] unsigned char 
  2509 ;; Auto vars:     Size  Location     Type
  2510 ;;  dividend        1    6[COMRAM] unsigned char 
  2511 ;;  rem             1    8[COMRAM] unsigned char 
  2512 ;;  counter         1    7[COMRAM] unsigned char 
  2513 ;; Return value:  Size  Location     Type
  2514 ;;                  1    wreg      unsigned char 
  2515 ;; Registers used:
  2516 ;;		wreg, status,2, status,0
  2517 ;; Tracked objects:
  2518 ;;		On entry : 0/0
  2519 ;;		On exit  : 0/0
  2520 ;;		Unchanged: 0/0
  2521 ;; Data sizes:     COMRAM   BANK0   BANK1
  2522 ;;      Params:         1       0       0
  2523 ;;      Locals:         3       0       0
  2524 ;;      Temps:          0       0       0
  2525 ;;      Totals:         4       0       0
  2526 ;;Total ram usage:        4 bytes
  2527 ;; Hardware stack levels used: 1
  2528 ;; Hardware stack levels required when called: 2
  2529 ;; This function calls:
  2530 ;;		Nothing
  2531 ;; This function is called by:
  2532 ;;		_menuMotor
  2533 ;; This function uses a non-reentrant model
  2534 ;;
  2535                           
  2536                           	psect	text8
  2537  0014E4                     __ptext8:
  2538                           	callstack 0
  2539  0014E4                     ___lbmod:
  2540                           	callstack 27
  2541                           
  2542                           ;incstack = 0
  2543                           ;___lbmod@dividend stored from wreg
  2544  0014E4  6E5A               	movwf	___lbmod@dividend^0,c
  2545  0014E6  0E08               	movlw	8
  2546  0014E8  6E5B               	movwf	___lbmod@counter^0,c
  2547  0014EA  6A5C               	clrf	___lbmod@rem^0,c
  2548  0014EC                     l3259:
  2549  0014EC  90D8               	bcf	status,0,c
  2550  0014EE  345A               	rlcf	___lbmod@dividend^0,w,c
  2551  0014F0  345C               	rlcf	___lbmod@rem^0,w,c
  2552  0014F2  6E5C               	movwf	___lbmod@rem^0,c
  2553  0014F4  90D8               	bcf	status,0,c
  2554  0014F6  365A               	rlcf	___lbmod@dividend^0,f,c
  2555  0014F8  5059               	movf	___lbmod@divisor^0,w,c
  2556  0014FA  5C5C               	subwf	___lbmod@rem^0,w,c
  2557  0014FC  E302               	bnc	l3267
  2558  0014FE  5059               	movf	___lbmod@divisor^0,w,c
  2559  001500  5E5C               	subwf	___lbmod@rem^0,f,c
  2560  001502                     l3267:
  2561  001502  2E5B               	decfsz	___lbmod@counter^0,f,c
  2562  001504  D7F3               	goto	l3259
  2563  001506  505C               	movf	___lbmod@rem^0,w,c
  2564  001508  0012               	return		;funcret
  2565  00150A                     __end_of___lbmod:
  2566                           	callstack 0
  2567                           
  2568 ;; *************** function _SiRecievedByte *****************
  2569 ;; Defined at:
  2570 ;;		line 31 in file "SIO.c"
  2571 ;; Parameters:    Size  Location     Type
  2572 ;;		None
  2573 ;; Auto vars:     Size  Location     Type
  2574 ;;		None
  2575 ;; Return value:  Size  Location     Type
  2576 ;;                  1    wreg      unsigned char 
  2577 ;; Registers used:
  2578 ;;		wreg
  2579 ;; Tracked objects:
  2580 ;;		On entry : 0/0
  2581 ;;		On exit  : 0/0
  2582 ;;		Unchanged: 0/0
  2583 ;; Data sizes:     COMRAM   BANK0   BANK1
  2584 ;;      Params:         0       0       0
  2585 ;;      Locals:         0       0       0
  2586 ;;      Temps:          0       0       0
  2587 ;;      Totals:         0       0       0
  2588 ;;Total ram usage:        0 bytes
  2589 ;; Hardware stack levels used: 1
  2590 ;; Hardware stack levels required when called: 2
  2591 ;; This function calls:
  2592 ;;		Nothing
  2593 ;; This function is called by:
  2594 ;;		_menuMotor
  2595 ;; This function uses a non-reentrant model
  2596 ;;
  2597                           
  2598                           	psect	text9
  2599  0016E2                     __ptext9:
  2600                           	callstack 0
  2601  0016E2                     _SiRecievedByte:
  2602                           	callstack 27
  2603                           
  2604                           ;SIO.c: 32:     return PIR1bits.RCIF;
  2605                           
  2606                           ;incstack = 0
  2607  0016E2  BA9E               	btfsc	158,5,c	;volatile
  2608  0016E4  0C01               	retlw	1
  2609  0016E6  0C00               	retlw	0	;funcret
  2610  0016E8                     __end_of_SiRecievedByte:
  2611                           	callstack 0
  2612                           
  2613 ;; *************** function _SiReadByte *****************
  2614 ;; Defined at:
  2615 ;;		line 35 in file "SIO.c"
  2616 ;; Parameters:    Size  Location     Type
  2617 ;;		None
  2618 ;; Auto vars:     Size  Location     Type
  2619 ;;		None
  2620 ;; Return value:  Size  Location     Type
  2621 ;;                  1    wreg      unsigned char 
  2622 ;; Registers used:
  2623 ;;		wreg, status,2
  2624 ;; Tracked objects:
  2625 ;;		On entry : 0/0
  2626 ;;		On exit  : 0/0
  2627 ;;		Unchanged: 0/0
  2628 ;; Data sizes:     COMRAM   BANK0   BANK1
  2629 ;;      Params:         0       0       0
  2630 ;;      Locals:         0       0       0
  2631 ;;      Temps:          0       0       0
  2632 ;;      Totals:         0       0       0
  2633 ;;Total ram usage:        0 bytes
  2634 ;; Hardware stack levels used: 1
  2635 ;; Hardware stack levels required when called: 2
  2636 ;; This function calls:
  2637 ;;		Nothing
  2638 ;; This function is called by:
  2639 ;;		_menuMotor
  2640 ;; This function uses a non-reentrant model
  2641 ;;
  2642                           
  2643                           	psect	text10
  2644  0016F2                     __ptext10:
  2645                           	callstack 0
  2646  0016F2                     _SiReadByte:
  2647                           	callstack 27
  2648                           
  2649                           ;SIO.c: 36:     return RCREG;
  2650                           
  2651                           ;incstack = 0
  2652  0016F2  50AE               	movf	174,w,c	;volatile
  2653  0016F4  0012               	return		;funcret
  2654  0016F6                     __end_of_SiReadByte:
  2655                           	callstack 0
  2656                           
  2657 ;; *************** function _LcCursorOn *****************
  2658 ;; Defined at:
  2659 ;;		line 120 in file "LcTLCD.c"
  2660 ;; Parameters:    Size  Location     Type
  2661 ;;		None
  2662 ;; Auto vars:     Size  Location     Type
  2663 ;;		None
  2664 ;; Return value:  Size  Location     Type
  2665 ;;                  1    wreg      void 
  2666 ;; Registers used:
  2667 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2668 ;; Tracked objects:
  2669 ;;		On entry : 0/0
  2670 ;;		On exit  : 0/0
  2671 ;;		Unchanged: 0/0
  2672 ;; Data sizes:     COMRAM   BANK0   BANK1
  2673 ;;      Params:         0       0       0
  2674 ;;      Locals:         0       0       0
  2675 ;;      Temps:          0       0       0
  2676 ;;      Totals:         0       0       0
  2677 ;;Total ram usage:        0 bytes
  2678 ;; Hardware stack levels used: 1
  2679 ;; Hardware stack levels required when called: 4
  2680 ;; This function calls:
  2681 ;;		_CantaIR
  2682 ;;		_WaitForBusy
  2683 ;; This function is called by:
  2684 ;;		_menuMotor
  2685 ;; This function uses a non-reentrant model
  2686 ;;
  2687                           
  2688                           	psect	text11
  2689  00169C                     __ptext11:
  2690                           	callstack 0
  2691  00169C                     _LcCursorOn:
  2692                           	callstack 25
  2693                           
  2694                           ;LcTLCD.c: 123:  WaitForBusy();
  2695                           
  2696                           ;incstack = 0
  2697  00169C  ECEF  F009         	call	_WaitForBusy	;wreg free
  2698                           
  2699                           ;LcTLCD.c: 124:  CantaIR(0x08 | 0x04 | 0x02);
  2700  0016A0  0E0E               	movlw	14
  2701  0016A2  EFFC  F00A         	goto	_CantaIR
  2702  0016A6                     __end_of_LcCursorOn:
  2703                           	callstack 0
  2704                           
  2705 ;; *************** function _LcCursorOff *****************
  2706 ;; Defined at:
  2707 ;;		line 127 in file "LcTLCD.c"
  2708 ;; Parameters:    Size  Location     Type
  2709 ;;		None
  2710 ;; Auto vars:     Size  Location     Type
  2711 ;;		None
  2712 ;; Return value:  Size  Location     Type
  2713 ;;                  1    wreg      void 
  2714 ;; Registers used:
  2715 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2716 ;; Tracked objects:
  2717 ;;		On entry : 0/0
  2718 ;;		On exit  : 0/0
  2719 ;;		Unchanged: 0/0
  2720 ;; Data sizes:     COMRAM   BANK0   BANK1
  2721 ;;      Params:         0       0       0
  2722 ;;      Locals:         0       0       0
  2723 ;;      Temps:          0       0       0
  2724 ;;      Totals:         0       0       0
  2725 ;;Total ram usage:        0 bytes
  2726 ;; Hardware stack levels used: 1
  2727 ;; Hardware stack levels required when called: 4
  2728 ;; This function calls:
  2729 ;;		_CantaIR
  2730 ;;		_WaitForBusy
  2731 ;; This function is called by:
  2732 ;;		_menuMotor
  2733 ;; This function uses a non-reentrant model
  2734 ;;
  2735                           
  2736                           	psect	text12
  2737  0016A6                     __ptext12:
  2738                           	callstack 0
  2739  0016A6                     _LcCursorOff:
  2740                           	callstack 25
  2741                           
  2742                           ;LcTLCD.c: 130:  WaitForBusy();
  2743                           
  2744                           ;incstack = 0
  2745  0016A6  ECEF  F009         	call	_WaitForBusy	;wreg free
  2746                           
  2747                           ;LcTLCD.c: 131:  CantaIR(0x08 | 0x04);
  2748  0016AA  0E0C               	movlw	12
  2749  0016AC  EFFC  F00A         	goto	_CantaIR
  2750  0016B0                     __end_of_LcCursorOff:
  2751                           	callstack 0
  2752                           
  2753 ;; *************** function _LcClear *****************
  2754 ;; Defined at:
  2755 ;;		line 113 in file "LcTLCD.c"
  2756 ;; Parameters:    Size  Location     Type
  2757 ;;		None
  2758 ;; Auto vars:     Size  Location     Type
  2759 ;;		None
  2760 ;; Return value:  Size  Location     Type
  2761 ;;                  1    wreg      void 
  2762 ;; Registers used:
  2763 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2764 ;; Tracked objects:
  2765 ;;		On entry : 0/0
  2766 ;;		On exit  : 0/0
  2767 ;;		Unchanged: 0/0
  2768 ;; Data sizes:     COMRAM   BANK0   BANK1
  2769 ;;      Params:         0       0       0
  2770 ;;      Locals:         0       0       0
  2771 ;;      Temps:          0       0       0
  2772 ;;      Totals:         0       0       0
  2773 ;;Total ram usage:        0 bytes
  2774 ;; Hardware stack levels used: 1
  2775 ;; Hardware stack levels required when called: 4
  2776 ;; This function calls:
  2777 ;;		_CantaIR
  2778 ;;		_Espera
  2779 ;;		_WaitForBusy
  2780 ;; This function is called by:
  2781 ;;		_menuMotor
  2782 ;; This function uses a non-reentrant model
  2783 ;;
  2784                           
  2785                           	psect	text13
  2786  001662                     __ptext13:
  2787                           	callstack 0
  2788  001662                     _LcClear:
  2789                           	callstack 25
  2790                           
  2791                           ;LcTLCD.c: 116:  WaitForBusy(); CantaIR(0x01);
  2792                           
  2793                           ;incstack = 0
  2794  001662  ECEF  F009         	call	_WaitForBusy	;wreg free
  2795  001666  0E01               	movlw	1
  2796  001668  ECFC  F00A         	call	_CantaIR
  2797                           
  2798                           ;LcTLCD.c: 117:  Espera(Timer, 3);
  2799  00166C  ECF6  F006         	call	PL8	;call to abstracted procedure
  2800  001670  0E03               	movlw	3
  2801  001672  6E62               	movwf	Espera@ms^0,c
  2802  001674  EFDD  F00A         	goto	_Espera	;wreg free
  2803  001678                     __end_of_LcClear:
  2804                           	callstack 0
  2805                           
  2806 ;; *************** function _KeSetMode *****************
  2807 ;; Defined at:
  2808 ;;		line 247 in file "keypad.c"
  2809 ;; Parameters:    Size  Location     Type
  2810 ;;  menuMode        1    wreg     unsigned char 
  2811 ;; Auto vars:     Size  Location     Type
  2812 ;;  menuMode        1    6[COMRAM] unsigned char 
  2813 ;; Return value:  Size  Location     Type
  2814 ;;                  1    wreg      void 
  2815 ;; Registers used:
  2816 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2817 ;; Tracked objects:
  2818 ;;		On entry : 0/0
  2819 ;;		On exit  : 0/0
  2820 ;;		Unchanged: 0/0
  2821 ;; Data sizes:     COMRAM   BANK0   BANK1
  2822 ;;      Params:         0       0       0
  2823 ;;      Locals:         1       0       0
  2824 ;;      Temps:          0       0       0
  2825 ;;      Totals:         1       0       0
  2826 ;;Total ram usage:        1 bytes
  2827 ;; Hardware stack levels used: 1
  2828 ;; Hardware stack levels required when called: 3
  2829 ;; This function calls:
  2830 ;;		_TiResetTics
  2831 ;; This function is called by:
  2832 ;;		_menuMotor
  2833 ;; This function uses a non-reentrant model
  2834 ;;
  2835                           
  2836                           	psect	text14
  2837  001530                     __ptext14:
  2838                           	callstack 0
  2839  001530                     _KeSetMode:
  2840                           	callstack 26
  2841                           
  2842                           ;incstack = 0
  2843                           ;KeSetMode@menuMode stored from wreg
  2844  001530  6E5A               	movwf	KeSetMode@menuMode^0,c
  2845                           
  2846                           ;keypad.c: 248:     if (menuMode == 1){
  2847  001532  045A               	decf	KeSetMode@menuMode^0,w,c
  2848  001534  E108               	bnz	l3159
  2849                           
  2850                           ;keypad.c: 249:         previous = 0;
  2851  001536  6A4E               	clrf	_previous^0,c
  2852                           
  2853                           ;keypad.c: 250:         numPresses = 0;
  2854  001538  6A4C               	clrf	_numPresses^0,c
  2855                           
  2856                           ;keypad.c: 251:         available = 0;
  2857  00153A  6A4B               	clrf	_available^0,c
  2858                           
  2859                           ;keypad.c: 252:         stateSMS = 2;
  2860  00153C  0E02               	movlw	2
  2861  00153E  6E49               	movwf	_stateSMS^0,c
  2862                           
  2863                           ;keypad.c: 253:         TiResetTics(timer_SMS);
  2864  001540  5050               	movf	_timer_SMS^0,w,c
  2865  001542  EF0A  F00B         	goto	_TiResetTics
  2866  001546                     l3159:
  2867  001546  505A               	movf	KeSetMode@menuMode^0,w,c
  2868  001548  A4D8               	btfss	status,2,c
  2869  00154A  0012               	return	
  2870                           
  2871                           ;keypad.c: 255:         stateSMS = 4;
  2872  00154C  D000               	goto	PL76	;call to abstracted procedure
  2873  00154E                     __end_of_KeSetMode:
  2874                           	callstack 0
  2875  00154E                     PL76:
  2876                           	callstack 26
  2877  00154E  0E04               	movlw	4
  2878  001550  6E49               	movwf	_stateSMS^0,c
  2879  001552  0C04               	retlw	4
  2880  001554                     __end_ofPL76:
  2881                           	callstack 0
  2882                           
  2883 ;; *************** function _KeGetCharValue *****************
  2884 ;; Defined at:
  2885 ;;		line 221 in file "keypad.c"
  2886 ;; Parameters:    Size  Location     Type
  2887 ;;		None
  2888 ;; Auto vars:     Size  Location     Type
  2889 ;;		None
  2890 ;; Return value:  Size  Location     Type
  2891 ;;                  1    wreg      unsigned char 
  2892 ;; Registers used:
  2893 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2894 ;; Tracked objects:
  2895 ;;		On entry : 0/0
  2896 ;;		On exit  : 0/0
  2897 ;;		Unchanged: 0/0
  2898 ;; Data sizes:     COMRAM   BANK0   BANK1
  2899 ;;      Params:         0       0       0
  2900 ;;      Locals:         0       0       0
  2901 ;;      Temps:          0       0       0
  2902 ;;      Totals:         0       0       0
  2903 ;;Total ram usage:        0 bytes
  2904 ;; Hardware stack levels used: 1
  2905 ;; Hardware stack levels required when called: 4
  2906 ;; This function calls:
  2907 ;;		_KeGetGenericValue
  2908 ;;		_getFullValue
  2909 ;; This function is called by:
  2910 ;;		_menuMotor
  2911 ;; This function uses a non-reentrant model
  2912 ;;
  2913                           
  2914                           	psect	text15
  2915  0016BA                     __ptext15:
  2916                           	callstack 0
  2917  0016BA                     _KeGetCharValue:
  2918                           	callstack 25
  2919                           
  2920                           ;keypad.c: 222:     return getFullValue(KeGetGenericValue());
  2921                           
  2922                           ;incstack = 0
  2923  0016BA  EC18  F00B         	call	_KeGetGenericValue	;wreg free
  2924  0016BE  EF54  F009         	goto	_getFullValue
  2925  0016C2                     __end_of_KeGetCharValue:
  2926                           	callstack 0
  2927                           
  2928 ;; *************** function _getFullValue *****************
  2929 ;; Defined at:
  2930 ;;		line 230 in file "keypad.c"
  2931 ;; Parameters:    Size  Location     Type
  2932 ;;  generic         1    wreg     unsigned char 
  2933 ;; Auto vars:     Size  Location     Type
  2934 ;;  generic         1    9[COMRAM] unsigned char 
  2935 ;; Return value:  Size  Location     Type
  2936 ;;                  1    wreg      unsigned char 
  2937 ;; Registers used:
  2938 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
  2939 ;; Tracked objects:
  2940 ;;		On entry : 0/0
  2941 ;;		On exit  : 0/0
  2942 ;;		Unchanged: 0/0
  2943 ;; Data sizes:     COMRAM   BANK0   BANK1
  2944 ;;      Params:         0       0       0
  2945 ;;      Locals:         1       0       0
  2946 ;;      Temps:          4       0       0
  2947 ;;      Totals:         5       0       0
  2948 ;;Total ram usage:        5 bytes
  2949 ;; Hardware stack levels used: 1
  2950 ;; Hardware stack levels required when called: 2
  2951 ;; This function calls:
  2952 ;;		Nothing
  2953 ;; This function is called by:
  2954 ;;		_KeGetCharValue
  2955 ;; This function uses a non-reentrant model
  2956 ;;
  2957                           
  2958                           	psect	text16
  2959  0012A8                     __ptext16:
  2960                           	callstack 0
  2961  0012A8                     _getFullValue:
  2962                           	callstack 26
  2963                           
  2964                           ;incstack = 0
  2965                           ;getFullValue@generic stored from wreg
  2966  0012A8  6E5D               	movwf	getFullValue@generic^0,c
  2967                           
  2968                           ;keypad.c: 232:     if (generic - '0' >= 2 && generic - '0' <= 9){
  2969  0012AA  D81F               	call	PL28	;call to abstracted procedure
  2970  0012AC  E103               	bnz	u250
  2971  0012AE  0E02               	movlw	2
  2972  0012B0  5C5B               	subwf	(??_getFullValue+2)^0,w,c
  2973  0012B2  E30E               	bnc	l1627
  2974  0012B4                     u250:
  2975  0012B4  D81A               	call	PL28	;call to abstracted procedure
  2976  0012B6  E10C               	bnz	l1627
  2977  0012B8  0E0A               	movlw	10
  2978  0012BA  5C5B               	subwf	(??_getFullValue+2)^0,w,c
  2979  0012BC  E209               	bc	l1627
  2980                           
  2981                           ;keypad.c: 233:         if (SMSTABLE[generic - '0' - 1][(numPresses-1)] == '\0'){
  2982  0012BE  D80A               	call	PL14	;call to abstracted procedure
  2983  0012C0  ECE7  F005         	call	PL10	;call to abstracted procedure
  2984  0012C4  E102               	bnz	l1623
  2985                           
  2986                           ;keypad.c: 234:             numPresses = 1;
  2987  0012C6  0E01               	movlw	1
  2988  0012C8  6E4C               	movwf	_numPresses^0,c
  2989  0012CA                     l1623:
  2990                           
  2991                           ;keypad.c: 236:         return SMSTABLE[generic - '0' - 1][(numPresses-1)];
  2992  0012CA  D804               	call	PL14	;call to abstracted procedure
  2993  0012CC  EFE7  F005         	goto	PL10	;call to abstracted procedure
  2994  0012D0                     l1627:
  2995                           
  2996                           ;keypad.c: 238:     return generic;
  2997  0012D0  505D               	movf	getFullValue@generic^0,w,c
  2998  0012D2  0012               	return		;funcret
  2999  0012D4                     __end_of_getFullValue:
  3000                           	callstack 0
  3001  0012D4                     PL14:
  3002                           	callstack 26
  3003  0012D4  505D               	movf	getFullValue@generic^0,w,c
  3004  0012D6  0D06               	mullw	6
  3005  0012D8  50F3               	movf	243,w,c
  3006  0012DA  0FA3               	addlw	low _SMSTABLE
  3007  0012DC  244C               	addwf	_numPresses^0,w,c
  3008  0012DE  6E59               	movwf	??_getFullValue^0,c
  3009  0012E0  0ED9               	movlw	217
  3010  0012E2  2659               	addwf	??_getFullValue^0,f,c
  3011  0012E4  C059  FFF6         	movff	??_getFullValue,tblptrl
  3012  0012E8                     	if	1	;There is more than 1 active tblptr byte
  3013  0012E8  0CD9               	retlw	217
  3014  0012EA                     __end_ofPL14:
  3015                           	callstack 0
  3016  0012EA                     PL28:
  3017                           	callstack 26
  3018  0012EA  0ED0               	movlw	208
  3019  0012EC  6E59               	movwf	??_getFullValue^0,c
  3020  0012EE  685A               	setf	(??_getFullValue+1)^0,c
  3021  0012F0  505D               	movf	getFullValue@generic^0,w,c
  3022  0012F2  6E5B               	movwf	(??_getFullValue+2)^0,c
  3023  0012F4  6A5C               	clrf	(??_getFullValue+3)^0,c
  3024  0012F6  5059               	movf	??_getFullValue^0,w,c
  3025  0012F8  265B               	addwf	(??_getFullValue+2)^0,f,c
  3026  0012FA  505A               	movf	(??_getFullValue+1)^0,w,c
  3027  0012FC  225C               	addwfc	(??_getFullValue+3)^0,f,c
  3028  0012FE  505C               	movf	(??_getFullValue+3)^0,w,c
  3029  001300  0012               	return	
  3030  001302                     __end_ofPL28:
  3031                           	callstack 0
  3032                           
  3033 ;; *************** function _JoSetMode *****************
  3034 ;; Defined at:
  3035 ;;		line 109 in file "Joystick.c"
  3036 ;; Parameters:    Size  Location     Type
  3037 ;;  mode            1    wreg     unsigned char 
  3038 ;; Auto vars:     Size  Location     Type
  3039 ;;  mode            1    5[COMRAM] unsigned char 
  3040 ;; Return value:  Size  Location     Type
  3041 ;;                  1    wreg      void 
  3042 ;; Registers used:
  3043 ;;		wreg
  3044 ;; Tracked objects:
  3045 ;;		On entry : 0/0
  3046 ;;		On exit  : 0/0
  3047 ;;		Unchanged: 0/0
  3048 ;; Data sizes:     COMRAM   BANK0   BANK1
  3049 ;;      Params:         0       0       0
  3050 ;;      Locals:         1       0       0
  3051 ;;      Temps:          0       0       0
  3052 ;;      Totals:         1       0       0
  3053 ;;Total ram usage:        1 bytes
  3054 ;; Hardware stack levels used: 1
  3055 ;; Hardware stack levels required when called: 2
  3056 ;; This function calls:
  3057 ;;		Nothing
  3058 ;; This function is called by:
  3059 ;;		_menuMotor
  3060 ;; This function uses a non-reentrant model
  3061 ;;
  3062                           
  3063                           	psect	text17
  3064  0016C2                     __ptext17:
  3065                           	callstack 0
  3066  0016C2                     _JoSetMode:
  3067                           	callstack 27
  3068                           
  3069                           ;incstack = 0
  3070                           ;JoSetMode@mode stored from wreg
  3071  0016C2  6E59               	movwf	JoSetMode@mode^0,c
  3072                           
  3073                           ;Joystick.c: 110:     joyMode = mode;
  3074  0016C4  C059  F039         	movff	JoSetMode@mode,_joyMode
  3075  0016C8  0012               	return		;funcret
  3076  0016CA                     __end_of_JoSetMode:
  3077                           	callstack 0
  3078                           
  3079 ;; *************** function _JoMoved *****************
  3080 ;; Defined at:
  3081 ;;		line 101 in file "Joystick.c"
  3082 ;; Parameters:    Size  Location     Type
  3083 ;;		None
  3084 ;; Auto vars:     Size  Location     Type
  3085 ;;		None
  3086 ;; Return value:  Size  Location     Type
  3087 ;;                  1    wreg      unsigned char 
  3088 ;; Registers used:
  3089 ;;		wreg, status,2
  3090 ;; Tracked objects:
  3091 ;;		On entry : 0/0
  3092 ;;		On exit  : 0/0
  3093 ;;		Unchanged: 0/0
  3094 ;; Data sizes:     COMRAM   BANK0   BANK1
  3095 ;;      Params:         0       0       0
  3096 ;;      Locals:         0       0       0
  3097 ;;      Temps:          0       0       0
  3098 ;;      Totals:         0       0       0
  3099 ;;Total ram usage:        0 bytes
  3100 ;; Hardware stack levels used: 1
  3101 ;; Hardware stack levels required when called: 2
  3102 ;; This function calls:
  3103 ;;		Nothing
  3104 ;; This function is called by:
  3105 ;;		_menuMotor
  3106 ;; This function uses a non-reentrant model
  3107 ;;
  3108                           
  3109                           	psect	text18
  3110  0016F6                     __ptext18:
  3111                           	callstack 0
  3112  0016F6                     _JoMoved:
  3113                           	callstack 27
  3114                           
  3115                           ;Joystick.c: 102:     return moved;
  3116                           
  3117                           ;incstack = 0
  3118  0016F6  503B               	movf	_moved^0,w,c
  3119  0016F8  0012               	return		;funcret
  3120  0016FA                     __end_of_JoMoved:
  3121                           	callstack 0
  3122                           
  3123 ;; *************** function _JoDirection *****************
  3124 ;; Defined at:
  3125 ;;		line 105 in file "Joystick.c"
  3126 ;; Parameters:    Size  Location     Type
  3127 ;;		None
  3128 ;; Auto vars:     Size  Location     Type
  3129 ;;		None
  3130 ;; Return value:  Size  Location     Type
  3131 ;;                  1    wreg      unsigned char 
  3132 ;; Registers used:
  3133 ;;		wreg, status,2
  3134 ;; Tracked objects:
  3135 ;;		On entry : 0/0
  3136 ;;		On exit  : 0/0
  3137 ;;		Unchanged: 0/0
  3138 ;; Data sizes:     COMRAM   BANK0   BANK1
  3139 ;;      Params:         0       0       0
  3140 ;;      Locals:         0       0       0
  3141 ;;      Temps:          0       0       0
  3142 ;;      Totals:         0       0       0
  3143 ;;Total ram usage:        0 bytes
  3144 ;; Hardware stack levels used: 1
  3145 ;; Hardware stack levels required when called: 2
  3146 ;; This function calls:
  3147 ;;		Nothing
  3148 ;; This function is called by:
  3149 ;;		_menuMotor
  3150 ;; This function uses a non-reentrant model
  3151 ;;
  3152                           
  3153                           	psect	text19
  3154  0016FA                     __ptext19:
  3155                           	callstack 0
  3156  0016FA                     _JoDirection:
  3157                           	callstack 27
  3158                           
  3159                           ;Joystick.c: 106:     return send;
  3160                           
  3161                           ;incstack = 0
  3162  0016FA  503E               	movf	_send^0,w,c
  3163  0016FC  0012               	return		;funcret
  3164  0016FE                     __end_of_JoDirection:
  3165                           	callstack 0
  3166                           
  3167 ;; *************** function _DaSaveUser *****************
  3168 ;; Defined at:
  3169 ;;		line 283 in file "EEPROM.c"
  3170 ;; Parameters:    Size  Location     Type
  3171 ;;  regUser        18    5[COMRAM] struct .
  3172 ;; Auto vars:     Size  Location     Type
  3173 ;;		None
  3174 ;; Return value:  Size  Location     Type
  3175 ;;                  1    wreg      void 
  3176 ;; Registers used:
  3177 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  3178 ;; Tracked objects:
  3179 ;;		On entry : 0/0
  3180 ;;		On exit  : 0/0
  3181 ;;		Unchanged: 0/0
  3182 ;; Data sizes:     COMRAM   BANK0   BANK1
  3183 ;;      Params:        18       0       0
  3184 ;;      Locals:         0       0       0
  3185 ;;      Temps:          0       0       0
  3186 ;;      Totals:        18       0       0
  3187 ;;Total ram usage:       18 bytes
  3188 ;; Hardware stack levels used: 1
  3189 ;; Hardware stack levels required when called: 2
  3190 ;; This function calls:
  3191 ;;		Nothing
  3192 ;; This function is called by:
  3193 ;;		_menuMotor
  3194 ;; This function uses a non-reentrant model
  3195 ;;
  3196                           
  3197                           	psect	text20
  3198  00159A                     __ptext20:
  3199                           	callstack 0
  3200  00159A                     _DaSaveUser:
  3201                           	callstack 27
  3202                           
  3203                           ;EEPROM.c: 284:     state = 5;
  3204                           
  3205                           ;incstack = 0
  3206  00159A  0E05               	movlw	5
  3207  00159C  6E38               	movwf	_state@EEPROM$F1481^0,c
  3208                           
  3209                           ;EEPROM.c: 285:     position = 0;
  3210  00159E  6A36               	clrf	_position^0,c
  3211                           
  3212                           ;EEPROM.c: 286:     userNum = 0;
  3213  0015A0  6A37               	clrf	_userNum^0,c
  3214                           
  3215                           ;EEPROM.c: 287:     mUser = regUser;
  3216  0015A2  EE20  F059         	lfsr	2,DaSaveUser@regUser
  3217  0015A6  EE10  F001         	lfsr	1,_mUser@EEPROM$F1485
  3218  0015AA  0E11               	movlw	17
  3219  0015AC                     u2561:
  3220  0015AC  CFDB FFE3          	movff	plusw2,plusw1
  3221  0015B0  06E8               	decf	wreg,f,c
  3222  0015B2  E2FC               	bc	u2561
  3223                           
  3224                           ;EEPROM.c: 288:     status = 2;
  3225  0015B4  0E02               	movlw	2
  3226  0015B6  6E35               	movwf	_status^0,c
  3227  0015B8  0C02               	retlw	2	;funcret
  3228  0015BA                     __end_of_DaSaveUser:
  3229                           	callstack 0
  3230                           
  3231 ;; *************** function _DaSaveScore *****************
  3232 ;; Defined at:
  3233 ;;		line 299 in file "EEPROM.c"
  3234 ;; Parameters:    Size  Location     Type
  3235 ;;  userScore       1    wreg     unsigned char 
  3236 ;; Auto vars:     Size  Location     Type
  3237 ;;  userScore       1    5[COMRAM] unsigned char 
  3238 ;; Return value:  Size  Location     Type
  3239 ;;                  1    wreg      void 
  3240 ;; Registers used:
  3241 ;;		wreg, status,2
  3242 ;; Tracked objects:
  3243 ;;		On entry : 0/0
  3244 ;;		On exit  : 0/0
  3245 ;;		Unchanged: 0/0
  3246 ;; Data sizes:     COMRAM   BANK0   BANK1
  3247 ;;      Params:         0       0       0
  3248 ;;      Locals:         1       0       0
  3249 ;;      Temps:          0       0       0
  3250 ;;      Totals:         1       0       0
  3251 ;;Total ram usage:        1 bytes
  3252 ;; Hardware stack levels used: 1
  3253 ;; Hardware stack levels required when called: 2
  3254 ;; This function calls:
  3255 ;;		Nothing
  3256 ;; This function is called by:
  3257 ;;		_menuMotor
  3258 ;; This function uses a non-reentrant model
  3259 ;;
  3260                           
  3261                           	psect	text21
  3262  00168C                     __ptext21:
  3263                           	callstack 0
  3264  00168C                     _DaSaveScore:
  3265                           	callstack 27
  3266                           
  3267                           ;incstack = 0
  3268                           ;DaSaveScore@userScore stored from wreg
  3269  00168C  6E59               	movwf	DaSaveScore@userScore^0,c
  3270                           
  3271                           ;EEPROM.c: 300:     saveScore = userScore;
  3272  00168E  C059  F033         	movff	DaSaveScore@userScore,_saveScore
  3273                           
  3274                           ;EEPROM.c: 301:     position = 0;
  3275  001692  6A36               	clrf	_position^0,c
  3276                           
  3277                           ;EEPROM.c: 302:     status = 0;
  3278  001694  6A35               	clrf	_status^0,c
  3279                           
  3280                           ;EEPROM.c: 303:     state = 20;
  3281  001696  0E14               	movlw	20
  3282  001698  6E38               	movwf	_state@EEPROM$F1481^0,c
  3283  00169A  0C14               	retlw	20	;funcret
  3284  00169C                     __end_of_DaSaveScore:
  3285                           	callstack 0
  3286                           
  3287 ;; *************** function _DaGetStatus *****************
  3288 ;; Defined at:
  3289 ;;		line 291 in file "EEPROM.c"
  3290 ;; Parameters:    Size  Location     Type
  3291 ;;		None
  3292 ;; Auto vars:     Size  Location     Type
  3293 ;;		None
  3294 ;; Return value:  Size  Location     Type
  3295 ;;                  1    wreg      unsigned char 
  3296 ;; Registers used:
  3297 ;;		wreg, status,2
  3298 ;; Tracked objects:
  3299 ;;		On entry : 0/0
  3300 ;;		On exit  : 0/0
  3301 ;;		Unchanged: 0/0
  3302 ;; Data sizes:     COMRAM   BANK0   BANK1
  3303 ;;      Params:         0       0       0
  3304 ;;      Locals:         0       0       0
  3305 ;;      Temps:          0       0       0
  3306 ;;      Totals:         0       0       0
  3307 ;;Total ram usage:        0 bytes
  3308 ;; Hardware stack levels used: 1
  3309 ;; Hardware stack levels required when called: 2
  3310 ;; This function calls:
  3311 ;;		Nothing
  3312 ;; This function is called by:
  3313 ;;		_menuMotor
  3314 ;; This function uses a non-reentrant model
  3315 ;;
  3316                           
  3317                           	psect	text22
  3318  0016FE                     __ptext22:
  3319                           	callstack 0
  3320  0016FE                     _DaGetStatus:
  3321                           	callstack 27
  3322                           
  3323                           ;EEPROM.c: 292:     return status;
  3324                           
  3325                           ;incstack = 0
  3326  0016FE  5035               	movf	_status^0,w,c
  3327  001700  0012               	return		;funcret
  3328  001702                     __end_of_DaGetStatus:
  3329                           	callstack 0
  3330                           
  3331 ;; *************** function _DaGetIdle *****************
  3332 ;; Defined at:
  3333 ;;		line 295 in file "EEPROM.c"
  3334 ;; Parameters:    Size  Location     Type
  3335 ;;		None
  3336 ;; Auto vars:     Size  Location     Type
  3337 ;;		None
  3338 ;; Return value:  Size  Location     Type
  3339 ;;                  1    wreg      unsigned char 
  3340 ;; Registers used:
  3341 ;;		wreg, status,2
  3342 ;; Tracked objects:
  3343 ;;		On entry : 0/0
  3344 ;;		On exit  : 0/0
  3345 ;;		Unchanged: 0/0
  3346 ;; Data sizes:     COMRAM   BANK0   BANK1
  3347 ;;      Params:         0       0       0
  3348 ;;      Locals:         0       0       0
  3349 ;;      Temps:          0       0       0
  3350 ;;      Totals:         0       0       0
  3351 ;;Total ram usage:        0 bytes
  3352 ;; Hardware stack levels used: 1
  3353 ;; Hardware stack levels required when called: 2
  3354 ;; This function calls:
  3355 ;;		Nothing
  3356 ;; This function is called by:
  3357 ;;		_menuMotor
  3358 ;; This function uses a non-reentrant model
  3359 ;;
  3360                           
  3361                           	psect	text23
  3362  0016CA                     __ptext23:
  3363                           	callstack 0
  3364  0016CA                     _DaGetIdle:
  3365                           	callstack 27
  3366                           
  3367                           ;EEPROM.c: 296:     return state == 0;
  3368                           
  3369                           ;incstack = 0
  3370  0016CA  5038               	movf	_state@EEPROM$F1481^0,w,c
  3371  0016CC  B4D8               	btfsc	status,2,c
  3372  0016CE  0C01               	retlw	1
  3373  0016D0  0C00               	retlw	0	;funcret
  3374  0016D2                     __end_of_DaGetIdle:
  3375                           	callstack 0
  3376                           
  3377 ;; *************** function _DaFindUser *****************
  3378 ;; Defined at:
  3379 ;;		line 269 in file "EEPROM.c"
  3380 ;; Parameters:    Size  Location     Type
  3381 ;;  logUser        18    0[BANK0 ] struct .
  3382 ;; Auto vars:     Size  Location     Type
  3383 ;;		None
  3384 ;; Return value:  Size  Location     Type
  3385 ;;                  1    wreg      void 
  3386 ;; Registers used:
  3387 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3388 ;; Tracked objects:
  3389 ;;		On entry : 0/0
  3390 ;;		On exit  : 0/0
  3391 ;;		Unchanged: 0/0
  3392 ;; Data sizes:     COMRAM   BANK0   BANK1
  3393 ;;      Params:         0      18       0
  3394 ;;      Locals:         0       0       0
  3395 ;;      Temps:          0       0       0
  3396 ;;      Totals:         0      18       0
  3397 ;;Total ram usage:       18 bytes
  3398 ;; Hardware stack levels used: 1
  3399 ;; Hardware stack levels required when called: 5
  3400 ;; This function calls:
  3401 ;;		_LcGotoXY
  3402 ;; This function is called by:
  3403 ;;		_menuMotor
  3404 ;; This function uses a non-reentrant model
  3405 ;;
  3406                           
  3407                           	psect	text24
  3408  001554                     __ptext24:
  3409                           	callstack 0
  3410  001554                     _DaFindUser:
  3411                           	callstack 24
  3412                           
  3413                           ;EEPROM.c: 270:     state = 1;
  3414                           
  3415                           ;incstack = 0
  3416  001554  0E01               	movlw	1
  3417  001556  6E38               	movwf	_state@EEPROM$F1481^0,c
  3418                           
  3419                           ;EEPROM.c: 271:     userNum = 0;
  3420  001558  6A37               	clrf	_userNum^0,c
  3421                           
  3422                           ;EEPROM.c: 272:     mUser = logUser;
  3423  00155A  EE20  F0CB         	lfsr	2,DaFindUser@logUser
  3424  00155E  EE10  F001         	lfsr	1,_mUser@EEPROM$F1485
  3425  001562  0E11               	movlw	17
  3426  001564                     u3651:
  3427  001564  CFDB FFE3          	movff	plusw2,plusw1
  3428  001568  06E8               	decf	wreg,f,c
  3429  00156A  E2FC               	bc	u3651
  3430                           
  3431                           ;EEPROM.c: 273:     status = 2;
  3432  00156C  0E02               	movlw	2
  3433  00156E  6E35               	movwf	_status^0,c
  3434                           
  3435                           ;EEPROM.c: 274:     LcGotoXY(10,0);
  3436  001570  6A61               	clrf	LcGotoXY@Row^0,c
  3437  001572  0E0A               	movlw	10
  3438  001574  EFB9  F007         	goto	_LcGotoXY
  3439  001578                     __end_of_DaFindUser:
  3440                           	callstack 0
  3441                           
  3442 ;; *************** function _joystickMotor *****************
  3443 ;; Defined at:
  3444 ;;		line 29 in file "Joystick.c"
  3445 ;; Parameters:    Size  Location     Type
  3446 ;;		None
  3447 ;; Auto vars:     Size  Location     Type
  3448 ;;		None
  3449 ;; Return value:  Size  Location     Type
  3450 ;;                  1    wreg      void 
  3451 ;; Registers used:
  3452 ;;		wreg, status,2, status,0, cstack
  3453 ;; Tracked objects:
  3454 ;;		On entry : 0/0
  3455 ;;		On exit  : 0/0
  3456 ;;		Unchanged: 0/0
  3457 ;; Data sizes:     COMRAM   BANK0   BANK1
  3458 ;;      Params:         0       0       0
  3459 ;;      Locals:         0       0       0
  3460 ;;      Temps:          2       0       0
  3461 ;;      Totals:         2       0       0
  3462 ;;Total ram usage:        2 bytes
  3463 ;; Hardware stack levels used: 1
  3464 ;; Hardware stack levels required when called: 3
  3465 ;; This function calls:
  3466 ;;		_SiIsAvailable
  3467 ;;		_SiSendChar
  3468 ;; This function is called by:
  3469 ;;		_main
  3470 ;; This function uses a non-reentrant model
  3471 ;;
  3472                           
  3473                           	psect	text25
  3474  000DF8                     __ptext25:
  3475                           	callstack 0
  3476  000DF8                     _joystickMotor:
  3477                           	callstack 27
  3478                           
  3479                           ;Joystick.c: 30:     LATC = stateJoy;
  3480                           
  3481                           ;incstack = 0
  3482  000DF8  C03A  FF8B         	movff	_stateJoy,3979	;volatile
  3483                           
  3484                           ;Joystick.c: 31:     switch (stateJoy){
  3485  000DFC  D04C               	goto	l2639
  3486  000DFE                     l598:
  3487                           
  3488                           ;Joystick.c: 33:             if (ADCON0bits.GO_DONE == 0){
  3489  000DFE  B2C2               	btfsc	194,1,c	;volatile
  3490  000E00  0012               	return	
  3491                           
  3492                           ;Joystick.c: 34:                 y = ADRESH;
  3493  000E02  CFC4 F03C          	movff	4036,_y	;volatile
  3494                           
  3495                           ;Joystick.c: 35:                 ADCON0bits.CHS0=1;
  3496  000E06  84C2               	bsf	194,2,c	;volatile
  3497                           
  3498                           ;Joystick.c: 36:                 ADCON0bits.CHS1=0;
  3499  000E08  96C2               	bcf	194,3,c	;volatile
  3500                           
  3501                           ;Joystick.c: 37:                 stateJoy = 1;
  3502  000E0A  0E01               	movlw	1
  3503  000E0C  6E3A               	movwf	_stateJoy^0,c
  3504                           
  3505                           ;Joystick.c: 38:                 ADCON0bits.GO_DONE=1;
  3506  000E0E  82C2               	bsf	194,1,c	;volatile
  3507  000E10  0C01               	retlw	1
  3508  000E12                     l601:
  3509                           
  3510                           ;Joystick.c: 42:             if (ADCON0bits.GO_DONE == 0){
  3511  000E12  B2C2               	btfsc	194,1,c	;volatile
  3512  000E14  0012               	return	
  3513                           
  3514                           ;Joystick.c: 43:                 x = ADRESH;
  3515  000E16  CFC4 F03D          	movff	4036,_x	;volatile
  3516                           
  3517                           ;Joystick.c: 44:                 ADCON0bits.CHS0=0;
  3518  000E1A  94C2               	bcf	194,2,c	;volatile
  3519                           
  3520                           ;Joystick.c: 45:                 ADCON0bits.CHS1=1;
  3521  000E1C  86C2               	bsf	194,3,c	;volatile
  3522                           
  3523                           ;Joystick.c: 46:                 stateJoy = 2;
  3524  000E1E  0E02               	movlw	2
  3525  000E20  6E3A               	movwf	_stateJoy^0,c
  3526  000E22  0C02               	retlw	2
  3527  000E24                     l2593:
  3528                           
  3529                           ;Joystick.c: 50:             stateJoy = 4;
  3530  000E24  0E04               	movlw	4
  3531  000E26  6E3A               	movwf	_stateJoy^0,c
  3532                           
  3533                           ;Joystick.c: 51:             if (moved){
  3534  000E28  503B               	movf	_moved^0,w,c
  3535  000E2A  E00F               	bz	l2605
  3536                           
  3537                           ;Joystick.c: 52:                 if (x >= 100 && x <= 150 && y >= 100 && y <= 150){
  3538  000E2C  0E63               	movlw	99
  3539  000E2E  643D               	cpfsgt	_x^0,c
  3540  000E30  0C63               	retlw	99
  3541  000E32  0E97               	movlw	151
  3542  000E34  603D               	cpfslt	_x^0,c
  3543  000E36  0C97               	retlw	151
  3544  000E38  0E63               	movlw	99
  3545  000E3A  643C               	cpfsgt	_y^0,c
  3546  000E3C  0C63               	retlw	99
  3547  000E3E  0E97               	movlw	151
  3548  000E40  603C               	cpfslt	_y^0,c
  3549  000E42  0C97               	retlw	151
  3550                           
  3551                           ;Joystick.c: 53:                     moved = 0;
  3552  000E44  6A3B               	clrf	_moved^0,c
  3553                           
  3554                           ;Joystick.c: 54:                     LATCbits.LATC0 = 0;
  3555  000E46  908B               	bcf	139,0,c	;volatile
  3556                           
  3557                           ;Joystick.c: 56:             }else {
  3558                           
  3559                           ;Joystick.c: 55:                 }
  3560  000E48  0012               	return	
  3561  000E4A                     l2605:
  3562                           
  3563                           ;Joystick.c: 57:                 if (x <= 10){
  3564  000E4A  0E0B               	movlw	11
  3565  000E4C  603D               	cpfslt	_x^0,c
  3566  000E4E  D008               	goto	l2611
  3567                           
  3568                           ;Joystick.c: 58:                     send = 'A';
  3569  000E50  0E41               	movlw	65
  3570  000E52                     L4:
  3571  000E52  6E3E               	movwf	_send^0,c
  3572                           
  3573                           ;Joystick.c: 59:                     moved = 1;
  3574  000E54  0E01               	movlw	1
  3575  000E56  6E3B               	movwf	_moved^0,c
  3576                           
  3577                           ;Joystick.c: 60:                     stateJoy = 4+joyMode;
  3578  000E58  5039               	movf	_joyMode^0,w,c
  3579  000E5A  0F04               	addlw	4
  3580  000E5C  6E3A               	movwf	_stateJoy^0,c
  3581                           
  3582                           ;Joystick.c: 61:                 } else if (x >= 240){
  3583  000E5E  0012               	return	
  3584  000E60                     l2611:
  3585  000E60  0EEF               	movlw	239
  3586  000E62  643D               	cpfsgt	_x^0,c
  3587  000E64  D002               	goto	l2617
  3588                           
  3589                           ;Joystick.c: 62:                     send = 'D';
  3590  000E66  0E44               	movlw	68
  3591  000E68  D7F4               	goto	L4
  3592  000E6A                     l2617:
  3593  000E6A  0E0B               	movlw	11
  3594  000E6C  603C               	cpfslt	_y^0,c
  3595  000E6E  D002               	goto	l2623
  3596                           
  3597                           ;Joystick.c: 66:                     send = 'S';
  3598  000E70  0E53               	movlw	83
  3599  000E72  D7EF               	goto	L4
  3600  000E74                     l2623:
  3601  000E74  0EEF               	movlw	239
  3602  000E76  643C               	cpfsgt	_y^0,c
  3603  000E78  0CEF               	retlw	239
  3604                           
  3605                           ;Joystick.c: 70:                     send = 'W';
  3606  000E7A  0E57               	movlw	87
  3607  000E7C  D7EA               	goto	L4
  3608  000E7E                     l614:
  3609                           
  3610                           ;Joystick.c: 82:             stateJoy = 0;
  3611                           
  3612                           ;Joystick.c: 83:             ADCON0bits.GO_DONE=1;
  3613                           
  3614                           ;Joystick.c: 84:             break;
  3615  000E7E  D01B               	goto	PL78	;call to abstracted procedure
  3616  000E80                     l2629:
  3617                           
  3618                           ;Joystick.c: 87:             if(SiIsAvailable()){
  3619  000E80  EC74  F00B         	call	_SiIsAvailable	;wreg free
  3620  000E84  0900               	iorlw	0
  3621  000E86  B4D8               	btfsc	status,2,c
  3622  000E88  0012               	return	
  3623                           
  3624                           ;Joystick.c: 88:                 SiSendChar(send);
  3625  000E8A  503E               	movf	_send^0,w,c
  3626  000E8C  EC69  F00B         	call	_SiSendChar
  3627                           
  3628                           ;Joystick.c: 89:                 stateJoy = 0;
  3629                           
  3630                           ;Joystick.c: 90:                 ADCON0bits.GO_DONE=1;
  3631  000E90  D012               	goto	PL78	;call to abstracted procedure
  3632  000E92                     l617:
  3633                           
  3634                           ;Joystick.c: 94:             stateJoy = 0;
  3635  000E92  6A3A               	clrf	_stateJoy^0,c
  3636                           
  3637                           ;Joystick.c: 95:             break;
  3638  000E94  0012               	return	
  3639  000E96                     l2639:
  3640  000E96  503A               	movf	_stateJoy^0,w,c
  3641  000E98  6E5A               	movwf	??_joystickMotor^0,c
  3642  000E9A  6A5B               	clrf	(??_joystickMotor+1)^0,c
  3643                           
  3644                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3645                           ; Switch size 1, requested type "space"
  3646                           ; Number of cases is 1, Range of values is 0 to 0
  3647                           ; switch strategies available:
  3648                           ; Name         Instructions Cycles
  3649                           ; simple_byte            4     3 (average)
  3650                           ;	Chosen strategy is simple_byte
  3651  000E9C  505B               	movf	(??_joystickMotor+1)^0,w,c
  3652  000E9E  E1F9               	bnz	l617
  3653                           
  3654                           ; Switch size 1, requested type "space"
  3655                           ; Number of cases is 5, Range of values is 0 to 5
  3656                           ; switch strategies available:
  3657                           ; Name         Instructions Cycles
  3658                           ; simple_byte           16     9 (average)
  3659                           ;	Chosen strategy is simple_byte
  3660  000EA0  505A               	movf	??_joystickMotor^0,w,c
  3661  000EA2  E0AD               	bz	l598
  3662  000EA4  0A01               	xorlw	1	; case 1
  3663  000EA6  E0B5               	bz	l601
  3664  000EA8  0A03               	xorlw	3	; case 2
  3665  000EAA  E0BC               	bz	l2593
  3666  000EAC  0A06               	xorlw	6	; case 4
  3667  000EAE  E003               	bz	PL78
  3668  000EB0  0A01               	xorlw	1	; case 5
  3669  000EB2  E0E6               	bz	l2629
  3670  000EB4  D7EE               	goto	l617
  3671  000EB6                     __end_of_joystickMotor:
  3672                           	callstack 0
  3673  000EB6                     PL78:
  3674                           	callstack 27
  3675  000EB6  6A3A               	clrf	_stateJoy^0,c
  3676  000EB8  82C2               	bsf	194,1,c	;volatile
  3677  000EBA  0012               	return	
  3678  000EBC                     __end_ofPL78:
  3679                           	callstack 0
  3680                           
  3681 ;; *************** function _SiSendChar *****************
  3682 ;; Defined at:
  3683 ;;		line 27 in file "SIO.c"
  3684 ;; Parameters:    Size  Location     Type
  3685 ;;  myByte          1    wreg     unsigned char 
  3686 ;; Auto vars:     Size  Location     Type
  3687 ;;  myByte          1    5[COMRAM] unsigned char 
  3688 ;; Return value:  Size  Location     Type
  3689 ;;                  1    wreg      void 
  3690 ;; Registers used:
  3691 ;;		wreg
  3692 ;; Tracked objects:
  3693 ;;		On entry : 0/0
  3694 ;;		On exit  : 0/0
  3695 ;;		Unchanged: 0/0
  3696 ;; Data sizes:     COMRAM   BANK0   BANK1
  3697 ;;      Params:         0       0       0
  3698 ;;      Locals:         1       0       0
  3699 ;;      Temps:          0       0       0
  3700 ;;      Totals:         1       0       0
  3701 ;;Total ram usage:        1 bytes
  3702 ;; Hardware stack levels used: 1
  3703 ;; Hardware stack levels required when called: 2
  3704 ;; This function calls:
  3705 ;;		Nothing
  3706 ;; This function is called by:
  3707 ;;		_menuMotor
  3708 ;;		_joystickMotor
  3709 ;; This function uses a non-reentrant model
  3710 ;;
  3711                           
  3712                           	psect	text26
  3713  0016D2                     __ptext26:
  3714                           	callstack 0
  3715  0016D2                     _SiSendChar:
  3716                           	callstack 27
  3717                           
  3718                           ;incstack = 0
  3719                           ;SiSendChar@myByte stored from wreg
  3720  0016D2  6E59               	movwf	SiSendChar@myByte^0,c
  3721                           
  3722                           ;SIO.c: 28:     TXREG = myByte;
  3723  0016D4  C059  FFAD         	movff	SiSendChar@myByte,4013	;volatile
  3724  0016D8  0012               	return		;funcret
  3725  0016DA                     __end_of_SiSendChar:
  3726                           	callstack 0
  3727                           
  3728 ;; *************** function _SiIsAvailable *****************
  3729 ;; Defined at:
  3730 ;;		line 23 in file "SIO.c"
  3731 ;; Parameters:    Size  Location     Type
  3732 ;;		None
  3733 ;; Auto vars:     Size  Location     Type
  3734 ;;		None
  3735 ;; Return value:  Size  Location     Type
  3736 ;;                  1    wreg      unsigned char 
  3737 ;; Registers used:
  3738 ;;		wreg
  3739 ;; Tracked objects:
  3740 ;;		On entry : 0/0
  3741 ;;		On exit  : 0/0
  3742 ;;		Unchanged: 0/0
  3743 ;; Data sizes:     COMRAM   BANK0   BANK1
  3744 ;;      Params:         0       0       0
  3745 ;;      Locals:         0       0       0
  3746 ;;      Temps:          0       0       0
  3747 ;;      Totals:         0       0       0
  3748 ;;Total ram usage:        0 bytes
  3749 ;; Hardware stack levels used: 1
  3750 ;; Hardware stack levels required when called: 2
  3751 ;; This function calls:
  3752 ;;		Nothing
  3753 ;; This function is called by:
  3754 ;;		_menuMotor
  3755 ;;		_joystickMotor
  3756 ;; This function uses a non-reentrant model
  3757 ;;
  3758                           
  3759                           	psect	text27
  3760  0016E8                     __ptext27:
  3761                           	callstack 0
  3762  0016E8                     _SiIsAvailable:
  3763                           	callstack 27
  3764                           
  3765                           ;SIO.c: 24:     return TXSTAbits.TRMT;
  3766                           
  3767                           ;incstack = 0
  3768  0016E8  B2AC               	btfsc	172,1,c	;volatile
  3769  0016EA  0C01               	retlw	1
  3770  0016EC  0C00               	retlw	0	;funcret
  3771  0016EE                     __end_of_SiIsAvailable:
  3772                           	callstack 0
  3773                           
  3774 ;; *************** function _initSIO *****************
  3775 ;; Defined at:
  3776 ;;		line 5 in file "SIO.c"
  3777 ;; Parameters:    Size  Location     Type
  3778 ;;		None
  3779 ;; Auto vars:     Size  Location     Type
  3780 ;;		None
  3781 ;; Return value:  Size  Location     Type
  3782 ;;                  1    wreg      void 
  3783 ;; Registers used:
  3784 ;;		None
  3785 ;; Tracked objects:
  3786 ;;		On entry : 0/0
  3787 ;;		On exit  : 0/0
  3788 ;;		Unchanged: 0/0
  3789 ;; Data sizes:     COMRAM   BANK0   BANK1
  3790 ;;      Params:         0       0       0
  3791 ;;      Locals:         0       0       0
  3792 ;;      Temps:          0       0       0
  3793 ;;      Totals:         0       0       0
  3794 ;;Total ram usage:        0 bytes
  3795 ;; Hardware stack levels used: 1
  3796 ;; Hardware stack levels required when called: 2
  3797 ;; This function calls:
  3798 ;;		Nothing
  3799 ;; This function is called by:
  3800 ;;		_main
  3801 ;; This function uses a non-reentrant model
  3802 ;;
  3803                           
  3804                           	psect	text28
  3805  001678                     __ptext28:
  3806                           	callstack 0
  3807  001678                     _initSIO:
  3808                           	callstack 28
  3809                           
  3810                           ;SIO.c: 8:     TRISCbits.TRISC7 = 1;
  3811                           
  3812                           ;incstack = 0
  3813  001678  8E94               	bsf	148,7,c	;volatile
  3814                           
  3815                           ;SIO.c: 9:     TRISCbits.TRISC6 = 1;
  3816  00167A  8C94               	bsf	148,6,c	;volatile
  3817                           
  3818                           ;SIO.c: 10:     TXSTAbits.BRGH = 1;
  3819  00167C  84AC               	bsf	172,2,c	;volatile
  3820                           
  3821                           ;SIO.c: 11:     TXSTAbits.TXEN = 1;
  3822  00167E  8AAC               	bsf	172,5,c	;volatile
  3823                           
  3824                           ;SIO.c: 12:     TXSTAbits.SYNC = 0;
  3825  001680  98AC               	bcf	172,4,c	;volatile
  3826                           
  3827                           ;SIO.c: 14:     RCSTAbits.SPEN = 1;
  3828  001682  8EAB               	bsf	171,7,c	;volatile
  3829                           
  3830                           ;SIO.c: 15:     RCSTAbits.CREN = 1;
  3831  001684  88AB               	bsf	171,4,c	;volatile
  3832                           
  3833                           ;SIO.c: 17:     BAUDCONbits.BRG16 = 0;
  3834  001686  96B8               	bcf	184,3,c	;volatile
  3835                           
  3836                           ;SIO.c: 19:     SPBRG = 255;
  3837  001688  68AF               	setf	175,c	;volatile
  3838  00168A  0012               	return		;funcret
  3839  00168C                     __end_of_initSIO:
  3840                           	callstack 0
  3841                           
  3842 ;; *************** function _initMenu *****************
  3843 ;; Defined at:
  3844 ;;		line 21 in file "Menu.c"
  3845 ;; Parameters:    Size  Location     Type
  3846 ;;		None
  3847 ;; Auto vars:     Size  Location     Type
  3848 ;;		None
  3849 ;; Return value:  Size  Location     Type
  3850 ;;                  1    wreg      void 
  3851 ;; Registers used:
  3852 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3853 ;; Tracked objects:
  3854 ;;		On entry : 0/0
  3855 ;;		On exit  : 0/0
  3856 ;;		Unchanged: 0/0
  3857 ;; Data sizes:     COMRAM   BANK0   BANK1
  3858 ;;      Params:         0       0       0
  3859 ;;      Locals:         0       0       0
  3860 ;;      Temps:          0       0       0
  3861 ;;      Totals:         0       0       0
  3862 ;;Total ram usage:        0 bytes
  3863 ;; Hardware stack levels used: 1
  3864 ;; Hardware stack levels required when called: 3
  3865 ;; This function calls:
  3866 ;;		_TiGetTimer
  3867 ;; This function is called by:
  3868 ;;		_main
  3869 ;; This function uses a non-reentrant model
  3870 ;;
  3871                           
  3872                           	psect	text29
  3873  0016DA                     __ptext29:
  3874                           	callstack 0
  3875  0016DA                     _initMenu:
  3876                           	callstack 27
  3877                           
  3878                           ;Menu.c: 22:     timer = TiGetTimer();
  3879                           
  3880                           ;incstack = 0
  3881  0016DA  EC5C  F00A         	call	_TiGetTimer	;wreg free
  3882  0016DE  6E44               	movwf	_timer^0,c
  3883  0016E0  0012               	return		;funcret
  3884  0016E2                     __end_of_initMenu:
  3885                           	callstack 0
  3886                           
  3887 ;; *************** function _initKeypad *****************
  3888 ;; Defined at:
  3889 ;;		line 29 in file "keypad.c"
  3890 ;; Parameters:    Size  Location     Type
  3891 ;;		None
  3892 ;; Auto vars:     Size  Location     Type
  3893 ;;		None
  3894 ;; Return value:  Size  Location     Type
  3895 ;;                  1    wreg      void 
  3896 ;; Registers used:
  3897 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3898 ;; Tracked objects:
  3899 ;;		On entry : 0/0
  3900 ;;		On exit  : 0/0
  3901 ;;		Unchanged: 0/0
  3902 ;; Data sizes:     COMRAM   BANK0   BANK1
  3903 ;;      Params:         0       0       0
  3904 ;;      Locals:         0       0       0
  3905 ;;      Temps:          0       0       0
  3906 ;;      Totals:         0       0       0
  3907 ;;Total ram usage:        0 bytes
  3908 ;; Hardware stack levels used: 1
  3909 ;; Hardware stack levels required when called: 3
  3910 ;; This function calls:
  3911 ;;		_TiGetTimer
  3912 ;; This function is called by:
  3913 ;;		_main
  3914 ;; This function uses a non-reentrant model
  3915 ;;
  3916                           
  3917                           	psect	text30
  3918  0015DA                     __ptext30:
  3919                           	callstack 0
  3920  0015DA                     _initKeypad:
  3921                           	callstack 27
  3922                           
  3923                           ;keypad.c: 30:     INTCON2bits.RBPU = 0;
  3924                           
  3925                           ;incstack = 0
  3926  0015DA  9EF1               	bcf	241,7,c	;volatile
  3927                           
  3928                           ;keypad.c: 33:     TRISBbits.TRISB0 = 1;
  3929  0015DC  8093               	bsf	147,0,c	;volatile
  3930                           
  3931                           ;keypad.c: 34:     TRISBbits.TRISB1 = 1;
  3932  0015DE  8293               	bsf	147,1,c	;volatile
  3933                           
  3934                           ;keypad.c: 35:     TRISBbits.TRISB2 = 1;
  3935  0015E0  8493               	bsf	147,2,c	;volatile
  3936                           
  3937                           ;keypad.c: 36:     TRISBbits.TRISB3 = 0;
  3938  0015E2  9693               	bcf	147,3,c	;volatile
  3939                           
  3940                           ;keypad.c: 37:     TRISBbits.TRISB4 = 0;
  3941  0015E4  9893               	bcf	147,4,c	;volatile
  3942                           
  3943                           ;keypad.c: 38:     TRISBbits.TRISB5 = 0;
  3944  0015E6  9A93               	bcf	147,5,c	;volatile
  3945                           
  3946                           ;keypad.c: 39:     TRISBbits.TRISB6 = 0;
  3947  0015E8  9C93               	bcf	147,6,c	;volatile
  3948                           
  3949                           ;keypad.c: 40:     timerBounces = TiGetTimer();
  3950  0015EA  EC5C  F00A         	call	_TiGetTimer	;wreg free
  3951  0015EE  6E51               	movwf	_timerBounces^0,c
  3952                           
  3953                           ;keypad.c: 41:     timer_SMS = TiGetTimer();
  3954  0015F0  EC5C  F00A         	call	_TiGetTimer	;wreg free
  3955  0015F4  6E50               	movwf	_timer_SMS^0,c
  3956  0015F6  0012               	return		;funcret
  3957  0015F8                     __end_of_initKeypad:
  3958                           	callstack 0
  3959                           
  3960 ;; *************** function _initJoystick *****************
  3961 ;; Defined at:
  3962 ;;		line 11 in file "Joystick.c"
  3963 ;; Parameters:    Size  Location     Type
  3964 ;;		None
  3965 ;; Auto vars:     Size  Location     Type
  3966 ;;		None
  3967 ;; Return value:  Size  Location     Type
  3968 ;;                  1    wreg      void 
  3969 ;; Registers used:
  3970 ;;		wreg, status,2
  3971 ;; Tracked objects:
  3972 ;;		On entry : 0/0
  3973 ;;		On exit  : 0/0
  3974 ;;		Unchanged: 0/0
  3975 ;; Data sizes:     COMRAM   BANK0   BANK1
  3976 ;;      Params:         0       0       0
  3977 ;;      Locals:         0       0       0
  3978 ;;      Temps:          0       0       0
  3979 ;;      Totals:         0       0       0
  3980 ;;Total ram usage:        0 bytes
  3981 ;; Hardware stack levels used: 1
  3982 ;; Hardware stack levels required when called: 2
  3983 ;; This function calls:
  3984 ;;		Nothing
  3985 ;; This function is called by:
  3986 ;;		_main
  3987 ;; This function uses a non-reentrant model
  3988 ;;
  3989                           
  3990                           	psect	text31
  3991  001578                     __ptext31:
  3992                           	callstack 0
  3993  001578                     _initJoystick:
  3994                           	callstack 28
  3995                           
  3996                           ;Joystick.c: 12:     TRISAbits.TRISA0 = 1;
  3997                           
  3998                           ;incstack = 0
  3999  001578  8092               	bsf	146,0,c	;volatile
  4000                           
  4001                           ;Joystick.c: 13:     TRISAbits.TRISA1 = 1;
  4002  00157A  8292               	bsf	146,1,c	;volatile
  4003                           
  4004                           ;Joystick.c: 14:     ADCON0 = 0x03;
  4005  00157C  0E03               	movlw	3
  4006  00157E  6EC2               	movwf	194,c	;volatile
  4007                           
  4008                           ;Joystick.c: 15:     ADCON1 = 0x0C;
  4009  001580  0E0C               	movlw	12
  4010  001582  6EC1               	movwf	193,c	;volatile
  4011                           
  4012                           ;Joystick.c: 16:     ADCON2 = 0x44;
  4013  001584  0E44               	movlw	68
  4014  001586  6EC0               	movwf	192,c	;volatile
  4015                           
  4016                           ;Joystick.c: 18:     TRISCbits.TRISC0 = 0;
  4017  001588  9094               	bcf	148,0,c	;volatile
  4018                           
  4019                           ;Joystick.c: 19:     TRISCbits.TRISC1 = 0;
  4020  00158A  9294               	bcf	148,1,c	;volatile
  4021                           
  4022                           ;Joystick.c: 20:     TRISCbits.TRISC2 = 0;
  4023  00158C  9494               	bcf	148,2,c	;volatile
  4024                           
  4025                           ;Joystick.c: 21:     moved = 0;
  4026  00158E  6A3B               	clrf	_moved^0,c
  4027                           
  4028                           ;Joystick.c: 22:     ADCON0bits.GO_DONE=1;
  4029  001590  82C2               	bsf	194,1,c	;volatile
  4030                           
  4031                           ;Joystick.c: 23:     ADCON0bits.CHS0=0;
  4032  001592  94C2               	bcf	194,2,c	;volatile
  4033                           
  4034                           ;Joystick.c: 24:     ADCON0bits.CHS1=1;
  4035  001594  86C2               	bsf	194,3,c	;volatile
  4036                           
  4037                           ;Joystick.c: 25:     stateJoy = 0;
  4038  001596  6A3A               	clrf	_stateJoy^0,c
  4039  001598  0012               	return		;funcret
  4040  00159A                     __end_of_initJoystick:
  4041                           	callstack 0
  4042                           
  4043 ;; *************** function _initData *****************
  4044 ;; Defined at:
  4045 ;;		line 24 in file "EEPROM.c"
  4046 ;; Parameters:    Size  Location     Type
  4047 ;;		None
  4048 ;; Auto vars:     Size  Location     Type
  4049 ;;		None
  4050 ;; Return value:  Size  Location     Type
  4051 ;;                  1    wreg      void 
  4052 ;; Registers used:
  4053 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4054 ;; Tracked objects:
  4055 ;;		On entry : 0/0
  4056 ;;		On exit  : 0/0
  4057 ;;		Unchanged: 0/0
  4058 ;; Data sizes:     COMRAM   BANK0   BANK1
  4059 ;;      Params:         0       0       0
  4060 ;;      Locals:         0       0       0
  4061 ;;      Temps:          0       0       0
  4062 ;;      Totals:         0       0       0
  4063 ;;Total ram usage:        0 bytes
  4064 ;; Hardware stack levels used: 1
  4065 ;; Hardware stack levels required when called: 3
  4066 ;; This function calls:
  4067 ;;		_readUserData
  4068 ;; This function is called by:
  4069 ;;		_main
  4070 ;; This function uses a non-reentrant model
  4071 ;;
  4072                           
  4073                           	psect	text32
  4074  001106                     __ptext32:
  4075                           	callstack 0
  4076  001106                     _initData:
  4077                           	callstack 27
  4078                           
  4079                           ;EEPROM.c: 25:     state = 0;
  4080                           
  4081                           ;incstack = 0
  4082  001106  6A38               	clrf	_state@EEPROM$F1481^0,c
  4083                           
  4084                           ;EEPROM.c: 26:     for (userNum = 0; userNum < 8; userNum++){
  4085  001108  6A37               	clrf	_userNum^0,c
  4086  00110A                     l2063:
  4087  00110A  0E07               	movlw	7
  4088  00110C  6437               	cpfsgt	_userNum^0,c
  4089  00110E  D001               	goto	l2067
  4090  001110  D004               	goto	l694
  4091  001112                     l2067:
  4092                           
  4093                           ;EEPROM.c: 27:         readUserData();
  4094  001112  EC03  F008         	call	_readUserData	;wreg free
  4095                           
  4096                           ;EEPROM.c: 28:     }
  4097  001116  2A37               	incf	_userNum^0,f,c
  4098  001118  D7F8               	goto	l2063
  4099  00111A                     l694:
  4100                           
  4101                           ;EEPROM.c: 29:     for (position = 0; position < 10; position = position+2){
  4102  00111A  6A36               	clrf	_position^0,c
  4103  00111C                     l2073:
  4104  00111C  0E09               	movlw	9
  4105  00111E  6436               	cpfsgt	_position^0,c
  4106  001120  D001               	goto	l695
  4107  001122  D01B               	goto	l696
  4108  001124                     l695:
  4109                           
  4110                           ;EEPROM.c: 30:         EECON1bits.EEPGD = 0;
  4111  001124  9EA6               	bcf	166,7,c	;volsfr
  4112                           
  4113                           ;EEPROM.c: 31:         EECON1bits.CFGS = 0;
  4114  001126  9CA6               	bcf	166,6,c	;volsfr
  4115                           
  4116                           ;EEPROM.c: 32:         EEADR = (0x90)+position;
  4117  001128  5036               	movf	_position^0,w,c
  4118  00112A  0F90               	addlw	144
  4119  00112C  6EA9               	movwf	169,c	;volatile
  4120                           
  4121                           ;EEPROM.c: 33:         EECON1bits.RD = 1;
  4122  00112E  80A6               	bsf	166,0,c	;volsfr
  4123                           
  4124                           ;EEPROM.c: 34:         topScores[position].score = EEDATA;
  4125  001130  5036               	movf	_position^0,w,c
  4126  001132  EC5C  F005         	call	PL30	;call to abstracted procedure
  4127  001136  CFA8 FFDF          	movff	4008,indf2	;volatile
  4128                           
  4129                           ;EEPROM.c: 35:         EECON1bits.EEPGD = 0;
  4130  00113A  9EA6               	bcf	166,7,c	;volsfr
  4131                           
  4132                           ;EEPROM.c: 36:         EECON1bits.CFGS = 0;
  4133  00113C  9CA6               	bcf	166,6,c	;volsfr
  4134                           
  4135                           ;EEPROM.c: 37:         EEADR = (0x90)+position+1;
  4136  00113E  5036               	movf	_position^0,w,c
  4137  001140  0F91               	addlw	145
  4138  001142  6EA9               	movwf	169,c	;volatile
  4139                           
  4140                           ;EEPROM.c: 38:         EECON1bits.RD = 1;
  4141  001144  80A6               	bsf	166,0,c	;volsfr
  4142  001146                     l697:
  4143  001146  B0A6               	btfsc	166,0,c	;volsfr
  4144  001148  D7FE               	goto	l697
  4145                           
  4146                           ;EEPROM.c: 40:         topScores[position].userNum = EEDATA;
  4147  00114A  5036               	movf	_position^0,w,c
  4148  00114C  EC6E  F005         	call	PL54	;call to abstracted procedure
  4149  001150  CFA8 FFDF          	movff	4008,indf2	;volatile
  4150                           
  4151                           ;EEPROM.c: 41:     }
  4152  001154  0E02               	movlw	2
  4153  001156  2636               	addwf	_position^0,f,c
  4154  001158  D7E1               	goto	l2073
  4155  00115A                     l696:
  4156                           
  4157                           ;EEPROM.c: 42:     EECON1bits.EEPGD = 0;
  4158  00115A  9EA6               	bcf	166,7,c	;volsfr
  4159                           
  4160                           ;EEPROM.c: 43:     EECON1bits.CFGS = 0;
  4161  00115C  9CA6               	bcf	166,6,c	;volsfr
  4162                           
  4163                           ;EEPROM.c: 44:     EEADR = 0x95;
  4164  00115E  0E95               	movlw	149
  4165  001160  6EA9               	movwf	169,c	;volatile
  4166                           
  4167                           ;EEPROM.c: 45:     EECON1bits.RD = 1;
  4168  001162  80A6               	bsf	166,0,c	;volsfr
  4169  001164                     l700:
  4170  001164  B0A6               	btfsc	166,0,c	;volsfr
  4171  001166  D7FE               	goto	l700
  4172                           
  4173                           ;EEPROM.c: 47:     lastUserPointer = EEDATA;
  4174  001168  CFA8 F034          	movff	4008,_lastUserPointer	;volatile
  4175                           
  4176                           ;EEPROM.c: 48:     if (lastUserPointer == 0xFF){
  4177  00116C  2834               	incf	_lastUserPointer^0,w,c
  4178  00116E  B4D8               	btfsc	status,2,c
  4179                           
  4180                           ;EEPROM.c: 49:         lastUserPointer = 0;
  4181  001170  6A34               	clrf	_lastUserPointer^0,c
  4182  001172  0012               	return		;funcret
  4183  001174                     __end_of_initData:
  4184                           	callstack 0
  4185                           
  4186 ;; *************** function _readUserData *****************
  4187 ;; Defined at:
  4188 ;;		line 306 in file "EEPROM.c"
  4189 ;; Parameters:    Size  Location     Type
  4190 ;;		None
  4191 ;; Auto vars:     Size  Location     Type
  4192 ;;		None
  4193 ;; Return value:  Size  Location     Type
  4194 ;;                  1    wreg      void 
  4195 ;; Registers used:
  4196 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  4197 ;; Tracked objects:
  4198 ;;		On entry : 0/0
  4199 ;;		On exit  : 0/0
  4200 ;;		Unchanged: 0/0
  4201 ;; Data sizes:     COMRAM   BANK0   BANK1
  4202 ;;      Params:         0       0       0
  4203 ;;      Locals:         0       0       0
  4204 ;;      Temps:          2       0       0
  4205 ;;      Totals:         2       0       0
  4206 ;;Total ram usage:        2 bytes
  4207 ;; Hardware stack levels used: 1
  4208 ;; Hardware stack levels required when called: 2
  4209 ;; This function calls:
  4210 ;;		Nothing
  4211 ;; This function is called by:
  4212 ;;		_initData
  4213 ;; This function uses a non-reentrant model
  4214 ;;
  4215                           
  4216                           	psect	text33
  4217  001006                     __ptext33:
  4218                           	callstack 0
  4219  001006                     _readUserData:
  4220                           	callstack 27
  4221                           
  4222                           ;EEPROM.c: 307:     for (position = 0; position < 9; position++){
  4223                           
  4224                           ;incstack = 0
  4225  001006  6A36               	clrf	_position^0,c
  4226  001008                     l1899:
  4227  001008  0E08               	movlw	8
  4228  00100A  6436               	cpfsgt	_position^0,c
  4229  00100C  D001               	goto	l779
  4230  00100E  D00A               	goto	l780
  4231  001010                     l779:
  4232                           
  4233                           ;EEPROM.c: 308:         EECON1bits.EEPGD = 0;
  4234  001010  9EA6               	bcf	166,7,c	;volsfr
  4235                           
  4236                           ;EEPROM.c: 309:         EECON1bits.CFGS = 0;
  4237  001012  9CA6               	bcf	166,6,c	;volsfr
  4238                           
  4239                           ;EEPROM.c: 310:         EEADR = (userNum*24)+position;
  4240  001014  5037               	movf	_userNum^0,w,c
  4241  001016  D834               	call	PL64	;call to abstracted procedure
  4242                           
  4243                           ;EEPROM.c: 311:         EECON1bits.RD = 1;
  4244  001018  80A6               	bsf	166,0,c	;volsfr
  4245  00101A                     l781:
  4246  00101A  B0A6               	btfsc	166,0,c	;volsfr
  4247  00101C  D7FE               	goto	l781
  4248                           
  4249                           ;EEPROM.c: 313:         users[userNum].username[position] = EEDATA;
  4250  00101E  D823               	call	PL46	;call to abstracted procedure
  4251                           
  4252                           ;EEPROM.c: 314:     }
  4253  001020  D814               	call	PL16	;call to abstracted procedure
  4254  001022  D7F2               	goto	l1899
  4255  001024                     l780:
  4256                           
  4257                           ;EEPROM.c: 315:     for (position = 0; position < 9; position++){
  4258  001024  6A36               	clrf	_position^0,c
  4259  001026                     l1913:
  4260  001026  0E08               	movlw	8
  4261  001028  6436               	cpfsgt	_position^0,c
  4262  00102A  D001               	goto	l784
  4263  00102C  0C08               	retlw	8
  4264  00102E                     l784:
  4265                           
  4266                           ;EEPROM.c: 316:         EECON1bits.EEPGD = 0;
  4267  00102E  9EA6               	bcf	166,7,c	;volsfr
  4268                           
  4269                           ;EEPROM.c: 317:         EECON1bits.CFGS = 0;
  4270  001030  9CA6               	bcf	166,6,c	;volsfr
  4271                           
  4272                           ;EEPROM.c: 318:         EEADR = (userNum*24)+9+position;
  4273  001032  5037               	movf	_userNum^0,w,c
  4274  001034  D81F               	call	PL52	;call to abstracted procedure
  4275                           
  4276                           ;EEPROM.c: 319:         EECON1bits.RD = 1;
  4277  001036  80A6               	bsf	166,0,c	;volsfr
  4278  001038                     l786:
  4279  001038  B0A6               	btfsc	166,0,c	;volsfr
  4280  00103A  D7FE               	goto	l786
  4281                           
  4282                           ;EEPROM.c: 321:         users[userNum].password[position] = EEDATA;
  4283  00103C  D814               	call	PL46	;call to abstracted procedure
  4284  00103E  0E09               	movlw	9
  4285  001040  2659               	addwf	??_readUserData^0,f,c
  4286  001042  0E00               	movlw	0
  4287  001044  225A               	addwfc	(??_readUserData+1)^0,f,c
  4288                           
  4289                           ;EEPROM.c: 322:     }
  4290  001046  D801               	call	PL16	;call to abstracted procedure
  4291  001048  D7EE               	goto	l1913
  4292  00104A                     __end_of_readUserData:
  4293                           	callstack 0
  4294  00104A                     PL16:
  4295                           	callstack 27
  4296  00104A  50F3               	movf	243,w,c
  4297  00104C  2659               	addwf	??_readUserData^0,f,c
  4298  00104E  50F4               	movf	244,w,c
  4299  001050  225A               	addwfc	(??_readUserData+1)^0,f,c
  4300  001052  5036               	movf	_position^0,w,c
  4301  001054  2459               	addwf	??_readUserData^0,w,c
  4302  001056  6ED9               	movwf	fsr2l,c
  4303  001058  0E00               	movlw	0
  4304  00105A  205A               	addwfc	(??_readUserData+1)^0,w,c
  4305  00105C  6EDA               	movwf	fsr2h,c
  4306  00105E  CFA8 FFDF          	movff	4008,indf2	;volatile
  4307  001062  2A36               	incf	_position^0,f,c
  4308  001064  0012               	return	
  4309  001066                     __end_ofPL16:
  4310                           	callstack 0
  4311  001066                     PL46:
  4312                           	callstack 27
  4313  001066  5037               	movf	_userNum^0,w,c
  4314  001068  0D12               	mullw	18
  4315  00106A  0E00               	movlw	low _users
  4316  00106C  6E59               	movwf	??_readUserData^0,c
  4317  00106E  0E01               	movlw	high _users
  4318  001070  6E5A               	movwf	(??_readUserData+1)^0,c
  4319  001072  0012               	return	
  4320  001074                     __end_ofPL46:
  4321                           	callstack 0
  4322  001074                     PL52:
  4323                           	callstack 25
  4324  001074  0D18               	mullw	24
  4325  001076  50F3               	movf	243,w,c
  4326  001078  2436               	addwf	_position^0,w,c
  4327  00107A  0F09               	addlw	9
  4328  00107C  6EA9               	movwf	169,c	;volatile
  4329  00107E  0012               	return	
  4330  001080                     __end_ofPL52:
  4331                           	callstack 0
  4332  001080                     PL64:
  4333                           	callstack 25
  4334  001080  0D18               	mullw	24
  4335  001082  50F3               	movf	243,w,c
  4336  001084  2436               	addwf	_position^0,w,c
  4337  001086  6EA9               	movwf	169,c	;volatile
  4338  001088  0012               	return	
  4339  00108A                     __end_ofPL64:
  4340                           	callstack 0
  4341                           
  4342 ;; *************** function _dataMotor *****************
  4343 ;; Defined at:
  4344 ;;		line 53 in file "EEPROM.c"
  4345 ;; Parameters:    Size  Location     Type
  4346 ;;		None
  4347 ;; Auto vars:     Size  Location     Type
  4348 ;;		None
  4349 ;; Return value:  Size  Location     Type
  4350 ;;                  1    wreg      void 
  4351 ;; Registers used:
  4352 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4353 ;; Tracked objects:
  4354 ;;		On entry : 0/0
  4355 ;;		On exit  : 0/0
  4356 ;;		Unchanged: 0/0
  4357 ;; Data sizes:     COMRAM   BANK0   BANK1
  4358 ;;      Params:         0       0       0
  4359 ;;      Locals:         0       0       0
  4360 ;;      Temps:          4       0       0
  4361 ;;      Totals:         4       0       0
  4362 ;;Total ram usage:        4 bytes
  4363 ;; Hardware stack levels used: 1
  4364 ;; Hardware stack levels required when called: 5
  4365 ;; This function calls:
  4366 ;;		_LcGotoXY
  4367 ;; This function is called by:
  4368 ;;		_main
  4369 ;; This function uses a non-reentrant model
  4370 ;;
  4371                           
  4372                           	psect	text34
  4373  0007D6                     __ptext34:
  4374                           	callstack 0
  4375  0007D6                     _dataMotor:
  4376                           	callstack 25
  4377                           
  4378                           ;EEPROM.c: 54:     switch(state){
  4379                           
  4380                           ;incstack = 0
  4381  0007D6  D10A               	goto	l4071
  4382  0007D8                     l3845:
  4383                           
  4384                           ;EEPROM.c: 59:             status = 2;
  4385  0007D8  0E02               	movlw	2
  4386  0007DA  6E35               	movwf	_status^0,c
  4387                           
  4388                           ;EEPROM.c: 60:             if (userNum != 8){
  4389  0007DC  0E08               	movlw	8
  4390  0007DE  1837               	xorwf	_userNum^0,w,c
  4391  0007E0  E003               	bz	l3851
  4392                           
  4393                           ;EEPROM.c: 61:                 state = 2;
  4394  0007E2  0E02               	movlw	2
  4395  0007E4  6E38               	movwf	_state@EEPROM$F1481^0,c
  4396                           
  4397                           ;EEPROM.c: 63:             } else {
  4398  0007E6  0C02               	retlw	2
  4399  0007E8                     l3851:
  4400                           
  4401                           ;EEPROM.c: 64:                 status = 1;
  4402  0007E8  0E01               	movlw	1
  4403  0007EA  6E35               	movwf	_status^0,c
  4404  0007EC                     l3853:
  4405                           
  4406                           ;EEPROM.c: 65:                 state = 0;
  4407  0007EC  6A38               	clrf	_state@EEPROM$F1481^0,c
  4408  0007EE  0012               	return	
  4409  0007F0                     l3855:
  4410                           
  4411                           ;EEPROM.c: 70:             if (users[userNum].username[position] == mUser.username[posit
      +                          ion]){
  4412  0007F0  5036               	movf	_position^0,w,c
  4413  0007F2  D945               	call	PL4	;call to abstracted procedure
  4414  0007F4  D937               	call	PL2	;call to abstracted procedure
  4415  0007F6  E10D               	bnz	l3867
  4416                           
  4417                           ;EEPROM.c: 72:                 if (mUser.username[position] == '\0'){
  4418  0007F8  D959               	call	PL26	;call to abstracted procedure
  4419  0007FA  E109               	bnz	l3865
  4420                           
  4421                           ;EEPROM.c: 73:                     state = 3;
  4422  0007FC  0E03               	movlw	3
  4423  0007FE  6E38               	movwf	_state@EEPROM$F1481^0,c
  4424                           
  4425                           ;EEPROM.c: 74:                     LcGotoXY(10,1);
  4426  000800  0E01               	movlw	1
  4427  000802  6E61               	movwf	LcGotoXY@Row^0,c
  4428  000804  0E0A               	movlw	10
  4429  000806  ECB9  F007         	call	_LcGotoXY
  4430                           
  4431                           ;EEPROM.c: 75:                     position = 0;
  4432  00080A  6A36               	clrf	_position^0,c
  4433                           
  4434                           ;EEPROM.c: 76:                 }else {
  4435  00080C  0012               	return	
  4436  00080E                     l3865:
  4437                           
  4438                           ;EEPROM.c: 77:                     position++;
  4439  00080E  2A36               	incf	_position^0,f,c
  4440  000810  0012               	return	
  4441  000812                     l3867:
  4442                           
  4443                           ;EEPROM.c: 81:                 state = 4;
  4444  000812  0E04               	movlw	4
  4445  000814  6E38               	movwf	_state@EEPROM$F1481^0,c
  4446  000816  0C04               	retlw	4
  4447  000818                     l3869:
  4448                           
  4449                           ;EEPROM.c: 89:             if (users[userNum].password[position] == mUser.password[posit
      +                          ion]){
  4450  000818  D955               	call	PL32	;call to abstracted procedure
  4451  00081A  5037               	movf	_userNum^0,w,c
  4452  00081C  0D12               	mullw	18
  4453  00081E  0E00               	movlw	low _users
  4454  000820  6E6A               	movwf	(??_dataMotor+1)^0,c
  4455  000822  0E01               	movlw	high _users
  4456  000824  6E6B               	movwf	(??_dataMotor+2)^0,c
  4457  000826  0E09               	movlw	9
  4458  000828  266A               	addwf	(??_dataMotor+1)^0,f,c
  4459  00082A  0E00               	movlw	0
  4460  00082C  226B               	addwfc	(??_dataMotor+2)^0,f,c
  4461  00082E  D91A               	call	PL2	;call to abstracted procedure
  4462  000830  E1F0               	bnz	l3867
  4463                           
  4464                           ;EEPROM.c: 91:                 if (mUser.password[position] == '\0'){
  4465  000832  D948               	call	PL32	;call to abstracted procedure
  4466  000834  50DF               	movf	indf2,w,c
  4467  000836  E1EB               	bnz	l3865
  4468                           
  4469                           ;EEPROM.c: 92:                     state = 0;
  4470  000838  6A38               	clrf	_state@EEPROM$F1481^0,c
  4471                           
  4472                           ;EEPROM.c: 93:                     status = 0;
  4473  00083A  6A35               	clrf	_status^0,c
  4474                           
  4475                           ;EEPROM.c: 94:                 }else {
  4476  00083C  0012               	return	
  4477  00083E                     l723:
  4478                           
  4479                           ;EEPROM.c: 106:             position = 0;
  4480  00083E  6A36               	clrf	_position^0,c
  4481                           
  4482                           ;EEPROM.c: 107:             userNum++;
  4483  000840  2A37               	incf	_userNum^0,f,c
  4484                           
  4485                           ;EEPROM.c: 108:             state = 1;
  4486  000842  0E01               	movlw	1
  4487  000844  6E38               	movwf	_state@EEPROM$F1481^0,c
  4488                           
  4489                           ;EEPROM.c: 109:             break;
  4490  000846  0C01               	retlw	1
  4491  000848                     l3883:
  4492                           
  4493                           ;EEPROM.c: 111:             if (userNum != 8){
  4494  000848  0E08               	movlw	8
  4495  00084A  1837               	xorwf	_userNum^0,w,c
  4496  00084C  E003               	bz	l3887
  4497                           
  4498                           ;EEPROM.c: 112:                 state = 6;
  4499  00084E  0E06               	movlw	6
  4500  000850  6E38               	movwf	_state@EEPROM$F1481^0,c
  4501                           
  4502                           ;EEPROM.c: 114:             } else {
  4503  000852  0C06               	retlw	6
  4504  000854                     l3887:
  4505                           
  4506                           ;EEPROM.c: 115:                 state = 10;
  4507  000854  0E0A               	movlw	10
  4508  000856  6E38               	movwf	_state@EEPROM$F1481^0,c
  4509  000858  0C0A               	retlw	10
  4510  00085A                     l3889:
  4511                           
  4512                           ;EEPROM.c: 119:             if (users[userNum].username[position] == mUser.username[posi
      +                          tion]){
  4513  00085A  5036               	movf	_position^0,w,c
  4514  00085C  D910               	call	PL4	;call to abstracted procedure
  4515  00085E  D902               	call	PL2	;call to abstracted procedure
  4516  000860  E106               	bnz	l3899
  4517                           
  4518                           ;EEPROM.c: 121:                 if (mUser.username[position] == '\0'){
  4519  000862  D924               	call	PL26	;call to abstracted procedure
  4520  000864  E1D4               	bnz	l3865
  4521                           
  4522                           ;EEPROM.c: 122:                     state = 0;
  4523  000866  6A38               	clrf	_state@EEPROM$F1481^0,c
  4524                           
  4525                           ;EEPROM.c: 123:                     status = 4;
  4526  000868  0E04               	movlw	4
  4527  00086A  6E35               	movwf	_status^0,c
  4528                           
  4529                           ;EEPROM.c: 124:                 }else {
  4530  00086C  0C04               	retlw	4
  4531  00086E                     l3899:
  4532                           
  4533                           ;EEPROM.c: 129:                 state = 7;
  4534  00086E  0E07               	movlw	7
  4535  000870  6E38               	movwf	_state@EEPROM$F1481^0,c
  4536  000872  0C07               	retlw	7
  4537  000874                     l732:
  4538                           
  4539                           ;EEPROM.c: 134:             position = 0;
  4540  000874  6A36               	clrf	_position^0,c
  4541                           
  4542                           ;EEPROM.c: 135:             userNum++;
  4543  000876  2A37               	incf	_userNum^0,f,c
  4544                           
  4545                           ;EEPROM.c: 136:             state = 5;
  4546  000878  0E05               	movlw	5
  4547  00087A  6E38               	movwf	_state@EEPROM$F1481^0,c
  4548                           
  4549                           ;EEPROM.c: 137:             break;
  4550  00087C  0C05               	retlw	5
  4551  00087E                     l3905:
  4552                           
  4553                           ;EEPROM.c: 139:             EEADR = (lastUserPointer*24)+position;
  4554  00087E  5034               	movf	_lastUserPointer^0,w,c
  4555  000880  EC40  F008         	call	PL64	;call to abstracted procedure
  4556                           
  4557                           ;EEPROM.c: 140:             EEDATA = mUser.username[position];
  4558  000884  D913               	call	PL26	;call to abstracted procedure
  4559  000886  6EA8               	movwf	168,c	;volatile
  4560                           
  4561                           ;EEPROM.c: 141:             users[lastUserPointer].username[position] = mUser.username[p
      +                          osition];
  4562  000888  5036               	movf	_position^0,w,c
  4563  00088A  0F01               	addlw	low _mUser@EEPROM$F1485
  4564  00088C  6ED9               	movwf	fsr2l,c
  4565  00088E  6ADA               	clrf	fsr2h,c
  4566  000890  D91E               	call	PL44	;call to abstracted procedure
  4567  000892  D8FF               	call	PL24	;call to abstracted procedure
  4568                           
  4569                           ;EEPROM.c: 142:             EECON1bits.EEPGD = 0;
  4570  000894  9EA6               	bcf	166,7,c	;volsfr
  4571                           
  4572                           ;EEPROM.c: 143:             EECON1bits.CFGS = 0;
  4573  000896  9CA6               	bcf	166,6,c	;volsfr
  4574                           
  4575                           ;EEPROM.c: 144:             EECON1bits.WREN = 1;
  4576  000898  84A6               	bsf	166,2,c	;volsfr
  4577                           
  4578                           ;EEPROM.c: 145:             INTCONbits.GIE = 0;
  4579  00089A  9EF2               	bcf	242,7,c	;volatile
  4580                           
  4581                           ;EEPROM.c: 146:             EECON2 = 0x55;
  4582  00089C  0E55               	movlw	85
  4583  00089E  6EA7               	movwf	167,c	;volsfr
  4584                           
  4585                           ;EEPROM.c: 147:             EECON2 = 0xAA;
  4586  0008A0  0EAA               	movlw	170
  4587  0008A2  6EA7               	movwf	167,c	;volsfr
  4588                           
  4589                           ;EEPROM.c: 148:             EECON1bits.WR = 1;
  4590  0008A4  82A6               	bsf	166,1,c	;volsfr
  4591                           
  4592                           ;EEPROM.c: 149:             INTCONbits.GIE = 1;
  4593  0008A6  8EF2               	bsf	242,7,c	;volatile
  4594                           
  4595                           ;EEPROM.c: 150:             EECON1bits.WREN = 0;
  4596  0008A8  94A6               	bcf	166,2,c	;volsfr
  4597                           
  4598                           ;EEPROM.c: 151:             state = 11;
  4599  0008AA  0E0B               	movlw	11
  4600  0008AC  6E38               	movwf	_state@EEPROM$F1481^0,c
  4601                           
  4602                           ;EEPROM.c: 152:             break;
  4603  0008AE  0C0B               	retlw	11
  4604  0008B0                     l734:
  4605                           
  4606                           ;EEPROM.c: 154:             if(EECON1bits.WR == 0){
  4607  0008B0  B2A6               	btfsc	166,1,c	;volsfr
  4608  0008B2  0012               	return	
  4609                           
  4610                           ;EEPROM.c: 155:                 if(mUser.username[position] != '\0'){
  4611  0008B4  D8FB               	call	PL26	;call to abstracted procedure
  4612  0008B6  E002               	bz	l736
  4613                           
  4614                           ;EEPROM.c: 156:                     position++;
  4615  0008B8  2A36               	incf	_position^0,f,c
  4616  0008BA  D7CC               	goto	l3887
  4617  0008BC                     l736:
  4618                           
  4619                           ;EEPROM.c: 159:                     position = 0;
  4620  0008BC  6A36               	clrf	_position^0,c
  4621  0008BE                     l3937:
  4622                           
  4623                           ;EEPROM.c: 160:                     state = 12;
  4624  0008BE  0E0C               	movlw	12
  4625  0008C0  6E38               	movwf	_state@EEPROM$F1481^0,c
  4626  0008C2  0C0C               	retlw	12
  4627  0008C4                     l3939:
  4628                           
  4629                           ;EEPROM.c: 165:             EEADR = (lastUserPointer*24)+position+9;
  4630  0008C4  5034               	movf	_lastUserPointer^0,w,c
  4631  0008C6  EC3A  F008         	call	PL52	;call to abstracted procedure
  4632                           
  4633                           ;EEPROM.c: 166:             EEDATA = mUser.password[position];
  4634  0008CA  D8FC               	call	PL32	;call to abstracted procedure
  4635  0008CC  50DF               	movf	indf2,w,c
  4636  0008CE  6EA8               	movwf	168,c	;volatile
  4637                           
  4638                           ;EEPROM.c: 167:             users[lastUserPointer].password[position] = mUser.password[p
      +                          osition];
  4639  0008D0  D8F9               	call	PL32	;call to abstracted procedure
  4640  0008D2  D8FD               	call	PL44	;call to abstracted procedure
  4641  0008D4  0E09               	movlw	9
  4642  0008D6  2669               	addwf	??_dataMotor^0,f,c
  4643  0008D8  0E00               	movlw	0
  4644  0008DA  226A               	addwfc	(??_dataMotor+1)^0,f,c
  4645  0008DC  D8DA               	call	PL24	;call to abstracted procedure
  4646                           
  4647                           ;EEPROM.c: 168:             EECON1bits.EEPGD = 0;
  4648  0008DE  9EA6               	bcf	166,7,c	;volsfr
  4649                           
  4650                           ;EEPROM.c: 169:             EECON1bits.CFGS = 0;
  4651  0008E0  9CA6               	bcf	166,6,c	;volsfr
  4652                           
  4653                           ;EEPROM.c: 170:             EECON1bits.WREN = 1;
  4654  0008E2  84A6               	bsf	166,2,c	;volsfr
  4655                           
  4656                           ;EEPROM.c: 171:             INTCONbits.GIE = 0;
  4657  0008E4  9EF2               	bcf	242,7,c	;volatile
  4658                           
  4659                           ;EEPROM.c: 172:             EECON2 = 0x55;
  4660  0008E6  0E55               	movlw	85
  4661  0008E8  6EA7               	movwf	167,c	;volsfr
  4662                           
  4663                           ;EEPROM.c: 173:             EECON2 = 0xAA;
  4664  0008EA  0EAA               	movlw	170
  4665  0008EC  6EA7               	movwf	167,c	;volsfr
  4666                           
  4667                           ;EEPROM.c: 174:             EECON1bits.WR = 1;
  4668  0008EE  82A6               	bsf	166,1,c	;volsfr
  4669                           
  4670                           ;EEPROM.c: 175:             INTCONbits.GIE = 1;
  4671  0008F0  8EF2               	bsf	242,7,c	;volatile
  4672                           
  4673                           ;EEPROM.c: 176:             EECON1bits.WREN = 0;
  4674  0008F2  94A6               	bcf	166,2,c	;volsfr
  4675                           
  4676                           ;EEPROM.c: 177:             state = 13;
  4677  0008F4  0E0D               	movlw	13
  4678  0008F6  6E38               	movwf	_state@EEPROM$F1481^0,c
  4679                           
  4680                           ;EEPROM.c: 178:             break;
  4681  0008F8  0C0D               	retlw	13
  4682  0008FA                     l739:
  4683                           
  4684                           ;EEPROM.c: 180:             if(EECON1bits.WR == 0){
  4685  0008FA  B2A6               	btfsc	166,1,c	;volsfr
  4686  0008FC  0012               	return	
  4687                           
  4688                           ;EEPROM.c: 181:                 if(mUser.password[position] != '\0'){
  4689  0008FE  D8E2               	call	PL32	;call to abstracted procedure
  4690  000900  50DF               	movf	indf2,w,c
  4691  000902  E002               	bz	l741
  4692                           
  4693                           ;EEPROM.c: 182:                     position++;
  4694  000904  2A36               	incf	_position^0,f,c
  4695  000906  D7DB               	goto	l3937
  4696  000908                     l741:
  4697                           
  4698                           ;EEPROM.c: 185:                     position = 0;
  4699  000908  6A36               	clrf	_position^0,c
  4700                           
  4701                           ;EEPROM.c: 186:                     state = 14;
  4702  00090A  0E0E               	movlw	14
  4703  00090C  6E38               	movwf	_state@EEPROM$F1481^0,c
  4704  00090E  0C0E               	retlw	14
  4705  000910                     l3973:
  4706                           
  4707                           ;EEPROM.c: 191:             lastUserPointer = (lastUserPointer+1)%8;
  4708  000910  2834               	incf	_lastUserPointer^0,w,c
  4709  000912  0B07               	andlw	7
  4710  000914  6E34               	movwf	_lastUserPointer^0,c
  4711                           
  4712                           ;EEPROM.c: 192:             EEADR = 0x95;
  4713  000916  0E95               	movlw	149
  4714  000918  6EA9               	movwf	169,c	;volatile
  4715                           
  4716                           ;EEPROM.c: 193:             EEDATA = lastUserPointer;
  4717  00091A  C034  FFA8         	movff	_lastUserPointer,4008	;volatile
  4718                           
  4719                           ;EEPROM.c: 194:             EECON1bits.EEPGD = 0;
  4720  00091E  9EA6               	bcf	166,7,c	;volsfr
  4721                           
  4722                           ;EEPROM.c: 195:             EECON1bits.CFGS = 0;
  4723  000920  9CA6               	bcf	166,6,c	;volsfr
  4724                           
  4725                           ;EEPROM.c: 196:             EECON1bits.WREN = 1;
  4726  000922  84A6               	bsf	166,2,c	;volsfr
  4727                           
  4728                           ;EEPROM.c: 197:             INTCONbits.GIE = 0;
  4729  000924  9EF2               	bcf	242,7,c	;volatile
  4730                           
  4731                           ;EEPROM.c: 198:             EECON2 = 0x55;
  4732  000926  0E55               	movlw	85
  4733  000928  6EA7               	movwf	167,c	;volsfr
  4734                           
  4735                           ;EEPROM.c: 199:             EECON2 = 0xAA;
  4736  00092A  0EAA               	movlw	170
  4737  00092C  6EA7               	movwf	167,c	;volsfr
  4738                           
  4739                           ;EEPROM.c: 200:             EECON1bits.WR = 1;
  4740  00092E  82A6               	bsf	166,1,c	;volsfr
  4741                           
  4742                           ;EEPROM.c: 201:             INTCONbits.GIE = 1;
  4743  000930  8EF2               	bsf	242,7,c	;volatile
  4744                           
  4745                           ;EEPROM.c: 202:             EECON1bits.WREN = 0;
  4746  000932  94A6               	bcf	166,2,c	;volsfr
  4747                           
  4748                           ;EEPROM.c: 203:             state = 15;
  4749  000934  0E0F               	movlw	15
  4750  000936  6E38               	movwf	_state@EEPROM$F1481^0,c
  4751                           
  4752                           ;EEPROM.c: 204:             break;
  4753  000938  0C0F               	retlw	15
  4754  00093A                     l744:
  4755                           
  4756                           ;EEPROM.c: 206:             if(EECON1bits.WR == 0){
  4757  00093A  B2A6               	btfsc	166,1,c	;volsfr
  4758  00093C  0012               	return	
  4759                           
  4760                           ;EEPROM.c: 207:                 status = 3;
  4761  00093E  0E03               	movlw	3
  4762  000940  D754               	goto	L5
  4763  000942                     l4003:
  4764                           
  4765                           ;EEPROM.c: 212:             if (position == 5){
  4766  000942  0E05               	movlw	5
  4767  000944  1836               	xorwf	_position^0,w,c
  4768  000946  E111               	bnz	l4011
  4769                           
  4770                           ;EEPROM.c: 213:                 if (topScores[status].score < saveScore){
  4771  000948  5035               	movf	_status^0,w,c
  4772  00094A  D8B6               	call	PL30	;call to abstracted procedure
  4773  00094C  5033               	movf	_saveScore^0,w,c
  4774  00094E  5CDE               	subwf	postinc2,w,c
  4775  000950  E301 D74C          	bc	l3853
  4776                           
  4777                           ;EEPROM.c: 214:                     topScores[status].score = saveScore;
  4778  000954  5035               	movf	_status^0,w,c
  4779  000956  D8B0               	call	PL30	;call to abstracted procedure
  4780  000958  C033  FFDF         	movff	_saveScore,indf2
  4781                           
  4782                           ;EEPROM.c: 215:                     topScores[status].userNum = userNum;
  4783  00095C  5035               	movf	_status^0,w,c
  4784  00095E  D8BE               	call	PL54	;call to abstracted procedure
  4785  000960  C037  FFDF         	movff	_userNum,indf2
  4786                           
  4787                           ;EEPROM.c: 216:                     state = 21;
  4788  000964  0E15               	movlw	21
  4789  000966  6E38               	movwf	_state@EEPROM$F1481^0,c
  4790                           
  4791                           ;EEPROM.c: 217:                 } else{
  4792  000968  0C15               	retlw	21
  4793  00096A                     l4011:
  4794                           
  4795                           ;EEPROM.c: 221:                 if (topScores[position].score < topScores[status].score)
      +                          {
  4796  00096A  5035               	movf	_status^0,w,c
  4797  00096C  D8A5               	call	PL30	;call to abstracted procedure
  4798  00096E  5036               	movf	_position^0,w,c
  4799  000970  0D02               	mullw	2
  4800  000972  50F3               	movf	243,w,c
  4801  000974  0F25               	addlw	low _topScores
  4802  000976  6EE1               	movwf	fsr1l,c
  4803  000978  6AE2               	clrf	fsr1h,c
  4804  00097A  50DE               	movf	postinc2,w,c
  4805  00097C  5CE6               	subwf	postinc1,w,c
  4806  00097E  E301 D746          	bc	l3865
  4807                           
  4808                           ;EEPROM.c: 222:                     status = position;
  4809  000982  C036  F035         	movff	_position,_status
  4810  000986  D743               	goto	l3865
  4811  000988                     l4017:
  4812                           
  4813                           ;EEPROM.c: 228:             EEADR = 0x90 + (status*2);
  4814  000988  5035               	movf	_status^0,w,c
  4815  00098A  0D02               	mullw	2
  4816  00098C  50F3               	movf	243,w,c
  4817  00098E  0F90               	addlw	144
  4818  000990  6EA9               	movwf	169,c	;volatile
  4819                           
  4820                           ;EEPROM.c: 229:             EEDATA = saveScore;
  4821  000992  C033  FFA8         	movff	_saveScore,4008	;volatile
  4822                           
  4823                           ;EEPROM.c: 230:             EECON1bits.EEPGD = 0;
  4824  000996  9EA6               	bcf	166,7,c	;volsfr
  4825                           
  4826                           ;EEPROM.c: 231:             EECON1bits.CFGS = 0;
  4827  000998  9CA6               	bcf	166,6,c	;volsfr
  4828                           
  4829                           ;EEPROM.c: 232:             EECON1bits.WREN = 1;
  4830  00099A  84A6               	bsf	166,2,c	;volsfr
  4831                           
  4832                           ;EEPROM.c: 233:             INTCONbits.GIE = 0;
  4833  00099C  9EF2               	bcf	242,7,c	;volatile
  4834                           
  4835                           ;EEPROM.c: 234:             EECON2 = 0x55;
  4836  00099E  0E55               	movlw	85
  4837  0009A0  6EA7               	movwf	167,c	;volsfr
  4838                           
  4839                           ;EEPROM.c: 235:             EECON2 = 0xAA;
  4840  0009A2  0EAA               	movlw	170
  4841  0009A4  6EA7               	movwf	167,c	;volsfr
  4842                           
  4843                           ;EEPROM.c: 236:             EECON1bits.WR = 1;
  4844  0009A6  82A6               	bsf	166,1,c	;volsfr
  4845                           
  4846                           ;EEPROM.c: 237:             INTCONbits.GIE = 1;
  4847  0009A8  8EF2               	bsf	242,7,c	;volatile
  4848                           
  4849                           ;EEPROM.c: 238:             EECON1bits.WREN = 0;
  4850  0009AA  94A6               	bcf	166,2,c	;volsfr
  4851                           
  4852                           ;EEPROM.c: 239:             state = 22;
  4853  0009AC  0E16               	movlw	22
  4854  0009AE  6E38               	movwf	_state@EEPROM$F1481^0,c
  4855                           
  4856                           ;EEPROM.c: 240:             break;
  4857  0009B0  0C16               	retlw	22
  4858  0009B2                     l753:
  4859                           
  4860                           ;EEPROM.c: 242:             if(EECON1bits.WR == 0){
  4861  0009B2  B2A6               	btfsc	166,1,c	;volsfr
  4862  0009B4  0012               	return	
  4863                           
  4864                           ;EEPROM.c: 243:                 state = 23;
  4865  0009B6  0E17               	movlw	23
  4866  0009B8  6E38               	movwf	_state@EEPROM$F1481^0,c
  4867  0009BA  0C17               	retlw	23
  4868  0009BC                     l4043:
  4869                           
  4870                           ;EEPROM.c: 247:             EEADR = 0x90 + (status*2)+1;
  4871  0009BC  5035               	movf	_status^0,w,c
  4872  0009BE  0D02               	mullw	2
  4873  0009C0  50F3               	movf	243,w,c
  4874  0009C2  0F91               	addlw	145
  4875  0009C4  6EA9               	movwf	169,c	;volatile
  4876                           
  4877                           ;EEPROM.c: 248:             EEDATA = userNum;
  4878  0009C6  C037  FFA8         	movff	_userNum,4008	;volatile
  4879                           
  4880                           ;EEPROM.c: 249:             EECON1bits.EEPGD = 0;
  4881  0009CA  9EA6               	bcf	166,7,c	;volsfr
  4882                           
  4883                           ;EEPROM.c: 250:             EECON1bits.CFGS = 0;
  4884  0009CC  9CA6               	bcf	166,6,c	;volsfr
  4885                           
  4886                           ;EEPROM.c: 251:             EECON1bits.WREN = 1;
  4887  0009CE  84A6               	bsf	166,2,c	;volsfr
  4888                           
  4889                           ;EEPROM.c: 252:             INTCONbits.GIE = 0;
  4890  0009D0  9EF2               	bcf	242,7,c	;volatile
  4891                           
  4892                           ;EEPROM.c: 253:             EECON2 = 0x55;
  4893  0009D2  0E55               	movlw	85
  4894  0009D4  6EA7               	movwf	167,c	;volsfr
  4895                           
  4896                           ;EEPROM.c: 254:             EECON2 = 0xAA;
  4897  0009D6  0EAA               	movlw	170
  4898  0009D8  6EA7               	movwf	167,c	;volsfr
  4899                           
  4900                           ;EEPROM.c: 255:             EECON1bits.WR = 1;
  4901  0009DA  82A6               	bsf	166,1,c	;volsfr
  4902                           
  4903                           ;EEPROM.c: 256:             INTCONbits.GIE = 1;
  4904  0009DC  8EF2               	bsf	242,7,c	;volatile
  4905                           
  4906                           ;EEPROM.c: 257:             EECON1bits.WREN = 0;
  4907  0009DE  94A6               	bcf	166,2,c	;volsfr
  4908                           
  4909                           ;EEPROM.c: 258:             state = 24;
  4910  0009E0  0E18               	movlw	24
  4911  0009E2  6E38               	movwf	_state@EEPROM$F1481^0,c
  4912                           
  4913                           ;EEPROM.c: 259:             break;
  4914  0009E4  0C18               	retlw	24
  4915  0009E6                     l756:
  4916                           
  4917                           ;EEPROM.c: 261:             if(EECON1bits.WR == 0){
  4918  0009E6  B2A6               	btfsc	166,1,c	;volsfr
  4919  0009E8  0012               	return	
  4920  0009EA  D700               	goto	l3853
  4921  0009EC                     l4071:
  4922  0009EC  5038               	movf	_state@EEPROM$F1481^0,w,c
  4923  0009EE  6E69               	movwf	??_dataMotor^0,c
  4924  0009F0  6A6A               	clrf	(??_dataMotor+1)^0,c
  4925                           
  4926                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4927                           ; Switch size 1, requested type "space"
  4928                           ; Number of cases is 1, Range of values is 0 to 0
  4929                           ; switch strategies available:
  4930                           ; Name         Instructions Cycles
  4931                           ; simple_byte            4     3 (average)
  4932                           ;	Chosen strategy is simple_byte
  4933  0009F2  506A               	movf	(??_dataMotor+1)^0,w,c
  4934  0009F4  A4D8               	btfss	status,2,c
  4935  0009F6  0012               	return	
  4936                           
  4937                           ; Switch size 1, requested type "space"
  4938                           ; Number of cases is 19, Range of values is 0 to 24
  4939                           ; switch strategies available:
  4940                           ; Name         Instructions Cycles
  4941                           ; simple_byte           58    30 (average)
  4942                           ;	Chosen strategy is simple_byte
  4943  0009F8  5069               	movf	??_dataMotor^0,w,c
  4944  0009FA  B4D8               	btfsc	status,2,c
  4945  0009FC  0012               	return	
  4946  0009FE  0A01               	xorlw	1	; case 1
  4947  000A00  E101 D6EA          	bz	l3845
  4948  000A04  0A03               	xorlw	3	; case 2
  4949  000A06  E101 D6F3          	bz	l3855
  4950  000A0A  0A01               	xorlw	1	; case 3
  4951  000A0C  E101 D704          	bz	l3869
  4952  000A10  0A07               	xorlw	7	; case 4
  4953  000A12  E101 D714          	bz	l723
  4954  000A16  0A01               	xorlw	1	; case 5
  4955  000A18  E101 D716          	bz	l3883
  4956  000A1C  0A03               	xorlw	3	; case 6
  4957  000A1E  E101 D71C          	bz	l3889
  4958  000A22  0A01               	xorlw	1	; case 7
  4959  000A24  E101 D726          	bz	l732
  4960  000A28  0A0D               	xorlw	13	; case 10
  4961  000A2A  E101 D728          	bz	l3905
  4962  000A2E  0A01               	xorlw	1	; case 11
  4963  000A30  E101 D73E          	bz	l734
  4964  000A34  0A07               	xorlw	7	; case 12
  4965  000A36  E101 D745          	bz	l3939
  4966  000A3A  0A01               	xorlw	1	; case 13
  4967  000A3C  E101 D75D          	bz	l739
  4968  000A40  0A03               	xorlw	3	; case 14
  4969  000A42  E101 D765          	bz	l3973
  4970  000A46  0A01               	xorlw	1	; case 15
  4971  000A48  E101 D777          	bz	l744
  4972  000A4C  0A1B               	xorlw	27	; case 20
  4973  000A4E  E101 D778          	bz	l4003
  4974  000A52  0A01               	xorlw	1	; case 21
  4975  000A54  E099               	bz	l4017
  4976  000A56  0A03               	xorlw	3	; case 22
  4977  000A58  E0AC               	bz	l753
  4978  000A5A  0A01               	xorlw	1	; case 23
  4979  000A5C  E0AF               	bz	l4043
  4980  000A5E  0A0F               	xorlw	15	; case 24
  4981  000A60  E0C2               	bz	l756
  4982  000A62  0012               	return		;funcret
  4983  000A64                     __end_of_dataMotor:
  4984                           	callstack 0
  4985  000A64                     PL2:
  4986                           	callstack 25
  4987  000A64  50F3               	movf	243,w,c
  4988  000A66  266A               	addwf	(??_dataMotor+1)^0,f,c
  4989  000A68  50F4               	movf	244,w,c
  4990  000A6A  226B               	addwfc	(??_dataMotor+2)^0,f,c
  4991  000A6C  5036               	movf	_position^0,w,c
  4992  000A6E  246A               	addwf	(??_dataMotor+1)^0,w,c
  4993  000A70  6EE1               	movwf	fsr1l,c
  4994  000A72  0E00               	movlw	0
  4995  000A74  206B               	addwfc	(??_dataMotor+2)^0,w,c
  4996  000A76  6EE2               	movwf	fsr1h,c
  4997  000A78  50DE               	movf	postinc2,w,c
  4998  000A7A  18E6               	xorwf	postinc1,w,c
  4999  000A7C  0012               	return	
  5000  000A7E                     __end_ofPL2:
  5001                           	callstack 0
  5002  000A7E                     PL4:
  5003                           	callstack 25
  5004  000A7E  0F01               	addlw	low _mUser@EEPROM$F1485
  5005  000A80  6ED9               	movwf	fsr2l,c
  5006  000A82  6ADA               	clrf	fsr2h,c
  5007  000A84  5037               	movf	_userNum^0,w,c
  5008  000A86  0D12               	mullw	18
  5009  000A88  0E00               	movlw	low _users
  5010  000A8A  6E6A               	movwf	(??_dataMotor+1)^0,c
  5011  000A8C  0E01               	movlw	high _users
  5012  000A8E  6E6B               	movwf	(??_dataMotor+2)^0,c
  5013  000A90  0012               	return	
  5014  000A92                     __end_ofPL4:
  5015                           	callstack 0
  5016  000A92                     PL24:
  5017                           	callstack 25
  5018  000A92  50F3               	movf	243,w,c
  5019  000A94  2669               	addwf	??_dataMotor^0,f,c
  5020  000A96  50F4               	movf	244,w,c
  5021  000A98  226A               	addwfc	(??_dataMotor+1)^0,f,c
  5022  000A9A  5036               	movf	_position^0,w,c
  5023  000A9C  2469               	addwf	??_dataMotor^0,w,c
  5024  000A9E  6EE1               	movwf	fsr1l,c
  5025  000AA0  0E00               	movlw	0
  5026  000AA2  206A               	addwfc	(??_dataMotor+1)^0,w,c
  5027  000AA4  6EE2               	movwf	fsr1h,c
  5028  000AA6  CFDF FFE7          	movff	indf2,indf1
  5029  000AAA  0012               	return	
  5030  000AAC                     __end_ofPL24:
  5031                           	callstack 0
  5032  000AAC                     PL26:
  5033                           	callstack 25
  5034  000AAC  5036               	movf	_position^0,w,c
  5035  000AAE  0F01               	addlw	low _mUser@EEPROM$F1485
  5036  000AB0  6ED9               	movwf	fsr2l,c
  5037  000AB2  6ADA               	clrf	fsr2h,c
  5038  000AB4  50DF               	movf	indf2,w,c
  5039  000AB6  0012               	return	
  5040  000AB8                     __end_ofPL26:
  5041                           	callstack 0
  5042  000AB8                     PL30:
  5043                           	callstack 27
  5044  000AB8  0D02               	mullw	2
  5045  000ABA  50F3               	movf	243,w,c
  5046  000ABC  0F25               	addlw	low _topScores
  5047  000ABE  6ED9               	movwf	fsr2l,c
  5048  000AC0  6ADA               	clrf	fsr2h,c
  5049  000AC2  0012               	return	
  5050  000AC4                     __end_ofPL30:
  5051                           	callstack 0
  5052  000AC4                     PL32:
  5053                           	callstack 25
  5054  000AC4  5036               	movf	_position^0,w,c
  5055  000AC6  0F0A               	addlw	low (_mUser@EEPROM$F1485+9)
  5056  000AC8  6ED9               	movwf	fsr2l,c
  5057  000ACA  6ADA               	clrf	fsr2h,c
  5058  000ACC  0012               	return	
  5059  000ACE                     __end_ofPL32:
  5060                           	callstack 0
  5061  000ACE                     PL44:
  5062                           	callstack 25
  5063  000ACE  5034               	movf	_lastUserPointer^0,w,c
  5064  000AD0  0D12               	mullw	18
  5065  000AD2  0E00               	movlw	low _users
  5066  000AD4  6E69               	movwf	??_dataMotor^0,c
  5067  000AD6  0E01               	movlw	high _users
  5068  000AD8  6E6A               	movwf	(??_dataMotor+1)^0,c
  5069  000ADA  0012               	return	
  5070  000ADC                     __end_ofPL44:
  5071                           	callstack 0
  5072  000ADC                     PL54:
  5073                           	callstack 27
  5074  000ADC  0D02               	mullw	2
  5075  000ADE  50F3               	movf	243,w,c
  5076  000AE0  0F26               	addlw	low (_topScores+1)
  5077  000AE2  6ED9               	movwf	fsr2l,c
  5078  000AE4  6ADA               	clrf	fsr2h,c
  5079  000AE6  0012               	return	
  5080  000AE8                     __end_ofPL54:
  5081                           	callstack 0
  5082                           
  5083 ;; *************** function _LcGotoXY *****************
  5084 ;; Defined at:
  5085 ;;		line 134 in file "LcTLCD.c"
  5086 ;; Parameters:    Size  Location     Type
  5087 ;;  Column          1    wreg     unsigned char 
  5088 ;;  Row             1   13[COMRAM] unsigned char 
  5089 ;; Auto vars:     Size  Location     Type
  5090 ;;  Column          1   20[COMRAM] unsigned char 
  5091 ;;  Fisics          2   18[COMRAM] int 
  5092 ;; Return value:  Size  Location     Type
  5093 ;;                  1    wreg      void 
  5094 ;; Registers used:
  5095 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5096 ;; Tracked objects:
  5097 ;;		On entry : 0/0
  5098 ;;		On exit  : 0/0
  5099 ;;		Unchanged: 0/0
  5100 ;; Data sizes:     COMRAM   BANK0   BANK1
  5101 ;;      Params:         1       0       0
  5102 ;;      Locals:         5       0       0
  5103 ;;      Temps:          2       0       0
  5104 ;;      Totals:         8       0       0
  5105 ;;Total ram usage:        8 bytes
  5106 ;; Hardware stack levels used: 1
  5107 ;; Hardware stack levels required when called: 4
  5108 ;; This function calls:
  5109 ;;		_CantaIR
  5110 ;;		_WaitForBusy
  5111 ;; This function is called by:
  5112 ;;		_LcPutChar
  5113 ;;		_menuMotor
  5114 ;;		_displayMenu
  5115 ;;		_dataMotor
  5116 ;;		_DaFindUser
  5117 ;; This function uses a non-reentrant model
  5118 ;;
  5119                           
  5120                           	psect	text35
  5121  000F72                     __ptext35:
  5122                           	callstack 0
  5123  000F72                     _LcGotoXY:
  5124                           	callstack 23
  5125                           
  5126                           ;incstack = 0
  5127                           ;LcGotoXY@Column stored from wreg
  5128  000F72  6E68               	movwf	LcGotoXY@Column^0,c
  5129                           
  5130                           ;LcTLCD.c: 138:  int Fisics;;LcTLCD.c: 140:  switch (Rows) {
  5131  000F74  D030               	goto	l3011
  5132  000F76                     l2991:
  5133                           
  5134                           ;LcTLCD.c: 142:    Fisics = Column + (!Row ? 0 : 0x40); break;
  5135  000F76  5061               	movf	LcGotoXY@Row^0,w,c
  5136  000F78  E004               	bz	l267
  5137  000F7A  6A65               	clrf	(_LcGotoXY$728+1)^0,c
  5138  000F7C  0E40               	movlw	64
  5139  000F7E  6E64               	movwf	_LcGotoXY$728^0,c
  5140  000F80  D002               	goto	l2995
  5141  000F82                     l267:
  5142  000F82  6A64               	clrf	_LcGotoXY$728^0,c
  5143  000F84  6A65               	clrf	(_LcGotoXY$728+1)^0,c
  5144  000F86                     l2995:
  5145  000F86  5068               	movf	LcGotoXY@Column^0,w,c
  5146  000F88  2464               	addwf	_LcGotoXY$728^0,w,c
  5147  000F8A  6E66               	movwf	LcGotoXY@Fisics^0,c
  5148  000F8C  0E00               	movlw	0
  5149  000F8E  2065               	addwfc	(_LcGotoXY$728+1)^0,w,c
  5150  000F90  6E67               	movwf	(LcGotoXY@Fisics+1)^0,c
  5151  000F92  D02E               	goto	l3013
  5152  000F94                     l271:
  5153                           
  5154                           ;LcTLCD.c: 144:    Fisics = Column;
  5155  000F94  C068  F066         	movff	LcGotoXY@Column,LcGotoXY@Fisics
  5156  000F98  6A67               	clrf	(LcGotoXY@Fisics+1)^0,c
  5157                           
  5158                           ;LcTLCD.c: 145:    if (Row == 1) Fisics += 0x40; else
  5159  000F9A  0461               	decf	LcGotoXY@Row^0,w,c
  5160  000F9C  E102               	bnz	l3001
  5161  000F9E  0E40               	movlw	64
  5162  000FA0  D004               	goto	L6
  5163  000FA2                     l3001:
  5164                           
  5165                           ;LcTLCD.c: 146:    if (Row == 2) Fisics += Columns; else
  5166  000FA2  0E02               	movlw	2
  5167  000FA4  1861               	xorwf	LcGotoXY@Row^0,w,c
  5168  000FA6  E104               	bnz	l3005
  5169  000FA8  5047               	movf	_Columns^0,w,c
  5170  000FAA                     L6:
  5171  000FAA  2666               	addwf	LcGotoXY@Fisics^0,f,c
  5172  000FAC  0E00               	movlw	0
  5173  000FAE  D00D               	goto	L7
  5174  000FB0                     l3005:
  5175                           
  5176                           ;LcTLCD.c: 147:    if (Row == 3) Fisics += 0x40+Columns;
  5177  000FB0  0E03               	movlw	3
  5178  000FB2  1861               	xorwf	LcGotoXY@Row^0,w,c
  5179  000FB4  E11D               	bnz	l3013
  5180  000FB6  5047               	movf	_Columns^0,w,c
  5181  000FB8  6E62               	movwf	??_LcGotoXY^0,c
  5182  000FBA  6A63               	clrf	(??_LcGotoXY+1)^0,c
  5183  000FBC  0E40               	movlw	64
  5184  000FBE  2662               	addwf	??_LcGotoXY^0,f,c
  5185  000FC0  0E00               	movlw	0
  5186  000FC2  2263               	addwfc	(??_LcGotoXY+1)^0,f,c
  5187  000FC4  5062               	movf	??_LcGotoXY^0,w,c
  5188  000FC6  2666               	addwf	LcGotoXY@Fisics^0,f,c
  5189  000FC8  5063               	movf	(??_LcGotoXY+1)^0,w,c
  5190  000FCA                     L7:
  5191  000FCA  2267               	addwfc	(LcGotoXY@Fisics+1)^0,f,c
  5192                           
  5193                           ;LcTLCD.c: 148:    break;
  5194  000FCC  D011               	goto	l3013
  5195  000FCE                     l278:
  5196                           
  5197                           ;LcTLCD.c: 151:    Fisics = Column; break;
  5198  000FCE  C068  F066         	movff	LcGotoXY@Column,LcGotoXY@Fisics
  5199  000FD2  6A67               	clrf	(LcGotoXY@Fisics+1)^0,c
  5200  000FD4  D00D               	goto	l3013
  5201  000FD6                     l3011:
  5202  000FD6  5048               	movf	_Rows^0,w,c
  5203  000FD8  6E62               	movwf	??_LcGotoXY^0,c
  5204  000FDA  6A63               	clrf	(??_LcGotoXY+1)^0,c
  5205                           
  5206                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5207                           ; Switch size 1, requested type "space"
  5208                           ; Number of cases is 1, Range of values is 0 to 0
  5209                           ; switch strategies available:
  5210                           ; Name         Instructions Cycles
  5211                           ; simple_byte            4     3 (average)
  5212                           ;	Chosen strategy is simple_byte
  5213  000FDC  5063               	movf	(??_LcGotoXY+1)^0,w,c
  5214  000FDE  E1F7               	bnz	l278
  5215                           
  5216                           ; Switch size 1, requested type "space"
  5217                           ; Number of cases is 3, Range of values is 1 to 4
  5218                           ; switch strategies available:
  5219                           ; Name         Instructions Cycles
  5220                           ; simple_byte           10     6 (average)
  5221                           ;	Chosen strategy is simple_byte
  5222  000FE0  5062               	movf	??_LcGotoXY^0,w,c
  5223  000FE2  0A01               	xorlw	1	; case 1
  5224  000FE4  E0F4               	bz	l278
  5225  000FE6  0A03               	xorlw	3	; case 2
  5226  000FE8  E0C6               	bz	l2991
  5227  000FEA  0A06               	xorlw	6	; case 4
  5228  000FEC  E0D3               	bz	l271
  5229  000FEE  D7EF               	goto	l278
  5230  000FF0                     l3013:
  5231                           
  5232                           ;LcTLCD.c: 154:  WaitForBusy();
  5233  000FF0  ECEF  F009         	call	_WaitForBusy	;wreg free
  5234                           
  5235                           ;LcTLCD.c: 155:  CantaIR(0x80 | Fisics);
  5236  000FF4  5066               	movf	LcGotoXY@Fisics^0,w,c
  5237  000FF6  0980               	iorlw	128
  5238  000FF8  ECFC  F00A         	call	_CantaIR
  5239                           
  5240                           ;LcTLCD.c: 157:  RowAct = Row;
  5241  000FFC  C061  F046         	movff	LcGotoXY@Row,_RowAct
  5242                           
  5243                           ;LcTLCD.c: 158:  ColumnAct = Column;
  5244  001000  C068  F045         	movff	LcGotoXY@Column,_ColumnAct
  5245  001004  0012               	return		;funcret
  5246  001006                     __end_of_LcGotoXY:
  5247                           	callstack 0
  5248                           
  5249 ;; *************** function _TiInitTimer *****************
  5250 ;; Defined at:
  5251 ;;		line 17 in file "TTimer.c"
  5252 ;; Parameters:    Size  Location     Type
  5253 ;;		None
  5254 ;; Auto vars:     Size  Location     Type
  5255 ;;		None
  5256 ;; Return value:  Size  Location     Type
  5257 ;;                  1    wreg      void 
  5258 ;; Registers used:
  5259 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  5260 ;; Tracked objects:
  5261 ;;		On entry : 0/0
  5262 ;;		On exit  : 0/0
  5263 ;;		Unchanged: 0/0
  5264 ;; Data sizes:     COMRAM   BANK0   BANK1
  5265 ;;      Params:         0       0       0
  5266 ;;      Locals:         0       0       0
  5267 ;;      Temps:          0       0       0
  5268 ;;      Totals:         0       0       0
  5269 ;;Total ram usage:        0 bytes
  5270 ;; Hardware stack levels used: 1
  5271 ;; Hardware stack levels required when called: 2
  5272 ;; This function calls:
  5273 ;;		Nothing
  5274 ;; This function is called by:
  5275 ;;		_main
  5276 ;; This function uses a non-reentrant model
  5277 ;;
  5278                           
  5279                           	psect	text36
  5280  00148C                     __ptext36:
  5281                           	callstack 0
  5282  00148C                     _TiInitTimer:
  5283                           	callstack 28
  5284                           
  5285                           ;TTimer.c: 20:     RCONbits.IPEN = 0;
  5286                           
  5287                           ;incstack = 0
  5288  00148C  9ED0               	bcf	208,7,c	;volatile
  5289                           
  5290                           ;TTimer.c: 21:     INTCONbits.GIE_GIEH = 1;
  5291  00148E  8EF2               	bsf	242,7,c	;volatile
  5292                           
  5293                           ;TTimer.c: 22:     INTCONbits.PEIE_GIEL = 1;
  5294  001490  8CF2               	bsf	242,6,c	;volatile
  5295                           
  5296                           ;TTimer.c: 23:     INTCONbits.TMR0IE = 1;
  5297  001492  8AF2               	bsf	242,5,c	;volatile
  5298                           
  5299                           ;TTimer.c: 24:     INTCONbits.TMR0IF = 0;
  5300  001494  94F2               	bcf	242,2,c	;volatile
  5301                           
  5302                           ;TTimer.c: 25:     T0CON = 0x08;
  5303  001496  0E08               	movlw	8
  5304  001498  6ED5               	movwf	213,c	;volatile
  5305                           
  5306                           ;TTimer.c: 27:     TMR0H = 0xD8;
  5307  00149A  0ED8               	movlw	216
  5308  00149C  6ED7               	movwf	215,c	;volatile
  5309                           
  5310                           ;TTimer.c: 28:     TMR0L = 0xF0;
  5311  00149E  0EF0               	movlw	240
  5312  0014A0  6ED6               	movwf	214,c	;volatile
  5313                           
  5314                           ;TTimer.c: 29:     T0CONbits.TMR0ON = 1;
  5315  0014A2  8ED5               	bsf	213,7,c	;volatile
  5316                           
  5317                           ;TTimer.c: 31:     for (counter=0;counter<25;counter++) {
  5318  0014A4  6A53               	clrf	_counter^0,c
  5319  0014A6                     l3303:
  5320  0014A6  0E18               	movlw	24
  5321  0014A8  6453               	cpfsgt	_counter^0,c
  5322  0014AA  D001               	goto	l3307
  5323  0014AC  0C18               	retlw	24
  5324  0014AE                     l3307:
  5325                           
  5326                           ;TTimer.c: 32:  s_Timers[counter].b_busy=0;
  5327  0014AE  EC6B  F00A         	call	PL18	;call to abstracted procedure
  5328  0014B2  6ADF               	clrf	indf2,c
  5329                           
  5330                           ;TTimer.c: 33:     }
  5331  0014B4  2A53               	incf	_counter^0,f,c
  5332  0014B6  D7F7               	goto	l3303
  5333  0014B8                     __end_of_TiInitTimer:
  5334                           	callstack 0
  5335                           
  5336 ;; *************** function _SMSMotor *****************
  5337 ;; Defined at:
  5338 ;;		line 133 in file "keypad.c"
  5339 ;; Parameters:    Size  Location     Type
  5340 ;;		None
  5341 ;; Auto vars:     Size  Location     Type
  5342 ;;		None
  5343 ;; Return value:  Size  Location     Type
  5344 ;;                  1    wreg      void 
  5345 ;; Registers used:
  5346 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5347 ;; Tracked objects:
  5348 ;;		On entry : 0/0
  5349 ;;		On exit  : 0/0
  5350 ;;		Unchanged: 0/0
  5351 ;; Data sizes:     COMRAM   BANK0   BANK1
  5352 ;;      Params:         0       0       0
  5353 ;;      Locals:         0       0       0
  5354 ;;      Temps:          2       0       0
  5355 ;;      Totals:         2       0       0
  5356 ;;Total ram usage:        2 bytes
  5357 ;; Hardware stack levels used: 1
  5358 ;; Hardware stack levels required when called: 4
  5359 ;; This function calls:
  5360 ;;		_KeGetGenericValue
  5361 ;;		_TiGetTics
  5362 ;;		_TiResetTics
  5363 ;; This function is called by:
  5364 ;;		_main
  5365 ;; This function uses a non-reentrant model
  5366 ;;
  5367                           
  5368                           	psect	text37
  5369  000EBC                     __ptext37:
  5370                           	callstack 0
  5371  000EBC                     _SMSMotor:
  5372                           	callstack 26
  5373                           
  5374                           ;keypad.c: 134:     switch(stateSMS){
  5375                           
  5376                           ;incstack = 0
  5377  000EBC  D042               	goto	l3421
  5378  000EBE                     l3369:
  5379                           
  5380                           ;keypad.c: 139:             if(pressed){
  5381  000EBE  504D               	movf	_pressed^0,w,c
  5382  000EC0  E020               	bz	l163
  5383                           
  5384                           ;keypad.c: 140:                 stateSMS=1;
  5385  000EC2  0E01               	movlw	1
  5386  000EC4  6E49               	movwf	_stateSMS^0,c
  5387                           
  5388                           ;keypad.c: 141:                 currentKey = KeGetGenericValue();
  5389  000EC6  EC18  F00B         	call	_KeGetGenericValue	;wreg free
  5390  000ECA  6E4F               	movwf	_currentKey^0,c
  5391                           
  5392                           ;keypad.c: 142:                 available = 2;
  5393  000ECC  0E02               	movlw	2
  5394  000ECE  6E4B               	movwf	_available^0,c
  5395                           
  5396                           ;keypad.c: 143:                 if (TiGetTics(timer_SMS)>=1200){
  5397  000ED0  5050               	movf	_timer_SMS^0,w,c
  5398  000ED2  EC85  F00A         	call	_TiGetTics
  5399  000ED6  BE5A               	btfsc	(?_TiGetTics+1)^0,7,c
  5400  000ED8  D007               	goto	l3385
  5401  000EDA  D846               	call	PL68	;call to abstracted procedure
  5402  000EDC  E305               	bnc	l3385
  5403                           
  5404                           ;keypad.c: 144:                     available = 1;
  5405  000EDE  0E01               	movlw	1
  5406  000EE0  6E4B               	movwf	_available^0,c
  5407                           
  5408                           ;keypad.c: 145:                     numPresses = 0;
  5409  000EE2  6A4C               	clrf	_numPresses^0,c
  5410                           
  5411                           ;keypad.c: 146:                     previous = 0;
  5412  000EE4  6A4E               	clrf	_previous^0,c
  5413                           
  5414                           ;keypad.c: 147:                 } else if(numPresses != 0 && previous != currentKey ){
  5415  000EE6  D00A               	goto	l3395
  5416  000EE8                     l3385:
  5417  000EE8  504C               	movf	_numPresses^0,w,c
  5418  000EEA  E008               	bz	l3395
  5419  000EEC  504F               	movf	_currentKey^0,w,c
  5420  000EEE  184E               	xorwf	_previous^0,w,c
  5421  000EF0  E005               	bz	l3395
  5422                           
  5423                           ;keypad.c: 149:                     available = 1;
  5424  000EF2  0E01               	movlw	1
  5425  000EF4  6E4B               	movwf	_available^0,c
  5426                           
  5427                           ;keypad.c: 151:                     previous = currentKey;
  5428  000EF6  C04F  F04E         	movff	_currentKey,_previous
  5429                           
  5430                           ;keypad.c: 153:                     numPresses = 0;
  5431  000EFA  6A4C               	clrf	_numPresses^0,c
  5432  000EFC                     l3395:
  5433                           
  5434                           ;keypad.c: 157:                 TiResetTics(timer_SMS);
  5435  000EFC  5050               	movf	_timer_SMS^0,w,c
  5436  000EFE  EF0A  F00B         	goto	_TiResetTics
  5437  000F02                     l163:
  5438                           
  5439                           ;keypad.c: 160:               previous=currentKey;
  5440  000F02  C04F  F04E         	movff	_currentKey,_previous
  5441  000F06  0012               	return	
  5442  000F08                     l3397:
  5443                           
  5444                           ;keypad.c: 172:             numPresses++;
  5445  000F08  2A4C               	incf	_numPresses^0,f,c
  5446                           
  5447                           ;keypad.c: 173:             stateSMS = 2;
  5448  000F0A  0E02               	movlw	2
  5449  000F0C  6E49               	movwf	_stateSMS^0,c
  5450                           
  5451                           ;keypad.c: 174:             break;
  5452  000F0E  0C02               	retlw	2
  5453  000F10                     l3401:
  5454                           
  5455                           ;keypad.c: 177:             if (!pressed){
  5456  000F10  504D               	movf	_pressed^0,w,c
  5457  000F12  A4D8               	btfss	status,2,c
  5458  000F14  0012               	return	
  5459                           
  5460                           ;keypad.c: 178:                 TiResetTics(timer_SMS);
  5461  000F16  5050               	movf	_timer_SMS^0,w,c
  5462  000F18  EC0A  F00B         	call	_TiResetTics
  5463                           
  5464                           ;keypad.c: 180:                 stateSMS = 0;
  5465  000F1C  6A49               	clrf	_stateSMS^0,c
  5466  000F1E  0012               	return	
  5467  000F20                     l3407:
  5468                           
  5469                           ;keypad.c: 185:             if(pressed){
  5470  000F20  504D               	movf	_pressed^0,w,c
  5471  000F22  B4D8               	btfsc	status,2,c
  5472  000F24  0012               	return	
  5473                           
  5474                           ;keypad.c: 186:                 stateSMS = 4;
  5475  000F26  EFA7  F00A         	goto	PL76	;call to abstracted procedure
  5476  000F2A                     l3411:
  5477                           
  5478                           ;keypad.c: 191:             stateSMS = 5;
  5479  000F2A  0E05               	movlw	5
  5480  000F2C  6E49               	movwf	_stateSMS^0,c
  5481                           
  5482                           ;keypad.c: 192:             break;
  5483  000F2E  0C05               	retlw	5
  5484  000F30                     l3413:
  5485                           
  5486                           ;keypad.c: 194:             if (!pressed){
  5487  000F30  504D               	movf	_pressed^0,w,c
  5488  000F32  A4D8               	btfss	status,2,c
  5489  000F34  0012               	return	
  5490                           
  5491                           ;keypad.c: 195:                 TiResetTics(timer_SMS);
  5492  000F36  5050               	movf	_timer_SMS^0,w,c
  5493  000F38  EC0A  F00B         	call	_TiResetTics
  5494                           
  5495                           ;keypad.c: 197:                 stateSMS = 3;
  5496  000F3C  0E03               	movlw	3
  5497  000F3E  6E49               	movwf	_stateSMS^0,c
  5498  000F40  0C03               	retlw	3
  5499  000F42                     l3421:
  5500  000F42  5049               	movf	_stateSMS^0,w,c
  5501  000F44  6E60               	movwf	??_SMSMotor^0,c
  5502  000F46  6A61               	clrf	(??_SMSMotor+1)^0,c
  5503                           
  5504                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5505                           ; Switch size 1, requested type "space"
  5506                           ; Number of cases is 1, Range of values is 0 to 0
  5507                           ; switch strategies available:
  5508                           ; Name         Instructions Cycles
  5509                           ; simple_byte            4     3 (average)
  5510                           ;	Chosen strategy is simple_byte
  5511  000F48  5061               	movf	(??_SMSMotor+1)^0,w,c
  5512  000F4A  A4D8               	btfss	status,2,c
  5513  000F4C  0012               	return	
  5514                           
  5515                           ; Switch size 1, requested type "space"
  5516                           ; Number of cases is 6, Range of values is 0 to 5
  5517                           ; switch strategies available:
  5518                           ; Name         Instructions Cycles
  5519                           ; simple_byte           19    10 (average)
  5520                           ;	Chosen strategy is simple_byte
  5521  000F4E  5060               	movf	??_SMSMotor^0,w,c
  5522  000F50  E0B6               	bz	l3369
  5523  000F52  0A01               	xorlw	1	; case 1
  5524  000F54  E0D9               	bz	l3397
  5525  000F56  0A03               	xorlw	3	; case 2
  5526  000F58  E0DB               	bz	l3401
  5527  000F5A  0A01               	xorlw	1	; case 3
  5528  000F5C  E0E1               	bz	l3407
  5529  000F5E  0A07               	xorlw	7	; case 4
  5530  000F60  E0E4               	bz	l3411
  5531  000F62  0A01               	xorlw	1	; case 5
  5532  000F64  E0E5               	bz	l3413
  5533  000F66  0012               	return		;funcret
  5534  000F68                     __end_of_SMSMotor:
  5535                           	callstack 0
  5536  000F68                     PL68:
  5537                           	callstack 23
  5538  000F68  0EB0               	movlw	176
  5539  000F6A  5C59               	subwf	?_TiGetTics^0,w,c
  5540  000F6C  0E04               	movlw	4
  5541  000F6E  585A               	subwfb	(?_TiGetTics+1)^0,w,c
  5542  000F70  0012               	return	
  5543  000F72                     __end_ofPL68:
  5544                           	callstack 0
  5545                           
  5546 ;; *************** function _KeGetGenericValue *****************
  5547 ;; Defined at:
  5548 ;;		line 224 in file "keypad.c"
  5549 ;; Parameters:    Size  Location     Type
  5550 ;;		None
  5551 ;; Auto vars:     Size  Location     Type
  5552 ;;		None
  5553 ;; Return value:  Size  Location     Type
  5554 ;;                  1    wreg      unsigned char 
  5555 ;; Registers used:
  5556 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5557 ;; Tracked objects:
  5558 ;;		On entry : 0/0
  5559 ;;		On exit  : 0/0
  5560 ;;		Unchanged: 0/0
  5561 ;; Data sizes:     COMRAM   BANK0   BANK1
  5562 ;;      Params:         0       0       0
  5563 ;;      Locals:         0       0       0
  5564 ;;      Temps:          2       0       0
  5565 ;;      Totals:         2       0       0
  5566 ;;Total ram usage:        2 bytes
  5567 ;; Hardware stack levels used: 1
  5568 ;; Hardware stack levels required when called: 3
  5569 ;; This function calls:
  5570 ;;		_getColumn
  5571 ;; This function is called by:
  5572 ;;		_SMSMotor
  5573 ;;		_KeGetCharValue
  5574 ;;		_menuMotor
  5575 ;; This function uses a non-reentrant model
  5576 ;;
  5577                           
  5578                           	psect	text38
  5579  001630                     __ptext38:
  5580                           	callstack 0
  5581  001630                     _KeGetGenericValue:
  5582                           	callstack 26
  5583                           
  5584                           ;keypad.c: 225:     return TABLE[(row*3)+getColumn()];
  5585                           
  5586                           ;incstack = 0
  5587  001630  EC58  F00B         	call	_getColumn	;wreg free
  5588  001634  6E59               	movwf	??_KeGetGenericValue^0,c
  5589  001636  5052               	movf	_row^0,w,c
  5590  001638  0D03               	mullw	3
  5591  00163A  50F3               	movf	243,w,c
  5592  00163C  0F23               	addlw	low _TABLE
  5593  00163E  2459               	addwf	??_KeGetGenericValue^0,w,c
  5594  001640  6E5A               	movwf	(??_KeGetGenericValue+1)^0,c
  5595  001642  C05A  FFF6         	movff	??_KeGetGenericValue+1,tblptrl
  5596  001646                     	if	1	;There is more than 1 active tblptr byte
  5597  001646  EFE7  F005         	goto	PL10	;call to abstracted procedure
  5598  00164A                     __end_of_KeGetGenericValue:
  5599                           	callstack 0
  5600                           
  5601 ;; *************** function _getColumn *****************
  5602 ;; Defined at:
  5603 ;;		line 211 in file "keypad.c"
  5604 ;; Parameters:    Size  Location     Type
  5605 ;;		None
  5606 ;; Auto vars:     Size  Location     Type
  5607 ;;		None
  5608 ;; Return value:  Size  Location     Type
  5609 ;;                  1    wreg      unsigned char 
  5610 ;; Registers used:
  5611 ;;		wreg
  5612 ;; Tracked objects:
  5613 ;;		On entry : 0/0
  5614 ;;		On exit  : 0/0
  5615 ;;		Unchanged: 0/0
  5616 ;; Data sizes:     COMRAM   BANK0   BANK1
  5617 ;;      Params:         0       0       0
  5618 ;;      Locals:         0       0       0
  5619 ;;      Temps:          0       0       0
  5620 ;;      Totals:         0       0       0
  5621 ;;Total ram usage:        0 bytes
  5622 ;; Hardware stack levels used: 1
  5623 ;; Hardware stack levels required when called: 2
  5624 ;; This function calls:
  5625 ;;		Nothing
  5626 ;; This function is called by:
  5627 ;;		_KeGetGenericValue
  5628 ;; This function uses a non-reentrant model
  5629 ;;
  5630                           
  5631                           	psect	text39
  5632  0016B0                     __ptext39:
  5633                           	callstack 0
  5634  0016B0                     _getColumn:
  5635                           	callstack 26
  5636                           
  5637                           ;keypad.c: 212:     if (!PORTBbits.RB0) return 0;
  5638                           
  5639                           ;incstack = 0
  5640  0016B0  A081               	btfss	129,0,c	;volatile
  5641  0016B2  0C00               	retlw	0
  5642                           
  5643                           ;keypad.c: 213:     if (!PORTBbits.RB1) return 1;
  5644  0016B4  A281               	btfss	129,1,c	;volatile
  5645  0016B6  0C01               	retlw	1
  5646                           
  5647                           ;keypad.c: 214:     return 2;
  5648  0016B8  0C02               	retlw	2	;funcret
  5649  0016BA                     __end_of_getColumn:
  5650                           	callstack 0
  5651                           
  5652 ;; *************** function _LcInit *****************
  5653 ;; Defined at:
  5654 ;;		line 68 in file "LcTLCD.c"
  5655 ;; Parameters:    Size  Location     Type
  5656 ;;  rows            1    wreg     unsigned char 
  5657 ;;  columns         1   17[COMRAM] unsigned char 
  5658 ;; Auto vars:     Size  Location     Type
  5659 ;;  rows            1   18[COMRAM] unsigned char 
  5660 ;;  i               2   19[COMRAM] int 
  5661 ;; Return value:  Size  Location     Type
  5662 ;;                  1    wreg      void 
  5663 ;; Registers used:
  5664 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5665 ;; Tracked objects:
  5666 ;;		On entry : 0/0
  5667 ;;		On exit  : 0/0
  5668 ;;		Unchanged: 0/0
  5669 ;; Data sizes:     COMRAM   BANK0   BANK1
  5670 ;;      Params:         1       0       0
  5671 ;;      Locals:         3       0       0
  5672 ;;      Temps:          0       0       0
  5673 ;;      Totals:         4       0       0
  5674 ;;Total ram usage:        4 bytes
  5675 ;; Hardware stack levels used: 1
  5676 ;; Hardware stack levels required when called: 4
  5677 ;; This function calls:
  5678 ;;		_CantaIR
  5679 ;;		_EscriuPrimeraOrdre
  5680 ;;		_Espera
  5681 ;;		_TiGetTimer
  5682 ;;		_WaitForBusy
  5683 ;; This function is called by:
  5684 ;;		_main
  5685 ;; This function uses a non-reentrant model
  5686 ;;
  5687                           
  5688                           	psect	text40
  5689  000D32                     __ptext40:
  5690                           	callstack 0
  5691  000D32                     _LcInit:
  5692                           	callstack 26
  5693                           
  5694                           ;incstack = 0
  5695                           ;LcInit@rows stored from wreg
  5696  000D32  6E66               	movwf	LcInit@rows^0,c
  5697                           
  5698                           ;LcTLCD.c: 74:  int i;;LcTLCD.c: 75:  Timer = TiGetTimer();
  5699  000D34  EC5C  F00A         	call	_TiGetTimer	;wreg free
  5700  000D38  6E2F               	movwf	_Timer^0,c
  5701  000D3A  6A30               	clrf	(_Timer+1)^0,c
  5702                           
  5703                           ;LcTLCD.c: 76:  Rows = rows; Columns = columns;
  5704  000D3C  C066  F048         	movff	LcInit@rows,_Rows
  5705  000D40  C065  F047         	movff	LcInit@columns,_Columns
  5706                           
  5707                           ;LcTLCD.c: 77:  RowAct = ColumnAct = 0;
  5708  000D44  6A45               	clrf	_ColumnAct^0,c
  5709  000D46  6A46               	clrf	_RowAct^0,c
  5710                           
  5711                           ;LcTLCD.c: 78:  (TRISDbits.TRISD4 = TRISDbits.TRISD5 = TRISDbits.TRISD6 = 0);
  5712  000D48  9C95               	bcf	149,6,c	;volatile
  5713  000D4A  9A95               	bcf	149,5,c	;volatile
  5714  000D4C  9895               	bcf	149,4,c	;volatile
  5715                           
  5716                           ;LcTLCD.c: 79:  for (i = 0; i < 2; i++) {
  5717  000D4E  6A67               	clrf	LcInit@i^0,c
  5718  000D50  6A68               	clrf	(LcInit@i+1)^0,c
  5719  000D52                     l3333:
  5720                           
  5721                           ;LcTLCD.c: 80:   Espera(Timer, 100);
  5722  000D52  D84C               	call	PL8	;call to abstracted procedure
  5723  000D54  0E64               	movlw	100
  5724  000D56  6E62               	movwf	Espera@ms^0,c
  5725  000D58  ECDD  F00A         	call	_Espera	;wreg free
  5726                           
  5727                           ;LcTLCD.c: 83:   EscriuPrimeraOrdre(0x02 | 0x01);
  5728  000D5C  0E03               	movlw	3
  5729  000D5E  EC45  F008         	call	_EscriuPrimeraOrdre
  5730                           
  5731                           ;LcTLCD.c: 84:   Espera(Timer, 5);
  5732  000D62  D844               	call	PL8	;call to abstracted procedure
  5733  000D64  0E05               	movlw	5
  5734  000D66  6E62               	movwf	Espera@ms^0,c
  5735  000D68  ECDD  F00A         	call	_Espera	;wreg free
  5736                           
  5737                           ;LcTLCD.c: 85:   EscriuPrimeraOrdre(0x02 | 0x01);
  5738  000D6C  0E03               	movlw	3
  5739  000D6E  EC45  F008         	call	_EscriuPrimeraOrdre
  5740                           
  5741                           ;LcTLCD.c: 86:   Espera(Timer, 1);
  5742  000D72  D83C               	call	PL8	;call to abstracted procedure
  5743  000D74  0E01               	movlw	1
  5744  000D76  6E62               	movwf	Espera@ms^0,c
  5745  000D78  ECDD  F00A         	call	_Espera	;wreg free
  5746                           
  5747                           ;LcTLCD.c: 87:   EscriuPrimeraOrdre(0x02 | 0x01);
  5748  000D7C  0E03               	movlw	3
  5749  000D7E  EC45  F008         	call	_EscriuPrimeraOrdre
  5750                           
  5751                           ;LcTLCD.c: 88:   Espera(Timer, 1);
  5752  000D82  D834               	call	PL8	;call to abstracted procedure
  5753  000D84  0E01               	movlw	1
  5754  000D86  6E62               	movwf	Espera@ms^0,c
  5755  000D88  ECDD  F00A         	call	_Espera	;wreg free
  5756                           
  5757                           ;LcTLCD.c: 91:   EscriuPrimeraOrdre(0x02);
  5758  000D8C  0E02               	movlw	2
  5759  000D8E  EC45  F008         	call	_EscriuPrimeraOrdre
  5760                           
  5761                           ;LcTLCD.c: 92:   Espera(Timer, 1);
  5762  000D92  D82C               	call	PL8	;call to abstracted procedure
  5763  000D94  0E01               	movlw	1
  5764  000D96  6E62               	movwf	Espera@ms^0,c
  5765  000D98  ECDD  F00A         	call	_Espera	;wreg free
  5766                           
  5767                           ;LcTLCD.c: 93:   CantaIR(0x20 | 0x08);
  5768  000D9C  0E28               	movlw	40
  5769  000D9E  ECFC  F00A         	call	_CantaIR
  5770                           
  5771                           ;LcTLCD.c: 96:   WaitForBusy(); CantaIR(0x08);
  5772  000DA2  ECEF  F009         	call	_WaitForBusy	;wreg free
  5773  000DA6  0E08               	movlw	8
  5774  000DA8  ECFC  F00A         	call	_CantaIR
  5775                           
  5776                           ;LcTLCD.c: 97:   WaitForBusy(); CantaIR(0x01);
  5777  000DAC  ECEF  F009         	call	_WaitForBusy	;wreg free
  5778  000DB0  0E01               	movlw	1
  5779  000DB2  ECFC  F00A         	call	_CantaIR
  5780                           
  5781                           ;LcTLCD.c: 98:   Espera(Timer,3);
  5782  000DB6  D81A               	call	PL8	;call to abstracted procedure
  5783  000DB8  0E03               	movlw	3
  5784  000DBA  6E62               	movwf	Espera@ms^0,c
  5785  000DBC  ECDD  F00A         	call	_Espera	;wreg free
  5786                           
  5787                           ;LcTLCD.c: 99:   WaitForBusy(); CantaIR(0x04 | 0x02);
  5788  000DC0  ECEF  F009         	call	_WaitForBusy	;wreg free
  5789  000DC4  0E06               	movlw	6
  5790  000DC6  ECFC  F00A         	call	_CantaIR
  5791                           
  5792                           ;LcTLCD.c: 100:   WaitForBusy(); CantaIR(0x08 | 0x04 | 0x02 | 0x01);
  5793  000DCA  ECEF  F009         	call	_WaitForBusy	;wreg free
  5794  000DCE  0E0F               	movlw	15
  5795  000DD0  ECFC  F00A         	call	_CantaIR
  5796                           
  5797                           ;LcTLCD.c: 101:  }
  5798  000DD4  4A67               	infsnz	LcInit@i^0,f,c
  5799  000DD6  2A68               	incf	(LcInit@i+1)^0,f,c
  5800  000DD8  BE68               	btfsc	(LcInit@i+1)^0,7,c
  5801  000DDA  D7BB               	goto	l3333
  5802  000DDC  5068               	movf	(LcInit@i+1)^0,w,c
  5803  000DDE  E105               	bnz	u2620
  5804  000DE0  0E02               	movlw	2
  5805  000DE2  5C67               	subwf	LcInit@i^0,w,c
  5806  000DE4  B0D8               	btfsc	status,0,c
  5807  000DE6  0012               	return	
  5808  000DE8  D7B4               	goto	l3333
  5809  000DEA                     u2620:
  5810  000DEA  0012               	return		;funcret
  5811  000DEC                     __end_of_LcInit:
  5812                           	callstack 0
  5813  000DEC                     PL8:
  5814                           	callstack 26
  5815  000DEC  C02F  F060         	movff	_Timer,Espera@Timer
  5816  000DF0  C030  F061         	movff	_Timer+1,Espera@Timer+1
  5817  000DF4  6A63               	clrf	(Espera@ms+1)^0,c
  5818  000DF6  0012               	return	
  5819  000DF8                     __end_ofPL8:
  5820                           	callstack 0
  5821                           
  5822 ;; *************** function _WaitForBusy *****************
  5823 ;; Defined at:
  5824 ;;		line 261 in file "LcTLCD.c"
  5825 ;; Parameters:    Size  Location     Type
  5826 ;;		None
  5827 ;; Auto vars:     Size  Location     Type
  5828 ;;  Busy            1   12[COMRAM] unsigned char 
  5829 ;; Return value:  Size  Location     Type
  5830 ;;                  1    wreg      void 
  5831 ;; Registers used:
  5832 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5833 ;; Tracked objects:
  5834 ;;		On entry : 0/0
  5835 ;;		On exit  : 0/0
  5836 ;;		Unchanged: 0/0
  5837 ;; Data sizes:     COMRAM   BANK0   BANK1
  5838 ;;      Params:         0       0       0
  5839 ;;      Locals:         1       0       0
  5840 ;;      Temps:          0       0       0
  5841 ;;      Totals:         1       0       0
  5842 ;;Total ram usage:        1 bytes
  5843 ;; Hardware stack levels used: 1
  5844 ;; Hardware stack levels required when called: 3
  5845 ;; This function calls:
  5846 ;;		_TiGetTics
  5847 ;;		_TiResetTics
  5848 ;; This function is called by:
  5849 ;;		_LcInit
  5850 ;;		_LcClear
  5851 ;;		_LcCursorOn
  5852 ;;		_LcCursorOff
  5853 ;;		_LcGotoXY
  5854 ;;		_LcPutChar
  5855 ;; This function uses a non-reentrant model
  5856 ;;
  5857                           
  5858                           	psect	text41
  5859  0013DE                     __ptext41:
  5860                           	callstack 0
  5861  0013DE                     _WaitForBusy:
  5862                           	callstack 24
  5863                           
  5864                           ;LcTLCD.c: 262:  (TRISDbits.TRISD0 = TRISDbits.TRISD1 = TRISDbits.TRISD2 = TRISDbits.TRI
      +                          SD3 = 1);
  5865                           
  5866                           ;incstack = 0
  5867  0013DE  8695               	bsf	149,3,c	;volatile
  5868  0013E0  8495               	bsf	149,2,c	;volatile
  5869  0013E2  8295               	bsf	149,1,c	;volatile
  5870  0013E4  8095               	bsf	149,0,c	;volatile
  5871                           
  5872                           ;LcTLCD.c: 263:  (LATDbits.LATD4 = 0);
  5873  0013E6  988C               	bcf	140,4,c	;volatile
  5874                           
  5875                           ;LcTLCD.c: 264:  (LATDbits.LATD5 = 1);
  5876  0013E8  8A8C               	bsf	140,5,c	;volatile
  5877                           
  5878                           ;LcTLCD.c: 265:  TiResetTics(Timer);
  5879  0013EA  502F               	movf	_Timer^0,w,c
  5880  0013EC  EC0A  F00B         	call	_TiResetTics
  5881  0013F0                     l2965:
  5882                           
  5883                           ;LcTLCD.c: 267:   (LATDbits.LATD6 = 1);(LATDbits.LATD6 = 1);
  5884  0013F0  8C8C               	bsf	140,6,c	;volatile
  5885  0013F2  8C8C               	bsf	140,6,c	;volatile
  5886                           
  5887                           ;LcTLCD.c: 268:   Busy = (PORTDbits.RD3);
  5888  0013F4  0E00               	movlw	0
  5889  0013F6  B683               	btfsc	131,3,c	;volatile
  5890  0013F8  0E01               	movlw	1
  5891  0013FA  6E60               	movwf	WaitForBusy@Busy^0,c
  5892                           
  5893                           ;LcTLCD.c: 269:   (LATDbits.LATD6 = 0);
  5894  0013FC  9C8C               	bcf	140,6,c	;volatile
  5895                           
  5896                           ;LcTLCD.c: 270:   (LATDbits.LATD6 = 0);
  5897  0013FE  9C8C               	bcf	140,6,c	;volatile
  5898                           
  5899                           ;LcTLCD.c: 271:   (LATDbits.LATD6 = 1);(LATDbits.LATD6 = 1);
  5900  001400  8C8C               	bsf	140,6,c	;volatile
  5901  001402  8C8C               	bsf	140,6,c	;volatile
  5902                           
  5903                           ;LcTLCD.c: 273:   (LATDbits.LATD6 = 0);
  5904  001404  9C8C               	bcf	140,6,c	;volatile
  5905                           
  5906                           ;LcTLCD.c: 274:   (LATDbits.LATD6 = 0);
  5907  001406  9C8C               	bcf	140,6,c	;volatile
  5908                           
  5909                           ;LcTLCD.c: 275:   if (TiGetTics(Timer)) break;
  5910  001408  502F               	movf	_Timer^0,w,c
  5911  00140A  EC85  F00A         	call	_TiGetTics
  5912  00140E  5059               	movf	?_TiGetTics^0,w,c
  5913  001410  105A               	iorwf	(?_TiGetTics+1)^0,w,c
  5914  001412  E001               	bz	l2987
  5915  001414  0012               	return	
  5916  001416                     l2987:
  5917                           
  5918                           ;LcTLCD.c: 276:  } while(Busy);
  5919  001416  5060               	movf	WaitForBusy@Busy^0,w,c
  5920  001418  E1EB               	bnz	l2965
  5921  00141A  0012               	return		;funcret
  5922  00141C                     __end_of_WaitForBusy:
  5923                           	callstack 0
  5924                           
  5925 ;; *************** function _TiGetTimer *****************
  5926 ;; Defined at:
  5927 ;;		line 74 in file "TTimer.c"
  5928 ;; Parameters:    Size  Location     Type
  5929 ;;		None
  5930 ;; Auto vars:     Size  Location     Type
  5931 ;;		None
  5932 ;; Return value:  Size  Location     Type
  5933 ;;                  1    wreg      unsigned char 
  5934 ;; Registers used:
  5935 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  5936 ;; Tracked objects:
  5937 ;;		On entry : 0/0
  5938 ;;		On exit  : 0/0
  5939 ;;		Unchanged: 0/0
  5940 ;; Data sizes:     COMRAM   BANK0   BANK1
  5941 ;;      Params:         0       0       0
  5942 ;;      Locals:         0       0       0
  5943 ;;      Temps:          1       0       0
  5944 ;;      Totals:         1       0       0
  5945 ;;Total ram usage:        1 bytes
  5946 ;; Hardware stack levels used: 1
  5947 ;; Hardware stack levels required when called: 2
  5948 ;; This function calls:
  5949 ;;		Nothing
  5950 ;; This function is called by:
  5951 ;;		_initKeypad
  5952 ;;		_LcInit
  5953 ;;		_initMenu
  5954 ;; This function uses a non-reentrant model
  5955 ;;
  5956                           
  5957                           	psect	text42
  5958  0014B8                     __ptext42:
  5959                           	callstack 0
  5960  0014B8                     _TiGetTimer:
  5961                           	callstack 27
  5962                           
  5963                           ;TTimer.c: 78:     counter=0;
  5964                           
  5965                           ;incstack = 0
  5966  0014B8  6A53               	clrf	_counter^0,c
  5967                           
  5968                           ;TTimer.c: 79:     while (s_Timers[counter].b_busy==1) {
  5969  0014BA  D005               	goto	l3131
  5970  0014BC                     l3123:
  5971                           
  5972                           ;TTimer.c: 80:         counter++;
  5973  0014BC  2A53               	incf	_counter^0,f,c
  5974                           
  5975                           ;TTimer.c: 81:  if (counter == 25) return -1;
  5976  0014BE  0E19               	movlw	25
  5977  0014C0  1853               	xorwf	_counter^0,w,c
  5978  0014C2  E101               	bnz	l3131
  5979  0014C4  0CFF               	retlw	255
  5980  0014C6                     l3131:
  5981                           
  5982                           ;TTimer.c: 79:     while (s_Timers[counter].b_busy==1) {
  5983  0014C6  D807               	call	PL18	;call to abstracted procedure
  5984  0014C8  04DE               	decf	postinc2,w,c
  5985  0014CA  E0F8               	bz	l3123
  5986                           
  5987                           ;TTimer.c: 83:     s_Timers[counter].b_busy=1;
  5988  0014CC  D804               	call	PL18	;call to abstracted procedure
  5989  0014CE  0E01               	movlw	1
  5990  0014D0  6EDF               	movwf	indf2,c
  5991                           
  5992                           ;TTimer.c: 84:     return (counter);
  5993  0014D2  5053               	movf	_counter^0,w,c
  5994  0014D4  0012               	return		;funcret
  5995  0014D6                     __end_of_TiGetTimer:
  5996                           	callstack 0
  5997  0014D6                     PL18:
  5998                           	callstack 28
  5999  0014D6  5053               	movf	_counter^0,w,c
  6000  0014D8  0D03               	mullw	3
  6001  0014DA  50F3               	movf	243,w,c
  6002  0014DC  0F82               	addlw	low (_s_Timers+2)
  6003  0014DE  6ED9               	movwf	fsr2l,c
  6004  0014E0  6ADA               	clrf	fsr2h,c
  6005  0014E2  0012               	return	
  6006  0014E4                     __end_ofPL18:
  6007                           	callstack 0
  6008                           
  6009 ;; *************** function _Espera *****************
  6010 ;; Defined at:
  6011 ;;		line 210 in file "LcTLCD.c"
  6012 ;; Parameters:    Size  Location     Type
  6013 ;;  Timer           2   12[COMRAM] int 
  6014 ;;  ms              2   14[COMRAM] int 
  6015 ;; Auto vars:     Size  Location     Type
  6016 ;;		None
  6017 ;; Return value:  Size  Location     Type
  6018 ;;                  1    wreg      void 
  6019 ;; Registers used:
  6020 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6021 ;; Tracked objects:
  6022 ;;		On entry : 0/0
  6023 ;;		On exit  : 0/0
  6024 ;;		Unchanged: 0/0
  6025 ;; Data sizes:     COMRAM   BANK0   BANK1
  6026 ;;      Params:         4       0       0
  6027 ;;      Locals:         0       0       0
  6028 ;;      Temps:          1       0       0
  6029 ;;      Totals:         5       0       0
  6030 ;;Total ram usage:        5 bytes
  6031 ;; Hardware stack levels used: 1
  6032 ;; Hardware stack levels required when called: 3
  6033 ;; This function calls:
  6034 ;;		_TiGetTics
  6035 ;;		_TiResetTics
  6036 ;; This function is called by:
  6037 ;;		_LcInit
  6038 ;;		_LcClear
  6039 ;; This function uses a non-reentrant model
  6040 ;;
  6041                           
  6042                           	psect	text43
  6043  0015BA                     __ptext43:
  6044                           	callstack 0
  6045  0015BA                     _Espera:
  6046                           	callstack 25
  6047                           
  6048                           ;LcTLCD.c: 211:  TiResetTics(Timer);
  6049                           
  6050                           ;incstack = 0
  6051  0015BA  5060               	movf	Espera@Timer^0,w,c
  6052  0015BC  EC0A  F00B         	call	_TiResetTics
  6053  0015C0                     l3045:
  6054  0015C0  5060               	movf	Espera@Timer^0,w,c
  6055  0015C2  EC85  F00A         	call	_TiGetTics
  6056  0015C6  5062               	movf	Espera@ms^0,w,c
  6057  0015C8  5C59               	subwf	?_TiGetTics^0,w,c
  6058  0015CA  505A               	movf	(?_TiGetTics+1)^0,w,c
  6059  0015CC  0A80               	xorlw	128
  6060  0015CE  6E64               	movwf	??_Espera^0,c
  6061  0015D0  5063               	movf	(Espera@ms+1)^0,w,c
  6062  0015D2  0A80               	xorlw	128
  6063  0015D4  5864               	subwfb	??_Espera^0,w,c
  6064  0015D6  E3F4               	bnc	l3045
  6065  0015D8  0012               	return		;funcret
  6066  0015DA                     __end_of_Espera:
  6067                           	callstack 0
  6068                           
  6069 ;; *************** function _EscriuPrimeraOrdre *****************
  6070 ;; Defined at:
  6071 ;;		line 279 in file "LcTLCD.c"
  6072 ;; Parameters:    Size  Location     Type
  6073 ;;  ordre           1    wreg     unsigned char 
  6074 ;; Auto vars:     Size  Location     Type
  6075 ;;  ordre           1    6[COMRAM] unsigned char 
  6076 ;; Return value:  Size  Location     Type
  6077 ;;                  1    wreg      void 
  6078 ;; Registers used:
  6079 ;;		wreg, status,2, status,0
  6080 ;; Tracked objects:
  6081 ;;		On entry : 0/0
  6082 ;;		On exit  : 0/0
  6083 ;;		Unchanged: 0/0
  6084 ;; Data sizes:     COMRAM   BANK0   BANK1
  6085 ;;      Params:         0       0       0
  6086 ;;      Locals:         1       0       0
  6087 ;;      Temps:          1       0       0
  6088 ;;      Totals:         2       0       0
  6089 ;;Total ram usage:        2 bytes
  6090 ;; Hardware stack levels used: 1
  6091 ;; Hardware stack levels required when called: 2
  6092 ;; This function calls:
  6093 ;;		Nothing
  6094 ;; This function is called by:
  6095 ;;		_LcInit
  6096 ;; This function uses a non-reentrant model
  6097 ;;
  6098                           
  6099                           	psect	text44
  6100  00108A                     __ptext44:
  6101                           	callstack 0
  6102  00108A                     _EscriuPrimeraOrdre:
  6103                           	callstack 27
  6104                           
  6105                           ;incstack = 0
  6106                           ;EscriuPrimeraOrdre@ordre stored from wreg
  6107  00108A  6E5A               	movwf	EscriuPrimeraOrdre@ordre^0,c
  6108                           
  6109                           ;LcTLCD.c: 281:  (TRISDbits.TRISD0 = TRISDbits.TRISD1 = TRISDbits.TRISD2 = TRISDbits.TRI
      +                          SD3 = 0); (LATDbits.LATD4 = 0); (LATDbits.LATD5 = 0);
  6110  00108C  9695               	bcf	149,3,c	;volatile
  6111                           
  6112                           ;LcTLCD.c: 282:  (LATDbits.LATD6 = 1); (LATDbits.LATD6 = 1);
  6113  00108E  D82F               	call	PL42	;call to abstracted procedure
  6114  001090  8C8C               	bsf	140,6,c	;volatile
  6115                           
  6116                           ;LcTLCD.c: 283:   (LATDbits.LATD3 = (ordre & 0x08 ? 1 : 0));
  6117  001092  A65A               	btfss	EscriuPrimeraOrdre@ordre^0,3,c
  6118  001094  D003               	goto	u500
  6119  001096  6A59               	clrf	??_EscriuPrimeraOrdre^0,c
  6120  001098  2A59               	incf	??_EscriuPrimeraOrdre^0,f,c
  6121  00109A  D001               	goto	u518
  6122  00109C                     u500:
  6123  00109C  6A59               	clrf	??_EscriuPrimeraOrdre^0,c
  6124  00109E                     u518:
  6125  00109E  4659               	rlncf	??_EscriuPrimeraOrdre^0,f,c
  6126  0010A0  D82D               	call	PL66	;call to abstracted procedure
  6127  0010A2  0BF7               	andlw	-9
  6128  0010A4  1859               	xorwf	??_EscriuPrimeraOrdre^0,w,c
  6129  0010A6  6E8C               	movwf	140,c	;volatile
  6130                           
  6131                           ;LcTLCD.c: 284:   (LATDbits.LATD2 = (ordre & 0x04 ? 1 : 0));
  6132  0010A8  A45A               	btfss	EscriuPrimeraOrdre@ordre^0,2,c
  6133  0010AA  D003               	goto	u520
  6134  0010AC  6A59               	clrf	??_EscriuPrimeraOrdre^0,c
  6135  0010AE  2A59               	incf	??_EscriuPrimeraOrdre^0,f,c
  6136  0010B0  D001               	goto	u538
  6137  0010B2                     u520:
  6138  0010B2  6A59               	clrf	??_EscriuPrimeraOrdre^0,c
  6139  0010B4                     u538:
  6140  0010B4  D823               	call	PL66	;call to abstracted procedure
  6141  0010B6  0BFB               	andlw	-5
  6142  0010B8  1859               	xorwf	??_EscriuPrimeraOrdre^0,w,c
  6143  0010BA  6E8C               	movwf	140,c	;volatile
  6144                           
  6145                           ;LcTLCD.c: 285:   (LATDbits.LATD1 = (ordre & 0x02 ? 1 : 0));
  6146  0010BC  A25A               	btfss	EscriuPrimeraOrdre@ordre^0,1,c
  6147  0010BE  D003               	goto	u540
  6148  0010C0  6A59               	clrf	??_EscriuPrimeraOrdre^0,c
  6149  0010C2  2A59               	incf	??_EscriuPrimeraOrdre^0,f,c
  6150  0010C4  D001               	goto	u558
  6151  0010C6                     u540:
  6152  0010C6  6A59               	clrf	??_EscriuPrimeraOrdre^0,c
  6153  0010C8                     u558:
  6154  0010C8  4659               	rlncf	??_EscriuPrimeraOrdre^0,f,c
  6155  0010CA  508C               	movf	140,w,c	;volatile
  6156  0010CC  1859               	xorwf	??_EscriuPrimeraOrdre^0,w,c
  6157  0010CE  0BFD               	andlw	-3
  6158  0010D0  1859               	xorwf	??_EscriuPrimeraOrdre^0,w,c
  6159  0010D2  6E8C               	movwf	140,c	;volatile
  6160                           
  6161                           ;LcTLCD.c: 286:   (LATDbits.LATD0 = (ordre & 0x01 ? 1 : 0));
  6162  0010D4  A05A               	btfss	EscriuPrimeraOrdre@ordre^0,0,c
  6163  0010D6  D003               	goto	u560
  6164  0010D8  6A59               	clrf	??_EscriuPrimeraOrdre^0,c
  6165  0010DA  2A59               	incf	??_EscriuPrimeraOrdre^0,f,c
  6166  0010DC  D001               	goto	u578
  6167  0010DE                     u560:
  6168  0010DE  6A59               	clrf	??_EscriuPrimeraOrdre^0,c
  6169  0010E0                     u578:
  6170  0010E0  508C               	movf	140,w,c	;volatile
  6171  0010E2  1859               	xorwf	??_EscriuPrimeraOrdre^0,w,c
  6172  0010E4  0BFE               	andlw	-2
  6173  0010E6  1859               	xorwf	??_EscriuPrimeraOrdre^0,w,c
  6174  0010E8  6E8C               	movwf	140,c	;volatile
  6175                           
  6176                           ;LcTLCD.c: 287:  (LATDbits.LATD6 = 0);
  6177  0010EA  9C8C               	bcf	140,6,c	;volatile
  6178  0010EC  0012               	return		;funcret
  6179  0010EE                     __end_of_EscriuPrimeraOrdre:
  6180                           	callstack 0
  6181  0010EE                     PL42:
  6182                           	callstack 23
  6183  0010EE  9495               	bcf	149,2,c	;volatile
  6184  0010F0  9295               	bcf	149,1,c	;volatile
  6185  0010F2  9095               	bcf	149,0,c	;volatile
  6186  0010F4  988C               	bcf	140,4,c	;volatile
  6187  0010F6  9A8C               	bcf	140,5,c	;volatile
  6188  0010F8  8C8C               	bsf	140,6,c	;volatile
  6189  0010FA  0012               	return	
  6190  0010FC                     __end_ofPL42:
  6191                           	callstack 0
  6192  0010FC                     PL66:
  6193                           	callstack 27
  6194  0010FC  4659               	rlncf	??_EscriuPrimeraOrdre^0,f,c
  6195  0010FE  4659               	rlncf	??_EscriuPrimeraOrdre^0,f,c
  6196  001100  508C               	movf	140,w,c	;volatile
  6197  001102  1859               	xorwf	??_EscriuPrimeraOrdre^0,w,c
  6198  001104  0012               	return	
  6199  001106                     __end_ofPL66:
  6200                           	callstack 0
  6201                           
  6202 ;; *************** function _CantaIR *****************
  6203 ;; Defined at:
  6204 ;;		line 229 in file "LcTLCD.c"
  6205 ;; Parameters:    Size  Location     Type
  6206 ;;  IR              1    wreg     unsigned char 
  6207 ;; Auto vars:     Size  Location     Type
  6208 ;;  IR              1    7[COMRAM] unsigned char 
  6209 ;; Return value:  Size  Location     Type
  6210 ;;                  1    wreg      void 
  6211 ;; Registers used:
  6212 ;;		wreg, status,2, status,0, cstack
  6213 ;; Tracked objects:
  6214 ;;		On entry : 0/0
  6215 ;;		On exit  : 0/0
  6216 ;;		Unchanged: 0/0
  6217 ;; Data sizes:     COMRAM   BANK0   BANK1
  6218 ;;      Params:         0       0       0
  6219 ;;      Locals:         1       0       0
  6220 ;;      Temps:          0       0       0
  6221 ;;      Totals:         1       0       0
  6222 ;;Total ram usage:        1 bytes
  6223 ;; Hardware stack levels used: 1
  6224 ;; Hardware stack levels required when called: 3
  6225 ;; This function calls:
  6226 ;;		_CantaPartAlta
  6227 ;;		_CantaPartBaixa
  6228 ;; This function is called by:
  6229 ;;		_LcInit
  6230 ;;		_LcClear
  6231 ;;		_LcCursorOn
  6232 ;;		_LcCursorOff
  6233 ;;		_LcGotoXY
  6234 ;; This function uses a non-reentrant model
  6235 ;;
  6236                           
  6237                           	psect	text45
  6238  0015F8                     __ptext45:
  6239                           	callstack 0
  6240  0015F8                     _CantaIR:
  6241                           	callstack 23
  6242                           
  6243                           ;incstack = 0
  6244                           ;CantaIR@IR stored from wreg
  6245  0015F8  6E5B               	movwf	CantaIR@IR^0,c
  6246                           
  6247                           ;LcTLCD.c: 230:  (TRISDbits.TRISD0 = TRISDbits.TRISD1 = TRISDbits.TRISD2 = TRISDbits.TRI
      +                          SD3 = 0);
  6248  0015FA  9695               	bcf	149,3,c	;volatile
  6249                           
  6250                           ;LcTLCD.c: 231:  (LATDbits.LATD4 = 0);
  6251                           
  6252                           ;LcTLCD.c: 232:  (LATDbits.LATD5 = 0);
  6253                           
  6254                           ;LcTLCD.c: 233:  (LATDbits.LATD6 = 1);
  6255  0015FC  EC77  F008         	call	PL42	;call to abstracted procedure
  6256                           
  6257                           ;LcTLCD.c: 234:  CantaPartAlta(IR);
  6258  001600  505B               	movf	CantaIR@IR^0,w,c
  6259  001602  EC21  F009         	call	_CantaPartAlta
  6260                           
  6261                           ;LcTLCD.c: 235:  (LATDbits.LATD6 = 1);
  6262                           
  6263                           ;LcTLCD.c: 236:  (LATDbits.LATD6 = 0);
  6264                           
  6265                           ;LcTLCD.c: 237:  (LATDbits.LATD6 = 0);
  6266                           
  6267                           ;LcTLCD.c: 238:  (LATDbits.LATD6 = 1);
  6268  001606  EC41  F00A         	call	PL60	;call to abstracted procedure
  6269                           
  6270                           ;LcTLCD.c: 239:  CantaPartBaixa(IR);
  6271  00160A  505B               	movf	CantaIR@IR^0,w,c
  6272  00160C  ECEE  F008         	call	_CantaPartBaixa
  6273                           
  6274                           ;LcTLCD.c: 240:  (LATDbits.LATD6 = 1);
  6275                           
  6276                           ;LcTLCD.c: 241:  (LATDbits.LATD6 = 0);
  6277                           
  6278                           ;LcTLCD.c: 242:  (TRISDbits.TRISD0 = TRISDbits.TRISD1 = TRISDbits.TRISD2 = TRISDbits.TRI
      +                          SD3 = 1);
  6279  001610  EF3A  F00A         	goto	PL38	;call to abstracted procedure
  6280  001614                     __end_of_CantaIR:
  6281                           	callstack 0
  6282                           
  6283 ;; *************** function _CantaPartBaixa *****************
  6284 ;; Defined at:
  6285 ;;		line 222 in file "LcTLCD.c"
  6286 ;; Parameters:    Size  Location     Type
  6287 ;;  c               1    wreg     unsigned char 
  6288 ;; Auto vars:     Size  Location     Type
  6289 ;;  c               1    6[COMRAM] unsigned char 
  6290 ;; Return value:  Size  Location     Type
  6291 ;;                  1    wreg      void 
  6292 ;; Registers used:
  6293 ;;		wreg, status,2, status,0
  6294 ;; Tracked objects:
  6295 ;;		On entry : 0/0
  6296 ;;		On exit  : 0/0
  6297 ;;		Unchanged: 0/0
  6298 ;; Data sizes:     COMRAM   BANK0   BANK1
  6299 ;;      Params:         0       0       0
  6300 ;;      Locals:         1       0       0
  6301 ;;      Temps:          1       0       0
  6302 ;;      Totals:         2       0       0
  6303 ;;Total ram usage:        2 bytes
  6304 ;; Hardware stack levels used: 1
  6305 ;; Hardware stack levels required when called: 2
  6306 ;; This function calls:
  6307 ;;		Nothing
  6308 ;; This function is called by:
  6309 ;;		_CantaIR
  6310 ;;		_CantaData
  6311 ;; This function uses a non-reentrant model
  6312 ;;
  6313                           
  6314                           	psect	text46
  6315  0011DC                     __ptext46:
  6316                           	callstack 0
  6317  0011DC                     _CantaPartBaixa:
  6318                           	callstack 23
  6319                           
  6320                           ;incstack = 0
  6321                           ;CantaPartBaixa@c stored from wreg
  6322  0011DC  6E5A               	movwf	CantaPartBaixa@c^0,c
  6323                           
  6324                           ;LcTLCD.c: 223:   (LATDbits.LATD3 = (c & 0x08 ? 1 : 0));
  6325  0011DE  A65A               	btfss	CantaPartBaixa@c^0,3,c
  6326  0011E0  D003               	goto	u2100
  6327  0011E2  6A59               	clrf	??_CantaPartBaixa^0,c
  6328  0011E4  2A59               	incf	??_CantaPartBaixa^0,f,c
  6329  0011E6  D001               	goto	u2118
  6330  0011E8                     u2100:
  6331  0011E8  6A59               	clrf	??_CantaPartBaixa^0,c
  6332  0011EA                     u2118:
  6333  0011EA  4659               	rlncf	??_CantaPartBaixa^0,f,c
  6334  0011EC  D825               	call	PL62	;call to abstracted procedure
  6335  0011EE  0BF7               	andlw	-9
  6336  0011F0  1859               	xorwf	??_CantaPartBaixa^0,w,c
  6337  0011F2  6E8C               	movwf	140,c	;volatile
  6338                           
  6339                           ;LcTLCD.c: 224:   (LATDbits.LATD2 = (c & 0x04 ? 1 : 0));
  6340  0011F4  A45A               	btfss	CantaPartBaixa@c^0,2,c
  6341  0011F6  D003               	goto	u2120
  6342  0011F8  6A59               	clrf	??_CantaPartBaixa^0,c
  6343  0011FA  2A59               	incf	??_CantaPartBaixa^0,f,c
  6344  0011FC  D001               	goto	u2138
  6345  0011FE                     u2120:
  6346  0011FE  6A59               	clrf	??_CantaPartBaixa^0,c
  6347  001200                     u2138:
  6348  001200  D81B               	call	PL62	;call to abstracted procedure
  6349  001202  0BFB               	andlw	-5
  6350  001204  1859               	xorwf	??_CantaPartBaixa^0,w,c
  6351  001206  6E8C               	movwf	140,c	;volatile
  6352                           
  6353                           ;LcTLCD.c: 225:   (LATDbits.LATD1 = (c & 0x02 ? 1 : 0));
  6354  001208  A25A               	btfss	CantaPartBaixa@c^0,1,c
  6355  00120A  D003               	goto	u2140
  6356  00120C  6A59               	clrf	??_CantaPartBaixa^0,c
  6357  00120E  2A59               	incf	??_CantaPartBaixa^0,f,c
  6358  001210  D001               	goto	u2158
  6359  001212                     u2140:
  6360  001212  6A59               	clrf	??_CantaPartBaixa^0,c
  6361  001214                     u2158:
  6362  001214  4659               	rlncf	??_CantaPartBaixa^0,f,c
  6363  001216  508C               	movf	140,w,c	;volatile
  6364  001218  1859               	xorwf	??_CantaPartBaixa^0,w,c
  6365  00121A  0BFD               	andlw	-3
  6366  00121C  1859               	xorwf	??_CantaPartBaixa^0,w,c
  6367  00121E  6E8C               	movwf	140,c	;volatile
  6368                           
  6369                           ;LcTLCD.c: 226:   (LATDbits.LATD0 = (c & 0x01 ? 1 : 0));
  6370  001220  A05A               	btfss	CantaPartBaixa@c^0,0,c
  6371  001222  D003               	goto	u2160
  6372  001224  6A59               	clrf	??_CantaPartBaixa^0,c
  6373  001226  2A59               	incf	??_CantaPartBaixa^0,f,c
  6374  001228  D001               	goto	u2178
  6375  00122A                     u2160:
  6376  00122A  6A59               	clrf	??_CantaPartBaixa^0,c
  6377  00122C                     u2178:
  6378  00122C  508C               	movf	140,w,c	;volatile
  6379  00122E  1859               	xorwf	??_CantaPartBaixa^0,w,c
  6380  001230  0BFE               	andlw	-2
  6381  001232  1859               	xorwf	??_CantaPartBaixa^0,w,c
  6382  001234  6E8C               	movwf	140,c	;volatile
  6383  001236  0012               	return		;funcret
  6384  001238                     __end_of_CantaPartBaixa:
  6385                           	callstack 0
  6386  001238                     PL62:
  6387                           	callstack 23
  6388  001238  4659               	rlncf	??_CantaPartBaixa^0,f,c
  6389  00123A  4659               	rlncf	??_CantaPartBaixa^0,f,c
  6390  00123C  508C               	movf	140,w,c	;volatile
  6391  00123E  1859               	xorwf	??_CantaPartBaixa^0,w,c
  6392  001240  0012               	return	
  6393  001242                     __end_ofPL62:
  6394                           	callstack 0
  6395                           
  6396 ;; *************** function _CantaPartAlta *****************
  6397 ;; Defined at:
  6398 ;;		line 215 in file "LcTLCD.c"
  6399 ;; Parameters:    Size  Location     Type
  6400 ;;  c               1    wreg     unsigned char 
  6401 ;; Auto vars:     Size  Location     Type
  6402 ;;  c               1    6[COMRAM] unsigned char 
  6403 ;; Return value:  Size  Location     Type
  6404 ;;                  1    wreg      void 
  6405 ;; Registers used:
  6406 ;;		wreg, status,2, status,0
  6407 ;; Tracked objects:
  6408 ;;		On entry : 0/0
  6409 ;;		On exit  : 0/0
  6410 ;;		Unchanged: 0/0
  6411 ;; Data sizes:     COMRAM   BANK0   BANK1
  6412 ;;      Params:         0       0       0
  6413 ;;      Locals:         1       0       0
  6414 ;;      Temps:          1       0       0
  6415 ;;      Totals:         2       0       0
  6416 ;;Total ram usage:        2 bytes
  6417 ;; Hardware stack levels used: 1
  6418 ;; Hardware stack levels required when called: 2
  6419 ;; This function calls:
  6420 ;;		Nothing
  6421 ;; This function is called by:
  6422 ;;		_CantaIR
  6423 ;;		_CantaData
  6424 ;; This function uses a non-reentrant model
  6425 ;;
  6426                           
  6427                           	psect	text47
  6428  001242                     __ptext47:
  6429                           	callstack 0
  6430  001242                     _CantaPartAlta:
  6431                           	callstack 23
  6432                           
  6433                           ;incstack = 0
  6434                           ;CantaPartAlta@c stored from wreg
  6435  001242  6E5A               	movwf	CantaPartAlta@c^0,c
  6436                           
  6437                           ;LcTLCD.c: 216:   (LATDbits.LATD3 = (c & 0x80 ? 1 : 0));
  6438  001244  AE5A               	btfss	CantaPartAlta@c^0,7,c
  6439  001246  D003               	goto	u2020
  6440  001248  6A59               	clrf	??_CantaPartAlta^0,c
  6441  00124A  2A59               	incf	??_CantaPartAlta^0,f,c
  6442  00124C  D001               	goto	u2038
  6443  00124E                     u2020:
  6444  00124E  6A59               	clrf	??_CantaPartAlta^0,c
  6445  001250                     u2038:
  6446  001250  4659               	rlncf	??_CantaPartAlta^0,f,c
  6447  001252  D825               	call	PL70	;call to abstracted procedure
  6448  001254  0BF7               	andlw	-9
  6449  001256  1859               	xorwf	??_CantaPartAlta^0,w,c
  6450  001258  6E8C               	movwf	140,c	;volatile
  6451                           
  6452                           ;LcTLCD.c: 217:   (LATDbits.LATD2 = (c & 0x40 ? 1 : 0));
  6453  00125A  AC5A               	btfss	CantaPartAlta@c^0,6,c
  6454  00125C  D003               	goto	u2040
  6455  00125E  6A59               	clrf	??_CantaPartAlta^0,c
  6456  001260  2A59               	incf	??_CantaPartAlta^0,f,c
  6457  001262  D001               	goto	u2058
  6458  001264                     u2040:
  6459  001264  6A59               	clrf	??_CantaPartAlta^0,c
  6460  001266                     u2058:
  6461  001266  D81B               	call	PL70	;call to abstracted procedure
  6462  001268  0BFB               	andlw	-5
  6463  00126A  1859               	xorwf	??_CantaPartAlta^0,w,c
  6464  00126C  6E8C               	movwf	140,c	;volatile
  6465                           
  6466                           ;LcTLCD.c: 218:   (LATDbits.LATD1 = (c & 0x20 ? 1 : 0));
  6467  00126E  AA5A               	btfss	CantaPartAlta@c^0,5,c
  6468  001270  D003               	goto	u2060
  6469  001272  6A59               	clrf	??_CantaPartAlta^0,c
  6470  001274  2A59               	incf	??_CantaPartAlta^0,f,c
  6471  001276  D001               	goto	u2078
  6472  001278                     u2060:
  6473  001278  6A59               	clrf	??_CantaPartAlta^0,c
  6474  00127A                     u2078:
  6475  00127A  4659               	rlncf	??_CantaPartAlta^0,f,c
  6476  00127C  508C               	movf	140,w,c	;volatile
  6477  00127E  1859               	xorwf	??_CantaPartAlta^0,w,c
  6478  001280  0BFD               	andlw	-3
  6479  001282  1859               	xorwf	??_CantaPartAlta^0,w,c
  6480  001284  6E8C               	movwf	140,c	;volatile
  6481                           
  6482                           ;LcTLCD.c: 219:   (LATDbits.LATD0 = (c & 0x10 ? 1 : 0));
  6483  001286  A85A               	btfss	CantaPartAlta@c^0,4,c
  6484  001288  D003               	goto	u2080
  6485  00128A  6A59               	clrf	??_CantaPartAlta^0,c
  6486  00128C  2A59               	incf	??_CantaPartAlta^0,f,c
  6487  00128E  D001               	goto	u2098
  6488  001290                     u2080:
  6489  001290  6A59               	clrf	??_CantaPartAlta^0,c
  6490  001292                     u2098:
  6491  001292  508C               	movf	140,w,c	;volatile
  6492  001294  1859               	xorwf	??_CantaPartAlta^0,w,c
  6493  001296  0BFE               	andlw	-2
  6494  001298  1859               	xorwf	??_CantaPartAlta^0,w,c
  6495  00129A  6E8C               	movwf	140,c	;volatile
  6496  00129C  0012               	return		;funcret
  6497  00129E                     __end_of_CantaPartAlta:
  6498                           	callstack 0
  6499  00129E                     PL70:
  6500                           	callstack 23
  6501  00129E  4659               	rlncf	??_CantaPartAlta^0,f,c
  6502  0012A0  4659               	rlncf	??_CantaPartAlta^0,f,c
  6503  0012A2  508C               	movf	140,w,c	;volatile
  6504  0012A4  1859               	xorwf	??_CantaPartAlta^0,w,c
  6505  0012A6  0012               	return	
  6506  0012A8                     __end_ofPL70:
  6507                           	callstack 0
  6508                           
  6509 ;; *************** function _KeypadMotor *****************
  6510 ;; Defined at:
  6511 ;;		line 46 in file "keypad.c"
  6512 ;; Parameters:    Size  Location     Type
  6513 ;;		None
  6514 ;; Auto vars:     Size  Location     Type
  6515 ;;		None
  6516 ;; Return value:  Size  Location     Type
  6517 ;;                  1    wreg      void 
  6518 ;; Registers used:
  6519 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6520 ;; Tracked objects:
  6521 ;;		On entry : 0/0
  6522 ;;		On exit  : 0/0
  6523 ;;		Unchanged: 0/0
  6524 ;; Data sizes:     COMRAM   BANK0   BANK1
  6525 ;;      Params:         0       0       0
  6526 ;;      Locals:         0       0       0
  6527 ;;      Temps:          2       0       0
  6528 ;;      Totals:         2       0       0
  6529 ;;Total ram usage:        2 bytes
  6530 ;; Hardware stack levels used: 1
  6531 ;; Hardware stack levels required when called: 3
  6532 ;; This function calls:
  6533 ;;		_TiGetTics
  6534 ;;		_TiResetTics
  6535 ;; This function is called by:
  6536 ;;		_main
  6537 ;; This function uses a non-reentrant model
  6538 ;;
  6539                           
  6540                           	psect	text48
  6541  000C1C                     __ptext48:
  6542                           	callstack 0
  6543  000C1C                     _KeypadMotor:
  6544                           	callstack 27
  6545                           
  6546                           ;keypad.c: 48:     switch (state){
  6547                           
  6548                           ;incstack = 0
  6549  000C1C  D070               	goto	l3511
  6550  000C1E                     l134:
  6551                           
  6552                           ;keypad.c: 51:             if (!!(PORTBbits.RB0 && PORTBbits.RB1 && PORTBbits.RB2)){
  6553  000C1E  B081               	btfsc	129,0,c	;volatile
  6554  000C20  A281               	btfss	129,1,c	;volatile
  6555  000C22  D00A               	goto	l3439
  6556  000C24  A481               	btfss	129,2,c	;volatile
  6557  000C26  D008               	goto	l3439
  6558                           
  6559                           ;keypad.c: 52:                 LATBbits.LATB3=0;
  6560  000C28  968A               	bcf	138,3,c	;volatile
  6561                           
  6562                           ;keypad.c: 53:                 LATBbits.LATB4=1;
  6563  000C2A  888A               	bsf	138,4,c	;volatile
  6564                           
  6565                           ;keypad.c: 54:                 LATBbits.LATB5=1;
  6566  000C2C  8A8A               	bsf	138,5,c	;volatile
  6567                           
  6568                           ;keypad.c: 55:                 LATBbits.LATB6=1;
  6569  000C2E  8C8A               	bsf	138,6,c	;volatile
  6570                           
  6571                           ;keypad.c: 56:                 state=1;
  6572  000C30  0E01               	movlw	1
  6573  000C32  6E4A               	movwf	_state^0,c
  6574                           
  6575                           ;keypad.c: 57:                 row=0;
  6576  000C34  6A52               	clrf	_row^0,c
  6577                           
  6578                           ;keypad.c: 58:             }else{
  6579  000C36  0012               	return	
  6580  000C38                     l3439:
  6581                           
  6582                           ;keypad.c: 59:                 state=4;
  6583  000C38  0E04               	movlw	4
  6584  000C3A  6E4A               	movwf	_state^0,c
  6585  000C3C  0C04               	retlw	4
  6586  000C3E                     l138:
  6587                           
  6588                           ;keypad.c: 63:            if (!!(PORTBbits.RB0 && PORTBbits.RB1 && PORTBbits.RB2)){
  6589  000C3E  B081               	btfsc	129,0,c	;volatile
  6590  000C40  A281               	btfss	129,1,c	;volatile
  6591  000C42  D7FA               	goto	l3439
  6592  000C44  A481               	btfss	129,2,c	;volatile
  6593  000C46  D7F8               	goto	l3439
  6594                           
  6595                           ;keypad.c: 64:                 LATBbits.LATB3=1;
  6596  000C48  868A               	bsf	138,3,c	;volatile
  6597                           
  6598                           ;keypad.c: 65:                 LATBbits.LATB4=0;
  6599  000C4A  988A               	bcf	138,4,c	;volatile
  6600                           
  6601                           ;keypad.c: 66:                 LATBbits.LATB5=1;
  6602  000C4C  8A8A               	bsf	138,5,c	;volatile
  6603                           
  6604                           ;keypad.c: 67:                 LATBbits.LATB6=1;
  6605  000C4E  8C8A               	bsf	138,6,c	;volatile
  6606                           
  6607                           ;keypad.c: 68:                 state=2;
  6608  000C50  0E02               	movlw	2
  6609  000C52  6E4A               	movwf	_state^0,c
  6610                           
  6611                           ;keypad.c: 69:                 row=1;
  6612  000C54  0E01               	movlw	1
  6613  000C56  6E52               	movwf	_row^0,c
  6614                           
  6615                           ;keypad.c: 71:             }else{
  6616  000C58  0C01               	retlw	1
  6617  000C5A                     l141:
  6618                           
  6619                           ;keypad.c: 76:             if (!!(PORTBbits.RB0 && PORTBbits.RB1 && PORTBbits.RB2)){
  6620  000C5A  B081               	btfsc	129,0,c	;volatile
  6621  000C5C  A281               	btfss	129,1,c	;volatile
  6622  000C5E  D7EC               	goto	l3439
  6623  000C60  A481               	btfss	129,2,c	;volatile
  6624  000C62  D7EA               	goto	l3439
  6625                           
  6626                           ;keypad.c: 77:                 LATBbits.LATB3=1;
  6627  000C64  868A               	bsf	138,3,c	;volatile
  6628                           
  6629                           ;keypad.c: 78:                 LATBbits.LATB4=1;
  6630  000C66  888A               	bsf	138,4,c	;volatile
  6631                           
  6632                           ;keypad.c: 79:                 LATBbits.LATB5=0;
  6633  000C68  9A8A               	bcf	138,5,c	;volatile
  6634                           
  6635                           ;keypad.c: 80:                 LATBbits.LATB6=1;
  6636  000C6A  8C8A               	bsf	138,6,c	;volatile
  6637                           
  6638                           ;keypad.c: 81:                 state=3;
  6639  000C6C  0E03               	movlw	3
  6640  000C6E  6E4A               	movwf	_state^0,c
  6641                           
  6642                           ;keypad.c: 82:                 row=2;
  6643  000C70  0E02               	movlw	2
  6644  000C72  6E52               	movwf	_row^0,c
  6645                           
  6646                           ;keypad.c: 83:             }else{
  6647  000C74  0C02               	retlw	2
  6648  000C76                     l144:
  6649                           
  6650                           ;keypad.c: 88:             if (!!(PORTBbits.RB0 && PORTBbits.RB1 && PORTBbits.RB2)){
  6651  000C76  B081               	btfsc	129,0,c	;volatile
  6652  000C78  A281               	btfss	129,1,c	;volatile
  6653  000C7A  D7DE               	goto	l3439
  6654  000C7C  A481               	btfss	129,2,c	;volatile
  6655  000C7E  D7DC               	goto	l3439
  6656                           
  6657                           ;keypad.c: 89:                 LATBbits.LATB3=1;
  6658  000C80  868A               	bsf	138,3,c	;volatile
  6659                           
  6660                           ;keypad.c: 90:                 LATBbits.LATB4=1;
  6661  000C82  888A               	bsf	138,4,c	;volatile
  6662                           
  6663                           ;keypad.c: 91:                 LATBbits.LATB5=1;
  6664  000C84  8A8A               	bsf	138,5,c	;volatile
  6665                           
  6666                           ;keypad.c: 92:                 LATBbits.LATB6=0;
  6667  000C86  9C8A               	bcf	138,6,c	;volatile
  6668                           
  6669                           ;keypad.c: 93:                 row=3;
  6670  000C88  0E03               	movlw	3
  6671  000C8A  6E52               	movwf	_row^0,c
  6672  000C8C                     l3469:
  6673                           
  6674                           ;keypad.c: 94:                 state=0;
  6675  000C8C  6A4A               	clrf	_state^0,c
  6676                           
  6677                           ;keypad.c: 95:             }else{
  6678  000C8E  0012               	return	
  6679  000C90                     l3473:
  6680                           
  6681                           ;keypad.c: 100:             state=5;
  6682  000C90  0E05               	movlw	5
  6683  000C92  6E4A               	movwf	_state^0,c
  6684                           
  6685                           ;keypad.c: 101:             TiResetTics(timerBounces);
  6686  000C94  5051               	movf	_timerBounces^0,w,c
  6687  000C96  EF0A  F00B         	goto	_TiResetTics
  6688  000C9A                     l3477:
  6689                           
  6690                           ;keypad.c: 104:             if (TiGetTics(timerBounces) >= 25){
  6691  000C9A  5051               	movf	_timerBounces^0,w,c
  6692  000C9C  EC85  F00A         	call	_TiGetTics
  6693  000CA0  BE5A               	btfsc	(?_TiGetTics+1)^0,7,c
  6694  000CA2  0012               	return	
  6695  000CA4  505A               	movf	(?_TiGetTics+1)^0,w,c
  6696  000CA6  E104               	bnz	u2820
  6697  000CA8  0E19               	movlw	25
  6698  000CAA  5C59               	subwf	?_TiGetTics^0,w,c
  6699  000CAC  A0D8               	btfss	status,0,c
  6700  000CAE  0012               	return	
  6701  000CB0                     u2820:
  6702                           
  6703                           ;keypad.c: 105:                 if (!!(PORTBbits.RB0 && PORTBbits.RB1 && PORTBbits.RB2))
      +                          {
  6704  000CB0  B081               	btfsc	129,0,c	;volatile
  6705  000CB2  A281               	btfss	129,1,c	;volatile
  6706  000CB4  D002               	goto	l3487
  6707  000CB6  B481               	btfsc	129,2,c	;volatile
  6708  000CB8  D7E9               	goto	l3469
  6709  000CBA                     l3487:
  6710                           
  6711                           ;keypad.c: 108:                     pressed = 1;
  6712  000CBA  0E01               	movlw	1
  6713  000CBC  6E4D               	movwf	_pressed^0,c
  6714                           
  6715                           ;keypad.c: 109:                     state = 6;
  6716  000CBE  D036               	goto	PL74	;call to abstracted procedure
  6717  000CC0                     l152:
  6718                           
  6719                           ;keypad.c: 114:             if (!!(PORTBbits.RB0 && PORTBbits.RB1 && PORTBbits.RB2)){
  6720  000CC0  B081               	btfsc	129,0,c	;volatile
  6721  000CC2  A281               	btfss	129,1,c	;volatile
  6722  000CC4  0012               	return	
  6723  000CC6  A481               	btfss	129,2,c	;volatile
  6724  000CC8  0012               	return	
  6725                           
  6726                           ;keypad.c: 115:                 TiResetTics(timerBounces);
  6727  000CCA  5051               	movf	_timerBounces^0,w,c
  6728  000CCC  EC0A  F00B         	call	_TiResetTics
  6729                           
  6730                           ;keypad.c: 116:                 state = 7;
  6731  000CD0  0E07               	movlw	7
  6732  000CD2  6E4A               	movwf	_state^0,c
  6733  000CD4  0C07               	retlw	7
  6734  000CD6                     l3497:
  6735                           
  6736                           ;keypad.c: 120:             if (TiGetTics(timerBounces) >= 25){
  6737  000CD6  5051               	movf	_timerBounces^0,w,c
  6738  000CD8  EC85  F00A         	call	_TiGetTics
  6739  000CDC  BE5A               	btfsc	(?_TiGetTics+1)^0,7,c
  6740  000CDE  0012               	return	
  6741  000CE0  505A               	movf	(?_TiGetTics+1)^0,w,c
  6742  000CE2  E104               	bnz	u2890
  6743  000CE4  0E19               	movlw	25
  6744  000CE6  5C59               	subwf	?_TiGetTics^0,w,c
  6745  000CE8  A0D8               	btfss	status,0,c
  6746  000CEA  0012               	return	
  6747  000CEC                     u2890:
  6748                           
  6749                           ;keypad.c: 121:                 if (!!(PORTBbits.RB0 && PORTBbits.RB1 && PORTBbits.RB2))
      +                          {
  6750  000CEC  B081               	btfsc	129,0,c	;volatile
  6751  000CEE  A281               	btfss	129,1,c	;volatile
  6752  000CF0  D01D               	goto	PL74
  6753  000CF2  A481               	btfss	129,2,c	;volatile
  6754  000CF4  D01B               	goto	PL74
  6755                           
  6756                           ;keypad.c: 122:                     pressed = 0;
  6757  000CF6  6A4D               	clrf	_pressed^0,c
  6758                           
  6759                           ;keypad.c: 123:                     state = 0;
  6760  000CF8  6A4A               	clrf	_state^0,c
  6761                           
  6762                           ;keypad.c: 124:                 } else {
  6763  000CFA  0012               	return	
  6764  000CFC                     l3507:
  6765                           
  6766                           ;keypad.c: 125:                     state = 6;
  6767  000CFC  D017               	goto	PL74	;call to abstracted procedure
  6768  000CFE                     l3511:
  6769  000CFE  504A               	movf	_state^0,w,c
  6770  000D00  6E60               	movwf	??_KeypadMotor^0,c
  6771  000D02  6A61               	clrf	(??_KeypadMotor+1)^0,c
  6772                           
  6773                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  6774                           ; Switch size 1, requested type "space"
  6775                           ; Number of cases is 1, Range of values is 0 to 0
  6776                           ; switch strategies available:
  6777                           ; Name         Instructions Cycles
  6778                           ; simple_byte            4     3 (average)
  6779                           ;	Chosen strategy is simple_byte
  6780  000D04  5061               	movf	(??_KeypadMotor+1)^0,w,c
  6781  000D06  A4D8               	btfss	status,2,c
  6782  000D08  0012               	return	
  6783                           
  6784                           ; Switch size 1, requested type "space"
  6785                           ; Number of cases is 8, Range of values is 0 to 7
  6786                           ; switch strategies available:
  6787                           ; Name         Instructions Cycles
  6788                           ; simple_byte           25    13 (average)
  6789                           ;	Chosen strategy is simple_byte
  6790  000D0A  5060               	movf	??_KeypadMotor^0,w,c
  6791  000D0C  E088               	bz	l134
  6792  000D0E  0A01               	xorlw	1	; case 1
  6793  000D10  E096               	bz	l138
  6794  000D12  0A03               	xorlw	3	; case 2
  6795  000D14  E0A2               	bz	l141
  6796  000D16  0A01               	xorlw	1	; case 3
  6797  000D18  E0AE               	bz	l144
  6798  000D1A  0A07               	xorlw	7	; case 4
  6799  000D1C  E0B9               	bz	l3473
  6800  000D1E  0A01               	xorlw	1	; case 5
  6801  000D20  E0BC               	bz	l3477
  6802  000D22  0A03               	xorlw	3	; case 6
  6803  000D24  E0CD               	bz	l152
  6804  000D26  0A01               	xorlw	1	; case 7
  6805  000D28  E0D6               	bz	l3497
  6806  000D2A  0012               	return		;funcret
  6807  000D2C                     __end_of_KeypadMotor:
  6808                           	callstack 0
  6809  000D2C                     PL74:
  6810                           	callstack 27
  6811  000D2C  0E06               	movlw	6
  6812  000D2E  6E4A               	movwf	_state^0,c
  6813  000D30  0C06               	retlw	6
  6814  000D32                     __end_ofPL74:
  6815                           	callstack 0
  6816                           
  6817 ;; *************** function _TiResetTics *****************
  6818 ;; Defined at:
  6819 ;;		line 59 in file "TTimer.c"
  6820 ;; Parameters:    Size  Location     Type
  6821 ;;  Handle          1    wreg     unsigned char 
  6822 ;; Auto vars:     Size  Location     Type
  6823 ;;  Handle          1    5[COMRAM] unsigned char 
  6824 ;; Return value:  Size  Location     Type
  6825 ;;                  1    wreg      void 
  6826 ;; Registers used:
  6827 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  6828 ;; Tracked objects:
  6829 ;;		On entry : 0/0
  6830 ;;		On exit  : 0/0
  6831 ;;		Unchanged: 0/0
  6832 ;; Data sizes:     COMRAM   BANK0   BANK1
  6833 ;;      Params:         0       0       0
  6834 ;;      Locals:         1       0       0
  6835 ;;      Temps:          0       0       0
  6836 ;;      Totals:         1       0       0
  6837 ;;Total ram usage:        1 bytes
  6838 ;; Hardware stack levels used: 1
  6839 ;; Hardware stack levels required when called: 2
  6840 ;; This function calls:
  6841 ;;		Nothing
  6842 ;; This function is called by:
  6843 ;;		_KeypadMotor
  6844 ;;		_SMSMotor
  6845 ;;		_KeSetMode
  6846 ;;		_Espera
  6847 ;;		_WaitForBusy
  6848 ;;		_menuMotor
  6849 ;; This function uses a non-reentrant model
  6850 ;;
  6851                           
  6852                           	psect	text49
  6853  001614                     __ptext49:
  6854                           	callstack 0
  6855  001614                     _TiResetTics:
  6856                           	callstack 24
  6857                           
  6858                           ;incstack = 0
  6859                           ;TiResetTics@Handle stored from wreg
  6860  001614  6E59               	movwf	TiResetTics@Handle^0,c
  6861                           
  6862                           ;TTimer.c: 63:     s_Timers[Handle].h_initialTics=h_Tics;
  6863  001616  5059               	movf	TiResetTics@Handle^0,w,c
  6864  001618  D805               	call	PL36	;call to abstracted procedure
  6865  00161A  C031  FFDE         	movff	_h_Tics,postinc2
  6866  00161E  C032  FFDD         	movff	_h_Tics+1,postdec2
  6867  001622  0012               	return		;funcret
  6868  001624                     __end_of_TiResetTics:
  6869                           	callstack 0
  6870  001624                     PL36:
  6871                           	callstack 23
  6872  001624  0D03               	mullw	3
  6873  001626  50F3               	movf	243,w,c
  6874  001628  0F80               	addlw	low _s_Timers
  6875  00162A  6ED9               	movwf	fsr2l,c
  6876  00162C  6ADA               	clrf	fsr2h,c
  6877  00162E  0012               	return	
  6878  001630                     __end_ofPL36:
  6879                           	callstack 0
  6880                           
  6881 ;; *************** function _TiGetTics *****************
  6882 ;; Defined at:
  6883 ;;		line 65 in file "TTimer.c"
  6884 ;; Parameters:    Size  Location     Type
  6885 ;;  Handle          1    wreg     unsigned char 
  6886 ;; Auto vars:     Size  Location     Type
  6887 ;;  Handle          1    9[COMRAM] unsigned char 
  6888 ;;  actual          2   10[COMRAM] volatile unsigned int 
  6889 ;; Return value:  Size  Location     Type
  6890 ;;                  2    5[COMRAM] int 
  6891 ;; Registers used:
  6892 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  6893 ;; Tracked objects:
  6894 ;;		On entry : 0/0
  6895 ;;		On exit  : 0/0
  6896 ;;		Unchanged: 0/0
  6897 ;; Data sizes:     COMRAM   BANK0   BANK1
  6898 ;;      Params:         2       0       0
  6899 ;;      Locals:         3       0       0
  6900 ;;      Temps:          2       0       0
  6901 ;;      Totals:         7       0       0
  6902 ;;Total ram usage:        7 bytes
  6903 ;; Hardware stack levels used: 1
  6904 ;; Hardware stack levels required when called: 2
  6905 ;; This function calls:
  6906 ;;		Nothing
  6907 ;; This function is called by:
  6908 ;;		_KeypadMotor
  6909 ;;		_SMSMotor
  6910 ;;		_Espera
  6911 ;;		_WaitForBusy
  6912 ;;		_menuMotor
  6913 ;; This function uses a non-reentrant model
  6914 ;;
  6915                           
  6916                           	psect	text50
  6917  00150A                     __ptext50:
  6918                           	callstack 0
  6919  00150A                     _TiGetTics:
  6920                           	callstack 24
  6921                           
  6922                           ;incstack = 0
  6923                           ;TiGetTics@Handle stored from wreg
  6924  00150A  6E5D               	movwf	TiGetTics@Handle^0,c
  6925                           
  6926                           ;TTimer.c: 69:     volatile unsigned int actual;;TTimer.c: 70:     actual=h_Tics;
  6927  00150C  C031  F05E         	movff	_h_Tics,TiGetTics@actual	;volatile
  6928  001510  C032  F05F         	movff	_h_Tics+1,TiGetTics@actual+1	;volatile
  6929                           
  6930                           ;TTimer.c: 71:     return (actual-(s_Timers[Handle].h_initialTics));
  6931  001514  505D               	movf	TiGetTics@Handle^0,w,c
  6932  001516  EC12  F00B         	call	PL36	;call to abstracted procedure
  6933  00151A  CFDE F05B          	movff	postinc2,??_TiGetTics
  6934  00151E  CFDD F05C          	movff	postdec2,??_TiGetTics+1
  6935  001522  505B               	movf	??_TiGetTics^0,w,c
  6936  001524  5C5E               	subwf	TiGetTics@actual^0,w,c	;volatile
  6937  001526  6E59               	movwf	?_TiGetTics^0,c
  6938  001528  505C               	movf	(??_TiGetTics+1)^0,w,c
  6939  00152A  585F               	subwfb	(TiGetTics@actual+1)^0,w,c	;volatile
  6940  00152C  6E5A               	movwf	(?_TiGetTics+1)^0,c
  6941  00152E  0012               	return		;funcret
  6942  001530                     __end_of_TiGetTics:
  6943                           	callstack 0
  6944                           
  6945 ;; *************** function _RSI_High *****************
  6946 ;; Defined at:
  6947 ;;		line 31 in file "main.c"
  6948 ;; Parameters:    Size  Location     Type
  6949 ;;		None
  6950 ;; Auto vars:     Size  Location     Type
  6951 ;;		None
  6952 ;; Return value:  Size  Location     Type
  6953 ;;                  1    wreg      void 
  6954 ;; Registers used:
  6955 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6956 ;; Tracked objects:
  6957 ;;		On entry : 0/0
  6958 ;;		On exit  : 0/0
  6959 ;;		Unchanged: 0/0
  6960 ;; Data sizes:     COMRAM   BANK0   BANK1
  6961 ;;      Params:         0       0       0
  6962 ;;      Locals:         0       0       0
  6963 ;;      Temps:          4       0       0
  6964 ;;      Totals:         4       0       0
  6965 ;;Total ram usage:        4 bytes
  6966 ;; Hardware stack levels used: 1
  6967 ;; Hardware stack levels required when called: 1
  6968 ;; This function calls:
  6969 ;;		__TiRSITimer
  6970 ;; This function is called by:
  6971 ;;		Interrupt level 2
  6972 ;; This function uses a non-reentrant model
  6973 ;;
  6974                           
  6975                           	psect	intcode
  6976  000008                     __pintcode:
  6977                           	callstack 0
  6978  000008                     _RSI_High:
  6979                           	callstack 23
  6980                           
  6981                           ;incstack = 0
  6982  000008  8272               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  6983  00000A  CFD9 F055          	movff	fsr2l,??_RSI_High
  6984  00000E  CFDA F056          	movff	fsr2h,??_RSI_High+1
  6985  000012  CFF3 F057          	movff	prodl,??_RSI_High+2
  6986  000016  CFF4 F058          	movff	prodh,??_RSI_High+3
  6987  00001A  ECCD  F009         	call	__TiRSITimer	;wreg free
  6988  00001E  C058  FFF4         	movff	??_RSI_High+3,prodh
  6989  000022  C057  FFF3         	movff	??_RSI_High+2,prodl
  6990  000026  C056  FFDA         	movff	??_RSI_High+1,fsr2h
  6991  00002A  C055  FFD9         	movff	??_RSI_High,fsr2l
  6992  00002E  9272               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  6993  000030  0011               	retfie		f
  6994  000032                     __end_of_RSI_High:
  6995                           	callstack 0
  6996                           
  6997 ;; *************** function __TiRSITimer *****************
  6998 ;; Defined at:
  6999 ;;		line 37 in file "TTimer.c"
  7000 ;; Parameters:    Size  Location     Type
  7001 ;;		None
  7002 ;; Auto vars:     Size  Location     Type
  7003 ;;		None
  7004 ;; Return value:  Size  Location     Type
  7005 ;;                  1    wreg      void 
  7006 ;; Registers used:
  7007 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  7008 ;; Tracked objects:
  7009 ;;		On entry : 0/0
  7010 ;;		On exit  : 0/0
  7011 ;;		Unchanged: 0/0
  7012 ;; Data sizes:     COMRAM   BANK0   BANK1
  7013 ;;      Params:         0       0       0
  7014 ;;      Locals:         0       0       0
  7015 ;;      Temps:          1       0       0
  7016 ;;      Totals:         1       0       0
  7017 ;;Total ram usage:        1 bytes
  7018 ;; Hardware stack levels used: 1
  7019 ;; This function calls:
  7020 ;;		Nothing
  7021 ;; This function is called by:
  7022 ;;		_RSI_High
  7023 ;; This function uses a non-reentrant model
  7024 ;;
  7025                           
  7026                           	psect	text52
  7027  00139A                     __ptext52:
  7028                           	callstack 0
  7029  00139A                     __TiRSITimer:
  7030                           	callstack 23
  7031                           
  7032                           ;TTimer.c: 43:     TMR0H = 0x20;
  7033                           
  7034                           ;incstack = 0
  7035  00139A  0E20               	movlw	32
  7036  00139C  6ED7               	movwf	215,c	;volatile
  7037                           
  7038                           ;TTimer.c: 44:     TMR0L = 0x8A;
  7039  00139E  0E8A               	movlw	138
  7040  0013A0  6ED6               	movwf	214,c	;volatile
  7041                           
  7042                           ;TTimer.c: 45:     INTCONbits.TMR0IF = 0;
  7043  0013A2  94F2               	bcf	242,2,c	;volatile
  7044                           
  7045                           ;TTimer.c: 46:     h_Tics++;
  7046  0013A4  4A31               	infsnz	_h_Tics^0,f,c
  7047  0013A6  2A32               	incf	(_h_Tics+1)^0,f,c
  7048                           
  7049                           ;TTimer.c: 48:     if (h_Tics>=30000) {
  7050  0013A8  0E30               	movlw	48
  7051  0013AA  5C31               	subwf	_h_Tics^0,w,c
  7052  0013AC  0E75               	movlw	117
  7053  0013AE  5832               	subwfb	(_h_Tics+1)^0,w,c
  7054  0013B0  A0D8               	btfss	status,0,c
  7055  0013B2  0012               	return	
  7056                           
  7057                           ;TTimer.c: 50:         for (counter=0;counter<25;counter++){
  7058  0013B4  6A53               	clrf	_counter^0,c
  7059  0013B6                     i2l3283:
  7060  0013B6  0E18               	movlw	24
  7061  0013B8  6453               	cpfsgt	_counter^0,c
  7062  0013BA  D001               	goto	i2l3287
  7063  0013BC  D00D               	goto	i2l67
  7064  0013BE                     i2l3287:
  7065                           
  7066                           ;TTimer.c: 51:             if (s_Timers[counter].b_busy==1){
  7067  0013BE  EC6B  F00A         	call	PL18	;call to abstracted procedure
  7068  0013C2  04DE               	decf	postinc2,w,c
  7069  0013C4  E107               	bnz	i2l3291
  7070                           
  7071                           ;TTimer.c: 52:                 s_Timers[counter].h_initialTics -= h_Tics;
  7072  0013C6  5053               	movf	_counter^0,w,c
  7073  0013C8  EC12  F00B         	call	PL36	;call to abstracted procedure
  7074  0013CC  5031               	movf	_h_Tics^0,w,c
  7075  0013CE  5EDE               	subwf	postinc2,f,c
  7076  0013D0  5032               	movf	(_h_Tics+1)^0,w,c
  7077  0013D2  5ADD               	subwfb	postdec2,f,c
  7078  0013D4                     i2l3291:
  7079                           
  7080                           ;TTimer.c: 54:         }
  7081  0013D4  2A53               	incf	_counter^0,f,c
  7082  0013D6  D7EF               	goto	i2l3283
  7083  0013D8                     i2l67:
  7084                           
  7085                           ;TTimer.c: 55:         h_Tics=0;
  7086  0013D8  6A31               	clrf	_h_Tics^0,c
  7087  0013DA  6A32               	clrf	(_h_Tics+1)^0,c
  7088  0013DC  0012               	return		;funcret
  7089  0013DE                     __end_of__TiRSITimer:
  7090                           	callstack 0
  7091                           
  7092                           	psect	rparam
  7093  0000                     
  7094                           	psect	temp
  7095  000072                     btemp:
  7096                           	callstack 0
  7097  000072                     	ds	1
  7098  0000                     int$flags	set	btemp
  7099  0000                     wtemp8	set	btemp+1
  7100  0000                     ttemp5	set	btemp+1
  7101  0000                     ttemp6	set	btemp+4
  7102  0000                     ttemp7	set	btemp+8
  7103                           
  7104                           	psect	idloc
  7105                           
  7106                           ;Config register IDLOC0 @ 0x200000
  7107                           ;	unspecified, using default values
  7108  200000                     	org	2097152
  7109  200000  FF                 	db	255
  7110                           
  7111                           ;Config register IDLOC1 @ 0x200001
  7112                           ;	unspecified, using default values
  7113  200001                     	org	2097153
  7114  200001  FF                 	db	255
  7115                           
  7116                           ;Config register IDLOC2 @ 0x200002
  7117                           ;	unspecified, using default values
  7118  200002                     	org	2097154
  7119  200002  FF                 	db	255
  7120                           
  7121                           ;Config register IDLOC3 @ 0x200003
  7122                           ;	unspecified, using default values
  7123  200003                     	org	2097155
  7124  200003  FF                 	db	255
  7125                           
  7126                           ;Config register IDLOC4 @ 0x200004
  7127                           ;	unspecified, using default values
  7128  200004                     	org	2097156
  7129  200004  FF                 	db	255
  7130                           
  7131                           ;Config register IDLOC5 @ 0x200005
  7132                           ;	unspecified, using default values
  7133  200005                     	org	2097157
  7134  200005  FF                 	db	255
  7135                           
  7136                           ;Config register IDLOC6 @ 0x200006
  7137                           ;	unspecified, using default values
  7138  200006                     	org	2097158
  7139  200006  FF                 	db	255
  7140                           
  7141                           ;Config register IDLOC7 @ 0x200007
  7142                           ;	unspecified, using default values
  7143  200007                     	org	2097159
  7144  200007  FF                 	db	255
  7145                           
  7146                           	psect	config
  7147                           
  7148                           ; Padding undefined space
  7149  300000                     	org	3145728
  7150  300000  FF                 	db	255
  7151                           
  7152                           ;Config register CONFIG1H @ 0x300001
  7153                           ;	Oscillator
  7154                           ;	OSC = HSPLL, HS oscillator, PLL enabled (Clock Frequency = 4 x FOSC1)
  7155                           ;	Fail-Safe Clock Monitor Enable bit
  7156                           ;	FCMEN = 0x0, unprogrammed default
  7157                           ;	Internal/External Oscillator Switchover bit
  7158                           ;	IESO = 0x0, unprogrammed default
  7159  300001                     	org	3145729
  7160  300001  06                 	db	6
  7161                           
  7162                           ;Config register CONFIG2L @ 0x300002
  7163                           ;	Power-up Timer Enable bit
  7164                           ;	PWRT = OFF, PWRT disabled
  7165                           ;	Brown-out Reset Enable bits
  7166                           ;	BOR = OFF, Brown-out Reset disabled in hardware and software
  7167                           ;	Brown-out Reset Voltage bits
  7168                           ;	BORV = 0x3, unprogrammed default
  7169  300002                     	org	3145730
  7170  300002  19                 	db	25
  7171                           
  7172                           ;Config register CONFIG2H @ 0x300003
  7173                           ;	Watchdog Timer Enable bit
  7174                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
  7175                           ;	Watchdog Timer Postscale Select bits
  7176                           ;	WDTPS = 0xF, unprogrammed default
  7177  300003                     	org	3145731
  7178  300003  1E                 	db	30
  7179                           
  7180                           ; Padding undefined space
  7181  300004                     	org	3145732
  7182  300004  FF                 	db	255
  7183                           
  7184                           ;Config register CONFIG3H @ 0x300005
  7185                           ;	CCP2 MUX bit
  7186                           ;	CCP2MX = 0x1, unprogrammed default
  7187                           ;	PORTB A/D Enable bit
  7188                           ;	PBADEN = DIG, PORTB<4:0> pins are configured as digital I/O on Reset
  7189                           ;	Low-Power Timer1 Oscillator Enable bit
  7190                           ;	LPT1OSC = 0x0, unprogrammed default
  7191                           ;	MCLR Pin Enable bit
  7192                           ;	MCLRE = OFF, RE3 input pin enabled; MCLR disabled
  7193  300005                     	org	3145733
  7194  300005  01                 	db	1
  7195                           
  7196                           ;Config register CONFIG4L @ 0x300006
  7197                           ;	Stack Full/Underflow Reset Enable bit
  7198                           ;	STVREN = 0x1, unprogrammed default
  7199                           ;	Single-Supply ICSP Enable bit
  7200                           ;	LVP = OFF, Single-Supply ICSP disabled
  7201                           ;	Boot Block Size Select bits
  7202                           ;	BBSIZ = 0x0, unprogrammed default
  7203                           ;	Extended Instruction Set Enable bit
  7204                           ;	XINST = 0x0, unprogrammed default
  7205                           ;	Background Debugger Enable bit
  7206                           ;	DEBUG = OFF, Background debugger disabled, RB6 and RB7 configured as general purpose I
      +                          /O pins
  7207  300006                     	org	3145734
  7208  300006  81                 	db	129
  7209                           
  7210                           ; Padding undefined space
  7211  300007                     	org	3145735
  7212  300007  FF                 	db	255
  7213                           
  7214                           ;Config register CONFIG5L @ 0x300008
  7215                           ;	unspecified, using default values
  7216                           ;	Code Protection bit
  7217                           ;	CP0 = 0x1, unprogrammed default
  7218                           ;	Code Protection bit
  7219                           ;	CP1 = 0x1, unprogrammed default
  7220  300008                     	org	3145736
  7221  300008  03                 	db	3
  7222                           
  7223                           ;Config register CONFIG5H @ 0x300009
  7224                           ;	unspecified, using default values
  7225                           ;	Boot Block Code Protection bitProtect Boot
  7226                           ;	CPB = 0x1, unprogrammed default
  7227                           ;	Data EEPROM Code Protection bit
  7228                           ;	CPD = 0x1, unprogrammed default
  7229  300009                     	org	3145737
  7230  300009  C0                 	db	192
  7231                           
  7232                           ;Config register CONFIG6L @ 0x30000A
  7233                           ;	unspecified, using default values
  7234                           ;	Write Protection bit
  7235                           ;	WRT0 = 0x1, unprogrammed default
  7236                           ;	Write Protection bit
  7237                           ;	WRT1 = 0x1, unprogrammed default
  7238  30000A                     	org	3145738
  7239  30000A  03                 	db	3
  7240                           
  7241                           ;Config register CONFIG6H @ 0x30000B
  7242                           ;	unspecified, using default values
  7243                           ;	Configuration Register Write Protection bit
  7244                           ;	WRTC = 0x1, unprogrammed default
  7245                           ;	Boot Block Write Protection bit
  7246                           ;	WRTB = 0x1, unprogrammed default
  7247                           ;	Data EEPROM Write Protection bit
  7248                           ;	WRTD = 0x1, unprogrammed default
  7249  30000B                     	org	3145739
  7250  30000B  E0                 	db	224
  7251                           
  7252                           ;Config register CONFIG7L @ 0x30000C
  7253                           ;	unspecified, using default values
  7254                           ;	Table Read Protection bit
  7255                           ;	EBTR0 = 0x1, unprogrammed default
  7256                           ;	Table Read Protection bit
  7257                           ;	EBTR1 = 0x1, unprogrammed default
  7258  30000C                     	org	3145740
  7259  30000C  03                 	db	3
  7260                           
  7261                           ;Config register CONFIG7H @ 0x30000D
  7262                           ;	unspecified, using default values
  7263                           ;	Boot Block Table Read Protection bit
  7264                           ;	EBTRB = 0x1, unprogrammed default
  7265  30000D                     	org	3145741
  7266  30000D  40                 	db	64
  7267                           tosu	equ	0xFFF
  7268                           tosh	equ	0xFFE
  7269                           tosl	equ	0xFFD
  7270                           stkptr	equ	0xFFC
  7271                           pclatu	equ	0xFFB
  7272                           pclath	equ	0xFFA
  7273                           pcl	equ	0xFF9
  7274                           tblptru	equ	0xFF8
  7275                           tblptrh	equ	0xFF7
  7276                           tblptrl	equ	0xFF6
  7277                           tablat	equ	0xFF5
  7278                           prodh	equ	0xFF4
  7279                           prodl	equ	0xFF3
  7280                           indf0	equ	0xFEF
  7281                           postinc0	equ	0xFEE
  7282                           postdec0	equ	0xFED
  7283                           preinc0	equ	0xFEC
  7284                           plusw0	equ	0xFEB
  7285                           fsr0h	equ	0xFEA
  7286                           fsr0l	equ	0xFE9
  7287                           wreg	equ	0xFE8
  7288                           indf1	equ	0xFE7
  7289                           postinc1	equ	0xFE6
  7290                           postdec1	equ	0xFE5
  7291                           preinc1	equ	0xFE4
  7292                           plusw1	equ	0xFE3
  7293                           fsr1h	equ	0xFE2
  7294                           fsr1l	equ	0xFE1
  7295                           bsr	equ	0xFE0
  7296                           indf2	equ	0xFDF
  7297                           postinc2	equ	0xFDE
  7298                           postdec2	equ	0xFDD
  7299                           preinc2	equ	0xFDC
  7300                           plusw2	equ	0xFDB
  7301                           fsr2h	equ	0xFDA
  7302                           fsr2l	equ	0xFD9
  7303                           status	equ	0xFD8

Data Sizes:
    Strings     0
    Constant    216
    Data        1
    BSS         302
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     29     113
    BANK0           128     18      93
    BANK1           256      0     144

Pointer List with Targets:

    None.

Critical Paths under _main in COMRAM

    _main->_menuMotor
    _menuMotor->_displayMenu
    _displayMenu->_LcPutChar
    _LcPutChar->_LcGotoXY
    _CantaData->_CantaPartAlta
    _CantaData->_CantaPartBaixa
    _LcCursorOn->_WaitForBusy
    _LcCursorOff->_WaitForBusy
    _LcClear->_Espera
    _KeSetMode->_TiResetTics
    _KeGetCharValue->_getFullValue
    _DaFindUser->_LcGotoXY
    _joystickMotor->_SiSendChar
    _initMenu->_TiGetTimer
    _initKeypad->_TiGetTimer
    _initData->_readUserData
    _dataMotor->_LcGotoXY
    _LcGotoXY->_WaitForBusy
    _SMSMotor->_TiGetTics
    _LcInit->_Espera
    _WaitForBusy->_TiGetTics
    _Espera->_TiGetTics
    _CantaIR->_CantaPartAlta
    _CantaIR->_CantaPartBaixa
    _KeypadMotor->_TiGetTics

Critical Paths under _RSI_High in COMRAM

    _RSI_High->__TiRSITimer

Critical Paths under _main in BANK0

    _menuMotor->_DaFindUser

Critical Paths under _RSI_High in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _RSI_High in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   18200
                        _KeypadMotor
                             _LcInit
                           _SMSMotor
                        _TiInitTimer
                          _dataMotor
                           _initData
                       _initJoystick
                         _initKeypad
                           _initMenu
                            _initSIO
                      _joystickMotor
                          _menuMotor
 ---------------------------------------------------------------------------------
 (1) _menuMotor                                            2     2      0   14390
                                             27 COMRAM     2     2      0
                         _DaFindUser
                          _DaGetIdle
                        _DaGetStatus
                        _DaSaveScore
                         _DaSaveUser
                        _JoDirection
                            _JoMoved
                          _JoSetMode
                     _KeGetCharValue
                  _KeGetGenericValue
                          _KeSetMode
                            _LcClear
                        _LcCursorOff
                         _LcCursorOn
                           _LcGotoXY
                          _LcPutChar
                      _SiIsAvailable
                         _SiReadByte
                     _SiRecievedByte
                         _SiSendChar
                          _TiGetTics
                        _TiResetTics
                            ___lbmod
                        _displayMenu
                         _getPresses
                          _isPressed
 ---------------------------------------------------------------------------------
 (2) _isPressed                                            1     1      0      24
                                              5 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _getPresses                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _displayMenu                                          5     4      1    5416
                                             22 COMRAM     5     4      1
                           _LcGotoXY
                          _LcPutChar
                            ___awmod
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              6     2      4     574
                                              5 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) _LcPutChar                                            1     1      0    2260
                                             21 COMRAM     1     1      0
                          _CantaData
                           _LcGotoXY
                        _WaitForBusy
 ---------------------------------------------------------------------------------
 (4) _CantaData                                            1     1      0     220
                                              7 COMRAM     1     1      0
                      _CantaPartAlta
                     _CantaPartBaixa
 ---------------------------------------------------------------------------------
 (2) ___lbmod                                              4     3      1     235
                                              5 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 (2) _SiRecievedByte                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _SiReadByte                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _LcCursorOn                                           0     0      0     310
                            _CantaIR
                        _WaitForBusy
 ---------------------------------------------------------------------------------
 (2) _LcCursorOff                                          0     0      0     310
                            _CantaIR
                        _WaitForBusy
 ---------------------------------------------------------------------------------
 (2) _LcClear                                              0     0      0    1507
                            _CantaIR
                             _Espera
                        _WaitForBusy
 ---------------------------------------------------------------------------------
 (2) _KeSetMode                                            1     1      0      66
                                              6 COMRAM     1     1      0
                        _TiResetTics
 ---------------------------------------------------------------------------------
 (2) _KeGetCharValue                                       0     0      0      75
                  _KeGetGenericValue
                       _getFullValue
 ---------------------------------------------------------------------------------
 (3) _getFullValue                                         5     5      0      75
                                              5 COMRAM     5     5      0
 ---------------------------------------------------------------------------------
 (2) _JoSetMode                                            1     1      0      15
                                              5 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _JoMoved                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _JoDirection                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _DaSaveUser                                          18     0     18      98
                                              5 COMRAM    18     0     18
 ---------------------------------------------------------------------------------
 (2) _DaSaveScore                                          1     1      0      15
                                              5 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _DaGetStatus                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _DaGetIdle                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _DaFindUser                                          18     0     18    2049
                                              0 BANK0     18     0     18
                           _LcGotoXY
 ---------------------------------------------------------------------------------
 (1) _joystickMotor                                        2     2      0      15
                                              6 COMRAM     2     2      0
                      _SiIsAvailable
                         _SiSendChar
 ---------------------------------------------------------------------------------
 (2) _SiSendChar                                           1     1      0      15
                                              5 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _SiIsAvailable                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initSIO                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initMenu                                             0     0      0       0
                         _TiGetTimer
 ---------------------------------------------------------------------------------
 (1) _initKeypad                                           0     0      0       0
                         _TiGetTimer
 ---------------------------------------------------------------------------------
 (1) _initJoystick                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initData                                             0     0      0       0
                       _readUserData
 ---------------------------------------------------------------------------------
 (2) _readUserData                                         2     2      0       0
                                              5 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _dataMotor                                            4     4      0    1928
                                             21 COMRAM     4     4      0
                           _LcGotoXY
 ---------------------------------------------------------------------------------
 (4) _LcGotoXY                                             8     7      1    1928
                                             13 COMRAM     8     7      1
                            _CantaIR
                        _WaitForBusy
 ---------------------------------------------------------------------------------
 (1) _TiInitTimer                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SMSMotor                                             2     2      0      67
                                             12 COMRAM     2     2      0
                  _KeGetGenericValue
                          _TiGetTics
                        _TiResetTics
 ---------------------------------------------------------------------------------
 (2) _KeGetGenericValue                                    2     2      0       0
                                              5 COMRAM     2     2      0
                          _getColumn
 ---------------------------------------------------------------------------------
 (3) _getColumn                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _LcInit                                               4     3      1    1733
                                             17 COMRAM     4     3      1
                            _CantaIR
                 _EscriuPrimeraOrdre
                             _Espera
                         _TiGetTimer
                        _WaitForBusy
 ---------------------------------------------------------------------------------
 (4) _WaitForBusy                                          1     1      0      90
                                             12 COMRAM     1     1      0
                          _TiGetTics
                        _TiResetTics
 ---------------------------------------------------------------------------------
 (2) _TiGetTimer                                           1     1      0       0
                                              5 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _Espera                                               5     1      4    1197
                                             12 COMRAM     5     1      4
                          _TiGetTics
                        _TiResetTics
 ---------------------------------------------------------------------------------
 (2) _EscriuPrimeraOrdre                                   2     2      0      60
                                              5 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (5) _CantaIR                                              1     1      0     220
                                              7 COMRAM     1     1      0
                      _CantaPartAlta
                     _CantaPartBaixa
 ---------------------------------------------------------------------------------
 (6) _CantaPartBaixa                                       2     2      0      88
                                              5 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (6) _CantaPartAlta                                        2     2      0      88
                                              5 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _KeypadMotor                                          2     2      0      67
                                             12 COMRAM     2     2      0
                          _TiGetTics
                        _TiResetTics
 ---------------------------------------------------------------------------------
 (5) _TiResetTics                                          1     1      0      22
                                              5 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (5) _TiGetTics                                            7     5      2      45
                                              5 COMRAM     7     5      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _RSI_High                                             4     4      0       0
                                              1 COMRAM     4     4      0
                        __TiRSITimer
 ---------------------------------------------------------------------------------
 (8) __TiRSITimer                                          1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _KeypadMotor
     _TiGetTics
     _TiResetTics
   _LcInit
     _CantaIR
       _CantaPartAlta
       _CantaPartBaixa
     _EscriuPrimeraOrdre
     _Espera
       _TiGetTics
       _TiResetTics
     _TiGetTimer
     _WaitForBusy
       _TiGetTics
       _TiResetTics
   _SMSMotor
     _KeGetGenericValue
       _getColumn
     _TiGetTics
     _TiResetTics
   _TiInitTimer
   _dataMotor
     _LcGotoXY
       _CantaIR
       _WaitForBusy
   _initData
     _readUserData
   _initJoystick
   _initKeypad
     _TiGetTimer
   _initMenu
     _TiGetTimer
   _initSIO
   _joystickMotor
     _SiIsAvailable
     _SiSendChar
   _menuMotor
     _DaFindUser
       _LcGotoXY
     _DaGetIdle
     _DaGetStatus
     _DaSaveScore
     _DaSaveUser
     _JoDirection
     _JoMoved
     _JoSetMode
     _KeGetCharValue
       _KeGetGenericValue
       _getFullValue
     _KeGetGenericValue
     _KeSetMode
       _TiResetTics
     _LcClear
       _CantaIR
       _Espera
       _WaitForBusy
     _LcCursorOff
       _CantaIR
       _WaitForBusy
     _LcCursorOn
       _CantaIR
       _WaitForBusy
     _LcGotoXY
     _LcPutChar
       _CantaData
         _CantaPartAlta
         _CantaPartBaixa
       _LcGotoXY
       _WaitForBusy
     _SiIsAvailable
     _SiReadByte
     _SiRecievedByte
     _SiSendChar
     _TiGetTics
     _TiResetTics
     ___lbmod
     _displayMenu
       _LcGotoXY
       _LcPutChar
       ___awmod
     _getPresses
     _isPressed

 _RSI_High (ROOT)
   __TiRSITimer

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             1FF      0       0      23        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      90       7       56.2%
BITBANK0            80      0       0       4        0.0%
BANK0               80     12      5D       5       72.7%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     1D      71       1       89.7%
BITBIGSFRhlhh       19      0       0       9        0.0%
BITBIGSFRhh          D      0       0       8        0.0%
BITBIGSFRlhhhh       B      0       0      11        0.0%
BITBIGSFRlhhlhl      8      0       0      14        0.0%
BITBIGSFRlhhlll      8      0       0      17        0.0%
BITBIGSFRlhhllh      7      0       0      16        0.0%
BITBIGSFRlhhlhh      7      0       0      13        0.0%
BITBIGSFRllhlh       6      0       0      19        0.0%
BITBIGSFRllhhh       5      0       0      18        0.0%
BITBIGSFRhll         4      0       0      10        0.0%
BITBIGSFRlhhllh      1      0       0      15        0.0%
BITBIGSFRlhhhl       1      0       0      12        0.0%
BITBIGSFRllhll       1      0       0      20        0.0%
BITBIGSFRlll         1      0       0      21        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     15E      22        0.0%
DATA                 0      0     15E       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.36 build 20220127204148 
Symbol Table                                                                                   Mon Jun 13 22:57:36 2022

         TiResetTics@Handle 0059                           _x 003D                           _y 003C  
              ?_displayMenu 006A                          PL2 0A64                          PL4 0A7E  
                        PL6 0BBE                          PL8 0DEC                         PL10 0BCE  
                       PL20 0BF4                         PL12 0BD8                         PL30 0AB8  
                       PL22 0C00                         PL14 12D4                         PL40 0C14  
                       PL32 0AC4                         PL24 0A92                         PL16 104A  
                       PL50 07B2                         PL42 10EE                         PL34 0C0C  
                       PL26 0AAC                         PL18 14D6                         PL60 1482  
                       PL52 1074                         PL44 0ACE                         PL36 1624  
                       PL28 12EA                         PL70 129E                         PL62 1238  
                       PL54 0ADC                         PL46 1066                         PL38 1474  
                       PL72 07D0                         PL64 1080                         PL56 07BC  
                       PL48 07A8                         PL74 0D2C                         PL66 10FC  
                       PL58 07C8                         PL76 154E                         PL68 0F68  
                       PL78 0EB6                         l141 0C5A                         l134 0C1E  
                       l152 0CC0                         l144 0C76                         l138 0C3E  
                       l163 0F02                         l181 165E                         l271 0F94  
                       l601 0E12                         l267 0F82                         l700 1164  
                       l278 0FCE                         l614 0E7E                         l617 0E92  
                       l723 083E                         l732 0874                         l741 0908  
                       l557 0BBC                         l734 08B0                         l744 093A  
                       l736 08BC                         l753 09B2                         l739 08FA  
                       l756 09E6                         l780 1024                         l781 101A  
                       l694 111A                         l598 0DFE                         l695 1124  
                       l784 102E                         l696 115A                         l697 1146  
                       l786 1038                         l779 1010                         u250 12B4  
                       u500 109C                         u520 10B2                         u540 10C6  
                       u518 109E                         u560 10DE                         u538 10B4  
                       u558 10C8                         u578 10E0                         _val 0040  
                       _row 0052            ??_CantaPartBaixa 0059                ___awmod@sign 005E  
                       wreg 000FE8         __end_of_JoDirection 16FE                        l3001 0FA2  
                      l3011 0FD6                        l3005 0FB0                        l3013 0FF0  
                      l3101 119E                        l2063 110A                        l3103 11A6  
                      l2073 111C                        l3113 11C6                        l3123 14BC  
                      l3131 14C6                        l4011 096A                        l4003 0942  
                      l2067 1112                        l3045 15C0                        l3117 11D2  
                      l3109 11BC                        l3205 0B26                        l3303 14A6  
                      l1623 12CA                        l3223 0BA4                        l3401 0F10  
                      l4017 0988                        l3065 1324                        l3217 0B9C  
                      l3411 0F2A                        l3307 14AE                        l4043 09BC  
                      l2611 0E60                        l1627 12D0                        l3083 134C  
                      l4211 03D4                        l3333 0D52                        l3413 0F30  
                      l3421 0F42                        l2605 0E4A                        l3077 133E  
                      l3093 1186                        l3229 0BB4                        l3511 0CFE  
                      l3407 0F20                        l4071 09EC                        l2623 0E74  
                      l3159 1546                        l3183 0AFC                        l3191 0B0A  
                      l4311 0552                        l4303 0538                        l4231 0412  
                      l1913 1026                        l2617 0E6A                        l3097 1192  
                      l3185 0B00                        l4161 0336                        l3507 0CFC  
                      l3267 1502                        l3259 14EC                        l4411 0684  
                      l4403 0666                        l4323 0562                        l4251 046E  
                      l4235 042E                        l4227 0408                        l4219 03EE  
                      l4147 02FC                        l4139 02DC                        l2629 0E80  
                      l3189 0B06                        l4413 068C                        l4333 0582  
                      l4237 0444                        l4173 035E                        l3439 0C38  
                      l2639 0E96                        l3199 0B1E                        l4431 06BC  
                      l4343 05A6                        l4335 058C                        l4263 0494  
                      l4255 047C                        l4239 044A                        l3473 0C90  
                      l3385 0EE8                        l3369 0EBE                        l2593 0E24  
                      l4361 05DE                        l4345 05AA                        l4273 04B0  
                      l3395 0EFC                        l4419 06A2                        l4363 05E4  
                      l4355 05CC                        l4291 0502                        l4275 04B6  
                      l4195 03B2                        l4179 037A                        l3477 0C9A  
                      l3469 0C8C                        l3397 0F08                        l4445 06F4  
                      l4437 06D4                        l4285 04EE                        l4269 04A4  
                      l4189 039A                        l3487 0CBA                        l4383 0626  
                      l4375 060E                        l4199 03B6                        l3497 0CD6  
                      l3905 087E                        l4377 0614                        l4297 052E  
                      l4289 04FC                        l4457 0710                        l3851 07E8  
                      l1899 1008                        l2965 13F0                        l3853 07EC  
                      l3845 07D8                        l4397 0652                        l4389 063C  
                      l4477 143E                        l2991 0F76                        l3855 07F0  
                      l3937 08BE                        l3865 080E                        l2987 1416  
                      l2995 0F86                        l3939 08C4                        l3883 0848  
                      l3867 0812                        l3973 0910                        l3869 0818  
                      l3887 0854                        l3889 085A                        l3899 086E  
                      u2020 124E                        u2100 11E8                        u2040 1264  
                      u2120 11FE                        u2060 1278                        u2140 1212  
                      u2038 1250                        u2118 11EA                        _LATC 000F8B  
                      u2080 1290                        u2160 122A                        u2058 1266  
                      u2138 1200                        u2078 127A                        u2158 1214  
                      u2510 0B4C                        u2430 165A                        u2360 11AA  
                      u2098 1292                        u2178 122C                        u2620 0DEA  
                      u4070 0600                        u2561 15AC                        u2820 0CB0  
                      u3720 0374                        u3801 0420                        u3651 1564  
                      u3811 0438                        u2890 0CEC                        u3850 0476  
                      u3690 031A                        u3890 04E4                        i2l67 13D8  
            ?_SiIsAvailable 0054                        _Rows 0048                        _main 141C  
                      _send 003E                        fsr1h 000FE2                        fsr2h 000FDA  
                      indf1 000FE7                        indf2 000FDF                        fsr1l 000FE1  
                      fsr2l 000FD9                  _LcCursorOn 169C                        btemp 0072  
                      prodh 000FF4                        prodl 000FF3             __end_of_LcClear 1678  
                      start 0032             __end_of_CantaIR 1614               LcInit@columns 0065  
           __end_of_JoMoved 16FA                ___param_bank 000000               _isPressed$522 0059  
          __end_of_MAINMENU 02A3                 Espera@Timer 0060                       ?_main 0054  
                     _EEADR 000FA9             __end_of___awmod 11DC             __end_of___lbmod 150A  
             ??_TiInitTimer 0059                       _T0CON 000FD5                       _TABLE 0223  
                     _RCREG 000FAE               ??_KeypadMotor 0060                       _TMR0H 000FD7  
                     _TMR0L 000FD6                       _SPBRG 000FAF                       _TXREG 000FAD  
               ?_DaFindUser 00CB                       _Timer 002F            __end_of_SMSTABLE 02D9  
           __end_of_initSIO 168C                       _mUser 0013                       _moved 003B  
                     _timer 0044                 _LcCursorOff 16A6                       _state 004A  
                     _users 0100            __end_of_RSI_High 0032            __end_of_SMSMotor 0F68  
                     tablat 000FF5               ??_TiResetTics 0059                       plusw0 000FEB  
                     plusw1 000FE3                       plusw2 000FDB                       ttemp5 0073  
                     ttemp6 0076                       ttemp7 007A                       status 000FD8  
               ?_DaSaveUser 0059                       wtemp8 0073            __end_of_LcGotoXY 1006  
             ??__TiRSITimer 0054                  _TiGetTimer 14B8     EscriuPrimeraOrdre@ordre 005A  
           __initialization 1356                  _SiReadByte 16F2                __end_of_main 1454  
      __end_of_getFullValue 12D4                  _SiSendChar 16D2                 _JoDirection 16FA  
                    ??_main 0071               __activetblptr 000002               ?_initJoystick 0054  
         __end_of_LOGINMENU 0217                      _ADCON0 000FC2                      _ADCON1 000FC1  
                    _ADCON2 000FC0        __end_of_MAINMENUSIZE 0233         __end_of_TiInitTimer 14B8  
                    _ADRESH 000FC4                      _EEDATA 000FA8                      _EECON2 000FA7  
           ??_SiIsAvailable 0059         __end_of_KeypadMotor 0D2C                   ??_LcClear 0065  
                 ??_CantaIR 005B                      i2l3291 13D4                      i2l3283 13B6  
                    i2l3287 13BE                      _LCDcol 0042              LcGotoXY@Fisics 0066  
            LcGotoXY@Column 0068                      _LCDrow 0043               ??_WaitForBusy 0060  
             ?_readUserData 0054          _mUser@EEPROM$F1485 0001                   ??_JoMoved 0059  
               ?_LcCursorOn 0054           KeSetMode@menuMode 005A                      _LcInit 0D32  
              ?_DaGetStatus 0054                      _Espera 15BA                _LcGotoXY$728 0064  
         __end_of_DaGetIdle 16D2                      _RowAct 0046         __end_of_TiResetTics 1624  
                    _h_Tics 0031                   ??___awmod 005D                   ??___lbmod 005A  
                    _mScore 003F            __end_of_initData 1174            __end_of_initMenu 16E2  
       __end_of__TiRSITimer 13DE                      clear_0 136E                      clear_1 137A  
                    clear_2 1386             ___awmod@divisor 005B                      isa$std 000001  
           ___awmod@counter 005D                      _status 0035              ??_initJoystick 0059  
                 ??_initSIO 0059                __pdataCOMRAM 0071                __mediumconst 0000  
                    tblptrh 000FF7                      tblptrl 000FF6                      tblptru 000FF8  
              ?_DaSaveScore 0054           __end_of_CantaData 1474              ??_readUserData 0059  
           ___lbmod@divisor 0059                  __accesstop 0080     __end_of__initialization 138C  
         __end_of_KeSetMode 154E             ___lbmod@counter 005B           __end_of_LcPutChar 1356  
      DaSaveScore@userScore 0059               ___rparam_used 000001               __end_of_TABLE 022F  
               ?_TiGetTimer 0054           __end_of_JoSetMode 16CA              __pcstackCOMRAM 0054  
       __end_of_WaitForBusy 141C                 ?_SiReadByte 0054       __end_of_joystickMotor 0EB6  
               ?_SiSendChar 0054                  __end_ofPL2 0A7E                  __end_ofPL4 0A92  
                __end_ofPL6 0BCE                  __end_ofPL8 0DF8                   ?_RSI_High 0054  
                 ?_SMSMotor 0054           __end_of_TiGetTics 1530              _SiRecievedByte 16E2  
               _TiInitTimer 148C                 _KeypadMotor 0C1C                   ?_LcGotoXY 0061  
                __pbssBANK0 0080                  __pbssBANK1 0100                 _TiResetTics 1614  
        _state@EEPROM$F1481 0038                     ?_LcInit 0065               _CantaPartAlta 1242  
                   ?_Espera 0060                 __TiRSITimer 139A      __end_of_SiRecievedByte 16E8  
                ??_RSI_High 0055                  ??_SMSMotor 0060                  _getPresses 16EE  
      __end_of_LOGREGSCREEN 0223                     LcInit@i 0067                     _LCDcolm 0041  
              ??_DaFindUser 0069                  ??_LcGotoXY 0062                ?_LcCursorOff 0054  
              _getFullValue 12A8           __end_of_dataMotor 0A64                     _LcClear 1662  
                   _CantaIR 15F8                   ?_initData 0054                   ?_initMenu 0054  
              ??_DaSaveUser 006B                 _WaitForBusy 13DE                     _JoMoved 16F6  
            ?_CantaPartAlta 0054                     _Columns 0047           __end_of_getColumn 16BA  
      __end_of_initJoystick 159A                     __Hparam 0000                     __Lparam 0000  
                _initKeypad 15DA          __end_of_DaFindUser 1578                     ___awmod 1174  
                   ___lbmod 14E4                _MAINMENUSIZE 022F                __psmallconst 0200  
                _currentKey 004F           __end_of_isPressed 1662                ?_JoDirection 0054  
                   __pcinit 1356             ?_SiRecievedByte 0054                     __ramtop 0200  
      __end_of_readUserData 104A                     __ptext0 141C                     __ptext1 02DA  
                   __ptext2 164A                     __ptext3 16EE                     __ptext4 0AE8  
                   __ptext5 1174                     __ptext6 1302                     __ptext7 1454  
                   __ptext8 14E4                     __ptext9 16E2                   _T0CONbits 000FD5  
                 CantaIR@IR 005B                     _initSIO 1678                     _counter 0053  
            displayMenu@row 006A           __end_of_menuMotor 07A8                     _joyMode 0039  
        __end_of_DaSaveUser 15BA            ___awmod@dividend 0059                     _pressed 004D  
           WaitForBusy@Busy 0060                     _userNum 0037        end_of_initialization 138C  
                 _LOGINMENU 0201                  ??_initData 005B                  ??_initMenu 005A  
             __Lmediumconst 0000             TiGetTics@Handle 005D                ??_LcCursorOn 0061  
                _numPresses 004C             TiGetTics@actual 005E                   _RCSTAbits 000FAB  
                   postdec2 000FDD                     postinc0 000FEE                     postinc1 000FE6  
                   postinc2 000FDE                   _DaGetIdle 16CA                   _PORTBbits 000F81  
                 _PORTDbits 000F83                 ?_getPresses 0054           _KeGetGenericValue 1630  
        __end_of_LcCursorOn 16A6            ___lbmod@dividend 005A          ?_KeGetGenericValue 0054  
                 _TRISAbits 000F92                   _TRISBbits 000F93                   _TRISCbits 000F94  
                 _TRISDbits 000F95         getFullValue@generic 005D         ??_KeGetGenericValue 0059  
           ??_CantaPartAlta 0059       __end_of_SiIsAvailable 16EE                 ___lbmod@rem 005C  
                 _CantaData 1454                   _TXSTAbits 000FAC                ??_TiGetTimer 0059  
            __end_of_LcInit 0DEC                   _KeSetMode 1530                   _LcPutChar 1302  
              ??_SiReadByte 0059              __end_of_Espera 15DA                 ?_initKeypad 0054  
            _KeGetCharValue 16BA               ??_displayMenu 006B                ??_SiSendChar 0059  
__end_of_EscriuPrimeraOrdre 10EE                  ?_DaGetIdle 0054                 _BAUDCONbits 000FB8  
                 _JoSetMode 16C2   __end_of_KeGetGenericValue 164A               __pidataCOMRAM 1702  
                 _ColumnAct 0045                ?_TiInitTimer 0054                ?_KeypadMotor 0054  
               __end_ofPL10 0BD8                 __end_ofPL20 0C00                 __end_ofPL12 0BF4  
               __end_ofPL30 0AC4                 __end_ofPL22 0C0C                 __end_ofPL14 12EA  
               __end_ofPL40 0C1C                 __end_ofPL32 0ACE                 __end_ofPL24 0AAC  
               __end_ofPL16 1066                 __end_ofPL50 07BC                 __end_ofPL42 10FC  
               __end_ofPL34 0C14                 __end_ofPL26 0AB8                 __end_ofPL18 14E4  
               __end_ofPL60 148C                 __end_ofPL52 1080                 __end_ofPL44 0ADC  
               __end_ofPL36 1630                 __end_ofPL28 1302                 __end_ofPL70 12A8  
               __end_ofPL62 1242                 __end_ofPL54 0AE8                 __end_ofPL46 1074  
               __end_ofPL38 1482                 __end_ofPL72 07D6                 __end_ofPL64 108A  
               __end_ofPL56 07C8                 __end_ofPL48 07B2                 __end_ofPL74 0D32  
               __end_ofPL66 1106                 __end_ofPL58 07D0                 __end_ofPL76 1554  
               __end_ofPL68 0F72                 __end_ofPL78 0EBC         start_initialization 1356  
                 _TiGetTics 150A          __end_of_TiGetTimer 14D6          __end_of_SiReadByte 16F6  
       displayMenu@menuMode 006E                ?_TiResetTics 0054                  ?_CantaData 0054  
        __end_of_SiSendChar 16DA                    ??_LcInit 0066                _LOGREGSCREEN 0217  
    __end_of_KeGetCharValue 16C2                ?__TiRSITimer 0054                    ??_Espera 0064  
                ?_KeSetMode 0054                  ?_LcPutChar 0054                  ?_JoSetMode 0054  
       __end_of_displayMenu 0BBE                _initJoystick 1578                 __pbssCOMRAM 0001  
             __pcstackBANK0 00CB                  ?_TiGetTics 0059            SiSendChar@myByte 0059  
                  ?_LcClear 0054                    ?_CantaIR 0054              _CantaPartBaixa 11DC  
              ?_WaitForBusy 0054                _readUserData 1006                    ?_JoMoved 0054  
                 _dataMotor 07D6             ?_KeGetCharValue 0054            ??_SiRecievedByte 0059  
                 __pintcode 0008                   _getColumn 16B0                    ?___awmod 0059  
                  ?___lbmod 0059                   _available 004B             CantaPartBaixa@c 005A  
               ??_DaGetIdle 0059                    ?_initSIO 0054                 __smallconst 0200  
                 _isPressed 164A                   _menuMotor 02DA      __end_of_CantaPartBaixa 1238  
                  _MAINMENU 0233                 ??_CantaData 005B                    _LATBbits 000F8A  
                  _LATCbits 000F8B                    _LATDbits 000F8C                  ?_dataMotor 0054  
                 _saveScore 0033               ??_DaGetStatus 0059                 ??_KeSetMode 005A  
                  _PIR1bits 000F9E                 ??_LcPutChar 0069                    _RCONbits 000FD0  
                ?_getColumn 0054                   _timer_SMS 0050                 _displayMenu 0AE8  
                  _SMSTABLE 02A3               _joystickMotor 0DF8                 ??_JoSetMode 0059  
                 _topScores 0025                    _RSI_High 0008                  _ADCON0bits 000FC2  
              ??_getPresses 0059                    _SMSMotor 0EBC                  ?_isPressed 0054  
                  Espera@ms 0062                    _LcGotoXY 0F72                 ??_TiGetTics 005B  
             ??_DaSaveScore 0059                 LcGotoXY@Row 0061                  ?_menuMotor 0054  
               _INTCON2bits 000FF1             ?_CantaPartBaixa 0054              menuMotor@state 0071  
                _EECON1bits 000FA6          __end_of_getPresses 16F2                    __Hrparam 0000  
                  __Lrparam 0000                ??_initKeypad 005A               JoSetMode@mode 0059  
            ?_joystickMotor 0054         __end_of_DaGetStatus 1702                    __ptext10 16F2  
                  __ptext11 169C          _EscriuPrimeraOrdre 108A                    __ptext20 159A  
                  __ptext12 16A6                    __ptext21 168C                    __ptext13 1662  
                  __ptext30 15DA                    __ptext22 16FE                    __ptext14 1530  
                  __ptext31 1578                    __ptext23 16CA                    __ptext15 16BA  
                  __ptext40 0D32                    __ptext32 1106                    __ptext24 1554  
                  __ptext16 12A8                    __ptext41 13DE                    __ptext33 1006  
                  __ptext25 0DF8                    __ptext17 16C2                    __ptext50 150A  
                  __ptext42 14B8                    __ptext34 07D6                    __ptext26 16D2  
                  __ptext18 16F6                    __ptext43 15BA                    __ptext35 0F72  
                  __ptext27 16E8                    __ptext19 16FA                    __ptext52 139A  
                  __ptext44 108A                    __ptext36 148C                    __ptext28 1678  
                  __ptext45 15F8                    __ptext37 0EBC                    __ptext29 16DA  
                  __ptext46 11DC                    __ptext38 1630                    __ptext47 1242  
                  __ptext39 16B0                    __ptext48 0C1C                    __ptext49 1614  
            CantaPartAlta@c 005A             _lastUserPointer 0034          __end_of_initKeypad 15F8  
                  _s_Timers 0080                    _initData 1106                    _initMenu 16DA  
       ?_EscriuPrimeraOrdre 0054       __end_of_CantaPartAlta 129E         __end_of_DaSaveScore 169C  
               ??_dataMotor 0069               CantaData@Data 005B                 ??_getColumn 0059  
                  isa$xinst 000000                    _previous 004E                    int$flags 0072  
                  _position 0036                    _stateSMS 0049                    _stateJoy 003A  
      ??_EscriuPrimeraOrdre 0059                  LcInit@rows 0066                 ??_isPressed 0059  
                _INTCONbits 000FF2                 ??_menuMotor 006F               ??_LcCursorOff 0061  
             ?_getFullValue 0054                    intlevel2 0000            ??_KeGetCharValue 005E  
              _timerBounces 0051                  LcPutChar@c 0069                 _DaGetStatus 16FE  
           ??_joystickMotor 005A               ??_JoDirection 0059                  _DaFindUser 1554  
         DaFindUser@logUser 00CB              ??_getFullValue 0059                 _DaSaveScore 168C  
             _SiIsAvailable 16E8                  _DaSaveUser 159A         __end_of_LcCursorOff 16B0  
         DaSaveUser@regUser 0059  
