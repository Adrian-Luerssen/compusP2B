

Microchip MPLAB XC8 Assembler V2.36 build 20220127204148 
                                                                                               Sun Jun 12 23:15:12 2022

Microchip MPLAB XC8 C Compiler v2.36 (Pro license) build 20220127204148 Og9s 
     1                           	processor	18F4321
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	plic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    13                           	psect	text0,global,reloc=2,class=CODE,delta=1
    14                           	psect	text1,global,reloc=2,class=CODE,delta=1
    15                           	psect	text2,global,reloc=2,class=CODE,delta=1
    16                           	psect	text3,global,reloc=2,class=CODE,delta=1
    17                           	psect	text4,global,reloc=2,class=CODE,delta=1
    18                           	psect	text5,global,reloc=2,class=CODE,delta=1
    19                           	psect	text6,global,reloc=2,class=CODE,delta=1
    20                           	psect	text7,global,reloc=2,class=CODE,delta=1
    21                           	psect	text8,global,reloc=2,class=CODE,delta=1
    22                           	psect	text9,global,reloc=2,class=CODE,delta=1
    23                           	psect	text10,global,reloc=2,class=CODE,delta=1
    24                           	psect	text11,global,reloc=2,class=CODE,delta=1
    25                           	psect	text12,global,reloc=2,class=CODE,delta=1
    26                           	psect	text13,global,reloc=2,class=CODE,delta=1
    27                           	psect	text14,global,reloc=2,class=CODE,delta=1
    28                           	psect	text15,global,reloc=2,class=CODE,delta=1
    29                           	psect	text16,global,reloc=2,class=CODE,delta=1
    30                           	psect	text17,global,reloc=2,class=CODE,delta=1
    31                           	psect	text18,global,reloc=2,class=CODE,delta=1
    32                           	psect	text19,global,reloc=2,class=CODE,delta=1
    33                           	psect	text20,global,reloc=2,class=CODE,delta=1
    34                           	psect	text21,global,reloc=2,class=CODE,delta=1
    35                           	psect	text22,global,reloc=2,class=CODE,delta=1
    36                           	psect	text23,global,reloc=2,class=CODE,delta=1
    37                           	psect	text24,global,reloc=2,class=CODE,delta=1
    38                           	psect	text25,global,reloc=2,class=CODE,delta=1
    39                           	psect	text26,global,reloc=2,class=CODE,delta=1
    40                           	psect	text27,global,reloc=2,class=CODE,delta=1
    41                           	psect	text28,global,reloc=2,class=CODE,delta=1
    42                           	psect	text29,global,reloc=2,class=CODE,delta=1
    43                           	psect	text30,global,reloc=2,class=CODE,delta=1
    44                           	psect	text31,global,reloc=2,class=CODE,delta=1
    45                           	psect	text32,global,reloc=2,class=CODE,delta=1
    46                           	psect	text33,global,reloc=2,class=CODE,delta=1
    47                           	psect	text34,global,reloc=2,class=CODE,delta=1
    48                           	psect	text35,global,reloc=2,class=CODE,delta=1
    49                           	psect	text36,global,reloc=2,class=CODE,delta=1
    50                           	psect	text37,global,reloc=2,class=CODE,delta=1
    51                           	psect	text38,global,reloc=2,class=CODE,delta=1
    52                           	psect	text39,global,reloc=2,class=CODE,delta=1
    53                           	psect	text40,global,reloc=2,class=CODE,delta=1
    54                           	psect	text41,global,reloc=2,class=CODE,delta=1
    55                           	psect	text42,global,reloc=2,class=CODE,delta=1
    56                           	psect	text43,global,reloc=2,class=CODE,delta=1
    57                           	psect	text44,global,reloc=2,class=CODE,delta=1
    58                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    59                           	psect	text46,global,reloc=2,class=CODE,delta=1
    60                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    61                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    62                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    63                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    64                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    65                           	psect	pa_nodes0,global,class=CODE,delta=1
    66  0000                     
    67                           ; Version 2.36
    68                           ; Generated 28/01/2022 GMT
    69                           ; 
    70                           ; Copyright Â© 2022, Microchip Technology Inc. and its subsidiaries ("Microchip")
    71                           ; All rights reserved.
    72                           ; 
    73                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    74                           ; 
    75                           ; Redistribution and use in source and binary forms, with or without modification, are
    76                           ; permitted provided that the following conditions are met:
    77                           ; 
    78                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    79                           ;        conditions and the following disclaimer.
    80                           ; 
    81                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    82                           ;        of conditions and the following disclaimer in the documentation and/or other
    83                           ;        materials provided with the distribution. Publication is not required when
    84                           ;        this file is used in an embedded application.
    85                           ; 
    86                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    87                           ;        software without specific prior written permission.
    88                           ; 
    89                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    90                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    91                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    92                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    93                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    94                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    95                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    96                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    97                           ; 
    98                           ; 
    99                           ; Code-generator required, PIC18F4321 Definitions
   100                           ; 
   101                           ; SFR Addresses
   102  0000                     
   103                           	psect	idataCOMRAM
   104  0012D6                     __pidataCOMRAM:
   105                           	callstack 0
   106                           
   107                           ;initializer for menuMotor@state
   108  0012D6  01                 	db	1
   109                           
   110                           	psect	smallconst
   111  000200                     __psmallconst:
   112                           	callstack 0
   113  000200  00                 	db	0
   114  000201                     _LOGINMENU:
   115                           	callstack 0
   116  000201  31                 	db	49
   117  000202  2E                 	db	46
   118  000203  4C                 	db	76
   119  000204  4F                 	db	79
   120  000205  47                 	db	71
   121  000206  49                 	db	73
   122  000207  4E                 	db	78
   123  000208  00                 	db	0
   124  000209  00                 	db	0
   125  00020A  00                 	db	0
   126  00020B  00                 	db	0
   127  00020C  32                 	db	50
   128  00020D  2E                 	db	46
   129  00020E  52                 	db	82
   130  00020F  45                 	db	69
   131  000210  47                 	db	71
   132  000211  49                 	db	73
   133  000212  53                 	db	83
   134  000213  54                 	db	84
   135  000214  45                 	db	69
   136  000215  52                 	db	82
   137  000216  00                 	db	0
   138  000217                     __end_of_LOGINMENU:
   139                           	callstack 0
   140  000217                     _LOGREGSCREEN:
   141                           	callstack 0
   142  000217  55                 	db	85
   143  000218  53                 	db	83
   144  000219  45                 	db	69
   145  00021A  52                 	db	82
   146  00021B  3A                 	db	58
   147  00021C  00                 	db	0
   148  00021D  50                 	db	80
   149  00021E  53                 	db	83
   150  00021F  57                 	db	87
   151  000220  44                 	db	68
   152  000221  3A                 	db	58
   153  000222  00                 	db	0
   154  000223                     __end_of_LOGREGSCREEN:
   155                           	callstack 0
   156  000223                     _TABLE:
   157                           	callstack 0
   158  000223  31                 	db	49
   159  000224  32                 	db	50
   160  000225  33                 	db	51
   161  000226  34                 	db	52
   162  000227  35                 	db	53
   163  000228  36                 	db	54
   164  000229  37                 	db	55
   165  00022A  38                 	db	56
   166  00022B  39                 	db	57
   167  00022C  2A                 	db	42
   168  00022D  30                 	db	48
   169  00022E  23                 	db	35
   170  00022F                     __end_of_TABLE:
   171                           	callstack 0
   172  00022F                     _MAINMENU:
   173                           	callstack 0
   174  00022F  31                 	db	49
   175  000230  2E                 	db	46
   176  000231  50                 	db	80
   177  000232  4C                 	db	76
   178  000233  41                 	db	65
   179  000234  59                 	db	89
   180  000235  20                 	db	32
   181  000236  41                 	db	65
   182  000237  20                 	db	32
   183  000238  47                 	db	71
   184  000239  41                 	db	65
   185  00023A  4D                 	db	77
   186  00023B  45                 	db	69
   187  00023C  00                 	db	0
   188  00023D  00                 	db	0
   189  00023E  00                 	db	0
   190  00023F  00                 	db	0
   191  000240  00                 	db	0
   192  000241  00                 	db	0
   193  000242  00                 	db	0
   194  000243  00                 	db	0
   195  000244  00                 	db	0
   196  000245  00                 	db	0
   197  000246  00                 	db	0
   198  000247  00                 	db	0
   199  000248  00                 	db	0
   200  000249  00                 	db	0
   201  00024A  00                 	db	0
   202  00024B  32                 	db	50
   203  00024C  2E                 	db	46
   204  00024D  4D                 	db	77
   205  00024E  4F                 	db	79
   206  00024F  44                 	db	68
   207  000250  49                 	db	73
   208  000251  46                 	db	70
   209  000252  59                 	db	89
   210  000253  20                 	db	32
   211  000254  54                 	db	84
   212  000255  49                 	db	73
   213  000256  4D                 	db	77
   214  000257  45                 	db	69
   215  000258  00                 	db	0
   216  000259  00                 	db	0
   217  00025A  00                 	db	0
   218  00025B  00                 	db	0
   219  00025C  00                 	db	0
   220  00025D  00                 	db	0
   221  00025E  00                 	db	0
   222  00025F  00                 	db	0
   223  000260  00                 	db	0
   224  000261  00                 	db	0
   225  000262  00                 	db	0
   226  000263  00                 	db	0
   227  000264  00                 	db	0
   228  000265  00                 	db	0
   229  000266  00                 	db	0
   230  000267  33                 	db	51
   231  000268  2E                 	db	46
   232  000269  53                 	db	83
   233  00026A  48                 	db	72
   234  00026B  4F                 	db	79
   235  00026C  57                 	db	87
   236  00026D  20                 	db	32
   237  00026E  47                 	db	71
   238  00026F  45                 	db	69
   239  000270  4E                 	db	78
   240  000271  45                 	db	69
   241  000272  52                 	db	82
   242  000273  41                 	db	65
   243  000274  4C                 	db	76
   244  000275  00                 	db	0
   245  000276  20                 	db	32
   246  000277  54                 	db	84
   247  000278  4F                 	db	79
   248  000279  50                 	db	80
   249  00027A  20                 	db	32
   250  00027B  35                 	db	53
   251  00027C  20                 	db	32
   252  00027D  53                 	db	83
   253  00027E  43                 	db	67
   254  00027F  4F                 	db	79
   255  000280  52                 	db	82
   256  000281  45                 	db	69
   257  000282  53                 	db	83
   258  000283  34                 	db	52
   259  000284  2E                 	db	46
   260  000285  4C                 	db	76
   261  000286  4F                 	db	79
   262  000287  47                 	db	71
   263  000288  4F                 	db	79
   264  000289  55                 	db	85
   265  00028A  54                 	db	84
   266  00028B  00                 	db	0
   267  00028C  00                 	db	0
   268  00028D  00                 	db	0
   269  00028E  00                 	db	0
   270  00028F  00                 	db	0
   271  000290  00                 	db	0
   272  000291  00                 	db	0
   273  000292  00                 	db	0
   274  000293  00                 	db	0
   275  000294  00                 	db	0
   276  000295  00                 	db	0
   277  000296  00                 	db	0
   278  000297  00                 	db	0
   279  000298  00                 	db	0
   280  000299  00                 	db	0
   281  00029A  00                 	db	0
   282  00029B  00                 	db	0
   283  00029C  00                 	db	0
   284  00029D  00                 	db	0
   285  00029E  00                 	db	0
   286  00029F                     __end_of_MAINMENU:
   287                           	callstack 0
   288  00029F                     _SMSTABLE:
   289                           	callstack 0
   290  00029F  31                 	db	49
   291  0002A0  00                 	db	0
   292  0002A1  00                 	db	0
   293  0002A2  00                 	db	0
   294  0002A3  00                 	db	0
   295  0002A4  00                 	db	0
   296  0002A5  41                 	db	65
   297  0002A6  42                 	db	66
   298  0002A7  43                 	db	67
   299  0002A8  32                 	db	50
   300  0002A9  00                 	db	0
   301  0002AA  00                 	db	0
   302  0002AB  44                 	db	68
   303  0002AC  45                 	db	69
   304  0002AD  46                 	db	70
   305  0002AE  33                 	db	51
   306  0002AF  00                 	db	0
   307  0002B0  00                 	db	0
   308  0002B1  47                 	db	71
   309  0002B2  48                 	db	72
   310  0002B3  49                 	db	73
   311  0002B4  34                 	db	52
   312  0002B5  00                 	db	0
   313  0002B6  00                 	db	0
   314  0002B7  4A                 	db	74
   315  0002B8  4B                 	db	75
   316  0002B9  4C                 	db	76
   317  0002BA  35                 	db	53
   318  0002BB  00                 	db	0
   319  0002BC  00                 	db	0
   320  0002BD  4D                 	db	77
   321  0002BE  4E                 	db	78
   322  0002BF  4F                 	db	79
   323  0002C0  36                 	db	54
   324  0002C1  00                 	db	0
   325  0002C2  00                 	db	0
   326  0002C3  50                 	db	80
   327  0002C4  51                 	db	81
   328  0002C5  52                 	db	82
   329  0002C6  53                 	db	83
   330  0002C7  37                 	db	55
   331  0002C8  00                 	db	0
   332  0002C9  54                 	db	84
   333  0002CA  55                 	db	85
   334  0002CB  56                 	db	86
   335  0002CC  38                 	db	56
   336  0002CD  00                 	db	0
   337  0002CE  00                 	db	0
   338  0002CF  57                 	db	87
   339  0002D0  58                 	db	88
   340  0002D1  59                 	db	89
   341  0002D2  5A                 	db	90
   342  0002D3  39                 	db	57
   343  0002D4  00                 	db	0
   344  0002D5                     __end_of_SMSTABLE:
   345                           	callstack 0
   346  0000                     _EECON2	set	4007
   347  0000                     _EEDATA	set	4008
   348  0000                     _EEADR	set	4009
   349  0000                     _LATCbits	set	3979
   350  0000                     _TRISCbits	set	3988
   351  0000                     _LATDbits	set	3980
   352  0000                     _TRISDbits	set	3989
   353  0000                     _TMR0L	set	4054
   354  0000                     _TMR0H	set	4055
   355  0000                     _LATC	set	3979
   356  0000                     _ADCON0bits	set	4034
   357  0000                     _T0CONbits	set	4053
   358  0000                     _PORTBbits	set	3969
   359  0000                     _TRISBbits	set	3987
   360  0000                     _RCONbits	set	4048
   361  0000                     _T0CON	set	4053
   362  0000                     _INTCONbits	set	4082
   363  0000                     _INTCON2bits	set	4081
   364  0000                     _PORTDbits	set	3971
   365  0000                     _LATBbits	set	3978
   366  0000                     _EECON1bits	set	4006
   367  0000                     _RCSTAbits	set	4011
   368  0000                     _TXSTAbits	set	4012
   369  0000                     _ADCON2	set	4032
   370  0000                     _ADCON1	set	4033
   371  0000                     _ADCON0	set	4034
   372  0000                     _TRISAbits	set	3986
   373  0000                     _ADRESH	set	4036
   374  0000                     _TXREG	set	4013
   375  0000                     _SPBRG	set	4015
   376  0000                     _BAUDCONbits	set	4024
   377  0002D5  00                 	db	0	; dummy byte at the end
   378  0000                     
   379                           ; #config settings
   380                           
   381                           	psect	cinit
   382  000F72                     __pcinit:
   383                           	callstack 0
   384  000F72                     start_initialization:
   385                           	callstack 0
   386  000F72                     __initialization:
   387                           	callstack 0
   388                           
   389                           ; Initialize objects allocated to COMRAM (1 bytes)
   390                           ; load TBLPTR registers with __pidataCOMRAM
   391  000F72  0ED6               	movlw	low __pidataCOMRAM
   392  000F74  6EF6               	movwf	tblptrl,c
   393  000F76  0E12               	movlw	high __pidataCOMRAM
   394  000F78  6EF7               	movwf	tblptrh,c
   395  000F7A  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   396  000F7C  6EF8               	movwf	tblptru,c
   397  000F7E  0009               	tblrd		*+	;fetch initializer
   398  000F80  CFF5 F079          	movff	tablat,__pdataCOMRAM
   399                           
   400                           ; Clear objects allocated to BANK1 (144 bytes)
   401  000F84  EE01  F000         	lfsr	0,__pbssBANK1
   402  000F88  0E90               	movlw	144
   403  000F8A                     clear_0:
   404  000F8A  6AEE               	clrf	postinc0,c
   405  000F8C  06E8               	decf	wreg,f,c
   406  000F8E  E1FD               	bnz	clear_0
   407                           
   408                           ; Clear objects allocated to BANK0 (75 bytes)
   409  000F90  EE00  F080         	lfsr	0,__pbssBANK0
   410  000F94  0E4B               	movlw	75
   411  000F96                     clear_1:
   412  000F96  6AEE               	clrf	postinc0,c
   413  000F98  06E8               	decf	wreg,f,c
   414  000F9A  E1FD               	bnz	clear_1
   415                           
   416                           ; Clear objects allocated to COMRAM (79 bytes)
   417  000F9C  EE00  F001         	lfsr	0,__pbssCOMRAM
   418  000FA0  0E4F               	movlw	79
   419  000FA2                     clear_2:
   420  000FA2  6AEE               	clrf	postinc0,c
   421  000FA4  06E8               	decf	wreg,f,c
   422  000FA6  E1FD               	bnz	clear_2
   423  000FA8                     end_of_initialization:
   424                           	callstack 0
   425  000FA8                     __end_of__initialization:
   426                           	callstack 0
   427  000FA8  907A               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   428  000FAA  927A               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   429  000FAC  0E00               	movlw	low (__Lmediumconst shr (0+16))
   430  000FAE  6EF8               	movwf	tblptru,c
   431  000FB0  0100               	movlb	0
   432  000FB2  EF1C  F008         	goto	_main	;jump to C main() function
   433                           
   434                           	psect	bssCOMRAM
   435  000001                     __pbssCOMRAM:
   436                           	callstack 0
   437  000001                     _mUser@EEPROM$F1418:
   438                           	callstack 0
   439  000001                     	ds	18
   440  000013                     _mUser:
   441                           	callstack 0
   442  000013                     	ds	18
   443  000025                     _topScores:
   444                           	callstack 0
   445  000025                     	ds	10
   446  00002F                     _Timer:
   447                           	callstack 0
   448  00002F                     	ds	2
   449  000031                     _h_Tics:
   450                           	callstack 0
   451  000031                     	ds	2
   452  000033                     _lastUserPointer:
   453                           	callstack 0
   454  000033                     	ds	1
   455  000034                     _status:
   456                           	callstack 0
   457  000034                     	ds	1
   458  000035                     _position:
   459                           	callstack 0
   460  000035                     	ds	1
   461  000036                     _userNum:
   462                           	callstack 0
   463  000036                     	ds	1
   464  000037                     _state@EEPROM$F1414:
   465                           	callstack 0
   466  000037                     	ds	1
   467  000038                     _stateJoy:
   468                           	callstack 0
   469  000038                     	ds	1
   470  000039                     _moved:
   471                           	callstack 0
   472  000039                     	ds	1
   473  00003A                     _y:
   474                           	callstack 0
   475  00003A                     	ds	1
   476  00003B                     _x:
   477                           	callstack 0
   478  00003B                     	ds	1
   479  00003C                     _send:
   480                           	callstack 0
   481  00003C                     	ds	1
   482  00003D                     _val:
   483                           	callstack 0
   484  00003D                     	ds	1
   485  00003E                     _LCDcol:
   486                           	callstack 0
   487  00003E                     	ds	1
   488  00003F                     _LCDrow:
   489                           	callstack 0
   490  00003F                     	ds	1
   491  000040                     _timer:
   492                           	callstack 0
   493  000040                     	ds	1
   494  000041                     _ColumnAct:
   495                           	callstack 0
   496  000041                     	ds	1
   497  000042                     _RowAct:
   498                           	callstack 0
   499  000042                     	ds	1
   500  000043                     _Columns:
   501                           	callstack 0
   502  000043                     	ds	1
   503  000044                     _Rows:
   504                           	callstack 0
   505  000044                     	ds	1
   506  000045                     _stateSMS:
   507                           	callstack 0
   508  000045                     	ds	1
   509  000046                     _state:
   510                           	callstack 0
   511  000046                     	ds	1
   512  000047                     _available:
   513                           	callstack 0
   514  000047                     	ds	1
   515  000048                     _numPresses:
   516                           	callstack 0
   517  000048                     	ds	1
   518  000049                     _pressed:
   519                           	callstack 0
   520  000049                     	ds	1
   521  00004A                     _previous:
   522                           	callstack 0
   523  00004A                     	ds	1
   524  00004B                     _currentKey:
   525                           	callstack 0
   526  00004B                     	ds	1
   527  00004C                     _timer_SMS:
   528                           	callstack 0
   529  00004C                     	ds	1
   530  00004D                     _timerBounces:
   531                           	callstack 0
   532  00004D                     	ds	1
   533  00004E                     _row:
   534                           	callstack 0
   535  00004E                     	ds	1
   536  00004F                     _counter:
   537                           	callstack 0
   538  00004F                     	ds	1
   539                           
   540                           	psect	dataCOMRAM
   541  000079                     __pdataCOMRAM:
   542                           	callstack 0
   543  000079                     menuMotor@state:
   544                           	callstack 0
   545  000079                     	ds	1
   546                           
   547                           	psect	bssBANK0
   548  000080                     __pbssBANK0:
   549                           	callstack 0
   550  000080                     _s_Timers:
   551                           	callstack 0
   552  000080                     	ds	75
   553                           
   554                           	psect	bssBANK1
   555  000100                     __pbssBANK1:
   556                           	callstack 0
   557  000100                     _users:
   558                           	callstack 0
   559  000100                     	ds	144
   560                           
   561                           	psect	cstackCOMRAM
   562  000050                     __pcstackCOMRAM:
   563                           	callstack 0
   564  000050                     
   565                           ; 1 bytes @ 0x0
   566  000050                     	ds	1
   567  000051                     ??_RSI_High:
   568                           
   569                           ; 1 bytes @ 0x1
   570  000051                     	ds	4
   571  000055                     ??_KeGetGenericValue:
   572  000055                     ??_getFullValue:
   573  000055                     ??_EscriuPrimeraOrdre:
   574  000055                     ??_readUserData:
   575  000055                     ??_CantaPartAlta:
   576  000055                     ??_CantaPartBaixa:
   577  000055                     ?_TiGetTics:
   578                           	callstack 0
   579  000055                     TiResetTics@Handle:
   580                           	callstack 0
   581  000055                     _isPressed$522:
   582                           	callstack 0
   583  000055                     SiSendChar@myByte:
   584                           	callstack 0
   585  000055                     DaSaveUser@regUser:
   586                           	callstack 0
   587                           
   588                           ; 18 bytes @ 0x5
   589  000055                     	ds	1
   590  000056                     ??_joystickMotor:
   591  000056                     KeSetMode@menuMode:
   592                           	callstack 0
   593  000056                     CantaPartAlta@c:
   594                           	callstack 0
   595  000056                     CantaPartBaixa@c:
   596                           	callstack 0
   597  000056                     EscriuPrimeraOrdre@ordre:
   598                           	callstack 0
   599                           
   600                           ; 1 bytes @ 0x6
   601  000056                     	ds	1
   602  000057                     ??_TiGetTics:
   603  000057                     CantaIR@IR:
   604                           	callstack 0
   605  000057                     CantaData@Data:
   606                           	callstack 0
   607                           
   608                           ; 1 bytes @ 0x7
   609  000057                     	ds	2
   610  000059                     TiGetTics@Handle:
   611                           	callstack 0
   612  000059                     getFullValue@generic:
   613                           	callstack 0
   614                           
   615                           ; 1 bytes @ 0x9
   616  000059                     	ds	1
   617  00005A                     TiGetTics@actual:
   618                           	callstack 0
   619                           
   620                           ; 2 bytes @ 0xA
   621  00005A                     	ds	2
   622  00005C                     ??_SMSMotor:
   623  00005C                     ??_KeypadMotor:
   624  00005C                     WaitForBusy@Busy:
   625                           	callstack 0
   626  00005C                     Espera@Timer:
   627                           	callstack 0
   628                           
   629                           ; 2 bytes @ 0xC
   630  00005C                     	ds	1
   631  00005D                     LcGotoXY@Row:
   632                           	callstack 0
   633                           
   634                           ; 1 bytes @ 0xD
   635  00005D                     	ds	1
   636  00005E                     ??_LcGotoXY:
   637  00005E                     Espera@ms:
   638                           	callstack 0
   639                           
   640                           ; 2 bytes @ 0xE
   641  00005E                     	ds	2
   642  000060                     ??_Espera:
   643  000060                     _LcGotoXY$728:
   644                           	callstack 0
   645                           
   646                           ; 2 bytes @ 0x10
   647  000060                     	ds	1
   648  000061                     LcInit@columns:
   649                           	callstack 0
   650                           
   651                           ; 1 bytes @ 0x11
   652  000061                     	ds	1
   653  000062                     LcInit@rows:
   654                           	callstack 0
   655  000062                     LcGotoXY@Fisics:
   656                           	callstack 0
   657                           
   658                           ; 2 bytes @ 0x12
   659  000062                     	ds	1
   660  000063                     LcInit@i:
   661                           	callstack 0
   662                           
   663                           ; 2 bytes @ 0x13
   664  000063                     	ds	1
   665  000064                     LcGotoXY@Column:
   666                           	callstack 0
   667                           
   668                           ; 1 bytes @ 0x14
   669  000064                     	ds	1
   670  000065                     ??_dataMotor:
   671  000065                     LcPutChar@c:
   672                           	callstack 0
   673  000065                     DaFindUser@logUser:
   674                           	callstack 0
   675                           
   676                           ; 18 bytes @ 0x15
   677  000065                     	ds	1
   678  000066                     displayMenu@row:
   679                           	callstack 0
   680                           
   681                           ; 1 bytes @ 0x16
   682  000066                     	ds	1
   683  000067                     ??_displayMenu:
   684  000067                     
   685                           ; 1 bytes @ 0x17
   686  000067                     	ds	2
   687  000069                     displayMenu@menuMode:
   688                           	callstack 0
   689                           
   690                           ; 1 bytes @ 0x19
   691  000069                     	ds	14
   692  000077                     ??_menuMotor:
   693  000077                     
   694                           ; 1 bytes @ 0x27
   695  000077                     	ds	2
   696  000079                     
   697                           ; 1 bytes @ 0x29
   698 ;;
   699 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   700 ;;
   701 ;; *************** function _main *****************
   702 ;; Defined at:
   703 ;;		line 37 in file "main.c"
   704 ;; Parameters:    Size  Location     Type
   705 ;;		None
   706 ;; Auto vars:     Size  Location     Type
   707 ;;		None
   708 ;; Return value:  Size  Location     Type
   709 ;;                  1    wreg      void 
   710 ;; Registers used:
   711 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   712 ;; Tracked objects:
   713 ;;		On entry : 0/0
   714 ;;		On exit  : 0/0
   715 ;;		Unchanged: 0/0
   716 ;; Data sizes:     COMRAM   BANK0   BANK1
   717 ;;      Params:         0       0       0
   718 ;;      Locals:         0       0       0
   719 ;;      Temps:          0       0       0
   720 ;;      Totals:         0       0       0
   721 ;;Total ram usage:        0 bytes
   722 ;; Hardware stack levels required when called: 8
   723 ;; This function calls:
   724 ;;		_KeypadMotor
   725 ;;		_LcInit
   726 ;;		_SMSMotor
   727 ;;		_TiInitTimer
   728 ;;		_dataMotor
   729 ;;		_initData
   730 ;;		_initJoystick
   731 ;;		_initKeypad
   732 ;;		_initMenu
   733 ;;		_initSIO
   734 ;;		_joystickMotor
   735 ;;		_menuMotor
   736 ;; This function is called by:
   737 ;;		Startup code after reset
   738 ;; This function uses a non-reentrant model
   739 ;;
   740                           
   741                           	psect	text0
   742  001038                     __ptext0:
   743                           	callstack 0
   744  001038                     _main:
   745                           	callstack 23
   746                           
   747                           ;incstack = 0
   748  001038  EC54  F008         	call	_TiInitTimer	;wreg free
   749  00103C  ECB7  F008         	call	_initJoystick	;wreg free
   750  001040  ECE8  F008         	call	_initKeypad	;wreg free
   751  001044  0E10               	movlw	16
   752  001046  6E61               	movwf	LcInit@columns^0,c
   753  001048  0E02               	movlw	2
   754  00104A  ECD4  F004         	call	_LcInit
   755  00104E  EC37  F009         	call	_initSIO	;wreg free
   756  001052  EC5C  F009         	call	_initMenu	;wreg free
   757  001056  ECBD  F006         	call	_initData	;wreg free
   758  00105A                     l3411:
   759  00105A  EC98  F005         	call	_SMSMotor	;wreg free
   760  00105E  ECE3  F003         	call	_KeypadMotor	;wreg free
   761  001062  EC6B  F001         	call	_menuMotor	;wreg free
   762  001066  EC37  F005         	call	_joystickMotor	;wreg free
   763  00106A  ECCB  F002         	call	_dataMotor	;wreg free
   764  00106E  D7F5               	goto	l3411
   765  001070                     __end_of_main:
   766                           	callstack 0
   767                           
   768 ;; *************** function _menuMotor *****************
   769 ;; Defined at:
   770 ;;		line 25 in file "Menu.c"
   771 ;; Parameters:    Size  Location     Type
   772 ;;		None
   773 ;; Auto vars:     Size  Location     Type
   774 ;;		None
   775 ;; Return value:  Size  Location     Type
   776 ;;                  1    wreg      void 
   777 ;; Registers used:
   778 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   779 ;; Tracked objects:
   780 ;;		On entry : 0/0
   781 ;;		On exit  : 0/0
   782 ;;		Unchanged: 0/0
   783 ;; Data sizes:     COMRAM   BANK0   BANK1
   784 ;;      Params:         0       0       0
   785 ;;      Locals:         0       0       0
   786 ;;      Temps:          2       0       0
   787 ;;      Totals:         2       0       0
   788 ;;Total ram usage:        2 bytes
   789 ;; Hardware stack levels used: 1
   790 ;; Hardware stack levels required when called: 7
   791 ;; This function calls:
   792 ;;		_DaFindUser
   793 ;;		_DaGetIdle
   794 ;;		_DaGetStatus
   795 ;;		_DaSaveUser
   796 ;;		_JoDirection
   797 ;;		_JoMoved
   798 ;;		_KeGetCharValue
   799 ;;		_KeGetGenericValue
   800 ;;		_KeSetMode
   801 ;;		_LcClear
   802 ;;		_LcCursorOff
   803 ;;		_LcCursorOn
   804 ;;		_LcGotoXY
   805 ;;		_LcPutChar
   806 ;;		_TiGetTics
   807 ;;		_TiResetTics
   808 ;;		_displayMenu
   809 ;;		_getPresses
   810 ;;		_isPressed
   811 ;; This function is called by:
   812 ;;		_main
   813 ;; This function uses a non-reentrant model
   814 ;;
   815                           
   816                           	psect	text1
   817  0002D6                     __ptext1:
   818                           	callstack 0
   819  0002D6                     _menuMotor:
   820                           	callstack 23
   821                           
   822                           ;Menu.c: 26:     static char state = 1;;Menu.c: 27:     switch (state){
   823                           
   824                           ;incstack = 0
   825  0002D6  D12B               	goto	l3221
   826  0002D8                     l3049:
   827                           
   828                           ;Menu.c: 29:             displayMenu(0,0);
   829  0002D8  0E00               	movlw	0
   830  0002DA  6E66               	movwf	displayMenu@row^0,c
   831  0002DC  EC6E  F004         	call	_displayMenu
   832                           
   833                           ;Menu.c: 30:             if (LCDrow == 2){
   834  0002E0  0E02               	movlw	2
   835  0002E2  183F               	xorwf	_LCDrow^0,w,c
   836  0002E4  A4D8               	btfss	status,2,c
   837  0002E6  0012               	return	
   838                           
   839                           ;Menu.c: 31:                 LcCursorOff();
   840  0002E8  EC46  F009         	call	_LcCursorOff	;wreg free
   841                           
   842                           ;Menu.c: 32:                 KeSetMode(0);
   843  0002EC  0E00               	movlw	0
   844  0002EE  EC93  F008         	call	_KeSetMode
   845                           
   846                           ;Menu.c: 33:                 state = 2;
   847  0002F2  0E02               	movlw	2
   848  0002F4  6E79               	movwf	menuMotor@state^0,c
   849  0002F6  0C02               	retlw	2
   850  0002F8                     l3057:
   851                           
   852                           ;Menu.c: 37:             if (isPressed()){
   853  0002F8  EC20  F009         	call	_isPressed	;wreg free
   854  0002FC  0900               	iorlw	0
   855  0002FE  B4D8               	btfsc	status,2,c
   856  000300  0012               	return	
   857                           
   858                           ;Menu.c: 38:                 val = KeGetGenericValue() - '0';
   859  000302  EC13  F009         	call	_KeGetGenericValue	;wreg free
   860  000306  0FD0               	addlw	208
   861  000308  6E3D               	movwf	_val^0,c
   862                           
   863                           ;Menu.c: 39:                 if (val == 1||val == 2){
   864  00030A  043D               	decf	_val^0,w,c
   865  00030C  E004               	bz	u2480
   866  00030E  0E02               	movlw	2
   867  000310  183D               	xorwf	_val^0,w,c
   868  000312  A4D8               	btfss	status,2,c
   869  000314  0012               	return	
   870  000316                     u2480:
   871                           
   872                           ;Menu.c: 40:                     LcClear();
   873  000316  EC2C  F009         	call	_LcClear	;wreg free
   874                           
   875                           ;Menu.c: 41:                     LcGotoXY(0,0);
   876  00031A  0E00               	movlw	0
   877  00031C  6A5D               	clrf	LcGotoXY@Row^0,c
   878  00031E  ECF3  F005         	call	_LcGotoXY
   879                           
   880                           ;Menu.c: 42:                     KeSetMode(1);
   881  000322  0E01               	movlw	1
   882  000324  EC93  F008         	call	_KeSetMode
   883                           
   884                           ;Menu.c: 43:                     LCDcol = LCDrow = 0;
   885  000328  6A3F               	clrf	_LCDrow^0,c
   886  00032A  6A3E               	clrf	_LCDcol^0,c
   887                           
   888                           ;Menu.c: 44:                     state = 3;
   889  00032C  0E03               	movlw	3
   890  00032E  6E79               	movwf	menuMotor@state^0,c
   891  000330  0C03               	retlw	3
   892  000332                     l3071:
   893                           
   894                           ;Menu.c: 50:             displayMenu(1,0);
   895  000332  0E00               	movlw	0
   896  000334  6E66               	movwf	displayMenu@row^0,c
   897  000336  0E01               	movlw	1
   898  000338  EC6E  F004         	call	_displayMenu
   899                           
   900                           ;Menu.c: 51:             if (LCDrow == 2){
   901  00033C  0E02               	movlw	2
   902  00033E  183F               	xorwf	_LCDrow^0,w,c
   903  000340  A4D8               	btfss	status,2,c
   904  000342  0012               	return	
   905                           
   906                           ;Menu.c: 52:                 LCDrow = 0;
   907  000344  6A3F               	clrf	_LCDrow^0,c
   908                           
   909                           ;Menu.c: 53:                 LCDcol = 5;
   910  000346  0E05               	movlw	5
   911  000348  6E3E               	movwf	_LCDcol^0,c
   912                           
   913                           ;Menu.c: 54:                 LcGotoXY(LCDcol,LCDrow);
   914  00034A  D921               	call	PL52	;call to abstracted procedure
   915  00034C  ECF3  F005         	call	_LcGotoXY
   916                           
   917                           ;Menu.c: 55:                 LcCursorOn();
   918  000350  EC41  F009         	call	_LcCursorOn	;wreg free
   919                           
   920                           ;Menu.c: 56:                 state = 4;
   921  000354  0E04               	movlw	4
   922  000356  6E79               	movwf	menuMotor@state^0,c
   923  000358  0C04               	retlw	4
   924  00035A                     l3083:
   925                           
   926                           ;Menu.c: 60:             if (LCDcol >= 12 && TiGetTics(timer) >= 1200){
   927  00035A  0E0B               	movlw	11
   928  00035C  643E               	cpfsgt	_LCDcol^0,c
   929  00035E  D00B               	goto	l3089
   930  000360  5040               	movf	_timer^0,w,c
   931  000362  EC80  F008         	call	_TiGetTics
   932  000366  BE56               	btfsc	(?_TiGetTics+1)^0,7,c
   933  000368  D006               	goto	l3089
   934  00036A  ECEE  F005         	call	PL60	;call to abstracted procedure
   935  00036E  E303               	bnc	l3089
   936  000370                     u2510:
   937                           
   938                           ;Menu.c: 61:                 state = 5;
   939  000370  0E05               	movlw	5
   940  000372  6E79               	movwf	menuMotor@state^0,c
   941                           
   942                           ;Menu.c: 62:             }else if (isPressed()){
   943  000374  0C05               	retlw	5
   944  000376                     l3089:
   945  000376  EC20  F009         	call	_isPressed	;wreg free
   946  00037A  0900               	iorlw	0
   947  00037C  B4D8               	btfsc	status,2,c
   948  00037E  0012               	return	
   949                           
   950                           ;Menu.c: 63:                 TiResetTics(timer);
   951  000380  5040               	movf	_timer^0,w,c
   952  000382  EC05  F009         	call	_TiResetTics
   953                           
   954                           ;Menu.c: 64:                 if (getPresses() == 2){
   955  000386  EC63  F009         	call	_getPresses	;wreg free
   956  00038A  0A02               	xorlw	2
   957  00038C  E104               	bnz	l3099
   958                           
   959                           ;Menu.c: 65:                     LcGotoXY(LCDcol,LCDrow);
   960  00038E  D8FF               	call	PL52	;call to abstracted procedure
   961  000390  ECF3  F005         	call	_LcGotoXY
   962                           
   963                           ;Menu.c: 66:                     LCDcol--;
   964  000394  063E               	decf	_LCDcol^0,f,c
   965  000396                     l3099:
   966                           
   967                           ;Menu.c: 68:                 if (KeGetGenericValue() != '#'){
   968  000396  EC13  F009         	call	_KeGetGenericValue	;wreg free
   969  00039A  0A23               	xorlw	35
   970  00039C  E0E9               	bz	u2510
   971                           
   972                           ;Menu.c: 69:                     mUser.username[LCDcol-4] = KeGetCharValue();
   973  00039E  D8F2               	call	PL48	;call to abstracted procedure
   974  0003A0  EC50  F009         	call	_KeGetCharValue	;wreg free
   975  0003A4  6EDF               	movwf	indf2,c
   976                           
   977                           ;Menu.c: 70:                     LcPutChar(mUser.username[LCDcol-4]);
   978  0003A6  D8EE               	call	PL48	;call to abstracted procedure
   979  0003A8  50DF               	movf	indf2,w,c
   980  0003AA  EC8F  F007         	call	_LcPutChar
   981  0003AE                     l3105:
   982                           
   983                           ;Menu.c: 71:                     LCDcol++;
   984  0003AE  2A3E               	incf	_LCDcol^0,f,c
   985                           
   986                           ;Menu.c: 75:                 } else {
   987  0003B0  0012               	return	
   988  0003B2                     l3109:
   989                           
   990                           ;Menu.c: 83:             mUser.username[LCDcol-4] = '\0';
   991  0003B2  D8E8               	call	PL48	;call to abstracted procedure
   992  0003B4  6ADF               	clrf	indf2,c
   993                           
   994                           ;Menu.c: 84:             LCDrow = 1;
   995  0003B6  0E01               	movlw	1
   996  0003B8  6E3F               	movwf	_LCDrow^0,c
   997                           
   998                           ;Menu.c: 85:             LCDcol = 5;
   999  0003BA  0E05               	movlw	5
  1000  0003BC  6E3E               	movwf	_LCDcol^0,c
  1001                           
  1002                           ;Menu.c: 86:             KeSetMode(1);
  1003  0003BE  0E01               	movlw	1
  1004  0003C0  EC93  F008         	call	_KeSetMode
  1005                           
  1006                           ;Menu.c: 87:             LcGotoXY(LCDcol,LCDrow);
  1007  0003C4  D8E4               	call	PL52	;call to abstracted procedure
  1008  0003C6  ECF3  F005         	call	_LcGotoXY
  1009                           
  1010                           ;Menu.c: 88:             state = 6;
  1011  0003CA  0E06               	movlw	6
  1012  0003CC  6E79               	movwf	menuMotor@state^0,c
  1013                           
  1014                           ;Menu.c: 89:             break;
  1015  0003CE  0C06               	retlw	6
  1016  0003D0                     l3121:
  1017                           
  1018                           ;Menu.c: 91:             if (isPressed()){
  1019  0003D0  EC20  F009         	call	_isPressed	;wreg free
  1020  0003D4  0900               	iorlw	0
  1021  0003D6  B4D8               	btfsc	status,2,c
  1022  0003D8  0012               	return	
  1023                           
  1024                           ;Menu.c: 92:                 if (getPresses() == 2){
  1025  0003DA  EC63  F009         	call	_getPresses	;wreg free
  1026  0003DE  0A02               	xorlw	2
  1027  0003E0  E104               	bnz	l3129
  1028                           
  1029                           ;Menu.c: 93:                     LcGotoXY(LCDcol,LCDrow);
  1030  0003E2  D8D5               	call	PL52	;call to abstracted procedure
  1031  0003E4  ECF3  F005         	call	_LcGotoXY
  1032                           
  1033                           ;Menu.c: 94:                     LCDcol--;
  1034  0003E8  063E               	decf	_LCDcol^0,f,c
  1035  0003EA                     l3129:
  1036                           
  1037                           ;Menu.c: 97:                 if (KeGetGenericValue() != '#'){
  1038  0003EA  EC13  F009         	call	_KeGetGenericValue	;wreg free
  1039  0003EE  0A23               	xorlw	35
  1040  0003F0  E009               	bz	l3137
  1041                           
  1042                           ;Menu.c: 98:                     mUser.password[LCDcol-4] = KeGetCharValue();
  1043  0003F2  D8C3               	call	PL46	;call to abstracted procedure
  1044  0003F4  EC50  F009         	call	_KeGetCharValue	;wreg free
  1045  0003F8  6EDF               	movwf	indf2,c
  1046                           
  1047                           ;Menu.c: 99:                     LcPutChar(mUser.password[LCDcol-4]);
  1048  0003FA  D8BF               	call	PL46	;call to abstracted procedure
  1049  0003FC  50DF               	movf	indf2,w,c
  1050  0003FE  EC8F  F007         	call	_LcPutChar
  1051  000402  D7D5               	goto	l3105
  1052  000404                     l3137:
  1053                           
  1054                           ;Menu.c: 102:                     mUser.password[LCDcol-4] = '\0';
  1055  000404  D8BA               	call	PL46	;call to abstracted procedure
  1056  000406  6ADF               	clrf	indf2,c
  1057                           
  1058                           ;Menu.c: 103:                     state = 7;
  1059  000408  0E07               	movlw	7
  1060  00040A  6E79               	movwf	menuMotor@state^0,c
  1061  00040C  0C07               	retlw	7
  1062  00040E                     l3141:
  1063                           
  1064                           ;Menu.c: 109:             if (val == 1){
  1065  00040E  043D               	decf	_val^0,w,c
  1066  000410  E10C               	bnz	l3145
  1067                           
  1068                           ;Menu.c: 110:                 DaFindUser(mUser);
  1069  000412  EE20  F013         	lfsr	2,_mUser
  1070  000416  EE00  F065         	lfsr	0,DaFindUser@logUser
  1071  00041A  0E11               	movlw	17
  1072  00041C                     u2591:
  1073  00041C  CFDB FFEB          	movff	plusw2,plusw0
  1074  000420  06E8               	decf	wreg,f,c
  1075  000422  E2FC               	bc	u2591
  1076  000424  ECA5  F008         	call	_DaFindUser	;wreg free
  1077                           
  1078                           ;Menu.c: 112:             } else {
  1079  000428  D00B               	goto	l3147
  1080  00042A                     l3145:
  1081                           
  1082                           ;Menu.c: 113:                 DaSaveUser(mUser);
  1083  00042A  EE20  F013         	lfsr	2,_mUser
  1084  00042E  EE00  F055         	lfsr	0,DaSaveUser@regUser
  1085  000432  0E11               	movlw	17
  1086  000434                     u2601:
  1087  000434  CFDB FFEB          	movff	plusw2,plusw0
  1088  000438  06E8               	decf	wreg,f,c
  1089  00043A  E2FC               	bc	u2601
  1090  00043C  ECC8  F008         	call	_DaSaveUser	;wreg free
  1091  000440                     l3147:
  1092                           
  1093                           ;Menu.c: 115:             state = 8;
  1094  000440  0E08               	movlw	8
  1095  000442  6E79               	movwf	menuMotor@state^0,c
  1096                           
  1097                           ;Menu.c: 116:             break;
  1098  000444  0C08               	retlw	8
  1099  000446                     l3149:
  1100                           
  1101                           ;Menu.c: 118:             if (DaGetIdle()){
  1102  000446  EC54  F009         	call	_DaGetIdle	;wreg free
  1103  00044A  0900               	iorlw	0
  1104  00044C  B4D8               	btfsc	status,2,c
  1105  00044E  0012               	return	
  1106                           
  1107                           ;Menu.c: 119:                 if (val == 1){
  1108  000450  043D               	decf	_val^0,w,c
  1109  000452  E112               	bnz	l3165
  1110                           
  1111                           ;Menu.c: 120:                     if (DaGetStatus() == 0){
  1112  000454  EC69  F009         	call	_DaGetStatus	;wreg free
  1113  000458  0900               	iorlw	0
  1114  00045A  E104               	bnz	l3159
  1115                           
  1116                           ;Menu.c: 122:                         state = 9;
  1117  00045C  0E09               	movlw	9
  1118  00045E  6E79               	movwf	menuMotor@state^0,c
  1119                           
  1120                           ;Menu.c: 123:                         val =0;
  1121  000460  6A3D               	clrf	_val^0,c
  1122                           
  1123                           ;Menu.c: 124:                     } else if (DaGetStatus() == 1){
  1124  000462  D01E               	goto	l3179
  1125  000464                     l3159:
  1126  000464  EC69  F009         	call	_DaGetStatus	;wreg free
  1127  000468  06E8               	decf	wreg,f,c
  1128  00046A  E11A               	bnz	l3179
  1129                           
  1130                           ;Menu.c: 125:                         KeSetMode(0);
  1131  00046C  0E00               	movlw	0
  1132  00046E  EC93  F008         	call	_KeSetMode
  1133  000472                     l3163:
  1134                           
  1135                           ;Menu.c: 126:                         state = 1;
  1136  000472  0E01               	movlw	1
  1137  000474  6E79               	movwf	menuMotor@state^0,c
  1138  000476  D014               	goto	l3179
  1139  000478                     l3165:
  1140                           
  1141                           ;Menu.c: 130:                     if (DaGetStatus() == 3){
  1142  000478  EC69  F009         	call	_DaGetStatus	;wreg free
  1143  00047C  0A03               	xorlw	3
  1144  00047E  E108               	bnz	l3173
  1145                           
  1146                           ;Menu.c: 131:                         KeSetMode(1);
  1147  000480  0E01               	movlw	1
  1148  000482  EC93  F008         	call	_KeSetMode
  1149                           
  1150                           ;Menu.c: 132:                         state = 3;
  1151  000486  0E03               	movlw	3
  1152  000488  6E79               	movwf	menuMotor@state^0,c
  1153                           
  1154                           ;Menu.c: 133:                         val = 1;
  1155  00048A  0E01               	movlw	1
  1156  00048C  6E3D               	movwf	_val^0,c
  1157                           
  1158                           ;Menu.c: 134:                     } else if (DaGetStatus() == 4){
  1159  00048E  D008               	goto	l3179
  1160  000490                     l3173:
  1161  000490  EC69  F009         	call	_DaGetStatus	;wreg free
  1162  000494  0A04               	xorlw	4
  1163  000496  E104               	bnz	l3179
  1164                           
  1165                           ;Menu.c: 135:                         KeSetMode(0);
  1166  000498  0E00               	movlw	0
  1167  00049A  EC93  F008         	call	_KeSetMode
  1168  00049E  D7E9               	goto	l3163
  1169  0004A0                     l3179:
  1170                           
  1171                           ;Menu.c: 140:                 LcClear();
  1172  0004A0  EC2C  F009         	call	_LcClear	;wreg free
  1173                           
  1174                           ;Menu.c: 141:                 LcGotoXY(0,0);
  1175  0004A4  0E00               	movlw	0
  1176  0004A6  6A5D               	clrf	LcGotoXY@Row^0,c
  1177  0004A8  ECF3  F005         	call	_LcGotoXY
  1178  0004AC                     l3183:
  1179                           
  1180                           ;Menu.c: 142:                 LCDcol = LCDrow = 0;
  1181  0004AC  6A3F               	clrf	_LCDrow^0,c
  1182  0004AE  6A3E               	clrf	_LCDcol^0,c
  1183  0004B0  0012               	return	
  1184  0004B2                     l3185:
  1185                           
  1186                           ;Menu.c: 147:             displayMenu(2,val);
  1187  0004B2  C03D  F066         	movff	_val,displayMenu@row
  1188  0004B6  0E02               	movlw	2
  1189  0004B8  EC6E  F004         	call	_displayMenu
  1190                           
  1191                           ;Menu.c: 148:             if (LCDrow == 2 || LCDrow+val >= 4){
  1192  0004BC  0E02               	movlw	2
  1193  0004BE  183F               	xorwf	_LCDrow^0,w,c
  1194  0004C0  E00F               	bz	u2680
  1195  0004C2  503D               	movf	_val^0,w,c
  1196  0004C4  C03F  F077         	movff	_LCDrow,??_menuMotor
  1197  0004C8  6A78               	clrf	(??_menuMotor+1)^0,c
  1198  0004CA  2677               	addwf	??_menuMotor^0,f,c
  1199  0004CC  0E00               	movlw	0
  1200  0004CE  2278               	addwfc	(??_menuMotor+1)^0,f,c
  1201  0004D0  BE78               	btfsc	(??_menuMotor+1)^0,7,c
  1202  0004D2  0C00               	retlw	0
  1203  0004D4  5078               	movf	(??_menuMotor+1)^0,w,c
  1204  0004D6  E104               	bnz	u2680
  1205  0004D8  0E04               	movlw	4
  1206  0004DA  5C77               	subwf	??_menuMotor^0,w,c
  1207  0004DC  A0D8               	btfss	status,0,c
  1208  0004DE  0012               	return	
  1209  0004E0                     u2680:
  1210                           
  1211                           ;Menu.c: 149:                 LcCursorOff();
  1212  0004E0  EC46  F009         	call	_LcCursorOff	;wreg free
  1213                           
  1214                           ;Menu.c: 150:                 state = 10;
  1215  0004E4  0E0A               	movlw	10
  1216  0004E6  6E79               	movwf	menuMotor@state^0,c
  1217  0004E8  0C0A               	retlw	10
  1218  0004EA                     l3195:
  1219                           
  1220                           ;Menu.c: 154:             if (!JoMoved()){
  1221  0004EA  EC65  F009         	call	_JoMoved	;wreg free
  1222  0004EE  0900               	iorlw	0
  1223  0004F0  A4D8               	btfss	status,2,c
  1224  0004F2  0012               	return	
  1225                           
  1226                           ;Menu.c: 155:                 state = 11;
  1227  0004F4  0E0B               	movlw	11
  1228  0004F6  6E79               	movwf	menuMotor@state^0,c
  1229  0004F8  0C0B               	retlw	11
  1230  0004FA                     l3199:
  1231                           
  1232                           ;Menu.c: 159:             if (JoMoved()){
  1233  0004FA  EC65  F009         	call	_JoMoved	;wreg free
  1234  0004FE  0900               	iorlw	0
  1235  000500  B4D8               	btfsc	status,2,c
  1236  000502  0012               	return	
  1237                           
  1238                           ;Menu.c: 160:                 if (JoDirection() == 'S' && val < 4){
  1239  000504  EC67  F009         	call	_JoDirection	;wreg free
  1240  000508  0A53               	xorlw	83
  1241  00050A  E105               	bnz	l3207
  1242  00050C  0E04               	movlw	4
  1243  00050E  603D               	cpfslt	_val^0,c
  1244  000510  D002               	goto	l3207
  1245                           
  1246                           ;Menu.c: 161:                     val++;
  1247  000512  2A3D               	incf	_val^0,f,c
  1248                           
  1249                           ;Menu.c: 162:                 } else if(JoDirection() == 'W' && val > 0){
  1250  000514  D007               	goto	l3213
  1251  000516                     l3207:
  1252  000516  EC67  F009         	call	_JoDirection	;wreg free
  1253  00051A  0A57               	xorlw	87
  1254  00051C  E103               	bnz	l3213
  1255  00051E  503D               	movf	_val^0,w,c
  1256  000520  E001               	bz	l3213
  1257                           
  1258                           ;Menu.c: 163:                     val--;
  1259  000522  063D               	decf	_val^0,f,c
  1260  000524                     l3213:
  1261                           
  1262                           ;Menu.c: 165:                 state = 9;
  1263  000524  0E09               	movlw	9
  1264  000526  6E79               	movwf	menuMotor@state^0,c
  1265                           
  1266                           ;Menu.c: 166:                 LcClear();
  1267  000528  EC2C  F009         	call	_LcClear	;wreg free
  1268  00052C  D7BF               	goto	l3183
  1269  00052E                     l3221:
  1270  00052E  5079               	movf	menuMotor@state^0,w,c
  1271  000530  6E77               	movwf	??_menuMotor^0,c
  1272  000532  6A78               	clrf	(??_menuMotor+1)^0,c
  1273                           
  1274                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1275                           ; Switch size 1, requested type "space"
  1276                           ; Number of cases is 1, Range of values is 0 to 0
  1277                           ; switch strategies available:
  1278                           ; Name         Instructions Cycles
  1279                           ; simple_byte            4     3 (average)
  1280                           ;	Chosen strategy is simple_byte
  1281  000534  5078               	movf	(??_menuMotor+1)^0,w,c
  1282  000536  A4D8               	btfss	status,2,c
  1283  000538  0012               	return	
  1284                           
  1285                           ; Switch size 1, requested type "space"
  1286                           ; Number of cases is 11, Range of values is 1 to 11
  1287                           ; switch strategies available:
  1288                           ; Name         Instructions Cycles
  1289                           ; simple_byte           34    18 (average)
  1290                           ;	Chosen strategy is simple_byte
  1291  00053A  5077               	movf	??_menuMotor^0,w,c
  1292  00053C  0A01               	xorlw	1	; case 1
  1293  00053E  E101 D6CB          	bz	l3049
  1294  000542  0A03               	xorlw	3	; case 2
  1295  000544  E101 D6D8          	bz	l3057
  1296  000548  0A01               	xorlw	1	; case 3
  1297  00054A  E101 D6F2          	bz	l3071
  1298  00054E  0A07               	xorlw	7	; case 4
  1299  000550  E101 D703          	bz	l3083
  1300  000554  0A01               	xorlw	1	; case 5
  1301  000556  E101 D72C          	bz	l3109
  1302  00055A  0A03               	xorlw	3	; case 6
  1303  00055C  E101 D738          	bz	l3121
  1304  000560  0A01               	xorlw	1	; case 7
  1305  000562  E101 D754          	bz	l3141
  1306  000566  0A0F               	xorlw	15	; case 8
  1307  000568  E101 D76D          	bz	l3149
  1308  00056C  0A01               	xorlw	1	; case 9
  1309  00056E  E0A1               	bz	l3185
  1310  000570  0A03               	xorlw	3	; case 10
  1311  000572  E0BB               	bz	l3195
  1312  000574  0A01               	xorlw	1	; case 11
  1313  000576  E0C1               	bz	l3199
  1314  000578  0012               	return		;funcret
  1315  00057A                     __end_of_menuMotor:
  1316                           	callstack 0
  1317  00057A                     PL46:
  1318                           	callstack 23
  1319  00057A  503E               	movf	_LCDcol^0,w,c
  1320  00057C  0F18               	addlw	low (_mUser+5)
  1321  00057E  6ED9               	movwf	fsr2l,c
  1322  000580  6ADA               	clrf	fsr2h,c
  1323  000582  0012               	return	
  1324  000584                     __end_ofPL46:
  1325                           	callstack 0
  1326  000584                     PL48:
  1327                           	callstack 23
  1328  000584  503E               	movf	_LCDcol^0,w,c
  1329  000586  0F0F               	addlw	low (_mUser+252)
  1330  000588  6ED9               	movwf	fsr2l,c
  1331  00058A  6ADA               	clrf	fsr2h,c
  1332  00058C  0012               	return	
  1333  00058E                     __end_ofPL48:
  1334                           	callstack 0
  1335  00058E                     PL52:
  1336                           	callstack 23
  1337  00058E  C03F  F05D         	movff	_LCDrow,LcGotoXY@Row
  1338  000592  503E               	movf	_LCDcol^0,w,c
  1339  000594  0012               	return	
  1340  000596                     __end_ofPL52:
  1341                           	callstack 0
  1342                           
  1343 ;; *************** function _isPressed *****************
  1344 ;; Defined at:
  1345 ;;		line 207 in file "keypad.c"
  1346 ;; Parameters:    Size  Location     Type
  1347 ;;		None
  1348 ;; Auto vars:     Size  Location     Type
  1349 ;;		None
  1350 ;; Return value:  Size  Location     Type
  1351 ;;                  1    wreg      unsigned char 
  1352 ;; Registers used:
  1353 ;;		wreg, status,2, status,0
  1354 ;; Tracked objects:
  1355 ;;		On entry : 0/0
  1356 ;;		On exit  : 0/0
  1357 ;;		Unchanged: 0/0
  1358 ;; Data sizes:     COMRAM   BANK0   BANK1
  1359 ;;      Params:         0       0       0
  1360 ;;      Locals:         1       0       0
  1361 ;;      Temps:          0       0       0
  1362 ;;      Totals:         1       0       0
  1363 ;;Total ram usage:        1 bytes
  1364 ;; Hardware stack levels used: 1
  1365 ;; Hardware stack levels required when called: 2
  1366 ;; This function calls:
  1367 ;;		Nothing
  1368 ;; This function is called by:
  1369 ;;		_menuMotor
  1370 ;; This function uses a non-reentrant model
  1371 ;;
  1372                           
  1373                           	psect	text2
  1374  001240                     __ptext2:
  1375                           	callstack 0
  1376  001240                     _isPressed:
  1377                           	callstack 27
  1378                           
  1379                           ;keypad.c: 209:  return pressed && (stateSMS == 1||stateSMS == 4);
  1380                           
  1381                           ;incstack = 0
  1382  001240  6A55               	clrf	_isPressed$522^0,c
  1383  001242  5049               	movf	_pressed^0,w,c
  1384  001244  E007               	bz	l181
  1385  001246  0445               	decf	_stateSMS^0,w,c
  1386  001248  E003               	bz	u1980
  1387  00124A  0E04               	movlw	4
  1388  00124C  1845               	xorwf	_stateSMS^0,w,c
  1389  00124E  E102               	bnz	l181
  1390  001250                     u1980:
  1391  001250  0E01               	movlw	1
  1392  001252  6E55               	movwf	_isPressed$522^0,c
  1393  001254                     l181:
  1394  001254  5055               	movf	_isPressed$522^0,w,c
  1395  001256  0012               	return		;funcret
  1396  001258                     __end_of_isPressed:
  1397                           	callstack 0
  1398                           
  1399 ;; *************** function _getPresses *****************
  1400 ;; Defined at:
  1401 ;;		line 242 in file "keypad.c"
  1402 ;; Parameters:    Size  Location     Type
  1403 ;;		None
  1404 ;; Auto vars:     Size  Location     Type
  1405 ;;		None
  1406 ;; Return value:  Size  Location     Type
  1407 ;;                  1    wreg      unsigned char 
  1408 ;; Registers used:
  1409 ;;		wreg, status,2
  1410 ;; Tracked objects:
  1411 ;;		On entry : 0/0
  1412 ;;		On exit  : 0/0
  1413 ;;		Unchanged: 0/0
  1414 ;; Data sizes:     COMRAM   BANK0   BANK1
  1415 ;;      Params:         0       0       0
  1416 ;;      Locals:         0       0       0
  1417 ;;      Temps:          0       0       0
  1418 ;;      Totals:         0       0       0
  1419 ;;Total ram usage:        0 bytes
  1420 ;; Hardware stack levels used: 1
  1421 ;; Hardware stack levels required when called: 2
  1422 ;; This function calls:
  1423 ;;		Nothing
  1424 ;; This function is called by:
  1425 ;;		_menuMotor
  1426 ;; This function uses a non-reentrant model
  1427 ;;
  1428                           
  1429                           	psect	text3
  1430  0012C6                     __ptext3:
  1431                           	callstack 0
  1432  0012C6                     _getPresses:
  1433                           	callstack 27
  1434                           
  1435                           ;keypad.c: 243:     return available;
  1436                           
  1437                           ;incstack = 0
  1438  0012C6  5047               	movf	_available^0,w,c
  1439  0012C8  0012               	return		;funcret
  1440  0012CA                     __end_of_getPresses:
  1441                           	callstack 0
  1442                           
  1443 ;; *************** function _displayMenu *****************
  1444 ;; Defined at:
  1445 ;;		line 175 in file "Menu.c"
  1446 ;; Parameters:    Size  Location     Type
  1447 ;;  menuMode        1    wreg     unsigned char 
  1448 ;;  row             1   22[COMRAM] unsigned char 
  1449 ;; Auto vars:     Size  Location     Type
  1450 ;;  menuMode        1   25[COMRAM] unsigned char 
  1451 ;; Return value:  Size  Location     Type
  1452 ;;                  1    wreg      void 
  1453 ;; Registers used:
  1454 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1455 ;; Tracked objects:
  1456 ;;		On entry : 0/0
  1457 ;;		On exit  : 0/0
  1458 ;;		Unchanged: 0/0
  1459 ;; Data sizes:     COMRAM   BANK0   BANK1
  1460 ;;      Params:         1       0       0
  1461 ;;      Locals:         1       0       0
  1462 ;;      Temps:          2       0       0
  1463 ;;      Totals:         4       0       0
  1464 ;;Total ram usage:        4 bytes
  1465 ;; Hardware stack levels used: 1
  1466 ;; Hardware stack levels required when called: 6
  1467 ;; This function calls:
  1468 ;;		_LcGotoXY
  1469 ;;		_LcPutChar
  1470 ;; This function is called by:
  1471 ;;		_menuMotor
  1472 ;; This function uses a non-reentrant model
  1473 ;;
  1474                           
  1475                           	psect	text4
  1476  0008DC                     __ptext4:
  1477                           	callstack 0
  1478  0008DC                     _displayMenu:
  1479                           	callstack 23
  1480                           
  1481                           ;incstack = 0
  1482                           ;displayMenu@menuMode stored from wreg
  1483  0008DC  6E69               	movwf	displayMenu@menuMode^0,c
  1484                           
  1485                           ;Menu.c: 176:     if (menuMode == 0){
  1486  0008DE  5069               	movf	displayMenu@menuMode^0,w,c
  1487  0008E0  E10E               	bnz	l2753
  1488                           
  1489                           ;Menu.c: 177:         if (LOGINMENU[LCDrow][LCDcol] != '\0'){
  1490  0008E2  D854               	call	PL22	;call to abstracted procedure
  1491  0008E4  D838               	call	PL6	;call to abstracted procedure
  1492  0008E6  E006               	bz	l2747
  1493                           
  1494                           ;Menu.c: 178:             LcPutChar(LOGINMENU[LCDrow][LCDcol]);
  1495  0008E8  D851               	call	PL22	;call to abstracted procedure
  1496  0008EA  D835               	call	PL6	;call to abstracted procedure
  1497  0008EC  EC8F  F007         	call	_LcPutChar
  1498  0008F0                     l2745:
  1499                           
  1500                           ;Menu.c: 179:             LCDcol++;
  1501  0008F0  2A3E               	incf	_LCDcol^0,f,c
  1502                           
  1503                           ;Menu.c: 180:         } else {
  1504  0008F2  0012               	return	
  1505  0008F4                     l2747:
  1506                           
  1507                           ;Menu.c: 181:             LCDrow++;
  1508                           
  1509                           ;Menu.c: 182:             LcGotoXY(0,1);
  1510  0008F4  D855               	call	PL44	;call to abstracted procedure
  1511  0008F6  ECF3  F005         	call	_LcGotoXY
  1512  0008FA                     l2751:
  1513                           
  1514                           ;Menu.c: 183:             LCDcol = 0;
  1515  0008FA  6A3E               	clrf	_LCDcol^0,c
  1516  0008FC  0012               	return	
  1517  0008FE                     l2753:
  1518  0008FE  0469               	decf	displayMenu@menuMode^0,w,c
  1519  000900  E10C               	bnz	l2767
  1520                           
  1521                           ;Menu.c: 186:         if (LOGREGSCREEN[LCDrow][LCDcol] != '\0'){
  1522  000902  D849               	call	PL26	;call to abstracted procedure
  1523  000904  D828               	call	PL6	;call to abstracted procedure
  1524  000906  E005               	bz	l2761
  1525                           
  1526                           ;Menu.c: 187:             LcPutChar(LOGREGSCREEN[LCDrow][LCDcol]);
  1527  000908  D846               	call	PL26	;call to abstracted procedure
  1528  00090A  D825               	call	PL6	;call to abstracted procedure
  1529  00090C  EC8F  F007         	call	_LcPutChar
  1530  000910  D7EF               	goto	l2745
  1531  000912                     l2761:
  1532                           
  1533                           ;Menu.c: 190:             LCDrow++;
  1534                           
  1535                           ;Menu.c: 191:             LcGotoXY(0,1);
  1536  000912  D846               	call	PL44	;call to abstracted procedure
  1537  000914  ECF3  F005         	call	_LcGotoXY
  1538  000918  D7F0               	goto	l2751
  1539  00091A                     l2767:
  1540  00091A  0E02               	movlw	2
  1541  00091C  1869               	xorwf	displayMenu@menuMode^0,w,c
  1542  00091E  A4D8               	btfss	status,2,c
  1543  000920  0012               	return	
  1544                           
  1545                           ;Menu.c: 195:         if (LCDrow+row < 4){
  1546  000922  5066               	movf	displayMenu@row^0,w,c
  1547  000924  C03F  F067         	movff	_LCDrow,??_displayMenu
  1548  000928  6A68               	clrf	(??_displayMenu+1)^0,c
  1549  00092A  2667               	addwf	??_displayMenu^0,f,c
  1550  00092C  0E00               	movlw	0
  1551  00092E  2268               	addwfc	(??_displayMenu+1)^0,f,c
  1552  000930  BE68               	btfsc	(??_displayMenu+1)^0,7,c
  1553  000932  D006               	goto	u2060
  1554  000934  5068               	movf	(??_displayMenu+1)^0,w,c
  1555  000936  E10E               	bnz	l493
  1556  000938  0E04               	movlw	4
  1557  00093A  5C67               	subwf	??_displayMenu^0,w,c
  1558  00093C  B0D8               	btfsc	status,0,c
  1559  00093E  0012               	return	
  1560  000940                     u2060:
  1561                           
  1562                           ;Menu.c: 196:             if (MAINMENU[LCDrow+row][LCDcol] != '\0'){
  1563  000940  D813               	call	PL10	;call to abstracted procedure
  1564  000942  E004               	bz	l2777
  1565                           
  1566                           ;Menu.c: 197:                 LcPutChar(MAINMENU[LCDrow+row][LCDcol]);
  1567  000944  D811               	call	PL10	;call to abstracted procedure
  1568  000946  EC8F  F007         	call	_LcPutChar
  1569  00094A  D7D2               	goto	l2745
  1570  00094C                     l2777:
  1571                           
  1572                           ;Menu.c: 200:                 LCDrow++;
  1573                           
  1574                           ;Menu.c: 201:                 LcGotoXY(0,1);
  1575  00094C  D829               	call	PL44	;call to abstracted procedure
  1576  00094E  ECF3  F005         	call	_LcGotoXY
  1577  000952  D7D3               	goto	l2751
  1578  000954                     l493:
  1579  000954  0012               	return		;funcret
  1580  000956                     __end_of_displayMenu:
  1581                           	callstack 0
  1582  000956                     PL6:
  1583                           	callstack 23
  1584  000956  243E               	addwf	_LCDcol^0,w,c
  1585  000958  6E67               	movwf	??_displayMenu^0,c
  1586  00095A  C067  FFF6         	movff	??_displayMenu,tblptrl
  1587  00095E                     	if	1	;There is more than 1 active tblptr byte
  1588  00095E  0E02               	movlw	high __smallconst
  1589  000960  6EF7               	movwf	tblptrh,c
  1590  000962                     	endif
  1591  000962                     	if	0	;tblptru may be non-zero
  1592  000962                     	endif
  1593  000962                     	if	0	;tblptru may be non-zero
  1594  000962                     	endif
  1595  000962  0008               	tblrd		*
  1596  000964  50F5               	movf	tablat,w,c
  1597  000966  0012               	return	
  1598  000968                     __end_ofPL6:
  1599                           	callstack 0
  1600  000968                     PL10:
  1601                           	callstack 23
  1602  000968  5066               	movf	displayMenu@row^0,w,c
  1603  00096A  0D1C               	mullw	28
  1604  00096C  CFF3 F067          	movff	prodl,??_displayMenu
  1605  000970  503F               	movf	_LCDrow^0,w,c
  1606  000972  0D1C               	mullw	28
  1607  000974  50F3               	movf	243,w,c
  1608  000976  0F2F               	addlw	low _MAINMENU
  1609  000978  2467               	addwf	??_displayMenu^0,w,c
  1610  00097A  243E               	addwf	_LCDcol^0,w,c
  1611  00097C  6E68               	movwf	(??_displayMenu+1)^0,c
  1612  00097E  C068  FFF6         	movff	??_displayMenu+1,tblptrl
  1613  000982                     	if	1	;There is more than 1 active tblptr byte
  1614  000982  0E02               	movlw	high __smallconst
  1615  000984  6EF7               	movwf	tblptrh,c
  1616  000986                     	endif
  1617  000986                     	if	0	;tblptru may be non-zero
  1618  000986                     	endif
  1619  000986                     	if	0	;tblptru may be non-zero
  1620  000986                     	endif
  1621  000986  0008               	tblrd		*
  1622  000988  50F5               	movf	tablat,w,c
  1623  00098A  0012               	return	
  1624  00098C                     __end_ofPL10:
  1625                           	callstack 0
  1626  00098C                     PL22:
  1627                           	callstack 23
  1628  00098C  503F               	movf	_LCDrow^0,w,c
  1629  00098E  0D0B               	mullw	11
  1630  000990  50F3               	movf	243,w,c
  1631  000992  0F01               	addlw	low _LOGINMENU
  1632  000994  0012               	return	
  1633  000996                     __end_ofPL22:
  1634                           	callstack 0
  1635  000996                     PL26:
  1636                           	callstack 23
  1637  000996  503F               	movf	_LCDrow^0,w,c
  1638  000998  0D06               	mullw	6
  1639  00099A  50F3               	movf	243,w,c
  1640  00099C  0F17               	addlw	low _LOGREGSCREEN
  1641  00099E  0012               	return	
  1642  0009A0                     __end_ofPL26:
  1643                           	callstack 0
  1644  0009A0                     PL44:
  1645                           	callstack 23
  1646  0009A0  2A3F               	incf	_LCDrow^0,f,c
  1647  0009A2  0E01               	movlw	1
  1648  0009A4  6E5D               	movwf	LcGotoXY@Row^0,c
  1649  0009A6  0C00               	retlw	0
  1650  0009A8                     __end_ofPL44:
  1651                           	callstack 0
  1652                           
  1653 ;; *************** function _LcPutChar *****************
  1654 ;; Defined at:
  1655 ;;		line 161 in file "LcTLCD.c"
  1656 ;; Parameters:    Size  Location     Type
  1657 ;;  c               1    wreg     unsigned char 
  1658 ;; Auto vars:     Size  Location     Type
  1659 ;;  c               1   21[COMRAM] unsigned char 
  1660 ;; Return value:  Size  Location     Type
  1661 ;;                  1    wreg      void 
  1662 ;; Registers used:
  1663 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1664 ;; Tracked objects:
  1665 ;;		On entry : 0/0
  1666 ;;		On exit  : 0/0
  1667 ;;		Unchanged: 0/0
  1668 ;; Data sizes:     COMRAM   BANK0   BANK1
  1669 ;;      Params:         0       0       0
  1670 ;;      Locals:         1       0       0
  1671 ;;      Temps:          0       0       0
  1672 ;;      Totals:         1       0       0
  1673 ;;Total ram usage:        1 bytes
  1674 ;; Hardware stack levels used: 1
  1675 ;; Hardware stack levels required when called: 5
  1676 ;; This function calls:
  1677 ;;		_CantaData
  1678 ;;		_LcGotoXY
  1679 ;;		_WaitForBusy
  1680 ;; This function is called by:
  1681 ;;		_menuMotor
  1682 ;;		_displayMenu
  1683 ;; This function uses a non-reentrant model
  1684 ;;
  1685                           
  1686                           	psect	text5
  1687  000F1E                     __ptext5:
  1688                           	callstack 0
  1689  000F1E                     _LcPutChar:
  1690                           	callstack 23
  1691                           
  1692                           ;incstack = 0
  1693                           ;LcPutChar@c stored from wreg
  1694  000F1E  6E65               	movwf	LcPutChar@c^0,c
  1695                           
  1696                           ;LcTLCD.c: 171:  WaitForBusy(); CantaData(c);
  1697  000F20  ECFD  F007         	call	_WaitForBusy	;wreg free
  1698  000F24  5065               	movf	LcPutChar@c^0,w,c
  1699  000F26  EC38  F008         	call	_CantaData
  1700                           
  1701                           ;LcTLCD.c: 173:  ++ColumnAct;
  1702  000F2A  2A41               	incf	_ColumnAct^0,f,c
  1703                           
  1704                           ;LcTLCD.c: 174:  if (Rows == 3) {
  1705  000F2C  0E03               	movlw	3
  1706  000F2E  1844               	xorwf	_Rows^0,w,c
  1707  000F30  E107               	bnz	l2663
  1708                           
  1709                           ;LcTLCD.c: 175:   if (ColumnAct >= 20) {
  1710  000F32  0E13               	movlw	19
  1711  000F34  6441               	cpfsgt	_ColumnAct^0,c
  1712  000F36  0C13               	retlw	19
  1713                           
  1714                           ;LcTLCD.c: 176:    ColumnAct = 0;
  1715  000F38  6A41               	clrf	_ColumnAct^0,c
  1716                           
  1717                           ;LcTLCD.c: 177:    if (++RowAct >= 4) RowAct = 0;
  1718  000F3A  2A42               	incf	_RowAct^0,f,c
  1719  000F3C  0E03               	movlw	3
  1720  000F3E  D009               	goto	L1
  1721  000F40                     l2663:
  1722                           
  1723                           ;LcTLCD.c: 181:  if (Rows == 2) {
  1724  000F40  0E02               	movlw	2
  1725  000F42  1844               	xorwf	_Rows^0,w,c
  1726  000F44  E10A               	bnz	l2675
  1727                           
  1728                           ;LcTLCD.c: 182:   if (ColumnAct >= 40) {
  1729  000F46  0E27               	movlw	39
  1730  000F48  6441               	cpfsgt	_ColumnAct^0,c
  1731  000F4A  0C27               	retlw	39
  1732                           
  1733                           ;LcTLCD.c: 183:    ColumnAct = 0;
  1734  000F4C  6A41               	clrf	_ColumnAct^0,c
  1735                           
  1736                           ;LcTLCD.c: 184:    if (++RowAct >= 2) RowAct = 0;
  1737  000F4E  2A42               	incf	_RowAct^0,f,c
  1738  000F50  0E01               	movlw	1
  1739  000F52                     L1:
  1740  000F52  6442               	cpfsgt	_RowAct^0,c
  1741  000F54  D009               	goto	l2681
  1742  000F56  6A42               	clrf	_RowAct^0,c
  1743  000F58  D007               	goto	l2681
  1744  000F5A                     l2675:
  1745                           
  1746                           ;LcTLCD.c: 188:  if (RowAct == 1) {
  1747  000F5A  0442               	decf	_RowAct^0,w,c
  1748  000F5C  A4D8               	btfss	status,2,c
  1749  000F5E  0012               	return	
  1750                           
  1751                           ;LcTLCD.c: 189:   if (ColumnAct >= 40) ColumnAct = 0;
  1752  000F60  0E27               	movlw	39
  1753  000F62  6441               	cpfsgt	_ColumnAct^0,c
  1754  000F64  D001               	goto	l2681
  1755  000F66  6A41               	clrf	_ColumnAct^0,c
  1756  000F68                     l2681:
  1757                           
  1758                           ;LcTLCD.c: 190:   LcGotoXY(ColumnAct, RowAct);
  1759  000F68  C042  F05D         	movff	_RowAct,LcGotoXY@Row
  1760  000F6C  5041               	movf	_ColumnAct^0,w,c
  1761  000F6E  EFF3  F005         	goto	_LcGotoXY
  1762  000F72                     __end_of_LcPutChar:
  1763                           	callstack 0
  1764                           
  1765 ;; *************** function _CantaData *****************
  1766 ;; Defined at:
  1767 ;;		line 245 in file "LcTLCD.c"
  1768 ;; Parameters:    Size  Location     Type
  1769 ;;  Data            1    wreg     unsigned char 
  1770 ;; Auto vars:     Size  Location     Type
  1771 ;;  Data            1    7[COMRAM] unsigned char 
  1772 ;; Return value:  Size  Location     Type
  1773 ;;                  1    wreg      void 
  1774 ;; Registers used:
  1775 ;;		wreg, status,2, status,0, cstack
  1776 ;; Tracked objects:
  1777 ;;		On entry : 0/0
  1778 ;;		On exit  : 0/0
  1779 ;;		Unchanged: 0/0
  1780 ;; Data sizes:     COMRAM   BANK0   BANK1
  1781 ;;      Params:         0       0       0
  1782 ;;      Locals:         1       0       0
  1783 ;;      Temps:          0       0       0
  1784 ;;      Totals:         1       0       0
  1785 ;;Total ram usage:        1 bytes
  1786 ;; Hardware stack levels used: 1
  1787 ;; Hardware stack levels required when called: 3
  1788 ;; This function calls:
  1789 ;;		_CantaPartAlta
  1790 ;;		_CantaPartBaixa
  1791 ;; This function is called by:
  1792 ;;		_LcPutChar
  1793 ;; This function uses a non-reentrant model
  1794 ;;
  1795                           
  1796                           	psect	text6
  1797  001070                     __ptext6:
  1798                           	callstack 0
  1799  001070                     _CantaData:
  1800                           	callstack 24
  1801                           
  1802                           ;incstack = 0
  1803                           ;CantaData@Data stored from wreg
  1804  001070  6E57               	movwf	CantaData@Data^0,c
  1805                           
  1806                           ;LcTLCD.c: 246:  (TRISDbits.TRISD0 = TRISDbits.TRISD1 = TRISDbits.TRISD2 = TRISDbits.TRI
      +                          SD3 = 0);
  1807  001072  9695               	bcf	149,3,c	;volatile
  1808  001074  9495               	bcf	149,2,c	;volatile
  1809  001076  9295               	bcf	149,1,c	;volatile
  1810  001078  9095               	bcf	149,0,c	;volatile
  1811                           
  1812                           ;LcTLCD.c: 247:  (LATDbits.LATD4 = 1);
  1813  00107A  888C               	bsf	140,4,c	;volatile
  1814                           
  1815                           ;LcTLCD.c: 248:  (LATDbits.LATD5 = 0);
  1816  00107C  9A8C               	bcf	140,5,c	;volatile
  1817                           
  1818                           ;LcTLCD.c: 249:  (LATDbits.LATD6 = 1);
  1819  00107E  8C8C               	bsf	140,6,c	;volatile
  1820                           
  1821                           ;LcTLCD.c: 250:  CantaPartAlta(Data);
  1822  001080  5057               	movf	CantaData@Data^0,w,c
  1823  001082  EC2C  F007         	call	_CantaPartAlta
  1824                           
  1825                           ;LcTLCD.c: 251:  (LATDbits.LATD6 = 1);
  1826                           
  1827                           ;LcTLCD.c: 252:  (LATDbits.LATD6 = 0);
  1828                           
  1829                           ;LcTLCD.c: 253:  (LATDbits.LATD6 = 0);
  1830                           
  1831                           ;LcTLCD.c: 254:  (LATDbits.LATD6 = 1);
  1832  001086  D80B               	call	PL64	;call to abstracted procedure
  1833                           
  1834                           ;LcTLCD.c: 255:  CantaPartBaixa(Data);
  1835  001088  5057               	movf	CantaData@Data^0,w,c
  1836  00108A  ECF9  F006         	call	_CantaPartBaixa
  1837                           
  1838                           ;LcTLCD.c: 256:  (LATDbits.LATD6 = 1);
  1839                           
  1840                           ;LcTLCD.c: 257:  (LATDbits.LATD6 = 0);
  1841                           
  1842                           ;LcTLCD.c: 258:  (TRISDbits.TRISD0 = TRISDbits.TRISD1 = TRISDbits.TRISD2 = TRISDbits.TRI
      +                          SD3 = 1);
  1843  00108E  D000               	goto	PL36	;call to abstracted procedure
  1844  001090                     __end_of_CantaData:
  1845                           	callstack 0
  1846  001090                     PL36:
  1847                           	callstack 23
  1848  001090  8C8C               	bsf	140,6,c	;volatile
  1849  001092  9C8C               	bcf	140,6,c	;volatile
  1850  001094  8695               	bsf	149,3,c	;volatile
  1851  001096  8495               	bsf	149,2,c	;volatile
  1852  001098  8295               	bsf	149,1,c	;volatile
  1853  00109A  8095               	bsf	149,0,c	;volatile
  1854  00109C  0012               	return		;funcret
  1855  00109E                     __end_ofPL36:
  1856                           	callstack 0
  1857  00109E                     PL64:
  1858                           	callstack 23
  1859  00109E  8C8C               	bsf	140,6,c	;volatile
  1860  0010A0  9C8C               	bcf	140,6,c	;volatile
  1861  0010A2  9C8C               	bcf	140,6,c	;volatile
  1862  0010A4  8C8C               	bsf	140,6,c	;volatile
  1863  0010A6  0012               	return	
  1864  0010A8                     __end_ofPL64:
  1865                           	callstack 0
  1866                           
  1867 ;; *************** function _LcCursorOn *****************
  1868 ;; Defined at:
  1869 ;;		line 120 in file "LcTLCD.c"
  1870 ;; Parameters:    Size  Location     Type
  1871 ;;		None
  1872 ;; Auto vars:     Size  Location     Type
  1873 ;;		None
  1874 ;; Return value:  Size  Location     Type
  1875 ;;                  1    wreg      void 
  1876 ;; Registers used:
  1877 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1878 ;; Tracked objects:
  1879 ;;		On entry : 0/0
  1880 ;;		On exit  : 0/0
  1881 ;;		Unchanged: 0/0
  1882 ;; Data sizes:     COMRAM   BANK0   BANK1
  1883 ;;      Params:         0       0       0
  1884 ;;      Locals:         0       0       0
  1885 ;;      Temps:          0       0       0
  1886 ;;      Totals:         0       0       0
  1887 ;;Total ram usage:        0 bytes
  1888 ;; Hardware stack levels used: 1
  1889 ;; Hardware stack levels required when called: 4
  1890 ;; This function calls:
  1891 ;;		_CantaIR
  1892 ;;		_WaitForBusy
  1893 ;; This function is called by:
  1894 ;;		_menuMotor
  1895 ;; This function uses a non-reentrant model
  1896 ;;
  1897                           
  1898                           	psect	text7
  1899  001282                     __ptext7:
  1900                           	callstack 0
  1901  001282                     _LcCursorOn:
  1902                           	callstack 25
  1903                           
  1904                           ;LcTLCD.c: 123:  WaitForBusy();
  1905                           
  1906                           ;incstack = 0
  1907  001282  ECFD  F007         	call	_WaitForBusy	;wreg free
  1908                           
  1909                           ;LcTLCD.c: 124:  CantaIR(0x08 | 0x04 | 0x02);
  1910  001286  0E0E               	movlw	14
  1911  001288  EFF7  F008         	goto	_CantaIR
  1912  00128C                     __end_of_LcCursorOn:
  1913                           	callstack 0
  1914                           
  1915 ;; *************** function _LcCursorOff *****************
  1916 ;; Defined at:
  1917 ;;		line 127 in file "LcTLCD.c"
  1918 ;; Parameters:    Size  Location     Type
  1919 ;;		None
  1920 ;; Auto vars:     Size  Location     Type
  1921 ;;		None
  1922 ;; Return value:  Size  Location     Type
  1923 ;;                  1    wreg      void 
  1924 ;; Registers used:
  1925 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1926 ;; Tracked objects:
  1927 ;;		On entry : 0/0
  1928 ;;		On exit  : 0/0
  1929 ;;		Unchanged: 0/0
  1930 ;; Data sizes:     COMRAM   BANK0   BANK1
  1931 ;;      Params:         0       0       0
  1932 ;;      Locals:         0       0       0
  1933 ;;      Temps:          0       0       0
  1934 ;;      Totals:         0       0       0
  1935 ;;Total ram usage:        0 bytes
  1936 ;; Hardware stack levels used: 1
  1937 ;; Hardware stack levels required when called: 4
  1938 ;; This function calls:
  1939 ;;		_CantaIR
  1940 ;;		_WaitForBusy
  1941 ;; This function is called by:
  1942 ;;		_menuMotor
  1943 ;; This function uses a non-reentrant model
  1944 ;;
  1945                           
  1946                           	psect	text8
  1947  00128C                     __ptext8:
  1948                           	callstack 0
  1949  00128C                     _LcCursorOff:
  1950                           	callstack 25
  1951                           
  1952                           ;LcTLCD.c: 130:  WaitForBusy();
  1953                           
  1954                           ;incstack = 0
  1955  00128C  ECFD  F007         	call	_WaitForBusy	;wreg free
  1956                           
  1957                           ;LcTLCD.c: 131:  CantaIR(0x08 | 0x04);
  1958  001290  0E0C               	movlw	12
  1959  001292  EFF7  F008         	goto	_CantaIR
  1960  001296                     __end_of_LcCursorOff:
  1961                           	callstack 0
  1962                           
  1963 ;; *************** function _LcClear *****************
  1964 ;; Defined at:
  1965 ;;		line 113 in file "LcTLCD.c"
  1966 ;; Parameters:    Size  Location     Type
  1967 ;;		None
  1968 ;; Auto vars:     Size  Location     Type
  1969 ;;		None
  1970 ;; Return value:  Size  Location     Type
  1971 ;;                  1    wreg      void 
  1972 ;; Registers used:
  1973 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1974 ;; Tracked objects:
  1975 ;;		On entry : 0/0
  1976 ;;		On exit  : 0/0
  1977 ;;		Unchanged: 0/0
  1978 ;; Data sizes:     COMRAM   BANK0   BANK1
  1979 ;;      Params:         0       0       0
  1980 ;;      Locals:         0       0       0
  1981 ;;      Temps:          0       0       0
  1982 ;;      Totals:         0       0       0
  1983 ;;Total ram usage:        0 bytes
  1984 ;; Hardware stack levels used: 1
  1985 ;; Hardware stack levels required when called: 4
  1986 ;; This function calls:
  1987 ;;		_CantaIR
  1988 ;;		_Espera
  1989 ;;		_WaitForBusy
  1990 ;; This function is called by:
  1991 ;;		_menuMotor
  1992 ;; This function uses a non-reentrant model
  1993 ;;
  1994                           
  1995                           	psect	text9
  1996  001258                     __ptext9:
  1997                           	callstack 0
  1998  001258                     _LcClear:
  1999                           	callstack 25
  2000                           
  2001                           ;LcTLCD.c: 116:  WaitForBusy(); CantaIR(0x01);
  2002                           
  2003                           ;incstack = 0
  2004  001258  ECFD  F007         	call	_WaitForBusy	;wreg free
  2005  00125C  0E01               	movlw	1
  2006  00125E  ECF7  F008         	call	_CantaIR
  2007                           
  2008                           ;LcTLCD.c: 117:  Espera(Timer, 3);
  2009  001262  EC31  F005         	call	PL8	;call to abstracted procedure
  2010  001266  0E03               	movlw	3
  2011  001268  6E5E               	movwf	Espera@ms^0,c
  2012  00126A  EFD8  F008         	goto	_Espera	;wreg free
  2013  00126E                     __end_of_LcClear:
  2014                           	callstack 0
  2015                           
  2016 ;; *************** function _KeSetMode *****************
  2017 ;; Defined at:
  2018 ;;		line 247 in file "keypad.c"
  2019 ;; Parameters:    Size  Location     Type
  2020 ;;  menuMode        1    wreg     unsigned char 
  2021 ;; Auto vars:     Size  Location     Type
  2022 ;;  menuMode        1    6[COMRAM] unsigned char 
  2023 ;; Return value:  Size  Location     Type
  2024 ;;                  1    wreg      void 
  2025 ;; Registers used:
  2026 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2027 ;; Tracked objects:
  2028 ;;		On entry : 0/0
  2029 ;;		On exit  : 0/0
  2030 ;;		Unchanged: 0/0
  2031 ;; Data sizes:     COMRAM   BANK0   BANK1
  2032 ;;      Params:         0       0       0
  2033 ;;      Locals:         1       0       0
  2034 ;;      Temps:          0       0       0
  2035 ;;      Totals:         1       0       0
  2036 ;;Total ram usage:        1 bytes
  2037 ;; Hardware stack levels used: 1
  2038 ;; Hardware stack levels required when called: 3
  2039 ;; This function calls:
  2040 ;;		_TiResetTics
  2041 ;; This function is called by:
  2042 ;;		_menuMotor
  2043 ;; This function uses a non-reentrant model
  2044 ;;
  2045                           
  2046                           	psect	text10
  2047  001126                     __ptext10:
  2048                           	callstack 0
  2049  001126                     _KeSetMode:
  2050                           	callstack 26
  2051                           
  2052                           ;incstack = 0
  2053                           ;KeSetMode@menuMode stored from wreg
  2054  001126  6E56               	movwf	KeSetMode@menuMode^0,c
  2055                           
  2056                           ;keypad.c: 248:     if (menuMode == 1){
  2057  001128  0456               	decf	KeSetMode@menuMode^0,w,c
  2058  00112A  E108               	bnz	l2721
  2059                           
  2060                           ;keypad.c: 249:         previous = 0;
  2061  00112C  6A4A               	clrf	_previous^0,c
  2062                           
  2063                           ;keypad.c: 250:         numPresses = 0;
  2064  00112E  6A48               	clrf	_numPresses^0,c
  2065                           
  2066                           ;keypad.c: 251:         available = 0;
  2067  001130  6A47               	clrf	_available^0,c
  2068                           
  2069                           ;keypad.c: 252:         stateSMS = 2;
  2070  001132  0E02               	movlw	2
  2071  001134  6E45               	movwf	_stateSMS^0,c
  2072                           
  2073                           ;keypad.c: 253:         TiResetTics(timer_SMS);
  2074  001136  504C               	movf	_timer_SMS^0,w,c
  2075  001138  EF05  F009         	goto	_TiResetTics
  2076  00113C                     l2721:
  2077  00113C  5056               	movf	KeSetMode@menuMode^0,w,c
  2078  00113E  A4D8               	btfss	status,2,c
  2079  001140  0012               	return	
  2080                           
  2081                           ;keypad.c: 255:         stateSMS = 4;
  2082  001142  D000               	goto	PL70	;call to abstracted procedure
  2083  001144                     __end_of_KeSetMode:
  2084                           	callstack 0
  2085  001144                     PL70:
  2086                           	callstack 26
  2087  001144  0E04               	movlw	4
  2088  001146  6E45               	movwf	_stateSMS^0,c
  2089  001148  0C04               	retlw	4
  2090  00114A                     __end_ofPL70:
  2091                           	callstack 0
  2092                           
  2093 ;; *************** function _KeGetCharValue *****************
  2094 ;; Defined at:
  2095 ;;		line 221 in file "keypad.c"
  2096 ;; Parameters:    Size  Location     Type
  2097 ;;		None
  2098 ;; Auto vars:     Size  Location     Type
  2099 ;;		None
  2100 ;; Return value:  Size  Location     Type
  2101 ;;                  1    wreg      unsigned char 
  2102 ;; Registers used:
  2103 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2104 ;; Tracked objects:
  2105 ;;		On entry : 0/0
  2106 ;;		On exit  : 0/0
  2107 ;;		Unchanged: 0/0
  2108 ;; Data sizes:     COMRAM   BANK0   BANK1
  2109 ;;      Params:         0       0       0
  2110 ;;      Locals:         0       0       0
  2111 ;;      Temps:          0       0       0
  2112 ;;      Totals:         0       0       0
  2113 ;;Total ram usage:        0 bytes
  2114 ;; Hardware stack levels used: 1
  2115 ;; Hardware stack levels required when called: 4
  2116 ;; This function calls:
  2117 ;;		_KeGetGenericValue
  2118 ;;		_getFullValue
  2119 ;; This function is called by:
  2120 ;;		_menuMotor
  2121 ;; This function uses a non-reentrant model
  2122 ;;
  2123                           
  2124                           	psect	text11
  2125  0012A0                     __ptext11:
  2126                           	callstack 0
  2127  0012A0                     _KeGetCharValue:
  2128                           	callstack 25
  2129                           
  2130                           ;keypad.c: 222:     return getFullValue(KeGetGenericValue());
  2131                           
  2132                           ;incstack = 0
  2133  0012A0  EC13  F009         	call	_KeGetGenericValue	;wreg free
  2134  0012A4  EF5F  F007         	goto	_getFullValue
  2135  0012A8                     __end_of_KeGetCharValue:
  2136                           	callstack 0
  2137                           
  2138 ;; *************** function _getFullValue *****************
  2139 ;; Defined at:
  2140 ;;		line 230 in file "keypad.c"
  2141 ;; Parameters:    Size  Location     Type
  2142 ;;  generic         1    wreg     unsigned char 
  2143 ;; Auto vars:     Size  Location     Type
  2144 ;;  generic         1    9[COMRAM] unsigned char 
  2145 ;; Return value:  Size  Location     Type
  2146 ;;                  1    wreg      unsigned char 
  2147 ;; Registers used:
  2148 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
  2149 ;; Tracked objects:
  2150 ;;		On entry : 0/0
  2151 ;;		On exit  : 0/0
  2152 ;;		Unchanged: 0/0
  2153 ;; Data sizes:     COMRAM   BANK0   BANK1
  2154 ;;      Params:         0       0       0
  2155 ;;      Locals:         1       0       0
  2156 ;;      Temps:          4       0       0
  2157 ;;      Totals:         5       0       0
  2158 ;;Total ram usage:        5 bytes
  2159 ;; Hardware stack levels used: 1
  2160 ;; Hardware stack levels required when called: 2
  2161 ;; This function calls:
  2162 ;;		Nothing
  2163 ;; This function is called by:
  2164 ;;		_KeGetCharValue
  2165 ;; This function uses a non-reentrant model
  2166 ;;
  2167                           
  2168                           	psect	text12
  2169  000EBE                     __ptext12:
  2170                           	callstack 0
  2171  000EBE                     _getFullValue:
  2172                           	callstack 26
  2173                           
  2174                           ;incstack = 0
  2175                           ;getFullValue@generic stored from wreg
  2176  000EBE  6E59               	movwf	getFullValue@generic^0,c
  2177                           
  2178                           ;keypad.c: 232:     if (generic - '0' >= 2 && generic - '0' <= 9){
  2179  000EC0  D822               	call	PL30	;call to abstracted procedure
  2180  000EC2  E103               	bnz	u250
  2181  000EC4  0E02               	movlw	2
  2182  000EC6  5C57               	subwf	(??_getFullValue+2)^0,w,c
  2183  000EC8  E30C               	bnc	l1531
  2184  000ECA                     u250:
  2185  000ECA  D81D               	call	PL30	;call to abstracted procedure
  2186  000ECC  E10A               	bnz	l1531
  2187  000ECE  0E0A               	movlw	10
  2188  000ED0  5C57               	subwf	(??_getFullValue+2)^0,w,c
  2189  000ED2  E207               	bc	l1531
  2190                           
  2191                           ;keypad.c: 233:         if (SMSTABLE[generic - '0' - 1][(numPresses-1)] == '\0'){
  2192  000ED4  D80D               	call	PL14	;call to abstracted procedure
  2193  000ED6  D807               	call	PL12	;call to abstracted procedure
  2194  000ED8  E102               	bnz	l1527
  2195                           
  2196                           ;keypad.c: 234:             numPresses = 1;
  2197  000EDA  0E01               	movlw	1
  2198  000EDC  6E48               	movwf	_numPresses^0,c
  2199  000EDE                     l1527:
  2200                           
  2201                           ;keypad.c: 236:         return SMSTABLE[generic - '0' - 1][(numPresses-1)];
  2202  000EDE  D808               	call	PL14	;call to abstracted procedure
  2203  000EE0  D002               	goto	PL12	;call to abstracted procedure
  2204  000EE2                     l1531:
  2205                           
  2206                           ;keypad.c: 238:     return generic;
  2207  000EE2  5059               	movf	getFullValue@generic^0,w,c
  2208  000EE4  0012               	return		;funcret
  2209  000EE6                     __end_of_getFullValue:
  2210                           	callstack 0
  2211  000EE6                     PL12:
  2212                           	callstack 26
  2213  000EE6  0E02               	movlw	high __smallconst
  2214  000EE8  6EF7               	movwf	tblptrh,c
  2215  000EEA                     	endif
  2216  000EEA                     	if	0	;tblptru may be non-zero
  2217  000EEA                     	endif
  2218  000EEA                     	if	0	;tblptru may be non-zero
  2219  000EEA                     	endif
  2220  000EEA  0008               	tblrd		*
  2221  000EEC  50F5               	movf	tablat,w,c
  2222  000EEE  0012               	return	
  2223  000EF0                     __end_ofPL12:
  2224                           	callstack 0
  2225  000EF0                     PL14:
  2226                           	callstack 26
  2227  000EF0  5059               	movf	getFullValue@generic^0,w,c
  2228  000EF2  0D06               	mullw	6
  2229  000EF4  50F3               	movf	243,w,c
  2230  000EF6  0F9F               	addlw	low _SMSTABLE
  2231  000EF8  2448               	addwf	_numPresses^0,w,c
  2232  000EFA  6E55               	movwf	??_getFullValue^0,c
  2233  000EFC  0ED9               	movlw	217
  2234  000EFE  2655               	addwf	??_getFullValue^0,f,c
  2235  000F00  C055  FFF6         	movff	??_getFullValue,tblptrl
  2236  000F04                     	if	1	;There is more than 1 active tblptr byte
  2237  000F04  0CD9               	retlw	217
  2238  000F06                     __end_ofPL14:
  2239                           	callstack 0
  2240  000F06                     PL30:
  2241                           	callstack 26
  2242  000F06  0ED0               	movlw	208
  2243  000F08  6E55               	movwf	??_getFullValue^0,c
  2244  000F0A  6856               	setf	(??_getFullValue+1)^0,c
  2245  000F0C  5059               	movf	getFullValue@generic^0,w,c
  2246  000F0E  6E57               	movwf	(??_getFullValue+2)^0,c
  2247  000F10  6A58               	clrf	(??_getFullValue+3)^0,c
  2248  000F12  5055               	movf	??_getFullValue^0,w,c
  2249  000F14  2657               	addwf	(??_getFullValue+2)^0,f,c
  2250  000F16  5056               	movf	(??_getFullValue+1)^0,w,c
  2251  000F18  2258               	addwfc	(??_getFullValue+3)^0,f,c
  2252  000F1A  5058               	movf	(??_getFullValue+3)^0,w,c
  2253  000F1C  0012               	return	
  2254  000F1E                     __end_ofPL30:
  2255                           	callstack 0
  2256                           
  2257 ;; *************** function _JoMoved *****************
  2258 ;; Defined at:
  2259 ;;		line 98 in file "Joystick.c"
  2260 ;; Parameters:    Size  Location     Type
  2261 ;;		None
  2262 ;; Auto vars:     Size  Location     Type
  2263 ;;		None
  2264 ;; Return value:  Size  Location     Type
  2265 ;;                  1    wreg      unsigned char 
  2266 ;; Registers used:
  2267 ;;		wreg, status,2
  2268 ;; Tracked objects:
  2269 ;;		On entry : 0/0
  2270 ;;		On exit  : 0/0
  2271 ;;		Unchanged: 0/0
  2272 ;; Data sizes:     COMRAM   BANK0   BANK1
  2273 ;;      Params:         0       0       0
  2274 ;;      Locals:         0       0       0
  2275 ;;      Temps:          0       0       0
  2276 ;;      Totals:         0       0       0
  2277 ;;Total ram usage:        0 bytes
  2278 ;; Hardware stack levels used: 1
  2279 ;; Hardware stack levels required when called: 2
  2280 ;; This function calls:
  2281 ;;		Nothing
  2282 ;; This function is called by:
  2283 ;;		_menuMotor
  2284 ;; This function uses a non-reentrant model
  2285 ;;
  2286                           
  2287                           	psect	text13
  2288  0012CA                     __ptext13:
  2289                           	callstack 0
  2290  0012CA                     _JoMoved:
  2291                           	callstack 27
  2292                           
  2293                           ;Joystick.c: 99:     return moved;
  2294                           
  2295                           ;incstack = 0
  2296  0012CA  5039               	movf	_moved^0,w,c
  2297  0012CC  0012               	return		;funcret
  2298  0012CE                     __end_of_JoMoved:
  2299                           	callstack 0
  2300                           
  2301 ;; *************** function _JoDirection *****************
  2302 ;; Defined at:
  2303 ;;		line 102 in file "Joystick.c"
  2304 ;; Parameters:    Size  Location     Type
  2305 ;;		None
  2306 ;; Auto vars:     Size  Location     Type
  2307 ;;		None
  2308 ;; Return value:  Size  Location     Type
  2309 ;;                  1    wreg      unsigned char 
  2310 ;; Registers used:
  2311 ;;		wreg, status,2
  2312 ;; Tracked objects:
  2313 ;;		On entry : 0/0
  2314 ;;		On exit  : 0/0
  2315 ;;		Unchanged: 0/0
  2316 ;; Data sizes:     COMRAM   BANK0   BANK1
  2317 ;;      Params:         0       0       0
  2318 ;;      Locals:         0       0       0
  2319 ;;      Temps:          0       0       0
  2320 ;;      Totals:         0       0       0
  2321 ;;Total ram usage:        0 bytes
  2322 ;; Hardware stack levels used: 1
  2323 ;; Hardware stack levels required when called: 2
  2324 ;; This function calls:
  2325 ;;		Nothing
  2326 ;; This function is called by:
  2327 ;;		_menuMotor
  2328 ;; This function uses a non-reentrant model
  2329 ;;
  2330                           
  2331                           	psect	text14
  2332  0012CE                     __ptext14:
  2333                           	callstack 0
  2334  0012CE                     _JoDirection:
  2335                           	callstack 27
  2336                           
  2337                           ;Joystick.c: 103:     return send;
  2338                           
  2339                           ;incstack = 0
  2340  0012CE  503C               	movf	_send^0,w,c
  2341  0012D0  0012               	return		;funcret
  2342  0012D2                     __end_of_JoDirection:
  2343                           	callstack 0
  2344                           
  2345 ;; *************** function _DaSaveUser *****************
  2346 ;; Defined at:
  2347 ;;		line 228 in file "EEPROM.c"
  2348 ;; Parameters:    Size  Location     Type
  2349 ;;  regUser        18    5[COMRAM] struct .
  2350 ;; Auto vars:     Size  Location     Type
  2351 ;;		None
  2352 ;; Return value:  Size  Location     Type
  2353 ;;                  1    wreg      void 
  2354 ;; Registers used:
  2355 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  2356 ;; Tracked objects:
  2357 ;;		On entry : 0/0
  2358 ;;		On exit  : 0/0
  2359 ;;		Unchanged: 0/0
  2360 ;; Data sizes:     COMRAM   BANK0   BANK1
  2361 ;;      Params:        18       0       0
  2362 ;;      Locals:         0       0       0
  2363 ;;      Temps:          0       0       0
  2364 ;;      Totals:        18       0       0
  2365 ;;Total ram usage:       18 bytes
  2366 ;; Hardware stack levels used: 1
  2367 ;; Hardware stack levels required when called: 2
  2368 ;; This function calls:
  2369 ;;		Nothing
  2370 ;; This function is called by:
  2371 ;;		_menuMotor
  2372 ;; This function uses a non-reentrant model
  2373 ;;
  2374                           
  2375                           	psect	text15
  2376  001190                     __ptext15:
  2377                           	callstack 0
  2378  001190                     _DaSaveUser:
  2379                           	callstack 27
  2380                           
  2381                           ;EEPROM.c: 229:     state = 5;
  2382                           
  2383                           ;incstack = 0
  2384  001190  0E05               	movlw	5
  2385  001192  6E37               	movwf	_state@EEPROM$F1414^0,c
  2386                           
  2387                           ;EEPROM.c: 230:     position = 0;
  2388  001194  6A35               	clrf	_position^0,c
  2389                           
  2390                           ;EEPROM.c: 231:     userNum = 0;
  2391  001196  6A36               	clrf	_userNum^0,c
  2392                           
  2393                           ;EEPROM.c: 232:     mUser = regUser;
  2394  001198  EE20  F055         	lfsr	2,DaSaveUser@regUser
  2395  00119C  EE10  F001         	lfsr	1,_mUser@EEPROM$F1418
  2396  0011A0  0E11               	movlw	17
  2397  0011A2                     u2091:
  2398  0011A2  CFDB FFE3          	movff	plusw2,plusw1
  2399  0011A6  06E8               	decf	wreg,f,c
  2400  0011A8  E2FC               	bc	u2091
  2401                           
  2402                           ;EEPROM.c: 233:     status = 2;
  2403  0011AA  0E02               	movlw	2
  2404  0011AC  6E34               	movwf	_status^0,c
  2405  0011AE  0C02               	retlw	2	;funcret
  2406  0011B0                     __end_of_DaSaveUser:
  2407                           	callstack 0
  2408                           
  2409 ;; *************** function _DaGetStatus *****************
  2410 ;; Defined at:
  2411 ;;		line 236 in file "EEPROM.c"
  2412 ;; Parameters:    Size  Location     Type
  2413 ;;		None
  2414 ;; Auto vars:     Size  Location     Type
  2415 ;;		None
  2416 ;; Return value:  Size  Location     Type
  2417 ;;                  1    wreg      unsigned char 
  2418 ;; Registers used:
  2419 ;;		wreg, status,2
  2420 ;; Tracked objects:
  2421 ;;		On entry : 0/0
  2422 ;;		On exit  : 0/0
  2423 ;;		Unchanged: 0/0
  2424 ;; Data sizes:     COMRAM   BANK0   BANK1
  2425 ;;      Params:         0       0       0
  2426 ;;      Locals:         0       0       0
  2427 ;;      Temps:          0       0       0
  2428 ;;      Totals:         0       0       0
  2429 ;;Total ram usage:        0 bytes
  2430 ;; Hardware stack levels used: 1
  2431 ;; Hardware stack levels required when called: 2
  2432 ;; This function calls:
  2433 ;;		Nothing
  2434 ;; This function is called by:
  2435 ;;		_menuMotor
  2436 ;; This function uses a non-reentrant model
  2437 ;;
  2438                           
  2439                           	psect	text16
  2440  0012D2                     __ptext16:
  2441                           	callstack 0
  2442  0012D2                     _DaGetStatus:
  2443                           	callstack 27
  2444                           
  2445                           ;EEPROM.c: 237:     return status;
  2446                           
  2447                           ;incstack = 0
  2448  0012D2  5034               	movf	_status^0,w,c
  2449  0012D4  0012               	return		;funcret
  2450  0012D6                     __end_of_DaGetStatus:
  2451                           	callstack 0
  2452                           
  2453 ;; *************** function _DaGetIdle *****************
  2454 ;; Defined at:
  2455 ;;		line 240 in file "EEPROM.c"
  2456 ;; Parameters:    Size  Location     Type
  2457 ;;		None
  2458 ;; Auto vars:     Size  Location     Type
  2459 ;;		None
  2460 ;; Return value:  Size  Location     Type
  2461 ;;                  1    wreg      unsigned char 
  2462 ;; Registers used:
  2463 ;;		wreg, status,2
  2464 ;; Tracked objects:
  2465 ;;		On entry : 0/0
  2466 ;;		On exit  : 0/0
  2467 ;;		Unchanged: 0/0
  2468 ;; Data sizes:     COMRAM   BANK0   BANK1
  2469 ;;      Params:         0       0       0
  2470 ;;      Locals:         0       0       0
  2471 ;;      Temps:          0       0       0
  2472 ;;      Totals:         0       0       0
  2473 ;;Total ram usage:        0 bytes
  2474 ;; Hardware stack levels used: 1
  2475 ;; Hardware stack levels required when called: 2
  2476 ;; This function calls:
  2477 ;;		Nothing
  2478 ;; This function is called by:
  2479 ;;		_menuMotor
  2480 ;; This function uses a non-reentrant model
  2481 ;;
  2482                           
  2483                           	psect	text17
  2484  0012A8                     __ptext17:
  2485                           	callstack 0
  2486  0012A8                     _DaGetIdle:
  2487                           	callstack 27
  2488                           
  2489                           ;EEPROM.c: 241:     return state == 0;
  2490                           
  2491                           ;incstack = 0
  2492  0012A8  5037               	movf	_state@EEPROM$F1414^0,w,c
  2493  0012AA  B4D8               	btfsc	status,2,c
  2494  0012AC  0C01               	retlw	1
  2495  0012AE  0C00               	retlw	0	;funcret
  2496  0012B0                     __end_of_DaGetIdle:
  2497                           	callstack 0
  2498                           
  2499 ;; *************** function _DaFindUser *****************
  2500 ;; Defined at:
  2501 ;;		line 214 in file "EEPROM.c"
  2502 ;; Parameters:    Size  Location     Type
  2503 ;;  logUser        18   21[COMRAM] struct .
  2504 ;; Auto vars:     Size  Location     Type
  2505 ;;		None
  2506 ;; Return value:  Size  Location     Type
  2507 ;;                  1    wreg      void 
  2508 ;; Registers used:
  2509 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2510 ;; Tracked objects:
  2511 ;;		On entry : 0/0
  2512 ;;		On exit  : 0/0
  2513 ;;		Unchanged: 0/0
  2514 ;; Data sizes:     COMRAM   BANK0   BANK1
  2515 ;;      Params:        18       0       0
  2516 ;;      Locals:         0       0       0
  2517 ;;      Temps:          0       0       0
  2518 ;;      Totals:        18       0       0
  2519 ;;Total ram usage:       18 bytes
  2520 ;; Hardware stack levels used: 1
  2521 ;; Hardware stack levels required when called: 5
  2522 ;; This function calls:
  2523 ;;		_LcGotoXY
  2524 ;; This function is called by:
  2525 ;;		_menuMotor
  2526 ;; This function uses a non-reentrant model
  2527 ;;
  2528                           
  2529                           	psect	text18
  2530  00114A                     __ptext18:
  2531                           	callstack 0
  2532  00114A                     _DaFindUser:
  2533                           	callstack 24
  2534                           
  2535                           ;EEPROM.c: 215:     state = 1;
  2536                           
  2537                           ;incstack = 0
  2538  00114A  0E01               	movlw	1
  2539  00114C  6E37               	movwf	_state@EEPROM$F1414^0,c
  2540                           
  2541                           ;EEPROM.c: 216:     userNum = 0;
  2542  00114E  6A36               	clrf	_userNum^0,c
  2543                           
  2544                           ;EEPROM.c: 217:     mUser = logUser;
  2545  001150  EE20  F065         	lfsr	2,DaFindUser@logUser
  2546  001154  EE10  F001         	lfsr	1,_mUser@EEPROM$F1418
  2547  001158  0E11               	movlw	17
  2548  00115A                     u2081:
  2549  00115A  CFDB FFE3          	movff	plusw2,plusw1
  2550  00115E  06E8               	decf	wreg,f,c
  2551  001160  E2FC               	bc	u2081
  2552                           
  2553                           ;EEPROM.c: 218:     status = 2;
  2554  001162  0E02               	movlw	2
  2555  001164  6E34               	movwf	_status^0,c
  2556                           
  2557                           ;EEPROM.c: 219:     LcGotoXY(10,0);
  2558  001166  6A5D               	clrf	LcGotoXY@Row^0,c
  2559  001168  0E0A               	movlw	10
  2560  00116A  EFF3  F005         	goto	_LcGotoXY
  2561  00116E                     __end_of_DaFindUser:
  2562                           	callstack 0
  2563                           
  2564 ;; *************** function _joystickMotor *****************
  2565 ;; Defined at:
  2566 ;;		line 28 in file "Joystick.c"
  2567 ;; Parameters:    Size  Location     Type
  2568 ;;		None
  2569 ;; Auto vars:     Size  Location     Type
  2570 ;;		None
  2571 ;; Return value:  Size  Location     Type
  2572 ;;                  1    wreg      void 
  2573 ;; Registers used:
  2574 ;;		wreg, status,2, status,0, cstack
  2575 ;; Tracked objects:
  2576 ;;		On entry : 0/0
  2577 ;;		On exit  : 0/0
  2578 ;;		Unchanged: 0/0
  2579 ;; Data sizes:     COMRAM   BANK0   BANK1
  2580 ;;      Params:         0       0       0
  2581 ;;      Locals:         0       0       0
  2582 ;;      Temps:          2       0       0
  2583 ;;      Totals:         2       0       0
  2584 ;;Total ram usage:        2 bytes
  2585 ;; Hardware stack levels used: 1
  2586 ;; Hardware stack levels required when called: 3
  2587 ;; This function calls:
  2588 ;;		_SiIsAvailable
  2589 ;;		_SiSendChar
  2590 ;; This function is called by:
  2591 ;;		_main
  2592 ;; This function uses a non-reentrant model
  2593 ;;
  2594                           
  2595                           	psect	text19
  2596  000A6E                     __ptext19:
  2597                           	callstack 0
  2598  000A6E                     _joystickMotor:
  2599                           	callstack 27
  2600                           
  2601                           ;Joystick.c: 29:     LATC = stateJoy;
  2602                           
  2603                           ;incstack = 0
  2604  000A6E  C038  FF8B         	movff	_stateJoy,3979	;volatile
  2605                           
  2606                           ;Joystick.c: 30:     switch (stateJoy){
  2607  000A72  D045               	goto	l2303
  2608  000A74                     l532:
  2609                           
  2610                           ;Joystick.c: 32:             if (ADCON0bits.GO_DONE == 0){
  2611  000A74  B2C2               	btfsc	194,1,c	;volatile
  2612  000A76  0012               	return	
  2613                           
  2614                           ;Joystick.c: 33:                 y = ADRESH;
  2615  000A78  CFC4 F03A          	movff	4036,_y	;volatile
  2616                           
  2617                           ;Joystick.c: 34:                 ADCON0bits.CHS0=1;
  2618  000A7C  84C2               	bsf	194,2,c	;volatile
  2619                           
  2620                           ;Joystick.c: 35:                 ADCON0bits.CHS1=0;
  2621  000A7E  96C2               	bcf	194,3,c	;volatile
  2622                           
  2623                           ;Joystick.c: 36:                 stateJoy = 1;
  2624  000A80  0E01               	movlw	1
  2625  000A82  6E38               	movwf	_stateJoy^0,c
  2626                           
  2627                           ;Joystick.c: 37:                 ADCON0bits.GO_DONE=1;
  2628  000A84  82C2               	bsf	194,1,c	;volatile
  2629  000A86  0C01               	retlw	1
  2630  000A88                     l535:
  2631                           
  2632                           ;Joystick.c: 41:             if (ADCON0bits.GO_DONE == 0){
  2633  000A88  B2C2               	btfsc	194,1,c	;volatile
  2634  000A8A  0012               	return	
  2635                           
  2636                           ;Joystick.c: 42:                 x = ADRESH;
  2637  000A8C  CFC4 F03B          	movff	4036,_x	;volatile
  2638                           
  2639                           ;Joystick.c: 43:                 ADCON0bits.CHS0=0;
  2640  000A90  94C2               	bcf	194,2,c	;volatile
  2641                           
  2642                           ;Joystick.c: 44:                 ADCON0bits.CHS1=1;
  2643  000A92  86C2               	bsf	194,3,c	;volatile
  2644                           
  2645                           ;Joystick.c: 45:                 stateJoy = 2;
  2646  000A94  0E02               	movlw	2
  2647  000A96  6E38               	movwf	_stateJoy^0,c
  2648  000A98  0C02               	retlw	2
  2649  000A9A                     l2265:
  2650                           
  2651                           ;Joystick.c: 49:             stateJoy = 5;
  2652  000A9A  0E05               	movlw	5
  2653  000A9C  6E38               	movwf	_stateJoy^0,c
  2654                           
  2655                           ;Joystick.c: 50:             if (moved){
  2656  000A9E  5039               	movf	_moved^0,w,c
  2657  000AA0  E00F               	bz	l2277
  2658                           
  2659                           ;Joystick.c: 51:                 if (x >= 100 && x <= 150 && y >= 100 && y <= 150){
  2660  000AA2  0E63               	movlw	99
  2661  000AA4  643B               	cpfsgt	_x^0,c
  2662  000AA6  0C63               	retlw	99
  2663  000AA8  0E97               	movlw	151
  2664  000AAA  603B               	cpfslt	_x^0,c
  2665  000AAC  0C97               	retlw	151
  2666  000AAE  0E63               	movlw	99
  2667  000AB0  643A               	cpfsgt	_y^0,c
  2668  000AB2  0C63               	retlw	99
  2669  000AB4  0E97               	movlw	151
  2670  000AB6  603A               	cpfslt	_y^0,c
  2671  000AB8  0C97               	retlw	151
  2672                           
  2673                           ;Joystick.c: 52:                     moved = 0;
  2674  000ABA  6A39               	clrf	_moved^0,c
  2675                           
  2676                           ;Joystick.c: 53:                     LATCbits.LATC0 = 0;
  2677  000ABC  908B               	bcf	139,0,c	;volatile
  2678                           
  2679                           ;Joystick.c: 55:             }else {
  2680                           
  2681                           ;Joystick.c: 54:                 }
  2682  000ABE  0012               	return	
  2683  000AC0                     l2277:
  2684                           
  2685                           ;Joystick.c: 56:                 if (x <= 10){
  2686  000AC0  0E0B               	movlw	11
  2687  000AC2  603B               	cpfslt	_x^0,c
  2688  000AC4  D002               	goto	l2281
  2689                           
  2690                           ;Joystick.c: 57:                     send = 'A';
  2691  000AC6  0E41               	movlw	65
  2692                           
  2693                           ;Joystick.c: 58:                     moved = 1;
  2694                           
  2695                           ;Joystick.c: 59:                     stateJoy = 4;
  2696                           
  2697                           ;Joystick.c: 60:                 } else if (x >= 240){
  2698  000AC8  D02A               	goto	PL20	;call to abstracted procedure
  2699  000ACA                     l2281:
  2700  000ACA  0EEF               	movlw	239
  2701  000ACC  643B               	cpfsgt	_x^0,c
  2702  000ACE  D002               	goto	l2285
  2703                           
  2704                           ;Joystick.c: 61:                     send = 'D';
  2705  000AD0  0E44               	movlw	68
  2706                           
  2707                           ;Joystick.c: 62:                     moved = 1;
  2708                           
  2709                           ;Joystick.c: 63:                     stateJoy = 4;
  2710                           
  2711                           ;Joystick.c: 64:                 } else if (y <= 10){
  2712  000AD2  D025               	goto	PL20	;call to abstracted procedure
  2713  000AD4                     l2285:
  2714  000AD4  0E0B               	movlw	11
  2715  000AD6  603A               	cpfslt	_y^0,c
  2716  000AD8  D002               	goto	l2289
  2717                           
  2718                           ;Joystick.c: 65:                     send = 'S';
  2719  000ADA  0E53               	movlw	83
  2720                           
  2721                           ;Joystick.c: 66:                     moved = 1;
  2722                           
  2723                           ;Joystick.c: 67:                     stateJoy = 4;
  2724                           
  2725                           ;Joystick.c: 68:                 } else if (y >= 240){
  2726  000ADC  D020               	goto	PL20	;call to abstracted procedure
  2727  000ADE                     l2289:
  2728  000ADE  0EEF               	movlw	239
  2729  000AE0  643A               	cpfsgt	_y^0,c
  2730  000AE2  0CEF               	retlw	239
  2731                           
  2732                           ;Joystick.c: 69:                     send = 'W';
  2733  000AE4  0E57               	movlw	87
  2734                           
  2735                           ;Joystick.c: 70:                     moved = 1;
  2736                           
  2737                           ;Joystick.c: 71:                     stateJoy = 4;
  2738  000AE6  D01B               	goto	PL20	;call to abstracted procedure
  2739  000AE8                     l2293:
  2740                           
  2741                           ;Joystick.c: 79:             if(SiIsAvailable()){
  2742  000AE8  EC60  F009         	call	_SiIsAvailable	;wreg free
  2743  000AEC  0900               	iorlw	0
  2744  000AEE  B4D8               	btfsc	status,2,c
  2745  000AF0  0012               	return	
  2746                           
  2747                           ;Joystick.c: 80:                 SiSendChar(send);
  2748  000AF2  503C               	movf	_send^0,w,c
  2749  000AF4  EC58  F009         	call	_SiSendChar
  2750  000AF8                     l550:
  2751                           
  2752                           ;Joystick.c: 87:             stateJoy = 0;
  2753                           
  2754                           ;Joystick.c: 88:             ADCON0bits.GO_DONE=1;
  2755                           
  2756                           ;Joystick.c: 89:             break;
  2757  000AF8  D018               	goto	PL72	;call to abstracted procedure
  2758  000AFA                     l551:
  2759                           
  2760                           ;Joystick.c: 91:             stateJoy = 0;
  2761  000AFA  6A38               	clrf	_stateJoy^0,c
  2762                           
  2763                           ;Joystick.c: 92:             break;
  2764  000AFC  0012               	return	
  2765  000AFE                     l2303:
  2766  000AFE  5038               	movf	_stateJoy^0,w,c
  2767  000B00  6E56               	movwf	??_joystickMotor^0,c
  2768  000B02  6A57               	clrf	(??_joystickMotor+1)^0,c
  2769                           
  2770                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2771                           ; Switch size 1, requested type "space"
  2772                           ; Number of cases is 1, Range of values is 0 to 0
  2773                           ; switch strategies available:
  2774                           ; Name         Instructions Cycles
  2775                           ; simple_byte            4     3 (average)
  2776                           ;	Chosen strategy is simple_byte
  2777  000B04  5057               	movf	(??_joystickMotor+1)^0,w,c
  2778  000B06  E1F9               	bnz	l551
  2779                           
  2780                           ; Switch size 1, requested type "space"
  2781                           ; Number of cases is 5, Range of values is 0 to 5
  2782                           ; switch strategies available:
  2783                           ; Name         Instructions Cycles
  2784                           ; simple_byte           16     9 (average)
  2785                           ;	Chosen strategy is simple_byte
  2786  000B08  5056               	movf	??_joystickMotor^0,w,c
  2787  000B0A  E0B4               	bz	l532
  2788  000B0C  0A01               	xorlw	1	; case 1
  2789  000B0E  E0BC               	bz	l535
  2790  000B10  0A03               	xorlw	3	; case 2
  2791  000B12  E0C3               	bz	l2265
  2792  000B14  0A06               	xorlw	6	; case 4
  2793  000B16  E0E8               	bz	l2293
  2794  000B18  0A01               	xorlw	1	; case 5
  2795  000B1A  E007               	bz	PL72
  2796  000B1C  D7EE               	goto	l551
  2797  000B1E                     __end_of_joystickMotor:
  2798                           	callstack 0
  2799  000B1E                     PL20:
  2800                           	callstack 27
  2801  000B1E  6E3C               	movwf	_send^0,c
  2802  000B20  0E01               	movlw	1
  2803  000B22  6E39               	movwf	_moved^0,c
  2804  000B24  0E04               	movlw	4
  2805  000B26  6E38               	movwf	_stateJoy^0,c
  2806  000B28  0C04               	retlw	4
  2807  000B2A                     __end_ofPL20:
  2808                           	callstack 0
  2809  000B2A                     PL72:
  2810                           	callstack 27
  2811  000B2A  6A38               	clrf	_stateJoy^0,c
  2812  000B2C  82C2               	bsf	194,1,c	;volatile
  2813  000B2E  0012               	return	
  2814  000B30                     __end_ofPL72:
  2815                           	callstack 0
  2816                           
  2817 ;; *************** function _SiSendChar *****************
  2818 ;; Defined at:
  2819 ;;		line 27 in file "SIO.c"
  2820 ;; Parameters:    Size  Location     Type
  2821 ;;  myByte          1    wreg     unsigned char 
  2822 ;; Auto vars:     Size  Location     Type
  2823 ;;  myByte          1    5[COMRAM] unsigned char 
  2824 ;; Return value:  Size  Location     Type
  2825 ;;                  1    wreg      void 
  2826 ;; Registers used:
  2827 ;;		wreg
  2828 ;; Tracked objects:
  2829 ;;		On entry : 0/0
  2830 ;;		On exit  : 0/0
  2831 ;;		Unchanged: 0/0
  2832 ;; Data sizes:     COMRAM   BANK0   BANK1
  2833 ;;      Params:         0       0       0
  2834 ;;      Locals:         1       0       0
  2835 ;;      Temps:          0       0       0
  2836 ;;      Totals:         1       0       0
  2837 ;;Total ram usage:        1 bytes
  2838 ;; Hardware stack levels used: 1
  2839 ;; Hardware stack levels required when called: 2
  2840 ;; This function calls:
  2841 ;;		Nothing
  2842 ;; This function is called by:
  2843 ;;		_joystickMotor
  2844 ;; This function uses a non-reentrant model
  2845 ;;
  2846                           
  2847                           	psect	text20
  2848  0012B0                     __ptext20:
  2849                           	callstack 0
  2850  0012B0                     _SiSendChar:
  2851                           	callstack 27
  2852                           
  2853                           ;incstack = 0
  2854                           ;SiSendChar@myByte stored from wreg
  2855  0012B0  6E55               	movwf	SiSendChar@myByte^0,c
  2856                           
  2857                           ;SIO.c: 28:     TXREG = myByte;
  2858  0012B2  C055  FFAD         	movff	SiSendChar@myByte,4013	;volatile
  2859  0012B6  0012               	return		;funcret
  2860  0012B8                     __end_of_SiSendChar:
  2861                           	callstack 0
  2862                           
  2863 ;; *************** function _SiIsAvailable *****************
  2864 ;; Defined at:
  2865 ;;		line 23 in file "SIO.c"
  2866 ;; Parameters:    Size  Location     Type
  2867 ;;		None
  2868 ;; Auto vars:     Size  Location     Type
  2869 ;;		None
  2870 ;; Return value:  Size  Location     Type
  2871 ;;                  1    wreg      unsigned char 
  2872 ;; Registers used:
  2873 ;;		wreg
  2874 ;; Tracked objects:
  2875 ;;		On entry : 0/0
  2876 ;;		On exit  : 0/0
  2877 ;;		Unchanged: 0/0
  2878 ;; Data sizes:     COMRAM   BANK0   BANK1
  2879 ;;      Params:         0       0       0
  2880 ;;      Locals:         0       0       0
  2881 ;;      Temps:          0       0       0
  2882 ;;      Totals:         0       0       0
  2883 ;;Total ram usage:        0 bytes
  2884 ;; Hardware stack levels used: 1
  2885 ;; Hardware stack levels required when called: 2
  2886 ;; This function calls:
  2887 ;;		Nothing
  2888 ;; This function is called by:
  2889 ;;		_joystickMotor
  2890 ;; This function uses a non-reentrant model
  2891 ;;
  2892                           
  2893                           	psect	text21
  2894  0012C0                     __ptext21:
  2895                           	callstack 0
  2896  0012C0                     _SiIsAvailable:
  2897                           	callstack 27
  2898                           
  2899                           ;SIO.c: 24:     return TXSTAbits.TRMT;
  2900                           
  2901                           ;incstack = 0
  2902  0012C0  B2AC               	btfsc	172,1,c	;volatile
  2903  0012C2  0C01               	retlw	1
  2904  0012C4  0C00               	retlw	0	;funcret
  2905  0012C6                     __end_of_SiIsAvailable:
  2906                           	callstack 0
  2907                           
  2908 ;; *************** function _initSIO *****************
  2909 ;; Defined at:
  2910 ;;		line 5 in file "SIO.c"
  2911 ;; Parameters:    Size  Location     Type
  2912 ;;		None
  2913 ;; Auto vars:     Size  Location     Type
  2914 ;;		None
  2915 ;; Return value:  Size  Location     Type
  2916 ;;                  1    wreg      void 
  2917 ;; Registers used:
  2918 ;;		None
  2919 ;; Tracked objects:
  2920 ;;		On entry : 0/0
  2921 ;;		On exit  : 0/0
  2922 ;;		Unchanged: 0/0
  2923 ;; Data sizes:     COMRAM   BANK0   BANK1
  2924 ;;      Params:         0       0       0
  2925 ;;      Locals:         0       0       0
  2926 ;;      Temps:          0       0       0
  2927 ;;      Totals:         0       0       0
  2928 ;;Total ram usage:        0 bytes
  2929 ;; Hardware stack levels used: 1
  2930 ;; Hardware stack levels required when called: 2
  2931 ;; This function calls:
  2932 ;;		Nothing
  2933 ;; This function is called by:
  2934 ;;		_main
  2935 ;; This function uses a non-reentrant model
  2936 ;;
  2937                           
  2938                           	psect	text22
  2939  00126E                     __ptext22:
  2940                           	callstack 0
  2941  00126E                     _initSIO:
  2942                           	callstack 28
  2943                           
  2944                           ;SIO.c: 8:     TRISCbits.TRISC7 = 1;
  2945                           
  2946                           ;incstack = 0
  2947  00126E  8E94               	bsf	148,7,c	;volatile
  2948                           
  2949                           ;SIO.c: 9:     TRISCbits.TRISC6 = 1;
  2950  001270  8C94               	bsf	148,6,c	;volatile
  2951                           
  2952                           ;SIO.c: 10:     TXSTAbits.BRGH = 1;
  2953  001272  84AC               	bsf	172,2,c	;volatile
  2954                           
  2955                           ;SIO.c: 11:     TXSTAbits.TXEN = 1;
  2956  001274  8AAC               	bsf	172,5,c	;volatile
  2957                           
  2958                           ;SIO.c: 12:     TXSTAbits.SYNC = 0;
  2959  001276  98AC               	bcf	172,4,c	;volatile
  2960                           
  2961                           ;SIO.c: 14:     RCSTAbits.SPEN = 1;
  2962  001278  8EAB               	bsf	171,7,c	;volatile
  2963                           
  2964                           ;SIO.c: 15:     RCSTAbits.CREN = 1;
  2965  00127A  88AB               	bsf	171,4,c	;volatile
  2966                           
  2967                           ;SIO.c: 17:     BAUDCONbits.BRG16 = 0;
  2968  00127C  96B8               	bcf	184,3,c	;volatile
  2969                           
  2970                           ;SIO.c: 19:     SPBRG = 255;
  2971  00127E  68AF               	setf	175,c	;volatile
  2972  001280  0012               	return		;funcret
  2973  001282                     __end_of_initSIO:
  2974                           	callstack 0
  2975                           
  2976 ;; *************** function _initMenu *****************
  2977 ;; Defined at:
  2978 ;;		line 20 in file "Menu.c"
  2979 ;; Parameters:    Size  Location     Type
  2980 ;;		None
  2981 ;; Auto vars:     Size  Location     Type
  2982 ;;		None
  2983 ;; Return value:  Size  Location     Type
  2984 ;;                  1    wreg      void 
  2985 ;; Registers used:
  2986 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2987 ;; Tracked objects:
  2988 ;;		On entry : 0/0
  2989 ;;		On exit  : 0/0
  2990 ;;		Unchanged: 0/0
  2991 ;; Data sizes:     COMRAM   BANK0   BANK1
  2992 ;;      Params:         0       0       0
  2993 ;;      Locals:         0       0       0
  2994 ;;      Temps:          0       0       0
  2995 ;;      Totals:         0       0       0
  2996 ;;Total ram usage:        0 bytes
  2997 ;; Hardware stack levels used: 1
  2998 ;; Hardware stack levels required when called: 3
  2999 ;; This function calls:
  3000 ;;		_TiGetTimer
  3001 ;; This function is called by:
  3002 ;;		_main
  3003 ;; This function uses a non-reentrant model
  3004 ;;
  3005                           
  3006                           	psect	text23
  3007  0012B8                     __ptext23:
  3008                           	callstack 0
  3009  0012B8                     _initMenu:
  3010                           	callstack 27
  3011                           
  3012                           ;Menu.c: 21:     timer = TiGetTimer();
  3013                           
  3014                           ;incstack = 0
  3015  0012B8  EC6A  F008         	call	_TiGetTimer	;wreg free
  3016  0012BC  6E40               	movwf	_timer^0,c
  3017  0012BE  0012               	return		;funcret
  3018  0012C0                     __end_of_initMenu:
  3019                           	callstack 0
  3020                           
  3021 ;; *************** function _initKeypad *****************
  3022 ;; Defined at:
  3023 ;;		line 29 in file "keypad.c"
  3024 ;; Parameters:    Size  Location     Type
  3025 ;;		None
  3026 ;; Auto vars:     Size  Location     Type
  3027 ;;		None
  3028 ;; Return value:  Size  Location     Type
  3029 ;;                  1    wreg      void 
  3030 ;; Registers used:
  3031 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3032 ;; Tracked objects:
  3033 ;;		On entry : 0/0
  3034 ;;		On exit  : 0/0
  3035 ;;		Unchanged: 0/0
  3036 ;; Data sizes:     COMRAM   BANK0   BANK1
  3037 ;;      Params:         0       0       0
  3038 ;;      Locals:         0       0       0
  3039 ;;      Temps:          0       0       0
  3040 ;;      Totals:         0       0       0
  3041 ;;Total ram usage:        0 bytes
  3042 ;; Hardware stack levels used: 1
  3043 ;; Hardware stack levels required when called: 3
  3044 ;; This function calls:
  3045 ;;		_TiGetTimer
  3046 ;; This function is called by:
  3047 ;;		_main
  3048 ;; This function uses a non-reentrant model
  3049 ;;
  3050                           
  3051                           	psect	text24
  3052  0011D0                     __ptext24:
  3053                           	callstack 0
  3054  0011D0                     _initKeypad:
  3055                           	callstack 27
  3056                           
  3057                           ;keypad.c: 30:     INTCON2bits.RBPU = 0;
  3058                           
  3059                           ;incstack = 0
  3060  0011D0  9EF1               	bcf	241,7,c	;volatile
  3061                           
  3062                           ;keypad.c: 33:     TRISBbits.TRISB0 = 1;
  3063  0011D2  8093               	bsf	147,0,c	;volatile
  3064                           
  3065                           ;keypad.c: 34:     TRISBbits.TRISB1 = 1;
  3066  0011D4  8293               	bsf	147,1,c	;volatile
  3067                           
  3068                           ;keypad.c: 35:     TRISBbits.TRISB2 = 1;
  3069  0011D6  8493               	bsf	147,2,c	;volatile
  3070                           
  3071                           ;keypad.c: 36:     TRISBbits.TRISB3 = 0;
  3072  0011D8  9693               	bcf	147,3,c	;volatile
  3073                           
  3074                           ;keypad.c: 37:     TRISBbits.TRISB4 = 0;
  3075  0011DA  9893               	bcf	147,4,c	;volatile
  3076                           
  3077                           ;keypad.c: 38:     TRISBbits.TRISB5 = 0;
  3078  0011DC  9A93               	bcf	147,5,c	;volatile
  3079                           
  3080                           ;keypad.c: 39:     TRISBbits.TRISB6 = 0;
  3081  0011DE  9C93               	bcf	147,6,c	;volatile
  3082                           
  3083                           ;keypad.c: 40:     timerBounces = TiGetTimer();
  3084  0011E0  EC6A  F008         	call	_TiGetTimer	;wreg free
  3085  0011E4  6E4D               	movwf	_timerBounces^0,c
  3086                           
  3087                           ;keypad.c: 41:     timer_SMS = TiGetTimer();
  3088  0011E6  EC6A  F008         	call	_TiGetTimer	;wreg free
  3089  0011EA  6E4C               	movwf	_timer_SMS^0,c
  3090  0011EC  0012               	return		;funcret
  3091  0011EE                     __end_of_initKeypad:
  3092                           	callstack 0
  3093                           
  3094 ;; *************** function _initJoystick *****************
  3095 ;; Defined at:
  3096 ;;		line 10 in file "Joystick.c"
  3097 ;; Parameters:    Size  Location     Type
  3098 ;;		None
  3099 ;; Auto vars:     Size  Location     Type
  3100 ;;		None
  3101 ;; Return value:  Size  Location     Type
  3102 ;;                  1    wreg      void 
  3103 ;; Registers used:
  3104 ;;		wreg, status,2
  3105 ;; Tracked objects:
  3106 ;;		On entry : 0/0
  3107 ;;		On exit  : 0/0
  3108 ;;		Unchanged: 0/0
  3109 ;; Data sizes:     COMRAM   BANK0   BANK1
  3110 ;;      Params:         0       0       0
  3111 ;;      Locals:         0       0       0
  3112 ;;      Temps:          0       0       0
  3113 ;;      Totals:         0       0       0
  3114 ;;Total ram usage:        0 bytes
  3115 ;; Hardware stack levels used: 1
  3116 ;; Hardware stack levels required when called: 2
  3117 ;; This function calls:
  3118 ;;		Nothing
  3119 ;; This function is called by:
  3120 ;;		_main
  3121 ;; This function uses a non-reentrant model
  3122 ;;
  3123                           
  3124                           	psect	text25
  3125  00116E                     __ptext25:
  3126                           	callstack 0
  3127  00116E                     _initJoystick:
  3128                           	callstack 28
  3129                           
  3130                           ;Joystick.c: 11:     TRISAbits.TRISA0 = 1;
  3131                           
  3132                           ;incstack = 0
  3133  00116E  8092               	bsf	146,0,c	;volatile
  3134                           
  3135                           ;Joystick.c: 12:     TRISAbits.TRISA1 = 1;
  3136  001170  8292               	bsf	146,1,c	;volatile
  3137                           
  3138                           ;Joystick.c: 13:     ADCON0 = 0x03;
  3139  001172  0E03               	movlw	3
  3140  001174  6EC2               	movwf	194,c	;volatile
  3141                           
  3142                           ;Joystick.c: 14:     ADCON1 = 0x0C;
  3143  001176  0E0C               	movlw	12
  3144  001178  6EC1               	movwf	193,c	;volatile
  3145                           
  3146                           ;Joystick.c: 15:     ADCON2 = 0x44;
  3147  00117A  0E44               	movlw	68
  3148  00117C  6EC0               	movwf	192,c	;volatile
  3149                           
  3150                           ;Joystick.c: 17:     TRISCbits.TRISC0 = 0;
  3151  00117E  9094               	bcf	148,0,c	;volatile
  3152                           
  3153                           ;Joystick.c: 18:     TRISCbits.TRISC1 = 0;
  3154  001180  9294               	bcf	148,1,c	;volatile
  3155                           
  3156                           ;Joystick.c: 19:     TRISCbits.TRISC2 = 0;
  3157  001182  9494               	bcf	148,2,c	;volatile
  3158                           
  3159                           ;Joystick.c: 20:     moved = 0;
  3160  001184  6A39               	clrf	_moved^0,c
  3161                           
  3162                           ;Joystick.c: 21:     ADCON0bits.GO_DONE=1;
  3163  001186  82C2               	bsf	194,1,c	;volatile
  3164                           
  3165                           ;Joystick.c: 22:     ADCON0bits.CHS0=0;
  3166  001188  94C2               	bcf	194,2,c	;volatile
  3167                           
  3168                           ;Joystick.c: 23:     ADCON0bits.CHS1=1;
  3169  00118A  86C2               	bsf	194,3,c	;volatile
  3170                           
  3171                           ;Joystick.c: 24:     stateJoy = 0;
  3172  00118C  6A38               	clrf	_stateJoy^0,c
  3173  00118E  0012               	return		;funcret
  3174  001190                     __end_of_initJoystick:
  3175                           	callstack 0
  3176                           
  3177 ;; *************** function _initData *****************
  3178 ;; Defined at:
  3179 ;;		line 23 in file "EEPROM.c"
  3180 ;; Parameters:    Size  Location     Type
  3181 ;;		None
  3182 ;; Auto vars:     Size  Location     Type
  3183 ;;		None
  3184 ;; Return value:  Size  Location     Type
  3185 ;;                  1    wreg      void 
  3186 ;; Registers used:
  3187 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3188 ;; Tracked objects:
  3189 ;;		On entry : 0/0
  3190 ;;		On exit  : 0/0
  3191 ;;		Unchanged: 0/0
  3192 ;; Data sizes:     COMRAM   BANK0   BANK1
  3193 ;;      Params:         0       0       0
  3194 ;;      Locals:         0       0       0
  3195 ;;      Temps:          0       0       0
  3196 ;;      Totals:         0       0       0
  3197 ;;Total ram usage:        0 bytes
  3198 ;; Hardware stack levels used: 1
  3199 ;; Hardware stack levels required when called: 3
  3200 ;; This function calls:
  3201 ;;		_readUserData
  3202 ;; This function is called by:
  3203 ;;		_main
  3204 ;; This function uses a non-reentrant model
  3205 ;;
  3206                           
  3207                           	psect	text26
  3208  000D7A                     __ptext26:
  3209                           	callstack 0
  3210  000D7A                     _initData:
  3211                           	callstack 27
  3212                           
  3213                           ;EEPROM.c: 24:     state = 0;
  3214                           
  3215                           ;incstack = 0
  3216  000D7A  6A37               	clrf	_state@EEPROM$F1414^0,c
  3217                           
  3218                           ;EEPROM.c: 25:     for (userNum = 0; userNum < 8; userNum++){
  3219  000D7C  6A36               	clrf	_userNum^0,c
  3220  000D7E                     l1881:
  3221  000D7E  0E07               	movlw	7
  3222  000D80  6436               	cpfsgt	_userNum^0,c
  3223  000D82  D001               	goto	l1885
  3224  000D84  D004               	goto	l613
  3225  000D86                     l1885:
  3226                           
  3227                           ;EEPROM.c: 26:         readUserData();
  3228  000D86  EC3D  F006         	call	_readUserData	;wreg free
  3229                           
  3230                           ;EEPROM.c: 27:     }
  3231  000D8A  2A36               	incf	_userNum^0,f,c
  3232  000D8C  D7F8               	goto	l1881
  3233  000D8E                     l613:
  3234                           
  3235                           ;EEPROM.c: 28:     for (position = 0; position < 10; position = position+2){
  3236  000D8E  6A35               	clrf	_position^0,c
  3237  000D90                     l1891:
  3238  000D90  0E09               	movlw	9
  3239  000D92  6435               	cpfsgt	_position^0,c
  3240  000D94  D001               	goto	l614
  3241  000D96  D01B               	goto	l615
  3242  000D98                     l614:
  3243                           
  3244                           ;EEPROM.c: 29:         EECON1bits.EEPGD = 0;
  3245  000D98  9EA6               	bcf	166,7,c	;volsfr
  3246                           
  3247                           ;EEPROM.c: 30:         EECON1bits.CFGS = 0;
  3248  000D9A  9CA6               	bcf	166,6,c	;volsfr
  3249                           
  3250                           ;EEPROM.c: 31:         EEADR = (0x90)+position;
  3251  000D9C  5035               	movf	_position^0,w,c
  3252  000D9E  0F90               	addlw	144
  3253  000DA0  6EA9               	movwf	169,c	;volatile
  3254                           
  3255                           ;EEPROM.c: 32:         EECON1bits.RD = 1;
  3256  000DA2  80A6               	bsf	166,0,c	;volsfr
  3257                           
  3258                           ;EEPROM.c: 33:         topScores[position].score = EEDATA;
  3259  000DA4  5035               	movf	_position^0,w,c
  3260  000DA6  0D02               	mullw	2
  3261  000DA8  50F3               	movf	243,w,c
  3262  000DAA  0F25               	addlw	low _topScores
  3263  000DAC  D81D               	call	PL54	;call to abstracted procedure
  3264                           
  3265                           ;EEPROM.c: 34:         EECON1bits.EEPGD = 0;
  3266  000DAE  9EA6               	bcf	166,7,c	;volsfr
  3267                           
  3268                           ;EEPROM.c: 35:         EECON1bits.CFGS = 0;
  3269  000DB0  9CA6               	bcf	166,6,c	;volsfr
  3270                           
  3271                           ;EEPROM.c: 36:         EEADR = (0x90)+position+1;
  3272  000DB2  5035               	movf	_position^0,w,c
  3273  000DB4  0F91               	addlw	145
  3274  000DB6  6EA9               	movwf	169,c	;volatile
  3275                           
  3276                           ;EEPROM.c: 37:         EECON1bits.RD = 1;
  3277  000DB8  80A6               	bsf	166,0,c	;volsfr
  3278  000DBA                     l616:
  3279  000DBA  B0A6               	btfsc	166,0,c	;volsfr
  3280  000DBC  D7FE               	goto	l616
  3281                           
  3282                           ;EEPROM.c: 39:         topScores[position].userNum = EEDATA;
  3283  000DBE  5035               	movf	_position^0,w,c
  3284  000DC0  0D02               	mullw	2
  3285  000DC2  50F3               	movf	243,w,c
  3286  000DC4  0F26               	addlw	low (_topScores+1)
  3287  000DC6  D810               	call	PL54	;call to abstracted procedure
  3288                           
  3289                           ;EEPROM.c: 40:     }
  3290  000DC8  0E02               	movlw	2
  3291  000DCA  2635               	addwf	_position^0,f,c
  3292  000DCC  D7E1               	goto	l1891
  3293  000DCE                     l615:
  3294                           
  3295                           ;EEPROM.c: 41:     EECON1bits.EEPGD = 0;
  3296  000DCE  9EA6               	bcf	166,7,c	;volsfr
  3297                           
  3298                           ;EEPROM.c: 42:     EECON1bits.CFGS = 0;
  3299  000DD0  9CA6               	bcf	166,6,c	;volsfr
  3300                           
  3301                           ;EEPROM.c: 43:     EEADR = 0x95;
  3302  000DD2  0E95               	movlw	149
  3303  000DD4  6EA9               	movwf	169,c	;volatile
  3304                           
  3305                           ;EEPROM.c: 44:     EECON1bits.RD = 1;
  3306  000DD6  80A6               	bsf	166,0,c	;volsfr
  3307  000DD8                     l619:
  3308  000DD8  B0A6               	btfsc	166,0,c	;volsfr
  3309  000DDA  D7FE               	goto	l619
  3310                           
  3311                           ;EEPROM.c: 46:     lastUserPointer = EEDATA;
  3312  000DDC  CFA8 F033          	movff	4008,_lastUserPointer	;volatile
  3313                           
  3314                           ;EEPROM.c: 47:     if (lastUserPointer == 0xFF){
  3315  000DE0  2833               	incf	_lastUserPointer^0,w,c
  3316  000DE2  B4D8               	btfsc	status,2,c
  3317                           
  3318                           ;EEPROM.c: 48:         lastUserPointer = 0;
  3319  000DE4  6A33               	clrf	_lastUserPointer^0,c
  3320  000DE6  0012               	return		;funcret
  3321  000DE8                     __end_of_initData:
  3322                           	callstack 0
  3323  000DE8                     PL54:
  3324                           	callstack 27
  3325  000DE8  6ED9               	movwf	fsr2l,c
  3326  000DEA  6ADA               	clrf	fsr2h,c
  3327  000DEC  CFA8 FFDF          	movff	4008,indf2	;volatile
  3328  000DF0  0012               	return	
  3329  000DF2                     __end_ofPL54:
  3330                           	callstack 0
  3331                           
  3332 ;; *************** function _readUserData *****************
  3333 ;; Defined at:
  3334 ;;		line 244 in file "EEPROM.c"
  3335 ;; Parameters:    Size  Location     Type
  3336 ;;		None
  3337 ;; Auto vars:     Size  Location     Type
  3338 ;;		None
  3339 ;; Return value:  Size  Location     Type
  3340 ;;                  1    wreg      void 
  3341 ;; Registers used:
  3342 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  3343 ;; Tracked objects:
  3344 ;;		On entry : 0/0
  3345 ;;		On exit  : 0/0
  3346 ;;		Unchanged: 0/0
  3347 ;; Data sizes:     COMRAM   BANK0   BANK1
  3348 ;;      Params:         0       0       0
  3349 ;;      Locals:         0       0       0
  3350 ;;      Temps:          2       0       0
  3351 ;;      Totals:         2       0       0
  3352 ;;Total ram usage:        2 bytes
  3353 ;; Hardware stack levels used: 1
  3354 ;; Hardware stack levels required when called: 2
  3355 ;; This function calls:
  3356 ;;		Nothing
  3357 ;; This function is called by:
  3358 ;;		_initData
  3359 ;; This function uses a non-reentrant model
  3360 ;;
  3361                           
  3362                           	psect	text27
  3363  000C7A                     __ptext27:
  3364                           	callstack 0
  3365  000C7A                     _readUserData:
  3366                           	callstack 27
  3367                           
  3368                           ;EEPROM.c: 245:     for (position = 0; position < 9; position++){
  3369                           
  3370                           ;incstack = 0
  3371  000C7A  6A35               	clrf	_position^0,c
  3372  000C7C                     l1735:
  3373  000C7C  0E08               	movlw	8
  3374  000C7E  6435               	cpfsgt	_position^0,c
  3375  000C80  D001               	goto	l683
  3376  000C82  D00A               	goto	l684
  3377  000C84                     l683:
  3378                           
  3379                           ;EEPROM.c: 246:         EECON1bits.EEPGD = 0;
  3380  000C84  9EA6               	bcf	166,7,c	;volsfr
  3381                           
  3382                           ;EEPROM.c: 247:         EECON1bits.CFGS = 0;
  3383  000C86  9CA6               	bcf	166,6,c	;volsfr
  3384                           
  3385                           ;EEPROM.c: 248:         EEADR = (userNum*24)+position;
  3386  000C88  5036               	movf	_userNum^0,w,c
  3387  000C8A  D834               	call	PL56	;call to abstracted procedure
  3388                           
  3389                           ;EEPROM.c: 249:         EECON1bits.RD = 1;
  3390  000C8C  80A6               	bsf	166,0,c	;volsfr
  3391  000C8E                     l685:
  3392  000C8E  B0A6               	btfsc	166,0,c	;volsfr
  3393  000C90  D7FE               	goto	l685
  3394                           
  3395                           ;EEPROM.c: 251:         users[userNum].username[position] = EEDATA;
  3396  000C92  D823               	call	PL42	;call to abstracted procedure
  3397                           
  3398                           ;EEPROM.c: 252:     }
  3399  000C94  D814               	call	PL16	;call to abstracted procedure
  3400  000C96  D7F2               	goto	l1735
  3401  000C98                     l684:
  3402                           
  3403                           ;EEPROM.c: 253:     for (position = 0; position < 9; position++){
  3404  000C98  6A35               	clrf	_position^0,c
  3405  000C9A                     l1749:
  3406  000C9A  0E08               	movlw	8
  3407  000C9C  6435               	cpfsgt	_position^0,c
  3408  000C9E  D001               	goto	l688
  3409  000CA0  0C08               	retlw	8
  3410  000CA2                     l688:
  3411                           
  3412                           ;EEPROM.c: 254:         EECON1bits.EEPGD = 0;
  3413  000CA2  9EA6               	bcf	166,7,c	;volsfr
  3414                           
  3415                           ;EEPROM.c: 255:         EECON1bits.CFGS = 0;
  3416  000CA4  9CA6               	bcf	166,6,c	;volsfr
  3417                           
  3418                           ;EEPROM.c: 256:         EEADR = (userNum*24)+9+position;
  3419  000CA6  5036               	movf	_userNum^0,w,c
  3420  000CA8  D81F               	call	PL50	;call to abstracted procedure
  3421                           
  3422                           ;EEPROM.c: 257:         EECON1bits.RD = 1;
  3423  000CAA  80A6               	bsf	166,0,c	;volsfr
  3424  000CAC                     l690:
  3425  000CAC  B0A6               	btfsc	166,0,c	;volsfr
  3426  000CAE  D7FE               	goto	l690
  3427                           
  3428                           ;EEPROM.c: 259:         users[userNum].password[position] = EEDATA;
  3429  000CB0  D814               	call	PL42	;call to abstracted procedure
  3430  000CB2  0E09               	movlw	9
  3431  000CB4  2655               	addwf	??_readUserData^0,f,c
  3432  000CB6  0E00               	movlw	0
  3433  000CB8  2256               	addwfc	(??_readUserData+1)^0,f,c
  3434                           
  3435                           ;EEPROM.c: 260:     }
  3436  000CBA  D801               	call	PL16	;call to abstracted procedure
  3437  000CBC  D7EE               	goto	l1749
  3438  000CBE                     __end_of_readUserData:
  3439                           	callstack 0
  3440  000CBE                     PL16:
  3441                           	callstack 27
  3442  000CBE  50F3               	movf	243,w,c
  3443  000CC0  2655               	addwf	??_readUserData^0,f,c
  3444  000CC2  50F4               	movf	244,w,c
  3445  000CC4  2256               	addwfc	(??_readUserData+1)^0,f,c
  3446  000CC6  5035               	movf	_position^0,w,c
  3447  000CC8  2455               	addwf	??_readUserData^0,w,c
  3448  000CCA  6ED9               	movwf	fsr2l,c
  3449  000CCC  0E00               	movlw	0
  3450  000CCE  2056               	addwfc	(??_readUserData+1)^0,w,c
  3451  000CD0  6EDA               	movwf	fsr2h,c
  3452  000CD2  CFA8 FFDF          	movff	4008,indf2	;volatile
  3453  000CD6  2A35               	incf	_position^0,f,c
  3454  000CD8  0012               	return	
  3455  000CDA                     __end_ofPL16:
  3456                           	callstack 0
  3457  000CDA                     PL42:
  3458                           	callstack 27
  3459  000CDA  5036               	movf	_userNum^0,w,c
  3460  000CDC  0D12               	mullw	18
  3461  000CDE  0E00               	movlw	low _users
  3462  000CE0  6E55               	movwf	??_readUserData^0,c
  3463  000CE2  0E01               	movlw	high _users
  3464  000CE4  6E56               	movwf	(??_readUserData+1)^0,c
  3465  000CE6  0012               	return	
  3466  000CE8                     __end_ofPL42:
  3467                           	callstack 0
  3468  000CE8                     PL50:
  3469                           	callstack 25
  3470  000CE8  0D18               	mullw	24
  3471  000CEA  50F3               	movf	243,w,c
  3472  000CEC  2435               	addwf	_position^0,w,c
  3473  000CEE  0F09               	addlw	9
  3474  000CF0  6EA9               	movwf	169,c	;volatile
  3475  000CF2  0012               	return	
  3476  000CF4                     __end_ofPL50:
  3477                           	callstack 0
  3478  000CF4                     PL56:
  3479                           	callstack 25
  3480  000CF4  0D18               	mullw	24
  3481  000CF6  50F3               	movf	243,w,c
  3482  000CF8  2435               	addwf	_position^0,w,c
  3483  000CFA  6EA9               	movwf	169,c	;volatile
  3484  000CFC  0012               	return	
  3485  000CFE                     __end_ofPL56:
  3486                           	callstack 0
  3487                           
  3488 ;; *************** function _dataMotor *****************
  3489 ;; Defined at:
  3490 ;;		line 52 in file "EEPROM.c"
  3491 ;; Parameters:    Size  Location     Type
  3492 ;;		None
  3493 ;; Auto vars:     Size  Location     Type
  3494 ;;		None
  3495 ;; Return value:  Size  Location     Type
  3496 ;;                  1    wreg      void 
  3497 ;; Registers used:
  3498 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3499 ;; Tracked objects:
  3500 ;;		On entry : 0/0
  3501 ;;		On exit  : 0/0
  3502 ;;		Unchanged: 0/0
  3503 ;; Data sizes:     COMRAM   BANK0   BANK1
  3504 ;;      Params:         0       0       0
  3505 ;;      Locals:         0       0       0
  3506 ;;      Temps:          4       0       0
  3507 ;;      Totals:         4       0       0
  3508 ;;Total ram usage:        4 bytes
  3509 ;; Hardware stack levels used: 1
  3510 ;; Hardware stack levels required when called: 5
  3511 ;; This function calls:
  3512 ;;		_LcGotoXY
  3513 ;; This function is called by:
  3514 ;;		_main
  3515 ;; This function uses a non-reentrant model
  3516 ;;
  3517                           
  3518                           	psect	text28
  3519  000596                     __ptext28:
  3520                           	callstack 0
  3521  000596                     _dataMotor:
  3522                           	callstack 25
  3523                           
  3524                           ;EEPROM.c: 53:     switch(state){
  3525                           
  3526                           ;incstack = 0
  3527  000596  D0B5               	goto	l3389
  3528  000598                     l3229:
  3529                           
  3530                           ;EEPROM.c: 58:             status = 2;
  3531  000598  0E02               	movlw	2
  3532  00059A  6E34               	movwf	_status^0,c
  3533                           
  3534                           ;EEPROM.c: 59:             if (userNum != 8){
  3535  00059C  0E08               	movlw	8
  3536  00059E  1836               	xorwf	_userNum^0,w,c
  3537  0005A0  E003               	bz	l3235
  3538                           
  3539                           ;EEPROM.c: 60:                 state = 2;
  3540  0005A2  0E02               	movlw	2
  3541  0005A4  6E37               	movwf	_state@EEPROM$F1414^0,c
  3542                           
  3543                           ;EEPROM.c: 62:             } else {
  3544  0005A6  0C02               	retlw	2
  3545  0005A8                     l3235:
  3546                           
  3547                           ;EEPROM.c: 63:                 status = 1;
  3548  0005A8  0E01               	movlw	1
  3549  0005AA  6E34               	movwf	_status^0,c
  3550                           
  3551                           ;EEPROM.c: 64:                 state = 0;
  3552  0005AC  6A37               	clrf	_state@EEPROM$F1414^0,c
  3553  0005AE  0012               	return	
  3554  0005B0                     l3239:
  3555                           
  3556                           ;EEPROM.c: 69:             if (users[userNum].username[position] == mUser.username[posit
      +                          ion]){
  3557  0005B0  5035               	movf	_position^0,w,c
  3558  0005B2  D8E0               	call	PL4	;call to abstracted procedure
  3559  0005B4  D8D2               	call	PL2	;call to abstracted procedure
  3560  0005B6  E10D               	bnz	l3251
  3561                           
  3562                           ;EEPROM.c: 71:                 if (mUser.username[position] == '\0'){
  3563  0005B8  D8F4               	call	PL28	;call to abstracted procedure
  3564  0005BA  E109               	bnz	l3249
  3565                           
  3566                           ;EEPROM.c: 72:                     state = 3;
  3567  0005BC  0E03               	movlw	3
  3568  0005BE  6E37               	movwf	_state@EEPROM$F1414^0,c
  3569                           
  3570                           ;EEPROM.c: 73:                     LcGotoXY(10,1);
  3571  0005C0  0E01               	movlw	1
  3572  0005C2  6E5D               	movwf	LcGotoXY@Row^0,c
  3573  0005C4  0E0A               	movlw	10
  3574  0005C6  ECF3  F005         	call	_LcGotoXY
  3575                           
  3576                           ;EEPROM.c: 74:                     position = 0;
  3577  0005CA  6A35               	clrf	_position^0,c
  3578                           
  3579                           ;EEPROM.c: 75:                 }else {
  3580  0005CC  0012               	return	
  3581  0005CE                     l3249:
  3582                           
  3583                           ;EEPROM.c: 76:                     position++;
  3584  0005CE  2A35               	incf	_position^0,f,c
  3585  0005D0  0012               	return	
  3586  0005D2                     l3251:
  3587                           
  3588                           ;EEPROM.c: 80:                 state = 4;
  3589  0005D2  0E04               	movlw	4
  3590  0005D4  6E37               	movwf	_state@EEPROM$F1414^0,c
  3591  0005D6  0C04               	retlw	4
  3592  0005D8                     l3253:
  3593                           
  3594                           ;EEPROM.c: 88:             if (users[userNum].password[position] == mUser.password[posit
      +                          ion]){
  3595  0005D8  D8EA               	call	PL32	;call to abstracted procedure
  3596  0005DA  5036               	movf	_userNum^0,w,c
  3597  0005DC  0D12               	mullw	18
  3598  0005DE  0E00               	movlw	low _users
  3599  0005E0  6E66               	movwf	(??_dataMotor+1)^0,c
  3600  0005E2  0E01               	movlw	high _users
  3601  0005E4  6E67               	movwf	(??_dataMotor+2)^0,c
  3602  0005E6  0E09               	movlw	9
  3603  0005E8  2666               	addwf	(??_dataMotor+1)^0,f,c
  3604  0005EA  0E00               	movlw	0
  3605  0005EC  2267               	addwfc	(??_dataMotor+2)^0,f,c
  3606  0005EE  D8B5               	call	PL2	;call to abstracted procedure
  3607  0005F0  E1F0               	bnz	l3251
  3608                           
  3609                           ;EEPROM.c: 90:                 if (mUser.password[position] == '\0'){
  3610  0005F2  D8DD               	call	PL32	;call to abstracted procedure
  3611  0005F4  50DF               	movf	indf2,w,c
  3612  0005F6  E1EB               	bnz	l3249
  3613                           
  3614                           ;EEPROM.c: 91:                     state = 0;
  3615  0005F8  6A37               	clrf	_state@EEPROM$F1414^0,c
  3616                           
  3617                           ;EEPROM.c: 92:                     status = 0;
  3618  0005FA  6A34               	clrf	_status^0,c
  3619                           
  3620                           ;EEPROM.c: 93:                 }else {
  3621  0005FC  0012               	return	
  3622  0005FE                     l642:
  3623                           
  3624                           ;EEPROM.c: 105:             position = 0;
  3625  0005FE  6A35               	clrf	_position^0,c
  3626                           
  3627                           ;EEPROM.c: 106:             userNum++;
  3628  000600  2A36               	incf	_userNum^0,f,c
  3629                           
  3630                           ;EEPROM.c: 107:             state = 1;
  3631  000602  0E01               	movlw	1
  3632  000604  6E37               	movwf	_state@EEPROM$F1414^0,c
  3633                           
  3634                           ;EEPROM.c: 108:             break;
  3635  000606  0C01               	retlw	1
  3636  000608                     l3267:
  3637                           
  3638                           ;EEPROM.c: 110:             if (userNum != 8){
  3639  000608  0E08               	movlw	8
  3640  00060A  1836               	xorwf	_userNum^0,w,c
  3641  00060C  E003               	bz	l3271
  3642                           
  3643                           ;EEPROM.c: 111:                 state = 6;
  3644  00060E  0E06               	movlw	6
  3645  000610  6E37               	movwf	_state@EEPROM$F1414^0,c
  3646                           
  3647                           ;EEPROM.c: 113:             } else {
  3648  000612  0C06               	retlw	6
  3649  000614                     l3271:
  3650                           
  3651                           ;EEPROM.c: 114:                 state = 10;
  3652  000614  0E0A               	movlw	10
  3653  000616  6E37               	movwf	_state@EEPROM$F1414^0,c
  3654  000618  0C0A               	retlw	10
  3655  00061A                     l3273:
  3656                           
  3657                           ;EEPROM.c: 118:             if (users[userNum].username[position] == mUser.username[posi
      +                          tion]){
  3658  00061A  5035               	movf	_position^0,w,c
  3659  00061C  D8AB               	call	PL4	;call to abstracted procedure
  3660  00061E  D89D               	call	PL2	;call to abstracted procedure
  3661  000620  E106               	bnz	l3283
  3662                           
  3663                           ;EEPROM.c: 120:                 if (mUser.username[position] == '\0'){
  3664  000622  D8BF               	call	PL28	;call to abstracted procedure
  3665  000624  E1D4               	bnz	l3249
  3666                           
  3667                           ;EEPROM.c: 121:                     state = 0;
  3668  000626  6A37               	clrf	_state@EEPROM$F1414^0,c
  3669                           
  3670                           ;EEPROM.c: 122:                     status = 4;
  3671  000628  0E04               	movlw	4
  3672  00062A  6E34               	movwf	_status^0,c
  3673                           
  3674                           ;EEPROM.c: 123:                 }else {
  3675  00062C  0C04               	retlw	4
  3676  00062E                     l3283:
  3677                           
  3678                           ;EEPROM.c: 128:                 state = 7;
  3679  00062E  0E07               	movlw	7
  3680  000630  6E37               	movwf	_state@EEPROM$F1414^0,c
  3681  000632  0C07               	retlw	7
  3682  000634                     l651:
  3683                           
  3684                           ;EEPROM.c: 133:             position = 0;
  3685  000634  6A35               	clrf	_position^0,c
  3686                           
  3687                           ;EEPROM.c: 134:             userNum++;
  3688  000636  2A36               	incf	_userNum^0,f,c
  3689                           
  3690                           ;EEPROM.c: 135:             state = 5;
  3691  000638  0E05               	movlw	5
  3692  00063A  6E37               	movwf	_state@EEPROM$F1414^0,c
  3693                           
  3694                           ;EEPROM.c: 136:             break;
  3695  00063C  0C05               	retlw	5
  3696  00063E                     l3289:
  3697                           
  3698                           ;EEPROM.c: 138:             EEADR = (lastUserPointer*24)+position;
  3699  00063E  5033               	movf	_lastUserPointer^0,w,c
  3700  000640  EC7A  F006         	call	PL56	;call to abstracted procedure
  3701                           
  3702                           ;EEPROM.c: 139:             EEDATA = mUser.username[position];
  3703  000644  D8AE               	call	PL28	;call to abstracted procedure
  3704  000646  6EA8               	movwf	168,c	;volatile
  3705                           
  3706                           ;EEPROM.c: 140:             users[lastUserPointer].username[position] = mUser.username[p
      +                          osition];
  3707  000648  5035               	movf	_position^0,w,c
  3708  00064A  0F01               	addlw	low _mUser@EEPROM$F1418
  3709  00064C  6ED9               	movwf	fsr2l,c
  3710  00064E  6ADA               	clrf	fsr2h,c
  3711  000650  D8B3               	call	PL40	;call to abstracted procedure
  3712  000652  D89A               	call	PL24	;call to abstracted procedure
  3713                           
  3714                           ;EEPROM.c: 141:             EECON1bits.EEPGD = 0;
  3715  000654  9EA6               	bcf	166,7,c	;volsfr
  3716                           
  3717                           ;EEPROM.c: 142:             EECON1bits.CFGS = 0;
  3718  000656  9CA6               	bcf	166,6,c	;volsfr
  3719                           
  3720                           ;EEPROM.c: 143:             EECON1bits.WREN = 1;
  3721  000658  84A6               	bsf	166,2,c	;volsfr
  3722                           
  3723                           ;EEPROM.c: 144:             INTCONbits.GIE = 0;
  3724  00065A  9EF2               	bcf	242,7,c	;volatile
  3725                           
  3726                           ;EEPROM.c: 145:             EECON2 = 0x55;
  3727  00065C  0E55               	movlw	85
  3728  00065E  6EA7               	movwf	167,c	;volsfr
  3729                           
  3730                           ;EEPROM.c: 146:             EECON2 = 0xAA;
  3731  000660  0EAA               	movlw	170
  3732  000662  6EA7               	movwf	167,c	;volsfr
  3733                           
  3734                           ;EEPROM.c: 147:             EECON1bits.WR = 1;
  3735  000664  82A6               	bsf	166,1,c	;volsfr
  3736                           
  3737                           ;EEPROM.c: 148:             INTCONbits.GIE = 1;
  3738  000666  8EF2               	bsf	242,7,c	;volatile
  3739                           
  3740                           ;EEPROM.c: 149:             EECON1bits.WREN = 0;
  3741  000668  94A6               	bcf	166,2,c	;volsfr
  3742                           
  3743                           ;EEPROM.c: 150:             state = 11;
  3744  00066A  0E0B               	movlw	11
  3745  00066C  6E37               	movwf	_state@EEPROM$F1414^0,c
  3746                           
  3747                           ;EEPROM.c: 151:             break;
  3748  00066E  0C0B               	retlw	11
  3749  000670                     l653:
  3750                           
  3751                           ;EEPROM.c: 153:             if(EECON1bits.WR == 0){
  3752  000670  B2A6               	btfsc	166,1,c	;volsfr
  3753  000672  0012               	return	
  3754                           
  3755                           ;EEPROM.c: 154:                 if(mUser.username[position] != '\0'){
  3756  000674  D896               	call	PL28	;call to abstracted procedure
  3757  000676  E002               	bz	l655
  3758                           
  3759                           ;EEPROM.c: 155:                     position++;
  3760  000678  2A35               	incf	_position^0,f,c
  3761  00067A  D7CC               	goto	l3271
  3762  00067C                     l655:
  3763                           
  3764                           ;EEPROM.c: 158:                     position = 0;
  3765  00067C  6A35               	clrf	_position^0,c
  3766  00067E                     l3321:
  3767                           
  3768                           ;EEPROM.c: 159:                     state = 12;
  3769  00067E  0E0C               	movlw	12
  3770  000680  6E37               	movwf	_state@EEPROM$F1414^0,c
  3771  000682  0C0C               	retlw	12
  3772  000684                     l3323:
  3773                           
  3774                           ;EEPROM.c: 164:             EEADR = (lastUserPointer*24)+position+9;
  3775  000684  5033               	movf	_lastUserPointer^0,w,c
  3776  000686  EC74  F006         	call	PL50	;call to abstracted procedure
  3777                           
  3778                           ;EEPROM.c: 165:             EEDATA = mUser.password[position];
  3779  00068A  D891               	call	PL32	;call to abstracted procedure
  3780  00068C  50DF               	movf	indf2,w,c
  3781  00068E  6EA8               	movwf	168,c	;volatile
  3782                           
  3783                           ;EEPROM.c: 166:             users[lastUserPointer].password[position] = mUser.password[p
      +                          osition];
  3784  000690  D88E               	call	PL32	;call to abstracted procedure
  3785  000692  D892               	call	PL40	;call to abstracted procedure
  3786  000694  0E09               	movlw	9
  3787  000696  2665               	addwf	??_dataMotor^0,f,c
  3788  000698  0E00               	movlw	0
  3789  00069A  2266               	addwfc	(??_dataMotor+1)^0,f,c
  3790  00069C  D875               	call	PL24	;call to abstracted procedure
  3791                           
  3792                           ;EEPROM.c: 167:             EECON1bits.EEPGD = 0;
  3793  00069E  9EA6               	bcf	166,7,c	;volsfr
  3794                           
  3795                           ;EEPROM.c: 168:             EECON1bits.CFGS = 0;
  3796  0006A0  9CA6               	bcf	166,6,c	;volsfr
  3797                           
  3798                           ;EEPROM.c: 169:             EECON1bits.WREN = 1;
  3799  0006A2  84A6               	bsf	166,2,c	;volsfr
  3800                           
  3801                           ;EEPROM.c: 170:             INTCONbits.GIE = 0;
  3802  0006A4  9EF2               	bcf	242,7,c	;volatile
  3803                           
  3804                           ;EEPROM.c: 171:             EECON2 = 0x55;
  3805  0006A6  0E55               	movlw	85
  3806  0006A8  6EA7               	movwf	167,c	;volsfr
  3807                           
  3808                           ;EEPROM.c: 172:             EECON2 = 0xAA;
  3809  0006AA  0EAA               	movlw	170
  3810  0006AC  6EA7               	movwf	167,c	;volsfr
  3811                           
  3812                           ;EEPROM.c: 173:             EECON1bits.WR = 1;
  3813  0006AE  82A6               	bsf	166,1,c	;volsfr
  3814                           
  3815                           ;EEPROM.c: 174:             INTCONbits.GIE = 1;
  3816  0006B0  8EF2               	bsf	242,7,c	;volatile
  3817                           
  3818                           ;EEPROM.c: 175:             EECON1bits.WREN = 0;
  3819  0006B2  94A6               	bcf	166,2,c	;volsfr
  3820                           
  3821                           ;EEPROM.c: 176:             state = 13;
  3822  0006B4  0E0D               	movlw	13
  3823  0006B6  6E37               	movwf	_state@EEPROM$F1414^0,c
  3824                           
  3825                           ;EEPROM.c: 177:             break;
  3826  0006B8  0C0D               	retlw	13
  3827  0006BA                     l658:
  3828                           
  3829                           ;EEPROM.c: 179:             if(EECON1bits.WR == 0){
  3830  0006BA  B2A6               	btfsc	166,1,c	;volsfr
  3831  0006BC  0012               	return	
  3832                           
  3833                           ;EEPROM.c: 180:                 if(mUser.password[position] != '\0'){
  3834  0006BE  D877               	call	PL32	;call to abstracted procedure
  3835  0006C0  50DF               	movf	indf2,w,c
  3836  0006C2  E002               	bz	l660
  3837                           
  3838                           ;EEPROM.c: 181:                     position++;
  3839  0006C4  2A35               	incf	_position^0,f,c
  3840  0006C6  D7DB               	goto	l3321
  3841  0006C8                     l660:
  3842                           
  3843                           ;EEPROM.c: 184:                     position = 0;
  3844  0006C8  6A35               	clrf	_position^0,c
  3845                           
  3846                           ;EEPROM.c: 185:                     state = 14;
  3847  0006CA  0E0E               	movlw	14
  3848  0006CC  6E37               	movwf	_state@EEPROM$F1414^0,c
  3849  0006CE  0C0E               	retlw	14
  3850  0006D0                     l3357:
  3851                           
  3852                           ;EEPROM.c: 190:             lastUserPointer = (lastUserPointer+1)%8;
  3853  0006D0  2833               	incf	_lastUserPointer^0,w,c
  3854  0006D2  0B07               	andlw	7
  3855  0006D4  6E33               	movwf	_lastUserPointer^0,c
  3856                           
  3857                           ;EEPROM.c: 191:             EEADR = 0x95;
  3858  0006D6  0E95               	movlw	149
  3859  0006D8  6EA9               	movwf	169,c	;volatile
  3860                           
  3861                           ;EEPROM.c: 192:             EEDATA = lastUserPointer;
  3862  0006DA  C033  FFA8         	movff	_lastUserPointer,4008	;volatile
  3863                           
  3864                           ;EEPROM.c: 193:             EECON1bits.EEPGD = 0;
  3865  0006DE  9EA6               	bcf	166,7,c	;volsfr
  3866                           
  3867                           ;EEPROM.c: 194:             EECON1bits.CFGS = 0;
  3868  0006E0  9CA6               	bcf	166,6,c	;volsfr
  3869                           
  3870                           ;EEPROM.c: 195:             EECON1bits.WREN = 1;
  3871  0006E2  84A6               	bsf	166,2,c	;volsfr
  3872                           
  3873                           ;EEPROM.c: 196:             INTCONbits.GIE = 0;
  3874  0006E4  9EF2               	bcf	242,7,c	;volatile
  3875                           
  3876                           ;EEPROM.c: 197:             EECON2 = 0x55;
  3877  0006E6  0E55               	movlw	85
  3878  0006E8  6EA7               	movwf	167,c	;volsfr
  3879                           
  3880                           ;EEPROM.c: 198:             EECON2 = 0xAA;
  3881  0006EA  0EAA               	movlw	170
  3882  0006EC  6EA7               	movwf	167,c	;volsfr
  3883                           
  3884                           ;EEPROM.c: 199:             EECON1bits.WR = 1;
  3885  0006EE  82A6               	bsf	166,1,c	;volsfr
  3886                           
  3887                           ;EEPROM.c: 200:             INTCONbits.GIE = 1;
  3888  0006F0  8EF2               	bsf	242,7,c	;volatile
  3889                           
  3890                           ;EEPROM.c: 201:             EECON1bits.WREN = 0;
  3891  0006F2  94A6               	bcf	166,2,c	;volsfr
  3892                           
  3893                           ;EEPROM.c: 202:             state = 15;
  3894  0006F4  0E0F               	movlw	15
  3895  0006F6  6E37               	movwf	_state@EEPROM$F1414^0,c
  3896                           
  3897                           ;EEPROM.c: 203:             break;
  3898  0006F8  0C0F               	retlw	15
  3899  0006FA                     l663:
  3900                           
  3901                           ;EEPROM.c: 205:             if(EECON1bits.WR == 0){
  3902  0006FA  B2A6               	btfsc	166,1,c	;volsfr
  3903  0006FC  0012               	return	
  3904                           
  3905                           ;EEPROM.c: 206:                 status = 3;
  3906  0006FE  0E03               	movlw	3
  3907  000700  D754               	goto	L2
  3908  000702                     l3389:
  3909  000702  5037               	movf	_state@EEPROM$F1414^0,w,c
  3910  000704  6E65               	movwf	??_dataMotor^0,c
  3911  000706  6A66               	clrf	(??_dataMotor+1)^0,c
  3912                           
  3913                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3914                           ; Switch size 1, requested type "space"
  3915                           ; Number of cases is 1, Range of values is 0 to 0
  3916                           ; switch strategies available:
  3917                           ; Name         Instructions Cycles
  3918                           ; simple_byte            4     3 (average)
  3919                           ;	Chosen strategy is simple_byte
  3920  000708  5066               	movf	(??_dataMotor+1)^0,w,c
  3921  00070A  A4D8               	btfss	status,2,c
  3922  00070C  0012               	return	
  3923                           
  3924                           ; Switch size 1, requested type "space"
  3925                           ; Number of cases is 14, Range of values is 0 to 15
  3926                           ; switch strategies available:
  3927                           ; Name         Instructions Cycles
  3928                           ; simple_byte           43    22 (average)
  3929                           ;	Chosen strategy is simple_byte
  3930  00070E  5065               	movf	??_dataMotor^0,w,c
  3931  000710  B4D8               	btfsc	status,2,c
  3932  000712  0012               	return	
  3933  000714  0A01               	xorlw	1	; case 1
  3934  000716  E101 D73F          	bz	l3229
  3935  00071A  0A03               	xorlw	3	; case 2
  3936  00071C  E101 D748          	bz	l3239
  3937  000720  0A01               	xorlw	1	; case 3
  3938  000722  E101 D759          	bz	l3253
  3939  000726  0A07               	xorlw	7	; case 4
  3940  000728  E101 D769          	bz	l642
  3941  00072C  0A01               	xorlw	1	; case 5
  3942  00072E  E101 D76B          	bz	l3267
  3943  000732  0A03               	xorlw	3	; case 6
  3944  000734  E101 D771          	bz	l3273
  3945  000738  0A01               	xorlw	1	; case 7
  3946  00073A  E101 D77B          	bz	l651
  3947  00073E  0A0D               	xorlw	13	; case 10
  3948  000740  E101 D77D          	bz	l3289
  3949  000744  0A01               	xorlw	1	; case 11
  3950  000746  E094               	bz	l653
  3951  000748  0A07               	xorlw	7	; case 12
  3952  00074A  E09C               	bz	l3323
  3953  00074C  0A01               	xorlw	1	; case 13
  3954  00074E  E0B5               	bz	l658
  3955  000750  0A03               	xorlw	3	; case 14
  3956  000752  E0BE               	bz	l3357
  3957  000754  0A01               	xorlw	1	; case 15
  3958  000756  E0D1               	bz	l663
  3959  000758  0012               	return		;funcret
  3960  00075A                     __end_of_dataMotor:
  3961                           	callstack 0
  3962  00075A                     PL2:
  3963                           	callstack 25
  3964  00075A  50F3               	movf	243,w,c
  3965  00075C  2666               	addwf	(??_dataMotor+1)^0,f,c
  3966  00075E  50F4               	movf	244,w,c
  3967  000760  2267               	addwfc	(??_dataMotor+2)^0,f,c
  3968  000762  5035               	movf	_position^0,w,c
  3969  000764  2466               	addwf	(??_dataMotor+1)^0,w,c
  3970  000766  6EE1               	movwf	fsr1l,c
  3971  000768  0E00               	movlw	0
  3972  00076A  2067               	addwfc	(??_dataMotor+2)^0,w,c
  3973  00076C  6EE2               	movwf	fsr1h,c
  3974  00076E  50DE               	movf	postinc2,w,c
  3975  000770  18E6               	xorwf	postinc1,w,c
  3976  000772  0012               	return	
  3977  000774                     __end_ofPL2:
  3978                           	callstack 0
  3979  000774                     PL4:
  3980                           	callstack 25
  3981  000774  0F01               	addlw	low _mUser@EEPROM$F1418
  3982  000776  6ED9               	movwf	fsr2l,c
  3983  000778  6ADA               	clrf	fsr2h,c
  3984  00077A  5036               	movf	_userNum^0,w,c
  3985  00077C  0D12               	mullw	18
  3986  00077E  0E00               	movlw	low _users
  3987  000780  6E66               	movwf	(??_dataMotor+1)^0,c
  3988  000782  0E01               	movlw	high _users
  3989  000784  6E67               	movwf	(??_dataMotor+2)^0,c
  3990  000786  0012               	return	
  3991  000788                     __end_ofPL4:
  3992                           	callstack 0
  3993  000788                     PL24:
  3994                           	callstack 25
  3995  000788  50F3               	movf	243,w,c
  3996  00078A  2665               	addwf	??_dataMotor^0,f,c
  3997  00078C  50F4               	movf	244,w,c
  3998  00078E  2266               	addwfc	(??_dataMotor+1)^0,f,c
  3999  000790  5035               	movf	_position^0,w,c
  4000  000792  2465               	addwf	??_dataMotor^0,w,c
  4001  000794  6EE1               	movwf	fsr1l,c
  4002  000796  0E00               	movlw	0
  4003  000798  2066               	addwfc	(??_dataMotor+1)^0,w,c
  4004  00079A  6EE2               	movwf	fsr1h,c
  4005  00079C  CFDF FFE7          	movff	indf2,indf1
  4006  0007A0  0012               	return	
  4007  0007A2                     __end_ofPL24:
  4008                           	callstack 0
  4009  0007A2                     PL28:
  4010                           	callstack 25
  4011  0007A2  5035               	movf	_position^0,w,c
  4012  0007A4  0F01               	addlw	low _mUser@EEPROM$F1418
  4013  0007A6  6ED9               	movwf	fsr2l,c
  4014  0007A8  6ADA               	clrf	fsr2h,c
  4015  0007AA  50DF               	movf	indf2,w,c
  4016  0007AC  0012               	return	
  4017  0007AE                     __end_ofPL28:
  4018                           	callstack 0
  4019  0007AE                     PL32:
  4020                           	callstack 25
  4021  0007AE  5035               	movf	_position^0,w,c
  4022  0007B0  0F0A               	addlw	low (_mUser@EEPROM$F1418+9)
  4023  0007B2  6ED9               	movwf	fsr2l,c
  4024  0007B4  6ADA               	clrf	fsr2h,c
  4025  0007B6  0012               	return	
  4026  0007B8                     __end_ofPL32:
  4027                           	callstack 0
  4028  0007B8                     PL40:
  4029                           	callstack 25
  4030  0007B8  5033               	movf	_lastUserPointer^0,w,c
  4031  0007BA  0D12               	mullw	18
  4032  0007BC  0E00               	movlw	low _users
  4033  0007BE  6E65               	movwf	??_dataMotor^0,c
  4034  0007C0  0E01               	movlw	high _users
  4035  0007C2  6E66               	movwf	(??_dataMotor+1)^0,c
  4036  0007C4  0012               	return	
  4037  0007C6                     __end_ofPL40:
  4038                           	callstack 0
  4039                           
  4040 ;; *************** function _LcGotoXY *****************
  4041 ;; Defined at:
  4042 ;;		line 134 in file "LcTLCD.c"
  4043 ;; Parameters:    Size  Location     Type
  4044 ;;  Column          1    wreg     unsigned char 
  4045 ;;  Row             1   13[COMRAM] unsigned char 
  4046 ;; Auto vars:     Size  Location     Type
  4047 ;;  Column          1   20[COMRAM] unsigned char 
  4048 ;;  Fisics          2   18[COMRAM] int 
  4049 ;; Return value:  Size  Location     Type
  4050 ;;                  1    wreg      void 
  4051 ;; Registers used:
  4052 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4053 ;; Tracked objects:
  4054 ;;		On entry : 0/0
  4055 ;;		On exit  : 0/0
  4056 ;;		Unchanged: 0/0
  4057 ;; Data sizes:     COMRAM   BANK0   BANK1
  4058 ;;      Params:         1       0       0
  4059 ;;      Locals:         5       0       0
  4060 ;;      Temps:          2       0       0
  4061 ;;      Totals:         8       0       0
  4062 ;;Total ram usage:        8 bytes
  4063 ;; Hardware stack levels used: 1
  4064 ;; Hardware stack levels required when called: 4
  4065 ;; This function calls:
  4066 ;;		_CantaIR
  4067 ;;		_WaitForBusy
  4068 ;; This function is called by:
  4069 ;;		_LcPutChar
  4070 ;;		_menuMotor
  4071 ;;		_displayMenu
  4072 ;;		_dataMotor
  4073 ;;		_DaFindUser
  4074 ;; This function uses a non-reentrant model
  4075 ;;
  4076                           
  4077                           	psect	text29
  4078  000BE6                     __ptext29:
  4079                           	callstack 0
  4080  000BE6                     _LcGotoXY:
  4081                           	callstack 23
  4082                           
  4083                           ;incstack = 0
  4084                           ;LcGotoXY@Column stored from wreg
  4085  000BE6  6E64               	movwf	LcGotoXY@Column^0,c
  4086                           
  4087                           ;LcTLCD.c: 138:  int Fisics;;LcTLCD.c: 140:  switch (Rows) {
  4088  000BE8  D030               	goto	l2609
  4089  000BEA                     l2589:
  4090                           
  4091                           ;LcTLCD.c: 142:    Fisics = Column + (!Row ? 0 : 0x40); break;
  4092  000BEA  505D               	movf	LcGotoXY@Row^0,w,c
  4093  000BEC  E004               	bz	l267
  4094  000BEE  6A61               	clrf	(_LcGotoXY$728+1)^0,c
  4095  000BF0  0E40               	movlw	64
  4096  000BF2  6E60               	movwf	_LcGotoXY$728^0,c
  4097  000BF4  D002               	goto	l2593
  4098  000BF6                     l267:
  4099  000BF6  6A60               	clrf	_LcGotoXY$728^0,c
  4100  000BF8  6A61               	clrf	(_LcGotoXY$728+1)^0,c
  4101  000BFA                     l2593:
  4102  000BFA  5064               	movf	LcGotoXY@Column^0,w,c
  4103  000BFC  2460               	addwf	_LcGotoXY$728^0,w,c
  4104  000BFE  6E62               	movwf	LcGotoXY@Fisics^0,c
  4105  000C00  0E00               	movlw	0
  4106  000C02  2061               	addwfc	(_LcGotoXY$728+1)^0,w,c
  4107  000C04  6E63               	movwf	(LcGotoXY@Fisics+1)^0,c
  4108  000C06  D02E               	goto	l2611
  4109  000C08                     l271:
  4110                           
  4111                           ;LcTLCD.c: 144:    Fisics = Column;
  4112  000C08  C064  F062         	movff	LcGotoXY@Column,LcGotoXY@Fisics
  4113  000C0C  6A63               	clrf	(LcGotoXY@Fisics+1)^0,c
  4114                           
  4115                           ;LcTLCD.c: 145:    if (Row == 1) Fisics += 0x40; else
  4116  000C0E  045D               	decf	LcGotoXY@Row^0,w,c
  4117  000C10  E102               	bnz	l2599
  4118  000C12  0E40               	movlw	64
  4119  000C14  D004               	goto	L3
  4120  000C16                     l2599:
  4121                           
  4122                           ;LcTLCD.c: 146:    if (Row == 2) Fisics += Columns; else
  4123  000C16  0E02               	movlw	2
  4124  000C18  185D               	xorwf	LcGotoXY@Row^0,w,c
  4125  000C1A  E104               	bnz	l2603
  4126  000C1C  5043               	movf	_Columns^0,w,c
  4127  000C1E                     L3:
  4128  000C1E  2662               	addwf	LcGotoXY@Fisics^0,f,c
  4129  000C20  0E00               	movlw	0
  4130  000C22  D00D               	goto	L4
  4131  000C24                     l2603:
  4132                           
  4133                           ;LcTLCD.c: 147:    if (Row == 3) Fisics += 0x40+Columns;
  4134  000C24  0E03               	movlw	3
  4135  000C26  185D               	xorwf	LcGotoXY@Row^0,w,c
  4136  000C28  E11D               	bnz	l2611
  4137  000C2A  5043               	movf	_Columns^0,w,c
  4138  000C2C  6E5E               	movwf	??_LcGotoXY^0,c
  4139  000C2E  6A5F               	clrf	(??_LcGotoXY+1)^0,c
  4140  000C30  0E40               	movlw	64
  4141  000C32  265E               	addwf	??_LcGotoXY^0,f,c
  4142  000C34  0E00               	movlw	0
  4143  000C36  225F               	addwfc	(??_LcGotoXY+1)^0,f,c
  4144  000C38  505E               	movf	??_LcGotoXY^0,w,c
  4145  000C3A  2662               	addwf	LcGotoXY@Fisics^0,f,c
  4146  000C3C  505F               	movf	(??_LcGotoXY+1)^0,w,c
  4147  000C3E                     L4:
  4148  000C3E  2263               	addwfc	(LcGotoXY@Fisics+1)^0,f,c
  4149                           
  4150                           ;LcTLCD.c: 148:    break;
  4151  000C40  D011               	goto	l2611
  4152  000C42                     l278:
  4153                           
  4154                           ;LcTLCD.c: 151:    Fisics = Column; break;
  4155  000C42  C064  F062         	movff	LcGotoXY@Column,LcGotoXY@Fisics
  4156  000C46  6A63               	clrf	(LcGotoXY@Fisics+1)^0,c
  4157  000C48  D00D               	goto	l2611
  4158  000C4A                     l2609:
  4159  000C4A  5044               	movf	_Rows^0,w,c
  4160  000C4C  6E5E               	movwf	??_LcGotoXY^0,c
  4161  000C4E  6A5F               	clrf	(??_LcGotoXY+1)^0,c
  4162                           
  4163                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4164                           ; Switch size 1, requested type "space"
  4165                           ; Number of cases is 1, Range of values is 0 to 0
  4166                           ; switch strategies available:
  4167                           ; Name         Instructions Cycles
  4168                           ; simple_byte            4     3 (average)
  4169                           ;	Chosen strategy is simple_byte
  4170  000C50  505F               	movf	(??_LcGotoXY+1)^0,w,c
  4171  000C52  E1F7               	bnz	l278
  4172                           
  4173                           ; Switch size 1, requested type "space"
  4174                           ; Number of cases is 3, Range of values is 1 to 4
  4175                           ; switch strategies available:
  4176                           ; Name         Instructions Cycles
  4177                           ; simple_byte           10     6 (average)
  4178                           ;	Chosen strategy is simple_byte
  4179  000C54  505E               	movf	??_LcGotoXY^0,w,c
  4180  000C56  0A01               	xorlw	1	; case 1
  4181  000C58  E0F4               	bz	l278
  4182  000C5A  0A03               	xorlw	3	; case 2
  4183  000C5C  E0C6               	bz	l2589
  4184  000C5E  0A06               	xorlw	6	; case 4
  4185  000C60  E0D3               	bz	l271
  4186  000C62  D7EF               	goto	l278
  4187  000C64                     l2611:
  4188                           
  4189                           ;LcTLCD.c: 154:  WaitForBusy();
  4190  000C64  ECFD  F007         	call	_WaitForBusy	;wreg free
  4191                           
  4192                           ;LcTLCD.c: 155:  CantaIR(0x80 | Fisics);
  4193  000C68  5062               	movf	LcGotoXY@Fisics^0,w,c
  4194  000C6A  0980               	iorlw	128
  4195  000C6C  ECF7  F008         	call	_CantaIR
  4196                           
  4197                           ;LcTLCD.c: 157:  RowAct = Row;
  4198  000C70  C05D  F042         	movff	LcGotoXY@Row,_RowAct
  4199                           
  4200                           ;LcTLCD.c: 158:  ColumnAct = Column;
  4201  000C74  C064  F041         	movff	LcGotoXY@Column,_ColumnAct
  4202  000C78  0012               	return		;funcret
  4203  000C7A                     __end_of_LcGotoXY:
  4204                           	callstack 0
  4205                           
  4206 ;; *************** function _TiInitTimer *****************
  4207 ;; Defined at:
  4208 ;;		line 17 in file "TTimer.c"
  4209 ;; Parameters:    Size  Location     Type
  4210 ;;		None
  4211 ;; Auto vars:     Size  Location     Type
  4212 ;;		None
  4213 ;; Return value:  Size  Location     Type
  4214 ;;                  1    wreg      void 
  4215 ;; Registers used:
  4216 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  4217 ;; Tracked objects:
  4218 ;;		On entry : 0/0
  4219 ;;		On exit  : 0/0
  4220 ;;		Unchanged: 0/0
  4221 ;; Data sizes:     COMRAM   BANK0   BANK1
  4222 ;;      Params:         0       0       0
  4223 ;;      Locals:         0       0       0
  4224 ;;      Temps:          0       0       0
  4225 ;;      Totals:         0       0       0
  4226 ;;Total ram usage:        0 bytes
  4227 ;; Hardware stack levels used: 1
  4228 ;; Hardware stack levels required when called: 2
  4229 ;; This function calls:
  4230 ;;		Nothing
  4231 ;; This function is called by:
  4232 ;;		_main
  4233 ;; This function uses a non-reentrant model
  4234 ;;
  4235                           
  4236                           	psect	text30
  4237  0010A8                     __ptext30:
  4238                           	callstack 0
  4239  0010A8                     _TiInitTimer:
  4240                           	callstack 28
  4241                           
  4242                           ;TTimer.c: 20:     RCONbits.IPEN = 0;
  4243                           
  4244                           ;incstack = 0
  4245  0010A8  9ED0               	bcf	208,7,c	;volatile
  4246                           
  4247                           ;TTimer.c: 21:     INTCONbits.GIE_GIEH = 1;
  4248  0010AA  8EF2               	bsf	242,7,c	;volatile
  4249                           
  4250                           ;TTimer.c: 22:     INTCONbits.PEIE_GIEL = 1;
  4251  0010AC  8CF2               	bsf	242,6,c	;volatile
  4252                           
  4253                           ;TTimer.c: 23:     INTCONbits.TMR0IE = 1;
  4254  0010AE  8AF2               	bsf	242,5,c	;volatile
  4255                           
  4256                           ;TTimer.c: 24:     INTCONbits.TMR0IF = 0;
  4257  0010B0  94F2               	bcf	242,2,c	;volatile
  4258                           
  4259                           ;TTimer.c: 25:     T0CON = 0x08;
  4260  0010B2  0E08               	movlw	8
  4261  0010B4  6ED5               	movwf	213,c	;volatile
  4262                           
  4263                           ;TTimer.c: 27:     TMR0H = 0xD8;
  4264  0010B6  0ED8               	movlw	216
  4265  0010B8  6ED7               	movwf	215,c	;volatile
  4266                           
  4267                           ;TTimer.c: 28:     TMR0L = 0xF0;
  4268  0010BA  0EF0               	movlw	240
  4269  0010BC  6ED6               	movwf	214,c	;volatile
  4270                           
  4271                           ;TTimer.c: 29:     T0CONbits.TMR0ON = 1;
  4272  0010BE  8ED5               	bsf	213,7,c	;volatile
  4273                           
  4274                           ;TTimer.c: 31:     for (counter=0;counter<25;counter++) {
  4275  0010C0  6A4F               	clrf	_counter^0,c
  4276  0010C2                     l2833:
  4277  0010C2  0E18               	movlw	24
  4278  0010C4  644F               	cpfsgt	_counter^0,c
  4279  0010C6  D001               	goto	l2837
  4280  0010C8  0C18               	retlw	24
  4281  0010CA                     l2837:
  4282                           
  4283                           ;TTimer.c: 32:  s_Timers[counter].b_busy=0;
  4284  0010CA  EC79  F008         	call	PL18	;call to abstracted procedure
  4285  0010CE  6ADF               	clrf	indf2,c
  4286                           
  4287                           ;TTimer.c: 33:     }
  4288  0010D0  2A4F               	incf	_counter^0,f,c
  4289  0010D2  D7F7               	goto	l2833
  4290  0010D4                     __end_of_TiInitTimer:
  4291                           	callstack 0
  4292                           
  4293 ;; *************** function _SMSMotor *****************
  4294 ;; Defined at:
  4295 ;;		line 133 in file "keypad.c"
  4296 ;; Parameters:    Size  Location     Type
  4297 ;;		None
  4298 ;; Auto vars:     Size  Location     Type
  4299 ;;		None
  4300 ;; Return value:  Size  Location     Type
  4301 ;;                  1    wreg      void 
  4302 ;; Registers used:
  4303 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4304 ;; Tracked objects:
  4305 ;;		On entry : 0/0
  4306 ;;		On exit  : 0/0
  4307 ;;		Unchanged: 0/0
  4308 ;; Data sizes:     COMRAM   BANK0   BANK1
  4309 ;;      Params:         0       0       0
  4310 ;;      Locals:         0       0       0
  4311 ;;      Temps:          2       0       0
  4312 ;;      Totals:         2       0       0
  4313 ;;Total ram usage:        2 bytes
  4314 ;; Hardware stack levels used: 1
  4315 ;; Hardware stack levels required when called: 4
  4316 ;; This function calls:
  4317 ;;		_KeGetGenericValue
  4318 ;;		_TiGetTics
  4319 ;;		_TiResetTics
  4320 ;; This function is called by:
  4321 ;;		_main
  4322 ;; This function uses a non-reentrant model
  4323 ;;
  4324                           
  4325                           	psect	text31
  4326  000B30                     __ptext31:
  4327                           	callstack 0
  4328  000B30                     _SMSMotor:
  4329                           	callstack 26
  4330                           
  4331                           ;keypad.c: 134:     switch(stateSMS){
  4332                           
  4333                           ;incstack = 0
  4334  000B30  D042               	goto	l2951
  4335  000B32                     l2899:
  4336                           
  4337                           ;keypad.c: 139:             if(pressed){
  4338  000B32  5049               	movf	_pressed^0,w,c
  4339  000B34  E020               	bz	l163
  4340                           
  4341                           ;keypad.c: 140:                 stateSMS=1;
  4342  000B36  0E01               	movlw	1
  4343  000B38  6E45               	movwf	_stateSMS^0,c
  4344                           
  4345                           ;keypad.c: 141:                 currentKey = KeGetGenericValue();
  4346  000B3A  EC13  F009         	call	_KeGetGenericValue	;wreg free
  4347  000B3E  6E4B               	movwf	_currentKey^0,c
  4348                           
  4349                           ;keypad.c: 142:                 available = 2;
  4350  000B40  0E02               	movlw	2
  4351  000B42  6E47               	movwf	_available^0,c
  4352                           
  4353                           ;keypad.c: 143:                 if (TiGetTics(timer_SMS)>=1200){
  4354  000B44  504C               	movf	_timer_SMS^0,w,c
  4355  000B46  EC80  F008         	call	_TiGetTics
  4356  000B4A  BE56               	btfsc	(?_TiGetTics+1)^0,7,c
  4357  000B4C  D007               	goto	l2915
  4358  000B4E  D846               	call	PL60	;call to abstracted procedure
  4359  000B50  E305               	bnc	l2915
  4360                           
  4361                           ;keypad.c: 144:                     available = 1;
  4362  000B52  0E01               	movlw	1
  4363  000B54  6E47               	movwf	_available^0,c
  4364                           
  4365                           ;keypad.c: 145:                     numPresses = 0;
  4366  000B56  6A48               	clrf	_numPresses^0,c
  4367                           
  4368                           ;keypad.c: 146:                     previous = 0;
  4369  000B58  6A4A               	clrf	_previous^0,c
  4370                           
  4371                           ;keypad.c: 147:                 } else if(numPresses != 0 && previous != currentKey ){
  4372  000B5A  D00A               	goto	l2925
  4373  000B5C                     l2915:
  4374  000B5C  5048               	movf	_numPresses^0,w,c
  4375  000B5E  E008               	bz	l2925
  4376  000B60  504B               	movf	_currentKey^0,w,c
  4377  000B62  184A               	xorwf	_previous^0,w,c
  4378  000B64  E005               	bz	l2925
  4379                           
  4380                           ;keypad.c: 149:                     available = 1;
  4381  000B66  0E01               	movlw	1
  4382  000B68  6E47               	movwf	_available^0,c
  4383                           
  4384                           ;keypad.c: 151:                     previous = currentKey;
  4385  000B6A  C04B  F04A         	movff	_currentKey,_previous
  4386                           
  4387                           ;keypad.c: 153:                     numPresses = 0;
  4388  000B6E  6A48               	clrf	_numPresses^0,c
  4389  000B70                     l2925:
  4390                           
  4391                           ;keypad.c: 157:                 TiResetTics(timer_SMS);
  4392  000B70  504C               	movf	_timer_SMS^0,w,c
  4393  000B72  EF05  F009         	goto	_TiResetTics
  4394  000B76                     l163:
  4395                           
  4396                           ;keypad.c: 160:               previous=currentKey;
  4397  000B76  C04B  F04A         	movff	_currentKey,_previous
  4398  000B7A  0012               	return	
  4399  000B7C                     l2927:
  4400                           
  4401                           ;keypad.c: 172:             numPresses++;
  4402  000B7C  2A48               	incf	_numPresses^0,f,c
  4403                           
  4404                           ;keypad.c: 173:             stateSMS = 2;
  4405  000B7E  0E02               	movlw	2
  4406  000B80  6E45               	movwf	_stateSMS^0,c
  4407                           
  4408                           ;keypad.c: 174:             break;
  4409  000B82  0C02               	retlw	2
  4410  000B84                     l2931:
  4411                           
  4412                           ;keypad.c: 177:             if (!pressed){
  4413  000B84  5049               	movf	_pressed^0,w,c
  4414  000B86  A4D8               	btfss	status,2,c
  4415  000B88  0012               	return	
  4416                           
  4417                           ;keypad.c: 178:                 TiResetTics(timer_SMS);
  4418  000B8A  504C               	movf	_timer_SMS^0,w,c
  4419  000B8C  EC05  F009         	call	_TiResetTics
  4420                           
  4421                           ;keypad.c: 180:                 stateSMS = 0;
  4422  000B90  6A45               	clrf	_stateSMS^0,c
  4423  000B92  0012               	return	
  4424  000B94                     l2937:
  4425                           
  4426                           ;keypad.c: 185:             if(pressed){
  4427  000B94  5049               	movf	_pressed^0,w,c
  4428  000B96  B4D8               	btfsc	status,2,c
  4429  000B98  0012               	return	
  4430                           
  4431                           ;keypad.c: 186:                 stateSMS = 4;
  4432  000B9A  EFA2  F008         	goto	PL70	;call to abstracted procedure
  4433  000B9E                     l2941:
  4434                           
  4435                           ;keypad.c: 191:             stateSMS = 5;
  4436  000B9E  0E05               	movlw	5
  4437  000BA0  6E45               	movwf	_stateSMS^0,c
  4438                           
  4439                           ;keypad.c: 192:             break;
  4440  000BA2  0C05               	retlw	5
  4441  000BA4                     l2943:
  4442                           
  4443                           ;keypad.c: 194:             if (!pressed){
  4444  000BA4  5049               	movf	_pressed^0,w,c
  4445  000BA6  A4D8               	btfss	status,2,c
  4446  000BA8  0012               	return	
  4447                           
  4448                           ;keypad.c: 195:                 TiResetTics(timer_SMS);
  4449  000BAA  504C               	movf	_timer_SMS^0,w,c
  4450  000BAC  EC05  F009         	call	_TiResetTics
  4451                           
  4452                           ;keypad.c: 197:                 stateSMS = 3;
  4453  000BB0  0E03               	movlw	3
  4454  000BB2  6E45               	movwf	_stateSMS^0,c
  4455  000BB4  0C03               	retlw	3
  4456  000BB6                     l2951:
  4457  000BB6  5045               	movf	_stateSMS^0,w,c
  4458  000BB8  6E5C               	movwf	??_SMSMotor^0,c
  4459  000BBA  6A5D               	clrf	(??_SMSMotor+1)^0,c
  4460                           
  4461                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4462                           ; Switch size 1, requested type "space"
  4463                           ; Number of cases is 1, Range of values is 0 to 0
  4464                           ; switch strategies available:
  4465                           ; Name         Instructions Cycles
  4466                           ; simple_byte            4     3 (average)
  4467                           ;	Chosen strategy is simple_byte
  4468  000BBC  505D               	movf	(??_SMSMotor+1)^0,w,c
  4469  000BBE  A4D8               	btfss	status,2,c
  4470  000BC0  0012               	return	
  4471                           
  4472                           ; Switch size 1, requested type "space"
  4473                           ; Number of cases is 6, Range of values is 0 to 5
  4474                           ; switch strategies available:
  4475                           ; Name         Instructions Cycles
  4476                           ; simple_byte           19    10 (average)
  4477                           ;	Chosen strategy is simple_byte
  4478  000BC2  505C               	movf	??_SMSMotor^0,w,c
  4479  000BC4  E0B6               	bz	l2899
  4480  000BC6  0A01               	xorlw	1	; case 1
  4481  000BC8  E0D9               	bz	l2927
  4482  000BCA  0A03               	xorlw	3	; case 2
  4483  000BCC  E0DB               	bz	l2931
  4484  000BCE  0A01               	xorlw	1	; case 3
  4485  000BD0  E0E1               	bz	l2937
  4486  000BD2  0A07               	xorlw	7	; case 4
  4487  000BD4  E0E4               	bz	l2941
  4488  000BD6  0A01               	xorlw	1	; case 5
  4489  000BD8  E0E5               	bz	l2943
  4490  000BDA  0012               	return		;funcret
  4491  000BDC                     __end_of_SMSMotor:
  4492                           	callstack 0
  4493  000BDC                     PL60:
  4494                           	callstack 23
  4495  000BDC  0EB0               	movlw	176
  4496  000BDE  5C55               	subwf	?_TiGetTics^0,w,c
  4497  000BE0  0E04               	movlw	4
  4498  000BE2  5856               	subwfb	(?_TiGetTics+1)^0,w,c
  4499  000BE4  0012               	return	
  4500  000BE6                     __end_ofPL60:
  4501                           	callstack 0
  4502                           
  4503 ;; *************** function _KeGetGenericValue *****************
  4504 ;; Defined at:
  4505 ;;		line 224 in file "keypad.c"
  4506 ;; Parameters:    Size  Location     Type
  4507 ;;		None
  4508 ;; Auto vars:     Size  Location     Type
  4509 ;;		None
  4510 ;; Return value:  Size  Location     Type
  4511 ;;                  1    wreg      unsigned char 
  4512 ;; Registers used:
  4513 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4514 ;; Tracked objects:
  4515 ;;		On entry : 0/0
  4516 ;;		On exit  : 0/0
  4517 ;;		Unchanged: 0/0
  4518 ;; Data sizes:     COMRAM   BANK0   BANK1
  4519 ;;      Params:         0       0       0
  4520 ;;      Locals:         0       0       0
  4521 ;;      Temps:          2       0       0
  4522 ;;      Totals:         2       0       0
  4523 ;;Total ram usage:        2 bytes
  4524 ;; Hardware stack levels used: 1
  4525 ;; Hardware stack levels required when called: 3
  4526 ;; This function calls:
  4527 ;;		_getColumn
  4528 ;; This function is called by:
  4529 ;;		_SMSMotor
  4530 ;;		_KeGetCharValue
  4531 ;;		_menuMotor
  4532 ;; This function uses a non-reentrant model
  4533 ;;
  4534                           
  4535                           	psect	text32
  4536  001226                     __ptext32:
  4537                           	callstack 0
  4538  001226                     _KeGetGenericValue:
  4539                           	callstack 26
  4540                           
  4541                           ;keypad.c: 225:     return TABLE[(row*3)+getColumn()];
  4542                           
  4543                           ;incstack = 0
  4544  001226  EC4B  F009         	call	_getColumn	;wreg free
  4545  00122A  6E55               	movwf	??_KeGetGenericValue^0,c
  4546  00122C  504E               	movf	_row^0,w,c
  4547  00122E  0D03               	mullw	3
  4548  001230  50F3               	movf	243,w,c
  4549  001232  0F23               	addlw	low _TABLE
  4550  001234  2455               	addwf	??_KeGetGenericValue^0,w,c
  4551  001236  6E56               	movwf	(??_KeGetGenericValue+1)^0,c
  4552  001238  C056  FFF6         	movff	??_KeGetGenericValue+1,tblptrl
  4553  00123C                     	if	1	;There is more than 1 active tblptr byte
  4554  00123C  EF73  F007         	goto	PL12	;call to abstracted procedure
  4555  001240                     __end_of_KeGetGenericValue:
  4556                           	callstack 0
  4557                           
  4558 ;; *************** function _getColumn *****************
  4559 ;; Defined at:
  4560 ;;		line 211 in file "keypad.c"
  4561 ;; Parameters:    Size  Location     Type
  4562 ;;		None
  4563 ;; Auto vars:     Size  Location     Type
  4564 ;;		None
  4565 ;; Return value:  Size  Location     Type
  4566 ;;                  1    wreg      unsigned char 
  4567 ;; Registers used:
  4568 ;;		wreg
  4569 ;; Tracked objects:
  4570 ;;		On entry : 0/0
  4571 ;;		On exit  : 0/0
  4572 ;;		Unchanged: 0/0
  4573 ;; Data sizes:     COMRAM   BANK0   BANK1
  4574 ;;      Params:         0       0       0
  4575 ;;      Locals:         0       0       0
  4576 ;;      Temps:          0       0       0
  4577 ;;      Totals:         0       0       0
  4578 ;;Total ram usage:        0 bytes
  4579 ;; Hardware stack levels used: 1
  4580 ;; Hardware stack levels required when called: 2
  4581 ;; This function calls:
  4582 ;;		Nothing
  4583 ;; This function is called by:
  4584 ;;		_KeGetGenericValue
  4585 ;; This function uses a non-reentrant model
  4586 ;;
  4587                           
  4588                           	psect	text33
  4589  001296                     __ptext33:
  4590                           	callstack 0
  4591  001296                     _getColumn:
  4592                           	callstack 26
  4593                           
  4594                           ;keypad.c: 212:     if (!PORTBbits.RB0) return 0;
  4595                           
  4596                           ;incstack = 0
  4597  001296  A081               	btfss	129,0,c	;volatile
  4598  001298  0C00               	retlw	0
  4599                           
  4600                           ;keypad.c: 213:     if (!PORTBbits.RB1) return 1;
  4601  00129A  A281               	btfss	129,1,c	;volatile
  4602  00129C  0C01               	retlw	1
  4603                           
  4604                           ;keypad.c: 214:     return 2;
  4605  00129E  0C02               	retlw	2	;funcret
  4606  0012A0                     __end_of_getColumn:
  4607                           	callstack 0
  4608                           
  4609 ;; *************** function _LcInit *****************
  4610 ;; Defined at:
  4611 ;;		line 68 in file "LcTLCD.c"
  4612 ;; Parameters:    Size  Location     Type
  4613 ;;  rows            1    wreg     unsigned char 
  4614 ;;  columns         1   17[COMRAM] unsigned char 
  4615 ;; Auto vars:     Size  Location     Type
  4616 ;;  rows            1   18[COMRAM] unsigned char 
  4617 ;;  i               2   19[COMRAM] int 
  4618 ;; Return value:  Size  Location     Type
  4619 ;;                  1    wreg      void 
  4620 ;; Registers used:
  4621 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4622 ;; Tracked objects:
  4623 ;;		On entry : 0/0
  4624 ;;		On exit  : 0/0
  4625 ;;		Unchanged: 0/0
  4626 ;; Data sizes:     COMRAM   BANK0   BANK1
  4627 ;;      Params:         1       0       0
  4628 ;;      Locals:         3       0       0
  4629 ;;      Temps:          0       0       0
  4630 ;;      Totals:         4       0       0
  4631 ;;Total ram usage:        4 bytes
  4632 ;; Hardware stack levels used: 1
  4633 ;; Hardware stack levels required when called: 4
  4634 ;; This function calls:
  4635 ;;		_CantaIR
  4636 ;;		_EscriuPrimeraOrdre
  4637 ;;		_Espera
  4638 ;;		_TiGetTimer
  4639 ;;		_WaitForBusy
  4640 ;; This function is called by:
  4641 ;;		_main
  4642 ;; This function uses a non-reentrant model
  4643 ;;
  4644                           
  4645                           	psect	text34
  4646  0009A8                     __ptext34:
  4647                           	callstack 0
  4648  0009A8                     _LcInit:
  4649                           	callstack 26
  4650                           
  4651                           ;incstack = 0
  4652                           ;LcInit@rows stored from wreg
  4653  0009A8  6E62               	movwf	LcInit@rows^0,c
  4654                           
  4655                           ;LcTLCD.c: 74:  int i;;LcTLCD.c: 75:  Timer = TiGetTimer();
  4656  0009AA  EC6A  F008         	call	_TiGetTimer	;wreg free
  4657  0009AE  6E2F               	movwf	_Timer^0,c
  4658  0009B0  6A30               	clrf	(_Timer+1)^0,c
  4659                           
  4660                           ;LcTLCD.c: 76:  Rows = rows; Columns = columns;
  4661  0009B2  C062  F044         	movff	LcInit@rows,_Rows
  4662  0009B6  C061  F043         	movff	LcInit@columns,_Columns
  4663                           
  4664                           ;LcTLCD.c: 77:  RowAct = ColumnAct = 0;
  4665  0009BA  6A41               	clrf	_ColumnAct^0,c
  4666  0009BC  6A42               	clrf	_RowAct^0,c
  4667                           
  4668                           ;LcTLCD.c: 78:  (TRISDbits.TRISD4 = TRISDbits.TRISD5 = TRISDbits.TRISD6 = 0);
  4669  0009BE  9C95               	bcf	149,6,c	;volatile
  4670  0009C0  9A95               	bcf	149,5,c	;volatile
  4671  0009C2  9895               	bcf	149,4,c	;volatile
  4672                           
  4673                           ;LcTLCD.c: 79:  for (i = 0; i < 2; i++) {
  4674  0009C4  6A63               	clrf	LcInit@i^0,c
  4675  0009C6  6A64               	clrf	(LcInit@i+1)^0,c
  4676  0009C8                     l2863:
  4677                           
  4678                           ;LcTLCD.c: 80:   Espera(Timer, 100);
  4679  0009C8  D84C               	call	PL8	;call to abstracted procedure
  4680  0009CA  0E64               	movlw	100
  4681  0009CC  6E5E               	movwf	Espera@ms^0,c
  4682  0009CE  ECD8  F008         	call	_Espera	;wreg free
  4683                           
  4684                           ;LcTLCD.c: 83:   EscriuPrimeraOrdre(0x02 | 0x01);
  4685  0009D2  0E03               	movlw	3
  4686  0009D4  EC7F  F006         	call	_EscriuPrimeraOrdre
  4687                           
  4688                           ;LcTLCD.c: 84:   Espera(Timer, 5);
  4689  0009D8  D844               	call	PL8	;call to abstracted procedure
  4690  0009DA  0E05               	movlw	5
  4691  0009DC  6E5E               	movwf	Espera@ms^0,c
  4692  0009DE  ECD8  F008         	call	_Espera	;wreg free
  4693                           
  4694                           ;LcTLCD.c: 85:   EscriuPrimeraOrdre(0x02 | 0x01);
  4695  0009E2  0E03               	movlw	3
  4696  0009E4  EC7F  F006         	call	_EscriuPrimeraOrdre
  4697                           
  4698                           ;LcTLCD.c: 86:   Espera(Timer, 1);
  4699  0009E8  D83C               	call	PL8	;call to abstracted procedure
  4700  0009EA  0E01               	movlw	1
  4701  0009EC  6E5E               	movwf	Espera@ms^0,c
  4702  0009EE  ECD8  F008         	call	_Espera	;wreg free
  4703                           
  4704                           ;LcTLCD.c: 87:   EscriuPrimeraOrdre(0x02 | 0x01);
  4705  0009F2  0E03               	movlw	3
  4706  0009F4  EC7F  F006         	call	_EscriuPrimeraOrdre
  4707                           
  4708                           ;LcTLCD.c: 88:   Espera(Timer, 1);
  4709  0009F8  D834               	call	PL8	;call to abstracted procedure
  4710  0009FA  0E01               	movlw	1
  4711  0009FC  6E5E               	movwf	Espera@ms^0,c
  4712  0009FE  ECD8  F008         	call	_Espera	;wreg free
  4713                           
  4714                           ;LcTLCD.c: 91:   EscriuPrimeraOrdre(0x02);
  4715  000A02  0E02               	movlw	2
  4716  000A04  EC7F  F006         	call	_EscriuPrimeraOrdre
  4717                           
  4718                           ;LcTLCD.c: 92:   Espera(Timer, 1);
  4719  000A08  D82C               	call	PL8	;call to abstracted procedure
  4720  000A0A  0E01               	movlw	1
  4721  000A0C  6E5E               	movwf	Espera@ms^0,c
  4722  000A0E  ECD8  F008         	call	_Espera	;wreg free
  4723                           
  4724                           ;LcTLCD.c: 93:   CantaIR(0x20 | 0x08);
  4725  000A12  0E28               	movlw	40
  4726  000A14  ECF7  F008         	call	_CantaIR
  4727                           
  4728                           ;LcTLCD.c: 96:   WaitForBusy(); CantaIR(0x08);
  4729  000A18  ECFD  F007         	call	_WaitForBusy	;wreg free
  4730  000A1C  0E08               	movlw	8
  4731  000A1E  ECF7  F008         	call	_CantaIR
  4732                           
  4733                           ;LcTLCD.c: 97:   WaitForBusy(); CantaIR(0x01);
  4734  000A22  ECFD  F007         	call	_WaitForBusy	;wreg free
  4735  000A26  0E01               	movlw	1
  4736  000A28  ECF7  F008         	call	_CantaIR
  4737                           
  4738                           ;LcTLCD.c: 98:   Espera(Timer,3);
  4739  000A2C  D81A               	call	PL8	;call to abstracted procedure
  4740  000A2E  0E03               	movlw	3
  4741  000A30  6E5E               	movwf	Espera@ms^0,c
  4742  000A32  ECD8  F008         	call	_Espera	;wreg free
  4743                           
  4744                           ;LcTLCD.c: 99:   WaitForBusy(); CantaIR(0x04 | 0x02);
  4745  000A36  ECFD  F007         	call	_WaitForBusy	;wreg free
  4746  000A3A  0E06               	movlw	6
  4747  000A3C  ECF7  F008         	call	_CantaIR
  4748                           
  4749                           ;LcTLCD.c: 100:   WaitForBusy(); CantaIR(0x08 | 0x04 | 0x02 | 0x01);
  4750  000A40  ECFD  F007         	call	_WaitForBusy	;wreg free
  4751  000A44  0E0F               	movlw	15
  4752  000A46  ECF7  F008         	call	_CantaIR
  4753                           
  4754                           ;LcTLCD.c: 101:  }
  4755  000A4A  4A63               	infsnz	LcInit@i^0,f,c
  4756  000A4C  2A64               	incf	(LcInit@i+1)^0,f,c
  4757  000A4E  BE64               	btfsc	(LcInit@i+1)^0,7,c
  4758  000A50  D7BB               	goto	l2863
  4759  000A52  5064               	movf	(LcInit@i+1)^0,w,c
  4760  000A54  E105               	bnz	u2140
  4761  000A56  0E02               	movlw	2
  4762  000A58  5C63               	subwf	LcInit@i^0,w,c
  4763  000A5A  B0D8               	btfsc	status,0,c
  4764  000A5C  0012               	return	
  4765  000A5E  D7B4               	goto	l2863
  4766  000A60                     u2140:
  4767  000A60  0012               	return		;funcret
  4768  000A62                     __end_of_LcInit:
  4769                           	callstack 0
  4770  000A62                     PL8:
  4771                           	callstack 26
  4772  000A62  C02F  F05C         	movff	_Timer,Espera@Timer
  4773  000A66  C030  F05D         	movff	_Timer+1,Espera@Timer+1
  4774  000A6A  6A5F               	clrf	(Espera@ms+1)^0,c
  4775  000A6C  0012               	return	
  4776  000A6E                     __end_ofPL8:
  4777                           	callstack 0
  4778                           
  4779 ;; *************** function _WaitForBusy *****************
  4780 ;; Defined at:
  4781 ;;		line 261 in file "LcTLCD.c"
  4782 ;; Parameters:    Size  Location     Type
  4783 ;;		None
  4784 ;; Auto vars:     Size  Location     Type
  4785 ;;  Busy            1   12[COMRAM] unsigned char 
  4786 ;; Return value:  Size  Location     Type
  4787 ;;                  1    wreg      void 
  4788 ;; Registers used:
  4789 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4790 ;; Tracked objects:
  4791 ;;		On entry : 0/0
  4792 ;;		On exit  : 0/0
  4793 ;;		Unchanged: 0/0
  4794 ;; Data sizes:     COMRAM   BANK0   BANK1
  4795 ;;      Params:         0       0       0
  4796 ;;      Locals:         1       0       0
  4797 ;;      Temps:          0       0       0
  4798 ;;      Totals:         1       0       0
  4799 ;;Total ram usage:        1 bytes
  4800 ;; Hardware stack levels used: 1
  4801 ;; Hardware stack levels required when called: 3
  4802 ;; This function calls:
  4803 ;;		_TiGetTics
  4804 ;;		_TiResetTics
  4805 ;; This function is called by:
  4806 ;;		_LcInit
  4807 ;;		_LcClear
  4808 ;;		_LcCursorOn
  4809 ;;		_LcCursorOff
  4810 ;;		_LcGotoXY
  4811 ;;		_LcPutChar
  4812 ;; This function uses a non-reentrant model
  4813 ;;
  4814                           
  4815                           	psect	text35
  4816  000FFA                     __ptext35:
  4817                           	callstack 0
  4818  000FFA                     _WaitForBusy:
  4819                           	callstack 24
  4820                           
  4821                           ;LcTLCD.c: 262:  (TRISDbits.TRISD0 = TRISDbits.TRISD1 = TRISDbits.TRISD2 = TRISDbits.TRI
      +                          SD3 = 1);
  4822                           
  4823                           ;incstack = 0
  4824  000FFA  8695               	bsf	149,3,c	;volatile
  4825  000FFC  8495               	bsf	149,2,c	;volatile
  4826  000FFE  8295               	bsf	149,1,c	;volatile
  4827  001000  8095               	bsf	149,0,c	;volatile
  4828                           
  4829                           ;LcTLCD.c: 263:  (LATDbits.LATD4 = 0);
  4830  001002  988C               	bcf	140,4,c	;volatile
  4831                           
  4832                           ;LcTLCD.c: 264:  (LATDbits.LATD5 = 1);
  4833  001004  8A8C               	bsf	140,5,c	;volatile
  4834                           
  4835                           ;LcTLCD.c: 265:  TiResetTics(Timer);
  4836  001006  502F               	movf	_Timer^0,w,c
  4837  001008  EC05  F009         	call	_TiResetTics
  4838  00100C                     l2563:
  4839                           
  4840                           ;LcTLCD.c: 267:   (LATDbits.LATD6 = 1);(LATDbits.LATD6 = 1);
  4841  00100C  8C8C               	bsf	140,6,c	;volatile
  4842  00100E  8C8C               	bsf	140,6,c	;volatile
  4843                           
  4844                           ;LcTLCD.c: 268:   Busy = (PORTDbits.RD3);
  4845  001010  0E00               	movlw	0
  4846  001012  B683               	btfsc	131,3,c	;volatile
  4847  001014  0E01               	movlw	1
  4848  001016  6E5C               	movwf	WaitForBusy@Busy^0,c
  4849                           
  4850                           ;LcTLCD.c: 269:   (LATDbits.LATD6 = 0);
  4851  001018  9C8C               	bcf	140,6,c	;volatile
  4852                           
  4853                           ;LcTLCD.c: 270:   (LATDbits.LATD6 = 0);
  4854  00101A  9C8C               	bcf	140,6,c	;volatile
  4855                           
  4856                           ;LcTLCD.c: 271:   (LATDbits.LATD6 = 1);(LATDbits.LATD6 = 1);
  4857  00101C  8C8C               	bsf	140,6,c	;volatile
  4858  00101E  8C8C               	bsf	140,6,c	;volatile
  4859                           
  4860                           ;LcTLCD.c: 273:   (LATDbits.LATD6 = 0);
  4861  001020  9C8C               	bcf	140,6,c	;volatile
  4862                           
  4863                           ;LcTLCD.c: 274:   (LATDbits.LATD6 = 0);
  4864  001022  9C8C               	bcf	140,6,c	;volatile
  4865                           
  4866                           ;LcTLCD.c: 275:   if (TiGetTics(Timer)) break;
  4867  001024  502F               	movf	_Timer^0,w,c
  4868  001026  EC80  F008         	call	_TiGetTics
  4869  00102A  5055               	movf	?_TiGetTics^0,w,c
  4870  00102C  1056               	iorwf	(?_TiGetTics+1)^0,w,c
  4871  00102E  E001               	bz	l2585
  4872  001030  0012               	return	
  4873  001032                     l2585:
  4874                           
  4875                           ;LcTLCD.c: 276:  } while(Busy);
  4876  001032  505C               	movf	WaitForBusy@Busy^0,w,c
  4877  001034  E1EB               	bnz	l2563
  4878  001036  0012               	return		;funcret
  4879  001038                     __end_of_WaitForBusy:
  4880                           	callstack 0
  4881                           
  4882 ;; *************** function _TiGetTimer *****************
  4883 ;; Defined at:
  4884 ;;		line 74 in file "TTimer.c"
  4885 ;; Parameters:    Size  Location     Type
  4886 ;;		None
  4887 ;; Auto vars:     Size  Location     Type
  4888 ;;		None
  4889 ;; Return value:  Size  Location     Type
  4890 ;;                  1    wreg      unsigned char 
  4891 ;; Registers used:
  4892 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  4893 ;; Tracked objects:
  4894 ;;		On entry : 0/0
  4895 ;;		On exit  : 0/0
  4896 ;;		Unchanged: 0/0
  4897 ;; Data sizes:     COMRAM   BANK0   BANK1
  4898 ;;      Params:         0       0       0
  4899 ;;      Locals:         0       0       0
  4900 ;;      Temps:          1       0       0
  4901 ;;      Totals:         1       0       0
  4902 ;;Total ram usage:        1 bytes
  4903 ;; Hardware stack levels used: 1
  4904 ;; Hardware stack levels required when called: 2
  4905 ;; This function calls:
  4906 ;;		Nothing
  4907 ;; This function is called by:
  4908 ;;		_initKeypad
  4909 ;;		_LcInit
  4910 ;;		_initMenu
  4911 ;; This function uses a non-reentrant model
  4912 ;;
  4913                           
  4914                           	psect	text36
  4915  0010D4                     __ptext36:
  4916                           	callstack 0
  4917  0010D4                     _TiGetTimer:
  4918                           	callstack 27
  4919                           
  4920                           ;TTimer.c: 78:     counter=0;
  4921                           
  4922                           ;incstack = 0
  4923  0010D4  6A4F               	clrf	_counter^0,c
  4924                           
  4925                           ;TTimer.c: 79:     while (s_Timers[counter].b_busy==1) {
  4926  0010D6  D005               	goto	l2693
  4927  0010D8                     l2685:
  4928                           
  4929                           ;TTimer.c: 80:         counter++;
  4930  0010D8  2A4F               	incf	_counter^0,f,c
  4931                           
  4932                           ;TTimer.c: 81:  if (counter == 25) return -1;
  4933  0010DA  0E19               	movlw	25
  4934  0010DC  184F               	xorwf	_counter^0,w,c
  4935  0010DE  E101               	bnz	l2693
  4936  0010E0  0CFF               	retlw	255
  4937  0010E2                     l2693:
  4938                           
  4939                           ;TTimer.c: 79:     while (s_Timers[counter].b_busy==1) {
  4940  0010E2  D807               	call	PL18	;call to abstracted procedure
  4941  0010E4  04DE               	decf	postinc2,w,c
  4942  0010E6  E0F8               	bz	l2685
  4943                           
  4944                           ;TTimer.c: 83:     s_Timers[counter].b_busy=1;
  4945  0010E8  D804               	call	PL18	;call to abstracted procedure
  4946  0010EA  0E01               	movlw	1
  4947  0010EC  6EDF               	movwf	indf2,c
  4948                           
  4949                           ;TTimer.c: 84:     return (counter);
  4950  0010EE  504F               	movf	_counter^0,w,c
  4951  0010F0  0012               	return		;funcret
  4952  0010F2                     __end_of_TiGetTimer:
  4953                           	callstack 0
  4954  0010F2                     PL18:
  4955                           	callstack 28
  4956  0010F2  504F               	movf	_counter^0,w,c
  4957  0010F4  0D03               	mullw	3
  4958  0010F6  50F3               	movf	243,w,c
  4959  0010F8  0F82               	addlw	low (_s_Timers+2)
  4960  0010FA  6ED9               	movwf	fsr2l,c
  4961  0010FC  6ADA               	clrf	fsr2h,c
  4962  0010FE  0012               	return	
  4963  001100                     __end_ofPL18:
  4964                           	callstack 0
  4965                           
  4966 ;; *************** function _Espera *****************
  4967 ;; Defined at:
  4968 ;;		line 210 in file "LcTLCD.c"
  4969 ;; Parameters:    Size  Location     Type
  4970 ;;  Timer           2   12[COMRAM] int 
  4971 ;;  ms              2   14[COMRAM] int 
  4972 ;; Auto vars:     Size  Location     Type
  4973 ;;		None
  4974 ;; Return value:  Size  Location     Type
  4975 ;;                  1    wreg      void 
  4976 ;; Registers used:
  4977 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4978 ;; Tracked objects:
  4979 ;;		On entry : 0/0
  4980 ;;		On exit  : 0/0
  4981 ;;		Unchanged: 0/0
  4982 ;; Data sizes:     COMRAM   BANK0   BANK1
  4983 ;;      Params:         4       0       0
  4984 ;;      Locals:         0       0       0
  4985 ;;      Temps:          1       0       0
  4986 ;;      Totals:         5       0       0
  4987 ;;Total ram usage:        5 bytes
  4988 ;; Hardware stack levels used: 1
  4989 ;; Hardware stack levels required when called: 3
  4990 ;; This function calls:
  4991 ;;		_TiGetTics
  4992 ;;		_TiResetTics
  4993 ;; This function is called by:
  4994 ;;		_LcInit
  4995 ;;		_LcClear
  4996 ;; This function uses a non-reentrant model
  4997 ;;
  4998                           
  4999                           	psect	text37
  5000  0011B0                     __ptext37:
  5001                           	callstack 0
  5002  0011B0                     _Espera:
  5003                           	callstack 25
  5004                           
  5005                           ;LcTLCD.c: 211:  TiResetTics(Timer);
  5006                           
  5007                           ;incstack = 0
  5008  0011B0  505C               	movf	Espera@Timer^0,w,c
  5009  0011B2  EC05  F009         	call	_TiResetTics
  5010  0011B6                     l2643:
  5011  0011B6  505C               	movf	Espera@Timer^0,w,c
  5012  0011B8  EC80  F008         	call	_TiGetTics
  5013  0011BC  505E               	movf	Espera@ms^0,w,c
  5014  0011BE  5C55               	subwf	?_TiGetTics^0,w,c
  5015  0011C0  5056               	movf	(?_TiGetTics+1)^0,w,c
  5016  0011C2  0A80               	xorlw	128
  5017  0011C4  6E60               	movwf	??_Espera^0,c
  5018  0011C6  505F               	movf	(Espera@ms+1)^0,w,c
  5019  0011C8  0A80               	xorlw	128
  5020  0011CA  5860               	subwfb	??_Espera^0,w,c
  5021  0011CC  E3F4               	bnc	l2643
  5022  0011CE  0012               	return		;funcret
  5023  0011D0                     __end_of_Espera:
  5024                           	callstack 0
  5025                           
  5026 ;; *************** function _EscriuPrimeraOrdre *****************
  5027 ;; Defined at:
  5028 ;;		line 279 in file "LcTLCD.c"
  5029 ;; Parameters:    Size  Location     Type
  5030 ;;  ordre           1    wreg     unsigned char 
  5031 ;; Auto vars:     Size  Location     Type
  5032 ;;  ordre           1    6[COMRAM] unsigned char 
  5033 ;; Return value:  Size  Location     Type
  5034 ;;                  1    wreg      void 
  5035 ;; Registers used:
  5036 ;;		wreg, status,2, status,0
  5037 ;; Tracked objects:
  5038 ;;		On entry : 0/0
  5039 ;;		On exit  : 0/0
  5040 ;;		Unchanged: 0/0
  5041 ;; Data sizes:     COMRAM   BANK0   BANK1
  5042 ;;      Params:         0       0       0
  5043 ;;      Locals:         1       0       0
  5044 ;;      Temps:          1       0       0
  5045 ;;      Totals:         2       0       0
  5046 ;;Total ram usage:        2 bytes
  5047 ;; Hardware stack levels used: 1
  5048 ;; Hardware stack levels required when called: 2
  5049 ;; This function calls:
  5050 ;;		Nothing
  5051 ;; This function is called by:
  5052 ;;		_LcInit
  5053 ;; This function uses a non-reentrant model
  5054 ;;
  5055                           
  5056                           	psect	text38
  5057  000CFE                     __ptext38:
  5058                           	callstack 0
  5059  000CFE                     _EscriuPrimeraOrdre:
  5060                           	callstack 27
  5061                           
  5062                           ;incstack = 0
  5063                           ;EscriuPrimeraOrdre@ordre stored from wreg
  5064  000CFE  6E56               	movwf	EscriuPrimeraOrdre@ordre^0,c
  5065                           
  5066                           ;LcTLCD.c: 281:  (TRISDbits.TRISD0 = TRISDbits.TRISD1 = TRISDbits.TRISD2 = TRISDbits.TRI
      +                          SD3 = 0); (LATDbits.LATD4 = 0); (LATDbits.LATD5 = 0);
  5067  000D00  9695               	bcf	149,3,c	;volatile
  5068                           
  5069                           ;LcTLCD.c: 282:  (LATDbits.LATD6 = 1); (LATDbits.LATD6 = 1);
  5070  000D02  D82F               	call	PL38	;call to abstracted procedure
  5071  000D04  8C8C               	bsf	140,6,c	;volatile
  5072                           
  5073                           ;LcTLCD.c: 283:   (LATDbits.LATD3 = (ordre & 0x08 ? 1 : 0));
  5074  000D06  A656               	btfss	EscriuPrimeraOrdre@ordre^0,3,c
  5075  000D08  D003               	goto	u440
  5076  000D0A  6A55               	clrf	??_EscriuPrimeraOrdre^0,c
  5077  000D0C  2A55               	incf	??_EscriuPrimeraOrdre^0,f,c
  5078  000D0E  D001               	goto	u458
  5079  000D10                     u440:
  5080  000D10  6A55               	clrf	??_EscriuPrimeraOrdre^0,c
  5081  000D12                     u458:
  5082  000D12  4655               	rlncf	??_EscriuPrimeraOrdre^0,f,c
  5083  000D14  D82D               	call	PL58	;call to abstracted procedure
  5084  000D16  0BF7               	andlw	-9
  5085  000D18  1855               	xorwf	??_EscriuPrimeraOrdre^0,w,c
  5086  000D1A  6E8C               	movwf	140,c	;volatile
  5087                           
  5088                           ;LcTLCD.c: 284:   (LATDbits.LATD2 = (ordre & 0x04 ? 1 : 0));
  5089  000D1C  A456               	btfss	EscriuPrimeraOrdre@ordre^0,2,c
  5090  000D1E  D003               	goto	u460
  5091  000D20  6A55               	clrf	??_EscriuPrimeraOrdre^0,c
  5092  000D22  2A55               	incf	??_EscriuPrimeraOrdre^0,f,c
  5093  000D24  D001               	goto	u478
  5094  000D26                     u460:
  5095  000D26  6A55               	clrf	??_EscriuPrimeraOrdre^0,c
  5096  000D28                     u478:
  5097  000D28  D823               	call	PL58	;call to abstracted procedure
  5098  000D2A  0BFB               	andlw	-5
  5099  000D2C  1855               	xorwf	??_EscriuPrimeraOrdre^0,w,c
  5100  000D2E  6E8C               	movwf	140,c	;volatile
  5101                           
  5102                           ;LcTLCD.c: 285:   (LATDbits.LATD1 = (ordre & 0x02 ? 1 : 0));
  5103  000D30  A256               	btfss	EscriuPrimeraOrdre@ordre^0,1,c
  5104  000D32  D003               	goto	u480
  5105  000D34  6A55               	clrf	??_EscriuPrimeraOrdre^0,c
  5106  000D36  2A55               	incf	??_EscriuPrimeraOrdre^0,f,c
  5107  000D38  D001               	goto	u498
  5108  000D3A                     u480:
  5109  000D3A  6A55               	clrf	??_EscriuPrimeraOrdre^0,c
  5110  000D3C                     u498:
  5111  000D3C  4655               	rlncf	??_EscriuPrimeraOrdre^0,f,c
  5112  000D3E  508C               	movf	140,w,c	;volatile
  5113  000D40  1855               	xorwf	??_EscriuPrimeraOrdre^0,w,c
  5114  000D42  0BFD               	andlw	-3
  5115  000D44  1855               	xorwf	??_EscriuPrimeraOrdre^0,w,c
  5116  000D46  6E8C               	movwf	140,c	;volatile
  5117                           
  5118                           ;LcTLCD.c: 286:   (LATDbits.LATD0 = (ordre & 0x01 ? 1 : 0));
  5119  000D48  A056               	btfss	EscriuPrimeraOrdre@ordre^0,0,c
  5120  000D4A  D003               	goto	u500
  5121  000D4C  6A55               	clrf	??_EscriuPrimeraOrdre^0,c
  5122  000D4E  2A55               	incf	??_EscriuPrimeraOrdre^0,f,c
  5123  000D50  D001               	goto	u518
  5124  000D52                     u500:
  5125  000D52  6A55               	clrf	??_EscriuPrimeraOrdre^0,c
  5126  000D54                     u518:
  5127  000D54  508C               	movf	140,w,c	;volatile
  5128  000D56  1855               	xorwf	??_EscriuPrimeraOrdre^0,w,c
  5129  000D58  0BFE               	andlw	-2
  5130  000D5A  1855               	xorwf	??_EscriuPrimeraOrdre^0,w,c
  5131  000D5C  6E8C               	movwf	140,c	;volatile
  5132                           
  5133                           ;LcTLCD.c: 287:  (LATDbits.LATD6 = 0);
  5134  000D5E  9C8C               	bcf	140,6,c	;volatile
  5135  000D60  0012               	return		;funcret
  5136  000D62                     __end_of_EscriuPrimeraOrdre:
  5137                           	callstack 0
  5138  000D62                     PL38:
  5139                           	callstack 23
  5140  000D62  9495               	bcf	149,2,c	;volatile
  5141  000D64  9295               	bcf	149,1,c	;volatile
  5142  000D66  9095               	bcf	149,0,c	;volatile
  5143  000D68  988C               	bcf	140,4,c	;volatile
  5144  000D6A  9A8C               	bcf	140,5,c	;volatile
  5145  000D6C  8C8C               	bsf	140,6,c	;volatile
  5146  000D6E  0012               	return	
  5147  000D70                     __end_ofPL38:
  5148                           	callstack 0
  5149  000D70                     PL58:
  5150                           	callstack 27
  5151  000D70  4655               	rlncf	??_EscriuPrimeraOrdre^0,f,c
  5152  000D72  4655               	rlncf	??_EscriuPrimeraOrdre^0,f,c
  5153  000D74  508C               	movf	140,w,c	;volatile
  5154  000D76  1855               	xorwf	??_EscriuPrimeraOrdre^0,w,c
  5155  000D78  0012               	return	
  5156  000D7A                     __end_ofPL58:
  5157                           	callstack 0
  5158                           
  5159 ;; *************** function _CantaIR *****************
  5160 ;; Defined at:
  5161 ;;		line 229 in file "LcTLCD.c"
  5162 ;; Parameters:    Size  Location     Type
  5163 ;;  IR              1    wreg     unsigned char 
  5164 ;; Auto vars:     Size  Location     Type
  5165 ;;  IR              1    7[COMRAM] unsigned char 
  5166 ;; Return value:  Size  Location     Type
  5167 ;;                  1    wreg      void 
  5168 ;; Registers used:
  5169 ;;		wreg, status,2, status,0, cstack
  5170 ;; Tracked objects:
  5171 ;;		On entry : 0/0
  5172 ;;		On exit  : 0/0
  5173 ;;		Unchanged: 0/0
  5174 ;; Data sizes:     COMRAM   BANK0   BANK1
  5175 ;;      Params:         0       0       0
  5176 ;;      Locals:         1       0       0
  5177 ;;      Temps:          0       0       0
  5178 ;;      Totals:         1       0       0
  5179 ;;Total ram usage:        1 bytes
  5180 ;; Hardware stack levels used: 1
  5181 ;; Hardware stack levels required when called: 3
  5182 ;; This function calls:
  5183 ;;		_CantaPartAlta
  5184 ;;		_CantaPartBaixa
  5185 ;; This function is called by:
  5186 ;;		_LcInit
  5187 ;;		_LcClear
  5188 ;;		_LcCursorOn
  5189 ;;		_LcCursorOff
  5190 ;;		_LcGotoXY
  5191 ;; This function uses a non-reentrant model
  5192 ;;
  5193                           
  5194                           	psect	text39
  5195  0011EE                     __ptext39:
  5196                           	callstack 0
  5197  0011EE                     _CantaIR:
  5198                           	callstack 23
  5199                           
  5200                           ;incstack = 0
  5201                           ;CantaIR@IR stored from wreg
  5202  0011EE  6E57               	movwf	CantaIR@IR^0,c
  5203                           
  5204                           ;LcTLCD.c: 230:  (TRISDbits.TRISD0 = TRISDbits.TRISD1 = TRISDbits.TRISD2 = TRISDbits.TRI
      +                          SD3 = 0);
  5205  0011F0  9695               	bcf	149,3,c	;volatile
  5206                           
  5207                           ;LcTLCD.c: 231:  (LATDbits.LATD4 = 0);
  5208                           
  5209                           ;LcTLCD.c: 232:  (LATDbits.LATD5 = 0);
  5210                           
  5211                           ;LcTLCD.c: 233:  (LATDbits.LATD6 = 1);
  5212  0011F2  ECB1  F006         	call	PL38	;call to abstracted procedure
  5213                           
  5214                           ;LcTLCD.c: 234:  CantaPartAlta(IR);
  5215  0011F6  5057               	movf	CantaIR@IR^0,w,c
  5216  0011F8  EC2C  F007         	call	_CantaPartAlta
  5217                           
  5218                           ;LcTLCD.c: 235:  (LATDbits.LATD6 = 1);
  5219                           
  5220                           ;LcTLCD.c: 236:  (LATDbits.LATD6 = 0);
  5221                           
  5222                           ;LcTLCD.c: 237:  (LATDbits.LATD6 = 0);
  5223                           
  5224                           ;LcTLCD.c: 238:  (LATDbits.LATD6 = 1);
  5225  0011FC  EC4F  F008         	call	PL64	;call to abstracted procedure
  5226                           
  5227                           ;LcTLCD.c: 239:  CantaPartBaixa(IR);
  5228  001200  5057               	movf	CantaIR@IR^0,w,c
  5229  001202  ECF9  F006         	call	_CantaPartBaixa
  5230                           
  5231                           ;LcTLCD.c: 240:  (LATDbits.LATD6 = 1);
  5232                           
  5233                           ;LcTLCD.c: 241:  (LATDbits.LATD6 = 0);
  5234                           
  5235                           ;LcTLCD.c: 242:  (TRISDbits.TRISD0 = TRISDbits.TRISD1 = TRISDbits.TRISD2 = TRISDbits.TRI
      +                          SD3 = 1);
  5236  001206  EF48  F008         	goto	PL36	;call to abstracted procedure
  5237  00120A                     __end_of_CantaIR:
  5238                           	callstack 0
  5239                           
  5240 ;; *************** function _CantaPartBaixa *****************
  5241 ;; Defined at:
  5242 ;;		line 222 in file "LcTLCD.c"
  5243 ;; Parameters:    Size  Location     Type
  5244 ;;  c               1    wreg     unsigned char 
  5245 ;; Auto vars:     Size  Location     Type
  5246 ;;  c               1    6[COMRAM] unsigned char 
  5247 ;; Return value:  Size  Location     Type
  5248 ;;                  1    wreg      void 
  5249 ;; Registers used:
  5250 ;;		wreg, status,2, status,0
  5251 ;; Tracked objects:
  5252 ;;		On entry : 0/0
  5253 ;;		On exit  : 0/0
  5254 ;;		Unchanged: 0/0
  5255 ;; Data sizes:     COMRAM   BANK0   BANK1
  5256 ;;      Params:         0       0       0
  5257 ;;      Locals:         1       0       0
  5258 ;;      Temps:          1       0       0
  5259 ;;      Totals:         2       0       0
  5260 ;;Total ram usage:        2 bytes
  5261 ;; Hardware stack levels used: 1
  5262 ;; Hardware stack levels required when called: 2
  5263 ;; This function calls:
  5264 ;;		Nothing
  5265 ;; This function is called by:
  5266 ;;		_CantaIR
  5267 ;;		_CantaData
  5268 ;; This function uses a non-reentrant model
  5269 ;;
  5270                           
  5271                           	psect	text40
  5272  000DF2                     __ptext40:
  5273                           	callstack 0
  5274  000DF2                     _CantaPartBaixa:
  5275                           	callstack 23
  5276                           
  5277                           ;incstack = 0
  5278                           ;CantaPartBaixa@c stored from wreg
  5279  000DF2  6E56               	movwf	CantaPartBaixa@c^0,c
  5280                           
  5281                           ;LcTLCD.c: 223:   (LATDbits.LATD3 = (c & 0x08 ? 1 : 0));
  5282  000DF4  A656               	btfss	CantaPartBaixa@c^0,3,c
  5283  000DF6  D003               	goto	u1710
  5284  000DF8  6A55               	clrf	??_CantaPartBaixa^0,c
  5285  000DFA  2A55               	incf	??_CantaPartBaixa^0,f,c
  5286  000DFC  D001               	goto	u1728
  5287  000DFE                     u1710:
  5288  000DFE  6A55               	clrf	??_CantaPartBaixa^0,c
  5289  000E00                     u1728:
  5290  000E00  4655               	rlncf	??_CantaPartBaixa^0,f,c
  5291  000E02  D825               	call	PL66	;call to abstracted procedure
  5292  000E04  0BF7               	andlw	-9
  5293  000E06  1855               	xorwf	??_CantaPartBaixa^0,w,c
  5294  000E08  6E8C               	movwf	140,c	;volatile
  5295                           
  5296                           ;LcTLCD.c: 224:   (LATDbits.LATD2 = (c & 0x04 ? 1 : 0));
  5297  000E0A  A456               	btfss	CantaPartBaixa@c^0,2,c
  5298  000E0C  D003               	goto	u1730
  5299  000E0E  6A55               	clrf	??_CantaPartBaixa^0,c
  5300  000E10  2A55               	incf	??_CantaPartBaixa^0,f,c
  5301  000E12  D001               	goto	u1748
  5302  000E14                     u1730:
  5303  000E14  6A55               	clrf	??_CantaPartBaixa^0,c
  5304  000E16                     u1748:
  5305  000E16  D81B               	call	PL66	;call to abstracted procedure
  5306  000E18  0BFB               	andlw	-5
  5307  000E1A  1855               	xorwf	??_CantaPartBaixa^0,w,c
  5308  000E1C  6E8C               	movwf	140,c	;volatile
  5309                           
  5310                           ;LcTLCD.c: 225:   (LATDbits.LATD1 = (c & 0x02 ? 1 : 0));
  5311  000E1E  A256               	btfss	CantaPartBaixa@c^0,1,c
  5312  000E20  D003               	goto	u1750
  5313  000E22  6A55               	clrf	??_CantaPartBaixa^0,c
  5314  000E24  2A55               	incf	??_CantaPartBaixa^0,f,c
  5315  000E26  D001               	goto	u1768
  5316  000E28                     u1750:
  5317  000E28  6A55               	clrf	??_CantaPartBaixa^0,c
  5318  000E2A                     u1768:
  5319  000E2A  4655               	rlncf	??_CantaPartBaixa^0,f,c
  5320  000E2C  508C               	movf	140,w,c	;volatile
  5321  000E2E  1855               	xorwf	??_CantaPartBaixa^0,w,c
  5322  000E30  0BFD               	andlw	-3
  5323  000E32  1855               	xorwf	??_CantaPartBaixa^0,w,c
  5324  000E34  6E8C               	movwf	140,c	;volatile
  5325                           
  5326                           ;LcTLCD.c: 226:   (LATDbits.LATD0 = (c & 0x01 ? 1 : 0));
  5327  000E36  A056               	btfss	CantaPartBaixa@c^0,0,c
  5328  000E38  D003               	goto	u1770
  5329  000E3A  6A55               	clrf	??_CantaPartBaixa^0,c
  5330  000E3C  2A55               	incf	??_CantaPartBaixa^0,f,c
  5331  000E3E  D001               	goto	u1788
  5332  000E40                     u1770:
  5333  000E40  6A55               	clrf	??_CantaPartBaixa^0,c
  5334  000E42                     u1788:
  5335  000E42  508C               	movf	140,w,c	;volatile
  5336  000E44  1855               	xorwf	??_CantaPartBaixa^0,w,c
  5337  000E46  0BFE               	andlw	-2
  5338  000E48  1855               	xorwf	??_CantaPartBaixa^0,w,c
  5339  000E4A  6E8C               	movwf	140,c	;volatile
  5340  000E4C  0012               	return		;funcret
  5341  000E4E                     __end_of_CantaPartBaixa:
  5342                           	callstack 0
  5343  000E4E                     PL66:
  5344                           	callstack 23
  5345  000E4E  4655               	rlncf	??_CantaPartBaixa^0,f,c
  5346  000E50  4655               	rlncf	??_CantaPartBaixa^0,f,c
  5347  000E52  508C               	movf	140,w,c	;volatile
  5348  000E54  1855               	xorwf	??_CantaPartBaixa^0,w,c
  5349  000E56  0012               	return	
  5350  000E58                     __end_ofPL66:
  5351                           	callstack 0
  5352                           
  5353 ;; *************** function _CantaPartAlta *****************
  5354 ;; Defined at:
  5355 ;;		line 215 in file "LcTLCD.c"
  5356 ;; Parameters:    Size  Location     Type
  5357 ;;  c               1    wreg     unsigned char 
  5358 ;; Auto vars:     Size  Location     Type
  5359 ;;  c               1    6[COMRAM] unsigned char 
  5360 ;; Return value:  Size  Location     Type
  5361 ;;                  1    wreg      void 
  5362 ;; Registers used:
  5363 ;;		wreg, status,2, status,0
  5364 ;; Tracked objects:
  5365 ;;		On entry : 0/0
  5366 ;;		On exit  : 0/0
  5367 ;;		Unchanged: 0/0
  5368 ;; Data sizes:     COMRAM   BANK0   BANK1
  5369 ;;      Params:         0       0       0
  5370 ;;      Locals:         1       0       0
  5371 ;;      Temps:          1       0       0
  5372 ;;      Totals:         2       0       0
  5373 ;;Total ram usage:        2 bytes
  5374 ;; Hardware stack levels used: 1
  5375 ;; Hardware stack levels required when called: 2
  5376 ;; This function calls:
  5377 ;;		Nothing
  5378 ;; This function is called by:
  5379 ;;		_CantaIR
  5380 ;;		_CantaData
  5381 ;; This function uses a non-reentrant model
  5382 ;;
  5383                           
  5384                           	psect	text41
  5385  000E58                     __ptext41:
  5386                           	callstack 0
  5387  000E58                     _CantaPartAlta:
  5388                           	callstack 23
  5389                           
  5390                           ;incstack = 0
  5391                           ;CantaPartAlta@c stored from wreg
  5392  000E58  6E56               	movwf	CantaPartAlta@c^0,c
  5393                           
  5394                           ;LcTLCD.c: 216:   (LATDbits.LATD3 = (c & 0x80 ? 1 : 0));
  5395  000E5A  AE56               	btfss	CantaPartAlta@c^0,7,c
  5396  000E5C  D003               	goto	u1630
  5397  000E5E  6A55               	clrf	??_CantaPartAlta^0,c
  5398  000E60  2A55               	incf	??_CantaPartAlta^0,f,c
  5399  000E62  D001               	goto	u1648
  5400  000E64                     u1630:
  5401  000E64  6A55               	clrf	??_CantaPartAlta^0,c
  5402  000E66                     u1648:
  5403  000E66  4655               	rlncf	??_CantaPartAlta^0,f,c
  5404  000E68  D825               	call	PL62	;call to abstracted procedure
  5405  000E6A  0BF7               	andlw	-9
  5406  000E6C  1855               	xorwf	??_CantaPartAlta^0,w,c
  5407  000E6E  6E8C               	movwf	140,c	;volatile
  5408                           
  5409                           ;LcTLCD.c: 217:   (LATDbits.LATD2 = (c & 0x40 ? 1 : 0));
  5410  000E70  AC56               	btfss	CantaPartAlta@c^0,6,c
  5411  000E72  D003               	goto	u1650
  5412  000E74  6A55               	clrf	??_CantaPartAlta^0,c
  5413  000E76  2A55               	incf	??_CantaPartAlta^0,f,c
  5414  000E78  D001               	goto	u1668
  5415  000E7A                     u1650:
  5416  000E7A  6A55               	clrf	??_CantaPartAlta^0,c
  5417  000E7C                     u1668:
  5418  000E7C  D81B               	call	PL62	;call to abstracted procedure
  5419  000E7E  0BFB               	andlw	-5
  5420  000E80  1855               	xorwf	??_CantaPartAlta^0,w,c
  5421  000E82  6E8C               	movwf	140,c	;volatile
  5422                           
  5423                           ;LcTLCD.c: 218:   (LATDbits.LATD1 = (c & 0x20 ? 1 : 0));
  5424  000E84  AA56               	btfss	CantaPartAlta@c^0,5,c
  5425  000E86  D003               	goto	u1670
  5426  000E88  6A55               	clrf	??_CantaPartAlta^0,c
  5427  000E8A  2A55               	incf	??_CantaPartAlta^0,f,c
  5428  000E8C  D001               	goto	u1688
  5429  000E8E                     u1670:
  5430  000E8E  6A55               	clrf	??_CantaPartAlta^0,c
  5431  000E90                     u1688:
  5432  000E90  4655               	rlncf	??_CantaPartAlta^0,f,c
  5433  000E92  508C               	movf	140,w,c	;volatile
  5434  000E94  1855               	xorwf	??_CantaPartAlta^0,w,c
  5435  000E96  0BFD               	andlw	-3
  5436  000E98  1855               	xorwf	??_CantaPartAlta^0,w,c
  5437  000E9A  6E8C               	movwf	140,c	;volatile
  5438                           
  5439                           ;LcTLCD.c: 219:   (LATDbits.LATD0 = (c & 0x10 ? 1 : 0));
  5440  000E9C  A856               	btfss	CantaPartAlta@c^0,4,c
  5441  000E9E  D003               	goto	u1690
  5442  000EA0  6A55               	clrf	??_CantaPartAlta^0,c
  5443  000EA2  2A55               	incf	??_CantaPartAlta^0,f,c
  5444  000EA4  D001               	goto	u1708
  5445  000EA6                     u1690:
  5446  000EA6  6A55               	clrf	??_CantaPartAlta^0,c
  5447  000EA8                     u1708:
  5448  000EA8  508C               	movf	140,w,c	;volatile
  5449  000EAA  1855               	xorwf	??_CantaPartAlta^0,w,c
  5450  000EAC  0BFE               	andlw	-2
  5451  000EAE  1855               	xorwf	??_CantaPartAlta^0,w,c
  5452  000EB0  6E8C               	movwf	140,c	;volatile
  5453  000EB2  0012               	return		;funcret
  5454  000EB4                     __end_of_CantaPartAlta:
  5455                           	callstack 0
  5456  000EB4                     PL62:
  5457                           	callstack 23
  5458  000EB4  4655               	rlncf	??_CantaPartAlta^0,f,c
  5459  000EB6  4655               	rlncf	??_CantaPartAlta^0,f,c
  5460  000EB8  508C               	movf	140,w,c	;volatile
  5461  000EBA  1855               	xorwf	??_CantaPartAlta^0,w,c
  5462  000EBC  0012               	return	
  5463  000EBE                     __end_ofPL62:
  5464                           	callstack 0
  5465                           
  5466 ;; *************** function _KeypadMotor *****************
  5467 ;; Defined at:
  5468 ;;		line 46 in file "keypad.c"
  5469 ;; Parameters:    Size  Location     Type
  5470 ;;		None
  5471 ;; Auto vars:     Size  Location     Type
  5472 ;;		None
  5473 ;; Return value:  Size  Location     Type
  5474 ;;                  1    wreg      void 
  5475 ;; Registers used:
  5476 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5477 ;; Tracked objects:
  5478 ;;		On entry : 0/0
  5479 ;;		On exit  : 0/0
  5480 ;;		Unchanged: 0/0
  5481 ;; Data sizes:     COMRAM   BANK0   BANK1
  5482 ;;      Params:         0       0       0
  5483 ;;      Locals:         0       0       0
  5484 ;;      Temps:          2       0       0
  5485 ;;      Totals:         2       0       0
  5486 ;;Total ram usage:        2 bytes
  5487 ;; Hardware stack levels used: 1
  5488 ;; Hardware stack levels required when called: 3
  5489 ;; This function calls:
  5490 ;;		_TiGetTics
  5491 ;;		_TiResetTics
  5492 ;; This function is called by:
  5493 ;;		_main
  5494 ;; This function uses a non-reentrant model
  5495 ;;
  5496                           
  5497                           	psect	text42
  5498  0007C6                     __ptext42:
  5499                           	callstack 0
  5500  0007C6                     _KeypadMotor:
  5501                           	callstack 27
  5502                           
  5503                           ;keypad.c: 48:     switch (state){
  5504                           
  5505                           ;incstack = 0
  5506  0007C6  D070               	goto	l3041
  5507  0007C8                     l134:
  5508                           
  5509                           ;keypad.c: 51:             if (!!(PORTBbits.RB0 && PORTBbits.RB1 && PORTBbits.RB2)){
  5510  0007C8  B081               	btfsc	129,0,c	;volatile
  5511  0007CA  A281               	btfss	129,1,c	;volatile
  5512  0007CC  D00A               	goto	l2969
  5513  0007CE  A481               	btfss	129,2,c	;volatile
  5514  0007D0  D008               	goto	l2969
  5515                           
  5516                           ;keypad.c: 52:                 LATBbits.LATB3=0;
  5517  0007D2  968A               	bcf	138,3,c	;volatile
  5518                           
  5519                           ;keypad.c: 53:                 LATBbits.LATB4=1;
  5520  0007D4  888A               	bsf	138,4,c	;volatile
  5521                           
  5522                           ;keypad.c: 54:                 LATBbits.LATB5=1;
  5523  0007D6  8A8A               	bsf	138,5,c	;volatile
  5524                           
  5525                           ;keypad.c: 55:                 LATBbits.LATB6=1;
  5526  0007D8  8C8A               	bsf	138,6,c	;volatile
  5527                           
  5528                           ;keypad.c: 56:                 state=1;
  5529  0007DA  0E01               	movlw	1
  5530  0007DC  6E46               	movwf	_state^0,c
  5531                           
  5532                           ;keypad.c: 57:                 row=0;
  5533  0007DE  6A4E               	clrf	_row^0,c
  5534                           
  5535                           ;keypad.c: 58:             }else{
  5536  0007E0  0012               	return	
  5537  0007E2                     l2969:
  5538                           
  5539                           ;keypad.c: 59:                 state=4;
  5540  0007E2  0E04               	movlw	4
  5541  0007E4  6E46               	movwf	_state^0,c
  5542  0007E6  0C04               	retlw	4
  5543  0007E8                     l138:
  5544                           
  5545                           ;keypad.c: 63:            if (!!(PORTBbits.RB0 && PORTBbits.RB1 && PORTBbits.RB2)){
  5546  0007E8  B081               	btfsc	129,0,c	;volatile
  5547  0007EA  A281               	btfss	129,1,c	;volatile
  5548  0007EC  D7FA               	goto	l2969
  5549  0007EE  A481               	btfss	129,2,c	;volatile
  5550  0007F0  D7F8               	goto	l2969
  5551                           
  5552                           ;keypad.c: 64:                 LATBbits.LATB3=1;
  5553  0007F2  868A               	bsf	138,3,c	;volatile
  5554                           
  5555                           ;keypad.c: 65:                 LATBbits.LATB4=0;
  5556  0007F4  988A               	bcf	138,4,c	;volatile
  5557                           
  5558                           ;keypad.c: 66:                 LATBbits.LATB5=1;
  5559  0007F6  8A8A               	bsf	138,5,c	;volatile
  5560                           
  5561                           ;keypad.c: 67:                 LATBbits.LATB6=1;
  5562  0007F8  8C8A               	bsf	138,6,c	;volatile
  5563                           
  5564                           ;keypad.c: 68:                 state=2;
  5565  0007FA  0E02               	movlw	2
  5566  0007FC  6E46               	movwf	_state^0,c
  5567                           
  5568                           ;keypad.c: 69:                 row=1;
  5569  0007FE  0E01               	movlw	1
  5570  000800  6E4E               	movwf	_row^0,c
  5571                           
  5572                           ;keypad.c: 71:             }else{
  5573  000802  0C01               	retlw	1
  5574  000804                     l141:
  5575                           
  5576                           ;keypad.c: 76:             if (!!(PORTBbits.RB0 && PORTBbits.RB1 && PORTBbits.RB2)){
  5577  000804  B081               	btfsc	129,0,c	;volatile
  5578  000806  A281               	btfss	129,1,c	;volatile
  5579  000808  D7EC               	goto	l2969
  5580  00080A  A481               	btfss	129,2,c	;volatile
  5581  00080C  D7EA               	goto	l2969
  5582                           
  5583                           ;keypad.c: 77:                 LATBbits.LATB3=1;
  5584  00080E  868A               	bsf	138,3,c	;volatile
  5585                           
  5586                           ;keypad.c: 78:                 LATBbits.LATB4=1;
  5587  000810  888A               	bsf	138,4,c	;volatile
  5588                           
  5589                           ;keypad.c: 79:                 LATBbits.LATB5=0;
  5590  000812  9A8A               	bcf	138,5,c	;volatile
  5591                           
  5592                           ;keypad.c: 80:                 LATBbits.LATB6=1;
  5593  000814  8C8A               	bsf	138,6,c	;volatile
  5594                           
  5595                           ;keypad.c: 81:                 state=3;
  5596  000816  0E03               	movlw	3
  5597  000818  6E46               	movwf	_state^0,c
  5598                           
  5599                           ;keypad.c: 82:                 row=2;
  5600  00081A  0E02               	movlw	2
  5601  00081C  6E4E               	movwf	_row^0,c
  5602                           
  5603                           ;keypad.c: 83:             }else{
  5604  00081E  0C02               	retlw	2
  5605  000820                     l144:
  5606                           
  5607                           ;keypad.c: 88:             if (!!(PORTBbits.RB0 && PORTBbits.RB1 && PORTBbits.RB2)){
  5608  000820  B081               	btfsc	129,0,c	;volatile
  5609  000822  A281               	btfss	129,1,c	;volatile
  5610  000824  D7DE               	goto	l2969
  5611  000826  A481               	btfss	129,2,c	;volatile
  5612  000828  D7DC               	goto	l2969
  5613                           
  5614                           ;keypad.c: 89:                 LATBbits.LATB3=1;
  5615  00082A  868A               	bsf	138,3,c	;volatile
  5616                           
  5617                           ;keypad.c: 90:                 LATBbits.LATB4=1;
  5618  00082C  888A               	bsf	138,4,c	;volatile
  5619                           
  5620                           ;keypad.c: 91:                 LATBbits.LATB5=1;
  5621  00082E  8A8A               	bsf	138,5,c	;volatile
  5622                           
  5623                           ;keypad.c: 92:                 LATBbits.LATB6=0;
  5624  000830  9C8A               	bcf	138,6,c	;volatile
  5625                           
  5626                           ;keypad.c: 93:                 row=3;
  5627  000832  0E03               	movlw	3
  5628  000834  6E4E               	movwf	_row^0,c
  5629  000836                     l2999:
  5630                           
  5631                           ;keypad.c: 94:                 state=0;
  5632  000836  6A46               	clrf	_state^0,c
  5633                           
  5634                           ;keypad.c: 95:             }else{
  5635  000838  0012               	return	
  5636  00083A                     l3003:
  5637                           
  5638                           ;keypad.c: 100:             state=5;
  5639  00083A  0E05               	movlw	5
  5640  00083C  6E46               	movwf	_state^0,c
  5641                           
  5642                           ;keypad.c: 101:             TiResetTics(timerBounces);
  5643  00083E  504D               	movf	_timerBounces^0,w,c
  5644  000840  EF05  F009         	goto	_TiResetTics
  5645  000844                     l3007:
  5646                           
  5647                           ;keypad.c: 104:             if (TiGetTics(timerBounces) >= 25){
  5648  000844  504D               	movf	_timerBounces^0,w,c
  5649  000846  EC80  F008         	call	_TiGetTics
  5650  00084A  BE56               	btfsc	(?_TiGetTics+1)^0,7,c
  5651  00084C  0012               	return	
  5652  00084E  5056               	movf	(?_TiGetTics+1)^0,w,c
  5653  000850  E104               	bnz	u2340
  5654  000852  0E19               	movlw	25
  5655  000854  5C55               	subwf	?_TiGetTics^0,w,c
  5656  000856  A0D8               	btfss	status,0,c
  5657  000858  0012               	return	
  5658  00085A                     u2340:
  5659                           
  5660                           ;keypad.c: 105:                 if (!!(PORTBbits.RB0 && PORTBbits.RB1 && PORTBbits.RB2))
      +                          {
  5661  00085A  B081               	btfsc	129,0,c	;volatile
  5662  00085C  A281               	btfss	129,1,c	;volatile
  5663  00085E  D002               	goto	l3017
  5664  000860  B481               	btfsc	129,2,c	;volatile
  5665  000862  D7E9               	goto	l2999
  5666  000864                     l3017:
  5667                           
  5668                           ;keypad.c: 108:                     pressed = 1;
  5669  000864  0E01               	movlw	1
  5670  000866  6E49               	movwf	_pressed^0,c
  5671                           
  5672                           ;keypad.c: 109:                     state = 6;
  5673  000868  D036               	goto	PL68	;call to abstracted procedure
  5674  00086A                     l152:
  5675                           
  5676                           ;keypad.c: 114:             if (!!(PORTBbits.RB0 && PORTBbits.RB1 && PORTBbits.RB2)){
  5677  00086A  B081               	btfsc	129,0,c	;volatile
  5678  00086C  A281               	btfss	129,1,c	;volatile
  5679  00086E  0012               	return	
  5680  000870  A481               	btfss	129,2,c	;volatile
  5681  000872  0012               	return	
  5682                           
  5683                           ;keypad.c: 115:                 TiResetTics(timerBounces);
  5684  000874  504D               	movf	_timerBounces^0,w,c
  5685  000876  EC05  F009         	call	_TiResetTics
  5686                           
  5687                           ;keypad.c: 116:                 state = 7;
  5688  00087A  0E07               	movlw	7
  5689  00087C  6E46               	movwf	_state^0,c
  5690  00087E  0C07               	retlw	7
  5691  000880                     l3027:
  5692                           
  5693                           ;keypad.c: 120:             if (TiGetTics(timerBounces) >= 25){
  5694  000880  504D               	movf	_timerBounces^0,w,c
  5695  000882  EC80  F008         	call	_TiGetTics
  5696  000886  BE56               	btfsc	(?_TiGetTics+1)^0,7,c
  5697  000888  0012               	return	
  5698  00088A  5056               	movf	(?_TiGetTics+1)^0,w,c
  5699  00088C  E104               	bnz	u2410
  5700  00088E  0E19               	movlw	25
  5701  000890  5C55               	subwf	?_TiGetTics^0,w,c
  5702  000892  A0D8               	btfss	status,0,c
  5703  000894  0012               	return	
  5704  000896                     u2410:
  5705                           
  5706                           ;keypad.c: 121:                 if (!!(PORTBbits.RB0 && PORTBbits.RB1 && PORTBbits.RB2))
      +                          {
  5707  000896  B081               	btfsc	129,0,c	;volatile
  5708  000898  A281               	btfss	129,1,c	;volatile
  5709  00089A  D01D               	goto	PL68
  5710  00089C  A481               	btfss	129,2,c	;volatile
  5711  00089E  D01B               	goto	PL68
  5712                           
  5713                           ;keypad.c: 122:                     pressed = 0;
  5714  0008A0  6A49               	clrf	_pressed^0,c
  5715                           
  5716                           ;keypad.c: 123:                     state = 0;
  5717  0008A2  6A46               	clrf	_state^0,c
  5718                           
  5719                           ;keypad.c: 124:                 } else {
  5720  0008A4  0012               	return	
  5721  0008A6                     l3037:
  5722                           
  5723                           ;keypad.c: 125:                     state = 6;
  5724  0008A6  D017               	goto	PL68	;call to abstracted procedure
  5725  0008A8                     l3041:
  5726  0008A8  5046               	movf	_state^0,w,c
  5727  0008AA  6E5C               	movwf	??_KeypadMotor^0,c
  5728  0008AC  6A5D               	clrf	(??_KeypadMotor+1)^0,c
  5729                           
  5730                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5731                           ; Switch size 1, requested type "space"
  5732                           ; Number of cases is 1, Range of values is 0 to 0
  5733                           ; switch strategies available:
  5734                           ; Name         Instructions Cycles
  5735                           ; simple_byte            4     3 (average)
  5736                           ;	Chosen strategy is simple_byte
  5737  0008AE  505D               	movf	(??_KeypadMotor+1)^0,w,c
  5738  0008B0  A4D8               	btfss	status,2,c
  5739  0008B2  0012               	return	
  5740                           
  5741                           ; Switch size 1, requested type "space"
  5742                           ; Number of cases is 8, Range of values is 0 to 7
  5743                           ; switch strategies available:
  5744                           ; Name         Instructions Cycles
  5745                           ; simple_byte           25    13 (average)
  5746                           ;	Chosen strategy is simple_byte
  5747  0008B4  505C               	movf	??_KeypadMotor^0,w,c
  5748  0008B6  E088               	bz	l134
  5749  0008B8  0A01               	xorlw	1	; case 1
  5750  0008BA  E096               	bz	l138
  5751  0008BC  0A03               	xorlw	3	; case 2
  5752  0008BE  E0A2               	bz	l141
  5753  0008C0  0A01               	xorlw	1	; case 3
  5754  0008C2  E0AE               	bz	l144
  5755  0008C4  0A07               	xorlw	7	; case 4
  5756  0008C6  E0B9               	bz	l3003
  5757  0008C8  0A01               	xorlw	1	; case 5
  5758  0008CA  E0BC               	bz	l3007
  5759  0008CC  0A03               	xorlw	3	; case 6
  5760  0008CE  E0CD               	bz	l152
  5761  0008D0  0A01               	xorlw	1	; case 7
  5762  0008D2  E0D6               	bz	l3027
  5763  0008D4  0012               	return		;funcret
  5764  0008D6                     __end_of_KeypadMotor:
  5765                           	callstack 0
  5766  0008D6                     PL68:
  5767                           	callstack 27
  5768  0008D6  0E06               	movlw	6
  5769  0008D8  6E46               	movwf	_state^0,c
  5770  0008DA  0C06               	retlw	6
  5771  0008DC                     __end_ofPL68:
  5772                           	callstack 0
  5773                           
  5774 ;; *************** function _TiResetTics *****************
  5775 ;; Defined at:
  5776 ;;		line 59 in file "TTimer.c"
  5777 ;; Parameters:    Size  Location     Type
  5778 ;;  Handle          1    wreg     unsigned char 
  5779 ;; Auto vars:     Size  Location     Type
  5780 ;;  Handle          1    5[COMRAM] unsigned char 
  5781 ;; Return value:  Size  Location     Type
  5782 ;;                  1    wreg      void 
  5783 ;; Registers used:
  5784 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  5785 ;; Tracked objects:
  5786 ;;		On entry : 0/0
  5787 ;;		On exit  : 0/0
  5788 ;;		Unchanged: 0/0
  5789 ;; Data sizes:     COMRAM   BANK0   BANK1
  5790 ;;      Params:         0       0       0
  5791 ;;      Locals:         1       0       0
  5792 ;;      Temps:          0       0       0
  5793 ;;      Totals:         1       0       0
  5794 ;;Total ram usage:        1 bytes
  5795 ;; Hardware stack levels used: 1
  5796 ;; Hardware stack levels required when called: 2
  5797 ;; This function calls:
  5798 ;;		Nothing
  5799 ;; This function is called by:
  5800 ;;		_KeypadMotor
  5801 ;;		_SMSMotor
  5802 ;;		_KeSetMode
  5803 ;;		_Espera
  5804 ;;		_WaitForBusy
  5805 ;;		_menuMotor
  5806 ;; This function uses a non-reentrant model
  5807 ;;
  5808                           
  5809                           	psect	text43
  5810  00120A                     __ptext43:
  5811                           	callstack 0
  5812  00120A                     _TiResetTics:
  5813                           	callstack 24
  5814                           
  5815                           ;incstack = 0
  5816                           ;TiResetTics@Handle stored from wreg
  5817  00120A  6E55               	movwf	TiResetTics@Handle^0,c
  5818                           
  5819                           ;TTimer.c: 63:     s_Timers[Handle].h_initialTics=h_Tics;
  5820  00120C  5055               	movf	TiResetTics@Handle^0,w,c
  5821  00120E  D805               	call	PL34	;call to abstracted procedure
  5822  001210  C031  FFDE         	movff	_h_Tics,postinc2
  5823  001214  C032  FFDD         	movff	_h_Tics+1,postdec2
  5824  001218  0012               	return		;funcret
  5825  00121A                     __end_of_TiResetTics:
  5826                           	callstack 0
  5827  00121A                     PL34:
  5828                           	callstack 23
  5829  00121A  0D03               	mullw	3
  5830  00121C  50F3               	movf	243,w,c
  5831  00121E  0F80               	addlw	low _s_Timers
  5832  001220  6ED9               	movwf	fsr2l,c
  5833  001222  6ADA               	clrf	fsr2h,c
  5834  001224  0012               	return	
  5835  001226                     __end_ofPL34:
  5836                           	callstack 0
  5837                           
  5838 ;; *************** function _TiGetTics *****************
  5839 ;; Defined at:
  5840 ;;		line 65 in file "TTimer.c"
  5841 ;; Parameters:    Size  Location     Type
  5842 ;;  Handle          1    wreg     unsigned char 
  5843 ;; Auto vars:     Size  Location     Type
  5844 ;;  Handle          1    9[COMRAM] unsigned char 
  5845 ;;  actual          2   10[COMRAM] volatile unsigned int 
  5846 ;; Return value:  Size  Location     Type
  5847 ;;                  2    5[COMRAM] int 
  5848 ;; Registers used:
  5849 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  5850 ;; Tracked objects:
  5851 ;;		On entry : 0/0
  5852 ;;		On exit  : 0/0
  5853 ;;		Unchanged: 0/0
  5854 ;; Data sizes:     COMRAM   BANK0   BANK1
  5855 ;;      Params:         2       0       0
  5856 ;;      Locals:         3       0       0
  5857 ;;      Temps:          2       0       0
  5858 ;;      Totals:         7       0       0
  5859 ;;Total ram usage:        7 bytes
  5860 ;; Hardware stack levels used: 1
  5861 ;; Hardware stack levels required when called: 2
  5862 ;; This function calls:
  5863 ;;		Nothing
  5864 ;; This function is called by:
  5865 ;;		_KeypadMotor
  5866 ;;		_SMSMotor
  5867 ;;		_Espera
  5868 ;;		_WaitForBusy
  5869 ;;		_menuMotor
  5870 ;; This function uses a non-reentrant model
  5871 ;;
  5872                           
  5873                           	psect	text44
  5874  001100                     __ptext44:
  5875                           	callstack 0
  5876  001100                     _TiGetTics:
  5877                           	callstack 24
  5878                           
  5879                           ;incstack = 0
  5880                           ;TiGetTics@Handle stored from wreg
  5881  001100  6E59               	movwf	TiGetTics@Handle^0,c
  5882                           
  5883                           ;TTimer.c: 69:     volatile unsigned int actual;;TTimer.c: 70:     actual=h_Tics;
  5884  001102  C031  F05A         	movff	_h_Tics,TiGetTics@actual	;volatile
  5885  001106  C032  F05B         	movff	_h_Tics+1,TiGetTics@actual+1	;volatile
  5886                           
  5887                           ;TTimer.c: 71:     return (actual-(s_Timers[Handle].h_initialTics));
  5888  00110A  5059               	movf	TiGetTics@Handle^0,w,c
  5889  00110C  EC0D  F009         	call	PL34	;call to abstracted procedure
  5890  001110  CFDE F057          	movff	postinc2,??_TiGetTics
  5891  001114  CFDD F058          	movff	postdec2,??_TiGetTics+1
  5892  001118  5057               	movf	??_TiGetTics^0,w,c
  5893  00111A  5C5A               	subwf	TiGetTics@actual^0,w,c	;volatile
  5894  00111C  6E55               	movwf	?_TiGetTics^0,c
  5895  00111E  5058               	movf	(??_TiGetTics+1)^0,w,c
  5896  001120  585B               	subwfb	(TiGetTics@actual+1)^0,w,c	;volatile
  5897  001122  6E56               	movwf	(?_TiGetTics+1)^0,c
  5898  001124  0012               	return		;funcret
  5899  001126                     __end_of_TiGetTics:
  5900                           	callstack 0
  5901                           
  5902 ;; *************** function _RSI_High *****************
  5903 ;; Defined at:
  5904 ;;		line 31 in file "main.c"
  5905 ;; Parameters:    Size  Location     Type
  5906 ;;		None
  5907 ;; Auto vars:     Size  Location     Type
  5908 ;;		None
  5909 ;; Return value:  Size  Location     Type
  5910 ;;                  1    wreg      void 
  5911 ;; Registers used:
  5912 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5913 ;; Tracked objects:
  5914 ;;		On entry : 0/0
  5915 ;;		On exit  : 0/0
  5916 ;;		Unchanged: 0/0
  5917 ;; Data sizes:     COMRAM   BANK0   BANK1
  5918 ;;      Params:         0       0       0
  5919 ;;      Locals:         0       0       0
  5920 ;;      Temps:          4       0       0
  5921 ;;      Totals:         4       0       0
  5922 ;;Total ram usage:        4 bytes
  5923 ;; Hardware stack levels used: 1
  5924 ;; Hardware stack levels required when called: 1
  5925 ;; This function calls:
  5926 ;;		__TiRSITimer
  5927 ;; This function is called by:
  5928 ;;		Interrupt level 2
  5929 ;; This function uses a non-reentrant model
  5930 ;;
  5931                           
  5932                           	psect	intcode
  5933  000008                     __pintcode:
  5934                           	callstack 0
  5935  000008                     _RSI_High:
  5936                           	callstack 23
  5937                           
  5938                           ;incstack = 0
  5939  000008  827A               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  5940  00000A  CFD9 F051          	movff	fsr2l,??_RSI_High
  5941  00000E  CFDA F052          	movff	fsr2h,??_RSI_High+1
  5942  000012  CFF3 F053          	movff	prodl,??_RSI_High+2
  5943  000016  CFF4 F054          	movff	prodh,??_RSI_High+3
  5944  00001A  ECDB  F007         	call	__TiRSITimer	;wreg free
  5945  00001E  C054  FFF4         	movff	??_RSI_High+3,prodh
  5946  000022  C053  FFF3         	movff	??_RSI_High+2,prodl
  5947  000026  C052  FFDA         	movff	??_RSI_High+1,fsr2h
  5948  00002A  C051  FFD9         	movff	??_RSI_High,fsr2l
  5949  00002E  927A               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  5950  000030  0011               	retfie		f
  5951  000032                     __end_of_RSI_High:
  5952                           	callstack 0
  5953                           
  5954 ;; *************** function __TiRSITimer *****************
  5955 ;; Defined at:
  5956 ;;		line 37 in file "TTimer.c"
  5957 ;; Parameters:    Size  Location     Type
  5958 ;;		None
  5959 ;; Auto vars:     Size  Location     Type
  5960 ;;		None
  5961 ;; Return value:  Size  Location     Type
  5962 ;;                  1    wreg      void 
  5963 ;; Registers used:
  5964 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  5965 ;; Tracked objects:
  5966 ;;		On entry : 0/0
  5967 ;;		On exit  : 0/0
  5968 ;;		Unchanged: 0/0
  5969 ;; Data sizes:     COMRAM   BANK0   BANK1
  5970 ;;      Params:         0       0       0
  5971 ;;      Locals:         0       0       0
  5972 ;;      Temps:          1       0       0
  5973 ;;      Totals:         1       0       0
  5974 ;;Total ram usage:        1 bytes
  5975 ;; Hardware stack levels used: 1
  5976 ;; This function calls:
  5977 ;;		Nothing
  5978 ;; This function is called by:
  5979 ;;		_RSI_High
  5980 ;; This function uses a non-reentrant model
  5981 ;;
  5982                           
  5983                           	psect	text46
  5984  000FB6                     __ptext46:
  5985                           	callstack 0
  5986  000FB6                     __TiRSITimer:
  5987                           	callstack 23
  5988                           
  5989                           ;TTimer.c: 43:     TMR0H = 0x20;
  5990                           
  5991                           ;incstack = 0
  5992  000FB6  0E20               	movlw	32
  5993  000FB8  6ED7               	movwf	215,c	;volatile
  5994                           
  5995                           ;TTimer.c: 44:     TMR0L = 0x8A;
  5996  000FBA  0E8A               	movlw	138
  5997  000FBC  6ED6               	movwf	214,c	;volatile
  5998                           
  5999                           ;TTimer.c: 45:     INTCONbits.TMR0IF = 0;
  6000  000FBE  94F2               	bcf	242,2,c	;volatile
  6001                           
  6002                           ;TTimer.c: 46:     h_Tics++;
  6003  000FC0  4A31               	infsnz	_h_Tics^0,f,c
  6004  000FC2  2A32               	incf	(_h_Tics+1)^0,f,c
  6005                           
  6006                           ;TTimer.c: 48:     if (h_Tics>=30000) {
  6007  000FC4  0E30               	movlw	48
  6008  000FC6  5C31               	subwf	_h_Tics^0,w,c
  6009  000FC8  0E75               	movlw	117
  6010  000FCA  5832               	subwfb	(_h_Tics+1)^0,w,c
  6011  000FCC  A0D8               	btfss	status,0,c
  6012  000FCE  0012               	return	
  6013                           
  6014                           ;TTimer.c: 50:         for (counter=0;counter<25;counter++){
  6015  000FD0  6A4F               	clrf	_counter^0,c
  6016  000FD2                     i2l2813:
  6017  000FD2  0E18               	movlw	24
  6018  000FD4  644F               	cpfsgt	_counter^0,c
  6019  000FD6  D001               	goto	i2l2817
  6020  000FD8  D00D               	goto	i2l67
  6021  000FDA                     i2l2817:
  6022                           
  6023                           ;TTimer.c: 51:             if (s_Timers[counter].b_busy==1){
  6024  000FDA  EC79  F008         	call	PL18	;call to abstracted procedure
  6025  000FDE  04DE               	decf	postinc2,w,c
  6026  000FE0  E107               	bnz	i2l2821
  6027                           
  6028                           ;TTimer.c: 52:                 s_Timers[counter].h_initialTics -= h_Tics;
  6029  000FE2  504F               	movf	_counter^0,w,c
  6030  000FE4  EC0D  F009         	call	PL34	;call to abstracted procedure
  6031  000FE8  5031               	movf	_h_Tics^0,w,c
  6032  000FEA  5EDE               	subwf	postinc2,f,c
  6033  000FEC  5032               	movf	(_h_Tics+1)^0,w,c
  6034  000FEE  5ADD               	subwfb	postdec2,f,c
  6035  000FF0                     i2l2821:
  6036                           
  6037                           ;TTimer.c: 54:         }
  6038  000FF0  2A4F               	incf	_counter^0,f,c
  6039  000FF2  D7EF               	goto	i2l2813
  6040  000FF4                     i2l67:
  6041                           
  6042                           ;TTimer.c: 55:         h_Tics=0;
  6043  000FF4  6A31               	clrf	_h_Tics^0,c
  6044  000FF6  6A32               	clrf	(_h_Tics+1)^0,c
  6045  000FF8  0012               	return		;funcret
  6046  000FFA                     __end_of__TiRSITimer:
  6047                           	callstack 0
  6048                           
  6049                           	psect	rparam
  6050  0000                     
  6051                           	psect	temp
  6052  00007A                     btemp:
  6053                           	callstack 0
  6054  00007A                     	ds	1
  6055  0000                     int$flags	set	btemp
  6056  0000                     wtemp8	set	btemp+1
  6057  0000                     ttemp5	set	btemp+1
  6058  0000                     ttemp6	set	btemp+4
  6059  0000                     ttemp7	set	btemp+8
  6060                           
  6061                           	psect	idloc
  6062                           
  6063                           ;Config register IDLOC0 @ 0x200000
  6064                           ;	unspecified, using default values
  6065  200000                     	org	2097152
  6066  200000  FF                 	db	255
  6067                           
  6068                           ;Config register IDLOC1 @ 0x200001
  6069                           ;	unspecified, using default values
  6070  200001                     	org	2097153
  6071  200001  FF                 	db	255
  6072                           
  6073                           ;Config register IDLOC2 @ 0x200002
  6074                           ;	unspecified, using default values
  6075  200002                     	org	2097154
  6076  200002  FF                 	db	255
  6077                           
  6078                           ;Config register IDLOC3 @ 0x200003
  6079                           ;	unspecified, using default values
  6080  200003                     	org	2097155
  6081  200003  FF                 	db	255
  6082                           
  6083                           ;Config register IDLOC4 @ 0x200004
  6084                           ;	unspecified, using default values
  6085  200004                     	org	2097156
  6086  200004  FF                 	db	255
  6087                           
  6088                           ;Config register IDLOC5 @ 0x200005
  6089                           ;	unspecified, using default values
  6090  200005                     	org	2097157
  6091  200005  FF                 	db	255
  6092                           
  6093                           ;Config register IDLOC6 @ 0x200006
  6094                           ;	unspecified, using default values
  6095  200006                     	org	2097158
  6096  200006  FF                 	db	255
  6097                           
  6098                           ;Config register IDLOC7 @ 0x200007
  6099                           ;	unspecified, using default values
  6100  200007                     	org	2097159
  6101  200007  FF                 	db	255
  6102                           
  6103                           	psect	config
  6104                           
  6105                           ; Padding undefined space
  6106  300000                     	org	3145728
  6107  300000  FF                 	db	255
  6108                           
  6109                           ;Config register CONFIG1H @ 0x300001
  6110                           ;	Oscillator
  6111                           ;	OSC = HSPLL, HS oscillator, PLL enabled (Clock Frequency = 4 x FOSC1)
  6112                           ;	Fail-Safe Clock Monitor Enable bit
  6113                           ;	FCMEN = 0x0, unprogrammed default
  6114                           ;	Internal/External Oscillator Switchover bit
  6115                           ;	IESO = 0x0, unprogrammed default
  6116  300001                     	org	3145729
  6117  300001  06                 	db	6
  6118                           
  6119                           ;Config register CONFIG2L @ 0x300002
  6120                           ;	Power-up Timer Enable bit
  6121                           ;	PWRT = OFF, PWRT disabled
  6122                           ;	Brown-out Reset Enable bits
  6123                           ;	BOR = OFF, Brown-out Reset disabled in hardware and software
  6124                           ;	Brown-out Reset Voltage bits
  6125                           ;	BORV = 0x3, unprogrammed default
  6126  300002                     	org	3145730
  6127  300002  19                 	db	25
  6128                           
  6129                           ;Config register CONFIG2H @ 0x300003
  6130                           ;	Watchdog Timer Enable bit
  6131                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
  6132                           ;	Watchdog Timer Postscale Select bits
  6133                           ;	WDTPS = 0xF, unprogrammed default
  6134  300003                     	org	3145731
  6135  300003  1E                 	db	30
  6136                           
  6137                           ; Padding undefined space
  6138  300004                     	org	3145732
  6139  300004  FF                 	db	255
  6140                           
  6141                           ;Config register CONFIG3H @ 0x300005
  6142                           ;	CCP2 MUX bit
  6143                           ;	CCP2MX = 0x1, unprogrammed default
  6144                           ;	PORTB A/D Enable bit
  6145                           ;	PBADEN = DIG, PORTB<4:0> pins are configured as digital I/O on Reset
  6146                           ;	Low-Power Timer1 Oscillator Enable bit
  6147                           ;	LPT1OSC = 0x0, unprogrammed default
  6148                           ;	MCLR Pin Enable bit
  6149                           ;	MCLRE = OFF, RE3 input pin enabled; MCLR disabled
  6150  300005                     	org	3145733
  6151  300005  01                 	db	1
  6152                           
  6153                           ;Config register CONFIG4L @ 0x300006
  6154                           ;	Stack Full/Underflow Reset Enable bit
  6155                           ;	STVREN = 0x1, unprogrammed default
  6156                           ;	Single-Supply ICSP Enable bit
  6157                           ;	LVP = OFF, Single-Supply ICSP disabled
  6158                           ;	Boot Block Size Select bits
  6159                           ;	BBSIZ = 0x0, unprogrammed default
  6160                           ;	Extended Instruction Set Enable bit
  6161                           ;	XINST = 0x0, unprogrammed default
  6162                           ;	Background Debugger Enable bit
  6163                           ;	DEBUG = OFF, Background debugger disabled, RB6 and RB7 configured as general purpose I
      +                          /O pins
  6164  300006                     	org	3145734
  6165  300006  81                 	db	129
  6166                           
  6167                           ; Padding undefined space
  6168  300007                     	org	3145735
  6169  300007  FF                 	db	255
  6170                           
  6171                           ;Config register CONFIG5L @ 0x300008
  6172                           ;	unspecified, using default values
  6173                           ;	Code Protection bit
  6174                           ;	CP0 = 0x1, unprogrammed default
  6175                           ;	Code Protection bit
  6176                           ;	CP1 = 0x1, unprogrammed default
  6177  300008                     	org	3145736
  6178  300008  03                 	db	3
  6179                           
  6180                           ;Config register CONFIG5H @ 0x300009
  6181                           ;	unspecified, using default values
  6182                           ;	Boot Block Code Protection bitProtect Boot
  6183                           ;	CPB = 0x1, unprogrammed default
  6184                           ;	Data EEPROM Code Protection bit
  6185                           ;	CPD = 0x1, unprogrammed default
  6186  300009                     	org	3145737
  6187  300009  C0                 	db	192
  6188                           
  6189                           ;Config register CONFIG6L @ 0x30000A
  6190                           ;	unspecified, using default values
  6191                           ;	Write Protection bit
  6192                           ;	WRT0 = 0x1, unprogrammed default
  6193                           ;	Write Protection bit
  6194                           ;	WRT1 = 0x1, unprogrammed default
  6195  30000A                     	org	3145738
  6196  30000A  03                 	db	3
  6197                           
  6198                           ;Config register CONFIG6H @ 0x30000B
  6199                           ;	unspecified, using default values
  6200                           ;	Configuration Register Write Protection bit
  6201                           ;	WRTC = 0x1, unprogrammed default
  6202                           ;	Boot Block Write Protection bit
  6203                           ;	WRTB = 0x1, unprogrammed default
  6204                           ;	Data EEPROM Write Protection bit
  6205                           ;	WRTD = 0x1, unprogrammed default
  6206  30000B                     	org	3145739
  6207  30000B  E0                 	db	224
  6208                           
  6209                           ;Config register CONFIG7L @ 0x30000C
  6210                           ;	unspecified, using default values
  6211                           ;	Table Read Protection bit
  6212                           ;	EBTR0 = 0x1, unprogrammed default
  6213                           ;	Table Read Protection bit
  6214                           ;	EBTR1 = 0x1, unprogrammed default
  6215  30000C                     	org	3145740
  6216  30000C  03                 	db	3
  6217                           
  6218                           ;Config register CONFIG7H @ 0x30000D
  6219                           ;	unspecified, using default values
  6220                           ;	Boot Block Table Read Protection bit
  6221                           ;	EBTRB = 0x1, unprogrammed default
  6222  30000D                     	org	3145741
  6223  30000D  40                 	db	64
  6224                           tosu	equ	0xFFF
  6225                           tosh	equ	0xFFE
  6226                           tosl	equ	0xFFD
  6227                           stkptr	equ	0xFFC
  6228                           pclatu	equ	0xFFB
  6229                           pclath	equ	0xFFA
  6230                           pcl	equ	0xFF9
  6231                           tblptru	equ	0xFF8
  6232                           tblptrh	equ	0xFF7
  6233                           tblptrl	equ	0xFF6
  6234                           tablat	equ	0xFF5
  6235                           prodh	equ	0xFF4
  6236                           prodl	equ	0xFF3
  6237                           indf0	equ	0xFEF
  6238                           postinc0	equ	0xFEE
  6239                           postdec0	equ	0xFED
  6240                           preinc0	equ	0xFEC
  6241                           plusw0	equ	0xFEB
  6242                           fsr0h	equ	0xFEA
  6243                           fsr0l	equ	0xFE9
  6244                           wreg	equ	0xFE8
  6245                           indf1	equ	0xFE7
  6246                           postinc1	equ	0xFE6
  6247                           postdec1	equ	0xFE5
  6248                           preinc1	equ	0xFE4
  6249                           plusw1	equ	0xFE3
  6250                           fsr1h	equ	0xFE2
  6251                           fsr1l	equ	0xFE1
  6252                           bsr	equ	0xFE0
  6253                           indf2	equ	0xFDF
  6254                           postinc2	equ	0xFDE
  6255                           postdec2	equ	0xFDD
  6256                           preinc2	equ	0xFDC
  6257                           plusw2	equ	0xFDB
  6258                           fsr2h	equ	0xFDA
  6259                           fsr2l	equ	0xFD9
  6260                           status	equ	0xFD8

Data Sizes:
    Strings     0
    Constant    212
    Data        1
    BSS         298
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     41     121
    BANK0           128      0      75
    BANK1           256      0     144

Pointer List with Targets:

    None.

Critical Paths under _main in COMRAM

    _main->_menuMotor
    _menuMotor->_DaFindUser
    _displayMenu->_LcPutChar
    _LcPutChar->_LcGotoXY
    _CantaData->_CantaPartAlta
    _CantaData->_CantaPartBaixa
    _LcCursorOn->_WaitForBusy
    _LcCursorOff->_WaitForBusy
    _LcClear->_Espera
    _KeSetMode->_TiResetTics
    _KeGetCharValue->_getFullValue
    _DaFindUser->_LcGotoXY
    _joystickMotor->_SiSendChar
    _initMenu->_TiGetTimer
    _initKeypad->_TiGetTimer
    _initData->_readUserData
    _dataMotor->_LcGotoXY
    _LcGotoXY->_WaitForBusy
    _SMSMotor->_TiGetTics
    _LcInit->_Espera
    _WaitForBusy->_TiGetTics
    _Espera->_TiGetTics
    _CantaIR->_CantaPartAlta
    _CantaIR->_CantaPartBaixa
    _KeypadMotor->_TiGetTics

Critical Paths under _RSI_High in COMRAM

    _RSI_High->__TiRSITimer

Critical Paths under _main in BANK0

    None.

Critical Paths under _RSI_High in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _RSI_High in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   15205
                        _KeypadMotor
                             _LcInit
                           _SMSMotor
                        _TiInitTimer
                          _dataMotor
                           _initData
                       _initJoystick
                         _initKeypad
                           _initMenu
                            _initSIO
                      _joystickMotor
                          _menuMotor
 ---------------------------------------------------------------------------------
 (1) _menuMotor                                            2     2      0   11699
                                             39 COMRAM     2     2      0
                         _DaFindUser
                          _DaGetIdle
                        _DaGetStatus
                         _DaSaveUser
                        _JoDirection
                            _JoMoved
                     _KeGetCharValue
                  _KeGetGenericValue
                          _KeSetMode
                            _LcClear
                        _LcCursorOff
                         _LcCursorOn
                           _LcGotoXY
                          _LcPutChar
                          _TiGetTics
                        _TiResetTics
                        _displayMenu
                         _getPresses
                          _isPressed
 ---------------------------------------------------------------------------------
 (2) _isPressed                                            1     1      0      24
                                              5 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _getPresses                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _displayMenu                                          4     3      1    3940
                                             22 COMRAM     4     3      1
                           _LcGotoXY
                          _LcPutChar
 ---------------------------------------------------------------------------------
 (3) _LcPutChar                                            1     1      0    1956
                                             21 COMRAM     1     1      0
                          _CantaData
                           _LcGotoXY
                        _WaitForBusy
 ---------------------------------------------------------------------------------
 (4) _CantaData                                            1     1      0     220
                                              7 COMRAM     1     1      0
                      _CantaPartAlta
                     _CantaPartBaixa
 ---------------------------------------------------------------------------------
 (2) _LcCursorOn                                           0     0      0     310
                            _CantaIR
                        _WaitForBusy
 ---------------------------------------------------------------------------------
 (2) _LcCursorOff                                          0     0      0     310
                            _CantaIR
                        _WaitForBusy
 ---------------------------------------------------------------------------------
 (2) _LcClear                                              0     0      0    1507
                            _CantaIR
                             _Espera
                        _WaitForBusy
 ---------------------------------------------------------------------------------
 (2) _KeSetMode                                            1     1      0      66
                                              6 COMRAM     1     1      0
                        _TiResetTics
 ---------------------------------------------------------------------------------
 (2) _KeGetCharValue                                       0     0      0      75
                  _KeGetGenericValue
                       _getFullValue
 ---------------------------------------------------------------------------------
 (3) _getFullValue                                         5     5      0      75
                                              5 COMRAM     5     5      0
 ---------------------------------------------------------------------------------
 (2) _JoMoved                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _JoDirection                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _DaSaveUser                                          18     0     18      98
                                              5 COMRAM    18     0     18
 ---------------------------------------------------------------------------------
 (2) _DaGetStatus                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _DaGetIdle                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _DaFindUser                                          18     0     18    1722
                                             21 COMRAM    18     0     18
                           _LcGotoXY
 ---------------------------------------------------------------------------------
 (1) _joystickMotor                                        2     2      0      15
                                              6 COMRAM     2     2      0
                      _SiIsAvailable
                         _SiSendChar
 ---------------------------------------------------------------------------------
 (2) _SiSendChar                                           1     1      0      15
                                              5 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _SiIsAvailable                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initSIO                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initMenu                                             0     0      0       0
                         _TiGetTimer
 ---------------------------------------------------------------------------------
 (1) _initKeypad                                           0     0      0       0
                         _TiGetTimer
 ---------------------------------------------------------------------------------
 (1) _initJoystick                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initData                                             0     0      0       0
                       _readUserData
 ---------------------------------------------------------------------------------
 (2) _readUserData                                         2     2      0       0
                                              5 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _dataMotor                                            4     4      0    1624
                                             21 COMRAM     4     4      0
                           _LcGotoXY
 ---------------------------------------------------------------------------------
 (4) _LcGotoXY                                             8     7      1    1624
                                             13 COMRAM     8     7      1
                            _CantaIR
                        _WaitForBusy
 ---------------------------------------------------------------------------------
 (1) _TiInitTimer                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SMSMotor                                             2     2      0      67
                                             12 COMRAM     2     2      0
                  _KeGetGenericValue
                          _TiGetTics
                        _TiResetTics
 ---------------------------------------------------------------------------------
 (2) _KeGetGenericValue                                    2     2      0       0
                                              5 COMRAM     2     2      0
                          _getColumn
 ---------------------------------------------------------------------------------
 (3) _getColumn                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _LcInit                                               4     3      1    1733
                                             17 COMRAM     4     3      1
                            _CantaIR
                 _EscriuPrimeraOrdre
                             _Espera
                         _TiGetTimer
                        _WaitForBusy
 ---------------------------------------------------------------------------------
 (4) _WaitForBusy                                          1     1      0      90
                                             12 COMRAM     1     1      0
                          _TiGetTics
                        _TiResetTics
 ---------------------------------------------------------------------------------
 (2) _TiGetTimer                                           1     1      0       0
                                              5 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _Espera                                               5     1      4    1197
                                             12 COMRAM     5     1      4
                          _TiGetTics
                        _TiResetTics
 ---------------------------------------------------------------------------------
 (2) _EscriuPrimeraOrdre                                   2     2      0      60
                                              5 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (5) _CantaIR                                              1     1      0     220
                                              7 COMRAM     1     1      0
                      _CantaPartAlta
                     _CantaPartBaixa
 ---------------------------------------------------------------------------------
 (6) _CantaPartBaixa                                       2     2      0      88
                                              5 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (6) _CantaPartAlta                                        2     2      0      88
                                              5 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _KeypadMotor                                          2     2      0      67
                                             12 COMRAM     2     2      0
                          _TiGetTics
                        _TiResetTics
 ---------------------------------------------------------------------------------
 (5) _TiResetTics                                          1     1      0      22
                                              5 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (5) _TiGetTics                                            7     5      2      45
                                              5 COMRAM     7     5      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _RSI_High                                             4     4      0       0
                                              1 COMRAM     4     4      0
                        __TiRSITimer
 ---------------------------------------------------------------------------------
 (8) __TiRSITimer                                          1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _KeypadMotor
     _TiGetTics
     _TiResetTics
   _LcInit
     _CantaIR
       _CantaPartAlta
       _CantaPartBaixa
     _EscriuPrimeraOrdre
     _Espera
       _TiGetTics
       _TiResetTics
     _TiGetTimer
     _WaitForBusy
       _TiGetTics
       _TiResetTics
   _SMSMotor
     _KeGetGenericValue
       _getColumn
     _TiGetTics
     _TiResetTics
   _TiInitTimer
   _dataMotor
     _LcGotoXY
       _CantaIR
       _WaitForBusy
   _initData
     _readUserData
   _initJoystick
   _initKeypad
     _TiGetTimer
   _initMenu
     _TiGetTimer
   _initSIO
   _joystickMotor
     _SiIsAvailable
     _SiSendChar
   _menuMotor
     _DaFindUser
       _LcGotoXY
     _DaGetIdle
     _DaGetStatus
     _DaSaveUser
     _JoDirection
     _JoMoved
     _KeGetCharValue
       _KeGetGenericValue
       _getFullValue
     _KeGetGenericValue
     _KeSetMode
       _TiResetTics
     _LcClear
       _CantaIR
       _Espera
       _WaitForBusy
     _LcCursorOff
       _CantaIR
       _WaitForBusy
     _LcCursorOn
       _CantaIR
       _WaitForBusy
     _LcGotoXY
     _LcPutChar
       _CantaData
         _CantaPartAlta
         _CantaPartBaixa
       _LcGotoXY
       _WaitForBusy
     _TiGetTics
     _TiResetTics
     _displayMenu
       _LcGotoXY
       _LcPutChar
     _getPresses
     _isPressed

 _RSI_High (ROOT)
   __TiRSITimer

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             1FF      0       0      23        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      90       7       56.2%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0      4B       5       58.6%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     29      79       1       96.0%
BITBIGSFRhlhh       19      0       0       9        0.0%
BITBIGSFRlhhlll     10      0       0      17        0.0%
BITBIGSFRhh          D      0       0       8        0.0%
BITBIGSFRlhhhh       B      0       0      11        0.0%
BITBIGSFRlhhlhl      8      0       0      14        0.0%
BITBIGSFRlhhlhh      7      0       0      13        0.0%
BITBIGSFRllhlh       6      0       0      19        0.0%
BITBIGSFRllhhh       5      0       0      18        0.0%
BITBIGSFRhll         4      0       0      10        0.0%
BITBIGSFRlhhllh      1      0       0      16        0.0%
BITBIGSFRlhhlhl      1      0       0      15        0.0%
BITBIGSFRlhhhl       1      0       0      12        0.0%
BITBIGSFRllhll       1      0       0      20        0.0%
BITBIGSFRlll         1      0       0      21        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     154      22        0.0%
DATA                 0      0     154       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.36 build 20220127204148 
Symbol Table                                                                                   Sun Jun 12 23:15:12 2022

         TiResetTics@Handle 0055                           _x 003B                           _y 003A  
              ?_displayMenu 0066                          PL2 075A                          PL4 0774  
                        PL6 0956                          PL8 0A62                         PL10 0968  
                       PL20 0B1E                         PL12 0EE6                         PL30 0F06  
                       PL22 098C                         PL14 0EF0                         PL40 07B8  
                       PL32 07AE                         PL24 0788                         PL16 0CBE  
                       PL50 0CE8                         PL42 0CDA                         PL34 121A  
                       PL26 0996                         PL18 10F2                         PL60 0BDC  
                       PL52 058E                         PL44 09A0                         PL36 1090  
                       PL28 07A2                         PL70 1144                         PL62 0EB4  
                       PL54 0DE8                         PL46 057A                         PL38 0D62  
                       PL72 0B2A                         PL64 109E                         PL56 0CF4  
                       PL48 0584                         PL66 0E4E                         PL58 0D70  
                       PL68 08D6                         l141 0804                         l134 07C8  
                       l152 086A                         l144 0820                         l138 07E8  
                       l163 0B76                         l181 1254                         l271 0C08  
                       l267 0BF6                         l532 0A74                         l613 0D8E  
                       l278 0C42                         l614 0D98                         l550 0AF8  
                       l615 0DCE                         l551 0AFA                         l535 0A88  
                       l616 0DBA                         l642 05FE                         l651 0634  
                       l619 0DD8                         l660 06C8                         l653 0670  
                       l493 0954                         l663 06FA                         l655 067C  
                       l658 06BA                         l690 0CAC                         l683 0C84  
                       l684 0C98                         l685 0C8E                         l688 0CA2  
                       u250 0ECA                         u500 0D52                         u440 0D10  
                       u460 0D26                         u518 0D54                         u480 0D3A  
                       u458 0D12                         u478 0D28                         u498 0D3C  
                       _val 003D                         _row 004E            ??_CantaPartBaixa 0055  
                       wreg 000FE8         __end_of_JoDirection 12D2                        l3003 083A  
                      l3007 0844                        l2303 0AFE                        l3017 0864  
                      l3041 08A8                        l3121 03D0                        l3105 03AE  
                      l3027 0880                        l1531 0EE2                        l3037 08A6  
                      l3213 0524                        l3141 040E                        l3109 03B2  
                      l3221 052E                        l1527 0EDE                        l3207 0516  
                      l3071 0332                        l3321 067E                        l2281 0ACA  
                      l2265 0A9A                        l3145 042A                        l3137 0404  
                      l3129 03EA                        l3057 02F8                        l3049 02D8  
                      l2603 0C24                        l2611 0C64                        l3323 0684  
                      l3251 05D2                        l3235 05A8                        l3163 0472  
                      l3147 0440                        l3083 035A                        l3411 105A  
                      l3253 05D8                        l3229 0598                        l2293 0AE8  
                      l2285 0AD4                        l2277 0AC0                        l3173 0490  
                      l3165 0478                        l3149 0446                        l3271 0614  
                      l3239 05B0                        l1735 0C7C                        l3183 04AC  
                      l3159 0464                        l2609 0C4A                        l3273 061A  
                      l3249 05CE                        l2289 0ADE                        l2721 113C  
                      l3185 04B2                        l3089 0376                        l2643 11B6  
                      l2563 100C                        l3283 062E                        l3267 0608  
                      l3195 04EA                        l3179 04A0                        l3099 0396  
                      l3357 06D0                        l1749 0C9A                        l2663 0F40  
                      l2751 08FA                        l3199 04FA                        l2585 1032  
                      l2833 10C2                        l2593 0BFA                        l3289 063E  
                      l1881 0D7E                        l2681 0F68                        l2761 0912  
                      l2745 08F0                        l2753 08FE                        l2931 0B84  
                      l2915 0B5C                        l1891 0D90                        l2675 0F5A  
                      l2747 08F4                        l2685 10D8                        l2693 10E2  
                      l2941 0B9E                        l2925 0B70                        l2837 10CA  
                      l2589 0BEA                        l3389 0702                        l1885 0D86  
                      l2863 09C8                        l2943 0BA4                        l2927 0B7C  
                      l2951 0BB6                        l2599 0C16                        l2767 091A  
                      l2937 0B94                        l2777 094C                        l2969 07E2  
                      l2899 0B32                        l2999 0836                        u2140 0A60  
                      u2060 0940                        _LATC 000F8B                        u2081 115A  
                      u2410 0896                        u2091 11A2                        u2340 085A  
                      u1630 0E64                        u1710 0DFE                        u2510 0370  
                      u2601 0434                        u1650 0E7A                        u1730 0E14  
                      u1708 0EA8                        u1670 0E8E                        u1750 0E28  
                      u1648 0E66                        u1728 0E00                        u2480 0316  
                      u1690 0EA6                        u1770 0E40                        u1668 0E7C  
                      u1748 0E16                        u2591 041C                        u1688 0E90  
                      u1768 0E2A                        u2680 04E0                        u1788 0E42  
                      u1980 1250                        i2l67 0FF4              ?_SiIsAvailable 0050  
                      _Rows 0044                        _main 1038                        _send 003C  
                      fsr2h 000FDA                        indf1 000FE7                        indf2 000FDF  
                      fsr1l 000FE1                        fsr2l 000FD9                  _LcCursorOn 1282  
                      btemp 007A                        prodh 000FF4                        prodl 000FF3  
           __end_of_LcClear 126E                        start 0032             __end_of_CantaIR 120A  
             LcInit@columns 0061             __end_of_JoMoved 12CE                ___param_bank 000000  
             _isPressed$522 0055            __end_of_MAINMENU 029F                 Espera@Timer 005C  
                     ?_main 0050                       _EEADR 000FA9               ??_TiInitTimer 0055  
                     _T0CON 000FD5                       _TABLE 0223               ??_KeypadMotor 005C  
                     _TMR0H 000FD7                       _TMR0L 000FD6                       _SPBRG 000FAF  
                     _TXREG 000FAD                 ?_DaFindUser 0065                       _Timer 002F  
          __end_of_SMSTABLE 02D5             __end_of_initSIO 1282                       _mUser 0013  
                     _moved 0039                       _timer 0040                 _LcCursorOff 128C  
                     _state 0046                       _users 0100            __end_of_RSI_High 0032  
          __end_of_SMSMotor 0BDC                       tablat 000FF5               ??_TiResetTics 0055  
                     plusw0 000FEB                       plusw1 000FE3                       plusw2 000FDB  
                     ttemp5 007B                       ttemp6 007E                       ttemp7 0082  
                     status 000FD8                 ?_DaSaveUser 0055                       wtemp8 007B  
          __end_of_LcGotoXY 0C7A               ??__TiRSITimer 0050                  _TiGetTimer 10D4  
   EscriuPrimeraOrdre@ordre 0056             __initialization 0F72                __end_of_main 1070  
      __end_of_getFullValue 0EE6                  _SiSendChar 12B0                 _JoDirection 12CE  
                    ??_main 0079               __activetblptr 000002               ?_initJoystick 0050  
         __end_of_LOGINMENU 0217                      _ADCON0 000FC2                      _ADCON1 000FC1  
                    _ADCON2 000FC0         __end_of_TiInitTimer 10D4                      _ADRESH 000FC4  
                    _EEDATA 000FA8                      _EECON2 000FA7             ??_SiIsAvailable 0055  
       __end_of_KeypadMotor 08D6                   ??_LcClear 0061                   ??_CantaIR 0057  
                    i2l2821 0FF0                      i2l2813 0FD2                      i2l2817 0FDA  
                    _LCDcol 003E              LcGotoXY@Fisics 0062              LcGotoXY@Column 0064  
                    _LCDrow 003F               ??_WaitForBusy 005C               ?_readUserData 0050  
        _mUser@EEPROM$F1418 0001                   ??_JoMoved 0055                 ?_LcCursorOn 0050  
         KeSetMode@menuMode 0056                      _LcInit 09A8                ?_DaGetStatus 0050  
                    _Espera 11B0                _LcGotoXY$728 0060           __end_of_DaGetIdle 12B0  
                    _RowAct 0042         __end_of_TiResetTics 121A                      _h_Tics 0031  
          __end_of_initData 0DE8            __end_of_initMenu 12C0         __end_of__TiRSITimer 0FFA  
                    clear_0 0F8A                      clear_1 0F96                      clear_2 0FA2  
                    isa$std 000001                      _status 0034              ??_initJoystick 0055  
                 ??_initSIO 0055                __pdataCOMRAM 0079                __mediumconst 0000  
                    tblptrh 000FF7                      tblptrl 000FF6                      tblptru 000FF8  
         __end_of_CantaData 1090              ??_readUserData 0055                  __accesstop 0080  
   __end_of__initialization 0FA8           __end_of_KeSetMode 1144           __end_of_LcPutChar 0F72  
             ___rparam_used 000001               __end_of_TABLE 022F                 ?_TiGetTimer 0050  
            __pcstackCOMRAM 0050         __end_of_WaitForBusy 1038       __end_of_joystickMotor 0B1E  
               ?_SiSendChar 0050                  __end_ofPL2 0774                  __end_ofPL4 0788  
                __end_ofPL6 0968                  __end_ofPL8 0A6E                   ?_RSI_High 0050  
                 ?_SMSMotor 0050           __end_of_TiGetTics 1126                 _TiInitTimer 10A8  
               _KeypadMotor 07C6                   ?_LcGotoXY 005D                  __pbssBANK0 0080  
                __pbssBANK1 0100                 _TiResetTics 120A          _state@EEPROM$F1414 0037  
                   ?_LcInit 0061               _CantaPartAlta 0E58                     ?_Espera 005C  
               __TiRSITimer 0FB6                  ??_RSI_High 0051                  ??_SMSMotor 005C  
                _getPresses 12C6        __end_of_LOGREGSCREEN 0223                     LcInit@i 0063  
              ??_DaFindUser 0077                  ??_LcGotoXY 005E                ?_LcCursorOff 0050  
              _getFullValue 0EBE           __end_of_dataMotor 075A                     _LcClear 1258  
                   _CantaIR 11EE                   ?_initData 0050                   ?_initMenu 0050  
              ??_DaSaveUser 0067                 _WaitForBusy 0FFA                     _JoMoved 12CA  
            ?_CantaPartAlta 0050                     _Columns 0043           __end_of_getColumn 12A0  
      __end_of_initJoystick 1190                     __Hparam 0000                     __Lparam 0000  
                _initKeypad 11D0          __end_of_DaFindUser 116E                __psmallconst 0200  
                _currentKey 004B           __end_of_isPressed 1258                ?_JoDirection 0050  
                   __pcinit 0F72                     __ramtop 0200        __end_of_readUserData 0CBE  
                   __ptext0 1038                     __ptext1 02D6                     __ptext2 1240  
                   __ptext3 12C6                     __ptext4 08DC                     __ptext5 0F1E  
                   __ptext6 1070                     __ptext7 1282                     __ptext8 128C  
                   __ptext9 1258                   _T0CONbits 000FD5                   CantaIR@IR 0057  
                   _initSIO 126E                     _counter 004F              displayMenu@row 0066  
         __end_of_menuMotor 057A          __end_of_DaSaveUser 11B0                     _pressed 0049  
           WaitForBusy@Busy 005C                     _userNum 0036        end_of_initialization 0FA8  
                 _LOGINMENU 0201                  ??_initData 0057                  ??_initMenu 0056  
             __Lmediumconst 0000             TiGetTics@Handle 0059                ??_LcCursorOn 005D  
                _numPresses 0048             TiGetTics@actual 005A                   _RCSTAbits 000FAB  
                   postdec2 000FDD                     postinc0 000FEE                     postinc1 000FE6  
                   postinc2 000FDE                   _DaGetIdle 12A8                   _PORTBbits 000F81  
                 _PORTDbits 000F83                 ?_getPresses 0050           _KeGetGenericValue 1226  
        __end_of_LcCursorOn 128C          ?_KeGetGenericValue 0050                   _TRISAbits 000F92  
                 _TRISBbits 000F93                   _TRISCbits 000F94                   _TRISDbits 000F95  
       getFullValue@generic 0059         ??_KeGetGenericValue 0055             ??_CantaPartAlta 0055  
     __end_of_SiIsAvailable 12C6                   _CantaData 1070                   _TXSTAbits 000FAC  
              ??_TiGetTimer 0055              __end_of_LcInit 0A62                   _KeSetMode 1126  
                 _LcPutChar 0F1E              __end_of_Espera 11D0                 ?_initKeypad 0050  
            _KeGetCharValue 12A0               ??_displayMenu 0067                ??_SiSendChar 0055  
__end_of_EscriuPrimeraOrdre 0D62                  ?_DaGetIdle 0050                 _BAUDCONbits 000FB8  
 __end_of_KeGetGenericValue 1240               __pidataCOMRAM 12D6                   _ColumnAct 0041  
              ?_TiInitTimer 0050                ?_KeypadMotor 0050                 __end_ofPL10 098C  
               __end_ofPL20 0B2A                 __end_ofPL12 0EF0                 __end_ofPL30 0F1E  
               __end_ofPL22 0996                 __end_ofPL14 0F06                 __end_ofPL40 07C6  
               __end_ofPL32 07B8                 __end_ofPL24 07A2                 __end_ofPL16 0CDA  
               __end_ofPL50 0CF4                 __end_ofPL42 0CE8                 __end_ofPL34 1226  
               __end_ofPL26 09A0                 __end_ofPL18 1100                 __end_ofPL60 0BE6  
               __end_ofPL52 0596                 __end_ofPL44 09A8                 __end_ofPL36 109E  
               __end_ofPL28 07AE                 __end_ofPL70 114A                 __end_ofPL62 0EBE  
               __end_ofPL54 0DF2                 __end_ofPL46 0584                 __end_ofPL38 0D70  
               __end_ofPL72 0B30                 __end_ofPL64 10A8                 __end_ofPL56 0CFE  
               __end_ofPL48 058E                 __end_ofPL66 0E58                 __end_ofPL58 0D7A  
               __end_ofPL68 08DC         start_initialization 0F72                   _TiGetTics 1100  
        __end_of_TiGetTimer 10F2         displayMenu@menuMode 0069                ?_TiResetTics 0050  
                ?_CantaData 0050          __end_of_SiSendChar 12B8                    ??_LcInit 0062  
              _LOGREGSCREEN 0217      __end_of_KeGetCharValue 12A8                ?__TiRSITimer 0050  
                  ??_Espera 0060                  ?_KeSetMode 0050                  ?_LcPutChar 0050  
       __end_of_displayMenu 0956                _initJoystick 116E                 __pbssCOMRAM 0001  
                ?_TiGetTics 0055            SiSendChar@myByte 0055                    ?_LcClear 0050  
                  ?_CantaIR 0050              _CantaPartBaixa 0DF2                ?_WaitForBusy 0050  
              _readUserData 0C7A                    ?_JoMoved 0050                   _dataMotor 0596  
           ?_KeGetCharValue 0050                   __pintcode 0008                   _getColumn 1296  
                 _available 0047             CantaPartBaixa@c 0056                 ??_DaGetIdle 0055  
                  ?_initSIO 0050                 __smallconst 0200                   _isPressed 1240  
                 _menuMotor 02D6      __end_of_CantaPartBaixa 0E4E                    _MAINMENU 022F  
               ??_CantaData 0057                    _LATBbits 000F8A                    _LATCbits 000F8B  
                  _LATDbits 000F8C                  ?_dataMotor 0050               ??_DaGetStatus 0055  
               ??_KeSetMode 0056                 ??_LcPutChar 0065                    _RCONbits 000FD0  
                ?_getColumn 0050                   _timer_SMS 004C                 _displayMenu 08DC  
                  _SMSTABLE 029F               _joystickMotor 0A6E                   _topScores 0025  
                  _RSI_High 0008                  _ADCON0bits 000FC2                ??_getPresses 0055  
                  _SMSMotor 0B30                  ?_isPressed 0050                    Espera@ms 005E  
                  _LcGotoXY 0BE6                 ??_TiGetTics 0057                 LcGotoXY@Row 005D  
                ?_menuMotor 0050                 _INTCON2bits 000FF1             ?_CantaPartBaixa 0050  
            menuMotor@state 0079                  _EECON1bits 000FA6          __end_of_getPresses 12CA  
                  __Hrparam 0000                    __Lrparam 0000                ??_initKeypad 0056  
            ?_joystickMotor 0050         __end_of_DaGetStatus 12D6                    __ptext10 1126  
                  __ptext11 12A0          _EscriuPrimeraOrdre 0CFE                    __ptext20 12B0  
                  __ptext12 0EBE                    __ptext21 12C0                    __ptext13 12CA  
                  __ptext30 10A8                    __ptext22 126E                    __ptext14 12CE  
                  __ptext31 0B30                    __ptext23 12B8                    __ptext15 1190  
                  __ptext40 0DF2                    __ptext32 1226                    __ptext24 11D0  
                  __ptext16 12D2                    __ptext41 0E58                    __ptext33 1296  
                  __ptext25 116E                    __ptext17 12A8                    __ptext42 07C6  
                  __ptext34 09A8                    __ptext26 0D7A                    __ptext18 114A  
                  __ptext43 120A                    __ptext35 0FFA                    __ptext27 0C7A  
                  __ptext19 0A6E                    __ptext44 1100                    __ptext36 10D4  
                  __ptext28 0596                    __ptext37 11B0                    __ptext29 0BE6  
                  __ptext46 0FB6                    __ptext38 0CFE                    __ptext39 11EE  
            CantaPartAlta@c 0056             _lastUserPointer 0033          __end_of_initKeypad 11EE  
                  _s_Timers 0080                    _initData 0D7A                    _initMenu 12B8  
       ?_EscriuPrimeraOrdre 0050       __end_of_CantaPartAlta 0EB4                 ??_dataMotor 0065  
             CantaData@Data 0057                 ??_getColumn 0055                    isa$xinst 000000  
                  _previous 004A                    int$flags 007A                    _position 0035  
                  _stateSMS 0045                    _stateJoy 0038        ??_EscriuPrimeraOrdre 0055  
                LcInit@rows 0062                 ??_isPressed 0055                  _INTCONbits 000FF2  
               ??_menuMotor 0077               ??_LcCursorOff 005D               ?_getFullValue 0050  
                  intlevel2 0000            ??_KeGetCharValue 005A                _timerBounces 004D  
                LcPutChar@c 0065                 _DaGetStatus 12D2             ??_joystickMotor 0056  
             ??_JoDirection 0055                  _DaFindUser 114A           DaFindUser@logUser 0065  
            ??_getFullValue 0055               _SiIsAvailable 12C0                  _DaSaveUser 1190  
       __end_of_LcCursorOff 1296           DaSaveUser@regUser 0055  
