

Microchip MPLAB XC8 Assembler V2.36 build 20220127204148 
                                                                                               Tue Jun 28 22:36:08 2022

Microchip MPLAB XC8 C Compiler v2.36 (Pro license) build 20220127204148 Og9s 
     1                           	processor	18F4321
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	plic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    11                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    14                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    15                           	psect	text0,global,reloc=2,class=CODE,delta=1
    16                           	psect	text1,global,reloc=2,class=CODE,delta=1
    17                           	psect	text2,global,reloc=2,class=CODE,delta=1
    18                           	psect	text3,global,reloc=2,class=CODE,delta=1
    19                           	psect	text4,global,reloc=2,class=CODE,delta=1
    20                           	psect	text5,global,reloc=2,class=CODE,delta=1
    21                           	psect	text6,global,reloc=2,class=CODE,delta=1
    22                           	psect	text7,global,reloc=2,class=CODE,delta=1
    23                           	psect	text8,global,reloc=2,class=CODE,delta=1
    24                           	psect	text9,global,reloc=2,class=CODE,delta=1
    25                           	psect	text10,global,reloc=2,class=CODE,delta=1
    26                           	psect	text11,global,reloc=2,class=CODE,delta=1
    27                           	psect	text12,global,reloc=2,class=CODE,delta=1
    28                           	psect	text13,global,reloc=2,class=CODE,delta=1
    29                           	psect	text14,global,reloc=2,class=CODE,delta=1
    30                           	psect	text15,global,reloc=2,class=CODE,delta=1
    31                           	psect	text16,global,reloc=2,class=CODE,delta=1
    32                           	psect	text17,global,reloc=2,class=CODE,delta=1,group=1
    33                           	psect	text18,global,reloc=2,class=CODE,delta=1
    34                           	psect	text19,global,reloc=2,class=CODE,delta=1
    35                           	psect	text20,global,reloc=2,class=CODE,delta=1
    36                           	psect	text21,global,reloc=2,class=CODE,delta=1
    37                           	psect	text22,global,reloc=2,class=CODE,delta=1
    38                           	psect	text23,global,reloc=2,class=CODE,delta=1
    39                           	psect	text24,global,reloc=2,class=CODE,delta=1
    40                           	psect	text25,global,reloc=2,class=CODE,delta=1
    41                           	psect	text26,global,reloc=2,class=CODE,delta=1
    42                           	psect	text27,global,reloc=2,class=CODE,delta=1
    43                           	psect	text28,global,reloc=2,class=CODE,delta=1
    44                           	psect	text29,global,reloc=2,class=CODE,delta=1
    45                           	psect	text30,global,reloc=2,class=CODE,delta=1
    46                           	psect	text31,global,reloc=2,class=CODE,delta=1
    47                           	psect	text32,global,reloc=2,class=CODE,delta=1
    48                           	psect	text33,global,reloc=2,class=CODE,delta=1
    49                           	psect	text34,global,reloc=2,class=CODE,delta=1
    50                           	psect	text35,global,reloc=2,class=CODE,delta=1
    51                           	psect	text36,global,reloc=2,class=CODE,delta=1
    52                           	psect	text37,global,reloc=2,class=CODE,delta=1
    53                           	psect	text38,global,reloc=2,class=CODE,delta=1
    54                           	psect	text39,global,reloc=2,class=CODE,delta=1
    55                           	psect	text40,global,reloc=2,class=CODE,delta=1
    56                           	psect	text41,global,reloc=2,class=CODE,delta=1
    57                           	psect	text42,global,reloc=2,class=CODE,delta=1
    58                           	psect	text43,global,reloc=2,class=CODE,delta=1
    59                           	psect	text44,global,reloc=2,class=CODE,delta=1
    60                           	psect	text45,global,reloc=2,class=CODE,delta=1
    61                           	psect	text46,global,reloc=2,class=CODE,delta=1
    62                           	psect	text47,global,reloc=2,class=CODE,delta=1
    63                           	psect	text48,global,reloc=2,class=CODE,delta=1
    64                           	psect	text49,global,reloc=2,class=CODE,delta=1
    65                           	psect	text50,global,reloc=2,class=CODE,delta=1
    66                           	psect	text51,global,reloc=2,class=CODE,delta=1
    67                           	psect	text52,global,reloc=2,class=CODE,delta=1
    68                           	psect	text53,global,reloc=2,class=CODE,delta=1
    69                           	psect	text54,global,reloc=2,class=CODE,delta=1
    70                           	psect	text55,global,reloc=2,class=CODE,delta=1
    71                           	psect	text56,global,reloc=2,class=CODE,delta=1
    72                           	psect	text57,global,reloc=2,class=CODE,delta=1
    73                           	psect	text58,global,reloc=2,class=CODE,delta=1,group=1
    74                           	psect	text59,global,reloc=2,class=CODE,delta=1,group=1
    75                           	psect	text60,global,reloc=2,class=CODE,delta=1
    76                           	psect	text61,global,reloc=2,class=CODE,delta=1
    77                           	psect	text62,global,reloc=2,class=CODE,delta=1
    78                           	psect	text63,global,reloc=2,class=CODE,delta=1
    79                           	psect	text64,global,reloc=2,class=CODE,delta=1
    80                           	psect	text65,global,reloc=2,class=CODE,delta=1
    81                           	psect	text66,global,reloc=2,class=CODE,delta=1
    82                           	psect	text67,global,reloc=2,class=CODE,delta=1
    83                           	psect	text68,global,reloc=2,class=CODE,delta=1
    84                           	psect	text69,global,reloc=2,class=CODE,delta=1
    85                           	psect	text70,global,reloc=2,class=CODE,delta=1
    86                           	psect	text71,global,reloc=2,class=CODE,delta=1
    87                           	psect	text72,global,reloc=2,class=CODE,delta=1
    88                           	psect	text73,global,reloc=2,class=CODE,delta=1
    89                           	psect	text74,global,reloc=2,class=CODE,delta=1
    90                           	psect	text75,global,reloc=2,class=CODE,delta=1
    91                           	psect	text76,global,reloc=2,class=CODE,delta=1
    92                           	psect	text77,global,reloc=2,class=CODE,delta=1
    93                           	psect	text78,global,reloc=2,class=CODE,delta=1
    94                           	psect	text79,global,reloc=2,class=CODE,delta=1
    95                           	psect	text80,global,reloc=2,class=CODE,delta=1
    96                           	psect	text81,global,reloc=2,class=CODE,delta=1
    97                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    98                           	psect	text83,global,reloc=2,class=CODE,delta=1
    99                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
   100                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   101                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   102                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
   103                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
   104                           	psect	pa_nodes0,global,class=CODE,delta=1
   105  0000                     
   106                           ; Version 2.36
   107                           ; Generated 28/01/2022 GMT
   108                           ; 
   109                           ; Copyright Â© 2022, Microchip Technology Inc. and its subsidiaries ("Microchip")
   110                           ; All rights reserved.
   111                           ; 
   112                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   113                           ; 
   114                           ; Redistribution and use in source and binary forms, with or without modification, are
   115                           ; permitted provided that the following conditions are met:
   116                           ; 
   117                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   118                           ;        conditions and the following disclaimer.
   119                           ; 
   120                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   121                           ;        of conditions and the following disclaimer in the documentation and/or other
   122                           ;        materials provided with the distribution. Publication is not required when
   123                           ;        this file is used in an embedded application.
   124                           ; 
   125                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   126                           ;        software without specific prior written permission.
   127                           ; 
   128                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   129                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   130                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   131                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   132                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   133                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   134                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   135                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   136                           ; 
   137                           ; 
   138                           ; Code-generator required, PIC18F4321 Definitions
   139                           ; 
   140                           ; SFR Addresses
   141  0000                     
   142                           	psect	idataCOMRAM
   143  00011E                     __pidataCOMRAM:
   144                           	callstack 0
   145                           
   146                           ;initializer for _MAINMENUSIZE
   147  00011E  0E                 	db	14
   148  00011F  0E                 	db	14
   149  000120  1C                 	db	28
   150  000121  09                 	db	9
   151  000122  0C                 	db	12
   152                           
   153                           ;initializer for _minute
   154  000123  1E                 	db	30
   155                           
   156                           ;initializer for _minutes
   157  000124  1E                 	db	30
   158                           
   159                           ;initializer for menuMotor@state
   160  000125  01                 	db	1
   161                           
   162                           	psect	idataBANK0
   163  001872                     __pidataBANK0:
   164                           	callstack 0
   165                           
   166                           ;initializer for _RESULTS
   167  001872  54                 	db	84
   168  001873  49                 	db	73
   169  001874  4D                 	db	77
   170  001875  45                 	db	69
   171  001876  20                 	db	32
   172  001877  4C                 	db	76
   173  001878  45                 	db	69
   174  001879  46                 	db	70
   175  00187A  54                 	db	84
   176  00187B  3A                 	db	58
   177  00187C  00                 	db	0
   178  00187D  53                 	db	83
   179  00187E  43                 	db	67
   180  00187F  4F                 	db	79
   181  001880  52                 	db	82
   182  001881  45                 	db	69
   183  001882  3A                 	db	58
   184  001883  00                 	db	0
   185  001884  00                 	db	0
   186  001885  00                 	db	0
   187  001886  00                 	db	0
   188  001887  00                 	db	0
   189                           
   190                           ;initializer for _LOGOUTMESSAGE
   191  001888  42                 	db	66
   192  001889  59                 	db	89
   193  00188A  45                 	db	69
   194  00188B  20                 	db	32
   195  00188C  42                 	db	66
   196  00188D  59                 	db	89
   197  00188E  45                 	db	69
   198  00188F  20                 	db	32
   199  001890  00                 	db	0
   200                           
   201                           ;initializer for _ERROR
   202  001891  45                 	db	69
   203  001892  52                 	db	82
   204  001893  52                 	db	82
   205  001894  4F                 	db	79
   206  001895  52                 	db	82
   207  001896  53                 	db	83
   208  001897  3A                 	db	58
   209  001898  20                 	db	32
   210  001899  00                 	db	0
   211                           
   212                           ;initializer for _LOGINMENU
   213  00189A  31                 	db	49
   214  00189B  2E                 	db	46
   215  00189C  4C                 	db	76
   216  00189D  4F                 	db	79
   217  00189E  47                 	db	71
   218  00189F  49                 	db	73
   219  0018A0  4E                 	db	78
   220  0018A1  00                 	db	0
   221  0018A2  00                 	db	0
   222  0018A3  00                 	db	0
   223  0018A4  00                 	db	0
   224  0018A5  32                 	db	50
   225  0018A6  2E                 	db	46
   226  0018A7  52                 	db	82
   227  0018A8  45                 	db	69
   228  0018A9  47                 	db	71
   229  0018AA  49                 	db	73
   230  0018AB  53                 	db	83
   231  0018AC  54                 	db	84
   232  0018AD  45                 	db	69
   233  0018AE  52                 	db	82
   234  0018AF  00                 	db	0
   235                           
   236                           ;initializer for _TIME
   237  0018B0  54                 	db	84
   238  0018B1  49                 	db	73
   239  0018B2  4D                 	db	77
   240  0018B3  45                 	db	69
   241  0018B4  20                 	db	32
   242  0018B5  52                 	db	82
   243  0018B6  45                 	db	69
   244  0018B7  4D                 	db	77
   245  0018B8  41                 	db	65
   246  0018B9  49                 	db	73
   247  0018BA  4E                 	db	78
   248  0018BB  49                 	db	73
   249  0018BC  4E                 	db	78
   250  0018BD  47                 	db	71
   251  0018BE  3A                 	db	58
   252  0018BF  20                 	db	32
   253                           
   254                           ;initializer for _sysTime
   255  0018C0  43                 	db	67
   256  0018C1  55                 	db	85
   257  0018C2  52                 	db	82
   258  0018C3  52                 	db	82
   259  0018C4  45                 	db	69
   260  0018C5  4E                 	db	78
   261  0018C6  54                 	db	84
   262  0018C7  20                 	db	32
   263  0018C8  54                 	db	84
   264  0018C9  49                 	db	73
   265  0018CA  4D                 	db	77
   266  0018CB  45                 	db	69
   267  0018CC  3A                 	db	58
   268  0018CD  00                 	db	0
   269                           
   270                           ;initializer for _modifyTimeString
   271  0018CE  4D                 	db	77
   272  0018CF  4F                 	db	79
   273  0018D0  44                 	db	68
   274  0018D1  49                 	db	73
   275  0018D2  46                 	db	70
   276  0018D3  59                 	db	89
   277  0018D4  20                 	db	32
   278  0018D5  54                 	db	84
   279  0018D6  49                 	db	73
   280  0018D7  4D                 	db	77
   281  0018D8  45                 	db	69
   282  0018D9  3A                 	db	58
   283  0018DA  00                 	db	0
   284                           
   285                           ;initializer for _LOGREGSCREEN
   286  0018DB  55                 	db	85
   287  0018DC  53                 	db	83
   288  0018DD  45                 	db	69
   289  0018DE  52                 	db	82
   290  0018DF  3A                 	db	58
   291  0018E0  00                 	db	0
   292  0018E1  50                 	db	80
   293  0018E2  53                 	db	83
   294  0018E3  57                 	db	87
   295  0018E4  44                 	db	68
   296  0018E5  3A                 	db	58
   297  0018E6  00                 	db	0
   298                           
   299                           	psect	smallconst
   300  000200                     __psmallconst:
   301                           	callstack 0
   302  000200  00                 	db	0
   303  000201                     _TABLE:
   304                           	callstack 0
   305  000201  31                 	db	49
   306  000202  32                 	db	50
   307  000203  33                 	db	51
   308  000204  34                 	db	52
   309  000205  35                 	db	53
   310  000206  36                 	db	54
   311  000207  37                 	db	55
   312  000208  38                 	db	56
   313  000209  39                 	db	57
   314  00020A  2A                 	db	42
   315  00020B  30                 	db	48
   316  00020C  23                 	db	35
   317  00020D                     __end_of_TABLE:
   318                           	callstack 0
   319  00020D                     _MAINMENU:
   320                           	callstack 0
   321  00020D  31                 	db	49
   322  00020E  2E                 	db	46
   323  00020F  50                 	db	80
   324  000210  4C                 	db	76
   325  000211  41                 	db	65
   326  000212  59                 	db	89
   327  000213  20                 	db	32
   328  000214  41                 	db	65
   329  000215  20                 	db	32
   330  000216  47                 	db	71
   331  000217  41                 	db	65
   332  000218  4D                 	db	77
   333  000219  45                 	db	69
   334  00021A  00                 	db	0
   335  00021B  00                 	db	0
   336  00021C  00                 	db	0
   337  00021D  00                 	db	0
   338  00021E  00                 	db	0
   339  00021F  00                 	db	0
   340  000220  00                 	db	0
   341  000221  00                 	db	0
   342  000222  00                 	db	0
   343  000223  00                 	db	0
   344  000224  00                 	db	0
   345  000225  00                 	db	0
   346  000226  00                 	db	0
   347  000227  00                 	db	0
   348  000228  00                 	db	0
   349  000229  32                 	db	50
   350  00022A  2E                 	db	46
   351  00022B  4D                 	db	77
   352  00022C  4F                 	db	79
   353  00022D  44                 	db	68
   354  00022E  49                 	db	73
   355  00022F  46                 	db	70
   356  000230  59                 	db	89
   357  000231  20                 	db	32
   358  000232  54                 	db	84
   359  000233  49                 	db	73
   360  000234  4D                 	db	77
   361  000235  45                 	db	69
   362  000236  00                 	db	0
   363  000237  00                 	db	0
   364  000238  00                 	db	0
   365  000239  00                 	db	0
   366  00023A  00                 	db	0
   367  00023B  00                 	db	0
   368  00023C  00                 	db	0
   369  00023D  00                 	db	0
   370  00023E  00                 	db	0
   371  00023F  00                 	db	0
   372  000240  00                 	db	0
   373  000241  00                 	db	0
   374  000242  00                 	db	0
   375  000243  00                 	db	0
   376  000244  00                 	db	0
   377  000245  33                 	db	51
   378  000246  2E                 	db	46
   379  000247  53                 	db	83
   380  000248  48                 	db	72
   381  000249  4F                 	db	79
   382  00024A  57                 	db	87
   383  00024B  20                 	db	32
   384  00024C  47                 	db	71
   385  00024D  45                 	db	69
   386  00024E  4E                 	db	78
   387  00024F  45                 	db	69
   388  000250  52                 	db	82
   389  000251  41                 	db	65
   390  000252  4C                 	db	76
   391  000253  20                 	db	32
   392  000254  54                 	db	84
   393  000255  4F                 	db	79
   394  000256  50                 	db	80
   395  000257  20                 	db	32
   396  000258  35                 	db	53
   397  000259  20                 	db	32
   398  00025A  53                 	db	83
   399  00025B  43                 	db	67
   400  00025C  4F                 	db	79
   401  00025D  52                 	db	82
   402  00025E  45                 	db	69
   403  00025F  53                 	db	83
   404  000260  20                 	db	32
   405  000261  34                 	db	52
   406  000262  2E                 	db	46
   407  000263  4C                 	db	76
   408  000264  4F                 	db	79
   409  000265  47                 	db	71
   410  000266  4F                 	db	79
   411  000267  55                 	db	85
   412  000268  54                 	db	84
   413  000269  00                 	db	0
   414  00026A  00                 	db	0
   415  00026B  00                 	db	0
   416  00026C  00                 	db	0
   417  00026D  00                 	db	0
   418  00026E  00                 	db	0
   419  00026F  00                 	db	0
   420  000270  00                 	db	0
   421  000271  00                 	db	0
   422  000272  00                 	db	0
   423  000273  00                 	db	0
   424  000274  00                 	db	0
   425  000275  00                 	db	0
   426  000276  00                 	db	0
   427  000277  00                 	db	0
   428  000278  00                 	db	0
   429  000279  00                 	db	0
   430  00027A  00                 	db	0
   431  00027B  00                 	db	0
   432  00027C  00                 	db	0
   433  00027D  35                 	db	53
   434  00027E  2E                 	db	46
   435  00027F  53                 	db	83
   436  000280  48                 	db	72
   437  000281  4F                 	db	79
   438  000282  57                 	db	87
   439  000283  20                 	db	32
   440  000284  54                 	db	84
   441  000285  49                 	db	73
   442  000286  4D                 	db	77
   443  000287  45                 	db	69
   444  000288  00                 	db	0
   445  000289  00                 	db	0
   446  00028A  00                 	db	0
   447  00028B  00                 	db	0
   448  00028C  00                 	db	0
   449  00028D  00                 	db	0
   450  00028E  00                 	db	0
   451  00028F  00                 	db	0
   452  000290  00                 	db	0
   453  000291  00                 	db	0
   454  000292  00                 	db	0
   455  000293  00                 	db	0
   456  000294  00                 	db	0
   457  000295  00                 	db	0
   458  000296  00                 	db	0
   459  000297  00                 	db	0
   460  000298  00                 	db	0
   461  000299                     __end_of_MAINMENU:
   462                           	callstack 0
   463  000299                     _SMSTABLE:
   464                           	callstack 0
   465  000299  31                 	db	49
   466  00029A  00                 	db	0
   467  00029B  00                 	db	0
   468  00029C  00                 	db	0
   469  00029D  00                 	db	0
   470  00029E  00                 	db	0
   471  00029F  41                 	db	65
   472  0002A0  42                 	db	66
   473  0002A1  43                 	db	67
   474  0002A2  32                 	db	50
   475  0002A3  00                 	db	0
   476  0002A4  00                 	db	0
   477  0002A5  44                 	db	68
   478  0002A6  45                 	db	69
   479  0002A7  46                 	db	70
   480  0002A8  33                 	db	51
   481  0002A9  00                 	db	0
   482  0002AA  00                 	db	0
   483  0002AB  47                 	db	71
   484  0002AC  48                 	db	72
   485  0002AD  49                 	db	73
   486  0002AE  34                 	db	52
   487  0002AF  00                 	db	0
   488  0002B0  00                 	db	0
   489  0002B1  4A                 	db	74
   490  0002B2  4B                 	db	75
   491  0002B3  4C                 	db	76
   492  0002B4  35                 	db	53
   493  0002B5  00                 	db	0
   494  0002B6  00                 	db	0
   495  0002B7  4D                 	db	77
   496  0002B8  4E                 	db	78
   497  0002B9  4F                 	db	79
   498  0002BA  36                 	db	54
   499  0002BB  00                 	db	0
   500  0002BC  00                 	db	0
   501  0002BD  50                 	db	80
   502  0002BE  51                 	db	81
   503  0002BF  52                 	db	82
   504  0002C0  53                 	db	83
   505  0002C1  37                 	db	55
   506  0002C2  00                 	db	0
   507  0002C3  54                 	db	84
   508  0002C4  55                 	db	85
   509  0002C5  56                 	db	86
   510  0002C6  38                 	db	56
   511  0002C7  00                 	db	0
   512  0002C8  00                 	db	0
   513  0002C9  57                 	db	87
   514  0002CA  58                 	db	88
   515  0002CB  59                 	db	89
   516  0002CC  5A                 	db	90
   517  0002CD  39                 	db	57
   518  0002CE  00                 	db	0
   519  0002CF                     __end_of_SMSTABLE:
   520                           	callstack 0
   521  0000                     _EECON2	set	4007
   522  0000                     _EEDATA	set	4008
   523  0000                     _EEADR	set	4009
   524  0000                     _PORTCbits	set	3970
   525  0000                     _RCREG	set	4014
   526  0000                     _TXREG	set	4013
   527  0000                     _SPBRG	set	4015
   528  0000                     _BAUDCONbits	set	4024
   529  0000                     _LATCbits	set	3979
   530  0000                     _TRISCbits	set	3988
   531  0000                     _PORTDbits	set	3971
   532  0000                     _LATDbits	set	3980
   533  0000                     _TRISDbits	set	3989
   534  0000                     _LATAbits	set	3977
   535  0000                     _LATBbits	set	3978
   536  0000                     _TMR0L	set	4054
   537  0000                     _TMR0H	set	4055
   538  0000                     _ADCON0bits	set	4034
   539  0000                     _T0CONbits	set	4053
   540  0000                     _PORTBbits	set	3969
   541  0000                     _TRISAbits	set	3986
   542  0000                     _TRISBbits	set	3987
   543  0000                     _RCONbits	set	4048
   544  0000                     _T0CON	set	4053
   545  0000                     _INTCONbits	set	4082
   546  0000                     _INTCON2bits	set	4081
   547  0000                     _PIR1bits	set	3998
   548  0000                     _RCSTAbits	set	4011
   549  0000                     _TXSTAbits	set	4012
   550  0000                     _ADCON2	set	4032
   551  0000                     _ADCON1	set	4033
   552  0000                     _ADCON0	set	4034
   553  0000                     _ADRESH	set	4036
   554  0000                     _EECON1bits	set	4006
   555  0002CF  00                 	db	0	; dummy byte at the end
   556  0000                     
   557                           ; #config settings
   558                           
   559                           	psect	cinit
   560  001950                     __pcinit:
   561                           	callstack 0
   562  001950                     start_initialization:
   563                           	callstack 0
   564  001950                     __initialization:
   565                           	callstack 0
   566                           
   567                           ; Initialize objects allocated to BANK0 (117 bytes)
   568                           ; load TBLPTR registers with __pidataBANK0
   569  001950  0E72               	movlw	low __pidataBANK0
   570  001952  6EF6               	movwf	tblptrl,c
   571  001954  0E18               	movlw	high __pidataBANK0
   572  001956  6EF7               	movwf	tblptrh,c
   573  001958  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   574  00195A  6EF8               	movwf	tblptru,c
   575  00195C  EE00  F080         	lfsr	0,__pdataBANK0
   576  001960  EE10 F075          	lfsr	1,117
   577  001964                     copy_data0:
   578  001964  0009               	tblrd		*+
   579  001966  CFF5 FFEE          	movff	tablat,postinc0
   580  00196A  50E5               	movf	postdec1,w,c
   581  00196C  50E1               	movf	fsr1l,w,c
   582  00196E  E1FA               	bnz	copy_data0
   583                           
   584                           ; Initialize objects allocated to COMRAM (8 bytes)
   585                           ; load TBLPTR registers with __pidataCOMRAM
   586  001970  0E1E               	movlw	low __pidataCOMRAM
   587  001972  6EF6               	movwf	tblptrl,c
   588  001974  0E01               	movlw	high __pidataCOMRAM
   589  001976  6EF7               	movwf	tblptrh,c
   590  001978  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   591  00197A  6EF8               	movwf	tblptru,c
   592  00197C  EE00  F072         	lfsr	0,__pdataCOMRAM
   593  001980  EE10 F008          	lfsr	1,8
   594  001984                     copy_data1:
   595  001984  0009               	tblrd		*+
   596  001986  CFF5 FFEE          	movff	tablat,postinc0
   597  00198A  50E5               	movf	postdec1,w,c
   598  00198C  50E1               	movf	fsr1l,w,c
   599  00198E  E1FA               	bnz	copy_data1
   600                           
   601                           ; Clear objects allocated to BANK1 (219 bytes)
   602  001990  EE01  F000         	lfsr	0,__pbssBANK1
   603  001994  0EDB               	movlw	219
   604  001996                     clear_0:
   605  001996  6AEE               	clrf	postinc0,c
   606  001998  06E8               	decf	wreg,f,c
   607  00199A  E1FD               	bnz	clear_0
   608                           
   609                           ; Clear objects allocated to COMRAM (88 bytes)
   610  00199C  EE00  F001         	lfsr	0,__pbssCOMRAM
   611  0019A0  0E58               	movlw	88
   612  0019A2                     clear_1:
   613  0019A2  6AEE               	clrf	postinc0,c
   614  0019A4  06E8               	decf	wreg,f,c
   615  0019A6  E1FD               	bnz	clear_1
   616  0019A8                     end_of_initialization:
   617                           	callstack 0
   618  0019A8                     __end_of__initialization:
   619                           	callstack 0
   620  0019A8  907A               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   621  0019AA  927A               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   622  0019AC  0E00               	movlw	low (__Lmediumconst shr (0+16))
   623  0019AE  6EF8               	movwf	tblptru,c
   624  0019B0  0100               	movlb	0
   625  0019B2  EF9F  F00D         	goto	_main	;jump to C main() function
   626                           
   627                           	psect	bssCOMRAM
   628  000001                     __pbssCOMRAM:
   629                           	callstack 0
   630  000001                     _topScores:
   631                           	callstack 0
   632  000001                     	ds	10
   633  00000B                     _mUser@EEPROM$F1764:
   634                           	callstack 0
   635  00000B                     	ds	2
   636  00000D                     _Timer:
   637                           	callstack 0
   638  00000D                     	ds	2
   639  00000F                     _h_Tics:
   640                           	callstack 0
   641  00000F                     	ds	2
   642  000011                     _val@time$F1847:
   643                           	callstack 0
   644  000011                     	ds	1
   645  000012                     _game:
   646                           	callstack 0
   647  000012                     	ds	1
   648  000013                     _state@time$F1845:
   649                           	callstack 0
   650  000013                     	ds	1
   651  000014                     _timer@time$F1844:
   652                           	callstack 0
   653  000014                     	ds	1
   654  000015                     _sysMinute:
   655                           	callstack 0
   656  000015                     	ds	1
   657  000016                     _sysSecond:
   658                           	callstack 0
   659  000016                     	ds	1
   660  000017                     _second:
   661                           	callstack 0
   662  000017                     	ds	1
   663  000018                     _seconds:
   664                           	callstack 0
   665  000018                     	ds	1
   666  000019                     _saveState:
   667                           	callstack 0
   668  000019                     	ds	1
   669  00001A                     _saveScore:
   670                           	callstack 0
   671  00001A                     	ds	1
   672  00001B                     _lastUserPointer:
   673                           	callstack 0
   674  00001B                     	ds	1
   675  00001C                     _status:
   676                           	callstack 0
   677  00001C                     	ds	1
   678  00001D                     _userNum:
   679                           	callstack 0
   680  00001D                     	ds	1
   681  00001E                     _state@EEPROM$F1761:
   682                           	callstack 0
   683  00001E                     	ds	1
   684  00001F                     _position:
   685                           	callstack 0
   686  00001F                     	ds	1
   687  000020                     _numScores:
   688                           	callstack 0
   689  000020                     	ds	1
   690  000021                     _counterTX:
   691                           	callstack 0
   692  000021                     	ds	1
   693  000022                     _dataTX:
   694                           	callstack 0
   695  000022                     	ds	1
   696  000023                     _timerTX:
   697                           	callstack 0
   698  000023                     	ds	1
   699  000024                     _stateTX:
   700                           	callstack 0
   701  000024                     	ds	1
   702  000025                     _counterRX:
   703                           	callstack 0
   704  000025                     	ds	1
   705  000026                     _dataRX:
   706                           	callstack 0
   707  000026                     	ds	1
   708  000027                     _timerRX:
   709                           	callstack 0
   710  000027                     	ds	1
   711  000028                     _stateRX:
   712                           	callstack 0
   713  000028                     	ds	1
   714  000029                     _joyMode:
   715                           	callstack 0
   716  000029                     	ds	1
   717  00002A                     _stateJoy:
   718                           	callstack 0
   719  00002A                     	ds	1
   720  00002B                     _moved:
   721                           	callstack 0
   722  00002B                     	ds	1
   723  00002C                     _y:
   724                           	callstack 0
   725  00002C                     	ds	1
   726  00002D                     _x:
   727                           	callstack 0
   728  00002D                     	ds	1
   729  00002E                     _send:
   730                           	callstack 0
   731  00002E                     	ds	1
   732  00002F                     _mScore:
   733                           	callstack 0
   734  00002F                     	ds	1
   735  000030                     _pos:
   736                           	callstack 0
   737  000030                     	ds	1
   738  000031                     _val:
   739                           	callstack 0
   740  000031                     	ds	1
   741  000032                     _LCDcolm:
   742                           	callstack 0
   743  000032                     	ds	1
   744  000033                     _LCDcol:
   745                           	callstack 0
   746  000033                     	ds	1
   747  000034                     _LCDrow:
   748                           	callstack 0
   749  000034                     	ds	1
   750  000035                     _timer:
   751                           	callstack 0
   752  000035                     	ds	1
   753  000036                     _period:
   754                           	callstack 0
   755  000036                     	ds	1
   756  000037                     _timerSong:
   757                           	callstack 0
   758  000037                     	ds	1
   759  000038                     _periodTimer:
   760                           	callstack 0
   761  000038                     	ds	1
   762  000039                     _state@Audio$F967:
   763                           	callstack 0
   764  000039                     	ds	1
   765  00003A                     _ColumnAct:
   766                           	callstack 0
   767  00003A                     	ds	1
   768  00003B                     _RowAct:
   769                           	callstack 0
   770  00003B                     	ds	1
   771  00003C                     _stateSMS:
   772                           	callstack 0
   773  00003C                     	ds	1
   774  00003D                     _state:
   775                           	callstack 0
   776  00003D                     	ds	1
   777  00003E                     _available:
   778                           	callstack 0
   779  00003E                     	ds	1
   780  00003F                     _numPresses:
   781                           	callstack 0
   782  00003F                     	ds	1
   783  000040                     _pressed:
   784                           	callstack 0
   785  000040                     	ds	1
   786  000041                     _previous:
   787                           	callstack 0
   788  000041                     	ds	1
   789  000042                     _currentKey:
   790                           	callstack 0
   791  000042                     	ds	1
   792  000043                     _timer_SMS:
   793                           	callstack 0
   794  000043                     	ds	1
   795  000044                     _timerBounces:
   796                           	callstack 0
   797  000044                     	ds	1
   798  000045                     _row:
   799                           	callstack 0
   800  000045                     	ds	1
   801  000046                     _counter:
   802                           	callstack 0
   803  000046                     	ds	1
   804  000047                     _mUser:
   805                           	callstack 0
   806  000047                     	ds	18
   807                           
   808                           	psect	dataCOMRAM
   809  000072                     __pdataCOMRAM:
   810                           	callstack 0
   811  000072                     _MAINMENUSIZE:
   812                           	callstack 0
   813  000072                     	ds	5
   814  000077                     _minute:
   815                           	callstack 0
   816  000077                     	ds	1
   817  000078                     _minutes:
   818                           	callstack 0
   819  000078                     	ds	1
   820  000079                     menuMotor@state:
   821                           	callstack 0
   822  000079                     	ds	1
   823                           
   824                           	psect	dataBANK0
   825  000080                     __pdataBANK0:
   826                           	callstack 0
   827  000080                     _RESULTS:
   828                           	callstack 0
   829  000080                     	ds	22
   830  000096                     _LOGOUTMESSAGE:
   831                           	callstack 0
   832  000096                     	ds	9
   833  00009F                     _ERROR:
   834                           	callstack 0
   835  00009F                     	ds	9
   836  0000A8                     _LOGINMENU:
   837                           	callstack 0
   838  0000A8                     	ds	22
   839  0000BE                     _TIME:
   840                           	callstack 0
   841  0000BE                     	ds	16
   842  0000CE                     _sysTime:
   843                           	callstack 0
   844  0000CE                     	ds	14
   845  0000DC                     _modifyTimeString:
   846                           	callstack 0
   847  0000DC                     	ds	13
   848  0000E9                     _LOGREGSCREEN:
   849                           	callstack 0
   850  0000E9                     	ds	12
   851                           
   852                           	psect	bssBANK1
   853  000100                     __pbssBANK1:
   854                           	callstack 0
   855  000100                     _users:
   856                           	callstack 0
   857  000100                     	ds	144
   858  000190                     _s_Timers:
   859                           	callstack 0
   860  000190                     	ds	75
   861                           
   862                           	psect	cstackBANK0
   863  0000F5                     __pcstackBANK0:
   864                           	callstack 0
   865  0000F5                     _dataMotor$1786:
   866                           	callstack 0
   867                           
   868                           ; 2 bytes @ 0x0
   869  0000F5                     	ds	2
   870                           
   871                           	psect	cstackCOMRAM
   872  000059                     __pcstackCOMRAM:
   873                           	callstack 0
   874  000059                     
   875                           ; 1 bytes @ 0x0
   876  000059                     	ds	1
   877  00005A                     ??_RSI_High:
   878                           
   879                           ; 1 bytes @ 0x1
   880  00005A                     	ds	4
   881  00005E                     ??_KeGetGenericValue:
   882  00005E                     ??_getFullValue:
   883  00005E                     ??_EscriuPrimeraOrdre:
   884  00005E                     ??_CantaPartAlta:
   885  00005E                     ??_CantaPartBaixa:
   886  00005E                     ?_TiGetTics:
   887                           	callstack 0
   888  00005E                     ?___awmod:
   889                           	callstack 0
   890  00005E                     TiResetTics@Handle:
   891                           	callstack 0
   892  00005E                     _isPressed$638:
   893                           	callstack 0
   894  00005E                     JoSetMode@mode:
   895                           	callstack 0
   896  00005E                     SiSendChar@myByte:
   897                           	callstack 0
   898  00005E                     btSendByte@byte:
   899                           	callstack 0
   900  00005E                     DaSaveUser@regUser:
   901                           	callstack 0
   902  00005E                     saveEEPROM@data:
   903                           	callstack 0
   904  00005E                     readEEPROM@address:
   905                           	callstack 0
   906  00005E                     ___lbdiv@divisor:
   907                           	callstack 0
   908  00005E                     ___lbmod@divisor:
   909                           	callstack 0
   910  00005E                     ___awmod@dividend:
   911                           	callstack 0
   912                           
   913                           ; 2 bytes @ 0x5
   914  00005E                     	ds	1
   915  00005F                     ??_joystickMotor:
   916  00005F                     ??_readUserData:
   917  00005F                     KeSetMode@menuMode:
   918                           	callstack 0
   919  00005F                     CantaPartAlta@c:
   920                           	callstack 0
   921  00005F                     CantaPartBaixa@c:
   922                           	callstack 0
   923  00005F                     EscriuPrimeraOrdre@ordre:
   924                           	callstack 0
   925  00005F                     saveEEPROM@ad:
   926                           	callstack 0
   927  00005F                     ___lbdiv@dividend:
   928                           	callstack 0
   929  00005F                     ___lbmod@dividend:
   930                           	callstack 0
   931                           
   932                           ; 1 bytes @ 0x6
   933  00005F                     	ds	1
   934  000060                     ??_TiGetTics:
   935  000060                     CantaIR@IR:
   936                           	callstack 0
   937  000060                     CantaData@Data:
   938                           	callstack 0
   939  000060                     ___lbdiv@counter:
   940                           	callstack 0
   941  000060                     ___lbmod@counter:
   942                           	callstack 0
   943  000060                     ___awmod@divisor:
   944                           	callstack 0
   945                           
   946                           ; 2 bytes @ 0x7
   947  000060                     	ds	1
   948  000061                     ___lbdiv@quotient:
   949                           	callstack 0
   950  000061                     ___lbmod@rem:
   951                           	callstack 0
   952                           
   953                           ; 1 bytes @ 0x8
   954  000061                     	ds	1
   955  000062                     TiGetTics@Handle:
   956                           	callstack 0
   957  000062                     getFullValue@generic:
   958                           	callstack 0
   959  000062                     ___awmod@counter:
   960                           	callstack 0
   961                           
   962                           ; 1 bytes @ 0x9
   963  000062                     	ds	1
   964  000063                     ___awmod@sign:
   965                           	callstack 0
   966  000063                     TiGetTics@actual:
   967                           	callstack 0
   968                           
   969                           ; 2 bytes @ 0xA
   970  000063                     	ds	2
   971  000065                     ??_audioMotor:
   972  000065                     ??_SMSMotor:
   973  000065                     ??_KeypadMotor:
   974  000065                     ??_btMotor:
   975  000065                     WaitForBusy@Busy:
   976                           	callstack 0
   977  000065                     Espera@Timer:
   978                           	callstack 0
   979                           
   980                           ; 2 bytes @ 0xC
   981  000065                     	ds	1
   982  000066                     LcGotoXY@Row:
   983                           	callstack 0
   984                           
   985                           ; 1 bytes @ 0xD
   986  000066                     	ds	1
   987  000067                     LcGotoXY@Fisics:
   988                           	callstack 0
   989  000067                     Espera@ms:
   990                           	callstack 0
   991                           
   992                           ; 2 bytes @ 0xE
   993  000067                     	ds	1
   994  000068                     _LcGotoXY$844:
   995                           	callstack 0
   996                           
   997                           ; 2 bytes @ 0xF
   998  000068                     	ds	1
   999  000069                     ??_Espera:
  1000                           
  1001                           ; 1 bytes @ 0x10
  1002  000069                     	ds	1
  1003  00006A                     LcInit@columns:
  1004                           	callstack 0
  1005  00006A                     LcGotoXY@Column:
  1006                           	callstack 0
  1007                           
  1008                           ; 1 bytes @ 0x11
  1009  00006A                     	ds	1
  1010  00006B                     LcInit@rows:
  1011                           	callstack 0
  1012  00006B                     LcPutChar@c:
  1013                           	callstack 0
  1014  00006B                     DaFindUser@logUser:
  1015                           	callstack 0
  1016                           
  1017                           ; 1 bytes @ 0x12
  1018  00006B                     	ds	1
  1019  00006C                     ??_dataMotor:
  1020  00006C                     ??_mainMenu:
  1021  00006C                     LcInit@i:
  1022                           	callstack 0
  1023  00006C                     displayString@string:
  1024                           	callstack 0
  1025  00006C                     DaSaveScore@userScore:
  1026                           	callstack 0
  1027  00006C                     sendChar@bt:
  1028                           	callstack 0
  1029                           
  1030                           ; 1 bytes @ 0x13
  1031  00006C                     	ds	1
  1032  00006D                     ??_timeMotor:
  1033  00006D                     
  1034                           ; 1 bytes @ 0x14
  1035  00006D                     	ds	1
  1036  00006E                     ??_menuMotor:
  1037                           
  1038                           ; 1 bytes @ 0x15
  1039  00006E                     	ds	4
  1040  000072                     
  1041                           ; 1 bytes @ 0x19
  1042 ;;
  1043 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1044 ;;
  1045 ;; *************** function _main *****************
  1046 ;; Defined at:
  1047 ;;		line 38 in file "main.c"
  1048 ;; Parameters:    Size  Location     Type
  1049 ;;		None
  1050 ;; Auto vars:     Size  Location     Type
  1051 ;;		None
  1052 ;; Return value:  Size  Location     Type
  1053 ;;                  1    wreg      void 
  1054 ;; Registers used:
  1055 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1056 ;; Tracked objects:
  1057 ;;		On entry : 0/0
  1058 ;;		On exit  : 0/0
  1059 ;;		Unchanged: 0/0
  1060 ;; Data sizes:     COMRAM   BANK0   BANK1
  1061 ;;      Params:         0       0       0
  1062 ;;      Locals:         0       0       0
  1063 ;;      Temps:          0       0       0
  1064 ;;      Totals:         0       0       0
  1065 ;;Total ram usage:        0 bytes
  1066 ;; Hardware stack levels required when called: 8
  1067 ;; This function calls:
  1068 ;;		_KeypadMotor
  1069 ;;		_LcInit
  1070 ;;		_SMSMotor
  1071 ;;		_TiInitTimer
  1072 ;;		_audioMotor
  1073 ;;		_btMotor
  1074 ;;		_dataMotor
  1075 ;;		_initAudio
  1076 ;;		_initData
  1077 ;;		_initJoystick
  1078 ;;		_initKeypad
  1079 ;;		_initMenu
  1080 ;;		_initSIO
  1081 ;;		_initTime
  1082 ;;		_joystickMotor
  1083 ;;		_menuMotor
  1084 ;;		_timeMotor
  1085 ;; This function is called by:
  1086 ;;		Startup code after reset
  1087 ;; This function uses a non-reentrant model
  1088 ;;
  1089                           
  1090                           	psect	text0
  1091  001B3E                     __ptext0:
  1092                           	callstack 0
  1093  001B3E                     _main:
  1094                           	callstack 23
  1095                           
  1096                           ;incstack = 0
  1097  001B3E  ECBD  F00E         	call	_TiInitTimer	;wreg free
  1098  001B42  EC5B  F00F         	call	_initJoystick	;wreg free
  1099  001B46  EC7D  F00F         	call	_initKeypad	;wreg free
  1100  001B4A  0E10               	movlw	16
  1101  001B4C  6E6A               	movwf	LcInit@columns^0,c
  1102  001B4E  ECC0  F00A         	call	_LcInit
  1103  001B52  EC49  F00F         	call	_initSIO	;wreg free
  1104  001B56  EC85  F000         	call	_initMenu	;wreg free
  1105  001B5A  EC26  F000         	call	_initAudio	;wreg free
  1106  001B5E  ECAF  F000         	call	_initTime	;wreg free
  1107  001B62  EC41  F00D         	call	_initData	;wreg free
  1108  001B66                     l7319:
  1109  001B66  EC16  F00B         	call	_audioMotor	;wreg free
  1110  001B6A  EC69  F00A         	call	_SMSMotor	;wreg free
  1111  001B6E  ECFF  F008         	call	_KeypadMotor	;wreg free
  1112  001B72  EC68  F001         	call	_menuMotor	;wreg free
  1113  001B76  EC0A  F00A         	call	_joystickMotor	;wreg free
  1114  001B7A  ECD4  F004         	call	_dataMotor	;wreg free
  1115  001B7E  EC3E  F007         	call	_timeMotor	;wreg free
  1116  001B82  EC8A  F009         	call	_btMotor	;wreg free
  1117  001B86  D7EF               	goto	l7319
  1118  001B88                     __end_of_main:
  1119                           	callstack 0
  1120                           
  1121 ;; *************** function _timeMotor *****************
  1122 ;; Defined at:
  1123 ;;		line 297 in file "time.c"
  1124 ;; Parameters:    Size  Location     Type
  1125 ;;		None
  1126 ;; Auto vars:     Size  Location     Type
  1127 ;;		None
  1128 ;; Return value:  Size  Location     Type
  1129 ;;                  1    wreg      void 
  1130 ;; Registers used:
  1131 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1132 ;; Tracked objects:
  1133 ;;		On entry : 0/0
  1134 ;;		On exit  : 0/0
  1135 ;;		Unchanged: 0/0
  1136 ;; Data sizes:     COMRAM   BANK0   BANK1
  1137 ;;      Params:         0       0       0
  1138 ;;      Locals:         0       0       0
  1139 ;;      Temps:          2       0       0
  1140 ;;      Totals:         2       0       0
  1141 ;;Total ram usage:        2 bytes
  1142 ;; Hardware stack levels used: 1
  1143 ;; Hardware stack levels required when called: 7
  1144 ;; This function calls:
  1145 ;;		_KeGetGenericValue
  1146 ;;		_LcCursorOn
  1147 ;;		_LcGotoXY
  1148 ;;		_LcPutChar
  1149 ;;		_TiGetTics
  1150 ;;		_TiResetTics
  1151 ;;		___lbdiv
  1152 ;;		___lbmod
  1153 ;;		_btAvailable
  1154 ;;		_isPressed
  1155 ;;		_sendChar
  1156 ;;		_updateGameTime
  1157 ;;		_updateSysTime
  1158 ;; This function is called by:
  1159 ;;		_main
  1160 ;; This function uses a non-reentrant model
  1161 ;;
  1162                           
  1163                           	psect	text1
  1164  000E7C                     __ptext1:
  1165                           	callstack 0
  1166  000E7C                     _timeMotor:
  1167                           	callstack 23
  1168                           
  1169                           ;time.c: 298:     switch (state){
  1170                           
  1171                           ;incstack = 0
  1172  000E7C  D15E               	goto	l7225
  1173  000E7E                     l7053:
  1174                           
  1175                           ;time.c: 300:             if (TiGetTics(timer) >= 1200){
  1176  000E7E  5014               	movf	_timer@time$F1844^0,w,c
  1177  000E80  EC24  F00F         	call	_TiGetTics
  1178  000E84  BE5F               	btfsc	(?_TiGetTics+1)^0,7,c
  1179  000E86  0012               	return	
  1180  000E88  D99E               	call	PL28	;call to abstracted procedure
  1181  000E8A  A0D8               	btfss	status,0,c
  1182  000E8C  0012               	return	
  1183                           
  1184                           ;time.c: 301:                 TiResetTics(timer);
  1185  000E8E  5014               	movf	_timer@time$F1844^0,w,c
  1186  000E90  ECAD  F00F         	call	_TiResetTics
  1187                           
  1188                           ;time.c: 302:                 updateSysTime();
  1189  000E94  EF44  F000         	goto	_updateSysTime	;wreg free
  1190  000E98                     l7059:
  1191                           
  1192                           ;time.c: 306:             if (TiGetTics(timer) >= 1200){
  1193  000E98  5014               	movf	_timer@time$F1844^0,w,c
  1194  000E9A  EC24  F00F         	call	_TiGetTics
  1195  000E9E  BE5F               	btfsc	(?_TiGetTics+1)^0,7,c
  1196  000EA0  0012               	return	
  1197  000EA2  D991               	call	PL28	;call to abstracted procedure
  1198  000EA4  A0D8               	btfss	status,0,c
  1199  000EA6  0012               	return	
  1200                           
  1201                           ;time.c: 307:                 TiResetTics(timer);
  1202  000EA8  5014               	movf	_timer@time$F1844^0,w,c
  1203  000EAA  ECAD  F00F         	call	_TiResetTics
  1204                           
  1205                           ;time.c: 308:                 state = 2;
  1206  000EAE  0E02               	movlw	2
  1207                           
  1208                           ;time.c: 309:                 LcGotoXY(0,1);
  1209  000EB0  D98F               	call	PL58	;call to abstracted procedure
  1210  000EB2  ECA6  F00E         	call	_LcGotoXY
  1211                           
  1212                           ;time.c: 310:                 updateGameTime();
  1213  000EB6  ECCB  F00F         	call	_updateGameTime	;wreg free
  1214  000EBA  EF44  F000         	goto	_updateSysTime
  1215  000EBE                     l7071:
  1216                           
  1217                           ;time.c: 316:             if (btAvailable()){
  1218  000EBE  EC93  F000         	call	_btAvailable	;wreg free
  1219  000EC2  0900               	iorlw	0
  1220  000EC4  B4D8               	btfsc	status,2,c
  1221  000EC6  0012               	return	
  1222                           
  1223                           ;time.c: 317:                 val = minute/10;
  1224  000EC8  D992               	call	PL90	;call to abstracted procedure
  1225  000ECA  EC74  F00E         	call	___lbdiv
  1226  000ECE  6E11               	movwf	_val@time$F1847^0,c
  1227                           
  1228                           ;time.c: 318:                 sendChar(1);
  1229  000ED0  0E01               	movlw	1
  1230  000ED2  ECE5  F00F         	call	_sendChar
  1231                           
  1232                           ;time.c: 319:                 state = 3;
  1233  000ED6  0E03               	movlw	3
  1234  000ED8  6E13               	movwf	_state@time$F1845^0,c
  1235  000EDA  0C03               	retlw	3
  1236  000EDC                     l7079:
  1237                           
  1238                           ;time.c: 325:             if (btAvailable()){
  1239  000EDC  EC93  F000         	call	_btAvailable	;wreg free
  1240  000EE0  0900               	iorlw	0
  1241  000EE2  B4D8               	btfsc	status,2,c
  1242  000EE4  0012               	return	
  1243                           
  1244                           ;time.c: 326:                 val = minute%10;
  1245  000EE6  D97B               	call	PL82	;call to abstracted procedure
  1246  000EE8  EC11  F00F         	call	___lbmod
  1247  000EEC  6E11               	movwf	_val@time$F1847^0,c
  1248                           
  1249                           ;time.c: 327:                 sendChar(1);
  1250  000EEE  0E01               	movlw	1
  1251  000EF0  ECE5  F00F         	call	_sendChar
  1252                           
  1253                           ;time.c: 328:                 state = 4;
  1254  000EF4  0E04               	movlw	4
  1255  000EF6  6E13               	movwf	_state@time$F1845^0,c
  1256  000EF8  0C04               	retlw	4
  1257  000EFA                     l7087:
  1258                           
  1259                           ;time.c: 333:             if (btAvailable()){
  1260  000EFA  EC93  F000         	call	_btAvailable	;wreg free
  1261  000EFE  0900               	iorlw	0
  1262  000F00  B4D8               	btfsc	status,2,c
  1263  000F02  0012               	return	
  1264                           
  1265                           ;time.c: 334:                 val = 10;
  1266  000F04  0E0A               	movlw	10
  1267  000F06  6E11               	movwf	_val@time$F1847^0,c
  1268                           
  1269                           ;time.c: 335:                 sendChar(1);
  1270  000F08  0E01               	movlw	1
  1271  000F0A  ECE5  F00F         	call	_sendChar
  1272                           
  1273                           ;time.c: 336:                 state = 5;
  1274  000F0E  0E05               	movlw	5
  1275  000F10  6E13               	movwf	_state@time$F1845^0,c
  1276  000F12  0C05               	retlw	5
  1277  000F14                     l7095:
  1278                           
  1279                           ;time.c: 341:             if (btAvailable()){
  1280  000F14  EC93  F000         	call	_btAvailable	;wreg free
  1281  000F18  0900               	iorlw	0
  1282  000F1A  B4D8               	btfsc	status,2,c
  1283  000F1C  0012               	return	
  1284                           
  1285                           ;time.c: 342:                 val = second/10;
  1286  000F1E  D963               	call	PL84	;call to abstracted procedure
  1287  000F20  EC74  F00E         	call	___lbdiv
  1288  000F24  6E11               	movwf	_val@time$F1847^0,c
  1289                           
  1290                           ;time.c: 343:                 sendChar(1);
  1291  000F26  0E01               	movlw	1
  1292  000F28  ECE5  F00F         	call	_sendChar
  1293                           
  1294                           ;time.c: 344:                 state = 6;
  1295  000F2C  0E06               	movlw	6
  1296  000F2E  6E13               	movwf	_state@time$F1845^0,c
  1297  000F30  0C06               	retlw	6
  1298  000F32                     l7103:
  1299                           
  1300                           ;time.c: 349:             if (btAvailable()){
  1301  000F32  EC93  F000         	call	_btAvailable	;wreg free
  1302  000F36  0900               	iorlw	0
  1303  000F38  B4D8               	btfsc	status,2,c
  1304  000F3A  0012               	return	
  1305                           
  1306                           ;time.c: 350:                 val = second%10;
  1307  000F3C  D95C               	call	PL96	;call to abstracted procedure
  1308  000F3E  EC11  F00F         	call	___lbmod
  1309  000F42  6E11               	movwf	_val@time$F1847^0,c
  1310                           
  1311                           ;time.c: 351:                 sendChar(1);
  1312  000F44  0E01               	movlw	1
  1313  000F46  ECE5  F00F         	call	_sendChar
  1314                           
  1315                           ;time.c: 352:                 state = 1;
  1316  000F4A  0E01               	movlw	1
  1317  000F4C  6E13               	movwf	_state@time$F1845^0,c
  1318  000F4E  0C01               	retlw	1
  1319  000F50                     l7111:
  1320                           
  1321                           ;time.c: 357:             LcPutChar(minute/10+'0');
  1322  000F50  D94E               	call	PL90	;call to abstracted procedure
  1323  000F52  EC74  F00E         	call	___lbdiv
  1324  000F56  0F30               	addlw	48
  1325  000F58  ECE8  F00E         	call	_LcPutChar
  1326                           
  1327                           ;time.c: 358:             state = 21;
  1328  000F5C  0E15               	movlw	21
  1329  000F5E  6E13               	movwf	_state@time$F1845^0,c
  1330                           
  1331                           ;time.c: 359:             break;
  1332  000F60  0C15               	retlw	21
  1333  000F62                     l7115:
  1334                           
  1335                           ;time.c: 362:             LcPutChar(minute%10+'0');
  1336  000F62  D93D               	call	PL82	;call to abstracted procedure
  1337  000F64  EC11  F00F         	call	___lbmod
  1338  000F68  0F30               	addlw	48
  1339  000F6A  ECE8  F00E         	call	_LcPutChar
  1340                           
  1341                           ;time.c: 363:             state = 22;
  1342  000F6E  0E16               	movlw	22
  1343  000F70  6E13               	movwf	_state@time$F1845^0,c
  1344                           
  1345                           ;time.c: 364:             break;
  1346  000F72  0C16               	retlw	22
  1347  000F74                     l7119:
  1348                           
  1349                           ;time.c: 367:             LcPutChar(':');
  1350  000F74  0E3A               	movlw	58
  1351  000F76  ECE8  F00E         	call	_LcPutChar
  1352                           
  1353                           ;time.c: 368:             state = 23;
  1354  000F7A  0E17               	movlw	23
  1355  000F7C  6E13               	movwf	_state@time$F1845^0,c
  1356                           
  1357                           ;time.c: 369:             break;
  1358  000F7E  0C17               	retlw	23
  1359  000F80                     l7123:
  1360                           
  1361                           ;time.c: 372:             LcPutChar(second/10+'0');
  1362  000F80  D932               	call	PL84	;call to abstracted procedure
  1363  000F82  EC74  F00E         	call	___lbdiv
  1364  000F86  0F30               	addlw	48
  1365  000F88  ECE8  F00E         	call	_LcPutChar
  1366                           
  1367                           ;time.c: 373:             state = 24;
  1368  000F8C  0E18               	movlw	24
  1369  000F8E  6E13               	movwf	_state@time$F1845^0,c
  1370                           
  1371                           ;time.c: 374:             break;
  1372  000F90  0C18               	retlw	24
  1373  000F92                     l7127:
  1374                           
  1375                           ;time.c: 377:             LcPutChar(second%10+'0');
  1376  000F92  D931               	call	PL96	;call to abstracted procedure
  1377  000F94  EC11  F00F         	call	___lbmod
  1378  000F98  0F30               	addlw	48
  1379  000F9A  ECE8  F00E         	call	_LcPutChar
  1380                           
  1381                           ;time.c: 378:             LcGotoXY(0,1);
  1382  000F9E  D91C               	call	PL60	;call to abstracted procedure
  1383  000FA0  ECA6  F00E         	call	_LcGotoXY
  1384                           
  1385                           ;time.c: 379:             if (game){
  1386  000FA4  5012               	movf	_game^0,w,c
  1387  000FA6  E003               	bz	l7133
  1388                           
  1389                           ;time.c: 380:                 game = 0;
  1390  000FA8  6A12               	clrf	_game^0,c
  1391                           
  1392                           ;time.c: 381:                 state = 0;
  1393  000FAA  6A13               	clrf	_state@time$F1845^0,c
  1394                           
  1395                           ;time.c: 382:             } else {
  1396  000FAC  D004               	goto	l7137
  1397  000FAE                     l7133:
  1398                           
  1399                           ;time.c: 383:                 LcCursorOn();
  1400  000FAE  EC7B  F000         	call	_LcCursorOn	;wreg free
  1401                           
  1402                           ;time.c: 384:                 state = 25;
  1403  000FB2  0E19               	movlw	25
  1404  000FB4  6E13               	movwf	_state@time$F1845^0,c
  1405  000FB6                     l7137:
  1406                           
  1407                           ;time.c: 388:             if (isPressed() && KeGetGenericValue() != '*' && KeGetGenericV
      +                          alue() != '#' ){
  1408  000FB6  ECF1  F00F         	call	_isPressed	;wreg free
  1409  000FBA  0900               	iorlw	0
  1410  000FBC  B4D8               	btfsc	status,2,c
  1411  000FBE  0012               	return	
  1412  000FC0  EC8D  F00F         	call	_KeGetGenericValue	;wreg free
  1413  000FC4  0A2A               	xorlw	42
  1414  000FC6  B4D8               	btfsc	status,2,c
  1415  000FC8  0012               	return	
  1416  000FCA  EC8D  F00F         	call	_KeGetGenericValue	;wreg free
  1417  000FCE  0A23               	xorlw	35
  1418  000FD0  B4D8               	btfsc	status,2,c
  1419  000FD2  0012               	return	
  1420                           
  1421                           ;time.c: 389:                 minute = (KeGetGenericValue()-'0')*10;
  1422  000FD4  EC8D  F00F         	call	_KeGetGenericValue	;wreg free
  1423  000FD8  0FD0               	addlw	208
  1424  000FDA  0D0A               	mullw	10
  1425  000FDC  CFF3 F077          	movff	prodl,_minute
  1426                           
  1427                           ;time.c: 390:                 LcPutChar(KeGetGenericValue());
  1428  000FE0  EC8D  F00F         	call	_KeGetGenericValue	;wreg free
  1429  000FE4  ECE8  F00E         	call	_LcPutChar
  1430                           
  1431                           ;time.c: 391:                 state = 26;
  1432  000FE8  0E1A               	movlw	26
  1433  000FEA  6E13               	movwf	_state@time$F1845^0,c
  1434  000FEC  0C1A               	retlw	26
  1435  000FEE                     l7149:
  1436                           
  1437                           ;time.c: 395:             if (isPressed() && KeGetGenericValue() != '*' && KeGetGenericV
      +                          alue() != '#' ){
  1438  000FEE  ECF1  F00F         	call	_isPressed	;wreg free
  1439  000FF2  0900               	iorlw	0
  1440  000FF4  B4D8               	btfsc	status,2,c
  1441  000FF6  0012               	return	
  1442  000FF8  EC8D  F00F         	call	_KeGetGenericValue	;wreg free
  1443  000FFC  0A2A               	xorlw	42
  1444  000FFE  B4D8               	btfsc	status,2,c
  1445  001000  0012               	return	
  1446  001002  EC8D  F00F         	call	_KeGetGenericValue	;wreg free
  1447  001006  0A23               	xorlw	35
  1448  001008  B4D8               	btfsc	status,2,c
  1449  00100A  0012               	return	
  1450                           
  1451                           ;time.c: 396:                 minute +=KeGetGenericValue()-'0';
  1452  00100C  EC8D  F00F         	call	_KeGetGenericValue	;wreg free
  1453  001010  0FD0               	addlw	208
  1454  001012  2677               	addwf	_minute^0,f,c
  1455                           
  1456                           ;time.c: 397:                 LcPutChar(KeGetGenericValue());
  1457  001014  EC8D  F00F         	call	_KeGetGenericValue	;wreg free
  1458  001018  ECE8  F00E         	call	_LcPutChar
  1459                           
  1460                           ;time.c: 398:                 LcPutChar(':');
  1461  00101C  0E3A               	movlw	58
  1462  00101E  ECE8  F00E         	call	_LcPutChar
  1463                           
  1464                           ;time.c: 399:                 state = 27;
  1465  001022  0E1B               	movlw	27
  1466  001024  6E13               	movwf	_state@time$F1845^0,c
  1467  001026  0C1B               	retlw	27
  1468  001028                     l7163:
  1469                           
  1470                           ;time.c: 403:             if (isPressed() && KeGetGenericValue() != '*' && KeGetGenericV
      +                          alue() != '#' ){
  1471  001028  ECF1  F00F         	call	_isPressed	;wreg free
  1472  00102C  0900               	iorlw	0
  1473  00102E  B4D8               	btfsc	status,2,c
  1474  001030  0012               	return	
  1475  001032  EC8D  F00F         	call	_KeGetGenericValue	;wreg free
  1476  001036  0A2A               	xorlw	42
  1477  001038  B4D8               	btfsc	status,2,c
  1478  00103A  0012               	return	
  1479  00103C  EC8D  F00F         	call	_KeGetGenericValue	;wreg free
  1480  001040  0A23               	xorlw	35
  1481  001042  B4D8               	btfsc	status,2,c
  1482  001044  0012               	return	
  1483                           
  1484                           ;time.c: 404:                 second = (KeGetGenericValue()-'0')*10;
  1485  001046  EC8D  F00F         	call	_KeGetGenericValue	;wreg free
  1486  00104A  0FD0               	addlw	208
  1487  00104C  0D0A               	mullw	10
  1488  00104E  CFF3 F017          	movff	prodl,_second
  1489                           
  1490                           ;time.c: 405:                 LcPutChar(KeGetGenericValue());
  1491  001052  EC8D  F00F         	call	_KeGetGenericValue	;wreg free
  1492  001056  ECE8  F00E         	call	_LcPutChar
  1493                           
  1494                           ;time.c: 406:                 state = 28;
  1495  00105A  0E1C               	movlw	28
  1496  00105C  6E13               	movwf	_state@time$F1845^0,c
  1497  00105E  0C1C               	retlw	28
  1498  001060                     l7175:
  1499                           
  1500                           ;time.c: 410:             if (isPressed() && KeGetGenericValue() != '*' && KeGetGenericV
      +                          alue() != '#' ){
  1501  001060  ECF1  F00F         	call	_isPressed	;wreg free
  1502  001064  0900               	iorlw	0
  1503  001066  B4D8               	btfsc	status,2,c
  1504  001068  0012               	return	
  1505  00106A  EC8D  F00F         	call	_KeGetGenericValue	;wreg free
  1506  00106E  0A2A               	xorlw	42
  1507  001070  B4D8               	btfsc	status,2,c
  1508  001072  0012               	return	
  1509  001074  EC8D  F00F         	call	_KeGetGenericValue	;wreg free
  1510  001078  0A23               	xorlw	35
  1511  00107A  B4D8               	btfsc	status,2,c
  1512  00107C  0012               	return	
  1513                           
  1514                           ;time.c: 411:                 second += KeGetGenericValue()-'0';
  1515  00107E  EC8D  F00F         	call	_KeGetGenericValue	;wreg free
  1516  001082  0FD0               	addlw	208
  1517  001084  2617               	addwf	_second^0,f,c
  1518                           
  1519                           ;time.c: 412:                 LcPutChar(KeGetGenericValue());
  1520  001086  EC8D  F00F         	call	_KeGetGenericValue	;wreg free
  1521  00108A  ECE8  F00E         	call	_LcPutChar
  1522                           
  1523                           ;time.c: 413:                 state = 29;
  1524  00108E  0E1D               	movlw	29
  1525  001090  6E13               	movwf	_state@time$F1845^0,c
  1526  001092  0C1D               	retlw	29
  1527  001094                     l7187:
  1528                           
  1529                           ;time.c: 417:             if (isPressed() && KeGetGenericValue() == '#'){
  1530  001094  ECF1  F00F         	call	_isPressed	;wreg free
  1531  001098  0900               	iorlw	0
  1532  00109A  B4D8               	btfsc	status,2,c
  1533  00109C  0012               	return	
  1534  00109E  EC8D  F00F         	call	_KeGetGenericValue	;wreg free
  1535  0010A2  0A23               	xorlw	35
  1536  0010A4  A4D8               	btfss	status,2,c
  1537  0010A6  0012               	return	
  1538                           
  1539                           ;time.c: 418:                 seconds = second;
  1540  0010A8  C017  F018         	movff	_second,_seconds
  1541                           
  1542                           ;time.c: 419:                 minutes = minute;
  1543  0010AC  C077  F078         	movff	_minute,_minutes
  1544                           
  1545                           ;time.c: 420:                 state = 0;
  1546  0010B0  6A13               	clrf	_state@time$F1845^0,c
  1547  0010B2  0012               	return	
  1548  0010B4                     l7193:
  1549                           
  1550                           ;time.c: 425:             LcPutChar(sysMinute/10+'0');
  1551  0010B4  0E0A               	movlw	10
  1552  0010B6  6E5E               	movwf	___lbdiv@divisor^0,c
  1553  0010B8  5015               	movf	_sysMinute^0,w,c
  1554  0010BA  EC74  F00E         	call	___lbdiv
  1555  0010BE  0F30               	addlw	48
  1556  0010C0  ECE8  F00E         	call	_LcPutChar
  1557                           
  1558                           ;time.c: 426:             state = 31;
  1559  0010C4  0E1F               	movlw	31
  1560  0010C6  6E13               	movwf	_state@time$F1845^0,c
  1561                           
  1562                           ;time.c: 427:             break;
  1563  0010C8  0C1F               	retlw	31
  1564  0010CA                     l7197:
  1565                           
  1566                           ;time.c: 430:             LcPutChar(sysMinute%10+'0');
  1567  0010CA  0E0A               	movlw	10
  1568  0010CC  6E5E               	movwf	___lbmod@divisor^0,c
  1569  0010CE  5015               	movf	_sysMinute^0,w,c
  1570  0010D0  EC11  F00F         	call	___lbmod
  1571  0010D4  0F30               	addlw	48
  1572  0010D6  ECE8  F00E         	call	_LcPutChar
  1573                           
  1574                           ;time.c: 431:             state = 32;
  1575  0010DA  0E20               	movlw	32
  1576  0010DC  6E13               	movwf	_state@time$F1845^0,c
  1577                           
  1578                           ;time.c: 432:             break;
  1579  0010DE  0C20               	retlw	32
  1580  0010E0                     l7201:
  1581                           
  1582                           ;time.c: 435:             LcPutChar(':');
  1583  0010E0  0E3A               	movlw	58
  1584  0010E2  ECE8  F00E         	call	_LcPutChar
  1585                           
  1586                           ;time.c: 436:             state = 33;
  1587  0010E6  0E21               	movlw	33
  1588  0010E8  6E13               	movwf	_state@time$F1845^0,c
  1589                           
  1590                           ;time.c: 437:             break;
  1591  0010EA  0C21               	retlw	33
  1592  0010EC                     l7205:
  1593                           
  1594                           ;time.c: 440:             LcPutChar(sysSecond/10+'0');
  1595  0010EC  0E0A               	movlw	10
  1596  0010EE  6E5E               	movwf	___lbdiv@divisor^0,c
  1597  0010F0  5016               	movf	_sysSecond^0,w,c
  1598  0010F2  EC74  F00E         	call	___lbdiv
  1599  0010F6  0F30               	addlw	48
  1600  0010F8  ECE8  F00E         	call	_LcPutChar
  1601                           
  1602                           ;time.c: 441:             state = 34;
  1603  0010FC  0E22               	movlw	34
  1604  0010FE  6E13               	movwf	_state@time$F1845^0,c
  1605                           
  1606                           ;time.c: 442:             break;
  1607  001100  0C22               	retlw	34
  1608  001102                     l7209:
  1609                           
  1610                           ;time.c: 445:             LcPutChar(sysSecond%10+'0');
  1611  001102  0E0A               	movlw	10
  1612  001104  6E5E               	movwf	___lbmod@divisor^0,c
  1613  001106  5016               	movf	_sysSecond^0,w,c
  1614  001108  EC11  F00F         	call	___lbmod
  1615  00110C  0F30               	addlw	48
  1616  00110E  ECE8  F00E         	call	_LcPutChar
  1617                           
  1618                           ;time.c: 446:             state = 35;
  1619  001112  0E23               	movlw	35
  1620  001114  6E13               	movwf	_state@time$F1845^0,c
  1621                           
  1622                           ;time.c: 447:             break;
  1623  001116  0C23               	retlw	35
  1624  001118                     l7213:
  1625                           
  1626                           ;time.c: 449:             if (TiGetTics(timer) >= 1200){
  1627  001118  5014               	movf	_timer@time$F1844^0,w,c
  1628  00111A  EC24  F00F         	call	_TiGetTics
  1629  00111E  BE5F               	btfsc	(?_TiGetTics+1)^0,7,c
  1630  001120  0012               	return	
  1631  001122  D851               	call	PL28	;call to abstracted procedure
  1632  001124  A0D8               	btfss	status,0,c
  1633  001126  0012               	return	
  1634                           
  1635                           ;time.c: 450:                 TiResetTics(timer);
  1636  001128  5014               	movf	_timer@time$F1844^0,w,c
  1637  00112A  ECAD  F00F         	call	_TiResetTics
  1638                           
  1639                           ;time.c: 451:                 updateSysTime();
  1640  00112E  EC44  F000         	call	_updateSysTime	;wreg free
  1641                           
  1642                           ;time.c: 452:                 state = 30;
  1643  001132  0E1E               	movlw	30
  1644                           
  1645                           ;time.c: 453:                 LcGotoXY(0,1);
  1646  001134  D84D               	call	PL58	;call to abstracted procedure
  1647  001136  EFA6  F00E         	goto	_LcGotoXY
  1648  00113A                     l7225:
  1649  00113A  5013               	movf	_state@time$F1845^0,w,c
  1650  00113C  6E6D               	movwf	??_timeMotor^0,c
  1651  00113E  6A6E               	clrf	(??_timeMotor+1)^0,c
  1652                           
  1653                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1654                           ; Switch size 1, requested type "space"
  1655                           ; Number of cases is 1, Range of values is 0 to 0
  1656                           ; switch strategies available:
  1657                           ; Name         Instructions Cycles
  1658                           ; simple_byte            4     3 (average)
  1659                           ;	Chosen strategy is simple_byte
  1660  001140  506E               	movf	(??_timeMotor+1)^0,w,c
  1661  001142  A4D8               	btfss	status,2,c
  1662  001144  0012               	return	
  1663                           
  1664                           ; Switch size 1, requested type "space"
  1665                           ; Number of cases is 23, Range of values is 0 to 35
  1666                           ; switch strategies available:
  1667                           ; Name         Instructions Cycles
  1668                           ; simple_byte           70    36 (average)
  1669                           ;	Chosen strategy is simple_byte
  1670  001146  506D               	movf	??_timeMotor^0,w,c
  1671  001148  E101 D699          	bz	l7053
  1672  00114C  0A01               	xorlw	1	; case 1
  1673  00114E  E101 D6A3          	bz	l7059
  1674  001152  0A03               	xorlw	3	; case 2
  1675  001154  E101 D6B3          	bz	l7071
  1676  001158  0A01               	xorlw	1	; case 3
  1677  00115A  E101 D6BF          	bz	l7079
  1678  00115E  0A07               	xorlw	7	; case 4
  1679  001160  E101 D6CB          	bz	l7087
  1680  001164  0A01               	xorlw	1	; case 5
  1681  001166  E101 D6D5          	bz	l7095
  1682  00116A  0A03               	xorlw	3	; case 6
  1683  00116C  E101 D6E1          	bz	l7103
  1684  001170  0A12               	xorlw	18	; case 20
  1685  001172  E101 D6ED          	bz	l7111
  1686  001176  0A01               	xorlw	1	; case 21
  1687  001178  E101 D6F3          	bz	l7115
  1688  00117C  0A03               	xorlw	3	; case 22
  1689  00117E  E101 D6F9          	bz	l7119
  1690  001182  0A01               	xorlw	1	; case 23
  1691  001184  E101 D6FC          	bz	l7123
  1692  001188  0A0F               	xorlw	15	; case 24
  1693  00118A  E101 D702          	bz	l7127
  1694  00118E  0A01               	xorlw	1	; case 25
  1695  001190  E101 D711          	bz	l7137
  1696  001194  0A03               	xorlw	3	; case 26
  1697  001196  E101 D72A          	bz	l7149
  1698  00119A  0A01               	xorlw	1	; case 27
  1699  00119C  E101 D744          	bz	l7163
  1700  0011A0  0A07               	xorlw	7	; case 28
  1701  0011A2  E101 D75D          	bz	l7175
  1702  0011A6  0A01               	xorlw	1	; case 29
  1703  0011A8  E101 D774          	bz	l7187
  1704  0011AC  0A03               	xorlw	3	; case 30
  1705  0011AE  E082               	bz	l7193
  1706  0011B0  0A01               	xorlw	1	; case 31
  1707  0011B2  E08B               	bz	l7197
  1708  0011B4  0A3F               	xorlw	63	; case 32
  1709  0011B6  E094               	bz	l7201
  1710  0011B8  0A01               	xorlw	1	; case 33
  1711  0011BA  E098               	bz	l7205
  1712  0011BC  0A03               	xorlw	3	; case 34
  1713  0011BE  E0A1               	bz	l7209
  1714  0011C0  0A01               	xorlw	1	; case 35
  1715  0011C2  E0AA               	bz	l7213
  1716  0011C4  0012               	return		;funcret
  1717  0011C6                     __end_of_timeMotor:
  1718                           	callstack 0
  1719  0011C6                     PL28:
  1720                           	callstack 27
  1721  0011C6  0EB0               	movlw	176
  1722  0011C8  5C5E               	subwf	?_TiGetTics^0,w,c
  1723  0011CA  0E04               	movlw	4
  1724  0011CC  585F               	subwfb	(?_TiGetTics+1)^0,w,c
  1725  0011CE  0012               	return	
  1726  0011D0                     __end_ofPL28:
  1727                           	callstack 0
  1728  0011D0                     PL58:
  1729                           	callstack 23
  1730  0011D0  6E13               	movwf	_state@time$F1845^0,c
  1731  0011D2  0E01               	movlw	1
  1732  0011D4  6E66               	movwf	LcGotoXY@Row^0,c
  1733  0011D6  0C00               	retlw	0
  1734  0011D8                     __end_ofPL58:
  1735                           	callstack 0
  1736  0011D8                     PL60:
  1737                           	callstack 24
  1738  0011D8  0E01               	movlw	1
  1739  0011DA  6E66               	movwf	LcGotoXY@Row^0,c
  1740  0011DC  0C00               	retlw	0
  1741  0011DE                     __end_ofPL60:
  1742                           	callstack 0
  1743  0011DE                     PL82:
  1744                           	callstack 23
  1745  0011DE  0E0A               	movlw	10
  1746  0011E0  6E5E               	movwf	___lbmod@divisor^0,c
  1747  0011E2  5077               	movf	_minute^0,w,c
  1748  0011E4  0012               	return	
  1749  0011E6                     __end_ofPL82:
  1750                           	callstack 0
  1751  0011E6                     PL84:
  1752                           	callstack 23
  1753  0011E6  0E0A               	movlw	10
  1754  0011E8  6E5E               	movwf	___lbdiv@divisor^0,c
  1755  0011EA  5017               	movf	_second^0,w,c
  1756  0011EC  0012               	return	
  1757  0011EE                     __end_ofPL84:
  1758                           	callstack 0
  1759  0011EE                     PL90:
  1760                           	callstack 23
  1761  0011EE  0E0A               	movlw	10
  1762  0011F0  6E5E               	movwf	___lbdiv@divisor^0,c
  1763  0011F2  5077               	movf	_minute^0,w,c
  1764  0011F4  0012               	return	
  1765  0011F6                     __end_ofPL90:
  1766                           	callstack 0
  1767  0011F6                     PL96:
  1768                           	callstack 23
  1769  0011F6  0E0A               	movlw	10
  1770  0011F8  6E5E               	movwf	___lbmod@divisor^0,c
  1771  0011FA  5017               	movf	_second^0,w,c
  1772  0011FC  0012               	return	
  1773  0011FE                     __end_ofPL96:
  1774                           	callstack 0
  1775                           
  1776 ;; *************** function _updateSysTime *****************
  1777 ;; Defined at:
  1778 ;;		line 492 in file "time.c"
  1779 ;; Parameters:    Size  Location     Type
  1780 ;;		None
  1781 ;; Auto vars:     Size  Location     Type
  1782 ;;		None
  1783 ;; Return value:  Size  Location     Type
  1784 ;;                  1    wreg      void 
  1785 ;; Registers used:
  1786 ;;		wreg, status,2, status,0
  1787 ;; Tracked objects:
  1788 ;;		On entry : 0/0
  1789 ;;		On exit  : 0/0
  1790 ;;		Unchanged: 0/0
  1791 ;; Data sizes:     COMRAM   BANK0   BANK1
  1792 ;;      Params:         0       0       0
  1793 ;;      Locals:         0       0       0
  1794 ;;      Temps:          0       0       0
  1795 ;;      Totals:         0       0       0
  1796 ;;Total ram usage:        0 bytes
  1797 ;; Hardware stack levels used: 1
  1798 ;; Hardware stack levels required when called: 2
  1799 ;; This function calls:
  1800 ;;		Nothing
  1801 ;; This function is called by:
  1802 ;;		_timeMotor
  1803 ;; This function uses a non-reentrant model
  1804 ;;
  1805                           
  1806                           	psect	text2
  1807  000088                     __ptext2:
  1808                           	callstack 0
  1809  000088                     _updateSysTime:
  1810                           	callstack 27
  1811                           
  1812                           ;time.c: 493:     if (sysSecond == 59){
  1813                           
  1814                           ;incstack = 0
  1815  000088  0E3B               	movlw	59
  1816  00008A  1816               	xorwf	_sysSecond^0,w,c
  1817  00008C  E103               	bnz	l2357
  1818                           
  1819                           ;time.c: 494:         sysSecond = 0;
  1820  00008E  6A16               	clrf	_sysSecond^0,c
  1821                           
  1822                           ;time.c: 495:         sysMinute++;
  1823  000090  2A15               	incf	_sysMinute^0,f,c
  1824                           
  1825                           ;time.c: 496:     } else {
  1826  000092  0012               	return	
  1827  000094                     l2357:
  1828                           
  1829                           ;time.c: 497:         sysSecond++;
  1830  000094  2A16               	incf	_sysSecond^0,f,c
  1831  000096  0012               	return		;funcret
  1832  000098                     __end_of_updateSysTime:
  1833                           	callstack 0
  1834                           
  1835 ;; *************** function _updateGameTime *****************
  1836 ;; Defined at:
  1837 ;;		line 480 in file "time.c"
  1838 ;; Parameters:    Size  Location     Type
  1839 ;;		None
  1840 ;; Auto vars:     Size  Location     Type
  1841 ;;		None
  1842 ;; Return value:  Size  Location     Type
  1843 ;;                  1    wreg      void 
  1844 ;; Registers used:
  1845 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1846 ;; Tracked objects:
  1847 ;;		On entry : 0/0
  1848 ;;		On exit  : 0/0
  1849 ;;		Unchanged: 0/0
  1850 ;; Data sizes:     COMRAM   BANK0   BANK1
  1851 ;;      Params:         0       0       0
  1852 ;;      Locals:         0       0       0
  1853 ;;      Temps:          0       0       0
  1854 ;;      Totals:         0       0       0
  1855 ;;Total ram usage:        0 bytes
  1856 ;; Hardware stack levels used: 1
  1857 ;; Hardware stack levels required when called: 4
  1858 ;; This function calls:
  1859 ;;		_startSong
  1860 ;; This function is called by:
  1861 ;;		_timeMotor
  1862 ;; This function uses a non-reentrant model
  1863 ;;
  1864                           
  1865                           	psect	text3
  1866  001F96                     __ptext3:
  1867                           	callstack 0
  1868  001F96                     _updateGameTime:
  1869                           	callstack 25
  1870                           
  1871                           ;time.c: 481:     if (second == 0){
  1872                           
  1873                           ;incstack = 0
  1874  001F96  5017               	movf	_second^0,w,c
  1875  001F98  E109               	bnz	l6085
  1876                           
  1877                           ;time.c: 482:         second = 59;
  1878  001F9A  0E3B               	movlw	59
  1879  001F9C  6E17               	movwf	_second^0,c
  1880                           
  1881                           ;time.c: 483:         minute--;
  1882  001F9E  0677               	decf	_minute^0,f,c
  1883                           
  1884                           ;time.c: 484:         startSong();
  1885  001FA0  EC5B  F000         	call	_startSong	;wreg free
  1886                           
  1887                           ;time.c: 485:         if (minute == 0){
  1888  001FA4  5077               	movf	_minute^0,w,c
  1889  001FA6  B4D8               	btfsc	status,2,c
  1890                           
  1891                           ;time.c: 486:             state = 0;
  1892  001FA8  6A13               	clrf	_state@time$F1845^0,c
  1893  001FAA  0012               	return	
  1894  001FAC                     l6085:
  1895                           
  1896                           ;time.c: 489:         second--;
  1897  001FAC  0617               	decf	_second^0,f,c
  1898  001FAE  0012               	return		;funcret
  1899  001FB0                     __end_of_updateGameTime:
  1900                           	callstack 0
  1901                           
  1902 ;; *************** function _startSong *****************
  1903 ;; Defined at:
  1904 ;;		line 62 in file "Audio.c"
  1905 ;; Parameters:    Size  Location     Type
  1906 ;;		None
  1907 ;; Auto vars:     Size  Location     Type
  1908 ;;		None
  1909 ;; Return value:  Size  Location     Type
  1910 ;;                  1    wreg      void 
  1911 ;; Registers used:
  1912 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1913 ;; Tracked objects:
  1914 ;;		On entry : 0/0
  1915 ;;		On exit  : 0/0
  1916 ;;		Unchanged: 0/0
  1917 ;; Data sizes:     COMRAM   BANK0   BANK1
  1918 ;;      Params:         0       0       0
  1919 ;;      Locals:         0       0       0
  1920 ;;      Temps:          0       0       0
  1921 ;;      Totals:         0       0       0
  1922 ;;Total ram usage:        0 bytes
  1923 ;; Hardware stack levels used: 1
  1924 ;; Hardware stack levels required when called: 3
  1925 ;; This function calls:
  1926 ;;		_TiResetTics
  1927 ;; This function is called by:
  1928 ;;		_updateGameTime
  1929 ;; This function uses a non-reentrant model
  1930 ;;
  1931                           
  1932                           	psect	text4
  1933  0000B6                     __ptext4:
  1934                           	callstack 0
  1935  0000B6                     _startSong:
  1936                           	callstack 25
  1937                           
  1938                           ;Audio.c: 63:     TiResetTics(periodTimer);
  1939                           
  1940                           ;incstack = 0
  1941  0000B6  5038               	movf	_periodTimer^0,w,c
  1942  0000B8  ECAD  F00F         	call	_TiResetTics
  1943                           
  1944                           ;Audio.c: 64:     state = 1;
  1945  0000BC  0E01               	movlw	1
  1946  0000BE  6E39               	movwf	_state@Audio$F967^0,c
  1947  0000C0  0C01               	retlw	1	;funcret
  1948  0000C2                     __end_of_startSong:
  1949                           	callstack 0
  1950                           
  1951 ;; *************** function _sendChar *****************
  1952 ;; Defined at:
  1953 ;;		line 510 in file "time.c"
  1954 ;; Parameters:    Size  Location     Type
  1955 ;;  bt              1    wreg     unsigned char 
  1956 ;; Auto vars:     Size  Location     Type
  1957 ;;  bt              1   19[COMRAM] unsigned char 
  1958 ;; Return value:  Size  Location     Type
  1959 ;;                  1    wreg      void 
  1960 ;; Registers used:
  1961 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1962 ;; Tracked objects:
  1963 ;;		On entry : 0/0
  1964 ;;		On exit  : 0/0
  1965 ;;		Unchanged: 0/0
  1966 ;; Data sizes:     COMRAM   BANK0   BANK1
  1967 ;;      Params:         0       0       0
  1968 ;;      Locals:         1       0       0
  1969 ;;      Temps:          0       0       0
  1970 ;;      Totals:         1       0       0
  1971 ;;Total ram usage:        1 bytes
  1972 ;; Hardware stack levels used: 1
  1973 ;; Hardware stack levels required when called: 6
  1974 ;; This function calls:
  1975 ;;		_LcPutChar
  1976 ;;		_btSendByte
  1977 ;; This function is called by:
  1978 ;;		_timeMotor
  1979 ;; This function uses a non-reentrant model
  1980 ;;
  1981                           
  1982                           	psect	text5
  1983  001FCA                     __ptext5:
  1984                           	callstack 0
  1985  001FCA                     _sendChar:
  1986                           	callstack 23
  1987                           
  1988                           ;incstack = 0
  1989                           ;sendChar@bt stored from wreg
  1990  001FCA  6E6C               	movwf	sendChar@bt^0,c
  1991                           
  1992                           ;time.c: 511:     LcPutChar(val+'0');
  1993  001FCC  5011               	movf	_val@time$F1847^0,w,c
  1994  001FCE  0F30               	addlw	48
  1995  001FD0  ECE8  F00E         	call	_LcPutChar
  1996                           
  1997                           ;time.c: 512:     if (bt){
  1998  001FD4  506C               	movf	sendChar@bt^0,w,c
  1999  001FD6  B4D8               	btfsc	status,2,c
  2000  001FD8  0012               	return	
  2001                           
  2002                           ;time.c: 513:         btSendByte(val+'0');
  2003  001FDA  5011               	movf	_val@time$F1847^0,w,c
  2004  001FDC  0F30               	addlw	48
  2005  001FDE  EF61  F000         	goto	_btSendByte
  2006  001FE2                     __end_of_sendChar:
  2007                           	callstack 0
  2008                           
  2009 ;; *************** function _btSendByte *****************
  2010 ;; Defined at:
  2011 ;;		line 121 in file "SIO.c"
  2012 ;; Parameters:    Size  Location     Type
  2013 ;;  byte            1    wreg     unsigned char 
  2014 ;; Auto vars:     Size  Location     Type
  2015 ;;  byte            1    5[COMRAM] unsigned char 
  2016 ;; Return value:  Size  Location     Type
  2017 ;;                  1    wreg      void 
  2018 ;; Registers used:
  2019 ;;		wreg, status,2
  2020 ;; Tracked objects:
  2021 ;;		On entry : 0/0
  2022 ;;		On exit  : 0/0
  2023 ;;		Unchanged: 0/0
  2024 ;; Data sizes:     COMRAM   BANK0   BANK1
  2025 ;;      Params:         0       0       0
  2026 ;;      Locals:         1       0       0
  2027 ;;      Temps:          0       0       0
  2028 ;;      Totals:         1       0       0
  2029 ;;Total ram usage:        1 bytes
  2030 ;; Hardware stack levels used: 1
  2031 ;; Hardware stack levels required when called: 2
  2032 ;; This function calls:
  2033 ;;		Nothing
  2034 ;; This function is called by:
  2035 ;;		_sendChar
  2036 ;; This function uses a non-reentrant model
  2037 ;;
  2038                           
  2039                           	psect	text6
  2040  0000C2                     __ptext6:
  2041                           	callstack 0
  2042  0000C2                     _btSendByte:
  2043                           	callstack 26
  2044                           
  2045                           ;incstack = 0
  2046                           ;btSendByte@byte stored from wreg
  2047  0000C2  6E5E               	movwf	btSendByte@byte^0,c
  2048                           
  2049                           ;SIO.c: 122:     stateTX = 1;
  2050  0000C4  0E01               	movlw	1
  2051  0000C6  6E24               	movwf	_stateTX^0,c
  2052                           
  2053                           ;SIO.c: 123:     dataTX = byte;
  2054  0000C8  C05E  F022         	movff	btSendByte@byte,_dataTX
  2055  0000CC  0C01               	retlw	1	;funcret
  2056  0000CE                     __end_of_btSendByte:
  2057                           	callstack 0
  2058                           
  2059 ;; *************** function _btAvailable *****************
  2060 ;; Defined at:
  2061 ;;		line 118 in file "SIO.c"
  2062 ;; Parameters:    Size  Location     Type
  2063 ;;		None
  2064 ;; Auto vars:     Size  Location     Type
  2065 ;;		None
  2066 ;; Return value:  Size  Location     Type
  2067 ;;                  1    wreg      unsigned char 
  2068 ;; Registers used:
  2069 ;;		wreg, status,2
  2070 ;; Tracked objects:
  2071 ;;		On entry : 0/0
  2072 ;;		On exit  : 0/0
  2073 ;;		Unchanged: 0/0
  2074 ;; Data sizes:     COMRAM   BANK0   BANK1
  2075 ;;      Params:         0       0       0
  2076 ;;      Locals:         0       0       0
  2077 ;;      Temps:          0       0       0
  2078 ;;      Totals:         0       0       0
  2079 ;;Total ram usage:        0 bytes
  2080 ;; Hardware stack levels used: 1
  2081 ;; Hardware stack levels required when called: 2
  2082 ;; This function calls:
  2083 ;;		Nothing
  2084 ;; This function is called by:
  2085 ;;		_timeMotor
  2086 ;; This function uses a non-reentrant model
  2087 ;;
  2088                           
  2089                           	psect	text7
  2090  000126                     __ptext7:
  2091                           	callstack 0
  2092  000126                     _btAvailable:
  2093                           	callstack 27
  2094                           
  2095                           ;SIO.c: 119:     return stateTX == 0;
  2096                           
  2097                           ;incstack = 0
  2098  000126  5024               	movf	_stateTX^0,w,c
  2099  000128  B4D8               	btfsc	status,2,c
  2100  00012A  0C01               	retlw	1
  2101  00012C  0C00               	retlw	0	;funcret
  2102  00012E                     __end_of_btAvailable:
  2103                           	callstack 0
  2104                           
  2105 ;; *************** function _menuMotor *****************
  2106 ;; Defined at:
  2107 ;;		line 39 in file "Menu.c"
  2108 ;; Parameters:    Size  Location     Type
  2109 ;;		None
  2110 ;; Auto vars:     Size  Location     Type
  2111 ;;		None
  2112 ;; Return value:  Size  Location     Type
  2113 ;;                  1    wreg      void 
  2114 ;; Registers used:
  2115 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2116 ;; Tracked objects:
  2117 ;;		On entry : 0/0
  2118 ;;		On exit  : 0/0
  2119 ;;		Unchanged: 0/0
  2120 ;; Data sizes:     COMRAM   BANK0   BANK1
  2121 ;;      Params:         0       0       0
  2122 ;;      Locals:         0       0       0
  2123 ;;      Temps:          2       0       0
  2124 ;;      Totals:         2       0       0
  2125 ;;Total ram usage:        2 bytes
  2126 ;; Hardware stack levels used: 1
  2127 ;; Hardware stack levels required when called: 7
  2128 ;; This function calls:
  2129 ;;		_CantaIR
  2130 ;;		_DaFindUser
  2131 ;;		_DaGetIdle
  2132 ;;		_DaGetNumScores
  2133 ;;		_DaGetStatus
  2134 ;;		_DaSaveScore
  2135 ;;		_DaSaveUser
  2136 ;;		_JoDirection
  2137 ;;		_JoMoved
  2138 ;;		_JoSetMode
  2139 ;;		_KeGetCharValue
  2140 ;;		_KeGetGenericValue
  2141 ;;		_KeSetMode
  2142 ;;		_LcCursorOff
  2143 ;;		_LcCursorOn
  2144 ;;		_LcGotoXY
  2145 ;;		_LcPutChar
  2146 ;;		_SiIsAvailable
  2147 ;;		_SiReadByte
  2148 ;;		_SiRecievedByte
  2149 ;;		_SiSendChar
  2150 ;;		_TiGetTics
  2151 ;;		_TiResetTics
  2152 ;;		___lbdiv
  2153 ;;		___lbmod
  2154 ;;		_displayError
  2155 ;;		_displayLogOut
  2156 ;;		_displayResults
  2157 ;;		_displayScoresMarquee
  2158 ;;		_displayString
  2159 ;;		_displaySysTime
  2160 ;;		_displayTimeRemaining
  2161 ;;		_getPresses
  2162 ;;		_incrementPosition
  2163 ;;		_isPressed
  2164 ;;		_mainMenu
  2165 ;;		_modifyTime
  2166 ;;		_resetDisplay
  2167 ;;		_resetPosition
  2168 ;;		_resetTimer
  2169 ;;		_startTimer
  2170 ;;		_stopTimer
  2171 ;;		_timerOver
  2172 ;; This function is called by:
  2173 ;;		_main
  2174 ;; This function uses a non-reentrant model
  2175 ;;
  2176                           
  2177                           	psect	text8
  2178  0002D0                     __ptext8:
  2179                           	callstack 0
  2180  0002D0                     _menuMotor:
  2181                           	callstack 23
  2182                           
  2183                           ;Menu.c: 40:     static char state = 1;;Menu.c: 41:     switch (state){
  2184                           
  2185                           ;incstack = 0
  2186  0002D0  D2D6               	goto	l6811
  2187  0002D2                     l6329:
  2188                           
  2189                           ;Menu.c: 43:             mUser.username[pos] = '\0';
  2190  0002D2  DB49               	call	PL44	;call to abstracted procedure
  2191  0002D4  6ADF               	clrf	indf2,c
  2192                           
  2193                           ;Menu.c: 44:             mUser.password[pos] = '\0';
  2194  0002D6  DB4C               	call	PL48	;call to abstracted procedure
  2195  0002D8  6ADF               	clrf	indf2,c
  2196                           
  2197                           ;Menu.c: 45:             pos++;
  2198  0002DA  2A30               	incf	_pos^0,f,c
  2199                           
  2200                           ;Menu.c: 46:             if (val == 9){
  2201  0002DC  0E09               	movlw	9
  2202  0002DE  1831               	xorwf	_val^0,w,c
  2203  0002E0  E105               	bnz	l6341
  2204                           
  2205                           ;Menu.c: 47:                 state = 1;
  2206  0002E2  0E01               	movlw	1
  2207  0002E4  6E79               	movwf	menuMotor@state^0,c
  2208                           
  2209                           ;Menu.c: 48:                 resetDisplay();
  2210  0002E6  EC71  F000         	call	_resetDisplay	;wreg free
  2211                           
  2212                           ;Menu.c: 49:                 pos = 0;
  2213  0002EA  6A30               	clrf	_pos^0,c
  2214  0002EC                     l6341:
  2215                           
  2216                           ;Menu.c: 52:             displayString(&LOGINMENU[LCDrow]);
  2217  0002EC  5034               	movf	_LCDrow^0,w,c
  2218  0002EE  0D0B               	mullw	11
  2219  0002F0  50F3               	movf	243,w,c
  2220  0002F2  0FA8               	addlw	low _LOGINMENU
  2221  0002F4  6E6C               	movwf	displayString@string^0,c
  2222  0002F6  ECD3  F00E         	call	_displayString	;wreg free
  2223                           
  2224                           ;Menu.c: 53:             if (LCDrow == 2){
  2225  0002FA  0E02               	movlw	2
  2226  0002FC  1834               	xorwf	_LCDrow^0,w,c
  2227  0002FE  A4D8               	btfss	status,2,c
  2228  000300  0012               	return	
  2229                           
  2230                           ;Menu.c: 54:                 LcCursorOff();
  2231  000302  EC80  F000         	call	_LcCursorOff	;wreg free
  2232                           
  2233                           ;Menu.c: 55:                 KeSetMode(0);
  2234  000306  0E00               	movlw	0
  2235  000308  EC37  F00F         	call	_KeSetMode
  2236                           
  2237                           ;Menu.c: 56:                 state = 2;
  2238  00030C  0E02               	movlw	2
  2239  00030E  6E79               	movwf	menuMotor@state^0,c
  2240                           
  2241                           ;Menu.c: 58:             break;
  2242                           
  2243                           ;Menu.c: 57:             }
  2244  000310  0C02               	retlw	2
  2245  000312                     l6349:
  2246                           
  2247                           ;Menu.c: 60:             if (isPressed()){
  2248  000312  ECF1  F00F         	call	_isPressed	;wreg free
  2249  000316  0900               	iorlw	0
  2250  000318  B4D8               	btfsc	status,2,c
  2251  00031A  0012               	return	
  2252                           
  2253                           ;Menu.c: 61:                 val = KeGetGenericValue() - '0';
  2254  00031C  EC8D  F00F         	call	_KeGetGenericValue	;wreg free
  2255  000320  0FD0               	addlw	208
  2256  000322  6E31               	movwf	_val^0,c
  2257                           
  2258                           ;Menu.c: 62:                 if (val == 1||val == 2){
  2259  000324  0431               	decf	_val^0,w,c
  2260  000326  E004               	bz	u5890
  2261  000328  0E02               	movlw	2
  2262  00032A  1831               	xorwf	_val^0,w,c
  2263  00032C  A4D8               	btfss	status,2,c
  2264  00032E  0012               	return	
  2265  000330                     u5890:
  2266                           
  2267                           ;Menu.c: 63:                     resetDisplay();
  2268  000330  EC71  F000         	call	_resetDisplay	;wreg free
  2269                           
  2270                           ;Menu.c: 64:                     KeSetMode(1);
  2271  000334  0E01               	movlw	1
  2272  000336  EC37  F00F         	call	_KeSetMode
  2273                           
  2274                           ;Menu.c: 65:                     state = 3;
  2275  00033A  0E03               	movlw	3
  2276  00033C  6E79               	movwf	menuMotor@state^0,c
  2277  00033E  0C03               	retlw	3
  2278  000340                     l6361:
  2279                           
  2280                           ;Menu.c: 71:             displayString(&LOGREGSCREEN[LCDrow]);
  2281  000340  5034               	movf	_LCDrow^0,w,c
  2282  000342  0D06               	mullw	6
  2283  000344  50F3               	movf	243,w,c
  2284  000346  0FE9               	addlw	low _LOGREGSCREEN
  2285  000348  6E6C               	movwf	displayString@string^0,c
  2286  00034A  ECD3  F00E         	call	_displayString	;wreg free
  2287                           
  2288                           ;Menu.c: 72:             if (LCDrow == 2){
  2289  00034E  0E02               	movlw	2
  2290  000350  1834               	xorwf	_LCDrow^0,w,c
  2291  000352  A4D8               	btfss	status,2,c
  2292  000354  0012               	return	
  2293                           
  2294                           ;Menu.c: 73:                 LCDrow = 0;
  2295  000356  6A34               	clrf	_LCDrow^0,c
  2296                           
  2297                           ;Menu.c: 74:                 LCDcol = 5;
  2298                           
  2299                           ;Menu.c: 75:                 LcGotoXY(LCDcol,LCDrow);
  2300  000358  DB10               	call	PL62	;call to abstracted procedure
  2301  00035A  ECA6  F00E         	call	_LcGotoXY
  2302                           
  2303                           ;Menu.c: 76:                 LcCursorOn();
  2304  00035E  EC7B  F000         	call	_LcCursorOn	;wreg free
  2305                           
  2306                           ;Menu.c: 77:                 state = 4;
  2307  000362  0E04               	movlw	4
  2308  000364  6E79               	movwf	menuMotor@state^0,c
  2309                           
  2310                           ;Menu.c: 78:                 pos = 0;
  2311  000366  6A30               	clrf	_pos^0,c
  2312  000368  0012               	return	
  2313  00036A                     l6375:
  2314                           
  2315                           ;Menu.c: 82:             if (LCDcol >= 12 && TiGetTics(timer) >= 1200){
  2316  00036A  0E0B               	movlw	11
  2317  00036C  6433               	cpfsgt	_LCDcol^0,c
  2318  00036E  D00B               	goto	l6381
  2319  000370  5035               	movf	_timer^0,w,c
  2320  000372  EC24  F00F         	call	_TiGetTics
  2321  000376  BE5F               	btfsc	(?_TiGetTics+1)^0,7,c
  2322  000378  D006               	goto	l6381
  2323  00037A  ECE3  F008         	call	PL28	;call to abstracted procedure
  2324  00037E  E303               	bnc	l6381
  2325  000380                     u5920:
  2326                           
  2327                           ;Menu.c: 83:                 state = 5;
  2328  000380  0E05               	movlw	5
  2329  000382  6E79               	movwf	menuMotor@state^0,c
  2330                           
  2331                           ;Menu.c: 84:             }else if (isPressed()){
  2332  000384  0C05               	retlw	5
  2333  000386                     l6381:
  2334  000386  ECF1  F00F         	call	_isPressed	;wreg free
  2335  00038A  0900               	iorlw	0
  2336  00038C  B4D8               	btfsc	status,2,c
  2337  00038E  0012               	return	
  2338                           
  2339                           ;Menu.c: 85:                 TiResetTics(timer);
  2340  000390  5035               	movf	_timer^0,w,c
  2341  000392  ECAD  F00F         	call	_TiResetTics
  2342                           
  2343                           ;Menu.c: 86:                 if (getPresses() == 2){
  2344  000396  ECC0  F000         	call	_getPresses	;wreg free
  2345  00039A  0A02               	xorlw	2
  2346  00039C  E104               	bnz	l6391
  2347                           
  2348                           ;Menu.c: 87:                     LcGotoXY(LCDcol,LCDrow);
  2349  00039E  DAF3               	call	PL66	;call to abstracted procedure
  2350  0003A0  ECA6  F00E         	call	_LcGotoXY
  2351                           
  2352                           ;Menu.c: 88:                     LCDcol--;
  2353  0003A4  0633               	decf	_LCDcol^0,f,c
  2354  0003A6                     l6391:
  2355                           
  2356                           ;Menu.c: 90:                 if (KeGetGenericValue() != '#'){
  2357  0003A6  EC8D  F00F         	call	_KeGetGenericValue	;wreg free
  2358  0003AA  0A23               	xorlw	35
  2359  0003AC  E0E9               	bz	u5920
  2360                           
  2361                           ;Menu.c: 91:                     mUser.username[pos] = KeGetCharValue();
  2362  0003AE  DADB               	call	PL44	;call to abstracted procedure
  2363  0003B0  ECA3  F000         	call	_KeGetCharValue	;wreg free
  2364  0003B4  6EDF               	movwf	indf2,c
  2365                           
  2366                           ;Menu.c: 92:                     LcPutChar(mUser.username[pos]);
  2367  0003B6  5030               	movf	_pos^0,w,c
  2368  0003B8  DAD1               	call	PL34	;call to abstracted procedure
  2369  0003BA  ECE8  F00E         	call	_LcPutChar
  2370  0003BE                     l6397:
  2371                           
  2372                           ;Menu.c: 93:                     LCDcol++;
  2373  0003BE  2A33               	incf	_LCDcol^0,f,c
  2374                           
  2375                           ;Menu.c: 94:                     pos++;
  2376  0003C0  2A30               	incf	_pos^0,f,c
  2377                           
  2378                           ;Menu.c: 97:                 } else {
  2379  0003C2  0012               	return	
  2380  0003C4                     l6403:
  2381                           
  2382                           ;Menu.c: 105:             mUser.username[pos] = '\0';
  2383  0003C4  DAD0               	call	PL44	;call to abstracted procedure
  2384  0003C6  0E00               	movlw	0
  2385  0003C8  6EDF               	movwf	indf2,c
  2386                           
  2387                           ;Menu.c: 106:             LCDrow = 1;
  2388  0003CA  0E01               	movlw	1
  2389  0003CC  6E34               	movwf	_LCDrow^0,c
  2390                           
  2391                           ;Menu.c: 107:             LCDcol = 5;
  2392                           
  2393                           ;Menu.c: 108:             LcGotoXY(LCDcol,LCDrow);
  2394  0003CE  DAD5               	call	PL62	;call to abstracted procedure
  2395  0003D0  ECA6  F00E         	call	_LcGotoXY
  2396                           
  2397                           ;Menu.c: 109:             state = 6;
  2398  0003D4  0E06               	movlw	6
  2399  0003D6  D7C6               	goto	L1
  2400  0003D8                     l6415:
  2401                           
  2402                           ;Menu.c: 113:             if (isPressed()){
  2403  0003D8  ECF1  F00F         	call	_isPressed	;wreg free
  2404  0003DC  0900               	iorlw	0
  2405  0003DE  B4D8               	btfsc	status,2,c
  2406  0003E0  0012               	return	
  2407                           
  2408                           ;Menu.c: 114:                 if (getPresses() == 2){
  2409  0003E2  ECC0  F000         	call	_getPresses	;wreg free
  2410  0003E6  0A02               	xorlw	2
  2411  0003E8  E104               	bnz	l6423
  2412                           
  2413                           ;Menu.c: 115:                     LcGotoXY(LCDcol,LCDrow);
  2414  0003EA  DACD               	call	PL66	;call to abstracted procedure
  2415  0003EC  ECA6  F00E         	call	_LcGotoXY
  2416                           
  2417                           ;Menu.c: 116:                     LCDcol--;
  2418  0003F0  0633               	decf	_LCDcol^0,f,c
  2419  0003F2                     l6423:
  2420                           
  2421                           ;Menu.c: 119:                 if (KeGetGenericValue() != '#'){
  2422  0003F2  EC8D  F00F         	call	_KeGetGenericValue	;wreg free
  2423  0003F6  0A23               	xorlw	35
  2424  0003F8  E00B               	bz	l6433
  2425                           
  2426                           ;Menu.c: 120:                     mUser.password[pos] = KeGetCharValue();
  2427  0003FA  DABA               	call	PL48	;call to abstracted procedure
  2428  0003FC  ECA3  F000         	call	_KeGetCharValue	;wreg free
  2429  000400  6EDF               	movwf	indf2,c
  2430                           
  2431                           ;Menu.c: 121:                     LcPutChar(mUser.password[pos]);
  2432  000402  5030               	movf	_pos^0,w,c
  2433  000404  0F50               	addlw	low (_mUser+9)
  2434  000406  ECE0  F00E         	call	PL36	;call to abstracted procedure
  2435  00040A  ECE8  F00E         	call	_LcPutChar
  2436  00040E  D7D7               	goto	l6397
  2437  000410                     l6433:
  2438                           
  2439                           ;Menu.c: 125:                     mUser.password[pos] = '\0';
  2440  000410  DAAF               	call	PL48	;call to abstracted procedure
  2441  000412  6ADF               	clrf	indf2,c
  2442                           
  2443                           ;Menu.c: 126:                     pos = 0;
  2444  000414  6A30               	clrf	_pos^0,c
  2445                           
  2446                           ;Menu.c: 127:                     state = 7;
  2447  000416  0E07               	movlw	7
  2448  000418  6E79               	movwf	menuMotor@state^0,c
  2449  00041A  0C07               	retlw	7
  2450  00041C                     l6439:
  2451                           
  2452                           ;Menu.c: 133:             if (val == 1){
  2453  00041C  0431               	decf	_val^0,w,c
  2454  00041E  E105               	bnz	l6443
  2455                           
  2456                           ;Menu.c: 134:                 DaFindUser(&mUser);
  2457  000420  0E47               	movlw	low _mUser
  2458  000422  6E6B               	movwf	DaFindUser@logUser^0,c
  2459  000424  ECD8  F00F         	call	_DaFindUser	;wreg free
  2460                           
  2461                           ;Menu.c: 136:             } else {
  2462  000428  D004               	goto	l6445
  2463  00042A                     l6443:
  2464                           
  2465                           ;Menu.c: 137:                 DaSaveUser(&mUser);
  2466  00042A  0E47               	movlw	low _mUser
  2467  00042C  6E5E               	movwf	DaSaveUser@regUser^0,c
  2468  00042E  EC31  F000         	call	_DaSaveUser	;wreg free
  2469  000432                     l6445:
  2470                           
  2471                           ;Menu.c: 139:             state = 8;
  2472  000432  0E08               	movlw	8
  2473  000434  6E79               	movwf	menuMotor@state^0,c
  2474                           
  2475                           ;Menu.c: 140:             break;
  2476  000436  0C08               	retlw	8
  2477  000438                     l6447:
  2478                           
  2479                           ;Menu.c: 142:             if (DaGetIdle()){
  2480  000438  ECAB  F000         	call	_DaGetIdle	;wreg free
  2481  00043C  0900               	iorlw	0
  2482  00043E  B4D8               	btfsc	status,2,c
  2483  000440  0012               	return	
  2484                           
  2485                           ;Menu.c: 143:                 if (val == 1){
  2486  000442  0431               	decf	_val^0,w,c
  2487  000444  E115               	bnz	l6463
  2488                           
  2489                           ;Menu.c: 144:                     resetDisplay();
  2490  000446  EC71  F000         	call	_resetDisplay	;wreg free
  2491                           
  2492                           ;Menu.c: 145:                     KeSetMode(0);
  2493  00044A  0E00               	movlw	0
  2494  00044C  EC37  F00F         	call	_KeSetMode
  2495                           
  2496                           ;Menu.c: 146:                     if (DaGetStatus() == 0){
  2497  000450  ECC8  F000         	call	_DaGetStatus	;wreg free
  2498  000454  0900               	iorlw	0
  2499  000456  E103               	bnz	l6459
  2500                           
  2501                           ;Menu.c: 148:                         state = 9;
  2502                           
  2503                           ;Menu.c: 149:                         val =0;
  2504  000458  DAA3               	call	PL92	;call to abstracted procedure
  2505                           
  2506                           ;Menu.c: 150:                     } else if (DaGetStatus() == 1){
  2507  00045A  EF71  F000         	goto	_resetDisplay
  2508  00045E                     l6459:
  2509  00045E  ECC8  F000         	call	_DaGetStatus	;wreg free
  2510  000462  06E8               	decf	wreg,f,c
  2511  000464  E002 EF71  F000    	bnz	_resetDisplay
  2512  00046A                     u6030:
  2513                           
  2514                           ;Menu.c: 151:                         state = 0;
  2515  00046A  6A79               	clrf	menuMotor@state^0,c
  2516  00046C  EF71  F000         	goto	_resetDisplay
  2517  000470                     l6463:
  2518                           
  2519                           ;Menu.c: 155:                     if (DaGetStatus() == 3){
  2520  000470  ECC8  F000         	call	_DaGetStatus	;wreg free
  2521  000474  0A03               	xorlw	3
  2522  000476  E109               	bnz	l6471
  2523                           
  2524                           ;Menu.c: 156:                         KeSetMode(1);
  2525  000478  0E01               	movlw	1
  2526  00047A  EC37  F00F         	call	_KeSetMode
  2527                           
  2528                           ;Menu.c: 157:                         state = 3;
  2529  00047E  0E03               	movlw	3
  2530  000480  6E79               	movwf	menuMotor@state^0,c
  2531                           
  2532                           ;Menu.c: 158:                         val = 1;
  2533  000482  0E01               	movlw	1
  2534  000484  6E31               	movwf	_val^0,c
  2535                           
  2536                           ;Menu.c: 159:                     } else if (DaGetStatus() == 4){
  2537  000486  EF71  F000         	goto	_resetDisplay
  2538  00048A                     l6471:
  2539  00048A  ECC8  F000         	call	_DaGetStatus	;wreg free
  2540  00048E  0A04               	xorlw	4
  2541  000490  E002 EF71  F000    	bnz	_resetDisplay
  2542                           
  2543                           ;Menu.c: 160:                         KeSetMode(0);
  2544  000496  0E00               	movlw	0
  2545  000498  EC37  F00F         	call	_KeSetMode
  2546  00049C  D7E6               	goto	u6030
  2547  00049E                     l6477:
  2548                           
  2549                           ;Menu.c: 169:             mainMenu();
  2550  00049E  EC68  F00B         	call	_mainMenu	;wreg free
  2551                           
  2552                           ;Menu.c: 170:             if (LCDrow == 2 || LCDrow+val >= 5){
  2553  0004A2  0E02               	movlw	2
  2554  0004A4  1834               	xorwf	_LCDrow^0,w,c
  2555  0004A6  E00F               	bz	u6070
  2556  0004A8  5031               	movf	_val^0,w,c
  2557  0004AA  C034  F06E         	movff	_LCDrow,??_menuMotor
  2558  0004AE  6A6F               	clrf	(??_menuMotor+1)^0,c
  2559  0004B0  266E               	addwf	??_menuMotor^0,f,c
  2560  0004B2  0E00               	movlw	0
  2561  0004B4  226F               	addwfc	(??_menuMotor+1)^0,f,c
  2562  0004B6  BE6F               	btfsc	(??_menuMotor+1)^0,7,c
  2563  0004B8  0C00               	retlw	0
  2564  0004BA  506F               	movf	(??_menuMotor+1)^0,w,c
  2565  0004BC  E104               	bnz	u6070
  2566  0004BE  0E05               	movlw	5
  2567  0004C0  5C6E               	subwf	??_menuMotor^0,w,c
  2568  0004C2  A0D8               	btfss	status,0,c
  2569  0004C4  0012               	return	
  2570  0004C6                     u6070:
  2571                           
  2572                           ;Menu.c: 171:                 LcCursorOff();
  2573  0004C6  EC80  F000         	call	_LcCursorOff	;wreg free
  2574                           
  2575                           ;Menu.c: 172:                 state = 10;
  2576  0004CA  0E0A               	movlw	10
  2577  0004CC  6E79               	movwf	menuMotor@state^0,c
  2578  0004CE  0C0A               	retlw	10
  2579  0004D0                     l6487:
  2580                           
  2581                           ;Menu.c: 176:             if (!JoMoved()){
  2582  0004D0  ECC4  F000         	call	_JoMoved	;wreg free
  2583  0004D4  0900               	iorlw	0
  2584  0004D6  A4D8               	btfss	status,2,c
  2585  0004D8  0012               	return	
  2586                           
  2587                           ;Menu.c: 177:                 state = 11;
  2588  0004DA  0E0B               	movlw	11
  2589  0004DC  D0AF               	goto	L4
  2590  0004DE                     l6491:
  2591                           
  2592                           ;Menu.c: 178:                 TiResetTics(timer);
  2593  0004DE  5035               	movf	_timer^0,w,c
  2594  0004E0  EFAD  F00F         	goto	_TiResetTics
  2595  0004E4                     l6493:
  2596                           
  2597                           ;Menu.c: 182:             if (val < 4 && val > 0){
  2598  0004E4  0E04               	movlw	4
  2599  0004E6  6031               	cpfslt	_val^0,c
  2600  0004E8  D018               	goto	l538
  2601  0004EA  5031               	movf	_val^0,w,c
  2602  0004EC  E016               	bz	l538
  2603                           
  2604                           ;Menu.c: 183:                 if (TiGetTics(timer) >= 600){
  2605  0004EE  5035               	movf	_timer^0,w,c
  2606  0004F0  EC24  F00F         	call	_TiGetTics
  2607  0004F4  BE5F               	btfsc	(?_TiGetTics+1)^0,7,c
  2608  0004F6  D012               	goto	l6507
  2609  0004F8  0E58               	movlw	88
  2610  0004FA  5C5E               	subwf	?_TiGetTics^0,w,c
  2611  0004FC  0E02               	movlw	2
  2612  0004FE  585F               	subwfb	(?_TiGetTics+1)^0,w,c
  2613  000500  E30D               	bnc	l6507
  2614                           
  2615                           ;Menu.c: 184:                     LCDcolm++;
  2616  000502  2A32               	incf	_LCDcolm^0,f,c
  2617                           
  2618                           ;Menu.c: 185:                     LCDcolm = LCDcolm % MAINMENUSIZE[2];
  2619  000504  C074  F05E         	movff	_MAINMENUSIZE+2,___lbmod@divisor
  2620  000508  5032               	movf	_LCDcolm^0,w,c
  2621  00050A  EC11  F00F         	call	___lbmod
  2622  00050E  6E32               	movwf	_LCDcolm^0,c
  2623                           
  2624                           ;Menu.c: 186:                     state = 9;
  2625  000510  0E09               	movlw	9
  2626  000512  6E79               	movwf	menuMotor@state^0,c
  2627                           
  2628                           ;Menu.c: 187:                     resetDisplay();
  2629  000514  EC71  F000         	call	_resetDisplay	;wreg free
  2630  000518  D001               	goto	l6507
  2631  00051A                     l538:
  2632                           
  2633                           ;Menu.c: 190:                 LCDcolm = 0;
  2634  00051A  6A32               	clrf	_LCDcolm^0,c
  2635  00051C                     l6507:
  2636                           
  2637                           ;Menu.c: 192:             if (JoMoved()){
  2638  00051C  ECC4  F000         	call	_JoMoved	;wreg free
  2639  000520  0900               	iorlw	0
  2640  000522  E012               	bz	l6525
  2641                           
  2642                           ;Menu.c: 193:                 if (JoDirection() == 'S' && val < 4){
  2643  000524  ECC6  F000         	call	_JoDirection	;wreg free
  2644  000528  0A53               	xorlw	83
  2645  00052A  E105               	bnz	l6515
  2646  00052C  0E04               	movlw	4
  2647  00052E  6031               	cpfslt	_val^0,c
  2648  000530  D002               	goto	l6515
  2649                           
  2650                           ;Menu.c: 194:                     val++;
  2651  000532  2A31               	incf	_val^0,f,c
  2652                           
  2653                           ;Menu.c: 195:                 } else if(JoDirection() == 'W' && val > 0){
  2654  000534  D007               	goto	l6521
  2655  000536                     l6515:
  2656  000536  ECC6  F000         	call	_JoDirection	;wreg free
  2657  00053A  0A57               	xorlw	87
  2658  00053C  E103               	bnz	l6521
  2659  00053E  5031               	movf	_val^0,w,c
  2660  000540  E001               	bz	l6521
  2661                           
  2662                           ;Menu.c: 196:                     val--;
  2663  000542  0631               	decf	_val^0,f,c
  2664  000544                     l6521:
  2665                           
  2666                           ;Menu.c: 198:                 state = 9;
  2667  000544  0E09               	movlw	9
  2668  000546  D0BD               	goto	L3
  2669  000548                     l6525:
  2670  000548  ECF1  F00F         	call	_isPressed	;wreg free
  2671  00054C  0900               	iorlw	0
  2672  00054E  B4D8               	btfsc	status,2,c
  2673  000550  0012               	return	
  2674  000552  EC8D  F00F         	call	_KeGetGenericValue	;wreg free
  2675  000556  0A23               	xorlw	35
  2676  000558  A4D8               	btfss	status,2,c
  2677  00055A  0012               	return	
  2678                           
  2679                           ;Menu.c: 201:                 resetDisplay();
  2680  00055C  EC71  F000         	call	_resetDisplay	;wreg free
  2681                           
  2682                           ;Menu.c: 202:                 state = (val+1)*20;
  2683  000560  2831               	incf	_val^0,w,c
  2684  000562  0D14               	mullw	20
  2685  000564  CFF3 F079          	movff	prodl,menuMotor@state
  2686                           
  2687                           ;Menu.c: 203:                 resetPosition();
  2688  000568  ECBC  F000         	call	_resetPosition	;wreg free
  2689                           
  2690                           ;Menu.c: 204:                 if (val == 0){
  2691  00056C  5031               	movf	_val^0,w,c
  2692  00056E  E102               	bnz	l6539
  2693                           
  2694                           ;Menu.c: 205:                     state = 12;
  2695  000570  0E0C               	movlw	12
  2696  000572  6E79               	movwf	menuMotor@state^0,c
  2697  000574                     l6539:
  2698                           
  2699                           ;Menu.c: 207:                 LCDcolm = 0;
  2700  000574  6A32               	clrf	_LCDcolm^0,c
  2701  000576  0012               	return	
  2702  000578                     l6541:
  2703                           
  2704                           ;Menu.c: 217:             if (SiIsAvailable()){
  2705  000578  ECB7  F000         	call	_SiIsAvailable	;wreg free
  2706  00057C  0900               	iorlw	0
  2707  00057E  B4D8               	btfsc	status,2,c
  2708  000580  0012               	return	
  2709                           
  2710                           ;Menu.c: 218:                 SiSendChar(mUser.username[val]);
  2711  000582  5031               	movf	_val^0,w,c
  2712  000584  D9EB               	call	PL34	;call to abstracted procedure
  2713  000586  ECB3  F000         	call	_SiSendChar
  2714                           
  2715                           ;Menu.c: 219:                 if (mUser.username[val] == '\0'){
  2716  00058A  5031               	movf	_val^0,w,c
  2717  00058C  D9E7               	call	PL34	;call to abstracted procedure
  2718  00058E  E103               	bnz	l6549
  2719                           
  2720                           ;Menu.c: 220:                     state = 13;
  2721  000590  0E0D               	movlw	13
  2722  000592  6E79               	movwf	menuMotor@state^0,c
  2723                           
  2724                           ;Menu.c: 221:                 } else {
  2725  000594  0C0D               	retlw	13
  2726  000596                     l6549:
  2727                           
  2728                           ;Menu.c: 222:                     val++;
  2729  000596  2A31               	incf	_val^0,f,c
  2730  000598  0012               	return	
  2731  00059A                     l6551:
  2732                           
  2733                           ;Menu.c: 227:             if (SiRecievedByte()){
  2734  00059A  ECFD  F00F         	call	_SiRecievedByte	;wreg free
  2735  00059E  0900               	iorlw	0
  2736  0005A0  B4D8               	btfsc	status,2,c
  2737  0005A2  0012               	return	
  2738                           
  2739                           ;Menu.c: 228:                 val = SiReadByte();
  2740  0005A4  ECC2  F000         	call	_SiReadByte	;wreg free
  2741  0005A8  6E31               	movwf	_val^0,c
  2742                           
  2743                           ;Menu.c: 229:                 if (val == 'K'){
  2744  0005AA  0E4B               	movlw	75
  2745  0005AC  1831               	xorwf	_val^0,w,c
  2746  0005AE  A4D8               	btfss	status,2,c
  2747  0005B0  0012               	return	
  2748                           
  2749                           ;Menu.c: 230:                     state = 14;
  2750  0005B2  0E0E               	movlw	14
  2751  0005B4  6E79               	movwf	menuMotor@state^0,c
  2752                           
  2753                           ;Menu.c: 231:                     JoSetMode(1);
  2754  0005B6  0E01               	movlw	1
  2755  0005B8  ECA7  F000         	call	_JoSetMode
  2756  0005BC  EF71  F000         	goto	_resetDisplay
  2757  0005C0                     l6563:
  2758                           
  2759                           ;Menu.c: 238:             displayString(&TIME);
  2760  0005C0  0EBE               	movlw	low _TIME
  2761  0005C2  6E6C               	movwf	displayString@string^0,c
  2762  0005C4  ECD3  F00E         	call	_displayString	;wreg free
  2763                           
  2764                           ;Menu.c: 239:             if (LCDrow == 1){
  2765  0005C8  0434               	decf	_LCDrow^0,w,c
  2766  0005CA  A4D8               	btfss	status,2,c
  2767  0005CC  0012               	return	
  2768                           
  2769                           ;Menu.c: 240:                 LcCursorOff();
  2770  0005CE  EC80  F000         	call	_LcCursorOff	;wreg free
  2771                           
  2772                           ;Menu.c: 241:                 resetTimer();
  2773  0005D2  EC6C  F000         	call	_resetTimer	;wreg free
  2774                           
  2775                           ;Menu.c: 242:                 startTimer();
  2776  0005D6  EC67  F000         	call	_startTimer	;wreg free
  2777  0005DA                     l6573:
  2778                           
  2779                           ;Menu.c: 243:                 state = 15;
  2780  0005DA  0E0F               	movlw	15
  2781  0005DC  6E79               	movwf	menuMotor@state^0,c
  2782  0005DE  0C0F               	retlw	15
  2783  0005E0                     l6575:
  2784                           
  2785                           ;Menu.c: 247:             if (timerOver()){
  2786  0005E0  EC97  F000         	call	_timerOver	;wreg free
  2787  0005E4  0900               	iorlw	0
  2788  0005E6  E006               	bz	l6581
  2789                           
  2790                           ;Menu.c: 248:                 JoSetMode(0);
  2791  0005E8  0E00               	movlw	0
  2792  0005EA  ECA7  F000         	call	_JoSetMode
  2793                           
  2794                           ;Menu.c: 249:                 state = 17;
  2795  0005EE  0E11               	movlw	17
  2796  0005F0  6E79               	movwf	menuMotor@state^0,c
  2797                           
  2798                           ;Menu.c: 250:             } else if (isPressed()){
  2799  0005F2  0C11               	retlw	17
  2800  0005F4                     l6581:
  2801  0005F4  ECF1  F00F         	call	_isPressed	;wreg free
  2802  0005F8  0900               	iorlw	0
  2803  0005FA  E017               	bz	l6599
  2804                           
  2805                           ;Menu.c: 251:                 val = KeGetGenericValue();
  2806  0005FC  EC8D  F00F         	call	_KeGetGenericValue	;wreg free
  2807  000600  6E31               	movwf	_val^0,c
  2808                           
  2809                           ;Menu.c: 252:                 if (val == '*' || val == '#'){
  2810  000602  0E2A               	movlw	42
  2811  000604  1831               	xorwf	_val^0,w,c
  2812  000606  E003               	bz	u6280
  2813  000608  0E23               	movlw	35
  2814  00060A  1831               	xorwf	_val^0,w,c
  2815  00060C  E10B               	bnz	l6597
  2816  00060E                     u6280:
  2817                           
  2818                           ;Menu.c: 253:                     if (val == '*'){
  2819  00060E  0E2A               	movlw	42
  2820  000610  1831               	xorwf	_val^0,w,c
  2821  000612  A4D8               	btfss	status,2,c
  2822  000614  0012               	return	
  2823                           
  2824                           ;Menu.c: 254:                         JoSetMode(0);
  2825  000616  0E00               	movlw	0
  2826  000618  ECA7  F000         	call	_JoSetMode
  2827                           
  2828                           ;Menu.c: 255:                         state = 17;
  2829  00061C  0E11               	movlw	17
  2830  00061E  6E79               	movwf	menuMotor@state^0,c
  2831                           
  2832                           ;Menu.c: 256:                         stopTimer();
  2833  000620  EFBA  F000         	goto	_stopTimer	;wreg free
  2834  000624                     l6597:
  2835                           
  2836                           ;Menu.c: 259:                     state = 16;
  2837  000624  0E10               	movlw	16
  2838  000626  6E79               	movwf	menuMotor@state^0,c
  2839  000628  0C10               	retlw	16
  2840  00062A                     l6599:
  2841  00062A  ECFD  F00F         	call	_SiRecievedByte	;wreg free
  2842  00062E  0900               	iorlw	0
  2843  000630  B4D8               	btfsc	status,2,c
  2844  000632  0012               	return	
  2845                           
  2846                           ;Menu.c: 263:                 mScore = SiReadByte();
  2847  000634  ECC2  F000         	call	_SiReadByte	;wreg free
  2848  000638  D01E               	goto	L5
  2849  00063A                     l6603:
  2850                           
  2851                           ;Menu.c: 264:                 state = 20;
  2852  00063A  0E14               	movlw	20
  2853  00063C                     L4:
  2854  00063C  6E79               	movwf	menuMotor@state^0,c
  2855  00063E  D74F               	goto	l6491
  2856  000640                     l6607:
  2857                           
  2858                           ;Menu.c: 269:             if (SiIsAvailable()){
  2859  000640  ECB7  F000         	call	_SiIsAvailable	;wreg free
  2860  000644  0900               	iorlw	0
  2861  000646  B4D8               	btfsc	status,2,c
  2862  000648  0012               	return	
  2863                           
  2864                           ;Menu.c: 270:                 SiSendChar(val);
  2865  00064A  5031               	movf	_val^0,w,c
  2866  00064C  ECB3  F000         	call	_SiSendChar
  2867  000650  D7C4               	goto	l6573
  2868  000652                     l6613:
  2869                           
  2870                           ;Menu.c: 275:             if (SiIsAvailable()){
  2871  000652  ECB7  F000         	call	_SiIsAvailable	;wreg free
  2872  000656  0900               	iorlw	0
  2873  000658  B4D8               	btfsc	status,2,c
  2874  00065A  0012               	return	
  2875                           
  2876                           ;Menu.c: 276:                 SiSendChar('F');
  2877  00065C  0E46               	movlw	70
  2878  00065E  ECB3  F000         	call	_SiSendChar
  2879                           
  2880                           ;Menu.c: 277:                 state = 18;
  2881  000662  0E12               	movlw	18
  2882  000664  6E79               	movwf	menuMotor@state^0,c
  2883  000666  0C12               	retlw	18
  2884  000668                     l6619:
  2885                           
  2886                           ;Menu.c: 281:             if (SiRecievedByte()){
  2887  000668  ECFD  F00F         	call	_SiRecievedByte	;wreg free
  2888  00066C  0900               	iorlw	0
  2889  00066E  B4D8               	btfsc	status,2,c
  2890  000670  0012               	return	
  2891                           
  2892                           ;Menu.c: 282:                 mScore = SiReadByte();
  2893  000672  ECC2  F000         	call	_SiReadByte	;wreg free
  2894  000676                     L5:
  2895  000676  6E2F               	movwf	_mScore^0,c
  2896  000678  D7E0               	goto	l6603
  2897  00067A                     l6627:
  2898                           
  2899                           ;Menu.c: 288:             displayError();
  2900  00067A  EC40  F00E         	call	_displayError	;wreg free
  2901                           
  2902                           ;Menu.c: 289:             if(LCDrow == 2){
  2903  00067E  0E02               	movlw	2
  2904  000680  1834               	xorwf	_LCDrow^0,w,c
  2905  000682  A4D8               	btfss	status,2,c
  2906  000684  0012               	return	
  2907  000686  D7D9               	goto	l6603
  2908  000688                     l6635:
  2909                           
  2910                           ;Menu.c: 295:             if (TiGetTics(timer) >= 3600){
  2911  000688  5035               	movf	_timer^0,w,c
  2912  00068A  EC24  F00F         	call	_TiGetTics
  2913  00068E  BE5F               	btfsc	(?_TiGetTics+1)^0,7,c
  2914  000690  D004               	goto	l6641
  2915  000692  D97D               	call	PL72	;call to abstracted procedure
  2916  000694  E302               	bnc	l6641
  2917                           
  2918                           ;Menu.c: 296:                 state = 22;
  2919  000696  0E16               	movlw	22
  2920  000698  D014               	goto	L3
  2921  00069A                     l6641:
  2922  00069A  ECFD  F00F         	call	_SiRecievedByte	;wreg free
  2923  00069E  0900               	iorlw	0
  2924  0006A0  B4D8               	btfsc	status,2,c
  2925  0006A2  0012               	return	
  2926                           
  2927                           ;Menu.c: 299:                 val = SiReadByte();
  2928  0006A4  ECC2  F000         	call	_SiReadByte	;wreg free
  2929  0006A8  6E31               	movwf	_val^0,c
  2930                           
  2931                           ;Menu.c: 300:                 state = 21;
  2932  0006AA  0E15               	movlw	21
  2933  0006AC  6E79               	movwf	menuMotor@state^0,c
  2934  0006AE  0C15               	retlw	21
  2935  0006B0                     l6647:
  2936                           
  2937                           ;Menu.c: 304:             if (SiRecievedByte()){
  2938  0006B0  ECFD  F00F         	call	_SiRecievedByte	;wreg free
  2939  0006B4  0900               	iorlw	0
  2940  0006B6  B4D8               	btfsc	status,2,c
  2941  0006B8  0012               	return	
  2942                           
  2943                           ;Menu.c: 305:                 LCDcolm = SiReadByte();
  2944  0006BA  ECC2  F000         	call	_SiReadByte	;wreg free
  2945  0006BE  6E32               	movwf	_LCDcolm^0,c
  2946                           
  2947                           ;Menu.c: 306:                 state = 19;
  2948  0006C0  0E13               	movlw	19
  2949  0006C2                     L3:
  2950  0006C2  6E79               	movwf	menuMotor@state^0,c
  2951  0006C4  EF71  F000         	goto	_resetDisplay
  2952  0006C8                     l6655:
  2953                           
  2954                           ;Menu.c: 311:             displayResults();
  2955  0006C8  ECFD  F00E         	call	_displayResults	;wreg free
  2956                           
  2957                           ;Menu.c: 312:             if(LCDrow == 2){
  2958  0006CC  0E02               	movlw	2
  2959  0006CE  1834               	xorwf	_LCDrow^0,w,c
  2960  0006D0  A4D8               	btfss	status,2,c
  2961  0006D2  0012               	return	
  2962                           
  2963                           ;Menu.c: 313:                 LcGotoXY(7,1);
  2964  0006D4  0E01               	movlw	1
  2965  0006D6  6E66               	movwf	LcGotoXY@Row^0,c
  2966  0006D8  0E07               	movlw	7
  2967  0006DA  ECA6  F00E         	call	_LcGotoXY
  2968                           
  2969                           ;Menu.c: 314:                 LcPutChar((mScore/10)+'0');
  2970  0006DE  0E0A               	movlw	10
  2971  0006E0  6E5E               	movwf	___lbdiv@divisor^0,c
  2972  0006E2  502F               	movf	_mScore^0,w,c
  2973  0006E4  EC74  F00E         	call	___lbdiv
  2974  0006E8  0F30               	addlw	48
  2975  0006EA  ECE8  F00E         	call	_LcPutChar
  2976                           
  2977                           ;Menu.c: 315:                 LcPutChar((mScore%10)+'0');
  2978  0006EE  0E0A               	movlw	10
  2979  0006F0  6E5E               	movwf	___lbmod@divisor^0,c
  2980  0006F2  502F               	movf	_mScore^0,w,c
  2981  0006F4  EC11  F00F         	call	___lbmod
  2982  0006F8  0F30               	addlw	48
  2983  0006FA  ECE8  F00E         	call	_LcPutChar
  2984                           
  2985                           ;Menu.c: 316:                 displayTimeRemaining();
  2986  0006FE  EC3B  F000         	call	_displayTimeRemaining	;wreg free
  2987                           
  2988                           ;Menu.c: 317:                 state = 23;
  2989  000702  0E17               	movlw	23
  2990  000704  6E79               	movwf	menuMotor@state^0,c
  2991  000706  0C17               	retlw	23
  2992  000708                     l6663:
  2993                           
  2994                           ;Menu.c: 321:             if (isPressed() && KeGetGenericValue() == '#'){
  2995  000708  ECF1  F00F         	call	_isPressed	;wreg free
  2996  00070C  0900               	iorlw	0
  2997  00070E  B4D8               	btfsc	status,2,c
  2998  000710  0012               	return	
  2999  000712  EC8D  F00F         	call	_KeGetGenericValue	;wreg free
  3000  000716  0A23               	xorlw	35
  3001  000718  A4D8               	btfss	status,2,c
  3002  00071A  0012               	return	
  3003                           
  3004                           ;Menu.c: 322:                 DaSaveScore(mScore);
  3005  00071C  502F               	movf	_mScore^0,w,c
  3006  00071E  EC5A  F00E         	call	_DaSaveScore
  3007                           
  3008                           ;Menu.c: 323:                 state = 24;
  3009  000722  0E18               	movlw	24
  3010  000724  6E79               	movwf	menuMotor@state^0,c
  3011  000726  0C18               	retlw	24
  3012  000728                     l6671:
  3013                           
  3014                           ;Menu.c: 327:             if (DaGetIdle()){
  3015  000728  ECAB  F000         	call	_DaGetIdle	;wreg free
  3016  00072C  0900               	iorlw	0
  3017  00072E  B4D8               	btfsc	status,2,c
  3018  000730  0012               	return	
  3019                           
  3020                           ;Menu.c: 328:                 state = 9;
  3021  000732  0E09               	movlw	9
  3022  000734  6E79               	movwf	menuMotor@state^0,c
  3023                           
  3024                           ;Menu.c: 329:                 resetDisplay();
  3025  000736  EC71  F000         	call	_resetDisplay	;wreg free
  3026                           
  3027                           ;Menu.c: 330:                 val = LCDcolm = 0;
  3028  00073A  6A32               	clrf	_LCDcolm^0,c
  3029  00073C  6A31               	clrf	_val^0,c
  3030  00073E  0012               	return	
  3031  000740                     l6679:
  3032                           
  3033                           ;Menu.c: 335:             displayString(&modifyTimeString);
  3034  000740  0EDC               	movlw	low _modifyTimeString
  3035  000742  6E6C               	movwf	displayString@string^0,c
  3036  000744  ECD3  F00E         	call	_displayString	;wreg free
  3037                           
  3038                           ;Menu.c: 336:             if(LCDrow == 1){
  3039  000748  0434               	decf	_LCDrow^0,w,c
  3040  00074A  A4D8               	btfss	status,2,c
  3041  00074C  0012               	return	
  3042                           
  3043                           ;Menu.c: 337:                 modifyTime();
  3044  00074E  EC9B  F000         	call	_modifyTime	;wreg free
  3045                           
  3046                           ;Menu.c: 338:                 state = 41;
  3047  000752  0E29               	movlw	41
  3048  000754  6E79               	movwf	menuMotor@state^0,c
  3049  000756  0C29               	retlw	41
  3050  000758                     l6687:
  3051                           
  3052                           ;Menu.c: 342:             if (isPressed()){
  3053  000758  ECF1  F00F         	call	_isPressed	;wreg free
  3054  00075C  0900               	iorlw	0
  3055  00075E  B4D8               	btfsc	status,2,c
  3056  000760  0012               	return	
  3057                           
  3058                           ;Menu.c: 343:                 if(KeGetGenericValue() == '*' ){
  3059  000762  EC8D  F00F         	call	_KeGetGenericValue	;wreg free
  3060  000766  0A2A               	xorlw	42
  3061  000768  E106               	bnz	l6701
  3062                           
  3063                           ;Menu.c: 344:                     resetDisplay();
  3064  00076A  EC71  F000         	call	_resetDisplay	;wreg free
  3065                           
  3066                           ;Menu.c: 345:                     LCDcolm = 0;
  3067  00076E  6A32               	clrf	_LCDcolm^0,c
  3068                           
  3069                           ;Menu.c: 346:                     state = 9;
  3070                           
  3071                           ;Menu.c: 347:                     val =0;
  3072  000770  D917               	call	PL92	;call to abstracted procedure
  3073                           
  3074                           ;Menu.c: 348:                     resetTimer();
  3075  000772  EF6C  F000         	goto	_resetTimer	;wreg free
  3076  000776                     l6701:
  3077  000776  EC8D  F00F         	call	_KeGetGenericValue	;wreg free
  3078  00077A  0A23               	xorlw	35
  3079  00077C  E001 D70B          	bnz	l6549
  3080                           
  3081                           ;Menu.c: 350:                     if (val >= 4){
  3082  000780  0E03               	movlw	3
  3083  000782  6431               	cpfsgt	_val^0,c
  3084  000784  0C03               	retlw	3
  3085  000786                     u6460:
  3086                           
  3087                           ;Menu.c: 351:                         resetDisplay();
  3088  000786  EC71  F000         	call	_resetDisplay	;wreg free
  3089                           
  3090                           ;Menu.c: 352:                         LCDcolm = 0;
  3091                           
  3092                           ;Menu.c: 353:                         state = 9;
  3093  00078A  D906               	call	PL86	;call to abstracted procedure
  3094  00078C                     l6711:
  3095                           
  3096                           ;Menu.c: 354:                         val =0;
  3097  00078C  6A31               	clrf	_val^0,c
  3098  00078E  0012               	return	
  3099  000790                     l6715:
  3100                           
  3101                           ;Menu.c: 363:             if (DaGetNumScores() == 0){
  3102  000790  ECCA  F000         	call	_DaGetNumScores	;wreg free
  3103  000794  0900               	iorlw	0
  3104  000796  E103               	bnz	l6719
  3105                           
  3106                           ;Menu.c: 364:                 state = 9;
  3107  000798  0E09               	movlw	9
  3108  00079A  6E79               	movwf	menuMotor@state^0,c
  3109                           
  3110                           ;Menu.c: 365:             }else{
  3111  00079C  0C09               	retlw	9
  3112  00079E                     l6719:
  3113                           
  3114                           ;Menu.c: 367:                 displayScoresMarquee();
  3115  00079E  EC9F  F000         	call	_displayScoresMarquee	;wreg free
  3116                           
  3117                           ;Menu.c: 368:                 state = 61;
  3118  0007A2  0E3D               	movlw	61
  3119  0007A4  6E79               	movwf	menuMotor@state^0,c
  3120                           
  3121                           ;Menu.c: 369:                 if (DaGetNumScores() == 1) state+=2;
  3122  0007A6  ECCA  F000         	call	_DaGetNumScores	;wreg free
  3123  0007AA  06E8               	decf	wreg,f,c
  3124  0007AC  A4D8               	btfss	status,2,c
  3125  0007AE  0012               	return	
  3126  0007B0  0E02               	movlw	2
  3127  0007B2  2679               	addwf	menuMotor@state^0,f,c
  3128  0007B4  0C02               	retlw	2
  3129  0007B6                     l6727:
  3130                           
  3131                           ;Menu.c: 374:             if (DaGetIdle()){
  3132  0007B6  ECAB  F000         	call	_DaGetIdle	;wreg free
  3133  0007BA  0900               	iorlw	0
  3134  0007BC  B4D8               	btfsc	status,2,c
  3135  0007BE  0012               	return	
  3136                           
  3137                           ;Menu.c: 375:                 state = 62;
  3138  0007C0  0E3E               	movlw	62
  3139  0007C2  D73C               	goto	L4
  3140  0007C4                     l6733:
  3141                           
  3142                           ;Menu.c: 380:             state = 63;
  3143  0007C4  0E3F               	movlw	63
  3144  0007C6  6E79               	movwf	menuMotor@state^0,c
  3145                           
  3146                           ;Menu.c: 381:             if (TiGetTics(timer) >= 1200){
  3147  0007C8  5035               	movf	_timer^0,w,c
  3148  0007CA  EC24  F00F         	call	_TiGetTics
  3149  0007CE  BE5F               	btfsc	(?_TiGetTics+1)^0,7,c
  3150  0007D0  0012               	return	
  3151  0007D2  ECE3  F008         	call	PL28	;call to abstracted procedure
  3152  0007D6  A0D8               	btfss	status,0,c
  3153  0007D8  0012               	return	
  3154                           
  3155                           ;Menu.c: 382:                 CantaIR(0x10 | 0x08);
  3156  0007DA  0E18               	movlw	24
  3157  0007DC  ECBD  F00F         	call	_CantaIR
  3158                           
  3159                           ;Menu.c: 383:                 LCDcolm++;
  3160  0007E0  2A32               	incf	_LCDcolm^0,f,c
  3161                           
  3162                           ;Menu.c: 384:                 if (LCDcolm == 16){
  3163  0007E2  0E10               	movlw	16
  3164  0007E4  1832               	xorwf	_LCDcolm^0,w,c
  3165  0007E6  E001 D67A          	bnz	l6491
  3166                           
  3167                           ;Menu.c: 385:                     resetDisplay();
  3168  0007EA  EC71  F000         	call	_resetDisplay	;wreg free
  3169                           
  3170                           ;Menu.c: 386:                     LCDcolm = 0;
  3171  0007EE  6A32               	clrf	_LCDcolm^0,c
  3172                           
  3173                           ;Menu.c: 387:                     state = 60;
  3174  0007F0  0E3C               	movlw	60
  3175  0007F2  6E79               	movwf	menuMotor@state^0,c
  3176                           
  3177                           ;Menu.c: 388:                     incrementPosition();
  3178  0007F4  ECBE  F000         	call	_incrementPosition	;wreg free
  3179  0007F8  D672               	goto	l6491
  3180  0007FA                     l6753:
  3181                           
  3182                           ;Menu.c: 395:             if (DaGetNumScores() > 1) state = 62;
  3183  0007FA  ECCA  F000         	call	_DaGetNumScores	;wreg free
  3184  0007FE  6E6E               	movwf	??_menuMotor^0,c
  3185  000800  0E01               	movlw	1
  3186  000802  646E               	cpfsgt	??_menuMotor^0,c
  3187  000804  D002               	goto	l6757
  3188  000806  0E3E               	movlw	62
  3189  000808  6E79               	movwf	menuMotor@state^0,c
  3190  00080A                     l6757:
  3191                           
  3192                           ;Menu.c: 396:             if (isPressed() && KeGetGenericValue() == '#'){
  3193  00080A  ECF1  F00F         	call	_isPressed	;wreg free
  3194  00080E  0900               	iorlw	0
  3195  000810  B4D8               	btfsc	status,2,c
  3196  000812  0012               	return	
  3197  000814  EC8D  F00F         	call	_KeGetGenericValue	;wreg free
  3198  000818  0A23               	xorlw	35
  3199  00081A  E0B5               	bz	u6460
  3200  00081C  0012               	return	
  3201  00081E                     l6769:
  3202                           
  3203                           ;Menu.c: 406:             displayLogOut();
  3204  00081E  ECE6  F00D         	call	_displayLogOut	;wreg free
  3205                           
  3206                           ;Menu.c: 407:             if (LCDrow == 1){
  3207  000822  0434               	decf	_LCDrow^0,w,c
  3208  000824  A4D8               	btfss	status,2,c
  3209  000826  0012               	return	
  3210                           
  3211                           ;Menu.c: 408:                 state = 81;
  3212  000828  0E51               	movlw	81
  3213  00082A  D708               	goto	L4
  3214  00082C                     l6777:
  3215                           
  3216                           ;Menu.c: 413:             if (TiGetTics(timer) >= 3600){
  3217  00082C  5035               	movf	_timer^0,w,c
  3218  00082E  EC24  F00F         	call	_TiGetTics
  3219  000832  BE5F               	btfsc	(?_TiGetTics+1)^0,7,c
  3220  000834  0012               	return	
  3221  000836  D8AB               	call	PL72	;call to abstracted procedure
  3222  000838  A0D8               	btfss	status,0,c
  3223  00083A  0012               	return	
  3224                           
  3225                           ;Menu.c: 414:                 state = 0;
  3226  00083C  6A79               	clrf	menuMotor@state^0,c
  3227                           
  3228                           ;Menu.c: 415:                 resetDisplay();
  3229  00083E  EC71  F000         	call	_resetDisplay	;wreg free
  3230                           
  3231                           ;Menu.c: 416:                 LCDcolm = 0;
  3232  000842  6A32               	clrf	_LCDcolm^0,c
  3233  000844  D7A3               	goto	l6711
  3234  000846                     l6787:
  3235                           
  3236                           ;Menu.c: 421:             displayString(&sysTime);
  3237  000846  0ECE               	movlw	low _sysTime
  3238  000848  6E6C               	movwf	displayString@string^0,c
  3239  00084A  ECD3  F00E         	call	_displayString	;wreg free
  3240                           
  3241                           ;Menu.c: 422:             if(LCDrow == 1){
  3242  00084E  0434               	decf	_LCDrow^0,w,c
  3243  000850  A4D8               	btfss	status,2,c
  3244  000852  0012               	return	
  3245                           
  3246                           ;Menu.c: 423:                 displaySysTime();
  3247  000854  EC76  F000         	call	_displaySysTime	;wreg free
  3248                           
  3249                           ;Menu.c: 424:                 state = 101;
  3250  000858  0E65               	movlw	101
  3251  00085A  6E79               	movwf	menuMotor@state^0,c
  3252  00085C  0C65               	retlw	101
  3253  00085E                     l6795:
  3254                           
  3255                           ;Menu.c: 428:             if (isPressed() && KeGetGenericValue() == '#'){
  3256  00085E  ECF1  F00F         	call	_isPressed	;wreg free
  3257  000862  0900               	iorlw	0
  3258  000864  B4D8               	btfsc	status,2,c
  3259  000866  0012               	return	
  3260  000868  EC8D  F00F         	call	_KeGetGenericValue	;wreg free
  3261  00086C  0A23               	xorlw	35
  3262  00086E  A4D8               	btfss	status,2,c
  3263  000870  0012               	return	
  3264                           
  3265                           ;Menu.c: 429:                 resetDisplay();
  3266  000872  EC71  F000         	call	_resetDisplay	;wreg free
  3267                           
  3268                           ;Menu.c: 430:                 LCDcolm = 0;
  3269                           
  3270                           ;Menu.c: 431:                 state = 9;
  3271  000876  D890               	call	PL86	;call to abstracted procedure
  3272                           
  3273                           ;Menu.c: 432:                 stopTimer();
  3274  000878  ECBA  F000         	call	_stopTimer	;wreg free
  3275  00087C  D787               	goto	l6711
  3276  00087E                     l6811:
  3277  00087E  5079               	movf	menuMotor@state^0,w,c
  3278  000880  6E6E               	movwf	??_menuMotor^0,c
  3279  000882  6A6F               	clrf	(??_menuMotor+1)^0,c
  3280                           
  3281                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3282                           ; Switch size 1, requested type "space"
  3283                           ; Number of cases is 1, Range of values is 0 to 0
  3284                           ; switch strategies available:
  3285                           ; Name         Instructions Cycles
  3286                           ; simple_byte            4     3 (average)
  3287                           ;	Chosen strategy is simple_byte
  3288  000884  506F               	movf	(??_menuMotor+1)^0,w,c
  3289  000886  A4D8               	btfss	status,2,c
  3290  000888  0012               	return	
  3291                           
  3292                           ; Switch size 1, requested type "space"
  3293                           ; Number of cases is 35, Range of values is 0 to 101
  3294                           ; switch strategies available:
  3295                           ; Name         Instructions Cycles
  3296                           ; simple_byte          106    54 (average)
  3297                           ;	Chosen strategy is simple_byte
  3298  00088A  506E               	movf	??_menuMotor^0,w,c
  3299  00088C  E101 D521          	bz	l6329
  3300  000890  0A01               	xorlw	1	; case 1
  3301  000892  E101 D52B          	bz	l6341
  3302  000896  0A03               	xorlw	3	; case 2
  3303  000898  E101 D53B          	bz	l6349
  3304  00089C  0A01               	xorlw	1	; case 3
  3305  00089E  E101 D54F          	bz	l6361
  3306  0008A2  0A07               	xorlw	7	; case 4
  3307  0008A4  E101 D561          	bz	l6375
  3308  0008A8  0A01               	xorlw	1	; case 5
  3309  0008AA  E101 D58B          	bz	l6403
  3310  0008AE  0A03               	xorlw	3	; case 6
  3311  0008B0  E101 D592          	bz	l6415
  3312  0008B4  0A01               	xorlw	1	; case 7
  3313  0008B6  E101 D5B1          	bz	l6439
  3314  0008BA  0A0F               	xorlw	15	; case 8
  3315  0008BC  E101 D5BC          	bz	l6447
  3316  0008C0  0A01               	xorlw	1	; case 9
  3317  0008C2  E101 D5EC          	bz	l6477
  3318  0008C6  0A03               	xorlw	3	; case 10
  3319  0008C8  E101 D602          	bz	l6487
  3320  0008CC  0A01               	xorlw	1	; case 11
  3321  0008CE  E101 D609          	bz	l6493
  3322  0008D2  0A07               	xorlw	7	; case 12
  3323  0008D4  E101 D650          	bz	l6541
  3324  0008D8  0A01               	xorlw	1	; case 13
  3325  0008DA  E101 D65E          	bz	l6551
  3326  0008DE  0A03               	xorlw	3	; case 14
  3327  0008E0  E101 D66E          	bz	l6563
  3328  0008E4  0A01               	xorlw	1	; case 15
  3329  0008E6  E101 D67B          	bz	l6575
  3330  0008EA  0A1F               	xorlw	31	; case 16
  3331  0008EC  E101 D6A8          	bz	l6607
  3332  0008F0  0A01               	xorlw	1	; case 17
  3333  0008F2  E101 D6AE          	bz	l6613
  3334  0008F6  0A03               	xorlw	3	; case 18
  3335  0008F8  E101 D6B6          	bz	l6619
  3336  0008FC  0A01               	xorlw	1	; case 19
  3337  0008FE  E101 D6BC          	bz	l6627
  3338  000902  0A07               	xorlw	7	; case 20
  3339  000904  E101 D6C0          	bz	l6635
  3340  000908  0A01               	xorlw	1	; case 21
  3341  00090A  E101 D6D1          	bz	l6647
  3342  00090E  0A03               	xorlw	3	; case 22
  3343  000910  E101 D6DA          	bz	l6655
  3344  000914  0A01               	xorlw	1	; case 23
  3345  000916  E101 D6F7          	bz	l6663
  3346  00091A  0A0F               	xorlw	15	; case 24
  3347  00091C  E101 D704          	bz	l6671
  3348  000920  0A30               	xorlw	48	; case 40
  3349  000922  E101 D70D          	bz	l6679
  3350  000926  0A01               	xorlw	1	; case 41
  3351  000928  E101 D716          	bz	l6687
  3352  00092C  0A15               	xorlw	21	; case 60
  3353  00092E  E101 D72F          	bz	l6715
  3354  000932  0A01               	xorlw	1	; case 61
  3355  000934  E101 D73F          	bz	l6727
  3356  000938  0A03               	xorlw	3	; case 62
  3357  00093A  E101 D743          	bz	l6733
  3358  00093E  0A01               	xorlw	1	; case 63
  3359  000940  E101 D75B          	bz	l6753
  3360  000944  0A6F               	xorlw	111	; case 80
  3361  000946  E101 D76A          	bz	l6769
  3362  00094A  0A01               	xorlw	1	; case 81
  3363  00094C  E101 D76E          	bz	l6777
  3364  000950  0A35               	xorlw	53	; case 100
  3365  000952  E101 D778          	bz	l6787
  3366  000956  0A01               	xorlw	1	; case 101
  3367  000958  E082               	bz	l6795
  3368  00095A  0012               	return		;funcret
  3369  00095C                     __end_of_menuMotor:
  3370                           	callstack 0
  3371  00095C                     PL34:
  3372                           	callstack 23
  3373  00095C  0F47               	addlw	low _mUser
  3374  00095E  6ED9               	movwf	fsr2l,c
  3375  000960  6ADA               	clrf	fsr2h,c
  3376  000962  50DF               	movf	indf2,w,c
  3377  000964  0012               	return	
  3378  000966                     __end_ofPL34:
  3379                           	callstack 0
  3380  000966                     PL44:
  3381                           	callstack 23
  3382  000966  5030               	movf	_pos^0,w,c
  3383  000968  0F47               	addlw	low _mUser
  3384  00096A  6ED9               	movwf	fsr2l,c
  3385  00096C  6ADA               	clrf	fsr2h,c
  3386  00096E  0012               	return	
  3387  000970                     __end_ofPL44:
  3388                           	callstack 0
  3389  000970                     PL48:
  3390                           	callstack 23
  3391  000970  5030               	movf	_pos^0,w,c
  3392  000972  0F50               	addlw	low (_mUser+9)
  3393  000974  6ED9               	movwf	fsr2l,c
  3394  000976  6ADA               	clrf	fsr2h,c
  3395  000978  0012               	return	
  3396  00097A                     __end_ofPL48:
  3397                           	callstack 0
  3398  00097A                     PL62:
  3399                           	callstack 23
  3400  00097A  0E05               	movlw	5
  3401  00097C  6E33               	movwf	_LCDcol^0,c
  3402  00097E  C034  F066         	movff	_LCDrow,LcGotoXY@Row
  3403  000982  5033               	movf	_LCDcol^0,w,c
  3404  000984  0012               	return	
  3405  000986                     __end_ofPL62:
  3406                           	callstack 0
  3407  000986                     PL66:
  3408                           	callstack 23
  3409  000986  C034  F066         	movff	_LCDrow,LcGotoXY@Row
  3410  00098A  5033               	movf	_LCDcol^0,w,c
  3411  00098C  0012               	return	
  3412  00098E                     __end_ofPL66:
  3413                           	callstack 0
  3414  00098E                     PL72:
  3415                           	callstack 23
  3416  00098E  0E10               	movlw	16
  3417  000990  5C5E               	subwf	?_TiGetTics^0,w,c
  3418  000992  0E0E               	movlw	14
  3419  000994  585F               	subwfb	(?_TiGetTics+1)^0,w,c
  3420  000996  0012               	return	
  3421  000998                     __end_ofPL72:
  3422                           	callstack 0
  3423  000998                     PL86:
  3424                           	callstack 23
  3425  000998  6A32               	clrf	_LCDcolm^0,c
  3426  00099A  0E09               	movlw	9
  3427  00099C  6E79               	movwf	menuMotor@state^0,c
  3428  00099E  0C09               	retlw	9
  3429  0009A0                     __end_ofPL86:
  3430                           	callstack 0
  3431  0009A0                     PL92:
  3432                           	callstack 23
  3433  0009A0  0E09               	movlw	9
  3434  0009A2  6E79               	movwf	menuMotor@state^0,c
  3435  0009A4  6A31               	clrf	_val^0,c
  3436  0009A6  0012               	return	
  3437  0009A8                     __end_ofPL92:
  3438                           	callstack 0
  3439                           
  3440 ;; *************** function _timerOver *****************
  3441 ;; Defined at:
  3442 ;;		line 506 in file "time.c"
  3443 ;; Parameters:    Size  Location     Type
  3444 ;;		None
  3445 ;; Auto vars:     Size  Location     Type
  3446 ;;		None
  3447 ;; Return value:  Size  Location     Type
  3448 ;;                  1    wreg      unsigned char 
  3449 ;; Registers used:
  3450 ;;		wreg, status,2
  3451 ;; Tracked objects:
  3452 ;;		On entry : 0/0
  3453 ;;		On exit  : 0/0
  3454 ;;		Unchanged: 0/0
  3455 ;; Data sizes:     COMRAM   BANK0   BANK1
  3456 ;;      Params:         0       0       0
  3457 ;;      Locals:         0       0       0
  3458 ;;      Temps:          0       0       0
  3459 ;;      Totals:         0       0       0
  3460 ;;Total ram usage:        0 bytes
  3461 ;; Hardware stack levels used: 1
  3462 ;; Hardware stack levels required when called: 2
  3463 ;; This function calls:
  3464 ;;		Nothing
  3465 ;; This function is called by:
  3466 ;;		_menuMotor
  3467 ;; This function uses a non-reentrant model
  3468 ;;
  3469                           
  3470                           	psect	text9
  3471  00012E                     __ptext9:
  3472                           	callstack 0
  3473  00012E                     _timerOver:
  3474                           	callstack 27
  3475                           
  3476                           ;time.c: 507:     return state == 0;
  3477                           
  3478                           ;incstack = 0
  3479  00012E  5013               	movf	_state@time$F1845^0,w,c
  3480  000130  B4D8               	btfsc	status,2,c
  3481  000132  0C01               	retlw	1
  3482  000134  0C00               	retlw	0	;funcret
  3483  000136                     __end_of_timerOver:
  3484                           	callstack 0
  3485                           
  3486 ;; *************** function _stopTimer *****************
  3487 ;; Defined at:
  3488 ;;		line 463 in file "time.c"
  3489 ;; Parameters:    Size  Location     Type
  3490 ;;		None
  3491 ;; Auto vars:     Size  Location     Type
  3492 ;;		None
  3493 ;; Return value:  Size  Location     Type
  3494 ;;                  1    wreg      void 
  3495 ;; Registers used:
  3496 ;;		None
  3497 ;; Tracked objects:
  3498 ;;		On entry : 0/0
  3499 ;;		On exit  : 0/0
  3500 ;;		Unchanged: 0/0
  3501 ;; Data sizes:     COMRAM   BANK0   BANK1
  3502 ;;      Params:         0       0       0
  3503 ;;      Locals:         0       0       0
  3504 ;;      Temps:          0       0       0
  3505 ;;      Totals:         0       0       0
  3506 ;;Total ram usage:        0 bytes
  3507 ;; Hardware stack levels used: 1
  3508 ;; Hardware stack levels required when called: 2
  3509 ;; This function calls:
  3510 ;;		Nothing
  3511 ;; This function is called by:
  3512 ;;		_menuMotor
  3513 ;; This function uses a non-reentrant model
  3514 ;;
  3515                           
  3516                           	psect	text10
  3517  000174                     __ptext10:
  3518                           	callstack 0
  3519  000174                     _stopTimer:
  3520                           	callstack 27
  3521                           
  3522                           ;time.c: 464:     state = 0;
  3523                           
  3524                           ;incstack = 0
  3525  000174  6A13               	clrf	_state@time$F1845^0,c
  3526  000176  0012               	return		;funcret
  3527  000178                     __end_of_stopTimer:
  3528                           	callstack 0
  3529                           
  3530 ;; *************** function _startTimer *****************
  3531 ;; Defined at:
  3532 ;;		line 459 in file "time.c"
  3533 ;; Parameters:    Size  Location     Type
  3534 ;;		None
  3535 ;; Auto vars:     Size  Location     Type
  3536 ;;		None
  3537 ;; Return value:  Size  Location     Type
  3538 ;;                  1    wreg      void 
  3539 ;; Registers used:
  3540 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3541 ;; Tracked objects:
  3542 ;;		On entry : 0/0
  3543 ;;		On exit  : 0/0
  3544 ;;		Unchanged: 0/0
  3545 ;; Data sizes:     COMRAM   BANK0   BANK1
  3546 ;;      Params:         0       0       0
  3547 ;;      Locals:         0       0       0
  3548 ;;      Temps:          0       0       0
  3549 ;;      Totals:         0       0       0
  3550 ;;Total ram usage:        0 bytes
  3551 ;; Hardware stack levels used: 1
  3552 ;; Hardware stack levels required when called: 3
  3553 ;; This function calls:
  3554 ;;		_TiResetTics
  3555 ;; This function is called by:
  3556 ;;		_menuMotor
  3557 ;; This function uses a non-reentrant model
  3558 ;;
  3559                           
  3560                           	psect	text11
  3561  0000CE                     __ptext11:
  3562                           	callstack 0
  3563  0000CE                     _startTimer:
  3564                           	callstack 26
  3565                           
  3566                           ;time.c: 460:     state = 2;
  3567                           
  3568                           ;incstack = 0
  3569  0000CE  0E02               	movlw	2
  3570  0000D0  6E13               	movwf	_state@time$F1845^0,c
  3571                           
  3572                           ;time.c: 461:     TiResetTics(timer);
  3573  0000D2  5014               	movf	_timer@time$F1844^0,w,c
  3574  0000D4  EFAD  F00F         	goto	_TiResetTics
  3575  0000D8                     __end_of_startTimer:
  3576                           	callstack 0
  3577                           
  3578 ;; *************** function _resetTimer *****************
  3579 ;; Defined at:
  3580 ;;		line 471 in file "time.c"
  3581 ;; Parameters:    Size  Location     Type
  3582 ;;		None
  3583 ;; Auto vars:     Size  Location     Type
  3584 ;;		None
  3585 ;; Return value:  Size  Location     Type
  3586 ;;                  1    wreg      void 
  3587 ;; Registers used:
  3588 ;;		None
  3589 ;; Tracked objects:
  3590 ;;		On entry : 0/0
  3591 ;;		On exit  : 0/0
  3592 ;;		Unchanged: 0/0
  3593 ;; Data sizes:     COMRAM   BANK0   BANK1
  3594 ;;      Params:         0       0       0
  3595 ;;      Locals:         0       0       0
  3596 ;;      Temps:          0       0       0
  3597 ;;      Totals:         0       0       0
  3598 ;;Total ram usage:        0 bytes
  3599 ;; Hardware stack levels used: 1
  3600 ;; Hardware stack levels required when called: 2
  3601 ;; This function calls:
  3602 ;;		Nothing
  3603 ;; This function is called by:
  3604 ;;		_menuMotor
  3605 ;; This function uses a non-reentrant model
  3606 ;;
  3607                           
  3608                           	psect	text12
  3609  0000D8                     __ptext12:
  3610                           	callstack 0
  3611  0000D8                     _resetTimer:
  3612                           	callstack 27
  3613                           
  3614                           ;time.c: 472:     second = seconds;
  3615                           
  3616                           ;incstack = 0
  3617  0000D8  C018  F017         	movff	_seconds,_second
  3618                           
  3619                           ;time.c: 473:     minute = minutes;
  3620  0000DC  C078  F077         	movff	_minutes,_minute
  3621  0000E0  0012               	return		;funcret
  3622  0000E2                     __end_of_resetTimer:
  3623                           	callstack 0
  3624                           
  3625 ;; *************** function _resetPosition *****************
  3626 ;; Defined at:
  3627 ;;		line 376 in file "EEPROM.c"
  3628 ;; Parameters:    Size  Location     Type
  3629 ;;		None
  3630 ;; Auto vars:     Size  Location     Type
  3631 ;;		None
  3632 ;; Return value:  Size  Location     Type
  3633 ;;                  1    wreg      void 
  3634 ;; Registers used:
  3635 ;;		None
  3636 ;; Tracked objects:
  3637 ;;		On entry : 0/0
  3638 ;;		On exit  : 0/0
  3639 ;;		Unchanged: 0/0
  3640 ;; Data sizes:     COMRAM   BANK0   BANK1
  3641 ;;      Params:         0       0       0
  3642 ;;      Locals:         0       0       0
  3643 ;;      Temps:          0       0       0
  3644 ;;      Totals:         0       0       0
  3645 ;;Total ram usage:        0 bytes
  3646 ;; Hardware stack levels used: 1
  3647 ;; Hardware stack levels required when called: 2
  3648 ;; This function calls:
  3649 ;;		Nothing
  3650 ;; This function is called by:
  3651 ;;		_menuMotor
  3652 ;; This function uses a non-reentrant model
  3653 ;;
  3654                           
  3655                           	psect	text13
  3656  000178                     __ptext13:
  3657                           	callstack 0
  3658  000178                     _resetPosition:
  3659                           	callstack 27
  3660                           
  3661                           ;EEPROM.c: 377:     position = 0;
  3662                           
  3663                           ;incstack = 0
  3664  000178  6A1F               	clrf	_position^0,c
  3665  00017A  0012               	return		;funcret
  3666  00017C                     __end_of_resetPosition:
  3667                           	callstack 0
  3668                           
  3669 ;; *************** function _resetDisplay *****************
  3670 ;; Defined at:
  3671 ;;		line 439 in file "Menu.c"
  3672 ;; Parameters:    Size  Location     Type
  3673 ;;		None
  3674 ;; Auto vars:     Size  Location     Type
  3675 ;;		None
  3676 ;; Return value:  Size  Location     Type
  3677 ;;                  1    wreg      void 
  3678 ;; Registers used:
  3679 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3680 ;; Tracked objects:
  3681 ;;		On entry : 0/0
  3682 ;;		On exit  : 0/0
  3683 ;;		Unchanged: 0/0
  3684 ;; Data sizes:     COMRAM   BANK0   BANK1
  3685 ;;      Params:         0       0       0
  3686 ;;      Locals:         0       0       0
  3687 ;;      Temps:          0       0       0
  3688 ;;      Totals:         0       0       0
  3689 ;;Total ram usage:        0 bytes
  3690 ;; Hardware stack levels used: 1
  3691 ;; Hardware stack levels required when called: 5
  3692 ;; This function calls:
  3693 ;;		_LcClear
  3694 ;; This function is called by:
  3695 ;;		_menuMotor
  3696 ;; This function uses a non-reentrant model
  3697 ;;
  3698                           
  3699                           	psect	text14
  3700  0000E2                     __ptext14:
  3701                           	callstack 0
  3702  0000E2                     _resetDisplay:
  3703                           	callstack 24
  3704                           
  3705                           ;Menu.c: 440:     LcClear();
  3706                           
  3707                           ;incstack = 0
  3708  0000E2  EC1B  F000         	call	_LcClear	;wreg free
  3709                           
  3710                           ;Menu.c: 441:     LCDcol = LCDrow = 0;
  3711  0000E6  6A34               	clrf	_LCDrow^0,c
  3712  0000E8  6A33               	clrf	_LCDcol^0,c
  3713  0000EA  0012               	return		;funcret
  3714  0000EC                     __end_of_resetDisplay:
  3715                           	callstack 0
  3716                           
  3717 ;; *************** function _modifyTime *****************
  3718 ;; Defined at:
  3719 ;;		line 476 in file "time.c"
  3720 ;; Parameters:    Size  Location     Type
  3721 ;;		None
  3722 ;; Auto vars:     Size  Location     Type
  3723 ;;		None
  3724 ;; Return value:  Size  Location     Type
  3725 ;;                  1    wreg      void 
  3726 ;; Registers used:
  3727 ;;		wreg, status,2
  3728 ;; Tracked objects:
  3729 ;;		On entry : 0/0
  3730 ;;		On exit  : 0/0
  3731 ;;		Unchanged: 0/0
  3732 ;; Data sizes:     COMRAM   BANK0   BANK1
  3733 ;;      Params:         0       0       0
  3734 ;;      Locals:         0       0       0
  3735 ;;      Temps:          0       0       0
  3736 ;;      Totals:         0       0       0
  3737 ;;Total ram usage:        0 bytes
  3738 ;; Hardware stack levels used: 1
  3739 ;; Hardware stack levels required when called: 2
  3740 ;; This function calls:
  3741 ;;		Nothing
  3742 ;; This function is called by:
  3743 ;;		_menuMotor
  3744 ;; This function uses a non-reentrant model
  3745 ;;
  3746                           
  3747                           	psect	text15
  3748  000136                     __ptext15:
  3749                           	callstack 0
  3750  000136                     _modifyTime:
  3751                           	callstack 0
  3752                           
  3753                           ;time.c: 477:     state = 20;
  3754                           
  3755                           ;incstack = 0
  3756  000136  D000               	goto	PL94	;call to abstracted procedure
  3757  000138                     __end_of_modifyTime:
  3758                           	callstack 0
  3759  000138                     PL94:
  3760                           	callstack 24
  3761  000138  0E14               	movlw	20
  3762  00013A  6E13               	movwf	_state@time$F1845^0,c
  3763  00013C  0C14               	retlw	20	;funcret
  3764  00013E                     __end_ofPL94:
  3765                           	callstack 0
  3766                           
  3767 ;; *************** function _mainMenu *****************
  3768 ;; Defined at:
  3769 ;;		line 454 in file "Menu.c"
  3770 ;; Parameters:    Size  Location     Type
  3771 ;;		None
  3772 ;; Auto vars:     Size  Location     Type
  3773 ;;		None
  3774 ;; Return value:  Size  Location     Type
  3775 ;;                  1    wreg      void 
  3776 ;; Registers used:
  3777 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3778 ;; Tracked objects:
  3779 ;;		On entry : 0/0
  3780 ;;		On exit  : 0/0
  3781 ;;		Unchanged: 0/0
  3782 ;; Data sizes:     COMRAM   BANK0   BANK1
  3783 ;;      Params:         0       0       0
  3784 ;;      Locals:         0       0       0
  3785 ;;      Temps:          2       0       0
  3786 ;;      Totals:         2       0       0
  3787 ;;Total ram usage:        2 bytes
  3788 ;; Hardware stack levels used: 1
  3789 ;; Hardware stack levels required when called: 6
  3790 ;; This function calls:
  3791 ;;		_LcPutChar
  3792 ;;		___awmod
  3793 ;;		_nextRow
  3794 ;; This function is called by:
  3795 ;;		_menuMotor
  3796 ;; This function uses a non-reentrant model
  3797 ;;
  3798                           
  3799                           	psect	text16
  3800  0016D0                     __ptext16:
  3801                           	callstack 0
  3802  0016D0                     _mainMenu:
  3803                           	callstack 23
  3804                           
  3805                           ;Menu.c: 455:     if (LCDrow+val < 5){
  3806                           
  3807                           ;incstack = 0
  3808  0016D0  5031               	movf	_val^0,w,c
  3809  0016D2  C034  F06C         	movff	_LCDrow,??_mainMenu
  3810  0016D6  6A6D               	clrf	(??_mainMenu+1)^0,c
  3811  0016D8  266C               	addwf	??_mainMenu^0,f,c
  3812  0016DA  0E00               	movlw	0
  3813  0016DC  226D               	addwfc	(??_mainMenu+1)^0,f,c
  3814  0016DE  BE6D               	btfsc	(??_mainMenu+1)^0,7,c
  3815  0016E0  D006               	goto	u5370
  3816  0016E2  506D               	movf	(??_mainMenu+1)^0,w,c
  3817  0016E4  E129               	bnz	l635
  3818  0016E6  0E05               	movlw	5
  3819  0016E8  5C6C               	subwf	??_mainMenu^0,w,c
  3820  0016EA  B0D8               	btfsc	status,0,c
  3821  0016EC  0012               	return	
  3822  0016EE                     u5370:
  3823                           
  3824                           ;Menu.c: 456:         if (MAINMENUSIZE[LCDrow+val] > 16){
  3825  0016EE  D837               	call	PL64	;call to abstracted procedure
  3826  0016F0  0E10               	movlw	16
  3827  0016F2  64DF               	cpfsgt	indf2,c
  3828  0016F4  D015               	goto	l5977
  3829                           
  3830                           ;Menu.c: 457:             if (LCDcol < 16){
  3831  0016F6  6033               	cpfslt	_LCDcol^0,c
  3832  0016F8  EF54  F000         	goto	_nextRow
  3833                           
  3834                           ;Menu.c: 458:                 LcPutChar(MAINMENU[LCDrow+val][(LCDcol+LCDcolm) % MAINMENU
      +                          SIZE[LCDrow+val]]);
  3835  0016FC  5033               	movf	_LCDcol^0,w,c
  3836  0016FE  2432               	addwf	_LCDcolm^0,w,c
  3837  001700  6E5E               	movwf	___awmod@dividend^0,c
  3838  001702  6A5F               	clrf	(___awmod@dividend+1)^0,c
  3839  001704  365F               	rlcf	(___awmod@dividend+1)^0,f,c
  3840  001706  D82B               	call	PL64	;call to abstracted procedure
  3841  001708  50DF               	movf	indf2,w,c
  3842  00170A  6E60               	movwf	___awmod@divisor^0,c
  3843  00170C  6A61               	clrf	(___awmod@divisor+1)^0,c
  3844  00170E  EC74  F00C         	call	___awmod	;wreg free
  3845  001712  D813               	call	PL20	;call to abstracted procedure
  3846  001714  245E               	addwf	?___awmod^0,w,c
  3847  001716  D81B               	call	PL30	;call to abstracted procedure
  3848  001718  ECE8  F00E         	call	_LcPutChar
  3849  00171C                     l5973:
  3850                           
  3851                           ;Menu.c: 459:                 LCDcol++;
  3852  00171C  2A33               	incf	_LCDcol^0,f,c
  3853                           
  3854                           ;Menu.c: 460:             }else {
  3855  00171E  0012               	return	
  3856  001720                     l5977:
  3857  001720  D80C               	call	PL20	;call to abstracted procedure
  3858  001722  2433               	addwf	_LCDcol^0,w,c
  3859  001724  D814               	call	PL30	;call to abstracted procedure
  3860  001726  E102 EF54  F000    	bz	_nextRow
  3861                           
  3862                           ;Menu.c: 465:             LcPutChar(MAINMENU[LCDrow+val][LCDcol]);
  3863  00172C  D806               	call	PL20	;call to abstracted procedure
  3864  00172E  2433               	addwf	_LCDcol^0,w,c
  3865  001730  D80E               	call	PL30	;call to abstracted procedure
  3866  001732  ECE8  F00E         	call	_LcPutChar
  3867  001736  D7F2               	goto	l5973
  3868  001738                     l635:
  3869  001738  0012               	return		;funcret
  3870  00173A                     __end_of_mainMenu:
  3871                           	callstack 0
  3872  00173A                     PL20:
  3873                           	callstack 23
  3874  00173A  5031               	movf	_val^0,w,c
  3875  00173C  0D1C               	mullw	28
  3876  00173E  CFF3 F06C          	movff	prodl,??_mainMenu
  3877  001742  5034               	movf	_LCDrow^0,w,c
  3878  001744  0D1C               	mullw	28
  3879  001746  50F3               	movf	243,w,c
  3880  001748  0F0D               	addlw	low _MAINMENU
  3881  00174A  246C               	addwf	??_mainMenu^0,w,c
  3882  00174C  0012               	return	
  3883  00174E                     __end_ofPL20:
  3884                           	callstack 0
  3885  00174E                     PL30:
  3886                           	callstack 23
  3887  00174E  6E6D               	movwf	(??_mainMenu+1)^0,c
  3888  001750  C06D  FFF6         	movff	??_mainMenu+1,tblptrl
  3889  001754                     	if	1	;There is more than 1 active tblptr byte
  3890  001754  0E02               	movlw	high __smallconst
  3891  001756  6EF7               	movwf	tblptrh,c
  3892  001758                     	endif
  3893  001758                     	if	0	;tblptru may be non-zero
  3894  001758                     	endif
  3895  001758                     	if	0	;tblptru may be non-zero
  3896  001758                     	endif
  3897  001758  0008               	tblrd		*
  3898  00175A  50F5               	movf	tablat,w,c
  3899  00175C  0012               	return	
  3900  00175E                     __end_ofPL30:
  3901                           	callstack 0
  3902  00175E                     PL64:
  3903                           	callstack 23
  3904  00175E  5034               	movf	_LCDrow^0,w,c
  3905  001760  0F72               	addlw	low _MAINMENUSIZE
  3906  001762  2431               	addwf	_val^0,w,c
  3907  001764  6ED9               	movwf	fsr2l,c
  3908  001766  6ADA               	clrf	fsr2h,c
  3909  001768  0012               	return	
  3910  00176A                     __end_ofPL64:
  3911                           	callstack 0
  3912                           
  3913 ;; *************** function ___awmod *****************
  3914 ;; Defined at:
  3915 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\awmod.c"
  3916 ;; Parameters:    Size  Location     Type
  3917 ;;  dividend        2    5[COMRAM] int 
  3918 ;;  divisor         2    7[COMRAM] int 
  3919 ;; Auto vars:     Size  Location     Type
  3920 ;;  sign            1   10[COMRAM] unsigned char 
  3921 ;;  counter         1    9[COMRAM] unsigned char 
  3922 ;; Return value:  Size  Location     Type
  3923 ;;                  2    5[COMRAM] int 
  3924 ;; Registers used:
  3925 ;;		wreg, status,2, status,0
  3926 ;; Tracked objects:
  3927 ;;		On entry : 0/0
  3928 ;;		On exit  : 0/0
  3929 ;;		Unchanged: 0/0
  3930 ;; Data sizes:     COMRAM   BANK0   BANK1
  3931 ;;      Params:         4       0       0
  3932 ;;      Locals:         2       0       0
  3933 ;;      Temps:          0       0       0
  3934 ;;      Totals:         6       0       0
  3935 ;;Total ram usage:        6 bytes
  3936 ;; Hardware stack levels used: 1
  3937 ;; Hardware stack levels required when called: 2
  3938 ;; This function calls:
  3939 ;;		Nothing
  3940 ;; This function is called by:
  3941 ;;		_mainMenu
  3942 ;; This function uses a non-reentrant model
  3943 ;;
  3944                           
  3945                           	psect	text17
  3946  0018E8                     __ptext17:
  3947                           	callstack 0
  3948  0018E8                     ___awmod:
  3949                           	callstack 26
  3950                           
  3951                           ;incstack = 0
  3952  0018E8  6A63               	clrf	___awmod@sign^0,c
  3953  0018EA  AE5F               	btfss	(___awmod@dividend+1)^0,7,c
  3954  0018EC  D006               	goto	l4005
  3955  0018EE  6C5E               	negf	___awmod@dividend^0,c
  3956  0018F0  1E5F               	comf	(___awmod@dividend+1)^0,f,c
  3957  0018F2  B0D8               	btfsc	status,0,c
  3958  0018F4  2A5F               	incf	(___awmod@dividend+1)^0,f,c
  3959  0018F6  0E01               	movlw	1
  3960  0018F8  6E63               	movwf	___awmod@sign^0,c
  3961  0018FA                     l4005:
  3962  0018FA  AE61               	btfss	(___awmod@divisor+1)^0,7,c
  3963  0018FC  D004               	goto	l4009
  3964  0018FE  6C60               	negf	___awmod@divisor^0,c
  3965  001900  1E61               	comf	(___awmod@divisor+1)^0,f,c
  3966  001902  B0D8               	btfsc	status,0,c
  3967  001904  2A61               	incf	(___awmod@divisor+1)^0,f,c
  3968  001906                     l4009:
  3969  001906  5060               	movf	___awmod@divisor^0,w,c
  3970  001908  1061               	iorwf	(___awmod@divisor+1)^0,w,c
  3971  00190A  E017               	bz	l4025
  3972  00190C  0E01               	movlw	1
  3973  00190E  6E62               	movwf	___awmod@counter^0,c
  3974  001910  D004               	goto	l4015
  3975  001912                     l4013:
  3976  001912  90D8               	bcf	status,0,c
  3977  001914  3660               	rlcf	___awmod@divisor^0,f,c
  3978  001916  3661               	rlcf	(___awmod@divisor+1)^0,f,c
  3979  001918  2A62               	incf	___awmod@counter^0,f,c
  3980  00191A                     l4015:
  3981  00191A  AE61               	btfss	(___awmod@divisor+1)^0,7,c
  3982  00191C  D7FA               	goto	l4013
  3983  00191E                     u2930:
  3984  00191E  5060               	movf	___awmod@divisor^0,w,c
  3985  001920  5C5E               	subwf	___awmod@dividend^0,w,c
  3986  001922  5061               	movf	(___awmod@divisor+1)^0,w,c
  3987  001924  585F               	subwfb	(___awmod@dividend+1)^0,w,c
  3988  001926  E304               	bnc	l4021
  3989  001928  5060               	movf	___awmod@divisor^0,w,c
  3990  00192A  5E5E               	subwf	___awmod@dividend^0,f,c
  3991  00192C  5061               	movf	(___awmod@divisor+1)^0,w,c
  3992  00192E  5A5F               	subwfb	(___awmod@dividend+1)^0,f,c
  3993  001930                     l4021:
  3994  001930  90D8               	bcf	status,0,c
  3995  001932  3261               	rrcf	(___awmod@divisor+1)^0,f,c
  3996  001934  3260               	rrcf	___awmod@divisor^0,f,c
  3997  001936  2E62               	decfsz	___awmod@counter^0,f,c
  3998  001938  D7F2               	goto	u2930
  3999  00193A                     l4025:
  4000  00193A  5063               	movf	___awmod@sign^0,w,c
  4001  00193C  E004               	bz	l4029
  4002  00193E  6C5E               	negf	___awmod@dividend^0,c
  4003  001940  1E5F               	comf	(___awmod@dividend+1)^0,f,c
  4004  001942  B0D8               	btfsc	status,0,c
  4005  001944  2A5F               	incf	(___awmod@dividend+1)^0,f,c
  4006  001946                     l4029:
  4007  001946  C05E  F05E         	movff	___awmod@dividend,?___awmod
  4008  00194A  C05F  F05F         	movff	___awmod@dividend+1,?___awmod+1
  4009  00194E  0012               	return		;funcret
  4010  001950                     __end_of___awmod:
  4011                           	callstack 0
  4012                           
  4013 ;; *************** function _isPressed *****************
  4014 ;; Defined at:
  4015 ;;		line 207 in file "keypad.c"
  4016 ;; Parameters:    Size  Location     Type
  4017 ;;		None
  4018 ;; Auto vars:     Size  Location     Type
  4019 ;;		None
  4020 ;; Return value:  Size  Location     Type
  4021 ;;                  1    wreg      unsigned char 
  4022 ;; Registers used:
  4023 ;;		wreg, status,2, status,0
  4024 ;; Tracked objects:
  4025 ;;		On entry : 0/0
  4026 ;;		On exit  : 0/0
  4027 ;;		Unchanged: 0/0
  4028 ;; Data sizes:     COMRAM   BANK0   BANK1
  4029 ;;      Params:         0       0       0
  4030 ;;      Locals:         1       0       0
  4031 ;;      Temps:          0       0       0
  4032 ;;      Totals:         1       0       0
  4033 ;;Total ram usage:        1 bytes
  4034 ;; Hardware stack levels used: 1
  4035 ;; Hardware stack levels required when called: 2
  4036 ;; This function calls:
  4037 ;;		Nothing
  4038 ;; This function is called by:
  4039 ;;		_menuMotor
  4040 ;;		_timeMotor
  4041 ;; This function uses a non-reentrant model
  4042 ;;
  4043                           
  4044                           	psect	text18
  4045  001FE2                     __ptext18:
  4046                           	callstack 0
  4047  001FE2                     _isPressed:
  4048                           	callstack 27
  4049                           
  4050                           ;keypad.c: 209:  return pressed && (stateSMS == 1||stateSMS == 4);
  4051                           
  4052                           ;incstack = 0
  4053  001FE2  6A5E               	clrf	_isPressed$638^0,c
  4054  001FE4  5040               	movf	_pressed^0,w,c
  4055  001FE6  E007               	bz	l195
  4056  001FE8  043C               	decf	_stateSMS^0,w,c
  4057  001FEA  E003               	bz	u3040
  4058  001FEC  0E04               	movlw	4
  4059  001FEE  183C               	xorwf	_stateSMS^0,w,c
  4060  001FF0  E102               	bnz	l195
  4061  001FF2                     u3040:
  4062  001FF2  0E01               	movlw	1
  4063  001FF4  6E5E               	movwf	_isPressed$638^0,c
  4064  001FF6                     l195:
  4065  001FF6  505E               	movf	_isPressed$638^0,w,c
  4066  001FF8  0012               	return		;funcret
  4067  001FFA                     __end_of_isPressed:
  4068                           	callstack 0
  4069                           
  4070 ;; *************** function _incrementPosition *****************
  4071 ;; Defined at:
  4072 ;;		line 372 in file "EEPROM.c"
  4073 ;; Parameters:    Size  Location     Type
  4074 ;;		None
  4075 ;; Auto vars:     Size  Location     Type
  4076 ;;		None
  4077 ;; Return value:  Size  Location     Type
  4078 ;;                  1    wreg      void 
  4079 ;; Registers used:
  4080 ;;		status,2, status,0
  4081 ;; Tracked objects:
  4082 ;;		On entry : 0/0
  4083 ;;		On exit  : 0/0
  4084 ;;		Unchanged: 0/0
  4085 ;; Data sizes:     COMRAM   BANK0   BANK1
  4086 ;;      Params:         0       0       0
  4087 ;;      Locals:         0       0       0
  4088 ;;      Temps:          0       0       0
  4089 ;;      Totals:         0       0       0
  4090 ;;Total ram usage:        0 bytes
  4091 ;; Hardware stack levels used: 1
  4092 ;; Hardware stack levels required when called: 2
  4093 ;; This function calls:
  4094 ;;		Nothing
  4095 ;; This function is called by:
  4096 ;;		_menuMotor
  4097 ;; This function uses a non-reentrant model
  4098 ;;
  4099                           
  4100                           	psect	text19
  4101  00017C                     __ptext19:
  4102                           	callstack 0
  4103  00017C                     _incrementPosition:
  4104                           	callstack 27
  4105                           
  4106                           ;EEPROM.c: 373:     position++;
  4107                           
  4108                           ;incstack = 0
  4109  00017C  2A1F               	incf	_position^0,f,c
  4110  00017E  0012               	return		;funcret
  4111  000180                     __end_of_incrementPosition:
  4112                           	callstack 0
  4113                           
  4114 ;; *************** function _getPresses *****************
  4115 ;; Defined at:
  4116 ;;		line 242 in file "keypad.c"
  4117 ;; Parameters:    Size  Location     Type
  4118 ;;		None
  4119 ;; Auto vars:     Size  Location     Type
  4120 ;;		None
  4121 ;; Return value:  Size  Location     Type
  4122 ;;                  1    wreg      unsigned char 
  4123 ;; Registers used:
  4124 ;;		wreg, status,2
  4125 ;; Tracked objects:
  4126 ;;		On entry : 0/0
  4127 ;;		On exit  : 0/0
  4128 ;;		Unchanged: 0/0
  4129 ;; Data sizes:     COMRAM   BANK0   BANK1
  4130 ;;      Params:         0       0       0
  4131 ;;      Locals:         0       0       0
  4132 ;;      Temps:          0       0       0
  4133 ;;      Totals:         0       0       0
  4134 ;;Total ram usage:        0 bytes
  4135 ;; Hardware stack levels used: 1
  4136 ;; Hardware stack levels required when called: 2
  4137 ;; This function calls:
  4138 ;;		Nothing
  4139 ;; This function is called by:
  4140 ;;		_menuMotor
  4141 ;; This function uses a non-reentrant model
  4142 ;;
  4143                           
  4144                           	psect	text20
  4145  000180                     __ptext20:
  4146                           	callstack 0
  4147  000180                     _getPresses:
  4148                           	callstack 27
  4149                           
  4150                           ;keypad.c: 243:     return available;
  4151                           
  4152                           ;incstack = 0
  4153  000180  503E               	movf	_available^0,w,c
  4154  000182  0012               	return		;funcret
  4155  000184                     __end_of_getPresses:
  4156                           	callstack 0
  4157                           
  4158 ;; *************** function _displayTimeRemaining *****************
  4159 ;; Defined at:
  4160 ;;		line 466 in file "time.c"
  4161 ;; Parameters:    Size  Location     Type
  4162 ;;		None
  4163 ;; Auto vars:     Size  Location     Type
  4164 ;;		None
  4165 ;; Return value:  Size  Location     Type
  4166 ;;                  1    wreg      void 
  4167 ;; Registers used:
  4168 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4169 ;; Tracked objects:
  4170 ;;		On entry : 0/0
  4171 ;;		On exit  : 0/0
  4172 ;;		Unchanged: 0/0
  4173 ;; Data sizes:     COMRAM   BANK0   BANK1
  4174 ;;      Params:         0       0       0
  4175 ;;      Locals:         0       0       0
  4176 ;;      Temps:          0       0       0
  4177 ;;      Totals:         0       0       0
  4178 ;;Total ram usage:        0 bytes
  4179 ;; Hardware stack levels used: 1
  4180 ;; Hardware stack levels required when called: 5
  4181 ;; This function calls:
  4182 ;;		_LcGotoXY
  4183 ;; This function is called by:
  4184 ;;		_menuMotor
  4185 ;; This function uses a non-reentrant model
  4186 ;;
  4187                           
  4188                           	psect	text21
  4189  000076                     __ptext21:
  4190                           	callstack 0
  4191  000076                     _displayTimeRemaining:
  4192                           	callstack 24
  4193                           
  4194                           ;time.c: 467:     game = 1;
  4195                           
  4196                           ;incstack = 0
  4197  000076  0E01               	movlw	1
  4198  000078  6E12               	movwf	_game^0,c
  4199                           
  4200                           ;time.c: 468:     LcGotoXY(11,0);
  4201  00007A  0E00               	movlw	0
  4202  00007C  6E66               	movwf	LcGotoXY@Row^0,c
  4203  00007E  0E0B               	movlw	11
  4204  000080  ECA6  F00E         	call	_LcGotoXY
  4205                           
  4206                           ;time.c: 469:     state = 20;
  4207  000084  EF9C  F000         	goto	PL94	;call to abstracted procedure
  4208  000088                     __end_of_displayTimeRemaining:
  4209                           	callstack 0
  4210                           
  4211 ;; *************** function _displaySysTime *****************
  4212 ;; Defined at:
  4213 ;;		line 501 in file "time.c"
  4214 ;; Parameters:    Size  Location     Type
  4215 ;;		None
  4216 ;; Auto vars:     Size  Location     Type
  4217 ;;		None
  4218 ;; Return value:  Size  Location     Type
  4219 ;;                  1    wreg      void 
  4220 ;; Registers used:
  4221 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4222 ;; Tracked objects:
  4223 ;;		On entry : 0/0
  4224 ;;		On exit  : 0/0
  4225 ;;		Unchanged: 0/0
  4226 ;; Data sizes:     COMRAM   BANK0   BANK1
  4227 ;;      Params:         0       0       0
  4228 ;;      Locals:         0       0       0
  4229 ;;      Temps:          0       0       0
  4230 ;;      Totals:         0       0       0
  4231 ;;Total ram usage:        0 bytes
  4232 ;; Hardware stack levels used: 1
  4233 ;; Hardware stack levels required when called: 5
  4234 ;; This function calls:
  4235 ;;		_LcGotoXY
  4236 ;; This function is called by:
  4237 ;;		_menuMotor
  4238 ;; This function uses a non-reentrant model
  4239 ;;
  4240                           
  4241                           	psect	text22
  4242  0000EC                     __ptext22:
  4243                           	callstack 0
  4244  0000EC                     _displaySysTime:
  4245                           	callstack 24
  4246                           
  4247                           ;time.c: 502:     state = 30;
  4248                           
  4249                           ;incstack = 0
  4250  0000EC  0E1E               	movlw	30
  4251                           
  4252                           ;time.c: 503:     LcGotoXY(0,1);
  4253  0000EE  ECE8  F008         	call	PL58	;call to abstracted procedure
  4254  0000F2  EFA6  F00E         	goto	_LcGotoXY
  4255  0000F6                     __end_of_displaySysTime:
  4256                           	callstack 0
  4257                           
  4258 ;; *************** function _displayString *****************
  4259 ;; Defined at:
  4260 ;;		line 444 in file "Menu.c"
  4261 ;; Parameters:    Size  Location     Type
  4262 ;;  string          1   19[COMRAM] PTR unsigned char 
  4263 ;;		 -> sysTime(14), modifyTimeString(13), TIME(16), LOGREGSCREEN(12), 
  4264 ;;		 -> LOGINMENU(22), 
  4265 ;; Auto vars:     Size  Location     Type
  4266 ;;		None
  4267 ;; Return value:  Size  Location     Type
  4268 ;;                  1    wreg      void 
  4269 ;; Registers used:
  4270 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4271 ;; Tracked objects:
  4272 ;;		On entry : 0/0
  4273 ;;		On exit  : 0/0
  4274 ;;		Unchanged: 0/0
  4275 ;; Data sizes:     COMRAM   BANK0   BANK1
  4276 ;;      Params:         1       0       0
  4277 ;;      Locals:         0       0       0
  4278 ;;      Temps:          0       0       0
  4279 ;;      Totals:         1       0       0
  4280 ;;Total ram usage:        1 bytes
  4281 ;; Hardware stack levels used: 1
  4282 ;; Hardware stack levels required when called: 6
  4283 ;; This function calls:
  4284 ;;		_LcPutChar
  4285 ;;		_nextRow
  4286 ;; This function is called by:
  4287 ;;		_menuMotor
  4288 ;; This function uses a non-reentrant model
  4289 ;;
  4290                           
  4291                           	psect	text23
  4292  001DA6                     __ptext23:
  4293                           	callstack 0
  4294  001DA6                     _displayString:
  4295                           	callstack 0
  4296                           
  4297                           ;Menu.c: 445:     if (string[LCDcol+LCDcolm] != '\0'){
  4298                           
  4299                           ;incstack = 0
  4300  001DA6  D810               	call	PL52	;call to abstracted procedure
  4301  001DA8  6ED9               	movwf	fsr2l,c
  4302  001DAA  6ADA               	clrf	fsr2h,c
  4303  001DAC  50DF               	movf	indf2,w,c
  4304  001DAE  E102 EF54  F000    	bz	_nextRow
  4305                           
  4306                           ;Menu.c: 446:         LcPutChar(string[LCDcol+LCDcolm]);
  4307  001DB4  D809               	call	PL52	;call to abstracted procedure
  4308  001DB6  D804               	call	PL36	;call to abstracted procedure
  4309  001DB8  ECE8  F00E         	call	_LcPutChar
  4310                           
  4311                           ;Menu.c: 447:         LCDcol++;
  4312  001DBC  2A33               	incf	_LCDcol^0,f,c
  4313                           
  4314                           ;Menu.c: 448:     } else {
  4315  001DBE  0012               	return	
  4316  001DC0                     __end_of_displayString:
  4317                           	callstack 0
  4318  001DC0                     PL36:
  4319                           	callstack 23
  4320  001DC0  6ED9               	movwf	fsr2l,c
  4321  001DC2  6ADA               	clrf	fsr2h,c
  4322  001DC4  50DF               	movf	indf2,w,c
  4323  001DC6  0012               	return	
  4324  001DC8                     __end_ofPL36:
  4325                           	callstack 0
  4326  001DC8                     PL52:
  4327                           	callstack 23
  4328  001DC8  506C               	movf	displayString@string^0,w,c
  4329  001DCA  2433               	addwf	_LCDcol^0,w,c
  4330  001DCC  2432               	addwf	_LCDcolm^0,w,c
  4331  001DCE  0012               	return	
  4332  001DD0                     __end_ofPL52:
  4333                           	callstack 0
  4334                           
  4335 ;; *************** function _displayScoresMarquee *****************
  4336 ;; Defined at:
  4337 ;;		line 289 in file "EEPROM.c"
  4338 ;; Parameters:    Size  Location     Type
  4339 ;;		None
  4340 ;; Auto vars:     Size  Location     Type
  4341 ;;		None
  4342 ;; Return value:  Size  Location     Type
  4343 ;;                  1    wreg      void 
  4344 ;; Registers used:
  4345 ;;		wreg, status,2
  4346 ;; Tracked objects:
  4347 ;;		On entry : 0/0
  4348 ;;		On exit  : 0/0
  4349 ;;		Unchanged: 0/0
  4350 ;; Data sizes:     COMRAM   BANK0   BANK1
  4351 ;;      Params:         0       0       0
  4352 ;;      Locals:         0       0       0
  4353 ;;      Temps:          0       0       0
  4354 ;;      Totals:         0       0       0
  4355 ;;Total ram usage:        0 bytes
  4356 ;; Hardware stack levels used: 1
  4357 ;; Hardware stack levels required when called: 2
  4358 ;; This function calls:
  4359 ;;		Nothing
  4360 ;; This function is called by:
  4361 ;;		_menuMotor
  4362 ;; This function uses a non-reentrant model
  4363 ;;
  4364                           
  4365                           	psect	text24
  4366  00013E                     __ptext24:
  4367                           	callstack 0
  4368  00013E                     _displayScoresMarquee:
  4369                           	callstack 27
  4370                           
  4371                           ;EEPROM.c: 290:     state = 50;
  4372                           
  4373                           ;incstack = 0
  4374  00013E  0E32               	movlw	50
  4375  000140  6E1E               	movwf	_state@EEPROM$F1761^0,c
  4376                           
  4377                           ;EEPROM.c: 291:     status = 0;
  4378  000142  6A1C               	clrf	_status^0,c
  4379  000144  0012               	return		;funcret
  4380  000146                     __end_of_displayScoresMarquee:
  4381                           	callstack 0
  4382                           
  4383 ;; *************** function _displayResults *****************
  4384 ;; Defined at:
  4385 ;;		line 487 in file "Menu.c"
  4386 ;; Parameters:    Size  Location     Type
  4387 ;;		None
  4388 ;; Auto vars:     Size  Location     Type
  4389 ;;		None
  4390 ;; Return value:  Size  Location     Type
  4391 ;;                  1    wreg      void 
  4392 ;; Registers used:
  4393 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4394 ;; Tracked objects:
  4395 ;;		On entry : 0/0
  4396 ;;		On exit  : 0/0
  4397 ;;		Unchanged: 0/0
  4398 ;; Data sizes:     COMRAM   BANK0   BANK1
  4399 ;;      Params:         0       0       0
  4400 ;;      Locals:         0       0       0
  4401 ;;      Temps:          0       0       0
  4402 ;;      Totals:         0       0       0
  4403 ;;Total ram usage:        0 bytes
  4404 ;; Hardware stack levels used: 1
  4405 ;; Hardware stack levels required when called: 6
  4406 ;; This function calls:
  4407 ;;		_LcPutChar
  4408 ;;		_nextRow
  4409 ;; This function is called by:
  4410 ;;		_menuMotor
  4411 ;; This function uses a non-reentrant model
  4412 ;;
  4413                           
  4414                           	psect	text25
  4415  001DFA                     __ptext25:
  4416                           	callstack 0
  4417  001DFA                     _displayResults:
  4418                           	callstack 0
  4419                           
  4420                           ;Menu.c: 488:     if (RESULTS[LCDrow][LCDcol] != '\0'){
  4421                           
  4422                           ;incstack = 0
  4423  001DFA  D80D               	call	PL40	;call to abstracted procedure
  4424  001DFC  6ED9               	movwf	fsr2l,c
  4425  001DFE  6ADA               	clrf	fsr2h,c
  4426  001E00  50DF               	movf	indf2,w,c
  4427  001E02  E102 EF54  F000    	bz	_nextRow
  4428                           
  4429                           ;Menu.c: 489:         LcPutChar(RESULTS[LCDrow][LCDcol]);
  4430  001E08  D806               	call	PL40	;call to abstracted procedure
  4431  001E0A  ECE0  F00E         	call	PL36	;call to abstracted procedure
  4432  001E0E  ECE8  F00E         	call	_LcPutChar
  4433                           
  4434                           ;Menu.c: 490:         LCDcol++;
  4435  001E12  2A33               	incf	_LCDcol^0,f,c
  4436                           
  4437                           ;Menu.c: 491:     } else {
  4438  001E14  0012               	return	
  4439  001E16                     __end_of_displayResults:
  4440                           	callstack 0
  4441  001E16                     PL40:
  4442                           	callstack 23
  4443  001E16  5034               	movf	_LCDrow^0,w,c
  4444  001E18  0D0B               	mullw	11
  4445  001E1A  50F3               	movf	243,w,c
  4446  001E1C  0F80               	addlw	low _RESULTS
  4447  001E1E  2433               	addwf	_LCDcol^0,w,c
  4448  001E20  0012               	return	
  4449  001E22                     __end_ofPL40:
  4450                           	callstack 0
  4451                           
  4452 ;; *************** function _displayLogOut *****************
  4453 ;; Defined at:
  4454 ;;		line 496 in file "Menu.c"
  4455 ;; Parameters:    Size  Location     Type
  4456 ;;		None
  4457 ;; Auto vars:     Size  Location     Type
  4458 ;;		None
  4459 ;; Return value:  Size  Location     Type
  4460 ;;                  1    wreg      void 
  4461 ;; Registers used:
  4462 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4463 ;; Tracked objects:
  4464 ;;		On entry : 0/0
  4465 ;;		On exit  : 0/0
  4466 ;;		Unchanged: 0/0
  4467 ;; Data sizes:     COMRAM   BANK0   BANK1
  4468 ;;      Params:         0       0       0
  4469 ;;      Locals:         0       0       0
  4470 ;;      Temps:          0       0       0
  4471 ;;      Totals:         0       0       0
  4472 ;;Total ram usage:        0 bytes
  4473 ;; Hardware stack levels used: 1
  4474 ;; Hardware stack levels required when called: 6
  4475 ;; This function calls:
  4476 ;;		_LcPutChar
  4477 ;;		_nextRow
  4478 ;; This function is called by:
  4479 ;;		_menuMotor
  4480 ;; This function uses a non-reentrant model
  4481 ;;
  4482                           
  4483                           	psect	text26
  4484  001BCC                     __ptext26:
  4485                           	callstack 0
  4486  001BCC                     _displayLogOut:
  4487                           	callstack 23
  4488                           
  4489                           ;Menu.c: 497:     if (LOGOUTMESSAGE[LCDcol] != '\0'){
  4490                           
  4491                           ;incstack = 0
  4492  001BCC  5033               	movf	_LCDcol^0,w,c
  4493  001BCE  0F96               	addlw	low _LOGOUTMESSAGE
  4494  001BD0  6ED9               	movwf	fsr2l,c
  4495  001BD2  6ADA               	clrf	fsr2h,c
  4496  001BD4  50DF               	movf	indf2,w,c
  4497  001BD6  E008               	bz	l6037
  4498                           
  4499                           ;Menu.c: 498:         LcPutChar(LOGOUTMESSAGE[LCDcol]);
  4500  001BD8  5033               	movf	_LCDcol^0,w,c
  4501  001BDA  0F96               	addlw	low _LOGOUTMESSAGE
  4502  001BDC  ECE0  F00E         	call	PL36	;call to abstracted procedure
  4503  001BE0  ECE8  F00E         	call	_LcPutChar
  4504                           
  4505                           ;Menu.c: 499:         LCDcol++;
  4506  001BE4  2A33               	incf	_LCDcol^0,f,c
  4507                           
  4508                           ;Menu.c: 500:     } else if (mUser.username[LCDcolm] != '\0' && LCDcolm < 8) {
  4509  001BE6  0012               	return	
  4510  001BE8                     l6037:
  4511  001BE8  5032               	movf	_LCDcolm^0,w,c
  4512  001BEA  ECAE  F004         	call	PL34	;call to abstracted procedure
  4513  001BEE  E102 EF54  F000    	bz	_nextRow
  4514  001BF4  0E08               	movlw	8
  4515  001BF6  6032               	cpfslt	_LCDcolm^0,c
  4516  001BF8  EF54  F000         	goto	_nextRow
  4517                           
  4518                           ;Menu.c: 501:         LcPutChar(mUser.username[LCDcolm]);
  4519  001BFC  5032               	movf	_LCDcolm^0,w,c
  4520  001BFE  ECAE  F004         	call	PL34	;call to abstracted procedure
  4521  001C02  ECE8  F00E         	call	_LcPutChar
  4522                           
  4523                           ;Menu.c: 502:         LCDcolm++;
  4524  001C06  2A32               	incf	_LCDcolm^0,f,c
  4525                           
  4526                           ;Menu.c: 503:     } else {
  4527  001C08  0012               	return	
  4528  001C0A                     __end_of_displayLogOut:
  4529                           	callstack 0
  4530                           
  4531 ;; *************** function _displayError *****************
  4532 ;; Defined at:
  4533 ;;		line 473 in file "Menu.c"
  4534 ;; Parameters:    Size  Location     Type
  4535 ;;		None
  4536 ;; Auto vars:     Size  Location     Type
  4537 ;;		None
  4538 ;; Return value:  Size  Location     Type
  4539 ;;                  1    wreg      void 
  4540 ;; Registers used:
  4541 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4542 ;; Tracked objects:
  4543 ;;		On entry : 0/0
  4544 ;;		On exit  : 0/0
  4545 ;;		Unchanged: 0/0
  4546 ;; Data sizes:     COMRAM   BANK0   BANK1
  4547 ;;      Params:         0       0       0
  4548 ;;      Locals:         0       0       0
  4549 ;;      Temps:          0       0       0
  4550 ;;      Totals:         0       0       0
  4551 ;;Total ram usage:        0 bytes
  4552 ;; Hardware stack levels used: 1
  4553 ;; Hardware stack levels required when called: 6
  4554 ;; This function calls:
  4555 ;;		_LcPutChar
  4556 ;;		_nextRow
  4557 ;; This function is called by:
  4558 ;;		_menuMotor
  4559 ;; This function uses a non-reentrant model
  4560 ;;
  4561                           
  4562                           	psect	text27
  4563  001C80                     __ptext27:
  4564                           	callstack 0
  4565  001C80                     _displayError:
  4566                           	callstack 23
  4567                           
  4568                           ;Menu.c: 474:     if (LCDrow == 0){
  4569                           
  4570                           ;incstack = 0
  4571  001C80  5034               	movf	_LCDrow^0,w,c
  4572  001C82  E110               	bnz	l5999
  4573                           
  4574                           ;Menu.c: 475:        if (ERROR[LCDcol] != '\0'){
  4575  001C84  5033               	movf	_LCDcol^0,w,c
  4576  001C86  0F9F               	addlw	low _ERROR
  4577  001C88  6ED9               	movwf	fsr2l,c
  4578  001C8A  6ADA               	clrf	fsr2h,c
  4579  001C8C  50DF               	movf	indf2,w,c
  4580  001C8E  E102 EF54  F000    	bz	_nextRow
  4581                           
  4582                           ;Menu.c: 476:             LcPutChar(ERROR[LCDcol]);
  4583  001C94  5033               	movf	_LCDcol^0,w,c
  4584  001C96  0F9F               	addlw	low _ERROR
  4585  001C98  ECE0  F00E         	call	PL36	;call to abstracted procedure
  4586  001C9C  ECE8  F00E         	call	_LcPutChar
  4587                           
  4588                           ;Menu.c: 477:             LCDcol++;
  4589  001CA0  2A33               	incf	_LCDcol^0,f,c
  4590                           
  4591                           ;Menu.c: 478:         } else {
  4592  001CA2  0012               	return	
  4593  001CA4                     l5999:
  4594                           
  4595                           ;Menu.c: 482:         LcPutChar(val);
  4596  001CA4  5031               	movf	_val^0,w,c
  4597  001CA6  ECE8  F00E         	call	_LcPutChar
  4598                           
  4599                           ;Menu.c: 483:         LcPutChar(LCDcolm);
  4600  001CAA  5032               	movf	_LCDcolm^0,w,c
  4601  001CAC  ECE8  F00E         	call	_LcPutChar
  4602                           
  4603                           ;Menu.c: 484:         LCDrow++;
  4604  001CB0  2A34               	incf	_LCDrow^0,f,c
  4605  001CB2  0012               	return		;funcret
  4606  001CB4                     __end_of_displayError:
  4607                           	callstack 0
  4608                           
  4609 ;; *************** function _nextRow *****************
  4610 ;; Defined at:
  4611 ;;		line 508 in file "Menu.c"
  4612 ;; Parameters:    Size  Location     Type
  4613 ;;		None
  4614 ;; Auto vars:     Size  Location     Type
  4615 ;;		None
  4616 ;; Return value:  Size  Location     Type
  4617 ;;                  1    wreg      void 
  4618 ;; Registers used:
  4619 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4620 ;; Tracked objects:
  4621 ;;		On entry : 0/0
  4622 ;;		On exit  : 0/0
  4623 ;;		Unchanged: 0/0
  4624 ;; Data sizes:     COMRAM   BANK0   BANK1
  4625 ;;      Params:         0       0       0
  4626 ;;      Locals:         0       0       0
  4627 ;;      Temps:          0       0       0
  4628 ;;      Totals:         0       0       0
  4629 ;;Total ram usage:        0 bytes
  4630 ;; Hardware stack levels used: 1
  4631 ;; Hardware stack levels required when called: 5
  4632 ;; This function calls:
  4633 ;;		_LcGotoXY
  4634 ;; This function is called by:
  4635 ;;		_displayString
  4636 ;;		_mainMenu
  4637 ;;		_displayError
  4638 ;;		_displayResults
  4639 ;;		_displayLogOut
  4640 ;; This function uses a non-reentrant model
  4641 ;;
  4642                           
  4643                           	psect	text28
  4644  0000A8                     __ptext28:
  4645                           	callstack 0
  4646  0000A8                     _nextRow:
  4647                           	callstack 23
  4648                           
  4649                           ;Menu.c: 509:     LCDrow++;
  4650                           
  4651                           ;incstack = 0
  4652  0000A8  2A34               	incf	_LCDrow^0,f,c
  4653                           
  4654                           ;Menu.c: 510:     LcGotoXY(0,1);
  4655  0000AA  ECEC  F008         	call	PL60	;call to abstracted procedure
  4656  0000AE  ECA6  F00E         	call	_LcGotoXY
  4657                           
  4658                           ;Menu.c: 511:     LCDcol = 0;
  4659  0000B2  6A33               	clrf	_LCDcol^0,c
  4660  0000B4  0012               	return		;funcret
  4661  0000B6                     __end_of_nextRow:
  4662                           	callstack 0
  4663                           
  4664 ;; *************** function _SiRecievedByte *****************
  4665 ;; Defined at:
  4666 ;;		line 45 in file "SIO.c"
  4667 ;; Parameters:    Size  Location     Type
  4668 ;;		None
  4669 ;; Auto vars:     Size  Location     Type
  4670 ;;		None
  4671 ;; Return value:  Size  Location     Type
  4672 ;;                  1    wreg      unsigned char 
  4673 ;; Registers used:
  4674 ;;		wreg
  4675 ;; Tracked objects:
  4676 ;;		On entry : 0/0
  4677 ;;		On exit  : 0/0
  4678 ;;		Unchanged: 0/0
  4679 ;; Data sizes:     COMRAM   BANK0   BANK1
  4680 ;;      Params:         0       0       0
  4681 ;;      Locals:         0       0       0
  4682 ;;      Temps:          0       0       0
  4683 ;;      Totals:         0       0       0
  4684 ;;Total ram usage:        0 bytes
  4685 ;; Hardware stack levels used: 1
  4686 ;; Hardware stack levels required when called: 2
  4687 ;; This function calls:
  4688 ;;		Nothing
  4689 ;; This function is called by:
  4690 ;;		_menuMotor
  4691 ;; This function uses a non-reentrant model
  4692 ;;
  4693                           
  4694                           	psect	text29
  4695  001FFA                     __ptext29:
  4696                           	callstack 0
  4697  001FFA                     _SiRecievedByte:
  4698                           	callstack 27
  4699                           
  4700                           ;SIO.c: 46:     return PIR1bits.RCIF;
  4701                           
  4702                           ;incstack = 0
  4703  001FFA  BA9E               	btfsc	158,5,c	;volatile
  4704  001FFC  0C01               	retlw	1
  4705  001FFE  0C00               	retlw	0	;funcret
  4706  002000                     __end_of_SiRecievedByte:
  4707                           	callstack 0
  4708                           
  4709 ;; *************** function _SiReadByte *****************
  4710 ;; Defined at:
  4711 ;;		line 49 in file "SIO.c"
  4712 ;; Parameters:    Size  Location     Type
  4713 ;;		None
  4714 ;; Auto vars:     Size  Location     Type
  4715 ;;		None
  4716 ;; Return value:  Size  Location     Type
  4717 ;;                  1    wreg      unsigned char 
  4718 ;; Registers used:
  4719 ;;		wreg, status,2
  4720 ;; Tracked objects:
  4721 ;;		On entry : 0/0
  4722 ;;		On exit  : 0/0
  4723 ;;		Unchanged: 0/0
  4724 ;; Data sizes:     COMRAM   BANK0   BANK1
  4725 ;;      Params:         0       0       0
  4726 ;;      Locals:         0       0       0
  4727 ;;      Temps:          0       0       0
  4728 ;;      Totals:         0       0       0
  4729 ;;Total ram usage:        0 bytes
  4730 ;; Hardware stack levels used: 1
  4731 ;; Hardware stack levels required when called: 2
  4732 ;; This function calls:
  4733 ;;		Nothing
  4734 ;; This function is called by:
  4735 ;;		_menuMotor
  4736 ;; This function uses a non-reentrant model
  4737 ;;
  4738                           
  4739                           	psect	text30
  4740  000184                     __ptext30:
  4741                           	callstack 0
  4742  000184                     _SiReadByte:
  4743                           	callstack 27
  4744                           
  4745                           ;SIO.c: 50:     return RCREG;
  4746                           
  4747                           ;incstack = 0
  4748  000184  50AE               	movf	174,w,c	;volatile
  4749  000186  0012               	return		;funcret
  4750  000188                     __end_of_SiReadByte:
  4751                           	callstack 0
  4752                           
  4753 ;; *************** function _LcCursorOn *****************
  4754 ;; Defined at:
  4755 ;;		line 112 in file "LcTLCD.c"
  4756 ;; Parameters:    Size  Location     Type
  4757 ;;		None
  4758 ;; Auto vars:     Size  Location     Type
  4759 ;;		None
  4760 ;; Return value:  Size  Location     Type
  4761 ;;                  1    wreg      void 
  4762 ;; Registers used:
  4763 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4764 ;; Tracked objects:
  4765 ;;		On entry : 0/0
  4766 ;;		On exit  : 0/0
  4767 ;;		Unchanged: 0/0
  4768 ;; Data sizes:     COMRAM   BANK0   BANK1
  4769 ;;      Params:         0       0       0
  4770 ;;      Locals:         0       0       0
  4771 ;;      Temps:          0       0       0
  4772 ;;      Totals:         0       0       0
  4773 ;;Total ram usage:        0 bytes
  4774 ;; Hardware stack levels used: 1
  4775 ;; Hardware stack levels required when called: 4
  4776 ;; This function calls:
  4777 ;;		_CantaIR
  4778 ;;		_WaitForBusy
  4779 ;; This function is called by:
  4780 ;;		_menuMotor
  4781 ;;		_timeMotor
  4782 ;; This function uses a non-reentrant model
  4783 ;;
  4784                           
  4785                           	psect	text31
  4786  0000F6                     __ptext31:
  4787                           	callstack 0
  4788  0000F6                     _LcCursorOn:
  4789                           	callstack 25
  4790                           
  4791                           ;LcTLCD.c: 115:  WaitForBusy();
  4792                           
  4793                           ;incstack = 0
  4794  0000F6  EC05  F00E         	call	_WaitForBusy	;wreg free
  4795                           
  4796                           ;LcTLCD.c: 116:  CantaIR(0x08 | 0x04 | 0x02);
  4797  0000FA  0E0E               	movlw	14
  4798  0000FC  EFBD  F00F         	goto	_CantaIR
  4799  000100                     __end_of_LcCursorOn:
  4800                           	callstack 0
  4801                           
  4802 ;; *************** function _LcCursorOff *****************
  4803 ;; Defined at:
  4804 ;;		line 119 in file "LcTLCD.c"
  4805 ;; Parameters:    Size  Location     Type
  4806 ;;		None
  4807 ;; Auto vars:     Size  Location     Type
  4808 ;;		None
  4809 ;; Return value:  Size  Location     Type
  4810 ;;                  1    wreg      void 
  4811 ;; Registers used:
  4812 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4813 ;; Tracked objects:
  4814 ;;		On entry : 0/0
  4815 ;;		On exit  : 0/0
  4816 ;;		Unchanged: 0/0
  4817 ;; Data sizes:     COMRAM   BANK0   BANK1
  4818 ;;      Params:         0       0       0
  4819 ;;      Locals:         0       0       0
  4820 ;;      Temps:          0       0       0
  4821 ;;      Totals:         0       0       0
  4822 ;;Total ram usage:        0 bytes
  4823 ;; Hardware stack levels used: 1
  4824 ;; Hardware stack levels required when called: 4
  4825 ;; This function calls:
  4826 ;;		_CantaIR
  4827 ;;		_WaitForBusy
  4828 ;; This function is called by:
  4829 ;;		_menuMotor
  4830 ;; This function uses a non-reentrant model
  4831 ;;
  4832                           
  4833                           	psect	text32
  4834  000100                     __ptext32:
  4835                           	callstack 0
  4836  000100                     _LcCursorOff:
  4837                           	callstack 25
  4838                           
  4839                           ;LcTLCD.c: 122:  WaitForBusy();
  4840                           
  4841                           ;incstack = 0
  4842  000100  EC05  F00E         	call	_WaitForBusy	;wreg free
  4843                           
  4844                           ;LcTLCD.c: 123:  CantaIR(0x08 | 0x04);
  4845  000104  0E0C               	movlw	12
  4846  000106  EFBD  F00F         	goto	_CantaIR
  4847  00010A                     __end_of_LcCursorOff:
  4848                           	callstack 0
  4849                           
  4850 ;; *************** function _KeSetMode *****************
  4851 ;; Defined at:
  4852 ;;		line 247 in file "keypad.c"
  4853 ;; Parameters:    Size  Location     Type
  4854 ;;  menuMode        1    wreg     unsigned char 
  4855 ;; Auto vars:     Size  Location     Type
  4856 ;;  menuMode        1    6[COMRAM] unsigned char 
  4857 ;; Return value:  Size  Location     Type
  4858 ;;                  1    wreg      void 
  4859 ;; Registers used:
  4860 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4861 ;; Tracked objects:
  4862 ;;		On entry : 0/0
  4863 ;;		On exit  : 0/0
  4864 ;;		Unchanged: 0/0
  4865 ;; Data sizes:     COMRAM   BANK0   BANK1
  4866 ;;      Params:         0       0       0
  4867 ;;      Locals:         1       0       0
  4868 ;;      Temps:          0       0       0
  4869 ;;      Totals:         1       0       0
  4870 ;;Total ram usage:        1 bytes
  4871 ;; Hardware stack levels used: 1
  4872 ;; Hardware stack levels required when called: 3
  4873 ;; This function calls:
  4874 ;;		_TiResetTics
  4875 ;; This function is called by:
  4876 ;;		_menuMotor
  4877 ;; This function uses a non-reentrant model
  4878 ;;
  4879                           
  4880                           	psect	text33
  4881  001E6E                     __ptext33:
  4882                           	callstack 0
  4883  001E6E                     _KeSetMode:
  4884                           	callstack 26
  4885                           
  4886                           ;incstack = 0
  4887                           ;KeSetMode@menuMode stored from wreg
  4888  001E6E  6E5F               	movwf	KeSetMode@menuMode^0,c
  4889                           
  4890                           ;keypad.c: 248:     if (menuMode == 1){
  4891  001E70  045F               	decf	KeSetMode@menuMode^0,w,c
  4892  001E72  E108               	bnz	l5931
  4893                           
  4894                           ;keypad.c: 249:         previous = 0;
  4895  001E74  6A41               	clrf	_previous^0,c
  4896                           
  4897                           ;keypad.c: 250:         numPresses = 0;
  4898  001E76  6A3F               	clrf	_numPresses^0,c
  4899                           
  4900                           ;keypad.c: 251:         available = 0;
  4901  001E78  6A3E               	clrf	_available^0,c
  4902                           
  4903                           ;keypad.c: 252:         stateSMS = 2;
  4904  001E7A  0E02               	movlw	2
  4905  001E7C  6E3C               	movwf	_stateSMS^0,c
  4906                           
  4907                           ;keypad.c: 253:         TiResetTics(timer_SMS);
  4908  001E7E  5043               	movf	_timer_SMS^0,w,c
  4909  001E80  EFAD  F00F         	goto	_TiResetTics
  4910  001E84                     l5931:
  4911  001E84  505F               	movf	KeSetMode@menuMode^0,w,c
  4912  001E86  A4D8               	btfss	status,2,c
  4913  001E88  0012               	return	
  4914                           
  4915                           ;keypad.c: 255:         stateSMS = 4;
  4916  001E8A  D000               	goto	PL80	;call to abstracted procedure
  4917  001E8C                     __end_of_KeSetMode:
  4918                           	callstack 0
  4919  001E8C                     PL80:
  4920                           	callstack 26
  4921  001E8C  0E04               	movlw	4
  4922  001E8E  6E3C               	movwf	_stateSMS^0,c
  4923  001E90  0C04               	retlw	4
  4924  001E92                     __end_ofPL80:
  4925                           	callstack 0
  4926                           
  4927 ;; *************** function _KeGetCharValue *****************
  4928 ;; Defined at:
  4929 ;;		line 221 in file "keypad.c"
  4930 ;; Parameters:    Size  Location     Type
  4931 ;;		None
  4932 ;; Auto vars:     Size  Location     Type
  4933 ;;		None
  4934 ;; Return value:  Size  Location     Type
  4935 ;;                  1    wreg      unsigned char 
  4936 ;; Registers used:
  4937 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4938 ;; Tracked objects:
  4939 ;;		On entry : 0/0
  4940 ;;		On exit  : 0/0
  4941 ;;		Unchanged: 0/0
  4942 ;; Data sizes:     COMRAM   BANK0   BANK1
  4943 ;;      Params:         0       0       0
  4944 ;;      Locals:         0       0       0
  4945 ;;      Temps:          0       0       0
  4946 ;;      Totals:         0       0       0
  4947 ;;Total ram usage:        0 bytes
  4948 ;; Hardware stack levels used: 1
  4949 ;; Hardware stack levels required when called: 4
  4950 ;; This function calls:
  4951 ;;		_KeGetGenericValue
  4952 ;;		_getFullValue
  4953 ;; This function is called by:
  4954 ;;		_menuMotor
  4955 ;; This function uses a non-reentrant model
  4956 ;;
  4957                           
  4958                           	psect	text34
  4959  000146                     __ptext34:
  4960                           	callstack 0
  4961  000146                     _KeGetCharValue:
  4962                           	callstack 25
  4963                           
  4964                           ;keypad.c: 222:     return getFullValue(KeGetGenericValue());
  4965                           
  4966                           ;incstack = 0
  4967  000146  EC8D  F00F         	call	_KeGetGenericValue	;wreg free
  4968  00014A  EF72  F00D         	goto	_getFullValue
  4969  00014E                     __end_of_KeGetCharValue:
  4970                           	callstack 0
  4971                           
  4972 ;; *************** function _getFullValue *****************
  4973 ;; Defined at:
  4974 ;;		line 230 in file "keypad.c"
  4975 ;; Parameters:    Size  Location     Type
  4976 ;;  generic         1    wreg     unsigned char 
  4977 ;; Auto vars:     Size  Location     Type
  4978 ;;  generic         1    9[COMRAM] unsigned char 
  4979 ;; Return value:  Size  Location     Type
  4980 ;;                  1    wreg      unsigned char 
  4981 ;; Registers used:
  4982 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
  4983 ;; Tracked objects:
  4984 ;;		On entry : 0/0
  4985 ;;		On exit  : 0/0
  4986 ;;		Unchanged: 0/0
  4987 ;; Data sizes:     COMRAM   BANK0   BANK1
  4988 ;;      Params:         0       0       0
  4989 ;;      Locals:         1       0       0
  4990 ;;      Temps:          4       0       0
  4991 ;;      Totals:         5       0       0
  4992 ;;Total ram usage:        5 bytes
  4993 ;; Hardware stack levels used: 1
  4994 ;; Hardware stack levels required when called: 2
  4995 ;; This function calls:
  4996 ;;		Nothing
  4997 ;; This function is called by:
  4998 ;;		_KeGetCharValue
  4999 ;; This function uses a non-reentrant model
  5000 ;;
  5001                           
  5002                           	psect	text35
  5003  001AE4                     __ptext35:
  5004                           	callstack 0
  5005  001AE4                     _getFullValue:
  5006                           	callstack 26
  5007                           
  5008                           ;incstack = 0
  5009                           ;getFullValue@generic stored from wreg
  5010  001AE4  6E62               	movwf	getFullValue@generic^0,c
  5011                           
  5012                           ;keypad.c: 232:     if (generic - '0' >= 2 && generic - '0' <= 9){
  5013  001AE6  D81F               	call	PL32	;call to abstracted procedure
  5014  001AE8  E103               	bnz	u2850
  5015  001AEA  0E02               	movlw	2
  5016  001AEC  5C60               	subwf	(??_getFullValue+2)^0,w,c
  5017  001AEE  E30A               	bnc	l3961
  5018  001AF0                     u2850:
  5019  001AF0  D81A               	call	PL32	;call to abstracted procedure
  5020  001AF2  E108               	bnz	l3961
  5021  001AF4  0E0A               	movlw	10
  5022  001AF6  5C60               	subwf	(??_getFullValue+2)^0,w,c
  5023  001AF8  E205               	bc	l3961
  5024                           
  5025                           ;keypad.c: 233:         if (SMSTABLE[generic - '0' - 1][(numPresses-1)] == '\0'){
  5026  001AFA  D806               	call	PL24	;call to abstracted procedure
  5027  001AFC  E105               	bnz	PL24
  5028                           
  5029                           ;keypad.c: 234:             numPresses = 1;
  5030  001AFE  0E01               	movlw	1
  5031  001B00  6E3F               	movwf	_numPresses^0,c
  5032  001B02                     l3957:
  5033                           
  5034                           ;keypad.c: 236:         return SMSTABLE[generic - '0' - 1][(numPresses-1)];
  5035  001B02  D002               	goto	PL24	;call to abstracted procedure
  5036  001B04                     l3961:
  5037                           
  5038                           ;keypad.c: 238:     return generic;
  5039  001B04  5062               	movf	getFullValue@generic^0,w,c
  5040  001B06  0012               	return		;funcret
  5041  001B08                     __end_of_getFullValue:
  5042                           	callstack 0
  5043  001B08                     PL24:
  5044                           	callstack 26
  5045  001B08  5062               	movf	getFullValue@generic^0,w,c
  5046  001B0A  0D06               	mullw	6
  5047  001B0C  50F3               	movf	243,w,c
  5048  001B0E  0F99               	addlw	low _SMSTABLE
  5049  001B10  243F               	addwf	_numPresses^0,w,c
  5050  001B12  6E5E               	movwf	??_getFullValue^0,c
  5051  001B14  0ED9               	movlw	217
  5052  001B16  265E               	addwf	??_getFullValue^0,f,c
  5053  001B18  C05E  FFF6         	movff	??_getFullValue,tblptrl
  5054  001B1C                     	if	1	;There is more than 1 active tblptr byte
  5055  001B1C  0E02               	movlw	high __smallconst
  5056  001B1E  6EF7               	movwf	tblptrh,c
  5057  001B20                     	endif
  5058  001B20                     	if	0	;tblptru may be non-zero
  5059  001B20                     	endif
  5060  001B20                     	if	0	;tblptru may be non-zero
  5061  001B20                     	endif
  5062  001B20  0008               	tblrd		*
  5063  001B22  50F5               	movf	tablat,w,c
  5064  001B24  0012               	return	
  5065  001B26                     __end_ofPL24:
  5066                           	callstack 0
  5067  001B26                     PL32:
  5068                           	callstack 26
  5069  001B26  0ED0               	movlw	208
  5070  001B28  6E5E               	movwf	??_getFullValue^0,c
  5071  001B2A  685F               	setf	(??_getFullValue+1)^0,c
  5072  001B2C  5062               	movf	getFullValue@generic^0,w,c
  5073  001B2E  6E60               	movwf	(??_getFullValue+2)^0,c
  5074  001B30  6A61               	clrf	(??_getFullValue+3)^0,c
  5075  001B32  505E               	movf	??_getFullValue^0,w,c
  5076  001B34  2660               	addwf	(??_getFullValue+2)^0,f,c
  5077  001B36  505F               	movf	(??_getFullValue+1)^0,w,c
  5078  001B38  2261               	addwfc	(??_getFullValue+3)^0,f,c
  5079  001B3A  5061               	movf	(??_getFullValue+3)^0,w,c
  5080  001B3C  0012               	return	
  5081  001B3E                     __end_ofPL32:
  5082                           	callstack 0
  5083                           
  5084 ;; *************** function _JoSetMode *****************
  5085 ;; Defined at:
  5086 ;;		line 107 in file "Joystick.c"
  5087 ;; Parameters:    Size  Location     Type
  5088 ;;  mode            1    wreg     unsigned char 
  5089 ;; Auto vars:     Size  Location     Type
  5090 ;;  mode            1    5[COMRAM] unsigned char 
  5091 ;; Return value:  Size  Location     Type
  5092 ;;                  1    wreg      void 
  5093 ;; Registers used:
  5094 ;;		wreg
  5095 ;; Tracked objects:
  5096 ;;		On entry : 0/0
  5097 ;;		On exit  : 0/0
  5098 ;;		Unchanged: 0/0
  5099 ;; Data sizes:     COMRAM   BANK0   BANK1
  5100 ;;      Params:         0       0       0
  5101 ;;      Locals:         1       0       0
  5102 ;;      Temps:          0       0       0
  5103 ;;      Totals:         1       0       0
  5104 ;;Total ram usage:        1 bytes
  5105 ;; Hardware stack levels used: 1
  5106 ;; Hardware stack levels required when called: 2
  5107 ;; This function calls:
  5108 ;;		Nothing
  5109 ;; This function is called by:
  5110 ;;		_menuMotor
  5111 ;; This function uses a non-reentrant model
  5112 ;;
  5113                           
  5114                           	psect	text36
  5115  00014E                     __ptext36:
  5116                           	callstack 0
  5117  00014E                     _JoSetMode:
  5118                           	callstack 27
  5119                           
  5120                           ;incstack = 0
  5121                           ;JoSetMode@mode stored from wreg
  5122  00014E  6E5E               	movwf	JoSetMode@mode^0,c
  5123                           
  5124                           ;Joystick.c: 108:     joyMode = mode;
  5125  000150  C05E  F029         	movff	JoSetMode@mode,_joyMode
  5126  000154  0012               	return		;funcret
  5127  000156                     __end_of_JoSetMode:
  5128                           	callstack 0
  5129                           
  5130 ;; *************** function _JoMoved *****************
  5131 ;; Defined at:
  5132 ;;		line 99 in file "Joystick.c"
  5133 ;; Parameters:    Size  Location     Type
  5134 ;;		None
  5135 ;; Auto vars:     Size  Location     Type
  5136 ;;		None
  5137 ;; Return value:  Size  Location     Type
  5138 ;;                  1    wreg      unsigned char 
  5139 ;; Registers used:
  5140 ;;		wreg, status,2
  5141 ;; Tracked objects:
  5142 ;;		On entry : 0/0
  5143 ;;		On exit  : 0/0
  5144 ;;		Unchanged: 0/0
  5145 ;; Data sizes:     COMRAM   BANK0   BANK1
  5146 ;;      Params:         0       0       0
  5147 ;;      Locals:         0       0       0
  5148 ;;      Temps:          0       0       0
  5149 ;;      Totals:         0       0       0
  5150 ;;Total ram usage:        0 bytes
  5151 ;; Hardware stack levels used: 1
  5152 ;; Hardware stack levels required when called: 2
  5153 ;; This function calls:
  5154 ;;		Nothing
  5155 ;; This function is called by:
  5156 ;;		_menuMotor
  5157 ;; This function uses a non-reentrant model
  5158 ;;
  5159                           
  5160                           	psect	text37
  5161  000188                     __ptext37:
  5162                           	callstack 0
  5163  000188                     _JoMoved:
  5164                           	callstack 27
  5165                           
  5166                           ;Joystick.c: 100:     return moved;
  5167                           
  5168                           ;incstack = 0
  5169  000188  502B               	movf	_moved^0,w,c
  5170  00018A  0012               	return		;funcret
  5171  00018C                     __end_of_JoMoved:
  5172                           	callstack 0
  5173                           
  5174 ;; *************** function _JoDirection *****************
  5175 ;; Defined at:
  5176 ;;		line 103 in file "Joystick.c"
  5177 ;; Parameters:    Size  Location     Type
  5178 ;;		None
  5179 ;; Auto vars:     Size  Location     Type
  5180 ;;		None
  5181 ;; Return value:  Size  Location     Type
  5182 ;;                  1    wreg      unsigned char 
  5183 ;; Registers used:
  5184 ;;		wreg, status,2
  5185 ;; Tracked objects:
  5186 ;;		On entry : 0/0
  5187 ;;		On exit  : 0/0
  5188 ;;		Unchanged: 0/0
  5189 ;; Data sizes:     COMRAM   BANK0   BANK1
  5190 ;;      Params:         0       0       0
  5191 ;;      Locals:         0       0       0
  5192 ;;      Temps:          0       0       0
  5193 ;;      Totals:         0       0       0
  5194 ;;Total ram usage:        0 bytes
  5195 ;; Hardware stack levels used: 1
  5196 ;; Hardware stack levels required when called: 2
  5197 ;; This function calls:
  5198 ;;		Nothing
  5199 ;; This function is called by:
  5200 ;;		_menuMotor
  5201 ;; This function uses a non-reentrant model
  5202 ;;
  5203                           
  5204                           	psect	text38
  5205  00018C                     __ptext38:
  5206                           	callstack 0
  5207  00018C                     _JoDirection:
  5208                           	callstack 27
  5209                           
  5210                           ;Joystick.c: 104:     return send;
  5211                           
  5212                           ;incstack = 0
  5213  00018C  502E               	movf	_send^0,w,c
  5214  00018E  0012               	return		;funcret
  5215  000190                     __end_of_JoDirection:
  5216                           	callstack 0
  5217                           
  5218 ;; *************** function _DaSaveUser *****************
  5219 ;; Defined at:
  5220 ;;		line 307 in file "EEPROM.c"
  5221 ;; Parameters:    Size  Location     Type
  5222 ;;  regUser         1    5[COMRAM] PTR struct .
  5223 ;;		 -> mUser(18), 
  5224 ;; Auto vars:     Size  Location     Type
  5225 ;;		None
  5226 ;; Return value:  Size  Location     Type
  5227 ;;                  1    wreg      void 
  5228 ;; Registers used:
  5229 ;;		wreg, status,2, status,0
  5230 ;; Tracked objects:
  5231 ;;		On entry : 0/0
  5232 ;;		On exit  : 0/0
  5233 ;;		Unchanged: 0/0
  5234 ;; Data sizes:     COMRAM   BANK0   BANK1
  5235 ;;      Params:         1       0       0
  5236 ;;      Locals:         0       0       0
  5237 ;;      Temps:          0       0       0
  5238 ;;      Totals:         1       0       0
  5239 ;;Total ram usage:        1 bytes
  5240 ;; Hardware stack levels used: 1
  5241 ;; Hardware stack levels required when called: 2
  5242 ;; This function calls:
  5243 ;;		Nothing
  5244 ;; This function is called by:
  5245 ;;		_menuMotor
  5246 ;; This function uses a non-reentrant model
  5247 ;;
  5248                           
  5249                           	psect	text39
  5250  000062                     __ptext39:
  5251                           	callstack 0
  5252  000062                     _DaSaveUser:
  5253                           	callstack 27
  5254                           
  5255                           ;EEPROM.c: 308:     state = 5;
  5256                           
  5257                           ;incstack = 0
  5258  000062  0E05               	movlw	5
  5259  000064  6E1E               	movwf	_state@EEPROM$F1761^0,c
  5260                           
  5261                           ;EEPROM.c: 309:     position = 0;
  5262  000066  6A1F               	clrf	_position^0,c
  5263                           
  5264                           ;EEPROM.c: 310:     userNum = 0;
  5265  000068  6A1D               	clrf	_userNum^0,c
  5266                           
  5267                           ;EEPROM.c: 311:     mUser = regUser;
  5268  00006A  C05E  F00B         	movff	DaSaveUser@regUser,_mUser@EEPROM$F1764
  5269  00006E  6A0C               	clrf	(_mUser@EEPROM$F1764+1)^0,c
  5270                           
  5271                           ;EEPROM.c: 312:     status = 2;
  5272  000070  0E02               	movlw	2
  5273  000072  6E1C               	movwf	_status^0,c
  5274  000074  0C02               	retlw	2	;funcret
  5275  000076                     __end_of_DaSaveUser:
  5276                           	callstack 0
  5277                           
  5278 ;; *************** function _DaSaveScore *****************
  5279 ;; Defined at:
  5280 ;;		line 323 in file "EEPROM.c"
  5281 ;; Parameters:    Size  Location     Type
  5282 ;;  userScore       1    wreg     unsigned char 
  5283 ;; Auto vars:     Size  Location     Type
  5284 ;;  userScore       1   19[COMRAM] unsigned char 
  5285 ;; Return value:  Size  Location     Type
  5286 ;;                  1    wreg      void 
  5287 ;; Registers used:
  5288 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5289 ;; Tracked objects:
  5290 ;;		On entry : 0/0
  5291 ;;		On exit  : 0/0
  5292 ;;		Unchanged: 0/0
  5293 ;; Data sizes:     COMRAM   BANK0   BANK1
  5294 ;;      Params:         0       0       0
  5295 ;;      Locals:         1       0       0
  5296 ;;      Temps:          0       0       0
  5297 ;;      Totals:         1       0       0
  5298 ;;Total ram usage:        1 bytes
  5299 ;; Hardware stack levels used: 1
  5300 ;; Hardware stack levels required when called: 6
  5301 ;; This function calls:
  5302 ;;		_LcClear
  5303 ;;		_LcPutChar
  5304 ;;		___lbdiv
  5305 ;;		___lbmod
  5306 ;; This function is called by:
  5307 ;;		_menuMotor
  5308 ;; This function uses a non-reentrant model
  5309 ;;
  5310                           
  5311                           	psect	text40
  5312  001CB4                     __ptext40:
  5313                           	callstack 0
  5314  001CB4                     _DaSaveScore:
  5315                           	callstack 23
  5316                           
  5317                           ;incstack = 0
  5318                           ;DaSaveScore@userScore stored from wreg
  5319  001CB4  6E6C               	movwf	DaSaveScore@userScore^0,c
  5320                           
  5321                           ;EEPROM.c: 324:     saveScore = userScore;
  5322  001CB6  C06C  F01A         	movff	DaSaveScore@userScore,_saveScore
  5323                           
  5324                           ;EEPROM.c: 325:     LcClear();
  5325  001CBA  EC1B  F000         	call	_LcClear	;wreg free
  5326                           
  5327                           ;EEPROM.c: 326:     LcPutChar((saveScore/10)+'0');
  5328  001CBE  0E0A               	movlw	10
  5329  001CC0  6E5E               	movwf	___lbdiv@divisor^0,c
  5330  001CC2  501A               	movf	_saveScore^0,w,c
  5331  001CC4  EC74  F00E         	call	___lbdiv
  5332  001CC8  0F30               	addlw	48
  5333  001CCA  ECE8  F00E         	call	_LcPutChar
  5334                           
  5335                           ;EEPROM.c: 327:     LcPutChar((saveScore%10)+'0');
  5336  001CCE  0E0A               	movlw	10
  5337  001CD0  6E5E               	movwf	___lbmod@divisor^0,c
  5338  001CD2  501A               	movf	_saveScore^0,w,c
  5339  001CD4  EC11  F00F         	call	___lbmod
  5340  001CD8  0F30               	addlw	48
  5341  001CDA  ECE8  F00E         	call	_LcPutChar
  5342                           
  5343                           ;EEPROM.c: 328:     position = 0;
  5344  001CDE  6A1F               	clrf	_position^0,c
  5345                           
  5346                           ;EEPROM.c: 329:     status = 0;
  5347  001CE0  6A1C               	clrf	_status^0,c
  5348                           
  5349                           ;EEPROM.c: 330:     state = 20;
  5350  001CE2  0E14               	movlw	20
  5351  001CE4  6E1E               	movwf	_state@EEPROM$F1761^0,c
  5352  001CE6  0C14               	retlw	20	;funcret
  5353  001CE8                     __end_of_DaSaveScore:
  5354                           	callstack 0
  5355                           
  5356 ;; *************** function _LcClear *****************
  5357 ;; Defined at:
  5358 ;;		line 105 in file "LcTLCD.c"
  5359 ;; Parameters:    Size  Location     Type
  5360 ;;		None
  5361 ;; Auto vars:     Size  Location     Type
  5362 ;;		None
  5363 ;; Return value:  Size  Location     Type
  5364 ;;                  1    wreg      void 
  5365 ;; Registers used:
  5366 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5367 ;; Tracked objects:
  5368 ;;		On entry : 0/0
  5369 ;;		On exit  : 0/0
  5370 ;;		Unchanged: 0/0
  5371 ;; Data sizes:     COMRAM   BANK0   BANK1
  5372 ;;      Params:         0       0       0
  5373 ;;      Locals:         0       0       0
  5374 ;;      Temps:          0       0       0
  5375 ;;      Totals:         0       0       0
  5376 ;;Total ram usage:        0 bytes
  5377 ;; Hardware stack levels used: 1
  5378 ;; Hardware stack levels required when called: 4
  5379 ;; This function calls:
  5380 ;;		_CantaIR
  5381 ;;		_Espera
  5382 ;;		_WaitForBusy
  5383 ;; This function is called by:
  5384 ;;		_resetDisplay
  5385 ;;		_DaSaveScore
  5386 ;; This function uses a non-reentrant model
  5387 ;;
  5388                           
  5389                           	psect	text41
  5390  000036                     __ptext41:
  5391                           	callstack 0
  5392  000036                     _LcClear:
  5393                           	callstack 24
  5394                           
  5395                           ;LcTLCD.c: 108:  WaitForBusy(); CantaIR(0x01);
  5396                           
  5397                           ;incstack = 0
  5398  000036  EC05  F00E         	call	_WaitForBusy	;wreg free
  5399  00003A  0E01               	movlw	1
  5400  00003C  ECBD  F00F         	call	_CantaIR
  5401                           
  5402                           ;LcTLCD.c: 109:  Espera(Timer, 3);
  5403  000040  EC10  F00B         	call	PL16	;call to abstracted procedure
  5404  000044  0E03               	movlw	3
  5405  000046  6E67               	movwf	Espera@ms^0,c
  5406  000048  EF9D  F00F         	goto	_Espera	;wreg free
  5407  00004C                     __end_of_LcClear:
  5408                           	callstack 0
  5409                           
  5410 ;; *************** function _DaGetStatus *****************
  5411 ;; Defined at:
  5412 ;;		line 315 in file "EEPROM.c"
  5413 ;; Parameters:    Size  Location     Type
  5414 ;;		None
  5415 ;; Auto vars:     Size  Location     Type
  5416 ;;		None
  5417 ;; Return value:  Size  Location     Type
  5418 ;;                  1    wreg      unsigned char 
  5419 ;; Registers used:
  5420 ;;		wreg, status,2
  5421 ;; Tracked objects:
  5422 ;;		On entry : 0/0
  5423 ;;		On exit  : 0/0
  5424 ;;		Unchanged: 0/0
  5425 ;; Data sizes:     COMRAM   BANK0   BANK1
  5426 ;;      Params:         0       0       0
  5427 ;;      Locals:         0       0       0
  5428 ;;      Temps:          0       0       0
  5429 ;;      Totals:         0       0       0
  5430 ;;Total ram usage:        0 bytes
  5431 ;; Hardware stack levels used: 1
  5432 ;; Hardware stack levels required when called: 2
  5433 ;; This function calls:
  5434 ;;		Nothing
  5435 ;; This function is called by:
  5436 ;;		_menuMotor
  5437 ;; This function uses a non-reentrant model
  5438 ;;
  5439                           
  5440                           	psect	text42
  5441  000190                     __ptext42:
  5442                           	callstack 0
  5443  000190                     _DaGetStatus:
  5444                           	callstack 27
  5445                           
  5446                           ;EEPROM.c: 316:     return status;
  5447                           
  5448                           ;incstack = 0
  5449  000190  501C               	movf	_status^0,w,c
  5450  000192  0012               	return		;funcret
  5451  000194                     __end_of_DaGetStatus:
  5452                           	callstack 0
  5453                           
  5454 ;; *************** function _DaGetNumScores *****************
  5455 ;; Defined at:
  5456 ;;		line 369 in file "EEPROM.c"
  5457 ;; Parameters:    Size  Location     Type
  5458 ;;		None
  5459 ;; Auto vars:     Size  Location     Type
  5460 ;;		None
  5461 ;; Return value:  Size  Location     Type
  5462 ;;                  1    wreg      unsigned char 
  5463 ;; Registers used:
  5464 ;;		wreg, status,2
  5465 ;; Tracked objects:
  5466 ;;		On entry : 0/0
  5467 ;;		On exit  : 0/0
  5468 ;;		Unchanged: 0/0
  5469 ;; Data sizes:     COMRAM   BANK0   BANK1
  5470 ;;      Params:         0       0       0
  5471 ;;      Locals:         0       0       0
  5472 ;;      Temps:          0       0       0
  5473 ;;      Totals:         0       0       0
  5474 ;;Total ram usage:        0 bytes
  5475 ;; Hardware stack levels used: 1
  5476 ;; Hardware stack levels required when called: 2
  5477 ;; This function calls:
  5478 ;;		Nothing
  5479 ;; This function is called by:
  5480 ;;		_menuMotor
  5481 ;; This function uses a non-reentrant model
  5482 ;;
  5483                           
  5484                           	psect	text43
  5485  000194                     __ptext43:
  5486                           	callstack 0
  5487  000194                     _DaGetNumScores:
  5488                           	callstack 27
  5489                           
  5490                           ;EEPROM.c: 370:     return numScores;
  5491                           
  5492                           ;incstack = 0
  5493  000194  5020               	movf	_numScores^0,w,c
  5494  000196  0012               	return		;funcret
  5495  000198                     __end_of_DaGetNumScores:
  5496                           	callstack 0
  5497                           
  5498 ;; *************** function _DaGetIdle *****************
  5499 ;; Defined at:
  5500 ;;		line 319 in file "EEPROM.c"
  5501 ;; Parameters:    Size  Location     Type
  5502 ;;		None
  5503 ;; Auto vars:     Size  Location     Type
  5504 ;;		None
  5505 ;; Return value:  Size  Location     Type
  5506 ;;                  1    wreg      unsigned char 
  5507 ;; Registers used:
  5508 ;;		wreg, status,2
  5509 ;; Tracked objects:
  5510 ;;		On entry : 0/0
  5511 ;;		On exit  : 0/0
  5512 ;;		Unchanged: 0/0
  5513 ;; Data sizes:     COMRAM   BANK0   BANK1
  5514 ;;      Params:         0       0       0
  5515 ;;      Locals:         0       0       0
  5516 ;;      Temps:          0       0       0
  5517 ;;      Totals:         0       0       0
  5518 ;;Total ram usage:        0 bytes
  5519 ;; Hardware stack levels used: 1
  5520 ;; Hardware stack levels required when called: 2
  5521 ;; This function calls:
  5522 ;;		Nothing
  5523 ;; This function is called by:
  5524 ;;		_menuMotor
  5525 ;; This function uses a non-reentrant model
  5526 ;;
  5527                           
  5528                           	psect	text44
  5529  000156                     __ptext44:
  5530                           	callstack 0
  5531  000156                     _DaGetIdle:
  5532                           	callstack 27
  5533                           
  5534                           ;EEPROM.c: 320:     return state == 0;
  5535                           
  5536                           ;incstack = 0
  5537  000156  501E               	movf	_state@EEPROM$F1761^0,w,c
  5538  000158  B4D8               	btfsc	status,2,c
  5539  00015A  0C01               	retlw	1
  5540  00015C  0C00               	retlw	0	;funcret
  5541  00015E                     __end_of_DaGetIdle:
  5542                           	callstack 0
  5543                           
  5544 ;; *************** function _DaFindUser *****************
  5545 ;; Defined at:
  5546 ;;		line 293 in file "EEPROM.c"
  5547 ;; Parameters:    Size  Location     Type
  5548 ;;  logUser         1   18[COMRAM] PTR struct .
  5549 ;;		 -> mUser(18), 
  5550 ;; Auto vars:     Size  Location     Type
  5551 ;;		None
  5552 ;; Return value:  Size  Location     Type
  5553 ;;                  1    wreg      void 
  5554 ;; Registers used:
  5555 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5556 ;; Tracked objects:
  5557 ;;		On entry : 0/0
  5558 ;;		On exit  : 0/0
  5559 ;;		Unchanged: 0/0
  5560 ;; Data sizes:     COMRAM   BANK0   BANK1
  5561 ;;      Params:         1       0       0
  5562 ;;      Locals:         0       0       0
  5563 ;;      Temps:          0       0       0
  5564 ;;      Totals:         1       0       0
  5565 ;;Total ram usage:        1 bytes
  5566 ;; Hardware stack levels used: 1
  5567 ;; Hardware stack levels required when called: 5
  5568 ;; This function calls:
  5569 ;;		_LcGotoXY
  5570 ;; This function is called by:
  5571 ;;		_menuMotor
  5572 ;; This function uses a non-reentrant model
  5573 ;;
  5574                           
  5575                           	psect	text45
  5576  001FB0                     __ptext45:
  5577                           	callstack 0
  5578  001FB0                     _DaFindUser:
  5579                           	callstack 24
  5580                           
  5581                           ;EEPROM.c: 294:     state = 1;
  5582                           
  5583                           ;incstack = 0
  5584  001FB0  0E01               	movlw	1
  5585  001FB2  6E1E               	movwf	_state@EEPROM$F1761^0,c
  5586                           
  5587                           ;EEPROM.c: 295:     userNum = 0;
  5588  001FB4  6A1D               	clrf	_userNum^0,c
  5589                           
  5590                           ;EEPROM.c: 296:     mUser = logUser;
  5591  001FB6  C06B  F00B         	movff	DaFindUser@logUser,_mUser@EEPROM$F1764
  5592  001FBA  6A0C               	clrf	(_mUser@EEPROM$F1764+1)^0,c
  5593                           
  5594                           ;EEPROM.c: 297:     status = 2;
  5595  001FBC  0E02               	movlw	2
  5596  001FBE  6E1C               	movwf	_status^0,c
  5597                           
  5598                           ;EEPROM.c: 298:     LcGotoXY(10,0);
  5599  001FC0  0E00               	movlw	0
  5600  001FC2  6E66               	movwf	LcGotoXY@Row^0,c
  5601  001FC4  0E0A               	movlw	10
  5602  001FC6  EFA6  F00E         	goto	_LcGotoXY
  5603  001FCA                     __end_of_DaFindUser:
  5604                           	callstack 0
  5605                           
  5606 ;; *************** function _joystickMotor *****************
  5607 ;; Defined at:
  5608 ;;		line 29 in file "Joystick.c"
  5609 ;; Parameters:    Size  Location     Type
  5610 ;;		None
  5611 ;; Auto vars:     Size  Location     Type
  5612 ;;		None
  5613 ;; Return value:  Size  Location     Type
  5614 ;;                  1    wreg      void 
  5615 ;; Registers used:
  5616 ;;		wreg, status,2, status,0, cstack
  5617 ;; Tracked objects:
  5618 ;;		On entry : 0/0
  5619 ;;		On exit  : 0/0
  5620 ;;		Unchanged: 0/0
  5621 ;; Data sizes:     COMRAM   BANK0   BANK1
  5622 ;;      Params:         0       0       0
  5623 ;;      Locals:         0       0       0
  5624 ;;      Temps:          2       0       0
  5625 ;;      Totals:         2       0       0
  5626 ;;Total ram usage:        2 bytes
  5627 ;; Hardware stack levels used: 1
  5628 ;; Hardware stack levels required when called: 3
  5629 ;; This function calls:
  5630 ;;		_SiIsAvailable
  5631 ;;		_SiSendChar
  5632 ;; This function is called by:
  5633 ;;		_main
  5634 ;; This function uses a non-reentrant model
  5635 ;;
  5636                           
  5637                           	psect	text46
  5638  001414                     __ptext46:
  5639                           	callstack 0
  5640  001414                     _joystickMotor:
  5641                           	callstack 27
  5642                           
  5643                           ;Joystick.c: 30:     switch (stateJoy){
  5644                           
  5645                           ;incstack = 0
  5646  001414  D04B               	goto	l5191
  5647  001416                     l694:
  5648                           
  5649                           ;Joystick.c: 32:             if (ADCON0bits.GO_DONE == 0){
  5650  001416  B2C2               	btfsc	194,1,c	;volatile
  5651  001418  0012               	return	
  5652                           
  5653                           ;Joystick.c: 33:                 y = ADRESH;
  5654  00141A  CFC4 F02C          	movff	4036,_y	;volatile
  5655                           
  5656                           ;Joystick.c: 34:                 ADCON0bits.CHS0=1;
  5657  00141E  84C2               	bsf	194,2,c	;volatile
  5658                           
  5659                           ;Joystick.c: 35:                 ADCON0bits.CHS1=0;
  5660  001420  96C2               	bcf	194,3,c	;volatile
  5661                           
  5662                           ;Joystick.c: 36:                 stateJoy = 1;
  5663  001422  0E01               	movlw	1
  5664  001424  6E2A               	movwf	_stateJoy^0,c
  5665                           
  5666                           ;Joystick.c: 37:                 ADCON0bits.GO_DONE=1;
  5667  001426  82C2               	bsf	194,1,c	;volatile
  5668  001428  0C01               	retlw	1
  5669  00142A                     l697:
  5670                           
  5671                           ;Joystick.c: 41:             if (ADCON0bits.GO_DONE == 0){
  5672  00142A  B2C2               	btfsc	194,1,c	;volatile
  5673  00142C  0012               	return	
  5674                           
  5675                           ;Joystick.c: 42:                 x = ADRESH;
  5676  00142E  CFC4 F02D          	movff	4036,_x	;volatile
  5677                           
  5678                           ;Joystick.c: 43:                 ADCON0bits.CHS0=0;
  5679  001432  94C2               	bcf	194,2,c	;volatile
  5680                           
  5681                           ;Joystick.c: 44:                 ADCON0bits.CHS1=1;
  5682  001434  86C2               	bsf	194,3,c	;volatile
  5683                           
  5684                           ;Joystick.c: 45:                 stateJoy = 2;
  5685  001436  0E02               	movlw	2
  5686  001438  6E2A               	movwf	_stateJoy^0,c
  5687  00143A  0C02               	retlw	2
  5688  00143C                     l5145:
  5689                           
  5690                           ;Joystick.c: 49:             stateJoy = 4;
  5691  00143C  0E04               	movlw	4
  5692  00143E  6E2A               	movwf	_stateJoy^0,c
  5693                           
  5694                           ;Joystick.c: 50:             if (moved){
  5695  001440  502B               	movf	_moved^0,w,c
  5696  001442  E00E               	bz	l5157
  5697                           
  5698                           ;Joystick.c: 51:                 if (x >= 100 && x <= 150 && y >= 100 && y <= 150){
  5699  001444  0E63               	movlw	99
  5700  001446  642D               	cpfsgt	_x^0,c
  5701  001448  0C63               	retlw	99
  5702  00144A  0E97               	movlw	151
  5703  00144C  602D               	cpfslt	_x^0,c
  5704  00144E  0C97               	retlw	151
  5705  001450  0E63               	movlw	99
  5706  001452  642C               	cpfsgt	_y^0,c
  5707  001454  0C63               	retlw	99
  5708  001456  0E97               	movlw	151
  5709  001458  602C               	cpfslt	_y^0,c
  5710  00145A  0C97               	retlw	151
  5711                           
  5712                           ;Joystick.c: 52:                     moved = 0;
  5713  00145C  6A2B               	clrf	_moved^0,c
  5714                           
  5715                           ;Joystick.c: 54:             }else {
  5716                           
  5717                           ;Joystick.c: 53:                 }
  5718  00145E  0012               	return	
  5719  001460                     l5157:
  5720                           
  5721                           ;Joystick.c: 55:                 if (x <= 10){
  5722  001460  0E0B               	movlw	11
  5723  001462  602D               	cpfslt	_x^0,c
  5724  001464  D008               	goto	l5163
  5725                           
  5726                           ;Joystick.c: 56:                     send = 'A';
  5727  001466  0E41               	movlw	65
  5728  001468                     L6:
  5729  001468  6E2E               	movwf	_send^0,c
  5730                           
  5731                           ;Joystick.c: 57:                     moved = 1;
  5732  00146A  0E01               	movlw	1
  5733  00146C  6E2B               	movwf	_moved^0,c
  5734                           
  5735                           ;Joystick.c: 58:                     stateJoy = 4+joyMode;
  5736  00146E  5029               	movf	_joyMode^0,w,c
  5737  001470  0F04               	addlw	4
  5738  001472  6E2A               	movwf	_stateJoy^0,c
  5739                           
  5740                           ;Joystick.c: 59:                 } else if (x >= 240){
  5741  001474  0012               	return	
  5742  001476                     l5163:
  5743  001476  0EEF               	movlw	239
  5744  001478  642D               	cpfsgt	_x^0,c
  5745  00147A  D002               	goto	l5169
  5746                           
  5747                           ;Joystick.c: 60:                     send = 'D';
  5748  00147C  0E44               	movlw	68
  5749  00147E  D7F4               	goto	L6
  5750  001480                     l5169:
  5751  001480  0E0B               	movlw	11
  5752  001482  602C               	cpfslt	_y^0,c
  5753  001484  D002               	goto	l5175
  5754                           
  5755                           ;Joystick.c: 64:                     send = 'S';
  5756  001486  0E53               	movlw	83
  5757  001488  D7EF               	goto	L6
  5758  00148A                     l5175:
  5759  00148A  0EEF               	movlw	239
  5760  00148C  642C               	cpfsgt	_y^0,c
  5761  00148E  0CEF               	retlw	239
  5762                           
  5763                           ;Joystick.c: 68:                     send = 'W';
  5764  001490  0E57               	movlw	87
  5765  001492  D7EA               	goto	L6
  5766  001494                     l710:
  5767                           
  5768                           ;Joystick.c: 80:             stateJoy = 0;
  5769                           
  5770                           ;Joystick.c: 81:             ADCON0bits.GO_DONE=1;
  5771                           
  5772                           ;Joystick.c: 82:             break;
  5773  001494  D01B               	goto	PL88	;call to abstracted procedure
  5774  001496                     l5181:
  5775                           
  5776                           ;Joystick.c: 85:             if(SiIsAvailable()){
  5777  001496  ECB7  F000         	call	_SiIsAvailable	;wreg free
  5778  00149A  0900               	iorlw	0
  5779  00149C  B4D8               	btfsc	status,2,c
  5780  00149E  0012               	return	
  5781                           
  5782                           ;Joystick.c: 86:                 SiSendChar(send);
  5783  0014A0  502E               	movf	_send^0,w,c
  5784  0014A2  ECB3  F000         	call	_SiSendChar
  5785                           
  5786                           ;Joystick.c: 87:                 stateJoy = 0;
  5787                           
  5788                           ;Joystick.c: 88:                 ADCON0bits.GO_DONE=1;
  5789  0014A6  D012               	goto	PL88	;call to abstracted procedure
  5790  0014A8                     l713:
  5791                           
  5792                           ;Joystick.c: 92:             stateJoy = 0;
  5793  0014A8  6A2A               	clrf	_stateJoy^0,c
  5794                           
  5795                           ;Joystick.c: 93:             break;
  5796  0014AA  0012               	return	
  5797  0014AC                     l5191:
  5798  0014AC  502A               	movf	_stateJoy^0,w,c
  5799  0014AE  6E5F               	movwf	??_joystickMotor^0,c
  5800  0014B0  6A60               	clrf	(??_joystickMotor+1)^0,c
  5801                           
  5802                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5803                           ; Switch size 1, requested type "space"
  5804                           ; Number of cases is 1, Range of values is 0 to 0
  5805                           ; switch strategies available:
  5806                           ; Name         Instructions Cycles
  5807                           ; simple_byte            4     3 (average)
  5808                           ;	Chosen strategy is simple_byte
  5809  0014B2  5060               	movf	(??_joystickMotor+1)^0,w,c
  5810  0014B4  E1F9               	bnz	l713
  5811                           
  5812                           ; Switch size 1, requested type "space"
  5813                           ; Number of cases is 5, Range of values is 0 to 5
  5814                           ; switch strategies available:
  5815                           ; Name         Instructions Cycles
  5816                           ; simple_byte           16     9 (average)
  5817                           ;	Chosen strategy is simple_byte
  5818  0014B6  505F               	movf	??_joystickMotor^0,w,c
  5819  0014B8  E0AE               	bz	l694
  5820  0014BA  0A01               	xorlw	1	; case 1
  5821  0014BC  E0B6               	bz	l697
  5822  0014BE  0A03               	xorlw	3	; case 2
  5823  0014C0  E0BD               	bz	l5145
  5824  0014C2  0A06               	xorlw	6	; case 4
  5825  0014C4  E003               	bz	PL88
  5826  0014C6  0A01               	xorlw	1	; case 5
  5827  0014C8  E0E6               	bz	l5181
  5828  0014CA  D7EE               	goto	l713
  5829  0014CC                     __end_of_joystickMotor:
  5830                           	callstack 0
  5831  0014CC                     PL88:
  5832                           	callstack 27
  5833  0014CC  6A2A               	clrf	_stateJoy^0,c
  5834  0014CE  82C2               	bsf	194,1,c	;volatile
  5835  0014D0  0012               	return	
  5836  0014D2                     __end_ofPL88:
  5837                           	callstack 0
  5838                           
  5839 ;; *************** function _initTime *****************
  5840 ;; Defined at:
  5841 ;;		line 293 in file "time.c"
  5842 ;; Parameters:    Size  Location     Type
  5843 ;;		None
  5844 ;; Auto vars:     Size  Location     Type
  5845 ;;		None
  5846 ;; Return value:  Size  Location     Type
  5847 ;;                  1    wreg      void 
  5848 ;; Registers used:
  5849 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5850 ;; Tracked objects:
  5851 ;;		On entry : 0/0
  5852 ;;		On exit  : 0/0
  5853 ;;		Unchanged: 0/0
  5854 ;; Data sizes:     COMRAM   BANK0   BANK1
  5855 ;;      Params:         0       0       0
  5856 ;;      Locals:         0       0       0
  5857 ;;      Temps:          0       0       0
  5858 ;;      Totals:         0       0       0
  5859 ;;Total ram usage:        0 bytes
  5860 ;; Hardware stack levels used: 1
  5861 ;; Hardware stack levels required when called: 3
  5862 ;; This function calls:
  5863 ;;		_TiGetTimer
  5864 ;; This function is called by:
  5865 ;;		_main
  5866 ;; This function uses a non-reentrant model
  5867 ;;
  5868                           
  5869                           	psect	text47
  5870  00015E                     __ptext47:
  5871                           	callstack 0
  5872  00015E                     _initTime:
  5873                           	callstack 27
  5874                           
  5875                           ;time.c: 294:     timer = TiGetTimer();
  5876                           
  5877                           ;incstack = 0
  5878  00015E  EC8E  F00E         	call	_TiGetTimer	;wreg free
  5879  000162  6E14               	movwf	_timer@time$F1844^0,c
  5880  000164  0012               	return		;funcret
  5881  000166                     __end_of_initTime:
  5882                           	callstack 0
  5883                           
  5884 ;; *************** function _initSIO *****************
  5885 ;; Defined at:
  5886 ;;		line 16 in file "SIO.c"
  5887 ;; Parameters:    Size  Location     Type
  5888 ;;		None
  5889 ;; Auto vars:     Size  Location     Type
  5890 ;;		None
  5891 ;; Return value:  Size  Location     Type
  5892 ;;                  1    wreg      void 
  5893 ;; Registers used:
  5894 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5895 ;; Tracked objects:
  5896 ;;		On entry : 0/0
  5897 ;;		On exit  : 0/0
  5898 ;;		Unchanged: 0/0
  5899 ;; Data sizes:     COMRAM   BANK0   BANK1
  5900 ;;      Params:         0       0       0
  5901 ;;      Locals:         0       0       0
  5902 ;;      Temps:          0       0       0
  5903 ;;      Totals:         0       0       0
  5904 ;;Total ram usage:        0 bytes
  5905 ;; Hardware stack levels used: 1
  5906 ;; Hardware stack levels required when called: 3
  5907 ;; This function calls:
  5908 ;;		_TiGetTimer
  5909 ;; This function is called by:
  5910 ;;		_main
  5911 ;; This function uses a non-reentrant model
  5912 ;;
  5913                           
  5914                           	psect	text48
  5915  001E92                     __ptext48:
  5916                           	callstack 0
  5917  001E92                     _initSIO:
  5918                           	callstack 27
  5919                           
  5920                           ;SIO.c: 17:     TRISCbits.TRISC7 = 1;
  5921                           
  5922                           ;incstack = 0
  5923  001E92  8E94               	bsf	148,7,c	;volatile
  5924                           
  5925                           ;SIO.c: 18:     TRISCbits.TRISC6 = 1;
  5926  001E94  8C94               	bsf	148,6,c	;volatile
  5927                           
  5928                           ;SIO.c: 19:     TXSTAbits.BRGH = 1;
  5929  001E96  84AC               	bsf	172,2,c	;volatile
  5930                           
  5931                           ;SIO.c: 20:     TXSTAbits.TXEN = 1;
  5932  001E98  8AAC               	bsf	172,5,c	;volatile
  5933                           
  5934                           ;SIO.c: 21:     TXSTAbits.SYNC = 0;
  5935  001E9A  98AC               	bcf	172,4,c	;volatile
  5936                           
  5937                           ;SIO.c: 23:     RCSTAbits.SPEN = 1;
  5938  001E9C  8EAB               	bsf	171,7,c	;volatile
  5939                           
  5940                           ;SIO.c: 24:     RCSTAbits.CREN = 1;
  5941  001E9E  88AB               	bsf	171,4,c	;volatile
  5942                           
  5943                           ;SIO.c: 26:     BAUDCONbits.BRG16 = 0;
  5944  001EA0  96B8               	bcf	184,3,c	;volatile
  5945                           
  5946                           ;SIO.c: 28:     SPBRG = 255;
  5947  001EA2  68AF               	setf	175,c	;volatile
  5948                           
  5949                           ;SIO.c: 31:     TRISCbits.TRISC5 = 1;
  5950  001EA4  8A94               	bsf	148,5,c	;volatile
  5951                           
  5952                           ;SIO.c: 32:     TRISCbits.TRISC4 = 0;
  5953  001EA6  9894               	bcf	148,4,c	;volatile
  5954                           
  5955                           ;SIO.c: 33:     timerRX = TiGetTimer();
  5956  001EA8  EC8E  F00E         	call	_TiGetTimer	;wreg free
  5957  001EAC  6E27               	movwf	_timerRX^0,c
  5958                           
  5959                           ;SIO.c: 34:     timerTX = TiGetTimer();
  5960  001EAE  EC8E  F00E         	call	_TiGetTimer	;wreg free
  5961  001EB2  6E23               	movwf	_timerTX^0,c
  5962  001EB4  0012               	return		;funcret
  5963  001EB6                     __end_of_initSIO:
  5964                           	callstack 0
  5965                           
  5966 ;; *************** function _initMenu *****************
  5967 ;; Defined at:
  5968 ;;		line 33 in file "Menu.c"
  5969 ;; Parameters:    Size  Location     Type
  5970 ;;		None
  5971 ;; Auto vars:     Size  Location     Type
  5972 ;;		None
  5973 ;; Return value:  Size  Location     Type
  5974 ;;                  1    wreg      void 
  5975 ;; Registers used:
  5976 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5977 ;; Tracked objects:
  5978 ;;		On entry : 0/0
  5979 ;;		On exit  : 0/0
  5980 ;;		Unchanged: 0/0
  5981 ;; Data sizes:     COMRAM   BANK0   BANK1
  5982 ;;      Params:         0       0       0
  5983 ;;      Locals:         0       0       0
  5984 ;;      Temps:          0       0       0
  5985 ;;      Totals:         0       0       0
  5986 ;;Total ram usage:        0 bytes
  5987 ;; Hardware stack levels used: 1
  5988 ;; Hardware stack levels required when called: 3
  5989 ;; This function calls:
  5990 ;;		_TiGetTimer
  5991 ;; This function is called by:
  5992 ;;		_main
  5993 ;; This function uses a non-reentrant model
  5994 ;;
  5995                           
  5996                           	psect	text49
  5997  00010A                     __ptext49:
  5998                           	callstack 0
  5999  00010A                     _initMenu:
  6000                           	callstack 27
  6001                           
  6002                           ;Menu.c: 34:     timer = TiGetTimer();
  6003                           
  6004                           ;incstack = 0
  6005  00010A  EC8E  F00E         	call	_TiGetTimer	;wreg free
  6006  00010E  6E35               	movwf	_timer^0,c
  6007                           
  6008                           ;Menu.c: 35:     val = 0;
  6009  000110  6A31               	clrf	_val^0,c
  6010  000112  0012               	return		;funcret
  6011  000114                     __end_of_initMenu:
  6012                           	callstack 0
  6013                           
  6014 ;; *************** function _initKeypad *****************
  6015 ;; Defined at:
  6016 ;;		line 29 in file "keypad.c"
  6017 ;; Parameters:    Size  Location     Type
  6018 ;;		None
  6019 ;; Auto vars:     Size  Location     Type
  6020 ;;		None
  6021 ;; Return value:  Size  Location     Type
  6022 ;;                  1    wreg      void 
  6023 ;; Registers used:
  6024 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6025 ;; Tracked objects:
  6026 ;;		On entry : 0/0
  6027 ;;		On exit  : 0/0
  6028 ;;		Unchanged: 0/0
  6029 ;; Data sizes:     COMRAM   BANK0   BANK1
  6030 ;;      Params:         0       0       0
  6031 ;;      Locals:         0       0       0
  6032 ;;      Temps:          0       0       0
  6033 ;;      Totals:         0       0       0
  6034 ;;Total ram usage:        0 bytes
  6035 ;; Hardware stack levels used: 1
  6036 ;; Hardware stack levels required when called: 3
  6037 ;; This function calls:
  6038 ;;		_TiGetTimer
  6039 ;; This function is called by:
  6040 ;;		_main
  6041 ;; This function uses a non-reentrant model
  6042 ;;
  6043                           
  6044                           	psect	text50
  6045  001EFA                     __ptext50:
  6046                           	callstack 0
  6047  001EFA                     _initKeypad:
  6048                           	callstack 27
  6049                           
  6050                           ;keypad.c: 30:     INTCON2bits.RBPU = 0;
  6051                           
  6052                           ;incstack = 0
  6053  001EFA  9EF1               	bcf	241,7,c	;volatile
  6054                           
  6055                           ;keypad.c: 32:     TRISBbits.TRISB0 = 1;
  6056  001EFC  8093               	bsf	147,0,c	;volatile
  6057                           
  6058                           ;keypad.c: 33:     TRISBbits.TRISB1 = 1;
  6059  001EFE  8293               	bsf	147,1,c	;volatile
  6060                           
  6061                           ;keypad.c: 34:     TRISBbits.TRISB2 = 1;
  6062  001F00  8493               	bsf	147,2,c	;volatile
  6063                           
  6064                           ;keypad.c: 35:     TRISBbits.TRISB3 = 0;
  6065  001F02  9693               	bcf	147,3,c	;volatile
  6066                           
  6067                           ;keypad.c: 36:     TRISBbits.TRISB4 = 0;
  6068  001F04  9893               	bcf	147,4,c	;volatile
  6069                           
  6070                           ;keypad.c: 37:     TRISBbits.TRISB5 = 0;
  6071  001F06  9A93               	bcf	147,5,c	;volatile
  6072                           
  6073                           ;keypad.c: 38:     TRISBbits.TRISB6 = 0;
  6074  001F08  9C93               	bcf	147,6,c	;volatile
  6075                           
  6076                           ;keypad.c: 39:     TRISAbits.TRISA4 = 0;
  6077  001F0A  9892               	bcf	146,4,c	;volatile
  6078                           
  6079                           ;keypad.c: 40:     timerBounces = TiGetTimer();
  6080  001F0C  EC8E  F00E         	call	_TiGetTimer	;wreg free
  6081  001F10  6E44               	movwf	_timerBounces^0,c
  6082                           
  6083                           ;keypad.c: 41:     timer_SMS = TiGetTimer();
  6084  001F12  EC8E  F00E         	call	_TiGetTimer	;wreg free
  6085  001F16  6E43               	movwf	_timer_SMS^0,c
  6086  001F18  0012               	return		;funcret
  6087  001F1A                     __end_of_initKeypad:
  6088                           	callstack 0
  6089                           
  6090 ;; *************** function _initJoystick *****************
  6091 ;; Defined at:
  6092 ;;		line 11 in file "Joystick.c"
  6093 ;; Parameters:    Size  Location     Type
  6094 ;;		None
  6095 ;; Auto vars:     Size  Location     Type
  6096 ;;		None
  6097 ;; Return value:  Size  Location     Type
  6098 ;;                  1    wreg      void 
  6099 ;; Registers used:
  6100 ;;		wreg, status,2
  6101 ;; Tracked objects:
  6102 ;;		On entry : 0/0
  6103 ;;		On exit  : 0/0
  6104 ;;		Unchanged: 0/0
  6105 ;; Data sizes:     COMRAM   BANK0   BANK1
  6106 ;;      Params:         0       0       0
  6107 ;;      Locals:         0       0       0
  6108 ;;      Temps:          0       0       0
  6109 ;;      Totals:         0       0       0
  6110 ;;Total ram usage:        0 bytes
  6111 ;; Hardware stack levels used: 1
  6112 ;; Hardware stack levels required when called: 2
  6113 ;; This function calls:
  6114 ;;		Nothing
  6115 ;; This function is called by:
  6116 ;;		_main
  6117 ;; This function uses a non-reentrant model
  6118 ;;
  6119                           
  6120                           	psect	text51
  6121  001EB6                     __ptext51:
  6122                           	callstack 0
  6123  001EB6                     _initJoystick:
  6124                           	callstack 28
  6125                           
  6126                           ;Joystick.c: 12:     TRISAbits.TRISA0 = 1;
  6127                           
  6128                           ;incstack = 0
  6129  001EB6  8092               	bsf	146,0,c	;volatile
  6130                           
  6131                           ;Joystick.c: 13:     TRISAbits.TRISA1 = 1;
  6132  001EB8  8292               	bsf	146,1,c	;volatile
  6133                           
  6134                           ;Joystick.c: 14:     ADCON0 = 0x03;
  6135  001EBA  0E03               	movlw	3
  6136  001EBC  6EC2               	movwf	194,c	;volatile
  6137                           
  6138                           ;Joystick.c: 15:     ADCON1 = 0x0C;
  6139  001EBE  0E0C               	movlw	12
  6140  001EC0  6EC1               	movwf	193,c	;volatile
  6141                           
  6142                           ;Joystick.c: 16:     ADCON2 = 0x44;
  6143  001EC2  0E44               	movlw	68
  6144  001EC4  6EC0               	movwf	192,c	;volatile
  6145                           
  6146                           ;Joystick.c: 18:     TRISCbits.TRISC0 = 0;
  6147  001EC6  9094               	bcf	148,0,c	;volatile
  6148                           
  6149                           ;Joystick.c: 19:     TRISCbits.TRISC1 = 0;
  6150  001EC8  9294               	bcf	148,1,c	;volatile
  6151                           
  6152                           ;Joystick.c: 20:     TRISCbits.TRISC2 = 0;
  6153  001ECA  9494               	bcf	148,2,c	;volatile
  6154                           
  6155                           ;Joystick.c: 21:     moved = 0;
  6156  001ECC  6A2B               	clrf	_moved^0,c
  6157                           
  6158                           ;Joystick.c: 22:     ADCON0bits.GO_DONE=1;
  6159  001ECE  82C2               	bsf	194,1,c	;volatile
  6160                           
  6161                           ;Joystick.c: 23:     ADCON0bits.CHS0=0;
  6162  001ED0  94C2               	bcf	194,2,c	;volatile
  6163                           
  6164                           ;Joystick.c: 24:     ADCON0bits.CHS1=1;
  6165  001ED2  86C2               	bsf	194,3,c	;volatile
  6166                           
  6167                           ;Joystick.c: 25:     stateJoy = 0;
  6168  001ED4  6A2A               	clrf	_stateJoy^0,c
  6169  001ED6  0012               	return		;funcret
  6170  001ED8                     __end_of_initJoystick:
  6171                           	callstack 0
  6172                           
  6173 ;; *************** function _initData *****************
  6174 ;; Defined at:
  6175 ;;		line 27 in file "EEPROM.c"
  6176 ;; Parameters:    Size  Location     Type
  6177 ;;		None
  6178 ;; Auto vars:     Size  Location     Type
  6179 ;;		None
  6180 ;; Return value:  Size  Location     Type
  6181 ;;                  1    wreg      void 
  6182 ;; Registers used:
  6183 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6184 ;; Tracked objects:
  6185 ;;		On entry : 0/0
  6186 ;;		On exit  : 0/0
  6187 ;;		Unchanged: 0/0
  6188 ;; Data sizes:     COMRAM   BANK0   BANK1
  6189 ;;      Params:         0       0       0
  6190 ;;      Locals:         0       0       0
  6191 ;;      Temps:          0       0       0
  6192 ;;      Totals:         0       0       0
  6193 ;;Total ram usage:        0 bytes
  6194 ;; Hardware stack levels used: 1
  6195 ;; Hardware stack levels required when called: 4
  6196 ;; This function calls:
  6197 ;;		_readEEPROM
  6198 ;;		_readUserData
  6199 ;; This function is called by:
  6200 ;;		_main
  6201 ;; This function uses a non-reentrant model
  6202 ;;
  6203                           
  6204                           	psect	text52
  6205  001A82                     __ptext52:
  6206                           	callstack 0
  6207  001A82                     _initData:
  6208                           	callstack 26
  6209                           
  6210                           ;EEPROM.c: 28:     state = 0;
  6211                           
  6212                           ;incstack = 0
  6213  001A82  6A1E               	clrf	_state@EEPROM$F1761^0,c
  6214                           
  6215                           ;EEPROM.c: 29:     for (userNum = 0; userNum < 8; userNum++){
  6216  001A84  6A1D               	clrf	_userNum^0,c
  6217  001A86                     l2505:
  6218  001A86  0E07               	movlw	7
  6219  001A88  641D               	cpfsgt	_userNum^0,c
  6220  001A8A  D001               	goto	l2509
  6221  001A8C  D004               	goto	l859
  6222  001A8E                     l2509:
  6223                           
  6224                           ;EEPROM.c: 30:         readUserData();
  6225  001A8E  ECB5  F00B         	call	_readUserData	;wreg free
  6226                           
  6227                           ;EEPROM.c: 31:     }
  6228  001A92  2A1D               	incf	_userNum^0,f,c
  6229  001A94  D7F8               	goto	l2505
  6230  001A96                     l859:
  6231                           
  6232                           ;EEPROM.c: 32:     for (position = 0; position < 5;){
  6233  001A96  6A1F               	clrf	_position^0,c
  6234  001A98                     l2515:
  6235  001A98  0E04               	movlw	4
  6236  001A9A  641F               	cpfsgt	_position^0,c
  6237  001A9C  D001               	goto	l2519
  6238  001A9E  D013               	goto	l2525
  6239  001AA0                     l2519:
  6240                           
  6241                           ;EEPROM.c: 33:         topScores[position].score = readEEPROM((0x90)+position);
  6242  001AA0  501F               	movf	_position^0,w,c
  6243  001AA2  EC0A  F007         	call	PL8	;call to abstracted procedure
  6244  001AA6  501F               	movf	_position^0,w,c
  6245  001AA8  0F90               	addlw	144
  6246  001AAA  EC4C  F000         	call	_readEEPROM
  6247  001AAE  6EDF               	movwf	indf2,c
  6248                           
  6249                           ;EEPROM.c: 34:         topScores[position].userNum = readEEPROM((0xA0)+position);
  6250  001AB0  501F               	movf	_position^0,w,c
  6251  001AB2  0D02               	mullw	2
  6252  001AB4  ECF8  F006         	call	PL4	;call to abstracted procedure
  6253  001AB8  501F               	movf	_position^0,w,c
  6254  001ABA  0FA0               	addlw	160
  6255  001ABC  EC4C  F000         	call	_readEEPROM
  6256  001AC0  6EDF               	movwf	indf2,c
  6257                           
  6258                           ;EEPROM.c: 35:         position++;
  6259  001AC2  2A1F               	incf	_position^0,f,c
  6260  001AC4  D7E9               	goto	l2515
  6261  001AC6                     l2525:
  6262                           
  6263                           ;EEPROM.c: 37:     lastUserPointer = readEEPROM(0xFF);
  6264  001AC6  0EFF               	movlw	255
  6265  001AC8  EC4C  F000         	call	_readEEPROM
  6266  001ACC  6E1B               	movwf	_lastUserPointer^0,c
  6267                           
  6268                           ;EEPROM.c: 38:     numScores = readEEPROM(0xFE);
  6269  001ACE  0EFE               	movlw	254
  6270  001AD0  EC4C  F000         	call	_readEEPROM
  6271  001AD4  6E20               	movwf	_numScores^0,c
  6272                           
  6273                           ;EEPROM.c: 39:     if (lastUserPointer == 0xFF){
  6274  001AD6  281B               	incf	_lastUserPointer^0,w,c
  6275  001AD8  E101               	bnz	l2531
  6276                           
  6277                           ;EEPROM.c: 40:         lastUserPointer = 0;
  6278  001ADA  6A1B               	clrf	_lastUserPointer^0,c
  6279  001ADC                     l2531:
  6280                           
  6281                           ;EEPROM.c: 42:     if (numScores == 0xFF){
  6282  001ADC  2820               	incf	_numScores^0,w,c
  6283  001ADE  B4D8               	btfsc	status,2,c
  6284                           
  6285                           ;EEPROM.c: 43:         numScores = 0;
  6286  001AE0  6A20               	clrf	_numScores^0,c
  6287  001AE2  0012               	return		;funcret
  6288  001AE4                     __end_of_initData:
  6289                           	callstack 0
  6290                           
  6291 ;; *************** function _readUserData *****************
  6292 ;; Defined at:
  6293 ;;		line 333 in file "EEPROM.c"
  6294 ;; Parameters:    Size  Location     Type
  6295 ;;		None
  6296 ;; Auto vars:     Size  Location     Type
  6297 ;;		None
  6298 ;; Return value:  Size  Location     Type
  6299 ;;                  1    wreg      void 
  6300 ;; Registers used:
  6301 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6302 ;; Tracked objects:
  6303 ;;		On entry : 0/0
  6304 ;;		On exit  : 0/0
  6305 ;;		Unchanged: 0/0
  6306 ;; Data sizes:     COMRAM   BANK0   BANK1
  6307 ;;      Params:         0       0       0
  6308 ;;      Locals:         0       0       0
  6309 ;;      Temps:          2       0       0
  6310 ;;      Totals:         2       0       0
  6311 ;;Total ram usage:        2 bytes
  6312 ;; Hardware stack levels used: 1
  6313 ;; Hardware stack levels required when called: 3
  6314 ;; This function calls:
  6315 ;;		_readEEPROM
  6316 ;; This function is called by:
  6317 ;;		_initData
  6318 ;; This function uses a non-reentrant model
  6319 ;;
  6320                           
  6321                           	psect	text53
  6322  00176A                     __ptext53:
  6323                           	callstack 0
  6324  00176A                     _readUserData:
  6325                           	callstack 26
  6326                           
  6327                           ;EEPROM.c: 334:     for (position = 0; position < 8; position++){
  6328                           
  6329                           ;incstack = 0
  6330  00176A  6A1F               	clrf	_position^0,c
  6331  00176C                     l2303:
  6332  00176C  0E07               	movlw	7
  6333  00176E  641F               	cpfsgt	_position^0,c
  6334  001770  D001               	goto	l2307
  6335  001772  D007               	goto	l2313
  6336  001774                     l2307:
  6337                           
  6338                           ;EEPROM.c: 335:         users[userNum].username[position] = readEEPROM((userNum*16)+posi
      +                          tion);
  6339  001774  D839               	call	PL56	;call to abstracted procedure
  6340  001776  D829               	call	PL22	;call to abstracted procedure
  6341  001778  EC4C  F000         	call	_readEEPROM
  6342  00177C  6EDF               	movwf	indf2,c
  6343                           
  6344                           ;EEPROM.c: 336:     }
  6345  00177E  2A1F               	incf	_position^0,f,c
  6346  001780  D7F5               	goto	l2303
  6347  001782                     l2313:
  6348                           
  6349                           ;EEPROM.c: 337:     users[userNum].username[8] = '\0';
  6350  001782  501D               	movf	_userNum^0,w,c
  6351  001784  0D12               	mullw	18
  6352  001786  0E08               	movlw	low (_users+8)
  6353  001788  24F3               	addwf	243,w,c
  6354  00178A  6ED9               	movwf	fsr2l,c
  6355  00178C  0E01               	movlw	high (_users+8)
  6356  00178E  20F4               	addwfc	prodh,w,c
  6357  001790  6EDA               	movwf	fsr2h,c
  6358  001792  6ADF               	clrf	indf2,c
  6359                           
  6360                           ;EEPROM.c: 338:     for (position = 0; position < 8; position++){
  6361  001794  6A1F               	clrf	_position^0,c
  6362  001796                     l2317:
  6363  001796  0E07               	movlw	7
  6364  001798  641F               	cpfsgt	_position^0,c
  6365  00179A  D001               	goto	l2321
  6366  00179C  D00C               	goto	l2327
  6367  00179E                     l2321:
  6368                           
  6369                           ;EEPROM.c: 339:         users[userNum].password[position] = readEEPROM((userNum*16)+8+po
      +                          sition);
  6370  00179E  D824               	call	PL56	;call to abstracted procedure
  6371  0017A0  0E09               	movlw	9
  6372  0017A2  265F               	addwf	??_readUserData^0,f,c
  6373  0017A4  0E00               	movlw	0
  6374  0017A6  2260               	addwfc	(??_readUserData+1)^0,f,c
  6375  0017A8  D810               	call	PL22	;call to abstracted procedure
  6376  0017AA  0F08               	addlw	8
  6377  0017AC  EC4C  F000         	call	_readEEPROM
  6378  0017B0  6EDF               	movwf	indf2,c
  6379                           
  6380                           ;EEPROM.c: 340:     }
  6381  0017B2  2A1F               	incf	_position^0,f,c
  6382  0017B4  D7F0               	goto	l2317
  6383  0017B6                     l2327:
  6384                           
  6385                           ;EEPROM.c: 341:     users[userNum].password[8] = '\0';
  6386  0017B6  501D               	movf	_userNum^0,w,c
  6387  0017B8  0D12               	mullw	18
  6388  0017BA  0E11               	movlw	low (_users+17)
  6389  0017BC  24F3               	addwf	243,w,c
  6390  0017BE  6ED9               	movwf	fsr2l,c
  6391  0017C0  0E01               	movlw	high (_users+17)
  6392  0017C2  20F4               	addwfc	prodh,w,c
  6393  0017C4  6EDA               	movwf	fsr2h,c
  6394  0017C6  6ADF               	clrf	indf2,c
  6395  0017C8  0C00               	retlw	0	;funcret
  6396  0017CA                     __end_of_readUserData:
  6397                           	callstack 0
  6398  0017CA                     PL22:
  6399                           	callstack 26
  6400  0017CA  50F3               	movf	243,w,c
  6401  0017CC  265F               	addwf	??_readUserData^0,f,c
  6402  0017CE  50F4               	movf	244,w,c
  6403  0017D0  2260               	addwfc	(??_readUserData+1)^0,f,c
  6404  0017D2  501F               	movf	_position^0,w,c
  6405  0017D4  245F               	addwf	??_readUserData^0,w,c
  6406  0017D6  6ED9               	movwf	fsr2l,c
  6407  0017D8  0E00               	movlw	0
  6408  0017DA  2060               	addwfc	(??_readUserData+1)^0,w,c
  6409  0017DC  6EDA               	movwf	fsr2h,c
  6410  0017DE  501D               	movf	_userNum^0,w,c
  6411  0017E0  0D10               	mullw	16
  6412  0017E2  50F3               	movf	243,w,c
  6413  0017E4  241F               	addwf	_position^0,w,c
  6414  0017E6  0012               	return	
  6415  0017E8                     __end_ofPL22:
  6416                           	callstack 0
  6417  0017E8                     PL56:
  6418                           	callstack 26
  6419  0017E8  501D               	movf	_userNum^0,w,c
  6420  0017EA  0D12               	mullw	18
  6421  0017EC  0E00               	movlw	low _users
  6422  0017EE  6E5F               	movwf	??_readUserData^0,c
  6423  0017F0  0E01               	movlw	high _users
  6424  0017F2  6E60               	movwf	(??_readUserData+1)^0,c
  6425  0017F4  0012               	return	
  6426  0017F6                     __end_ofPL56:
  6427                           	callstack 0
  6428                           
  6429 ;; *************** function _readEEPROM *****************
  6430 ;; Defined at:
  6431 ;;		line 361 in file "EEPROM.c"
  6432 ;; Parameters:    Size  Location     Type
  6433 ;;  address         1    wreg     unsigned char 
  6434 ;; Auto vars:     Size  Location     Type
  6435 ;;  address         1    5[COMRAM] unsigned char 
  6436 ;; Return value:  Size  Location     Type
  6437 ;;                  1    wreg      unsigned char 
  6438 ;; Registers used:
  6439 ;;		wreg, status,2
  6440 ;; Tracked objects:
  6441 ;;		On entry : 0/0
  6442 ;;		On exit  : 0/0
  6443 ;;		Unchanged: 0/0
  6444 ;; Data sizes:     COMRAM   BANK0   BANK1
  6445 ;;      Params:         0       0       0
  6446 ;;      Locals:         1       0       0
  6447 ;;      Temps:          0       0       0
  6448 ;;      Totals:         1       0       0
  6449 ;;Total ram usage:        1 bytes
  6450 ;; Hardware stack levels used: 1
  6451 ;; Hardware stack levels required when called: 2
  6452 ;; This function calls:
  6453 ;;		Nothing
  6454 ;; This function is called by:
  6455 ;;		_initData
  6456 ;;		_readUserData
  6457 ;; This function uses a non-reentrant model
  6458 ;;
  6459                           
  6460                           	psect	text54
  6461  000098                     __ptext54:
  6462                           	callstack 0
  6463  000098                     _readEEPROM:
  6464                           	callstack 26
  6465                           
  6466                           ;incstack = 0
  6467                           ;readEEPROM@address stored from wreg
  6468  000098  6E5E               	movwf	readEEPROM@address^0,c
  6469                           
  6470                           ;EEPROM.c: 362:     EECON1bits.EEPGD = 0;
  6471  00009A  9EA6               	bcf	166,7,c	;volsfr
  6472                           
  6473                           ;EEPROM.c: 363:     EECON1bits.CFGS = 0;
  6474  00009C  9CA6               	bcf	166,6,c	;volsfr
  6475                           
  6476                           ;EEPROM.c: 364:     EEADR = address;
  6477  00009E  C05E  FFA9         	movff	readEEPROM@address,4009	;volatile
  6478                           
  6479                           ;EEPROM.c: 365:     EECON1bits.RD = 1;
  6480  0000A2  80A6               	bsf	166,0,c	;volsfr
  6481                           
  6482                           ;EEPROM.c: 366:     return EEDATA;
  6483  0000A4  50A8               	movf	168,w,c	;volatile
  6484  0000A6  0012               	return		;funcret
  6485  0000A8                     __end_of_readEEPROM:
  6486                           	callstack 0
  6487                           
  6488 ;; *************** function _initAudio *****************
  6489 ;; Defined at:
  6490 ;;		line 19 in file "Audio.c"
  6491 ;; Parameters:    Size  Location     Type
  6492 ;;		None
  6493 ;; Auto vars:     Size  Location     Type
  6494 ;;		None
  6495 ;; Return value:  Size  Location     Type
  6496 ;;                  1    wreg      void 
  6497 ;; Registers used:
  6498 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6499 ;; Tracked objects:
  6500 ;;		On entry : 0/0
  6501 ;;		On exit  : 0/0
  6502 ;;		Unchanged: 0/0
  6503 ;; Data sizes:     COMRAM   BANK0   BANK1
  6504 ;;      Params:         0       0       0
  6505 ;;      Locals:         0       0       0
  6506 ;;      Temps:          0       0       0
  6507 ;;      Totals:         0       0       0
  6508 ;;Total ram usage:        0 bytes
  6509 ;; Hardware stack levels used: 1
  6510 ;; Hardware stack levels required when called: 3
  6511 ;; This function calls:
  6512 ;;		_TiGetTimer
  6513 ;; This function is called by:
  6514 ;;		_main
  6515 ;; This function uses a non-reentrant model
  6516 ;;
  6517                           
  6518                           	psect	text55
  6519  00004C                     __ptext55:
  6520                           	callstack 0
  6521  00004C                     _initAudio:
  6522                           	callstack 27
  6523                           
  6524                           ;Audio.c: 20:     TRISCbits.TRISC3 = 0;
  6525                           
  6526                           ;incstack = 0
  6527  00004C  9694               	bcf	148,3,c	;volatile
  6528                           
  6529                           ;Audio.c: 21:     state = 0;
  6530  00004E  6A39               	clrf	_state@Audio$F967^0,c
  6531                           
  6532                           ;Audio.c: 22:     periodTimer = TiGetTimer();
  6533  000050  EC8E  F00E         	call	_TiGetTimer	;wreg free
  6534  000054  6E38               	movwf	_periodTimer^0,c
  6535                           
  6536                           ;Audio.c: 23:     timerSong = TiGetTimer();
  6537  000056  EC8E  F00E         	call	_TiGetTimer	;wreg free
  6538  00005A  6E37               	movwf	_timerSong^0,c
  6539                           
  6540                           ;Audio.c: 24:     period = 1;
  6541  00005C  0E01               	movlw	1
  6542  00005E  6E36               	movwf	_period^0,c
  6543  000060  0C01               	retlw	1	;funcret
  6544  000062                     __end_of_initAudio:
  6545                           	callstack 0
  6546                           
  6547 ;; *************** function _dataMotor *****************
  6548 ;; Defined at:
  6549 ;;		line 47 in file "EEPROM.c"
  6550 ;; Parameters:    Size  Location     Type
  6551 ;;		None
  6552 ;; Auto vars:     Size  Location     Type
  6553 ;;		None
  6554 ;; Return value:  Size  Location     Type
  6555 ;;                  1    wreg      void 
  6556 ;; Registers used:
  6557 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6558 ;; Tracked objects:
  6559 ;;		On entry : 0/0
  6560 ;;		On exit  : 0/0
  6561 ;;		Unchanged: 0/0
  6562 ;; Data sizes:     COMRAM   BANK0   BANK1
  6563 ;;      Params:         0       0       0
  6564 ;;      Locals:         0       2       0
  6565 ;;      Temps:          6       0       0
  6566 ;;      Totals:         6       2       0
  6567 ;;Total ram usage:        8 bytes
  6568 ;; Hardware stack levels used: 1
  6569 ;; Hardware stack levels required when called: 6
  6570 ;; This function calls:
  6571 ;;		_LcGotoXY
  6572 ;;		_LcPutChar
  6573 ;;		___lbdiv
  6574 ;;		___lbmod
  6575 ;;		_saveEEPROM
  6576 ;; This function is called by:
  6577 ;;		_main
  6578 ;; This function uses a non-reentrant model
  6579 ;;
  6580                           
  6581                           	psect	text56
  6582  0009A8                     __ptext56:
  6583                           	callstack 0
  6584  0009A8                     _dataMotor:
  6585                           	callstack 24
  6586                           
  6587                           ;EEPROM.c: 48:     switch(state){
  6588                           
  6589                           ;incstack = 0
  6590  0009A8  D1BE               	goto	l7045
  6591  0009AA                     l6819:
  6592                           
  6593                           ;EEPROM.c: 53:             status = 2;
  6594  0009AA  0E02               	movlw	2
  6595  0009AC  6E1C               	movwf	_status^0,c
  6596                           
  6597                           ;EEPROM.c: 54:             if (userNum != 8){
  6598  0009AE  0E08               	movlw	8
  6599  0009B0  181D               	xorwf	_userNum^0,w,c
  6600  0009B2  E003               	bz	l6825
  6601                           
  6602                           ;EEPROM.c: 55:                 state = 2;
  6603  0009B4  0E02               	movlw	2
  6604  0009B6  6E1E               	movwf	_state@EEPROM$F1761^0,c
  6605                           
  6606                           ;EEPROM.c: 57:             } else {
  6607  0009B8  0C02               	retlw	2
  6608  0009BA                     l6825:
  6609                           
  6610                           ;EEPROM.c: 58:                 status = 1;
  6611  0009BA  0E01               	movlw	1
  6612  0009BC  6E1C               	movwf	_status^0,c
  6613  0009BE                     l6827:
  6614                           
  6615                           ;EEPROM.c: 59:                 state = 0;
  6616  0009BE  6A1E               	clrf	_state@EEPROM$F1761^0,c
  6617  0009C0  0012               	return	
  6618  0009C2                     l6829:
  6619                           
  6620                           ;EEPROM.c: 64:             if (users[userNum].username[position] == (*mUser).username[po
      +                          sition]){
  6621  0009C2  501F               	movf	_position^0,w,c
  6622  0009C4  240B               	addwf	_mUser@EEPROM$F1764^0,w,c
  6623  0009C6  6ED9               	movwf	fsr2l,c
  6624  0009C8  DA2B               	call	PL10	;call to abstracted procedure
  6625  0009CA  E109               	bnz	l874
  6626                           
  6627                           ;EEPROM.c: 67:                 if ((*mUser).username[position] == '\0'){
  6628  0009CC  DA3F               	call	PL12	;call to abstracted procedure
  6629  0009CE  50DF               	movf	indf2,w,c
  6630  0009D0  E104               	bnz	l6837
  6631                           
  6632                           ;EEPROM.c: 68:                     state = 3;
  6633  0009D2  0E03               	movlw	3
  6634  0009D4  6E1E               	movwf	_state@EEPROM$F1761^0,c
  6635                           
  6636                           ;EEPROM.c: 69:                     position = 0;
  6637  0009D6  6A1F               	clrf	_position^0,c
  6638                           
  6639                           ;EEPROM.c: 70:                 } else {
  6640  0009D8  0012               	return	
  6641  0009DA                     l6837:
  6642                           
  6643                           ;EEPROM.c: 71:                     position++;
  6644  0009DA  2A1F               	incf	_position^0,f,c
  6645  0009DC  0012               	return	
  6646  0009DE                     l874:
  6647                           
  6648                           ;EEPROM.c: 74:                 position = 0;
  6649  0009DE  6A1F               	clrf	_position^0,c
  6650                           
  6651                           ;EEPROM.c: 75:                 userNum++;
  6652  0009E0  2A1D               	incf	_userNum^0,f,c
  6653                           
  6654                           ;EEPROM.c: 76:                 state = 1;
  6655  0009E2  0E01               	movlw	1
  6656  0009E4  6E1E               	movwf	_state@EEPROM$F1761^0,c
  6657  0009E6  0C01               	retlw	1
  6658  0009E8                     l6843:
  6659                           
  6660                           ;EEPROM.c: 83:             if (users[userNum].password[position] == (*mUser).password[po
      +                          sition]){
  6661  0009E8  DA08               	call	PL6	;call to abstracted procedure
  6662  0009EA  501D               	movf	_userNum^0,w,c
  6663  0009EC  0D12               	mullw	18
  6664  0009EE  0E00               	movlw	low _users
  6665  0009F0  6E6F               	movwf	(??_dataMotor+3)^0,c
  6666  0009F2  0E01               	movlw	high _users
  6667  0009F4  6E70               	movwf	(??_dataMotor+4)^0,c
  6668  0009F6  0E09               	movlw	9
  6669  0009F8  266F               	addwf	(??_dataMotor+3)^0,f,c
  6670  0009FA  0E00               	movlw	0
  6671  0009FC  2270               	addwfc	(??_dataMotor+4)^0,f,c
  6672  0009FE  50F3               	movf	243,w,c
  6673  000A00  266F               	addwf	(??_dataMotor+3)^0,f,c
  6674  000A02  50F4               	movf	244,w,c
  6675  000A04  2270               	addwfc	(??_dataMotor+4)^0,f,c
  6676  000A06  501F               	movf	_position^0,w,c
  6677  000A08  246F               	addwf	(??_dataMotor+3)^0,w,c
  6678  000A0A  6EE1               	movwf	fsr1l,c
  6679  000A0C  0E00               	movlw	0
  6680  000A0E  2070               	addwfc	(??_dataMotor+4)^0,w,c
  6681  000A10  6EE2               	movwf	fsr1h,c
  6682  000A12  50DE               	movf	postinc2,w,c
  6683  000A14  18E6               	xorwf	postinc1,w,c
  6684  000A16  E1D1               	bnz	l6825
  6685                           
  6686                           ;EEPROM.c: 85:                 if ((*mUser).password[position] == '\0'){
  6687  000A18  D9F0               	call	PL6	;call to abstracted procedure
  6688  000A1A  50DF               	movf	indf2,w,c
  6689  000A1C  E1DE               	bnz	l6837
  6690                           
  6691                           ;EEPROM.c: 86:                     state = 0;
  6692  000A1E  6A1E               	clrf	_state@EEPROM$F1761^0,c
  6693                           
  6694                           ;EEPROM.c: 87:                     status = 0;
  6695  000A20  6A1C               	clrf	_status^0,c
  6696                           
  6697                           ;EEPROM.c: 88:                 }else {
  6698  000A22  0012               	return	
  6699  000A24                     l6855:
  6700                           
  6701                           ;EEPROM.c: 102:             if (userNum != 8){
  6702  000A24  0E08               	movlw	8
  6703  000A26  181D               	xorwf	_userNum^0,w,c
  6704  000A28  E003               	bz	l6859
  6705                           
  6706                           ;EEPROM.c: 103:                 state = 6;
  6707  000A2A  0E06               	movlw	6
  6708  000A2C  6E1E               	movwf	_state@EEPROM$F1761^0,c
  6709                           
  6710                           ;EEPROM.c: 105:             } else {
  6711  000A2E  0C06               	retlw	6
  6712  000A30                     l6859:
  6713                           
  6714                           ;EEPROM.c: 106:                 state = 10;
  6715  000A30  0E0A               	movlw	10
  6716  000A32  6E1E               	movwf	_state@EEPROM$F1761^0,c
  6717  000A34  0C0A               	retlw	10
  6718  000A36                     l6861:
  6719                           
  6720                           ;EEPROM.c: 110:             if (users[userNum].username[position] == (*mUser).username[p
      +                          osition]){
  6721  000A36  501F               	movf	_position^0,w,c
  6722  000A38  240B               	addwf	_mUser@EEPROM$F1764^0,w,c
  6723  000A3A  6ED9               	movwf	fsr2l,c
  6724  000A3C  D9F1               	call	PL10	;call to abstracted procedure
  6725  000A3E  E107               	bnz	l6871
  6726                           
  6727                           ;EEPROM.c: 112:                 if ((*mUser).username[position] == '\0'){
  6728  000A40  DA05               	call	PL12	;call to abstracted procedure
  6729  000A42  50DF               	movf	indf2,w,c
  6730  000A44  E1CA               	bnz	l6837
  6731                           
  6732                           ;EEPROM.c: 113:                     state = 0;
  6733  000A46  6A1E               	clrf	_state@EEPROM$F1761^0,c
  6734                           
  6735                           ;EEPROM.c: 114:                     status = 4;
  6736  000A48  0E04               	movlw	4
  6737  000A4A  6E1C               	movwf	_status^0,c
  6738                           
  6739                           ;EEPROM.c: 115:                 }else {
  6740  000A4C  0C04               	retlw	4
  6741  000A4E                     l6871:
  6742                           
  6743                           ;EEPROM.c: 120:                 state = 7;
  6744  000A4E  0E07               	movlw	7
  6745  000A50  6E1E               	movwf	_state@EEPROM$F1761^0,c
  6746  000A52  0C07               	retlw	7
  6747  000A54                     l891:
  6748                           
  6749                           ;EEPROM.c: 125:             position = 0;
  6750  000A54  6A1F               	clrf	_position^0,c
  6751                           
  6752                           ;EEPROM.c: 126:             userNum++;
  6753  000A56  2A1D               	incf	_userNum^0,f,c
  6754                           
  6755                           ;EEPROM.c: 127:             state = 5;
  6756  000A58  0E05               	movlw	5
  6757  000A5A  6E1E               	movwf	_state@EEPROM$F1761^0,c
  6758                           
  6759                           ;EEPROM.c: 128:             break;
  6760  000A5C  0C05               	retlw	5
  6761  000A5E                     l6877:
  6762                           
  6763                           ;EEPROM.c: 131:             saveEEPROM((lastUserPointer*16)+position ,(*mUser).username[
      +                          position]);
  6764  000A5E  D9F6               	call	PL12	;call to abstracted procedure
  6765  000A60  DA03               	call	PL50	;call to abstracted procedure
  6766  000A62  EC6C  F00F         	call	_saveEEPROM
  6767                           
  6768                           ;EEPROM.c: 132:             users[lastUserPointer].username[position] = (*mUser).usernam
      +                          e[position];
  6769  000A66  D9F2               	call	PL12	;call to abstracted procedure
  6770  000A68  501B               	movf	_lastUserPointer^0,w,c
  6771  000A6A  0D12               	mullw	18
  6772  000A6C  0E00               	movlw	low _users
  6773  000A6E  6E6C               	movwf	??_dataMotor^0,c
  6774  000A70  0E01               	movlw	high _users
  6775  000A72  6E6D               	movwf	(??_dataMotor+1)^0,c
  6776  000A74  50F3               	movf	243,w,c
  6777  000A76  266C               	addwf	??_dataMotor^0,f,c
  6778  000A78  50F4               	movf	244,w,c
  6779  000A7A  226D               	addwfc	(??_dataMotor+1)^0,f,c
  6780  000A7C  501F               	movf	_position^0,w,c
  6781  000A7E  246C               	addwf	??_dataMotor^0,w,c
  6782  000A80  6EE1               	movwf	fsr1l,c
  6783  000A82  0E00               	movlw	0
  6784  000A84  206D               	addwfc	(??_dataMotor+1)^0,w,c
  6785  000A86  6EE2               	movwf	fsr1h,c
  6786  000A88  CFDF FFE7          	movff	indf2,indf1
  6787                           
  6788                           ;EEPROM.c: 133:             if(position < 7){
  6789  000A8C  0E07               	movlw	7
  6790  000A8E  601F               	cpfslt	_position^0,c
  6791  000A90  D003               	goto	l893
  6792                           
  6793                           ;EEPROM.c: 134:                 position++;
  6794  000A92  2A1F               	incf	_position^0,f,c
  6795                           
  6796                           ;EEPROM.c: 135:                 saveState = 10;
  6797  000A94  0E0A               	movlw	10
  6798  000A96  D002               	goto	L7
  6799  000A98                     l893:
  6800                           
  6801                           ;EEPROM.c: 137:                 position = 0;
  6802  000A98  6A1F               	clrf	_position^0,c
  6803  000A9A                     l6887:
  6804                           
  6805                           ;EEPROM.c: 138:                 saveState = 12;
  6806  000A9A  0E0C               	movlw	12
  6807  000A9C                     L7:
  6808  000A9C  6E19               	movwf	_saveState^0,c
  6809  000A9E                     l894:
  6810                           
  6811                           ;EEPROM.c: 140:             state = 11;
  6812  000A9E  0E0B               	movlw	11
  6813  000AA0  6E1E               	movwf	_state@EEPROM$F1761^0,c
  6814                           
  6815                           ;EEPROM.c: 141:             break;
  6816  000AA2  0C0B               	retlw	11
  6817  000AA4                     l895:
  6818                           
  6819                           ;EEPROM.c: 143:             if(EECON1bits.WR == 0){
  6820  000AA4  B2A6               	btfsc	166,1,c	;volsfr
  6821  000AA6  0012               	return	
  6822                           
  6823                           ;EEPROM.c: 144:                 state = saveState;
  6824  000AA8  C019  F01E         	movff	_saveState,_state@EEPROM$F1761
  6825  000AAC  0012               	return	
  6826  000AAE                     l6891:
  6827                           
  6828                           ;EEPROM.c: 148:             users[lastUserPointer].password[position] = (*mUser).passwor
      +                          d[position];
  6829  000AAE  D9A5               	call	PL6	;call to abstracted procedure
  6830  000AB0  501B               	movf	_lastUserPointer^0,w,c
  6831  000AB2  0D12               	mullw	18
  6832  000AB4  0E00               	movlw	low _users
  6833  000AB6  6E6E               	movwf	(??_dataMotor+2)^0,c
  6834  000AB8  0E01               	movlw	high _users
  6835  000ABA  6E6F               	movwf	(??_dataMotor+3)^0,c
  6836  000ABC  0E09               	movlw	9
  6837  000ABE  266E               	addwf	(??_dataMotor+2)^0,f,c
  6838  000AC0  0E00               	movlw	0
  6839  000AC2  226F               	addwfc	(??_dataMotor+3)^0,f,c
  6840  000AC4  50F3               	movf	243,w,c
  6841  000AC6  266E               	addwf	(??_dataMotor+2)^0,f,c
  6842  000AC8  50F4               	movf	244,w,c
  6843  000ACA  226F               	addwfc	(??_dataMotor+3)^0,f,c
  6844  000ACC  501F               	movf	_position^0,w,c
  6845  000ACE  246E               	addwf	(??_dataMotor+2)^0,w,c
  6846  000AD0  6EE1               	movwf	fsr1l,c
  6847  000AD2  0E00               	movlw	0
  6848  000AD4  206F               	addwfc	(??_dataMotor+3)^0,w,c
  6849  000AD6  6EE2               	movwf	fsr1h,c
  6850  000AD8  CFDF FFE7          	movff	indf2,indf1
  6851                           
  6852                           ;EEPROM.c: 149:             saveEEPROM((lastUserPointer*16)+position+8,(*mUser).password
      +                          [position]);
  6853  000ADC  D98E               	call	PL6	;call to abstracted procedure
  6854  000ADE  D9C4               	call	PL50	;call to abstracted procedure
  6855  000AE0  0F08               	addlw	8
  6856  000AE2  EC6C  F00F         	call	_saveEEPROM
  6857                           
  6858                           ;EEPROM.c: 150:             if(position < 7){
  6859  000AE6  0E07               	movlw	7
  6860  000AE8  601F               	cpfslt	_position^0,c
  6861  000AEA  D002               	goto	l898
  6862                           
  6863                           ;EEPROM.c: 151:                 position++;
  6864  000AEC  2A1F               	incf	_position^0,f,c
  6865  000AEE  D7D5               	goto	l6887
  6866  000AF0                     l898:
  6867                           
  6868                           ;EEPROM.c: 154:                 position = 0;
  6869  000AF0  6A1F               	clrf	_position^0,c
  6870                           
  6871                           ;EEPROM.c: 155:                 saveState = 14;
  6872  000AF2  0E0E               	movlw	14
  6873  000AF4  D7D3               	goto	L7
  6874  000AF6                     l6903:
  6875                           
  6876                           ;EEPROM.c: 160:             if (position >= numScores){
  6877  000AF6  5020               	movf	_numScores^0,w,c
  6878  000AF8  5C1F               	subwf	_position^0,w,c
  6879  000AFA  E302               	bnc	l6909
  6880                           
  6881                           ;EEPROM.c: 161:                 state = 16;
  6882  000AFC  0E10               	movlw	16
  6883  000AFE  D76A               	goto	L8
  6884  000B00                     l6909:
  6885  000B00  501F               	movf	_position^0,w,c
  6886  000B02  0D02               	mullw	2
  6887  000B04  D975               	call	PL4	;call to abstracted procedure
  6888  000B06  501B               	movf	_lastUserPointer^0,w,c
  6889  000B08  18DE               	xorwf	postinc2,w,c
  6890  000B0A  E001 D766          	bnz	l6837
  6891                           
  6892                           ;EEPROM.c: 164:                 topScores[position].userNum = 0xFF;
  6893  000B0E  501F               	movf	_position^0,w,c
  6894  000B10  0D02               	mullw	2
  6895  000B12  D96E               	call	PL4	;call to abstracted procedure
  6896  000B14  68DF               	setf	indf2,c
  6897                           
  6898                           ;EEPROM.c: 165:                 topScores[position].score = 0xFF;
  6899  000B16  501F               	movf	_position^0,w,c
  6900  000B18  D97D               	call	PL8	;call to abstracted procedure
  6901  000B1A  68DF               	setf	indf2,c
  6902                           
  6903                           ;EEPROM.c: 166:                 numScores--;
  6904  000B1C  0620               	decf	_numScores^0,f,c
  6905                           
  6906                           ;EEPROM.c: 167:                 state = 15;
  6907  000B1E  0E0F               	movlw	15
  6908  000B20  6E1E               	movwf	_state@EEPROM$F1761^0,c
  6909                           
  6910                           ;EEPROM.c: 168:             }else{
  6911  000B22  0C0F               	retlw	15
  6912  000B24                     l6919:
  6913                           
  6914                           ;EEPROM.c: 173:             if (position < numScores){
  6915  000B24  5020               	movf	_numScores^0,w,c
  6916  000B26  5C1F               	subwf	_position^0,w,c
  6917  000B28  E218               	bc	l906
  6918                           
  6919                           ;EEPROM.c: 174:                 topScores[position].userNum = topScores[position+1].user
      +                          Num;
  6920  000B2A  501F               	movf	_position^0,w,c
  6921  000B2C  0D02               	mullw	2
  6922  000B2E  50F3               	movf	243,w,c
  6923  000B30  0F04               	addlw	low (_topScores+3)
  6924  000B32  6ED9               	movwf	fsr2l,c
  6925  000B34  6ADA               	clrf	fsr2h,c
  6926  000B36  501F               	movf	_position^0,w,c
  6927  000B38  0D02               	mullw	2
  6928  000B3A  50F3               	movf	243,w,c
  6929  000B3C  0F02               	addlw	low (_topScores+1)
  6930  000B3E  6EE1               	movwf	fsr1l,c
  6931  000B40  6AE2               	clrf	fsr1h,c
  6932  000B42  CFDF FFE7          	movff	indf2,indf1
  6933                           
  6934                           ;EEPROM.c: 175:                 topScores[position].score = topScores[position+1].score;
  6935  000B46  501F               	movf	_position^0,w,c
  6936  000B48  0D02               	mullw	2
  6937  000B4A  50F3               	movf	243,w,c
  6938  000B4C  0F03               	addlw	low (_topScores+2)
  6939  000B4E  6ED9               	movwf	fsr2l,c
  6940  000B50  6ADA               	clrf	fsr2h,c
  6941  000B52  D983               	call	PL18	;call to abstracted procedure
  6942  000B54  CFDF FFE7          	movff	indf2,indf1
  6943  000B58  D740               	goto	l6837
  6944  000B5A                     l906:
  6945                           
  6946                           ;EEPROM.c: 178:                 position = 0;
  6947  000B5A  6A1F               	clrf	_position^0,c
  6948                           
  6949                           ;EEPROM.c: 179:                 state = 14;
  6950  000B5C  0E0E               	movlw	14
  6951  000B5E  6E1E               	movwf	_state@EEPROM$F1761^0,c
  6952  000B60  0C0E               	retlw	14
  6953  000B62                     l6927:
  6954                           
  6955                           ;EEPROM.c: 183:             if (position < 5){
  6956  000B62  0E05               	movlw	5
  6957  000B64  601F               	cpfslt	_position^0,c
  6958  000B66  D00A               	goto	l6935
  6959                           
  6960                           ;EEPROM.c: 184:                 saveEEPROM(0x90 + position, topScores[position].score);
  6961  000B68  501F               	movf	_position^0,w,c
  6962  000B6A  D954               	call	PL8	;call to abstracted procedure
  6963  000B6C  50DF               	movf	indf2,w,c
  6964  000B6E  6E5E               	movwf	saveEEPROM@data^0,c
  6965  000B70  501F               	movf	_position^0,w,c
  6966  000B72  0F90               	addlw	144
  6967  000B74  EC6C  F00F         	call	_saveEEPROM
  6968                           
  6969                           ;EEPROM.c: 185:                 saveState = 17;
  6970  000B78  0E11               	movlw	17
  6971  000B7A  D790               	goto	L7
  6972  000B7C                     l6935:
  6973                           
  6974                           ;EEPROM.c: 188:                 state = 18;
  6975  000B7C  0E12               	movlw	18
  6976  000B7E  6E1E               	movwf	_state@EEPROM$F1761^0,c
  6977  000B80  0C12               	retlw	18
  6978  000B82                     l6937:
  6979                           
  6980                           ;EEPROM.c: 193:             saveEEPROM(0xA0 + position, topScores[position].userNum);
  6981  000B82  501F               	movf	_position^0,w,c
  6982  000B84  0D02               	mullw	2
  6983  000B86  D934               	call	PL4	;call to abstracted procedure
  6984  000B88  50DF               	movf	indf2,w,c
  6985  000B8A  6E5E               	movwf	saveEEPROM@data^0,c
  6986  000B8C  501F               	movf	_position^0,w,c
  6987  000B8E  0FA0               	addlw	160
  6988  000B90  EC6C  F00F         	call	_saveEEPROM
  6989                           
  6990                           ;EEPROM.c: 194:             saveState = 16;
  6991  000B94  0E10               	movlw	16
  6992  000B96  6E19               	movwf	_saveState^0,c
  6993                           
  6994                           ;EEPROM.c: 195:             state = 11;
  6995  000B98  0E0B               	movlw	11
  6996  000B9A  6E1E               	movwf	_state@EEPROM$F1761^0,c
  6997  000B9C  D71E               	goto	l6837
  6998  000B9E                     l6945:
  6999                           
  7000                           ;EEPROM.c: 201:             saveEEPROM(0xFE,numScores);
  7001  000B9E  D96B               	call	PL78	;call to abstracted procedure
  7002  000BA0  EC6C  F00F         	call	_saveEEPROM
  7003                           
  7004                           ;EEPROM.c: 203:             saveState = 19;
  7005  000BA4  0E13               	movlw	19
  7006  000BA6  D77A               	goto	L7
  7007  000BA8                     l6951:
  7008                           
  7009                           ;EEPROM.c: 207:             lastUserPointer = (lastUserPointer+1)%8;
  7010  000BA8  281B               	incf	_lastUserPointer^0,w,c
  7011  000BAA  0B07               	andlw	7
  7012  000BAC  6E1B               	movwf	_lastUserPointer^0,c
  7013                           
  7014                           ;EEPROM.c: 208:             saveEEPROM(0xFF,lastUserPointer);
  7015  000BAE  C01B  F05E         	movff	_lastUserPointer,saveEEPROM@data
  7016  000BB2  0EFF               	movlw	255
  7017  000BB4  EC6C  F00F         	call	_saveEEPROM
  7018                           
  7019                           ;EEPROM.c: 209:             saveState = 0;
  7020  000BB8  6A19               	clrf	_saveState^0,c
  7021                           
  7022                           ;EEPROM.c: 210:             status = 3;
  7023  000BBA  0E03               	movlw	3
  7024  000BBC  6E1C               	movwf	_status^0,c
  7025  000BBE  D76F               	goto	l894
  7026  000BC0                     l6961:
  7027                           
  7028                           ;EEPROM.c: 215:             if (numScores < 5){
  7029  000BC0  0E05               	movlw	5
  7030  000BC2  6020               	cpfslt	_numScores^0,c
  7031  000BC4  D008               	goto	l6973
  7032                           
  7033                           ;EEPROM.c: 216:                 status = numScores;
  7034  000BC6  C020  F01C         	movff	_numScores,_status
  7035                           
  7036                           ;EEPROM.c: 217:                 numScores++;
  7037  000BCA  2A20               	incf	_numScores^0,f,c
  7038                           
  7039                           ;EEPROM.c: 218:                 saveEEPROM(0xFE,numScores);
  7040  000BCC  D954               	call	PL78	;call to abstracted procedure
  7041  000BCE  EC6C  F00F         	call	_saveEEPROM
  7042                           
  7043                           ;EEPROM.c: 220:                 saveState = 21;
  7044  000BD2  0E15               	movlw	21
  7045  000BD4  D763               	goto	L7
  7046  000BD6                     l6973:
  7047  000BD6  0E05               	movlw	5
  7048  000BD8  181F               	xorwf	_position^0,w,c
  7049  000BDA  E109               	bnz	l6979
  7050                           
  7051                           ;EEPROM.c: 224:                 if (topScores[status].score < saveScore){
  7052  000BDC  501C               	movf	_status^0,w,c
  7053  000BDE  D91A               	call	PL8	;call to abstracted procedure
  7054  000BE0  501A               	movf	_saveScore^0,w,c
  7055  000BE2  5CDE               	subwf	postinc2,w,c
  7056  000BE4  E301 D6EB          	bc	l6827
  7057                           
  7058                           ;EEPROM.c: 225:                     state = 21;
  7059  000BE8  0E15               	movlw	21
  7060  000BEA  6E1E               	movwf	_state@EEPROM$F1761^0,c
  7061                           
  7062                           ;EEPROM.c: 226:                 } else{
  7063  000BEC  0C15               	retlw	21
  7064  000BEE                     l6979:
  7065                           
  7066                           ;EEPROM.c: 230:                 if (topScores[position].score < topScores[status].score)
      +                          {
  7067  000BEE  501C               	movf	_status^0,w,c
  7068  000BF0  D911               	call	PL8	;call to abstracted procedure
  7069  000BF2  D933               	call	PL18	;call to abstracted procedure
  7070  000BF4  50DE               	movf	postinc2,w,c
  7071  000BF6  5CE6               	subwf	postinc1,w,c
  7072  000BF8  E301 D6EF          	bc	l6837
  7073                           
  7074                           ;EEPROM.c: 231:                     status = position;
  7075  000BFC  C01F  F01C         	movff	_position,_status
  7076  000C00  D6EC               	goto	l6837
  7077  000C02                     l6985:
  7078                           
  7079                           ;EEPROM.c: 237:             topScores[status].score = saveScore;
  7080  000C02  501C               	movf	_status^0,w,c
  7081  000C04  D907               	call	PL8	;call to abstracted procedure
  7082  000C06  C01A  FFDF         	movff	_saveScore,indf2
  7083                           
  7084                           ;EEPROM.c: 238:             topScores[status].userNum = userNum;
  7085  000C0A  501C               	movf	_status^0,w,c
  7086  000C0C  0D02               	mullw	2
  7087  000C0E  D8F0               	call	PL4	;call to abstracted procedure
  7088  000C10  C01D  FFDF         	movff	_userNum,indf2
  7089                           
  7090                           ;EEPROM.c: 239:             state = 22;
  7091  000C14  0E16               	movlw	22
  7092  000C16  6E1E               	movwf	_state@EEPROM$F1761^0,c
  7093                           
  7094                           ;EEPROM.c: 240:             break;
  7095  000C18  0C16               	retlw	22
  7096  000C1A                     l6989:
  7097                           
  7098                           ;EEPROM.c: 242:             saveEEPROM(0x90 + status,saveScore);
  7099  000C1A  C01A  F05E         	movff	_saveScore,saveEEPROM@data
  7100  000C1E  501C               	movf	_status^0,w,c
  7101  000C20  0F90               	addlw	144
  7102  000C22  EC6C  F00F         	call	_saveEEPROM
  7103                           
  7104                           ;EEPROM.c: 243:             saveState = 23;
  7105  000C26  0E17               	movlw	23
  7106  000C28  D739               	goto	L7
  7107  000C2A                     l6995:
  7108                           
  7109                           ;EEPROM.c: 247:             saveEEPROM(0xA0 + status,userNum);
  7110  000C2A  C01D  F05E         	movff	_userNum,saveEEPROM@data
  7111  000C2E  501C               	movf	_status^0,w,c
  7112  000C30  0FA0               	addlw	160
  7113  000C32  EC6C  F00F         	call	_saveEEPROM
  7114                           
  7115                           ;EEPROM.c: 248:             saveState = 0;
  7116  000C36  6A19               	clrf	_saveState^0,c
  7117  000C38  D732               	goto	l894
  7118  000C3A                     l7001:
  7119                           
  7120                           ;EEPROM.c: 252:             if (users[topScores[position].userNum].username[status] != '
      +                          \0'){
  7121  000C3A  501F               	movf	_position^0,w,c
  7122  000C3C  D8C2               	call	PL2	;call to abstracted procedure
  7123  000C3E  E006               	bz	l7007
  7124                           
  7125                           ;EEPROM.c: 253:                 LcPutChar(users[topScores[position].userNum].username[st
      +                          atus]);
  7126  000C40  501F               	movf	_position^0,w,c
  7127  000C42  D8BF               	call	PL2	;call to abstracted procedure
  7128  000C44  ECE8  F00E         	call	_LcPutChar
  7129  000C48                     l7005:
  7130                           
  7131                           ;EEPROM.c: 254:                 status++;
  7132  000C48  2A1C               	incf	_status^0,f,c
  7133                           
  7134                           ;EEPROM.c: 255:             } else {
  7135  000C4A  0012               	return	
  7136  000C4C                     l7007:
  7137                           
  7138                           ;EEPROM.c: 256:                 LcPutChar(':');
  7139  000C4C  0E3A               	movlw	58
  7140  000C4E  ECE8  F00E         	call	_LcPutChar
  7141                           
  7142                           ;EEPROM.c: 257:                 state = 51;
  7143  000C52  0E33               	movlw	51
  7144  000C54  6E1E               	movwf	_state@EEPROM$F1761^0,c
  7145                           
  7146                           ;EEPROM.c: 258:                 LcGotoXY(0,1);
  7147  000C56  ECEC  F008         	call	PL60	;call to abstracted procedure
  7148  000C5A  ECA6  F00E         	call	_LcGotoXY
  7149                           
  7150                           ;EEPROM.c: 259:                 status = 0;
  7151  000C5E  6A1C               	clrf	_status^0,c
  7152  000C60  0012               	return	
  7153  000C62                     l7015:
  7154                           
  7155                           ;EEPROM.c: 263:             LcPutChar((topScores[position].score/10)+'0');
  7156  000C62  0E0A               	movlw	10
  7157  000C64  6E5E               	movwf	___lbdiv@divisor^0,c
  7158  000C66  501F               	movf	_position^0,w,c
  7159  000C68  D8D5               	call	PL8	;call to abstracted procedure
  7160  000C6A  50DF               	movf	indf2,w,c
  7161  000C6C  EC74  F00E         	call	___lbdiv
  7162  000C70  0F30               	addlw	48
  7163  000C72  ECE8  F00E         	call	_LcPutChar
  7164                           
  7165                           ;EEPROM.c: 264:             LcPutChar((topScores[position].score%10)+'0');
  7166  000C76  0E0A               	movlw	10
  7167  000C78  6E5E               	movwf	___lbmod@divisor^0,c
  7168  000C7A  501F               	movf	_position^0,w,c
  7169  000C7C  D8CB               	call	PL8	;call to abstracted procedure
  7170  000C7E  50DF               	movf	indf2,w,c
  7171  000C80  EC11  F00F         	call	___lbmod
  7172  000C84  0F30               	addlw	48
  7173  000C86  ECE8  F00E         	call	_LcPutChar
  7174                           
  7175                           ;EEPROM.c: 265:             LcGotoXY(16,0);
  7176  000C8A  0E00               	movlw	0
  7177  000C8C  6E66               	movwf	LcGotoXY@Row^0,c
  7178  000C8E  0E10               	movlw	16
  7179  000C90  ECA6  F00E         	call	_LcGotoXY
  7180                           
  7181                           ;EEPROM.c: 266:             if (position == numScores){ position = 0;}
  7182  000C94  5020               	movf	_numScores^0,w,c
  7183  000C96  181F               	xorwf	_position^0,w,c
  7184  000C98  E101               	bnz	l7021
  7185  000C9A  6A1F               	clrf	_position^0,c
  7186  000C9C                     l7021:
  7187                           
  7188                           ;EEPROM.c: 267:             state = 52;
  7189  000C9C  0E34               	movlw	52
  7190  000C9E  6E1E               	movwf	_state@EEPROM$F1761^0,c
  7191                           
  7192                           ;EEPROM.c: 268:             break;
  7193  000CA0  0C34               	retlw	52
  7194  000CA2                     l7023:
  7195                           
  7196                           ;EEPROM.c: 270:             saveState = position+1 == numScores? 0:position+1;
  7197  000CA2  5020               	movf	_numScores^0,w,c
  7198  000CA4  6E6C               	movwf	??_dataMotor^0,c
  7199  000CA6  6A6D               	clrf	(??_dataMotor+1)^0,c
  7200  000CA8  501F               	movf	_position^0,w,c
  7201  000CAA  6E6E               	movwf	(??_dataMotor+2)^0,c
  7202  000CAC  6A6F               	clrf	(??_dataMotor+3)^0,c
  7203  000CAE  2A6E               	incf	(??_dataMotor+2)^0,f,c
  7204  000CB0  0E00               	movlw	0
  7205  000CB2  226F               	addwfc	(??_dataMotor+3)^0,f,c
  7206  000CB4  506C               	movf	??_dataMotor^0,w,c
  7207  000CB6  186E               	xorwf	(??_dataMotor+2)^0,w,c
  7208  000CB8  E103               	bnz	u6810
  7209  000CBA  506D               	movf	(??_dataMotor+1)^0,w,c
  7210  000CBC  186F               	xorwf	(??_dataMotor+3)^0,w,c
  7211  000CBE  E007               	bz	l932
  7212  000CC0                     u6810:
  7213  000CC0  281F               	incf	_position^0,w,c
  7214  000CC2  0100               	movlb	0	; () banked
  7215  000CC4  6FF5               	movwf	_dataMotor$1786& (0+255),b
  7216  000CC6  6BF6               	clrf	(_dataMotor$1786+1)& (0+255),b
  7217  000CC8  0E00               	movlw	0
  7218  000CCA  23F6               	addwfc	(_dataMotor$1786+1)& (0+255),f,b
  7219  000CCC  D003               	goto	l934
  7220  000CCE                     l932:
  7221  000CCE  0100               	movlb	0	; () banked
  7222  000CD0  6BF5               	clrf	_dataMotor$1786& (0+255),b
  7223  000CD2  6BF6               	clrf	(_dataMotor$1786+1)& (0+255),b
  7224  000CD4                     l934:
  7225                           
  7226                           ; BSR set to: 0
  7227  000CD4  C0F5  F019         	movff	_dataMotor$1786,_saveState
  7228                           
  7229                           ; BSR set to: 0
  7230                           ;EEPROM.c: 271:             if (users[topScores[saveState].userNum].username[status] != 
      +                          '\0'){
  7231  000CD8  5019               	movf	_saveState^0,w,c
  7232  000CDA  D873               	call	PL2	;call to abstracted procedure
  7233  000CDC  E005               	bz	l7033
  7234                           
  7235                           ; BSR set to: 0
  7236                           ;EEPROM.c: 272:                 LcPutChar(users[topScores[saveState].userNum].username[s
      +                          tatus]);
  7237  000CDE  5019               	movf	_saveState^0,w,c
  7238  000CE0  D870               	call	PL2	;call to abstracted procedure
  7239  000CE2  ECE8  F00E         	call	_LcPutChar
  7240  000CE6  D7B0               	goto	l7005
  7241  000CE8                     l7033:
  7242                           
  7243                           ; BSR set to: 0
  7244                           ;EEPROM.c: 275:                 LcPutChar(':');
  7245  000CE8  0E3A               	movlw	58
  7246  000CEA  ECE8  F00E         	call	_LcPutChar
  7247                           
  7248                           ;EEPROM.c: 276:                 state = 53;
  7249  000CEE  0E35               	movlw	53
  7250  000CF0  6E1E               	movwf	_state@EEPROM$F1761^0,c
  7251                           
  7252                           ;EEPROM.c: 277:                 LcGotoXY(16,1);
  7253  000CF2  0E01               	movlw	1
  7254  000CF4  6E66               	movwf	LcGotoXY@Row^0,c
  7255  000CF6  0E10               	movlw	16
  7256  000CF8  EFA6  F00E         	goto	_LcGotoXY
  7257  000CFC                     l7039:
  7258                           
  7259                           ;EEPROM.c: 281:             LcPutChar((topScores[saveState].score/10)+'0');
  7260  000CFC  0E0A               	movlw	10
  7261  000CFE  6E5E               	movwf	___lbdiv@divisor^0,c
  7262  000D00  5019               	movf	_saveState^0,w,c
  7263  000D02  D888               	call	PL8	;call to abstracted procedure
  7264  000D04  50DF               	movf	indf2,w,c
  7265  000D06  EC74  F00E         	call	___lbdiv
  7266  000D0A  0F30               	addlw	48
  7267  000D0C  ECE8  F00E         	call	_LcPutChar
  7268                           
  7269                           ;EEPROM.c: 282:             LcPutChar((topScores[saveState].score%10)+'0');
  7270  000D10  0E0A               	movlw	10
  7271  000D12  6E5E               	movwf	___lbmod@divisor^0,c
  7272  000D14  5019               	movf	_saveState^0,w,c
  7273  000D16  D87E               	call	PL8	;call to abstracted procedure
  7274  000D18  50DF               	movf	indf2,w,c
  7275  000D1A  EC11  F00F         	call	___lbmod
  7276  000D1E  0F30               	addlw	48
  7277  000D20  ECE8  F00E         	call	_LcPutChar
  7278  000D24  D64C               	goto	l6827
  7279  000D26                     l7045:
  7280  000D26  501E               	movf	_state@EEPROM$F1761^0,w,c
  7281  000D28  6E6C               	movwf	??_dataMotor^0,c
  7282  000D2A  6A6D               	clrf	(??_dataMotor+1)^0,c
  7283                           
  7284                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7285                           ; Switch size 1, requested type "space"
  7286                           ; Number of cases is 1, Range of values is 0 to 0
  7287                           ; switch strategies available:
  7288                           ; Name         Instructions Cycles
  7289                           ; simple_byte            4     3 (average)
  7290                           ;	Chosen strategy is simple_byte
  7291  000D2C  506D               	movf	(??_dataMotor+1)^0,w,c
  7292  000D2E  A4D8               	btfss	status,2,c
  7293  000D30  0012               	return	
  7294                           
  7295                           ; Switch size 1, requested type "space"
  7296                           ; Number of cases is 24, Range of values is 0 to 53
  7297                           ; switch strategies available:
  7298                           ; Name         Instructions Cycles
  7299                           ; simple_byte           73    37 (average)
  7300                           ;	Chosen strategy is simple_byte
  7301  000D32  506C               	movf	??_dataMotor^0,w,c
  7302  000D34  B4D8               	btfsc	status,2,c
  7303  000D36  0012               	return	
  7304  000D38  0A01               	xorlw	1	; case 1
  7305  000D3A  E101 D636          	bz	l6819
  7306  000D3E  0A03               	xorlw	3	; case 2
  7307  000D40  E101 D63F          	bz	l6829
  7308  000D44  0A01               	xorlw	1	; case 3
  7309  000D46  E101 D64F          	bz	l6843
  7310  000D4A  0A06               	xorlw	6	; case 5
  7311  000D4C  E101 D66A          	bz	l6855
  7312  000D50  0A03               	xorlw	3	; case 6
  7313  000D52  E101 D670          	bz	l6861
  7314  000D56  0A01               	xorlw	1	; case 7
  7315  000D58  E101 D67C          	bz	l891
  7316  000D5C  0A0D               	xorlw	13	; case 10
  7317  000D5E  E101 D67E          	bz	l6877
  7318  000D62  0A01               	xorlw	1	; case 11
  7319  000D64  E101 D69E          	bz	l895
  7320  000D68  0A07               	xorlw	7	; case 12
  7321  000D6A  E101 D6A0          	bz	l6891
  7322  000D6E  0A02               	xorlw	2	; case 14
  7323  000D70  E101 D6C1          	bz	l6903
  7324  000D74  0A01               	xorlw	1	; case 15
  7325  000D76  E101 D6D5          	bz	l6919
  7326  000D7A  0A1F               	xorlw	31	; case 16
  7327  000D7C  E101 D6F1          	bz	l6927
  7328  000D80  0A01               	xorlw	1	; case 17
  7329  000D82  E101 D6FE          	bz	l6937
  7330  000D86  0A03               	xorlw	3	; case 18
  7331  000D88  E101 D709          	bz	l6945
  7332  000D8C  0A01               	xorlw	1	; case 19
  7333  000D8E  E101 D70B          	bz	l6951
  7334  000D92  0A07               	xorlw	7	; case 20
  7335  000D94  E101 D714          	bz	l6961
  7336  000D98  0A01               	xorlw	1	; case 21
  7337  000D9A  E101 D732          	bz	l6985
  7338  000D9E  0A03               	xorlw	3	; case 22
  7339  000DA0  E101 D73B          	bz	l6989
  7340  000DA4  0A01               	xorlw	1	; case 23
  7341  000DA6  E101 D740          	bz	l6995
  7342  000DAA  0A25               	xorlw	37	; case 50
  7343  000DAC  E101 D745          	bz	l7001
  7344  000DB0  0A01               	xorlw	1	; case 51
  7345  000DB2  E101 D756          	bz	l7015
  7346  000DB6  0A07               	xorlw	7	; case 52
  7347  000DB8  E101 D773          	bz	l7023
  7348  000DBC  0A01               	xorlw	1	; case 53
  7349  000DBE  E09E               	bz	l7039
  7350  000DC0  0012               	return		;funcret
  7351  000DC2                     __end_of_dataMotor:
  7352                           	callstack 0
  7353  000DC2                     PL2:
  7354                           	callstack 24
  7355  000DC2  0D02               	mullw	2
  7356  000DC4  50F3               	movf	243,w,c
  7357  000DC6  0F02               	addlw	low (_topScores+1)
  7358  000DC8  6ED9               	movwf	fsr2l,c
  7359  000DCA  6ADA               	clrf	fsr2h,c
  7360  000DCC  50DF               	movf	indf2,w,c
  7361  000DCE  0D12               	mullw	18
  7362  000DD0  0E00               	movlw	low _users
  7363  000DD2  6E6C               	movwf	??_dataMotor^0,c
  7364  000DD4  0E01               	movlw	high _users
  7365  000DD6  6E6D               	movwf	(??_dataMotor+1)^0,c
  7366  000DD8  50F3               	movf	243,w,c
  7367  000DDA  266C               	addwf	??_dataMotor^0,f,c
  7368  000DDC  50F4               	movf	244,w,c
  7369  000DDE  226D               	addwfc	(??_dataMotor+1)^0,f,c
  7370  000DE0  501C               	movf	_status^0,w,c
  7371  000DE2  246C               	addwf	??_dataMotor^0,w,c
  7372  000DE4  6ED9               	movwf	fsr2l,c
  7373  000DE6  0E00               	movlw	0
  7374  000DE8  206D               	addwfc	(??_dataMotor+1)^0,w,c
  7375  000DEA  6EDA               	movwf	fsr2h,c
  7376  000DEC  50DF               	movf	indf2,w,c
  7377  000DEE  0012               	return	
  7378  000DF0                     __end_ofPL2:
  7379                           	callstack 0
  7380  000DF0                     PL4:
  7381                           	callstack 26
  7382  000DF0  50F3               	movf	243,w,c
  7383  000DF2  0F02               	addlw	low (_topScores+1)
  7384  000DF4  6ED9               	movwf	fsr2l,c
  7385  000DF6  6ADA               	clrf	fsr2h,c
  7386  000DF8  0012               	return	
  7387  000DFA                     __end_ofPL4:
  7388                           	callstack 0
  7389  000DFA                     PL6:
  7390                           	callstack 24
  7391  000DFA  501F               	movf	_position^0,w,c
  7392  000DFC  240B               	addwf	_mUser@EEPROM$F1764^0,w,c
  7393  000DFE  6E6C               	movwf	??_dataMotor^0,c
  7394  000E00  0E00               	movlw	0
  7395  000E02  200C               	addwfc	(_mUser@EEPROM$F1764+1)^0,w,c
  7396  000E04  6E6D               	movwf	(??_dataMotor+1)^0,c
  7397  000E06  0E09               	movlw	9
  7398  000E08  246C               	addwf	??_dataMotor^0,w,c
  7399  000E0A  6ED9               	movwf	fsr2l,c
  7400  000E0C  0E00               	movlw	0
  7401  000E0E  206D               	addwfc	(??_dataMotor+1)^0,w,c
  7402  000E10  6EDA               	movwf	fsr2h,c
  7403  000E12  0012               	return	
  7404  000E14                     __end_ofPL6:
  7405                           	callstack 0
  7406  000E14                     PL8:
  7407                           	callstack 26
  7408  000E14  0D02               	mullw	2
  7409  000E16  50F3               	movf	243,w,c
  7410  000E18  0F01               	addlw	low _topScores
  7411  000E1A  6ED9               	movwf	fsr2l,c
  7412  000E1C  6ADA               	clrf	fsr2h,c
  7413  000E1E  0012               	return	
  7414  000E20                     __end_ofPL8:
  7415                           	callstack 0
  7416  000E20                     PL10:
  7417                           	callstack 24
  7418  000E20  0E00               	movlw	0
  7419  000E22  200C               	addwfc	(_mUser@EEPROM$F1764+1)^0,w,c
  7420  000E24  6EDA               	movwf	fsr2h,c
  7421  000E26  501D               	movf	_userNum^0,w,c
  7422  000E28  0D12               	mullw	18
  7423  000E2A  0E00               	movlw	low _users
  7424  000E2C  6E6D               	movwf	(??_dataMotor+1)^0,c
  7425  000E2E  0E01               	movlw	high _users
  7426  000E30  6E6E               	movwf	(??_dataMotor+2)^0,c
  7427  000E32  50F3               	movf	243,w,c
  7428  000E34  266D               	addwf	(??_dataMotor+1)^0,f,c
  7429  000E36  50F4               	movf	244,w,c
  7430  000E38  226E               	addwfc	(??_dataMotor+2)^0,f,c
  7431  000E3A  501F               	movf	_position^0,w,c
  7432  000E3C  246D               	addwf	(??_dataMotor+1)^0,w,c
  7433  000E3E  6EE1               	movwf	fsr1l,c
  7434  000E40  0E00               	movlw	0
  7435  000E42  206E               	addwfc	(??_dataMotor+2)^0,w,c
  7436  000E44  6EE2               	movwf	fsr1h,c
  7437  000E46  50DE               	movf	postinc2,w,c
  7438  000E48  18E6               	xorwf	postinc1,w,c
  7439  000E4A  0012               	return	
  7440  000E4C                     __end_ofPL10:
  7441                           	callstack 0
  7442  000E4C                     PL12:
  7443                           	callstack 24
  7444  000E4C  501F               	movf	_position^0,w,c
  7445  000E4E  240B               	addwf	_mUser@EEPROM$F1764^0,w,c
  7446  000E50  6ED9               	movwf	fsr2l,c
  7447  000E52  0E00               	movlw	0
  7448  000E54  200C               	addwfc	(_mUser@EEPROM$F1764+1)^0,w,c
  7449  000E56  6EDA               	movwf	fsr2h,c
  7450  000E58  0012               	return	
  7451  000E5A                     __end_ofPL12:
  7452                           	callstack 0
  7453  000E5A                     PL18:
  7454                           	callstack 24
  7455  000E5A  501F               	movf	_position^0,w,c
  7456  000E5C  0D02               	mullw	2
  7457  000E5E  50F3               	movf	243,w,c
  7458  000E60  0F01               	addlw	low _topScores
  7459  000E62  6EE1               	movwf	fsr1l,c
  7460  000E64  6AE2               	clrf	fsr1h,c
  7461  000E66  0012               	return	
  7462  000E68                     __end_ofPL18:
  7463                           	callstack 0
  7464  000E68                     PL50:
  7465                           	callstack 24
  7466  000E68  50DF               	movf	indf2,w,c
  7467  000E6A  6E5E               	movwf	saveEEPROM@data^0,c
  7468  000E6C  501B               	movf	_lastUserPointer^0,w,c
  7469  000E6E  0D10               	mullw	16
  7470  000E70  50F3               	movf	243,w,c
  7471  000E72  241F               	addwf	_position^0,w,c
  7472  000E74  0012               	return	
  7473  000E76                     __end_ofPL50:
  7474                           	callstack 0
  7475  000E76                     PL78:
  7476                           	callstack 24
  7477  000E76  C020  F05E         	movff	_numScores,saveEEPROM@data
  7478  000E7A  0CFE               	retlw	254
  7479  000E7C                     __end_ofPL78:
  7480                           	callstack 0
  7481                           
  7482 ;; *************** function _saveEEPROM *****************
  7483 ;; Defined at:
  7484 ;;		line 344 in file "EEPROM.c"
  7485 ;; Parameters:    Size  Location     Type
  7486 ;;  ad              1    wreg     unsigned char 
  7487 ;;  data            1    5[COMRAM] unsigned char 
  7488 ;; Auto vars:     Size  Location     Type
  7489 ;;  ad              1    6[COMRAM] unsigned char 
  7490 ;; Return value:  Size  Location     Type
  7491 ;;                  1    wreg      void 
  7492 ;; Registers used:
  7493 ;;		wreg, status,2
  7494 ;; Tracked objects:
  7495 ;;		On entry : 0/0
  7496 ;;		On exit  : 0/0
  7497 ;;		Unchanged: 0/0
  7498 ;; Data sizes:     COMRAM   BANK0   BANK1
  7499 ;;      Params:         1       0       0
  7500 ;;      Locals:         1       0       0
  7501 ;;      Temps:          0       0       0
  7502 ;;      Totals:         2       0       0
  7503 ;;Total ram usage:        2 bytes
  7504 ;; Hardware stack levels used: 1
  7505 ;; Hardware stack levels required when called: 2
  7506 ;; This function calls:
  7507 ;;		Nothing
  7508 ;; This function is called by:
  7509 ;;		_dataMotor
  7510 ;; This function uses a non-reentrant model
  7511 ;;
  7512                           
  7513                           	psect	text57
  7514  001ED8                     __ptext57:
  7515                           	callstack 0
  7516  001ED8                     _saveEEPROM:
  7517                           	callstack 27
  7518                           
  7519                           ;incstack = 0
  7520                           ;saveEEPROM@ad stored from wreg
  7521  001ED8  6E5F               	movwf	saveEEPROM@ad^0,c
  7522                           
  7523                           ;EEPROM.c: 345:     EEADR = ad;
  7524  001EDA  C05F  FFA9         	movff	saveEEPROM@ad,4009	;volatile
  7525                           
  7526                           ;EEPROM.c: 346:     EEDATA = data;
  7527  001EDE  C05E  FFA8         	movff	saveEEPROM@data,4008	;volatile
  7528                           
  7529                           ;EEPROM.c: 347:     EECON1bits.EEPGD = 0;
  7530  001EE2  9EA6               	bcf	166,7,c	;volsfr
  7531                           
  7532                           ;EEPROM.c: 348:     EECON1bits.CFGS = 0;
  7533  001EE4  9CA6               	bcf	166,6,c	;volsfr
  7534                           
  7535                           ;EEPROM.c: 349:     EECON1bits.WREN = 1;
  7536  001EE6  84A6               	bsf	166,2,c	;volsfr
  7537                           
  7538                           ;EEPROM.c: 350:     INTCONbits.GIE = 0;
  7539  001EE8  9EF2               	bcf	242,7,c	;volatile
  7540                           
  7541                           ;EEPROM.c: 351:     EECON2 = 0x55;
  7542  001EEA  0E55               	movlw	85
  7543  001EEC  6EA7               	movwf	167,c	;volsfr
  7544                           
  7545                           ;EEPROM.c: 352:     EECON2 = 0xAA;
  7546  001EEE  0EAA               	movlw	170
  7547  001EF0  6EA7               	movwf	167,c	;volsfr
  7548                           
  7549                           ;EEPROM.c: 353:     EECON1bits.WR = 1;
  7550  001EF2  82A6               	bsf	166,1,c	;volsfr
  7551                           
  7552                           ;EEPROM.c: 354:     INTCONbits.GIE = 1;
  7553  001EF4  8EF2               	bsf	242,7,c	;volatile
  7554                           
  7555                           ;EEPROM.c: 355:     EECON1bits.WREN = 0;
  7556  001EF6  94A6               	bcf	166,2,c	;volsfr
  7557  001EF8  0CAA               	retlw	170	;funcret
  7558  001EFA                     __end_of_saveEEPROM:
  7559                           	callstack 0
  7560                           
  7561 ;; *************** function ___lbmod *****************
  7562 ;; Defined at:
  7563 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\lbmod.c"
  7564 ;; Parameters:    Size  Location     Type
  7565 ;;  dividend        1    wreg     unsigned char 
  7566 ;;  divisor         1    5[COMRAM] unsigned char 
  7567 ;; Auto vars:     Size  Location     Type
  7568 ;;  dividend        1    6[COMRAM] unsigned char 
  7569 ;;  rem             1    8[COMRAM] unsigned char 
  7570 ;;  counter         1    7[COMRAM] unsigned char 
  7571 ;; Return value:  Size  Location     Type
  7572 ;;                  1    wreg      unsigned char 
  7573 ;; Registers used:
  7574 ;;		wreg, status,2, status,0
  7575 ;; Tracked objects:
  7576 ;;		On entry : 0/0
  7577 ;;		On exit  : 0/0
  7578 ;;		Unchanged: 0/0
  7579 ;; Data sizes:     COMRAM   BANK0   BANK1
  7580 ;;      Params:         1       0       0
  7581 ;;      Locals:         3       0       0
  7582 ;;      Temps:          0       0       0
  7583 ;;      Totals:         4       0       0
  7584 ;;Total ram usage:        4 bytes
  7585 ;; Hardware stack levels used: 1
  7586 ;; Hardware stack levels required when called: 2
  7587 ;; This function calls:
  7588 ;;		Nothing
  7589 ;; This function is called by:
  7590 ;;		_menuMotor
  7591 ;;		_dataMotor
  7592 ;;		_DaSaveScore
  7593 ;;		_timeMotor
  7594 ;; This function uses a non-reentrant model
  7595 ;;
  7596                           
  7597                           	psect	text58
  7598  001E22                     __ptext58:
  7599                           	callstack 0
  7600  001E22                     ___lbmod:
  7601                           	callstack 27
  7602                           
  7603                           ;incstack = 0
  7604                           ;___lbmod@dividend stored from wreg
  7605  001E22  6E5F               	movwf	___lbmod@dividend^0,c
  7606  001E24  0E08               	movlw	8
  7607  001E26  6E60               	movwf	___lbmod@counter^0,c
  7608  001E28  6A61               	clrf	___lbmod@rem^0,c
  7609  001E2A                     l5909:
  7610  001E2A  90D8               	bcf	status,0,c
  7611  001E2C  345F               	rlcf	___lbmod@dividend^0,w,c
  7612  001E2E  3461               	rlcf	___lbmod@rem^0,w,c
  7613  001E30  6E61               	movwf	___lbmod@rem^0,c
  7614  001E32  90D8               	bcf	status,0,c
  7615  001E34  365F               	rlcf	___lbmod@dividend^0,f,c
  7616  001E36  505E               	movf	___lbmod@divisor^0,w,c
  7617  001E38  5C61               	subwf	___lbmod@rem^0,w,c
  7618  001E3A  E302               	bnc	l5917
  7619  001E3C  505E               	movf	___lbmod@divisor^0,w,c
  7620  001E3E  5E61               	subwf	___lbmod@rem^0,f,c
  7621  001E40                     l5917:
  7622  001E40  2E60               	decfsz	___lbmod@counter^0,f,c
  7623  001E42  D7F3               	goto	l5909
  7624  001E44  5061               	movf	___lbmod@rem^0,w,c
  7625  001E46  0012               	return		;funcret
  7626  001E48                     __end_of___lbmod:
  7627                           	callstack 0
  7628                           
  7629 ;; *************** function ___lbdiv *****************
  7630 ;; Defined at:
  7631 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\lbdiv.c"
  7632 ;; Parameters:    Size  Location     Type
  7633 ;;  dividend        1    wreg     unsigned char 
  7634 ;;  divisor         1    5[COMRAM] unsigned char 
  7635 ;; Auto vars:     Size  Location     Type
  7636 ;;  dividend        1    6[COMRAM] unsigned char 
  7637 ;;  quotient        1    8[COMRAM] unsigned char 
  7638 ;;  counter         1    7[COMRAM] unsigned char 
  7639 ;; Return value:  Size  Location     Type
  7640 ;;                  1    wreg      unsigned char 
  7641 ;; Registers used:
  7642 ;;		wreg, status,2, status,0
  7643 ;; Tracked objects:
  7644 ;;		On entry : 0/0
  7645 ;;		On exit  : 0/0
  7646 ;;		Unchanged: 0/0
  7647 ;; Data sizes:     COMRAM   BANK0   BANK1
  7648 ;;      Params:         1       0       0
  7649 ;;      Locals:         3       0       0
  7650 ;;      Temps:          0       0       0
  7651 ;;      Totals:         4       0       0
  7652 ;;Total ram usage:        4 bytes
  7653 ;; Hardware stack levels used: 1
  7654 ;; Hardware stack levels required when called: 2
  7655 ;; This function calls:
  7656 ;;		Nothing
  7657 ;; This function is called by:
  7658 ;;		_menuMotor
  7659 ;;		_dataMotor
  7660 ;;		_DaSaveScore
  7661 ;;		_timeMotor
  7662 ;; This function uses a non-reentrant model
  7663 ;;
  7664                           
  7665                           	psect	text59
  7666  001CE8                     __ptext59:
  7667                           	callstack 0
  7668  001CE8                     ___lbdiv:
  7669                           	callstack 27
  7670                           
  7671                           ;incstack = 0
  7672                           ;___lbdiv@dividend stored from wreg
  7673  001CE8  6E5F               	movwf	___lbdiv@dividend^0,c
  7674  001CEA  6A61               	clrf	___lbdiv@quotient^0,c
  7675  001CEC  505E               	movf	___lbdiv@divisor^0,w,c
  7676  001CEE  E014               	bz	l5901
  7677  001CF0  0E01               	movlw	1
  7678  001CF2  6E60               	movwf	___lbdiv@counter^0,c
  7679  001CF4  D003               	goto	l5889
  7680  001CF6                     l5885:
  7681  001CF6  90D8               	bcf	status,0,c
  7682  001CF8  365E               	rlcf	___lbdiv@divisor^0,f,c
  7683  001CFA  2A60               	incf	___lbdiv@counter^0,f,c
  7684  001CFC                     l5889:
  7685  001CFC  AE5E               	btfss	___lbdiv@divisor^0,7,c
  7686  001CFE  D7FB               	goto	l5885
  7687  001D00                     u5310:
  7688  001D00  90D8               	bcf	status,0,c
  7689  001D02  3661               	rlcf	___lbdiv@quotient^0,f,c
  7690  001D04  505E               	movf	___lbdiv@divisor^0,w,c
  7691  001D06  5C5F               	subwf	___lbdiv@dividend^0,w,c
  7692  001D08  E303               	bnc	l5897
  7693  001D0A  505E               	movf	___lbdiv@divisor^0,w,c
  7694  001D0C  5E5F               	subwf	___lbdiv@dividend^0,f,c
  7695  001D0E  8061               	bsf	___lbdiv@quotient^0,0,c
  7696  001D10                     l5897:
  7697  001D10  90D8               	bcf	status,0,c
  7698  001D12  325E               	rrcf	___lbdiv@divisor^0,f,c
  7699  001D14  2E60               	decfsz	___lbdiv@counter^0,f,c
  7700  001D16  D7F4               	goto	u5310
  7701  001D18                     l5901:
  7702  001D18  5061               	movf	___lbdiv@quotient^0,w,c
  7703  001D1A  0012               	return		;funcret
  7704  001D1C                     __end_of___lbdiv:
  7705                           	callstack 0
  7706                           
  7707 ;; *************** function _LcPutChar *****************
  7708 ;; Defined at:
  7709 ;;		line 154 in file "LcTLCD.c"
  7710 ;; Parameters:    Size  Location     Type
  7711 ;;  c               1    wreg     unsigned char 
  7712 ;; Auto vars:     Size  Location     Type
  7713 ;;  c               1   18[COMRAM] unsigned char 
  7714 ;; Return value:  Size  Location     Type
  7715 ;;                  1    wreg      void 
  7716 ;; Registers used:
  7717 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7718 ;; Tracked objects:
  7719 ;;		On entry : 0/0
  7720 ;;		On exit  : 0/0
  7721 ;;		Unchanged: 0/0
  7722 ;; Data sizes:     COMRAM   BANK0   BANK1
  7723 ;;      Params:         0       0       0
  7724 ;;      Locals:         1       0       0
  7725 ;;      Temps:          0       0       0
  7726 ;;      Totals:         1       0       0
  7727 ;;Total ram usage:        1 bytes
  7728 ;; Hardware stack levels used: 1
  7729 ;; Hardware stack levels required when called: 5
  7730 ;; This function calls:
  7731 ;;		_CantaData
  7732 ;;		_LcGotoXY
  7733 ;;		_WaitForBusy
  7734 ;; This function is called by:
  7735 ;;		_menuMotor
  7736 ;;		_displayString
  7737 ;;		_mainMenu
  7738 ;;		_displayError
  7739 ;;		_displayResults
  7740 ;;		_displayLogOut
  7741 ;;		_dataMotor
  7742 ;;		_DaSaveScore
  7743 ;;		_timeMotor
  7744 ;;		_sendChar
  7745 ;; This function uses a non-reentrant model
  7746 ;;
  7747                           
  7748                           	psect	text60
  7749  001DD0                     __ptext60:
  7750                           	callstack 0
  7751  001DD0                     _LcPutChar:
  7752                           	callstack 23
  7753                           
  7754                           ;incstack = 0
  7755                           ;LcPutChar@c stored from wreg
  7756  001DD0  6E6B               	movwf	LcPutChar@c^0,c
  7757                           
  7758                           ;LcTLCD.c: 164:  WaitForBusy(); CantaData(c);
  7759  001DD2  EC05  F00E         	call	_WaitForBusy	;wreg free
  7760  001DD6  506B               	movf	LcPutChar@c^0,w,c
  7761  001DD8  EC24  F00E         	call	_CantaData
  7762                           
  7763                           ;LcTLCD.c: 166:  ++ColumnAct;
  7764  001DDC  2A3A               	incf	_ColumnAct^0,f,c
  7765                           
  7766                           ;LcTLCD.c: 168:     if (ColumnAct >= 40) {
  7767  001DDE  0E27               	movlw	39
  7768  001DE0  643A               	cpfsgt	_ColumnAct^0,c
  7769  001DE2  0C27               	retlw	39
  7770                           
  7771                           ;LcTLCD.c: 169:         ColumnAct = 0;
  7772  001DE4  6A3A               	clrf	_ColumnAct^0,c
  7773                           
  7774                           ;LcTLCD.c: 170:   if (++RowAct >= 2) RowAct = 0;
  7775  001DE6  2A3B               	incf	_RowAct^0,f,c
  7776  001DE8  0E01               	movlw	1
  7777  001DEA  643B               	cpfsgt	_RowAct^0,c
  7778  001DEC  D001               	goto	l5867
  7779  001DEE  6A3B               	clrf	_RowAct^0,c
  7780  001DF0                     l5867:
  7781                           
  7782                           ;LcTLCD.c: 171:   LcGotoXY(ColumnAct, RowAct);
  7783  001DF0  C03B  F066         	movff	_RowAct,LcGotoXY@Row
  7784  001DF4  503A               	movf	_ColumnAct^0,w,c
  7785  001DF6  EFA6  F00E         	goto	_LcGotoXY
  7786  001DFA                     __end_of_LcPutChar:
  7787                           	callstack 0
  7788                           
  7789 ;; *************** function _LcGotoXY *****************
  7790 ;; Defined at:
  7791 ;;		line 126 in file "LcTLCD.c"
  7792 ;; Parameters:    Size  Location     Type
  7793 ;;  Column          1    wreg     unsigned char 
  7794 ;;  Row             1   13[COMRAM] unsigned char 
  7795 ;; Auto vars:     Size  Location     Type
  7796 ;;  Column          1   17[COMRAM] unsigned char 
  7797 ;;  Fisics          1   14[COMRAM] unsigned char 
  7798 ;; Return value:  Size  Location     Type
  7799 ;;                  1    wreg      void 
  7800 ;; Registers used:
  7801 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7802 ;; Tracked objects:
  7803 ;;		On entry : 0/0
  7804 ;;		On exit  : 0/0
  7805 ;;		Unchanged: 0/0
  7806 ;; Data sizes:     COMRAM   BANK0   BANK1
  7807 ;;      Params:         1       0       0
  7808 ;;      Locals:         4       0       0
  7809 ;;      Temps:          0       0       0
  7810 ;;      Totals:         5       0       0
  7811 ;;Total ram usage:        5 bytes
  7812 ;; Hardware stack levels used: 1
  7813 ;; Hardware stack levels required when called: 4
  7814 ;; This function calls:
  7815 ;;		_CantaIR
  7816 ;;		_WaitForBusy
  7817 ;; This function is called by:
  7818 ;;		_LcPutChar
  7819 ;;		_menuMotor
  7820 ;;		_nextRow
  7821 ;;		_dataMotor
  7822 ;;		_DaFindUser
  7823 ;;		_timeMotor
  7824 ;;		_displayTimeRemaining
  7825 ;;		_displaySysTime
  7826 ;; This function uses a non-reentrant model
  7827 ;;
  7828                           
  7829                           	psect	text61
  7830  001D4C                     __ptext61:
  7831                           	callstack 0
  7832  001D4C                     _LcGotoXY:
  7833                           	callstack 23
  7834                           
  7835                           ;incstack = 0
  7836                           ;LcGotoXY@Column stored from wreg
  7837  001D4C  6E6A               	movwf	LcGotoXY@Column^0,c
  7838                           
  7839                           ;LcTLCD.c: 130:  char Fisics;;LcTLCD.c: 132:  Fisics = Column + (!Row ? 0 : 0x40);
  7840  001D4E  5066               	movf	LcGotoXY@Row^0,w,c
  7841  001D50  E004               	bz	l279
  7842  001D52  6A69               	clrf	(_LcGotoXY$844+1)^0,c
  7843  001D54  0E40               	movlw	64
  7844  001D56  6E68               	movwf	_LcGotoXY$844^0,c
  7845  001D58  D002               	goto	l5819
  7846  001D5A                     l279:
  7847  001D5A  6A68               	clrf	_LcGotoXY$844^0,c
  7848  001D5C  6A69               	clrf	(_LcGotoXY$844+1)^0,c
  7849  001D5E                     l5819:
  7850  001D5E  506A               	movf	LcGotoXY@Column^0,w,c
  7851  001D60  2468               	addwf	_LcGotoXY$844^0,w,c
  7852  001D62  6E67               	movwf	LcGotoXY@Fisics^0,c
  7853                           
  7854                           ;LcTLCD.c: 147:  WaitForBusy();
  7855  001D64  EC05  F00E         	call	_WaitForBusy	;wreg free
  7856                           
  7857                           ;LcTLCD.c: 148:  CantaIR(0x80 | Fisics);
  7858  001D68  5067               	movf	LcGotoXY@Fisics^0,w,c
  7859  001D6A  0980               	iorlw	128
  7860  001D6C  ECBD  F00F         	call	_CantaIR
  7861                           
  7862                           ;LcTLCD.c: 150:  RowAct = Row;
  7863  001D70  C066  F03B         	movff	LcGotoXY@Row,_RowAct
  7864                           
  7865                           ;LcTLCD.c: 151:  ColumnAct = Column;
  7866  001D74  C06A  F03A         	movff	LcGotoXY@Column,_ColumnAct
  7867  001D78  0012               	return		;funcret
  7868  001D7A                     __end_of_LcGotoXY:
  7869                           	callstack 0
  7870                           
  7871 ;; *************** function _CantaData *****************
  7872 ;; Defined at:
  7873 ;;		line 244 in file "LcTLCD.c"
  7874 ;; Parameters:    Size  Location     Type
  7875 ;;  Data            1    wreg     unsigned char 
  7876 ;; Auto vars:     Size  Location     Type
  7877 ;;  Data            1    7[COMRAM] unsigned char 
  7878 ;; Return value:  Size  Location     Type
  7879 ;;                  1    wreg      void 
  7880 ;; Registers used:
  7881 ;;		wreg, status,2, status,0, cstack
  7882 ;; Tracked objects:
  7883 ;;		On entry : 0/0
  7884 ;;		On exit  : 0/0
  7885 ;;		Unchanged: 0/0
  7886 ;; Data sizes:     COMRAM   BANK0   BANK1
  7887 ;;      Params:         0       0       0
  7888 ;;      Locals:         1       0       0
  7889 ;;      Temps:          0       0       0
  7890 ;;      Totals:         1       0       0
  7891 ;;Total ram usage:        1 bytes
  7892 ;; Hardware stack levels used: 1
  7893 ;; Hardware stack levels required when called: 3
  7894 ;; This function calls:
  7895 ;;		_CantaPartAlta
  7896 ;;		_CantaPartBaixa
  7897 ;; This function is called by:
  7898 ;;		_LcPutChar
  7899 ;; This function uses a non-reentrant model
  7900 ;;
  7901                           
  7902                           	psect	text62
  7903  001C48                     __ptext62:
  7904                           	callstack 0
  7905  001C48                     _CantaData:
  7906                           	callstack 24
  7907                           
  7908                           ;incstack = 0
  7909                           ;CantaData@Data stored from wreg
  7910  001C48  6E60               	movwf	CantaData@Data^0,c
  7911                           
  7912                           ;LcTLCD.c: 245:  (TRISDbits.TRISD0 = TRISDbits.TRISD1 = TRISDbits.TRISD2 = TRISDbits.TRI
      +                          SD3 = 0);
  7913  001C4A  9695               	bcf	149,3,c	;volatile
  7914  001C4C  9495               	bcf	149,2,c	;volatile
  7915  001C4E  9295               	bcf	149,1,c	;volatile
  7916  001C50  9095               	bcf	149,0,c	;volatile
  7917                           
  7918                           ;LcTLCD.c: 246:  (LATDbits.LATD4 = 1);
  7919  001C52  888C               	bsf	140,4,c	;volatile
  7920                           
  7921                           ;LcTLCD.c: 247:  (LATDbits.LATD5 = 0);
  7922  001C54  9A8C               	bcf	140,5,c	;volatile
  7923                           
  7924                           ;LcTLCD.c: 248:  (LATDbits.LATD6 = 1);
  7925  001C56  8C8C               	bsf	140,6,c	;volatile
  7926                           
  7927                           ;LcTLCD.c: 249:  CantaPartAlta(Data);
  7928  001C58  5060               	movf	CantaData@Data^0,w,c
  7929  001C5A  EC0E  F00D         	call	_CantaPartAlta
  7930                           
  7931                           ;LcTLCD.c: 250:  (LATDbits.LATD6 = 1);
  7932                           
  7933                           ;LcTLCD.c: 251:  (LATDbits.LATD6 = 0);
  7934                           
  7935                           ;LcTLCD.c: 252:  (LATDbits.LATD6 = 0);
  7936                           
  7937                           ;LcTLCD.c: 253:  (LATDbits.LATD6 = 1);
  7938  001C5E  D80B               	call	PL74	;call to abstracted procedure
  7939                           
  7940                           ;LcTLCD.c: 254:  CantaPartBaixa(Data);
  7941  001C60  5060               	movf	CantaData@Data^0,w,c
  7942  001C62  ECDB  F00C         	call	_CantaPartBaixa
  7943                           
  7944                           ;LcTLCD.c: 255:  (LATDbits.LATD6 = 1);
  7945                           
  7946                           ;LcTLCD.c: 256:  (LATDbits.LATD6 = 0);
  7947                           
  7948                           ;LcTLCD.c: 257:  (TRISDbits.TRISD0 = TRISDbits.TRISD1 = TRISDbits.TRISD2 = TRISDbits.TRI
      +                          SD3 = 1);
  7949  001C66  D000               	goto	PL42	;call to abstracted procedure
  7950  001C68                     __end_of_CantaData:
  7951                           	callstack 0
  7952  001C68                     PL42:
  7953                           	callstack 23
  7954  001C68  8C8C               	bsf	140,6,c	;volatile
  7955  001C6A  9C8C               	bcf	140,6,c	;volatile
  7956  001C6C  8695               	bsf	149,3,c	;volatile
  7957  001C6E  8495               	bsf	149,2,c	;volatile
  7958  001C70  8295               	bsf	149,1,c	;volatile
  7959  001C72  8095               	bsf	149,0,c	;volatile
  7960  001C74  0012               	return		;funcret
  7961  001C76                     __end_ofPL42:
  7962                           	callstack 0
  7963  001C76                     PL74:
  7964                           	callstack 23
  7965  001C76  8C8C               	bsf	140,6,c	;volatile
  7966  001C78  9C8C               	bcf	140,6,c	;volatile
  7967  001C7A  9C8C               	bcf	140,6,c	;volatile
  7968  001C7C  8C8C               	bsf	140,6,c	;volatile
  7969  001C7E  0012               	return	
  7970  001C80                     __end_ofPL74:
  7971                           	callstack 0
  7972                           
  7973 ;; *************** function _btMotor *****************
  7974 ;; Defined at:
  7975 ;;		line 53 in file "SIO.c"
  7976 ;; Parameters:    Size  Location     Type
  7977 ;;		None
  7978 ;; Auto vars:     Size  Location     Type
  7979 ;;		None
  7980 ;; Return value:  Size  Location     Type
  7981 ;;                  1    wreg      void 
  7982 ;; Registers used:
  7983 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7984 ;; Tracked objects:
  7985 ;;		On entry : 0/0
  7986 ;;		On exit  : 0/0
  7987 ;;		Unchanged: 0/0
  7988 ;; Data sizes:     COMRAM   BANK0   BANK1
  7989 ;;      Params:         0       0       0
  7990 ;;      Locals:         0       0       0
  7991 ;;      Temps:          2       0       0
  7992 ;;      Totals:         2       0       0
  7993 ;;Total ram usage:        2 bytes
  7994 ;; Hardware stack levels used: 1
  7995 ;; Hardware stack levels required when called: 3
  7996 ;; This function calls:
  7997 ;;		_SiIsAvailable
  7998 ;;		_SiSendChar
  7999 ;;		_TiGetTics
  8000 ;;		_TiResetTics
  8001 ;; This function is called by:
  8002 ;;		_main
  8003 ;; This function uses a non-reentrant model
  8004 ;;
  8005                           
  8006                           	psect	text63
  8007  001314                     __ptext63:
  8008                           	callstack 0
  8009  001314                     _btMotor:
  8010                           	callstack 27
  8011                           
  8012                           ;SIO.c: 54:     switch (stateRX){
  8013                           
  8014                           ;incstack = 0
  8015  001314  D036               	goto	l7269
  8016  001316                     l784:
  8017                           
  8018                           ;SIO.c: 56:             if (PORTCbits.RC5 == 0){
  8019  001316  BA82               	btfsc	130,5,c	;volatile
  8020  001318  D070               	goto	l7291
  8021                           
  8022                           ;SIO.c: 58:                 TiResetTics(timerRX);
  8023  00131A  5027               	movf	_timerRX^0,w,c
  8024  00131C  ECAD  F00F         	call	_TiResetTics
  8025                           
  8026                           ;SIO.c: 59:                 dataRX =0;
  8027  001320  6A26               	clrf	_dataRX^0,c
  8028                           
  8029                           ;SIO.c: 60:                 counterRX = 0;
  8030  001322  6A25               	clrf	_counterRX^0,c
  8031                           
  8032                           ;SIO.c: 61:                 stateRX = 1;
  8033  001324  0E01               	movlw	1
  8034  001326  6E28               	movwf	_stateRX^0,c
  8035  001328  D068               	goto	l7291
  8036  00132A                     l7241:
  8037                           
  8038                           ;SIO.c: 65:             if (counterRX >= 8){
  8039  00132A  0E07               	movlw	7
  8040  00132C  6425               	cpfsgt	_counterRX^0,c
  8041  00132E  D009               	goto	l7249
  8042                           
  8043                           ;SIO.c: 66:                 if (SiIsAvailable()){
  8044  001330  ECB7  F000         	call	_SiIsAvailable	;wreg free
  8045  001334  0900               	iorlw	0
  8046  001336  E003               	bz	l7247
  8047                           
  8048                           ;SIO.c: 67:                     SiSendChar(dataRX);
  8049  001338  5026               	movf	_dataRX^0,w,c
  8050  00133A  ECB3  F000         	call	_SiSendChar
  8051  00133E                     l7247:
  8052                           
  8053                           ;SIO.c: 69:                 stateRX = 0;
  8054  00133E  6A28               	clrf	_stateRX^0,c
  8055                           
  8056                           ;SIO.c: 70:             } else if (TiGetTics(timerRX) >= 1){
  8057  001340  D05C               	goto	l7291
  8058  001342                     l7249:
  8059  001342  5027               	movf	_timerRX^0,w,c
  8060  001344  EC24  F00F         	call	_TiGetTics
  8061  001348  BE5F               	btfsc	(?_TiGetTics+1)^0,7,c
  8062  00134A  D057               	goto	l7291
  8063  00134C  505F               	movf	(?_TiGetTics+1)^0,w,c
  8064  00134E  E102               	bnz	u7090
  8065  001350  045E               	decf	?_TiGetTics^0,w,c
  8066  001352  E353               	bnc	l7291
  8067  001354                     u7090:
  8068                           
  8069                           ;SIO.c: 71:                 if(PORTCbits.RC5){
  8070  001354  AA82               	btfss	130,5,c	;volatile
  8071  001356  D002               	goto	l7255
  8072                           
  8073                           ;SIO.c: 72:                     dataRX = dataRX | 0x80;
  8074  001358  8E26               	bsf	_dataRX^0,7,c
  8075                           
  8076                           ;SIO.c: 73:                 }else {
  8077  00135A  D001               	goto	l7257
  8078  00135C                     l7255:
  8079                           
  8080                           ;SIO.c: 74:                     dataRX = dataRX & 0x7F;
  8081  00135C  9E26               	bcf	_dataRX^0,7,c
  8082  00135E                     l7257:
  8083                           
  8084                           ;SIO.c: 76:                 dataRX = (dataRX >>1);
  8085  00135E  90D8               	bcf	status,0,c
  8086  001360  3226               	rrcf	_dataRX^0,f,c
  8087                           
  8088                           ;SIO.c: 77:                 TiResetTics(timerRX);
  8089  001362  5027               	movf	_timerRX^0,w,c
  8090  001364  ECAD  F00F         	call	_TiResetTics
  8091                           
  8092                           ;SIO.c: 78:                 counterRX++;
  8093  001368  2A25               	incf	_counterRX^0,f,c
  8094  00136A  D047               	goto	l7291
  8095  00136C                     l7263:
  8096                           
  8097                           ;SIO.c: 82:             if(TiGetTics(timerRX) >= 24){
  8098  00136C  5027               	movf	_timerRX^0,w,c
  8099  00136E  EC24  F00F         	call	_TiGetTics
  8100  001372  BE5F               	btfsc	(?_TiGetTics+1)^0,7,c
  8101  001374  D042               	goto	l7291
  8102  001376  505F               	movf	(?_TiGetTics+1)^0,w,c
  8103  001378  E1E2               	bnz	l7247
  8104  00137A  0E18               	movlw	24
  8105  00137C  5C5E               	subwf	?_TiGetTics^0,w,c
  8106  00137E  E2DF               	bc	l7247
  8107  001380  D03C               	goto	l7291
  8108  001382                     l7269:
  8109  001382  5028               	movf	_stateRX^0,w,c
  8110  001384  6E65               	movwf	??_btMotor^0,c
  8111  001386  6A66               	clrf	(??_btMotor+1)^0,c
  8112                           
  8113                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  8114                           ; Switch size 1, requested type "space"
  8115                           ; Number of cases is 1, Range of values is 0 to 0
  8116                           ; switch strategies available:
  8117                           ; Name         Instructions Cycles
  8118                           ; simple_byte            4     3 (average)
  8119                           ;	Chosen strategy is simple_byte
  8120  001388  5066               	movf	(??_btMotor+1)^0,w,c
  8121  00138A  E137               	bnz	l7291
  8122                           
  8123                           ; Switch size 1, requested type "space"
  8124                           ; Number of cases is 3, Range of values is 0 to 2
  8125                           ; switch strategies available:
  8126                           ; Name         Instructions Cycles
  8127                           ; simple_byte           10     6 (average)
  8128                           ;	Chosen strategy is simple_byte
  8129  00138C  5065               	movf	??_btMotor^0,w,c
  8130  00138E  E0C3               	bz	l784
  8131  001390  0A01               	xorlw	1	; case 1
  8132  001392  E0CB               	bz	l7241
  8133  001394  0A03               	xorlw	3	; case 2
  8134  001396  E0EA               	bz	l7263
  8135                           
  8136                           ;SIO.c: 87:     switch (stateTX){
  8137  001398  D030               	goto	l7291
  8138  00139A                     l797:
  8139                           
  8140                           ;SIO.c: 89:             LATCbits.LATC4 = 1 & 0x01;
  8141  00139A  888B               	bsf	139,4,c	;volatile
  8142                           
  8143                           ;SIO.c: 90:             counterTX = 0;
  8144  00139C  6A21               	clrf	_counterTX^0,c
  8145                           
  8146                           ;SIO.c: 91:             break;
  8147  00139E  0012               	return	
  8148  0013A0                     l7271:
  8149                           
  8150                           ;SIO.c: 94:             if(TiGetTics(timerTX) >= 1){
  8151  0013A0  5023               	movf	_timerTX^0,w,c
  8152  0013A2  EC24  F00F         	call	_TiGetTics
  8153  0013A6  BE5F               	btfsc	(?_TiGetTics+1)^0,7,c
  8154  0013A8  0012               	return	
  8155  0013AA  505F               	movf	(?_TiGetTics+1)^0,w,c
  8156  0013AC  E103               	bnz	u7120
  8157  0013AE  045E               	decf	?_TiGetTics^0,w,c
  8158  0013B0  A0D8               	btfss	status,0,c
  8159  0013B2  0012               	return	
  8160  0013B4                     u7120:
  8161                           
  8162                           ;SIO.c: 95:                 if (counterTX < 8){
  8163  0013B4  0E08               	movlw	8
  8164  0013B6  6021               	cpfslt	_counterTX^0,c
  8165  0013B8  D00E               	goto	l7279
  8166                           
  8167                           ;SIO.c: 96:                     LATCbits.LATC4 = (dataTX & 0x01);
  8168  0013BA  C022  F065         	movff	_dataTX,??_btMotor
  8169  0013BE  0E01               	movlw	1
  8170  0013C0  1665               	andwf	??_btMotor^0,f,c
  8171  0013C2  3A65               	swapf	??_btMotor^0,f,c
  8172  0013C4  508B               	movf	139,w,c	;volatile
  8173  0013C6  1865               	xorwf	??_btMotor^0,w,c
  8174  0013C8  0BEF               	andlw	-17
  8175  0013CA  1865               	xorwf	??_btMotor^0,w,c
  8176  0013CC  6E8B               	movwf	139,c	;volatile
  8177                           
  8178                           ;SIO.c: 97:                     dataTX = (dataTX >> 1);
  8179  0013CE  90D8               	bcf	status,0,c
  8180  0013D0  3222               	rrcf	_dataTX^0,f,c
  8181                           
  8182                           ;SIO.c: 98:                     counterTX++;
  8183  0013D2  2A21               	incf	_counterTX^0,f,c
  8184                           
  8185                           ;SIO.c: 99:                 }
  8186  0013D4  D002               	goto	l7283
  8187  0013D6                     l7279:
  8188                           
  8189                           ;SIO.c: 101:                     stateTX++;
  8190  0013D6  2A24               	incf	_stateTX^0,f,c
  8191                           
  8192                           ;SIO.c: 102:                     LATCbits.LATC4 = 1 & 0x01;
  8193  0013D8  888B               	bsf	139,4,c	;volatile
  8194  0013DA                     l7283:
  8195                           
  8196                           ;SIO.c: 104:                 TiResetTics(timerTX);
  8197  0013DA  5023               	movf	_timerTX^0,w,c
  8198  0013DC  EFAD  F00F         	goto	_TiResetTics
  8199  0013E0                     l7285:
  8200                           
  8201                           ;SIO.c: 109:             if(TiGetTics(timerTX) >= 1){
  8202  0013E0  5023               	movf	_timerTX^0,w,c
  8203  0013E2  EC24  F00F         	call	_TiGetTics
  8204  0013E6  BE5F               	btfsc	(?_TiGetTics+1)^0,7,c
  8205  0013E8  0012               	return	
  8206  0013EA  505F               	movf	(?_TiGetTics+1)^0,w,c
  8207  0013EC  E103               	bnz	u7140
  8208  0013EE  045E               	decf	?_TiGetTics^0,w,c
  8209  0013F0  A0D8               	btfss	status,0,c
  8210  0013F2  0012               	return	
  8211  0013F4                     u7140:
  8212                           
  8213                           ;SIO.c: 110:                 LATCbits.LATC4 = 1 & 0x01;
  8214  0013F4  888B               	bsf	139,4,c	;volatile
  8215                           
  8216                           ;SIO.c: 111:                 stateTX=0;
  8217  0013F6  6A24               	clrf	_stateTX^0,c
  8218  0013F8  0012               	return	
  8219  0013FA                     l7291:
  8220  0013FA  5024               	movf	_stateTX^0,w,c
  8221  0013FC  6E65               	movwf	??_btMotor^0,c
  8222  0013FE  6A66               	clrf	(??_btMotor+1)^0,c
  8223                           
  8224                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  8225                           ; Switch size 1, requested type "space"
  8226                           ; Number of cases is 1, Range of values is 0 to 0
  8227                           ; switch strategies available:
  8228                           ; Name         Instructions Cycles
  8229                           ; simple_byte            4     3 (average)
  8230                           ;	Chosen strategy is simple_byte
  8231  001400  5066               	movf	(??_btMotor+1)^0,w,c
  8232  001402  A4D8               	btfss	status,2,c
  8233  001404  0012               	return	
  8234                           
  8235                           ; Switch size 1, requested type "space"
  8236                           ; Number of cases is 3, Range of values is 0 to 2
  8237                           ; switch strategies available:
  8238                           ; Name         Instructions Cycles
  8239                           ; simple_byte           10     6 (average)
  8240                           ;	Chosen strategy is simple_byte
  8241  001406  5065               	movf	??_btMotor^0,w,c
  8242  001408  E0C8               	bz	l797
  8243  00140A  0A01               	xorlw	1	; case 1
  8244  00140C  E0C9               	bz	l7271
  8245  00140E  0A03               	xorlw	3	; case 2
  8246  001410  E0E7               	bz	l7285
  8247  001412  0012               	return		;funcret
  8248  001414                     __end_of_btMotor:
  8249                           	callstack 0
  8250                           
  8251 ;; *************** function _SiSendChar *****************
  8252 ;; Defined at:
  8253 ;;		line 41 in file "SIO.c"
  8254 ;; Parameters:    Size  Location     Type
  8255 ;;  myByte          1    wreg     unsigned char 
  8256 ;; Auto vars:     Size  Location     Type
  8257 ;;  myByte          1    5[COMRAM] unsigned char 
  8258 ;; Return value:  Size  Location     Type
  8259 ;;                  1    wreg      void 
  8260 ;; Registers used:
  8261 ;;		wreg
  8262 ;; Tracked objects:
  8263 ;;		On entry : 0/0
  8264 ;;		On exit  : 0/0
  8265 ;;		Unchanged: 0/0
  8266 ;; Data sizes:     COMRAM   BANK0   BANK1
  8267 ;;      Params:         0       0       0
  8268 ;;      Locals:         1       0       0
  8269 ;;      Temps:          0       0       0
  8270 ;;      Totals:         1       0       0
  8271 ;;Total ram usage:        1 bytes
  8272 ;; Hardware stack levels used: 1
  8273 ;; Hardware stack levels required when called: 2
  8274 ;; This function calls:
  8275 ;;		Nothing
  8276 ;; This function is called by:
  8277 ;;		_menuMotor
  8278 ;;		_joystickMotor
  8279 ;;		_btMotor
  8280 ;; This function uses a non-reentrant model
  8281 ;;
  8282                           
  8283                           	psect	text64
  8284  000166                     __ptext64:
  8285                           	callstack 0
  8286  000166                     _SiSendChar:
  8287                           	callstack 27
  8288                           
  8289                           ;incstack = 0
  8290                           ;SiSendChar@myByte stored from wreg
  8291  000166  6E5E               	movwf	SiSendChar@myByte^0,c
  8292                           
  8293                           ;SIO.c: 42:     TXREG = myByte;
  8294  000168  C05E  FFAD         	movff	SiSendChar@myByte,4013	;volatile
  8295  00016C  0012               	return		;funcret
  8296  00016E                     __end_of_SiSendChar:
  8297                           	callstack 0
  8298                           
  8299 ;; *************** function _SiIsAvailable *****************
  8300 ;; Defined at:
  8301 ;;		line 37 in file "SIO.c"
  8302 ;; Parameters:    Size  Location     Type
  8303 ;;		None
  8304 ;; Auto vars:     Size  Location     Type
  8305 ;;		None
  8306 ;; Return value:  Size  Location     Type
  8307 ;;                  1    wreg      unsigned char 
  8308 ;; Registers used:
  8309 ;;		wreg
  8310 ;; Tracked objects:
  8311 ;;		On entry : 0/0
  8312 ;;		On exit  : 0/0
  8313 ;;		Unchanged: 0/0
  8314 ;; Data sizes:     COMRAM   BANK0   BANK1
  8315 ;;      Params:         0       0       0
  8316 ;;      Locals:         0       0       0
  8317 ;;      Temps:          0       0       0
  8318 ;;      Totals:         0       0       0
  8319 ;;Total ram usage:        0 bytes
  8320 ;; Hardware stack levels used: 1
  8321 ;; Hardware stack levels required when called: 2
  8322 ;; This function calls:
  8323 ;;		Nothing
  8324 ;; This function is called by:
  8325 ;;		_menuMotor
  8326 ;;		_joystickMotor
  8327 ;;		_btMotor
  8328 ;; This function uses a non-reentrant model
  8329 ;;
  8330                           
  8331                           	psect	text65
  8332  00016E                     __ptext65:
  8333                           	callstack 0
  8334  00016E                     _SiIsAvailable:
  8335                           	callstack 27
  8336                           
  8337                           ;SIO.c: 38:     return TXSTAbits.TRMT;
  8338                           
  8339                           ;incstack = 0
  8340  00016E  B2AC               	btfsc	172,1,c	;volatile
  8341  000170  0C01               	retlw	1
  8342  000172  0C00               	retlw	0	;funcret
  8343  000174                     __end_of_SiIsAvailable:
  8344                           	callstack 0
  8345                           
  8346 ;; *************** function _audioMotor *****************
  8347 ;; Defined at:
  8348 ;;		line 27 in file "Audio.c"
  8349 ;; Parameters:    Size  Location     Type
  8350 ;;		None
  8351 ;; Auto vars:     Size  Location     Type
  8352 ;;		None
  8353 ;; Return value:  Size  Location     Type
  8354 ;;                  1    wreg      void 
  8355 ;; Registers used:
  8356 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8357 ;; Tracked objects:
  8358 ;;		On entry : 0/0
  8359 ;;		On exit  : 0/0
  8360 ;;		Unchanged: 0/0
  8361 ;; Data sizes:     COMRAM   BANK0   BANK1
  8362 ;;      Params:         0       0       0
  8363 ;;      Locals:         0       0       0
  8364 ;;      Temps:          3       0       0
  8365 ;;      Totals:         3       0       0
  8366 ;;Total ram usage:        3 bytes
  8367 ;; Hardware stack levels used: 1
  8368 ;; Hardware stack levels required when called: 3
  8369 ;; This function calls:
  8370 ;;		_TiGetTics
  8371 ;;		_TiResetTics
  8372 ;; This function is called by:
  8373 ;;		_main
  8374 ;; This function uses a non-reentrant model
  8375 ;;
  8376                           
  8377                           	psect	text66
  8378  00162C                     __ptext66:
  8379                           	callstack 0
  8380  00162C                     _audioMotor:
  8381                           	callstack 27
  8382                           
  8383                           ;Audio.c: 28:     switch(state){
  8384                           
  8385                           ;incstack = 0
  8386  00162C  D030               	goto	l6169
  8387  00162E                     l6139:
  8388                           
  8389                           ;Audio.c: 33:             if (TiGetTics(periodTimer)>= (period+1)){
  8390  00162E  D848               	call	PL46	;call to abstracted procedure
  8391  001630  EC24  F00F         	call	_TiGetTics
  8392  001634  D83C               	call	PL38	;call to abstracted procedure
  8393  001636  A0D8               	btfss	status,0,c
  8394  001638  0012               	return	
  8395                           
  8396                           ;Audio.c: 34:                 TiResetTics(periodTimer);
  8397  00163A  5038               	movf	_periodTimer^0,w,c
  8398  00163C  ECAD  F00F         	call	_TiResetTics
  8399                           
  8400                           ;Audio.c: 35:                 LATCbits.LATC3=1;;
  8401  001640  868B               	bsf	139,3,c	;volatile
  8402                           
  8403                           ;Audio.c: 36:                 state = 2;
  8404  001642  0E02               	movlw	2
  8405  001644  6E39               	movwf	_state@Audio$F967^0,c
  8406  001646  0C02               	retlw	2
  8407  001648                     l6147:
  8408                           
  8409                           ;Audio.c: 40:             if (TiGetTics(periodTimer)>= (period+1)){
  8410  001648  D83B               	call	PL46	;call to abstracted procedure
  8411  00164A  EC24  F00F         	call	_TiGetTics
  8412  00164E  D82F               	call	PL38	;call to abstracted procedure
  8413  001650  A0D8               	btfss	status,0,c
  8414  001652  0012               	return	
  8415                           
  8416                           ;Audio.c: 41:                 TiResetTics(periodTimer);
  8417  001654  5038               	movf	_periodTimer^0,w,c
  8418  001656  ECAD  F00F         	call	_TiResetTics
  8419                           
  8420                           ;Audio.c: 42:                 LATCbits.LATC3=0;;
  8421  00165A  968B               	bcf	139,3,c	;volatile
  8422                           
  8423                           ;Audio.c: 43:                 state = 3;
  8424  00165C  0E03               	movlw	3
  8425  00165E  6E39               	movwf	_state@Audio$F967^0,c
  8426  001660  0C03               	retlw	3
  8427  001662                     l6155:
  8428                           
  8429                           ;Audio.c: 48:             state = 1;
  8430  001662  0E01               	movlw	1
  8431  001664  6E39               	movwf	_state@Audio$F967^0,c
  8432                           
  8433                           ;Audio.c: 49:             if (TiGetTics(timerSong) >= 1200){
  8434  001666  5037               	movf	_timerSong^0,w,c
  8435  001668  EC24  F00F         	call	_TiGetTics
  8436  00166C  BE5F               	btfsc	(?_TiGetTics+1)^0,7,c
  8437  00166E  0012               	return	
  8438  001670  ECE3  F008         	call	PL28	;call to abstracted procedure
  8439  001674  A0D8               	btfss	status,0,c
  8440  001676  0012               	return	
  8441                           
  8442                           ;Audio.c: 50:                 period++;
  8443  001678  2A36               	incf	_period^0,f,c
  8444                           
  8445                           ;Audio.c: 51:                 TiResetTics(timerSong);
  8446  00167A  5037               	movf	_timerSong^0,w,c
  8447  00167C  ECAD  F00F         	call	_TiResetTics
  8448                           
  8449                           ;Audio.c: 52:                 if (period == 6){
  8450  001680  0E06               	movlw	6
  8451  001682  1836               	xorwf	_period^0,w,c
  8452  001684  A4D8               	btfss	status,2,c
  8453  001686  0012               	return	
  8454                           
  8455                           ;Audio.c: 53:                     period = 0;
  8456  001688  6A36               	clrf	_period^0,c
  8457                           
  8458                           ;Audio.c: 54:                     state = 0;
  8459  00168A  6A39               	clrf	_state@Audio$F967^0,c
  8460  00168C  0012               	return	
  8461  00168E                     l6169:
  8462  00168E  5039               	movf	_state@Audio$F967^0,w,c
  8463  001690  6E65               	movwf	??_audioMotor^0,c
  8464  001692  6A66               	clrf	(??_audioMotor+1)^0,c
  8465                           
  8466                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  8467                           ; Switch size 1, requested type "space"
  8468                           ; Number of cases is 1, Range of values is 0 to 0
  8469                           ; switch strategies available:
  8470                           ; Name         Instructions Cycles
  8471                           ; simple_byte            4     3 (average)
  8472                           ;	Chosen strategy is simple_byte
  8473  001694  5066               	movf	(??_audioMotor+1)^0,w,c
  8474  001696  A4D8               	btfss	status,2,c
  8475  001698  0012               	return	
  8476                           
  8477                           ; Switch size 1, requested type "space"
  8478                           ; Number of cases is 4, Range of values is 0 to 3
  8479                           ; switch strategies available:
  8480                           ; Name         Instructions Cycles
  8481                           ; simple_byte           13     7 (average)
  8482                           ;	Chosen strategy is simple_byte
  8483  00169A  5065               	movf	??_audioMotor^0,w,c
  8484  00169C  B4D8               	btfsc	status,2,c
  8485  00169E  0012               	return	
  8486  0016A0  0A01               	xorlw	1	; case 1
  8487  0016A2  E0C5               	bz	l6139
  8488  0016A4  0A03               	xorlw	3	; case 2
  8489  0016A6  E0D0               	bz	l6147
  8490  0016A8  0A01               	xorlw	1	; case 3
  8491  0016AA  E0DB               	bz	l6155
  8492  0016AC  0012               	return		;funcret
  8493  0016AE                     __end_of_audioMotor:
  8494                           	callstack 0
  8495  0016AE                     PL38:
  8496                           	callstack 27
  8497  0016AE  5065               	movf	??_audioMotor^0,w,c
  8498  0016B0  5C5E               	subwf	?_TiGetTics^0,w,c
  8499  0016B2  505F               	movf	(?_TiGetTics+1)^0,w,c
  8500  0016B4  0A80               	xorlw	128
  8501  0016B6  6E67               	movwf	(??_audioMotor+2)^0,c
  8502  0016B8  5066               	movf	(??_audioMotor+1)^0,w,c
  8503  0016BA  0A80               	xorlw	128
  8504  0016BC  5867               	subwfb	(??_audioMotor+2)^0,w,c
  8505  0016BE  0012               	return	
  8506  0016C0                     __end_ofPL38:
  8507                           	callstack 0
  8508  0016C0                     PL46:
  8509                           	callstack 27
  8510  0016C0  5036               	movf	_period^0,w,c
  8511  0016C2  6E65               	movwf	??_audioMotor^0,c
  8512  0016C4  6A66               	clrf	(??_audioMotor+1)^0,c
  8513  0016C6  2A65               	incf	??_audioMotor^0,f,c
  8514  0016C8  0E00               	movlw	0
  8515  0016CA  2266               	addwfc	(??_audioMotor+1)^0,f,c
  8516  0016CC  5038               	movf	_periodTimer^0,w,c
  8517  0016CE  0012               	return	
  8518  0016D0                     __end_ofPL46:
  8519                           	callstack 0
  8520                           
  8521 ;; *************** function _TiInitTimer *****************
  8522 ;; Defined at:
  8523 ;;		line 17 in file "TTimer.c"
  8524 ;; Parameters:    Size  Location     Type
  8525 ;;		None
  8526 ;; Auto vars:     Size  Location     Type
  8527 ;;		None
  8528 ;; Return value:  Size  Location     Type
  8529 ;;                  1    wreg      void 
  8530 ;; Registers used:
  8531 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  8532 ;; Tracked objects:
  8533 ;;		On entry : 0/0
  8534 ;;		On exit  : 0/0
  8535 ;;		Unchanged: 0/0
  8536 ;; Data sizes:     COMRAM   BANK0   BANK1
  8537 ;;      Params:         0       0       0
  8538 ;;      Locals:         0       0       0
  8539 ;;      Temps:          0       0       0
  8540 ;;      Totals:         0       0       0
  8541 ;;Total ram usage:        0 bytes
  8542 ;; Hardware stack levels used: 1
  8543 ;; Hardware stack levels required when called: 2
  8544 ;; This function calls:
  8545 ;;		Nothing
  8546 ;; This function is called by:
  8547 ;;		_main
  8548 ;; This function uses a non-reentrant model
  8549 ;;
  8550                           
  8551                           	psect	text67
  8552  001D7A                     __ptext67:
  8553                           	callstack 0
  8554  001D7A                     _TiInitTimer:
  8555                           	callstack 28
  8556                           
  8557                           ;TTimer.c: 20:     RCONbits.IPEN = 0;
  8558                           
  8559                           ;incstack = 0
  8560  001D7A  9ED0               	bcf	208,7,c	;volatile
  8561                           
  8562                           ;TTimer.c: 21:     INTCONbits.GIE_GIEH = 1;
  8563  001D7C  8EF2               	bsf	242,7,c	;volatile
  8564                           
  8565                           ;TTimer.c: 22:     INTCONbits.PEIE_GIEL = 1;
  8566  001D7E  8CF2               	bsf	242,6,c	;volatile
  8567                           
  8568                           ;TTimer.c: 23:     INTCONbits.TMR0IE = 1;
  8569  001D80  8AF2               	bsf	242,5,c	;volatile
  8570                           
  8571                           ;TTimer.c: 24:     INTCONbits.TMR0IF = 0;
  8572  001D82  94F2               	bcf	242,2,c	;volatile
  8573                           
  8574                           ;TTimer.c: 25:     T0CON = 0x08;
  8575  001D84  0E08               	movlw	8
  8576  001D86  6ED5               	movwf	213,c	;volatile
  8577                           
  8578                           ;TTimer.c: 27:     TMR0H = 0xD8;
  8579  001D88  0ED8               	movlw	216
  8580  001D8A  6ED7               	movwf	215,c	;volatile
  8581                           
  8582                           ;TTimer.c: 28:     TMR0L = 0xF0;
  8583  001D8C  0EF0               	movlw	240
  8584  001D8E  6ED6               	movwf	214,c	;volatile
  8585                           
  8586                           ;TTimer.c: 29:     T0CONbits.TMR0ON = 1;
  8587  001D90  8ED5               	bsf	213,7,c	;volatile
  8588                           
  8589                           ;TTimer.c: 31:     for (counter=0;counter<25;counter++) {
  8590  001D92  6A46               	clrf	_counter^0,c
  8591  001D94                     l4379:
  8592  001D94  0E18               	movlw	24
  8593  001D96  6446               	cpfsgt	_counter^0,c
  8594  001D98  D001               	goto	l4383
  8595  001D9A  0C18               	retlw	24
  8596  001D9C                     l4383:
  8597                           
  8598                           ;TTimer.c: 32:  s_Timers[counter].b_busy=0;
  8599  001D9C  EC9D  F00E         	call	PL14	;call to abstracted procedure
  8600  001DA0  6ADF               	clrf	indf2,c
  8601                           
  8602                           ;TTimer.c: 33:     }
  8603  001DA2  2A46               	incf	_counter^0,f,c
  8604  001DA4  D7F7               	goto	l4379
  8605  001DA6                     __end_of_TiInitTimer:
  8606                           	callstack 0
  8607                           
  8608 ;; *************** function _SMSMotor *****************
  8609 ;; Defined at:
  8610 ;;		line 133 in file "keypad.c"
  8611 ;; Parameters:    Size  Location     Type
  8612 ;;		None
  8613 ;; Auto vars:     Size  Location     Type
  8614 ;;		None
  8615 ;; Return value:  Size  Location     Type
  8616 ;;                  1    wreg      void 
  8617 ;; Registers used:
  8618 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8619 ;; Tracked objects:
  8620 ;;		On entry : 0/0
  8621 ;;		On exit  : 0/0
  8622 ;;		Unchanged: 0/0
  8623 ;; Data sizes:     COMRAM   BANK0   BANK1
  8624 ;;      Params:         0       0       0
  8625 ;;      Locals:         0       0       0
  8626 ;;      Temps:          2       0       0
  8627 ;;      Totals:         2       0       0
  8628 ;;Total ram usage:        2 bytes
  8629 ;; Hardware stack levels used: 1
  8630 ;; Hardware stack levels required when called: 4
  8631 ;; This function calls:
  8632 ;;		_KeGetGenericValue
  8633 ;;		_TiGetTics
  8634 ;;		_TiResetTics
  8635 ;; This function is called by:
  8636 ;;		_main
  8637 ;; This function uses a non-reentrant model
  8638 ;;
  8639                           
  8640                           	psect	text68
  8641  0014D2                     __ptext68:
  8642                           	callstack 0
  8643  0014D2                     _SMSMotor:
  8644                           	callstack 26
  8645                           
  8646                           ;keypad.c: 134:     switch(stateSMS){
  8647                           
  8648                           ;incstack = 0
  8649  0014D2  D043               	goto	l6231
  8650  0014D4                     l6179:
  8651                           
  8652                           ;keypad.c: 139:             if(pressed){
  8653  0014D4  5040               	movf	_pressed^0,w,c
  8654  0014D6  E021               	bz	l177
  8655                           
  8656                           ;keypad.c: 140:                 stateSMS=1;
  8657  0014D8  0E01               	movlw	1
  8658  0014DA  6E3C               	movwf	_stateSMS^0,c
  8659                           
  8660                           ;keypad.c: 141:                 currentKey = KeGetGenericValue();
  8661  0014DC  EC8D  F00F         	call	_KeGetGenericValue	;wreg free
  8662  0014E0  6E42               	movwf	_currentKey^0,c
  8663                           
  8664                           ;keypad.c: 142:                 available = 2;
  8665  0014E2  0E02               	movlw	2
  8666  0014E4  6E3E               	movwf	_available^0,c
  8667                           
  8668                           ;keypad.c: 143:                 if (TiGetTics(timer_SMS)>=1200){
  8669  0014E6  5043               	movf	_timer_SMS^0,w,c
  8670  0014E8  EC24  F00F         	call	_TiGetTics
  8671  0014EC  BE5F               	btfsc	(?_TiGetTics+1)^0,7,c
  8672  0014EE  D008               	goto	l6195
  8673  0014F0  ECE3  F008         	call	PL28	;call to abstracted procedure
  8674  0014F4  E305               	bnc	l6195
  8675                           
  8676                           ;keypad.c: 144:                     available = 1;
  8677  0014F6  0E01               	movlw	1
  8678  0014F8  6E3E               	movwf	_available^0,c
  8679                           
  8680                           ;keypad.c: 145:                     numPresses = 0;
  8681  0014FA  6A3F               	clrf	_numPresses^0,c
  8682                           
  8683                           ;keypad.c: 146:                     previous = 0;
  8684  0014FC  6A41               	clrf	_previous^0,c
  8685                           
  8686                           ;keypad.c: 147:                 } else if(numPresses != 0 && previous != currentKey ){
  8687  0014FE  D00A               	goto	l6205
  8688  001500                     l6195:
  8689  001500  503F               	movf	_numPresses^0,w,c
  8690  001502  E008               	bz	l6205
  8691  001504  5042               	movf	_currentKey^0,w,c
  8692  001506  1841               	xorwf	_previous^0,w,c
  8693  001508  E005               	bz	l6205
  8694                           
  8695                           ;keypad.c: 149:                     available = 1;
  8696  00150A  0E01               	movlw	1
  8697  00150C  6E3E               	movwf	_available^0,c
  8698                           
  8699                           ;keypad.c: 151:                     previous = currentKey;
  8700  00150E  C042  F041         	movff	_currentKey,_previous
  8701                           
  8702                           ;keypad.c: 153:                     numPresses = 0;
  8703  001512  6A3F               	clrf	_numPresses^0,c
  8704  001514                     l6205:
  8705                           
  8706                           ;keypad.c: 157:                 TiResetTics(timer_SMS);
  8707  001514  5043               	movf	_timer_SMS^0,w,c
  8708  001516  EFAD  F00F         	goto	_TiResetTics
  8709  00151A                     l177:
  8710                           
  8711                           ;keypad.c: 160:               previous=currentKey;
  8712  00151A  C042  F041         	movff	_currentKey,_previous
  8713  00151E  0012               	return	
  8714  001520                     l6207:
  8715                           
  8716                           ;keypad.c: 172:             numPresses++;
  8717  001520  2A3F               	incf	_numPresses^0,f,c
  8718                           
  8719                           ;keypad.c: 173:             stateSMS = 2;
  8720  001522  0E02               	movlw	2
  8721  001524  6E3C               	movwf	_stateSMS^0,c
  8722                           
  8723                           ;keypad.c: 174:             break;
  8724  001526  0C02               	retlw	2
  8725  001528                     l6211:
  8726                           
  8727                           ;keypad.c: 177:             if (!pressed){
  8728  001528  5040               	movf	_pressed^0,w,c
  8729  00152A  A4D8               	btfss	status,2,c
  8730  00152C  0012               	return	
  8731                           
  8732                           ;keypad.c: 178:                 TiResetTics(timer_SMS);
  8733  00152E  5043               	movf	_timer_SMS^0,w,c
  8734  001530  ECAD  F00F         	call	_TiResetTics
  8735                           
  8736                           ;keypad.c: 180:                 stateSMS = 0;
  8737  001534  6A3C               	clrf	_stateSMS^0,c
  8738  001536  0012               	return	
  8739  001538                     l6217:
  8740                           
  8741                           ;keypad.c: 185:             if(pressed){
  8742  001538  5040               	movf	_pressed^0,w,c
  8743  00153A  B4D8               	btfsc	status,2,c
  8744  00153C  0012               	return	
  8745                           
  8746                           ;keypad.c: 186:                 stateSMS = 4;
  8747  00153E  EF46  F00F         	goto	PL80	;call to abstracted procedure
  8748  001542                     l6221:
  8749                           
  8750                           ;keypad.c: 191:             stateSMS = 5;
  8751  001542  0E05               	movlw	5
  8752  001544  6E3C               	movwf	_stateSMS^0,c
  8753                           
  8754                           ;keypad.c: 192:             break;
  8755  001546  0C05               	retlw	5
  8756  001548                     l6223:
  8757                           
  8758                           ;keypad.c: 194:             if (!pressed){
  8759  001548  5040               	movf	_pressed^0,w,c
  8760  00154A  A4D8               	btfss	status,2,c
  8761  00154C  0012               	return	
  8762                           
  8763                           ;keypad.c: 195:                 TiResetTics(timer_SMS);
  8764  00154E  5043               	movf	_timer_SMS^0,w,c
  8765  001550  ECAD  F00F         	call	_TiResetTics
  8766                           
  8767                           ;keypad.c: 197:                 stateSMS = 3;
  8768  001554  0E03               	movlw	3
  8769  001556  6E3C               	movwf	_stateSMS^0,c
  8770  001558  0C03               	retlw	3
  8771  00155A                     l6231:
  8772  00155A  503C               	movf	_stateSMS^0,w,c
  8773  00155C  6E65               	movwf	??_SMSMotor^0,c
  8774  00155E  6A66               	clrf	(??_SMSMotor+1)^0,c
  8775                           
  8776                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  8777                           ; Switch size 1, requested type "space"
  8778                           ; Number of cases is 1, Range of values is 0 to 0
  8779                           ; switch strategies available:
  8780                           ; Name         Instructions Cycles
  8781                           ; simple_byte            4     3 (average)
  8782                           ;	Chosen strategy is simple_byte
  8783  001560  5066               	movf	(??_SMSMotor+1)^0,w,c
  8784  001562  A4D8               	btfss	status,2,c
  8785  001564  0012               	return	
  8786                           
  8787                           ; Switch size 1, requested type "space"
  8788                           ; Number of cases is 6, Range of values is 0 to 5
  8789                           ; switch strategies available:
  8790                           ; Name         Instructions Cycles
  8791                           ; simple_byte           19    10 (average)
  8792                           ;	Chosen strategy is simple_byte
  8793  001566  5065               	movf	??_SMSMotor^0,w,c
  8794  001568  E0B5               	bz	l6179
  8795  00156A  0A01               	xorlw	1	; case 1
  8796  00156C  E0D9               	bz	l6207
  8797  00156E  0A03               	xorlw	3	; case 2
  8798  001570  E0DB               	bz	l6211
  8799  001572  0A01               	xorlw	1	; case 3
  8800  001574  E0E1               	bz	l6217
  8801  001576  0A07               	xorlw	7	; case 4
  8802  001578  E0E4               	bz	l6221
  8803  00157A  0A01               	xorlw	1	; case 5
  8804  00157C  E0E5               	bz	l6223
  8805  00157E  0012               	return		;funcret
  8806  001580                     __end_of_SMSMotor:
  8807                           	callstack 0
  8808                           
  8809 ;; *************** function _KeGetGenericValue *****************
  8810 ;; Defined at:
  8811 ;;		line 224 in file "keypad.c"
  8812 ;; Parameters:    Size  Location     Type
  8813 ;;		None
  8814 ;; Auto vars:     Size  Location     Type
  8815 ;;		None
  8816 ;; Return value:  Size  Location     Type
  8817 ;;                  1    wreg      unsigned char 
  8818 ;; Registers used:
  8819 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8820 ;; Tracked objects:
  8821 ;;		On entry : 0/0
  8822 ;;		On exit  : 0/0
  8823 ;;		Unchanged: 0/0
  8824 ;; Data sizes:     COMRAM   BANK0   BANK1
  8825 ;;      Params:         0       0       0
  8826 ;;      Locals:         0       0       0
  8827 ;;      Temps:          2       0       0
  8828 ;;      Totals:         2       0       0
  8829 ;;Total ram usage:        2 bytes
  8830 ;; Hardware stack levels used: 1
  8831 ;; Hardware stack levels required when called: 3
  8832 ;; This function calls:
  8833 ;;		_getColumn
  8834 ;; This function is called by:
  8835 ;;		_SMSMotor
  8836 ;;		_KeGetCharValue
  8837 ;;		_menuMotor
  8838 ;;		_timeMotor
  8839 ;; This function uses a non-reentrant model
  8840 ;;
  8841                           
  8842                           	psect	text69
  8843  001F1A                     __ptext69:
  8844                           	callstack 0
  8845  001F1A                     _KeGetGenericValue:
  8846                           	callstack 26
  8847                           
  8848                           ;keypad.c: 225:     return TABLE[(row*3)+getColumn()];
  8849                           
  8850                           ;incstack = 0
  8851  001F1A  EC8A  F000         	call	_getColumn	;wreg free
  8852  001F1E  6E5E               	movwf	??_KeGetGenericValue^0,c
  8853  001F20  5045               	movf	_row^0,w,c
  8854  001F22  0D03               	mullw	3
  8855  001F24  50F3               	movf	243,w,c
  8856  001F26  0F01               	addlw	low _TABLE
  8857  001F28  245E               	addwf	??_KeGetGenericValue^0,w,c
  8858  001F2A  6E5F               	movwf	(??_KeGetGenericValue+1)^0,c
  8859  001F2C  C05F  FFF6         	movff	??_KeGetGenericValue+1,tblptrl
  8860  001F30                     	if	1	;There is more than 1 active tblptr byte
  8861  001F30  0E02               	movlw	high __smallconst
  8862  001F32  6EF7               	movwf	tblptrh,c
  8863  001F34                     	endif
  8864  001F34                     	if	0	;tblptru may be non-zero
  8865  001F34                     	endif
  8866  001F34                     	if	0	;tblptru may be non-zero
  8867  001F34                     	endif
  8868  001F34  0008               	tblrd		*
  8869  001F36  50F5               	movf	tablat,w,c
  8870  001F38  0012               	return		;funcret
  8871  001F3A                     __end_of_KeGetGenericValue:
  8872                           	callstack 0
  8873                           
  8874 ;; *************** function _getColumn *****************
  8875 ;; Defined at:
  8876 ;;		line 211 in file "keypad.c"
  8877 ;; Parameters:    Size  Location     Type
  8878 ;;		None
  8879 ;; Auto vars:     Size  Location     Type
  8880 ;;		None
  8881 ;; Return value:  Size  Location     Type
  8882 ;;                  1    wreg      unsigned char 
  8883 ;; Registers used:
  8884 ;;		wreg
  8885 ;; Tracked objects:
  8886 ;;		On entry : 0/0
  8887 ;;		On exit  : 0/0
  8888 ;;		Unchanged: 0/0
  8889 ;; Data sizes:     COMRAM   BANK0   BANK1
  8890 ;;      Params:         0       0       0
  8891 ;;      Locals:         0       0       0
  8892 ;;      Temps:          0       0       0
  8893 ;;      Totals:         0       0       0
  8894 ;;Total ram usage:        0 bytes
  8895 ;; Hardware stack levels used: 1
  8896 ;; Hardware stack levels required when called: 2
  8897 ;; This function calls:
  8898 ;;		Nothing
  8899 ;; This function is called by:
  8900 ;;		_KeGetGenericValue
  8901 ;; This function uses a non-reentrant model
  8902 ;;
  8903                           
  8904                           	psect	text70
  8905  000114                     __ptext70:
  8906                           	callstack 0
  8907  000114                     _getColumn:
  8908                           	callstack 26
  8909                           
  8910                           ;keypad.c: 212:     if (!PORTBbits.RB0) return 0;
  8911                           
  8912                           ;incstack = 0
  8913  000114  A081               	btfss	129,0,c	;volatile
  8914  000116  0C00               	retlw	0
  8915                           
  8916                           ;keypad.c: 213:     if (!PORTBbits.RB1) return 1;
  8917  000118  A281               	btfss	129,1,c	;volatile
  8918  00011A  0C01               	retlw	1
  8919                           
  8920                           ;keypad.c: 214:     return 2;
  8921  00011C  0C02               	retlw	2	;funcret
  8922  00011E                     __end_of_getColumn:
  8923                           	callstack 0
  8924                           
  8925 ;; *************** function _LcInit *****************
  8926 ;; Defined at:
  8927 ;;		line 60 in file "LcTLCD.c"
  8928 ;; Parameters:    Size  Location     Type
  8929 ;;  rows            1    wreg     unsigned char 
  8930 ;;  columns         1   17[COMRAM] unsigned char 
  8931 ;; Auto vars:     Size  Location     Type
  8932 ;;  rows            1   18[COMRAM] unsigned char 
  8933 ;;  i               1   19[COMRAM] unsigned char 
  8934 ;; Return value:  Size  Location     Type
  8935 ;;                  1    wreg      void 
  8936 ;; Registers used:
  8937 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8938 ;; Tracked objects:
  8939 ;;		On entry : 0/0
  8940 ;;		On exit  : 0/0
  8941 ;;		Unchanged: 0/0
  8942 ;; Data sizes:     COMRAM   BANK0   BANK1
  8943 ;;      Params:         1       0       0
  8944 ;;      Locals:         2       0       0
  8945 ;;      Temps:          0       0       0
  8946 ;;      Totals:         3       0       0
  8947 ;;Total ram usage:        3 bytes
  8948 ;; Hardware stack levels used: 1
  8949 ;; Hardware stack levels required when called: 4
  8950 ;; This function calls:
  8951 ;;		_CantaIR
  8952 ;;		_EscriuPrimeraOrdre
  8953 ;;		_Espera
  8954 ;;		_TiGetTimer
  8955 ;;		_WaitForBusy
  8956 ;; This function is called by:
  8957 ;;		_main
  8958 ;; This function uses a non-reentrant model
  8959 ;;
  8960                           
  8961                           	psect	text71
  8962  001580                     __ptext71:
  8963                           	callstack 0
  8964  001580                     _LcInit:
  8965                           	callstack 26
  8966                           
  8967                           ;LcTLCD.c: 68:  Rows = rows; Columns = columns;
  8968                           
  8969                           ;incstack = 0
  8970  001580  EC8E  F00E         	call	_TiGetTimer	;wreg free
  8971  001584  6E0D               	movwf	_Timer^0,c
  8972  001586  6A0E               	clrf	(_Timer+1)^0,c
  8973                           
  8974                           ;LcTLCD.c: 69:  RowAct = ColumnAct = 0;
  8975  001588  6A3A               	clrf	_ColumnAct^0,c
  8976  00158A  6A3B               	clrf	_RowAct^0,c
  8977                           
  8978                           ;LcTLCD.c: 70:  (TRISDbits.TRISD4 = TRISDbits.TRISD5 = TRISDbits.TRISD6 = 0);
  8979  00158C  9C95               	bcf	149,6,c	;volatile
  8980  00158E  9A95               	bcf	149,5,c	;volatile
  8981  001590  9895               	bcf	149,4,c	;volatile
  8982                           
  8983                           ;LcTLCD.c: 71:  for (i = 0; i < 2; i++) {
  8984  001592  6A6C               	clrf	LcInit@i^0,c
  8985  001594                     l6105:
  8986                           
  8987                           ;LcTLCD.c: 72:   Espera(Timer, 100);
  8988  001594  D845               	call	PL16	;call to abstracted procedure
  8989  001596  0E64               	movlw	100
  8990  001598  6E67               	movwf	Espera@ms^0,c
  8991  00159A  EC9D  F00F         	call	_Espera	;wreg free
  8992                           
  8993                           ;LcTLCD.c: 75:   EscriuPrimeraOrdre(0x02 | 0x01);
  8994  00159E  0E03               	movlw	3
  8995  0015A0  ECFB  F00B         	call	_EscriuPrimeraOrdre
  8996                           
  8997                           ;LcTLCD.c: 76:   Espera(Timer, 5);
  8998  0015A4  D83D               	call	PL16	;call to abstracted procedure
  8999  0015A6  0E05               	movlw	5
  9000  0015A8  6E67               	movwf	Espera@ms^0,c
  9001  0015AA  EC9D  F00F         	call	_Espera	;wreg free
  9002                           
  9003                           ;LcTLCD.c: 77:   EscriuPrimeraOrdre(0x02 | 0x01);
  9004  0015AE  0E03               	movlw	3
  9005  0015B0  ECFB  F00B         	call	_EscriuPrimeraOrdre
  9006                           
  9007                           ;LcTLCD.c: 78:   Espera(Timer, 1);
  9008  0015B4  D835               	call	PL16	;call to abstracted procedure
  9009  0015B6  0E01               	movlw	1
  9010  0015B8  6E67               	movwf	Espera@ms^0,c
  9011  0015BA  EC9D  F00F         	call	_Espera	;wreg free
  9012                           
  9013                           ;LcTLCD.c: 79:   EscriuPrimeraOrdre(0x02 | 0x01);
  9014  0015BE  0E03               	movlw	3
  9015  0015C0  ECFB  F00B         	call	_EscriuPrimeraOrdre
  9016                           
  9017                           ;LcTLCD.c: 80:   Espera(Timer, 1);
  9018  0015C4  D82D               	call	PL16	;call to abstracted procedure
  9019  0015C6  0E01               	movlw	1
  9020  0015C8  6E67               	movwf	Espera@ms^0,c
  9021  0015CA  EC9D  F00F         	call	_Espera	;wreg free
  9022                           
  9023                           ;LcTLCD.c: 83:   EscriuPrimeraOrdre(0x02);
  9024  0015CE  0E02               	movlw	2
  9025  0015D0  ECFB  F00B         	call	_EscriuPrimeraOrdre
  9026                           
  9027                           ;LcTLCD.c: 84:   Espera(Timer, 1);
  9028  0015D4  D825               	call	PL16	;call to abstracted procedure
  9029  0015D6  0E01               	movlw	1
  9030  0015D8  6E67               	movwf	Espera@ms^0,c
  9031  0015DA  EC9D  F00F         	call	_Espera	;wreg free
  9032                           
  9033                           ;LcTLCD.c: 85:   CantaIR(0x20 | 0x08);
  9034  0015DE  0E28               	movlw	40
  9035  0015E0  ECBD  F00F         	call	_CantaIR
  9036                           
  9037                           ;LcTLCD.c: 88:   WaitForBusy(); CantaIR(0x08);
  9038  0015E4  EC05  F00E         	call	_WaitForBusy	;wreg free
  9039  0015E8  0E08               	movlw	8
  9040  0015EA  ECBD  F00F         	call	_CantaIR
  9041                           
  9042                           ;LcTLCD.c: 89:   WaitForBusy(); CantaIR(0x01);
  9043  0015EE  EC05  F00E         	call	_WaitForBusy	;wreg free
  9044  0015F2  0E01               	movlw	1
  9045  0015F4  ECBD  F00F         	call	_CantaIR
  9046                           
  9047                           ;LcTLCD.c: 90:   Espera(Timer,3);
  9048  0015F8  D813               	call	PL16	;call to abstracted procedure
  9049  0015FA  0E03               	movlw	3
  9050  0015FC  6E67               	movwf	Espera@ms^0,c
  9051  0015FE  EC9D  F00F         	call	_Espera	;wreg free
  9052                           
  9053                           ;LcTLCD.c: 91:   WaitForBusy(); CantaIR(0x04 | 0x02);
  9054  001602  EC05  F00E         	call	_WaitForBusy	;wreg free
  9055  001606  0E06               	movlw	6
  9056  001608  ECBD  F00F         	call	_CantaIR
  9057                           
  9058                           ;LcTLCD.c: 92:   WaitForBusy(); CantaIR(0x08 | 0x04 | 0x02 | 0x01);
  9059  00160C  EC05  F00E         	call	_WaitForBusy	;wreg free
  9060  001610  0E0F               	movlw	15
  9061  001612  ECBD  F00F         	call	_CantaIR
  9062                           
  9063                           ;LcTLCD.c: 93:  }
  9064  001616  2A6C               	incf	LcInit@i^0,f,c
  9065  001618  0E01               	movlw	1
  9066  00161A  646C               	cpfsgt	LcInit@i^0,c
  9067  00161C  D7BB               	goto	l6105
  9068  00161E  0C01               	retlw	1
  9069  001620                     __end_of_LcInit:
  9070                           	callstack 0
  9071  001620                     PL16:
  9072                           	callstack 26
  9073  001620  C00D  F065         	movff	_Timer,Espera@Timer
  9074  001624  C00E  F066         	movff	_Timer+1,Espera@Timer+1
  9075  001628  6A68               	clrf	(Espera@ms+1)^0,c
  9076  00162A  0012               	return	
  9077  00162C                     __end_ofPL16:
  9078                           	callstack 0
  9079                           
  9080 ;; *************** function _WaitForBusy *****************
  9081 ;; Defined at:
  9082 ;;		line 260 in file "LcTLCD.c"
  9083 ;; Parameters:    Size  Location     Type
  9084 ;;		None
  9085 ;; Auto vars:     Size  Location     Type
  9086 ;;  Busy            1   12[COMRAM] unsigned char 
  9087 ;; Return value:  Size  Location     Type
  9088 ;;                  1    wreg      void 
  9089 ;; Registers used:
  9090 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9091 ;; Tracked objects:
  9092 ;;		On entry : 0/0
  9093 ;;		On exit  : 0/0
  9094 ;;		Unchanged: 0/0
  9095 ;; Data sizes:     COMRAM   BANK0   BANK1
  9096 ;;      Params:         0       0       0
  9097 ;;      Locals:         1       0       0
  9098 ;;      Temps:          0       0       0
  9099 ;;      Totals:         1       0       0
  9100 ;;Total ram usage:        1 bytes
  9101 ;; Hardware stack levels used: 1
  9102 ;; Hardware stack levels required when called: 3
  9103 ;; This function calls:
  9104 ;;		_TiGetTics
  9105 ;;		_TiResetTics
  9106 ;; This function is called by:
  9107 ;;		_LcInit
  9108 ;;		_LcClear
  9109 ;;		_LcCursorOn
  9110 ;;		_LcCursorOff
  9111 ;;		_LcGotoXY
  9112 ;;		_LcPutChar
  9113 ;; This function uses a non-reentrant model
  9114 ;;
  9115                           
  9116                           	psect	text72
  9117  001C0A                     __ptext72:
  9118                           	callstack 0
  9119  001C0A                     _WaitForBusy:
  9120                           	callstack 24
  9121                           
  9122                           ;LcTLCD.c: 261:  (TRISDbits.TRISD0 = TRISDbits.TRISD1 = TRISDbits.TRISD2 = TRISDbits.TRI
      +                          SD3 = 1);
  9123                           
  9124                           ;incstack = 0
  9125  001C0A  8695               	bsf	149,3,c	;volatile
  9126  001C0C  8495               	bsf	149,2,c	;volatile
  9127  001C0E  8295               	bsf	149,1,c	;volatile
  9128  001C10  8095               	bsf	149,0,c	;volatile
  9129                           
  9130                           ;LcTLCD.c: 262:  (LATDbits.LATD4 = 0);
  9131  001C12  988C               	bcf	140,4,c	;volatile
  9132                           
  9133                           ;LcTLCD.c: 263:  (LATDbits.LATD5 = 1);
  9134  001C14  8A8C               	bsf	140,5,c	;volatile
  9135                           
  9136                           ;LcTLCD.c: 264:  TiResetTics(Timer);
  9137  001C16  500D               	movf	_Timer^0,w,c
  9138  001C18  ECAD  F00F         	call	_TiResetTics
  9139  001C1C                     l5787:
  9140                           
  9141                           ;LcTLCD.c: 266:   (LATDbits.LATD6 = 1);(LATDbits.LATD6 = 1);
  9142  001C1C  8C8C               	bsf	140,6,c	;volatile
  9143  001C1E  8C8C               	bsf	140,6,c	;volatile
  9144                           
  9145                           ;LcTLCD.c: 267:   Busy = (PORTDbits.RD3);
  9146  001C20  0E00               	movlw	0
  9147  001C22  B683               	btfsc	131,3,c	;volatile
  9148  001C24  0E01               	movlw	1
  9149  001C26  6E65               	movwf	WaitForBusy@Busy^0,c
  9150                           
  9151                           ;LcTLCD.c: 268:   (LATDbits.LATD6 = 0);
  9152  001C28  9C8C               	bcf	140,6,c	;volatile
  9153                           
  9154                           ;LcTLCD.c: 269:   (LATDbits.LATD6 = 0);
  9155  001C2A  9C8C               	bcf	140,6,c	;volatile
  9156                           
  9157                           ;LcTLCD.c: 270:   (LATDbits.LATD6 = 1);(LATDbits.LATD6 = 1);
  9158  001C2C  8C8C               	bsf	140,6,c	;volatile
  9159  001C2E  8C8C               	bsf	140,6,c	;volatile
  9160                           
  9161                           ;LcTLCD.c: 272:   (LATDbits.LATD6 = 0);
  9162  001C30  9C8C               	bcf	140,6,c	;volatile
  9163                           
  9164                           ;LcTLCD.c: 273:   (LATDbits.LATD6 = 0);
  9165  001C32  9C8C               	bcf	140,6,c	;volatile
  9166                           
  9167                           ;LcTLCD.c: 274:   if (TiGetTics(Timer)) break;
  9168  001C34  500D               	movf	_Timer^0,w,c
  9169  001C36  EC24  F00F         	call	_TiGetTics
  9170  001C3A  505E               	movf	?_TiGetTics^0,w,c
  9171  001C3C  105F               	iorwf	(?_TiGetTics+1)^0,w,c
  9172  001C3E  E001               	bz	l5809
  9173  001C40  0012               	return	
  9174  001C42                     l5809:
  9175                           
  9176                           ;LcTLCD.c: 275:  } while(Busy);
  9177  001C42  5065               	movf	WaitForBusy@Busy^0,w,c
  9178  001C44  E1EB               	bnz	l5787
  9179  001C46  0012               	return		;funcret
  9180  001C48                     __end_of_WaitForBusy:
  9181                           	callstack 0
  9182                           
  9183 ;; *************** function _TiGetTimer *****************
  9184 ;; Defined at:
  9185 ;;		line 74 in file "TTimer.c"
  9186 ;; Parameters:    Size  Location     Type
  9187 ;;		None
  9188 ;; Auto vars:     Size  Location     Type
  9189 ;;		None
  9190 ;; Return value:  Size  Location     Type
  9191 ;;                  1    wreg      unsigned char 
  9192 ;; Registers used:
  9193 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  9194 ;; Tracked objects:
  9195 ;;		On entry : 0/0
  9196 ;;		On exit  : 0/0
  9197 ;;		Unchanged: 0/0
  9198 ;; Data sizes:     COMRAM   BANK0   BANK1
  9199 ;;      Params:         0       0       0
  9200 ;;      Locals:         0       0       0
  9201 ;;      Temps:          1       0       0
  9202 ;;      Totals:         1       0       0
  9203 ;;Total ram usage:        1 bytes
  9204 ;; Hardware stack levels used: 1
  9205 ;; Hardware stack levels required when called: 2
  9206 ;; This function calls:
  9207 ;;		Nothing
  9208 ;; This function is called by:
  9209 ;;		_initKeypad
  9210 ;;		_LcInit
  9211 ;;		_initAudio
  9212 ;;		_initMenu
  9213 ;;		_initSIO
  9214 ;;		_initTime
  9215 ;; This function uses a non-reentrant model
  9216 ;;
  9217                           
  9218                           	psect	text73
  9219  001D1C                     __ptext73:
  9220                           	callstack 0
  9221  001D1C                     _TiGetTimer:
  9222                           	callstack 27
  9223                           
  9224                           ;TTimer.c: 78:     counter=0;
  9225                           
  9226                           ;incstack = 0
  9227  001D1C  6A46               	clrf	_counter^0,c
  9228                           
  9229                           ;TTimer.c: 79:     while (s_Timers[counter].b_busy==1) {
  9230  001D1E  D005               	goto	l4087
  9231  001D20                     l4079:
  9232                           
  9233                           ;TTimer.c: 80:         counter++;
  9234  001D20  2A46               	incf	_counter^0,f,c
  9235                           
  9236                           ;TTimer.c: 81:  if (counter == 25) return -1;
  9237  001D22  0E19               	movlw	25
  9238  001D24  1846               	xorwf	_counter^0,w,c
  9239  001D26  E101               	bnz	l4087
  9240  001D28  0CFF               	retlw	255
  9241  001D2A                     l4087:
  9242                           
  9243                           ;TTimer.c: 79:     while (s_Timers[counter].b_busy==1) {
  9244  001D2A  D807               	call	PL14	;call to abstracted procedure
  9245  001D2C  04DE               	decf	postinc2,w,c
  9246  001D2E  E0F8               	bz	l4079
  9247                           
  9248                           ;TTimer.c: 83:     s_Timers[counter].b_busy=1;
  9249  001D30  D804               	call	PL14	;call to abstracted procedure
  9250  001D32  0E01               	movlw	1
  9251  001D34  6EDF               	movwf	indf2,c
  9252                           
  9253                           ;TTimer.c: 84:     return (counter);
  9254  001D36  5046               	movf	_counter^0,w,c
  9255  001D38  0012               	return		;funcret
  9256  001D3A                     __end_of_TiGetTimer:
  9257                           	callstack 0
  9258  001D3A                     PL14:
  9259                           	callstack 28
  9260  001D3A  5046               	movf	_counter^0,w,c
  9261  001D3C  0D03               	mullw	3
  9262  001D3E  0E92               	movlw	low (_s_Timers+2)
  9263  001D40  24F3               	addwf	243,w,c
  9264  001D42  6ED9               	movwf	fsr2l,c
  9265  001D44  0E01               	movlw	high (_s_Timers+2)
  9266  001D46  20F4               	addwfc	prodh,w,c
  9267  001D48  6EDA               	movwf	fsr2h,c
  9268  001D4A  0012               	return	
  9269  001D4C                     __end_ofPL14:
  9270                           	callstack 0
  9271                           
  9272 ;; *************** function _Espera *****************
  9273 ;; Defined at:
  9274 ;;		line 209 in file "LcTLCD.c"
  9275 ;; Parameters:    Size  Location     Type
  9276 ;;  Timer           2   12[COMRAM] int 
  9277 ;;  ms              2   14[COMRAM] int 
  9278 ;; Auto vars:     Size  Location     Type
  9279 ;;		None
  9280 ;; Return value:  Size  Location     Type
  9281 ;;                  1    wreg      void 
  9282 ;; Registers used:
  9283 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9284 ;; Tracked objects:
  9285 ;;		On entry : 0/0
  9286 ;;		On exit  : 0/0
  9287 ;;		Unchanged: 0/0
  9288 ;; Data sizes:     COMRAM   BANK0   BANK1
  9289 ;;      Params:         4       0       0
  9290 ;;      Locals:         0       0       0
  9291 ;;      Temps:          1       0       0
  9292 ;;      Totals:         5       0       0
  9293 ;;Total ram usage:        5 bytes
  9294 ;; Hardware stack levels used: 1
  9295 ;; Hardware stack levels required when called: 3
  9296 ;; This function calls:
  9297 ;;		_TiGetTics
  9298 ;;		_TiResetTics
  9299 ;; This function is called by:
  9300 ;;		_LcInit
  9301 ;;		_LcClear
  9302 ;; This function uses a non-reentrant model
  9303 ;;
  9304                           
  9305                           	psect	text74
  9306  001F3A                     __ptext74:
  9307                           	callstack 0
  9308  001F3A                     _Espera:
  9309                           	callstack 24
  9310                           
  9311                           ;LcTLCD.c: 210:  TiResetTics(Timer);
  9312                           
  9313                           ;incstack = 0
  9314  001F3A  5065               	movf	Espera@Timer^0,w,c
  9315  001F3C  ECAD  F00F         	call	_TiResetTics
  9316  001F40                     l5813:
  9317  001F40  5065               	movf	Espera@Timer^0,w,c
  9318  001F42  EC24  F00F         	call	_TiGetTics
  9319  001F46  5067               	movf	Espera@ms^0,w,c
  9320  001F48  5C5E               	subwf	?_TiGetTics^0,w,c
  9321  001F4A  505F               	movf	(?_TiGetTics+1)^0,w,c
  9322  001F4C  0A80               	xorlw	128
  9323  001F4E  6E69               	movwf	??_Espera^0,c
  9324  001F50  5068               	movf	(Espera@ms+1)^0,w,c
  9325  001F52  0A80               	xorlw	128
  9326  001F54  5869               	subwfb	??_Espera^0,w,c
  9327  001F56  E3F4               	bnc	l5813
  9328  001F58  0012               	return		;funcret
  9329  001F5A                     __end_of_Espera:
  9330                           	callstack 0
  9331                           
  9332 ;; *************** function _EscriuPrimeraOrdre *****************
  9333 ;; Defined at:
  9334 ;;		line 278 in file "LcTLCD.c"
  9335 ;; Parameters:    Size  Location     Type
  9336 ;;  ordre           1    wreg     unsigned char 
  9337 ;; Auto vars:     Size  Location     Type
  9338 ;;  ordre           1    6[COMRAM] unsigned char 
  9339 ;; Return value:  Size  Location     Type
  9340 ;;                  1    wreg      void 
  9341 ;; Registers used:
  9342 ;;		wreg, status,2, status,0
  9343 ;; Tracked objects:
  9344 ;;		On entry : 0/0
  9345 ;;		On exit  : 0/0
  9346 ;;		Unchanged: 0/0
  9347 ;; Data sizes:     COMRAM   BANK0   BANK1
  9348 ;;      Params:         0       0       0
  9349 ;;      Locals:         1       0       0
  9350 ;;      Temps:          1       0       0
  9351 ;;      Totals:         2       0       0
  9352 ;;Total ram usage:        2 bytes
  9353 ;; Hardware stack levels used: 1
  9354 ;; Hardware stack levels required when called: 2
  9355 ;; This function calls:
  9356 ;;		Nothing
  9357 ;; This function is called by:
  9358 ;;		_LcInit
  9359 ;; This function uses a non-reentrant model
  9360 ;;
  9361                           
  9362                           	psect	text75
  9363  0017F6                     __ptext75:
  9364                           	callstack 0
  9365  0017F6                     _EscriuPrimeraOrdre:
  9366                           	callstack 27
  9367                           
  9368                           ;incstack = 0
  9369                           ;EscriuPrimeraOrdre@ordre stored from wreg
  9370  0017F6  6E5F               	movwf	EscriuPrimeraOrdre@ordre^0,c
  9371                           
  9372                           ;LcTLCD.c: 280:  (TRISDbits.TRISD0 = TRISDbits.TRISD1 = TRISDbits.TRISD2 = TRISDbits.TRI
      +                          SD3 = 0); (LATDbits.LATD4 = 0); (LATDbits.LATD5 = 0);
  9373  0017F8  9695               	bcf	149,3,c	;volatile
  9374                           
  9375                           ;LcTLCD.c: 281:  (LATDbits.LATD6 = 1); (LATDbits.LATD6 = 1);
  9376  0017FA  D82F               	call	PL54	;call to abstracted procedure
  9377  0017FC  8C8C               	bsf	140,6,c	;volatile
  9378                           
  9379                           ;LcTLCD.c: 282:   (LATDbits.LATD3 = (ordre & 0x08 ? 1 : 0));
  9380  0017FE  A65F               	btfss	EscriuPrimeraOrdre@ordre^0,3,c
  9381  001800  D003               	goto	u450
  9382  001802  6A5E               	clrf	??_EscriuPrimeraOrdre^0,c
  9383  001804  2A5E               	incf	??_EscriuPrimeraOrdre^0,f,c
  9384  001806  D001               	goto	u468
  9385  001808                     u450:
  9386  001808  6A5E               	clrf	??_EscriuPrimeraOrdre^0,c
  9387  00180A                     u468:
  9388  00180A  465E               	rlncf	??_EscriuPrimeraOrdre^0,f,c
  9389  00180C  D82D               	call	PL68	;call to abstracted procedure
  9390  00180E  0BF7               	andlw	-9
  9391  001810  185E               	xorwf	??_EscriuPrimeraOrdre^0,w,c
  9392  001812  6E8C               	movwf	140,c	;volatile
  9393                           
  9394                           ;LcTLCD.c: 283:   (LATDbits.LATD2 = (ordre & 0x04 ? 1 : 0));
  9395  001814  A45F               	btfss	EscriuPrimeraOrdre@ordre^0,2,c
  9396  001816  D003               	goto	u470
  9397  001818  6A5E               	clrf	??_EscriuPrimeraOrdre^0,c
  9398  00181A  2A5E               	incf	??_EscriuPrimeraOrdre^0,f,c
  9399  00181C  D001               	goto	u488
  9400  00181E                     u470:
  9401  00181E  6A5E               	clrf	??_EscriuPrimeraOrdre^0,c
  9402  001820                     u488:
  9403  001820  D823               	call	PL68	;call to abstracted procedure
  9404  001822  0BFB               	andlw	-5
  9405  001824  185E               	xorwf	??_EscriuPrimeraOrdre^0,w,c
  9406  001826  6E8C               	movwf	140,c	;volatile
  9407                           
  9408                           ;LcTLCD.c: 284:   (LATDbits.LATD1 = (ordre & 0x02 ? 1 : 0));
  9409  001828  A25F               	btfss	EscriuPrimeraOrdre@ordre^0,1,c
  9410  00182A  D003               	goto	u490
  9411  00182C  6A5E               	clrf	??_EscriuPrimeraOrdre^0,c
  9412  00182E  2A5E               	incf	??_EscriuPrimeraOrdre^0,f,c
  9413  001830  D001               	goto	u508
  9414  001832                     u490:
  9415  001832  6A5E               	clrf	??_EscriuPrimeraOrdre^0,c
  9416  001834                     u508:
  9417  001834  465E               	rlncf	??_EscriuPrimeraOrdre^0,f,c
  9418  001836  508C               	movf	140,w,c	;volatile
  9419  001838  185E               	xorwf	??_EscriuPrimeraOrdre^0,w,c
  9420  00183A  0BFD               	andlw	-3
  9421  00183C  185E               	xorwf	??_EscriuPrimeraOrdre^0,w,c
  9422  00183E  6E8C               	movwf	140,c	;volatile
  9423                           
  9424                           ;LcTLCD.c: 285:   (LATDbits.LATD0 = (ordre & 0x01 ? 1 : 0));
  9425  001840  A05F               	btfss	EscriuPrimeraOrdre@ordre^0,0,c
  9426  001842  D003               	goto	u510
  9427  001844  6A5E               	clrf	??_EscriuPrimeraOrdre^0,c
  9428  001846  2A5E               	incf	??_EscriuPrimeraOrdre^0,f,c
  9429  001848  D001               	goto	u528
  9430  00184A                     u510:
  9431  00184A  6A5E               	clrf	??_EscriuPrimeraOrdre^0,c
  9432  00184C                     u528:
  9433  00184C  508C               	movf	140,w,c	;volatile
  9434  00184E  185E               	xorwf	??_EscriuPrimeraOrdre^0,w,c
  9435  001850  0BFE               	andlw	-2
  9436  001852  185E               	xorwf	??_EscriuPrimeraOrdre^0,w,c
  9437  001854  6E8C               	movwf	140,c	;volatile
  9438                           
  9439                           ;LcTLCD.c: 286:  (LATDbits.LATD6 = 0);
  9440  001856  9C8C               	bcf	140,6,c	;volatile
  9441  001858  0012               	return		;funcret
  9442  00185A                     __end_of_EscriuPrimeraOrdre:
  9443                           	callstack 0
  9444  00185A                     PL54:
  9445                           	callstack 23
  9446  00185A  9495               	bcf	149,2,c	;volatile
  9447  00185C  9295               	bcf	149,1,c	;volatile
  9448  00185E  9095               	bcf	149,0,c	;volatile
  9449  001860  988C               	bcf	140,4,c	;volatile
  9450  001862  9A8C               	bcf	140,5,c	;volatile
  9451  001864  8C8C               	bsf	140,6,c	;volatile
  9452  001866  0012               	return	
  9453  001868                     __end_ofPL54:
  9454                           	callstack 0
  9455  001868                     PL68:
  9456                           	callstack 27
  9457  001868  465E               	rlncf	??_EscriuPrimeraOrdre^0,f,c
  9458  00186A  465E               	rlncf	??_EscriuPrimeraOrdre^0,f,c
  9459  00186C  508C               	movf	140,w,c	;volatile
  9460  00186E  185E               	xorwf	??_EscriuPrimeraOrdre^0,w,c
  9461  001870  0012               	return	
  9462  001872                     __end_ofPL68:
  9463                           	callstack 0
  9464                           
  9465 ;; *************** function _CantaIR *****************
  9466 ;; Defined at:
  9467 ;;		line 228 in file "LcTLCD.c"
  9468 ;; Parameters:    Size  Location     Type
  9469 ;;  IR              1    wreg     unsigned char 
  9470 ;; Auto vars:     Size  Location     Type
  9471 ;;  IR              1    7[COMRAM] unsigned char 
  9472 ;; Return value:  Size  Location     Type
  9473 ;;                  1    wreg      void 
  9474 ;; Registers used:
  9475 ;;		wreg, status,2, status,0, cstack
  9476 ;; Tracked objects:
  9477 ;;		On entry : 0/0
  9478 ;;		On exit  : 0/0
  9479 ;;		Unchanged: 0/0
  9480 ;; Data sizes:     COMRAM   BANK0   BANK1
  9481 ;;      Params:         0       0       0
  9482 ;;      Locals:         1       0       0
  9483 ;;      Temps:          0       0       0
  9484 ;;      Totals:         1       0       0
  9485 ;;Total ram usage:        1 bytes
  9486 ;; Hardware stack levels used: 1
  9487 ;; Hardware stack levels required when called: 3
  9488 ;; This function calls:
  9489 ;;		_CantaPartAlta
  9490 ;;		_CantaPartBaixa
  9491 ;; This function is called by:
  9492 ;;		_LcInit
  9493 ;;		_LcClear
  9494 ;;		_LcCursorOn
  9495 ;;		_LcCursorOff
  9496 ;;		_LcGotoXY
  9497 ;;		_menuMotor
  9498 ;; This function uses a non-reentrant model
  9499 ;;
  9500                           
  9501                           	psect	text76
  9502  001F7A                     __ptext76:
  9503                           	callstack 0
  9504  001F7A                     _CantaIR:
  9505                           	callstack 23
  9506                           
  9507                           ;incstack = 0
  9508                           ;CantaIR@IR stored from wreg
  9509  001F7A  6E60               	movwf	CantaIR@IR^0,c
  9510                           
  9511                           ;LcTLCD.c: 229:  (TRISDbits.TRISD0 = TRISDbits.TRISD1 = TRISDbits.TRISD2 = TRISDbits.TRI
      +                          SD3 = 0);
  9512  001F7C  9695               	bcf	149,3,c	;volatile
  9513                           
  9514                           ;LcTLCD.c: 230:  (LATDbits.LATD4 = 0);
  9515                           
  9516                           ;LcTLCD.c: 231:  (LATDbits.LATD5 = 0);
  9517                           
  9518                           ;LcTLCD.c: 232:  (LATDbits.LATD6 = 1);
  9519  001F7E  EC2D  F00C         	call	PL54	;call to abstracted procedure
  9520                           
  9521                           ;LcTLCD.c: 233:  CantaPartAlta(IR);
  9522  001F82  5060               	movf	CantaIR@IR^0,w,c
  9523  001F84  EC0E  F00D         	call	_CantaPartAlta
  9524                           
  9525                           ;LcTLCD.c: 234:  (LATDbits.LATD6 = 1);
  9526                           
  9527                           ;LcTLCD.c: 235:  (LATDbits.LATD6 = 0);
  9528                           
  9529                           ;LcTLCD.c: 236:  (LATDbits.LATD6 = 0);
  9530                           
  9531                           ;LcTLCD.c: 237:  (LATDbits.LATD6 = 1);
  9532  001F88  EC3B  F00E         	call	PL74	;call to abstracted procedure
  9533                           
  9534                           ;LcTLCD.c: 238:  CantaPartBaixa(IR);
  9535  001F8C  5060               	movf	CantaIR@IR^0,w,c
  9536  001F8E  ECDB  F00C         	call	_CantaPartBaixa
  9537                           
  9538                           ;LcTLCD.c: 239:  (LATDbits.LATD6 = 1);
  9539                           
  9540                           ;LcTLCD.c: 240:  (LATDbits.LATD6 = 0);
  9541                           
  9542                           ;LcTLCD.c: 241:  (TRISDbits.TRISD0 = TRISDbits.TRISD1 = TRISDbits.TRISD2 = TRISDbits.TRI
      +                          SD3 = 1);
  9543  001F92  EF34  F00E         	goto	PL42	;call to abstracted procedure
  9544  001F96                     __end_of_CantaIR:
  9545                           	callstack 0
  9546                           
  9547 ;; *************** function _CantaPartBaixa *****************
  9548 ;; Defined at:
  9549 ;;		line 221 in file "LcTLCD.c"
  9550 ;; Parameters:    Size  Location     Type
  9551 ;;  c               1    wreg     unsigned char 
  9552 ;; Auto vars:     Size  Location     Type
  9553 ;;  c               1    6[COMRAM] unsigned char 
  9554 ;; Return value:  Size  Location     Type
  9555 ;;                  1    wreg      void 
  9556 ;; Registers used:
  9557 ;;		wreg, status,2, status,0
  9558 ;; Tracked objects:
  9559 ;;		On entry : 0/0
  9560 ;;		On exit  : 0/0
  9561 ;;		Unchanged: 0/0
  9562 ;; Data sizes:     COMRAM   BANK0   BANK1
  9563 ;;      Params:         0       0       0
  9564 ;;      Locals:         1       0       0
  9565 ;;      Temps:          1       0       0
  9566 ;;      Totals:         2       0       0
  9567 ;;Total ram usage:        2 bytes
  9568 ;; Hardware stack levels used: 1
  9569 ;; Hardware stack levels required when called: 2
  9570 ;; This function calls:
  9571 ;;		Nothing
  9572 ;; This function is called by:
  9573 ;;		_CantaIR
  9574 ;;		_CantaData
  9575 ;; This function uses a non-reentrant model
  9576 ;;
  9577                           
  9578                           	psect	text77
  9579  0019B6                     __ptext77:
  9580                           	callstack 0
  9581  0019B6                     _CantaPartBaixa:
  9582                           	callstack 23
  9583                           
  9584                           ;incstack = 0
  9585                           ;CantaPartBaixa@c stored from wreg
  9586  0019B6  6E5F               	movwf	CantaPartBaixa@c^0,c
  9587                           
  9588                           ;LcTLCD.c: 222:   (LATDbits.LATD3 = (c & 0x08 ? 1 : 0));
  9589  0019B8  A65F               	btfss	CantaPartBaixa@c^0,3,c
  9590  0019BA  D003               	goto	u5160
  9591  0019BC  6A5E               	clrf	??_CantaPartBaixa^0,c
  9592  0019BE  2A5E               	incf	??_CantaPartBaixa^0,f,c
  9593  0019C0  D001               	goto	u5178
  9594  0019C2                     u5160:
  9595  0019C2  6A5E               	clrf	??_CantaPartBaixa^0,c
  9596  0019C4                     u5178:
  9597  0019C4  465E               	rlncf	??_CantaPartBaixa^0,f,c
  9598  0019C6  D825               	call	PL76	;call to abstracted procedure
  9599  0019C8  0BF7               	andlw	-9
  9600  0019CA  185E               	xorwf	??_CantaPartBaixa^0,w,c
  9601  0019CC  6E8C               	movwf	140,c	;volatile
  9602                           
  9603                           ;LcTLCD.c: 223:   (LATDbits.LATD2 = (c & 0x04 ? 1 : 0));
  9604  0019CE  A45F               	btfss	CantaPartBaixa@c^0,2,c
  9605  0019D0  D003               	goto	u5180
  9606  0019D2  6A5E               	clrf	??_CantaPartBaixa^0,c
  9607  0019D4  2A5E               	incf	??_CantaPartBaixa^0,f,c
  9608  0019D6  D001               	goto	u5198
  9609  0019D8                     u5180:
  9610  0019D8  6A5E               	clrf	??_CantaPartBaixa^0,c
  9611  0019DA                     u5198:
  9612  0019DA  D81B               	call	PL76	;call to abstracted procedure
  9613  0019DC  0BFB               	andlw	-5
  9614  0019DE  185E               	xorwf	??_CantaPartBaixa^0,w,c
  9615  0019E0  6E8C               	movwf	140,c	;volatile
  9616                           
  9617                           ;LcTLCD.c: 224:   (LATDbits.LATD1 = (c & 0x02 ? 1 : 0));
  9618  0019E2  A25F               	btfss	CantaPartBaixa@c^0,1,c
  9619  0019E4  D003               	goto	u5200
  9620  0019E6  6A5E               	clrf	??_CantaPartBaixa^0,c
  9621  0019E8  2A5E               	incf	??_CantaPartBaixa^0,f,c
  9622  0019EA  D001               	goto	u5218
  9623  0019EC                     u5200:
  9624  0019EC  6A5E               	clrf	??_CantaPartBaixa^0,c
  9625  0019EE                     u5218:
  9626  0019EE  465E               	rlncf	??_CantaPartBaixa^0,f,c
  9627  0019F0  508C               	movf	140,w,c	;volatile
  9628  0019F2  185E               	xorwf	??_CantaPartBaixa^0,w,c
  9629  0019F4  0BFD               	andlw	-3
  9630  0019F6  185E               	xorwf	??_CantaPartBaixa^0,w,c
  9631  0019F8  6E8C               	movwf	140,c	;volatile
  9632                           
  9633                           ;LcTLCD.c: 225:   (LATDbits.LATD0 = (c & 0x01 ? 1 : 0));
  9634  0019FA  A05F               	btfss	CantaPartBaixa@c^0,0,c
  9635  0019FC  D003               	goto	u5220
  9636  0019FE  6A5E               	clrf	??_CantaPartBaixa^0,c
  9637  001A00  2A5E               	incf	??_CantaPartBaixa^0,f,c
  9638  001A02  D001               	goto	u5238
  9639  001A04                     u5220:
  9640  001A04  6A5E               	clrf	??_CantaPartBaixa^0,c
  9641  001A06                     u5238:
  9642  001A06  508C               	movf	140,w,c	;volatile
  9643  001A08  185E               	xorwf	??_CantaPartBaixa^0,w,c
  9644  001A0A  0BFE               	andlw	-2
  9645  001A0C  185E               	xorwf	??_CantaPartBaixa^0,w,c
  9646  001A0E  6E8C               	movwf	140,c	;volatile
  9647  001A10  0012               	return		;funcret
  9648  001A12                     __end_of_CantaPartBaixa:
  9649                           	callstack 0
  9650  001A12                     PL76:
  9651                           	callstack 23
  9652  001A12  465E               	rlncf	??_CantaPartBaixa^0,f,c
  9653  001A14  465E               	rlncf	??_CantaPartBaixa^0,f,c
  9654  001A16  508C               	movf	140,w,c	;volatile
  9655  001A18  185E               	xorwf	??_CantaPartBaixa^0,w,c
  9656  001A1A  0012               	return	
  9657  001A1C                     __end_ofPL76:
  9658                           	callstack 0
  9659                           
  9660 ;; *************** function _CantaPartAlta *****************
  9661 ;; Defined at:
  9662 ;;		line 214 in file "LcTLCD.c"
  9663 ;; Parameters:    Size  Location     Type
  9664 ;;  c               1    wreg     unsigned char 
  9665 ;; Auto vars:     Size  Location     Type
  9666 ;;  c               1    6[COMRAM] unsigned char 
  9667 ;; Return value:  Size  Location     Type
  9668 ;;                  1    wreg      void 
  9669 ;; Registers used:
  9670 ;;		wreg, status,2, status,0
  9671 ;; Tracked objects:
  9672 ;;		On entry : 0/0
  9673 ;;		On exit  : 0/0
  9674 ;;		Unchanged: 0/0
  9675 ;; Data sizes:     COMRAM   BANK0   BANK1
  9676 ;;      Params:         0       0       0
  9677 ;;      Locals:         1       0       0
  9678 ;;      Temps:          1       0       0
  9679 ;;      Totals:         2       0       0
  9680 ;;Total ram usage:        2 bytes
  9681 ;; Hardware stack levels used: 1
  9682 ;; Hardware stack levels required when called: 2
  9683 ;; This function calls:
  9684 ;;		Nothing
  9685 ;; This function is called by:
  9686 ;;		_CantaIR
  9687 ;;		_CantaData
  9688 ;; This function uses a non-reentrant model
  9689 ;;
  9690                           
  9691                           	psect	text78
  9692  001A1C                     __ptext78:
  9693                           	callstack 0
  9694  001A1C                     _CantaPartAlta:
  9695                           	callstack 23
  9696                           
  9697                           ;incstack = 0
  9698                           ;CantaPartAlta@c stored from wreg
  9699  001A1C  6E5F               	movwf	CantaPartAlta@c^0,c
  9700                           
  9701                           ;LcTLCD.c: 215:   (LATDbits.LATD3 = (c & 0x80 ? 1 : 0));
  9702  001A1E  AE5F               	btfss	CantaPartAlta@c^0,7,c
  9703  001A20  D003               	goto	u5080
  9704  001A22  6A5E               	clrf	??_CantaPartAlta^0,c
  9705  001A24  2A5E               	incf	??_CantaPartAlta^0,f,c
  9706  001A26  D001               	goto	u5098
  9707  001A28                     u5080:
  9708  001A28  6A5E               	clrf	??_CantaPartAlta^0,c
  9709  001A2A                     u5098:
  9710  001A2A  465E               	rlncf	??_CantaPartAlta^0,f,c
  9711  001A2C  D825               	call	PL70	;call to abstracted procedure
  9712  001A2E  0BF7               	andlw	-9
  9713  001A30  185E               	xorwf	??_CantaPartAlta^0,w,c
  9714  001A32  6E8C               	movwf	140,c	;volatile
  9715                           
  9716                           ;LcTLCD.c: 216:   (LATDbits.LATD2 = (c & 0x40 ? 1 : 0));
  9717  001A34  AC5F               	btfss	CantaPartAlta@c^0,6,c
  9718  001A36  D003               	goto	u5100
  9719  001A38  6A5E               	clrf	??_CantaPartAlta^0,c
  9720  001A3A  2A5E               	incf	??_CantaPartAlta^0,f,c
  9721  001A3C  D001               	goto	u5118
  9722  001A3E                     u5100:
  9723  001A3E  6A5E               	clrf	??_CantaPartAlta^0,c
  9724  001A40                     u5118:
  9725  001A40  D81B               	call	PL70	;call to abstracted procedure
  9726  001A42  0BFB               	andlw	-5
  9727  001A44  185E               	xorwf	??_CantaPartAlta^0,w,c
  9728  001A46  6E8C               	movwf	140,c	;volatile
  9729                           
  9730                           ;LcTLCD.c: 217:   (LATDbits.LATD1 = (c & 0x20 ? 1 : 0));
  9731  001A48  AA5F               	btfss	CantaPartAlta@c^0,5,c
  9732  001A4A  D003               	goto	u5120
  9733  001A4C  6A5E               	clrf	??_CantaPartAlta^0,c
  9734  001A4E  2A5E               	incf	??_CantaPartAlta^0,f,c
  9735  001A50  D001               	goto	u5138
  9736  001A52                     u5120:
  9737  001A52  6A5E               	clrf	??_CantaPartAlta^0,c
  9738  001A54                     u5138:
  9739  001A54  465E               	rlncf	??_CantaPartAlta^0,f,c
  9740  001A56  508C               	movf	140,w,c	;volatile
  9741  001A58  185E               	xorwf	??_CantaPartAlta^0,w,c
  9742  001A5A  0BFD               	andlw	-3
  9743  001A5C  185E               	xorwf	??_CantaPartAlta^0,w,c
  9744  001A5E  6E8C               	movwf	140,c	;volatile
  9745                           
  9746                           ;LcTLCD.c: 218:   (LATDbits.LATD0 = (c & 0x10 ? 1 : 0));
  9747  001A60  A85F               	btfss	CantaPartAlta@c^0,4,c
  9748  001A62  D003               	goto	u5140
  9749  001A64  6A5E               	clrf	??_CantaPartAlta^0,c
  9750  001A66  2A5E               	incf	??_CantaPartAlta^0,f,c
  9751  001A68  D001               	goto	u5158
  9752  001A6A                     u5140:
  9753  001A6A  6A5E               	clrf	??_CantaPartAlta^0,c
  9754  001A6C                     u5158:
  9755  001A6C  508C               	movf	140,w,c	;volatile
  9756  001A6E  185E               	xorwf	??_CantaPartAlta^0,w,c
  9757  001A70  0BFE               	andlw	-2
  9758  001A72  185E               	xorwf	??_CantaPartAlta^0,w,c
  9759  001A74  6E8C               	movwf	140,c	;volatile
  9760  001A76  0012               	return		;funcret
  9761  001A78                     __end_of_CantaPartAlta:
  9762                           	callstack 0
  9763  001A78                     PL70:
  9764                           	callstack 23
  9765  001A78  465E               	rlncf	??_CantaPartAlta^0,f,c
  9766  001A7A  465E               	rlncf	??_CantaPartAlta^0,f,c
  9767  001A7C  508C               	movf	140,w,c	;volatile
  9768  001A7E  185E               	xorwf	??_CantaPartAlta^0,w,c
  9769  001A80  0012               	return	
  9770  001A82                     __end_ofPL70:
  9771                           	callstack 0
  9772                           
  9773 ;; *************** function _KeypadMotor *****************
  9774 ;; Defined at:
  9775 ;;		line 46 in file "keypad.c"
  9776 ;; Parameters:    Size  Location     Type
  9777 ;;		None
  9778 ;; Auto vars:     Size  Location     Type
  9779 ;;		None
  9780 ;; Return value:  Size  Location     Type
  9781 ;;                  1    wreg      void 
  9782 ;; Registers used:
  9783 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9784 ;; Tracked objects:
  9785 ;;		On entry : 0/0
  9786 ;;		On exit  : 0/0
  9787 ;;		Unchanged: 0/0
  9788 ;; Data sizes:     COMRAM   BANK0   BANK1
  9789 ;;      Params:         0       0       0
  9790 ;;      Locals:         0       0       0
  9791 ;;      Temps:          2       0       0
  9792 ;;      Totals:         2       0       0
  9793 ;;Total ram usage:        2 bytes
  9794 ;; Hardware stack levels used: 1
  9795 ;; Hardware stack levels required when called: 3
  9796 ;; This function calls:
  9797 ;;		_TiGetTics
  9798 ;;		_TiResetTics
  9799 ;; This function is called by:
  9800 ;;		_main
  9801 ;; This function uses a non-reentrant model
  9802 ;;
  9803                           
  9804                           	psect	text79
  9805  0011FE                     __ptext79:
  9806                           	callstack 0
  9807  0011FE                     _KeypadMotor:
  9808                           	callstack 27
  9809                           
  9810                           ;keypad.c: 48:     switch (state){
  9811                           
  9812                           ;incstack = 0
  9813  0011FE  D070               	goto	l6321
  9814  001200                     l148:
  9815                           
  9816                           ;keypad.c: 51:             if (!!(PORTBbits.RB0 && PORTBbits.RB1 && PORTBbits.RB2)){
  9817  001200  B081               	btfsc	129,0,c	;volatile
  9818  001202  A281               	btfss	129,1,c	;volatile
  9819  001204  D00A               	goto	l6249
  9820  001206  A481               	btfss	129,2,c	;volatile
  9821  001208  D008               	goto	l6249
  9822                           
  9823                           ;keypad.c: 52:                 LATBbits.LATB3=0;
  9824  00120A  968A               	bcf	138,3,c	;volatile
  9825                           
  9826                           ;keypad.c: 53:                 LATBbits.LATB4=1;
  9827  00120C  888A               	bsf	138,4,c	;volatile
  9828                           
  9829                           ;keypad.c: 54:                 LATBbits.LATB5=1;
  9830  00120E  8A8A               	bsf	138,5,c	;volatile
  9831                           
  9832                           ;keypad.c: 55:                 LATBbits.LATB6=1;
  9833  001210  8C8A               	bsf	138,6,c	;volatile
  9834                           
  9835                           ;keypad.c: 56:                 state=1;
  9836  001212  0E01               	movlw	1
  9837  001214  6E3D               	movwf	_state^0,c
  9838                           
  9839                           ;keypad.c: 57:                 row=0;
  9840  001216  6A45               	clrf	_row^0,c
  9841                           
  9842                           ;keypad.c: 58:             }else{
  9843  001218  0012               	return	
  9844  00121A                     l6249:
  9845                           
  9846                           ;keypad.c: 59:                 state=4;
  9847  00121A  0E04               	movlw	4
  9848  00121C  6E3D               	movwf	_state^0,c
  9849  00121E  0C04               	retlw	4
  9850  001220                     l152:
  9851                           
  9852                           ;keypad.c: 63:            if (!!(PORTBbits.RB0 && PORTBbits.RB1 && PORTBbits.RB2)){
  9853  001220  B081               	btfsc	129,0,c	;volatile
  9854  001222  A281               	btfss	129,1,c	;volatile
  9855  001224  D7FA               	goto	l6249
  9856  001226  A481               	btfss	129,2,c	;volatile
  9857  001228  D7F8               	goto	l6249
  9858                           
  9859                           ;keypad.c: 64:                 LATBbits.LATB3=1;
  9860  00122A  868A               	bsf	138,3,c	;volatile
  9861                           
  9862                           ;keypad.c: 65:                 LATBbits.LATB4=0;
  9863  00122C  988A               	bcf	138,4,c	;volatile
  9864                           
  9865                           ;keypad.c: 66:                 LATBbits.LATB5=1;
  9866  00122E  8A8A               	bsf	138,5,c	;volatile
  9867                           
  9868                           ;keypad.c: 67:                 LATBbits.LATB6=1;
  9869  001230  8C8A               	bsf	138,6,c	;volatile
  9870                           
  9871                           ;keypad.c: 68:                 state=2;
  9872  001232  0E02               	movlw	2
  9873  001234  6E3D               	movwf	_state^0,c
  9874                           
  9875                           ;keypad.c: 69:                 row=1;
  9876  001236  0E01               	movlw	1
  9877  001238  6E45               	movwf	_row^0,c
  9878                           
  9879                           ;keypad.c: 71:             }else{
  9880  00123A  0C01               	retlw	1
  9881  00123C                     l155:
  9882                           
  9883                           ;keypad.c: 76:             if (!!(PORTBbits.RB0 && PORTBbits.RB1 && PORTBbits.RB2)){
  9884  00123C  B081               	btfsc	129,0,c	;volatile
  9885  00123E  A281               	btfss	129,1,c	;volatile
  9886  001240  D7EC               	goto	l6249
  9887  001242  A481               	btfss	129,2,c	;volatile
  9888  001244  D7EA               	goto	l6249
  9889                           
  9890                           ;keypad.c: 77:                 LATBbits.LATB3=1;
  9891  001246  868A               	bsf	138,3,c	;volatile
  9892                           
  9893                           ;keypad.c: 78:                 LATBbits.LATB4=1;
  9894  001248  888A               	bsf	138,4,c	;volatile
  9895                           
  9896                           ;keypad.c: 79:                 LATBbits.LATB5=0;
  9897  00124A  9A8A               	bcf	138,5,c	;volatile
  9898                           
  9899                           ;keypad.c: 80:                 LATBbits.LATB6=1;
  9900  00124C  8C8A               	bsf	138,6,c	;volatile
  9901                           
  9902                           ;keypad.c: 81:                 state=3;
  9903  00124E  0E03               	movlw	3
  9904  001250  6E3D               	movwf	_state^0,c
  9905                           
  9906                           ;keypad.c: 82:                 row=2;
  9907  001252  0E02               	movlw	2
  9908  001254  6E45               	movwf	_row^0,c
  9909                           
  9910                           ;keypad.c: 83:             }else{
  9911  001256  0C02               	retlw	2
  9912  001258                     l158:
  9913                           
  9914                           ;keypad.c: 88:             if (!!(PORTBbits.RB0 && PORTBbits.RB1 && PORTBbits.RB2)){
  9915  001258  B081               	btfsc	129,0,c	;volatile
  9916  00125A  A281               	btfss	129,1,c	;volatile
  9917  00125C  D7DE               	goto	l6249
  9918  00125E  A481               	btfss	129,2,c	;volatile
  9919  001260  D7DC               	goto	l6249
  9920                           
  9921                           ;keypad.c: 89:                 LATBbits.LATB3=1;
  9922  001262  868A               	bsf	138,3,c	;volatile
  9923                           
  9924                           ;keypad.c: 90:                 LATBbits.LATB4=1;
  9925  001264  888A               	bsf	138,4,c	;volatile
  9926                           
  9927                           ;keypad.c: 91:                 LATBbits.LATB5=1;
  9928  001266  8A8A               	bsf	138,5,c	;volatile
  9929                           
  9930                           ;keypad.c: 92:                 LATBbits.LATB6=0;
  9931  001268  9C8A               	bcf	138,6,c	;volatile
  9932                           
  9933                           ;keypad.c: 93:                 row=3;
  9934  00126A  0E03               	movlw	3
  9935  00126C  6E45               	movwf	_row^0,c
  9936  00126E                     l6279:
  9937                           
  9938                           ;keypad.c: 94:                 state=0;
  9939  00126E  6A3D               	clrf	_state^0,c
  9940                           
  9941                           ;keypad.c: 95:             }else{
  9942  001270  0012               	return	
  9943  001272                     l6283:
  9944                           
  9945                           ;keypad.c: 100:             state=5;
  9946  001272  0E05               	movlw	5
  9947  001274  6E3D               	movwf	_state^0,c
  9948                           
  9949                           ;keypad.c: 101:             TiResetTics(timerBounces);
  9950  001276  5044               	movf	_timerBounces^0,w,c
  9951  001278  EFAD  F00F         	goto	_TiResetTics
  9952  00127C                     l6287:
  9953                           
  9954                           ;keypad.c: 104:             if (TiGetTics(timerBounces) >= 25){
  9955  00127C  5044               	movf	_timerBounces^0,w,c
  9956  00127E  EC24  F00F         	call	_TiGetTics
  9957  001282  BE5F               	btfsc	(?_TiGetTics+1)^0,7,c
  9958  001284  0012               	return	
  9959  001286  505F               	movf	(?_TiGetTics+1)^0,w,c
  9960  001288  E104               	bnz	u5740
  9961  00128A  0E19               	movlw	25
  9962  00128C  5C5E               	subwf	?_TiGetTics^0,w,c
  9963  00128E  A0D8               	btfss	status,0,c
  9964  001290  0012               	return	
  9965  001292                     u5740:
  9966                           
  9967                           ;keypad.c: 105:                 if (!!(PORTBbits.RB0 && PORTBbits.RB1 && PORTBbits.RB2))
      +                          {
  9968  001292  B081               	btfsc	129,0,c	;volatile
  9969  001294  A281               	btfss	129,1,c	;volatile
  9970  001296  D002               	goto	l6297
  9971  001298  B481               	btfsc	129,2,c	;volatile
  9972  00129A  D7E9               	goto	l6279
  9973  00129C                     l6297:
  9974                           
  9975                           ;keypad.c: 108:                     pressed = 1;
  9976  00129C  0E01               	movlw	1
  9977  00129E  6E40               	movwf	_pressed^0,c
  9978                           
  9979                           ;keypad.c: 109:                     state = 6;
  9980  0012A0  D036               	goto	PL98	;call to abstracted procedure
  9981  0012A2                     l166:
  9982                           
  9983                           ;keypad.c: 114:             if (!!(PORTBbits.RB0 && PORTBbits.RB1 && PORTBbits.RB2)){
  9984  0012A2  B081               	btfsc	129,0,c	;volatile
  9985  0012A4  A281               	btfss	129,1,c	;volatile
  9986  0012A6  0012               	return	
  9987  0012A8  A481               	btfss	129,2,c	;volatile
  9988  0012AA  0012               	return	
  9989                           
  9990                           ;keypad.c: 115:                 TiResetTics(timerBounces);
  9991  0012AC  5044               	movf	_timerBounces^0,w,c
  9992  0012AE  ECAD  F00F         	call	_TiResetTics
  9993                           
  9994                           ;keypad.c: 116:                 state = 7;
  9995  0012B2  0E07               	movlw	7
  9996  0012B4  6E3D               	movwf	_state^0,c
  9997  0012B6  0C07               	retlw	7
  9998  0012B8                     l6307:
  9999                           
 10000                           ;keypad.c: 120:             if (TiGetTics(timerBounces) >= 25){
 10001  0012B8  5044               	movf	_timerBounces^0,w,c
 10002  0012BA  EC24  F00F         	call	_TiGetTics
 10003  0012BE  BE5F               	btfsc	(?_TiGetTics+1)^0,7,c
 10004  0012C0  0012               	return	
 10005  0012C2  505F               	movf	(?_TiGetTics+1)^0,w,c
 10006  0012C4  E104               	bnz	u5810
 10007  0012C6  0E19               	movlw	25
 10008  0012C8  5C5E               	subwf	?_TiGetTics^0,w,c
 10009  0012CA  A0D8               	btfss	status,0,c
 10010  0012CC  0012               	return	
 10011  0012CE                     u5810:
 10012                           
 10013                           ;keypad.c: 121:                 if (!!(PORTBbits.RB0 && PORTBbits.RB1 && PORTBbits.RB2))
      +                          {
 10014  0012CE  B081               	btfsc	129,0,c	;volatile
 10015  0012D0  A281               	btfss	129,1,c	;volatile
 10016  0012D2  D01D               	goto	PL98
 10017  0012D4  A481               	btfss	129,2,c	;volatile
 10018  0012D6  D01B               	goto	PL98
 10019                           
 10020                           ;keypad.c: 122:                     pressed = 0;
 10021  0012D8  6A40               	clrf	_pressed^0,c
 10022                           
 10023                           ;keypad.c: 123:                     state = 0;
 10024  0012DA  6A3D               	clrf	_state^0,c
 10025                           
 10026                           ;keypad.c: 124:                 } else {
 10027  0012DC  0012               	return	
 10028  0012DE                     l6317:
 10029                           
 10030                           ;keypad.c: 125:                     state = 6;
 10031  0012DE  D017               	goto	PL98	;call to abstracted procedure
 10032  0012E0                     l6321:
 10033  0012E0  503D               	movf	_state^0,w,c
 10034  0012E2  6E65               	movwf	??_KeypadMotor^0,c
 10035  0012E4  6A66               	clrf	(??_KeypadMotor+1)^0,c
 10036                           
 10037                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 10038                           ; Switch size 1, requested type "space"
 10039                           ; Number of cases is 1, Range of values is 0 to 0
 10040                           ; switch strategies available:
 10041                           ; Name         Instructions Cycles
 10042                           ; simple_byte            4     3 (average)
 10043                           ;	Chosen strategy is simple_byte
 10044  0012E6  5066               	movf	(??_KeypadMotor+1)^0,w,c
 10045  0012E8  A4D8               	btfss	status,2,c
 10046  0012EA  0012               	return	
 10047                           
 10048                           ; Switch size 1, requested type "space"
 10049                           ; Number of cases is 8, Range of values is 0 to 7
 10050                           ; switch strategies available:
 10051                           ; Name         Instructions Cycles
 10052                           ; simple_byte           25    13 (average)
 10053                           ;	Chosen strategy is simple_byte
 10054  0012EC  5065               	movf	??_KeypadMotor^0,w,c
 10055  0012EE  E088               	bz	l148
 10056  0012F0  0A01               	xorlw	1	; case 1
 10057  0012F2  E096               	bz	l152
 10058  0012F4  0A03               	xorlw	3	; case 2
 10059  0012F6  E0A2               	bz	l155
 10060  0012F8  0A01               	xorlw	1	; case 3
 10061  0012FA  E0AE               	bz	l158
 10062  0012FC  0A07               	xorlw	7	; case 4
 10063  0012FE  E0B9               	bz	l6283
 10064  001300  0A01               	xorlw	1	; case 5
 10065  001302  E0BC               	bz	l6287
 10066  001304  0A03               	xorlw	3	; case 6
 10067  001306  E0CD               	bz	l166
 10068  001308  0A01               	xorlw	1	; case 7
 10069  00130A  E0D6               	bz	l6307
 10070  00130C  0012               	return		;funcret
 10071  00130E                     __end_of_KeypadMotor:
 10072                           	callstack 0
 10073  00130E                     PL98:
 10074                           	callstack 27
 10075  00130E  0E06               	movlw	6
 10076  001310  6E3D               	movwf	_state^0,c
 10077  001312  0C06               	retlw	6
 10078  001314                     __end_ofPL98:
 10079                           	callstack 0
 10080                           
 10081 ;; *************** function _TiResetTics *****************
 10082 ;; Defined at:
 10083 ;;		line 59 in file "TTimer.c"
 10084 ;; Parameters:    Size  Location     Type
 10085 ;;  Handle          1    wreg     unsigned char 
 10086 ;; Auto vars:     Size  Location     Type
 10087 ;;  Handle          1    5[COMRAM] unsigned char 
 10088 ;; Return value:  Size  Location     Type
 10089 ;;                  1    wreg      void 
 10090 ;; Registers used:
 10091 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 10092 ;; Tracked objects:
 10093 ;;		On entry : 0/0
 10094 ;;		On exit  : 0/0
 10095 ;;		Unchanged: 0/0
 10096 ;; Data sizes:     COMRAM   BANK0   BANK1
 10097 ;;      Params:         0       0       0
 10098 ;;      Locals:         1       0       0
 10099 ;;      Temps:          0       0       0
 10100 ;;      Totals:         1       0       0
 10101 ;;Total ram usage:        1 bytes
 10102 ;; Hardware stack levels used: 1
 10103 ;; Hardware stack levels required when called: 2
 10104 ;; This function calls:
 10105 ;;		Nothing
 10106 ;; This function is called by:
 10107 ;;		_KeypadMotor
 10108 ;;		_SMSMotor
 10109 ;;		_KeSetMode
 10110 ;;		_Espera
 10111 ;;		_WaitForBusy
 10112 ;;		_audioMotor
 10113 ;;		_startSong
 10114 ;;		_menuMotor
 10115 ;;		_btMotor
 10116 ;;		_timeMotor
 10117 ;;		_startTimer
 10118 ;; This function uses a non-reentrant model
 10119 ;;
 10120                           
 10121                           	psect	text80
 10122  001F5A                     __ptext80:
 10123                           	callstack 0
 10124  001F5A                     _TiResetTics:
 10125                           	callstack 25
 10126                           
 10127                           ;incstack = 0
 10128                           ;TiResetTics@Handle stored from wreg
 10129  001F5A  6E5E               	movwf	TiResetTics@Handle^0,c
 10130                           
 10131                           ;TTimer.c: 63:     s_Timers[Handle].h_initialTics=h_Tics;
 10132  001F5C  505E               	movf	TiResetTics@Handle^0,w,c
 10133  001F5E  D805               	call	PL26	;call to abstracted procedure
 10134  001F60  C00F  FFDE         	movff	_h_Tics,postinc2
 10135  001F64  C010  FFDD         	movff	_h_Tics+1,postdec2
 10136  001F68  0012               	return		;funcret
 10137  001F6A                     __end_of_TiResetTics:
 10138                           	callstack 0
 10139  001F6A                     PL26:
 10140                           	callstack 23
 10141  001F6A  0D03               	mullw	3
 10142  001F6C  0E90               	movlw	low _s_Timers
 10143  001F6E  24F3               	addwf	243,w,c
 10144  001F70  6ED9               	movwf	fsr2l,c
 10145  001F72  0E01               	movlw	high _s_Timers
 10146  001F74  20F4               	addwfc	prodh,w,c
 10147  001F76  6EDA               	movwf	fsr2h,c
 10148  001F78  0012               	return	
 10149  001F7A                     __end_ofPL26:
 10150                           	callstack 0
 10151                           
 10152 ;; *************** function _TiGetTics *****************
 10153 ;; Defined at:
 10154 ;;		line 65 in file "TTimer.c"
 10155 ;; Parameters:    Size  Location     Type
 10156 ;;  Handle          1    wreg     unsigned char 
 10157 ;; Auto vars:     Size  Location     Type
 10158 ;;  Handle          1    9[COMRAM] unsigned char 
 10159 ;;  actual          2   10[COMRAM] volatile unsigned int 
 10160 ;; Return value:  Size  Location     Type
 10161 ;;                  2    5[COMRAM] int 
 10162 ;; Registers used:
 10163 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 10164 ;; Tracked objects:
 10165 ;;		On entry : 0/0
 10166 ;;		On exit  : 0/0
 10167 ;;		Unchanged: 0/0
 10168 ;; Data sizes:     COMRAM   BANK0   BANK1
 10169 ;;      Params:         2       0       0
 10170 ;;      Locals:         3       0       0
 10171 ;;      Temps:          2       0       0
 10172 ;;      Totals:         7       0       0
 10173 ;;Total ram usage:        7 bytes
 10174 ;; Hardware stack levels used: 1
 10175 ;; Hardware stack levels required when called: 2
 10176 ;; This function calls:
 10177 ;;		Nothing
 10178 ;; This function is called by:
 10179 ;;		_KeypadMotor
 10180 ;;		_SMSMotor
 10181 ;;		_Espera
 10182 ;;		_WaitForBusy
 10183 ;;		_audioMotor
 10184 ;;		_menuMotor
 10185 ;;		_btMotor
 10186 ;;		_timeMotor
 10187 ;; This function uses a non-reentrant model
 10188 ;;
 10189                           
 10190                           	psect	text81
 10191  001E48                     __ptext81:
 10192                           	callstack 0
 10193  001E48                     _TiGetTics:
 10194                           	callstack 24
 10195                           
 10196                           ;incstack = 0
 10197                           ;TiGetTics@Handle stored from wreg
 10198  001E48  6E62               	movwf	TiGetTics@Handle^0,c
 10199                           
 10200                           ;TTimer.c: 69:     volatile unsigned int actual;;TTimer.c: 70:     actual=h_Tics;
 10201  001E4A  C00F  F063         	movff	_h_Tics,TiGetTics@actual	;volatile
 10202  001E4E  C010  F064         	movff	_h_Tics+1,TiGetTics@actual+1	;volatile
 10203                           
 10204                           ;TTimer.c: 71:     return (actual-(s_Timers[Handle].h_initialTics));
 10205  001E52  5062               	movf	TiGetTics@Handle^0,w,c
 10206  001E54  ECB5  F00F         	call	PL26	;call to abstracted procedure
 10207  001E58  CFDE F060          	movff	postinc2,??_TiGetTics
 10208  001E5C  CFDD F061          	movff	postdec2,??_TiGetTics+1
 10209  001E60  5060               	movf	??_TiGetTics^0,w,c
 10210  001E62  5C63               	subwf	TiGetTics@actual^0,w,c	;volatile
 10211  001E64  6E5E               	movwf	?_TiGetTics^0,c
 10212  001E66  5061               	movf	(??_TiGetTics+1)^0,w,c
 10213  001E68  5864               	subwfb	(TiGetTics@actual+1)^0,w,c	;volatile
 10214  001E6A  6E5F               	movwf	(?_TiGetTics+1)^0,c
 10215  001E6C  0012               	return		;funcret
 10216  001E6E                     __end_of_TiGetTics:
 10217                           	callstack 0
 10218                           
 10219 ;; *************** function _RSI_High *****************
 10220 ;; Defined at:
 10221 ;;		line 32 in file "main.c"
 10222 ;; Parameters:    Size  Location     Type
 10223 ;;		None
 10224 ;; Auto vars:     Size  Location     Type
 10225 ;;		None
 10226 ;; Return value:  Size  Location     Type
 10227 ;;                  1    wreg      void 
 10228 ;; Registers used:
 10229 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 10230 ;; Tracked objects:
 10231 ;;		On entry : 0/0
 10232 ;;		On exit  : 0/0
 10233 ;;		Unchanged: 0/0
 10234 ;; Data sizes:     COMRAM   BANK0   BANK1
 10235 ;;      Params:         0       0       0
 10236 ;;      Locals:         0       0       0
 10237 ;;      Temps:          4       0       0
 10238 ;;      Totals:         4       0       0
 10239 ;;Total ram usage:        4 bytes
 10240 ;; Hardware stack levels used: 1
 10241 ;; Hardware stack levels required when called: 1
 10242 ;; This function calls:
 10243 ;;		__TiRSITimer
 10244 ;; This function is called by:
 10245 ;;		Interrupt level 2
 10246 ;; This function uses a non-reentrant model
 10247 ;;
 10248                           
 10249                           	psect	intcode
 10250  000008                     __pintcode:
 10251                           	callstack 0
 10252  000008                     _RSI_High:
 10253                           	callstack 23
 10254                           
 10255                           ;incstack = 0
 10256  000008  827A               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 10257  00000A  CFD9 F05A          	movff	fsr2l,??_RSI_High
 10258  00000E  CFDA F05B          	movff	fsr2h,??_RSI_High+1
 10259  000012  CFF3 F05C          	movff	prodl,??_RSI_High+2
 10260  000016  CFF4 F05D          	movff	prodh,??_RSI_High+3
 10261  00001A  ECC4  F00D         	call	__TiRSITimer	;wreg free
 10262  00001E  C05D  FFF4         	movff	??_RSI_High+3,prodh
 10263  000022  C05C  FFF3         	movff	??_RSI_High+2,prodl
 10264  000026  C05B  FFDA         	movff	??_RSI_High+1,fsr2h
 10265  00002A  C05A  FFD9         	movff	??_RSI_High,fsr2l
 10266  00002E  927A               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 10267  000030  0011               	retfie		f
 10268  000032                     __end_of_RSI_High:
 10269                           	callstack 0
 10270                           
 10271 ;; *************** function __TiRSITimer *****************
 10272 ;; Defined at:
 10273 ;;		line 37 in file "TTimer.c"
 10274 ;; Parameters:    Size  Location     Type
 10275 ;;		None
 10276 ;; Auto vars:     Size  Location     Type
 10277 ;;		None
 10278 ;; Return value:  Size  Location     Type
 10279 ;;                  1    wreg      void 
 10280 ;; Registers used:
 10281 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 10282 ;; Tracked objects:
 10283 ;;		On entry : 0/0
 10284 ;;		On exit  : 0/0
 10285 ;;		Unchanged: 0/0
 10286 ;; Data sizes:     COMRAM   BANK0   BANK1
 10287 ;;      Params:         0       0       0
 10288 ;;      Locals:         0       0       0
 10289 ;;      Temps:          1       0       0
 10290 ;;      Totals:         1       0       0
 10291 ;;Total ram usage:        1 bytes
 10292 ;; Hardware stack levels used: 1
 10293 ;; This function calls:
 10294 ;;		Nothing
 10295 ;; This function is called by:
 10296 ;;		_RSI_High
 10297 ;; This function uses a non-reentrant model
 10298 ;;
 10299                           
 10300                           	psect	text83
 10301  001B88                     __ptext83:
 10302                           	callstack 0
 10303  001B88                     __TiRSITimer:
 10304                           	callstack 23
 10305                           
 10306                           ;TTimer.c: 43:     TMR0H = 0xDF;
 10307                           
 10308                           ;incstack = 0
 10309  001B88  0EDF               	movlw	223
 10310  001B8A  6ED7               	movwf	215,c	;volatile
 10311                           
 10312                           ;TTimer.c: 44:     TMR0L = 0x73;
 10313  001B8C  0E73               	movlw	115
 10314  001B8E  6ED6               	movwf	214,c	;volatile
 10315                           
 10316                           ;TTimer.c: 45:     INTCONbits.TMR0IF = 0;
 10317  001B90  94F2               	bcf	242,2,c	;volatile
 10318                           
 10319                           ;TTimer.c: 46:     h_Tics++;
 10320  001B92  4A0F               	infsnz	_h_Tics^0,f,c
 10321  001B94  2A10               	incf	(_h_Tics+1)^0,f,c
 10322                           
 10323                           ;TTimer.c: 48:     if (h_Tics>=30000) {
 10324  001B96  0E30               	movlw	48
 10325  001B98  5C0F               	subwf	_h_Tics^0,w,c
 10326  001B9A  0E75               	movlw	117
 10327  001B9C  5810               	subwfb	(_h_Tics+1)^0,w,c
 10328  001B9E  A0D8               	btfss	status,0,c
 10329  001BA0  0012               	return	
 10330                           
 10331                           ;TTimer.c: 50:         for (counter=0;counter<25;counter++){
 10332  001BA2  6A46               	clrf	_counter^0,c
 10333  001BA4                     i2l4359:
 10334  001BA4  0E18               	movlw	24
 10335  001BA6  6446               	cpfsgt	_counter^0,c
 10336  001BA8  D001               	goto	i2l4363
 10337  001BAA  D00D               	goto	i2l77
 10338  001BAC                     i2l4363:
 10339                           
 10340                           ;TTimer.c: 51:             if (s_Timers[counter].b_busy==1){
 10341  001BAC  EC9D  F00E         	call	PL14	;call to abstracted procedure
 10342  001BB0  04DE               	decf	postinc2,w,c
 10343  001BB2  E107               	bnz	i2l4367
 10344                           
 10345                           ;TTimer.c: 52:                 s_Timers[counter].h_initialTics -= h_Tics;
 10346  001BB4  5046               	movf	_counter^0,w,c
 10347  001BB6  ECB5  F00F         	call	PL26	;call to abstracted procedure
 10348  001BBA  500F               	movf	_h_Tics^0,w,c
 10349  001BBC  5EDE               	subwf	postinc2,f,c
 10350  001BBE  5010               	movf	(_h_Tics+1)^0,w,c
 10351  001BC0  5ADD               	subwfb	postdec2,f,c
 10352  001BC2                     i2l4367:
 10353                           
 10354                           ;TTimer.c: 54:         }
 10355  001BC2  2A46               	incf	_counter^0,f,c
 10356  001BC4  D7EF               	goto	i2l4359
 10357  001BC6                     i2l77:
 10358                           
 10359                           ;TTimer.c: 55:         h_Tics=0;
 10360  001BC6  6A0F               	clrf	_h_Tics^0,c
 10361  001BC8  6A10               	clrf	(_h_Tics+1)^0,c
 10362  001BCA  0012               	return		;funcret
 10363  001BCC                     __end_of__TiRSITimer:
 10364                           	callstack 0
 10365                           
 10366                           	psect	rparam
 10367  0000                     
 10368                           	psect	temp
 10369  00007A                     btemp:
 10370                           	callstack 0
 10371  00007A                     	ds	1
 10372  0000                     int$flags	set	btemp
 10373  0000                     wtemp8	set	btemp+1
 10374  0000                     ttemp5	set	btemp+1
 10375  0000                     ttemp6	set	btemp+4
 10376  0000                     ttemp7	set	btemp+8
 10377                           
 10378                           	psect	idloc
 10379                           
 10380                           ;Config register IDLOC0 @ 0x200000
 10381                           ;	unspecified, using default values
 10382  200000                     	org	2097152
 10383  200000  FF                 	db	255
 10384                           
 10385                           ;Config register IDLOC1 @ 0x200001
 10386                           ;	unspecified, using default values
 10387  200001                     	org	2097153
 10388  200001  FF                 	db	255
 10389                           
 10390                           ;Config register IDLOC2 @ 0x200002
 10391                           ;	unspecified, using default values
 10392  200002                     	org	2097154
 10393  200002  FF                 	db	255
 10394                           
 10395                           ;Config register IDLOC3 @ 0x200003
 10396                           ;	unspecified, using default values
 10397  200003                     	org	2097155
 10398  200003  FF                 	db	255
 10399                           
 10400                           ;Config register IDLOC4 @ 0x200004
 10401                           ;	unspecified, using default values
 10402  200004                     	org	2097156
 10403  200004  FF                 	db	255
 10404                           
 10405                           ;Config register IDLOC5 @ 0x200005
 10406                           ;	unspecified, using default values
 10407  200005                     	org	2097157
 10408  200005  FF                 	db	255
 10409                           
 10410                           ;Config register IDLOC6 @ 0x200006
 10411                           ;	unspecified, using default values
 10412  200006                     	org	2097158
 10413  200006  FF                 	db	255
 10414                           
 10415                           ;Config register IDLOC7 @ 0x200007
 10416                           ;	unspecified, using default values
 10417  200007                     	org	2097159
 10418  200007  FF                 	db	255
 10419                           
 10420                           	psect	config
 10421                           
 10422                           ; Padding undefined space
 10423  300000                     	org	3145728
 10424  300000  FF                 	db	255
 10425                           
 10426                           ;Config register CONFIG1H @ 0x300001
 10427                           ;	Oscillator
 10428                           ;	OSC = HSPLL, HS oscillator, PLL enabled (Clock Frequency = 4 x FOSC1)
 10429                           ;	Fail-Safe Clock Monitor Enable bit
 10430                           ;	FCMEN = 0x0, unprogrammed default
 10431                           ;	Internal/External Oscillator Switchover bit
 10432                           ;	IESO = 0x0, unprogrammed default
 10433  300001                     	org	3145729
 10434  300001  06                 	db	6
 10435                           
 10436                           ;Config register CONFIG2L @ 0x300002
 10437                           ;	Power-up Timer Enable bit
 10438                           ;	PWRT = OFF, PWRT disabled
 10439                           ;	Brown-out Reset Enable bits
 10440                           ;	BOR = OFF, Brown-out Reset disabled in hardware and software
 10441                           ;	Brown-out Reset Voltage bits
 10442                           ;	BORV = 0x3, unprogrammed default
 10443  300002                     	org	3145730
 10444  300002  19                 	db	25
 10445                           
 10446                           ;Config register CONFIG2H @ 0x300003
 10447                           ;	Watchdog Timer Enable bit
 10448                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
 10449                           ;	Watchdog Timer Postscale Select bits
 10450                           ;	WDTPS = 0xF, unprogrammed default
 10451  300003                     	org	3145731
 10452  300003  1E                 	db	30
 10453                           
 10454                           ; Padding undefined space
 10455  300004                     	org	3145732
 10456  300004  FF                 	db	255
 10457                           
 10458                           ;Config register CONFIG3H @ 0x300005
 10459                           ;	CCP2 MUX bit
 10460                           ;	CCP2MX = 0x1, unprogrammed default
 10461                           ;	PORTB A/D Enable bit
 10462                           ;	PBADEN = DIG, PORTB<4:0> pins are configured as digital I/O on Reset
 10463                           ;	Low-Power Timer1 Oscillator Enable bit
 10464                           ;	LPT1OSC = 0x0, unprogrammed default
 10465                           ;	MCLR Pin Enable bit
 10466                           ;	MCLRE = OFF, RE3 input pin enabled; MCLR disabled
 10467  300005                     	org	3145733
 10468  300005  01                 	db	1
 10469                           
 10470                           ;Config register CONFIG4L @ 0x300006
 10471                           ;	Stack Full/Underflow Reset Enable bit
 10472                           ;	STVREN = 0x1, unprogrammed default
 10473                           ;	Single-Supply ICSP Enable bit
 10474                           ;	LVP = OFF, Single-Supply ICSP disabled
 10475                           ;	Boot Block Size Select bits
 10476                           ;	BBSIZ = 0x0, unprogrammed default
 10477                           ;	Extended Instruction Set Enable bit
 10478                           ;	XINST = 0x0, unprogrammed default
 10479                           ;	Background Debugger Enable bit
 10480                           ;	DEBUG = OFF, Background debugger disabled, RB6 and RB7 configured as general purpose I
      +                          /O pins
 10481  300006                     	org	3145734
 10482  300006  81                 	db	129
 10483                           
 10484                           ; Padding undefined space
 10485  300007                     	org	3145735
 10486  300007  FF                 	db	255
 10487                           
 10488                           ;Config register CONFIG5L @ 0x300008
 10489                           ;	unspecified, using default values
 10490                           ;	Code Protection bit
 10491                           ;	CP0 = 0x1, unprogrammed default
 10492                           ;	Code Protection bit
 10493                           ;	CP1 = 0x1, unprogrammed default
 10494  300008                     	org	3145736
 10495  300008  03                 	db	3
 10496                           
 10497                           ;Config register CONFIG5H @ 0x300009
 10498                           ;	unspecified, using default values
 10499                           ;	Boot Block Code Protection bitProtect Boot
 10500                           ;	CPB = 0x1, unprogrammed default
 10501                           ;	Data EEPROM Code Protection bit
 10502                           ;	CPD = 0x1, unprogrammed default
 10503  300009                     	org	3145737
 10504  300009  C0                 	db	192
 10505                           
 10506                           ;Config register CONFIG6L @ 0x30000A
 10507                           ;	unspecified, using default values
 10508                           ;	Write Protection bit
 10509                           ;	WRT0 = 0x1, unprogrammed default
 10510                           ;	Write Protection bit
 10511                           ;	WRT1 = 0x1, unprogrammed default
 10512  30000A                     	org	3145738
 10513  30000A  03                 	db	3
 10514                           
 10515                           ;Config register CONFIG6H @ 0x30000B
 10516                           ;	unspecified, using default values
 10517                           ;	Configuration Register Write Protection bit
 10518                           ;	WRTC = 0x1, unprogrammed default
 10519                           ;	Boot Block Write Protection bit
 10520                           ;	WRTB = 0x1, unprogrammed default
 10521                           ;	Data EEPROM Write Protection bit
 10522                           ;	WRTD = 0x1, unprogrammed default
 10523  30000B                     	org	3145739
 10524  30000B  E0                 	db	224
 10525                           
 10526                           ;Config register CONFIG7L @ 0x30000C
 10527                           ;	unspecified, using default values
 10528                           ;	Table Read Protection bit
 10529                           ;	EBTR0 = 0x1, unprogrammed default
 10530                           ;	Table Read Protection bit
 10531                           ;	EBTR1 = 0x1, unprogrammed default
 10532  30000C                     	org	3145740
 10533  30000C  03                 	db	3
 10534                           
 10535                           ;Config register CONFIG7H @ 0x30000D
 10536                           ;	unspecified, using default values
 10537                           ;	Boot Block Table Read Protection bit
 10538                           ;	EBTRB = 0x1, unprogrammed default
 10539  30000D                     	org	3145741
 10540  30000D  40                 	db	64
 10541                           tosu	equ	0xFFF
 10542                           tosh	equ	0xFFE
 10543                           tosl	equ	0xFFD
 10544                           stkptr	equ	0xFFC
 10545                           pclatu	equ	0xFFB
 10546                           pclath	equ	0xFFA
 10547                           pcl	equ	0xFF9
 10548                           tblptru	equ	0xFF8
 10549                           tblptrh	equ	0xFF7
 10550                           tblptrl	equ	0xFF6
 10551                           tablat	equ	0xFF5
 10552                           prodh	equ	0xFF4
 10553                           prodl	equ	0xFF3
 10554                           indf0	equ	0xFEF
 10555                           postinc0	equ	0xFEE
 10556                           postdec0	equ	0xFED
 10557                           preinc0	equ	0xFEC
 10558                           plusw0	equ	0xFEB
 10559                           fsr0h	equ	0xFEA
 10560                           fsr0l	equ	0xFE9
 10561                           wreg	equ	0xFE8
 10562                           indf1	equ	0xFE7
 10563                           postinc1	equ	0xFE6
 10564                           postdec1	equ	0xFE5
 10565                           preinc1	equ	0xFE4
 10566                           plusw1	equ	0xFE3
 10567                           fsr1h	equ	0xFE2
 10568                           fsr1l	equ	0xFE1
 10569                           bsr	equ	0xFE0
 10570                           indf2	equ	0xFDF
 10571                           postinc2	equ	0xFDE
 10572                           postdec2	equ	0xFDD
 10573                           preinc2	equ	0xFDC
 10574                           plusw2	equ	0xFDB
 10575                           fsr2h	equ	0xFDA
 10576                           fsr2l	equ	0xFD9
 10577                           status	equ	0xFD8

Data Sizes:
    Strings     0
    Constant    206
    Data        125
    BSS         307
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     25     121
    BANK0           128      2     119
    BANK1           256      0     219

Pointer List with Targets:

    DaSaveUser@regUser	PTR struct . size(1) Largest target is 18
		 -> mUser(COMRAM[18]), 

    DaFindUser@logUser	PTR struct . size(1) Largest target is 18
		 -> mUser(COMRAM[18]), 

    mUser@EEPROM$F1764	PTR struct . size(2) Largest target is 18
		 -> NULL(NULL[0]), mUser(COMRAM[18]), 

    displayString@string	PTR unsigned char  size(1) Largest target is 22
		 -> sysTime(BANK0[14]), modifyTimeString(BANK0[13]), TIME(BANK0[16]), LOGREGSCREEN(BANK0[12]), 
		 -> LOGINMENU(BANK0[22]), 


Critical Paths under _main in COMRAM

    _main->_dataMotor
    _timeMotor->_sendChar
    _startSong->_TiResetTics
    _sendChar->_LcPutChar
    _menuMotor->_mainMenu
    _startTimer->_TiResetTics
    _mainMenu->_LcPutChar
    _displayTimeRemaining->_LcGotoXY
    _displaySysTime->_LcGotoXY
    _displayString->_LcPutChar
    _displayResults->_LcPutChar
    _displayLogOut->_LcPutChar
    _displayError->_LcPutChar
    _nextRow->_LcGotoXY
    _LcCursorOn->_WaitForBusy
    _LcCursorOff->_WaitForBusy
    _KeSetMode->_TiResetTics
    _KeGetCharValue->_getFullValue
    _DaSaveScore->_LcPutChar
    _LcClear->_Espera
    _DaFindUser->_LcGotoXY
    _joystickMotor->_SiSendChar
    _initTime->_TiGetTimer
    _initSIO->_TiGetTimer
    _initMenu->_TiGetTimer
    _initKeypad->_TiGetTimer
    _initData->_readUserData
    _readUserData->_readEEPROM
    _initAudio->_TiGetTimer
    _dataMotor->_LcPutChar
    _LcPutChar->_LcGotoXY
    _LcGotoXY->_WaitForBusy
    _CantaData->_CantaPartAlta
    _CantaData->_CantaPartBaixa
    _btMotor->_TiGetTics
    _audioMotor->_TiGetTics
    _SMSMotor->_TiGetTics
    _LcInit->_Espera
    _WaitForBusy->_TiGetTics
    _Espera->_TiGetTics
    _CantaIR->_CantaPartAlta
    _CantaIR->_CantaPartBaixa
    _KeypadMotor->_TiGetTics

Critical Paths under _RSI_High in COMRAM

    _RSI_High->__TiRSITimer

Critical Paths under _main in BANK0

    _main->_dataMotor

Critical Paths under _RSI_High in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _RSI_High in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   68450
                        _KeypadMotor
                             _LcInit
                           _SMSMotor
                        _TiInitTimer
                         _audioMotor
                            _btMotor
                          _dataMotor
                          _initAudio
                           _initData
                       _initJoystick
                         _initKeypad
                           _initMenu
                            _initSIO
                           _initTime
                      _joystickMotor
                          _menuMotor
                          _timeMotor
 ---------------------------------------------------------------------------------
 (1) _timeMotor                                            2     2      0   10167
                                             20 COMRAM     2     2      0
                  _KeGetGenericValue
                         _LcCursorOn
                           _LcGotoXY
                          _LcPutChar
                          _TiGetTics
                        _TiResetTics
                            ___lbdiv
                            ___lbmod
                        _btAvailable
                          _isPressed
                           _sendChar
                     _updateGameTime
                      _updateSysTime
 ---------------------------------------------------------------------------------
 (2) _updateSysTime                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _updateGameTime                                       0     0      0      31
                          _startSong
 ---------------------------------------------------------------------------------
 (3) _startSong                                            0     0      0      31
                        _TiResetTics
 ---------------------------------------------------------------------------------
 (2) _sendChar                                             1     1      0    2592
                                             19 COMRAM     1     1      0
                          _LcPutChar
                         _btSendByte
 ---------------------------------------------------------------------------------
 (3) _btSendByte                                           1     1      0      15
                                              5 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _btAvailable                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _menuMotor                                            2     2      0   47799
                                             21 COMRAM     2     2      0
                            _CantaIR
                         _DaFindUser
                          _DaGetIdle
                     _DaGetNumScores
                        _DaGetStatus
                        _DaSaveScore
                         _DaSaveUser
                        _JoDirection
                            _JoMoved
                          _JoSetMode
                     _KeGetCharValue
                  _KeGetGenericValue
                          _KeSetMode
                        _LcCursorOff
                         _LcCursorOn
                           _LcGotoXY
                          _LcPutChar
                      _SiIsAvailable
                         _SiReadByte
                     _SiRecievedByte
                         _SiSendChar
                          _TiGetTics
                        _TiResetTics
                            ___lbdiv
                            ___lbmod
                       _displayError
                      _displayLogOut
                     _displayResults
               _displayScoresMarquee
                      _displayString
                     _displaySysTime
               _displayTimeRemaining
                         _getPresses
                  _incrementPosition
                          _isPressed
                           _mainMenu
                         _modifyTime
                       _resetDisplay
                      _resetPosition
                         _resetTimer
                         _startTimer
                          _stopTimer
                          _timerOver
 ---------------------------------------------------------------------------------
 (2) _timerOver                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _stopTimer                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _startTimer                                           0     0      0      31
                        _TiResetTics
 ---------------------------------------------------------------------------------
 (2) _resetTimer                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _resetPosition                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _resetDisplay                                         0     0      0    1889
                            _LcClear
 ---------------------------------------------------------------------------------
 (2) _modifyTime                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _mainMenu                                             2     2      0    5069
                                             19 COMRAM     2     2      0
                          _LcPutChar
                            ___awmod
                            _nextRow
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              6     2      4     448
                                              5 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) _isPressed                                            1     1      0      24
                                              5 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _incrementPosition                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _getPresses                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _displayTimeRemaining                                 0     0      0    2075
                           _LcGotoXY
 ---------------------------------------------------------------------------------
 (2) _displaySysTime                                       0     0      0    2075
                           _LcGotoXY
 ---------------------------------------------------------------------------------
 (2) _displayString                                        1     0      1    5133
                                             19 COMRAM     1     0      1
                          _LcPutChar
                            _nextRow
 ---------------------------------------------------------------------------------
 (2) _displayScoresMarquee                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _displayResults                                       0     0      0    4621
                          _LcPutChar
                            _nextRow
 ---------------------------------------------------------------------------------
 (2) _displayLogOut                                        0     0      0    4621
                          _LcPutChar
                            _nextRow
 ---------------------------------------------------------------------------------
 (2) _displayError                                         0     0      0    4621
                          _LcPutChar
                            _nextRow
 ---------------------------------------------------------------------------------
 (3) _nextRow                                              0     0      0    2075
                           _LcGotoXY
 ---------------------------------------------------------------------------------
 (2) _SiRecievedByte                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _SiReadByte                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _LcCursorOn                                           0     0      0     440
                            _CantaIR
                        _WaitForBusy
 ---------------------------------------------------------------------------------
 (2) _LcCursorOff                                          0     0      0     440
                            _CantaIR
                        _WaitForBusy
 ---------------------------------------------------------------------------------
 (2) _KeSetMode                                            1     1      0      93
                                              6 COMRAM     1     1      0
                        _TiResetTics
 ---------------------------------------------------------------------------------
 (2) _KeGetCharValue                                       0     0      0     110
                  _KeGetGenericValue
                       _getFullValue
 ---------------------------------------------------------------------------------
 (3) _getFullValue                                         5     5      0     110
                                              5 COMRAM     5     5      0
 ---------------------------------------------------------------------------------
 (2) _JoSetMode                                            1     1      0      22
                                              5 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _JoMoved                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _JoDirection                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _DaSaveUser                                           1     0      1      98
                                              5 COMRAM     1     0      1
 ---------------------------------------------------------------------------------
 (2) _DaSaveScore                                          1     1      0    6829
                                             19 COMRAM     1     1      0
                            _LcClear
                          _LcPutChar
                            ___lbdiv
                            ___lbmod
 ---------------------------------------------------------------------------------
 (3) _LcClear                                              0     0      0    1889
                            _CantaIR
                             _Espera
                        _WaitForBusy
 ---------------------------------------------------------------------------------
 (2) _DaGetStatus                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _DaGetNumScores                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _DaGetIdle                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _DaFindUser                                           1     0      1    2196
                                             18 COMRAM     1     0      1
                           _LcGotoXY
 ---------------------------------------------------------------------------------
 (1) _joystickMotor                                        2     2      0      22
                                              6 COMRAM     2     2      0
                      _SiIsAvailable
                         _SiSendChar
 ---------------------------------------------------------------------------------
 (1) _initTime                                             0     0      0       0
                         _TiGetTimer
 ---------------------------------------------------------------------------------
 (1) _initSIO                                              0     0      0       0
                         _TiGetTimer
 ---------------------------------------------------------------------------------
 (1) _initMenu                                             0     0      0       0
                         _TiGetTimer
 ---------------------------------------------------------------------------------
 (1) _initKeypad                                           0     0      0       0
                         _TiGetTimer
 ---------------------------------------------------------------------------------
 (1) _initJoystick                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initData                                             0     0      0      30
                         _readEEPROM
                       _readUserData
 ---------------------------------------------------------------------------------
 (2) _readUserData                                         2     2      0      15
                                              6 COMRAM     2     2      0
                         _readEEPROM
 ---------------------------------------------------------------------------------
 (3) _readEEPROM                                           1     1      0      15
                                              5 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _initAudio                                            0     0      0       0
                         _TiGetTimer
 ---------------------------------------------------------------------------------
 (1) _dataMotor                                            8     8      0    7893
                                             19 COMRAM     6     6      0
                                              0 BANK0      2     2      0
                           _LcGotoXY
                          _LcPutChar
                            ___lbdiv
                            ___lbmod
                         _saveEEPROM
 ---------------------------------------------------------------------------------
 (2) _saveEEPROM                                           2     1      1     872
                                              5 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (2) ___lbmod                                              4     3      1    1222
                                              5 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 (2) ___lbdiv                                              4     3      1    1141
                                              5 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 (3) _LcPutChar                                            1     1      0    2546
                                             18 COMRAM     1     1      0
                          _CantaData
                           _LcGotoXY
                        _WaitForBusy
 ---------------------------------------------------------------------------------
 (4) _LcGotoXY                                             5     4      1    2075
                                             13 COMRAM     5     4      1
                            _CantaIR
                        _WaitForBusy
 ---------------------------------------------------------------------------------
 (4) _CantaData                                            1     1      0     310
                                              7 COMRAM     1     1      0
                      _CantaPartAlta
                     _CantaPartBaixa
 ---------------------------------------------------------------------------------
 (1) _btMotor                                              2     2      0     118
                                             12 COMRAM     2     2      0
                      _SiIsAvailable
                         _SiSendChar
                          _TiGetTics
                        _TiResetTics
 ---------------------------------------------------------------------------------
 (2) _SiSendChar                                           1     1      0      22
                                              5 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _SiIsAvailable                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _audioMotor                                           3     3      0      96
                                             12 COMRAM     3     3      0
                          _TiGetTics
                        _TiResetTics
 ---------------------------------------------------------------------------------
 (1) _TiInitTimer                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SMSMotor                                             2     2      0      96
                                             12 COMRAM     2     2      0
                  _KeGetGenericValue
                          _TiGetTics
                        _TiResetTics
 ---------------------------------------------------------------------------------
 (2) _KeGetGenericValue                                    2     2      0       0
                                              5 COMRAM     2     2      0
                          _getColumn
 ---------------------------------------------------------------------------------
 (3) _getColumn                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _LcInit                                               3     2      1    2133
                                             17 COMRAM     3     2      1
                            _CantaIR
                 _EscriuPrimeraOrdre
                             _Espera
                         _TiGetTimer
                        _WaitForBusy
 ---------------------------------------------------------------------------------
 (4) _WaitForBusy                                          1     1      0     130
                                             12 COMRAM     1     1      0
                          _TiGetTics
                        _TiResetTics
 ---------------------------------------------------------------------------------
 (2) _TiGetTimer                                           1     1      0       0
                                              5 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (4) _Espera                                               5     1      4    1449
                                             12 COMRAM     5     1      4
                          _TiGetTics
                        _TiResetTics
 ---------------------------------------------------------------------------------
 (2) _EscriuPrimeraOrdre                                   2     2      0      60
                                              5 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (5) _CantaIR                                              1     1      0     310
                                              7 COMRAM     1     1      0
                      _CantaPartAlta
                     _CantaPartBaixa
 ---------------------------------------------------------------------------------
 (6) _CantaPartBaixa                                       2     2      0     124
                                              5 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (6) _CantaPartAlta                                        2     2      0     124
                                              5 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _KeypadMotor                                          2     2      0      96
                                             12 COMRAM     2     2      0
                          _TiGetTics
                        _TiResetTics
 ---------------------------------------------------------------------------------
 (4) _TiResetTics                                          1     1      0      31
                                              5 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (5) _TiGetTics                                            7     5      2      65
                                              5 COMRAM     7     5      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _RSI_High                                             4     4      0       0
                                              1 COMRAM     4     4      0
                        __TiRSITimer
 ---------------------------------------------------------------------------------
 (8) __TiRSITimer                                          1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _KeypadMotor
     _TiGetTics
     _TiResetTics
   _LcInit
     _CantaIR
       _CantaPartAlta
       _CantaPartBaixa
     _EscriuPrimeraOrdre
     _Espera
       _TiGetTics
       _TiResetTics
     _TiGetTimer
     _WaitForBusy
       _TiGetTics
       _TiResetTics
   _SMSMotor
     _KeGetGenericValue
       _getColumn
     _TiGetTics
     _TiResetTics
   _TiInitTimer
   _audioMotor
     _TiGetTics
     _TiResetTics
   _btMotor
     _SiIsAvailable
     _SiSendChar
     _TiGetTics
     _TiResetTics
   _dataMotor
     _LcGotoXY
       _CantaIR
       _WaitForBusy
     _LcPutChar
       _CantaData
         _CantaPartAlta
         _CantaPartBaixa
       _LcGotoXY
       _WaitForBusy
     ___lbdiv
     ___lbmod
     _saveEEPROM
   _initAudio
     _TiGetTimer
   _initData
     _readEEPROM
     _readUserData
       _readEEPROM
   _initJoystick
   _initKeypad
     _TiGetTimer
   _initMenu
     _TiGetTimer
   _initSIO
     _TiGetTimer
   _initTime
     _TiGetTimer
   _joystickMotor
     _SiIsAvailable
     _SiSendChar
   _menuMotor
     _CantaIR
     _DaFindUser
       _LcGotoXY
     _DaGetIdle
     _DaGetNumScores
     _DaGetStatus
     _DaSaveScore
       _LcClear
         _CantaIR
         _Espera
         _WaitForBusy
       _LcPutChar
       ___lbdiv
       ___lbmod
     _DaSaveUser
     _JoDirection
     _JoMoved
     _JoSetMode
     _KeGetCharValue
       _KeGetGenericValue
       _getFullValue
     _KeGetGenericValue
     _KeSetMode
       _TiResetTics
     _LcCursorOff
       _CantaIR
       _WaitForBusy
     _LcCursorOn
       _CantaIR
       _WaitForBusy
     _LcGotoXY
     _LcPutChar
     _SiIsAvailable
     _SiReadByte
     _SiRecievedByte
     _SiSendChar
     _TiGetTics
     _TiResetTics
     ___lbdiv
     ___lbmod
     _displayError
       _LcPutChar
       _nextRow
         _LcGotoXY
     _displayLogOut
       _LcPutChar
       _nextRow
     _displayResults
       _LcPutChar
       _nextRow
     _displayScoresMarquee
     _displayString
       _LcPutChar
       _nextRow
     _displaySysTime
       _LcGotoXY
     _displayTimeRemaining
       _LcGotoXY
     _getPresses
     _incrementPosition
     _isPressed
     _mainMenu
       _LcPutChar
       ___awmod
       _nextRow
     _modifyTime
     _resetDisplay
       _LcClear
     _resetPosition
     _resetTimer
     _startTimer
       _TiResetTics
     _stopTimer
     _timerOver
   _timeMotor
     _KeGetGenericValue
     _LcCursorOn
     _LcGotoXY
     _LcPutChar
     _TiGetTics
     _TiResetTics
     ___lbdiv
     ___lbmod
     _btAvailable
     _isPressed
     _sendChar
       _LcPutChar
       _btSendByte
     _updateGameTime
       _startSong
         _TiResetTics
     _updateSysTime

 _RSI_High (ROOT)
   __TiRSITimer

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             1FF      0       0      22        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      DB       7       85.5%
BITBANK0            80      0       0       4        0.0%
BANK0               80      2      77       5       93.0%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     19      79       1       96.0%
BITBIGSFRhlhh       19      0       0       9        0.0%
BITBIGSFRhh          D      0       0       8        0.0%
BITBIGSFRlhhhh       B      0       0      11        0.0%
BITBIGSFRlhhlhl      8      0       0      14        0.0%
BITBIGSFRlhhlll      8      0       0      17        0.0%
BITBIGSFRlhhllh      7      0       0      16        0.0%
BITBIGSFRlhhlhh      7      0       0      13        0.0%
BITBIGSFRllhlh       5      0       0      19        0.0%
BITBIGSFRllhhh       5      0       0      18        0.0%
BITBIGSFRhll         4      0       0      10        0.0%
BITBIGSFRlhhllh      1      0       0      15        0.0%
BITBIGSFRlhhhl       1      0       0      12        0.0%
BITBIGSFRlll         1      0       0      20        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     1CB      21        0.0%
DATA                 0      0     1CB       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.36 build 20220127204148 
Symbol Table                                                                                   Tue Jun 28 22:36:08 2022

           TiResetTics@Handle 005E                 _updateSysTime 0088                             _x 002D  
                           _y 002C        ??_displayTimeRemaining 006B                            PL2 0DC2  
                          PL4 0DF0                            PL6 0DFA                            PL8 0E14  
      __end_of_displayResults 1E16        __end_of_updateGameTime 1FB0        __end_of_displaySysTime 00F6  
               ?_displayError 0059                           PL10 0E20                           PL20 173A  
                         PL12 0E4C                           PL30 174E                           PL22 17CA  
                         PL14 1D3A                           PL40 1E16                           PL32 1B26  
                         PL24 1B08                           PL16 1620                           PL50 0E68  
                         PL42 1C68                           PL34 095C                           PL26 1F6A  
                         PL18 0E5A                           PL60 11D8                           PL52 1DC8  
                         PL44 0966                           PL36 1DC0                           PL28 11C6  
                         PL70 1A78                           PL62 097A                           PL54 185A  
                         PL46 16C0                           PL38 16AE                           PL80 1E8C  
                         PL72 098E                           PL64 175E                           PL56 17E8  
                         PL48 0970                           PL90 11EE                           PL82 11DE  
                         PL74 1C76                           PL66 0986                           PL58 11D0  
                         PL92 09A0                           PL84 11E6                           PL76 1A12  
                         PL68 1868                           PL94 0138                           PL86 0998  
                         PL78 0E76                           PL96 11F6                           PL88 14CC  
                         PL98 130E                           l152 1220                           l155 123C  
                         l148 1200                           l166 12A2                           l158 1258  
                         l177 151A                           l195 1FF6                           l710 1494  
                         l279 1D5A                           l713 14A8                           l538 051A  
                         l635 1738                           l906 0B5A                           l932 0CCE  
                         l934 0CD4                           l694 1416                           l784 1316  
                         l697 142A                           l874 09DE                           l891 0A54  
                         l859 1A96                           l797 139A                           l893 0A98  
                         l894 0A9E                           l895 0AA4                           l898 0AF0  
                         u510 184A                           u450 1808                           u508 1834  
                         u470 181E                           u528 184C                           u490 1832  
                         u468 180A                           u488 1820                           _val 0031  
                         _pos 0030                           _row 0045              ??_CantaPartBaixa 005E  
                ___awmod@sign 0063                           prod 000FF3                           wreg 000FE8  
         __end_of_JoDirection 0190                ?_displayLogOut 0059                ?_displayString 006C  
                        l2303 176C                          l2321 179E                          l2313 1782  
                        l2307 1774                          l2317 1796                          l4021 1930  
                        l4013 1912                          l4005 18FA                          l2327 17B6  
                        l4015 191A                          l2505 1A86                          l4025 193A  
                        l4009 1906                          l2531 1ADC                          l2515 1A98  
                        l2525 1AC6                          l2509 1A8E                          l4029 1946  
                        l2357 0094                          l2519 1AA0                          l4079 1D20  
                        l4087 1D2A                          l6105 1594                          l7001 0C3A  
                        l5145 143C                          l6211 1528                          l5163 1476  
                        l6221 1542                          l6205 1514                          l7021 0C9C  
                        l7005 0C48                          l5181 1496                          l5157 1460  
                        l6037 1BE8                          l6223 1548                          l6207 1520  
                        l6231 155A                          l4383 1D9C                          l7023 0CA2  
                        l7015 0C62                          l7007 0C4C                          l5175 148A  
                        l5191 14AC                          l7111 0F50                          l7103 0F32  
                        l6321 12E0                          l6217 1538                          l7033 0CE8  
                        l5169 1480                          l7201 10E0                          l6307 12B8  
                        l4379 1D94                          l6155 1662                          l6147 1648  
                        l6139 162E                          l6403 03C4                          l7123 0F80  
                        l7115 0F62                          l6317 12DE                          l7045 0D26  
                        l6341 02EC                          l6085 1FAC                          l7213 1118  
                        l7205 10EC                          l7133 0FAE                          l7053 0E7E  
                        l7039 0CFC                          l6423 03F2                          l6415 03D8  
                        l7127 0F92                          l7119 0F74                          l7071 0EBE  
                        l6249 121A                          l6169 168E                          l7241 132A  
                        l3961 1B04                          l6521 0544                          l6433 0410  
                        l6361 0340                          l6329 02D2                          l7209 1102  
                        l7137 0FB6                          l7225 113A                          l6283 1272  
                        l6195 1500                          l6179 14D4                          l6603 063A  
                        l6515 0536                          l6507 051C                          l6443 042A  
                        l7163 1028                          l7059 0E98                          l5813 1F40  
                        l5901 1D18                          l3957 1B02                          l6701 0776  
                        l6613 0652                          l6541 0578                          l6525 0548  
                        l6445 0432                          l6381 0386                          l6349 0312  
                        l7149 0FEE                          l6287 127C                          l6279 126E  
                        l7271 13A0                          l7263 136C                          l7255 135C  
                        l7247 133E                          l6711 078C                          l6607 0640  
                        l6551 059A                          l6471 048A                          l6463 0470  
                        l6447 0438                          l6439 041C                          l6391 03A6  
                        l6375 036A                          l7175 1060                          l7095 0F14  
                        l7087 0EFA                          l7079 0EDC                          l7319 1B66  
                        l6297 129C                          l5809 1C42                          l7257 135E  
                        l7249 1342                          l6641 069A                          l7193 10B4  
                        l7283 13DA                          l7291 13FA                          l5819 1D5E  
                        l5931 1E84                          l6715 0790                          l6635 0688  
                        l6627 067A                          l6619 0668                          l6563 05C0  
                        l6539 0574                          l6491 04DE                          l6459 045E  
                        l6811 087E                          l7187 1094                          l7285 13E0  
                        l7269 1382                          l5917 1E40                          l5909 1E2A  
                        l6733 07C4                          l6581 05F4                          l6573 05DA  
                        l6549 0596                          l6493 04E4                          l6477 049E  
                        l6397 03BE                          l7197 10CA                          l7279 13D6  
                        l6903 0AF6                          l6727 07B6                          l6719 079E  
                        l6671 0728                          l6663 0708                          l6655 06C8  
                        l6647 06B0                          l6575 05E0                          l6487 04D0  
                        l6825 09BA                          l6753 07FA                          l5787 1C1C  
                        l5867 1DF0                          l6843 09E8                          l6827 09BE  
                        l6819 09AA                          l5885 1CF6                          l6909 0B00  
                        l6861 0A36                          l6837 09DA                          l6829 09C2  
                        l5973 171C                          l6757 080A                          l6597 0624  
                        l6951 0BA8                          l6935 0B7C                          l6927 0B62  
                        l6919 0B24                          l6871 0A4E                          l6855 0A24  
                        l6687 0758                          l6679 0740                          l6599 062A  
                        l5897 1D10                          l5889 1CFC                          l6961 0BC0  
                        l6945 0B9E                          l6937 0B82                          l5977 1720  
                        l6777 082C                          l6769 081E                          l6891 0AAE  
                        l6859 0A30                          l6795 085E                          l6787 0846  
                        l6973 0BD6                          l6877 0A5E                          l6887 0A9A  
                        l5999 1CA4                          l6985 0C02                          l6995 0C2A  
                        l6979 0BEE                          l6989 0C1A                          u3040 1FF2  
                        u5100 1A3E                          u5120 1A52                          u5200 19EC  
                        u5140 1A6A                          u5220 1A04                          u5118 1A40  
                        u5310 1D00                          u6030 046A                          u5080 1A28  
                        u5160 19C2                          u5138 1A54                          u5218 19EE  
                        u2850 1AF0                          u2930 191E                          u5180 19D8  
                        u5158 1A6C                          u5238 1A06                          u6070 04C6  
                        u7120 13B4                          u5098 1A2A                          u5178 19C4  
                        u5370 16EE                          u7140 13F4                          u5198 19DA  
                        u6280 060E                          u5810 12CE                          u7090 1354  
                        u5740 1292                          u6460 0786                          u5920 0380  
                        u6810 0CC0                          i2l77 1BC6                          u5890 0330  
                        _TIME 00BE                ?_SiIsAvailable 0059                          _game 0012  
                        _main 1B3E                          _send 002E                          fsr1h 000FE2  
                        fsr2h 000FDA                          indf1 000FE7                          indf2 000FDF  
                        fsr1l 000FE1                          fsr2l 000FD9                    _LcCursorOn 00F6  
                        btemp 007A                          prodh 000FF4                          prodl 000FF3  
             __end_of_LcClear 004C                          start 0032               __end_of_CantaIR 1F96  
               LcInit@columns 006A                ?_updateSysTime 0059               __end_of_JoMoved 018C  
                ___param_bank 000000                 _isPressed$638 005E              __end_of_MAINMENU 0299  
             ?_displayResults 0059                ??_displayError 006C               ?_updateGameTime 0059  
             ?_displaySysTime 0059                   Espera@Timer 0065                         ?_main 0059  
             __end_of___lbdiv 1D1C                         _EEADR 000FA9               __end_of___awmod 1950  
             __end_of___lbmod 1E48                 ??_TiInitTimer 005E                         _T0CON 000FD5  
                       _ERROR 009F                         _TABLE 0201                         _RCREG 000FAE  
               ??_KeypadMotor 0065                         _TMR0H 000FD7                         _TMR0L 000FD6  
                       _SPBRG 000FAF                         _TXREG 000FAD               __end_of_btMotor 1414  
                 ?_DaFindUser 006B                         _Timer 000D              __end_of_SMSTABLE 02CF  
             __end_of_initSIO 1EB6                         _mUser 0047                         _moved 002B  
                       _timer 0035                   _LcCursorOff 0100                         _state 003D  
                       _users 0100              __end_of_RSI_High 0032               __end_of_nextRow 00B6  
            __end_of_SMSMotor 1580                         tablat 000FF5                 ??_TiResetTics 005E  
                       ttemp5 007B                         ttemp6 007E                         ttemp7 0082  
                       status 000FD8                   ?_DaSaveUser 005E                         wtemp8 007B  
             ___lbdiv@divisor 005E              __end_of_LcGotoXY 1D7A                saveEEPROM@data 005E  
             ___lbdiv@counter 0060                 ??__TiRSITimer 0059                    _TiGetTimer 1D1C  
     EscriuPrimeraOrdre@ordre 005F               __initialization 1950                    _SiReadByte 0184  
                __end_of_main 1B88          __end_of_getFullValue 1B08                    _SiSendChar 0166  
                 _JoDirection 018C                        ??_main 0072                 __activetblptr 000002  
               ?_initJoystick 0059               ??_displayLogOut 006C               ??_displayString 006D  
                      _ADCON0 000FC2                        _ADCON1 000FC1                        _ADCON2 000FC0  
         __end_of_TiInitTimer 1DA6                        _ADRESH 000FC4                        _EEDATA 000FA8  
                      _EECON2 000FA7               ??_SiIsAvailable 005E           __end_of_KeypadMotor 130E  
                   ??_LcClear 006A                     ??_CantaIR 0060                        i2l4363 1BAC  
                      i2l4367 1BC2                        i2l4359 1BA4                        _LCDcol 0033  
              LcGotoXY@Fisics 0067                LcGotoXY@Column 006A                        _LCDrow 0034  
               ??_WaitForBusy 0065                 ?_readUserData 0059            _mUser@EEPROM$F1764 000B  
                   ??_JoMoved 005E                   ?_LcCursorOn 0059             KeSetMode@menuMode 005F  
                      _LcInit 1580               ??_updateSysTime 005E                  ?_DaGetStatus 0059  
                      _Espera 1F3A                  _LcGotoXY$844 0068             __end_of_DaGetIdle 015E  
                      _RowAct 003B           __end_of_TiResetTics 1F6A              __end_of_mainMenu 173A  
                      _h_Tics 000F                        _dataRX 0026                        _dataTX 0022  
                   ??___lbdiv 005F                     ??___awmod 0062                     ??___lbmod 005F  
                      _mScore 002F              __end_of_initData 1AE4              __end_of_initMenu 0114  
            __end_of_initTime 0166           __end_of__TiRSITimer 1BCC                        clear_0 1996  
                      clear_1 19A2                        _minute 0077                        _second 0017  
                      _period 0036                     ??_btMotor 0065               ___awmod@divisor 0060  
                      isa$std 000001               ___awmod@counter 0062              __end_of_sendChar 1FE2  
                      _status 001C                ??_initJoystick 005E                     ??_initSIO 005F  
                __pdataCOMRAM 0072         __end_of_resetPosition 017C                     ??_nextRow 006B  
                __mediumconst 0000                        tblptrh 000FF7                        tblptrl 000FF6  
                      tblptru 000FF8                  ?_DaSaveScore 0059             __end_of_CantaData 1C68  
            ___lbdiv@dividend 005F                ??_readUserData 005F               ___lbmod@divisor 005E  
        __end_of_displayError 1CB4                    __accesstop 0080       __end_of__initialization 19A8  
           __end_of_KeSetMode 1E8C               ___lbmod@counter 0060                 _LOGOUTMESSAGE 0096  
           __end_of_LcPutChar 1DFA          DaSaveScore@userScore 006C                 ___rparam_used 000001  
               __end_of_TABLE 020D                   ?_TiGetTimer 0059             __end_of_JoSetMode 0156  
              __pcstackCOMRAM 0059           __end_of_WaitForBusy 1C48                   ?_SiReadByte 0059  
                __pidataBANK0 1872         __end_of_joystickMotor 14CC                   ?_SiSendChar 0059  
                  __end_ofPL2 0DF0                    __end_ofPL4 0DFA                    __end_ofPL6 0E14  
                  __end_ofPL8 0E20              ___lbdiv@quotient 0061                     ?_RSI_High 0059  
                   ?_SMSMotor 0059             __end_of_TiGetTics 1E6E                _SiRecievedByte 1FFA  
                 _TiInitTimer 1D7A                   _KeypadMotor 11FE                     ?_LcGotoXY 0066  
                  __pbssBANK1 0100                   _TiResetTics 1F5A                    _btSendByte 00C2  
          _state@EEPROM$F1761 001E                       ?_LcInit 006A                 _CantaPartAlta 1A1C  
                     ?_Espera 0065                   __TiRSITimer 1B88              ??_displayResults 006C  
            ??_updateGameTime 005F              ??_displaySysTime 006B        __end_of_SiRecievedByte 2000  
                  ??_RSI_High 005A                    ??_SMSMotor 0065                    _getPresses 0180  
                  _audioMotor 162C                       LcInit@i 006C                       _LCDcolm 0032  
                ??_DaFindUser 006C                    ??_LcGotoXY 0067                 ?_resetDisplay 0059  
                     _RESULTS 0080                  ?_LcCursorOff 0059                  _getFullValue 1AE4  
           __end_of_dataMotor 0DC2                     ?_mainMenu 0059                       _LcClear 0036  
                     _CantaIR 1F7A                     ?_initData 0059                     ?_initMenu 0059  
                   ?_initTime 0059                  ??_DaSaveUser 005F                   _WaitForBusy 1C0A  
                     _JoMoved 0188                    _readEEPROM 0098                ?_CantaPartAlta 0059  
           __end_of_getColumn 011E          __end_of_initJoystick 1ED8                 ??_btAvailable 005E  
                   ?_sendChar 0059                _DaGetNumScores 0194                       __Hparam 0000  
                     __Lparam 0000                    _initKeypad 1EFA            __end_of_DaFindUser 1FCA  
                     ___lbdiv 1CE8                       ___awmod 18E8                       ___lbmod 1E22  
                _MAINMENUSIZE 0072                  __psmallconst 0200                    _currentKey 0042  
           __end_of_isPressed 1FFA                  ?_JoDirection 0059                       __pcinit 1950  
             ?_SiRecievedByte 0059                       _btMotor 1314                       __ramtop 0200  
        __end_of_readUserData 17CA                       __ptext0 1B3E                       __ptext1 0E7C  
                     __ptext2 0088                       __ptext3 1F96                       __ptext4 00B6  
                     __ptext5 1FCA                       __ptext6 00C2                       __ptext7 0126  
                     __ptext8 02D0                       __ptext9 012E             __end_of_initAudio 0062  
                   _T0CONbits 000FD5                     CantaIR@IR 0060                       _initSIO 1E92  
                     _counter 0046                    _saveEEPROM 1ED8             __end_of_menuMotor 095C  
                     _joyMode 0029            __end_of_DaSaveUser 0076              ___awmod@dividend 005E  
              ??_resetDisplay 006A                       _nextRow 00A8                       _minutes 0078  
                     _seconds 0018                    _modifyTime 0136                       _timerRX 0027  
                     _timerTX 0023                       _pressed 0040                       _stateRX 0028  
                     _stateTX 0024               WaitForBusy@Busy 0065                       _userNum 001D  
                     _sysTime 00CE          end_of_initialization 19A8                    ??_mainMenu 006C  
                   _LOGINMENU 00A8                    ??_initData 0061                    ??_initMenu 005F  
                  ??_initTime 005F        __end_of_DaGetNumScores 0198                   ?_btSendByte 0059  
               __Lmediumconst 0000               TiGetTics@Handle 0062                  ??_LcCursorOn 0066  
           __end_of_timeMotor 11C6                    ??_sendChar 006C             __end_of_timerOver 0136  
                  _resetTimer 00D8                    _numPresses 003F               TiGetTics@actual 0063  
                   _RCSTAbits 000FAB                       postdec1 000FE5                       postdec2 000FDD  
                     postinc0 000FEE                       postinc1 000FE6                       postinc2 000FDE  
           __end_of_startSong 00C2           __end_of_btAvailable 012E                     _DaGetIdle 0156  
           __end_of_stopTimer 0178                     _PORTBbits 000F81                  _displayError 1C80  
                   _PORTCbits 000F82                     _PORTDbits 000F83                   ?_getPresses 0059  
                 ?_audioMotor 0059             _KeGetGenericValue 1F1A             _incrementPosition 017C  
          __end_of_LcCursorOn 0100              ___lbmod@dividend 005F            ?_KeGetGenericValue 0059  
                   _TRISAbits 000F92                     _TRISBbits 000F93                     _TRISCbits 000F94  
                   _TRISDbits 000F95         __end_of_displayLogOut 1C0A            ?_incrementPosition 0059  
           readEEPROM@address 005E         __end_of_displayString 1DC0           getFullValue@generic 0062  
                  _startTimer 00CE           ??_KeGetGenericValue 005E               ??_CantaPartAlta 005E  
       __end_of_SiIsAvailable 0174                   ___lbmod@rem 0061           ??_incrementPosition 005E  
                   _CantaData 1C48               ?_DaGetNumScores 0059                   ?_readEEPROM 0059  
                   _TXSTAbits 000FAC                  ??_TiGetTimer 005E                  saveEEPROM@ad 005F  
              __end_of_LcInit 1620                     _KeSetMode 1E6E         __end_of_updateSysTime 0098  
                   _LcPutChar 1DD0                  ??_SiReadByte 005E                __end_of_Espera 1F5A  
                 ?_initKeypad 0059                _KeGetCharValue 0146                  ??_SiSendChar 005E  
  __end_of_EscriuPrimeraOrdre 185A                    ?_DaGetIdle 0059                   _BAUDCONbits 000FB8  
                   _JoSetMode 014E     __end_of_KeGetGenericValue 1F3A                 __pidataCOMRAM 011E  
            _timer@time$F1844 0014     __end_of_incrementPosition 0180                     _ColumnAct 003A  
                ?_TiInitTimer 0059                   ?_saveEEPROM 005E                  ?_KeypadMotor 0059  
                 __end_ofPL10 0E4C                   __end_ofPL20 174E                   __end_ofPL12 0E5A  
                 __end_ofPL30 175E                   __end_ofPL22 17E8                   __end_ofPL14 1D4C  
                 __end_ofPL40 1E22                   __end_ofPL32 1B3E                   __end_ofPL24 1B26  
                 __end_ofPL16 162C                   __end_ofPL50 0E76                   __end_ofPL42 1C76  
                 __end_ofPL34 0966                   __end_ofPL26 1F7A                   __end_ofPL18 0E68  
                 __end_ofPL60 11DE                   __end_ofPL52 1DD0                   __end_ofPL44 0970  
                 __end_ofPL36 1DC8                   __end_ofPL28 11D0                   __end_ofPL70 1A82  
                 __end_ofPL62 0986                   __end_ofPL54 1868                   __end_ofPL46 16D0  
                 __end_ofPL38 16C0                   __end_ofPL80 1E92                   __end_ofPL72 0998  
                 __end_ofPL64 176A                   __end_ofPL56 17F6                   __end_ofPL48 097A  
                 __end_ofPL90 11F6                   __end_ofPL82 11E6                   __end_ofPL74 1C80  
                 __end_ofPL66 098E                   __end_ofPL58 11D8                   __end_ofPL92 09A8  
                 __end_ofPL84 11EE                   __end_ofPL76 1A1C                   __end_ofPL68 1872  
                 __end_ofPL94 013E                   __end_ofPL86 09A0                   __end_ofPL78 0E7C  
                 __end_ofPL96 11FE                   __end_ofPL88 14D2                   __end_ofPL98 1314  
         start_initialization 1950                     _TiGetTics 1E48                   ?_modifyTime 0059  
          __end_of_TiGetTimer 1D3A              _state@Audio$F967 0039            __end_of_SiReadByte 0188  
                ?_TiResetTics 0059                    ?_CantaData 0059            __end_of_SiSendChar 016E  
                    ??_LcInit 006B                  _LOGREGSCREEN 00E9                   _btAvailable 0126  
                 ?_resetTimer 0059        __end_of_KeGetCharValue 014E                  ?__TiRSITimer 0059  
                    ??_Espera 0069  __end_of_displayScoresMarquee 0146                    ?_KeSetMode 0059  
        __end_of_resetDisplay 00EC                    ?_LcPutChar 0059                   __pdataBANK0 0080  
         displayString@string 006C                    ?_JoSetMode 0059                  _initJoystick 1EB6  
                 __pbssCOMRAM 0001                 __pcstackBANK0 00F5                    ?_TiGetTics 005E  
            SiSendChar@myByte 005E                   ?_startTimer 0059  __end_of_displayTimeRemaining 0088  
                    ?_LcClear 0059                      ?_CantaIR 0059                _CantaPartBaixa 19B6  
                ?_WaitForBusy 0059                  _readUserData 176A                      ?_JoMoved 0059  
                  sendChar@bt 006C                     _dataMotor 09A8               ?_KeGetCharValue 0059  
            ??_SiRecievedByte 005E                     __pintcode 0008                     _getColumn 0114  
                    ?___lbdiv 005E                      ?___awmod 005E                      ?___lbmod 005E  
                   _available 003E               CantaPartBaixa@c 005F                   ??_DaGetIdle 005E  
                    ?_btMotor 0059                      ?_initSIO 0059                   __smallconst 0200  
                   _isPressed 1FE2                      ?_nextRow 0059                     _counterRX 0025  
                   _counterTX 0021                     _initAudio 004C                 _resetPosition 0178  
                   _menuMotor 02D0        __end_of_CantaPartBaixa 1A12                      _MAINMENU 020D  
                 ??_CantaData 0060                  ??_btSendByte 005E                      _LATAbits 000F89  
                    _LATBbits 000F8A                      _LATCbits 000F8B                      _LATDbits 000F8C  
                  ?_dataMotor 0059                     _saveScore 001A                 ??_DaGetStatus 005E  
                   _saveState 0019                   ??_KeSetMode 005F                     _numScores 0020  
                    _PIR1bits 000F9E                   ??_LcPutChar 006B                     _timeMotor 0E7C  
                    _RCONbits 000FD0                    ?_getColumn 0059                     _timer_SMS 0043  
                   _timerOver 012E                     _timerSong 0037                      _SMSTABLE 0299  
               _joystickMotor 1414                   ??_JoSetMode 005E                     _topScores 0001  
                    _RSI_High 0008                    _ADCON0bits 000FC2                  ??_getPresses 005E  
                    _SMSMotor 14D2                  ??_audioMotor 0065                     _startSong 00B6  
              btSendByte@byte 005E                    ?_isPressed 0059            __end_of_btSendByte 00CE  
                    Espera@ms 0067                     _stopTimer 0174                      _LcGotoXY 1D4C  
              ?_resetPosition 0059                   ??_TiGetTics 0060                    ?_initAudio 0059  
                   _sysMinute 0015                     _sysSecond 0016          _displayScoresMarquee 013E  
               ??_DaSaveScore 006C              ??_DaGetNumScores 005E                   LcGotoXY@Row 0066  
                  ?_menuMotor 0059                   _INTCON2bits 000FF1                     copy_data0 1964  
                   copy_data1 1984               ?_CantaPartBaixa 0059              _modifyTimeString 00DC  
                ??_readEEPROM 005E                menuMotor@state 0079                    _EECON1bits 000FA6  
          __end_of_getPresses 0184                      __Hrparam 0000            __end_of_audioMotor 16AE  
                    __Lrparam 0000                  ??_initKeypad 005F                    ?_timeMotor 0059  
               JoSetMode@mode 005E                    ?_timerOver 0059                ?_joystickMotor 0059  
         __end_of_DaGetStatus 0194          _displayTimeRemaining 0076                    ?_startSong 0059  
                ??_saveEEPROM 005F            __end_of_readEEPROM 00A8                    ?_stopTimer 0059  
       ?_displayScoresMarquee 0059                  ??_modifyTime 005E                _val@time$F1847 0011  
                _resetDisplay 00E2                      __ptext10 0174                      __ptext11 00CE  
          _EscriuPrimeraOrdre 17F6                      __ptext20 0180                      __ptext12 00D8  
                    __ptext21 0076                      __ptext13 0178                      __ptext30 0184  
                    __ptext22 00EC                      __ptext14 00E2                      __ptext31 00F6  
                    __ptext23 1DA6                      __ptext15 0136                      __ptext40 1CB4  
                    __ptext32 0100                      __ptext24 013E                      __ptext16 16D0  
                    __ptext41 0036                      __ptext33 1E6E                      __ptext25 1DFA  
                    __ptext17 18E8                      __ptext50 1EFA                      __ptext42 0190  
                    __ptext34 0146                      __ptext26 1BCC                      __ptext18 1FE2  
                    __ptext51 1EB6                      __ptext43 0194                      __ptext35 1AE4  
                    __ptext27 1C80                      __ptext19 017C                      __ptext60 1DD0  
                    __ptext52 1A82                      __ptext44 0156                      __ptext36 014E  
                    __ptext28 00A8                      __ptext61 1D4C                      __ptext53 176A  
                    __ptext45 1FB0                      __ptext37 0188                      __ptext29 1FFA  
                    __ptext70 0114                      __ptext62 1C48                      __ptext54 0098  
                    __ptext46 1414                      __ptext38 018C                      __ptext71 1580  
                    __ptext63 1314                      __ptext55 004C                      __ptext47 015E  
                    __ptext39 0062                      __ptext80 1F5A                      __ptext72 1C0A  
                    __ptext64 0166                      __ptext56 09A8                      __ptext48 1E92  
                    __ptext81 1E48                      __ptext73 1D1C                      __ptext65 016E  
                    __ptext57 1ED8                      __ptext49 010A                      __ptext74 1F3A  
                    __ptext66 162C                      __ptext58 1E22                      __ptext83 1B88  
                    __ptext75 17F6                      __ptext67 1D7A                      __ptext59 1CE8  
                    __ptext76 1F7A                      __ptext68 14D2                      __ptext77 19B6  
                    __ptext69 1F1A                      __ptext78 1A1C                      __ptext79 11FE  
              CantaPartAlta@c 005F               _lastUserPointer 001B                      _mainMenu 16D0  
          __end_of_initKeypad 1F1A                      _s_Timers 0190                      _initData 1A82  
                    _initMenu 010A                      _initTime 015E           ?_EscriuPrimeraOrdre 0059  
       __end_of_CantaPartAlta 1A78           __end_of_DaSaveScore 1CE8                   ??_dataMotor 006C  
               CantaData@Data 0060                      _sendChar 1FCA                  ?_btAvailable 0059  
                ??_resetTimer 005E            __end_of_saveEEPROM 1EFA                   ??_getColumn 005E  
                    isa$xinst 000000                      _previous 0041                      int$flags 007A  
                    _position 001F                      _stateSMS 003C            __end_of_modifyTime 0138  
                    _stateJoy 002A         ?_displayTimeRemaining 0059          ??_EscriuPrimeraOrdre 005E  
                  LcInit@rows 006B               ??_resetPosition 005E                   _periodTimer 0038  
                 ??_isPressed 005E                    _INTCONbits 000FF2                   ??_initAudio 005F  
          __end_of_resetTimer 00E2                   ??_menuMotor 006E                 ??_LcCursorOff 0066  
               ?_getFullValue 0059                  ??_startTimer 005F                      intlevel2 0000  
            ??_KeGetCharValue 0063                  _timerBounces 0044                    LcPutChar@c 006B  
                 _DaGetStatus 0190               ??_joystickMotor 005F                   ??_timeMotor 006D  
            _state@time$F1845 0013                   ??_timerOver 005E                 ??_JoDirection 005E  
          __end_of_startTimer 00D8                _displayResults 1DFA                   ??_startSong 005F  
              _updateGameTime 1F96                _displaySysTime 00EC        ??_displayScoresMarquee 005E  
                 ??_stopTimer 005E                    _DaFindUser 1FB0             DaFindUser@logUser 006B  
              ??_getFullValue 005E                 _displayLogOut 1BCC                   _DaSaveScore 1CB4  
              _dataMotor$1786 00F5                 _displayString 1DA6                 _SiIsAvailable 016E  
                  _DaSaveUser 0062           __end_of_LcCursorOff 010A             DaSaveUser@regUser 005E  
