

Microchip MPLAB XC8 Assembler V2.36 build 20220127204148 
                                                                                               Tue Jun 14 00:34:13 2022

Microchip MPLAB XC8 C Compiler v2.36 (Pro license) build 20220127204148 Og9s 
     1                           	processor	18F4321
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	plic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    13                           	psect	text0,global,reloc=2,class=CODE,delta=1
    14                           	psect	text1,global,reloc=2,class=CODE,delta=1
    15                           	psect	text2,global,reloc=2,class=CODE,delta=1
    16                           	psect	text3,global,reloc=2,class=CODE,delta=1
    17                           	psect	text4,global,reloc=2,class=CODE,delta=1
    18                           	psect	text5,global,reloc=2,class=CODE,delta=1
    19                           	psect	text6,global,reloc=2,class=CODE,delta=1
    20                           	psect	text7,global,reloc=2,class=CODE,delta=1
    21                           	psect	text8,global,reloc=2,class=CODE,delta=1
    22                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=1
    23                           	psect	text10,global,reloc=2,class=CODE,delta=1
    24                           	psect	text11,global,reloc=2,class=CODE,delta=1
    25                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=1
    26                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=1
    27                           	psect	text14,global,reloc=2,class=CODE,delta=1
    28                           	psect	text15,global,reloc=2,class=CODE,delta=1
    29                           	psect	text16,global,reloc=2,class=CODE,delta=1
    30                           	psect	text17,global,reloc=2,class=CODE,delta=1
    31                           	psect	text18,global,reloc=2,class=CODE,delta=1
    32                           	psect	text19,global,reloc=2,class=CODE,delta=1
    33                           	psect	text20,global,reloc=2,class=CODE,delta=1
    34                           	psect	text21,global,reloc=2,class=CODE,delta=1
    35                           	psect	text22,global,reloc=2,class=CODE,delta=1
    36                           	psect	text23,global,reloc=2,class=CODE,delta=1
    37                           	psect	text24,global,reloc=2,class=CODE,delta=1
    38                           	psect	text25,global,reloc=2,class=CODE,delta=1
    39                           	psect	text26,global,reloc=2,class=CODE,delta=1
    40                           	psect	text27,global,reloc=2,class=CODE,delta=1
    41                           	psect	text28,global,reloc=2,class=CODE,delta=1
    42                           	psect	text29,global,reloc=2,class=CODE,delta=1
    43                           	psect	text30,global,reloc=2,class=CODE,delta=1
    44                           	psect	text31,global,reloc=2,class=CODE,delta=1
    45                           	psect	text32,global,reloc=2,class=CODE,delta=1
    46                           	psect	text33,global,reloc=2,class=CODE,delta=1
    47                           	psect	text34,global,reloc=2,class=CODE,delta=1
    48                           	psect	text35,global,reloc=2,class=CODE,delta=1
    49                           	psect	text36,global,reloc=2,class=CODE,delta=1
    50                           	psect	text37,global,reloc=2,class=CODE,delta=1
    51                           	psect	text38,global,reloc=2,class=CODE,delta=1
    52                           	psect	text39,global,reloc=2,class=CODE,delta=1
    53                           	psect	text40,global,reloc=2,class=CODE,delta=1
    54                           	psect	text41,global,reloc=2,class=CODE,delta=1
    55                           	psect	text42,global,reloc=2,class=CODE,delta=1
    56                           	psect	text43,global,reloc=2,class=CODE,delta=1
    57                           	psect	text44,global,reloc=2,class=CODE,delta=1
    58                           	psect	text45,global,reloc=2,class=CODE,delta=1
    59                           	psect	text46,global,reloc=2,class=CODE,delta=1
    60                           	psect	text47,global,reloc=2,class=CODE,delta=1
    61                           	psect	text48,global,reloc=2,class=CODE,delta=1
    62                           	psect	text49,global,reloc=2,class=CODE,delta=1
    63                           	psect	text50,global,reloc=2,class=CODE,delta=1
    64                           	psect	text51,global,reloc=2,class=CODE,delta=1
    65                           	psect	text52,global,reloc=2,class=CODE,delta=1
    66                           	psect	text53,global,reloc=2,class=CODE,delta=1
    67                           	psect	text54,global,reloc=2,class=CODE,delta=1
    68                           	psect	text55,global,reloc=2,class=CODE,delta=1
    69                           	psect	text56,global,reloc=2,class=CODE,delta=1
    70                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    71                           	psect	text58,global,reloc=2,class=CODE,delta=1
    72                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    73                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    74                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    75                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    76                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    77                           	psect	pa_nodes0,global,class=CODE,delta=1
    78  0000                     
    79                           ; Version 2.36
    80                           ; Generated 28/01/2022 GMT
    81                           ; 
    82                           ; Copyright Â© 2022, Microchip Technology Inc. and its subsidiaries ("Microchip")
    83                           ; All rights reserved.
    84                           ; 
    85                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    86                           ; 
    87                           ; Redistribution and use in source and binary forms, with or without modification, are
    88                           ; permitted provided that the following conditions are met:
    89                           ; 
    90                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    91                           ;        conditions and the following disclaimer.
    92                           ; 
    93                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    94                           ;        of conditions and the following disclaimer in the documentation and/or other
    95                           ;        materials provided with the distribution. Publication is not required when
    96                           ;        this file is used in an embedded application.
    97                           ; 
    98                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    99                           ;        software without specific prior written permission.
   100                           ; 
   101                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   102                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   103                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   104                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   105                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   106                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   107                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   108                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   109                           ; 
   110                           ; 
   111                           ; Code-generator required, PIC18F4321 Definitions
   112                           ; 
   113                           ; SFR Addresses
   114  0000                     
   115                           	psect	idataCOMRAM
   116  00171C                     __pidataCOMRAM:
   117                           	callstack 0
   118                           
   119                           ;initializer for _minute
   120  00171C  03                 	db	3
   121  00171D  00                 	db	0
   122                           
   123                           ;initializer for menuMotor@state
   124  00171E  01                 	db	1
   125                           
   126                           	psect	mediumconst
   127  001EF6                     __pmediumconst:
   128                           	callstack 0
   129  001EF6  00                 	db	0
   130  001EF7                     _RESULTS:
   131                           	callstack 0
   132  001EF7  54                 	db	84
   133  001EF8  49                 	db	73
   134  001EF9  4D                 	db	77
   135  001EFA  45                 	db	69
   136  001EFB  20                 	db	32
   137  001EFC  4C                 	db	76
   138  001EFD  45                 	db	69
   139  001EFE  46                 	db	70
   140  001EFF  54                 	db	84
   141  001F00  3A                 	db	58
   142  001F01  00                 	db	0
   143  001F02  53                 	db	83
   144  001F03  43                 	db	67
   145  001F04  4F                 	db	79
   146  001F05  52                 	db	82
   147  001F06  45                 	db	69
   148  001F07  3A                 	db	58
   149  001F08  00                 	db	0
   150  001F09  00                 	db	0
   151  001F0A  00                 	db	0
   152  001F0B  00                 	db	0
   153  001F0C  00                 	db	0
   154  001F0D                     __end_of_RESULTS:
   155                           	callstack 0
   156  001F0D                     _LOGINMENU:
   157                           	callstack 0
   158  001F0D  31                 	db	49
   159  001F0E  2E                 	db	46
   160  001F0F  4C                 	db	76
   161  001F10  4F                 	db	79
   162  001F11  47                 	db	71
   163  001F12  49                 	db	73
   164  001F13  4E                 	db	78
   165  001F14  00                 	db	0
   166  001F15  00                 	db	0
   167  001F16  00                 	db	0
   168  001F17  00                 	db	0
   169  001F18  32                 	db	50
   170  001F19  2E                 	db	46
   171  001F1A  52                 	db	82
   172  001F1B  45                 	db	69
   173  001F1C  47                 	db	71
   174  001F1D  49                 	db	73
   175  001F1E  53                 	db	83
   176  001F1F  54                 	db	84
   177  001F20  45                 	db	69
   178  001F21  52                 	db	82
   179  001F22  00                 	db	0
   180  001F23                     __end_of_LOGINMENU:
   181                           	callstack 0
   182  001F23                     _TIME:
   183                           	callstack 0
   184  001F23  54                 	db	84
   185  001F24  49                 	db	73
   186  001F25  4D                 	db	77
   187  001F26  45                 	db	69
   188  001F27  20                 	db	32
   189  001F28  52                 	db	82
   190  001F29  45                 	db	69
   191  001F2A  4D                 	db	77
   192  001F2B  41                 	db	65
   193  001F2C  49                 	db	73
   194  001F2D  4E                 	db	78
   195  001F2E  49                 	db	73
   196  001F2F  4E                 	db	78
   197  001F30  47                 	db	71
   198  001F31  3A                 	db	58
   199  001F32  20                 	db	32
   200  001F33                     __end_of_TIME:
   201                           	callstack 0
   202  001F33                     _LOGREGSCREEN:
   203                           	callstack 0
   204  001F33  55                 	db	85
   205  001F34  53                 	db	83
   206  001F35  45                 	db	69
   207  001F36  52                 	db	82
   208  001F37  3A                 	db	58
   209  001F38  00                 	db	0
   210  001F39  50                 	db	80
   211  001F3A  53                 	db	83
   212  001F3B  57                 	db	87
   213  001F3C  44                 	db	68
   214  001F3D  3A                 	db	58
   215  001F3E  00                 	db	0
   216  001F3F                     __end_of_LOGREGSCREEN:
   217                           	callstack 0
   218  001F3F                     _TABLE:
   219                           	callstack 0
   220  001F3F  31                 	db	49
   221  001F40  32                 	db	50
   222  001F41  33                 	db	51
   223  001F42  34                 	db	52
   224  001F43  35                 	db	53
   225  001F44  36                 	db	54
   226  001F45  37                 	db	55
   227  001F46  38                 	db	56
   228  001F47  39                 	db	57
   229  001F48  2A                 	db	42
   230  001F49  30                 	db	48
   231  001F4A  23                 	db	35
   232  001F4B                     __end_of_TABLE:
   233                           	callstack 0
   234  001F4B                     _ERROR:
   235                           	callstack 0
   236  001F4B  45                 	db	69
   237  001F4C  52                 	db	82
   238  001F4D  52                 	db	82
   239  001F4E  4F                 	db	79
   240  001F4F  52                 	db	82
   241  001F50  53                 	db	83
   242  001F51  3A                 	db	58
   243  001F52  20                 	db	32
   244  001F53  00                 	db	0
   245  001F54                     __end_of_ERROR:
   246                           	callstack 0
   247  001F54                     _MAINMENUSIZE:
   248                           	callstack 0
   249  001F54  0E                 	db	14
   250  001F55  0E                 	db	14
   251  001F56  1C                 	db	28
   252  001F57  09                 	db	9
   253  001F58                     __end_of_MAINMENUSIZE:
   254                           	callstack 0
   255  001F58                     _MAINMENU:
   256                           	callstack 0
   257  001F58  31                 	db	49
   258  001F59  2E                 	db	46
   259  001F5A  50                 	db	80
   260  001F5B  4C                 	db	76
   261  001F5C  41                 	db	65
   262  001F5D  59                 	db	89
   263  001F5E  20                 	db	32
   264  001F5F  41                 	db	65
   265  001F60  20                 	db	32
   266  001F61  47                 	db	71
   267  001F62  41                 	db	65
   268  001F63  4D                 	db	77
   269  001F64  45                 	db	69
   270  001F65  00                 	db	0
   271  001F66  00                 	db	0
   272  001F67  00                 	db	0
   273  001F68  00                 	db	0
   274  001F69  00                 	db	0
   275  001F6A  00                 	db	0
   276  001F6B  00                 	db	0
   277  001F6C  00                 	db	0
   278  001F6D  00                 	db	0
   279  001F6E  00                 	db	0
   280  001F6F  00                 	db	0
   281  001F70  00                 	db	0
   282  001F71  00                 	db	0
   283  001F72  00                 	db	0
   284  001F73  00                 	db	0
   285  001F74  32                 	db	50
   286  001F75  2E                 	db	46
   287  001F76  4D                 	db	77
   288  001F77  4F                 	db	79
   289  001F78  44                 	db	68
   290  001F79  49                 	db	73
   291  001F7A  46                 	db	70
   292  001F7B  59                 	db	89
   293  001F7C  20                 	db	32
   294  001F7D  54                 	db	84
   295  001F7E  49                 	db	73
   296  001F7F  4D                 	db	77
   297  001F80  45                 	db	69
   298  001F81  00                 	db	0
   299  001F82  00                 	db	0
   300  001F83  00                 	db	0
   301  001F84  00                 	db	0
   302  001F85  00                 	db	0
   303  001F86  00                 	db	0
   304  001F87  00                 	db	0
   305  001F88  00                 	db	0
   306  001F89  00                 	db	0
   307  001F8A  00                 	db	0
   308  001F8B  00                 	db	0
   309  001F8C  00                 	db	0
   310  001F8D  00                 	db	0
   311  001F8E  00                 	db	0
   312  001F8F  00                 	db	0
   313  001F90  33                 	db	51
   314  001F91  2E                 	db	46
   315  001F92  53                 	db	83
   316  001F93  48                 	db	72
   317  001F94  4F                 	db	79
   318  001F95  57                 	db	87
   319  001F96  20                 	db	32
   320  001F97  47                 	db	71
   321  001F98  45                 	db	69
   322  001F99  4E                 	db	78
   323  001F9A  45                 	db	69
   324  001F9B  52                 	db	82
   325  001F9C  41                 	db	65
   326  001F9D  4C                 	db	76
   327  001F9E  20                 	db	32
   328  001F9F  54                 	db	84
   329  001FA0  4F                 	db	79
   330  001FA1  50                 	db	80
   331  001FA2  20                 	db	32
   332  001FA3  35                 	db	53
   333  001FA4  20                 	db	32
   334  001FA5  53                 	db	83
   335  001FA6  43                 	db	67
   336  001FA7  4F                 	db	79
   337  001FA8  52                 	db	82
   338  001FA9  45                 	db	69
   339  001FAA  53                 	db	83
   340  001FAB  20                 	db	32
   341  001FAC  34                 	db	52
   342  001FAD  2E                 	db	46
   343  001FAE  4C                 	db	76
   344  001FAF  4F                 	db	79
   345  001FB0  47                 	db	71
   346  001FB1  4F                 	db	79
   347  001FB2  55                 	db	85
   348  001FB3  54                 	db	84
   349  001FB4  00                 	db	0
   350  001FB5  00                 	db	0
   351  001FB6  00                 	db	0
   352  001FB7  00                 	db	0
   353  001FB8  00                 	db	0
   354  001FB9  00                 	db	0
   355  001FBA  00                 	db	0
   356  001FBB  00                 	db	0
   357  001FBC  00                 	db	0
   358  001FBD  00                 	db	0
   359  001FBE  00                 	db	0
   360  001FBF  00                 	db	0
   361  001FC0  00                 	db	0
   362  001FC1  00                 	db	0
   363  001FC2  00                 	db	0
   364  001FC3  00                 	db	0
   365  001FC4  00                 	db	0
   366  001FC5  00                 	db	0
   367  001FC6  00                 	db	0
   368  001FC7  00                 	db	0
   369  001FC8                     __end_of_MAINMENU:
   370                           	callstack 0
   371  001FC8                     _SMSTABLE:
   372                           	callstack 0
   373  001FC8  31                 	db	49
   374  001FC9  00                 	db	0
   375  001FCA  00                 	db	0
   376  001FCB  00                 	db	0
   377  001FCC  00                 	db	0
   378  001FCD  00                 	db	0
   379  001FCE  41                 	db	65
   380  001FCF  42                 	db	66
   381  001FD0  43                 	db	67
   382  001FD1  32                 	db	50
   383  001FD2  00                 	db	0
   384  001FD3  00                 	db	0
   385  001FD4  44                 	db	68
   386  001FD5  45                 	db	69
   387  001FD6  46                 	db	70
   388  001FD7  33                 	db	51
   389  001FD8  00                 	db	0
   390  001FD9  00                 	db	0
   391  001FDA  47                 	db	71
   392  001FDB  48                 	db	72
   393  001FDC  49                 	db	73
   394  001FDD  34                 	db	52
   395  001FDE  00                 	db	0
   396  001FDF  00                 	db	0
   397  001FE0  4A                 	db	74
   398  001FE1  4B                 	db	75
   399  001FE2  4C                 	db	76
   400  001FE3  35                 	db	53
   401  001FE4  00                 	db	0
   402  001FE5  00                 	db	0
   403  001FE6  4D                 	db	77
   404  001FE7  4E                 	db	78
   405  001FE8  4F                 	db	79
   406  001FE9  36                 	db	54
   407  001FEA  00                 	db	0
   408  001FEB  00                 	db	0
   409  001FEC  50                 	db	80
   410  001FED  51                 	db	81
   411  001FEE  52                 	db	82
   412  001FEF  53                 	db	83
   413  001FF0  37                 	db	55
   414  001FF1  00                 	db	0
   415  001FF2  54                 	db	84
   416  001FF3  55                 	db	85
   417  001FF4  56                 	db	86
   418  001FF5  38                 	db	56
   419  001FF6  00                 	db	0
   420  001FF7  00                 	db	0
   421  001FF8  57                 	db	87
   422  001FF9  58                 	db	88
   423  001FFA  59                 	db	89
   424  001FFB  5A                 	db	90
   425  001FFC  39                 	db	57
   426  001FFD  00                 	db	0
   427  001FFE                     __end_of_SMSTABLE:
   428                           	callstack 0
   429  0000                     _EECON2	set	4007
   430  0000                     _EEDATA	set	4008
   431  0000                     _EEADR	set	4009
   432  0000                     _RCREG	set	4014
   433  0000                     _TXREG	set	4013
   434  0000                     _SPBRG	set	4015
   435  0000                     _BAUDCONbits	set	4024
   436  0000                     _LATCbits	set	3979
   437  0000                     _TRISCbits	set	3988
   438  0000                     _LATDbits	set	3980
   439  0000                     _TRISDbits	set	3989
   440  0000                     _TMR0L	set	4054
   441  0000                     _TMR0H	set	4055
   442  0000                     _LATC	set	3979
   443  0000                     _ADCON0bits	set	4034
   444  0000                     _T0CONbits	set	4053
   445  0000                     _PORTBbits	set	3969
   446  0000                     _TRISBbits	set	3987
   447  0000                     _RCONbits	set	4048
   448  0000                     _T0CON	set	4053
   449  0000                     _INTCONbits	set	4082
   450  0000                     _INTCON2bits	set	4081
   451  0000                     _PORTDbits	set	3971
   452  0000                     _LATBbits	set	3978
   453  0000                     _PIR1bits	set	3998
   454  0000                     _RCSTAbits	set	4011
   455  0000                     _TXSTAbits	set	4012
   456  0000                     _ADCON2	set	4032
   457  0000                     _ADCON1	set	4033
   458  0000                     _ADCON0	set	4034
   459  0000                     _TRISAbits	set	3986
   460  0000                     _ADRESH	set	4036
   461  0000                     _EECON1bits	set	4006
   462  001FFE  00                 	db	0	; dummy byte at the end
   463  0000                     
   464                           ; #config settings
   465                           
   466                           	psect	cinit
   467  0012F4                     __pcinit:
   468                           	callstack 0
   469  0012F4                     start_initialization:
   470                           	callstack 0
   471  0012F4                     __initialization:
   472                           	callstack 0
   473                           
   474                           ; Initialize objects allocated to COMRAM (3 bytes)
   475                           ; load TBLPTR registers with __pidataCOMRAM
   476  0012F4  0E1C               	movlw	low __pidataCOMRAM
   477  0012F6  6EF6               	movwf	tblptrl,c
   478  0012F8  0E17               	movlw	high __pidataCOMRAM
   479  0012FA  6EF7               	movwf	tblptrh,c
   480  0012FC  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   481  0012FE  6EF8               	movwf	tblptru,c
   482  001300  0009               	tblrd		*+	;fetch initializer
   483  001302  CFF5 F06F          	movff	tablat,__pdataCOMRAM
   484  001306  0009               	tblrd		*+	;fetch initializer
   485  001308  CFF5 F070          	movff	tablat,__pdataCOMRAM+1
   486  00130C  0009               	tblrd		*+	;fetch initializer
   487  00130E  CFF5 F071          	movff	tablat,__pdataCOMRAM+2
   488                           
   489                           ; Clear objects allocated to BANK1 (144 bytes)
   490  001312  EE01  F000         	lfsr	0,__pbssBANK1
   491  001316  0E90               	movlw	144
   492  001318                     clear_0:
   493  001318  6AEE               	clrf	postinc0,c
   494  00131A  06E8               	decf	wreg,f,c
   495  00131C  E1FD               	bnz	clear_0
   496                           
   497                           ; Clear objects allocated to BANK0 (93 bytes)
   498  00131E  EE00  F080         	lfsr	0,__pbssBANK0
   499  001322  0E5D               	movlw	93
   500  001324                     clear_1:
   501  001324  6AEE               	clrf	postinc0,c
   502  001326  06E8               	decf	wreg,f,c
   503  001328  E1FD               	bnz	clear_1
   504                           
   505                           ; Clear objects allocated to COMRAM (69 bytes)
   506  00132A  EE00  F001         	lfsr	0,__pbssCOMRAM
   507  00132E  0E45               	movlw	69
   508  001330                     clear_2:
   509  001330  6AEE               	clrf	postinc0,c
   510  001332  06E8               	decf	wreg,f,c
   511  001334  E1FD               	bnz	clear_2
   512  001336                     end_of_initialization:
   513                           	callstack 0
   514  001336                     __end_of__initialization:
   515                           	callstack 0
   516  001336  9072               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   517  001338  9272               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   518  00133A  0E00               	movlw	low (__Lmediumconst shr (0+16))
   519  00133C  6EF8               	movwf	tblptru,c
   520  00133E  0100               	movlb	0
   521  001340  EFC4  F009         	goto	_main	;jump to C main() function
   522                           
   523                           	psect	bssCOMRAM
   524  000001                     __pbssCOMRAM:
   525                           	callstack 0
   526  000001                     _mUser@EEPROM$F1509:
   527                           	callstack 0
   528  000001                     	ds	18
   529  000013                     _topScores:
   530                           	callstack 0
   531  000013                     	ds	10
   532  00001D                     _second:
   533                           	callstack 0
   534  00001D                     	ds	2
   535  00001F                     _Timer:
   536                           	callstack 0
   537  00001F                     	ds	2
   538  000021                     _h_Tics:
   539                           	callstack 0
   540  000021                     	ds	2
   541  000023                     _state@time$F1562:
   542                           	callstack 0
   543  000023                     	ds	1
   544  000024                     _timer@time$F1561:
   545                           	callstack 0
   546  000024                     	ds	1
   547  000025                     _saveScore:
   548                           	callstack 0
   549  000025                     	ds	1
   550  000026                     _lastUserPointer:
   551                           	callstack 0
   552  000026                     	ds	1
   553  000027                     _status:
   554                           	callstack 0
   555  000027                     	ds	1
   556  000028                     _position:
   557                           	callstack 0
   558  000028                     	ds	1
   559  000029                     _userNum:
   560                           	callstack 0
   561  000029                     	ds	1
   562  00002A                     _state@EEPROM$F1505:
   563                           	callstack 0
   564  00002A                     	ds	1
   565  00002B                     _joyMode:
   566                           	callstack 0
   567  00002B                     	ds	1
   568  00002C                     _stateJoy:
   569                           	callstack 0
   570  00002C                     	ds	1
   571  00002D                     _moved:
   572                           	callstack 0
   573  00002D                     	ds	1
   574  00002E                     _y:
   575                           	callstack 0
   576  00002E                     	ds	1
   577  00002F                     _x:
   578                           	callstack 0
   579  00002F                     	ds	1
   580  000030                     _send:
   581                           	callstack 0
   582  000030                     	ds	1
   583  000031                     _mScore:
   584                           	callstack 0
   585  000031                     	ds	1
   586  000032                     _val:
   587                           	callstack 0
   588  000032                     	ds	1
   589  000033                     _LCDcolm:
   590                           	callstack 0
   591  000033                     	ds	1
   592  000034                     _LCDcol:
   593                           	callstack 0
   594  000034                     	ds	1
   595  000035                     _LCDrow:
   596                           	callstack 0
   597  000035                     	ds	1
   598  000036                     _timer:
   599                           	callstack 0
   600  000036                     	ds	1
   601  000037                     _ColumnAct:
   602                           	callstack 0
   603  000037                     	ds	1
   604  000038                     _RowAct:
   605                           	callstack 0
   606  000038                     	ds	1
   607  000039                     _Columns:
   608                           	callstack 0
   609  000039                     	ds	1
   610  00003A                     _Rows:
   611                           	callstack 0
   612  00003A                     	ds	1
   613  00003B                     _stateSMS:
   614                           	callstack 0
   615  00003B                     	ds	1
   616  00003C                     _state:
   617                           	callstack 0
   618  00003C                     	ds	1
   619  00003D                     _available:
   620                           	callstack 0
   621  00003D                     	ds	1
   622  00003E                     _numPresses:
   623                           	callstack 0
   624  00003E                     	ds	1
   625  00003F                     _pressed:
   626                           	callstack 0
   627  00003F                     	ds	1
   628  000040                     _previous:
   629                           	callstack 0
   630  000040                     	ds	1
   631  000041                     _currentKey:
   632                           	callstack 0
   633  000041                     	ds	1
   634  000042                     _timer_SMS:
   635                           	callstack 0
   636  000042                     	ds	1
   637  000043                     _timerBounces:
   638                           	callstack 0
   639  000043                     	ds	1
   640  000044                     _row:
   641                           	callstack 0
   642  000044                     	ds	1
   643  000045                     _counter:
   644                           	callstack 0
   645  000045                     	ds	1
   646                           
   647                           	psect	dataCOMRAM
   648  00006F                     __pdataCOMRAM:
   649                           	callstack 0
   650  00006F                     _minute:
   651                           	callstack 0
   652  00006F                     	ds	2
   653  000071                     menuMotor@state:
   654                           	callstack 0
   655  000071                     	ds	1
   656                           
   657                           	psect	bssBANK0
   658  000080                     __pbssBANK0:
   659                           	callstack 0
   660  000080                     _s_Timers:
   661                           	callstack 0
   662  000080                     	ds	75
   663  0000CB                     _mUser:
   664                           	callstack 0
   665  0000CB                     	ds	18
   666                           
   667                           	psect	bssBANK1
   668  000100                     __pbssBANK1:
   669                           	callstack 0
   670  000100                     _users:
   671                           	callstack 0
   672  000100                     	ds	144
   673                           
   674                           	psect	cstackCOMRAM
   675  000046                     __pcstackCOMRAM:
   676                           	callstack 0
   677  000046                     
   678                           ; 1 bytes @ 0x0
   679  000046                     	ds	1
   680  000047                     ??_RSI_High:
   681                           
   682                           ; 1 bytes @ 0x1
   683  000047                     	ds	4
   684  00004B                     ??_KeGetGenericValue:
   685  00004B                     ??_getFullValue:
   686  00004B                     ??_EscriuPrimeraOrdre:
   687  00004B                     ??_readUserData:
   688  00004B                     ??_CantaPartAlta:
   689  00004B                     ??_CantaPartBaixa:
   690  00004B                     ?_TiGetTics:
   691                           	callstack 0
   692  00004B                     ?___awmod:
   693                           	callstack 0
   694  00004B                     TiResetTics@Handle:
   695                           	callstack 0
   696  00004B                     _isPressed$530:
   697                           	callstack 0
   698  00004B                     JoSetMode@mode:
   699                           	callstack 0
   700  00004B                     SiSendChar@myByte:
   701                           	callstack 0
   702  00004B                     DaSaveScore@userScore:
   703                           	callstack 0
   704  00004B                     ___lbdiv@divisor:
   705                           	callstack 0
   706  00004B                     ___lbmod@divisor:
   707                           	callstack 0
   708  00004B                     ___awmod@dividend:
   709                           	callstack 0
   710  00004B                     DaSaveUser@regUser:
   711                           	callstack 0
   712                           
   713                           ; 18 bytes @ 0x5
   714  00004B                     	ds	1
   715  00004C                     ??_joystickMotor:
   716  00004C                     KeSetMode@menuMode:
   717                           	callstack 0
   718  00004C                     CantaPartAlta@c:
   719                           	callstack 0
   720  00004C                     CantaPartBaixa@c:
   721                           	callstack 0
   722  00004C                     EscriuPrimeraOrdre@ordre:
   723                           	callstack 0
   724  00004C                     ___lbdiv@dividend:
   725                           	callstack 0
   726  00004C                     ___lbmod@dividend:
   727                           	callstack 0
   728                           
   729                           ; 1 bytes @ 0x6
   730  00004C                     	ds	1
   731  00004D                     ??_TiGetTics:
   732  00004D                     CantaIR@IR:
   733                           	callstack 0
   734  00004D                     CantaData@Data:
   735                           	callstack 0
   736  00004D                     ___lbdiv@counter:
   737                           	callstack 0
   738  00004D                     ___lbmod@counter:
   739                           	callstack 0
   740  00004D                     ___awmod@divisor:
   741                           	callstack 0
   742                           
   743                           ; 2 bytes @ 0x7
   744  00004D                     	ds	1
   745  00004E                     ___lbdiv@quotient:
   746                           	callstack 0
   747  00004E                     ___lbmod@rem:
   748                           	callstack 0
   749                           
   750                           ; 1 bytes @ 0x8
   751  00004E                     	ds	1
   752  00004F                     TiGetTics@Handle:
   753                           	callstack 0
   754  00004F                     getFullValue@generic:
   755                           	callstack 0
   756  00004F                     ___awmod@counter:
   757                           	callstack 0
   758                           
   759                           ; 1 bytes @ 0x9
   760  00004F                     	ds	1
   761  000050                     ___awmod@sign:
   762                           	callstack 0
   763  000050                     TiGetTics@actual:
   764                           	callstack 0
   765                           
   766                           ; 2 bytes @ 0xA
   767  000050                     	ds	2
   768  000052                     ??_SMSMotor:
   769  000052                     ??_KeypadMotor:
   770  000052                     WaitForBusy@Busy:
   771                           	callstack 0
   772  000052                     Espera@Timer:
   773                           	callstack 0
   774                           
   775                           ; 2 bytes @ 0xC
   776  000052                     	ds	1
   777  000053                     LcGotoXY@Row:
   778                           	callstack 0
   779                           
   780                           ; 1 bytes @ 0xD
   781  000053                     	ds	1
   782  000054                     ??_LcGotoXY:
   783  000054                     Espera@ms:
   784                           	callstack 0
   785                           
   786                           ; 2 bytes @ 0xE
   787  000054                     	ds	2
   788  000056                     ??_Espera:
   789  000056                     _LcGotoXY$736:
   790                           	callstack 0
   791                           
   792                           ; 2 bytes @ 0x10
   793  000056                     	ds	1
   794  000057                     LcInit@columns:
   795                           	callstack 0
   796                           
   797                           ; 1 bytes @ 0x11
   798  000057                     	ds	1
   799  000058                     LcInit@rows:
   800                           	callstack 0
   801  000058                     LcGotoXY@Fisics:
   802                           	callstack 0
   803                           
   804                           ; 2 bytes @ 0x12
   805  000058                     	ds	1
   806  000059                     LcInit@i:
   807                           	callstack 0
   808                           
   809                           ; 2 bytes @ 0x13
   810  000059                     	ds	1
   811  00005A                     LcGotoXY@Column:
   812                           	callstack 0
   813                           
   814                           ; 1 bytes @ 0x14
   815  00005A                     	ds	1
   816  00005B                     ??_dataMotor:
   817  00005B                     LcPutChar@c:
   818                           	callstack 0
   819  00005B                     DaFindUser@logUser:
   820                           	callstack 0
   821                           
   822                           ; 18 bytes @ 0x15
   823  00005B                     	ds	1
   824  00005C                     ??_timeMotor:
   825  00005C                     displayMenu@row:
   826                           	callstack 0
   827                           
   828                           ; 1 bytes @ 0x16
   829  00005C                     	ds	1
   830  00005D                     ??_displayMenu:
   831  00005D                     
   832                           ; 1 bytes @ 0x17
   833  00005D                     	ds	4
   834  000061                     displayMenu@menuMode:
   835                           	callstack 0
   836                           
   837                           ; 1 bytes @ 0x1B
   838  000061                     	ds	12
   839  00006D                     ??_menuMotor:
   840  00006D                     
   841                           ; 1 bytes @ 0x27
   842  00006D                     	ds	2
   843  00006F                     
   844                           ; 1 bytes @ 0x29
   845 ;;
   846 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   847 ;;
   848 ;; *************** function _main *****************
   849 ;; Defined at:
   850 ;;		line 38 in file "main.c"
   851 ;; Parameters:    Size  Location     Type
   852 ;;		None
   853 ;; Auto vars:     Size  Location     Type
   854 ;;		None
   855 ;; Return value:  Size  Location     Type
   856 ;;                  1    wreg      void 
   857 ;; Registers used:
   858 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   859 ;; Tracked objects:
   860 ;;		On entry : 0/0
   861 ;;		On exit  : 0/0
   862 ;;		Unchanged: 0/0
   863 ;; Data sizes:     COMRAM   BANK0   BANK1
   864 ;;      Params:         0       0       0
   865 ;;      Locals:         0       0       0
   866 ;;      Temps:          0       0       0
   867 ;;      Totals:         0       0       0
   868 ;;Total ram usage:        0 bytes
   869 ;; Hardware stack levels required when called: 8
   870 ;; This function calls:
   871 ;;		_KeypadMotor
   872 ;;		_LcInit
   873 ;;		_SMSMotor
   874 ;;		_TiInitTimer
   875 ;;		_dataMotor
   876 ;;		_initData
   877 ;;		_initJoystick
   878 ;;		_initKeypad
   879 ;;		_initMenu
   880 ;;		_initSIO
   881 ;;		_initTime
   882 ;;		_joystickMotor
   883 ;;		_menuMotor
   884 ;;		_timeMotor
   885 ;; This function is called by:
   886 ;;		Startup code after reset
   887 ;; This function uses a non-reentrant model
   888 ;;
   889                           
   890                           	psect	text0
   891  001388                     __ptext0:
   892                           	callstack 0
   893  001388                     _main:
   894                           	callstack 23
   895                           
   896                           ;incstack = 0
   897  001388  EC39  F00A         	call	_TiInitTimer	;wreg free
   898  00138C  ECC5  F00A         	call	_initJoystick	;wreg free
   899  001390  ECF6  F00A         	call	_initKeypad	;wreg free
   900  001394  0E10               	movlw	16
   901  001396  6E57               	movwf	LcInit@columns^0,c
   902  001398  0E02               	movlw	2
   903  00139A  EC5E  F006         	call	_LcInit
   904  00139E  EC38  F00B         	call	_initSIO	;wreg free
   905  0013A2  EC78  F00B         	call	_initMenu	;wreg free
   906  0013A6  EC74  F00B         	call	_initTime	;wreg free
   907  0013AA  EC7F  F008         	call	_initData	;wreg free
   908  0013AE                     l4674:
   909  0013AE  EC23  F007         	call	_SMSMotor	;wreg free
   910  0013B2  ECD3  F005         	call	_KeypadMotor	;wreg free
   911  0013B6  EC1B  F000         	call	_menuMotor	;wreg free
   912  0013BA  ECC1  F006         	call	_joystickMotor	;wreg free
   913  0013BE  ECBA  F002         	call	_dataMotor	;wreg free
   914  0013C2  EC45  F005         	call	_timeMotor	;wreg free
   915  0013C6  D7F3               	goto	l4674
   916  0013C8                     __end_of_main:
   917                           	callstack 0
   918                           
   919 ;; *************** function _timeMotor *****************
   920 ;; Defined at:
   921 ;;		line 21 in file "time.c"
   922 ;; Parameters:    Size  Location     Type
   923 ;;		None
   924 ;; Auto vars:     Size  Location     Type
   925 ;;		None
   926 ;; Return value:  Size  Location     Type
   927 ;;                  1    wreg      void 
   928 ;; Registers used:
   929 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   930 ;; Tracked objects:
   931 ;;		On entry : 0/0
   932 ;;		On exit  : 0/0
   933 ;;		Unchanged: 0/0
   934 ;; Data sizes:     COMRAM   BANK0   BANK1
   935 ;;      Params:         0       0       0
   936 ;;      Locals:         0       0       0
   937 ;;      Temps:          2       0       0
   938 ;;      Totals:         2       0       0
   939 ;;Total ram usage:        2 bytes
   940 ;; Hardware stack levels used: 1
   941 ;; Hardware stack levels required when called: 6
   942 ;; This function calls:
   943 ;;		_LcGotoXY
   944 ;;		_LcPutChar
   945 ;;		_TiGetTics
   946 ;;		_TiResetTics
   947 ;; This function is called by:
   948 ;;		_main
   949 ;; This function uses a non-reentrant model
   950 ;;
   951                           
   952                           	psect	text1
   953  000A8A                     __ptext1:
   954                           	callstack 0
   955  000A8A                     _timeMotor:
   956                           	callstack 24
   957                           
   958                           ;time.c: 22:     switch (state){
   959                           
   960                           ;incstack = 0
   961  000A8A  D06D               	goto	l4650
   962  000A8C                     l4586:
   963                           
   964                           ;time.c: 27:             if (TiGetTics(timer) >= 1200){
   965  000A8C  5024               	movf	_timer@time$F1561^0,w,c
   966  000A8E  EC8E  F00A         	call	_TiGetTics
   967  000A92  BE4C               	btfsc	(?_TiGetTics+1)^0,7,c
   968  000A94  0012               	return	
   969  000A96  ECA6  F002         	call	PL58	;call to abstracted procedure
   970  000A9A  A0D8               	btfss	status,0,c
   971  000A9C  0012               	return	
   972                           
   973                           ;time.c: 28:                 TiResetTics(timer);
   974  000A9E  5024               	movf	_timer@time$F1561^0,w,c
   975  000AA0  EC13  F00B         	call	_TiResetTics
   976                           
   977                           ;time.c: 29:                 state = 2;
   978  000AA4  0E02               	movlw	2
   979  000AA6  6E23               	movwf	_state@time$F1562^0,c
   980                           
   981                           ;time.c: 30:                 LcGotoXY(0,1);
   982  000AA8  0E01               	movlw	1
   983  000AAA  6E53               	movwf	LcGotoXY@Row^0,c
   984  000AAC  0E00               	movlw	0
   985  000AAE  EC7A  F007         	call	_LcGotoXY
   986                           
   987                           ;time.c: 31:                 if (second[1] == 0){
   988  000AB2  501E               	movf	(_second+1)^0,w,c
   989  000AB4  E115               	bnz	l4608
   990                           
   991                           ;time.c: 32:                     second[1] = 9;
   992  000AB6  0E09               	movlw	9
   993  000AB8  6E1E               	movwf	(_second+1)^0,c
   994                           
   995                           ;time.c: 33:                     if (second[0] == 0){
   996  000ABA  501D               	movf	_second^0,w,c
   997  000ABC  E10F               	bnz	l4606
   998                           
   999                           ;time.c: 34:                         second[0] = 5;
  1000  000ABE  0E05               	movlw	5
  1001  000AC0  6E1D               	movwf	_second^0,c
  1002                           
  1003                           ;time.c: 35:                         if (minute[1] == 0){
  1004  000AC2  5070               	movf	(_minute+1)^0,w,c
  1005  000AC4  E109               	bnz	l4604
  1006                           
  1007                           ;time.c: 36:                             minute[1] = 9;
  1008  000AC6  0E09               	movlw	9
  1009  000AC8  6E70               	movwf	(_minute+1)^0,c
  1010                           
  1011                           ;time.c: 37:                             if (minute[0] == 0){
  1012  000ACA  506F               	movf	_minute^0,w,c
  1013  000ACC  E103               	bnz	l4602
  1014  000ACE                     u4150:
  1015                           
  1016                           ;time.c: 38:                                 state = 10;
  1017  000ACE  0E0A               	movlw	10
  1018  000AD0  6E23               	movwf	_state@time$F1562^0,c
  1019                           
  1020                           ;time.c: 39:                             }else{
  1021  000AD2  0C0A               	retlw	10
  1022  000AD4                     l4602:
  1023                           
  1024                           ;time.c: 40:                                 minute[0]--;
  1025  000AD4  066F               	decf	_minute^0,f,c
  1026  000AD6  0012               	return	
  1027  000AD8                     l4604:
  1028                           
  1029                           ;time.c: 43:                             minute[1]--;
  1030  000AD8  0670               	decf	(_minute+1)^0,f,c
  1031  000ADA  0012               	return	
  1032  000ADC                     l4606:
  1033                           
  1034                           ;time.c: 46:                         second[0]--;
  1035  000ADC  061D               	decf	_second^0,f,c
  1036  000ADE  0012               	return	
  1037  000AE0                     l4608:
  1038                           
  1039                           ;time.c: 49:                     second[1]--;
  1040  000AE0  061E               	decf	(_second+1)^0,f,c
  1041  000AE2  0012               	return	
  1042  000AE4                     l4610:
  1043                           
  1044                           ;time.c: 55:             LcPutChar(minute[0]+'0');
  1045  000AE4  506F               	movf	_minute^0,w,c
  1046  000AE6  0F30               	addlw	48
  1047  000AE8  EC50  F009         	call	_LcPutChar
  1048                           
  1049                           ;time.c: 56:             state = 3;
  1050  000AEC  0E03               	movlw	3
  1051  000AEE  6E23               	movwf	_state@time$F1562^0,c
  1052                           
  1053                           ;time.c: 57:             break;
  1054  000AF0  0C03               	retlw	3
  1055  000AF2                     l4614:
  1056                           
  1057                           ;time.c: 60:             LcPutChar(minute[1]+'0');
  1058  000AF2  5070               	movf	(_minute+1)^0,w,c
  1059  000AF4  0F30               	addlw	48
  1060  000AF6  EC50  F009         	call	_LcPutChar
  1061                           
  1062                           ;time.c: 61:             state = 4;
  1063  000AFA  0E04               	movlw	4
  1064  000AFC  6E23               	movwf	_state@time$F1562^0,c
  1065                           
  1066                           ;time.c: 62:             break;
  1067  000AFE  0C04               	retlw	4
  1068  000B00                     l4618:
  1069                           
  1070                           ;time.c: 65:             LcPutChar(':');
  1071  000B00  0E3A               	movlw	58
  1072  000B02  EC50  F009         	call	_LcPutChar
  1073                           
  1074                           ;time.c: 66:             state = 5;
  1075  000B06  0E05               	movlw	5
  1076  000B08  6E23               	movwf	_state@time$F1562^0,c
  1077                           
  1078                           ;time.c: 67:             break;
  1079  000B0A  0C05               	retlw	5
  1080  000B0C                     l4622:
  1081                           
  1082                           ;time.c: 70:             LcPutChar(second[0]+'0');
  1083  000B0C  501D               	movf	_second^0,w,c
  1084  000B0E  0F30               	addlw	48
  1085  000B10  EC50  F009         	call	_LcPutChar
  1086                           
  1087                           ;time.c: 71:             state = 6;
  1088  000B14  0E06               	movlw	6
  1089  000B16  6E23               	movwf	_state@time$F1562^0,c
  1090                           
  1091                           ;time.c: 72:             break;
  1092  000B18  0C06               	retlw	6
  1093  000B1A                     l4626:
  1094                           
  1095                           ;time.c: 75:             LcPutChar(second[1]+'0');
  1096  000B1A  501E               	movf	(_second+1)^0,w,c
  1097  000B1C  0F30               	addlw	48
  1098  000B1E  EC50  F009         	call	_LcPutChar
  1099                           
  1100                           ;time.c: 76:             state = 1;
  1101  000B22  0E01               	movlw	1
  1102  000B24  6E23               	movwf	_state@time$F1562^0,c
  1103                           
  1104                           ;time.c: 77:             break;
  1105  000B26  0C01               	retlw	1
  1106  000B28                     l4630:
  1107                           
  1108                           ;time.c: 80:             LcPutChar(minute[0]+'0');
  1109  000B28  506F               	movf	_minute^0,w,c
  1110  000B2A  0F30               	addlw	48
  1111  000B2C  EC50  F009         	call	_LcPutChar
  1112                           
  1113                           ;time.c: 81:             state = 8;
  1114  000B30  0E08               	movlw	8
  1115  000B32  6E23               	movwf	_state@time$F1562^0,c
  1116                           
  1117                           ;time.c: 82:             break;
  1118  000B34  0C08               	retlw	8
  1119  000B36                     l4634:
  1120                           
  1121                           ;time.c: 85:             LcPutChar(minute[1]+'0');
  1122  000B36  5070               	movf	(_minute+1)^0,w,c
  1123  000B38  0F30               	addlw	48
  1124  000B3A  EC50  F009         	call	_LcPutChar
  1125                           
  1126                           ;time.c: 86:             state = 9;
  1127  000B3E  0E09               	movlw	9
  1128  000B40  6E23               	movwf	_state@time$F1562^0,c
  1129                           
  1130                           ;time.c: 87:             break;
  1131  000B42  0C09               	retlw	9
  1132  000B44                     l4638:
  1133                           
  1134                           ;time.c: 90:             LcPutChar(':');
  1135  000B44  0E3A               	movlw	58
  1136  000B46  EC50  F009         	call	_LcPutChar
  1137  000B4A  D7C1               	goto	u4150
  1138  000B4C                     l4642:
  1139                           
  1140                           ;time.c: 95:             LcPutChar(second[0]+'0');
  1141  000B4C  501D               	movf	_second^0,w,c
  1142  000B4E  0F30               	addlw	48
  1143  000B50  EC50  F009         	call	_LcPutChar
  1144                           
  1145                           ;time.c: 96:             state = 11;
  1146  000B54  0E0B               	movlw	11
  1147  000B56  6E23               	movwf	_state@time$F1562^0,c
  1148                           
  1149                           ;time.c: 97:             break;
  1150  000B58  0C0B               	retlw	11
  1151  000B5A                     l4646:
  1152                           
  1153                           ;time.c: 100:             LcPutChar(second[1]+'0');
  1154  000B5A  501E               	movf	(_second+1)^0,w,c
  1155  000B5C  0F30               	addlw	48
  1156  000B5E  EC50  F009         	call	_LcPutChar
  1157                           
  1158                           ;time.c: 101:             state = 0;
  1159  000B62  6A23               	clrf	_state@time$F1562^0,c
  1160                           
  1161                           ;time.c: 102:     }
  1162  000B64  0012               	return	
  1163  000B66                     l4650:
  1164  000B66  5023               	movf	_state@time$F1562^0,w,c
  1165  000B68  6E5C               	movwf	??_timeMotor^0,c
  1166  000B6A  6A5D               	clrf	(??_timeMotor+1)^0,c
  1167                           
  1168                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1169                           ; Switch size 1, requested type "space"
  1170                           ; Number of cases is 1, Range of values is 0 to 0
  1171                           ; switch strategies available:
  1172                           ; Name         Instructions Cycles
  1173                           ; simple_byte            4     3 (average)
  1174                           ;	Chosen strategy is simple_byte
  1175  000B6C  505D               	movf	(??_timeMotor+1)^0,w,c
  1176  000B6E  A4D8               	btfss	status,2,c
  1177  000B70  0012               	return	
  1178                           
  1179                           ; Switch size 1, requested type "space"
  1180                           ; Number of cases is 12, Range of values is 0 to 11
  1181                           ; switch strategies available:
  1182                           ; Name         Instructions Cycles
  1183                           ; simple_byte           37    19 (average)
  1184                           ;	Chosen strategy is simple_byte
  1185  000B72  505C               	movf	??_timeMotor^0,w,c
  1186  000B74  B4D8               	btfsc	status,2,c
  1187  000B76  0012               	return	
  1188  000B78  0A01               	xorlw	1	; case 1
  1189  000B7A  E088               	bz	l4586
  1190  000B7C  0A03               	xorlw	3	; case 2
  1191  000B7E  E0B2               	bz	l4610
  1192  000B80  0A01               	xorlw	1	; case 3
  1193  000B82  E0B7               	bz	l4614
  1194  000B84  0A07               	xorlw	7	; case 4
  1195  000B86  E0BC               	bz	l4618
  1196  000B88  0A01               	xorlw	1	; case 5
  1197  000B8A  E0C0               	bz	l4622
  1198  000B8C  0A03               	xorlw	3	; case 6
  1199  000B8E  E0C5               	bz	l4626
  1200  000B90  0A01               	xorlw	1	; case 7
  1201  000B92  E0CA               	bz	l4630
  1202  000B94  0A0F               	xorlw	15	; case 8
  1203  000B96  E0CF               	bz	l4634
  1204  000B98  0A01               	xorlw	1	; case 9
  1205  000B9A  E0D4               	bz	l4638
  1206  000B9C  0A03               	xorlw	3	; case 10
  1207  000B9E  E0D6               	bz	l4642
  1208  000BA0  0A01               	xorlw	1	; case 11
  1209  000BA2  E0DB               	bz	l4646
  1210  000BA4  0012               	return		;funcret
  1211  000BA6                     __end_of_timeMotor:
  1212                           	callstack 0
  1213                           
  1214 ;; *************** function _menuMotor *****************
  1215 ;; Defined at:
  1216 ;;		line 29 in file "Menu.c"
  1217 ;; Parameters:    Size  Location     Type
  1218 ;;		None
  1219 ;; Auto vars:     Size  Location     Type
  1220 ;;		None
  1221 ;; Return value:  Size  Location     Type
  1222 ;;                  1    wreg      void 
  1223 ;; Registers used:
  1224 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1225 ;; Tracked objects:
  1226 ;;		On entry : 0/0
  1227 ;;		On exit  : 0/0
  1228 ;;		Unchanged: 0/0
  1229 ;; Data sizes:     COMRAM   BANK0   BANK1
  1230 ;;      Params:         0       0       0
  1231 ;;      Locals:         0       0       0
  1232 ;;      Temps:          2       0       0
  1233 ;;      Totals:         2       0       0
  1234 ;;Total ram usage:        2 bytes
  1235 ;; Hardware stack levels used: 1
  1236 ;; Hardware stack levels required when called: 7
  1237 ;; This function calls:
  1238 ;;		_DaFindUser
  1239 ;;		_DaGetIdle
  1240 ;;		_DaGetStatus
  1241 ;;		_DaSaveScore
  1242 ;;		_DaSaveUser
  1243 ;;		_JoDirection
  1244 ;;		_JoMoved
  1245 ;;		_JoSetMode
  1246 ;;		_KeGetCharValue
  1247 ;;		_KeGetGenericValue
  1248 ;;		_KeSetMode
  1249 ;;		_LcClear
  1250 ;;		_LcCursorOff
  1251 ;;		_LcCursorOn
  1252 ;;		_LcGotoXY
  1253 ;;		_LcPutChar
  1254 ;;		_SiIsAvailable
  1255 ;;		_SiReadByte
  1256 ;;		_SiRecievedByte
  1257 ;;		_SiSendChar
  1258 ;;		_TiGetTics
  1259 ;;		_TiResetTics
  1260 ;;		___lbdiv
  1261 ;;		___lbmod
  1262 ;;		_displayMenu
  1263 ;;		_displayTimeRemaining
  1264 ;;		_getPresses
  1265 ;;		_isPressed
  1266 ;;		_startTimer
  1267 ;;		_stopTimer
  1268 ;; This function is called by:
  1269 ;;		_main
  1270 ;; This function uses a non-reentrant model
  1271 ;;
  1272                           
  1273                           	psect	text2
  1274  000036                     __ptext2:
  1275                           	callstack 0
  1276  000036                     _menuMotor:
  1277                           	callstack 23
  1278                           
  1279                           ;Menu.c: 30:     static char state = 1;;Menu.c: 31:     switch (state){
  1280                           
  1281                           ;incstack = 0
  1282  000036  D237               	goto	l4280
  1283  000038                     l3954:
  1284                           
  1285                           ;Menu.c: 33:             displayMenu(0,0);
  1286  000038  0E00               	movlw	0
  1287  00003A  6E5C               	movwf	displayMenu@row^0,c
  1288  00003C  EC43  F004         	call	_displayMenu
  1289                           
  1290                           ;Menu.c: 34:             if (LCDrow == 2){
  1291  000040  0E02               	movlw	2
  1292  000042  1835               	xorwf	_LCDrow^0,w,c
  1293  000044  A4D8               	btfss	status,2,c
  1294  000046  0012               	return	
  1295                           
  1296                           ;Menu.c: 35:                 LcCursorOff();
  1297  000048  EC5A  F00B         	call	_LcCursorOff	;wreg free
  1298                           
  1299                           ;Menu.c: 36:                 KeSetMode(0);
  1300  00004C  0E00               	movlw	0
  1301  00004E  ECA1  F00A         	call	_KeSetMode
  1302                           
  1303                           ;Menu.c: 37:                 state = 2;
  1304  000052  0E02               	movlw	2
  1305  000054  6E71               	movwf	menuMotor@state^0,c
  1306  000056  0C02               	retlw	2
  1307  000058                     l3962:
  1308                           
  1309                           ;Menu.c: 41:             if (isPressed()){
  1310  000058  EC21  F00B         	call	_isPressed	;wreg free
  1311  00005C  0900               	iorlw	0
  1312  00005E  B4D8               	btfsc	status,2,c
  1313  000060  0012               	return	
  1314                           
  1315                           ;Menu.c: 42:                 val = KeGetGenericValue() - '0';
  1316  000062  EC4F  F00A         	call	_KeGetGenericValue	;wreg free
  1317  000066  0FD0               	addlw	208
  1318  000068  6E32               	movwf	_val^0,c
  1319                           
  1320                           ;Menu.c: 43:                 if (val == 1||val == 2){
  1321  00006A  0432               	decf	_val^0,w,c
  1322  00006C  E004               	bz	u3300
  1323  00006E  0E02               	movlw	2
  1324  000070  1832               	xorwf	_val^0,w,c
  1325  000072  A4D8               	btfss	status,2,c
  1326  000074  0012               	return	
  1327  000076                     u3300:
  1328                           
  1329                           ;Menu.c: 44:                     LcClear();
  1330  000076  EC2D  F00B         	call	_LcClear	;wreg free
  1331                           
  1332                           ;Menu.c: 45:                     LcGotoXY(0,0);
  1333  00007A  0E00               	movlw	0
  1334  00007C  6A53               	clrf	LcGotoXY@Row^0,c
  1335  00007E  EC7A  F007         	call	_LcGotoXY
  1336                           
  1337                           ;Menu.c: 46:                     KeSetMode(1);
  1338  000082  0E01               	movlw	1
  1339  000084  ECA1  F00A         	call	_KeSetMode
  1340                           
  1341                           ;Menu.c: 47:                     LCDcol = LCDrow = 0;
  1342  000088  6A35               	clrf	_LCDrow^0,c
  1343  00008A  6A34               	clrf	_LCDcol^0,c
  1344                           
  1345                           ;Menu.c: 48:                     state = 3;
  1346  00008C  0E03               	movlw	3
  1347  00008E  6E71               	movwf	menuMotor@state^0,c
  1348  000090  0C03               	retlw	3
  1349  000092                     l3976:
  1350                           
  1351                           ;Menu.c: 54:             displayMenu(1,0);
  1352  000092  0E00               	movlw	0
  1353  000094  6E5C               	movwf	displayMenu@row^0,c
  1354  000096  0E01               	movlw	1
  1355  000098  EC43  F004         	call	_displayMenu
  1356                           
  1357                           ;Menu.c: 55:             if (LCDrow == 2){
  1358  00009C  0E02               	movlw	2
  1359  00009E  1835               	xorwf	_LCDrow^0,w,c
  1360  0000A0  A4D8               	btfss	status,2,c
  1361  0000A2  0012               	return	
  1362                           
  1363                           ;Menu.c: 56:                 LCDrow = 0;
  1364  0000A4  6A35               	clrf	_LCDrow^0,c
  1365                           
  1366                           ;Menu.c: 57:                 LCDcol = 5;
  1367  0000A6  0E05               	movlw	5
  1368  0000A8  6E34               	movwf	_LCDcol^0,c
  1369                           
  1370                           ;Menu.c: 58:                 LcGotoXY(LCDcol,LCDrow);
  1371  0000AA  DA60               	call	PL68	;call to abstracted procedure
  1372  0000AC  EC7A  F007         	call	_LcGotoXY
  1373                           
  1374                           ;Menu.c: 59:                 LcCursorOn();
  1375  0000B0  EC55  F00B         	call	_LcCursorOn	;wreg free
  1376                           
  1377                           ;Menu.c: 60:                 state = 4;
  1378  0000B4  0E04               	movlw	4
  1379  0000B6  6E71               	movwf	menuMotor@state^0,c
  1380  0000B8  0C04               	retlw	4
  1381  0000BA                     l3988:
  1382                           
  1383                           ;Menu.c: 64:             if (LCDcol >= 12 && TiGetTics(timer) >= 1200){
  1384  0000BA  0E0B               	movlw	11
  1385  0000BC  6434               	cpfsgt	_LCDcol^0,c
  1386  0000BE  D00A               	goto	l3994
  1387  0000C0  5036               	movf	_timer^0,w,c
  1388  0000C2  EC8E  F00A         	call	_TiGetTics
  1389  0000C6  BE4C               	btfsc	(?_TiGetTics+1)^0,7,c
  1390  0000C8  D005               	goto	l3994
  1391  0000CA  DA40               	call	PL58	;call to abstracted procedure
  1392  0000CC  E303               	bnc	l3994
  1393  0000CE                     u3330:
  1394                           
  1395                           ;Menu.c: 65:                 state = 5;
  1396  0000CE  0E05               	movlw	5
  1397  0000D0  6E71               	movwf	menuMotor@state^0,c
  1398                           
  1399                           ;Menu.c: 66:             }else if (isPressed()){
  1400  0000D2  0C05               	retlw	5
  1401  0000D4                     l3994:
  1402  0000D4  EC21  F00B         	call	_isPressed	;wreg free
  1403  0000D8  0900               	iorlw	0
  1404  0000DA  B4D8               	btfsc	status,2,c
  1405  0000DC  0012               	return	
  1406                           
  1407                           ;Menu.c: 67:                 TiResetTics(timer);
  1408  0000DE  5036               	movf	_timer^0,w,c
  1409  0000E0  EC13  F00B         	call	_TiResetTics
  1410                           
  1411                           ;Menu.c: 68:                 if (getPresses() == 2){
  1412  0000E4  EC84  F00B         	call	_getPresses	;wreg free
  1413  0000E8  0A02               	xorlw	2
  1414  0000EA  E104               	bnz	l4004
  1415                           
  1416                           ;Menu.c: 69:                     LcGotoXY(LCDcol,LCDrow);
  1417  0000EC  DA3F               	call	PL68	;call to abstracted procedure
  1418  0000EE  EC7A  F007         	call	_LcGotoXY
  1419                           
  1420                           ;Menu.c: 70:                     LCDcol--;
  1421  0000F2  0634               	decf	_LCDcol^0,f,c
  1422  0000F4                     l4004:
  1423                           
  1424                           ;Menu.c: 72:                 if (KeGetGenericValue() != '#'){
  1425  0000F4  EC4F  F00A         	call	_KeGetGenericValue	;wreg free
  1426  0000F8  0A23               	xorlw	35
  1427  0000FA  E0E9               	bz	u3330
  1428                           
  1429                           ;Menu.c: 73:                     mUser.username[LCDcol-4] = KeGetCharValue();
  1430  0000FC  DA2C               	call	PL60	;call to abstracted procedure
  1431  0000FE  EC64  F00B         	call	_KeGetCharValue	;wreg free
  1432  000102  6EDF               	movwf	indf2,c
  1433                           
  1434                           ;Menu.c: 74:                     LcPutChar(mUser.username[LCDcol-4]);
  1435  000104  DA28               	call	PL60	;call to abstracted procedure
  1436  000106  50DF               	movf	indf2,w,c
  1437  000108  EC50  F009         	call	_LcPutChar
  1438  00010C                     l4010:
  1439                           
  1440                           ;Menu.c: 75:                     LCDcol++;
  1441  00010C  2A34               	incf	_LCDcol^0,f,c
  1442                           
  1443                           ;Menu.c: 79:                 } else {
  1444  00010E  0012               	return	
  1445  000110                     l4014:
  1446                           
  1447                           ;Menu.c: 87:             mUser.username[LCDcol-4] = '\0';
  1448  000110  DA22               	call	PL60	;call to abstracted procedure
  1449  000112  6ADF               	clrf	indf2,c
  1450                           
  1451                           ;Menu.c: 88:             LCDrow = 1;
  1452  000114  0E01               	movlw	1
  1453  000116  6E35               	movwf	_LCDrow^0,c
  1454                           
  1455                           ;Menu.c: 89:             LCDcol = 5;
  1456  000118  0E05               	movlw	5
  1457  00011A  6E34               	movwf	_LCDcol^0,c
  1458                           
  1459                           ;Menu.c: 90:             KeSetMode(1);
  1460  00011C  0E01               	movlw	1
  1461  00011E  ECA1  F00A         	call	_KeSetMode
  1462                           
  1463                           ;Menu.c: 91:             LcGotoXY(LCDcol,LCDrow);
  1464  000122  DA24               	call	PL68	;call to abstracted procedure
  1465  000124  EC7A  F007         	call	_LcGotoXY
  1466                           
  1467                           ;Menu.c: 92:             state = 6;
  1468  000128  0E06               	movlw	6
  1469  00012A  6E71               	movwf	menuMotor@state^0,c
  1470                           
  1471                           ;Menu.c: 93:             break;
  1472  00012C  0C06               	retlw	6
  1473  00012E                     l4026:
  1474                           
  1475                           ;Menu.c: 95:             if (isPressed()){
  1476  00012E  EC21  F00B         	call	_isPressed	;wreg free
  1477  000132  0900               	iorlw	0
  1478  000134  B4D8               	btfsc	status,2,c
  1479  000136  0012               	return	
  1480                           
  1481                           ;Menu.c: 96:                 if (getPresses() == 2){
  1482  000138  EC84  F00B         	call	_getPresses	;wreg free
  1483  00013C  0A02               	xorlw	2
  1484  00013E  E104               	bnz	l4034
  1485                           
  1486                           ;Menu.c: 97:                     LcGotoXY(LCDcol,LCDrow);
  1487  000140  DA15               	call	PL68	;call to abstracted procedure
  1488  000142  EC7A  F007         	call	_LcGotoXY
  1489                           
  1490                           ;Menu.c: 98:                     LCDcol--;
  1491  000146  0634               	decf	_LCDcol^0,f,c
  1492  000148                     l4034:
  1493                           
  1494                           ;Menu.c: 101:                 if (KeGetGenericValue() != '#'){
  1495  000148  EC4F  F00A         	call	_KeGetGenericValue	;wreg free
  1496  00014C  0A23               	xorlw	35
  1497  00014E  E009               	bz	l4042
  1498                           
  1499                           ;Menu.c: 102:                     mUser.password[LCDcol-4] = KeGetCharValue();
  1500  000150  D9F8               	call	PL56	;call to abstracted procedure
  1501  000152  EC64  F00B         	call	_KeGetCharValue	;wreg free
  1502  000156  6EDF               	movwf	indf2,c
  1503                           
  1504                           ;Menu.c: 103:                     LcPutChar(mUser.password[LCDcol-4]);
  1505  000158  D9F4               	call	PL56	;call to abstracted procedure
  1506  00015A  50DF               	movf	indf2,w,c
  1507  00015C  EC50  F009         	call	_LcPutChar
  1508  000160  D7D5               	goto	l4010
  1509  000162                     l4042:
  1510                           
  1511                           ;Menu.c: 106:                     mUser.password[LCDcol-4] = '\0';
  1512  000162  D9EF               	call	PL56	;call to abstracted procedure
  1513  000164  6ADF               	clrf	indf2,c
  1514                           
  1515                           ;Menu.c: 107:                     state = 7;
  1516  000166  0E07               	movlw	7
  1517  000168  6E71               	movwf	menuMotor@state^0,c
  1518  00016A  0C07               	retlw	7
  1519  00016C                     l4046:
  1520                           
  1521                           ;Menu.c: 113:             if (val == 1){
  1522  00016C  0432               	decf	_val^0,w,c
  1523  00016E  E10C               	bnz	l4050
  1524                           
  1525                           ;Menu.c: 114:                 DaFindUser(mUser);
  1526  000170  EE20  F0CB         	lfsr	2,_mUser
  1527  000174  EE00  F05B         	lfsr	0,DaFindUser@logUser
  1528  000178  0E11               	movlw	17
  1529  00017A                     u3411:
  1530  00017A  CFDB FFEB          	movff	plusw2,plusw0
  1531  00017E  06E8               	decf	wreg,f,c
  1532  000180  E2FC               	bc	u3411
  1533  000182  ECB3  F00A         	call	_DaFindUser	;wreg free
  1534                           
  1535                           ;Menu.c: 116:             } else {
  1536  000186  D00B               	goto	l4052
  1537  000188                     l4050:
  1538                           
  1539                           ;Menu.c: 117:                 DaSaveUser(mUser);
  1540  000188  EE20  F0CB         	lfsr	2,_mUser
  1541  00018C  EE00  F04B         	lfsr	0,DaSaveUser@regUser
  1542  000190  0E11               	movlw	17
  1543  000192                     u3421:
  1544  000192  CFDB FFEB          	movff	plusw2,plusw0
  1545  000196  06E8               	decf	wreg,f,c
  1546  000198  E2FC               	bc	u3421
  1547  00019A  ECD6  F00A         	call	_DaSaveUser	;wreg free
  1548  00019E                     l4052:
  1549                           
  1550                           ;Menu.c: 119:             state = 8;
  1551  00019E  0E08               	movlw	8
  1552  0001A0  6E71               	movwf	menuMotor@state^0,c
  1553                           
  1554                           ;Menu.c: 120:             break;
  1555  0001A2  0C08               	retlw	8
  1556  0001A4                     l4054:
  1557                           
  1558                           ;Menu.c: 122:             if (DaGetIdle()){
  1559  0001A4  EC6C  F00B         	call	_DaGetIdle	;wreg free
  1560  0001A8  0900               	iorlw	0
  1561  0001AA  B4D8               	btfsc	status,2,c
  1562  0001AC  0012               	return	
  1563                           
  1564                           ;Menu.c: 123:                 if (val == 1){
  1565  0001AE  0432               	decf	_val^0,w,c
  1566  0001B0  E112               	bnz	l4070
  1567                           
  1568                           ;Menu.c: 124:                     KeSetMode(0);
  1569  0001B2  0E00               	movlw	0
  1570  0001B4  ECA1  F00A         	call	_KeSetMode
  1571                           
  1572                           ;Menu.c: 125:                     if (DaGetStatus() == 0){
  1573  0001B8  EC8C  F00B         	call	_DaGetStatus	;wreg free
  1574  0001BC  0900               	iorlw	0
  1575  0001BE  E104               	bnz	l4066
  1576                           
  1577                           ;Menu.c: 127:                         state = 9;
  1578  0001C0  0E09               	movlw	9
  1579  0001C2  6E71               	movwf	menuMotor@state^0,c
  1580                           
  1581                           ;Menu.c: 128:                         val =0;
  1582  0001C4  6A32               	clrf	_val^0,c
  1583                           
  1584                           ;Menu.c: 129:                     } else if (DaGetStatus() == 1){
  1585  0001C6  D01B               	goto	l4084
  1586  0001C8                     l4066:
  1587  0001C8  EC8C  F00B         	call	_DaGetStatus	;wreg free
  1588  0001CC  06E8               	decf	wreg,f,c
  1589  0001CE  E117               	bnz	l4084
  1590  0001D0                     u3460:
  1591                           
  1592                           ;Menu.c: 130:                         state = 1;
  1593  0001D0  0E01               	movlw	1
  1594  0001D2  6E71               	movwf	menuMotor@state^0,c
  1595  0001D4  D014               	goto	l4084
  1596  0001D6                     l4070:
  1597                           
  1598                           ;Menu.c: 134:                     if (DaGetStatus() == 3){
  1599  0001D6  EC8C  F00B         	call	_DaGetStatus	;wreg free
  1600  0001DA  0A03               	xorlw	3
  1601  0001DC  E108               	bnz	l4078
  1602                           
  1603                           ;Menu.c: 135:                         KeSetMode(1);
  1604  0001DE  0E01               	movlw	1
  1605  0001E0  ECA1  F00A         	call	_KeSetMode
  1606                           
  1607                           ;Menu.c: 136:                         state = 3;
  1608  0001E4  0E03               	movlw	3
  1609  0001E6  6E71               	movwf	menuMotor@state^0,c
  1610                           
  1611                           ;Menu.c: 137:                         val = 1;
  1612  0001E8  0E01               	movlw	1
  1613  0001EA  6E32               	movwf	_val^0,c
  1614                           
  1615                           ;Menu.c: 138:                     } else if (DaGetStatus() == 4){
  1616  0001EC  D008               	goto	l4084
  1617  0001EE                     l4078:
  1618  0001EE  EC8C  F00B         	call	_DaGetStatus	;wreg free
  1619  0001F2  0A04               	xorlw	4
  1620  0001F4  E104               	bnz	l4084
  1621                           
  1622                           ;Menu.c: 139:                         KeSetMode(0);
  1623  0001F6  0E00               	movlw	0
  1624  0001F8  ECA1  F00A         	call	_KeSetMode
  1625  0001FC  D7E9               	goto	u3460
  1626  0001FE                     l4084:
  1627                           
  1628                           ;Menu.c: 144:                 LcClear();
  1629  0001FE  EC2D  F00B         	call	_LcClear	;wreg free
  1630                           
  1631                           ;Menu.c: 145:                 LcGotoXY(0,0);
  1632  000202  0E00               	movlw	0
  1633  000204  6A53               	clrf	LcGotoXY@Row^0,c
  1634  000206  EC7A  F007         	call	_LcGotoXY
  1635  00020A                     l4088:
  1636                           
  1637                           ;Menu.c: 146:                 LCDcol = LCDrow = 0;
  1638  00020A  6A35               	clrf	_LCDrow^0,c
  1639  00020C  6A34               	clrf	_LCDcol^0,c
  1640  00020E  0012               	return	
  1641  000210                     l4090:
  1642                           
  1643                           ;Menu.c: 151:             displayMenu(2,val);
  1644  000210  C032  F05C         	movff	_val,displayMenu@row
  1645  000214  0E02               	movlw	2
  1646  000216  EC43  F004         	call	_displayMenu
  1647                           
  1648                           ;Menu.c: 152:             if (LCDrow == 2 || LCDrow+val >= 4){
  1649  00021A  0E02               	movlw	2
  1650  00021C  1835               	xorwf	_LCDrow^0,w,c
  1651  00021E  E00F               	bz	u3500
  1652  000220  5032               	movf	_val^0,w,c
  1653  000222  C035  F06D         	movff	_LCDrow,??_menuMotor
  1654  000226  6A6E               	clrf	(??_menuMotor+1)^0,c
  1655  000228  266D               	addwf	??_menuMotor^0,f,c
  1656  00022A  0E00               	movlw	0
  1657  00022C  226E               	addwfc	(??_menuMotor+1)^0,f,c
  1658  00022E  BE6E               	btfsc	(??_menuMotor+1)^0,7,c
  1659  000230  0C00               	retlw	0
  1660  000232  506E               	movf	(??_menuMotor+1)^0,w,c
  1661  000234  E104               	bnz	u3500
  1662  000236  0E04               	movlw	4
  1663  000238  5C6D               	subwf	??_menuMotor^0,w,c
  1664  00023A  A0D8               	btfss	status,0,c
  1665  00023C  0012               	return	
  1666  00023E                     u3500:
  1667                           
  1668                           ;Menu.c: 153:                 LcCursorOff();
  1669  00023E  EC5A  F00B         	call	_LcCursorOff	;wreg free
  1670                           
  1671                           ;Menu.c: 154:                 state = 10;
  1672  000242  0E0A               	movlw	10
  1673  000244  6E71               	movwf	menuMotor@state^0,c
  1674  000246  0C0A               	retlw	10
  1675  000248                     l4100:
  1676                           
  1677                           ;Menu.c: 158:             if (!JoMoved()){
  1678  000248  EC88  F00B         	call	_JoMoved	;wreg free
  1679  00024C  0900               	iorlw	0
  1680  00024E  A4D8               	btfss	status,2,c
  1681  000250  0012               	return	
  1682                           
  1683                           ;Menu.c: 159:                 state = 11;
  1684  000252  0E0B               	movlw	11
  1685  000254  D0AE               	goto	L1
  1686  000256                     l4104:
  1687                           
  1688                           ;Menu.c: 160:                 TiResetTics(timer);
  1689  000256  5036               	movf	_timer^0,w,c
  1690  000258  EF13  F00B         	goto	_TiResetTics
  1691  00025C                     l4106:
  1692                           
  1693                           ;Menu.c: 164:             if (TiGetTics(timer) >= 600){
  1694  00025C  5036               	movf	_timer^0,w,c
  1695  00025E  EC8E  F00A         	call	_TiGetTics
  1696  000262  BE4C               	btfsc	(?_TiGetTics+1)^0,7,c
  1697  000264  D016               	goto	l4118
  1698  000266  0E58               	movlw	88
  1699  000268  5C4B               	subwf	?_TiGetTics^0,w,c
  1700  00026A  0E02               	movlw	2
  1701  00026C  584C               	subwfb	(?_TiGetTics+1)^0,w,c
  1702  00026E  E311               	bnc	l4118
  1703                           
  1704                           ;Menu.c: 165:                 LCDcolm++;
  1705  000270  2A33               	incf	_LCDcolm^0,f,c
  1706                           
  1707                           ;Menu.c: 166:                 LCDcolm = LCDcolm % MAINMENUSIZE[2];
  1708  000272  0E56               	movlw	low (_MAINMENUSIZE+2)
  1709  000274  6EF6               	movwf	tblptrl,c
  1710  000276  0E1F               	movlw	high (_MAINMENUSIZE+2)
  1711  000278  6EF7               	movwf	tblptrh,c
  1712  00027A                     	if	0	;tblptru may be non-zero
  1713  00027A                     	endif
  1714  00027A                     	if	0	;tblptru may be non-zero
  1715  00027A                     	endif
  1716  00027A  0008               	tblrd		*
  1717  00027C  CFF5 F04B          	movff	tablat,___lbmod@divisor
  1718  000280  5033               	movf	_LCDcolm^0,w,c
  1719  000282  EC7B  F00A         	call	___lbmod
  1720  000286  6E33               	movwf	_LCDcolm^0,c
  1721  000288                     l4112:
  1722                           
  1723                           ;Menu.c: 167:                 state = 9;
  1724  000288  0E09               	movlw	9
  1725  00028A  6E71               	movwf	menuMotor@state^0,c
  1726  00028C                     l4114:
  1727                           
  1728                           ;Menu.c: 168:                 LcClear();
  1729  00028C  EC2D  F00B         	call	_LcClear	;wreg free
  1730  000290  D7BC               	goto	l4088
  1731  000292                     l4118:
  1732  000292  EC88  F00B         	call	_JoMoved	;wreg free
  1733  000296  0900               	iorlw	0
  1734  000298  E011               	bz	l4138
  1735                           
  1736                           ;Menu.c: 171:                 if (JoDirection() == 'S' && val < 4){
  1737  00029A  EC8A  F00B         	call	_JoDirection	;wreg free
  1738  00029E  0A53               	xorlw	83
  1739  0002A0  E105               	bnz	l4126
  1740  0002A2  0E04               	movlw	4
  1741  0002A4  6032               	cpfslt	_val^0,c
  1742  0002A6  D002               	goto	l4126
  1743                           
  1744                           ;Menu.c: 172:                     val++;
  1745  0002A8  2A32               	incf	_val^0,f,c
  1746                           
  1747                           ;Menu.c: 173:                 } else if(JoDirection() == 'W' && val > 0){
  1748  0002AA  D7EE               	goto	l4112
  1749  0002AC                     l4126:
  1750  0002AC  EC8A  F00B         	call	_JoDirection	;wreg free
  1751  0002B0  0A57               	xorlw	87
  1752  0002B2  E1EA               	bnz	l4112
  1753  0002B4  5032               	movf	_val^0,w,c
  1754  0002B6  E0E8               	bz	l4112
  1755                           
  1756                           ;Menu.c: 174:                     val--;
  1757  0002B8  0632               	decf	_val^0,f,c
  1758  0002BA  D7E6               	goto	l4112
  1759  0002BC                     l4138:
  1760  0002BC  EC21  F00B         	call	_isPressed	;wreg free
  1761  0002C0  0900               	iorlw	0
  1762  0002C2  B4D8               	btfsc	status,2,c
  1763  0002C4  0012               	return	
  1764  0002C6  EC4F  F00A         	call	_KeGetGenericValue	;wreg free
  1765  0002CA  0A23               	xorlw	35
  1766  0002CC  A4D8               	btfss	status,2,c
  1767  0002CE  0012               	return	
  1768                           
  1769                           ;Menu.c: 180:                 if (val == 0){
  1770  0002D0  5032               	movf	_val^0,w,c
  1771  0002D2  E104               	bnz	l4148
  1772                           
  1773                           ;Menu.c: 181:                     val = 0;
  1774  0002D4  6A32               	clrf	_val^0,c
  1775                           
  1776                           ;Menu.c: 182:                     state = 12;
  1777  0002D6  0E0C               	movlw	12
  1778  0002D8  6E71               	movwf	menuMotor@state^0,c
  1779                           
  1780                           ;Menu.c: 183:                 }else {
  1781  0002DA  0C0C               	retlw	12
  1782  0002DC                     l4148:
  1783                           
  1784                           ;Menu.c: 184:                    state = (val+1)*20;
  1785  0002DC  2832               	incf	_val^0,w,c
  1786  0002DE  0D14               	mullw	20
  1787  0002E0  CFF3 F071          	movff	prodl,menuMotor@state
  1788  0002E4  0012               	return	
  1789  0002E6                     l4150:
  1790                           
  1791                           ;Menu.c: 194:             if (SiIsAvailable()){
  1792  0002E6  EC7F  F00B         	call	_SiIsAvailable	;wreg free
  1793  0002EA  0900               	iorlw	0
  1794  0002EC  B4D8               	btfsc	status,2,c
  1795  0002EE  0012               	return	
  1796                           
  1797                           ;Menu.c: 195:                 SiSendChar(mUser.username[val]);
  1798  0002F0  D937               	call	PL66	;call to abstracted procedure
  1799  0002F2  EC70  F00B         	call	_SiSendChar
  1800                           
  1801                           ;Menu.c: 196:                 if (mUser.username[val] == '\0'){
  1802  0002F6  D934               	call	PL66	;call to abstracted procedure
  1803  0002F8  E103               	bnz	l4158
  1804                           
  1805                           ;Menu.c: 197:                     state = 13;
  1806  0002FA  0E0D               	movlw	13
  1807  0002FC  6E71               	movwf	menuMotor@state^0,c
  1808                           
  1809                           ;Menu.c: 198:                 } else {
  1810  0002FE  0C0D               	retlw	13
  1811  000300                     l4158:
  1812                           
  1813                           ;Menu.c: 199:                     val++;
  1814  000300  2A32               	incf	_val^0,f,c
  1815  000302  0012               	return	
  1816  000304                     l4160:
  1817                           
  1818                           ;Menu.c: 204:             if (SiRecievedByte()){
  1819  000304  EC7C  F00B         	call	_SiRecievedByte	;wreg free
  1820  000308  0900               	iorlw	0
  1821  00030A  B4D8               	btfsc	status,2,c
  1822  00030C  0012               	return	
  1823                           
  1824                           ;Menu.c: 205:                 val = SiReadByte();
  1825  00030E  EC86  F00B         	call	_SiReadByte	;wreg free
  1826  000312  6E32               	movwf	_val^0,c
  1827                           
  1828                           ;Menu.c: 206:                 if (val == 'K'){
  1829  000314  0E4B               	movlw	75
  1830  000316  1832               	xorwf	_val^0,w,c
  1831  000318  A4D8               	btfss	status,2,c
  1832  00031A  0012               	return	
  1833                           
  1834                           ;Menu.c: 207:                     state = 14;
  1835  00031C  0E0E               	movlw	14
  1836  00031E  6E71               	movwf	menuMotor@state^0,c
  1837                           
  1838                           ;Menu.c: 208:                     JoSetMode(1);
  1839  000320  0E01               	movlw	1
  1840  000322  EC68  F00B         	call	_JoSetMode
  1841  000326  D7B2               	goto	l4114
  1842  000328                     l4174:
  1843                           
  1844                           ;Menu.c: 216:             displayMenu(3,0);
  1845  000328  0E00               	movlw	0
  1846  00032A  6E5C               	movwf	displayMenu@row^0,c
  1847  00032C  0E03               	movlw	3
  1848  00032E  EC43  F004         	call	_displayMenu
  1849                           
  1850                           ;Menu.c: 217:             if (LCDrow == 1){
  1851  000332  0435               	decf	_LCDrow^0,w,c
  1852  000334  A4D8               	btfss	status,2,c
  1853  000336  0012               	return	
  1854                           
  1855                           ;Menu.c: 218:                 LcCursorOff();
  1856  000338  EC5A  F00B         	call	_LcCursorOff	;wreg free
  1857                           
  1858                           ;Menu.c: 219:                 startTimer();
  1859  00033C  EC50  F00B         	call	_startTimer	;wreg free
  1860  000340                     l4180:
  1861                           
  1862                           ;Menu.c: 220:                 state = 15;
  1863  000340  0E0F               	movlw	15
  1864  000342  6E71               	movwf	menuMotor@state^0,c
  1865  000344  0C0F               	retlw	15
  1866  000346                     l4182:
  1867                           
  1868                           ;Menu.c: 224:             if (isPressed()){
  1869  000346  EC21  F00B         	call	_isPressed	;wreg free
  1870  00034A  0900               	iorlw	0
  1871  00034C  B4D8               	btfsc	status,2,c
  1872  00034E  0012               	return	
  1873                           
  1874                           ;Menu.c: 225:                 val = KeGetGenericValue();
  1875  000350  EC4F  F00A         	call	_KeGetGenericValue	;wreg free
  1876  000354  6E32               	movwf	_val^0,c
  1877                           
  1878                           ;Menu.c: 226:                 if (val == '*' || val == '#'){
  1879  000356  0E2A               	movlw	42
  1880  000358  1832               	xorwf	_val^0,w,c
  1881  00035A  E003               	bz	u3680
  1882  00035C  0E23               	movlw	35
  1883  00035E  1832               	xorwf	_val^0,w,c
  1884  000360  E108               	bnz	l4196
  1885  000362                     u3680:
  1886                           
  1887                           ;Menu.c: 227:                     if (val == '*'){
  1888  000362  0E2A               	movlw	42
  1889  000364  1832               	xorwf	_val^0,w,c
  1890  000366  A4D8               	btfss	status,2,c
  1891  000368  0012               	return	
  1892                           
  1893                           ;Menu.c: 228:                         state = 17;
  1894  00036A  0E11               	movlw	17
  1895  00036C  6E71               	movwf	menuMotor@state^0,c
  1896                           
  1897                           ;Menu.c: 229:                         stopTimer();
  1898  00036E  EF82  F00B         	goto	_stopTimer	;wreg free
  1899  000372                     l4196:
  1900                           
  1901                           ;Menu.c: 232:                     state = 16;
  1902  000372  0E10               	movlw	16
  1903  000374  6E71               	movwf	menuMotor@state^0,c
  1904  000376  0C10               	retlw	16
  1905  000378                     l4198:
  1906                           
  1907                           ;Menu.c: 238:             if (SiIsAvailable()){
  1908  000378  EC7F  F00B         	call	_SiIsAvailable	;wreg free
  1909  00037C  0900               	iorlw	0
  1910  00037E  B4D8               	btfsc	status,2,c
  1911  000380  0012               	return	
  1912                           
  1913                           ;Menu.c: 239:                 SiSendChar(val);
  1914  000382  5032               	movf	_val^0,w,c
  1915  000384  EC70  F00B         	call	_SiSendChar
  1916  000388  D7DB               	goto	l4180
  1917  00038A                     l4204:
  1918                           
  1919                           ;Menu.c: 244:             if (SiIsAvailable()){
  1920  00038A  EC7F  F00B         	call	_SiIsAvailable	;wreg free
  1921  00038E  0900               	iorlw	0
  1922  000390  B4D8               	btfsc	status,2,c
  1923  000392  0012               	return	
  1924                           
  1925                           ;Menu.c: 245:                 SiSendChar('F');
  1926  000394  0E46               	movlw	70
  1927  000396  EC70  F00B         	call	_SiSendChar
  1928                           
  1929                           ;Menu.c: 246:                 state = 18;
  1930  00039A  0E12               	movlw	18
  1931  00039C  6E71               	movwf	menuMotor@state^0,c
  1932  00039E  0C12               	retlw	18
  1933  0003A0                     l4210:
  1934                           
  1935                           ;Menu.c: 250:             if (SiRecievedByte()){
  1936  0003A0  EC7C  F00B         	call	_SiRecievedByte	;wreg free
  1937  0003A4  0900               	iorlw	0
  1938  0003A6  B4D8               	btfsc	status,2,c
  1939  0003A8  0012               	return	
  1940                           
  1941                           ;Menu.c: 251:                 mScore = SiReadByte();
  1942  0003AA  EC86  F00B         	call	_SiReadByte	;wreg free
  1943  0003AE  6E31               	movwf	_mScore^0,c
  1944                           
  1945                           ;Menu.c: 252:                 state = 20;
  1946  0003B0  0E14               	movlw	20
  1947  0003B2                     L1:
  1948  0003B2  6E71               	movwf	menuMotor@state^0,c
  1949  0003B4  D750               	goto	l4104
  1950  0003B6                     l4218:
  1951                           
  1952                           ;Menu.c: 257:             displayMenu(4,0);
  1953  0003B6  0E00               	movlw	0
  1954  0003B8  6E5C               	movwf	displayMenu@row^0,c
  1955  0003BA  0E04               	movlw	4
  1956  0003BC  EC43  F004         	call	_displayMenu
  1957                           
  1958                           ;Menu.c: 258:             if(LCDrow == 2){
  1959  0003C0  0E02               	movlw	2
  1960  0003C2  1835               	xorwf	_LCDrow^0,w,c
  1961  0003C4  A4D8               	btfss	status,2,c
  1962  0003C6  0012               	return	
  1963                           
  1964                           ;Menu.c: 259:                 state = 20;
  1965  0003C8  0E14               	movlw	20
  1966  0003CA  6E71               	movwf	menuMotor@state^0,c
  1967  0003CC  0C14               	retlw	20
  1968  0003CE                     l4224:
  1969                           
  1970                           ;Menu.c: 263:             if (TiGetTics(timer) >= 1200*3){
  1971  0003CE  5036               	movf	_timer^0,w,c
  1972  0003D0  EC8E  F00A         	call	_TiGetTics
  1973  0003D4  BE4C               	btfsc	(?_TiGetTics+1)^0,7,c
  1974  0003D6  D00E               	goto	l4234
  1975  0003D8  0E10               	movlw	16
  1976  0003DA  5C4B               	subwf	?_TiGetTics^0,w,c
  1977  0003DC  0E0E               	movlw	14
  1978  0003DE  584C               	subwfb	(?_TiGetTics+1)^0,w,c
  1979  0003E0  E309               	bnc	l4234
  1980                           
  1981                           ;Menu.c: 264:                 state = 22;
  1982  0003E2  0E16               	movlw	22
  1983  0003E4  6E71               	movwf	menuMotor@state^0,c
  1984                           
  1985                           ;Menu.c: 265:                 LcClear();
  1986  0003E6  EC2D  F00B         	call	_LcClear	;wreg free
  1987  0003EA  D05A               	goto	L2
  1988  0003EC                     l4232:
  1989                           
  1990                           ;Menu.c: 267:                 LcGotoXY(0,0);
  1991  0003EC  0E00               	movlw	0
  1992  0003EE  6A53               	clrf	LcGotoXY@Row^0,c
  1993  0003F0  EF7A  F007         	goto	_LcGotoXY
  1994  0003F4                     l4234:
  1995  0003F4  EC7C  F00B         	call	_SiRecievedByte	;wreg free
  1996  0003F8  0900               	iorlw	0
  1997  0003FA  B4D8               	btfsc	status,2,c
  1998  0003FC  0012               	return	
  1999                           
  2000                           ;Menu.c: 269:                 val = SiReadByte();
  2001  0003FE  EC86  F00B         	call	_SiReadByte	;wreg free
  2002  000402  6E32               	movwf	_val^0,c
  2003                           
  2004                           ;Menu.c: 270:                 state = 21;
  2005  000404  0E15               	movlw	21
  2006  000406  6E71               	movwf	menuMotor@state^0,c
  2007  000408  0C15               	retlw	21
  2008  00040A                     l4240:
  2009                           
  2010                           ;Menu.c: 274:             if (SiRecievedByte()){
  2011  00040A  EC7C  F00B         	call	_SiRecievedByte	;wreg free
  2012  00040E  0900               	iorlw	0
  2013  000410  B4D8               	btfsc	status,2,c
  2014  000412  0012               	return	
  2015                           
  2016                           ;Menu.c: 275:                 LCDcolm = SiReadByte();
  2017  000414  EC86  F00B         	call	_SiReadByte	;wreg free
  2018  000418  6E33               	movwf	_LCDcolm^0,c
  2019                           
  2020                           ;Menu.c: 276:                 state = 19;
  2021  00041A  0E13               	movlw	19
  2022  00041C  6E71               	movwf	menuMotor@state^0,c
  2023                           
  2024                           ;Menu.c: 277:                 LcClear();
  2025  00041E  EC2D  F00B         	call	_LcClear	;wreg free
  2026  000422  D03E               	goto	L2
  2027  000424                     l4252:
  2028                           
  2029                           ;Menu.c: 283:             displayMenu(5,0);
  2030  000424  0E00               	movlw	0
  2031  000426  6E5C               	movwf	displayMenu@row^0,c
  2032  000428  0E05               	movlw	5
  2033  00042A  EC43  F004         	call	_displayMenu
  2034                           
  2035                           ;Menu.c: 284:             if(LCDrow == 2){
  2036  00042E  0E02               	movlw	2
  2037  000430  1835               	xorwf	_LCDrow^0,w,c
  2038  000432  A4D8               	btfss	status,2,c
  2039  000434  0012               	return	
  2040                           
  2041                           ;Menu.c: 285:                 LcGotoXY(7,1);
  2042  000436  0E01               	movlw	1
  2043  000438  6E53               	movwf	LcGotoXY@Row^0,c
  2044  00043A  0E07               	movlw	7
  2045  00043C  EC7A  F007         	call	_LcGotoXY
  2046                           
  2047                           ;Menu.c: 286:                 LcPutChar((mScore/10)+'0');
  2048  000440  0E0A               	movlw	10
  2049  000442  6E4B               	movwf	___lbdiv@divisor^0,c
  2050  000444  5031               	movf	_mScore^0,w,c
  2051  000446  EC1F  F00A         	call	___lbdiv
  2052  00044A  0F30               	addlw	48
  2053  00044C  EC50  F009         	call	_LcPutChar
  2054                           
  2055                           ;Menu.c: 287:                 LcPutChar((mScore%10)+'0');
  2056  000450  0E0A               	movlw	10
  2057  000452  6E4B               	movwf	___lbmod@divisor^0,c
  2058  000454  5031               	movf	_mScore^0,w,c
  2059  000456  EC7B  F00A         	call	___lbmod
  2060  00045A  0F30               	addlw	48
  2061  00045C  EC50  F009         	call	_LcPutChar
  2062                           
  2063                           ;Menu.c: 288:                 displayTimeRemaining();
  2064  000460  EC4A  F00B         	call	_displayTimeRemaining	;wreg free
  2065                           
  2066                           ;Menu.c: 289:                 state = 23;
  2067  000464  0E17               	movlw	23
  2068  000466  6E71               	movwf	menuMotor@state^0,c
  2069  000468  0C17               	retlw	23
  2070  00046A                     l4260:
  2071                           
  2072                           ;Menu.c: 293:             if (isPressed() && KeGetGenericValue() == '#'){
  2073  00046A  EC21  F00B         	call	_isPressed	;wreg free
  2074  00046E  0900               	iorlw	0
  2075  000470  B4D8               	btfsc	status,2,c
  2076  000472  0012               	return	
  2077  000474  EC4F  F00A         	call	_KeGetGenericValue	;wreg free
  2078  000478  0A23               	xorlw	35
  2079  00047A  A4D8               	btfss	status,2,c
  2080  00047C  0012               	return	
  2081                           
  2082                           ;Menu.c: 294:                 DaSaveScore(mScore);
  2083  00047E  5031               	movf	_mScore^0,w,c
  2084  000480  EC42  F00B         	call	_DaSaveScore
  2085                           
  2086                           ;Menu.c: 295:                 state = 24;
  2087  000484  0E18               	movlw	24
  2088  000486  6E71               	movwf	menuMotor@state^0,c
  2089  000488  0C18               	retlw	24
  2090  00048A                     l4268:
  2091                           
  2092                           ;Menu.c: 299:             if (DaGetIdle()){
  2093  00048A  EC6C  F00B         	call	_DaGetIdle	;wreg free
  2094  00048E  0900               	iorlw	0
  2095  000490  B4D8               	btfsc	status,2,c
  2096  000492  0012               	return	
  2097                           
  2098                           ;Menu.c: 300:                 state = 9;
  2099  000494  0E09               	movlw	9
  2100  000496  6E71               	movwf	menuMotor@state^0,c
  2101                           
  2102                           ;Menu.c: 301:                 LcClear();
  2103  000498  EC2D  F00B         	call	_LcClear	;wreg free
  2104                           
  2105                           ;Menu.c: 302:                 LCDcol = LCDrow = val = LCDcolm = 0;
  2106  00049C  6A33               	clrf	_LCDcolm^0,c
  2107  00049E  6A32               	clrf	_val^0,c
  2108  0004A0                     L2:
  2109  0004A0  6A35               	clrf	_LCDrow^0,c
  2110  0004A2  6A34               	clrf	_LCDcol^0,c
  2111  0004A4  D7A3               	goto	l4232
  2112  0004A6                     l4280:
  2113  0004A6  5071               	movf	menuMotor@state^0,w,c
  2114  0004A8  6E6D               	movwf	??_menuMotor^0,c
  2115  0004AA  6A6E               	clrf	(??_menuMotor+1)^0,c
  2116                           
  2117                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2118                           ; Switch size 1, requested type "space"
  2119                           ; Number of cases is 1, Range of values is 0 to 0
  2120                           ; switch strategies available:
  2121                           ; Name         Instructions Cycles
  2122                           ; simple_byte            4     3 (average)
  2123                           ;	Chosen strategy is simple_byte
  2124  0004AC  506E               	movf	(??_menuMotor+1)^0,w,c
  2125  0004AE  A4D8               	btfss	status,2,c
  2126  0004B0  0012               	return	
  2127                           
  2128                           ; Switch size 1, requested type "space"
  2129                           ; Number of cases is 24, Range of values is 1 to 24
  2130                           ; switch strategies available:
  2131                           ; Name         Instructions Cycles
  2132                           ; simple_byte           73    37 (average)
  2133                           ;	Chosen strategy is simple_byte
  2134  0004B2  506D               	movf	??_menuMotor^0,w,c
  2135  0004B4  0A01               	xorlw	1	; case 1
  2136  0004B6  E101 D5BF          	bz	l3954
  2137  0004BA  0A03               	xorlw	3	; case 2
  2138  0004BC  E101 D5CC          	bz	l3962
  2139  0004C0  0A01               	xorlw	1	; case 3
  2140  0004C2  E101 D5E6          	bz	l3976
  2141  0004C6  0A07               	xorlw	7	; case 4
  2142  0004C8  E101 D5F7          	bz	l3988
  2143  0004CC  0A01               	xorlw	1	; case 5
  2144  0004CE  E101 D61F          	bz	l4014
  2145  0004D2  0A03               	xorlw	3	; case 6
  2146  0004D4  E101 D62B          	bz	l4026
  2147  0004D8  0A01               	xorlw	1	; case 7
  2148  0004DA  E101 D647          	bz	l4046
  2149  0004DE  0A0F               	xorlw	15	; case 8
  2150  0004E0  E101 D660          	bz	l4054
  2151  0004E4  0A01               	xorlw	1	; case 9
  2152  0004E6  E101 D693          	bz	l4090
  2153  0004EA  0A03               	xorlw	3	; case 10
  2154  0004EC  E101 D6AC          	bz	l4100
  2155  0004F0  0A01               	xorlw	1	; case 11
  2156  0004F2  E101 D6B3          	bz	l4106
  2157  0004F6  0A07               	xorlw	7	; case 12
  2158  0004F8  E101 D6F5          	bz	l4150
  2159  0004FC  0A01               	xorlw	1	; case 13
  2160  0004FE  E101 D701          	bz	l4160
  2161  000502  0A03               	xorlw	3	; case 14
  2162  000504  E101 D710          	bz	l4174
  2163  000508  0A01               	xorlw	1	; case 15
  2164  00050A  E101 D71C          	bz	l4182
  2165  00050E  0A1F               	xorlw	31	; case 16
  2166  000510  E101 D732          	bz	l4198
  2167  000514  0A01               	xorlw	1	; case 17
  2168  000516  E101 D738          	bz	l4204
  2169  00051A  0A03               	xorlw	3	; case 18
  2170  00051C  E101 D740          	bz	l4210
  2171  000520  0A01               	xorlw	1	; case 19
  2172  000522  E101 D748          	bz	l4218
  2173  000526  0A07               	xorlw	7	; case 20
  2174  000528  E101 D751          	bz	l4224
  2175  00052C  0A01               	xorlw	1	; case 21
  2176  00052E  E101 D76C          	bz	l4240
  2177  000532  0A03               	xorlw	3	; case 22
  2178  000534  E101 D776          	bz	l4252
  2179  000538  0A01               	xorlw	1	; case 23
  2180  00053A  E097               	bz	l4260
  2181  00053C  0A0F               	xorlw	15	; case 24
  2182  00053E  E0A5               	bz	l4268
  2183  000540  0012               	return		;funcret
  2184  000542                     __end_of_menuMotor:
  2185                           	callstack 0
  2186  000542                     PL56:
  2187                           	callstack 23
  2188  000542  5034               	movf	_LCDcol^0,w,c
  2189  000544  0FD0               	addlw	low (_mUser+5)
  2190  000546  6ED9               	movwf	fsr2l,c
  2191  000548  6ADA               	clrf	fsr2h,c
  2192  00054A  0012               	return	
  2193  00054C                     __end_ofPL56:
  2194                           	callstack 0
  2195  00054C                     PL58:
  2196                           	callstack 24
  2197  00054C  0EB0               	movlw	176
  2198  00054E  5C4B               	subwf	?_TiGetTics^0,w,c
  2199  000550  0E04               	movlw	4
  2200  000552  584C               	subwfb	(?_TiGetTics+1)^0,w,c
  2201  000554  0012               	return	
  2202  000556                     __end_ofPL58:
  2203                           	callstack 0
  2204  000556                     PL60:
  2205                           	callstack 23
  2206  000556  5034               	movf	_LCDcol^0,w,c
  2207  000558  0FC7               	addlw	low (_mUser+252)
  2208  00055A  6ED9               	movwf	fsr2l,c
  2209  00055C  6ADA               	clrf	fsr2h,c
  2210  00055E  0012               	return	
  2211  000560                     __end_ofPL60:
  2212                           	callstack 0
  2213  000560                     PL66:
  2214                           	callstack 23
  2215  000560  5032               	movf	_val^0,w,c
  2216  000562  0FCB               	addlw	low _mUser
  2217  000564  6ED9               	movwf	fsr2l,c
  2218  000566  6ADA               	clrf	fsr2h,c
  2219  000568  50DF               	movf	indf2,w,c
  2220  00056A  0012               	return	
  2221  00056C                     __end_ofPL66:
  2222                           	callstack 0
  2223  00056C                     PL68:
  2224                           	callstack 23
  2225  00056C  C035  F053         	movff	_LCDrow,LcGotoXY@Row
  2226  000570  5034               	movf	_LCDcol^0,w,c
  2227  000572  0012               	return	
  2228  000574                     __end_ofPL68:
  2229                           	callstack 0
  2230                           
  2231 ;; *************** function _stopTimer *****************
  2232 ;; Defined at:
  2233 ;;		line 109 in file "time.c"
  2234 ;; Parameters:    Size  Location     Type
  2235 ;;		None
  2236 ;; Auto vars:     Size  Location     Type
  2237 ;;		None
  2238 ;; Return value:  Size  Location     Type
  2239 ;;                  1    wreg      void 
  2240 ;; Registers used:
  2241 ;;		None
  2242 ;; Tracked objects:
  2243 ;;		On entry : 0/0
  2244 ;;		On exit  : 0/0
  2245 ;;		Unchanged: 0/0
  2246 ;; Data sizes:     COMRAM   BANK0   BANK1
  2247 ;;      Params:         0       0       0
  2248 ;;      Locals:         0       0       0
  2249 ;;      Temps:          0       0       0
  2250 ;;      Totals:         0       0       0
  2251 ;;Total ram usage:        0 bytes
  2252 ;; Hardware stack levels used: 1
  2253 ;; Hardware stack levels required when called: 2
  2254 ;; This function calls:
  2255 ;;		Nothing
  2256 ;; This function is called by:
  2257 ;;		_menuMotor
  2258 ;; This function uses a non-reentrant model
  2259 ;;
  2260                           
  2261                           	psect	text3
  2262  001704                     __ptext3:
  2263                           	callstack 0
  2264  001704                     _stopTimer:
  2265                           	callstack 27
  2266                           
  2267                           ;time.c: 110:     state = 0;
  2268                           
  2269                           ;incstack = 0
  2270  001704  6A23               	clrf	_state@time$F1562^0,c
  2271  001706  0012               	return		;funcret
  2272  001708                     __end_of_stopTimer:
  2273                           	callstack 0
  2274                           
  2275 ;; *************** function _startTimer *****************
  2276 ;; Defined at:
  2277 ;;		line 105 in file "time.c"
  2278 ;; Parameters:    Size  Location     Type
  2279 ;;		None
  2280 ;; Auto vars:     Size  Location     Type
  2281 ;;		None
  2282 ;; Return value:  Size  Location     Type
  2283 ;;                  1    wreg      void 
  2284 ;; Registers used:
  2285 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2286 ;; Tracked objects:
  2287 ;;		On entry : 0/0
  2288 ;;		On exit  : 0/0
  2289 ;;		Unchanged: 0/0
  2290 ;; Data sizes:     COMRAM   BANK0   BANK1
  2291 ;;      Params:         0       0       0
  2292 ;;      Locals:         0       0       0
  2293 ;;      Temps:          0       0       0
  2294 ;;      Totals:         0       0       0
  2295 ;;Total ram usage:        0 bytes
  2296 ;; Hardware stack levels used: 1
  2297 ;; Hardware stack levels required when called: 3
  2298 ;; This function calls:
  2299 ;;		_TiResetTics
  2300 ;; This function is called by:
  2301 ;;		_menuMotor
  2302 ;; This function uses a non-reentrant model
  2303 ;;
  2304                           
  2305                           	psect	text4
  2306  0016A0                     __ptext4:
  2307                           	callstack 0
  2308  0016A0                     _startTimer:
  2309                           	callstack 26
  2310                           
  2311                           ;time.c: 106:     state = 1;
  2312                           
  2313                           ;incstack = 0
  2314  0016A0  0E01               	movlw	1
  2315  0016A2  6E23               	movwf	_state@time$F1562^0,c
  2316                           
  2317                           ;time.c: 107:     TiResetTics(timer);
  2318  0016A4  5024               	movf	_timer@time$F1561^0,w,c
  2319  0016A6  EF13  F00B         	goto	_TiResetTics
  2320  0016AA                     __end_of_startTimer:
  2321                           	callstack 0
  2322                           
  2323 ;; *************** function _isPressed *****************
  2324 ;; Defined at:
  2325 ;;		line 207 in file "keypad.c"
  2326 ;; Parameters:    Size  Location     Type
  2327 ;;		None
  2328 ;; Auto vars:     Size  Location     Type
  2329 ;;		None
  2330 ;; Return value:  Size  Location     Type
  2331 ;;                  1    wreg      unsigned char 
  2332 ;; Registers used:
  2333 ;;		wreg, status,2, status,0
  2334 ;; Tracked objects:
  2335 ;;		On entry : 0/0
  2336 ;;		On exit  : 0/0
  2337 ;;		Unchanged: 0/0
  2338 ;; Data sizes:     COMRAM   BANK0   BANK1
  2339 ;;      Params:         0       0       0
  2340 ;;      Locals:         1       0       0
  2341 ;;      Temps:          0       0       0
  2342 ;;      Totals:         1       0       0
  2343 ;;Total ram usage:        1 bytes
  2344 ;; Hardware stack levels used: 1
  2345 ;; Hardware stack levels required when called: 2
  2346 ;; This function calls:
  2347 ;;		Nothing
  2348 ;; This function is called by:
  2349 ;;		_menuMotor
  2350 ;; This function uses a non-reentrant model
  2351 ;;
  2352                           
  2353                           	psect	text5
  2354  001642                     __ptext5:
  2355                           	callstack 0
  2356  001642                     _isPressed:
  2357                           	callstack 27
  2358                           
  2359                           ;keypad.c: 209:  return pressed && (stateSMS == 1||stateSMS == 4);
  2360                           
  2361                           ;incstack = 0
  2362  001642  6A4B               	clrf	_isPressed$530^0,c
  2363  001644  503F               	movf	_pressed^0,w,c
  2364  001646  E007               	bz	l185
  2365  001648  043B               	decf	_stateSMS^0,w,c
  2366  00164A  E003               	bz	u2630
  2367  00164C  0E04               	movlw	4
  2368  00164E  183B               	xorwf	_stateSMS^0,w,c
  2369  001650  E102               	bnz	l185
  2370  001652                     u2630:
  2371  001652  0E01               	movlw	1
  2372  001654  6E4B               	movwf	_isPressed$530^0,c
  2373  001656                     l185:
  2374  001656  504B               	movf	_isPressed$530^0,w,c
  2375  001658  0012               	return		;funcret
  2376  00165A                     __end_of_isPressed:
  2377                           	callstack 0
  2378                           
  2379 ;; *************** function _getPresses *****************
  2380 ;; Defined at:
  2381 ;;		line 242 in file "keypad.c"
  2382 ;; Parameters:    Size  Location     Type
  2383 ;;		None
  2384 ;; Auto vars:     Size  Location     Type
  2385 ;;		None
  2386 ;; Return value:  Size  Location     Type
  2387 ;;                  1    wreg      unsigned char 
  2388 ;; Registers used:
  2389 ;;		wreg, status,2
  2390 ;; Tracked objects:
  2391 ;;		On entry : 0/0
  2392 ;;		On exit  : 0/0
  2393 ;;		Unchanged: 0/0
  2394 ;; Data sizes:     COMRAM   BANK0   BANK1
  2395 ;;      Params:         0       0       0
  2396 ;;      Locals:         0       0       0
  2397 ;;      Temps:          0       0       0
  2398 ;;      Totals:         0       0       0
  2399 ;;Total ram usage:        0 bytes
  2400 ;; Hardware stack levels used: 1
  2401 ;; Hardware stack levels required when called: 2
  2402 ;; This function calls:
  2403 ;;		Nothing
  2404 ;; This function is called by:
  2405 ;;		_menuMotor
  2406 ;; This function uses a non-reentrant model
  2407 ;;
  2408                           
  2409                           	psect	text6
  2410  001708                     __ptext6:
  2411                           	callstack 0
  2412  001708                     _getPresses:
  2413                           	callstack 27
  2414                           
  2415                           ;keypad.c: 243:     return available;
  2416                           
  2417                           ;incstack = 0
  2418  001708  503D               	movf	_available^0,w,c
  2419  00170A  0012               	return		;funcret
  2420  00170C                     __end_of_getPresses:
  2421                           	callstack 0
  2422                           
  2423 ;; *************** function _displayTimeRemaining *****************
  2424 ;; Defined at:
  2425 ;;		line 112 in file "time.c"
  2426 ;; Parameters:    Size  Location     Type
  2427 ;;		None
  2428 ;; Auto vars:     Size  Location     Type
  2429 ;;		None
  2430 ;; Return value:  Size  Location     Type
  2431 ;;                  1    wreg      void 
  2432 ;; Registers used:
  2433 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2434 ;; Tracked objects:
  2435 ;;		On entry : 0/0
  2436 ;;		On exit  : 0/0
  2437 ;;		Unchanged: 0/0
  2438 ;; Data sizes:     COMRAM   BANK0   BANK1
  2439 ;;      Params:         0       0       0
  2440 ;;      Locals:         0       0       0
  2441 ;;      Temps:          0       0       0
  2442 ;;      Totals:         0       0       0
  2443 ;;Total ram usage:        0 bytes
  2444 ;; Hardware stack levels used: 1
  2445 ;; Hardware stack levels required when called: 5
  2446 ;; This function calls:
  2447 ;;		_LcGotoXY
  2448 ;; This function is called by:
  2449 ;;		_menuMotor
  2450 ;; This function uses a non-reentrant model
  2451 ;;
  2452                           
  2453                           	psect	text7
  2454  001694                     __ptext7:
  2455                           	callstack 0
  2456  001694                     _displayTimeRemaining:
  2457                           	callstack 24
  2458                           
  2459                           ;time.c: 113:     state = 7;
  2460                           
  2461                           ;incstack = 0
  2462  001694  0E07               	movlw	7
  2463  001696  6E23               	movwf	_state@time$F1562^0,c
  2464                           
  2465                           ;time.c: 114:     LcGotoXY(11,0);
  2466  001698  6A53               	clrf	LcGotoXY@Row^0,c
  2467  00169A  0E0B               	movlw	11
  2468  00169C  EF7A  F007         	goto	_LcGotoXY
  2469  0016A0                     __end_of_displayTimeRemaining:
  2470                           	callstack 0
  2471                           
  2472 ;; *************** function _displayMenu *****************
  2473 ;; Defined at:
  2474 ;;		line 311 in file "Menu.c"
  2475 ;; Parameters:    Size  Location     Type
  2476 ;;  menuMode        1    wreg     unsigned char 
  2477 ;;  row             1   22[COMRAM] unsigned char 
  2478 ;; Auto vars:     Size  Location     Type
  2479 ;;  menuMode        1   27[COMRAM] unsigned char 
  2480 ;; Return value:  Size  Location     Type
  2481 ;;                  1    wreg      void 
  2482 ;; Registers used:
  2483 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2484 ;; Tracked objects:
  2485 ;;		On entry : 0/0
  2486 ;;		On exit  : 0/0
  2487 ;;		Unchanged: 0/0
  2488 ;; Data sizes:     COMRAM   BANK0   BANK1
  2489 ;;      Params:         1       0       0
  2490 ;;      Locals:         1       0       0
  2491 ;;      Temps:          4       0       0
  2492 ;;      Totals:         6       0       0
  2493 ;;Total ram usage:        6 bytes
  2494 ;; Hardware stack levels used: 1
  2495 ;; Hardware stack levels required when called: 6
  2496 ;; This function calls:
  2497 ;;		_LcGotoXY
  2498 ;;		_LcPutChar
  2499 ;;		___awmod
  2500 ;; This function is called by:
  2501 ;;		_menuMotor
  2502 ;; This function uses a non-reentrant model
  2503 ;;
  2504                           
  2505                           	psect	text8
  2506  000886                     __ptext8:
  2507                           	callstack 0
  2508  000886                     _displayMenu:
  2509                           	callstack 23
  2510                           
  2511                           ;incstack = 0
  2512                           ;displayMenu@menuMode stored from wreg
  2513  000886  6E61               	movwf	displayMenu@menuMode^0,c
  2514                           
  2515                           ;Menu.c: 312:     if (menuMode == 0){
  2516  000888  5061               	movf	displayMenu@menuMode^0,w,c
  2517  00088A  E10E               	bnz	l3500
  2518                           
  2519                           ;Menu.c: 313:         if (LOGINMENU[LCDrow][LCDcol] != '\0'){
  2520  00088C  D8CB               	call	PL18	;call to abstracted procedure
  2521  00088E  D89E               	call	PL2	;call to abstracted procedure
  2522  000890  E006               	bz	l3494
  2523                           
  2524                           ;Menu.c: 314:             LcPutChar(LOGINMENU[LCDrow][LCDcol]);
  2525  000892  D8C8               	call	PL18	;call to abstracted procedure
  2526  000894  D89B               	call	PL2	;call to abstracted procedure
  2527  000896  EC50  F009         	call	_LcPutChar
  2528  00089A                     l3492:
  2529                           
  2530                           ;Menu.c: 315:             LCDcol++;
  2531  00089A  2A34               	incf	_LCDcol^0,f,c
  2532                           
  2533                           ;Menu.c: 316:         } else {
  2534  00089C  0012               	return	
  2535  00089E                     l3494:
  2536                           
  2537                           ;Menu.c: 317:             LCDrow++;
  2538                           
  2539                           ;Menu.c: 318:             LcGotoXY(0,1);
  2540  00089E  D8DA               	call	PL34	;call to abstracted procedure
  2541  0008A0  EC7A  F007         	call	_LcGotoXY
  2542  0008A4                     l3498:
  2543                           
  2544                           ;Menu.c: 319:             LCDcol = 0;
  2545  0008A4  6A34               	clrf	_LCDcol^0,c
  2546  0008A6  0012               	return	
  2547  0008A8                     l3500:
  2548  0008A8  0461               	decf	displayMenu@menuMode^0,w,c
  2549  0008AA  E10C               	bnz	l3514
  2550                           
  2551                           ;Menu.c: 322:         if (LOGREGSCREEN[LCDrow][LCDcol] != '\0'){
  2552  0008AC  D8C2               	call	PL20	;call to abstracted procedure
  2553  0008AE  D88E               	call	PL2	;call to abstracted procedure
  2554  0008B0  E005               	bz	l3508
  2555                           
  2556                           ;Menu.c: 323:             LcPutChar(LOGREGSCREEN[LCDrow][LCDcol]);
  2557  0008B2  D8BF               	call	PL20	;call to abstracted procedure
  2558  0008B4  D88B               	call	PL2	;call to abstracted procedure
  2559  0008B6  EC50  F009         	call	_LcPutChar
  2560  0008BA  D7EF               	goto	l3492
  2561  0008BC                     l3508:
  2562                           
  2563                           ;Menu.c: 326:             LCDrow++;
  2564                           
  2565                           ;Menu.c: 327:             LcGotoXY(0,1);
  2566  0008BC  D8CB               	call	PL34	;call to abstracted procedure
  2567  0008BE  EC7A  F007         	call	_LcGotoXY
  2568  0008C2  D7F0               	goto	l3498
  2569  0008C4                     l3514:
  2570  0008C4  0E02               	movlw	2
  2571  0008C6  1861               	xorwf	displayMenu@menuMode^0,w,c
  2572  0008C8  E14D               	bnz	l3544
  2573                           
  2574                           ;Menu.c: 331:         if (LCDrow+row < 4){
  2575  0008CA  505C               	movf	displayMenu@row^0,w,c
  2576  0008CC  C035  F05D         	movff	_LCDrow,??_displayMenu
  2577  0008D0  6A5E               	clrf	(??_displayMenu+1)^0,c
  2578  0008D2  265D               	addwf	??_displayMenu^0,f,c
  2579  0008D4  0E00               	movlw	0
  2580  0008D6  225E               	addwfc	(??_displayMenu+1)^0,f,c
  2581  0008D8  BE5E               	btfsc	(??_displayMenu+1)^0,7,c
  2582  0008DA  D006               	goto	u2710
  2583  0008DC  505E               	movf	(??_displayMenu+1)^0,w,c
  2584  0008DE  E103               	bnz	u2711
  2585  0008E0  0E04               	movlw	4
  2586  0008E2  5C5D               	subwf	??_displayMenu^0,w,c
  2587  0008E4  B0D8               	btfsc	status,0,c
  2588  0008E6                     u2711:
  2589  0008E6  0012               	return	
  2590  0008E8                     u2710:
  2591                           
  2592                           ;Menu.c: 332:             if (MAINMENUSIZE[LCDrow+row] > 16){
  2593  0008E8  D8AB               	call	PL24	;call to abstracted procedure
  2594  0008EA  D887               	call	PL6	;call to abstracted procedure
  2595  0008EC  0E10               	movlw	16
  2596  0008EE  0008               	tblrd		*
  2597  0008F0  64F5               	cpfsgt	tablat,c
  2598  0008F2  D02A               	goto	l3532
  2599                           
  2600                           ;Menu.c: 333:                 if (LCDcol < 16){
  2601  0008F4  6034               	cpfslt	_LCDcol^0,c
  2602  0008F6  D024               	goto	l3526
  2603                           
  2604                           ;Menu.c: 334:                     LcPutChar(MAINMENU[LCDrow+row][(LCDcol+LCDcolm) % MAIN
      +                          MENUSIZE[LCDrow+row]]);
  2605  0008F8  5034               	movf	_LCDcol^0,w,c
  2606  0008FA  2433               	addwf	_LCDcolm^0,w,c
  2607  0008FC  6E4B               	movwf	___awmod@dividend^0,c
  2608  0008FE  6A4C               	clrf	(___awmod@dividend+1)^0,c
  2609  000900  364C               	rlcf	(___awmod@dividend+1)^0,f,c
  2610  000902  D89E               	call	PL24	;call to abstracted procedure
  2611  000904  D87A               	call	PL6	;call to abstracted procedure
  2612  000906  0008               	tblrd		*
  2613  000908  50F5               	movf	tablat,w,c
  2614  00090A  6E4D               	movwf	___awmod@divisor^0,c
  2615  00090C  6A4E               	clrf	(___awmod@divisor+1)^0,c
  2616  00090E  ECB6  F008         	call	___awmod	;wreg free
  2617  000912  5035               	movf	_LCDrow^0,w,c
  2618  000914  0D1C               	mullw	28
  2619  000916  0E58               	movlw	low _MAINMENU
  2620  000918  6E5F               	movwf	(??_displayMenu+2)^0,c
  2621  00091A  0E1F               	movlw	high _MAINMENU
  2622  00091C  6E60               	movwf	(??_displayMenu+3)^0,c
  2623  00091E  D8B0               	call	PL78	;call to abstracted procedure
  2624  000920  505C               	movf	displayMenu@row^0,w,c
  2625  000922  0D1C               	mullw	28
  2626  000924  D8AD               	call	PL78	;call to abstracted procedure
  2627  000926  504B               	movf	?___awmod^0,w,c
  2628  000928  265F               	addwf	(??_displayMenu+2)^0,f,c
  2629  00092A  504C               	movf	(?___awmod+1)^0,w,c
  2630  00092C  2260               	addwfc	(??_displayMenu+3)^0,f,c
  2631  00092E  C05F  FFF6         	movff	??_displayMenu+2,tblptrl
  2632  000932  C060  FFF7         	movff	??_displayMenu+3,tblptrh
  2633  000936                     	if	0	;tblptru may be non-zero
  2634  000936                     	endif
  2635  000936                     	if	0	;tblptru may be non-zero
  2636  000936                     	endif
  2637  000936  0008               	tblrd		*
  2638  000938  50F5               	movf	tablat,w,c
  2639  00093A  EC50  F009         	call	_LcPutChar
  2640  00093E  D7AD               	goto	l3492
  2641  000940                     l3526:
  2642                           
  2643                           ;Menu.c: 337:                     LCDrow++;
  2644                           
  2645                           ;Menu.c: 338:                     LcGotoXY(0,1);
  2646  000940  D889               	call	PL34	;call to abstracted procedure
  2647  000942  EC7A  F007         	call	_LcGotoXY
  2648  000946  D7AE               	goto	l3498
  2649  000948                     l3532:
  2650  000948  D860               	call	PL10	;call to abstracted procedure
  2651  00094A  D84F               	call	PL4	;call to abstracted procedure
  2652  00094C  D83F               	call	PL2	;call to abstracted procedure
  2653  00094E  E006               	bz	l3538
  2654                           
  2655                           ;Menu.c: 343:                 LcPutChar(MAINMENU[LCDrow+row][LCDcol]);
  2656  000950  D85C               	call	PL10	;call to abstracted procedure
  2657  000952  D84B               	call	PL4	;call to abstracted procedure
  2658  000954  D83B               	call	PL2	;call to abstracted procedure
  2659  000956  EC50  F009         	call	_LcPutChar
  2660  00095A  D79F               	goto	l3492
  2661  00095C                     l3538:
  2662                           
  2663                           ;Menu.c: 346:                 LCDrow++;
  2664                           
  2665                           ;Menu.c: 347:                 LcGotoXY(0,1);
  2666  00095C  D87B               	call	PL34	;call to abstracted procedure
  2667  00095E  EC7A  F007         	call	_LcGotoXY
  2668  000962  D7A0               	goto	l3498
  2669  000964                     l3544:
  2670  000964  0E03               	movlw	3
  2671  000966  1861               	xorwf	displayMenu@menuMode^0,w,c
  2672  000968  E10A               	bnz	l3558
  2673                           
  2674                           ;Menu.c: 353:         if (TIME[LCDcol] != '\0'){
  2675  00096A  D881               	call	PL44	;call to abstracted procedure
  2676  00096C  E004               	bz	l3552
  2677                           
  2678                           ;Menu.c: 354:                 LcPutChar(TIME[LCDcol]);
  2679  00096E  D87F               	call	PL44	;call to abstracted procedure
  2680  000970  EC50  F009         	call	_LcPutChar
  2681  000974  D792               	goto	l3492
  2682  000976                     l3552:
  2683                           
  2684                           ;Menu.c: 357:                 LCDrow++;
  2685                           
  2686                           ;Menu.c: 358:                 LcGotoXY(0,1);
  2687  000976  D86E               	call	PL34	;call to abstracted procedure
  2688  000978  EC7A  F007         	call	_LcGotoXY
  2689  00097C  D793               	goto	l3498
  2690  00097E                     l3558:
  2691  00097E  0E04               	movlw	4
  2692  000980  1861               	xorwf	displayMenu@menuMode^0,w,c
  2693  000982  E114               	bnz	l3578
  2694                           
  2695                           ;Menu.c: 362:         if (LCDrow == 0){
  2696  000984  5035               	movf	_LCDrow^0,w,c
  2697  000986  E10A               	bnz	l3574
  2698                           
  2699                           ;Menu.c: 363:            if (ERROR[LCDcol] != '\0'){
  2700  000988  D869               	call	PL42	;call to abstracted procedure
  2701  00098A  E004               	bz	l3568
  2702                           
  2703                           ;Menu.c: 364:                 LcPutChar(ERROR[LCDcol]);
  2704  00098C  D867               	call	PL42	;call to abstracted procedure
  2705  00098E  EC50  F009         	call	_LcPutChar
  2706  000992  D783               	goto	l3492
  2707  000994                     l3568:
  2708                           
  2709                           ;Menu.c: 367:                 LCDrow++;
  2710                           
  2711                           ;Menu.c: 368:                 LcGotoXY(0,1);
  2712  000994  D85F               	call	PL34	;call to abstracted procedure
  2713  000996  EC7A  F007         	call	_LcGotoXY
  2714  00099A  D784               	goto	l3498
  2715  00099C                     l3574:
  2716                           
  2717                           ;Menu.c: 372:             LcPutChar(val);
  2718  00099C  5032               	movf	_val^0,w,c
  2719  00099E  EC50  F009         	call	_LcPutChar
  2720                           
  2721                           ;Menu.c: 373:             LcPutChar(LCDcolm);
  2722  0009A2  5033               	movf	_LCDcolm^0,w,c
  2723  0009A4  EC50  F009         	call	_LcPutChar
  2724                           
  2725                           ;Menu.c: 374:             LCDrow++;
  2726  0009A8  2A35               	incf	_LCDrow^0,f,c
  2727  0009AA  0012               	return	
  2728  0009AC                     l3578:
  2729  0009AC  0E05               	movlw	5
  2730  0009AE  1861               	xorwf	displayMenu@menuMode^0,w,c
  2731  0009B0  A4D8               	btfss	status,2,c
  2732  0009B2  0012               	return	
  2733                           
  2734                           ;Menu.c: 378:         if (RESULTS[LCDrow][LCDcol] != '\0'){
  2735  0009B4  D830               	call	PL16	;call to abstracted procedure
  2736  0009B6  D80A               	call	PL2	;call to abstracted procedure
  2737  0009B8  E005               	bz	l3586
  2738                           
  2739                           ;Menu.c: 379:             LcPutChar(RESULTS[LCDrow][LCDcol]);
  2740  0009BA  D82D               	call	PL16	;call to abstracted procedure
  2741  0009BC  D807               	call	PL2	;call to abstracted procedure
  2742  0009BE  EC50  F009         	call	_LcPutChar
  2743  0009C2  D76B               	goto	l3492
  2744  0009C4                     l3586:
  2745                           
  2746                           ;Menu.c: 382:             LCDrow++;
  2747                           
  2748                           ;Menu.c: 383:             LcGotoXY(0,1);
  2749  0009C4  D847               	call	PL34	;call to abstracted procedure
  2750  0009C6  EC7A  F007         	call	_LcGotoXY
  2751  0009CA  D76C               	goto	l3498
  2752  0009CC                     __end_of_displayMenu:
  2753                           	callstack 0
  2754  0009CC                     PL2:
  2755                           	callstack 23
  2756  0009CC  50F3               	movf	243,w,c
  2757  0009CE  265D               	addwf	??_displayMenu^0,f,c
  2758  0009D0  50F4               	movf	244,w,c
  2759  0009D2  225E               	addwfc	(??_displayMenu+1)^0,f,c
  2760  0009D4  5034               	movf	_LCDcol^0,w,c
  2761  0009D6  265D               	addwf	??_displayMenu^0,f,c
  2762  0009D8  0E00               	movlw	0
  2763  0009DA  225E               	addwfc	(??_displayMenu+1)^0,f,c
  2764  0009DC  C05D  FFF6         	movff	??_displayMenu,tblptrl
  2765  0009E0  C05E  FFF7         	movff	??_displayMenu+1,tblptrh
  2766  0009E4                     	if	0	;tblptru may be non-zero
  2767  0009E4                     	endif
  2768  0009E4                     	if	0	;tblptru may be non-zero
  2769  0009E4                     	endif
  2770  0009E4  0008               	tblrd		*
  2771  0009E6  50F5               	movf	tablat,w,c
  2772  0009E8  0012               	return	
  2773  0009EA                     __end_ofPL2:
  2774                           	callstack 0
  2775  0009EA                     PL4:
  2776                           	callstack 23
  2777  0009EA  6E5E               	movwf	(??_displayMenu+1)^0,c
  2778  0009EC  50F3               	movf	243,w,c
  2779  0009EE  265D               	addwf	??_displayMenu^0,f,c
  2780  0009F0  50F4               	movf	244,w,c
  2781  0009F2  225E               	addwfc	(??_displayMenu+1)^0,f,c
  2782  0009F4  505C               	movf	displayMenu@row^0,w,c
  2783  0009F6  0D1C               	mullw	28
  2784  0009F8  0012               	return	
  2785  0009FA                     __end_ofPL4:
  2786                           	callstack 0
  2787  0009FA                     PL6:
  2788                           	callstack 23
  2789  0009FA  265D               	addwf	??_displayMenu^0,f,c
  2790  0009FC  0E00               	movlw	0
  2791  0009FE  225E               	addwfc	(??_displayMenu+1)^0,f,c
  2792  000A00  C05D  FFF6         	movff	??_displayMenu,tblptrl
  2793  000A04  C05E  FFF7         	movff	??_displayMenu+1,tblptrh
  2794  000A08                     	if	0	;tblptru may be non-zero
  2795  000A08                     	endif
  2796  000A08                     	if	0	;tblptru may be non-zero
  2797  000A08                     	endif
  2798  000A08  0C00               	retlw	0
  2799  000A0A                     __end_ofPL6:
  2800                           	callstack 0
  2801  000A0A                     PL10:
  2802                           	callstack 23
  2803  000A0A  5035               	movf	_LCDrow^0,w,c
  2804  000A0C  0D1C               	mullw	28
  2805  000A0E  0E58               	movlw	low _MAINMENU
  2806  000A10  6E5D               	movwf	??_displayMenu^0,c
  2807  000A12  0E1F               	movlw	high _MAINMENU
  2808  000A14  0012               	return	
  2809  000A16                     __end_ofPL10:
  2810                           	callstack 0
  2811  000A16                     PL16:
  2812                           	callstack 23
  2813  000A16  5035               	movf	_LCDrow^0,w,c
  2814  000A18  0D0B               	mullw	11
  2815  000A1A  0EF7               	movlw	low _RESULTS
  2816  000A1C  6E5D               	movwf	??_displayMenu^0,c
  2817  000A1E  0E1E               	movlw	high _RESULTS
  2818  000A20  6E5E               	movwf	(??_displayMenu+1)^0,c
  2819  000A22  0012               	return	
  2820  000A24                     __end_ofPL16:
  2821                           	callstack 0
  2822  000A24                     PL18:
  2823                           	callstack 23
  2824  000A24  5035               	movf	_LCDrow^0,w,c
  2825  000A26  0D0B               	mullw	11
  2826  000A28  0E0D               	movlw	low _LOGINMENU
  2827  000A2A  6E5D               	movwf	??_displayMenu^0,c
  2828  000A2C  0E1F               	movlw	high _LOGINMENU
  2829  000A2E  6E5E               	movwf	(??_displayMenu+1)^0,c
  2830  000A30  0012               	return	
  2831  000A32                     __end_ofPL18:
  2832                           	callstack 0
  2833  000A32                     PL20:
  2834                           	callstack 23
  2835  000A32  5035               	movf	_LCDrow^0,w,c
  2836  000A34  0D06               	mullw	6
  2837  000A36  0E33               	movlw	low _LOGREGSCREEN
  2838  000A38  6E5D               	movwf	??_displayMenu^0,c
  2839  000A3A  0E1F               	movlw	high _LOGREGSCREEN
  2840  000A3C  6E5E               	movwf	(??_displayMenu+1)^0,c
  2841  000A3E  0012               	return	
  2842  000A40                     __end_ofPL20:
  2843                           	callstack 0
  2844  000A40                     PL24:
  2845                           	callstack 23
  2846  000A40  0E54               	movlw	low _MAINMENUSIZE
  2847  000A42  6E5D               	movwf	??_displayMenu^0,c
  2848  000A44  0E1F               	movlw	high _MAINMENUSIZE
  2849  000A46  6E5E               	movwf	(??_displayMenu+1)^0,c
  2850  000A48  5035               	movf	_LCDrow^0,w,c
  2851  000A4A  265D               	addwf	??_displayMenu^0,f,c
  2852  000A4C  0E00               	movlw	0
  2853  000A4E  225E               	addwfc	(??_displayMenu+1)^0,f,c
  2854  000A50  505C               	movf	displayMenu@row^0,w,c
  2855  000A52  0012               	return	
  2856  000A54                     __end_ofPL24:
  2857                           	callstack 0
  2858  000A54                     PL34:
  2859                           	callstack 23
  2860  000A54  2A35               	incf	_LCDrow^0,f,c
  2861  000A56  0E01               	movlw	1
  2862  000A58  6E53               	movwf	LcGotoXY@Row^0,c
  2863  000A5A  0C00               	retlw	0
  2864  000A5C                     __end_ofPL34:
  2865                           	callstack 0
  2866  000A5C                     PL42:
  2867                           	callstack 23
  2868  000A5C  0E4B               	movlw	low _ERROR
  2869  000A5E  2434               	addwf	_LCDcol^0,w,c
  2870  000A60  6EF6               	movwf	tblptrl,c
  2871  000A62  6AF7               	clrf	tblptrh,c
  2872  000A64  0E1F               	movlw	high _ERROR
  2873  000A66  22F7               	addwfc	tblptrh,f,c
  2874  000A68                     	if	0	;There are less than 3 active tblptr bytes
  2875  000A68                     	endif
  2876  000A68  0008               	tblrd		*
  2877  000A6A  50F5               	movf	tablat,w,c
  2878  000A6C  0012               	return	
  2879  000A6E                     __end_ofPL42:
  2880                           	callstack 0
  2881  000A6E                     PL44:
  2882                           	callstack 23
  2883  000A6E  0E23               	movlw	low _TIME
  2884  000A70  2434               	addwf	_LCDcol^0,w,c
  2885  000A72  6EF6               	movwf	tblptrl,c
  2886  000A74  6AF7               	clrf	tblptrh,c
  2887  000A76  0E1F               	movlw	high _TIME
  2888  000A78  22F7               	addwfc	tblptrh,f,c
  2889  000A7A                     	if	0	;There are less than 3 active tblptr bytes
  2890  000A7A                     	endif
  2891  000A7A  0008               	tblrd		*
  2892  000A7C  50F5               	movf	tablat,w,c
  2893  000A7E  0012               	return	
  2894  000A80                     __end_ofPL44:
  2895                           	callstack 0
  2896  000A80                     PL78:
  2897                           	callstack 23
  2898  000A80  50F3               	movf	243,w,c
  2899  000A82  265F               	addwf	(??_displayMenu+2)^0,f,c
  2900  000A84  50F4               	movf	244,w,c
  2901  000A86  2260               	addwfc	(??_displayMenu+3)^0,f,c
  2902  000A88  0012               	return	
  2903  000A8A                     __end_ofPL78:
  2904                           	callstack 0
  2905                           
  2906 ;; *************** function ___awmod *****************
  2907 ;; Defined at:
  2908 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\awmod.c"
  2909 ;; Parameters:    Size  Location     Type
  2910 ;;  dividend        2    5[COMRAM] int 
  2911 ;;  divisor         2    7[COMRAM] int 
  2912 ;; Auto vars:     Size  Location     Type
  2913 ;;  sign            1   10[COMRAM] unsigned char 
  2914 ;;  counter         1    9[COMRAM] unsigned char 
  2915 ;; Return value:  Size  Location     Type
  2916 ;;                  2    5[COMRAM] int 
  2917 ;; Registers used:
  2918 ;;		wreg, status,2, status,0
  2919 ;; Tracked objects:
  2920 ;;		On entry : 0/0
  2921 ;;		On exit  : 0/0
  2922 ;;		Unchanged: 0/0
  2923 ;; Data sizes:     COMRAM   BANK0   BANK1
  2924 ;;      Params:         4       0       0
  2925 ;;      Locals:         2       0       0
  2926 ;;      Temps:          0       0       0
  2927 ;;      Totals:         6       0       0
  2928 ;;Total ram usage:        6 bytes
  2929 ;; Hardware stack levels used: 1
  2930 ;; Hardware stack levels required when called: 2
  2931 ;; This function calls:
  2932 ;;		Nothing
  2933 ;; This function is called by:
  2934 ;;		_displayMenu
  2935 ;; This function uses a non-reentrant model
  2936 ;;
  2937                           
  2938                           	psect	text9
  2939  00116C                     __ptext9:
  2940                           	callstack 0
  2941  00116C                     ___awmod:
  2942                           	callstack 26
  2943                           
  2944                           ;incstack = 0
  2945  00116C  6A50               	clrf	___awmod@sign^0,c
  2946  00116E  AE4C               	btfss	(___awmod@dividend+1)^0,7,c
  2947  001170  D006               	goto	l3394
  2948  001172  6C4B               	negf	___awmod@dividend^0,c
  2949  001174  1E4C               	comf	(___awmod@dividend+1)^0,f,c
  2950  001176  B0D8               	btfsc	status,0,c
  2951  001178  2A4C               	incf	(___awmod@dividend+1)^0,f,c
  2952  00117A  0E01               	movlw	1
  2953  00117C  6E50               	movwf	___awmod@sign^0,c
  2954  00117E                     l3394:
  2955  00117E  AE4E               	btfss	(___awmod@divisor+1)^0,7,c
  2956  001180  D004               	goto	l3398
  2957  001182  6C4D               	negf	___awmod@divisor^0,c
  2958  001184  1E4E               	comf	(___awmod@divisor+1)^0,f,c
  2959  001186  B0D8               	btfsc	status,0,c
  2960  001188  2A4E               	incf	(___awmod@divisor+1)^0,f,c
  2961  00118A                     l3398:
  2962  00118A  504D               	movf	___awmod@divisor^0,w,c
  2963  00118C  104E               	iorwf	(___awmod@divisor+1)^0,w,c
  2964  00118E  E017               	bz	l3414
  2965  001190  0E01               	movlw	1
  2966  001192  6E4F               	movwf	___awmod@counter^0,c
  2967  001194  D004               	goto	l3404
  2968  001196                     l3402:
  2969  001196  90D8               	bcf	status,0,c
  2970  001198  364D               	rlcf	___awmod@divisor^0,f,c
  2971  00119A  364E               	rlcf	(___awmod@divisor+1)^0,f,c
  2972  00119C  2A4F               	incf	___awmod@counter^0,f,c
  2973  00119E                     l3404:
  2974  00119E  AE4E               	btfss	(___awmod@divisor+1)^0,7,c
  2975  0011A0  D7FA               	goto	l3402
  2976  0011A2                     u2560:
  2977  0011A2  504D               	movf	___awmod@divisor^0,w,c
  2978  0011A4  5C4B               	subwf	___awmod@dividend^0,w,c
  2979  0011A6  504E               	movf	(___awmod@divisor+1)^0,w,c
  2980  0011A8  584C               	subwfb	(___awmod@dividend+1)^0,w,c
  2981  0011AA  E304               	bnc	l3410
  2982  0011AC  504D               	movf	___awmod@divisor^0,w,c
  2983  0011AE  5E4B               	subwf	___awmod@dividend^0,f,c
  2984  0011B0  504E               	movf	(___awmod@divisor+1)^0,w,c
  2985  0011B2  5A4C               	subwfb	(___awmod@dividend+1)^0,f,c
  2986  0011B4                     l3410:
  2987  0011B4  90D8               	bcf	status,0,c
  2988  0011B6  324E               	rrcf	(___awmod@divisor+1)^0,f,c
  2989  0011B8  324D               	rrcf	___awmod@divisor^0,f,c
  2990  0011BA  2E4F               	decfsz	___awmod@counter^0,f,c
  2991  0011BC  D7F2               	goto	u2560
  2992  0011BE                     l3414:
  2993  0011BE  5050               	movf	___awmod@sign^0,w,c
  2994  0011C0  E004               	bz	l3418
  2995  0011C2  6C4B               	negf	___awmod@dividend^0,c
  2996  0011C4  1E4C               	comf	(___awmod@dividend+1)^0,f,c
  2997  0011C6  B0D8               	btfsc	status,0,c
  2998  0011C8  2A4C               	incf	(___awmod@dividend+1)^0,f,c
  2999  0011CA                     l3418:
  3000  0011CA  C04B  F04B         	movff	___awmod@dividend,?___awmod
  3001  0011CE  C04C  F04C         	movff	___awmod@dividend+1,?___awmod+1
  3002  0011D2  0012               	return		;funcret
  3003  0011D4                     __end_of___awmod:
  3004                           	callstack 0
  3005                           
  3006 ;; *************** function _LcPutChar *****************
  3007 ;; Defined at:
  3008 ;;		line 161 in file "LcTLCD.c"
  3009 ;; Parameters:    Size  Location     Type
  3010 ;;  c               1    wreg     unsigned char 
  3011 ;; Auto vars:     Size  Location     Type
  3012 ;;  c               1   21[COMRAM] unsigned char 
  3013 ;; Return value:  Size  Location     Type
  3014 ;;                  1    wreg      void 
  3015 ;; Registers used:
  3016 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3017 ;; Tracked objects:
  3018 ;;		On entry : 0/0
  3019 ;;		On exit  : 0/0
  3020 ;;		Unchanged: 0/0
  3021 ;; Data sizes:     COMRAM   BANK0   BANK1
  3022 ;;      Params:         0       0       0
  3023 ;;      Locals:         1       0       0
  3024 ;;      Temps:          0       0       0
  3025 ;;      Totals:         1       0       0
  3026 ;;Total ram usage:        1 bytes
  3027 ;; Hardware stack levels used: 1
  3028 ;; Hardware stack levels required when called: 5
  3029 ;; This function calls:
  3030 ;;		_CantaData
  3031 ;;		_LcGotoXY
  3032 ;;		_WaitForBusy
  3033 ;; This function is called by:
  3034 ;;		_menuMotor
  3035 ;;		_displayMenu
  3036 ;;		_timeMotor
  3037 ;; This function uses a non-reentrant model
  3038 ;;
  3039                           
  3040                           	psect	text10
  3041  0012A0                     __ptext10:
  3042                           	callstack 0
  3043  0012A0                     _LcPutChar:
  3044                           	callstack 24
  3045                           
  3046                           ;incstack = 0
  3047                           ;LcPutChar@c stored from wreg
  3048  0012A0  6E5B               	movwf	LcPutChar@c^0,c
  3049                           
  3050                           ;LcTLCD.c: 171:  WaitForBusy(); CantaData(c);
  3051  0012A2  ECE4  F009         	call	_WaitForBusy	;wreg free
  3052  0012A6  505B               	movf	LcPutChar@c^0,w,c
  3053  0012A8  EC03  F00A         	call	_CantaData
  3054                           
  3055                           ;LcTLCD.c: 173:  ++ColumnAct;
  3056  0012AC  2A37               	incf	_ColumnAct^0,f,c
  3057                           
  3058                           ;LcTLCD.c: 174:  if (Rows == 3) {
  3059  0012AE  0E03               	movlw	3
  3060  0012B0  183A               	xorwf	_Rows^0,w,c
  3061  0012B2  E107               	bnz	l3366
  3062                           
  3063                           ;LcTLCD.c: 175:   if (ColumnAct >= 20) {
  3064  0012B4  0E13               	movlw	19
  3065  0012B6  6437               	cpfsgt	_ColumnAct^0,c
  3066  0012B8  0C13               	retlw	19
  3067                           
  3068                           ;LcTLCD.c: 176:    ColumnAct = 0;
  3069  0012BA  6A37               	clrf	_ColumnAct^0,c
  3070                           
  3071                           ;LcTLCD.c: 177:    if (++RowAct >= 4) RowAct = 0;
  3072  0012BC  2A38               	incf	_RowAct^0,f,c
  3073  0012BE  0E03               	movlw	3
  3074  0012C0  D009               	goto	L3
  3075  0012C2                     l3366:
  3076                           
  3077                           ;LcTLCD.c: 181:  if (Rows == 2) {
  3078  0012C2  0E02               	movlw	2
  3079  0012C4  183A               	xorwf	_Rows^0,w,c
  3080  0012C6  E10A               	bnz	l3378
  3081                           
  3082                           ;LcTLCD.c: 182:   if (ColumnAct >= 40) {
  3083  0012C8  0E27               	movlw	39
  3084  0012CA  6437               	cpfsgt	_ColumnAct^0,c
  3085  0012CC  0C27               	retlw	39
  3086                           
  3087                           ;LcTLCD.c: 183:    ColumnAct = 0;
  3088  0012CE  6A37               	clrf	_ColumnAct^0,c
  3089                           
  3090                           ;LcTLCD.c: 184:    if (++RowAct >= 2) RowAct = 0;
  3091  0012D0  2A38               	incf	_RowAct^0,f,c
  3092  0012D2  0E01               	movlw	1
  3093  0012D4                     L3:
  3094  0012D4  6438               	cpfsgt	_RowAct^0,c
  3095  0012D6  D009               	goto	l3384
  3096  0012D8  6A38               	clrf	_RowAct^0,c
  3097  0012DA  D007               	goto	l3384
  3098  0012DC                     l3378:
  3099                           
  3100                           ;LcTLCD.c: 188:  if (RowAct == 1) {
  3101  0012DC  0438               	decf	_RowAct^0,w,c
  3102  0012DE  A4D8               	btfss	status,2,c
  3103  0012E0  0012               	return	
  3104                           
  3105                           ;LcTLCD.c: 189:   if (ColumnAct >= 40) ColumnAct = 0;
  3106  0012E2  0E27               	movlw	39
  3107  0012E4  6437               	cpfsgt	_ColumnAct^0,c
  3108  0012E6  D001               	goto	l3384
  3109  0012E8  6A37               	clrf	_ColumnAct^0,c
  3110  0012EA                     l3384:
  3111                           
  3112                           ;LcTLCD.c: 190:   LcGotoXY(ColumnAct, RowAct);
  3113  0012EA  C038  F053         	movff	_RowAct,LcGotoXY@Row
  3114  0012EE  5037               	movf	_ColumnAct^0,w,c
  3115  0012F0  EF7A  F007         	goto	_LcGotoXY
  3116  0012F4                     __end_of_LcPutChar:
  3117                           	callstack 0
  3118                           
  3119 ;; *************** function _CantaData *****************
  3120 ;; Defined at:
  3121 ;;		line 245 in file "LcTLCD.c"
  3122 ;; Parameters:    Size  Location     Type
  3123 ;;  Data            1    wreg     unsigned char 
  3124 ;; Auto vars:     Size  Location     Type
  3125 ;;  Data            1    7[COMRAM] unsigned char 
  3126 ;; Return value:  Size  Location     Type
  3127 ;;                  1    wreg      void 
  3128 ;; Registers used:
  3129 ;;		wreg, status,2, status,0, cstack
  3130 ;; Tracked objects:
  3131 ;;		On entry : 0/0
  3132 ;;		On exit  : 0/0
  3133 ;;		Unchanged: 0/0
  3134 ;; Data sizes:     COMRAM   BANK0   BANK1
  3135 ;;      Params:         0       0       0
  3136 ;;      Locals:         1       0       0
  3137 ;;      Temps:          0       0       0
  3138 ;;      Totals:         1       0       0
  3139 ;;Total ram usage:        1 bytes
  3140 ;; Hardware stack levels used: 1
  3141 ;; Hardware stack levels required when called: 3
  3142 ;; This function calls:
  3143 ;;		_CantaPartAlta
  3144 ;;		_CantaPartBaixa
  3145 ;; This function is called by:
  3146 ;;		_LcPutChar
  3147 ;; This function uses a non-reentrant model
  3148 ;;
  3149                           
  3150                           	psect	text11
  3151  001406                     __ptext11:
  3152                           	callstack 0
  3153  001406                     _CantaData:
  3154                           	callstack 25
  3155                           
  3156                           ;incstack = 0
  3157                           ;CantaData@Data stored from wreg
  3158  001406  6E4D               	movwf	CantaData@Data^0,c
  3159                           
  3160                           ;LcTLCD.c: 246:  (TRISDbits.TRISD0 = TRISDbits.TRISD1 = TRISDbits.TRISD2 = TRISDbits.TRI
      +                          SD3 = 0);
  3161  001408  9695               	bcf	149,3,c	;volatile
  3162  00140A  9495               	bcf	149,2,c	;volatile
  3163  00140C  9295               	bcf	149,1,c	;volatile
  3164  00140E  9095               	bcf	149,0,c	;volatile
  3165                           
  3166                           ;LcTLCD.c: 247:  (LATDbits.LATD4 = 1);
  3167  001410  888C               	bsf	140,4,c	;volatile
  3168                           
  3169                           ;LcTLCD.c: 248:  (LATDbits.LATD5 = 0);
  3170  001412  9A8C               	bcf	140,5,c	;volatile
  3171                           
  3172                           ;LcTLCD.c: 249:  (LATDbits.LATD6 = 1);
  3173  001414  8C8C               	bsf	140,6,c	;volatile
  3174                           
  3175                           ;LcTLCD.c: 250:  CantaPartAlta(Data);
  3176  001416  504D               	movf	CantaData@Data^0,w,c
  3177  001418  EC1D  F009         	call	_CantaPartAlta
  3178                           
  3179                           ;LcTLCD.c: 251:  (LATDbits.LATD6 = 1);
  3180                           
  3181                           ;LcTLCD.c: 252:  (LATDbits.LATD6 = 0);
  3182                           
  3183                           ;LcTLCD.c: 253:  (LATDbits.LATD6 = 0);
  3184                           
  3185                           ;LcTLCD.c: 254:  (LATDbits.LATD6 = 1);
  3186  00141C  D80B               	call	PL70	;call to abstracted procedure
  3187                           
  3188                           ;LcTLCD.c: 255:  CantaPartBaixa(Data);
  3189  00141E  504D               	movf	CantaData@Data^0,w,c
  3190  001420  ECEA  F008         	call	_CantaPartBaixa
  3191                           
  3192                           ;LcTLCD.c: 256:  (LATDbits.LATD6 = 1);
  3193                           
  3194                           ;LcTLCD.c: 257:  (LATDbits.LATD6 = 0);
  3195                           
  3196                           ;LcTLCD.c: 258:  (TRISDbits.TRISD0 = TRISDbits.TRISD1 = TRISDbits.TRISD2 = TRISDbits.TRI
      +                          SD3 = 1);
  3197  001424  D000               	goto	PL48	;call to abstracted procedure
  3198  001426                     __end_of_CantaData:
  3199                           	callstack 0
  3200  001426                     PL48:
  3201                           	callstack 24
  3202  001426  8C8C               	bsf	140,6,c	;volatile
  3203  001428  9C8C               	bcf	140,6,c	;volatile
  3204  00142A  8695               	bsf	149,3,c	;volatile
  3205  00142C  8495               	bsf	149,2,c	;volatile
  3206  00142E  8295               	bsf	149,1,c	;volatile
  3207  001430  8095               	bsf	149,0,c	;volatile
  3208  001432  0012               	return		;funcret
  3209  001434                     __end_ofPL48:
  3210                           	callstack 0
  3211  001434                     PL70:
  3212                           	callstack 24
  3213  001434  8C8C               	bsf	140,6,c	;volatile
  3214  001436  9C8C               	bcf	140,6,c	;volatile
  3215  001438  9C8C               	bcf	140,6,c	;volatile
  3216  00143A  8C8C               	bsf	140,6,c	;volatile
  3217  00143C  0012               	return	
  3218  00143E                     __end_ofPL70:
  3219                           	callstack 0
  3220                           
  3221 ;; *************** function ___lbmod *****************
  3222 ;; Defined at:
  3223 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\lbmod.c"
  3224 ;; Parameters:    Size  Location     Type
  3225 ;;  dividend        1    wreg     unsigned char 
  3226 ;;  divisor         1    5[COMRAM] unsigned char 
  3227 ;; Auto vars:     Size  Location     Type
  3228 ;;  dividend        1    6[COMRAM] unsigned char 
  3229 ;;  rem             1    8[COMRAM] unsigned char 
  3230 ;;  counter         1    7[COMRAM] unsigned char 
  3231 ;; Return value:  Size  Location     Type
  3232 ;;                  1    wreg      unsigned char 
  3233 ;; Registers used:
  3234 ;;		wreg, status,2, status,0
  3235 ;; Tracked objects:
  3236 ;;		On entry : 0/0
  3237 ;;		On exit  : 0/0
  3238 ;;		Unchanged: 0/0
  3239 ;; Data sizes:     COMRAM   BANK0   BANK1
  3240 ;;      Params:         1       0       0
  3241 ;;      Locals:         3       0       0
  3242 ;;      Temps:          0       0       0
  3243 ;;      Totals:         4       0       0
  3244 ;;Total ram usage:        4 bytes
  3245 ;; Hardware stack levels used: 1
  3246 ;; Hardware stack levels required when called: 2
  3247 ;; This function calls:
  3248 ;;		Nothing
  3249 ;; This function is called by:
  3250 ;;		_menuMotor
  3251 ;; This function uses a non-reentrant model
  3252 ;;
  3253                           
  3254                           	psect	text12
  3255  0014F6                     __ptext12:
  3256                           	callstack 0
  3257  0014F6                     ___lbmod:
  3258                           	callstack 27
  3259                           
  3260                           ;incstack = 0
  3261                           ;___lbmod@dividend stored from wreg
  3262  0014F6  6E4C               	movwf	___lbmod@dividend^0,c
  3263  0014F8  0E08               	movlw	8
  3264  0014FA  6E4D               	movwf	___lbmod@counter^0,c
  3265  0014FC  6A4E               	clrf	___lbmod@rem^0,c
  3266  0014FE                     l3692:
  3267  0014FE  90D8               	bcf	status,0,c
  3268  001500  344C               	rlcf	___lbmod@dividend^0,w,c
  3269  001502  344E               	rlcf	___lbmod@rem^0,w,c
  3270  001504  6E4E               	movwf	___lbmod@rem^0,c
  3271  001506  90D8               	bcf	status,0,c
  3272  001508  364C               	rlcf	___lbmod@dividend^0,f,c
  3273  00150A  504B               	movf	___lbmod@divisor^0,w,c
  3274  00150C  5C4E               	subwf	___lbmod@rem^0,w,c
  3275  00150E  E302               	bnc	l3700
  3276  001510  504B               	movf	___lbmod@divisor^0,w,c
  3277  001512  5E4E               	subwf	___lbmod@rem^0,f,c
  3278  001514                     l3700:
  3279  001514  2E4D               	decfsz	___lbmod@counter^0,f,c
  3280  001516  D7F3               	goto	l3692
  3281  001518  504E               	movf	___lbmod@rem^0,w,c
  3282  00151A  0012               	return		;funcret
  3283  00151C                     __end_of___lbmod:
  3284                           	callstack 0
  3285                           
  3286 ;; *************** function ___lbdiv *****************
  3287 ;; Defined at:
  3288 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\lbdiv.c"
  3289 ;; Parameters:    Size  Location     Type
  3290 ;;  dividend        1    wreg     unsigned char 
  3291 ;;  divisor         1    5[COMRAM] unsigned char 
  3292 ;; Auto vars:     Size  Location     Type
  3293 ;;  dividend        1    6[COMRAM] unsigned char 
  3294 ;;  quotient        1    8[COMRAM] unsigned char 
  3295 ;;  counter         1    7[COMRAM] unsigned char 
  3296 ;; Return value:  Size  Location     Type
  3297 ;;                  1    wreg      unsigned char 
  3298 ;; Registers used:
  3299 ;;		wreg, status,2, status,0
  3300 ;; Tracked objects:
  3301 ;;		On entry : 0/0
  3302 ;;		On exit  : 0/0
  3303 ;;		Unchanged: 0/0
  3304 ;; Data sizes:     COMRAM   BANK0   BANK1
  3305 ;;      Params:         1       0       0
  3306 ;;      Locals:         3       0       0
  3307 ;;      Temps:          0       0       0
  3308 ;;      Totals:         4       0       0
  3309 ;;Total ram usage:        4 bytes
  3310 ;; Hardware stack levels used: 1
  3311 ;; Hardware stack levels required when called: 2
  3312 ;; This function calls:
  3313 ;;		Nothing
  3314 ;; This function is called by:
  3315 ;;		_menuMotor
  3316 ;; This function uses a non-reentrant model
  3317 ;;
  3318                           
  3319                           	psect	text13
  3320  00143E                     __ptext13:
  3321                           	callstack 0
  3322  00143E                     ___lbdiv:
  3323                           	callstack 27
  3324                           
  3325                           ;incstack = 0
  3326                           ;___lbdiv@dividend stored from wreg
  3327  00143E  6E4C               	movwf	___lbdiv@dividend^0,c
  3328  001440  6A4E               	clrf	___lbdiv@quotient^0,c
  3329  001442  504B               	movf	___lbdiv@divisor^0,w,c
  3330  001444  E014               	bz	l3684
  3331  001446  0E01               	movlw	1
  3332  001448  6E4D               	movwf	___lbdiv@counter^0,c
  3333  00144A  D003               	goto	l3672
  3334  00144C                     l3668:
  3335  00144C  90D8               	bcf	status,0,c
  3336  00144E  364B               	rlcf	___lbdiv@divisor^0,f,c
  3337  001450  2A4D               	incf	___lbdiv@counter^0,f,c
  3338  001452                     l3672:
  3339  001452  AE4B               	btfss	___lbdiv@divisor^0,7,c
  3340  001454  D7FB               	goto	l3668
  3341  001456                     u2890:
  3342  001456  90D8               	bcf	status,0,c
  3343  001458  364E               	rlcf	___lbdiv@quotient^0,f,c
  3344  00145A  504B               	movf	___lbdiv@divisor^0,w,c
  3345  00145C  5C4C               	subwf	___lbdiv@dividend^0,w,c
  3346  00145E  E303               	bnc	l3680
  3347  001460  504B               	movf	___lbdiv@divisor^0,w,c
  3348  001462  5E4C               	subwf	___lbdiv@dividend^0,f,c
  3349  001464  804E               	bsf	___lbdiv@quotient^0,0,c
  3350  001466                     l3680:
  3351  001466  90D8               	bcf	status,0,c
  3352  001468  324B               	rrcf	___lbdiv@divisor^0,f,c
  3353  00146A  2E4D               	decfsz	___lbdiv@counter^0,f,c
  3354  00146C  D7F4               	goto	u2890
  3355  00146E                     l3684:
  3356  00146E  504E               	movf	___lbdiv@quotient^0,w,c
  3357  001470  0012               	return		;funcret
  3358  001472                     __end_of___lbdiv:
  3359                           	callstack 0
  3360                           
  3361 ;; *************** function _SiRecievedByte *****************
  3362 ;; Defined at:
  3363 ;;		line 31 in file "SIO.c"
  3364 ;; Parameters:    Size  Location     Type
  3365 ;;		None
  3366 ;; Auto vars:     Size  Location     Type
  3367 ;;		None
  3368 ;; Return value:  Size  Location     Type
  3369 ;;                  1    wreg      unsigned char 
  3370 ;; Registers used:
  3371 ;;		wreg
  3372 ;; Tracked objects:
  3373 ;;		On entry : 0/0
  3374 ;;		On exit  : 0/0
  3375 ;;		Unchanged: 0/0
  3376 ;; Data sizes:     COMRAM   BANK0   BANK1
  3377 ;;      Params:         0       0       0
  3378 ;;      Locals:         0       0       0
  3379 ;;      Temps:          0       0       0
  3380 ;;      Totals:         0       0       0
  3381 ;;Total ram usage:        0 bytes
  3382 ;; Hardware stack levels used: 1
  3383 ;; Hardware stack levels required when called: 2
  3384 ;; This function calls:
  3385 ;;		Nothing
  3386 ;; This function is called by:
  3387 ;;		_menuMotor
  3388 ;; This function uses a non-reentrant model
  3389 ;;
  3390                           
  3391                           	psect	text14
  3392  0016F8                     __ptext14:
  3393                           	callstack 0
  3394  0016F8                     _SiRecievedByte:
  3395                           	callstack 27
  3396                           
  3397                           ;SIO.c: 32:     return PIR1bits.RCIF;
  3398                           
  3399                           ;incstack = 0
  3400  0016F8  BA9E               	btfsc	158,5,c	;volatile
  3401  0016FA  0C01               	retlw	1
  3402  0016FC  0C00               	retlw	0	;funcret
  3403  0016FE                     __end_of_SiRecievedByte:
  3404                           	callstack 0
  3405                           
  3406 ;; *************** function _SiReadByte *****************
  3407 ;; Defined at:
  3408 ;;		line 35 in file "SIO.c"
  3409 ;; Parameters:    Size  Location     Type
  3410 ;;		None
  3411 ;; Auto vars:     Size  Location     Type
  3412 ;;		None
  3413 ;; Return value:  Size  Location     Type
  3414 ;;                  1    wreg      unsigned char 
  3415 ;; Registers used:
  3416 ;;		wreg, status,2
  3417 ;; Tracked objects:
  3418 ;;		On entry : 0/0
  3419 ;;		On exit  : 0/0
  3420 ;;		Unchanged: 0/0
  3421 ;; Data sizes:     COMRAM   BANK0   BANK1
  3422 ;;      Params:         0       0       0
  3423 ;;      Locals:         0       0       0
  3424 ;;      Temps:          0       0       0
  3425 ;;      Totals:         0       0       0
  3426 ;;Total ram usage:        0 bytes
  3427 ;; Hardware stack levels used: 1
  3428 ;; Hardware stack levels required when called: 2
  3429 ;; This function calls:
  3430 ;;		Nothing
  3431 ;; This function is called by:
  3432 ;;		_menuMotor
  3433 ;; This function uses a non-reentrant model
  3434 ;;
  3435                           
  3436                           	psect	text15
  3437  00170C                     __ptext15:
  3438                           	callstack 0
  3439  00170C                     _SiReadByte:
  3440                           	callstack 27
  3441                           
  3442                           ;SIO.c: 36:     return RCREG;
  3443                           
  3444                           ;incstack = 0
  3445  00170C  50AE               	movf	174,w,c	;volatile
  3446  00170E  0012               	return		;funcret
  3447  001710                     __end_of_SiReadByte:
  3448                           	callstack 0
  3449                           
  3450 ;; *************** function _LcCursorOn *****************
  3451 ;; Defined at:
  3452 ;;		line 120 in file "LcTLCD.c"
  3453 ;; Parameters:    Size  Location     Type
  3454 ;;		None
  3455 ;; Auto vars:     Size  Location     Type
  3456 ;;		None
  3457 ;; Return value:  Size  Location     Type
  3458 ;;                  1    wreg      void 
  3459 ;; Registers used:
  3460 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3461 ;; Tracked objects:
  3462 ;;		On entry : 0/0
  3463 ;;		On exit  : 0/0
  3464 ;;		Unchanged: 0/0
  3465 ;; Data sizes:     COMRAM   BANK0   BANK1
  3466 ;;      Params:         0       0       0
  3467 ;;      Locals:         0       0       0
  3468 ;;      Temps:          0       0       0
  3469 ;;      Totals:         0       0       0
  3470 ;;Total ram usage:        0 bytes
  3471 ;; Hardware stack levels used: 1
  3472 ;; Hardware stack levels required when called: 4
  3473 ;; This function calls:
  3474 ;;		_CantaIR
  3475 ;;		_WaitForBusy
  3476 ;; This function is called by:
  3477 ;;		_menuMotor
  3478 ;; This function uses a non-reentrant model
  3479 ;;
  3480                           
  3481                           	psect	text16
  3482  0016AA                     __ptext16:
  3483                           	callstack 0
  3484  0016AA                     _LcCursorOn:
  3485                           	callstack 25
  3486                           
  3487                           ;LcTLCD.c: 123:  WaitForBusy();
  3488                           
  3489                           ;incstack = 0
  3490  0016AA  ECE4  F009         	call	_WaitForBusy	;wreg free
  3491                           
  3492                           ;LcTLCD.c: 124:  CantaIR(0x08 | 0x04 | 0x02);
  3493  0016AE  0E0E               	movlw	14
  3494  0016B0  EF05  F00B         	goto	_CantaIR
  3495  0016B4                     __end_of_LcCursorOn:
  3496                           	callstack 0
  3497                           
  3498 ;; *************** function _LcCursorOff *****************
  3499 ;; Defined at:
  3500 ;;		line 127 in file "LcTLCD.c"
  3501 ;; Parameters:    Size  Location     Type
  3502 ;;		None
  3503 ;; Auto vars:     Size  Location     Type
  3504 ;;		None
  3505 ;; Return value:  Size  Location     Type
  3506 ;;                  1    wreg      void 
  3507 ;; Registers used:
  3508 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3509 ;; Tracked objects:
  3510 ;;		On entry : 0/0
  3511 ;;		On exit  : 0/0
  3512 ;;		Unchanged: 0/0
  3513 ;; Data sizes:     COMRAM   BANK0   BANK1
  3514 ;;      Params:         0       0       0
  3515 ;;      Locals:         0       0       0
  3516 ;;      Temps:          0       0       0
  3517 ;;      Totals:         0       0       0
  3518 ;;Total ram usage:        0 bytes
  3519 ;; Hardware stack levels used: 1
  3520 ;; Hardware stack levels required when called: 4
  3521 ;; This function calls:
  3522 ;;		_CantaIR
  3523 ;;		_WaitForBusy
  3524 ;; This function is called by:
  3525 ;;		_menuMotor
  3526 ;; This function uses a non-reentrant model
  3527 ;;
  3528                           
  3529                           	psect	text17
  3530  0016B4                     __ptext17:
  3531                           	callstack 0
  3532  0016B4                     _LcCursorOff:
  3533                           	callstack 25
  3534                           
  3535                           ;LcTLCD.c: 130:  WaitForBusy();
  3536                           
  3537                           ;incstack = 0
  3538  0016B4  ECE4  F009         	call	_WaitForBusy	;wreg free
  3539                           
  3540                           ;LcTLCD.c: 131:  CantaIR(0x08 | 0x04);
  3541  0016B8  0E0C               	movlw	12
  3542  0016BA  EF05  F00B         	goto	_CantaIR
  3543  0016BE                     __end_of_LcCursorOff:
  3544                           	callstack 0
  3545                           
  3546 ;; *************** function _LcClear *****************
  3547 ;; Defined at:
  3548 ;;		line 113 in file "LcTLCD.c"
  3549 ;; Parameters:    Size  Location     Type
  3550 ;;		None
  3551 ;; Auto vars:     Size  Location     Type
  3552 ;;		None
  3553 ;; Return value:  Size  Location     Type
  3554 ;;                  1    wreg      void 
  3555 ;; Registers used:
  3556 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3557 ;; Tracked objects:
  3558 ;;		On entry : 0/0
  3559 ;;		On exit  : 0/0
  3560 ;;		Unchanged: 0/0
  3561 ;; Data sizes:     COMRAM   BANK0   BANK1
  3562 ;;      Params:         0       0       0
  3563 ;;      Locals:         0       0       0
  3564 ;;      Temps:          0       0       0
  3565 ;;      Totals:         0       0       0
  3566 ;;Total ram usage:        0 bytes
  3567 ;; Hardware stack levels used: 1
  3568 ;; Hardware stack levels required when called: 4
  3569 ;; This function calls:
  3570 ;;		_CantaIR
  3571 ;;		_Espera
  3572 ;;		_WaitForBusy
  3573 ;; This function is called by:
  3574 ;;		_menuMotor
  3575 ;; This function uses a non-reentrant model
  3576 ;;
  3577                           
  3578                           	psect	text18
  3579  00165A                     __ptext18:
  3580                           	callstack 0
  3581  00165A                     _LcClear:
  3582                           	callstack 25
  3583                           
  3584                           ;LcTLCD.c: 116:  WaitForBusy(); CantaIR(0x01);
  3585                           
  3586                           ;incstack = 0
  3587  00165A  ECE4  F009         	call	_WaitForBusy	;wreg free
  3588  00165E  0E01               	movlw	1
  3589  001660  EC05  F00B         	call	_CantaIR
  3590                           
  3591                           ;LcTLCD.c: 117:  Espera(Timer, 3);
  3592  001664  ECBB  F006         	call	PL22	;call to abstracted procedure
  3593  001668  0E03               	movlw	3
  3594  00166A  6E54               	movwf	Espera@ms^0,c
  3595  00166C  EFE6  F00A         	goto	_Espera	;wreg free
  3596  001670                     __end_of_LcClear:
  3597                           	callstack 0
  3598                           
  3599 ;; *************** function _KeSetMode *****************
  3600 ;; Defined at:
  3601 ;;		line 247 in file "keypad.c"
  3602 ;; Parameters:    Size  Location     Type
  3603 ;;  menuMode        1    wreg     unsigned char 
  3604 ;; Auto vars:     Size  Location     Type
  3605 ;;  menuMode        1    6[COMRAM] unsigned char 
  3606 ;; Return value:  Size  Location     Type
  3607 ;;                  1    wreg      void 
  3608 ;; Registers used:
  3609 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3610 ;; Tracked objects:
  3611 ;;		On entry : 0/0
  3612 ;;		On exit  : 0/0
  3613 ;;		Unchanged: 0/0
  3614 ;; Data sizes:     COMRAM   BANK0   BANK1
  3615 ;;      Params:         0       0       0
  3616 ;;      Locals:         1       0       0
  3617 ;;      Temps:          0       0       0
  3618 ;;      Totals:         1       0       0
  3619 ;;Total ram usage:        1 bytes
  3620 ;; Hardware stack levels used: 1
  3621 ;; Hardware stack levels required when called: 3
  3622 ;; This function calls:
  3623 ;;		_TiResetTics
  3624 ;; This function is called by:
  3625 ;;		_menuMotor
  3626 ;; This function uses a non-reentrant model
  3627 ;;
  3628                           
  3629                           	psect	text19
  3630  001542                     __ptext19:
  3631                           	callstack 0
  3632  001542                     _KeSetMode:
  3633                           	callstack 26
  3634                           
  3635                           ;incstack = 0
  3636                           ;KeSetMode@menuMode stored from wreg
  3637  001542  6E4C               	movwf	KeSetMode@menuMode^0,c
  3638                           
  3639                           ;keypad.c: 248:     if (menuMode == 1){
  3640  001544  044C               	decf	KeSetMode@menuMode^0,w,c
  3641  001546  E108               	bnz	l3468
  3642                           
  3643                           ;keypad.c: 249:         previous = 0;
  3644  001548  6A40               	clrf	_previous^0,c
  3645                           
  3646                           ;keypad.c: 250:         numPresses = 0;
  3647  00154A  6A3E               	clrf	_numPresses^0,c
  3648                           
  3649                           ;keypad.c: 251:         available = 0;
  3650  00154C  6A3D               	clrf	_available^0,c
  3651                           
  3652                           ;keypad.c: 252:         stateSMS = 2;
  3653  00154E  0E02               	movlw	2
  3654  001550  6E3B               	movwf	_stateSMS^0,c
  3655                           
  3656                           ;keypad.c: 253:         TiResetTics(timer_SMS);
  3657  001552  5042               	movf	_timer_SMS^0,w,c
  3658  001554  EF13  F00B         	goto	_TiResetTics
  3659  001558                     l3468:
  3660  001558  504C               	movf	KeSetMode@menuMode^0,w,c
  3661  00155A  A4D8               	btfss	status,2,c
  3662  00155C  0012               	return	
  3663                           
  3664                           ;keypad.c: 255:         stateSMS = 4;
  3665  00155E  D000               	goto	PL84	;call to abstracted procedure
  3666  001560                     __end_of_KeSetMode:
  3667                           	callstack 0
  3668  001560                     PL84:
  3669                           	callstack 26
  3670  001560  0E04               	movlw	4
  3671  001562  6E3B               	movwf	_stateSMS^0,c
  3672  001564  0C04               	retlw	4
  3673  001566                     __end_ofPL84:
  3674                           	callstack 0
  3675                           
  3676 ;; *************** function _KeGetCharValue *****************
  3677 ;; Defined at:
  3678 ;;		line 221 in file "keypad.c"
  3679 ;; Parameters:    Size  Location     Type
  3680 ;;		None
  3681 ;; Auto vars:     Size  Location     Type
  3682 ;;		None
  3683 ;; Return value:  Size  Location     Type
  3684 ;;                  1    wreg      unsigned char 
  3685 ;; Registers used:
  3686 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3687 ;; Tracked objects:
  3688 ;;		On entry : 0/0
  3689 ;;		On exit  : 0/0
  3690 ;;		Unchanged: 0/0
  3691 ;; Data sizes:     COMRAM   BANK0   BANK1
  3692 ;;      Params:         0       0       0
  3693 ;;      Locals:         0       0       0
  3694 ;;      Temps:          0       0       0
  3695 ;;      Totals:         0       0       0
  3696 ;;Total ram usage:        0 bytes
  3697 ;; Hardware stack levels used: 1
  3698 ;; Hardware stack levels required when called: 4
  3699 ;; This function calls:
  3700 ;;		_KeGetGenericValue
  3701 ;;		_getFullValue
  3702 ;; This function is called by:
  3703 ;;		_menuMotor
  3704 ;; This function uses a non-reentrant model
  3705 ;;
  3706                           
  3707                           	psect	text20
  3708  0016C8                     __ptext20:
  3709                           	callstack 0
  3710  0016C8                     _KeGetCharValue:
  3711                           	callstack 25
  3712                           
  3713                           ;keypad.c: 222:     return getFullValue(KeGetGenericValue());
  3714                           
  3715                           ;incstack = 0
  3716  0016C8  EC4F  F00A         	call	_KeGetGenericValue	;wreg free
  3717  0016CC  EF44  F008         	goto	_getFullValue
  3718  0016D0                     __end_of_KeGetCharValue:
  3719                           	callstack 0
  3720                           
  3721 ;; *************** function _getFullValue *****************
  3722 ;; Defined at:
  3723 ;;		line 230 in file "keypad.c"
  3724 ;; Parameters:    Size  Location     Type
  3725 ;;  generic         1    wreg     unsigned char 
  3726 ;; Auto vars:     Size  Location     Type
  3727 ;;  generic         1    9[COMRAM] unsigned char 
  3728 ;; Return value:  Size  Location     Type
  3729 ;;                  1    wreg      unsigned char 
  3730 ;; Registers used:
  3731 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
  3732 ;; Tracked objects:
  3733 ;;		On entry : 0/0
  3734 ;;		On exit  : 0/0
  3735 ;;		Unchanged: 0/0
  3736 ;; Data sizes:     COMRAM   BANK0   BANK1
  3737 ;;      Params:         0       0       0
  3738 ;;      Locals:         1       0       0
  3739 ;;      Temps:          4       0       0
  3740 ;;      Totals:         5       0       0
  3741 ;;Total ram usage:        5 bytes
  3742 ;; Hardware stack levels used: 1
  3743 ;; Hardware stack levels required when called: 2
  3744 ;; This function calls:
  3745 ;;		Nothing
  3746 ;; This function is called by:
  3747 ;;		_KeGetCharValue
  3748 ;; This function uses a non-reentrant model
  3749 ;;
  3750                           
  3751                           	psect	text21
  3752  001088                     __ptext21:
  3753                           	callstack 0
  3754  001088                     _getFullValue:
  3755                           	callstack 26
  3756                           
  3757                           ;incstack = 0
  3758                           ;getFullValue@generic stored from wreg
  3759  001088  6E4F               	movwf	getFullValue@generic^0,c
  3760                           
  3761                           ;keypad.c: 232:     if (generic - '0' >= 2 && generic - '0' <= 9){
  3762  00108A  D82D               	call	PL36	;call to abstracted procedure
  3763  00108C  E103               	bnz	u2410
  3764  00108E  0E02               	movlw	2
  3765  001090  5C4D               	subwf	(??_getFullValue+2)^0,w,c
  3766  001092  E30A               	bnc	l3340
  3767  001094                     u2410:
  3768  001094  D828               	call	PL36	;call to abstracted procedure
  3769  001096  E108               	bnz	l3340
  3770  001098  0E0A               	movlw	10
  3771  00109A  5C4D               	subwf	(??_getFullValue+2)^0,w,c
  3772  00109C  E205               	bc	l3340
  3773                           
  3774                           ;keypad.c: 233:         if (SMSTABLE[generic - '0' - 1][(numPresses-1)] == '\0'){
  3775  00109E  D806               	call	PL8	;call to abstracted procedure
  3776  0010A0  E105               	bnz	PL8
  3777                           
  3778                           ;keypad.c: 234:             numPresses = 1;
  3779  0010A2  0E01               	movlw	1
  3780  0010A4  6E3E               	movwf	_numPresses^0,c
  3781  0010A6                     l3336:
  3782                           
  3783                           ;keypad.c: 236:         return SMSTABLE[generic - '0' - 1][(numPresses-1)];
  3784  0010A6  D002               	goto	PL8	;call to abstracted procedure
  3785  0010A8                     l3340:
  3786                           
  3787                           ;keypad.c: 238:     return generic;
  3788  0010A8  504F               	movf	getFullValue@generic^0,w,c
  3789  0010AA  0012               	return		;funcret
  3790  0010AC                     __end_of_getFullValue:
  3791                           	callstack 0
  3792  0010AC                     PL8:
  3793                           	callstack 26
  3794  0010AC  0ED9               	movlw	217
  3795  0010AE  6E4B               	movwf	??_getFullValue^0,c
  3796  0010B0  0EFE               	movlw	254
  3797  0010B2  6E4C               	movwf	(??_getFullValue+1)^0,c
  3798  0010B4  504F               	movf	getFullValue@generic^0,w,c
  3799  0010B6  0D06               	mullw	6
  3800  0010B8  0EC8               	movlw	low _SMSTABLE
  3801  0010BA  6E4D               	movwf	(??_getFullValue+2)^0,c
  3802  0010BC  0E1F               	movlw	high _SMSTABLE
  3803  0010BE  6E4E               	movwf	(??_getFullValue+3)^0,c
  3804  0010C0  50F3               	movf	243,w,c
  3805  0010C2  264D               	addwf	(??_getFullValue+2)^0,f,c
  3806  0010C4  50F4               	movf	244,w,c
  3807  0010C6  224E               	addwfc	(??_getFullValue+3)^0,f,c
  3808  0010C8  503E               	movf	_numPresses^0,w,c
  3809  0010CA  264D               	addwf	(??_getFullValue+2)^0,f,c
  3810  0010CC  0E00               	movlw	0
  3811  0010CE  224E               	addwfc	(??_getFullValue+3)^0,f,c
  3812  0010D0  504B               	movf	??_getFullValue^0,w,c
  3813  0010D2  264D               	addwf	(??_getFullValue+2)^0,f,c
  3814  0010D4  504C               	movf	(??_getFullValue+1)^0,w,c
  3815  0010D6  224E               	addwfc	(??_getFullValue+3)^0,f,c
  3816  0010D8  C04D  FFF6         	movff	??_getFullValue+2,tblptrl
  3817  0010DC  C04E  FFF7         	movff	??_getFullValue+3,tblptrh
  3818  0010E0                     	if	0	;tblptru may be non-zero
  3819  0010E0                     	endif
  3820  0010E0                     	if	0	;tblptru may be non-zero
  3821  0010E0                     	endif
  3822  0010E0  0008               	tblrd		*
  3823  0010E2  50F5               	movf	tablat,w,c
  3824  0010E4  0012               	return	
  3825  0010E6                     __end_ofPL8:
  3826                           	callstack 0
  3827  0010E6                     PL36:
  3828                           	callstack 26
  3829  0010E6  0ED0               	movlw	208
  3830  0010E8  6E4B               	movwf	??_getFullValue^0,c
  3831  0010EA  684C               	setf	(??_getFullValue+1)^0,c
  3832  0010EC  504F               	movf	getFullValue@generic^0,w,c
  3833  0010EE  6E4D               	movwf	(??_getFullValue+2)^0,c
  3834  0010F0  6A4E               	clrf	(??_getFullValue+3)^0,c
  3835  0010F2  504B               	movf	??_getFullValue^0,w,c
  3836  0010F4  264D               	addwf	(??_getFullValue+2)^0,f,c
  3837  0010F6  504C               	movf	(??_getFullValue+1)^0,w,c
  3838  0010F8  224E               	addwfc	(??_getFullValue+3)^0,f,c
  3839  0010FA  504E               	movf	(??_getFullValue+3)^0,w,c
  3840  0010FC  0012               	return	
  3841  0010FE                     __end_ofPL36:
  3842                           	callstack 0
  3843                           
  3844 ;; *************** function _JoSetMode *****************
  3845 ;; Defined at:
  3846 ;;		line 109 in file "Joystick.c"
  3847 ;; Parameters:    Size  Location     Type
  3848 ;;  mode            1    wreg     unsigned char 
  3849 ;; Auto vars:     Size  Location     Type
  3850 ;;  mode            1    5[COMRAM] unsigned char 
  3851 ;; Return value:  Size  Location     Type
  3852 ;;                  1    wreg      void 
  3853 ;; Registers used:
  3854 ;;		wreg
  3855 ;; Tracked objects:
  3856 ;;		On entry : 0/0
  3857 ;;		On exit  : 0/0
  3858 ;;		Unchanged: 0/0
  3859 ;; Data sizes:     COMRAM   BANK0   BANK1
  3860 ;;      Params:         0       0       0
  3861 ;;      Locals:         1       0       0
  3862 ;;      Temps:          0       0       0
  3863 ;;      Totals:         1       0       0
  3864 ;;Total ram usage:        1 bytes
  3865 ;; Hardware stack levels used: 1
  3866 ;; Hardware stack levels required when called: 2
  3867 ;; This function calls:
  3868 ;;		Nothing
  3869 ;; This function is called by:
  3870 ;;		_menuMotor
  3871 ;; This function uses a non-reentrant model
  3872 ;;
  3873                           
  3874                           	psect	text22
  3875  0016D0                     __ptext22:
  3876                           	callstack 0
  3877  0016D0                     _JoSetMode:
  3878                           	callstack 27
  3879                           
  3880                           ;incstack = 0
  3881                           ;JoSetMode@mode stored from wreg
  3882  0016D0  6E4B               	movwf	JoSetMode@mode^0,c
  3883                           
  3884                           ;Joystick.c: 110:     joyMode = mode;
  3885  0016D2  C04B  F02B         	movff	JoSetMode@mode,_joyMode
  3886  0016D6  0012               	return		;funcret
  3887  0016D8                     __end_of_JoSetMode:
  3888                           	callstack 0
  3889                           
  3890 ;; *************** function _JoMoved *****************
  3891 ;; Defined at:
  3892 ;;		line 101 in file "Joystick.c"
  3893 ;; Parameters:    Size  Location     Type
  3894 ;;		None
  3895 ;; Auto vars:     Size  Location     Type
  3896 ;;		None
  3897 ;; Return value:  Size  Location     Type
  3898 ;;                  1    wreg      unsigned char 
  3899 ;; Registers used:
  3900 ;;		wreg, status,2
  3901 ;; Tracked objects:
  3902 ;;		On entry : 0/0
  3903 ;;		On exit  : 0/0
  3904 ;;		Unchanged: 0/0
  3905 ;; Data sizes:     COMRAM   BANK0   BANK1
  3906 ;;      Params:         0       0       0
  3907 ;;      Locals:         0       0       0
  3908 ;;      Temps:          0       0       0
  3909 ;;      Totals:         0       0       0
  3910 ;;Total ram usage:        0 bytes
  3911 ;; Hardware stack levels used: 1
  3912 ;; Hardware stack levels required when called: 2
  3913 ;; This function calls:
  3914 ;;		Nothing
  3915 ;; This function is called by:
  3916 ;;		_menuMotor
  3917 ;; This function uses a non-reentrant model
  3918 ;;
  3919                           
  3920                           	psect	text23
  3921  001710                     __ptext23:
  3922                           	callstack 0
  3923  001710                     _JoMoved:
  3924                           	callstack 27
  3925                           
  3926                           ;Joystick.c: 102:     return moved;
  3927                           
  3928                           ;incstack = 0
  3929  001710  502D               	movf	_moved^0,w,c
  3930  001712  0012               	return		;funcret
  3931  001714                     __end_of_JoMoved:
  3932                           	callstack 0
  3933                           
  3934 ;; *************** function _JoDirection *****************
  3935 ;; Defined at:
  3936 ;;		line 105 in file "Joystick.c"
  3937 ;; Parameters:    Size  Location     Type
  3938 ;;		None
  3939 ;; Auto vars:     Size  Location     Type
  3940 ;;		None
  3941 ;; Return value:  Size  Location     Type
  3942 ;;                  1    wreg      unsigned char 
  3943 ;; Registers used:
  3944 ;;		wreg, status,2
  3945 ;; Tracked objects:
  3946 ;;		On entry : 0/0
  3947 ;;		On exit  : 0/0
  3948 ;;		Unchanged: 0/0
  3949 ;; Data sizes:     COMRAM   BANK0   BANK1
  3950 ;;      Params:         0       0       0
  3951 ;;      Locals:         0       0       0
  3952 ;;      Temps:          0       0       0
  3953 ;;      Totals:         0       0       0
  3954 ;;Total ram usage:        0 bytes
  3955 ;; Hardware stack levels used: 1
  3956 ;; Hardware stack levels required when called: 2
  3957 ;; This function calls:
  3958 ;;		Nothing
  3959 ;; This function is called by:
  3960 ;;		_menuMotor
  3961 ;; This function uses a non-reentrant model
  3962 ;;
  3963                           
  3964                           	psect	text24
  3965  001714                     __ptext24:
  3966                           	callstack 0
  3967  001714                     _JoDirection:
  3968                           	callstack 27
  3969                           
  3970                           ;Joystick.c: 106:     return send;
  3971                           
  3972                           ;incstack = 0
  3973  001714  5030               	movf	_send^0,w,c
  3974  001716  0012               	return		;funcret
  3975  001718                     __end_of_JoDirection:
  3976                           	callstack 0
  3977                           
  3978 ;; *************** function _DaSaveUser *****************
  3979 ;; Defined at:
  3980 ;;		line 283 in file "EEPROM.c"
  3981 ;; Parameters:    Size  Location     Type
  3982 ;;  regUser        18    5[COMRAM] struct .
  3983 ;; Auto vars:     Size  Location     Type
  3984 ;;		None
  3985 ;; Return value:  Size  Location     Type
  3986 ;;                  1    wreg      void 
  3987 ;; Registers used:
  3988 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  3989 ;; Tracked objects:
  3990 ;;		On entry : 0/0
  3991 ;;		On exit  : 0/0
  3992 ;;		Unchanged: 0/0
  3993 ;; Data sizes:     COMRAM   BANK0   BANK1
  3994 ;;      Params:        18       0       0
  3995 ;;      Locals:         0       0       0
  3996 ;;      Temps:          0       0       0
  3997 ;;      Totals:        18       0       0
  3998 ;;Total ram usage:       18 bytes
  3999 ;; Hardware stack levels used: 1
  4000 ;; Hardware stack levels required when called: 2
  4001 ;; This function calls:
  4002 ;;		Nothing
  4003 ;; This function is called by:
  4004 ;;		_menuMotor
  4005 ;; This function uses a non-reentrant model
  4006 ;;
  4007                           
  4008                           	psect	text25
  4009  0015AC                     __ptext25:
  4010                           	callstack 0
  4011  0015AC                     _DaSaveUser:
  4012                           	callstack 27
  4013                           
  4014                           ;EEPROM.c: 284:     state = 5;
  4015                           
  4016                           ;incstack = 0
  4017  0015AC  0E05               	movlw	5
  4018  0015AE  6E2A               	movwf	_state@EEPROM$F1505^0,c
  4019                           
  4020                           ;EEPROM.c: 285:     position = 0;
  4021  0015B0  6A28               	clrf	_position^0,c
  4022                           
  4023                           ;EEPROM.c: 286:     userNum = 0;
  4024  0015B2  6A29               	clrf	_userNum^0,c
  4025                           
  4026                           ;EEPROM.c: 287:     mUser = regUser;
  4027  0015B4  EE20  F04B         	lfsr	2,DaSaveUser@regUser
  4028  0015B8  EE10  F001         	lfsr	1,_mUser@EEPROM$F1509
  4029  0015BC  0E11               	movlw	17
  4030  0015BE                     u2831:
  4031  0015BE  CFDB FFE3          	movff	plusw2,plusw1
  4032  0015C2  06E8               	decf	wreg,f,c
  4033  0015C4  E2FC               	bc	u2831
  4034                           
  4035                           ;EEPROM.c: 288:     status = 2;
  4036  0015C6  0E02               	movlw	2
  4037  0015C8  6E27               	movwf	_status^0,c
  4038  0015CA  0C02               	retlw	2	;funcret
  4039  0015CC                     __end_of_DaSaveUser:
  4040                           	callstack 0
  4041                           
  4042 ;; *************** function _DaSaveScore *****************
  4043 ;; Defined at:
  4044 ;;		line 299 in file "EEPROM.c"
  4045 ;; Parameters:    Size  Location     Type
  4046 ;;  userScore       1    wreg     unsigned char 
  4047 ;; Auto vars:     Size  Location     Type
  4048 ;;  userScore       1    5[COMRAM] unsigned char 
  4049 ;; Return value:  Size  Location     Type
  4050 ;;                  1    wreg      void 
  4051 ;; Registers used:
  4052 ;;		wreg, status,2
  4053 ;; Tracked objects:
  4054 ;;		On entry : 0/0
  4055 ;;		On exit  : 0/0
  4056 ;;		Unchanged: 0/0
  4057 ;; Data sizes:     COMRAM   BANK0   BANK1
  4058 ;;      Params:         0       0       0
  4059 ;;      Locals:         1       0       0
  4060 ;;      Temps:          0       0       0
  4061 ;;      Totals:         1       0       0
  4062 ;;Total ram usage:        1 bytes
  4063 ;; Hardware stack levels used: 1
  4064 ;; Hardware stack levels required when called: 2
  4065 ;; This function calls:
  4066 ;;		Nothing
  4067 ;; This function is called by:
  4068 ;;		_menuMotor
  4069 ;; This function uses a non-reentrant model
  4070 ;;
  4071                           
  4072                           	psect	text26
  4073  001684                     __ptext26:
  4074                           	callstack 0
  4075  001684                     _DaSaveScore:
  4076                           	callstack 27
  4077                           
  4078                           ;incstack = 0
  4079                           ;DaSaveScore@userScore stored from wreg
  4080  001684  6E4B               	movwf	DaSaveScore@userScore^0,c
  4081                           
  4082                           ;EEPROM.c: 300:     saveScore = userScore;
  4083  001686  C04B  F025         	movff	DaSaveScore@userScore,_saveScore
  4084                           
  4085                           ;EEPROM.c: 301:     position = 0;
  4086  00168A  6A28               	clrf	_position^0,c
  4087                           
  4088                           ;EEPROM.c: 302:     status = 0;
  4089  00168C  6A27               	clrf	_status^0,c
  4090                           
  4091                           ;EEPROM.c: 303:     state = 20;
  4092  00168E  0E14               	movlw	20
  4093  001690  6E2A               	movwf	_state@EEPROM$F1505^0,c
  4094  001692  0C14               	retlw	20	;funcret
  4095  001694                     __end_of_DaSaveScore:
  4096                           	callstack 0
  4097                           
  4098 ;; *************** function _DaGetStatus *****************
  4099 ;; Defined at:
  4100 ;;		line 291 in file "EEPROM.c"
  4101 ;; Parameters:    Size  Location     Type
  4102 ;;		None
  4103 ;; Auto vars:     Size  Location     Type
  4104 ;;		None
  4105 ;; Return value:  Size  Location     Type
  4106 ;;                  1    wreg      unsigned char 
  4107 ;; Registers used:
  4108 ;;		wreg, status,2
  4109 ;; Tracked objects:
  4110 ;;		On entry : 0/0
  4111 ;;		On exit  : 0/0
  4112 ;;		Unchanged: 0/0
  4113 ;; Data sizes:     COMRAM   BANK0   BANK1
  4114 ;;      Params:         0       0       0
  4115 ;;      Locals:         0       0       0
  4116 ;;      Temps:          0       0       0
  4117 ;;      Totals:         0       0       0
  4118 ;;Total ram usage:        0 bytes
  4119 ;; Hardware stack levels used: 1
  4120 ;; Hardware stack levels required when called: 2
  4121 ;; This function calls:
  4122 ;;		Nothing
  4123 ;; This function is called by:
  4124 ;;		_menuMotor
  4125 ;; This function uses a non-reentrant model
  4126 ;;
  4127                           
  4128                           	psect	text27
  4129  001718                     __ptext27:
  4130                           	callstack 0
  4131  001718                     _DaGetStatus:
  4132                           	callstack 27
  4133                           
  4134                           ;EEPROM.c: 292:     return status;
  4135                           
  4136                           ;incstack = 0
  4137  001718  5027               	movf	_status^0,w,c
  4138  00171A  0012               	return		;funcret
  4139  00171C                     __end_of_DaGetStatus:
  4140                           	callstack 0
  4141                           
  4142 ;; *************** function _DaGetIdle *****************
  4143 ;; Defined at:
  4144 ;;		line 295 in file "EEPROM.c"
  4145 ;; Parameters:    Size  Location     Type
  4146 ;;		None
  4147 ;; Auto vars:     Size  Location     Type
  4148 ;;		None
  4149 ;; Return value:  Size  Location     Type
  4150 ;;                  1    wreg      unsigned char 
  4151 ;; Registers used:
  4152 ;;		wreg, status,2
  4153 ;; Tracked objects:
  4154 ;;		On entry : 0/0
  4155 ;;		On exit  : 0/0
  4156 ;;		Unchanged: 0/0
  4157 ;; Data sizes:     COMRAM   BANK0   BANK1
  4158 ;;      Params:         0       0       0
  4159 ;;      Locals:         0       0       0
  4160 ;;      Temps:          0       0       0
  4161 ;;      Totals:         0       0       0
  4162 ;;Total ram usage:        0 bytes
  4163 ;; Hardware stack levels used: 1
  4164 ;; Hardware stack levels required when called: 2
  4165 ;; This function calls:
  4166 ;;		Nothing
  4167 ;; This function is called by:
  4168 ;;		_menuMotor
  4169 ;; This function uses a non-reentrant model
  4170 ;;
  4171                           
  4172                           	psect	text28
  4173  0016D8                     __ptext28:
  4174                           	callstack 0
  4175  0016D8                     _DaGetIdle:
  4176                           	callstack 27
  4177                           
  4178                           ;EEPROM.c: 296:     return state == 0;
  4179                           
  4180                           ;incstack = 0
  4181  0016D8  502A               	movf	_state@EEPROM$F1505^0,w,c
  4182  0016DA  B4D8               	btfsc	status,2,c
  4183  0016DC  0C01               	retlw	1
  4184  0016DE  0C00               	retlw	0	;funcret
  4185  0016E0                     __end_of_DaGetIdle:
  4186                           	callstack 0
  4187                           
  4188 ;; *************** function _DaFindUser *****************
  4189 ;; Defined at:
  4190 ;;		line 269 in file "EEPROM.c"
  4191 ;; Parameters:    Size  Location     Type
  4192 ;;  logUser        18   21[COMRAM] struct .
  4193 ;; Auto vars:     Size  Location     Type
  4194 ;;		None
  4195 ;; Return value:  Size  Location     Type
  4196 ;;                  1    wreg      void 
  4197 ;; Registers used:
  4198 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4199 ;; Tracked objects:
  4200 ;;		On entry : 0/0
  4201 ;;		On exit  : 0/0
  4202 ;;		Unchanged: 0/0
  4203 ;; Data sizes:     COMRAM   BANK0   BANK1
  4204 ;;      Params:        18       0       0
  4205 ;;      Locals:         0       0       0
  4206 ;;      Temps:          0       0       0
  4207 ;;      Totals:        18       0       0
  4208 ;;Total ram usage:       18 bytes
  4209 ;; Hardware stack levels used: 1
  4210 ;; Hardware stack levels required when called: 5
  4211 ;; This function calls:
  4212 ;;		_LcGotoXY
  4213 ;; This function is called by:
  4214 ;;		_menuMotor
  4215 ;; This function uses a non-reentrant model
  4216 ;;
  4217                           
  4218                           	psect	text29
  4219  001566                     __ptext29:
  4220                           	callstack 0
  4221  001566                     _DaFindUser:
  4222                           	callstack 24
  4223                           
  4224                           ;EEPROM.c: 270:     state = 1;
  4225                           
  4226                           ;incstack = 0
  4227  001566  0E01               	movlw	1
  4228  001568  6E2A               	movwf	_state@EEPROM$F1505^0,c
  4229                           
  4230                           ;EEPROM.c: 271:     userNum = 0;
  4231  00156A  6A29               	clrf	_userNum^0,c
  4232                           
  4233                           ;EEPROM.c: 272:     mUser = logUser;
  4234  00156C  EE20  F05B         	lfsr	2,DaFindUser@logUser
  4235  001570  EE10  F001         	lfsr	1,_mUser@EEPROM$F1509
  4236  001574  0E11               	movlw	17
  4237  001576                     u2821:
  4238  001576  CFDB FFE3          	movff	plusw2,plusw1
  4239  00157A  06E8               	decf	wreg,f,c
  4240  00157C  E2FC               	bc	u2821
  4241                           
  4242                           ;EEPROM.c: 273:     status = 2;
  4243  00157E  0E02               	movlw	2
  4244  001580  6E27               	movwf	_status^0,c
  4245                           
  4246                           ;EEPROM.c: 274:     LcGotoXY(10,0);
  4247  001582  6A53               	clrf	LcGotoXY@Row^0,c
  4248  001584  0E0A               	movlw	10
  4249  001586  EF7A  F007         	goto	_LcGotoXY
  4250  00158A                     __end_of_DaFindUser:
  4251                           	callstack 0
  4252                           
  4253 ;; *************** function _joystickMotor *****************
  4254 ;; Defined at:
  4255 ;;		line 29 in file "Joystick.c"
  4256 ;; Parameters:    Size  Location     Type
  4257 ;;		None
  4258 ;; Auto vars:     Size  Location     Type
  4259 ;;		None
  4260 ;; Return value:  Size  Location     Type
  4261 ;;                  1    wreg      void 
  4262 ;; Registers used:
  4263 ;;		wreg, status,2, status,0, cstack
  4264 ;; Tracked objects:
  4265 ;;		On entry : 0/0
  4266 ;;		On exit  : 0/0
  4267 ;;		Unchanged: 0/0
  4268 ;; Data sizes:     COMRAM   BANK0   BANK1
  4269 ;;      Params:         0       0       0
  4270 ;;      Locals:         0       0       0
  4271 ;;      Temps:          2       0       0
  4272 ;;      Totals:         2       0       0
  4273 ;;Total ram usage:        2 bytes
  4274 ;; Hardware stack levels used: 1
  4275 ;; Hardware stack levels required when called: 3
  4276 ;; This function calls:
  4277 ;;		_SiIsAvailable
  4278 ;;		_SiSendChar
  4279 ;; This function is called by:
  4280 ;;		_main
  4281 ;; This function uses a non-reentrant model
  4282 ;;
  4283                           
  4284                           	psect	text30
  4285  000D82                     __ptext30:
  4286                           	callstack 0
  4287  000D82                     _joystickMotor:
  4288                           	callstack 27
  4289                           
  4290                           ;Joystick.c: 30:     LATC = stateJoy;
  4291                           
  4292                           ;incstack = 0
  4293  000D82  C02C  FF8B         	movff	_stateJoy,3979	;volatile
  4294                           
  4295                           ;Joystick.c: 31:     switch (stateJoy){
  4296  000D86  D04C               	goto	l4344
  4297  000D88                     l628:
  4298                           
  4299                           ;Joystick.c: 33:             if (ADCON0bits.GO_DONE == 0){
  4300  000D88  B2C2               	btfsc	194,1,c	;volatile
  4301  000D8A  0012               	return	
  4302                           
  4303                           ;Joystick.c: 34:                 y = ADRESH;
  4304  000D8C  CFC4 F02E          	movff	4036,_y	;volatile
  4305                           
  4306                           ;Joystick.c: 35:                 ADCON0bits.CHS0=1;
  4307  000D90  84C2               	bsf	194,2,c	;volatile
  4308                           
  4309                           ;Joystick.c: 36:                 ADCON0bits.CHS1=0;
  4310  000D92  96C2               	bcf	194,3,c	;volatile
  4311                           
  4312                           ;Joystick.c: 37:                 stateJoy = 1;
  4313  000D94  0E01               	movlw	1
  4314  000D96  6E2C               	movwf	_stateJoy^0,c
  4315                           
  4316                           ;Joystick.c: 38:                 ADCON0bits.GO_DONE=1;
  4317  000D98  82C2               	bsf	194,1,c	;volatile
  4318  000D9A  0C01               	retlw	1
  4319  000D9C                     l631:
  4320                           
  4321                           ;Joystick.c: 42:             if (ADCON0bits.GO_DONE == 0){
  4322  000D9C  B2C2               	btfsc	194,1,c	;volatile
  4323  000D9E  0012               	return	
  4324                           
  4325                           ;Joystick.c: 43:                 x = ADRESH;
  4326  000DA0  CFC4 F02F          	movff	4036,_x	;volatile
  4327                           
  4328                           ;Joystick.c: 44:                 ADCON0bits.CHS0=0;
  4329  000DA4  94C2               	bcf	194,2,c	;volatile
  4330                           
  4331                           ;Joystick.c: 45:                 ADCON0bits.CHS1=1;
  4332  000DA6  86C2               	bsf	194,3,c	;volatile
  4333                           
  4334                           ;Joystick.c: 46:                 stateJoy = 2;
  4335  000DA8  0E02               	movlw	2
  4336  000DAA  6E2C               	movwf	_stateJoy^0,c
  4337  000DAC  0C02               	retlw	2
  4338  000DAE                     l4298:
  4339                           
  4340                           ;Joystick.c: 50:             stateJoy = 4;
  4341  000DAE  0E04               	movlw	4
  4342  000DB0  6E2C               	movwf	_stateJoy^0,c
  4343                           
  4344                           ;Joystick.c: 51:             if (moved){
  4345  000DB2  502D               	movf	_moved^0,w,c
  4346  000DB4  E00F               	bz	l4310
  4347                           
  4348                           ;Joystick.c: 52:                 if (x >= 100 && x <= 150 && y >= 100 && y <= 150){
  4349  000DB6  0E63               	movlw	99
  4350  000DB8  642F               	cpfsgt	_x^0,c
  4351  000DBA  0C63               	retlw	99
  4352  000DBC  0E97               	movlw	151
  4353  000DBE  602F               	cpfslt	_x^0,c
  4354  000DC0  0C97               	retlw	151
  4355  000DC2  0E63               	movlw	99
  4356  000DC4  642E               	cpfsgt	_y^0,c
  4357  000DC6  0C63               	retlw	99
  4358  000DC8  0E97               	movlw	151
  4359  000DCA  602E               	cpfslt	_y^0,c
  4360  000DCC  0C97               	retlw	151
  4361                           
  4362                           ;Joystick.c: 53:                     moved = 0;
  4363  000DCE  6A2D               	clrf	_moved^0,c
  4364                           
  4365                           ;Joystick.c: 54:                     LATCbits.LATC0 = 0;
  4366  000DD0  908B               	bcf	139,0,c	;volatile
  4367                           
  4368                           ;Joystick.c: 56:             }else {
  4369                           
  4370                           ;Joystick.c: 55:                 }
  4371  000DD2  0012               	return	
  4372  000DD4                     l4310:
  4373                           
  4374                           ;Joystick.c: 57:                 if (x <= 10){
  4375  000DD4  0E0B               	movlw	11
  4376  000DD6  602F               	cpfslt	_x^0,c
  4377  000DD8  D008               	goto	l4316
  4378                           
  4379                           ;Joystick.c: 58:                     send = 'A';
  4380  000DDA  0E41               	movlw	65
  4381  000DDC                     L4:
  4382  000DDC  6E30               	movwf	_send^0,c
  4383                           
  4384                           ;Joystick.c: 59:                     moved = 1;
  4385  000DDE  0E01               	movlw	1
  4386  000DE0  6E2D               	movwf	_moved^0,c
  4387                           
  4388                           ;Joystick.c: 60:                     stateJoy = 4+joyMode;
  4389  000DE2  502B               	movf	_joyMode^0,w,c
  4390  000DE4  0F04               	addlw	4
  4391  000DE6  6E2C               	movwf	_stateJoy^0,c
  4392                           
  4393                           ;Joystick.c: 61:                 } else if (x >= 240){
  4394  000DE8  0012               	return	
  4395  000DEA                     l4316:
  4396  000DEA  0EEF               	movlw	239
  4397  000DEC  642F               	cpfsgt	_x^0,c
  4398  000DEE  D002               	goto	l4322
  4399                           
  4400                           ;Joystick.c: 62:                     send = 'D';
  4401  000DF0  0E44               	movlw	68
  4402  000DF2  D7F4               	goto	L4
  4403  000DF4                     l4322:
  4404  000DF4  0E0B               	movlw	11
  4405  000DF6  602E               	cpfslt	_y^0,c
  4406  000DF8  D002               	goto	l4328
  4407                           
  4408                           ;Joystick.c: 66:                     send = 'S';
  4409  000DFA  0E53               	movlw	83
  4410  000DFC  D7EF               	goto	L4
  4411  000DFE                     l4328:
  4412  000DFE  0EEF               	movlw	239
  4413  000E00  642E               	cpfsgt	_y^0,c
  4414  000E02  0CEF               	retlw	239
  4415                           
  4416                           ;Joystick.c: 70:                     send = 'W';
  4417  000E04  0E57               	movlw	87
  4418  000E06  D7EA               	goto	L4
  4419  000E08                     l644:
  4420                           
  4421                           ;Joystick.c: 82:             stateJoy = 0;
  4422                           
  4423                           ;Joystick.c: 83:             ADCON0bits.GO_DONE=1;
  4424                           
  4425                           ;Joystick.c: 84:             break;
  4426  000E08  D01B               	goto	PL86	;call to abstracted procedure
  4427  000E0A                     l4334:
  4428                           
  4429                           ;Joystick.c: 87:             if(SiIsAvailable()){
  4430  000E0A  EC7F  F00B         	call	_SiIsAvailable	;wreg free
  4431  000E0E  0900               	iorlw	0
  4432  000E10  B4D8               	btfsc	status,2,c
  4433  000E12  0012               	return	
  4434                           
  4435                           ;Joystick.c: 88:                 SiSendChar(send);
  4436  000E14  5030               	movf	_send^0,w,c
  4437  000E16  EC70  F00B         	call	_SiSendChar
  4438                           
  4439                           ;Joystick.c: 89:                 stateJoy = 0;
  4440                           
  4441                           ;Joystick.c: 90:                 ADCON0bits.GO_DONE=1;
  4442  000E1A  D012               	goto	PL86	;call to abstracted procedure
  4443  000E1C                     l647:
  4444                           
  4445                           ;Joystick.c: 94:             stateJoy = 0;
  4446  000E1C  6A2C               	clrf	_stateJoy^0,c
  4447                           
  4448                           ;Joystick.c: 95:             break;
  4449  000E1E  0012               	return	
  4450  000E20                     l4344:
  4451  000E20  502C               	movf	_stateJoy^0,w,c
  4452  000E22  6E4C               	movwf	??_joystickMotor^0,c
  4453  000E24  6A4D               	clrf	(??_joystickMotor+1)^0,c
  4454                           
  4455                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4456                           ; Switch size 1, requested type "space"
  4457                           ; Number of cases is 1, Range of values is 0 to 0
  4458                           ; switch strategies available:
  4459                           ; Name         Instructions Cycles
  4460                           ; simple_byte            4     3 (average)
  4461                           ;	Chosen strategy is simple_byte
  4462  000E26  504D               	movf	(??_joystickMotor+1)^0,w,c
  4463  000E28  E1F9               	bnz	l647
  4464                           
  4465                           ; Switch size 1, requested type "space"
  4466                           ; Number of cases is 5, Range of values is 0 to 5
  4467                           ; switch strategies available:
  4468                           ; Name         Instructions Cycles
  4469                           ; simple_byte           16     9 (average)
  4470                           ;	Chosen strategy is simple_byte
  4471  000E2A  504C               	movf	??_joystickMotor^0,w,c
  4472  000E2C  E0AD               	bz	l628
  4473  000E2E  0A01               	xorlw	1	; case 1
  4474  000E30  E0B5               	bz	l631
  4475  000E32  0A03               	xorlw	3	; case 2
  4476  000E34  E0BC               	bz	l4298
  4477  000E36  0A06               	xorlw	6	; case 4
  4478  000E38  E003               	bz	PL86
  4479  000E3A  0A01               	xorlw	1	; case 5
  4480  000E3C  E0E6               	bz	l4334
  4481  000E3E  D7EE               	goto	l647
  4482  000E40                     __end_of_joystickMotor:
  4483                           	callstack 0
  4484  000E40                     PL86:
  4485                           	callstack 27
  4486  000E40  6A2C               	clrf	_stateJoy^0,c
  4487  000E42  82C2               	bsf	194,1,c	;volatile
  4488  000E44  0012               	return	
  4489  000E46                     __end_ofPL86:
  4490                           	callstack 0
  4491                           
  4492 ;; *************** function _SiSendChar *****************
  4493 ;; Defined at:
  4494 ;;		line 27 in file "SIO.c"
  4495 ;; Parameters:    Size  Location     Type
  4496 ;;  myByte          1    wreg     unsigned char 
  4497 ;; Auto vars:     Size  Location     Type
  4498 ;;  myByte          1    5[COMRAM] unsigned char 
  4499 ;; Return value:  Size  Location     Type
  4500 ;;                  1    wreg      void 
  4501 ;; Registers used:
  4502 ;;		wreg
  4503 ;; Tracked objects:
  4504 ;;		On entry : 0/0
  4505 ;;		On exit  : 0/0
  4506 ;;		Unchanged: 0/0
  4507 ;; Data sizes:     COMRAM   BANK0   BANK1
  4508 ;;      Params:         0       0       0
  4509 ;;      Locals:         1       0       0
  4510 ;;      Temps:          0       0       0
  4511 ;;      Totals:         1       0       0
  4512 ;;Total ram usage:        1 bytes
  4513 ;; Hardware stack levels used: 1
  4514 ;; Hardware stack levels required when called: 2
  4515 ;; This function calls:
  4516 ;;		Nothing
  4517 ;; This function is called by:
  4518 ;;		_menuMotor
  4519 ;;		_joystickMotor
  4520 ;; This function uses a non-reentrant model
  4521 ;;
  4522                           
  4523                           	psect	text31
  4524  0016E0                     __ptext31:
  4525                           	callstack 0
  4526  0016E0                     _SiSendChar:
  4527                           	callstack 27
  4528                           
  4529                           ;incstack = 0
  4530                           ;SiSendChar@myByte stored from wreg
  4531  0016E0  6E4B               	movwf	SiSendChar@myByte^0,c
  4532                           
  4533                           ;SIO.c: 28:     TXREG = myByte;
  4534  0016E2  C04B  FFAD         	movff	SiSendChar@myByte,4013	;volatile
  4535  0016E6  0012               	return		;funcret
  4536  0016E8                     __end_of_SiSendChar:
  4537                           	callstack 0
  4538                           
  4539 ;; *************** function _SiIsAvailable *****************
  4540 ;; Defined at:
  4541 ;;		line 23 in file "SIO.c"
  4542 ;; Parameters:    Size  Location     Type
  4543 ;;		None
  4544 ;; Auto vars:     Size  Location     Type
  4545 ;;		None
  4546 ;; Return value:  Size  Location     Type
  4547 ;;                  1    wreg      unsigned char 
  4548 ;; Registers used:
  4549 ;;		wreg
  4550 ;; Tracked objects:
  4551 ;;		On entry : 0/0
  4552 ;;		On exit  : 0/0
  4553 ;;		Unchanged: 0/0
  4554 ;; Data sizes:     COMRAM   BANK0   BANK1
  4555 ;;      Params:         0       0       0
  4556 ;;      Locals:         0       0       0
  4557 ;;      Temps:          0       0       0
  4558 ;;      Totals:         0       0       0
  4559 ;;Total ram usage:        0 bytes
  4560 ;; Hardware stack levels used: 1
  4561 ;; Hardware stack levels required when called: 2
  4562 ;; This function calls:
  4563 ;;		Nothing
  4564 ;; This function is called by:
  4565 ;;		_menuMotor
  4566 ;;		_joystickMotor
  4567 ;; This function uses a non-reentrant model
  4568 ;;
  4569                           
  4570                           	psect	text32
  4571  0016FE                     __ptext32:
  4572                           	callstack 0
  4573  0016FE                     _SiIsAvailable:
  4574                           	callstack 27
  4575                           
  4576                           ;SIO.c: 24:     return TXSTAbits.TRMT;
  4577                           
  4578                           ;incstack = 0
  4579  0016FE  B2AC               	btfsc	172,1,c	;volatile
  4580  001700  0C01               	retlw	1
  4581  001702  0C00               	retlw	0	;funcret
  4582  001704                     __end_of_SiIsAvailable:
  4583                           	callstack 0
  4584                           
  4585 ;; *************** function _initTime *****************
  4586 ;; Defined at:
  4587 ;;		line 17 in file "time.c"
  4588 ;; Parameters:    Size  Location     Type
  4589 ;;		None
  4590 ;; Auto vars:     Size  Location     Type
  4591 ;;		None
  4592 ;; Return value:  Size  Location     Type
  4593 ;;                  1    wreg      void 
  4594 ;; Registers used:
  4595 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4596 ;; Tracked objects:
  4597 ;;		On entry : 0/0
  4598 ;;		On exit  : 0/0
  4599 ;;		Unchanged: 0/0
  4600 ;; Data sizes:     COMRAM   BANK0   BANK1
  4601 ;;      Params:         0       0       0
  4602 ;;      Locals:         0       0       0
  4603 ;;      Temps:          0       0       0
  4604 ;;      Totals:         0       0       0
  4605 ;;Total ram usage:        0 bytes
  4606 ;; Hardware stack levels used: 1
  4607 ;; Hardware stack levels required when called: 3
  4608 ;; This function calls:
  4609 ;;		_TiGetTimer
  4610 ;; This function is called by:
  4611 ;;		_main
  4612 ;; This function uses a non-reentrant model
  4613 ;;
  4614                           
  4615                           	psect	text33
  4616  0016E8                     __ptext33:
  4617                           	callstack 0
  4618  0016E8                     _initTime:
  4619                           	callstack 27
  4620                           
  4621                           ;time.c: 18:     timer = TiGetTimer();
  4622                           
  4623                           ;incstack = 0
  4624  0016E8  EC65  F00A         	call	_TiGetTimer	;wreg free
  4625  0016EC  6E24               	movwf	_timer@time$F1561^0,c
  4626  0016EE  0012               	return		;funcret
  4627  0016F0                     __end_of_initTime:
  4628                           	callstack 0
  4629                           
  4630 ;; *************** function _initSIO *****************
  4631 ;; Defined at:
  4632 ;;		line 5 in file "SIO.c"
  4633 ;; Parameters:    Size  Location     Type
  4634 ;;		None
  4635 ;; Auto vars:     Size  Location     Type
  4636 ;;		None
  4637 ;; Return value:  Size  Location     Type
  4638 ;;                  1    wreg      void 
  4639 ;; Registers used:
  4640 ;;		None
  4641 ;; Tracked objects:
  4642 ;;		On entry : 0/0
  4643 ;;		On exit  : 0/0
  4644 ;;		Unchanged: 0/0
  4645 ;; Data sizes:     COMRAM   BANK0   BANK1
  4646 ;;      Params:         0       0       0
  4647 ;;      Locals:         0       0       0
  4648 ;;      Temps:          0       0       0
  4649 ;;      Totals:         0       0       0
  4650 ;;Total ram usage:        0 bytes
  4651 ;; Hardware stack levels used: 1
  4652 ;; Hardware stack levels required when called: 2
  4653 ;; This function calls:
  4654 ;;		Nothing
  4655 ;; This function is called by:
  4656 ;;		_main
  4657 ;; This function uses a non-reentrant model
  4658 ;;
  4659                           
  4660                           	psect	text34
  4661  001670                     __ptext34:
  4662                           	callstack 0
  4663  001670                     _initSIO:
  4664                           	callstack 28
  4665                           
  4666                           ;SIO.c: 8:     TRISCbits.TRISC7 = 1;
  4667                           
  4668                           ;incstack = 0
  4669  001670  8E94               	bsf	148,7,c	;volatile
  4670                           
  4671                           ;SIO.c: 9:     TRISCbits.TRISC6 = 1;
  4672  001672  8C94               	bsf	148,6,c	;volatile
  4673                           
  4674                           ;SIO.c: 10:     TXSTAbits.BRGH = 1;
  4675  001674  84AC               	bsf	172,2,c	;volatile
  4676                           
  4677                           ;SIO.c: 11:     TXSTAbits.TXEN = 1;
  4678  001676  8AAC               	bsf	172,5,c	;volatile
  4679                           
  4680                           ;SIO.c: 12:     TXSTAbits.SYNC = 0;
  4681  001678  98AC               	bcf	172,4,c	;volatile
  4682                           
  4683                           ;SIO.c: 14:     RCSTAbits.SPEN = 1;
  4684  00167A  8EAB               	bsf	171,7,c	;volatile
  4685                           
  4686                           ;SIO.c: 15:     RCSTAbits.CREN = 1;
  4687  00167C  88AB               	bsf	171,4,c	;volatile
  4688                           
  4689                           ;SIO.c: 17:     BAUDCONbits.BRG16 = 0;
  4690  00167E  96B8               	bcf	184,3,c	;volatile
  4691                           
  4692                           ;SIO.c: 19:     SPBRG = 255;
  4693  001680  68AF               	setf	175,c	;volatile
  4694  001682  0012               	return		;funcret
  4695  001684                     __end_of_initSIO:
  4696                           	callstack 0
  4697                           
  4698 ;; *************** function _initMenu *****************
  4699 ;; Defined at:
  4700 ;;		line 24 in file "Menu.c"
  4701 ;; Parameters:    Size  Location     Type
  4702 ;;		None
  4703 ;; Auto vars:     Size  Location     Type
  4704 ;;		None
  4705 ;; Return value:  Size  Location     Type
  4706 ;;                  1    wreg      void 
  4707 ;; Registers used:
  4708 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4709 ;; Tracked objects:
  4710 ;;		On entry : 0/0
  4711 ;;		On exit  : 0/0
  4712 ;;		Unchanged: 0/0
  4713 ;; Data sizes:     COMRAM   BANK0   BANK1
  4714 ;;      Params:         0       0       0
  4715 ;;      Locals:         0       0       0
  4716 ;;      Temps:          0       0       0
  4717 ;;      Totals:         0       0       0
  4718 ;;Total ram usage:        0 bytes
  4719 ;; Hardware stack levels used: 1
  4720 ;; Hardware stack levels required when called: 3
  4721 ;; This function calls:
  4722 ;;		_TiGetTimer
  4723 ;; This function is called by:
  4724 ;;		_main
  4725 ;; This function uses a non-reentrant model
  4726 ;;
  4727                           
  4728                           	psect	text35
  4729  0016F0                     __ptext35:
  4730                           	callstack 0
  4731  0016F0                     _initMenu:
  4732                           	callstack 27
  4733                           
  4734                           ;Menu.c: 25:     timer = TiGetTimer();
  4735                           
  4736                           ;incstack = 0
  4737  0016F0  EC65  F00A         	call	_TiGetTimer	;wreg free
  4738  0016F4  6E36               	movwf	_timer^0,c
  4739  0016F6  0012               	return		;funcret
  4740  0016F8                     __end_of_initMenu:
  4741                           	callstack 0
  4742                           
  4743 ;; *************** function _initKeypad *****************
  4744 ;; Defined at:
  4745 ;;		line 29 in file "keypad.c"
  4746 ;; Parameters:    Size  Location     Type
  4747 ;;		None
  4748 ;; Auto vars:     Size  Location     Type
  4749 ;;		None
  4750 ;; Return value:  Size  Location     Type
  4751 ;;                  1    wreg      void 
  4752 ;; Registers used:
  4753 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4754 ;; Tracked objects:
  4755 ;;		On entry : 0/0
  4756 ;;		On exit  : 0/0
  4757 ;;		Unchanged: 0/0
  4758 ;; Data sizes:     COMRAM   BANK0   BANK1
  4759 ;;      Params:         0       0       0
  4760 ;;      Locals:         0       0       0
  4761 ;;      Temps:          0       0       0
  4762 ;;      Totals:         0       0       0
  4763 ;;Total ram usage:        0 bytes
  4764 ;; Hardware stack levels used: 1
  4765 ;; Hardware stack levels required when called: 3
  4766 ;; This function calls:
  4767 ;;		_TiGetTimer
  4768 ;; This function is called by:
  4769 ;;		_main
  4770 ;; This function uses a non-reentrant model
  4771 ;;
  4772                           
  4773                           	psect	text36
  4774  0015EC                     __ptext36:
  4775                           	callstack 0
  4776  0015EC                     _initKeypad:
  4777                           	callstack 27
  4778                           
  4779                           ;keypad.c: 30:     INTCON2bits.RBPU = 0;
  4780                           
  4781                           ;incstack = 0
  4782  0015EC  9EF1               	bcf	241,7,c	;volatile
  4783                           
  4784                           ;keypad.c: 33:     TRISBbits.TRISB0 = 1;
  4785  0015EE  8093               	bsf	147,0,c	;volatile
  4786                           
  4787                           ;keypad.c: 34:     TRISBbits.TRISB1 = 1;
  4788  0015F0  8293               	bsf	147,1,c	;volatile
  4789                           
  4790                           ;keypad.c: 35:     TRISBbits.TRISB2 = 1;
  4791  0015F2  8493               	bsf	147,2,c	;volatile
  4792                           
  4793                           ;keypad.c: 36:     TRISBbits.TRISB3 = 0;
  4794  0015F4  9693               	bcf	147,3,c	;volatile
  4795                           
  4796                           ;keypad.c: 37:     TRISBbits.TRISB4 = 0;
  4797  0015F6  9893               	bcf	147,4,c	;volatile
  4798                           
  4799                           ;keypad.c: 38:     TRISBbits.TRISB5 = 0;
  4800  0015F8  9A93               	bcf	147,5,c	;volatile
  4801                           
  4802                           ;keypad.c: 39:     TRISBbits.TRISB6 = 0;
  4803  0015FA  9C93               	bcf	147,6,c	;volatile
  4804                           
  4805                           ;keypad.c: 40:     timerBounces = TiGetTimer();
  4806  0015FC  EC65  F00A         	call	_TiGetTimer	;wreg free
  4807  001600  6E43               	movwf	_timerBounces^0,c
  4808                           
  4809                           ;keypad.c: 41:     timer_SMS = TiGetTimer();
  4810  001602  EC65  F00A         	call	_TiGetTimer	;wreg free
  4811  001606  6E42               	movwf	_timer_SMS^0,c
  4812  001608  0012               	return		;funcret
  4813  00160A                     __end_of_initKeypad:
  4814                           	callstack 0
  4815                           
  4816 ;; *************** function _initJoystick *****************
  4817 ;; Defined at:
  4818 ;;		line 11 in file "Joystick.c"
  4819 ;; Parameters:    Size  Location     Type
  4820 ;;		None
  4821 ;; Auto vars:     Size  Location     Type
  4822 ;;		None
  4823 ;; Return value:  Size  Location     Type
  4824 ;;                  1    wreg      void 
  4825 ;; Registers used:
  4826 ;;		wreg, status,2
  4827 ;; Tracked objects:
  4828 ;;		On entry : 0/0
  4829 ;;		On exit  : 0/0
  4830 ;;		Unchanged: 0/0
  4831 ;; Data sizes:     COMRAM   BANK0   BANK1
  4832 ;;      Params:         0       0       0
  4833 ;;      Locals:         0       0       0
  4834 ;;      Temps:          0       0       0
  4835 ;;      Totals:         0       0       0
  4836 ;;Total ram usage:        0 bytes
  4837 ;; Hardware stack levels used: 1
  4838 ;; Hardware stack levels required when called: 2
  4839 ;; This function calls:
  4840 ;;		Nothing
  4841 ;; This function is called by:
  4842 ;;		_main
  4843 ;; This function uses a non-reentrant model
  4844 ;;
  4845                           
  4846                           	psect	text37
  4847  00158A                     __ptext37:
  4848                           	callstack 0
  4849  00158A                     _initJoystick:
  4850                           	callstack 28
  4851                           
  4852                           ;Joystick.c: 12:     TRISAbits.TRISA0 = 1;
  4853                           
  4854                           ;incstack = 0
  4855  00158A  8092               	bsf	146,0,c	;volatile
  4856                           
  4857                           ;Joystick.c: 13:     TRISAbits.TRISA1 = 1;
  4858  00158C  8292               	bsf	146,1,c	;volatile
  4859                           
  4860                           ;Joystick.c: 14:     ADCON0 = 0x03;
  4861  00158E  0E03               	movlw	3
  4862  001590  6EC2               	movwf	194,c	;volatile
  4863                           
  4864                           ;Joystick.c: 15:     ADCON1 = 0x0C;
  4865  001592  0E0C               	movlw	12
  4866  001594  6EC1               	movwf	193,c	;volatile
  4867                           
  4868                           ;Joystick.c: 16:     ADCON2 = 0x44;
  4869  001596  0E44               	movlw	68
  4870  001598  6EC0               	movwf	192,c	;volatile
  4871                           
  4872                           ;Joystick.c: 18:     TRISCbits.TRISC0 = 0;
  4873  00159A  9094               	bcf	148,0,c	;volatile
  4874                           
  4875                           ;Joystick.c: 19:     TRISCbits.TRISC1 = 0;
  4876  00159C  9294               	bcf	148,1,c	;volatile
  4877                           
  4878                           ;Joystick.c: 20:     TRISCbits.TRISC2 = 0;
  4879  00159E  9494               	bcf	148,2,c	;volatile
  4880                           
  4881                           ;Joystick.c: 21:     moved = 0;
  4882  0015A0  6A2D               	clrf	_moved^0,c
  4883                           
  4884                           ;Joystick.c: 22:     ADCON0bits.GO_DONE=1;
  4885  0015A2  82C2               	bsf	194,1,c	;volatile
  4886                           
  4887                           ;Joystick.c: 23:     ADCON0bits.CHS0=0;
  4888  0015A4  94C2               	bcf	194,2,c	;volatile
  4889                           
  4890                           ;Joystick.c: 24:     ADCON0bits.CHS1=1;
  4891  0015A6  86C2               	bsf	194,3,c	;volatile
  4892                           
  4893                           ;Joystick.c: 25:     stateJoy = 0;
  4894  0015A8  6A2C               	clrf	_stateJoy^0,c
  4895  0015AA  0012               	return		;funcret
  4896  0015AC                     __end_of_initJoystick:
  4897                           	callstack 0
  4898                           
  4899 ;; *************** function _initData *****************
  4900 ;; Defined at:
  4901 ;;		line 24 in file "EEPROM.c"
  4902 ;; Parameters:    Size  Location     Type
  4903 ;;		None
  4904 ;; Auto vars:     Size  Location     Type
  4905 ;;		None
  4906 ;; Return value:  Size  Location     Type
  4907 ;;                  1    wreg      void 
  4908 ;; Registers used:
  4909 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4910 ;; Tracked objects:
  4911 ;;		On entry : 0/0
  4912 ;;		On exit  : 0/0
  4913 ;;		Unchanged: 0/0
  4914 ;; Data sizes:     COMRAM   BANK0   BANK1
  4915 ;;      Params:         0       0       0
  4916 ;;      Locals:         0       0       0
  4917 ;;      Temps:          0       0       0
  4918 ;;      Totals:         0       0       0
  4919 ;;Total ram usage:        0 bytes
  4920 ;; Hardware stack levels used: 1
  4921 ;; Hardware stack levels required when called: 3
  4922 ;; This function calls:
  4923 ;;		_readUserData
  4924 ;; This function is called by:
  4925 ;;		_main
  4926 ;; This function uses a non-reentrant model
  4927 ;;
  4928                           
  4929                           	psect	text38
  4930  0010FE                     __ptext38:
  4931                           	callstack 0
  4932  0010FE                     _initData:
  4933                           	callstack 27
  4934                           
  4935                           ;EEPROM.c: 25:     state = 0;
  4936                           
  4937                           ;incstack = 0
  4938  0010FE  6A2A               	clrf	_state@EEPROM$F1505^0,c
  4939                           
  4940                           ;EEPROM.c: 26:     for (userNum = 0; userNum < 8; userNum++){
  4941  001100  6A29               	clrf	_userNum^0,c
  4942  001102                     l2242:
  4943  001102  0E07               	movlw	7
  4944  001104  6429               	cpfsgt	_userNum^0,c
  4945  001106  D001               	goto	l2246
  4946  001108  D004               	goto	l724
  4947  00110A                     l2246:
  4948                           
  4949                           ;EEPROM.c: 27:         readUserData();
  4950  00110A  ECC4  F007         	call	_readUserData	;wreg free
  4951                           
  4952                           ;EEPROM.c: 28:     }
  4953  00110E  2A29               	incf	_userNum^0,f,c
  4954  001110  D7F8               	goto	l2242
  4955  001112                     l724:
  4956                           
  4957                           ;EEPROM.c: 29:     for (position = 0; position < 10; position = position+2){
  4958  001112  6A28               	clrf	_position^0,c
  4959  001114                     l2252:
  4960  001114  0E09               	movlw	9
  4961  001116  6428               	cpfsgt	_position^0,c
  4962  001118  D001               	goto	l725
  4963  00111A  D01B               	goto	l726
  4964  00111C                     l725:
  4965                           
  4966                           ;EEPROM.c: 30:         EECON1bits.EEPGD = 0;
  4967  00111C  9EA6               	bcf	166,7,c	;volsfr
  4968                           
  4969                           ;EEPROM.c: 31:         EECON1bits.CFGS = 0;
  4970  00111E  9CA6               	bcf	166,6,c	;volsfr
  4971                           
  4972                           ;EEPROM.c: 32:         EEADR = (0x90)+position;
  4973  001120  5028               	movf	_position^0,w,c
  4974  001122  0F90               	addlw	144
  4975  001124  6EA9               	movwf	169,c	;volatile
  4976                           
  4977                           ;EEPROM.c: 33:         EECON1bits.RD = 1;
  4978  001126  80A6               	bsf	166,0,c	;volsfr
  4979                           
  4980                           ;EEPROM.c: 34:         topScores[position].score = EEDATA;
  4981  001128  5028               	movf	_position^0,w,c
  4982  00112A  EC2B  F004         	call	PL38	;call to abstracted procedure
  4983  00112E  CFA8 FFDF          	movff	4008,indf2	;volatile
  4984                           
  4985                           ;EEPROM.c: 35:         EECON1bits.EEPGD = 0;
  4986  001132  9EA6               	bcf	166,7,c	;volsfr
  4987                           
  4988                           ;EEPROM.c: 36:         EECON1bits.CFGS = 0;
  4989  001134  9CA6               	bcf	166,6,c	;volsfr
  4990                           
  4991                           ;EEPROM.c: 37:         EEADR = (0x90)+position+1;
  4992  001136  5028               	movf	_position^0,w,c
  4993  001138  0F91               	addlw	145
  4994  00113A  6EA9               	movwf	169,c	;volatile
  4995                           
  4996                           ;EEPROM.c: 38:         EECON1bits.RD = 1;
  4997  00113C  80A6               	bsf	166,0,c	;volsfr
  4998  00113E                     l727:
  4999  00113E  B0A6               	btfsc	166,0,c	;volsfr
  5000  001140  D7FE               	goto	l727
  5001                           
  5002                           ;EEPROM.c: 40:         topScores[position].userNum = EEDATA;
  5003  001142  5028               	movf	_position^0,w,c
  5004  001144  EC3D  F004         	call	PL64	;call to abstracted procedure
  5005  001148  CFA8 FFDF          	movff	4008,indf2	;volatile
  5006                           
  5007                           ;EEPROM.c: 41:     }
  5008  00114C  0E02               	movlw	2
  5009  00114E  2628               	addwf	_position^0,f,c
  5010  001150  D7E1               	goto	l2252
  5011  001152                     l726:
  5012                           
  5013                           ;EEPROM.c: 42:     EECON1bits.EEPGD = 0;
  5014  001152  9EA6               	bcf	166,7,c	;volsfr
  5015                           
  5016                           ;EEPROM.c: 43:     EECON1bits.CFGS = 0;
  5017  001154  9CA6               	bcf	166,6,c	;volsfr
  5018                           
  5019                           ;EEPROM.c: 44:     EEADR = 0x95;
  5020  001156  0E95               	movlw	149
  5021  001158  6EA9               	movwf	169,c	;volatile
  5022                           
  5023                           ;EEPROM.c: 45:     EECON1bits.RD = 1;
  5024  00115A  80A6               	bsf	166,0,c	;volsfr
  5025  00115C                     l730:
  5026  00115C  B0A6               	btfsc	166,0,c	;volsfr
  5027  00115E  D7FE               	goto	l730
  5028                           
  5029                           ;EEPROM.c: 47:     lastUserPointer = EEDATA;
  5030  001160  CFA8 F026          	movff	4008,_lastUserPointer	;volatile
  5031                           
  5032                           ;EEPROM.c: 48:     if (lastUserPointer == 0xFF){
  5033  001164  2826               	incf	_lastUserPointer^0,w,c
  5034  001166  B4D8               	btfsc	status,2,c
  5035                           
  5036                           ;EEPROM.c: 49:         lastUserPointer = 0;
  5037  001168  6A26               	clrf	_lastUserPointer^0,c
  5038  00116A  0012               	return		;funcret
  5039  00116C                     __end_of_initData:
  5040                           	callstack 0
  5041                           
  5042 ;; *************** function _readUserData *****************
  5043 ;; Defined at:
  5044 ;;		line 306 in file "EEPROM.c"
  5045 ;; Parameters:    Size  Location     Type
  5046 ;;		None
  5047 ;; Auto vars:     Size  Location     Type
  5048 ;;		None
  5049 ;; Return value:  Size  Location     Type
  5050 ;;                  1    wreg      void 
  5051 ;; Registers used:
  5052 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  5053 ;; Tracked objects:
  5054 ;;		On entry : 0/0
  5055 ;;		On exit  : 0/0
  5056 ;;		Unchanged: 0/0
  5057 ;; Data sizes:     COMRAM   BANK0   BANK1
  5058 ;;      Params:         0       0       0
  5059 ;;      Locals:         0       0       0
  5060 ;;      Temps:          2       0       0
  5061 ;;      Totals:         2       0       0
  5062 ;;Total ram usage:        2 bytes
  5063 ;; Hardware stack levels used: 1
  5064 ;; Hardware stack levels required when called: 2
  5065 ;; This function calls:
  5066 ;;		Nothing
  5067 ;; This function is called by:
  5068 ;;		_initData
  5069 ;; This function uses a non-reentrant model
  5070 ;;
  5071                           
  5072                           	psect	text39
  5073  000F88                     __ptext39:
  5074                           	callstack 0
  5075  000F88                     _readUserData:
  5076                           	callstack 27
  5077                           
  5078                           ;EEPROM.c: 307:     for (position = 0; position < 9; position++){
  5079                           
  5080                           ;incstack = 0
  5081  000F88  6A28               	clrf	_position^0,c
  5082  000F8A                     l2050:
  5083  000F8A  0E08               	movlw	8
  5084  000F8C  6428               	cpfsgt	_position^0,c
  5085  000F8E  D001               	goto	l809
  5086  000F90  D00A               	goto	l810
  5087  000F92                     l809:
  5088                           
  5089                           ;EEPROM.c: 308:         EECON1bits.EEPGD = 0;
  5090  000F92  9EA6               	bcf	166,7,c	;volsfr
  5091                           
  5092                           ;EEPROM.c: 309:         EECON1bits.CFGS = 0;
  5093  000F94  9CA6               	bcf	166,6,c	;volsfr
  5094                           
  5095                           ;EEPROM.c: 310:         EEADR = (userNum*24)+position;
  5096  000F96  5029               	movf	_userNum^0,w,c
  5097  000F98  D834               	call	PL74	;call to abstracted procedure
  5098                           
  5099                           ;EEPROM.c: 311:         EECON1bits.RD = 1;
  5100  000F9A  80A6               	bsf	166,0,c	;volsfr
  5101  000F9C                     l811:
  5102  000F9C  B0A6               	btfsc	166,0,c	;volsfr
  5103  000F9E  D7FE               	goto	l811
  5104                           
  5105                           ;EEPROM.c: 313:         users[userNum].username[position] = EEDATA;
  5106  000FA0  D823               	call	PL54	;call to abstracted procedure
  5107                           
  5108                           ;EEPROM.c: 314:     }
  5109  000FA2  D814               	call	PL26	;call to abstracted procedure
  5110  000FA4  D7F2               	goto	l2050
  5111  000FA6                     l810:
  5112                           
  5113                           ;EEPROM.c: 315:     for (position = 0; position < 9; position++){
  5114  000FA6  6A28               	clrf	_position^0,c
  5115  000FA8                     l2064:
  5116  000FA8  0E08               	movlw	8
  5117  000FAA  6428               	cpfsgt	_position^0,c
  5118  000FAC  D001               	goto	l814
  5119  000FAE  0C08               	retlw	8
  5120  000FB0                     l814:
  5121                           
  5122                           ;EEPROM.c: 316:         EECON1bits.EEPGD = 0;
  5123  000FB0  9EA6               	bcf	166,7,c	;volsfr
  5124                           
  5125                           ;EEPROM.c: 317:         EECON1bits.CFGS = 0;
  5126  000FB2  9CA6               	bcf	166,6,c	;volsfr
  5127                           
  5128                           ;EEPROM.c: 318:         EEADR = (userNum*24)+9+position;
  5129  000FB4  5029               	movf	_userNum^0,w,c
  5130  000FB6  D81F               	call	PL62	;call to abstracted procedure
  5131                           
  5132                           ;EEPROM.c: 319:         EECON1bits.RD = 1;
  5133  000FB8  80A6               	bsf	166,0,c	;volsfr
  5134  000FBA                     l816:
  5135  000FBA  B0A6               	btfsc	166,0,c	;volsfr
  5136  000FBC  D7FE               	goto	l816
  5137                           
  5138                           ;EEPROM.c: 321:         users[userNum].password[position] = EEDATA;
  5139  000FBE  D814               	call	PL54	;call to abstracted procedure
  5140  000FC0  0E09               	movlw	9
  5141  000FC2  264B               	addwf	??_readUserData^0,f,c
  5142  000FC4  0E00               	movlw	0
  5143  000FC6  224C               	addwfc	(??_readUserData+1)^0,f,c
  5144                           
  5145                           ;EEPROM.c: 322:     }
  5146  000FC8  D801               	call	PL26	;call to abstracted procedure
  5147  000FCA  D7EE               	goto	l2064
  5148  000FCC                     __end_of_readUserData:
  5149                           	callstack 0
  5150  000FCC                     PL26:
  5151                           	callstack 27
  5152  000FCC  50F3               	movf	243,w,c
  5153  000FCE  264B               	addwf	??_readUserData^0,f,c
  5154  000FD0  50F4               	movf	244,w,c
  5155  000FD2  224C               	addwfc	(??_readUserData+1)^0,f,c
  5156  000FD4  5028               	movf	_position^0,w,c
  5157  000FD6  244B               	addwf	??_readUserData^0,w,c
  5158  000FD8  6ED9               	movwf	fsr2l,c
  5159  000FDA  0E00               	movlw	0
  5160  000FDC  204C               	addwfc	(??_readUserData+1)^0,w,c
  5161  000FDE  6EDA               	movwf	fsr2h,c
  5162  000FE0  CFA8 FFDF          	movff	4008,indf2	;volatile
  5163  000FE4  2A28               	incf	_position^0,f,c
  5164  000FE6  0012               	return	
  5165  000FE8                     __end_ofPL26:
  5166                           	callstack 0
  5167  000FE8                     PL54:
  5168                           	callstack 27
  5169  000FE8  5029               	movf	_userNum^0,w,c
  5170  000FEA  0D12               	mullw	18
  5171  000FEC  0E00               	movlw	low _users
  5172  000FEE  6E4B               	movwf	??_readUserData^0,c
  5173  000FF0  0E01               	movlw	high _users
  5174  000FF2  6E4C               	movwf	(??_readUserData+1)^0,c
  5175  000FF4  0012               	return	
  5176  000FF6                     __end_ofPL54:
  5177                           	callstack 0
  5178  000FF6                     PL62:
  5179                           	callstack 25
  5180  000FF6  0D18               	mullw	24
  5181  000FF8  50F3               	movf	243,w,c
  5182  000FFA  2428               	addwf	_position^0,w,c
  5183  000FFC  0F09               	addlw	9
  5184  000FFE  6EA9               	movwf	169,c	;volatile
  5185  001000  0012               	return	
  5186  001002                     __end_ofPL62:
  5187                           	callstack 0
  5188  001002                     PL74:
  5189                           	callstack 25
  5190  001002  0D18               	mullw	24
  5191  001004  50F3               	movf	243,w,c
  5192  001006  2428               	addwf	_position^0,w,c
  5193  001008  6EA9               	movwf	169,c	;volatile
  5194  00100A  0012               	return	
  5195  00100C                     __end_ofPL74:
  5196                           	callstack 0
  5197                           
  5198 ;; *************** function _dataMotor *****************
  5199 ;; Defined at:
  5200 ;;		line 53 in file "EEPROM.c"
  5201 ;; Parameters:    Size  Location     Type
  5202 ;;		None
  5203 ;; Auto vars:     Size  Location     Type
  5204 ;;		None
  5205 ;; Return value:  Size  Location     Type
  5206 ;;                  1    wreg      void 
  5207 ;; Registers used:
  5208 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5209 ;; Tracked objects:
  5210 ;;		On entry : 0/0
  5211 ;;		On exit  : 0/0
  5212 ;;		Unchanged: 0/0
  5213 ;; Data sizes:     COMRAM   BANK0   BANK1
  5214 ;;      Params:         0       0       0
  5215 ;;      Locals:         0       0       0
  5216 ;;      Temps:          4       0       0
  5217 ;;      Totals:         4       0       0
  5218 ;;Total ram usage:        4 bytes
  5219 ;; Hardware stack levels used: 1
  5220 ;; Hardware stack levels required when called: 5
  5221 ;; This function calls:
  5222 ;;		_LcGotoXY
  5223 ;; This function is called by:
  5224 ;;		_main
  5225 ;; This function uses a non-reentrant model
  5226 ;;
  5227                           
  5228                           	psect	text40
  5229  000574                     __ptext40:
  5230                           	callstack 0
  5231  000574                     _dataMotor:
  5232                           	callstack 25
  5233                           
  5234                           ;EEPROM.c: 54:     switch(state){
  5235                           
  5236                           ;incstack = 0
  5237  000574  D10A               	goto	l4578
  5238  000576                     l4352:
  5239                           
  5240                           ;EEPROM.c: 59:             status = 2;
  5241  000576  0E02               	movlw	2
  5242  000578  6E27               	movwf	_status^0,c
  5243                           
  5244                           ;EEPROM.c: 60:             if (userNum != 8){
  5245  00057A  0E08               	movlw	8
  5246  00057C  1829               	xorwf	_userNum^0,w,c
  5247  00057E  E003               	bz	l4358
  5248                           
  5249                           ;EEPROM.c: 61:                 state = 2;
  5250  000580  0E02               	movlw	2
  5251  000582  6E2A               	movwf	_state@EEPROM$F1505^0,c
  5252                           
  5253                           ;EEPROM.c: 63:             } else {
  5254  000584  0C02               	retlw	2
  5255  000586                     l4358:
  5256                           
  5257                           ;EEPROM.c: 64:                 status = 1;
  5258  000586  0E01               	movlw	1
  5259  000588  6E27               	movwf	_status^0,c
  5260  00058A                     l4360:
  5261                           
  5262                           ;EEPROM.c: 65:                 state = 0;
  5263  00058A  6A2A               	clrf	_state@EEPROM$F1505^0,c
  5264  00058C  0012               	return	
  5265  00058E                     l4362:
  5266                           
  5267                           ;EEPROM.c: 70:             if (users[userNum].username[position] == mUser.username[posit
      +                          ion]){
  5268  00058E  5028               	movf	_position^0,w,c
  5269  000590  D945               	call	PL14	;call to abstracted procedure
  5270  000592  D937               	call	PL12	;call to abstracted procedure
  5271  000594  E10D               	bnz	l4374
  5272                           
  5273                           ;EEPROM.c: 72:                 if (mUser.username[position] == '\0'){
  5274  000596  D959               	call	PL32	;call to abstracted procedure
  5275  000598  E109               	bnz	l4372
  5276                           
  5277                           ;EEPROM.c: 73:                     state = 3;
  5278  00059A  0E03               	movlw	3
  5279  00059C  6E2A               	movwf	_state@EEPROM$F1505^0,c
  5280                           
  5281                           ;EEPROM.c: 74:                     LcGotoXY(10,1);
  5282  00059E  0E01               	movlw	1
  5283  0005A0  6E53               	movwf	LcGotoXY@Row^0,c
  5284  0005A2  0E0A               	movlw	10
  5285  0005A4  EC7A  F007         	call	_LcGotoXY
  5286                           
  5287                           ;EEPROM.c: 75:                     position = 0;
  5288  0005A8  6A28               	clrf	_position^0,c
  5289                           
  5290                           ;EEPROM.c: 76:                 }else {
  5291  0005AA  0012               	return	
  5292  0005AC                     l4372:
  5293                           
  5294                           ;EEPROM.c: 77:                     position++;
  5295  0005AC  2A28               	incf	_position^0,f,c
  5296  0005AE  0012               	return	
  5297  0005B0                     l4374:
  5298                           
  5299                           ;EEPROM.c: 81:                 state = 4;
  5300  0005B0  0E04               	movlw	4
  5301  0005B2  6E2A               	movwf	_state@EEPROM$F1505^0,c
  5302  0005B4  0C04               	retlw	4
  5303  0005B6                     l4376:
  5304                           
  5305                           ;EEPROM.c: 89:             if (users[userNum].password[position] == mUser.password[posit
      +                          ion]){
  5306  0005B6  D955               	call	PL40	;call to abstracted procedure
  5307  0005B8  5029               	movf	_userNum^0,w,c
  5308  0005BA  0D12               	mullw	18
  5309  0005BC  0E00               	movlw	low _users
  5310  0005BE  6E5C               	movwf	(??_dataMotor+1)^0,c
  5311  0005C0  0E01               	movlw	high _users
  5312  0005C2  6E5D               	movwf	(??_dataMotor+2)^0,c
  5313  0005C4  0E09               	movlw	9
  5314  0005C6  265C               	addwf	(??_dataMotor+1)^0,f,c
  5315  0005C8  0E00               	movlw	0
  5316  0005CA  225D               	addwfc	(??_dataMotor+2)^0,f,c
  5317  0005CC  D91A               	call	PL12	;call to abstracted procedure
  5318  0005CE  E1F0               	bnz	l4374
  5319                           
  5320                           ;EEPROM.c: 91:                 if (mUser.password[position] == '\0'){
  5321  0005D0  D948               	call	PL40	;call to abstracted procedure
  5322  0005D2  50DF               	movf	indf2,w,c
  5323  0005D4  E1EB               	bnz	l4372
  5324                           
  5325                           ;EEPROM.c: 92:                     state = 0;
  5326  0005D6  6A2A               	clrf	_state@EEPROM$F1505^0,c
  5327                           
  5328                           ;EEPROM.c: 93:                     status = 0;
  5329  0005D8  6A27               	clrf	_status^0,c
  5330                           
  5331                           ;EEPROM.c: 94:                 }else {
  5332  0005DA  0012               	return	
  5333  0005DC                     l753:
  5334                           
  5335                           ;EEPROM.c: 106:             position = 0;
  5336  0005DC  6A28               	clrf	_position^0,c
  5337                           
  5338                           ;EEPROM.c: 107:             userNum++;
  5339  0005DE  2A29               	incf	_userNum^0,f,c
  5340                           
  5341                           ;EEPROM.c: 108:             state = 1;
  5342  0005E0  0E01               	movlw	1
  5343  0005E2  6E2A               	movwf	_state@EEPROM$F1505^0,c
  5344                           
  5345                           ;EEPROM.c: 109:             break;
  5346  0005E4  0C01               	retlw	1
  5347  0005E6                     l4390:
  5348                           
  5349                           ;EEPROM.c: 111:             if (userNum != 8){
  5350  0005E6  0E08               	movlw	8
  5351  0005E8  1829               	xorwf	_userNum^0,w,c
  5352  0005EA  E003               	bz	l4394
  5353                           
  5354                           ;EEPROM.c: 112:                 state = 6;
  5355  0005EC  0E06               	movlw	6
  5356  0005EE  6E2A               	movwf	_state@EEPROM$F1505^0,c
  5357                           
  5358                           ;EEPROM.c: 114:             } else {
  5359  0005F0  0C06               	retlw	6
  5360  0005F2                     l4394:
  5361                           
  5362                           ;EEPROM.c: 115:                 state = 10;
  5363  0005F2  0E0A               	movlw	10
  5364  0005F4  6E2A               	movwf	_state@EEPROM$F1505^0,c
  5365  0005F6  0C0A               	retlw	10
  5366  0005F8                     l4396:
  5367                           
  5368                           ;EEPROM.c: 119:             if (users[userNum].username[position] == mUser.username[posi
      +                          tion]){
  5369  0005F8  5028               	movf	_position^0,w,c
  5370  0005FA  D910               	call	PL14	;call to abstracted procedure
  5371  0005FC  D902               	call	PL12	;call to abstracted procedure
  5372  0005FE  E106               	bnz	l4406
  5373                           
  5374                           ;EEPROM.c: 121:                 if (mUser.username[position] == '\0'){
  5375  000600  D924               	call	PL32	;call to abstracted procedure
  5376  000602  E1D4               	bnz	l4372
  5377                           
  5378                           ;EEPROM.c: 122:                     state = 0;
  5379  000604  6A2A               	clrf	_state@EEPROM$F1505^0,c
  5380                           
  5381                           ;EEPROM.c: 123:                     status = 4;
  5382  000606  0E04               	movlw	4
  5383  000608  6E27               	movwf	_status^0,c
  5384                           
  5385                           ;EEPROM.c: 124:                 }else {
  5386  00060A  0C04               	retlw	4
  5387  00060C                     l4406:
  5388                           
  5389                           ;EEPROM.c: 129:                 state = 7;
  5390  00060C  0E07               	movlw	7
  5391  00060E  6E2A               	movwf	_state@EEPROM$F1505^0,c
  5392  000610  0C07               	retlw	7
  5393  000612                     l762:
  5394                           
  5395                           ;EEPROM.c: 134:             position = 0;
  5396  000612  6A28               	clrf	_position^0,c
  5397                           
  5398                           ;EEPROM.c: 135:             userNum++;
  5399  000614  2A29               	incf	_userNum^0,f,c
  5400                           
  5401                           ;EEPROM.c: 136:             state = 5;
  5402  000616  0E05               	movlw	5
  5403  000618  6E2A               	movwf	_state@EEPROM$F1505^0,c
  5404                           
  5405                           ;EEPROM.c: 137:             break;
  5406  00061A  0C05               	retlw	5
  5407  00061C                     l4412:
  5408                           
  5409                           ;EEPROM.c: 139:             EEADR = (lastUserPointer*24)+position;
  5410  00061C  5026               	movf	_lastUserPointer^0,w,c
  5411  00061E  EC01  F008         	call	PL74	;call to abstracted procedure
  5412                           
  5413                           ;EEPROM.c: 140:             EEDATA = mUser.username[position];
  5414  000622  D913               	call	PL32	;call to abstracted procedure
  5415  000624  6EA8               	movwf	168,c	;volatile
  5416                           
  5417                           ;EEPROM.c: 141:             users[lastUserPointer].username[position] = mUser.username[p
      +                          osition];
  5418  000626  5028               	movf	_position^0,w,c
  5419  000628  0F01               	addlw	low _mUser@EEPROM$F1509
  5420  00062A  6ED9               	movwf	fsr2l,c
  5421  00062C  6ADA               	clrf	fsr2h,c
  5422  00062E  D91E               	call	PL52	;call to abstracted procedure
  5423  000630  D8FF               	call	PL30	;call to abstracted procedure
  5424                           
  5425                           ;EEPROM.c: 142:             EECON1bits.EEPGD = 0;
  5426  000632  9EA6               	bcf	166,7,c	;volsfr
  5427                           
  5428                           ;EEPROM.c: 143:             EECON1bits.CFGS = 0;
  5429  000634  9CA6               	bcf	166,6,c	;volsfr
  5430                           
  5431                           ;EEPROM.c: 144:             EECON1bits.WREN = 1;
  5432  000636  84A6               	bsf	166,2,c	;volsfr
  5433                           
  5434                           ;EEPROM.c: 145:             INTCONbits.GIE = 0;
  5435  000638  9EF2               	bcf	242,7,c	;volatile
  5436                           
  5437                           ;EEPROM.c: 146:             EECON2 = 0x55;
  5438  00063A  0E55               	movlw	85
  5439  00063C  6EA7               	movwf	167,c	;volsfr
  5440                           
  5441                           ;EEPROM.c: 147:             EECON2 = 0xAA;
  5442  00063E  0EAA               	movlw	170
  5443  000640  6EA7               	movwf	167,c	;volsfr
  5444                           
  5445                           ;EEPROM.c: 148:             EECON1bits.WR = 1;
  5446  000642  82A6               	bsf	166,1,c	;volsfr
  5447                           
  5448                           ;EEPROM.c: 149:             INTCONbits.GIE = 1;
  5449  000644  8EF2               	bsf	242,7,c	;volatile
  5450                           
  5451                           ;EEPROM.c: 150:             EECON1bits.WREN = 0;
  5452  000646  94A6               	bcf	166,2,c	;volsfr
  5453                           
  5454                           ;EEPROM.c: 151:             state = 11;
  5455  000648  0E0B               	movlw	11
  5456  00064A  6E2A               	movwf	_state@EEPROM$F1505^0,c
  5457                           
  5458                           ;EEPROM.c: 152:             break;
  5459  00064C  0C0B               	retlw	11
  5460  00064E                     l764:
  5461                           
  5462                           ;EEPROM.c: 154:             if(EECON1bits.WR == 0){
  5463  00064E  B2A6               	btfsc	166,1,c	;volsfr
  5464  000650  0012               	return	
  5465                           
  5466                           ;EEPROM.c: 155:                 if(mUser.username[position] != '\0'){
  5467  000652  D8FB               	call	PL32	;call to abstracted procedure
  5468  000654  E002               	bz	l766
  5469                           
  5470                           ;EEPROM.c: 156:                     position++;
  5471  000656  2A28               	incf	_position^0,f,c
  5472  000658  D7CC               	goto	l4394
  5473  00065A                     l766:
  5474                           
  5475                           ;EEPROM.c: 159:                     position = 0;
  5476  00065A  6A28               	clrf	_position^0,c
  5477  00065C                     l4444:
  5478                           
  5479                           ;EEPROM.c: 160:                     state = 12;
  5480  00065C  0E0C               	movlw	12
  5481  00065E  6E2A               	movwf	_state@EEPROM$F1505^0,c
  5482  000660  0C0C               	retlw	12
  5483  000662                     l4446:
  5484                           
  5485                           ;EEPROM.c: 165:             EEADR = (lastUserPointer*24)+position+9;
  5486  000662  5026               	movf	_lastUserPointer^0,w,c
  5487  000664  ECFB  F007         	call	PL62	;call to abstracted procedure
  5488                           
  5489                           ;EEPROM.c: 166:             EEDATA = mUser.password[position];
  5490  000668  D8FC               	call	PL40	;call to abstracted procedure
  5491  00066A  50DF               	movf	indf2,w,c
  5492  00066C  6EA8               	movwf	168,c	;volatile
  5493                           
  5494                           ;EEPROM.c: 167:             users[lastUserPointer].password[position] = mUser.password[p
      +                          osition];
  5495  00066E  D8F9               	call	PL40	;call to abstracted procedure
  5496  000670  D8FD               	call	PL52	;call to abstracted procedure
  5497  000672  0E09               	movlw	9
  5498  000674  265B               	addwf	??_dataMotor^0,f,c
  5499  000676  0E00               	movlw	0
  5500  000678  225C               	addwfc	(??_dataMotor+1)^0,f,c
  5501  00067A  D8DA               	call	PL30	;call to abstracted procedure
  5502                           
  5503                           ;EEPROM.c: 168:             EECON1bits.EEPGD = 0;
  5504  00067C  9EA6               	bcf	166,7,c	;volsfr
  5505                           
  5506                           ;EEPROM.c: 169:             EECON1bits.CFGS = 0;
  5507  00067E  9CA6               	bcf	166,6,c	;volsfr
  5508                           
  5509                           ;EEPROM.c: 170:             EECON1bits.WREN = 1;
  5510  000680  84A6               	bsf	166,2,c	;volsfr
  5511                           
  5512                           ;EEPROM.c: 171:             INTCONbits.GIE = 0;
  5513  000682  9EF2               	bcf	242,7,c	;volatile
  5514                           
  5515                           ;EEPROM.c: 172:             EECON2 = 0x55;
  5516  000684  0E55               	movlw	85
  5517  000686  6EA7               	movwf	167,c	;volsfr
  5518                           
  5519                           ;EEPROM.c: 173:             EECON2 = 0xAA;
  5520  000688  0EAA               	movlw	170
  5521  00068A  6EA7               	movwf	167,c	;volsfr
  5522                           
  5523                           ;EEPROM.c: 174:             EECON1bits.WR = 1;
  5524  00068C  82A6               	bsf	166,1,c	;volsfr
  5525                           
  5526                           ;EEPROM.c: 175:             INTCONbits.GIE = 1;
  5527  00068E  8EF2               	bsf	242,7,c	;volatile
  5528                           
  5529                           ;EEPROM.c: 176:             EECON1bits.WREN = 0;
  5530  000690  94A6               	bcf	166,2,c	;volsfr
  5531                           
  5532                           ;EEPROM.c: 177:             state = 13;
  5533  000692  0E0D               	movlw	13
  5534  000694  6E2A               	movwf	_state@EEPROM$F1505^0,c
  5535                           
  5536                           ;EEPROM.c: 178:             break;
  5537  000696  0C0D               	retlw	13
  5538  000698                     l769:
  5539                           
  5540                           ;EEPROM.c: 180:             if(EECON1bits.WR == 0){
  5541  000698  B2A6               	btfsc	166,1,c	;volsfr
  5542  00069A  0012               	return	
  5543                           
  5544                           ;EEPROM.c: 181:                 if(mUser.password[position] != '\0'){
  5545  00069C  D8E2               	call	PL40	;call to abstracted procedure
  5546  00069E  50DF               	movf	indf2,w,c
  5547  0006A0  E002               	bz	l771
  5548                           
  5549                           ;EEPROM.c: 182:                     position++;
  5550  0006A2  2A28               	incf	_position^0,f,c
  5551  0006A4  D7DB               	goto	l4444
  5552  0006A6                     l771:
  5553                           
  5554                           ;EEPROM.c: 185:                     position = 0;
  5555  0006A6  6A28               	clrf	_position^0,c
  5556                           
  5557                           ;EEPROM.c: 186:                     state = 14;
  5558  0006A8  0E0E               	movlw	14
  5559  0006AA  6E2A               	movwf	_state@EEPROM$F1505^0,c
  5560  0006AC  0C0E               	retlw	14
  5561  0006AE                     l4480:
  5562                           
  5563                           ;EEPROM.c: 191:             lastUserPointer = (lastUserPointer+1)%8;
  5564  0006AE  2826               	incf	_lastUserPointer^0,w,c
  5565  0006B0  0B07               	andlw	7
  5566  0006B2  6E26               	movwf	_lastUserPointer^0,c
  5567                           
  5568                           ;EEPROM.c: 192:             EEADR = 0x95;
  5569  0006B4  0E95               	movlw	149
  5570  0006B6  6EA9               	movwf	169,c	;volatile
  5571                           
  5572                           ;EEPROM.c: 193:             EEDATA = lastUserPointer;
  5573  0006B8  C026  FFA8         	movff	_lastUserPointer,4008	;volatile
  5574                           
  5575                           ;EEPROM.c: 194:             EECON1bits.EEPGD = 0;
  5576  0006BC  9EA6               	bcf	166,7,c	;volsfr
  5577                           
  5578                           ;EEPROM.c: 195:             EECON1bits.CFGS = 0;
  5579  0006BE  9CA6               	bcf	166,6,c	;volsfr
  5580                           
  5581                           ;EEPROM.c: 196:             EECON1bits.WREN = 1;
  5582  0006C0  84A6               	bsf	166,2,c	;volsfr
  5583                           
  5584                           ;EEPROM.c: 197:             INTCONbits.GIE = 0;
  5585  0006C2  9EF2               	bcf	242,7,c	;volatile
  5586                           
  5587                           ;EEPROM.c: 198:             EECON2 = 0x55;
  5588  0006C4  0E55               	movlw	85
  5589  0006C6  6EA7               	movwf	167,c	;volsfr
  5590                           
  5591                           ;EEPROM.c: 199:             EECON2 = 0xAA;
  5592  0006C8  0EAA               	movlw	170
  5593  0006CA  6EA7               	movwf	167,c	;volsfr
  5594                           
  5595                           ;EEPROM.c: 200:             EECON1bits.WR = 1;
  5596  0006CC  82A6               	bsf	166,1,c	;volsfr
  5597                           
  5598                           ;EEPROM.c: 201:             INTCONbits.GIE = 1;
  5599  0006CE  8EF2               	bsf	242,7,c	;volatile
  5600                           
  5601                           ;EEPROM.c: 202:             EECON1bits.WREN = 0;
  5602  0006D0  94A6               	bcf	166,2,c	;volsfr
  5603                           
  5604                           ;EEPROM.c: 203:             state = 15;
  5605  0006D2  0E0F               	movlw	15
  5606  0006D4  6E2A               	movwf	_state@EEPROM$F1505^0,c
  5607                           
  5608                           ;EEPROM.c: 204:             break;
  5609  0006D6  0C0F               	retlw	15
  5610  0006D8                     l774:
  5611                           
  5612                           ;EEPROM.c: 206:             if(EECON1bits.WR == 0){
  5613  0006D8  B2A6               	btfsc	166,1,c	;volsfr
  5614  0006DA  0012               	return	
  5615                           
  5616                           ;EEPROM.c: 207:                 status = 3;
  5617  0006DC  0E03               	movlw	3
  5618  0006DE  D754               	goto	L5
  5619  0006E0                     l4510:
  5620                           
  5621                           ;EEPROM.c: 212:             if (position == 5){
  5622  0006E0  0E05               	movlw	5
  5623  0006E2  1828               	xorwf	_position^0,w,c
  5624  0006E4  E111               	bnz	l4518
  5625                           
  5626                           ;EEPROM.c: 213:                 if (topScores[status].score < saveScore){
  5627  0006E6  5027               	movf	_status^0,w,c
  5628  0006E8  D8B6               	call	PL38	;call to abstracted procedure
  5629  0006EA  5025               	movf	_saveScore^0,w,c
  5630  0006EC  5CDE               	subwf	postinc2,w,c
  5631  0006EE  E301 D74C          	bc	l4360
  5632                           
  5633                           ;EEPROM.c: 214:                     topScores[status].score = saveScore;
  5634  0006F2  5027               	movf	_status^0,w,c
  5635  0006F4  D8B0               	call	PL38	;call to abstracted procedure
  5636  0006F6  C025  FFDF         	movff	_saveScore,indf2
  5637                           
  5638                           ;EEPROM.c: 215:                     topScores[status].userNum = userNum;
  5639  0006FA  5027               	movf	_status^0,w,c
  5640  0006FC  D8BE               	call	PL64	;call to abstracted procedure
  5641  0006FE  C029  FFDF         	movff	_userNum,indf2
  5642                           
  5643                           ;EEPROM.c: 216:                     state = 21;
  5644  000702  0E15               	movlw	21
  5645  000704  6E2A               	movwf	_state@EEPROM$F1505^0,c
  5646                           
  5647                           ;EEPROM.c: 217:                 } else{
  5648  000706  0C15               	retlw	21
  5649  000708                     l4518:
  5650                           
  5651                           ;EEPROM.c: 221:                 if (topScores[position].score < topScores[status].score)
      +                          {
  5652  000708  5027               	movf	_status^0,w,c
  5653  00070A  D8A5               	call	PL38	;call to abstracted procedure
  5654  00070C  5028               	movf	_position^0,w,c
  5655  00070E  0D02               	mullw	2
  5656  000710  50F3               	movf	243,w,c
  5657  000712  0F13               	addlw	low _topScores
  5658  000714  6EE1               	movwf	fsr1l,c
  5659  000716  6AE2               	clrf	fsr1h,c
  5660  000718  50DE               	movf	postinc2,w,c
  5661  00071A  5CE6               	subwf	postinc1,w,c
  5662  00071C  E301 D746          	bc	l4372
  5663                           
  5664                           ;EEPROM.c: 222:                     status = position;
  5665  000720  C028  F027         	movff	_position,_status
  5666  000724  D743               	goto	l4372
  5667  000726                     l4524:
  5668                           
  5669                           ;EEPROM.c: 228:             EEADR = 0x90 + (status*2);
  5670  000726  5027               	movf	_status^0,w,c
  5671  000728  0D02               	mullw	2
  5672  00072A  50F3               	movf	243,w,c
  5673  00072C  0F90               	addlw	144
  5674  00072E  6EA9               	movwf	169,c	;volatile
  5675                           
  5676                           ;EEPROM.c: 229:             EEDATA = saveScore;
  5677  000730  C025  FFA8         	movff	_saveScore,4008	;volatile
  5678                           
  5679                           ;EEPROM.c: 230:             EECON1bits.EEPGD = 0;
  5680  000734  9EA6               	bcf	166,7,c	;volsfr
  5681                           
  5682                           ;EEPROM.c: 231:             EECON1bits.CFGS = 0;
  5683  000736  9CA6               	bcf	166,6,c	;volsfr
  5684                           
  5685                           ;EEPROM.c: 232:             EECON1bits.WREN = 1;
  5686  000738  84A6               	bsf	166,2,c	;volsfr
  5687                           
  5688                           ;EEPROM.c: 233:             INTCONbits.GIE = 0;
  5689  00073A  9EF2               	bcf	242,7,c	;volatile
  5690                           
  5691                           ;EEPROM.c: 234:             EECON2 = 0x55;
  5692  00073C  0E55               	movlw	85
  5693  00073E  6EA7               	movwf	167,c	;volsfr
  5694                           
  5695                           ;EEPROM.c: 235:             EECON2 = 0xAA;
  5696  000740  0EAA               	movlw	170
  5697  000742  6EA7               	movwf	167,c	;volsfr
  5698                           
  5699                           ;EEPROM.c: 236:             EECON1bits.WR = 1;
  5700  000744  82A6               	bsf	166,1,c	;volsfr
  5701                           
  5702                           ;EEPROM.c: 237:             INTCONbits.GIE = 1;
  5703  000746  8EF2               	bsf	242,7,c	;volatile
  5704                           
  5705                           ;EEPROM.c: 238:             EECON1bits.WREN = 0;
  5706  000748  94A6               	bcf	166,2,c	;volsfr
  5707                           
  5708                           ;EEPROM.c: 239:             state = 22;
  5709  00074A  0E16               	movlw	22
  5710  00074C  6E2A               	movwf	_state@EEPROM$F1505^0,c
  5711                           
  5712                           ;EEPROM.c: 240:             break;
  5713  00074E  0C16               	retlw	22
  5714  000750                     l783:
  5715                           
  5716                           ;EEPROM.c: 242:             if(EECON1bits.WR == 0){
  5717  000750  B2A6               	btfsc	166,1,c	;volsfr
  5718  000752  0012               	return	
  5719                           
  5720                           ;EEPROM.c: 243:                 state = 23;
  5721  000754  0E17               	movlw	23
  5722  000756  6E2A               	movwf	_state@EEPROM$F1505^0,c
  5723  000758  0C17               	retlw	23
  5724  00075A                     l4550:
  5725                           
  5726                           ;EEPROM.c: 247:             EEADR = 0x90 + (status*2)+1;
  5727  00075A  5027               	movf	_status^0,w,c
  5728  00075C  0D02               	mullw	2
  5729  00075E  50F3               	movf	243,w,c
  5730  000760  0F91               	addlw	145
  5731  000762  6EA9               	movwf	169,c	;volatile
  5732                           
  5733                           ;EEPROM.c: 248:             EEDATA = userNum;
  5734  000764  C029  FFA8         	movff	_userNum,4008	;volatile
  5735                           
  5736                           ;EEPROM.c: 249:             EECON1bits.EEPGD = 0;
  5737  000768  9EA6               	bcf	166,7,c	;volsfr
  5738                           
  5739                           ;EEPROM.c: 250:             EECON1bits.CFGS = 0;
  5740  00076A  9CA6               	bcf	166,6,c	;volsfr
  5741                           
  5742                           ;EEPROM.c: 251:             EECON1bits.WREN = 1;
  5743  00076C  84A6               	bsf	166,2,c	;volsfr
  5744                           
  5745                           ;EEPROM.c: 252:             INTCONbits.GIE = 0;
  5746  00076E  9EF2               	bcf	242,7,c	;volatile
  5747                           
  5748                           ;EEPROM.c: 253:             EECON2 = 0x55;
  5749  000770  0E55               	movlw	85
  5750  000772  6EA7               	movwf	167,c	;volsfr
  5751                           
  5752                           ;EEPROM.c: 254:             EECON2 = 0xAA;
  5753  000774  0EAA               	movlw	170
  5754  000776  6EA7               	movwf	167,c	;volsfr
  5755                           
  5756                           ;EEPROM.c: 255:             EECON1bits.WR = 1;
  5757  000778  82A6               	bsf	166,1,c	;volsfr
  5758                           
  5759                           ;EEPROM.c: 256:             INTCONbits.GIE = 1;
  5760  00077A  8EF2               	bsf	242,7,c	;volatile
  5761                           
  5762                           ;EEPROM.c: 257:             EECON1bits.WREN = 0;
  5763  00077C  94A6               	bcf	166,2,c	;volsfr
  5764                           
  5765                           ;EEPROM.c: 258:             state = 24;
  5766  00077E  0E18               	movlw	24
  5767  000780  6E2A               	movwf	_state@EEPROM$F1505^0,c
  5768                           
  5769                           ;EEPROM.c: 259:             break;
  5770  000782  0C18               	retlw	24
  5771  000784                     l786:
  5772                           
  5773                           ;EEPROM.c: 261:             if(EECON1bits.WR == 0){
  5774  000784  B2A6               	btfsc	166,1,c	;volsfr
  5775  000786  0012               	return	
  5776  000788  D700               	goto	l4360
  5777  00078A                     l4578:
  5778  00078A  502A               	movf	_state@EEPROM$F1505^0,w,c
  5779  00078C  6E5B               	movwf	??_dataMotor^0,c
  5780  00078E  6A5C               	clrf	(??_dataMotor+1)^0,c
  5781                           
  5782                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5783                           ; Switch size 1, requested type "space"
  5784                           ; Number of cases is 1, Range of values is 0 to 0
  5785                           ; switch strategies available:
  5786                           ; Name         Instructions Cycles
  5787                           ; simple_byte            4     3 (average)
  5788                           ;	Chosen strategy is simple_byte
  5789  000790  505C               	movf	(??_dataMotor+1)^0,w,c
  5790  000792  A4D8               	btfss	status,2,c
  5791  000794  0012               	return	
  5792                           
  5793                           ; Switch size 1, requested type "space"
  5794                           ; Number of cases is 19, Range of values is 0 to 24
  5795                           ; switch strategies available:
  5796                           ; Name         Instructions Cycles
  5797                           ; simple_byte           58    30 (average)
  5798                           ;	Chosen strategy is simple_byte
  5799  000796  505B               	movf	??_dataMotor^0,w,c
  5800  000798  B4D8               	btfsc	status,2,c
  5801  00079A  0012               	return	
  5802  00079C  0A01               	xorlw	1	; case 1
  5803  00079E  E101 D6EA          	bz	l4352
  5804  0007A2  0A03               	xorlw	3	; case 2
  5805  0007A4  E101 D6F3          	bz	l4362
  5806  0007A8  0A01               	xorlw	1	; case 3
  5807  0007AA  E101 D704          	bz	l4376
  5808  0007AE  0A07               	xorlw	7	; case 4
  5809  0007B0  E101 D714          	bz	l753
  5810  0007B4  0A01               	xorlw	1	; case 5
  5811  0007B6  E101 D716          	bz	l4390
  5812  0007BA  0A03               	xorlw	3	; case 6
  5813  0007BC  E101 D71C          	bz	l4396
  5814  0007C0  0A01               	xorlw	1	; case 7
  5815  0007C2  E101 D726          	bz	l762
  5816  0007C6  0A0D               	xorlw	13	; case 10
  5817  0007C8  E101 D728          	bz	l4412
  5818  0007CC  0A01               	xorlw	1	; case 11
  5819  0007CE  E101 D73E          	bz	l764
  5820  0007D2  0A07               	xorlw	7	; case 12
  5821  0007D4  E101 D745          	bz	l4446
  5822  0007D8  0A01               	xorlw	1	; case 13
  5823  0007DA  E101 D75D          	bz	l769
  5824  0007DE  0A03               	xorlw	3	; case 14
  5825  0007E0  E101 D765          	bz	l4480
  5826  0007E4  0A01               	xorlw	1	; case 15
  5827  0007E6  E101 D777          	bz	l774
  5828  0007EA  0A1B               	xorlw	27	; case 20
  5829  0007EC  E101 D778          	bz	l4510
  5830  0007F0  0A01               	xorlw	1	; case 21
  5831  0007F2  E099               	bz	l4524
  5832  0007F4  0A03               	xorlw	3	; case 22
  5833  0007F6  E0AC               	bz	l783
  5834  0007F8  0A01               	xorlw	1	; case 23
  5835  0007FA  E0AF               	bz	l4550
  5836  0007FC  0A0F               	xorlw	15	; case 24
  5837  0007FE  E0C2               	bz	l786
  5838  000800  0012               	return		;funcret
  5839  000802                     __end_of_dataMotor:
  5840                           	callstack 0
  5841  000802                     PL12:
  5842                           	callstack 25
  5843  000802  50F3               	movf	243,w,c
  5844  000804  265C               	addwf	(??_dataMotor+1)^0,f,c
  5845  000806  50F4               	movf	244,w,c
  5846  000808  225D               	addwfc	(??_dataMotor+2)^0,f,c
  5847  00080A  5028               	movf	_position^0,w,c
  5848  00080C  245C               	addwf	(??_dataMotor+1)^0,w,c
  5849  00080E  6EE1               	movwf	fsr1l,c
  5850  000810  0E00               	movlw	0
  5851  000812  205D               	addwfc	(??_dataMotor+2)^0,w,c
  5852  000814  6EE2               	movwf	fsr1h,c
  5853  000816  50DE               	movf	postinc2,w,c
  5854  000818  18E6               	xorwf	postinc1,w,c
  5855  00081A  0012               	return	
  5856  00081C                     __end_ofPL12:
  5857                           	callstack 0
  5858  00081C                     PL14:
  5859                           	callstack 25
  5860  00081C  0F01               	addlw	low _mUser@EEPROM$F1509
  5861  00081E  6ED9               	movwf	fsr2l,c
  5862  000820  6ADA               	clrf	fsr2h,c
  5863  000822  5029               	movf	_userNum^0,w,c
  5864  000824  0D12               	mullw	18
  5865  000826  0E00               	movlw	low _users
  5866  000828  6E5C               	movwf	(??_dataMotor+1)^0,c
  5867  00082A  0E01               	movlw	high _users
  5868  00082C  6E5D               	movwf	(??_dataMotor+2)^0,c
  5869  00082E  0012               	return	
  5870  000830                     __end_ofPL14:
  5871                           	callstack 0
  5872  000830                     PL30:
  5873                           	callstack 25
  5874  000830  50F3               	movf	243,w,c
  5875  000832  265B               	addwf	??_dataMotor^0,f,c
  5876  000834  50F4               	movf	244,w,c
  5877  000836  225C               	addwfc	(??_dataMotor+1)^0,f,c
  5878  000838  5028               	movf	_position^0,w,c
  5879  00083A  245B               	addwf	??_dataMotor^0,w,c
  5880  00083C  6EE1               	movwf	fsr1l,c
  5881  00083E  0E00               	movlw	0
  5882  000840  205C               	addwfc	(??_dataMotor+1)^0,w,c
  5883  000842  6EE2               	movwf	fsr1h,c
  5884  000844  CFDF FFE7          	movff	indf2,indf1
  5885  000848  0012               	return	
  5886  00084A                     __end_ofPL30:
  5887                           	callstack 0
  5888  00084A                     PL32:
  5889                           	callstack 25
  5890  00084A  5028               	movf	_position^0,w,c
  5891  00084C  0F01               	addlw	low _mUser@EEPROM$F1509
  5892  00084E  6ED9               	movwf	fsr2l,c
  5893  000850  6ADA               	clrf	fsr2h,c
  5894  000852  50DF               	movf	indf2,w,c
  5895  000854  0012               	return	
  5896  000856                     __end_ofPL32:
  5897                           	callstack 0
  5898  000856                     PL38:
  5899                           	callstack 27
  5900  000856  0D02               	mullw	2
  5901  000858  50F3               	movf	243,w,c
  5902  00085A  0F13               	addlw	low _topScores
  5903  00085C  6ED9               	movwf	fsr2l,c
  5904  00085E  6ADA               	clrf	fsr2h,c
  5905  000860  0012               	return	
  5906  000862                     __end_ofPL38:
  5907                           	callstack 0
  5908  000862                     PL40:
  5909                           	callstack 25
  5910  000862  5028               	movf	_position^0,w,c
  5911  000864  0F0A               	addlw	low (_mUser@EEPROM$F1509+9)
  5912  000866  6ED9               	movwf	fsr2l,c
  5913  000868  6ADA               	clrf	fsr2h,c
  5914  00086A  0012               	return	
  5915  00086C                     __end_ofPL40:
  5916                           	callstack 0
  5917  00086C                     PL52:
  5918                           	callstack 25
  5919  00086C  5026               	movf	_lastUserPointer^0,w,c
  5920  00086E  0D12               	mullw	18
  5921  000870  0E00               	movlw	low _users
  5922  000872  6E5B               	movwf	??_dataMotor^0,c
  5923  000874  0E01               	movlw	high _users
  5924  000876  6E5C               	movwf	(??_dataMotor+1)^0,c
  5925  000878  0012               	return	
  5926  00087A                     __end_ofPL52:
  5927                           	callstack 0
  5928  00087A                     PL64:
  5929                           	callstack 27
  5930  00087A  0D02               	mullw	2
  5931  00087C  50F3               	movf	243,w,c
  5932  00087E  0F14               	addlw	low (_topScores+1)
  5933  000880  6ED9               	movwf	fsr2l,c
  5934  000882  6ADA               	clrf	fsr2h,c
  5935  000884  0012               	return	
  5936  000886                     __end_ofPL64:
  5937                           	callstack 0
  5938                           
  5939 ;; *************** function _LcGotoXY *****************
  5940 ;; Defined at:
  5941 ;;		line 134 in file "LcTLCD.c"
  5942 ;; Parameters:    Size  Location     Type
  5943 ;;  Column          1    wreg     unsigned char 
  5944 ;;  Row             1   13[COMRAM] unsigned char 
  5945 ;; Auto vars:     Size  Location     Type
  5946 ;;  Column          1   20[COMRAM] unsigned char 
  5947 ;;  Fisics          2   18[COMRAM] int 
  5948 ;; Return value:  Size  Location     Type
  5949 ;;                  1    wreg      void 
  5950 ;; Registers used:
  5951 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5952 ;; Tracked objects:
  5953 ;;		On entry : 0/0
  5954 ;;		On exit  : 0/0
  5955 ;;		Unchanged: 0/0
  5956 ;; Data sizes:     COMRAM   BANK0   BANK1
  5957 ;;      Params:         1       0       0
  5958 ;;      Locals:         5       0       0
  5959 ;;      Temps:          2       0       0
  5960 ;;      Totals:         8       0       0
  5961 ;;Total ram usage:        8 bytes
  5962 ;; Hardware stack levels used: 1
  5963 ;; Hardware stack levels required when called: 4
  5964 ;; This function calls:
  5965 ;;		_CantaIR
  5966 ;;		_WaitForBusy
  5967 ;; This function is called by:
  5968 ;;		_LcPutChar
  5969 ;;		_menuMotor
  5970 ;;		_displayMenu
  5971 ;;		_dataMotor
  5972 ;;		_DaFindUser
  5973 ;;		_timeMotor
  5974 ;;		_displayTimeRemaining
  5975 ;; This function uses a non-reentrant model
  5976 ;;
  5977                           
  5978                           	psect	text41
  5979  000EF4                     __ptext41:
  5980                           	callstack 0
  5981  000EF4                     _LcGotoXY:
  5982                           	callstack 24
  5983                           
  5984                           ;incstack = 0
  5985                           ;LcGotoXY@Column stored from wreg
  5986  000EF4  6E5A               	movwf	LcGotoXY@Column^0,c
  5987                           
  5988                           ;LcTLCD.c: 138:  int Fisics;;LcTLCD.c: 140:  switch (Rows) {
  5989  000EF6  D030               	goto	l3292
  5990  000EF8                     l3272:
  5991                           
  5992                           ;LcTLCD.c: 142:    Fisics = Column + (!Row ? 0 : 0x40); break;
  5993  000EF8  5053               	movf	LcGotoXY@Row^0,w,c
  5994  000EFA  E004               	bz	l271
  5995  000EFC  6A57               	clrf	(_LcGotoXY$736+1)^0,c
  5996  000EFE  0E40               	movlw	64
  5997  000F00  6E56               	movwf	_LcGotoXY$736^0,c
  5998  000F02  D002               	goto	l3276
  5999  000F04                     l271:
  6000  000F04  6A56               	clrf	_LcGotoXY$736^0,c
  6001  000F06  6A57               	clrf	(_LcGotoXY$736+1)^0,c
  6002  000F08                     l3276:
  6003  000F08  505A               	movf	LcGotoXY@Column^0,w,c
  6004  000F0A  2456               	addwf	_LcGotoXY$736^0,w,c
  6005  000F0C  6E58               	movwf	LcGotoXY@Fisics^0,c
  6006  000F0E  0E00               	movlw	0
  6007  000F10  2057               	addwfc	(_LcGotoXY$736+1)^0,w,c
  6008  000F12  6E59               	movwf	(LcGotoXY@Fisics+1)^0,c
  6009  000F14  D02E               	goto	l3294
  6010  000F16                     l275:
  6011                           
  6012                           ;LcTLCD.c: 144:    Fisics = Column;
  6013  000F16  C05A  F058         	movff	LcGotoXY@Column,LcGotoXY@Fisics
  6014  000F1A  6A59               	clrf	(LcGotoXY@Fisics+1)^0,c
  6015                           
  6016                           ;LcTLCD.c: 145:    if (Row == 1) Fisics += 0x40; else
  6017  000F1C  0453               	decf	LcGotoXY@Row^0,w,c
  6018  000F1E  E102               	bnz	l3282
  6019  000F20  0E40               	movlw	64
  6020  000F22  D004               	goto	L6
  6021  000F24                     l3282:
  6022                           
  6023                           ;LcTLCD.c: 146:    if (Row == 2) Fisics += Columns; else
  6024  000F24  0E02               	movlw	2
  6025  000F26  1853               	xorwf	LcGotoXY@Row^0,w,c
  6026  000F28  E104               	bnz	l3286
  6027  000F2A  5039               	movf	_Columns^0,w,c
  6028  000F2C                     L6:
  6029  000F2C  2658               	addwf	LcGotoXY@Fisics^0,f,c
  6030  000F2E  0E00               	movlw	0
  6031  000F30  D00D               	goto	L7
  6032  000F32                     l3286:
  6033                           
  6034                           ;LcTLCD.c: 147:    if (Row == 3) Fisics += 0x40+Columns;
  6035  000F32  0E03               	movlw	3
  6036  000F34  1853               	xorwf	LcGotoXY@Row^0,w,c
  6037  000F36  E11D               	bnz	l3294
  6038  000F38  5039               	movf	_Columns^0,w,c
  6039  000F3A  6E54               	movwf	??_LcGotoXY^0,c
  6040  000F3C  6A55               	clrf	(??_LcGotoXY+1)^0,c
  6041  000F3E  0E40               	movlw	64
  6042  000F40  2654               	addwf	??_LcGotoXY^0,f,c
  6043  000F42  0E00               	movlw	0
  6044  000F44  2255               	addwfc	(??_LcGotoXY+1)^0,f,c
  6045  000F46  5054               	movf	??_LcGotoXY^0,w,c
  6046  000F48  2658               	addwf	LcGotoXY@Fisics^0,f,c
  6047  000F4A  5055               	movf	(??_LcGotoXY+1)^0,w,c
  6048  000F4C                     L7:
  6049  000F4C  2259               	addwfc	(LcGotoXY@Fisics+1)^0,f,c
  6050                           
  6051                           ;LcTLCD.c: 148:    break;
  6052  000F4E  D011               	goto	l3294
  6053  000F50                     l282:
  6054                           
  6055                           ;LcTLCD.c: 151:    Fisics = Column; break;
  6056  000F50  C05A  F058         	movff	LcGotoXY@Column,LcGotoXY@Fisics
  6057  000F54  6A59               	clrf	(LcGotoXY@Fisics+1)^0,c
  6058  000F56  D00D               	goto	l3294
  6059  000F58                     l3292:
  6060  000F58  503A               	movf	_Rows^0,w,c
  6061  000F5A  6E54               	movwf	??_LcGotoXY^0,c
  6062  000F5C  6A55               	clrf	(??_LcGotoXY+1)^0,c
  6063                           
  6064                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  6065                           ; Switch size 1, requested type "space"
  6066                           ; Number of cases is 1, Range of values is 0 to 0
  6067                           ; switch strategies available:
  6068                           ; Name         Instructions Cycles
  6069                           ; simple_byte            4     3 (average)
  6070                           ;	Chosen strategy is simple_byte
  6071  000F5E  5055               	movf	(??_LcGotoXY+1)^0,w,c
  6072  000F60  E1F7               	bnz	l282
  6073                           
  6074                           ; Switch size 1, requested type "space"
  6075                           ; Number of cases is 3, Range of values is 1 to 4
  6076                           ; switch strategies available:
  6077                           ; Name         Instructions Cycles
  6078                           ; simple_byte           10     6 (average)
  6079                           ;	Chosen strategy is simple_byte
  6080  000F62  5054               	movf	??_LcGotoXY^0,w,c
  6081  000F64  0A01               	xorlw	1	; case 1
  6082  000F66  E0F4               	bz	l282
  6083  000F68  0A03               	xorlw	3	; case 2
  6084  000F6A  E0C6               	bz	l3272
  6085  000F6C  0A06               	xorlw	6	; case 4
  6086  000F6E  E0D3               	bz	l275
  6087  000F70  D7EF               	goto	l282
  6088  000F72                     l3294:
  6089                           
  6090                           ;LcTLCD.c: 154:  WaitForBusy();
  6091  000F72  ECE4  F009         	call	_WaitForBusy	;wreg free
  6092                           
  6093                           ;LcTLCD.c: 155:  CantaIR(0x80 | Fisics);
  6094  000F76  5058               	movf	LcGotoXY@Fisics^0,w,c
  6095  000F78  0980               	iorlw	128
  6096  000F7A  EC05  F00B         	call	_CantaIR
  6097                           
  6098                           ;LcTLCD.c: 157:  RowAct = Row;
  6099  000F7E  C053  F038         	movff	LcGotoXY@Row,_RowAct
  6100                           
  6101                           ;LcTLCD.c: 158:  ColumnAct = Column;
  6102  000F82  C05A  F037         	movff	LcGotoXY@Column,_ColumnAct
  6103  000F86  0012               	return		;funcret
  6104  000F88                     __end_of_LcGotoXY:
  6105                           	callstack 0
  6106                           
  6107 ;; *************** function _TiInitTimer *****************
  6108 ;; Defined at:
  6109 ;;		line 17 in file "TTimer.c"
  6110 ;; Parameters:    Size  Location     Type
  6111 ;;		None
  6112 ;; Auto vars:     Size  Location     Type
  6113 ;;		None
  6114 ;; Return value:  Size  Location     Type
  6115 ;;                  1    wreg      void 
  6116 ;; Registers used:
  6117 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  6118 ;; Tracked objects:
  6119 ;;		On entry : 0/0
  6120 ;;		On exit  : 0/0
  6121 ;;		Unchanged: 0/0
  6122 ;; Data sizes:     COMRAM   BANK0   BANK1
  6123 ;;      Params:         0       0       0
  6124 ;;      Locals:         0       0       0
  6125 ;;      Temps:          0       0       0
  6126 ;;      Totals:         0       0       0
  6127 ;;Total ram usage:        0 bytes
  6128 ;; Hardware stack levels used: 1
  6129 ;; Hardware stack levels required when called: 2
  6130 ;; This function calls:
  6131 ;;		Nothing
  6132 ;; This function is called by:
  6133 ;;		_main
  6134 ;; This function uses a non-reentrant model
  6135 ;;
  6136                           
  6137                           	psect	text42
  6138  001472                     __ptext42:
  6139                           	callstack 0
  6140  001472                     _TiInitTimer:
  6141                           	callstack 28
  6142                           
  6143                           ;TTimer.c: 20:     RCONbits.IPEN = 0;
  6144                           
  6145                           ;incstack = 0
  6146  001472  9ED0               	bcf	208,7,c	;volatile
  6147                           
  6148                           ;TTimer.c: 21:     INTCONbits.GIE_GIEH = 1;
  6149  001474  8EF2               	bsf	242,7,c	;volatile
  6150                           
  6151                           ;TTimer.c: 22:     INTCONbits.PEIE_GIEL = 1;
  6152  001476  8CF2               	bsf	242,6,c	;volatile
  6153                           
  6154                           ;TTimer.c: 23:     INTCONbits.TMR0IE = 1;
  6155  001478  8AF2               	bsf	242,5,c	;volatile
  6156                           
  6157                           ;TTimer.c: 24:     INTCONbits.TMR0IF = 0;
  6158  00147A  94F2               	bcf	242,2,c	;volatile
  6159                           
  6160                           ;TTimer.c: 25:     T0CON = 0x08;
  6161  00147C  0E08               	movlw	8
  6162  00147E  6ED5               	movwf	213,c	;volatile
  6163                           
  6164                           ;TTimer.c: 27:     TMR0H = 0xD8;
  6165  001480  0ED8               	movlw	216
  6166  001482  6ED7               	movwf	215,c	;volatile
  6167                           
  6168                           ;TTimer.c: 28:     TMR0L = 0xF0;
  6169  001484  0EF0               	movlw	240
  6170  001486  6ED6               	movwf	214,c	;volatile
  6171                           
  6172                           ;TTimer.c: 29:     T0CONbits.TMR0ON = 1;
  6173  001488  8ED5               	bsf	213,7,c	;volatile
  6174                           
  6175                           ;TTimer.c: 31:     for (counter=0;counter<25;counter++) {
  6176  00148A  6A45               	clrf	_counter^0,c
  6177  00148C                     l3736:
  6178  00148C  0E18               	movlw	24
  6179  00148E  6445               	cpfsgt	_counter^0,c
  6180  001490  D001               	goto	l3740
  6181  001492  0C18               	retlw	24
  6182  001494                     l3740:
  6183                           
  6184                           ;TTimer.c: 32:  s_Timers[counter].b_busy=0;
  6185  001494  EC74  F00A         	call	PL28	;call to abstracted procedure
  6186  001498  6ADF               	clrf	indf2,c
  6187                           
  6188                           ;TTimer.c: 33:     }
  6189  00149A  2A45               	incf	_counter^0,f,c
  6190  00149C  D7F7               	goto	l3736
  6191  00149E                     __end_of_TiInitTimer:
  6192                           	callstack 0
  6193                           
  6194 ;; *************** function _SMSMotor *****************
  6195 ;; Defined at:
  6196 ;;		line 133 in file "keypad.c"
  6197 ;; Parameters:    Size  Location     Type
  6198 ;;		None
  6199 ;; Auto vars:     Size  Location     Type
  6200 ;;		None
  6201 ;; Return value:  Size  Location     Type
  6202 ;;                  1    wreg      void 
  6203 ;; Registers used:
  6204 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6205 ;; Tracked objects:
  6206 ;;		On entry : 0/0
  6207 ;;		On exit  : 0/0
  6208 ;;		Unchanged: 0/0
  6209 ;; Data sizes:     COMRAM   BANK0   BANK1
  6210 ;;      Params:         0       0       0
  6211 ;;      Locals:         0       0       0
  6212 ;;      Temps:          2       0       0
  6213 ;;      Totals:         2       0       0
  6214 ;;Total ram usage:        2 bytes
  6215 ;; Hardware stack levels used: 1
  6216 ;; Hardware stack levels required when called: 4
  6217 ;; This function calls:
  6218 ;;		_KeGetGenericValue
  6219 ;;		_TiGetTics
  6220 ;;		_TiResetTics
  6221 ;; This function is called by:
  6222 ;;		_main
  6223 ;; This function uses a non-reentrant model
  6224 ;;
  6225                           
  6226                           	psect	text43
  6227  000E46                     __ptext43:
  6228                           	callstack 0
  6229  000E46                     _SMSMotor:
  6230                           	callstack 26
  6231                           
  6232                           ;keypad.c: 134:     switch(stateSMS){
  6233                           
  6234                           ;incstack = 0
  6235  000E46  D043               	goto	l3856
  6236  000E48                     l3804:
  6237                           
  6238                           ;keypad.c: 139:             if(pressed){
  6239  000E48  503F               	movf	_pressed^0,w,c
  6240  000E4A  E021               	bz	l167
  6241                           
  6242                           ;keypad.c: 140:                 stateSMS=1;
  6243  000E4C  0E01               	movlw	1
  6244  000E4E  6E3B               	movwf	_stateSMS^0,c
  6245                           
  6246                           ;keypad.c: 141:                 currentKey = KeGetGenericValue();
  6247  000E50  EC4F  F00A         	call	_KeGetGenericValue	;wreg free
  6248  000E54  6E41               	movwf	_currentKey^0,c
  6249                           
  6250                           ;keypad.c: 142:                 available = 2;
  6251  000E56  0E02               	movlw	2
  6252  000E58  6E3D               	movwf	_available^0,c
  6253                           
  6254                           ;keypad.c: 143:                 if (TiGetTics(timer_SMS)>=1200){
  6255  000E5A  5042               	movf	_timer_SMS^0,w,c
  6256  000E5C  EC8E  F00A         	call	_TiGetTics
  6257  000E60  BE4C               	btfsc	(?_TiGetTics+1)^0,7,c
  6258  000E62  D008               	goto	l3820
  6259  000E64  ECA6  F002         	call	PL58	;call to abstracted procedure
  6260  000E68  E305               	bnc	l3820
  6261                           
  6262                           ;keypad.c: 144:                     available = 1;
  6263  000E6A  0E01               	movlw	1
  6264  000E6C  6E3D               	movwf	_available^0,c
  6265                           
  6266                           ;keypad.c: 145:                     numPresses = 0;
  6267  000E6E  6A3E               	clrf	_numPresses^0,c
  6268                           
  6269                           ;keypad.c: 146:                     previous = 0;
  6270  000E70  6A40               	clrf	_previous^0,c
  6271                           
  6272                           ;keypad.c: 147:                 } else if(numPresses != 0 && previous != currentKey ){
  6273  000E72  D00A               	goto	l3830
  6274  000E74                     l3820:
  6275  000E74  503E               	movf	_numPresses^0,w,c
  6276  000E76  E008               	bz	l3830
  6277  000E78  5041               	movf	_currentKey^0,w,c
  6278  000E7A  1840               	xorwf	_previous^0,w,c
  6279  000E7C  E005               	bz	l3830
  6280                           
  6281                           ;keypad.c: 149:                     available = 1;
  6282  000E7E  0E01               	movlw	1
  6283  000E80  6E3D               	movwf	_available^0,c
  6284                           
  6285                           ;keypad.c: 151:                     previous = currentKey;
  6286  000E82  C041  F040         	movff	_currentKey,_previous
  6287                           
  6288                           ;keypad.c: 153:                     numPresses = 0;
  6289  000E86  6A3E               	clrf	_numPresses^0,c
  6290  000E88                     l3830:
  6291                           
  6292                           ;keypad.c: 157:                 TiResetTics(timer_SMS);
  6293  000E88  5042               	movf	_timer_SMS^0,w,c
  6294  000E8A  EF13  F00B         	goto	_TiResetTics
  6295  000E8E                     l167:
  6296                           
  6297                           ;keypad.c: 160:               previous=currentKey;
  6298  000E8E  C041  F040         	movff	_currentKey,_previous
  6299  000E92  0012               	return	
  6300  000E94                     l3832:
  6301                           
  6302                           ;keypad.c: 172:             numPresses++;
  6303  000E94  2A3E               	incf	_numPresses^0,f,c
  6304                           
  6305                           ;keypad.c: 173:             stateSMS = 2;
  6306  000E96  0E02               	movlw	2
  6307  000E98  6E3B               	movwf	_stateSMS^0,c
  6308                           
  6309                           ;keypad.c: 174:             break;
  6310  000E9A  0C02               	retlw	2
  6311  000E9C                     l3836:
  6312                           
  6313                           ;keypad.c: 177:             if (!pressed){
  6314  000E9C  503F               	movf	_pressed^0,w,c
  6315  000E9E  A4D8               	btfss	status,2,c
  6316  000EA0  0012               	return	
  6317                           
  6318                           ;keypad.c: 178:                 TiResetTics(timer_SMS);
  6319  000EA2  5042               	movf	_timer_SMS^0,w,c
  6320  000EA4  EC13  F00B         	call	_TiResetTics
  6321                           
  6322                           ;keypad.c: 180:                 stateSMS = 0;
  6323  000EA8  6A3B               	clrf	_stateSMS^0,c
  6324  000EAA  0012               	return	
  6325  000EAC                     l3842:
  6326                           
  6327                           ;keypad.c: 185:             if(pressed){
  6328  000EAC  503F               	movf	_pressed^0,w,c
  6329  000EAE  B4D8               	btfsc	status,2,c
  6330  000EB0  0012               	return	
  6331                           
  6332                           ;keypad.c: 186:                 stateSMS = 4;
  6333  000EB2  EFB0  F00A         	goto	PL84	;call to abstracted procedure
  6334  000EB6                     l3846:
  6335                           
  6336                           ;keypad.c: 191:             stateSMS = 5;
  6337  000EB6  0E05               	movlw	5
  6338  000EB8  6E3B               	movwf	_stateSMS^0,c
  6339                           
  6340                           ;keypad.c: 192:             break;
  6341  000EBA  0C05               	retlw	5
  6342  000EBC                     l3848:
  6343                           
  6344                           ;keypad.c: 194:             if (!pressed){
  6345  000EBC  503F               	movf	_pressed^0,w,c
  6346  000EBE  A4D8               	btfss	status,2,c
  6347  000EC0  0012               	return	
  6348                           
  6349                           ;keypad.c: 195:                 TiResetTics(timer_SMS);
  6350  000EC2  5042               	movf	_timer_SMS^0,w,c
  6351  000EC4  EC13  F00B         	call	_TiResetTics
  6352                           
  6353                           ;keypad.c: 197:                 stateSMS = 3;
  6354  000EC8  0E03               	movlw	3
  6355  000ECA  6E3B               	movwf	_stateSMS^0,c
  6356  000ECC  0C03               	retlw	3
  6357  000ECE                     l3856:
  6358  000ECE  503B               	movf	_stateSMS^0,w,c
  6359  000ED0  6E52               	movwf	??_SMSMotor^0,c
  6360  000ED2  6A53               	clrf	(??_SMSMotor+1)^0,c
  6361                           
  6362                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  6363                           ; Switch size 1, requested type "space"
  6364                           ; Number of cases is 1, Range of values is 0 to 0
  6365                           ; switch strategies available:
  6366                           ; Name         Instructions Cycles
  6367                           ; simple_byte            4     3 (average)
  6368                           ;	Chosen strategy is simple_byte
  6369  000ED4  5053               	movf	(??_SMSMotor+1)^0,w,c
  6370  000ED6  A4D8               	btfss	status,2,c
  6371  000ED8  0012               	return	
  6372                           
  6373                           ; Switch size 1, requested type "space"
  6374                           ; Number of cases is 6, Range of values is 0 to 5
  6375                           ; switch strategies available:
  6376                           ; Name         Instructions Cycles
  6377                           ; simple_byte           19    10 (average)
  6378                           ;	Chosen strategy is simple_byte
  6379  000EDA  5052               	movf	??_SMSMotor^0,w,c
  6380  000EDC  E0B5               	bz	l3804
  6381  000EDE  0A01               	xorlw	1	; case 1
  6382  000EE0  E0D9               	bz	l3832
  6383  000EE2  0A03               	xorlw	3	; case 2
  6384  000EE4  E0DB               	bz	l3836
  6385  000EE6  0A01               	xorlw	1	; case 3
  6386  000EE8  E0E1               	bz	l3842
  6387  000EEA  0A07               	xorlw	7	; case 4
  6388  000EEC  E0E4               	bz	l3846
  6389  000EEE  0A01               	xorlw	1	; case 5
  6390  000EF0  E0E5               	bz	l3848
  6391  000EF2  0012               	return		;funcret
  6392  000EF4                     __end_of_SMSMotor:
  6393                           	callstack 0
  6394                           
  6395 ;; *************** function _KeGetGenericValue *****************
  6396 ;; Defined at:
  6397 ;;		line 224 in file "keypad.c"
  6398 ;; Parameters:    Size  Location     Type
  6399 ;;		None
  6400 ;; Auto vars:     Size  Location     Type
  6401 ;;		None
  6402 ;; Return value:  Size  Location     Type
  6403 ;;                  1    wreg      unsigned char 
  6404 ;; Registers used:
  6405 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6406 ;; Tracked objects:
  6407 ;;		On entry : 0/0
  6408 ;;		On exit  : 0/0
  6409 ;;		Unchanged: 0/0
  6410 ;; Data sizes:     COMRAM   BANK0   BANK1
  6411 ;;      Params:         0       0       0
  6412 ;;      Locals:         0       0       0
  6413 ;;      Temps:          2       0       0
  6414 ;;      Totals:         2       0       0
  6415 ;;Total ram usage:        2 bytes
  6416 ;; Hardware stack levels used: 1
  6417 ;; Hardware stack levels required when called: 3
  6418 ;; This function calls:
  6419 ;;		_getColumn
  6420 ;; This function is called by:
  6421 ;;		_SMSMotor
  6422 ;;		_KeGetCharValue
  6423 ;;		_menuMotor
  6424 ;; This function uses a non-reentrant model
  6425 ;;
  6426                           
  6427                           	psect	text44
  6428  00149E                     __ptext44:
  6429                           	callstack 0
  6430  00149E                     _KeGetGenericValue:
  6431                           	callstack 26
  6432                           
  6433                           ;keypad.c: 225:     return TABLE[(row*3)+getColumn()];
  6434                           
  6435                           ;incstack = 0
  6436  00149E  5044               	movf	_row^0,w,c
  6437  0014A0  0D03               	mullw	3
  6438  0014A2  0E3F               	movlw	low _TABLE
  6439  0014A4  6E4B               	movwf	??_KeGetGenericValue^0,c
  6440  0014A6  0E1F               	movlw	high _TABLE
  6441  0014A8  6E4C               	movwf	(??_KeGetGenericValue+1)^0,c
  6442  0014AA  50F3               	movf	243,w,c
  6443  0014AC  264B               	addwf	??_KeGetGenericValue^0,f,c
  6444  0014AE  50F4               	movf	244,w,c
  6445  0014B0  224C               	addwfc	(??_KeGetGenericValue+1)^0,f,c
  6446  0014B2  EC5F  F00B         	call	_getColumn	;wreg free
  6447  0014B6  264B               	addwf	??_KeGetGenericValue^0,f,c
  6448  0014B8  0E00               	movlw	0
  6449  0014BA  224C               	addwfc	(??_KeGetGenericValue+1)^0,f,c
  6450  0014BC  C04B  FFF6         	movff	??_KeGetGenericValue,tblptrl
  6451  0014C0  C04C  FFF7         	movff	??_KeGetGenericValue+1,tblptrh
  6452  0014C4                     	if	0	;tblptru may be non-zero
  6453  0014C4                     	endif
  6454  0014C4                     	if	0	;tblptru may be non-zero
  6455  0014C4                     	endif
  6456  0014C4  0008               	tblrd		*
  6457  0014C6  50F5               	movf	tablat,w,c
  6458  0014C8  0012               	return		;funcret
  6459  0014CA                     __end_of_KeGetGenericValue:
  6460                           	callstack 0
  6461                           
  6462 ;; *************** function _getColumn *****************
  6463 ;; Defined at:
  6464 ;;		line 211 in file "keypad.c"
  6465 ;; Parameters:    Size  Location     Type
  6466 ;;		None
  6467 ;; Auto vars:     Size  Location     Type
  6468 ;;		None
  6469 ;; Return value:  Size  Location     Type
  6470 ;;                  1    wreg      unsigned char 
  6471 ;; Registers used:
  6472 ;;		wreg
  6473 ;; Tracked objects:
  6474 ;;		On entry : 0/0
  6475 ;;		On exit  : 0/0
  6476 ;;		Unchanged: 0/0
  6477 ;; Data sizes:     COMRAM   BANK0   BANK1
  6478 ;;      Params:         0       0       0
  6479 ;;      Locals:         0       0       0
  6480 ;;      Temps:          0       0       0
  6481 ;;      Totals:         0       0       0
  6482 ;;Total ram usage:        0 bytes
  6483 ;; Hardware stack levels used: 1
  6484 ;; Hardware stack levels required when called: 2
  6485 ;; This function calls:
  6486 ;;		Nothing
  6487 ;; This function is called by:
  6488 ;;		_KeGetGenericValue
  6489 ;; This function uses a non-reentrant model
  6490 ;;
  6491                           
  6492                           	psect	text45
  6493  0016BE                     __ptext45:
  6494                           	callstack 0
  6495  0016BE                     _getColumn:
  6496                           	callstack 26
  6497                           
  6498                           ;keypad.c: 212:     if (!PORTBbits.RB0) return 0;
  6499                           
  6500                           ;incstack = 0
  6501  0016BE  A081               	btfss	129,0,c	;volatile
  6502  0016C0  0C00               	retlw	0
  6503                           
  6504                           ;keypad.c: 213:     if (!PORTBbits.RB1) return 1;
  6505  0016C2  A281               	btfss	129,1,c	;volatile
  6506  0016C4  0C01               	retlw	1
  6507                           
  6508                           ;keypad.c: 214:     return 2;
  6509  0016C6  0C02               	retlw	2	;funcret
  6510  0016C8                     __end_of_getColumn:
  6511                           	callstack 0
  6512                           
  6513 ;; *************** function _LcInit *****************
  6514 ;; Defined at:
  6515 ;;		line 68 in file "LcTLCD.c"
  6516 ;; Parameters:    Size  Location     Type
  6517 ;;  rows            1    wreg     unsigned char 
  6518 ;;  columns         1   17[COMRAM] unsigned char 
  6519 ;; Auto vars:     Size  Location     Type
  6520 ;;  rows            1   18[COMRAM] unsigned char 
  6521 ;;  i               2   19[COMRAM] int 
  6522 ;; Return value:  Size  Location     Type
  6523 ;;                  1    wreg      void 
  6524 ;; Registers used:
  6525 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6526 ;; Tracked objects:
  6527 ;;		On entry : 0/0
  6528 ;;		On exit  : 0/0
  6529 ;;		Unchanged: 0/0
  6530 ;; Data sizes:     COMRAM   BANK0   BANK1
  6531 ;;      Params:         1       0       0
  6532 ;;      Locals:         3       0       0
  6533 ;;      Temps:          0       0       0
  6534 ;;      Totals:         4       0       0
  6535 ;;Total ram usage:        4 bytes
  6536 ;; Hardware stack levels used: 1
  6537 ;; Hardware stack levels required when called: 4
  6538 ;; This function calls:
  6539 ;;		_CantaIR
  6540 ;;		_EscriuPrimeraOrdre
  6541 ;;		_Espera
  6542 ;;		_TiGetTimer
  6543 ;;		_WaitForBusy
  6544 ;; This function is called by:
  6545 ;;		_main
  6546 ;; This function uses a non-reentrant model
  6547 ;;
  6548                           
  6549                           	psect	text46
  6550  000CBC                     __ptext46:
  6551                           	callstack 0
  6552  000CBC                     _LcInit:
  6553                           	callstack 26
  6554                           
  6555                           ;incstack = 0
  6556                           ;LcInit@rows stored from wreg
  6557  000CBC  6E58               	movwf	LcInit@rows^0,c
  6558                           
  6559                           ;LcTLCD.c: 74:  int i;;LcTLCD.c: 75:  Timer = TiGetTimer();
  6560  000CBE  EC65  F00A         	call	_TiGetTimer	;wreg free
  6561  000CC2  6E1F               	movwf	_Timer^0,c
  6562  000CC4  6A20               	clrf	(_Timer+1)^0,c
  6563                           
  6564                           ;LcTLCD.c: 76:  Rows = rows; Columns = columns;
  6565  000CC6  C058  F03A         	movff	LcInit@rows,_Rows
  6566  000CCA  C057  F039         	movff	LcInit@columns,_Columns
  6567                           
  6568                           ;LcTLCD.c: 77:  RowAct = ColumnAct = 0;
  6569  000CCE  6A37               	clrf	_ColumnAct^0,c
  6570  000CD0  6A38               	clrf	_RowAct^0,c
  6571                           
  6572                           ;LcTLCD.c: 78:  (TRISDbits.TRISD4 = TRISDbits.TRISD5 = TRISDbits.TRISD6 = 0);
  6573  000CD2  9C95               	bcf	149,6,c	;volatile
  6574  000CD4  9A95               	bcf	149,5,c	;volatile
  6575  000CD6  9895               	bcf	149,4,c	;volatile
  6576                           
  6577                           ;LcTLCD.c: 79:  for (i = 0; i < 2; i++) {
  6578  000CD8  6A59               	clrf	LcInit@i^0,c
  6579  000CDA  6A5A               	clrf	(LcInit@i+1)^0,c
  6580  000CDC                     l3766:
  6581                           
  6582                           ;LcTLCD.c: 80:   Espera(Timer, 100);
  6583  000CDC  D84C               	call	PL22	;call to abstracted procedure
  6584  000CDE  0E64               	movlw	100
  6585  000CE0  6E54               	movwf	Espera@ms^0,c
  6586  000CE2  ECE6  F00A         	call	_Espera	;wreg free
  6587                           
  6588                           ;LcTLCD.c: 83:   EscriuPrimeraOrdre(0x02 | 0x01);
  6589  000CE6  0E03               	movlw	3
  6590  000CE8  EC06  F008         	call	_EscriuPrimeraOrdre
  6591                           
  6592                           ;LcTLCD.c: 84:   Espera(Timer, 5);
  6593  000CEC  D844               	call	PL22	;call to abstracted procedure
  6594  000CEE  0E05               	movlw	5
  6595  000CF0  6E54               	movwf	Espera@ms^0,c
  6596  000CF2  ECE6  F00A         	call	_Espera	;wreg free
  6597                           
  6598                           ;LcTLCD.c: 85:   EscriuPrimeraOrdre(0x02 | 0x01);
  6599  000CF6  0E03               	movlw	3
  6600  000CF8  EC06  F008         	call	_EscriuPrimeraOrdre
  6601                           
  6602                           ;LcTLCD.c: 86:   Espera(Timer, 1);
  6603  000CFC  D83C               	call	PL22	;call to abstracted procedure
  6604  000CFE  0E01               	movlw	1
  6605  000D00  6E54               	movwf	Espera@ms^0,c
  6606  000D02  ECE6  F00A         	call	_Espera	;wreg free
  6607                           
  6608                           ;LcTLCD.c: 87:   EscriuPrimeraOrdre(0x02 | 0x01);
  6609  000D06  0E03               	movlw	3
  6610  000D08  EC06  F008         	call	_EscriuPrimeraOrdre
  6611                           
  6612                           ;LcTLCD.c: 88:   Espera(Timer, 1);
  6613  000D0C  D834               	call	PL22	;call to abstracted procedure
  6614  000D0E  0E01               	movlw	1
  6615  000D10  6E54               	movwf	Espera@ms^0,c
  6616  000D12  ECE6  F00A         	call	_Espera	;wreg free
  6617                           
  6618                           ;LcTLCD.c: 91:   EscriuPrimeraOrdre(0x02);
  6619  000D16  0E02               	movlw	2
  6620  000D18  EC06  F008         	call	_EscriuPrimeraOrdre
  6621                           
  6622                           ;LcTLCD.c: 92:   Espera(Timer, 1);
  6623  000D1C  D82C               	call	PL22	;call to abstracted procedure
  6624  000D1E  0E01               	movlw	1
  6625  000D20  6E54               	movwf	Espera@ms^0,c
  6626  000D22  ECE6  F00A         	call	_Espera	;wreg free
  6627                           
  6628                           ;LcTLCD.c: 93:   CantaIR(0x20 | 0x08);
  6629  000D26  0E28               	movlw	40
  6630  000D28  EC05  F00B         	call	_CantaIR
  6631                           
  6632                           ;LcTLCD.c: 96:   WaitForBusy(); CantaIR(0x08);
  6633  000D2C  ECE4  F009         	call	_WaitForBusy	;wreg free
  6634  000D30  0E08               	movlw	8
  6635  000D32  EC05  F00B         	call	_CantaIR
  6636                           
  6637                           ;LcTLCD.c: 97:   WaitForBusy(); CantaIR(0x01);
  6638  000D36  ECE4  F009         	call	_WaitForBusy	;wreg free
  6639  000D3A  0E01               	movlw	1
  6640  000D3C  EC05  F00B         	call	_CantaIR
  6641                           
  6642                           ;LcTLCD.c: 98:   Espera(Timer,3);
  6643  000D40  D81A               	call	PL22	;call to abstracted procedure
  6644  000D42  0E03               	movlw	3
  6645  000D44  6E54               	movwf	Espera@ms^0,c
  6646  000D46  ECE6  F00A         	call	_Espera	;wreg free
  6647                           
  6648                           ;LcTLCD.c: 99:   WaitForBusy(); CantaIR(0x04 | 0x02);
  6649  000D4A  ECE4  F009         	call	_WaitForBusy	;wreg free
  6650  000D4E  0E06               	movlw	6
  6651  000D50  EC05  F00B         	call	_CantaIR
  6652                           
  6653                           ;LcTLCD.c: 100:   WaitForBusy(); CantaIR(0x08 | 0x04 | 0x02 | 0x01);
  6654  000D54  ECE4  F009         	call	_WaitForBusy	;wreg free
  6655  000D58  0E0F               	movlw	15
  6656  000D5A  EC05  F00B         	call	_CantaIR
  6657                           
  6658                           ;LcTLCD.c: 101:  }
  6659  000D5E  4A59               	infsnz	LcInit@i^0,f,c
  6660  000D60  2A5A               	incf	(LcInit@i+1)^0,f,c
  6661  000D62  BE5A               	btfsc	(LcInit@i+1)^0,7,c
  6662  000D64  D7BB               	goto	l3766
  6663  000D66  505A               	movf	(LcInit@i+1)^0,w,c
  6664  000D68  E105               	bnz	u2960
  6665  000D6A  0E02               	movlw	2
  6666  000D6C  5C59               	subwf	LcInit@i^0,w,c
  6667  000D6E  B0D8               	btfsc	status,0,c
  6668  000D70  0012               	return	
  6669  000D72  D7B4               	goto	l3766
  6670  000D74                     u2960:
  6671  000D74  0012               	return		;funcret
  6672  000D76                     __end_of_LcInit:
  6673                           	callstack 0
  6674  000D76                     PL22:
  6675                           	callstack 26
  6676  000D76  C01F  F052         	movff	_Timer,Espera@Timer
  6677  000D7A  C020  F053         	movff	_Timer+1,Espera@Timer+1
  6678  000D7E  6A55               	clrf	(Espera@ms+1)^0,c
  6679  000D80  0012               	return	
  6680  000D82                     __end_ofPL22:
  6681                           	callstack 0
  6682                           
  6683 ;; *************** function _WaitForBusy *****************
  6684 ;; Defined at:
  6685 ;;		line 261 in file "LcTLCD.c"
  6686 ;; Parameters:    Size  Location     Type
  6687 ;;		None
  6688 ;; Auto vars:     Size  Location     Type
  6689 ;;  Busy            1   12[COMRAM] unsigned char 
  6690 ;; Return value:  Size  Location     Type
  6691 ;;                  1    wreg      void 
  6692 ;; Registers used:
  6693 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6694 ;; Tracked objects:
  6695 ;;		On entry : 0/0
  6696 ;;		On exit  : 0/0
  6697 ;;		Unchanged: 0/0
  6698 ;; Data sizes:     COMRAM   BANK0   BANK1
  6699 ;;      Params:         0       0       0
  6700 ;;      Locals:         1       0       0
  6701 ;;      Temps:          0       0       0
  6702 ;;      Totals:         1       0       0
  6703 ;;Total ram usage:        1 bytes
  6704 ;; Hardware stack levels used: 1
  6705 ;; Hardware stack levels required when called: 3
  6706 ;; This function calls:
  6707 ;;		_TiGetTics
  6708 ;;		_TiResetTics
  6709 ;; This function is called by:
  6710 ;;		_LcInit
  6711 ;;		_LcClear
  6712 ;;		_LcCursorOn
  6713 ;;		_LcCursorOff
  6714 ;;		_LcGotoXY
  6715 ;;		_LcPutChar
  6716 ;; This function uses a non-reentrant model
  6717 ;;
  6718                           
  6719                           	psect	text47
  6720  0013C8                     __ptext47:
  6721                           	callstack 0
  6722  0013C8                     _WaitForBusy:
  6723                           	callstack 25
  6724                           
  6725                           ;LcTLCD.c: 262:  (TRISDbits.TRISD0 = TRISDbits.TRISD1 = TRISDbits.TRISD2 = TRISDbits.TRI
      +                          SD3 = 1);
  6726                           
  6727                           ;incstack = 0
  6728  0013C8  8695               	bsf	149,3,c	;volatile
  6729  0013CA  8495               	bsf	149,2,c	;volatile
  6730  0013CC  8295               	bsf	149,1,c	;volatile
  6731  0013CE  8095               	bsf	149,0,c	;volatile
  6732                           
  6733                           ;LcTLCD.c: 263:  (LATDbits.LATD4 = 0);
  6734  0013D0  988C               	bcf	140,4,c	;volatile
  6735                           
  6736                           ;LcTLCD.c: 264:  (LATDbits.LATD5 = 1);
  6737  0013D2  8A8C               	bsf	140,5,c	;volatile
  6738                           
  6739                           ;LcTLCD.c: 265:  TiResetTics(Timer);
  6740  0013D4  501F               	movf	_Timer^0,w,c
  6741  0013D6  EC13  F00B         	call	_TiResetTics
  6742  0013DA                     l3232:
  6743                           
  6744                           ;LcTLCD.c: 267:   (LATDbits.LATD6 = 1);(LATDbits.LATD6 = 1);
  6745  0013DA  8C8C               	bsf	140,6,c	;volatile
  6746  0013DC  8C8C               	bsf	140,6,c	;volatile
  6747                           
  6748                           ;LcTLCD.c: 268:   Busy = (PORTDbits.RD3);
  6749  0013DE  0E00               	movlw	0
  6750  0013E0  B683               	btfsc	131,3,c	;volatile
  6751  0013E2  0E01               	movlw	1
  6752  0013E4  6E52               	movwf	WaitForBusy@Busy^0,c
  6753                           
  6754                           ;LcTLCD.c: 269:   (LATDbits.LATD6 = 0);
  6755  0013E6  9C8C               	bcf	140,6,c	;volatile
  6756                           
  6757                           ;LcTLCD.c: 270:   (LATDbits.LATD6 = 0);
  6758  0013E8  9C8C               	bcf	140,6,c	;volatile
  6759                           
  6760                           ;LcTLCD.c: 271:   (LATDbits.LATD6 = 1);(LATDbits.LATD6 = 1);
  6761  0013EA  8C8C               	bsf	140,6,c	;volatile
  6762  0013EC  8C8C               	bsf	140,6,c	;volatile
  6763                           
  6764                           ;LcTLCD.c: 273:   (LATDbits.LATD6 = 0);
  6765  0013EE  9C8C               	bcf	140,6,c	;volatile
  6766                           
  6767                           ;LcTLCD.c: 274:   (LATDbits.LATD6 = 0);
  6768  0013F0  9C8C               	bcf	140,6,c	;volatile
  6769                           
  6770                           ;LcTLCD.c: 275:   if (TiGetTics(Timer)) break;
  6771  0013F2  501F               	movf	_Timer^0,w,c
  6772  0013F4  EC8E  F00A         	call	_TiGetTics
  6773  0013F8  504B               	movf	?_TiGetTics^0,w,c
  6774  0013FA  104C               	iorwf	(?_TiGetTics+1)^0,w,c
  6775  0013FC  E001               	bz	l3254
  6776  0013FE  0012               	return	
  6777  001400                     l3254:
  6778                           
  6779                           ;LcTLCD.c: 276:  } while(Busy);
  6780  001400  5052               	movf	WaitForBusy@Busy^0,w,c
  6781  001402  E1EB               	bnz	l3232
  6782  001404  0012               	return		;funcret
  6783  001406                     __end_of_WaitForBusy:
  6784                           	callstack 0
  6785                           
  6786 ;; *************** function _TiGetTimer *****************
  6787 ;; Defined at:
  6788 ;;		line 74 in file "TTimer.c"
  6789 ;; Parameters:    Size  Location     Type
  6790 ;;		None
  6791 ;; Auto vars:     Size  Location     Type
  6792 ;;		None
  6793 ;; Return value:  Size  Location     Type
  6794 ;;                  1    wreg      unsigned char 
  6795 ;; Registers used:
  6796 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  6797 ;; Tracked objects:
  6798 ;;		On entry : 0/0
  6799 ;;		On exit  : 0/0
  6800 ;;		Unchanged: 0/0
  6801 ;; Data sizes:     COMRAM   BANK0   BANK1
  6802 ;;      Params:         0       0       0
  6803 ;;      Locals:         0       0       0
  6804 ;;      Temps:          1       0       0
  6805 ;;      Totals:         1       0       0
  6806 ;;Total ram usage:        1 bytes
  6807 ;; Hardware stack levels used: 1
  6808 ;; Hardware stack levels required when called: 2
  6809 ;; This function calls:
  6810 ;;		Nothing
  6811 ;; This function is called by:
  6812 ;;		_initKeypad
  6813 ;;		_LcInit
  6814 ;;		_initMenu
  6815 ;;		_initTime
  6816 ;; This function uses a non-reentrant model
  6817 ;;
  6818                           
  6819                           	psect	text48
  6820  0014CA                     __ptext48:
  6821                           	callstack 0
  6822  0014CA                     _TiGetTimer:
  6823                           	callstack 27
  6824                           
  6825                           ;TTimer.c: 78:     counter=0;
  6826                           
  6827                           ;incstack = 0
  6828  0014CA  6A45               	clrf	_counter^0,c
  6829                           
  6830                           ;TTimer.c: 79:     while (s_Timers[counter].b_busy==1) {
  6831  0014CC  D005               	goto	l3432
  6832  0014CE                     l3424:
  6833                           
  6834                           ;TTimer.c: 80:         counter++;
  6835  0014CE  2A45               	incf	_counter^0,f,c
  6836                           
  6837                           ;TTimer.c: 81:  if (counter == 25) return -1;
  6838  0014D0  0E19               	movlw	25
  6839  0014D2  1845               	xorwf	_counter^0,w,c
  6840  0014D4  E101               	bnz	l3432
  6841  0014D6  0CFF               	retlw	255
  6842  0014D8                     l3432:
  6843                           
  6844                           ;TTimer.c: 79:     while (s_Timers[counter].b_busy==1) {
  6845  0014D8  D807               	call	PL28	;call to abstracted procedure
  6846  0014DA  04DE               	decf	postinc2,w,c
  6847  0014DC  E0F8               	bz	l3424
  6848                           
  6849                           ;TTimer.c: 83:     s_Timers[counter].b_busy=1;
  6850  0014DE  D804               	call	PL28	;call to abstracted procedure
  6851  0014E0  0E01               	movlw	1
  6852  0014E2  6EDF               	movwf	indf2,c
  6853                           
  6854                           ;TTimer.c: 84:     return (counter);
  6855  0014E4  5045               	movf	_counter^0,w,c
  6856  0014E6  0012               	return		;funcret
  6857  0014E8                     __end_of_TiGetTimer:
  6858                           	callstack 0
  6859  0014E8                     PL28:
  6860                           	callstack 28
  6861  0014E8  5045               	movf	_counter^0,w,c
  6862  0014EA  0D03               	mullw	3
  6863  0014EC  50F3               	movf	243,w,c
  6864  0014EE  0F82               	addlw	low (_s_Timers+2)
  6865  0014F0  6ED9               	movwf	fsr2l,c
  6866  0014F2  6ADA               	clrf	fsr2h,c
  6867  0014F4  0012               	return	
  6868  0014F6                     __end_ofPL28:
  6869                           	callstack 0
  6870                           
  6871 ;; *************** function _Espera *****************
  6872 ;; Defined at:
  6873 ;;		line 210 in file "LcTLCD.c"
  6874 ;; Parameters:    Size  Location     Type
  6875 ;;  Timer           2   12[COMRAM] int 
  6876 ;;  ms              2   14[COMRAM] int 
  6877 ;; Auto vars:     Size  Location     Type
  6878 ;;		None
  6879 ;; Return value:  Size  Location     Type
  6880 ;;                  1    wreg      void 
  6881 ;; Registers used:
  6882 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6883 ;; Tracked objects:
  6884 ;;		On entry : 0/0
  6885 ;;		On exit  : 0/0
  6886 ;;		Unchanged: 0/0
  6887 ;; Data sizes:     COMRAM   BANK0   BANK1
  6888 ;;      Params:         4       0       0
  6889 ;;      Locals:         0       0       0
  6890 ;;      Temps:          1       0       0
  6891 ;;      Totals:         5       0       0
  6892 ;;Total ram usage:        5 bytes
  6893 ;; Hardware stack levels used: 1
  6894 ;; Hardware stack levels required when called: 3
  6895 ;; This function calls:
  6896 ;;		_TiGetTics
  6897 ;;		_TiResetTics
  6898 ;; This function is called by:
  6899 ;;		_LcInit
  6900 ;;		_LcClear
  6901 ;; This function uses a non-reentrant model
  6902 ;;
  6903                           
  6904                           	psect	text49
  6905  0015CC                     __ptext49:
  6906                           	callstack 0
  6907  0015CC                     _Espera:
  6908                           	callstack 25
  6909                           
  6910                           ;LcTLCD.c: 211:  TiResetTics(Timer);
  6911                           
  6912                           ;incstack = 0
  6913  0015CC  5052               	movf	Espera@Timer^0,w,c
  6914  0015CE  EC13  F00B         	call	_TiResetTics
  6915  0015D2                     l3346:
  6916  0015D2  5052               	movf	Espera@Timer^0,w,c
  6917  0015D4  EC8E  F00A         	call	_TiGetTics
  6918  0015D8  5054               	movf	Espera@ms^0,w,c
  6919  0015DA  5C4B               	subwf	?_TiGetTics^0,w,c
  6920  0015DC  504C               	movf	(?_TiGetTics+1)^0,w,c
  6921  0015DE  0A80               	xorlw	128
  6922  0015E0  6E56               	movwf	??_Espera^0,c
  6923  0015E2  5055               	movf	(Espera@ms+1)^0,w,c
  6924  0015E4  0A80               	xorlw	128
  6925  0015E6  5856               	subwfb	??_Espera^0,w,c
  6926  0015E8  E3F4               	bnc	l3346
  6927  0015EA  0012               	return		;funcret
  6928  0015EC                     __end_of_Espera:
  6929                           	callstack 0
  6930                           
  6931 ;; *************** function _EscriuPrimeraOrdre *****************
  6932 ;; Defined at:
  6933 ;;		line 279 in file "LcTLCD.c"
  6934 ;; Parameters:    Size  Location     Type
  6935 ;;  ordre           1    wreg     unsigned char 
  6936 ;; Auto vars:     Size  Location     Type
  6937 ;;  ordre           1    6[COMRAM] unsigned char 
  6938 ;; Return value:  Size  Location     Type
  6939 ;;                  1    wreg      void 
  6940 ;; Registers used:
  6941 ;;		wreg, status,2, status,0
  6942 ;; Tracked objects:
  6943 ;;		On entry : 0/0
  6944 ;;		On exit  : 0/0
  6945 ;;		Unchanged: 0/0
  6946 ;; Data sizes:     COMRAM   BANK0   BANK1
  6947 ;;      Params:         0       0       0
  6948 ;;      Locals:         1       0       0
  6949 ;;      Temps:          1       0       0
  6950 ;;      Totals:         2       0       0
  6951 ;;Total ram usage:        2 bytes
  6952 ;; Hardware stack levels used: 1
  6953 ;; Hardware stack levels required when called: 2
  6954 ;; This function calls:
  6955 ;;		Nothing
  6956 ;; This function is called by:
  6957 ;;		_LcInit
  6958 ;; This function uses a non-reentrant model
  6959 ;;
  6960                           
  6961                           	psect	text50
  6962  00100C                     __ptext50:
  6963                           	callstack 0
  6964  00100C                     _EscriuPrimeraOrdre:
  6965                           	callstack 27
  6966                           
  6967                           ;incstack = 0
  6968                           ;EscriuPrimeraOrdre@ordre stored from wreg
  6969  00100C  6E4C               	movwf	EscriuPrimeraOrdre@ordre^0,c
  6970                           
  6971                           ;LcTLCD.c: 281:  (TRISDbits.TRISD0 = TRISDbits.TRISD1 = TRISDbits.TRISD2 = TRISDbits.TRI
      +                          SD3 = 0); (LATDbits.LATD4 = 0); (LATDbits.LATD5 = 0);
  6972  00100E  9695               	bcf	149,3,c	;volatile
  6973                           
  6974                           ;LcTLCD.c: 282:  (LATDbits.LATD6 = 1); (LATDbits.LATD6 = 1);
  6975  001010  D82F               	call	PL50	;call to abstracted procedure
  6976  001012  8C8C               	bsf	140,6,c	;volatile
  6977                           
  6978                           ;LcTLCD.c: 283:   (LATDbits.LATD3 = (ordre & 0x08 ? 1 : 0));
  6979  001014  A64C               	btfss	EscriuPrimeraOrdre@ordre^0,3,c
  6980  001016  D003               	goto	u500
  6981  001018  6A4B               	clrf	??_EscriuPrimeraOrdre^0,c
  6982  00101A  2A4B               	incf	??_EscriuPrimeraOrdre^0,f,c
  6983  00101C  D001               	goto	u518
  6984  00101E                     u500:
  6985  00101E  6A4B               	clrf	??_EscriuPrimeraOrdre^0,c
  6986  001020                     u518:
  6987  001020  464B               	rlncf	??_EscriuPrimeraOrdre^0,f,c
  6988  001022  D82D               	call	PL76	;call to abstracted procedure
  6989  001024  0BF7               	andlw	-9
  6990  001026  184B               	xorwf	??_EscriuPrimeraOrdre^0,w,c
  6991  001028  6E8C               	movwf	140,c	;volatile
  6992                           
  6993                           ;LcTLCD.c: 284:   (LATDbits.LATD2 = (ordre & 0x04 ? 1 : 0));
  6994  00102A  A44C               	btfss	EscriuPrimeraOrdre@ordre^0,2,c
  6995  00102C  D003               	goto	u520
  6996  00102E  6A4B               	clrf	??_EscriuPrimeraOrdre^0,c
  6997  001030  2A4B               	incf	??_EscriuPrimeraOrdre^0,f,c
  6998  001032  D001               	goto	u538
  6999  001034                     u520:
  7000  001034  6A4B               	clrf	??_EscriuPrimeraOrdre^0,c
  7001  001036                     u538:
  7002  001036  D823               	call	PL76	;call to abstracted procedure
  7003  001038  0BFB               	andlw	-5
  7004  00103A  184B               	xorwf	??_EscriuPrimeraOrdre^0,w,c
  7005  00103C  6E8C               	movwf	140,c	;volatile
  7006                           
  7007                           ;LcTLCD.c: 285:   (LATDbits.LATD1 = (ordre & 0x02 ? 1 : 0));
  7008  00103E  A24C               	btfss	EscriuPrimeraOrdre@ordre^0,1,c
  7009  001040  D003               	goto	u540
  7010  001042  6A4B               	clrf	??_EscriuPrimeraOrdre^0,c
  7011  001044  2A4B               	incf	??_EscriuPrimeraOrdre^0,f,c
  7012  001046  D001               	goto	u558
  7013  001048                     u540:
  7014  001048  6A4B               	clrf	??_EscriuPrimeraOrdre^0,c
  7015  00104A                     u558:
  7016  00104A  464B               	rlncf	??_EscriuPrimeraOrdre^0,f,c
  7017  00104C  508C               	movf	140,w,c	;volatile
  7018  00104E  184B               	xorwf	??_EscriuPrimeraOrdre^0,w,c
  7019  001050  0BFD               	andlw	-3
  7020  001052  184B               	xorwf	??_EscriuPrimeraOrdre^0,w,c
  7021  001054  6E8C               	movwf	140,c	;volatile
  7022                           
  7023                           ;LcTLCD.c: 286:   (LATDbits.LATD0 = (ordre & 0x01 ? 1 : 0));
  7024  001056  A04C               	btfss	EscriuPrimeraOrdre@ordre^0,0,c
  7025  001058  D003               	goto	u560
  7026  00105A  6A4B               	clrf	??_EscriuPrimeraOrdre^0,c
  7027  00105C  2A4B               	incf	??_EscriuPrimeraOrdre^0,f,c
  7028  00105E  D001               	goto	u578
  7029  001060                     u560:
  7030  001060  6A4B               	clrf	??_EscriuPrimeraOrdre^0,c
  7031  001062                     u578:
  7032  001062  508C               	movf	140,w,c	;volatile
  7033  001064  184B               	xorwf	??_EscriuPrimeraOrdre^0,w,c
  7034  001066  0BFE               	andlw	-2
  7035  001068  184B               	xorwf	??_EscriuPrimeraOrdre^0,w,c
  7036  00106A  6E8C               	movwf	140,c	;volatile
  7037                           
  7038                           ;LcTLCD.c: 287:  (LATDbits.LATD6 = 0);
  7039  00106C  9C8C               	bcf	140,6,c	;volatile
  7040  00106E  0012               	return		;funcret
  7041  001070                     __end_of_EscriuPrimeraOrdre:
  7042                           	callstack 0
  7043  001070                     PL50:
  7044                           	callstack 24
  7045  001070  9495               	bcf	149,2,c	;volatile
  7046  001072  9295               	bcf	149,1,c	;volatile
  7047  001074  9095               	bcf	149,0,c	;volatile
  7048  001076  988C               	bcf	140,4,c	;volatile
  7049  001078  9A8C               	bcf	140,5,c	;volatile
  7050  00107A  8C8C               	bsf	140,6,c	;volatile
  7051  00107C  0012               	return	
  7052  00107E                     __end_ofPL50:
  7053                           	callstack 0
  7054  00107E                     PL76:
  7055                           	callstack 27
  7056  00107E  464B               	rlncf	??_EscriuPrimeraOrdre^0,f,c
  7057  001080  464B               	rlncf	??_EscriuPrimeraOrdre^0,f,c
  7058  001082  508C               	movf	140,w,c	;volatile
  7059  001084  184B               	xorwf	??_EscriuPrimeraOrdre^0,w,c
  7060  001086  0012               	return	
  7061  001088                     __end_ofPL76:
  7062                           	callstack 0
  7063                           
  7064 ;; *************** function _CantaIR *****************
  7065 ;; Defined at:
  7066 ;;		line 229 in file "LcTLCD.c"
  7067 ;; Parameters:    Size  Location     Type
  7068 ;;  IR              1    wreg     unsigned char 
  7069 ;; Auto vars:     Size  Location     Type
  7070 ;;  IR              1    7[COMRAM] unsigned char 
  7071 ;; Return value:  Size  Location     Type
  7072 ;;                  1    wreg      void 
  7073 ;; Registers used:
  7074 ;;		wreg, status,2, status,0, cstack
  7075 ;; Tracked objects:
  7076 ;;		On entry : 0/0
  7077 ;;		On exit  : 0/0
  7078 ;;		Unchanged: 0/0
  7079 ;; Data sizes:     COMRAM   BANK0   BANK1
  7080 ;;      Params:         0       0       0
  7081 ;;      Locals:         1       0       0
  7082 ;;      Temps:          0       0       0
  7083 ;;      Totals:         1       0       0
  7084 ;;Total ram usage:        1 bytes
  7085 ;; Hardware stack levels used: 1
  7086 ;; Hardware stack levels required when called: 3
  7087 ;; This function calls:
  7088 ;;		_CantaPartAlta
  7089 ;;		_CantaPartBaixa
  7090 ;; This function is called by:
  7091 ;;		_LcInit
  7092 ;;		_LcClear
  7093 ;;		_LcCursorOn
  7094 ;;		_LcCursorOff
  7095 ;;		_LcGotoXY
  7096 ;; This function uses a non-reentrant model
  7097 ;;
  7098                           
  7099                           	psect	text51
  7100  00160A                     __ptext51:
  7101                           	callstack 0
  7102  00160A                     _CantaIR:
  7103                           	callstack 24
  7104                           
  7105                           ;incstack = 0
  7106                           ;CantaIR@IR stored from wreg
  7107  00160A  6E4D               	movwf	CantaIR@IR^0,c
  7108                           
  7109                           ;LcTLCD.c: 230:  (TRISDbits.TRISD0 = TRISDbits.TRISD1 = TRISDbits.TRISD2 = TRISDbits.TRI
      +                          SD3 = 0);
  7110  00160C  9695               	bcf	149,3,c	;volatile
  7111                           
  7112                           ;LcTLCD.c: 231:  (LATDbits.LATD4 = 0);
  7113                           
  7114                           ;LcTLCD.c: 232:  (LATDbits.LATD5 = 0);
  7115                           
  7116                           ;LcTLCD.c: 233:  (LATDbits.LATD6 = 1);
  7117  00160E  EC38  F008         	call	PL50	;call to abstracted procedure
  7118                           
  7119                           ;LcTLCD.c: 234:  CantaPartAlta(IR);
  7120  001612  504D               	movf	CantaIR@IR^0,w,c
  7121  001614  EC1D  F009         	call	_CantaPartAlta
  7122                           
  7123                           ;LcTLCD.c: 235:  (LATDbits.LATD6 = 1);
  7124                           
  7125                           ;LcTLCD.c: 236:  (LATDbits.LATD6 = 0);
  7126                           
  7127                           ;LcTLCD.c: 237:  (LATDbits.LATD6 = 0);
  7128                           
  7129                           ;LcTLCD.c: 238:  (LATDbits.LATD6 = 1);
  7130  001618  EC1A  F00A         	call	PL70	;call to abstracted procedure
  7131                           
  7132                           ;LcTLCD.c: 239:  CantaPartBaixa(IR);
  7133  00161C  504D               	movf	CantaIR@IR^0,w,c
  7134  00161E  ECEA  F008         	call	_CantaPartBaixa
  7135                           
  7136                           ;LcTLCD.c: 240:  (LATDbits.LATD6 = 1);
  7137                           
  7138                           ;LcTLCD.c: 241:  (LATDbits.LATD6 = 0);
  7139                           
  7140                           ;LcTLCD.c: 242:  (TRISDbits.TRISD0 = TRISDbits.TRISD1 = TRISDbits.TRISD2 = TRISDbits.TRI
      +                          SD3 = 1);
  7141  001622  EF13  F00A         	goto	PL48	;call to abstracted procedure
  7142  001626                     __end_of_CantaIR:
  7143                           	callstack 0
  7144                           
  7145 ;; *************** function _CantaPartBaixa *****************
  7146 ;; Defined at:
  7147 ;;		line 222 in file "LcTLCD.c"
  7148 ;; Parameters:    Size  Location     Type
  7149 ;;  c               1    wreg     unsigned char 
  7150 ;; Auto vars:     Size  Location     Type
  7151 ;;  c               1    6[COMRAM] unsigned char 
  7152 ;; Return value:  Size  Location     Type
  7153 ;;                  1    wreg      void 
  7154 ;; Registers used:
  7155 ;;		wreg, status,2, status,0
  7156 ;; Tracked objects:
  7157 ;;		On entry : 0/0
  7158 ;;		On exit  : 0/0
  7159 ;;		Unchanged: 0/0
  7160 ;; Data sizes:     COMRAM   BANK0   BANK1
  7161 ;;      Params:         0       0       0
  7162 ;;      Locals:         1       0       0
  7163 ;;      Temps:          1       0       0
  7164 ;;      Totals:         2       0       0
  7165 ;;Total ram usage:        2 bytes
  7166 ;; Hardware stack levels used: 1
  7167 ;; Hardware stack levels required when called: 2
  7168 ;; This function calls:
  7169 ;;		Nothing
  7170 ;; This function is called by:
  7171 ;;		_CantaIR
  7172 ;;		_CantaData
  7173 ;; This function uses a non-reentrant model
  7174 ;;
  7175                           
  7176                           	psect	text52
  7177  0011D4                     __ptext52:
  7178                           	callstack 0
  7179  0011D4                     _CantaPartBaixa:
  7180                           	callstack 24
  7181                           
  7182                           ;incstack = 0
  7183                           ;CantaPartBaixa@c stored from wreg
  7184  0011D4  6E4C               	movwf	CantaPartBaixa@c^0,c
  7185                           
  7186                           ;LcTLCD.c: 223:   (LATDbits.LATD3 = (c & 0x08 ? 1 : 0));
  7187  0011D6  A64C               	btfss	CantaPartBaixa@c^0,3,c
  7188  0011D8  D003               	goto	u2250
  7189  0011DA  6A4B               	clrf	??_CantaPartBaixa^0,c
  7190  0011DC  2A4B               	incf	??_CantaPartBaixa^0,f,c
  7191  0011DE  D001               	goto	u2268
  7192  0011E0                     u2250:
  7193  0011E0  6A4B               	clrf	??_CantaPartBaixa^0,c
  7194  0011E2                     u2268:
  7195  0011E2  464B               	rlncf	??_CantaPartBaixa^0,f,c
  7196  0011E4  D825               	call	PL72	;call to abstracted procedure
  7197  0011E6  0BF7               	andlw	-9
  7198  0011E8  184B               	xorwf	??_CantaPartBaixa^0,w,c
  7199  0011EA  6E8C               	movwf	140,c	;volatile
  7200                           
  7201                           ;LcTLCD.c: 224:   (LATDbits.LATD2 = (c & 0x04 ? 1 : 0));
  7202  0011EC  A44C               	btfss	CantaPartBaixa@c^0,2,c
  7203  0011EE  D003               	goto	u2270
  7204  0011F0  6A4B               	clrf	??_CantaPartBaixa^0,c
  7205  0011F2  2A4B               	incf	??_CantaPartBaixa^0,f,c
  7206  0011F4  D001               	goto	u2288
  7207  0011F6                     u2270:
  7208  0011F6  6A4B               	clrf	??_CantaPartBaixa^0,c
  7209  0011F8                     u2288:
  7210  0011F8  D81B               	call	PL72	;call to abstracted procedure
  7211  0011FA  0BFB               	andlw	-5
  7212  0011FC  184B               	xorwf	??_CantaPartBaixa^0,w,c
  7213  0011FE  6E8C               	movwf	140,c	;volatile
  7214                           
  7215                           ;LcTLCD.c: 225:   (LATDbits.LATD1 = (c & 0x02 ? 1 : 0));
  7216  001200  A24C               	btfss	CantaPartBaixa@c^0,1,c
  7217  001202  D003               	goto	u2290
  7218  001204  6A4B               	clrf	??_CantaPartBaixa^0,c
  7219  001206  2A4B               	incf	??_CantaPartBaixa^0,f,c
  7220  001208  D001               	goto	u2308
  7221  00120A                     u2290:
  7222  00120A  6A4B               	clrf	??_CantaPartBaixa^0,c
  7223  00120C                     u2308:
  7224  00120C  464B               	rlncf	??_CantaPartBaixa^0,f,c
  7225  00120E  508C               	movf	140,w,c	;volatile
  7226  001210  184B               	xorwf	??_CantaPartBaixa^0,w,c
  7227  001212  0BFD               	andlw	-3
  7228  001214  184B               	xorwf	??_CantaPartBaixa^0,w,c
  7229  001216  6E8C               	movwf	140,c	;volatile
  7230                           
  7231                           ;LcTLCD.c: 226:   (LATDbits.LATD0 = (c & 0x01 ? 1 : 0));
  7232  001218  A04C               	btfss	CantaPartBaixa@c^0,0,c
  7233  00121A  D003               	goto	u2310
  7234  00121C  6A4B               	clrf	??_CantaPartBaixa^0,c
  7235  00121E  2A4B               	incf	??_CantaPartBaixa^0,f,c
  7236  001220  D001               	goto	u2328
  7237  001222                     u2310:
  7238  001222  6A4B               	clrf	??_CantaPartBaixa^0,c
  7239  001224                     u2328:
  7240  001224  508C               	movf	140,w,c	;volatile
  7241  001226  184B               	xorwf	??_CantaPartBaixa^0,w,c
  7242  001228  0BFE               	andlw	-2
  7243  00122A  184B               	xorwf	??_CantaPartBaixa^0,w,c
  7244  00122C  6E8C               	movwf	140,c	;volatile
  7245  00122E  0012               	return		;funcret
  7246  001230                     __end_of_CantaPartBaixa:
  7247                           	callstack 0
  7248  001230                     PL72:
  7249                           	callstack 24
  7250  001230  464B               	rlncf	??_CantaPartBaixa^0,f,c
  7251  001232  464B               	rlncf	??_CantaPartBaixa^0,f,c
  7252  001234  508C               	movf	140,w,c	;volatile
  7253  001236  184B               	xorwf	??_CantaPartBaixa^0,w,c
  7254  001238  0012               	return	
  7255  00123A                     __end_ofPL72:
  7256                           	callstack 0
  7257                           
  7258 ;; *************** function _CantaPartAlta *****************
  7259 ;; Defined at:
  7260 ;;		line 215 in file "LcTLCD.c"
  7261 ;; Parameters:    Size  Location     Type
  7262 ;;  c               1    wreg     unsigned char 
  7263 ;; Auto vars:     Size  Location     Type
  7264 ;;  c               1    6[COMRAM] unsigned char 
  7265 ;; Return value:  Size  Location     Type
  7266 ;;                  1    wreg      void 
  7267 ;; Registers used:
  7268 ;;		wreg, status,2, status,0
  7269 ;; Tracked objects:
  7270 ;;		On entry : 0/0
  7271 ;;		On exit  : 0/0
  7272 ;;		Unchanged: 0/0
  7273 ;; Data sizes:     COMRAM   BANK0   BANK1
  7274 ;;      Params:         0       0       0
  7275 ;;      Locals:         1       0       0
  7276 ;;      Temps:          1       0       0
  7277 ;;      Totals:         2       0       0
  7278 ;;Total ram usage:        2 bytes
  7279 ;; Hardware stack levels used: 1
  7280 ;; Hardware stack levels required when called: 2
  7281 ;; This function calls:
  7282 ;;		Nothing
  7283 ;; This function is called by:
  7284 ;;		_CantaIR
  7285 ;;		_CantaData
  7286 ;; This function uses a non-reentrant model
  7287 ;;
  7288                           
  7289                           	psect	text53
  7290  00123A                     __ptext53:
  7291                           	callstack 0
  7292  00123A                     _CantaPartAlta:
  7293                           	callstack 24
  7294                           
  7295                           ;incstack = 0
  7296                           ;CantaPartAlta@c stored from wreg
  7297  00123A  6E4C               	movwf	CantaPartAlta@c^0,c
  7298                           
  7299                           ;LcTLCD.c: 216:   (LATDbits.LATD3 = (c & 0x80 ? 1 : 0));
  7300  00123C  AE4C               	btfss	CantaPartAlta@c^0,7,c
  7301  00123E  D003               	goto	u2170
  7302  001240  6A4B               	clrf	??_CantaPartAlta^0,c
  7303  001242  2A4B               	incf	??_CantaPartAlta^0,f,c
  7304  001244  D001               	goto	u2188
  7305  001246                     u2170:
  7306  001246  6A4B               	clrf	??_CantaPartAlta^0,c
  7307  001248                     u2188:
  7308  001248  464B               	rlncf	??_CantaPartAlta^0,f,c
  7309  00124A  D825               	call	PL80	;call to abstracted procedure
  7310  00124C  0BF7               	andlw	-9
  7311  00124E  184B               	xorwf	??_CantaPartAlta^0,w,c
  7312  001250  6E8C               	movwf	140,c	;volatile
  7313                           
  7314                           ;LcTLCD.c: 217:   (LATDbits.LATD2 = (c & 0x40 ? 1 : 0));
  7315  001252  AC4C               	btfss	CantaPartAlta@c^0,6,c
  7316  001254  D003               	goto	u2190
  7317  001256  6A4B               	clrf	??_CantaPartAlta^0,c
  7318  001258  2A4B               	incf	??_CantaPartAlta^0,f,c
  7319  00125A  D001               	goto	u2208
  7320  00125C                     u2190:
  7321  00125C  6A4B               	clrf	??_CantaPartAlta^0,c
  7322  00125E                     u2208:
  7323  00125E  D81B               	call	PL80	;call to abstracted procedure
  7324  001260  0BFB               	andlw	-5
  7325  001262  184B               	xorwf	??_CantaPartAlta^0,w,c
  7326  001264  6E8C               	movwf	140,c	;volatile
  7327                           
  7328                           ;LcTLCD.c: 218:   (LATDbits.LATD1 = (c & 0x20 ? 1 : 0));
  7329  001266  AA4C               	btfss	CantaPartAlta@c^0,5,c
  7330  001268  D003               	goto	u2210
  7331  00126A  6A4B               	clrf	??_CantaPartAlta^0,c
  7332  00126C  2A4B               	incf	??_CantaPartAlta^0,f,c
  7333  00126E  D001               	goto	u2228
  7334  001270                     u2210:
  7335  001270  6A4B               	clrf	??_CantaPartAlta^0,c
  7336  001272                     u2228:
  7337  001272  464B               	rlncf	??_CantaPartAlta^0,f,c
  7338  001274  508C               	movf	140,w,c	;volatile
  7339  001276  184B               	xorwf	??_CantaPartAlta^0,w,c
  7340  001278  0BFD               	andlw	-3
  7341  00127A  184B               	xorwf	??_CantaPartAlta^0,w,c
  7342  00127C  6E8C               	movwf	140,c	;volatile
  7343                           
  7344                           ;LcTLCD.c: 219:   (LATDbits.LATD0 = (c & 0x10 ? 1 : 0));
  7345  00127E  A84C               	btfss	CantaPartAlta@c^0,4,c
  7346  001280  D003               	goto	u2230
  7347  001282  6A4B               	clrf	??_CantaPartAlta^0,c
  7348  001284  2A4B               	incf	??_CantaPartAlta^0,f,c
  7349  001286  D001               	goto	u2248
  7350  001288                     u2230:
  7351  001288  6A4B               	clrf	??_CantaPartAlta^0,c
  7352  00128A                     u2248:
  7353  00128A  508C               	movf	140,w,c	;volatile
  7354  00128C  184B               	xorwf	??_CantaPartAlta^0,w,c
  7355  00128E  0BFE               	andlw	-2
  7356  001290  184B               	xorwf	??_CantaPartAlta^0,w,c
  7357  001292  6E8C               	movwf	140,c	;volatile
  7358  001294  0012               	return		;funcret
  7359  001296                     __end_of_CantaPartAlta:
  7360                           	callstack 0
  7361  001296                     PL80:
  7362                           	callstack 24
  7363  001296  464B               	rlncf	??_CantaPartAlta^0,f,c
  7364  001298  464B               	rlncf	??_CantaPartAlta^0,f,c
  7365  00129A  508C               	movf	140,w,c	;volatile
  7366  00129C  184B               	xorwf	??_CantaPartAlta^0,w,c
  7367  00129E  0012               	return	
  7368  0012A0                     __end_ofPL80:
  7369                           	callstack 0
  7370                           
  7371 ;; *************** function _KeypadMotor *****************
  7372 ;; Defined at:
  7373 ;;		line 46 in file "keypad.c"
  7374 ;; Parameters:    Size  Location     Type
  7375 ;;		None
  7376 ;; Auto vars:     Size  Location     Type
  7377 ;;		None
  7378 ;; Return value:  Size  Location     Type
  7379 ;;                  1    wreg      void 
  7380 ;; Registers used:
  7381 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7382 ;; Tracked objects:
  7383 ;;		On entry : 0/0
  7384 ;;		On exit  : 0/0
  7385 ;;		Unchanged: 0/0
  7386 ;; Data sizes:     COMRAM   BANK0   BANK1
  7387 ;;      Params:         0       0       0
  7388 ;;      Locals:         0       0       0
  7389 ;;      Temps:          2       0       0
  7390 ;;      Totals:         2       0       0
  7391 ;;Total ram usage:        2 bytes
  7392 ;; Hardware stack levels used: 1
  7393 ;; Hardware stack levels required when called: 3
  7394 ;; This function calls:
  7395 ;;		_TiGetTics
  7396 ;;		_TiResetTics
  7397 ;; This function is called by:
  7398 ;;		_main
  7399 ;; This function uses a non-reentrant model
  7400 ;;
  7401                           
  7402                           	psect	text54
  7403  000BA6                     __ptext54:
  7404                           	callstack 0
  7405  000BA6                     _KeypadMotor:
  7406                           	callstack 27
  7407                           
  7408                           ;keypad.c: 48:     switch (state){
  7409                           
  7410                           ;incstack = 0
  7411  000BA6  D070               	goto	l3946
  7412  000BA8                     l138:
  7413                           
  7414                           ;keypad.c: 51:             if (!!(PORTBbits.RB0 && PORTBbits.RB1 && PORTBbits.RB2)){
  7415  000BA8  B081               	btfsc	129,0,c	;volatile
  7416  000BAA  A281               	btfss	129,1,c	;volatile
  7417  000BAC  D00A               	goto	l3874
  7418  000BAE  A481               	btfss	129,2,c	;volatile
  7419  000BB0  D008               	goto	l3874
  7420                           
  7421                           ;keypad.c: 52:                 LATBbits.LATB3=0;
  7422  000BB2  968A               	bcf	138,3,c	;volatile
  7423                           
  7424                           ;keypad.c: 53:                 LATBbits.LATB4=1;
  7425  000BB4  888A               	bsf	138,4,c	;volatile
  7426                           
  7427                           ;keypad.c: 54:                 LATBbits.LATB5=1;
  7428  000BB6  8A8A               	bsf	138,5,c	;volatile
  7429                           
  7430                           ;keypad.c: 55:                 LATBbits.LATB6=1;
  7431  000BB8  8C8A               	bsf	138,6,c	;volatile
  7432                           
  7433                           ;keypad.c: 56:                 state=1;
  7434  000BBA  0E01               	movlw	1
  7435  000BBC  6E3C               	movwf	_state^0,c
  7436                           
  7437                           ;keypad.c: 57:                 row=0;
  7438  000BBE  6A44               	clrf	_row^0,c
  7439                           
  7440                           ;keypad.c: 58:             }else{
  7441  000BC0  0012               	return	
  7442  000BC2                     l3874:
  7443                           
  7444                           ;keypad.c: 59:                 state=4;
  7445  000BC2  0E04               	movlw	4
  7446  000BC4  6E3C               	movwf	_state^0,c
  7447  000BC6  0C04               	retlw	4
  7448  000BC8                     l142:
  7449                           
  7450                           ;keypad.c: 63:            if (!!(PORTBbits.RB0 && PORTBbits.RB1 && PORTBbits.RB2)){
  7451  000BC8  B081               	btfsc	129,0,c	;volatile
  7452  000BCA  A281               	btfss	129,1,c	;volatile
  7453  000BCC  D7FA               	goto	l3874
  7454  000BCE  A481               	btfss	129,2,c	;volatile
  7455  000BD0  D7F8               	goto	l3874
  7456                           
  7457                           ;keypad.c: 64:                 LATBbits.LATB3=1;
  7458  000BD2  868A               	bsf	138,3,c	;volatile
  7459                           
  7460                           ;keypad.c: 65:                 LATBbits.LATB4=0;
  7461  000BD4  988A               	bcf	138,4,c	;volatile
  7462                           
  7463                           ;keypad.c: 66:                 LATBbits.LATB5=1;
  7464  000BD6  8A8A               	bsf	138,5,c	;volatile
  7465                           
  7466                           ;keypad.c: 67:                 LATBbits.LATB6=1;
  7467  000BD8  8C8A               	bsf	138,6,c	;volatile
  7468                           
  7469                           ;keypad.c: 68:                 state=2;
  7470  000BDA  0E02               	movlw	2
  7471  000BDC  6E3C               	movwf	_state^0,c
  7472                           
  7473                           ;keypad.c: 69:                 row=1;
  7474  000BDE  0E01               	movlw	1
  7475  000BE0  6E44               	movwf	_row^0,c
  7476                           
  7477                           ;keypad.c: 71:             }else{
  7478  000BE2  0C01               	retlw	1
  7479  000BE4                     l145:
  7480                           
  7481                           ;keypad.c: 76:             if (!!(PORTBbits.RB0 && PORTBbits.RB1 && PORTBbits.RB2)){
  7482  000BE4  B081               	btfsc	129,0,c	;volatile
  7483  000BE6  A281               	btfss	129,1,c	;volatile
  7484  000BE8  D7EC               	goto	l3874
  7485  000BEA  A481               	btfss	129,2,c	;volatile
  7486  000BEC  D7EA               	goto	l3874
  7487                           
  7488                           ;keypad.c: 77:                 LATBbits.LATB3=1;
  7489  000BEE  868A               	bsf	138,3,c	;volatile
  7490                           
  7491                           ;keypad.c: 78:                 LATBbits.LATB4=1;
  7492  000BF0  888A               	bsf	138,4,c	;volatile
  7493                           
  7494                           ;keypad.c: 79:                 LATBbits.LATB5=0;
  7495  000BF2  9A8A               	bcf	138,5,c	;volatile
  7496                           
  7497                           ;keypad.c: 80:                 LATBbits.LATB6=1;
  7498  000BF4  8C8A               	bsf	138,6,c	;volatile
  7499                           
  7500                           ;keypad.c: 81:                 state=3;
  7501  000BF6  0E03               	movlw	3
  7502  000BF8  6E3C               	movwf	_state^0,c
  7503                           
  7504                           ;keypad.c: 82:                 row=2;
  7505  000BFA  0E02               	movlw	2
  7506  000BFC  6E44               	movwf	_row^0,c
  7507                           
  7508                           ;keypad.c: 83:             }else{
  7509  000BFE  0C02               	retlw	2
  7510  000C00                     l148:
  7511                           
  7512                           ;keypad.c: 88:             if (!!(PORTBbits.RB0 && PORTBbits.RB1 && PORTBbits.RB2)){
  7513  000C00  B081               	btfsc	129,0,c	;volatile
  7514  000C02  A281               	btfss	129,1,c	;volatile
  7515  000C04  D7DE               	goto	l3874
  7516  000C06  A481               	btfss	129,2,c	;volatile
  7517  000C08  D7DC               	goto	l3874
  7518                           
  7519                           ;keypad.c: 89:                 LATBbits.LATB3=1;
  7520  000C0A  868A               	bsf	138,3,c	;volatile
  7521                           
  7522                           ;keypad.c: 90:                 LATBbits.LATB4=1;
  7523  000C0C  888A               	bsf	138,4,c	;volatile
  7524                           
  7525                           ;keypad.c: 91:                 LATBbits.LATB5=1;
  7526  000C0E  8A8A               	bsf	138,5,c	;volatile
  7527                           
  7528                           ;keypad.c: 92:                 LATBbits.LATB6=0;
  7529  000C10  9C8A               	bcf	138,6,c	;volatile
  7530                           
  7531                           ;keypad.c: 93:                 row=3;
  7532  000C12  0E03               	movlw	3
  7533  000C14  6E44               	movwf	_row^0,c
  7534  000C16                     l3904:
  7535                           
  7536                           ;keypad.c: 94:                 state=0;
  7537  000C16  6A3C               	clrf	_state^0,c
  7538                           
  7539                           ;keypad.c: 95:             }else{
  7540  000C18  0012               	return	
  7541  000C1A                     l3908:
  7542                           
  7543                           ;keypad.c: 100:             state=5;
  7544  000C1A  0E05               	movlw	5
  7545  000C1C  6E3C               	movwf	_state^0,c
  7546                           
  7547                           ;keypad.c: 101:             TiResetTics(timerBounces);
  7548  000C1E  5043               	movf	_timerBounces^0,w,c
  7549  000C20  EF13  F00B         	goto	_TiResetTics
  7550  000C24                     l3912:
  7551                           
  7552                           ;keypad.c: 104:             if (TiGetTics(timerBounces) >= 25){
  7553  000C24  5043               	movf	_timerBounces^0,w,c
  7554  000C26  EC8E  F00A         	call	_TiGetTics
  7555  000C2A  BE4C               	btfsc	(?_TiGetTics+1)^0,7,c
  7556  000C2C  0012               	return	
  7557  000C2E  504C               	movf	(?_TiGetTics+1)^0,w,c
  7558  000C30  E104               	bnz	u3160
  7559  000C32  0E19               	movlw	25
  7560  000C34  5C4B               	subwf	?_TiGetTics^0,w,c
  7561  000C36  A0D8               	btfss	status,0,c
  7562  000C38  0012               	return	
  7563  000C3A                     u3160:
  7564                           
  7565                           ;keypad.c: 105:                 if (!!(PORTBbits.RB0 && PORTBbits.RB1 && PORTBbits.RB2))
      +                          {
  7566  000C3A  B081               	btfsc	129,0,c	;volatile
  7567  000C3C  A281               	btfss	129,1,c	;volatile
  7568  000C3E  D002               	goto	l3922
  7569  000C40  B481               	btfsc	129,2,c	;volatile
  7570  000C42  D7E9               	goto	l3904
  7571  000C44                     l3922:
  7572                           
  7573                           ;keypad.c: 108:                     pressed = 1;
  7574  000C44  0E01               	movlw	1
  7575  000C46  6E3F               	movwf	_pressed^0,c
  7576                           
  7577                           ;keypad.c: 109:                     state = 6;
  7578  000C48  D036               	goto	PL82	;call to abstracted procedure
  7579  000C4A                     l156:
  7580                           
  7581                           ;keypad.c: 114:             if (!!(PORTBbits.RB0 && PORTBbits.RB1 && PORTBbits.RB2)){
  7582  000C4A  B081               	btfsc	129,0,c	;volatile
  7583  000C4C  A281               	btfss	129,1,c	;volatile
  7584  000C4E  0012               	return	
  7585  000C50  A481               	btfss	129,2,c	;volatile
  7586  000C52  0012               	return	
  7587                           
  7588                           ;keypad.c: 115:                 TiResetTics(timerBounces);
  7589  000C54  5043               	movf	_timerBounces^0,w,c
  7590  000C56  EC13  F00B         	call	_TiResetTics
  7591                           
  7592                           ;keypad.c: 116:                 state = 7;
  7593  000C5A  0E07               	movlw	7
  7594  000C5C  6E3C               	movwf	_state^0,c
  7595  000C5E  0C07               	retlw	7
  7596  000C60                     l3932:
  7597                           
  7598                           ;keypad.c: 120:             if (TiGetTics(timerBounces) >= 25){
  7599  000C60  5043               	movf	_timerBounces^0,w,c
  7600  000C62  EC8E  F00A         	call	_TiGetTics
  7601  000C66  BE4C               	btfsc	(?_TiGetTics+1)^0,7,c
  7602  000C68  0012               	return	
  7603  000C6A  504C               	movf	(?_TiGetTics+1)^0,w,c
  7604  000C6C  E104               	bnz	u3230
  7605  000C6E  0E19               	movlw	25
  7606  000C70  5C4B               	subwf	?_TiGetTics^0,w,c
  7607  000C72  A0D8               	btfss	status,0,c
  7608  000C74  0012               	return	
  7609  000C76                     u3230:
  7610                           
  7611                           ;keypad.c: 121:                 if (!!(PORTBbits.RB0 && PORTBbits.RB1 && PORTBbits.RB2))
      +                          {
  7612  000C76  B081               	btfsc	129,0,c	;volatile
  7613  000C78  A281               	btfss	129,1,c	;volatile
  7614  000C7A  D01D               	goto	PL82
  7615  000C7C  A481               	btfss	129,2,c	;volatile
  7616  000C7E  D01B               	goto	PL82
  7617                           
  7618                           ;keypad.c: 122:                     pressed = 0;
  7619  000C80  6A3F               	clrf	_pressed^0,c
  7620                           
  7621                           ;keypad.c: 123:                     state = 0;
  7622  000C82  6A3C               	clrf	_state^0,c
  7623                           
  7624                           ;keypad.c: 124:                 } else {
  7625  000C84  0012               	return	
  7626  000C86                     l3942:
  7627                           
  7628                           ;keypad.c: 125:                     state = 6;
  7629  000C86  D017               	goto	PL82	;call to abstracted procedure
  7630  000C88                     l3946:
  7631  000C88  503C               	movf	_state^0,w,c
  7632  000C8A  6E52               	movwf	??_KeypadMotor^0,c
  7633  000C8C  6A53               	clrf	(??_KeypadMotor+1)^0,c
  7634                           
  7635                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7636                           ; Switch size 1, requested type "space"
  7637                           ; Number of cases is 1, Range of values is 0 to 0
  7638                           ; switch strategies available:
  7639                           ; Name         Instructions Cycles
  7640                           ; simple_byte            4     3 (average)
  7641                           ;	Chosen strategy is simple_byte
  7642  000C8E  5053               	movf	(??_KeypadMotor+1)^0,w,c
  7643  000C90  A4D8               	btfss	status,2,c
  7644  000C92  0012               	return	
  7645                           
  7646                           ; Switch size 1, requested type "space"
  7647                           ; Number of cases is 8, Range of values is 0 to 7
  7648                           ; switch strategies available:
  7649                           ; Name         Instructions Cycles
  7650                           ; simple_byte           25    13 (average)
  7651                           ;	Chosen strategy is simple_byte
  7652  000C94  5052               	movf	??_KeypadMotor^0,w,c
  7653  000C96  E088               	bz	l138
  7654  000C98  0A01               	xorlw	1	; case 1
  7655  000C9A  E096               	bz	l142
  7656  000C9C  0A03               	xorlw	3	; case 2
  7657  000C9E  E0A2               	bz	l145
  7658  000CA0  0A01               	xorlw	1	; case 3
  7659  000CA2  E0AE               	bz	l148
  7660  000CA4  0A07               	xorlw	7	; case 4
  7661  000CA6  E0B9               	bz	l3908
  7662  000CA8  0A01               	xorlw	1	; case 5
  7663  000CAA  E0BC               	bz	l3912
  7664  000CAC  0A03               	xorlw	3	; case 6
  7665  000CAE  E0CD               	bz	l156
  7666  000CB0  0A01               	xorlw	1	; case 7
  7667  000CB2  E0D6               	bz	l3932
  7668  000CB4  0012               	return		;funcret
  7669  000CB6                     __end_of_KeypadMotor:
  7670                           	callstack 0
  7671  000CB6                     PL82:
  7672                           	callstack 27
  7673  000CB6  0E06               	movlw	6
  7674  000CB8  6E3C               	movwf	_state^0,c
  7675  000CBA  0C06               	retlw	6
  7676  000CBC                     __end_ofPL82:
  7677                           	callstack 0
  7678                           
  7679 ;; *************** function _TiResetTics *****************
  7680 ;; Defined at:
  7681 ;;		line 59 in file "TTimer.c"
  7682 ;; Parameters:    Size  Location     Type
  7683 ;;  Handle          1    wreg     unsigned char 
  7684 ;; Auto vars:     Size  Location     Type
  7685 ;;  Handle          1    5[COMRAM] unsigned char 
  7686 ;; Return value:  Size  Location     Type
  7687 ;;                  1    wreg      void 
  7688 ;; Registers used:
  7689 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  7690 ;; Tracked objects:
  7691 ;;		On entry : 0/0
  7692 ;;		On exit  : 0/0
  7693 ;;		Unchanged: 0/0
  7694 ;; Data sizes:     COMRAM   BANK0   BANK1
  7695 ;;      Params:         0       0       0
  7696 ;;      Locals:         1       0       0
  7697 ;;      Temps:          0       0       0
  7698 ;;      Totals:         1       0       0
  7699 ;;Total ram usage:        1 bytes
  7700 ;; Hardware stack levels used: 1
  7701 ;; Hardware stack levels required when called: 2
  7702 ;; This function calls:
  7703 ;;		Nothing
  7704 ;; This function is called by:
  7705 ;;		_KeypadMotor
  7706 ;;		_SMSMotor
  7707 ;;		_KeSetMode
  7708 ;;		_Espera
  7709 ;;		_WaitForBusy
  7710 ;;		_menuMotor
  7711 ;;		_timeMotor
  7712 ;;		_startTimer
  7713 ;; This function uses a non-reentrant model
  7714 ;;
  7715                           
  7716                           	psect	text55
  7717  001626                     __ptext55:
  7718                           	callstack 0
  7719  001626                     _TiResetTics:
  7720                           	callstack 27
  7721                           
  7722                           ;incstack = 0
  7723                           ;TiResetTics@Handle stored from wreg
  7724  001626  6E4B               	movwf	TiResetTics@Handle^0,c
  7725                           
  7726                           ;TTimer.c: 63:     s_Timers[Handle].h_initialTics=h_Tics;
  7727  001628  504B               	movf	TiResetTics@Handle^0,w,c
  7728  00162A  D805               	call	PL46	;call to abstracted procedure
  7729  00162C  C021  FFDE         	movff	_h_Tics,postinc2
  7730  001630  C022  FFDD         	movff	_h_Tics+1,postdec2
  7731  001634  0012               	return		;funcret
  7732  001636                     __end_of_TiResetTics:
  7733                           	callstack 0
  7734  001636                     PL46:
  7735                           	callstack 23
  7736  001636  0D03               	mullw	3
  7737  001638  50F3               	movf	243,w,c
  7738  00163A  0F80               	addlw	low _s_Timers
  7739  00163C  6ED9               	movwf	fsr2l,c
  7740  00163E  6ADA               	clrf	fsr2h,c
  7741  001640  0012               	return	
  7742  001642                     __end_ofPL46:
  7743                           	callstack 0
  7744                           
  7745 ;; *************** function _TiGetTics *****************
  7746 ;; Defined at:
  7747 ;;		line 65 in file "TTimer.c"
  7748 ;; Parameters:    Size  Location     Type
  7749 ;;  Handle          1    wreg     unsigned char 
  7750 ;; Auto vars:     Size  Location     Type
  7751 ;;  Handle          1    9[COMRAM] unsigned char 
  7752 ;;  actual          2   10[COMRAM] volatile unsigned int 
  7753 ;; Return value:  Size  Location     Type
  7754 ;;                  2    5[COMRAM] int 
  7755 ;; Registers used:
  7756 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  7757 ;; Tracked objects:
  7758 ;;		On entry : 0/0
  7759 ;;		On exit  : 0/0
  7760 ;;		Unchanged: 0/0
  7761 ;; Data sizes:     COMRAM   BANK0   BANK1
  7762 ;;      Params:         2       0       0
  7763 ;;      Locals:         3       0       0
  7764 ;;      Temps:          2       0       0
  7765 ;;      Totals:         7       0       0
  7766 ;;Total ram usage:        7 bytes
  7767 ;; Hardware stack levels used: 1
  7768 ;; Hardware stack levels required when called: 2
  7769 ;; This function calls:
  7770 ;;		Nothing
  7771 ;; This function is called by:
  7772 ;;		_KeypadMotor
  7773 ;;		_SMSMotor
  7774 ;;		_Espera
  7775 ;;		_WaitForBusy
  7776 ;;		_menuMotor
  7777 ;;		_timeMotor
  7778 ;; This function uses a non-reentrant model
  7779 ;;
  7780                           
  7781                           	psect	text56
  7782  00151C                     __ptext56:
  7783                           	callstack 0
  7784  00151C                     _TiGetTics:
  7785                           	callstack 27
  7786                           
  7787                           ;incstack = 0
  7788                           ;TiGetTics@Handle stored from wreg
  7789  00151C  6E4F               	movwf	TiGetTics@Handle^0,c
  7790                           
  7791                           ;TTimer.c: 69:     volatile unsigned int actual;;TTimer.c: 70:     actual=h_Tics;
  7792  00151E  C021  F050         	movff	_h_Tics,TiGetTics@actual	;volatile
  7793  001522  C022  F051         	movff	_h_Tics+1,TiGetTics@actual+1	;volatile
  7794                           
  7795                           ;TTimer.c: 71:     return (actual-(s_Timers[Handle].h_initialTics));
  7796  001526  504F               	movf	TiGetTics@Handle^0,w,c
  7797  001528  EC1B  F00B         	call	PL46	;call to abstracted procedure
  7798  00152C  CFDE F04D          	movff	postinc2,??_TiGetTics
  7799  001530  CFDD F04E          	movff	postdec2,??_TiGetTics+1
  7800  001534  504D               	movf	??_TiGetTics^0,w,c
  7801  001536  5C50               	subwf	TiGetTics@actual^0,w,c	;volatile
  7802  001538  6E4B               	movwf	?_TiGetTics^0,c
  7803  00153A  504E               	movf	(??_TiGetTics+1)^0,w,c
  7804  00153C  5851               	subwfb	(TiGetTics@actual+1)^0,w,c	;volatile
  7805  00153E  6E4C               	movwf	(?_TiGetTics+1)^0,c
  7806  001540  0012               	return		;funcret
  7807  001542                     __end_of_TiGetTics:
  7808                           	callstack 0
  7809                           
  7810 ;; *************** function _RSI_High *****************
  7811 ;; Defined at:
  7812 ;;		line 32 in file "main.c"
  7813 ;; Parameters:    Size  Location     Type
  7814 ;;		None
  7815 ;; Auto vars:     Size  Location     Type
  7816 ;;		None
  7817 ;; Return value:  Size  Location     Type
  7818 ;;                  1    wreg      void 
  7819 ;; Registers used:
  7820 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7821 ;; Tracked objects:
  7822 ;;		On entry : 0/0
  7823 ;;		On exit  : 0/0
  7824 ;;		Unchanged: 0/0
  7825 ;; Data sizes:     COMRAM   BANK0   BANK1
  7826 ;;      Params:         0       0       0
  7827 ;;      Locals:         0       0       0
  7828 ;;      Temps:          4       0       0
  7829 ;;      Totals:         4       0       0
  7830 ;;Total ram usage:        4 bytes
  7831 ;; Hardware stack levels used: 1
  7832 ;; Hardware stack levels required when called: 1
  7833 ;; This function calls:
  7834 ;;		__TiRSITimer
  7835 ;; This function is called by:
  7836 ;;		Interrupt level 2
  7837 ;; This function uses a non-reentrant model
  7838 ;;
  7839                           
  7840                           	psect	intcode
  7841  000008                     __pintcode:
  7842                           	callstack 0
  7843  000008                     _RSI_High:
  7844                           	callstack 23
  7845                           
  7846                           ;incstack = 0
  7847  000008  8272               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  7848  00000A  CFD9 F047          	movff	fsr2l,??_RSI_High
  7849  00000E  CFDA F048          	movff	fsr2h,??_RSI_High+1
  7850  000012  CFF3 F049          	movff	prodl,??_RSI_High+2
  7851  000016  CFF4 F04A          	movff	prodh,??_RSI_High+3
  7852  00001A  ECA2  F009         	call	__TiRSITimer	;wreg free
  7853  00001E  C04A  FFF4         	movff	??_RSI_High+3,prodh
  7854  000022  C049  FFF3         	movff	??_RSI_High+2,prodl
  7855  000026  C048  FFDA         	movff	??_RSI_High+1,fsr2h
  7856  00002A  C047  FFD9         	movff	??_RSI_High,fsr2l
  7857  00002E  9272               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  7858  000030  0011               	retfie		f
  7859  000032                     __end_of_RSI_High:
  7860                           	callstack 0
  7861                           
  7862 ;; *************** function __TiRSITimer *****************
  7863 ;; Defined at:
  7864 ;;		line 37 in file "TTimer.c"
  7865 ;; Parameters:    Size  Location     Type
  7866 ;;		None
  7867 ;; Auto vars:     Size  Location     Type
  7868 ;;		None
  7869 ;; Return value:  Size  Location     Type
  7870 ;;                  1    wreg      void 
  7871 ;; Registers used:
  7872 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  7873 ;; Tracked objects:
  7874 ;;		On entry : 0/0
  7875 ;;		On exit  : 0/0
  7876 ;;		Unchanged: 0/0
  7877 ;; Data sizes:     COMRAM   BANK0   BANK1
  7878 ;;      Params:         0       0       0
  7879 ;;      Locals:         0       0       0
  7880 ;;      Temps:          1       0       0
  7881 ;;      Totals:         1       0       0
  7882 ;;Total ram usage:        1 bytes
  7883 ;; Hardware stack levels used: 1
  7884 ;; This function calls:
  7885 ;;		Nothing
  7886 ;; This function is called by:
  7887 ;;		_RSI_High
  7888 ;; This function uses a non-reentrant model
  7889 ;;
  7890                           
  7891                           	psect	text58
  7892  001344                     __ptext58:
  7893                           	callstack 0
  7894  001344                     __TiRSITimer:
  7895                           	callstack 23
  7896                           
  7897                           ;TTimer.c: 43:     TMR0H = 0x20;
  7898                           
  7899                           ;incstack = 0
  7900  001344  0E20               	movlw	32
  7901  001346  6ED7               	movwf	215,c	;volatile
  7902                           
  7903                           ;TTimer.c: 44:     TMR0L = 0x8A;
  7904  001348  0E8A               	movlw	138
  7905  00134A  6ED6               	movwf	214,c	;volatile
  7906                           
  7907                           ;TTimer.c: 45:     INTCONbits.TMR0IF = 0;
  7908  00134C  94F2               	bcf	242,2,c	;volatile
  7909                           
  7910                           ;TTimer.c: 46:     h_Tics++;
  7911  00134E  4A21               	infsnz	_h_Tics^0,f,c
  7912  001350  2A22               	incf	(_h_Tics+1)^0,f,c
  7913                           
  7914                           ;TTimer.c: 48:     if (h_Tics>=30000) {
  7915  001352  0E30               	movlw	48
  7916  001354  5C21               	subwf	_h_Tics^0,w,c
  7917  001356  0E75               	movlw	117
  7918  001358  5822               	subwfb	(_h_Tics+1)^0,w,c
  7919  00135A  A0D8               	btfss	status,0,c
  7920  00135C  0012               	return	
  7921                           
  7922                           ;TTimer.c: 50:         for (counter=0;counter<25;counter++){
  7923  00135E  6A45               	clrf	_counter^0,c
  7924  001360                     i2l3716:
  7925  001360  0E18               	movlw	24
  7926  001362  6445               	cpfsgt	_counter^0,c
  7927  001364  D001               	goto	i2l3720
  7928  001366  D00D               	goto	i2l71
  7929  001368                     i2l3720:
  7930                           
  7931                           ;TTimer.c: 51:             if (s_Timers[counter].b_busy==1){
  7932  001368  EC74  F00A         	call	PL28	;call to abstracted procedure
  7933  00136C  04DE               	decf	postinc2,w,c
  7934  00136E  E107               	bnz	i2l3724
  7935                           
  7936                           ;TTimer.c: 52:                 s_Timers[counter].h_initialTics -= h_Tics;
  7937  001370  5045               	movf	_counter^0,w,c
  7938  001372  EC1B  F00B         	call	PL46	;call to abstracted procedure
  7939  001376  5021               	movf	_h_Tics^0,w,c
  7940  001378  5EDE               	subwf	postinc2,f,c
  7941  00137A  5022               	movf	(_h_Tics+1)^0,w,c
  7942  00137C  5ADD               	subwfb	postdec2,f,c
  7943  00137E                     i2l3724:
  7944                           
  7945                           ;TTimer.c: 54:         }
  7946  00137E  2A45               	incf	_counter^0,f,c
  7947  001380  D7EF               	goto	i2l3716
  7948  001382                     i2l71:
  7949                           
  7950                           ;TTimer.c: 55:         h_Tics=0;
  7951  001382  6A21               	clrf	_h_Tics^0,c
  7952  001384  6A22               	clrf	(_h_Tics+1)^0,c
  7953  001386  0012               	return		;funcret
  7954  001388                     __end_of__TiRSITimer:
  7955                           	callstack 0
  7956                           
  7957                           	psect	rparam
  7958  0000                     
  7959                           	psect	temp
  7960  000072                     btemp:
  7961                           	callstack 0
  7962  000072                     	ds	1
  7963  0000                     int$flags	set	btemp
  7964  0000                     wtemp8	set	btemp+1
  7965  0000                     ttemp5	set	btemp+1
  7966  0000                     ttemp6	set	btemp+4
  7967  0000                     ttemp7	set	btemp+8
  7968                           
  7969                           	psect	idloc
  7970                           
  7971                           ;Config register IDLOC0 @ 0x200000
  7972                           ;	unspecified, using default values
  7973  200000                     	org	2097152
  7974  200000  FF                 	db	255
  7975                           
  7976                           ;Config register IDLOC1 @ 0x200001
  7977                           ;	unspecified, using default values
  7978  200001                     	org	2097153
  7979  200001  FF                 	db	255
  7980                           
  7981                           ;Config register IDLOC2 @ 0x200002
  7982                           ;	unspecified, using default values
  7983  200002                     	org	2097154
  7984  200002  FF                 	db	255
  7985                           
  7986                           ;Config register IDLOC3 @ 0x200003
  7987                           ;	unspecified, using default values
  7988  200003                     	org	2097155
  7989  200003  FF                 	db	255
  7990                           
  7991                           ;Config register IDLOC4 @ 0x200004
  7992                           ;	unspecified, using default values
  7993  200004                     	org	2097156
  7994  200004  FF                 	db	255
  7995                           
  7996                           ;Config register IDLOC5 @ 0x200005
  7997                           ;	unspecified, using default values
  7998  200005                     	org	2097157
  7999  200005  FF                 	db	255
  8000                           
  8001                           ;Config register IDLOC6 @ 0x200006
  8002                           ;	unspecified, using default values
  8003  200006                     	org	2097158
  8004  200006  FF                 	db	255
  8005                           
  8006                           ;Config register IDLOC7 @ 0x200007
  8007                           ;	unspecified, using default values
  8008  200007                     	org	2097159
  8009  200007  FF                 	db	255
  8010                           
  8011                           	psect	config
  8012                           
  8013                           ; Padding undefined space
  8014  300000                     	org	3145728
  8015  300000  FF                 	db	255
  8016                           
  8017                           ;Config register CONFIG1H @ 0x300001
  8018                           ;	Oscillator
  8019                           ;	OSC = HSPLL, HS oscillator, PLL enabled (Clock Frequency = 4 x FOSC1)
  8020                           ;	Fail-Safe Clock Monitor Enable bit
  8021                           ;	FCMEN = 0x0, unprogrammed default
  8022                           ;	Internal/External Oscillator Switchover bit
  8023                           ;	IESO = 0x0, unprogrammed default
  8024  300001                     	org	3145729
  8025  300001  06                 	db	6
  8026                           
  8027                           ;Config register CONFIG2L @ 0x300002
  8028                           ;	Power-up Timer Enable bit
  8029                           ;	PWRT = OFF, PWRT disabled
  8030                           ;	Brown-out Reset Enable bits
  8031                           ;	BOR = OFF, Brown-out Reset disabled in hardware and software
  8032                           ;	Brown-out Reset Voltage bits
  8033                           ;	BORV = 0x3, unprogrammed default
  8034  300002                     	org	3145730
  8035  300002  19                 	db	25
  8036                           
  8037                           ;Config register CONFIG2H @ 0x300003
  8038                           ;	Watchdog Timer Enable bit
  8039                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
  8040                           ;	Watchdog Timer Postscale Select bits
  8041                           ;	WDTPS = 0xF, unprogrammed default
  8042  300003                     	org	3145731
  8043  300003  1E                 	db	30
  8044                           
  8045                           ; Padding undefined space
  8046  300004                     	org	3145732
  8047  300004  FF                 	db	255
  8048                           
  8049                           ;Config register CONFIG3H @ 0x300005
  8050                           ;	CCP2 MUX bit
  8051                           ;	CCP2MX = 0x1, unprogrammed default
  8052                           ;	PORTB A/D Enable bit
  8053                           ;	PBADEN = DIG, PORTB<4:0> pins are configured as digital I/O on Reset
  8054                           ;	Low-Power Timer1 Oscillator Enable bit
  8055                           ;	LPT1OSC = 0x0, unprogrammed default
  8056                           ;	MCLR Pin Enable bit
  8057                           ;	MCLRE = OFF, RE3 input pin enabled; MCLR disabled
  8058  300005                     	org	3145733
  8059  300005  01                 	db	1
  8060                           
  8061                           ;Config register CONFIG4L @ 0x300006
  8062                           ;	Stack Full/Underflow Reset Enable bit
  8063                           ;	STVREN = 0x1, unprogrammed default
  8064                           ;	Single-Supply ICSP Enable bit
  8065                           ;	LVP = OFF, Single-Supply ICSP disabled
  8066                           ;	Boot Block Size Select bits
  8067                           ;	BBSIZ = 0x0, unprogrammed default
  8068                           ;	Extended Instruction Set Enable bit
  8069                           ;	XINST = 0x0, unprogrammed default
  8070                           ;	Background Debugger Enable bit
  8071                           ;	DEBUG = OFF, Background debugger disabled, RB6 and RB7 configured as general purpose I
      +                          /O pins
  8072  300006                     	org	3145734
  8073  300006  81                 	db	129
  8074                           
  8075                           ; Padding undefined space
  8076  300007                     	org	3145735
  8077  300007  FF                 	db	255
  8078                           
  8079                           ;Config register CONFIG5L @ 0x300008
  8080                           ;	unspecified, using default values
  8081                           ;	Code Protection bit
  8082                           ;	CP0 = 0x1, unprogrammed default
  8083                           ;	Code Protection bit
  8084                           ;	CP1 = 0x1, unprogrammed default
  8085  300008                     	org	3145736
  8086  300008  03                 	db	3
  8087                           
  8088                           ;Config register CONFIG5H @ 0x300009
  8089                           ;	unspecified, using default values
  8090                           ;	Boot Block Code Protection bitProtect Boot
  8091                           ;	CPB = 0x1, unprogrammed default
  8092                           ;	Data EEPROM Code Protection bit
  8093                           ;	CPD = 0x1, unprogrammed default
  8094  300009                     	org	3145737
  8095  300009  C0                 	db	192
  8096                           
  8097                           ;Config register CONFIG6L @ 0x30000A
  8098                           ;	unspecified, using default values
  8099                           ;	Write Protection bit
  8100                           ;	WRT0 = 0x1, unprogrammed default
  8101                           ;	Write Protection bit
  8102                           ;	WRT1 = 0x1, unprogrammed default
  8103  30000A                     	org	3145738
  8104  30000A  03                 	db	3
  8105                           
  8106                           ;Config register CONFIG6H @ 0x30000B
  8107                           ;	unspecified, using default values
  8108                           ;	Configuration Register Write Protection bit
  8109                           ;	WRTC = 0x1, unprogrammed default
  8110                           ;	Boot Block Write Protection bit
  8111                           ;	WRTB = 0x1, unprogrammed default
  8112                           ;	Data EEPROM Write Protection bit
  8113                           ;	WRTD = 0x1, unprogrammed default
  8114  30000B                     	org	3145739
  8115  30000B  E0                 	db	224
  8116                           
  8117                           ;Config register CONFIG7L @ 0x30000C
  8118                           ;	unspecified, using default values
  8119                           ;	Table Read Protection bit
  8120                           ;	EBTR0 = 0x1, unprogrammed default
  8121                           ;	Table Read Protection bit
  8122                           ;	EBTR1 = 0x1, unprogrammed default
  8123  30000C                     	org	3145740
  8124  30000C  03                 	db	3
  8125                           
  8126                           ;Config register CONFIG7H @ 0x30000D
  8127                           ;	unspecified, using default values
  8128                           ;	Boot Block Table Read Protection bit
  8129                           ;	EBTRB = 0x1, unprogrammed default
  8130  30000D                     	org	3145741
  8131  30000D  40                 	db	64
  8132                           tosu	equ	0xFFF
  8133                           tosh	equ	0xFFE
  8134                           tosl	equ	0xFFD
  8135                           stkptr	equ	0xFFC
  8136                           pclatu	equ	0xFFB
  8137                           pclath	equ	0xFFA
  8138                           pcl	equ	0xFF9
  8139                           tblptru	equ	0xFF8
  8140                           tblptrh	equ	0xFF7
  8141                           tblptrl	equ	0xFF6
  8142                           tablat	equ	0xFF5
  8143                           prodh	equ	0xFF4
  8144                           prodl	equ	0xFF3
  8145                           indf0	equ	0xFEF
  8146                           postinc0	equ	0xFEE
  8147                           postdec0	equ	0xFED
  8148                           preinc0	equ	0xFEC
  8149                           plusw0	equ	0xFEB
  8150                           fsr0h	equ	0xFEA
  8151                           fsr0l	equ	0xFE9
  8152                           wreg	equ	0xFE8
  8153                           indf1	equ	0xFE7
  8154                           postinc1	equ	0xFE6
  8155                           postdec1	equ	0xFE5
  8156                           preinc1	equ	0xFE4
  8157                           plusw1	equ	0xFE3
  8158                           fsr1h	equ	0xFE2
  8159                           fsr1l	equ	0xFE1
  8160                           bsr	equ	0xFE0
  8161                           indf2	equ	0xFDF
  8162                           postinc2	equ	0xFDE
  8163                           postdec2	equ	0xFDD
  8164                           preinc2	equ	0xFDC
  8165                           plusw2	equ	0xFDB
  8166                           fsr2h	equ	0xFDA
  8167                           fsr2l	equ	0xFD9
  8168                           status	equ	0xFD8

Data Sizes:
    Strings     0
    Constant    263
    Data        3
    BSS         306
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     41     113
    BANK0           128      0      93
    BANK1           256      0     144

Pointer List with Targets:

    None.

Critical Paths under _main in COMRAM

    _main->_menuMotor
    _timeMotor->_LcPutChar
    _menuMotor->_DaFindUser
    _startTimer->_TiResetTics
    _displayTimeRemaining->_LcGotoXY
    _displayMenu->_LcPutChar
    _LcPutChar->_LcGotoXY
    _CantaData->_CantaPartAlta
    _CantaData->_CantaPartBaixa
    _LcCursorOn->_WaitForBusy
    _LcCursorOff->_WaitForBusy
    _LcClear->_Espera
    _KeSetMode->_TiResetTics
    _KeGetCharValue->_getFullValue
    _DaFindUser->_LcGotoXY
    _joystickMotor->_SiSendChar
    _initTime->_TiGetTimer
    _initMenu->_TiGetTimer
    _initKeypad->_TiGetTimer
    _initData->_readUserData
    _dataMotor->_LcGotoXY
    _LcGotoXY->_WaitForBusy
    _SMSMotor->_TiGetTics
    _LcInit->_Espera
    _WaitForBusy->_TiGetTics
    _Espera->_TiGetTics
    _CantaIR->_CantaPartAlta
    _CantaIR->_CantaPartBaixa
    _KeypadMotor->_TiGetTics

Critical Paths under _RSI_High in COMRAM

    _RSI_High->__TiRSITimer

Critical Paths under _main in BANK0

    None.

Critical Paths under _RSI_High in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _RSI_High in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   29181
                        _KeypadMotor
                             _LcInit
                           _SMSMotor
                        _TiInitTimer
                          _dataMotor
                           _initData
                       _initJoystick
                         _initKeypad
                           _initMenu
                            _initSIO
                           _initTime
                      _joystickMotor
                          _menuMotor
                          _timeMotor
 ---------------------------------------------------------------------------------
 (1) _timeMotor                                            2     2      0    5167
                                             22 COMRAM     2     2      0
                           _LcGotoXY
                          _LcPutChar
                          _TiGetTics
                        _TiResetTics
 ---------------------------------------------------------------------------------
 (1) _menuMotor                                            2     2      0   19741
                                             39 COMRAM     2     2      0
                         _DaFindUser
                          _DaGetIdle
                        _DaGetStatus
                        _DaSaveScore
                         _DaSaveUser
                        _JoDirection
                            _JoMoved
                          _JoSetMode
                     _KeGetCharValue
                  _KeGetGenericValue
                          _KeSetMode
                            _LcClear
                        _LcCursorOff
                         _LcCursorOn
                           _LcGotoXY
                          _LcPutChar
                      _SiIsAvailable
                         _SiReadByte
                     _SiRecievedByte
                         _SiSendChar
                          _TiGetTics
                        _TiResetTics
                            ___lbdiv
                            ___lbmod
                        _displayMenu
               _displayTimeRemaining
                         _getPresses
                          _isPressed
                         _startTimer
                          _stopTimer
 ---------------------------------------------------------------------------------
 (2) _stopTimer                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _startTimer                                           0     0      0      22
                        _TiResetTics
 ---------------------------------------------------------------------------------
 (2) _isPressed                                            1     1      0      24
                                              5 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _getPresses                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _displayTimeRemaining                                 0     0      0    2384
                           _LcGotoXY
 ---------------------------------------------------------------------------------
 (2) _displayMenu                                          6     5      1    6394
                                             22 COMRAM     6     5      1
                           _LcGotoXY
                          _LcPutChar
                            ___awmod
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              6     2      4     574
                                              5 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) _LcPutChar                                            1     1      0    2716
                                             21 COMRAM     1     1      0
                          _CantaData
                           _LcGotoXY
                        _WaitForBusy
 ---------------------------------------------------------------------------------
 (3) _CantaData                                            1     1      0     220
                                              7 COMRAM     1     1      0
                      _CantaPartAlta
                     _CantaPartBaixa
 ---------------------------------------------------------------------------------
 (2) ___lbmod                                              4     3      1     437
                                              5 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 (2) ___lbdiv                                              4     3      1     364
                                              5 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 (2) _SiRecievedByte                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _SiReadByte                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _LcCursorOn                                           0     0      0     310
                            _CantaIR
                        _WaitForBusy
 ---------------------------------------------------------------------------------
 (2) _LcCursorOff                                          0     0      0     310
                            _CantaIR
                        _WaitForBusy
 ---------------------------------------------------------------------------------
 (2) _LcClear                                              0     0      0    1507
                            _CantaIR
                             _Espera
                        _WaitForBusy
 ---------------------------------------------------------------------------------
 (2) _KeSetMode                                            1     1      0      66
                                              6 COMRAM     1     1      0
                        _TiResetTics
 ---------------------------------------------------------------------------------
 (2) _KeGetCharValue                                       0     0      0     110
                  _KeGetGenericValue
                       _getFullValue
 ---------------------------------------------------------------------------------
 (3) _getFullValue                                         5     5      0     110
                                              5 COMRAM     5     5      0
 ---------------------------------------------------------------------------------
 (2) _JoSetMode                                            1     1      0      22
                                              5 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _JoMoved                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _JoDirection                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _DaSaveUser                                          18     0     18      98
                                              5 COMRAM    18     0     18
 ---------------------------------------------------------------------------------
 (2) _DaSaveScore                                          1     1      0      22
                                              5 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _DaGetStatus                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _DaGetIdle                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _DaFindUser                                          18     0     18    2482
                                             21 COMRAM    18     0     18
                           _LcGotoXY
 ---------------------------------------------------------------------------------
 (1) _joystickMotor                                        2     2      0      22
                                              6 COMRAM     2     2      0
                      _SiIsAvailable
                         _SiSendChar
 ---------------------------------------------------------------------------------
 (2) _SiSendChar                                           1     1      0      22
                                              5 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _SiIsAvailable                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initTime                                             0     0      0       0
                         _TiGetTimer
 ---------------------------------------------------------------------------------
 (1) _initSIO                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initMenu                                             0     0      0       0
                         _TiGetTimer
 ---------------------------------------------------------------------------------
 (1) _initKeypad                                           0     0      0       0
                         _TiGetTimer
 ---------------------------------------------------------------------------------
 (1) _initJoystick                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initData                                             0     0      0       0
                       _readUserData
 ---------------------------------------------------------------------------------
 (2) _readUserData                                         2     2      0       0
                                              5 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _dataMotor                                            4     4      0    2384
                                             21 COMRAM     4     4      0
                           _LcGotoXY
 ---------------------------------------------------------------------------------
 (3) _LcGotoXY                                             8     7      1    2384
                                             13 COMRAM     8     7      1
                            _CantaIR
                        _WaitForBusy
 ---------------------------------------------------------------------------------
 (1) _TiInitTimer                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SMSMotor                                             2     2      0      67
                                             12 COMRAM     2     2      0
                  _KeGetGenericValue
                          _TiGetTics
                        _TiResetTics
 ---------------------------------------------------------------------------------
 (2) _KeGetGenericValue                                    2     2      0       0
                                              5 COMRAM     2     2      0
                          _getColumn
 ---------------------------------------------------------------------------------
 (3) _getColumn                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _LcInit                                               4     3      1    1733
                                             17 COMRAM     4     3      1
                            _CantaIR
                 _EscriuPrimeraOrdre
                             _Espera
                         _TiGetTimer
                        _WaitForBusy
 ---------------------------------------------------------------------------------
 (3) _WaitForBusy                                          1     1      0      90
                                             12 COMRAM     1     1      0
                          _TiGetTics
                        _TiResetTics
 ---------------------------------------------------------------------------------
 (2) _TiGetTimer                                           1     1      0       0
                                              5 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _Espera                                               5     1      4    1197
                                             12 COMRAM     5     1      4
                          _TiGetTics
                        _TiResetTics
 ---------------------------------------------------------------------------------
 (2) _EscriuPrimeraOrdre                                   2     2      0      60
                                              5 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (4) _CantaIR                                              1     1      0     220
                                              7 COMRAM     1     1      0
                      _CantaPartAlta
                     _CantaPartBaixa
 ---------------------------------------------------------------------------------
 (5) _CantaPartBaixa                                       2     2      0      88
                                              5 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (5) _CantaPartAlta                                        2     2      0      88
                                              5 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _KeypadMotor                                          2     2      0      67
                                             12 COMRAM     2     2      0
                          _TiGetTics
                        _TiResetTics
 ---------------------------------------------------------------------------------
 (2) _TiResetTics                                          1     1      0      22
                                              5 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _TiGetTics                                            7     5      2      45
                                              5 COMRAM     7     5      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _RSI_High                                             4     4      0       0
                                              1 COMRAM     4     4      0
                        __TiRSITimer
 ---------------------------------------------------------------------------------
 (8) __TiRSITimer                                          1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _KeypadMotor
     _TiGetTics
     _TiResetTics
   _LcInit
     _CantaIR
       _CantaPartAlta
       _CantaPartBaixa
     _EscriuPrimeraOrdre
     _Espera
       _TiGetTics
       _TiResetTics
     _TiGetTimer
     _WaitForBusy
       _TiGetTics
       _TiResetTics
   _SMSMotor
     _KeGetGenericValue
       _getColumn
     _TiGetTics
     _TiResetTics
   _TiInitTimer
   _dataMotor
     _LcGotoXY
       _CantaIR
       _WaitForBusy
   _initData
     _readUserData
   _initJoystick
   _initKeypad
     _TiGetTimer
   _initMenu
     _TiGetTimer
   _initSIO
   _initTime
     _TiGetTimer
   _joystickMotor
     _SiIsAvailable
     _SiSendChar
   _menuMotor
     _DaFindUser
       _LcGotoXY
     _DaGetIdle
     _DaGetStatus
     _DaSaveScore
     _DaSaveUser
     _JoDirection
     _JoMoved
     _JoSetMode
     _KeGetCharValue
       _KeGetGenericValue
       _getFullValue
     _KeGetGenericValue
     _KeSetMode
       _TiResetTics
     _LcClear
       _CantaIR
       _Espera
       _WaitForBusy
     _LcCursorOff
       _CantaIR
       _WaitForBusy
     _LcCursorOn
       _CantaIR
       _WaitForBusy
     _LcGotoXY
     _LcPutChar
       _CantaData
         _CantaPartAlta
         _CantaPartBaixa
       _LcGotoXY
       _WaitForBusy
     _SiIsAvailable
     _SiReadByte
     _SiRecievedByte
     _SiSendChar
     _TiGetTics
     _TiResetTics
     ___lbdiv
     ___lbmod
     _displayMenu
       _LcGotoXY
       _LcPutChar
       ___awmod
     _displayTimeRemaining
       _LcGotoXY
     _getPresses
     _isPressed
     _startTimer
       _TiResetTics
     _stopTimer
   _timeMotor
     _LcGotoXY
     _LcPutChar
     _TiGetTics
     _TiResetTics

 _RSI_High (ROOT)
   __TiRSITimer

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             1FF      0       0      23        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      90       7       56.2%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0      5D       5       72.7%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     29      71       1       89.7%
BITBIGSFRhlhh       19      0       0       9        0.0%
BITBIGSFRhh          D      0       0       8        0.0%
BITBIGSFRlhhhh       B      0       0      11        0.0%
BITBIGSFRlhhlhl      8      0       0      14        0.0%
BITBIGSFRlhhlll      8      0       0      17        0.0%
BITBIGSFRlhhllh      7      0       0      16        0.0%
BITBIGSFRlhhlhh      7      0       0      13        0.0%
BITBIGSFRllhlh       6      0       0      19        0.0%
BITBIGSFRllhhh       5      0       0      18        0.0%
BITBIGSFRhll         4      0       0      10        0.0%
BITBIGSFRlhhllh      1      0       0      15        0.0%
BITBIGSFRlhhhl       1      0       0      12        0.0%
BITBIGSFRllhll       1      0       0      20        0.0%
BITBIGSFRlll         1      0       0      21        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     15E      22        0.0%
DATA                 0      0     15E       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.36 build 20220127204148 
Symbol Table                                                                                   Tue Jun 14 00:34:13 2022

           TiResetTics@Handle 004B                             _x 002F                             _y 002E  
      ??_displayTimeRemaining 005B                  ?_displayMenu 005C                            PL2 09CC  
                          PL4 09EA                            PL6 09FA                            PL8 10AC  
                         PL10 0A0A                           PL20 0A32                           PL12 0802  
                         PL30 0830                           PL22 0D76                           PL14 081C  
                         PL40 0862                           PL32 084A                           PL24 0A40  
                         PL16 0A16                           PL50 1070                           PL42 0A5C  
                         PL34 0A54                           PL26 0FCC                           PL18 0A24  
                         PL60 0556                           PL52 086C                           PL44 0A6E  
                         PL36 10E6                           PL28 14E8                           PL70 1434  
                         PL62 0FF6                           PL54 0FE8                           PL46 1636  
                         PL38 0856                           PL80 1296                           PL72 1230  
                         PL64 087A                           PL56 0542                           PL48 1426  
                         PL82 0CB6                           PL74 1002                           PL66 0560  
                         PL58 054C                           PL84 1560                           PL76 107E  
                         PL68 056C                           PL86 0E40                           PL78 0A80  
                         l142 0BC8                           l145 0BE4                           l138 0BA8  
                         l156 0C4A                           l148 0C00                           l167 0E8E  
                         l271 0F04                           l185 1656                           l282 0F50  
                         l275 0F16                           l631 0D9C                           l810 0FA6  
                         l730 115C                           l811 0F9C                           l724 1112  
                         l644 0E08                           l628 0D88                           l725 111C  
                         l814 0FB0                           l726 1152                           l727 113E  
                         l647 0E1C                           l816 0FBA                           l753 05DC  
                         l809 0F92                           l762 0612                           l771 06A6  
                         l764 064E                           l774 06D8                           l766 065A  
                         l783 0750                           l769 0698                           l786 0784  
                         u500 101E                           u520 1034                           u540 1048  
                         u518 1020                           u560 1060                           u538 1036  
                         u558 104A                           u578 1062                           _val 0032  
                         _row 0044              ??_CantaPartBaixa 004B                  ___awmod@sign 0050  
                         wreg 000FE8           __end_of_JoDirection 1718                          l2050 0F8A  
                        l2064 0FA8                          l2242 1102                          l4010 010C  
                        l2252 1114                          l4100 0248                          l4004 00F4  
                        l2246 110A                          l4014 0110                          l3232 13DA  
                        l4112 0288                          l4104 0256                          l3410 11B4  
                        l3402 1196                          l4210 03A0                          l4114 028C  
                        l4106 025C                          l4050 0188                          l4042 0162  
                        l4034 0148                          l4026 012E                          l3340 10A8  
                        l3404 119E                          l3500 08A8                          l4204 038A  
                        l4052 019E                          l3254 1400                          l4310 0DD4  
                        l3414 11BE                          l4150 02E6                          l4126 02AC  
                        l4118 0292                          l4070 01D6                          l4054 01A4  
                        l4046 016C                          l3424 14CE                          l3432 14D8  
                        l3272 0EF8                          l3336 10A6                          l4240 040A  
                        l4232 03EC                          l4224 03CE                          l4160 0304  
                        l3346 15D2                          l3282 0F24                          l4322 0DF4  
                        l3418 11CA                          l3514 08C4                          l4234 03F4  
                        l4218 03B6                          l4138 02BC                          l4090 0210  
                        l4066 01C8                          l3276 0F08                          l3292 0F58  
                        l4412 061C                          l4316 0DEA                          l3700 1514  
                        l3532 0948                          l3508 08BC                          l4260 046A  
                        l4252 0424                          l4180 0340                          l4148 02DC  
                        l4084 01FE                          l3286 0F32                          l3294 0F72  
                        l4510 06E0                          l4406 060C                          l4334 0E0A  
                        l3366 12C2                          l3526 0940                          l4182 0346  
                        l4174 0328                          l4158 0300                          l4078 01EE  
                        l4360 058A                          l4352 0576                          l4328 0DFE  
                        l4344 0E20                          l3384 12EA                          l3552 0976  
                        l3544 0964                          l4088 020A                          l4280 04A6  
                        l4362 058E                          l3378 12DC                          l3394 117E  
                        l3538 095C                          l4610 0AE4                          l4602 0AD4  
                        l3820 0E74                          l3804 0E48                          l3740 1494  
                        l4524 0726                          l4444 065C                          l4372 05AC  
                        l3468 1558                          l3492 089A                          l4268 048A  
                        l4196 0372                          l4604 0AD8                          l3830 0E88  
                        l4550 075A                          l4518 0708                          l4446 0662  
                        l4390 05E6                          l4374 05B0                          l4358 0586  
                        l3398 118A                          l3574 099C                          l3558 097E  
                        l3494 089E                          l4198 0378                          l4630 0B28  
                        l4622 0B0C                          l4614 0AF2                          l4606 0ADC  
                        l3912 0C24                          l3904 0C16                          l3832 0E94  
                        l3736 148C                          l4480 06AE                          l4376 05B6  
                        l3680 1466                          l3672 1452                          l3568 0994  
                        l4608 0AE0                          l3922 0C44                          l3842 0EAC  
                        l4394 05F2                          l4298 0DAE                          l3586 09C4  
                        l3578 09AC                          l3498 08A4                          l4642 0B4C  
                        l4634 0B36                          l4626 0B1A                          l4618 0B00  
                        l4650 0B66                          l3932 0C60                          l3908 0C1A  
                        l3836 0E9C                          l4396 05F8                          l3668 144C  
                        l3684 146E                          l3692 14FE                          l3942 0C86  
                        l3766 0CDC                          l3846 0EB6                          l4646 0B5A  
                        l4638 0B44                          l3848 0EBC                          l3856 0ECE  
                        l3874 0BC2                          l3946 0C88                          l4578 078A  
                        l3962 0058                          l3954 0038                          l4586 0A8C  
                        l4674 13AE                          l3976 0092                          l3994 00D4  
                        l3988 00BA                          u2210 1270                          u2230 1288  
                        u2310 1222                          _LATC 000F8B                          u2208 125E  
                        u2170 1246                          u2250 11E0                          u2410 1094  
                        u2228 1272                          u2308 120C                          u3300 0076  
                        u3230 0C76                          u2190 125C                          u2270 11F6  
                        u3160 0C3A                          u2248 128A                          u2328 1224  
                        u2290 120A                          u3330 00CE                          u3411 017A  
                        u2188 1248                          u2268 11E2                          u3500 023E  
                        u3421 0192                          u2710 08E8                          u2630 1652  
                        u4150 0ACE                          u2711 08E6                          u2288 11F8  
                        u2560 11A2                          u3460 01D0                          u2821 1576  
                        u2831 15BE                          u2960 0D74                          u3680 0362  
                        u2890 1456                          i2l71 1382                          _TIME 1F23  
             __end_of_RESULTS 1F0D                ?_SiIsAvailable 0046                          _Rows 003A  
                        _main 1388                          _send 0030                          fsr1h 000FE2  
                        fsr2h 000FDA                          indf1 000FE7                          indf2 000FDF  
                        fsr1l 000FE1                          fsr2l 000FD9                    _LcCursorOn 16AA  
                        btemp 0072                          prodh 000FF4                          prodl 000FF3  
             __end_of_LcClear 1670                          start 0032               __end_of_CantaIR 1626  
               LcInit@columns 0057               __end_of_JoMoved 1714                  ___param_bank 000000  
               _isPressed$530 004B              __end_of_MAINMENU 1FC8                   Espera@Timer 0052  
                       ?_main 0046               __end_of___lbdiv 1472                         _EEADR 000FA9  
             __end_of___awmod 11D4               __end_of___lbmod 151C                 ??_TiInitTimer 004B  
                       _T0CON 000FD5                         _ERROR 1F4B                         _TABLE 1F3F  
                       _RCREG 000FAE                 ??_KeypadMotor 0052                         _TMR0H 000FD7  
                       _TMR0L 000FD6                         _SPBRG 000FAF                         _TXREG 000FAD  
                 ?_DaFindUser 005B                         _Timer 001F              __end_of_SMSTABLE 1FFE  
             __end_of_initSIO 1684                         _mUser 00CB                         _moved 002D  
                       _timer 0036                   _LcCursorOff 16B4                         _state 003C  
                       _users 0100              __end_of_RSI_High 0032              __end_of_SMSMotor 0EF4  
                       tablat 000FF5                 ??_TiResetTics 004B                         plusw0 000FEB  
                       plusw1 000FE3                         plusw2 000FDB                         ttemp5 0073  
                       ttemp6 0076                         ttemp7 007A                         status 000FD8  
                 ?_DaSaveUser 004B                         wtemp8 0073               ___lbdiv@divisor 004B  
            __end_of_LcGotoXY 0F88               ___lbdiv@counter 004D                 ??__TiRSITimer 0046  
                __end_of_TIME 1F33                    _TiGetTimer 14CA       EscriuPrimeraOrdre@ordre 004C  
             __initialization 12F4                    _SiReadByte 170C                  __end_of_main 13C8  
        __end_of_getFullValue 10AC                    _SiSendChar 16E0                   _JoDirection 1714  
                      ??_main 006F                 __activetblptr 000002                 ?_initJoystick 0046  
           __end_of_LOGINMENU 1F23                        _ADCON0 000FC2                        _ADCON1 000FC1  
                      _ADCON2 000FC0          __end_of_MAINMENUSIZE 1F58           __end_of_TiInitTimer 149E  
                      _ADRESH 000FC4                        _EEDATA 000FA8                        _EECON2 000FA7  
             ??_SiIsAvailable 004B           __end_of_KeypadMotor 0CB6                     ??_LcClear 0057  
                   ??_CantaIR 004D                        i2l3720 1368                        i2l3724 137E  
                      i2l3716 1360                        _LCDcol 0034                LcGotoXY@Fisics 0058  
              LcGotoXY@Column 005A                        _LCDrow 0035                 ??_WaitForBusy 0052  
               ?_readUserData 0046            _mUser@EEPROM$F1509 0001                     ??_JoMoved 004B  
                 ?_LcCursorOn 0046             KeSetMode@menuMode 004C                        _LcInit 0CBC  
                ?_DaGetStatus 0046                        _Espera 15CC                  _LcGotoXY$736 0056  
           __end_of_DaGetIdle 16E0                        _RowAct 0038           __end_of_TiResetTics 1636  
                      _h_Tics 0021                     ??___lbdiv 004C                     ??___awmod 004F  
                   ??___lbmod 004C                        _mScore 0031              __end_of_initData 116C  
            __end_of_initMenu 16F8              __end_of_initTime 16F0           __end_of__TiRSITimer 1388  
                      clear_0 1318                        clear_1 1324                        clear_2 1330  
                      _minute 006F                        _second 001D               ___awmod@divisor 004D  
                      isa$std 000001               ___awmod@counter 004F                        _status 0027  
              ??_initJoystick 004B                     ??_initSIO 004B                  __pdataCOMRAM 006F  
                __mediumconst 1EF6                        tblptrh 000FF7                        tblptrl 000FF6  
                      tblptru 000FF8                  ?_DaSaveScore 0046             __end_of_CantaData 1426  
            ___lbdiv@dividend 004C                ??_readUserData 004B               ___lbmod@divisor 004B  
                  __accesstop 0080       __end_of__initialization 1336             __end_of_KeSetMode 1560  
             ___lbmod@counter 004D             __end_of_LcPutChar 12F4          DaSaveScore@userScore 004B  
               ___rparam_used 000001                 __end_of_ERROR 1F54                 __end_of_TABLE 1F4B  
                 ?_TiGetTimer 0046             __end_of_JoSetMode 16D8                __pcstackCOMRAM 0046  
         __end_of_WaitForBusy 1406                   ?_SiReadByte 0046         __end_of_joystickMotor 0E40  
                 ?_SiSendChar 0046                    __end_ofPL2 09EA                    __end_ofPL4 09FA  
                  __end_ofPL6 0A0A                    __end_ofPL8 10E6              ___lbdiv@quotient 004E  
                   ?_RSI_High 0046                     ?_SMSMotor 0046             __end_of_TiGetTics 1542  
              _SiRecievedByte 16F8                   _TiInitTimer 1472                   _KeypadMotor 0BA6  
                   ?_LcGotoXY 0053                    __pbssBANK0 0080                    __pbssBANK1 0100  
                 _TiResetTics 1626            _state@EEPROM$F1505 002A                       ?_LcInit 0057  
               _CantaPartAlta 123A                       ?_Espera 0052                   __TiRSITimer 1344  
      __end_of_SiRecievedByte 16FE                    ??_RSI_High 0047                    ??_SMSMotor 0052  
                  _getPresses 1708          __end_of_LOGREGSCREEN 1F3F                       LcInit@i 0059  
                     _LCDcolm 0033                  ??_DaFindUser 006D                    ??_LcGotoXY 0054  
                     _RESULTS 1EF7                  ?_LcCursorOff 0046                  _getFullValue 1088  
           __end_of_dataMotor 0802                       _LcClear 165A                       _CantaIR 160A  
                   ?_initData 0046                     ?_initMenu 0046                     ?_initTime 0046  
                ??_DaSaveUser 005D                   _WaitForBusy 13C8                       _JoMoved 1710  
              ?_CantaPartAlta 0046                       _Columns 0039             __end_of_getColumn 16C8  
        __end_of_initJoystick 15AC                       __Hparam 0000                       __Lparam 0000  
                  _initKeypad 15EC            __end_of_DaFindUser 158A                       ___lbdiv 143E  
                     ___awmod 116C                       ___lbmod 14F6                  _MAINMENUSIZE 1F54  
                  _currentKey 0041             __end_of_isPressed 165A                  ?_JoDirection 0046  
                     __pcinit 12F4               ?_SiRecievedByte 0046                       __ramtop 0200  
        __end_of_readUserData 0FCC                       __ptext0 1388                       __ptext1 0A8A  
                     __ptext2 0036                       __ptext3 1704                       __ptext4 16A0  
                     __ptext5 1642                       __ptext6 1708                       __ptext7 1694  
                     __ptext8 0886                       __ptext9 116C                     _T0CONbits 000FD5  
                   CantaIR@IR 004D                       _initSIO 1670                       _counter 0045  
              displayMenu@row 005C             __end_of_menuMotor 0542                       _joyMode 002B  
          __end_of_DaSaveUser 15CC              ___awmod@dividend 004B                       _pressed 003F  
             WaitForBusy@Busy 0052                       _userNum 0029          end_of_initialization 1336  
                   _LOGINMENU 1F0D                    ??_initData 004D                    ??_initMenu 004C  
                  ??_initTime 004C                 __Lmediumconst 1EF6               TiGetTics@Handle 004F  
                ??_LcCursorOn 0053             __end_of_timeMotor 0BA6                    _numPresses 003E  
             TiGetTics@actual 0050                     _RCSTAbits 000FAB                       postdec2 000FDD  
                     postinc0 000FEE                       postinc1 000FE6                       postinc2 000FDE  
                   _DaGetIdle 16D8             __end_of_stopTimer 1708                     _PORTBbits 000F81  
                   _PORTDbits 000F83                   ?_getPresses 0046             _KeGetGenericValue 149E  
          __end_of_LcCursorOn 16B4              ___lbmod@dividend 004C            ?_KeGetGenericValue 0046  
                   _TRISAbits 000F92                     _TRISBbits 000F93                     _TRISCbits 000F94  
                   _TRISDbits 000F95           getFullValue@generic 004F                    _startTimer 16A0  
         ??_KeGetGenericValue 004B               ??_CantaPartAlta 004B         __end_of_SiIsAvailable 1704  
                 ___lbmod@rem 004E                     _CantaData 1406                     _TXSTAbits 000FAC  
                ??_TiGetTimer 004B                __end_of_LcInit 0D76                     _KeSetMode 1542  
                   _LcPutChar 12A0                  ??_SiReadByte 004B                __end_of_Espera 15EC  
                 ?_initKeypad 0046                _KeGetCharValue 16C8                 ??_displayMenu 005D  
                ??_SiSendChar 004B    __end_of_EscriuPrimeraOrdre 1070                    ?_DaGetIdle 0046  
                 _BAUDCONbits 000FB8                     _JoSetMode 16D0     __end_of_KeGetGenericValue 14CA  
               __pidataCOMRAM 171C              _timer@time$F1561 0024                     _ColumnAct 0037  
                ?_TiInitTimer 0046                  ?_KeypadMotor 0046                   __end_ofPL10 0A16  
                 __end_ofPL20 0A40                   __end_ofPL12 081C                   __end_ofPL30 084A  
                 __end_ofPL22 0D82                   __end_ofPL14 0830                   __end_ofPL40 086C  
                 __end_ofPL32 0856                   __end_ofPL24 0A54                   __end_ofPL16 0A24  
                 __end_ofPL50 107E                   __end_ofPL42 0A6E                   __end_ofPL34 0A5C  
                 __end_ofPL26 0FE8                   __end_ofPL18 0A32                   __end_ofPL60 0560  
                 __end_ofPL52 087A                   __end_ofPL44 0A80                   __end_ofPL36 10FE  
                 __end_ofPL28 14F6                   __end_ofPL70 143E                   __end_ofPL62 1002  
                 __end_ofPL54 0FF6                   __end_ofPL46 1642                   __end_ofPL38 0862  
                 __end_ofPL80 12A0                   __end_ofPL72 123A                   __end_ofPL64 0886  
                 __end_ofPL56 054C                   __end_ofPL48 1434                   __end_ofPL82 0CBC  
                 __end_ofPL74 100C                   __end_ofPL66 056C                   __end_ofPL58 0556  
                 __end_ofPL84 1566                   __end_ofPL76 1088                   __end_ofPL68 0574  
                 __end_ofPL86 0E46                   __end_ofPL78 0A8A           start_initialization 12F4  
                   _TiGetTics 151C            __end_of_TiGetTimer 14E8            __end_of_SiReadByte 1710  
         displayMenu@menuMode 0061                  ?_TiResetTics 0046                    ?_CantaData 0046  
          __end_of_SiSendChar 16E8                      ??_LcInit 0058                  _LOGREGSCREEN 1F33  
      __end_of_KeGetCharValue 16D0                  ?__TiRSITimer 0046                      ??_Espera 0056  
                  ?_KeSetMode 0046                    ?_LcPutChar 0046                    ?_JoSetMode 0046  
         __end_of_displayMenu 09CC                  _initJoystick 158A                   __pbssCOMRAM 0001  
                  ?_TiGetTics 004B              SiSendChar@myByte 004B                   ?_startTimer 0046  
__end_of_displayTimeRemaining 16A0                      ?_LcClear 0046                      ?_CantaIR 0046  
              _CantaPartBaixa 11D4                  ?_WaitForBusy 0046                  _readUserData 0F88  
                    ?_JoMoved 0046                     _dataMotor 0574               ?_KeGetCharValue 0046  
            ??_SiRecievedByte 004B                     __pintcode 0008                     _getColumn 16BE  
               __pmediumconst 1EF6                      ?___lbdiv 004B                      ?___awmod 004B  
                    ?___lbmod 004B                     _available 003D               CantaPartBaixa@c 004C  
                 ??_DaGetIdle 004B                      ?_initSIO 0046                     _isPressed 1642  
                   _menuMotor 0036        __end_of_CantaPartBaixa 1230                      _MAINMENU 1F58  
                 ??_CantaData 004D                      _LATBbits 000F8A                      _LATCbits 000F8B  
                    _LATDbits 000F8C                    ?_dataMotor 0046                     _saveScore 0025  
               ??_DaGetStatus 004B                   ??_KeSetMode 004C                      _PIR1bits 000F9E  
                 ??_LcPutChar 005B                     _timeMotor 0A8A                      _RCONbits 000FD0  
                  ?_getColumn 0046                     _timer_SMS 0042                   _displayMenu 0886  
                    _SMSTABLE 1FC8                 _joystickMotor 0D82                   ??_JoSetMode 004B  
                   _topScores 0013                      _RSI_High 0008                    _ADCON0bits 000FC2  
                ??_getPresses 004B                      _SMSMotor 0E46                    ?_isPressed 0046  
                    Espera@ms 0054                     _stopTimer 1704                      _LcGotoXY 0EF4  
                 ??_TiGetTics 004D                 ??_DaSaveScore 004B                   LcGotoXY@Row 0053  
                  ?_menuMotor 0046                   _INTCON2bits 000FF1               ?_CantaPartBaixa 0046  
              menuMotor@state 0071                    _EECON1bits 000FA6            __end_of_getPresses 170C  
                    __Hrparam 0000                      __Lrparam 0000                  ??_initKeypad 004C  
                  ?_timeMotor 0046                 JoSetMode@mode 004B                ?_joystickMotor 0046  
         __end_of_DaGetStatus 171C          _displayTimeRemaining 1694                    ?_stopTimer 0046  
                    __ptext10 12A0                      __ptext11 1406            _EscriuPrimeraOrdre 100C  
                    __ptext20 16C8                      __ptext12 14F6                      __ptext21 1088  
                    __ptext13 143E                      __ptext30 0D82                      __ptext22 16D0  
                    __ptext14 16F8                      __ptext31 16E0                      __ptext23 1710  
                    __ptext15 170C                      __ptext40 0574                      __ptext32 16FE  
                    __ptext24 1714                      __ptext16 16AA                      __ptext41 0EF4  
                    __ptext33 16E8                      __ptext25 15AC                      __ptext17 16B4  
                    __ptext50 100C                      __ptext42 1472                      __ptext34 1670  
                    __ptext26 1684                      __ptext18 165A                      __ptext51 160A  
                    __ptext43 0E46                      __ptext35 16F0                      __ptext27 1718  
                    __ptext19 1542                      __ptext52 11D4                      __ptext44 149E  
                    __ptext36 15EC                      __ptext28 16D8                      __ptext53 123A  
                    __ptext45 16BE                      __ptext37 158A                      __ptext29 1566  
                    __ptext54 0BA6                      __ptext46 0CBC                      __ptext38 10FE  
                    __ptext55 1626                      __ptext47 13C8                      __ptext39 0F88  
                    __ptext56 151C                      __ptext48 14CA                      __ptext49 15CC  
                    __ptext58 1344                CantaPartAlta@c 004C               _lastUserPointer 0026  
          __end_of_initKeypad 160A                      _s_Timers 0080                      _initData 10FE  
                    _initMenu 16F0                      _initTime 16E8           ?_EscriuPrimeraOrdre 0046  
       __end_of_CantaPartAlta 1296           __end_of_DaSaveScore 1694                   ??_dataMotor 005B  
               CantaData@Data 004D                   ??_getColumn 004B                      isa$xinst 000000  
                    _previous 0040                      int$flags 0072                      _position 0028  
                    _stateSMS 003B                      _stateJoy 002C         ?_displayTimeRemaining 0046  
        ??_EscriuPrimeraOrdre 004B                    LcInit@rows 0058                   ??_isPressed 004B  
                  _INTCONbits 000FF2                   ??_menuMotor 006D                 ??_LcCursorOff 0053  
               ?_getFullValue 0046                  ??_startTimer 004C                      intlevel2 0000  
            ??_KeGetCharValue 0050                  _timerBounces 0043                    LcPutChar@c 005B  
                 _DaGetStatus 1718               ??_joystickMotor 004C                   ??_timeMotor 005C  
            _state@time$F1562 0023                 ??_JoDirection 004B            __end_of_startTimer 16AA  
                 ??_stopTimer 004B                    _DaFindUser 1566             DaFindUser@logUser 005B  
              ??_getFullValue 004B                   _DaSaveScore 1684                 _SiIsAvailable 16FE  
                  _DaSaveUser 15AC           __end_of_LcCursorOff 16BE             DaSaveUser@regUser 004B  
