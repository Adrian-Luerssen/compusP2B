

Microchip MPLAB XC8 Assembler V2.36 build 20220127204148 
                                                                                               Tue Jun 28 20:05:24 2022

Microchip MPLAB XC8 C Compiler v2.36 (Pro license) build 20220127204148 Og9s 
     1                           	processor	18F4321
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	plic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    11                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    14                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    15                           	psect	text0,global,reloc=2,class=CODE,delta=1
    16                           	psect	text1,global,reloc=2,class=CODE,delta=1
    17                           	psect	text2,global,reloc=2,class=CODE,delta=1
    18                           	psect	text3,global,reloc=2,class=CODE,delta=1
    19                           	psect	text4,global,reloc=2,class=CODE,delta=1
    20                           	psect	text5,global,reloc=2,class=CODE,delta=1
    21                           	psect	text6,global,reloc=2,class=CODE,delta=1
    22                           	psect	text7,global,reloc=2,class=CODE,delta=1
    23                           	psect	text8,global,reloc=2,class=CODE,delta=1
    24                           	psect	text9,global,reloc=2,class=CODE,delta=1
    25                           	psect	text10,global,reloc=2,class=CODE,delta=1
    26                           	psect	text11,global,reloc=2,class=CODE,delta=1
    27                           	psect	text12,global,reloc=2,class=CODE,delta=1
    28                           	psect	text13,global,reloc=2,class=CODE,delta=1
    29                           	psect	text14,global,reloc=2,class=CODE,delta=1
    30                           	psect	text15,global,reloc=2,class=CODE,delta=1
    31                           	psect	text16,global,reloc=2,class=CODE,delta=1
    32                           	psect	text17,global,reloc=2,class=CODE,delta=1,group=1
    33                           	psect	text18,global,reloc=2,class=CODE,delta=1
    34                           	psect	text19,global,reloc=2,class=CODE,delta=1
    35                           	psect	text20,global,reloc=2,class=CODE,delta=1
    36                           	psect	text21,global,reloc=2,class=CODE,delta=1
    37                           	psect	text22,global,reloc=2,class=CODE,delta=1
    38                           	psect	text23,global,reloc=2,class=CODE,delta=1
    39                           	psect	text24,global,reloc=2,class=CODE,delta=1
    40                           	psect	text25,global,reloc=2,class=CODE,delta=1
    41                           	psect	text26,global,reloc=2,class=CODE,delta=1
    42                           	psect	text27,global,reloc=2,class=CODE,delta=1
    43                           	psect	text28,global,reloc=2,class=CODE,delta=1
    44                           	psect	text29,global,reloc=2,class=CODE,delta=1
    45                           	psect	text30,global,reloc=2,class=CODE,delta=1
    46                           	psect	text31,global,reloc=2,class=CODE,delta=1
    47                           	psect	text32,global,reloc=2,class=CODE,delta=1
    48                           	psect	text33,global,reloc=2,class=CODE,delta=1
    49                           	psect	text34,global,reloc=2,class=CODE,delta=1
    50                           	psect	text35,global,reloc=2,class=CODE,delta=1
    51                           	psect	text36,global,reloc=2,class=CODE,delta=1
    52                           	psect	text37,global,reloc=2,class=CODE,delta=1
    53                           	psect	text38,global,reloc=2,class=CODE,delta=1
    54                           	psect	text39,global,reloc=2,class=CODE,delta=1
    55                           	psect	text40,global,reloc=2,class=CODE,delta=1
    56                           	psect	text41,global,reloc=2,class=CODE,delta=1
    57                           	psect	text42,global,reloc=2,class=CODE,delta=1
    58                           	psect	text43,global,reloc=2,class=CODE,delta=1
    59                           	psect	text44,global,reloc=2,class=CODE,delta=1
    60                           	psect	text45,global,reloc=2,class=CODE,delta=1
    61                           	psect	text46,global,reloc=2,class=CODE,delta=1
    62                           	psect	text47,global,reloc=2,class=CODE,delta=1
    63                           	psect	text48,global,reloc=2,class=CODE,delta=1
    64                           	psect	text49,global,reloc=2,class=CODE,delta=1
    65                           	psect	text50,global,reloc=2,class=CODE,delta=1
    66                           	psect	text51,global,reloc=2,class=CODE,delta=1
    67                           	psect	text52,global,reloc=2,class=CODE,delta=1
    68                           	psect	text53,global,reloc=2,class=CODE,delta=1
    69                           	psect	text54,global,reloc=2,class=CODE,delta=1
    70                           	psect	text55,global,reloc=2,class=CODE,delta=1
    71                           	psect	text56,global,reloc=2,class=CODE,delta=1
    72                           	psect	text57,global,reloc=2,class=CODE,delta=1
    73                           	psect	text58,global,reloc=2,class=CODE,delta=1,group=1
    74                           	psect	text59,global,reloc=2,class=CODE,delta=1,group=1
    75                           	psect	text60,global,reloc=2,class=CODE,delta=1
    76                           	psect	text61,global,reloc=2,class=CODE,delta=1
    77                           	psect	text62,global,reloc=2,class=CODE,delta=1
    78                           	psect	text63,global,reloc=2,class=CODE,delta=1
    79                           	psect	text64,global,reloc=2,class=CODE,delta=1
    80                           	psect	text65,global,reloc=2,class=CODE,delta=1
    81                           	psect	text66,global,reloc=2,class=CODE,delta=1
    82                           	psect	text67,global,reloc=2,class=CODE,delta=1
    83                           	psect	text68,global,reloc=2,class=CODE,delta=1
    84                           	psect	text69,global,reloc=2,class=CODE,delta=1
    85                           	psect	text70,global,reloc=2,class=CODE,delta=1
    86                           	psect	text71,global,reloc=2,class=CODE,delta=1
    87                           	psect	text72,global,reloc=2,class=CODE,delta=1
    88                           	psect	text73,global,reloc=2,class=CODE,delta=1
    89                           	psect	text74,global,reloc=2,class=CODE,delta=1
    90                           	psect	text75,global,reloc=2,class=CODE,delta=1
    91                           	psect	text76,global,reloc=2,class=CODE,delta=1
    92                           	psect	text77,global,reloc=2,class=CODE,delta=1
    93                           	psect	text78,global,reloc=2,class=CODE,delta=1
    94                           	psect	text79,global,reloc=2,class=CODE,delta=1
    95                           	psect	text80,global,reloc=2,class=CODE,delta=1
    96                           	psect	text81,global,reloc=2,class=CODE,delta=1
    97                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    98                           	psect	text83,global,reloc=2,class=CODE,delta=1
    99                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
   100                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   101                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   102                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
   103                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
   104                           	psect	pa_nodes0,global,class=CODE,delta=1
   105  0000                     
   106                           ; Version 2.36
   107                           ; Generated 28/01/2022 GMT
   108                           ; 
   109                           ; Copyright Â© 2022, Microchip Technology Inc. and its subsidiaries ("Microchip")
   110                           ; All rights reserved.
   111                           ; 
   112                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   113                           ; 
   114                           ; Redistribution and use in source and binary forms, with or without modification, are
   115                           ; permitted provided that the following conditions are met:
   116                           ; 
   117                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   118                           ;        conditions and the following disclaimer.
   119                           ; 
   120                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   121                           ;        of conditions and the following disclaimer in the documentation and/or other
   122                           ;        materials provided with the distribution. Publication is not required when
   123                           ;        this file is used in an embedded application.
   124                           ; 
   125                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   126                           ;        software without specific prior written permission.
   127                           ; 
   128                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   129                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   130                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   131                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   132                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   133                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   134                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   135                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   136                           ; 
   137                           ; 
   138                           ; Code-generator required, PIC18F4321 Definitions
   139                           ; 
   140                           ; SFR Addresses
   141  0000                     
   142                           	psect	idataCOMRAM
   143  000114                     __pidataCOMRAM:
   144                           	callstack 0
   145                           
   146                           ;initializer for _MAINMENUSIZE
   147  000114  0E                 	db	14
   148  000115  0E                 	db	14
   149  000116  1C                 	db	28
   150  000117  09                 	db	9
   151  000118  0C                 	db	12
   152                           
   153                           ;initializer for _minute
   154  000119  1E                 	db	30
   155                           
   156                           ;initializer for _minutes
   157  00011A  1E                 	db	30
   158                           
   159                           ;initializer for menuMotor@state
   160  00011B  01                 	db	1
   161                           
   162                           	psect	idataBANK0
   163  00186E                     __pidataBANK0:
   164                           	callstack 0
   165                           
   166                           ;initializer for _RESULTS
   167  00186E  54                 	db	84
   168  00186F  49                 	db	73
   169  001870  4D                 	db	77
   170  001871  45                 	db	69
   171  001872  20                 	db	32
   172  001873  4C                 	db	76
   173  001874  45                 	db	69
   174  001875  46                 	db	70
   175  001876  54                 	db	84
   176  001877  3A                 	db	58
   177  001878  00                 	db	0
   178  001879  53                 	db	83
   179  00187A  43                 	db	67
   180  00187B  4F                 	db	79
   181  00187C  52                 	db	82
   182  00187D  45                 	db	69
   183  00187E  3A                 	db	58
   184  00187F  00                 	db	0
   185  001880  00                 	db	0
   186  001881  00                 	db	0
   187  001882  00                 	db	0
   188  001883  00                 	db	0
   189                           
   190                           ;initializer for _LOGOUTMESSAGE
   191  001884  42                 	db	66
   192  001885  59                 	db	89
   193  001886  45                 	db	69
   194  001887  20                 	db	32
   195  001888  42                 	db	66
   196  001889  59                 	db	89
   197  00188A  45                 	db	69
   198  00188B  20                 	db	32
   199  00188C  00                 	db	0
   200                           
   201                           ;initializer for _ERROR
   202  00188D  45                 	db	69
   203  00188E  52                 	db	82
   204  00188F  52                 	db	82
   205  001890  4F                 	db	79
   206  001891  52                 	db	82
   207  001892  53                 	db	83
   208  001893  3A                 	db	58
   209  001894  20                 	db	32
   210  001895  00                 	db	0
   211                           
   212                           ;initializer for _LOGINMENU
   213  001896  31                 	db	49
   214  001897  2E                 	db	46
   215  001898  4C                 	db	76
   216  001899  4F                 	db	79
   217  00189A  47                 	db	71
   218  00189B  49                 	db	73
   219  00189C  4E                 	db	78
   220  00189D  00                 	db	0
   221  00189E  00                 	db	0
   222  00189F  00                 	db	0
   223  0018A0  00                 	db	0
   224  0018A1  32                 	db	50
   225  0018A2  2E                 	db	46
   226  0018A3  52                 	db	82
   227  0018A4  45                 	db	69
   228  0018A5  47                 	db	71
   229  0018A6  49                 	db	73
   230  0018A7  53                 	db	83
   231  0018A8  54                 	db	84
   232  0018A9  45                 	db	69
   233  0018AA  52                 	db	82
   234  0018AB  00                 	db	0
   235                           
   236                           ;initializer for _TIME
   237  0018AC  54                 	db	84
   238  0018AD  49                 	db	73
   239  0018AE  4D                 	db	77
   240  0018AF  45                 	db	69
   241  0018B0  20                 	db	32
   242  0018B1  52                 	db	82
   243  0018B2  45                 	db	69
   244  0018B3  4D                 	db	77
   245  0018B4  41                 	db	65
   246  0018B5  49                 	db	73
   247  0018B6  4E                 	db	78
   248  0018B7  49                 	db	73
   249  0018B8  4E                 	db	78
   250  0018B9  47                 	db	71
   251  0018BA  3A                 	db	58
   252  0018BB  20                 	db	32
   253                           
   254                           ;initializer for _sysTime
   255  0018BC  43                 	db	67
   256  0018BD  55                 	db	85
   257  0018BE  52                 	db	82
   258  0018BF  52                 	db	82
   259  0018C0  45                 	db	69
   260  0018C1  4E                 	db	78
   261  0018C2  54                 	db	84
   262  0018C3  20                 	db	32
   263  0018C4  54                 	db	84
   264  0018C5  49                 	db	73
   265  0018C6  4D                 	db	77
   266  0018C7  45                 	db	69
   267  0018C8  3A                 	db	58
   268  0018C9  00                 	db	0
   269                           
   270                           ;initializer for _modifyTimeString
   271  0018CA  4D                 	db	77
   272  0018CB  4F                 	db	79
   273  0018CC  44                 	db	68
   274  0018CD  49                 	db	73
   275  0018CE  46                 	db	70
   276  0018CF  59                 	db	89
   277  0018D0  20                 	db	32
   278  0018D1  54                 	db	84
   279  0018D2  49                 	db	73
   280  0018D3  4D                 	db	77
   281  0018D4  45                 	db	69
   282  0018D5  3A                 	db	58
   283  0018D6  00                 	db	0
   284                           
   285                           ;initializer for _LOGREGSCREEN
   286  0018D7  55                 	db	85
   287  0018D8  53                 	db	83
   288  0018D9  45                 	db	69
   289  0018DA  52                 	db	82
   290  0018DB  3A                 	db	58
   291  0018DC  00                 	db	0
   292  0018DD  50                 	db	80
   293  0018DE  53                 	db	83
   294  0018DF  57                 	db	87
   295  0018E0  44                 	db	68
   296  0018E1  3A                 	db	58
   297  0018E2  00                 	db	0
   298                           
   299                           	psect	smallconst
   300  000200                     __psmallconst:
   301                           	callstack 0
   302  000200  00                 	db	0
   303  000201                     _TABLE:
   304                           	callstack 0
   305  000201  31                 	db	49
   306  000202  32                 	db	50
   307  000203  33                 	db	51
   308  000204  34                 	db	52
   309  000205  35                 	db	53
   310  000206  36                 	db	54
   311  000207  37                 	db	55
   312  000208  38                 	db	56
   313  000209  39                 	db	57
   314  00020A  2A                 	db	42
   315  00020B  30                 	db	48
   316  00020C  23                 	db	35
   317  00020D                     __end_of_TABLE:
   318                           	callstack 0
   319  00020D                     _MAINMENU:
   320                           	callstack 0
   321  00020D  31                 	db	49
   322  00020E  2E                 	db	46
   323  00020F  50                 	db	80
   324  000210  4C                 	db	76
   325  000211  41                 	db	65
   326  000212  59                 	db	89
   327  000213  20                 	db	32
   328  000214  41                 	db	65
   329  000215  20                 	db	32
   330  000216  47                 	db	71
   331  000217  41                 	db	65
   332  000218  4D                 	db	77
   333  000219  45                 	db	69
   334  00021A  00                 	db	0
   335  00021B  00                 	db	0
   336  00021C  00                 	db	0
   337  00021D  00                 	db	0
   338  00021E  00                 	db	0
   339  00021F  00                 	db	0
   340  000220  00                 	db	0
   341  000221  00                 	db	0
   342  000222  00                 	db	0
   343  000223  00                 	db	0
   344  000224  00                 	db	0
   345  000225  00                 	db	0
   346  000226  00                 	db	0
   347  000227  00                 	db	0
   348  000228  00                 	db	0
   349  000229  32                 	db	50
   350  00022A  2E                 	db	46
   351  00022B  4D                 	db	77
   352  00022C  4F                 	db	79
   353  00022D  44                 	db	68
   354  00022E  49                 	db	73
   355  00022F  46                 	db	70
   356  000230  59                 	db	89
   357  000231  20                 	db	32
   358  000232  54                 	db	84
   359  000233  49                 	db	73
   360  000234  4D                 	db	77
   361  000235  45                 	db	69
   362  000236  00                 	db	0
   363  000237  00                 	db	0
   364  000238  00                 	db	0
   365  000239  00                 	db	0
   366  00023A  00                 	db	0
   367  00023B  00                 	db	0
   368  00023C  00                 	db	0
   369  00023D  00                 	db	0
   370  00023E  00                 	db	0
   371  00023F  00                 	db	0
   372  000240  00                 	db	0
   373  000241  00                 	db	0
   374  000242  00                 	db	0
   375  000243  00                 	db	0
   376  000244  00                 	db	0
   377  000245  33                 	db	51
   378  000246  2E                 	db	46
   379  000247  53                 	db	83
   380  000248  48                 	db	72
   381  000249  4F                 	db	79
   382  00024A  57                 	db	87
   383  00024B  20                 	db	32
   384  00024C  47                 	db	71
   385  00024D  45                 	db	69
   386  00024E  4E                 	db	78
   387  00024F  45                 	db	69
   388  000250  52                 	db	82
   389  000251  41                 	db	65
   390  000252  4C                 	db	76
   391  000253  20                 	db	32
   392  000254  54                 	db	84
   393  000255  4F                 	db	79
   394  000256  50                 	db	80
   395  000257  20                 	db	32
   396  000258  35                 	db	53
   397  000259  20                 	db	32
   398  00025A  53                 	db	83
   399  00025B  43                 	db	67
   400  00025C  4F                 	db	79
   401  00025D  52                 	db	82
   402  00025E  45                 	db	69
   403  00025F  53                 	db	83
   404  000260  20                 	db	32
   405  000261  34                 	db	52
   406  000262  2E                 	db	46
   407  000263  4C                 	db	76
   408  000264  4F                 	db	79
   409  000265  47                 	db	71
   410  000266  4F                 	db	79
   411  000267  55                 	db	85
   412  000268  54                 	db	84
   413  000269  00                 	db	0
   414  00026A  00                 	db	0
   415  00026B  00                 	db	0
   416  00026C  00                 	db	0
   417  00026D  00                 	db	0
   418  00026E  00                 	db	0
   419  00026F  00                 	db	0
   420  000270  00                 	db	0
   421  000271  00                 	db	0
   422  000272  00                 	db	0
   423  000273  00                 	db	0
   424  000274  00                 	db	0
   425  000275  00                 	db	0
   426  000276  00                 	db	0
   427  000277  00                 	db	0
   428  000278  00                 	db	0
   429  000279  00                 	db	0
   430  00027A  00                 	db	0
   431  00027B  00                 	db	0
   432  00027C  00                 	db	0
   433  00027D  35                 	db	53
   434  00027E  2E                 	db	46
   435  00027F  53                 	db	83
   436  000280  48                 	db	72
   437  000281  4F                 	db	79
   438  000282  57                 	db	87
   439  000283  20                 	db	32
   440  000284  54                 	db	84
   441  000285  49                 	db	73
   442  000286  4D                 	db	77
   443  000287  45                 	db	69
   444  000288  00                 	db	0
   445  000289  00                 	db	0
   446  00028A  00                 	db	0
   447  00028B  00                 	db	0
   448  00028C  00                 	db	0
   449  00028D  00                 	db	0
   450  00028E  00                 	db	0
   451  00028F  00                 	db	0
   452  000290  00                 	db	0
   453  000291  00                 	db	0
   454  000292  00                 	db	0
   455  000293  00                 	db	0
   456  000294  00                 	db	0
   457  000295  00                 	db	0
   458  000296  00                 	db	0
   459  000297  00                 	db	0
   460  000298  00                 	db	0
   461  000299                     __end_of_MAINMENU:
   462                           	callstack 0
   463  000299                     _SMSTABLE:
   464                           	callstack 0
   465  000299  31                 	db	49
   466  00029A  00                 	db	0
   467  00029B  00                 	db	0
   468  00029C  00                 	db	0
   469  00029D  00                 	db	0
   470  00029E  00                 	db	0
   471  00029F  41                 	db	65
   472  0002A0  42                 	db	66
   473  0002A1  43                 	db	67
   474  0002A2  32                 	db	50
   475  0002A3  00                 	db	0
   476  0002A4  00                 	db	0
   477  0002A5  44                 	db	68
   478  0002A6  45                 	db	69
   479  0002A7  46                 	db	70
   480  0002A8  33                 	db	51
   481  0002A9  00                 	db	0
   482  0002AA  00                 	db	0
   483  0002AB  47                 	db	71
   484  0002AC  48                 	db	72
   485  0002AD  49                 	db	73
   486  0002AE  34                 	db	52
   487  0002AF  00                 	db	0
   488  0002B0  00                 	db	0
   489  0002B1  4A                 	db	74
   490  0002B2  4B                 	db	75
   491  0002B3  4C                 	db	76
   492  0002B4  35                 	db	53
   493  0002B5  00                 	db	0
   494  0002B6  00                 	db	0
   495  0002B7  4D                 	db	77
   496  0002B8  4E                 	db	78
   497  0002B9  4F                 	db	79
   498  0002BA  36                 	db	54
   499  0002BB  00                 	db	0
   500  0002BC  00                 	db	0
   501  0002BD  50                 	db	80
   502  0002BE  51                 	db	81
   503  0002BF  52                 	db	82
   504  0002C0  53                 	db	83
   505  0002C1  37                 	db	55
   506  0002C2  00                 	db	0
   507  0002C3  54                 	db	84
   508  0002C4  55                 	db	85
   509  0002C5  56                 	db	86
   510  0002C6  38                 	db	56
   511  0002C7  00                 	db	0
   512  0002C8  00                 	db	0
   513  0002C9  57                 	db	87
   514  0002CA  58                 	db	88
   515  0002CB  59                 	db	89
   516  0002CC  5A                 	db	90
   517  0002CD  39                 	db	57
   518  0002CE  00                 	db	0
   519  0002CF                     __end_of_SMSTABLE:
   520                           	callstack 0
   521  0000                     _EECON2	set	4007
   522  0000                     _EEDATA	set	4008
   523  0000                     _EEADR	set	4009
   524  0000                     _PORTCbits	set	3970
   525  0000                     _RCREG	set	4014
   526  0000                     _TXREG	set	4013
   527  0000                     _SPBRG	set	4015
   528  0000                     _BAUDCONbits	set	4024
   529  0000                     _LATCbits	set	3979
   530  0000                     _TRISCbits	set	3988
   531  0000                     _PORTDbits	set	3971
   532  0000                     _LATDbits	set	3980
   533  0000                     _TRISDbits	set	3989
   534  0000                     _LATAbits	set	3977
   535  0000                     _LATBbits	set	3978
   536  0000                     _TMR0L	set	4054
   537  0000                     _TMR0H	set	4055
   538  0000                     _ADCON0bits	set	4034
   539  0000                     _T0CONbits	set	4053
   540  0000                     _PORTBbits	set	3969
   541  0000                     _TRISAbits	set	3986
   542  0000                     _TRISBbits	set	3987
   543  0000                     _RCONbits	set	4048
   544  0000                     _T0CON	set	4053
   545  0000                     _INTCONbits	set	4082
   546  0000                     _INTCON2bits	set	4081
   547  0000                     _PIR1bits	set	3998
   548  0000                     _RCSTAbits	set	4011
   549  0000                     _TXSTAbits	set	4012
   550  0000                     _ADCON2	set	4032
   551  0000                     _ADCON1	set	4033
   552  0000                     _ADCON0	set	4034
   553  0000                     _ADRESH	set	4036
   554  0000                     _EECON1bits	set	4006
   555  0002CF  00                 	db	0	; dummy byte at the end
   556  0000                     
   557                           ; #config settings
   558                           
   559                           	psect	cinit
   560  00194C                     __pcinit:
   561                           	callstack 0
   562  00194C                     start_initialization:
   563                           	callstack 0
   564  00194C                     __initialization:
   565                           	callstack 0
   566                           
   567                           ; Initialize objects allocated to BANK0 (117 bytes)
   568                           ; load TBLPTR registers with __pidataBANK0
   569  00194C  0E6E               	movlw	low __pidataBANK0
   570  00194E  6EF6               	movwf	tblptrl,c
   571  001950  0E18               	movlw	high __pidataBANK0
   572  001952  6EF7               	movwf	tblptrh,c
   573  001954  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   574  001956  6EF8               	movwf	tblptru,c
   575  001958  EE00  F080         	lfsr	0,__pdataBANK0
   576  00195C  EE10 F075          	lfsr	1,117
   577  001960                     copy_data0:
   578  001960  0009               	tblrd		*+
   579  001962  CFF5 FFEE          	movff	tablat,postinc0
   580  001966  50E5               	movf	postdec1,w,c
   581  001968  50E1               	movf	fsr1l,w,c
   582  00196A  E1FA               	bnz	copy_data0
   583                           
   584                           ; Initialize objects allocated to COMRAM (8 bytes)
   585                           ; load TBLPTR registers with __pidataCOMRAM
   586  00196C  0E14               	movlw	low __pidataCOMRAM
   587  00196E  6EF6               	movwf	tblptrl,c
   588  001970  0E01               	movlw	high __pidataCOMRAM
   589  001972  6EF7               	movwf	tblptrh,c
   590  001974  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   591  001976  6EF8               	movwf	tblptru,c
   592  001978  EE00  F072         	lfsr	0,__pdataCOMRAM
   593  00197C  EE10 F008          	lfsr	1,8
   594  001980                     copy_data1:
   595  001980  0009               	tblrd		*+
   596  001982  CFF5 FFEE          	movff	tablat,postinc0
   597  001986  50E5               	movf	postdec1,w,c
   598  001988  50E1               	movf	fsr1l,w,c
   599  00198A  E1FA               	bnz	copy_data1
   600                           
   601                           ; Clear objects allocated to BANK1 (219 bytes)
   602  00198C  EE01  F000         	lfsr	0,__pbssBANK1
   603  001990  0EDB               	movlw	219
   604  001992                     clear_0:
   605  001992  6AEE               	clrf	postinc0,c
   606  001994  06E8               	decf	wreg,f,c
   607  001996  E1FD               	bnz	clear_0
   608                           
   609                           ; Clear objects allocated to COMRAM (88 bytes)
   610  001998  EE00  F001         	lfsr	0,__pbssCOMRAM
   611  00199C  0E58               	movlw	88
   612  00199E                     clear_1:
   613  00199E  6AEE               	clrf	postinc0,c
   614  0019A0  06E8               	decf	wreg,f,c
   615  0019A2  E1FD               	bnz	clear_1
   616  0019A4                     end_of_initialization:
   617                           	callstack 0
   618  0019A4                     __end_of__initialization:
   619                           	callstack 0
   620  0019A4  907A               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   621  0019A6  927A               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   622  0019A8  0E00               	movlw	low (__Lmediumconst shr (0+16))
   623  0019AA  6EF8               	movwf	tblptru,c
   624  0019AC  0100               	movlb	0
   625  0019AE  EF9D  F00D         	goto	_main	;jump to C main() function
   626                           
   627                           	psect	bssCOMRAM
   628  000001                     __pbssCOMRAM:
   629                           	callstack 0
   630  000001                     _topScores:
   631                           	callstack 0
   632  000001                     	ds	10
   633  00000B                     _mUser@EEPROM$F1764:
   634                           	callstack 0
   635  00000B                     	ds	2
   636  00000D                     _Timer:
   637                           	callstack 0
   638  00000D                     	ds	2
   639  00000F                     _h_Tics:
   640                           	callstack 0
   641  00000F                     	ds	2
   642  000011                     _val@time$F1847:
   643                           	callstack 0
   644  000011                     	ds	1
   645  000012                     _game:
   646                           	callstack 0
   647  000012                     	ds	1
   648  000013                     _state@time$F1845:
   649                           	callstack 0
   650  000013                     	ds	1
   651  000014                     _timer@time$F1844:
   652                           	callstack 0
   653  000014                     	ds	1
   654  000015                     _sysMinute:
   655                           	callstack 0
   656  000015                     	ds	1
   657  000016                     _sysSecond:
   658                           	callstack 0
   659  000016                     	ds	1
   660  000017                     _second:
   661                           	callstack 0
   662  000017                     	ds	1
   663  000018                     _seconds:
   664                           	callstack 0
   665  000018                     	ds	1
   666  000019                     _saveState:
   667                           	callstack 0
   668  000019                     	ds	1
   669  00001A                     _saveScore:
   670                           	callstack 0
   671  00001A                     	ds	1
   672  00001B                     _lastUserPointer:
   673                           	callstack 0
   674  00001B                     	ds	1
   675  00001C                     _status:
   676                           	callstack 0
   677  00001C                     	ds	1
   678  00001D                     _userNum:
   679                           	callstack 0
   680  00001D                     	ds	1
   681  00001E                     _state@EEPROM$F1761:
   682                           	callstack 0
   683  00001E                     	ds	1
   684  00001F                     _position:
   685                           	callstack 0
   686  00001F                     	ds	1
   687  000020                     _numScores:
   688                           	callstack 0
   689  000020                     	ds	1
   690  000021                     _counterTX:
   691                           	callstack 0
   692  000021                     	ds	1
   693  000022                     _dataTX:
   694                           	callstack 0
   695  000022                     	ds	1
   696  000023                     _timerTX:
   697                           	callstack 0
   698  000023                     	ds	1
   699  000024                     _stateTX:
   700                           	callstack 0
   701  000024                     	ds	1
   702  000025                     _counterRX:
   703                           	callstack 0
   704  000025                     	ds	1
   705  000026                     _dataRX:
   706                           	callstack 0
   707  000026                     	ds	1
   708  000027                     _timerRX:
   709                           	callstack 0
   710  000027                     	ds	1
   711  000028                     _stateRX:
   712                           	callstack 0
   713  000028                     	ds	1
   714  000029                     _joyMode:
   715                           	callstack 0
   716  000029                     	ds	1
   717  00002A                     _stateJoy:
   718                           	callstack 0
   719  00002A                     	ds	1
   720  00002B                     _moved:
   721                           	callstack 0
   722  00002B                     	ds	1
   723  00002C                     _y:
   724                           	callstack 0
   725  00002C                     	ds	1
   726  00002D                     _x:
   727                           	callstack 0
   728  00002D                     	ds	1
   729  00002E                     _send:
   730                           	callstack 0
   731  00002E                     	ds	1
   732  00002F                     _mScore:
   733                           	callstack 0
   734  00002F                     	ds	1
   735  000030                     _pos:
   736                           	callstack 0
   737  000030                     	ds	1
   738  000031                     _val:
   739                           	callstack 0
   740  000031                     	ds	1
   741  000032                     _LCDcolm:
   742                           	callstack 0
   743  000032                     	ds	1
   744  000033                     _LCDcol:
   745                           	callstack 0
   746  000033                     	ds	1
   747  000034                     _LCDrow:
   748                           	callstack 0
   749  000034                     	ds	1
   750  000035                     _timer:
   751                           	callstack 0
   752  000035                     	ds	1
   753  000036                     _period:
   754                           	callstack 0
   755  000036                     	ds	1
   756  000037                     _timerSong:
   757                           	callstack 0
   758  000037                     	ds	1
   759  000038                     _periodTimer:
   760                           	callstack 0
   761  000038                     	ds	1
   762  000039                     _state@Audio$F967:
   763                           	callstack 0
   764  000039                     	ds	1
   765  00003A                     _ColumnAct:
   766                           	callstack 0
   767  00003A                     	ds	1
   768  00003B                     _RowAct:
   769                           	callstack 0
   770  00003B                     	ds	1
   771  00003C                     _stateSMS:
   772                           	callstack 0
   773  00003C                     	ds	1
   774  00003D                     _state:
   775                           	callstack 0
   776  00003D                     	ds	1
   777  00003E                     _available:
   778                           	callstack 0
   779  00003E                     	ds	1
   780  00003F                     _numPresses:
   781                           	callstack 0
   782  00003F                     	ds	1
   783  000040                     _pressed:
   784                           	callstack 0
   785  000040                     	ds	1
   786  000041                     _previous:
   787                           	callstack 0
   788  000041                     	ds	1
   789  000042                     _currentKey:
   790                           	callstack 0
   791  000042                     	ds	1
   792  000043                     _timer_SMS:
   793                           	callstack 0
   794  000043                     	ds	1
   795  000044                     _timerBounces:
   796                           	callstack 0
   797  000044                     	ds	1
   798  000045                     _row:
   799                           	callstack 0
   800  000045                     	ds	1
   801  000046                     _counter:
   802                           	callstack 0
   803  000046                     	ds	1
   804  000047                     _mUser:
   805                           	callstack 0
   806  000047                     	ds	18
   807                           
   808                           	psect	dataCOMRAM
   809  000072                     __pdataCOMRAM:
   810                           	callstack 0
   811  000072                     _MAINMENUSIZE:
   812                           	callstack 0
   813  000072                     	ds	5
   814  000077                     _minute:
   815                           	callstack 0
   816  000077                     	ds	1
   817  000078                     _minutes:
   818                           	callstack 0
   819  000078                     	ds	1
   820  000079                     menuMotor@state:
   821                           	callstack 0
   822  000079                     	ds	1
   823                           
   824                           	psect	dataBANK0
   825  000080                     __pdataBANK0:
   826                           	callstack 0
   827  000080                     _RESULTS:
   828                           	callstack 0
   829  000080                     	ds	22
   830  000096                     _LOGOUTMESSAGE:
   831                           	callstack 0
   832  000096                     	ds	9
   833  00009F                     _ERROR:
   834                           	callstack 0
   835  00009F                     	ds	9
   836  0000A8                     _LOGINMENU:
   837                           	callstack 0
   838  0000A8                     	ds	22
   839  0000BE                     _TIME:
   840                           	callstack 0
   841  0000BE                     	ds	16
   842  0000CE                     _sysTime:
   843                           	callstack 0
   844  0000CE                     	ds	14
   845  0000DC                     _modifyTimeString:
   846                           	callstack 0
   847  0000DC                     	ds	13
   848  0000E9                     _LOGREGSCREEN:
   849                           	callstack 0
   850  0000E9                     	ds	12
   851                           
   852                           	psect	bssBANK1
   853  000100                     __pbssBANK1:
   854                           	callstack 0
   855  000100                     _users:
   856                           	callstack 0
   857  000100                     	ds	144
   858  000190                     _s_Timers:
   859                           	callstack 0
   860  000190                     	ds	75
   861                           
   862                           	psect	cstackBANK0
   863  0000F5                     __pcstackBANK0:
   864                           	callstack 0
   865  0000F5                     _dataMotor$1786:
   866                           	callstack 0
   867                           
   868                           ; 2 bytes @ 0x0
   869  0000F5                     	ds	2
   870                           
   871                           	psect	cstackCOMRAM
   872  000059                     __pcstackCOMRAM:
   873                           	callstack 0
   874  000059                     
   875                           ; 1 bytes @ 0x0
   876  000059                     	ds	1
   877  00005A                     ??_RSI_High:
   878                           
   879                           ; 1 bytes @ 0x1
   880  00005A                     	ds	4
   881  00005E                     ??_KeGetGenericValue:
   882  00005E                     ??_getFullValue:
   883  00005E                     ??_EscriuPrimeraOrdre:
   884  00005E                     ??_CantaPartAlta:
   885  00005E                     ??_CantaPartBaixa:
   886  00005E                     ?_TiGetTics:
   887                           	callstack 0
   888  00005E                     ?___awmod:
   889                           	callstack 0
   890  00005E                     TiResetTics@Handle:
   891                           	callstack 0
   892  00005E                     _isPressed$638:
   893                           	callstack 0
   894  00005E                     JoSetMode@mode:
   895                           	callstack 0
   896  00005E                     SiSendChar@myByte:
   897                           	callstack 0
   898  00005E                     btSendByte@byte:
   899                           	callstack 0
   900  00005E                     DaSaveUser@regUser:
   901                           	callstack 0
   902  00005E                     saveEEPROM@data:
   903                           	callstack 0
   904  00005E                     readEEPROM@address:
   905                           	callstack 0
   906  00005E                     ___lbdiv@divisor:
   907                           	callstack 0
   908  00005E                     ___lbmod@divisor:
   909                           	callstack 0
   910  00005E                     ___awmod@dividend:
   911                           	callstack 0
   912                           
   913                           ; 2 bytes @ 0x5
   914  00005E                     	ds	1
   915  00005F                     ??_joystickMotor:
   916  00005F                     ??_readUserData:
   917  00005F                     KeSetMode@menuMode:
   918                           	callstack 0
   919  00005F                     CantaPartAlta@c:
   920                           	callstack 0
   921  00005F                     CantaPartBaixa@c:
   922                           	callstack 0
   923  00005F                     EscriuPrimeraOrdre@ordre:
   924                           	callstack 0
   925  00005F                     saveEEPROM@ad:
   926                           	callstack 0
   927  00005F                     ___lbdiv@dividend:
   928                           	callstack 0
   929  00005F                     ___lbmod@dividend:
   930                           	callstack 0
   931                           
   932                           ; 1 bytes @ 0x6
   933  00005F                     	ds	1
   934  000060                     ??_TiGetTics:
   935  000060                     CantaIR@IR:
   936                           	callstack 0
   937  000060                     CantaData@Data:
   938                           	callstack 0
   939  000060                     ___lbdiv@counter:
   940                           	callstack 0
   941  000060                     ___lbmod@counter:
   942                           	callstack 0
   943  000060                     ___awmod@divisor:
   944                           	callstack 0
   945                           
   946                           ; 2 bytes @ 0x7
   947  000060                     	ds	1
   948  000061                     ___lbdiv@quotient:
   949                           	callstack 0
   950  000061                     ___lbmod@rem:
   951                           	callstack 0
   952                           
   953                           ; 1 bytes @ 0x8
   954  000061                     	ds	1
   955  000062                     TiGetTics@Handle:
   956                           	callstack 0
   957  000062                     getFullValue@generic:
   958                           	callstack 0
   959  000062                     ___awmod@counter:
   960                           	callstack 0
   961                           
   962                           ; 1 bytes @ 0x9
   963  000062                     	ds	1
   964  000063                     ___awmod@sign:
   965                           	callstack 0
   966  000063                     TiGetTics@actual:
   967                           	callstack 0
   968                           
   969                           ; 2 bytes @ 0xA
   970  000063                     	ds	2
   971  000065                     ??_audioMotor:
   972  000065                     ??_SMSMotor:
   973  000065                     ??_KeypadMotor:
   974  000065                     ??_btMotor:
   975  000065                     WaitForBusy@Busy:
   976                           	callstack 0
   977  000065                     Espera@Timer:
   978                           	callstack 0
   979                           
   980                           ; 2 bytes @ 0xC
   981  000065                     	ds	1
   982  000066                     LcGotoXY@Row:
   983                           	callstack 0
   984                           
   985                           ; 1 bytes @ 0xD
   986  000066                     	ds	1
   987  000067                     LcGotoXY@Fisics:
   988                           	callstack 0
   989  000067                     Espera@ms:
   990                           	callstack 0
   991                           
   992                           ; 2 bytes @ 0xE
   993  000067                     	ds	1
   994  000068                     _LcGotoXY$844:
   995                           	callstack 0
   996                           
   997                           ; 2 bytes @ 0xF
   998  000068                     	ds	1
   999  000069                     ??_Espera:
  1000                           
  1001                           ; 1 bytes @ 0x10
  1002  000069                     	ds	1
  1003  00006A                     LcInit@columns:
  1004                           	callstack 0
  1005  00006A                     LcGotoXY@Column:
  1006                           	callstack 0
  1007                           
  1008                           ; 1 bytes @ 0x11
  1009  00006A                     	ds	1
  1010  00006B                     LcInit@rows:
  1011                           	callstack 0
  1012  00006B                     LcPutChar@c:
  1013                           	callstack 0
  1014  00006B                     DaFindUser@logUser:
  1015                           	callstack 0
  1016                           
  1017                           ; 1 bytes @ 0x12
  1018  00006B                     	ds	1
  1019  00006C                     ??_dataMotor:
  1020  00006C                     ??_mainMenu:
  1021  00006C                     LcInit@i:
  1022                           	callstack 0
  1023  00006C                     displayString@string:
  1024                           	callstack 0
  1025  00006C                     DaSaveScore@userScore:
  1026                           	callstack 0
  1027  00006C                     sendChar@bt:
  1028                           	callstack 0
  1029                           
  1030                           ; 1 bytes @ 0x13
  1031  00006C                     	ds	1
  1032  00006D                     ??_timeMotor:
  1033  00006D                     
  1034                           ; 1 bytes @ 0x14
  1035  00006D                     	ds	1
  1036  00006E                     ??_menuMotor:
  1037                           
  1038                           ; 1 bytes @ 0x15
  1039  00006E                     	ds	4
  1040  000072                     
  1041                           ; 1 bytes @ 0x19
  1042 ;;
  1043 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1044 ;;
  1045 ;; *************** function _main *****************
  1046 ;; Defined at:
  1047 ;;		line 38 in file "main.c"
  1048 ;; Parameters:    Size  Location     Type
  1049 ;;		None
  1050 ;; Auto vars:     Size  Location     Type
  1051 ;;		None
  1052 ;; Return value:  Size  Location     Type
  1053 ;;                  1    wreg      void 
  1054 ;; Registers used:
  1055 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1056 ;; Tracked objects:
  1057 ;;		On entry : 0/0
  1058 ;;		On exit  : 0/0
  1059 ;;		Unchanged: 0/0
  1060 ;; Data sizes:     COMRAM   BANK0   BANK1
  1061 ;;      Params:         0       0       0
  1062 ;;      Locals:         0       0       0
  1063 ;;      Temps:          0       0       0
  1064 ;;      Totals:         0       0       0
  1065 ;;Total ram usage:        0 bytes
  1066 ;; Hardware stack levels required when called: 8
  1067 ;; This function calls:
  1068 ;;		_KeypadMotor
  1069 ;;		_LcInit
  1070 ;;		_SMSMotor
  1071 ;;		_TiInitTimer
  1072 ;;		_audioMotor
  1073 ;;		_btMotor
  1074 ;;		_dataMotor
  1075 ;;		_initAudio
  1076 ;;		_initData
  1077 ;;		_initJoystick
  1078 ;;		_initKeypad
  1079 ;;		_initMenu
  1080 ;;		_initSIO
  1081 ;;		_initTime
  1082 ;;		_joystickMotor
  1083 ;;		_menuMotor
  1084 ;;		_timeMotor
  1085 ;; This function is called by:
  1086 ;;		Startup code after reset
  1087 ;; This function uses a non-reentrant model
  1088 ;;
  1089                           
  1090                           	psect	text0
  1091  001B3A                     __ptext0:
  1092                           	callstack 0
  1093  001B3A                     _main:
  1094                           	callstack 23
  1095                           
  1096                           ;incstack = 0
  1097  001B3A  ECBB  F00E         	call	_TiInitTimer	;wreg free
  1098  001B3E  EC59  F00F         	call	_initJoystick	;wreg free
  1099  001B42  EC7B  F00F         	call	_initKeypad	;wreg free
  1100  001B46  0E10               	movlw	16
  1101  001B48  6E6A               	movwf	LcInit@columns^0,c
  1102  001B4A  ECBE  F00A         	call	_LcInit
  1103  001B4E  EC47  F00F         	call	_initSIO	;wreg free
  1104  001B52  EC80  F000         	call	_initMenu	;wreg free
  1105  001B56  EC26  F000         	call	_initAudio	;wreg free
  1106  001B5A  ECAA  F000         	call	_initTime	;wreg free
  1107  001B5E  EC3F  F00D         	call	_initData	;wreg free
  1108  001B62                     l7313:
  1109  001B62  EC14  F00B         	call	_audioMotor	;wreg free
  1110  001B66  EC67  F00A         	call	_SMSMotor	;wreg free
  1111  001B6A  ECFD  F008         	call	_KeypadMotor	;wreg free
  1112  001B6E  EC68  F001         	call	_menuMotor	;wreg free
  1113  001B72  EC08  F00A         	call	_joystickMotor	;wreg free
  1114  001B76  ECCD  F004         	call	_dataMotor	;wreg free
  1115  001B7A  EC37  F007         	call	_timeMotor	;wreg free
  1116  001B7E  EC88  F009         	call	_btMotor	;wreg free
  1117  001B82  D7EF               	goto	l7313
  1118  001B84                     __end_of_main:
  1119                           	callstack 0
  1120                           
  1121 ;; *************** function _timeMotor *****************
  1122 ;; Defined at:
  1123 ;;		line 297 in file "time.c"
  1124 ;; Parameters:    Size  Location     Type
  1125 ;;		None
  1126 ;; Auto vars:     Size  Location     Type
  1127 ;;		None
  1128 ;; Return value:  Size  Location     Type
  1129 ;;                  1    wreg      void 
  1130 ;; Registers used:
  1131 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1132 ;; Tracked objects:
  1133 ;;		On entry : 0/0
  1134 ;;		On exit  : 0/0
  1135 ;;		Unchanged: 0/0
  1136 ;; Data sizes:     COMRAM   BANK0   BANK1
  1137 ;;      Params:         0       0       0
  1138 ;;      Locals:         0       0       0
  1139 ;;      Temps:          2       0       0
  1140 ;;      Totals:         2       0       0
  1141 ;;Total ram usage:        2 bytes
  1142 ;; Hardware stack levels used: 1
  1143 ;; Hardware stack levels required when called: 7
  1144 ;; This function calls:
  1145 ;;		_KeGetGenericValue
  1146 ;;		_LcCursorOn
  1147 ;;		_LcGotoXY
  1148 ;;		_LcPutChar
  1149 ;;		_TiGetTics
  1150 ;;		_TiResetTics
  1151 ;;		___lbdiv
  1152 ;;		___lbmod
  1153 ;;		_btAvailable
  1154 ;;		_isPressed
  1155 ;;		_sendChar
  1156 ;;		_updateGameTime
  1157 ;;		_updateSysTime
  1158 ;; This function is called by:
  1159 ;;		_main
  1160 ;; This function uses a non-reentrant model
  1161 ;;
  1162                           
  1163                           	psect	text1
  1164  000E6E                     __ptext1:
  1165                           	callstack 0
  1166  000E6E                     _timeMotor:
  1167                           	callstack 23
  1168                           
  1169                           ;time.c: 298:     switch (state){
  1170                           
  1171                           ;incstack = 0
  1172  000E6E  D15E               	goto	l7219
  1173  000E70                     l7047:
  1174                           
  1175                           ;time.c: 300:             if (TiGetTics(timer) >= 1200){
  1176  000E70  5014               	movf	_timer@time$F1844^0,w,c
  1177  000E72  EC22  F00F         	call	_TiGetTics
  1178  000E76  BE5F               	btfsc	(?_TiGetTics+1)^0,7,c
  1179  000E78  0012               	return	
  1180  000E7A  D99E               	call	PL30	;call to abstracted procedure
  1181  000E7C  A0D8               	btfss	status,0,c
  1182  000E7E  0012               	return	
  1183                           
  1184                           ;time.c: 301:                 TiResetTics(timer);
  1185  000E80  5014               	movf	_timer@time$F1844^0,w,c
  1186  000E82  ECAB  F00F         	call	_TiResetTics
  1187                           
  1188                           ;time.c: 302:                 updateSysTime();
  1189  000E86  EF44  F000         	goto	_updateSysTime	;wreg free
  1190  000E8A                     l7053:
  1191                           
  1192                           ;time.c: 306:             if (TiGetTics(timer) >= 1200){
  1193  000E8A  5014               	movf	_timer@time$F1844^0,w,c
  1194  000E8C  EC22  F00F         	call	_TiGetTics
  1195  000E90  BE5F               	btfsc	(?_TiGetTics+1)^0,7,c
  1196  000E92  0012               	return	
  1197  000E94  D991               	call	PL30	;call to abstracted procedure
  1198  000E96  A0D8               	btfss	status,0,c
  1199  000E98  0012               	return	
  1200                           
  1201                           ;time.c: 307:                 TiResetTics(timer);
  1202  000E9A  5014               	movf	_timer@time$F1844^0,w,c
  1203  000E9C  ECAB  F00F         	call	_TiResetTics
  1204                           
  1205                           ;time.c: 308:                 state = 2;
  1206  000EA0  0E02               	movlw	2
  1207                           
  1208                           ;time.c: 309:                 LcGotoXY(0,1);
  1209  000EA2  D98F               	call	PL58	;call to abstracted procedure
  1210  000EA4  ECA4  F00E         	call	_LcGotoXY
  1211                           
  1212                           ;time.c: 310:                 updateGameTime();
  1213  000EA8  ECC9  F00F         	call	_updateGameTime	;wreg free
  1214  000EAC  EF44  F000         	goto	_updateSysTime
  1215  000EB0                     l7065:
  1216                           
  1217                           ;time.c: 316:             if (btAvailable()){
  1218  000EB0  EC8E  F000         	call	_btAvailable	;wreg free
  1219  000EB4  0900               	iorlw	0
  1220  000EB6  B4D8               	btfsc	status,2,c
  1221  000EB8  0012               	return	
  1222                           
  1223                           ;time.c: 317:                 val = minute/10;
  1224  000EBA  D997               	call	PL94	;call to abstracted procedure
  1225  000EBC  EC72  F00E         	call	___lbdiv
  1226  000EC0  6E11               	movwf	_val@time$F1847^0,c
  1227                           
  1228                           ;time.c: 318:                 sendChar(1);
  1229  000EC2  0E01               	movlw	1
  1230  000EC4  ECE3  F00F         	call	_sendChar
  1231                           
  1232                           ;time.c: 319:                 state = 3;
  1233  000EC8  0E03               	movlw	3
  1234  000ECA  6E13               	movwf	_state@time$F1845^0,c
  1235  000ECC  0C03               	retlw	3
  1236  000ECE                     l7073:
  1237                           
  1238                           ;time.c: 325:             if (btAvailable()){
  1239  000ECE  EC8E  F000         	call	_btAvailable	;wreg free
  1240  000ED2  0900               	iorlw	0
  1241  000ED4  B4D8               	btfsc	status,2,c
  1242  000ED6  0012               	return	
  1243                           
  1244                           ;time.c: 326:                 val = minute%10;
  1245  000ED8  D980               	call	PL86	;call to abstracted procedure
  1246  000EDA  EC0F  F00F         	call	___lbmod
  1247  000EDE  6E11               	movwf	_val@time$F1847^0,c
  1248                           
  1249                           ;time.c: 327:                 sendChar(1);
  1250  000EE0  0E01               	movlw	1
  1251  000EE2  ECE3  F00F         	call	_sendChar
  1252                           
  1253                           ;time.c: 328:                 state = 4;
  1254  000EE6  0E04               	movlw	4
  1255  000EE8  6E13               	movwf	_state@time$F1845^0,c
  1256  000EEA  0C04               	retlw	4
  1257  000EEC                     l7081:
  1258                           
  1259                           ;time.c: 333:             if (btAvailable()){
  1260  000EEC  EC8E  F000         	call	_btAvailable	;wreg free
  1261  000EF0  0900               	iorlw	0
  1262  000EF2  B4D8               	btfsc	status,2,c
  1263  000EF4  0012               	return	
  1264                           
  1265                           ;time.c: 334:                 val = 10;
  1266  000EF6  0E0A               	movlw	10
  1267  000EF8  6E11               	movwf	_val@time$F1847^0,c
  1268                           
  1269                           ;time.c: 335:                 sendChar(1);
  1270  000EFA  0E01               	movlw	1
  1271  000EFC  ECE3  F00F         	call	_sendChar
  1272                           
  1273                           ;time.c: 336:                 state = 5;
  1274  000F00  0E05               	movlw	5
  1275  000F02  6E13               	movwf	_state@time$F1845^0,c
  1276  000F04  0C05               	retlw	5
  1277  000F06                     l7089:
  1278                           
  1279                           ;time.c: 341:             if (btAvailable()){
  1280  000F06  EC8E  F000         	call	_btAvailable	;wreg free
  1281  000F0A  0900               	iorlw	0
  1282  000F0C  B4D8               	btfsc	status,2,c
  1283  000F0E  0012               	return	
  1284                           
  1285                           ;time.c: 342:                 val = second/10;
  1286  000F10  D968               	call	PL88	;call to abstracted procedure
  1287  000F12  EC72  F00E         	call	___lbdiv
  1288  000F16  6E11               	movwf	_val@time$F1847^0,c
  1289                           
  1290                           ;time.c: 343:                 sendChar(1);
  1291  000F18  0E01               	movlw	1
  1292  000F1A  ECE3  F00F         	call	_sendChar
  1293                           
  1294                           ;time.c: 344:                 state = 6;
  1295  000F1E  0E06               	movlw	6
  1296  000F20  6E13               	movwf	_state@time$F1845^0,c
  1297  000F22  0C06               	retlw	6
  1298  000F24                     l7097:
  1299                           
  1300                           ;time.c: 349:             if (btAvailable()){
  1301  000F24  EC8E  F000         	call	_btAvailable	;wreg free
  1302  000F28  0900               	iorlw	0
  1303  000F2A  B4D8               	btfsc	status,2,c
  1304  000F2C  0012               	return	
  1305                           
  1306                           ;time.c: 350:                 val = second%10;
  1307  000F2E  D961               	call	PL98	;call to abstracted procedure
  1308  000F30  EC0F  F00F         	call	___lbmod
  1309  000F34  6E11               	movwf	_val@time$F1847^0,c
  1310                           
  1311                           ;time.c: 351:                 sendChar(1);
  1312  000F36  0E01               	movlw	1
  1313  000F38  ECE3  F00F         	call	_sendChar
  1314                           
  1315                           ;time.c: 352:                 state = 1;
  1316  000F3C  0E01               	movlw	1
  1317  000F3E  6E13               	movwf	_state@time$F1845^0,c
  1318  000F40  0C01               	retlw	1
  1319  000F42                     l7105:
  1320                           
  1321                           ;time.c: 357:             LcPutChar(minute/10+'0');
  1322  000F42  D953               	call	PL94	;call to abstracted procedure
  1323  000F44  EC72  F00E         	call	___lbdiv
  1324  000F48  0F30               	addlw	48
  1325  000F4A  ECE6  F00E         	call	_LcPutChar
  1326                           
  1327                           ;time.c: 358:             state = 21;
  1328  000F4E  0E15               	movlw	21
  1329  000F50  6E13               	movwf	_state@time$F1845^0,c
  1330                           
  1331                           ;time.c: 359:             break;
  1332  000F52  0C15               	retlw	21
  1333  000F54                     l7109:
  1334                           
  1335                           ;time.c: 362:             LcPutChar(minute%10+'0');
  1336  000F54  D942               	call	PL86	;call to abstracted procedure
  1337  000F56  EC0F  F00F         	call	___lbmod
  1338  000F5A  0F30               	addlw	48
  1339  000F5C  ECE6  F00E         	call	_LcPutChar
  1340                           
  1341                           ;time.c: 363:             state = 22;
  1342  000F60  0E16               	movlw	22
  1343  000F62  6E13               	movwf	_state@time$F1845^0,c
  1344                           
  1345                           ;time.c: 364:             break;
  1346  000F64  0C16               	retlw	22
  1347  000F66                     l7113:
  1348                           
  1349                           ;time.c: 367:             LcPutChar(':');
  1350  000F66  0E3A               	movlw	58
  1351  000F68  ECE6  F00E         	call	_LcPutChar
  1352                           
  1353                           ;time.c: 368:             state = 23;
  1354  000F6C  0E17               	movlw	23
  1355  000F6E  6E13               	movwf	_state@time$F1845^0,c
  1356                           
  1357                           ;time.c: 369:             break;
  1358  000F70  0C17               	retlw	23
  1359  000F72                     l7117:
  1360                           
  1361                           ;time.c: 372:             LcPutChar(second/10+'0');
  1362  000F72  D937               	call	PL88	;call to abstracted procedure
  1363  000F74  EC72  F00E         	call	___lbdiv
  1364  000F78  0F30               	addlw	48
  1365  000F7A  ECE6  F00E         	call	_LcPutChar
  1366                           
  1367                           ;time.c: 373:             state = 24;
  1368  000F7E  0E18               	movlw	24
  1369  000F80  6E13               	movwf	_state@time$F1845^0,c
  1370                           
  1371                           ;time.c: 374:             break;
  1372  000F82  0C18               	retlw	24
  1373  000F84                     l7121:
  1374                           
  1375                           ;time.c: 377:             LcPutChar(second%10+'0');
  1376  000F84  D936               	call	PL98	;call to abstracted procedure
  1377  000F86  EC0F  F00F         	call	___lbmod
  1378  000F8A  0F30               	addlw	48
  1379  000F8C  ECE6  F00E         	call	_LcPutChar
  1380                           
  1381                           ;time.c: 378:             LcGotoXY(0,1);
  1382  000F90  D91C               	call	PL60	;call to abstracted procedure
  1383  000F92  ECA4  F00E         	call	_LcGotoXY
  1384                           
  1385                           ;time.c: 379:             if (game){
  1386  000F96  5012               	movf	_game^0,w,c
  1387  000F98  E003               	bz	l7127
  1388                           
  1389                           ;time.c: 380:                 game = 0;
  1390  000F9A  6A12               	clrf	_game^0,c
  1391                           
  1392                           ;time.c: 381:                 state = 0;
  1393  000F9C  6A13               	clrf	_state@time$F1845^0,c
  1394                           
  1395                           ;time.c: 382:             } else {
  1396  000F9E  D004               	goto	l7131
  1397  000FA0                     l7127:
  1398                           
  1399                           ;time.c: 383:                 LcCursorOn();
  1400  000FA0  EC76  F000         	call	_LcCursorOn	;wreg free
  1401                           
  1402                           ;time.c: 384:                 state = 25;
  1403  000FA4  0E19               	movlw	25
  1404  000FA6  6E13               	movwf	_state@time$F1845^0,c
  1405  000FA8                     l7131:
  1406                           
  1407                           ;time.c: 388:             if (isPressed() && KeGetGenericValue() != '*' && KeGetGenericV
      +                          alue() != '#' ){
  1408  000FA8  ECEF  F00F         	call	_isPressed	;wreg free
  1409  000FAC  0900               	iorlw	0
  1410  000FAE  B4D8               	btfsc	status,2,c
  1411  000FB0  0012               	return	
  1412  000FB2  EC8B  F00F         	call	_KeGetGenericValue	;wreg free
  1413  000FB6  0A2A               	xorlw	42
  1414  000FB8  B4D8               	btfsc	status,2,c
  1415  000FBA  0012               	return	
  1416  000FBC  EC8B  F00F         	call	_KeGetGenericValue	;wreg free
  1417  000FC0  0A23               	xorlw	35
  1418  000FC2  B4D8               	btfsc	status,2,c
  1419  000FC4  0012               	return	
  1420                           
  1421                           ;time.c: 389:                 minute = KeGetGenericValue()-'0';
  1422  000FC6  EC8B  F00F         	call	_KeGetGenericValue	;wreg free
  1423  000FCA  0FD0               	addlw	208
  1424  000FCC  6E77               	movwf	_minute^0,c
  1425                           
  1426                           ;time.c: 390:                 LcPutChar(KeGetGenericValue());
  1427  000FCE  EC8B  F00F         	call	_KeGetGenericValue	;wreg free
  1428  000FD2  ECE6  F00E         	call	_LcPutChar
  1429                           
  1430                           ;time.c: 391:                 state = 26;
  1431  000FD6  0E1A               	movlw	26
  1432  000FD8  6E13               	movwf	_state@time$F1845^0,c
  1433  000FDA  0C1A               	retlw	26
  1434  000FDC                     l7143:
  1435                           
  1436                           ;time.c: 395:             if (isPressed() && KeGetGenericValue() != '*' && KeGetGenericV
      +                          alue() != '#' ){
  1437  000FDC  ECEF  F00F         	call	_isPressed	;wreg free
  1438  000FE0  0900               	iorlw	0
  1439  000FE2  B4D8               	btfsc	status,2,c
  1440  000FE4  0012               	return	
  1441  000FE6  EC8B  F00F         	call	_KeGetGenericValue	;wreg free
  1442  000FEA  0A2A               	xorlw	42
  1443  000FEC  B4D8               	btfsc	status,2,c
  1444  000FEE  0012               	return	
  1445  000FF0  EC8B  F00F         	call	_KeGetGenericValue	;wreg free
  1446  000FF4  0A23               	xorlw	35
  1447  000FF6  B4D8               	btfsc	status,2,c
  1448  000FF8  0012               	return	
  1449                           
  1450                           ;time.c: 396:                 minute = minute*10 +KeGetGenericValue()-'0';
  1451  000FFA  EC8B  F00F         	call	_KeGetGenericValue	;wreg free
  1452  000FFE  6E6D               	movwf	??_timeMotor^0,c
  1453  001000  5077               	movf	_minute^0,w,c
  1454  001002  D8E6               	call	PL78	;call to abstracted procedure
  1455  001004  6E77               	movwf	_minute^0,c
  1456                           
  1457                           ;time.c: 397:                 LcPutChar(KeGetGenericValue());
  1458  001006  EC8B  F00F         	call	_KeGetGenericValue	;wreg free
  1459  00100A  ECE6  F00E         	call	_LcPutChar
  1460                           
  1461                           ;time.c: 398:                 LcPutChar(':');
  1462  00100E  0E3A               	movlw	58
  1463  001010  ECE6  F00E         	call	_LcPutChar
  1464                           
  1465                           ;time.c: 399:                 state = 27;
  1466  001014  0E1B               	movlw	27
  1467  001016  6E13               	movwf	_state@time$F1845^0,c
  1468  001018  0C1B               	retlw	27
  1469  00101A                     l7157:
  1470                           
  1471                           ;time.c: 403:             if (isPressed() && KeGetGenericValue() != '*' && KeGetGenericV
      +                          alue() != '#' ){
  1472  00101A  ECEF  F00F         	call	_isPressed	;wreg free
  1473  00101E  0900               	iorlw	0
  1474  001020  B4D8               	btfsc	status,2,c
  1475  001022  0012               	return	
  1476  001024  EC8B  F00F         	call	_KeGetGenericValue	;wreg free
  1477  001028  0A2A               	xorlw	42
  1478  00102A  B4D8               	btfsc	status,2,c
  1479  00102C  0012               	return	
  1480  00102E  EC8B  F00F         	call	_KeGetGenericValue	;wreg free
  1481  001032  0A23               	xorlw	35
  1482  001034  B4D8               	btfsc	status,2,c
  1483  001036  0012               	return	
  1484                           
  1485                           ;time.c: 404:                 second = KeGetGenericValue()-'0';
  1486  001038  EC8B  F00F         	call	_KeGetGenericValue	;wreg free
  1487  00103C  0FD0               	addlw	208
  1488  00103E  6E17               	movwf	_second^0,c
  1489                           
  1490                           ;time.c: 405:                 LcPutChar(KeGetGenericValue());
  1491  001040  EC8B  F00F         	call	_KeGetGenericValue	;wreg free
  1492  001044  ECE6  F00E         	call	_LcPutChar
  1493                           
  1494                           ;time.c: 406:                 state = 28;
  1495  001048  0E1C               	movlw	28
  1496  00104A  6E13               	movwf	_state@time$F1845^0,c
  1497  00104C  0C1C               	retlw	28
  1498  00104E                     l7169:
  1499                           
  1500                           ;time.c: 410:             if (isPressed() && KeGetGenericValue() != '*' && KeGetGenericV
      +                          alue() != '#' ){
  1501  00104E  ECEF  F00F         	call	_isPressed	;wreg free
  1502  001052  0900               	iorlw	0
  1503  001054  B4D8               	btfsc	status,2,c
  1504  001056  0012               	return	
  1505  001058  EC8B  F00F         	call	_KeGetGenericValue	;wreg free
  1506  00105C  0A2A               	xorlw	42
  1507  00105E  B4D8               	btfsc	status,2,c
  1508  001060  0012               	return	
  1509  001062  EC8B  F00F         	call	_KeGetGenericValue	;wreg free
  1510  001066  0A23               	xorlw	35
  1511  001068  B4D8               	btfsc	status,2,c
  1512  00106A  0012               	return	
  1513                           
  1514                           ;time.c: 411:                 second = second*10 +KeGetGenericValue()-'0';
  1515  00106C  EC8B  F00F         	call	_KeGetGenericValue	;wreg free
  1516  001070  6E6D               	movwf	??_timeMotor^0,c
  1517  001072  5017               	movf	_second^0,w,c
  1518  001074  D8AD               	call	PL78	;call to abstracted procedure
  1519  001076  6E17               	movwf	_second^0,c
  1520                           
  1521                           ;time.c: 412:                 LcPutChar(KeGetGenericValue());
  1522  001078  EC8B  F00F         	call	_KeGetGenericValue	;wreg free
  1523  00107C  ECE6  F00E         	call	_LcPutChar
  1524                           
  1525                           ;time.c: 413:                 state = 29;
  1526  001080  0E1D               	movlw	29
  1527  001082  6E13               	movwf	_state@time$F1845^0,c
  1528  001084  0C1D               	retlw	29
  1529  001086                     l7181:
  1530                           
  1531                           ;time.c: 417:             if (isPressed() && KeGetGenericValue() == '#'){
  1532  001086  ECEF  F00F         	call	_isPressed	;wreg free
  1533  00108A  0900               	iorlw	0
  1534  00108C  B4D8               	btfsc	status,2,c
  1535  00108E  0012               	return	
  1536  001090  EC8B  F00F         	call	_KeGetGenericValue	;wreg free
  1537  001094  0A23               	xorlw	35
  1538  001096  A4D8               	btfss	status,2,c
  1539  001098  0012               	return	
  1540                           
  1541                           ;time.c: 418:                 seconds = second;
  1542  00109A  C017  F018         	movff	_second,_seconds
  1543                           
  1544                           ;time.c: 419:                 minutes = minute;
  1545  00109E  C077  F078         	movff	_minute,_minutes
  1546                           
  1547                           ;time.c: 420:                 state = 0;
  1548  0010A2  6A13               	clrf	_state@time$F1845^0,c
  1549  0010A4  0012               	return	
  1550  0010A6                     l7187:
  1551                           
  1552                           ;time.c: 425:             LcPutChar(sysMinute/10+'0');
  1553  0010A6  0E0A               	movlw	10
  1554  0010A8  6E5E               	movwf	___lbdiv@divisor^0,c
  1555  0010AA  5015               	movf	_sysMinute^0,w,c
  1556  0010AC  EC72  F00E         	call	___lbdiv
  1557  0010B0  0F30               	addlw	48
  1558  0010B2  ECE6  F00E         	call	_LcPutChar
  1559                           
  1560                           ;time.c: 426:             state = 31;
  1561  0010B6  0E1F               	movlw	31
  1562  0010B8  6E13               	movwf	_state@time$F1845^0,c
  1563                           
  1564                           ;time.c: 427:             break;
  1565  0010BA  0C1F               	retlw	31
  1566  0010BC                     l7191:
  1567                           
  1568                           ;time.c: 430:             LcPutChar(sysMinute%10+'0');
  1569  0010BC  0E0A               	movlw	10
  1570  0010BE  6E5E               	movwf	___lbmod@divisor^0,c
  1571  0010C0  5015               	movf	_sysMinute^0,w,c
  1572  0010C2  EC0F  F00F         	call	___lbmod
  1573  0010C6  0F30               	addlw	48
  1574  0010C8  ECE6  F00E         	call	_LcPutChar
  1575                           
  1576                           ;time.c: 431:             state = 32;
  1577  0010CC  0E20               	movlw	32
  1578  0010CE  6E13               	movwf	_state@time$F1845^0,c
  1579                           
  1580                           ;time.c: 432:             break;
  1581  0010D0  0C20               	retlw	32
  1582  0010D2                     l7195:
  1583                           
  1584                           ;time.c: 435:             LcPutChar(':');
  1585  0010D2  0E3A               	movlw	58
  1586  0010D4  ECE6  F00E         	call	_LcPutChar
  1587                           
  1588                           ;time.c: 436:             state = 33;
  1589  0010D8  0E21               	movlw	33
  1590  0010DA  6E13               	movwf	_state@time$F1845^0,c
  1591                           
  1592                           ;time.c: 437:             break;
  1593  0010DC  0C21               	retlw	33
  1594  0010DE                     l7199:
  1595                           
  1596                           ;time.c: 440:             LcPutChar(sysSecond/10+'0');
  1597  0010DE  0E0A               	movlw	10
  1598  0010E0  6E5E               	movwf	___lbdiv@divisor^0,c
  1599  0010E2  5016               	movf	_sysSecond^0,w,c
  1600  0010E4  EC72  F00E         	call	___lbdiv
  1601  0010E8  0F30               	addlw	48
  1602  0010EA  ECE6  F00E         	call	_LcPutChar
  1603                           
  1604                           ;time.c: 441:             state = 34;
  1605  0010EE  0E22               	movlw	34
  1606  0010F0  6E13               	movwf	_state@time$F1845^0,c
  1607                           
  1608                           ;time.c: 442:             break;
  1609  0010F2  0C22               	retlw	34
  1610  0010F4                     l7203:
  1611                           
  1612                           ;time.c: 445:             LcPutChar(sysSecond%10+'0');
  1613  0010F4  0E0A               	movlw	10
  1614  0010F6  6E5E               	movwf	___lbmod@divisor^0,c
  1615  0010F8  5016               	movf	_sysSecond^0,w,c
  1616  0010FA  EC0F  F00F         	call	___lbmod
  1617  0010FE  0F30               	addlw	48
  1618  001100  ECE6  F00E         	call	_LcPutChar
  1619                           
  1620                           ;time.c: 446:             state = 35;
  1621  001104  0E23               	movlw	35
  1622  001106  6E13               	movwf	_state@time$F1845^0,c
  1623                           
  1624                           ;time.c: 447:             break;
  1625  001108  0C23               	retlw	35
  1626  00110A                     l7207:
  1627                           
  1628                           ;time.c: 449:             if (TiGetTics(timer) >= 1200){
  1629  00110A  5014               	movf	_timer@time$F1844^0,w,c
  1630  00110C  EC22  F00F         	call	_TiGetTics
  1631  001110  BE5F               	btfsc	(?_TiGetTics+1)^0,7,c
  1632  001112  0012               	return	
  1633  001114  D851               	call	PL30	;call to abstracted procedure
  1634  001116  A0D8               	btfss	status,0,c
  1635  001118  0012               	return	
  1636                           
  1637                           ;time.c: 450:                 TiResetTics(timer);
  1638  00111A  5014               	movf	_timer@time$F1844^0,w,c
  1639  00111C  ECAB  F00F         	call	_TiResetTics
  1640                           
  1641                           ;time.c: 451:                 updateSysTime();
  1642  001120  EC44  F000         	call	_updateSysTime	;wreg free
  1643                           
  1644                           ;time.c: 452:                 state = 30;
  1645  001124  0E1E               	movlw	30
  1646                           
  1647                           ;time.c: 453:                 LcGotoXY(0,1);
  1648  001126  D84D               	call	PL58	;call to abstracted procedure
  1649  001128  EFA4  F00E         	goto	_LcGotoXY
  1650  00112C                     l7219:
  1651  00112C  5013               	movf	_state@time$F1845^0,w,c
  1652  00112E  6E6D               	movwf	??_timeMotor^0,c
  1653  001130  6A6E               	clrf	(??_timeMotor+1)^0,c
  1654                           
  1655                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1656                           ; Switch size 1, requested type "space"
  1657                           ; Number of cases is 1, Range of values is 0 to 0
  1658                           ; switch strategies available:
  1659                           ; Name         Instructions Cycles
  1660                           ; simple_byte            4     3 (average)
  1661                           ;	Chosen strategy is simple_byte
  1662  001132  506E               	movf	(??_timeMotor+1)^0,w,c
  1663  001134  A4D8               	btfss	status,2,c
  1664  001136  0012               	return	
  1665                           
  1666                           ; Switch size 1, requested type "space"
  1667                           ; Number of cases is 23, Range of values is 0 to 35
  1668                           ; switch strategies available:
  1669                           ; Name         Instructions Cycles
  1670                           ; simple_byte           70    36 (average)
  1671                           ;	Chosen strategy is simple_byte
  1672  001138  506D               	movf	??_timeMotor^0,w,c
  1673  00113A  E101 D699          	bz	l7047
  1674  00113E  0A01               	xorlw	1	; case 1
  1675  001140  E101 D6A3          	bz	l7053
  1676  001144  0A03               	xorlw	3	; case 2
  1677  001146  E101 D6B3          	bz	l7065
  1678  00114A  0A01               	xorlw	1	; case 3
  1679  00114C  E101 D6BF          	bz	l7073
  1680  001150  0A07               	xorlw	7	; case 4
  1681  001152  E101 D6CB          	bz	l7081
  1682  001156  0A01               	xorlw	1	; case 5
  1683  001158  E101 D6D5          	bz	l7089
  1684  00115C  0A03               	xorlw	3	; case 6
  1685  00115E  E101 D6E1          	bz	l7097
  1686  001162  0A12               	xorlw	18	; case 20
  1687  001164  E101 D6ED          	bz	l7105
  1688  001168  0A01               	xorlw	1	; case 21
  1689  00116A  E101 D6F3          	bz	l7109
  1690  00116E  0A03               	xorlw	3	; case 22
  1691  001170  E101 D6F9          	bz	l7113
  1692  001174  0A01               	xorlw	1	; case 23
  1693  001176  E101 D6FC          	bz	l7117
  1694  00117A  0A0F               	xorlw	15	; case 24
  1695  00117C  E101 D702          	bz	l7121
  1696  001180  0A01               	xorlw	1	; case 25
  1697  001182  E101 D711          	bz	l7131
  1698  001186  0A03               	xorlw	3	; case 26
  1699  001188  E101 D728          	bz	l7143
  1700  00118C  0A01               	xorlw	1	; case 27
  1701  00118E  E101 D744          	bz	l7157
  1702  001192  0A07               	xorlw	7	; case 28
  1703  001194  E101 D75B          	bz	l7169
  1704  001198  0A01               	xorlw	1	; case 29
  1705  00119A  E101 D774          	bz	l7181
  1706  00119E  0A03               	xorlw	3	; case 30
  1707  0011A0  E082               	bz	l7187
  1708  0011A2  0A01               	xorlw	1	; case 31
  1709  0011A4  E08B               	bz	l7191
  1710  0011A6  0A3F               	xorlw	63	; case 32
  1711  0011A8  E094               	bz	l7195
  1712  0011AA  0A01               	xorlw	1	; case 33
  1713  0011AC  E098               	bz	l7199
  1714  0011AE  0A03               	xorlw	3	; case 34
  1715  0011B0  E0A1               	bz	l7203
  1716  0011B2  0A01               	xorlw	1	; case 35
  1717  0011B4  E0AA               	bz	l7207
  1718  0011B6  0012               	return		;funcret
  1719  0011B8                     __end_of_timeMotor:
  1720                           	callstack 0
  1721  0011B8                     PL30:
  1722                           	callstack 27
  1723  0011B8  0EB0               	movlw	176
  1724  0011BA  5C5E               	subwf	?_TiGetTics^0,w,c
  1725  0011BC  0E04               	movlw	4
  1726  0011BE  585F               	subwfb	(?_TiGetTics+1)^0,w,c
  1727  0011C0  0012               	return	
  1728  0011C2                     __end_ofPL30:
  1729                           	callstack 0
  1730  0011C2                     PL58:
  1731                           	callstack 23
  1732  0011C2  6E13               	movwf	_state@time$F1845^0,c
  1733  0011C4  0E01               	movlw	1
  1734  0011C6  6E66               	movwf	LcGotoXY@Row^0,c
  1735  0011C8  0C00               	retlw	0
  1736  0011CA                     __end_ofPL58:
  1737                           	callstack 0
  1738  0011CA                     PL60:
  1739                           	callstack 24
  1740  0011CA  0E01               	movlw	1
  1741  0011CC  6E66               	movwf	LcGotoXY@Row^0,c
  1742  0011CE  0C00               	retlw	0
  1743  0011D0                     __end_ofPL60:
  1744                           	callstack 0
  1745  0011D0                     PL78:
  1746                           	callstack 23
  1747  0011D0  0D0A               	mullw	10
  1748  0011D2  50F3               	movf	243,w,c
  1749  0011D4  246D               	addwf	??_timeMotor^0,w,c
  1750  0011D6  0FD0               	addlw	208
  1751  0011D8  0012               	return	
  1752  0011DA                     __end_ofPL78:
  1753                           	callstack 0
  1754  0011DA                     PL86:
  1755                           	callstack 23
  1756  0011DA  0E0A               	movlw	10
  1757  0011DC  6E5E               	movwf	___lbmod@divisor^0,c
  1758  0011DE  5077               	movf	_minute^0,w,c
  1759  0011E0  0012               	return	
  1760  0011E2                     __end_ofPL86:
  1761                           	callstack 0
  1762  0011E2                     PL88:
  1763                           	callstack 23
  1764  0011E2  0E0A               	movlw	10
  1765  0011E4  6E5E               	movwf	___lbdiv@divisor^0,c
  1766  0011E6  5017               	movf	_second^0,w,c
  1767  0011E8  0012               	return	
  1768  0011EA                     __end_ofPL88:
  1769                           	callstack 0
  1770  0011EA                     PL94:
  1771                           	callstack 23
  1772  0011EA  0E0A               	movlw	10
  1773  0011EC  6E5E               	movwf	___lbdiv@divisor^0,c
  1774  0011EE  5077               	movf	_minute^0,w,c
  1775  0011F0  0012               	return	
  1776  0011F2                     __end_ofPL94:
  1777                           	callstack 0
  1778  0011F2                     PL98:
  1779                           	callstack 23
  1780  0011F2  0E0A               	movlw	10
  1781  0011F4  6E5E               	movwf	___lbmod@divisor^0,c
  1782  0011F6  5017               	movf	_second^0,w,c
  1783  0011F8  0012               	return	
  1784  0011FA                     __end_ofPL98:
  1785                           	callstack 0
  1786                           
  1787 ;; *************** function _updateSysTime *****************
  1788 ;; Defined at:
  1789 ;;		line 492 in file "time.c"
  1790 ;; Parameters:    Size  Location     Type
  1791 ;;		None
  1792 ;; Auto vars:     Size  Location     Type
  1793 ;;		None
  1794 ;; Return value:  Size  Location     Type
  1795 ;;                  1    wreg      void 
  1796 ;; Registers used:
  1797 ;;		wreg, status,2, status,0
  1798 ;; Tracked objects:
  1799 ;;		On entry : 0/0
  1800 ;;		On exit  : 0/0
  1801 ;;		Unchanged: 0/0
  1802 ;; Data sizes:     COMRAM   BANK0   BANK1
  1803 ;;      Params:         0       0       0
  1804 ;;      Locals:         0       0       0
  1805 ;;      Temps:          0       0       0
  1806 ;;      Totals:         0       0       0
  1807 ;;Total ram usage:        0 bytes
  1808 ;; Hardware stack levels used: 1
  1809 ;; Hardware stack levels required when called: 2
  1810 ;; This function calls:
  1811 ;;		Nothing
  1812 ;; This function is called by:
  1813 ;;		_timeMotor
  1814 ;; This function uses a non-reentrant model
  1815 ;;
  1816                           
  1817                           	psect	text2
  1818  000088                     __ptext2:
  1819                           	callstack 0
  1820  000088                     _updateSysTime:
  1821                           	callstack 27
  1822                           
  1823                           ;time.c: 493:     if (sysSecond == 59){
  1824                           
  1825                           ;incstack = 0
  1826  000088  0E3B               	movlw	59
  1827  00008A  1816               	xorwf	_sysSecond^0,w,c
  1828  00008C  E103               	bnz	l2357
  1829                           
  1830                           ;time.c: 494:         sysSecond = 0;
  1831  00008E  6A16               	clrf	_sysSecond^0,c
  1832                           
  1833                           ;time.c: 495:         sysMinute++;
  1834  000090  2A15               	incf	_sysMinute^0,f,c
  1835                           
  1836                           ;time.c: 496:     } else {
  1837  000092  0012               	return	
  1838  000094                     l2357:
  1839                           
  1840                           ;time.c: 497:         sysSecond++;
  1841  000094  2A16               	incf	_sysSecond^0,f,c
  1842  000096  0012               	return		;funcret
  1843  000098                     __end_of_updateSysTime:
  1844                           	callstack 0
  1845                           
  1846 ;; *************** function _updateGameTime *****************
  1847 ;; Defined at:
  1848 ;;		line 480 in file "time.c"
  1849 ;; Parameters:    Size  Location     Type
  1850 ;;		None
  1851 ;; Auto vars:     Size  Location     Type
  1852 ;;		None
  1853 ;; Return value:  Size  Location     Type
  1854 ;;                  1    wreg      void 
  1855 ;; Registers used:
  1856 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1857 ;; Tracked objects:
  1858 ;;		On entry : 0/0
  1859 ;;		On exit  : 0/0
  1860 ;;		Unchanged: 0/0
  1861 ;; Data sizes:     COMRAM   BANK0   BANK1
  1862 ;;      Params:         0       0       0
  1863 ;;      Locals:         0       0       0
  1864 ;;      Temps:          0       0       0
  1865 ;;      Totals:         0       0       0
  1866 ;;Total ram usage:        0 bytes
  1867 ;; Hardware stack levels used: 1
  1868 ;; Hardware stack levels required when called: 4
  1869 ;; This function calls:
  1870 ;;		_startSong
  1871 ;; This function is called by:
  1872 ;;		_timeMotor
  1873 ;; This function uses a non-reentrant model
  1874 ;;
  1875                           
  1876                           	psect	text3
  1877  001F92                     __ptext3:
  1878                           	callstack 0
  1879  001F92                     _updateGameTime:
  1880                           	callstack 25
  1881                           
  1882                           ;time.c: 481:     if (second == 0){
  1883                           
  1884                           ;incstack = 0
  1885  001F92  5017               	movf	_second^0,w,c
  1886  001F94  E109               	bnz	l6081
  1887                           
  1888                           ;time.c: 482:         second = 59;
  1889  001F96  0E3B               	movlw	59
  1890  001F98  6E17               	movwf	_second^0,c
  1891                           
  1892                           ;time.c: 483:         minute--;
  1893  001F9A  0677               	decf	_minute^0,f,c
  1894                           
  1895                           ;time.c: 484:         startSong();
  1896  001F9C  EC5B  F000         	call	_startSong	;wreg free
  1897                           
  1898                           ;time.c: 485:         if (minute == 0){
  1899  001FA0  5077               	movf	_minute^0,w,c
  1900  001FA2  B4D8               	btfsc	status,2,c
  1901                           
  1902                           ;time.c: 486:             state = 0;
  1903  001FA4  6A13               	clrf	_state@time$F1845^0,c
  1904  001FA6  0012               	return	
  1905  001FA8                     l6081:
  1906                           
  1907                           ;time.c: 489:         second--;
  1908  001FA8  0617               	decf	_second^0,f,c
  1909  001FAA  0012               	return		;funcret
  1910  001FAC                     __end_of_updateGameTime:
  1911                           	callstack 0
  1912                           
  1913 ;; *************** function _startSong *****************
  1914 ;; Defined at:
  1915 ;;		line 62 in file "Audio.c"
  1916 ;; Parameters:    Size  Location     Type
  1917 ;;		None
  1918 ;; Auto vars:     Size  Location     Type
  1919 ;;		None
  1920 ;; Return value:  Size  Location     Type
  1921 ;;                  1    wreg      void 
  1922 ;; Registers used:
  1923 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1924 ;; Tracked objects:
  1925 ;;		On entry : 0/0
  1926 ;;		On exit  : 0/0
  1927 ;;		Unchanged: 0/0
  1928 ;; Data sizes:     COMRAM   BANK0   BANK1
  1929 ;;      Params:         0       0       0
  1930 ;;      Locals:         0       0       0
  1931 ;;      Temps:          0       0       0
  1932 ;;      Totals:         0       0       0
  1933 ;;Total ram usage:        0 bytes
  1934 ;; Hardware stack levels used: 1
  1935 ;; Hardware stack levels required when called: 3
  1936 ;; This function calls:
  1937 ;;		_TiResetTics
  1938 ;; This function is called by:
  1939 ;;		_updateGameTime
  1940 ;; This function uses a non-reentrant model
  1941 ;;
  1942                           
  1943                           	psect	text4
  1944  0000B6                     __ptext4:
  1945                           	callstack 0
  1946  0000B6                     _startSong:
  1947                           	callstack 25
  1948                           
  1949                           ;Audio.c: 63:     TiResetTics(periodTimer);
  1950                           
  1951                           ;incstack = 0
  1952  0000B6  5038               	movf	_periodTimer^0,w,c
  1953  0000B8  ECAB  F00F         	call	_TiResetTics
  1954                           
  1955                           ;Audio.c: 64:     state = 1;
  1956  0000BC  0E01               	movlw	1
  1957  0000BE  6E39               	movwf	_state@Audio$F967^0,c
  1958  0000C0  0C01               	retlw	1	;funcret
  1959  0000C2                     __end_of_startSong:
  1960                           	callstack 0
  1961                           
  1962 ;; *************** function _sendChar *****************
  1963 ;; Defined at:
  1964 ;;		line 510 in file "time.c"
  1965 ;; Parameters:    Size  Location     Type
  1966 ;;  bt              1    wreg     unsigned char 
  1967 ;; Auto vars:     Size  Location     Type
  1968 ;;  bt              1   19[COMRAM] unsigned char 
  1969 ;; Return value:  Size  Location     Type
  1970 ;;                  1    wreg      void 
  1971 ;; Registers used:
  1972 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1973 ;; Tracked objects:
  1974 ;;		On entry : 0/0
  1975 ;;		On exit  : 0/0
  1976 ;;		Unchanged: 0/0
  1977 ;; Data sizes:     COMRAM   BANK0   BANK1
  1978 ;;      Params:         0       0       0
  1979 ;;      Locals:         1       0       0
  1980 ;;      Temps:          0       0       0
  1981 ;;      Totals:         1       0       0
  1982 ;;Total ram usage:        1 bytes
  1983 ;; Hardware stack levels used: 1
  1984 ;; Hardware stack levels required when called: 6
  1985 ;; This function calls:
  1986 ;;		_LcPutChar
  1987 ;;		_btSendByte
  1988 ;; This function is called by:
  1989 ;;		_timeMotor
  1990 ;; This function uses a non-reentrant model
  1991 ;;
  1992                           
  1993                           	psect	text5
  1994  001FC6                     __ptext5:
  1995                           	callstack 0
  1996  001FC6                     _sendChar:
  1997                           	callstack 23
  1998                           
  1999                           ;incstack = 0
  2000                           ;sendChar@bt stored from wreg
  2001  001FC6  6E6C               	movwf	sendChar@bt^0,c
  2002                           
  2003                           ;time.c: 511:     LcPutChar(val+'0');
  2004  001FC8  5011               	movf	_val@time$F1847^0,w,c
  2005  001FCA  0F30               	addlw	48
  2006  001FCC  ECE6  F00E         	call	_LcPutChar
  2007                           
  2008                           ;time.c: 512:     if (bt){
  2009  001FD0  506C               	movf	sendChar@bt^0,w,c
  2010  001FD2  B4D8               	btfsc	status,2,c
  2011  001FD4  0012               	return	
  2012                           
  2013                           ;time.c: 513:         btSendByte(val+'0');
  2014  001FD6  5011               	movf	_val@time$F1847^0,w,c
  2015  001FD8  0F30               	addlw	48
  2016  001FDA  EF61  F000         	goto	_btSendByte
  2017  001FDE                     __end_of_sendChar:
  2018                           	callstack 0
  2019                           
  2020 ;; *************** function _btSendByte *****************
  2021 ;; Defined at:
  2022 ;;		line 121 in file "SIO.c"
  2023 ;; Parameters:    Size  Location     Type
  2024 ;;  byte            1    wreg     unsigned char 
  2025 ;; Auto vars:     Size  Location     Type
  2026 ;;  byte            1    5[COMRAM] unsigned char 
  2027 ;; Return value:  Size  Location     Type
  2028 ;;                  1    wreg      void 
  2029 ;; Registers used:
  2030 ;;		wreg, status,2
  2031 ;; Tracked objects:
  2032 ;;		On entry : 0/0
  2033 ;;		On exit  : 0/0
  2034 ;;		Unchanged: 0/0
  2035 ;; Data sizes:     COMRAM   BANK0   BANK1
  2036 ;;      Params:         0       0       0
  2037 ;;      Locals:         1       0       0
  2038 ;;      Temps:          0       0       0
  2039 ;;      Totals:         1       0       0
  2040 ;;Total ram usage:        1 bytes
  2041 ;; Hardware stack levels used: 1
  2042 ;; Hardware stack levels required when called: 2
  2043 ;; This function calls:
  2044 ;;		Nothing
  2045 ;; This function is called by:
  2046 ;;		_sendChar
  2047 ;; This function uses a non-reentrant model
  2048 ;;
  2049                           
  2050                           	psect	text6
  2051  0000C2                     __ptext6:
  2052                           	callstack 0
  2053  0000C2                     _btSendByte:
  2054                           	callstack 26
  2055                           
  2056                           ;incstack = 0
  2057                           ;btSendByte@byte stored from wreg
  2058  0000C2  6E5E               	movwf	btSendByte@byte^0,c
  2059                           
  2060                           ;SIO.c: 122:     stateTX = 1;
  2061  0000C4  0E01               	movlw	1
  2062  0000C6  6E24               	movwf	_stateTX^0,c
  2063                           
  2064                           ;SIO.c: 123:     dataTX = byte;
  2065  0000C8  C05E  F022         	movff	btSendByte@byte,_dataTX
  2066  0000CC  0C01               	retlw	1	;funcret
  2067  0000CE                     __end_of_btSendByte:
  2068                           	callstack 0
  2069                           
  2070 ;; *************** function _btAvailable *****************
  2071 ;; Defined at:
  2072 ;;		line 118 in file "SIO.c"
  2073 ;; Parameters:    Size  Location     Type
  2074 ;;		None
  2075 ;; Auto vars:     Size  Location     Type
  2076 ;;		None
  2077 ;; Return value:  Size  Location     Type
  2078 ;;                  1    wreg      unsigned char 
  2079 ;; Registers used:
  2080 ;;		wreg, status,2
  2081 ;; Tracked objects:
  2082 ;;		On entry : 0/0
  2083 ;;		On exit  : 0/0
  2084 ;;		Unchanged: 0/0
  2085 ;; Data sizes:     COMRAM   BANK0   BANK1
  2086 ;;      Params:         0       0       0
  2087 ;;      Locals:         0       0       0
  2088 ;;      Temps:          0       0       0
  2089 ;;      Totals:         0       0       0
  2090 ;;Total ram usage:        0 bytes
  2091 ;; Hardware stack levels used: 1
  2092 ;; Hardware stack levels required when called: 2
  2093 ;; This function calls:
  2094 ;;		Nothing
  2095 ;; This function is called by:
  2096 ;;		_timeMotor
  2097 ;; This function uses a non-reentrant model
  2098 ;;
  2099                           
  2100                           	psect	text7
  2101  00011C                     __ptext7:
  2102                           	callstack 0
  2103  00011C                     _btAvailable:
  2104                           	callstack 27
  2105                           
  2106                           ;SIO.c: 119:     return stateTX == 0;
  2107                           
  2108                           ;incstack = 0
  2109  00011C  5024               	movf	_stateTX^0,w,c
  2110  00011E  B4D8               	btfsc	status,2,c
  2111  000120  0C01               	retlw	1
  2112  000122  0C00               	retlw	0	;funcret
  2113  000124                     __end_of_btAvailable:
  2114                           	callstack 0
  2115                           
  2116 ;; *************** function _menuMotor *****************
  2117 ;; Defined at:
  2118 ;;		line 39 in file "Menu.c"
  2119 ;; Parameters:    Size  Location     Type
  2120 ;;		None
  2121 ;; Auto vars:     Size  Location     Type
  2122 ;;		None
  2123 ;; Return value:  Size  Location     Type
  2124 ;;                  1    wreg      void 
  2125 ;; Registers used:
  2126 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2127 ;; Tracked objects:
  2128 ;;		On entry : 0/0
  2129 ;;		On exit  : 0/0
  2130 ;;		Unchanged: 0/0
  2131 ;; Data sizes:     COMRAM   BANK0   BANK1
  2132 ;;      Params:         0       0       0
  2133 ;;      Locals:         0       0       0
  2134 ;;      Temps:          2       0       0
  2135 ;;      Totals:         2       0       0
  2136 ;;Total ram usage:        2 bytes
  2137 ;; Hardware stack levels used: 1
  2138 ;; Hardware stack levels required when called: 7
  2139 ;; This function calls:
  2140 ;;		_CantaIR
  2141 ;;		_DaFindUser
  2142 ;;		_DaGetIdle
  2143 ;;		_DaGetNumScores
  2144 ;;		_DaGetStatus
  2145 ;;		_DaSaveScore
  2146 ;;		_DaSaveUser
  2147 ;;		_JoDirection
  2148 ;;		_JoMoved
  2149 ;;		_JoSetMode
  2150 ;;		_KeGetCharValue
  2151 ;;		_KeGetGenericValue
  2152 ;;		_KeSetMode
  2153 ;;		_LcCursorOff
  2154 ;;		_LcCursorOn
  2155 ;;		_LcGotoXY
  2156 ;;		_LcPutChar
  2157 ;;		_SiIsAvailable
  2158 ;;		_SiReadByte
  2159 ;;		_SiRecievedByte
  2160 ;;		_SiSendChar
  2161 ;;		_TiGetTics
  2162 ;;		_TiResetTics
  2163 ;;		___lbdiv
  2164 ;;		___lbmod
  2165 ;;		_displayError
  2166 ;;		_displayLogOut
  2167 ;;		_displayResults
  2168 ;;		_displayScoresMarquee
  2169 ;;		_displayString
  2170 ;;		_displaySysTime
  2171 ;;		_displayTimeRemaining
  2172 ;;		_getPresses
  2173 ;;		_incrementPosition
  2174 ;;		_isPressed
  2175 ;;		_mainMenu
  2176 ;;		_modifyTime
  2177 ;;		_resetDisplay
  2178 ;;		_resetPosition
  2179 ;;		_resetTimer
  2180 ;;		_startTimer
  2181 ;;		_stopTimer
  2182 ;;		_timerOver
  2183 ;; This function is called by:
  2184 ;;		_main
  2185 ;; This function uses a non-reentrant model
  2186 ;;
  2187                           
  2188                           	psect	text8
  2189  0002D0                     __ptext8:
  2190                           	callstack 0
  2191  0002D0                     _menuMotor:
  2192                           	callstack 23
  2193                           
  2194                           ;Menu.c: 40:     static char state = 1;;Menu.c: 41:     switch (state){
  2195                           
  2196                           ;incstack = 0
  2197  0002D0  D2D3               	goto	l6805
  2198  0002D2                     l6325:
  2199                           
  2200                           ;Menu.c: 43:             mUser.username[pos] = '\0';
  2201  0002D2  DB46               	call	PL44	;call to abstracted procedure
  2202  0002D4  6ADF               	clrf	indf2,c
  2203                           
  2204                           ;Menu.c: 44:             mUser.password[pos] = '\0';
  2205  0002D6  DB49               	call	PL48	;call to abstracted procedure
  2206  0002D8  6ADF               	clrf	indf2,c
  2207                           
  2208                           ;Menu.c: 45:             pos++;
  2209  0002DA  2A30               	incf	_pos^0,f,c
  2210                           
  2211                           ;Menu.c: 46:             if (val == 9){
  2212  0002DC  0E09               	movlw	9
  2213  0002DE  1831               	xorwf	_val^0,w,c
  2214  0002E0  E105               	bnz	l6337
  2215                           
  2216                           ;Menu.c: 47:                 state = 1;
  2217  0002E2  0E01               	movlw	1
  2218  0002E4  6E79               	movwf	menuMotor@state^0,c
  2219                           
  2220                           ;Menu.c: 48:                 resetDisplay();
  2221  0002E6  EC6C  F000         	call	_resetDisplay	;wreg free
  2222                           
  2223                           ;Menu.c: 49:                 pos = 0;
  2224  0002EA  6A30               	clrf	_pos^0,c
  2225  0002EC                     l6337:
  2226                           
  2227                           ;Menu.c: 52:             displayString(&LOGINMENU[LCDrow]);
  2228  0002EC  5034               	movf	_LCDrow^0,w,c
  2229  0002EE  0D0B               	mullw	11
  2230  0002F0  50F3               	movf	243,w,c
  2231  0002F2  0FA8               	addlw	low _LOGINMENU
  2232  0002F4  6E6C               	movwf	displayString@string^0,c
  2233  0002F6  ECD1  F00E         	call	_displayString	;wreg free
  2234                           
  2235                           ;Menu.c: 53:             if (LCDrow == 2){
  2236  0002FA  0E02               	movlw	2
  2237  0002FC  1834               	xorwf	_LCDrow^0,w,c
  2238  0002FE  A4D8               	btfss	status,2,c
  2239  000300  0012               	return	
  2240                           
  2241                           ;Menu.c: 54:                 LcCursorOff();
  2242  000302  EC7B  F000         	call	_LcCursorOff	;wreg free
  2243                           
  2244                           ;Menu.c: 55:                 KeSetMode(0);
  2245  000306  0E00               	movlw	0
  2246  000308  EC35  F00F         	call	_KeSetMode
  2247                           
  2248                           ;Menu.c: 56:                 state = 2;
  2249  00030C  0E02               	movlw	2
  2250  00030E  6E79               	movwf	menuMotor@state^0,c
  2251                           
  2252                           ;Menu.c: 58:             break;
  2253                           
  2254                           ;Menu.c: 57:             }
  2255  000310  0C02               	retlw	2
  2256  000312                     l6345:
  2257                           
  2258                           ;Menu.c: 60:             if (isPressed()){
  2259  000312  ECEF  F00F         	call	_isPressed	;wreg free
  2260  000316  0900               	iorlw	0
  2261  000318  B4D8               	btfsc	status,2,c
  2262  00031A  0012               	return	
  2263                           
  2264                           ;Menu.c: 61:                 val = KeGetGenericValue() - '0';
  2265  00031C  EC8B  F00F         	call	_KeGetGenericValue	;wreg free
  2266  000320  0FD0               	addlw	208
  2267  000322  6E31               	movwf	_val^0,c
  2268                           
  2269                           ;Menu.c: 62:                 if (val == 1||val == 2){
  2270  000324  0431               	decf	_val^0,w,c
  2271  000326  E004               	bz	u5890
  2272  000328  0E02               	movlw	2
  2273  00032A  1831               	xorwf	_val^0,w,c
  2274  00032C  A4D8               	btfss	status,2,c
  2275  00032E  0012               	return	
  2276  000330                     u5890:
  2277                           
  2278                           ;Menu.c: 63:                     resetDisplay();
  2279  000330  EC6C  F000         	call	_resetDisplay	;wreg free
  2280                           
  2281                           ;Menu.c: 64:                     KeSetMode(1);
  2282  000334  0E01               	movlw	1
  2283  000336  EC35  F00F         	call	_KeSetMode
  2284                           
  2285                           ;Menu.c: 65:                     state = 3;
  2286  00033A  0E03               	movlw	3
  2287  00033C  6E79               	movwf	menuMotor@state^0,c
  2288  00033E  0C03               	retlw	3
  2289  000340                     l6357:
  2290                           
  2291                           ;Menu.c: 71:             displayString(&LOGREGSCREEN[LCDrow]);
  2292  000340  5034               	movf	_LCDrow^0,w,c
  2293  000342  0D06               	mullw	6
  2294  000344  50F3               	movf	243,w,c
  2295  000346  0FE9               	addlw	low _LOGREGSCREEN
  2296  000348  6E6C               	movwf	displayString@string^0,c
  2297  00034A  ECD1  F00E         	call	_displayString	;wreg free
  2298                           
  2299                           ;Menu.c: 72:             if (LCDrow == 2){
  2300  00034E  0E02               	movlw	2
  2301  000350  1834               	xorwf	_LCDrow^0,w,c
  2302  000352  A4D8               	btfss	status,2,c
  2303  000354  0012               	return	
  2304                           
  2305                           ;Menu.c: 73:                 LCDrow = 0;
  2306  000356  6A34               	clrf	_LCDrow^0,c
  2307                           
  2308                           ;Menu.c: 74:                 LCDcol = 5;
  2309                           
  2310                           ;Menu.c: 75:                 LcGotoXY(LCDcol,LCDrow);
  2311  000358  DB0D               	call	PL62	;call to abstracted procedure
  2312  00035A  ECA4  F00E         	call	_LcGotoXY
  2313                           
  2314                           ;Menu.c: 76:                 LcCursorOn();
  2315  00035E  EC76  F000         	call	_LcCursorOn	;wreg free
  2316                           
  2317                           ;Menu.c: 77:                 state = 4;
  2318  000362  0E04               	movlw	4
  2319  000364  6E79               	movwf	menuMotor@state^0,c
  2320                           
  2321                           ;Menu.c: 78:                 pos = 0;
  2322  000366  6A30               	clrf	_pos^0,c
  2323  000368  0012               	return	
  2324  00036A                     l6371:
  2325                           
  2326                           ;Menu.c: 82:             if (LCDcol >= 12 && TiGetTics(timer) >= 1200){
  2327  00036A  0E0B               	movlw	11
  2328  00036C  6433               	cpfsgt	_LCDcol^0,c
  2329  00036E  D00B               	goto	l6377
  2330  000370  5035               	movf	_timer^0,w,c
  2331  000372  EC22  F00F         	call	_TiGetTics
  2332  000376  BE5F               	btfsc	(?_TiGetTics+1)^0,7,c
  2333  000378  D006               	goto	l6377
  2334  00037A  ECDC  F008         	call	PL30	;call to abstracted procedure
  2335  00037E  E303               	bnc	l6377
  2336  000380                     u5920:
  2337                           
  2338                           ;Menu.c: 83:                 state = 5;
  2339  000380  0E05               	movlw	5
  2340  000382  6E79               	movwf	menuMotor@state^0,c
  2341                           
  2342                           ;Menu.c: 84:             }else if (isPressed()){
  2343  000384  0C05               	retlw	5
  2344  000386                     l6377:
  2345  000386  ECEF  F00F         	call	_isPressed	;wreg free
  2346  00038A  0900               	iorlw	0
  2347  00038C  B4D8               	btfsc	status,2,c
  2348  00038E  0012               	return	
  2349                           
  2350                           ;Menu.c: 85:                 TiResetTics(timer);
  2351  000390  5035               	movf	_timer^0,w,c
  2352  000392  ECAB  F00F         	call	_TiResetTics
  2353                           
  2354                           ;Menu.c: 86:                 if (getPresses() == 2){
  2355  000396  ECBE  F000         	call	_getPresses	;wreg free
  2356  00039A  0A02               	xorlw	2
  2357  00039C  E104               	bnz	l6387
  2358                           
  2359                           ;Menu.c: 87:                     LcGotoXY(LCDcol,LCDrow);
  2360  00039E  DAF0               	call	PL66	;call to abstracted procedure
  2361  0003A0  ECA4  F00E         	call	_LcGotoXY
  2362                           
  2363                           ;Menu.c: 88:                     LCDcol--;
  2364  0003A4  0633               	decf	_LCDcol^0,f,c
  2365  0003A6                     l6387:
  2366                           
  2367                           ;Menu.c: 90:                 if (KeGetGenericValue() != '#'){
  2368  0003A6  EC8B  F00F         	call	_KeGetGenericValue	;wreg free
  2369  0003AA  0A23               	xorlw	35
  2370  0003AC  E0E9               	bz	u5920
  2371                           
  2372                           ;Menu.c: 91:                     mUser.username[pos] = KeGetCharValue();
  2373  0003AE  DAD8               	call	PL44	;call to abstracted procedure
  2374  0003B0  EC9E  F000         	call	_KeGetCharValue	;wreg free
  2375  0003B4  6EDF               	movwf	indf2,c
  2376                           
  2377                           ;Menu.c: 92:                     LcPutChar(mUser.username[pos]);
  2378  0003B6  5030               	movf	_pos^0,w,c
  2379  0003B8  DACE               	call	PL34	;call to abstracted procedure
  2380  0003BA  ECE6  F00E         	call	_LcPutChar
  2381  0003BE                     l6393:
  2382                           
  2383                           ;Menu.c: 93:                     LCDcol++;
  2384  0003BE  2A33               	incf	_LCDcol^0,f,c
  2385                           
  2386                           ;Menu.c: 94:                     pos++;
  2387  0003C0  2A30               	incf	_pos^0,f,c
  2388                           
  2389                           ;Menu.c: 97:                 } else {
  2390  0003C2  0012               	return	
  2391  0003C4                     l6399:
  2392                           
  2393                           ;Menu.c: 105:             mUser.username[pos] = '\0';
  2394  0003C4  DACD               	call	PL44	;call to abstracted procedure
  2395  0003C6  0E00               	movlw	0
  2396  0003C8  6EDF               	movwf	indf2,c
  2397                           
  2398                           ;Menu.c: 106:             LCDrow = 1;
  2399  0003CA  0E01               	movlw	1
  2400  0003CC  6E34               	movwf	_LCDrow^0,c
  2401                           
  2402                           ;Menu.c: 107:             LCDcol = 5;
  2403                           
  2404                           ;Menu.c: 108:             LcGotoXY(LCDcol,LCDrow);
  2405  0003CE  DAD2               	call	PL62	;call to abstracted procedure
  2406  0003D0  ECA4  F00E         	call	_LcGotoXY
  2407                           
  2408                           ;Menu.c: 109:             state = 6;
  2409  0003D4  0E06               	movlw	6
  2410  0003D6  D7C6               	goto	L1
  2411  0003D8                     l6411:
  2412                           
  2413                           ;Menu.c: 113:             if (isPressed()){
  2414  0003D8  ECEF  F00F         	call	_isPressed	;wreg free
  2415  0003DC  0900               	iorlw	0
  2416  0003DE  B4D8               	btfsc	status,2,c
  2417  0003E0  0012               	return	
  2418                           
  2419                           ;Menu.c: 114:                 if (getPresses() == 2){
  2420  0003E2  ECBE  F000         	call	_getPresses	;wreg free
  2421  0003E6  0A02               	xorlw	2
  2422  0003E8  E104               	bnz	l6419
  2423                           
  2424                           ;Menu.c: 115:                     LcGotoXY(LCDcol,LCDrow);
  2425  0003EA  DACA               	call	PL66	;call to abstracted procedure
  2426  0003EC  ECA4  F00E         	call	_LcGotoXY
  2427                           
  2428                           ;Menu.c: 116:                     LCDcol--;
  2429  0003F0  0633               	decf	_LCDcol^0,f,c
  2430  0003F2                     l6419:
  2431                           
  2432                           ;Menu.c: 119:                 if (KeGetGenericValue() != '#'){
  2433  0003F2  EC8B  F00F         	call	_KeGetGenericValue	;wreg free
  2434  0003F6  0A23               	xorlw	35
  2435  0003F8  E00B               	bz	l6429
  2436                           
  2437                           ;Menu.c: 120:                     mUser.password[pos] = KeGetCharValue();
  2438  0003FA  DAB7               	call	PL48	;call to abstracted procedure
  2439  0003FC  EC9E  F000         	call	_KeGetCharValue	;wreg free
  2440  000400  6EDF               	movwf	indf2,c
  2441                           
  2442                           ;Menu.c: 121:                     LcPutChar(mUser.password[pos]);
  2443  000402  5030               	movf	_pos^0,w,c
  2444  000404  0F50               	addlw	low (_mUser+9)
  2445  000406  ECDE  F00E         	call	PL36	;call to abstracted procedure
  2446  00040A  ECE6  F00E         	call	_LcPutChar
  2447  00040E  D7D7               	goto	l6393
  2448  000410                     l6429:
  2449                           
  2450                           ;Menu.c: 125:                     mUser.password[pos] = '\0';
  2451  000410  DAAC               	call	PL48	;call to abstracted procedure
  2452  000412  6ADF               	clrf	indf2,c
  2453                           
  2454                           ;Menu.c: 126:                     pos = 0;
  2455  000414  6A30               	clrf	_pos^0,c
  2456                           
  2457                           ;Menu.c: 127:                     state = 7;
  2458  000416  0E07               	movlw	7
  2459  000418  6E79               	movwf	menuMotor@state^0,c
  2460  00041A  0C07               	retlw	7
  2461  00041C                     l6435:
  2462                           
  2463                           ;Menu.c: 133:             if (val == 1){
  2464  00041C  0431               	decf	_val^0,w,c
  2465  00041E  E105               	bnz	l6439
  2466                           
  2467                           ;Menu.c: 134:                 DaFindUser(&mUser);
  2468  000420  0E47               	movlw	low _mUser
  2469  000422  6E6B               	movwf	DaFindUser@logUser^0,c
  2470  000424  ECD6  F00F         	call	_DaFindUser	;wreg free
  2471                           
  2472                           ;Menu.c: 136:             } else {
  2473  000428  D004               	goto	l6441
  2474  00042A                     l6439:
  2475                           
  2476                           ;Menu.c: 137:                 DaSaveUser(&mUser);
  2477  00042A  0E47               	movlw	low _mUser
  2478  00042C  6E5E               	movwf	DaSaveUser@regUser^0,c
  2479  00042E  EC31  F000         	call	_DaSaveUser	;wreg free
  2480  000432                     l6441:
  2481                           
  2482                           ;Menu.c: 139:             state = 8;
  2483  000432  0E08               	movlw	8
  2484  000434  6E79               	movwf	menuMotor@state^0,c
  2485                           
  2486                           ;Menu.c: 140:             break;
  2487  000436  0C08               	retlw	8
  2488  000438                     l6443:
  2489                           
  2490                           ;Menu.c: 142:             if (DaGetIdle()){
  2491  000438  ECA6  F000         	call	_DaGetIdle	;wreg free
  2492  00043C  0900               	iorlw	0
  2493  00043E  B4D8               	btfsc	status,2,c
  2494  000440  0012               	return	
  2495                           
  2496                           ;Menu.c: 143:                 if (val == 1){
  2497  000442  0431               	decf	_val^0,w,c
  2498  000444  E117               	bnz	l6459
  2499                           
  2500                           ;Menu.c: 144:                     resetDisplay();
  2501  000446  EC6C  F000         	call	_resetDisplay	;wreg free
  2502                           
  2503                           ;Menu.c: 145:                     KeSetMode(0);
  2504  00044A  0E00               	movlw	0
  2505  00044C  EC35  F00F         	call	_KeSetMode
  2506                           
  2507                           ;Menu.c: 146:                     if (DaGetStatus() == 0){
  2508  000450  ECC6  F000         	call	_DaGetStatus	;wreg free
  2509  000454  0900               	iorlw	0
  2510  000456  E105               	bnz	l6455
  2511                           
  2512                           ;Menu.c: 148:                         state = 9;
  2513  000458  0E09               	movlw	9
  2514  00045A  6E79               	movwf	menuMotor@state^0,c
  2515                           
  2516                           ;Menu.c: 149:                         val =0;
  2517  00045C  6A31               	clrf	_val^0,c
  2518                           
  2519                           ;Menu.c: 150:                     } else if (DaGetStatus() == 1){
  2520  00045E  EF6C  F000         	goto	_resetDisplay
  2521  000462                     l6455:
  2522  000462  ECC6  F000         	call	_DaGetStatus	;wreg free
  2523  000466  06E8               	decf	wreg,f,c
  2524  000468  E002 EF6C  F000    	bnz	_resetDisplay
  2525  00046E                     u6030:
  2526                           
  2527                           ;Menu.c: 151:                         state = 0;
  2528  00046E  6A79               	clrf	menuMotor@state^0,c
  2529  000470  EF6C  F000         	goto	_resetDisplay
  2530  000474                     l6459:
  2531                           
  2532                           ;Menu.c: 155:                     if (DaGetStatus() == 3){
  2533  000474  ECC6  F000         	call	_DaGetStatus	;wreg free
  2534  000478  0A03               	xorlw	3
  2535  00047A  E109               	bnz	l6467
  2536                           
  2537                           ;Menu.c: 156:                         KeSetMode(1);
  2538  00047C  0E01               	movlw	1
  2539  00047E  EC35  F00F         	call	_KeSetMode
  2540                           
  2541                           ;Menu.c: 157:                         state = 3;
  2542  000482  0E03               	movlw	3
  2543  000484  6E79               	movwf	menuMotor@state^0,c
  2544                           
  2545                           ;Menu.c: 158:                         val = 1;
  2546  000486  0E01               	movlw	1
  2547  000488  6E31               	movwf	_val^0,c
  2548                           
  2549                           ;Menu.c: 159:                     } else if (DaGetStatus() == 4){
  2550  00048A  EF6C  F000         	goto	_resetDisplay
  2551  00048E                     l6467:
  2552  00048E  ECC6  F000         	call	_DaGetStatus	;wreg free
  2553  000492  0A04               	xorlw	4
  2554  000494  E002 EF6C  F000    	bnz	_resetDisplay
  2555                           
  2556                           ;Menu.c: 160:                         KeSetMode(0);
  2557  00049A  0E00               	movlw	0
  2558  00049C  EC35  F00F         	call	_KeSetMode
  2559  0004A0  D7E6               	goto	u6030
  2560  0004A2                     l6473:
  2561                           
  2562                           ;Menu.c: 169:             mainMenu();
  2563  0004A2  EC66  F00B         	call	_mainMenu	;wreg free
  2564                           
  2565                           ;Menu.c: 170:             if (LCDrow == 2 || LCDrow+val >= 5){
  2566  0004A6  0E02               	movlw	2
  2567  0004A8  1834               	xorwf	_LCDrow^0,w,c
  2568  0004AA  E00F               	bz	u6070
  2569  0004AC  5031               	movf	_val^0,w,c
  2570  0004AE  C034  F06E         	movff	_LCDrow,??_menuMotor
  2571  0004B2  6A6F               	clrf	(??_menuMotor+1)^0,c
  2572  0004B4  266E               	addwf	??_menuMotor^0,f,c
  2573  0004B6  0E00               	movlw	0
  2574  0004B8  226F               	addwfc	(??_menuMotor+1)^0,f,c
  2575  0004BA  BE6F               	btfsc	(??_menuMotor+1)^0,7,c
  2576  0004BC  0C00               	retlw	0
  2577  0004BE  506F               	movf	(??_menuMotor+1)^0,w,c
  2578  0004C0  E104               	bnz	u6070
  2579  0004C2  0E05               	movlw	5
  2580  0004C4  5C6E               	subwf	??_menuMotor^0,w,c
  2581  0004C6  A0D8               	btfss	status,0,c
  2582  0004C8  0012               	return	
  2583  0004CA                     u6070:
  2584                           
  2585                           ;Menu.c: 171:                 LcCursorOff();
  2586  0004CA  EC7B  F000         	call	_LcCursorOff	;wreg free
  2587                           
  2588                           ;Menu.c: 172:                 state = 10;
  2589  0004CE  0E0A               	movlw	10
  2590  0004D0  6E79               	movwf	menuMotor@state^0,c
  2591  0004D2  0C0A               	retlw	10
  2592  0004D4                     l6483:
  2593                           
  2594                           ;Menu.c: 176:             if (!JoMoved()){
  2595  0004D4  ECC2  F000         	call	_JoMoved	;wreg free
  2596  0004D8  0900               	iorlw	0
  2597  0004DA  A4D8               	btfss	status,2,c
  2598  0004DC  0012               	return	
  2599                           
  2600                           ;Menu.c: 177:                 state = 11;
  2601  0004DE  0E0B               	movlw	11
  2602  0004E0  D0AF               	goto	L4
  2603  0004E2                     l6487:
  2604                           
  2605                           ;Menu.c: 178:                 TiResetTics(timer);
  2606  0004E2  5035               	movf	_timer^0,w,c
  2607  0004E4  EFAB  F00F         	goto	_TiResetTics
  2608  0004E8                     l6489:
  2609                           
  2610                           ;Menu.c: 182:             if (val < 4 && val > 0){
  2611  0004E8  0E04               	movlw	4
  2612  0004EA  6031               	cpfslt	_val^0,c
  2613  0004EC  D018               	goto	l538
  2614  0004EE  5031               	movf	_val^0,w,c
  2615  0004F0  E016               	bz	l538
  2616                           
  2617                           ;Menu.c: 183:                 if (TiGetTics(timer) >= 600){
  2618  0004F2  5035               	movf	_timer^0,w,c
  2619  0004F4  EC22  F00F         	call	_TiGetTics
  2620  0004F8  BE5F               	btfsc	(?_TiGetTics+1)^0,7,c
  2621  0004FA  D012               	goto	l6503
  2622  0004FC  0E58               	movlw	88
  2623  0004FE  5C5E               	subwf	?_TiGetTics^0,w,c
  2624  000500  0E02               	movlw	2
  2625  000502  585F               	subwfb	(?_TiGetTics+1)^0,w,c
  2626  000504  E30D               	bnc	l6503
  2627                           
  2628                           ;Menu.c: 184:                     LCDcolm++;
  2629  000506  2A32               	incf	_LCDcolm^0,f,c
  2630                           
  2631                           ;Menu.c: 185:                     LCDcolm = LCDcolm % MAINMENUSIZE[2];
  2632  000508  C074  F05E         	movff	_MAINMENUSIZE+2,___lbmod@divisor
  2633  00050C  5032               	movf	_LCDcolm^0,w,c
  2634  00050E  EC0F  F00F         	call	___lbmod
  2635  000512  6E32               	movwf	_LCDcolm^0,c
  2636                           
  2637                           ;Menu.c: 186:                     state = 9;
  2638  000514  0E09               	movlw	9
  2639  000516  6E79               	movwf	menuMotor@state^0,c
  2640                           
  2641                           ;Menu.c: 187:                     resetDisplay();
  2642  000518  EC6C  F000         	call	_resetDisplay	;wreg free
  2643  00051C  D001               	goto	l6503
  2644  00051E                     l538:
  2645                           
  2646                           ;Menu.c: 190:                 LCDcolm = 0;
  2647  00051E  6A32               	clrf	_LCDcolm^0,c
  2648  000520                     l6503:
  2649                           
  2650                           ;Menu.c: 192:             if (JoMoved()){
  2651  000520  ECC2  F000         	call	_JoMoved	;wreg free
  2652  000524  0900               	iorlw	0
  2653  000526  E012               	bz	l6521
  2654                           
  2655                           ;Menu.c: 193:                 if (JoDirection() == 'S' && val < 4){
  2656  000528  ECC4  F000         	call	_JoDirection	;wreg free
  2657  00052C  0A53               	xorlw	83
  2658  00052E  E105               	bnz	l6511
  2659  000530  0E04               	movlw	4
  2660  000532  6031               	cpfslt	_val^0,c
  2661  000534  D002               	goto	l6511
  2662                           
  2663                           ;Menu.c: 194:                     val++;
  2664  000536  2A31               	incf	_val^0,f,c
  2665                           
  2666                           ;Menu.c: 195:                 } else if(JoDirection() == 'W' && val > 0){
  2667  000538  D007               	goto	l6517
  2668  00053A                     l6511:
  2669  00053A  ECC4  F000         	call	_JoDirection	;wreg free
  2670  00053E  0A57               	xorlw	87
  2671  000540  E103               	bnz	l6517
  2672  000542  5031               	movf	_val^0,w,c
  2673  000544  E001               	bz	l6517
  2674                           
  2675                           ;Menu.c: 196:                     val--;
  2676  000546  0631               	decf	_val^0,f,c
  2677  000548                     l6517:
  2678                           
  2679                           ;Menu.c: 198:                 state = 9;
  2680  000548  0E09               	movlw	9
  2681  00054A  D0BD               	goto	L3
  2682  00054C                     l6521:
  2683  00054C  ECEF  F00F         	call	_isPressed	;wreg free
  2684  000550  0900               	iorlw	0
  2685  000552  B4D8               	btfsc	status,2,c
  2686  000554  0012               	return	
  2687  000556  EC8B  F00F         	call	_KeGetGenericValue	;wreg free
  2688  00055A  0A23               	xorlw	35
  2689  00055C  A4D8               	btfss	status,2,c
  2690  00055E  0012               	return	
  2691                           
  2692                           ;Menu.c: 201:                 resetDisplay();
  2693  000560  EC6C  F000         	call	_resetDisplay	;wreg free
  2694                           
  2695                           ;Menu.c: 202:                 state = (val+1)*20;
  2696  000564  2831               	incf	_val^0,w,c
  2697  000566  0D14               	mullw	20
  2698  000568  CFF3 F079          	movff	prodl,menuMotor@state
  2699                           
  2700                           ;Menu.c: 203:                 resetPosition();
  2701  00056C  ECBA  F000         	call	_resetPosition	;wreg free
  2702                           
  2703                           ;Menu.c: 204:                 if (val == 0){
  2704  000570  5031               	movf	_val^0,w,c
  2705  000572  E102               	bnz	l6535
  2706                           
  2707                           ;Menu.c: 205:                     state = 12;
  2708  000574  0E0C               	movlw	12
  2709  000576  6E79               	movwf	menuMotor@state^0,c
  2710  000578                     l6535:
  2711                           
  2712                           ;Menu.c: 207:                 LCDcolm = 0;
  2713  000578  6A32               	clrf	_LCDcolm^0,c
  2714  00057A  0012               	return	
  2715  00057C                     l6537:
  2716                           
  2717                           ;Menu.c: 217:             if (SiIsAvailable()){
  2718  00057C  ECB5  F000         	call	_SiIsAvailable	;wreg free
  2719  000580  0900               	iorlw	0
  2720  000582  B4D8               	btfsc	status,2,c
  2721  000584  0012               	return	
  2722                           
  2723                           ;Menu.c: 218:                 SiSendChar(mUser.username[val]);
  2724  000586  5031               	movf	_val^0,w,c
  2725  000588  D9E6               	call	PL34	;call to abstracted procedure
  2726  00058A  ECAE  F000         	call	_SiSendChar
  2727                           
  2728                           ;Menu.c: 219:                 if (mUser.username[val] == '\0'){
  2729  00058E  5031               	movf	_val^0,w,c
  2730  000590  D9E2               	call	PL34	;call to abstracted procedure
  2731  000592  E103               	bnz	l6545
  2732                           
  2733                           ;Menu.c: 220:                     state = 13;
  2734  000594  0E0D               	movlw	13
  2735  000596  6E79               	movwf	menuMotor@state^0,c
  2736                           
  2737                           ;Menu.c: 221:                 } else {
  2738  000598  0C0D               	retlw	13
  2739  00059A                     l6545:
  2740                           
  2741                           ;Menu.c: 222:                     val++;
  2742  00059A  2A31               	incf	_val^0,f,c
  2743  00059C  0012               	return	
  2744  00059E                     l6547:
  2745                           
  2746                           ;Menu.c: 227:             if (SiRecievedByte()){
  2747  00059E  ECB2  F000         	call	_SiRecievedByte	;wreg free
  2748  0005A2  0900               	iorlw	0
  2749  0005A4  B4D8               	btfsc	status,2,c
  2750  0005A6  0012               	return	
  2751                           
  2752                           ;Menu.c: 228:                 val = SiReadByte();
  2753  0005A8  ECC0  F000         	call	_SiReadByte	;wreg free
  2754  0005AC  6E31               	movwf	_val^0,c
  2755                           
  2756                           ;Menu.c: 229:                 if (val == 'K'){
  2757  0005AE  0E4B               	movlw	75
  2758  0005B0  1831               	xorwf	_val^0,w,c
  2759  0005B2  A4D8               	btfss	status,2,c
  2760  0005B4  0012               	return	
  2761                           
  2762                           ;Menu.c: 230:                     state = 14;
  2763  0005B6  0E0E               	movlw	14
  2764  0005B8  6E79               	movwf	menuMotor@state^0,c
  2765                           
  2766                           ;Menu.c: 231:                     JoSetMode(1);
  2767  0005BA  0E01               	movlw	1
  2768  0005BC  ECA2  F000         	call	_JoSetMode
  2769  0005C0  EF6C  F000         	goto	_resetDisplay
  2770  0005C4                     l6559:
  2771                           
  2772                           ;Menu.c: 238:             displayString(&TIME);
  2773  0005C4  0EBE               	movlw	low _TIME
  2774  0005C6  6E6C               	movwf	displayString@string^0,c
  2775  0005C8  ECD1  F00E         	call	_displayString	;wreg free
  2776                           
  2777                           ;Menu.c: 239:             if (LCDrow == 1){
  2778  0005CC  0434               	decf	_LCDrow^0,w,c
  2779  0005CE  A4D8               	btfss	status,2,c
  2780  0005D0  0012               	return	
  2781                           
  2782                           ;Menu.c: 240:                 LcCursorOff();
  2783  0005D2  EC7B  F000         	call	_LcCursorOff	;wreg free
  2784                           
  2785                           ;Menu.c: 241:                 resetTimer();
  2786  0005D6  EC67  F000         	call	_resetTimer	;wreg free
  2787                           
  2788                           ;Menu.c: 242:                 startTimer();
  2789  0005DA  ECFB  F00F         	call	_startTimer	;wreg free
  2790  0005DE                     l6569:
  2791                           
  2792                           ;Menu.c: 243:                 state = 15;
  2793  0005DE  0E0F               	movlw	15
  2794  0005E0  6E79               	movwf	menuMotor@state^0,c
  2795  0005E2  0C0F               	retlw	15
  2796  0005E4                     l6571:
  2797                           
  2798                           ;Menu.c: 247:             if (timerOver()){
  2799  0005E4  EC92  F000         	call	_timerOver	;wreg free
  2800  0005E8  0900               	iorlw	0
  2801  0005EA  E006               	bz	l6577
  2802                           
  2803                           ;Menu.c: 248:                 JoSetMode(0);
  2804  0005EC  0E00               	movlw	0
  2805  0005EE  ECA2  F000         	call	_JoSetMode
  2806                           
  2807                           ;Menu.c: 249:                 state = 17;
  2808  0005F2  0E11               	movlw	17
  2809  0005F4  6E79               	movwf	menuMotor@state^0,c
  2810                           
  2811                           ;Menu.c: 250:             } else if (isPressed()){
  2812  0005F6  0C11               	retlw	17
  2813  0005F8                     l6577:
  2814  0005F8  ECEF  F00F         	call	_isPressed	;wreg free
  2815  0005FC  0900               	iorlw	0
  2816  0005FE  E017               	bz	l6595
  2817                           
  2818                           ;Menu.c: 251:                 val = KeGetGenericValue();
  2819  000600  EC8B  F00F         	call	_KeGetGenericValue	;wreg free
  2820  000604  6E31               	movwf	_val^0,c
  2821                           
  2822                           ;Menu.c: 252:                 if (val == '*' || val == '#'){
  2823  000606  0E2A               	movlw	42
  2824  000608  1831               	xorwf	_val^0,w,c
  2825  00060A  E003               	bz	u6280
  2826  00060C  0E23               	movlw	35
  2827  00060E  1831               	xorwf	_val^0,w,c
  2828  000610  E10B               	bnz	l6593
  2829  000612                     u6280:
  2830                           
  2831                           ;Menu.c: 253:                     if (val == '*'){
  2832  000612  0E2A               	movlw	42
  2833  000614  1831               	xorwf	_val^0,w,c
  2834  000616  A4D8               	btfss	status,2,c
  2835  000618  0012               	return	
  2836                           
  2837                           ;Menu.c: 254:                         JoSetMode(0);
  2838  00061A  0E00               	movlw	0
  2839  00061C  ECA2  F000         	call	_JoSetMode
  2840                           
  2841                           ;Menu.c: 255:                         state = 17;
  2842  000620  0E11               	movlw	17
  2843  000622  6E79               	movwf	menuMotor@state^0,c
  2844                           
  2845                           ;Menu.c: 256:                         stopTimer();
  2846  000624  EFB8  F000         	goto	_stopTimer	;wreg free
  2847  000628                     l6593:
  2848                           
  2849                           ;Menu.c: 259:                     state = 16;
  2850  000628  0E10               	movlw	16
  2851  00062A  6E79               	movwf	menuMotor@state^0,c
  2852  00062C  0C10               	retlw	16
  2853  00062E                     l6595:
  2854  00062E  ECB2  F000         	call	_SiRecievedByte	;wreg free
  2855  000632  0900               	iorlw	0
  2856  000634  B4D8               	btfsc	status,2,c
  2857  000636  0012               	return	
  2858                           
  2859                           ;Menu.c: 263:                 mScore = SiReadByte();
  2860  000638  ECC0  F000         	call	_SiReadByte	;wreg free
  2861  00063C  D01E               	goto	L5
  2862  00063E                     l6599:
  2863                           
  2864                           ;Menu.c: 264:                 state = 20;
  2865  00063E  0E14               	movlw	20
  2866  000640                     L4:
  2867  000640  6E79               	movwf	menuMotor@state^0,c
  2868  000642  D74F               	goto	l6487
  2869  000644                     l6603:
  2870                           
  2871                           ;Menu.c: 269:             if (SiIsAvailable()){
  2872  000644  ECB5  F000         	call	_SiIsAvailable	;wreg free
  2873  000648  0900               	iorlw	0
  2874  00064A  B4D8               	btfsc	status,2,c
  2875  00064C  0012               	return	
  2876                           
  2877                           ;Menu.c: 270:                 SiSendChar(val);
  2878  00064E  5031               	movf	_val^0,w,c
  2879  000650  ECAE  F000         	call	_SiSendChar
  2880  000654  D7C4               	goto	l6569
  2881  000656                     l6609:
  2882                           
  2883                           ;Menu.c: 275:             if (SiIsAvailable()){
  2884  000656  ECB5  F000         	call	_SiIsAvailable	;wreg free
  2885  00065A  0900               	iorlw	0
  2886  00065C  B4D8               	btfsc	status,2,c
  2887  00065E  0012               	return	
  2888                           
  2889                           ;Menu.c: 276:                 SiSendChar('F');
  2890  000660  0E46               	movlw	70
  2891  000662  ECAE  F000         	call	_SiSendChar
  2892                           
  2893                           ;Menu.c: 277:                 state = 18;
  2894  000666  0E12               	movlw	18
  2895  000668  6E79               	movwf	menuMotor@state^0,c
  2896  00066A  0C12               	retlw	18
  2897  00066C                     l6615:
  2898                           
  2899                           ;Menu.c: 281:             if (SiRecievedByte()){
  2900  00066C  ECB2  F000         	call	_SiRecievedByte	;wreg free
  2901  000670  0900               	iorlw	0
  2902  000672  B4D8               	btfsc	status,2,c
  2903  000674  0012               	return	
  2904                           
  2905                           ;Menu.c: 282:                 mScore = SiReadByte();
  2906  000676  ECC0  F000         	call	_SiReadByte	;wreg free
  2907  00067A                     L5:
  2908  00067A  6E2F               	movwf	_mScore^0,c
  2909  00067C  D7E0               	goto	l6599
  2910  00067E                     l6623:
  2911                           
  2912                           ;Menu.c: 288:             displayError();
  2913  00067E  EC3E  F00E         	call	_displayError	;wreg free
  2914                           
  2915                           ;Menu.c: 289:             if(LCDrow == 2){
  2916  000682  0E02               	movlw	2
  2917  000684  1834               	xorwf	_LCDrow^0,w,c
  2918  000686  A4D8               	btfss	status,2,c
  2919  000688  0012               	return	
  2920  00068A  D7D9               	goto	l6599
  2921  00068C                     l6631:
  2922                           
  2923                           ;Menu.c: 295:             if (TiGetTics(timer) >= 3600){
  2924  00068C  5035               	movf	_timer^0,w,c
  2925  00068E  EC22  F00F         	call	_TiGetTics
  2926  000692  BE5F               	btfsc	(?_TiGetTics+1)^0,7,c
  2927  000694  D004               	goto	l6637
  2928  000696  D978               	call	PL70	;call to abstracted procedure
  2929  000698  E302               	bnc	l6637
  2930                           
  2931                           ;Menu.c: 296:                 state = 22;
  2932  00069A  0E16               	movlw	22
  2933  00069C  D014               	goto	L3
  2934  00069E                     l6637:
  2935  00069E  ECB2  F000         	call	_SiRecievedByte	;wreg free
  2936  0006A2  0900               	iorlw	0
  2937  0006A4  B4D8               	btfsc	status,2,c
  2938  0006A6  0012               	return	
  2939                           
  2940                           ;Menu.c: 299:                 val = SiReadByte();
  2941  0006A8  ECC0  F000         	call	_SiReadByte	;wreg free
  2942  0006AC  6E31               	movwf	_val^0,c
  2943                           
  2944                           ;Menu.c: 300:                 state = 21;
  2945  0006AE  0E15               	movlw	21
  2946  0006B0  6E79               	movwf	menuMotor@state^0,c
  2947  0006B2  0C15               	retlw	21
  2948  0006B4                     l6643:
  2949                           
  2950                           ;Menu.c: 304:             if (SiRecievedByte()){
  2951  0006B4  ECB2  F000         	call	_SiRecievedByte	;wreg free
  2952  0006B8  0900               	iorlw	0
  2953  0006BA  B4D8               	btfsc	status,2,c
  2954  0006BC  0012               	return	
  2955                           
  2956                           ;Menu.c: 305:                 LCDcolm = SiReadByte();
  2957  0006BE  ECC0  F000         	call	_SiReadByte	;wreg free
  2958  0006C2  6E32               	movwf	_LCDcolm^0,c
  2959                           
  2960                           ;Menu.c: 306:                 state = 19;
  2961  0006C4  0E13               	movlw	19
  2962  0006C6                     L3:
  2963  0006C6  6E79               	movwf	menuMotor@state^0,c
  2964  0006C8  EF6C  F000         	goto	_resetDisplay
  2965  0006CC                     l6651:
  2966                           
  2967                           ;Menu.c: 311:             displayResults();
  2968  0006CC  ECFB  F00E         	call	_displayResults	;wreg free
  2969                           
  2970                           ;Menu.c: 312:             if(LCDrow == 2){
  2971  0006D0  0E02               	movlw	2
  2972  0006D2  1834               	xorwf	_LCDrow^0,w,c
  2973  0006D4  A4D8               	btfss	status,2,c
  2974  0006D6  0012               	return	
  2975                           
  2976                           ;Menu.c: 313:                 LcGotoXY(7,1);
  2977  0006D8  0E01               	movlw	1
  2978  0006DA  6E66               	movwf	LcGotoXY@Row^0,c
  2979  0006DC  0E07               	movlw	7
  2980  0006DE  ECA4  F00E         	call	_LcGotoXY
  2981                           
  2982                           ;Menu.c: 314:                 LcPutChar((mScore/10)+'0');
  2983  0006E2  0E0A               	movlw	10
  2984  0006E4  6E5E               	movwf	___lbdiv@divisor^0,c
  2985  0006E6  502F               	movf	_mScore^0,w,c
  2986  0006E8  EC72  F00E         	call	___lbdiv
  2987  0006EC  0F30               	addlw	48
  2988  0006EE  ECE6  F00E         	call	_LcPutChar
  2989                           
  2990                           ;Menu.c: 315:                 LcPutChar((mScore%10)+'0');
  2991  0006F2  0E0A               	movlw	10
  2992  0006F4  6E5E               	movwf	___lbmod@divisor^0,c
  2993  0006F6  502F               	movf	_mScore^0,w,c
  2994  0006F8  EC0F  F00F         	call	___lbmod
  2995  0006FC  0F30               	addlw	48
  2996  0006FE  ECE6  F00E         	call	_LcPutChar
  2997                           
  2998                           ;Menu.c: 316:                 displayTimeRemaining();
  2999  000702  EC3B  F000         	call	_displayTimeRemaining	;wreg free
  3000                           
  3001                           ;Menu.c: 317:                 state = 23;
  3002  000706  0E17               	movlw	23
  3003  000708  6E79               	movwf	menuMotor@state^0,c
  3004  00070A  0C17               	retlw	23
  3005  00070C                     l6659:
  3006                           
  3007                           ;Menu.c: 321:             if (isPressed() && KeGetGenericValue() == '#'){
  3008  00070C  ECEF  F00F         	call	_isPressed	;wreg free
  3009  000710  0900               	iorlw	0
  3010  000712  B4D8               	btfsc	status,2,c
  3011  000714  0012               	return	
  3012  000716  EC8B  F00F         	call	_KeGetGenericValue	;wreg free
  3013  00071A  0A23               	xorlw	35
  3014  00071C  A4D8               	btfss	status,2,c
  3015  00071E  0012               	return	
  3016                           
  3017                           ;Menu.c: 322:                 DaSaveScore(mScore);
  3018  000720  502F               	movf	_mScore^0,w,c
  3019  000722  EC58  F00E         	call	_DaSaveScore
  3020                           
  3021                           ;Menu.c: 323:                 state = 24;
  3022  000726  0E18               	movlw	24
  3023  000728  6E79               	movwf	menuMotor@state^0,c
  3024  00072A  0C18               	retlw	24
  3025  00072C                     l6667:
  3026                           
  3027                           ;Menu.c: 327:             if (DaGetIdle()){
  3028  00072C  ECA6  F000         	call	_DaGetIdle	;wreg free
  3029  000730  0900               	iorlw	0
  3030  000732  B4D8               	btfsc	status,2,c
  3031  000734  0012               	return	
  3032                           
  3033                           ;Menu.c: 328:                 state = 9;
  3034  000736  0E09               	movlw	9
  3035  000738  6E79               	movwf	menuMotor@state^0,c
  3036                           
  3037                           ;Menu.c: 329:                 resetDisplay();
  3038  00073A  EC6C  F000         	call	_resetDisplay	;wreg free
  3039                           
  3040                           ;Menu.c: 330:                 val = LCDcolm = 0;
  3041  00073E  6A32               	clrf	_LCDcolm^0,c
  3042  000740  6A31               	clrf	_val^0,c
  3043  000742  0012               	return	
  3044  000744                     l6675:
  3045                           
  3046                           ;Menu.c: 335:             displayString(&modifyTimeString);
  3047  000744  0EDC               	movlw	low _modifyTimeString
  3048  000746  6E6C               	movwf	displayString@string^0,c
  3049  000748  ECD1  F00E         	call	_displayString	;wreg free
  3050                           
  3051                           ;Menu.c: 336:             if(LCDrow == 1){
  3052  00074C  0434               	decf	_LCDrow^0,w,c
  3053  00074E  A4D8               	btfss	status,2,c
  3054  000750  0012               	return	
  3055                           
  3056                           ;Menu.c: 337:                 modifyTime();
  3057  000752  EC96  F000         	call	_modifyTime	;wreg free
  3058                           
  3059                           ;Menu.c: 338:                 state = 41;
  3060  000756  0E29               	movlw	41
  3061  000758  6E79               	movwf	menuMotor@state^0,c
  3062  00075A  0C29               	retlw	41
  3063  00075C                     l6683:
  3064                           
  3065                           ;Menu.c: 342:             if (isPressed()){
  3066  00075C  ECEF  F00F         	call	_isPressed	;wreg free
  3067  000760  0900               	iorlw	0
  3068  000762  B4D8               	btfsc	status,2,c
  3069  000764  0012               	return	
  3070                           
  3071                           ;Menu.c: 343:                 if(KeGetGenericValue() == '*' ){
  3072  000766  EC8B  F00F         	call	_KeGetGenericValue	;wreg free
  3073  00076A  0A2A               	xorlw	42
  3074  00076C  E105               	bnz	l6695
  3075  00076E                     u6440:
  3076                           
  3077                           ;Menu.c: 344:                     resetDisplay();
  3078  00076E  EC6C  F000         	call	_resetDisplay	;wreg free
  3079                           
  3080                           ;Menu.c: 345:                     LCDcolm = 0;
  3081                           
  3082                           ;Menu.c: 346:                     state = 9;
  3083  000772  D90F               	call	PL90	;call to abstracted procedure
  3084  000774                     l6693:
  3085                           
  3086                           ;Menu.c: 347:                     val =0;
  3087  000774  6A31               	clrf	_val^0,c
  3088                           
  3089                           ;Menu.c: 348:                 } else if (KeGetGenericValue() == '#'){
  3090  000776  0012               	return	
  3091  000778                     l6695:
  3092  000778  EC8B  F00F         	call	_KeGetGenericValue	;wreg free
  3093  00077C  0A23               	xorlw	35
  3094  00077E  E001 D70C          	bnz	l6545
  3095                           
  3096                           ;Menu.c: 349:                     if (val >= 4){
  3097  000782  0E03               	movlw	3
  3098  000784  6431               	cpfsgt	_val^0,c
  3099  000786  0C03               	retlw	3
  3100  000788  D7F2               	goto	u6440
  3101  00078A                     l6709:
  3102                           
  3103                           ;Menu.c: 362:             if (DaGetNumScores() == 0){
  3104  00078A  ECC8  F000         	call	_DaGetNumScores	;wreg free
  3105  00078E  0900               	iorlw	0
  3106  000790  E103               	bnz	l6713
  3107                           
  3108                           ;Menu.c: 363:                 state = 9;
  3109  000792  0E09               	movlw	9
  3110  000794  6E79               	movwf	menuMotor@state^0,c
  3111                           
  3112                           ;Menu.c: 364:             }else{
  3113  000796  0C09               	retlw	9
  3114  000798                     l6713:
  3115                           
  3116                           ;Menu.c: 366:                 displayScoresMarquee();
  3117  000798  EC9A  F000         	call	_displayScoresMarquee	;wreg free
  3118                           
  3119                           ;Menu.c: 367:                 state = 61;
  3120  00079C  0E3D               	movlw	61
  3121  00079E  6E79               	movwf	menuMotor@state^0,c
  3122                           
  3123                           ;Menu.c: 368:                 if (DaGetNumScores() == 1) state+=2;
  3124  0007A0  ECC8  F000         	call	_DaGetNumScores	;wreg free
  3125  0007A4  06E8               	decf	wreg,f,c
  3126  0007A6  A4D8               	btfss	status,2,c
  3127  0007A8  0012               	return	
  3128  0007AA  0E02               	movlw	2
  3129  0007AC  2679               	addwf	menuMotor@state^0,f,c
  3130  0007AE  0C02               	retlw	2
  3131  0007B0                     l6721:
  3132                           
  3133                           ;Menu.c: 373:             if (DaGetIdle()){
  3134  0007B0  ECA6  F000         	call	_DaGetIdle	;wreg free
  3135  0007B4  0900               	iorlw	0
  3136  0007B6  B4D8               	btfsc	status,2,c
  3137  0007B8  0012               	return	
  3138                           
  3139                           ;Menu.c: 374:                 state = 62;
  3140  0007BA  0E3E               	movlw	62
  3141  0007BC  D741               	goto	L4
  3142  0007BE                     l6727:
  3143                           
  3144                           ;Menu.c: 379:             state = 63;
  3145  0007BE  0E3F               	movlw	63
  3146  0007C0  6E79               	movwf	menuMotor@state^0,c
  3147                           
  3148                           ;Menu.c: 380:             if (TiGetTics(timer) >= 1200){
  3149  0007C2  5035               	movf	_timer^0,w,c
  3150  0007C4  EC22  F00F         	call	_TiGetTics
  3151  0007C8  BE5F               	btfsc	(?_TiGetTics+1)^0,7,c
  3152  0007CA  0012               	return	
  3153  0007CC  ECDC  F008         	call	PL30	;call to abstracted procedure
  3154  0007D0  A0D8               	btfss	status,0,c
  3155  0007D2  0012               	return	
  3156                           
  3157                           ;Menu.c: 381:                 CantaIR(0x10 | 0x08);
  3158  0007D4  0E18               	movlw	24
  3159  0007D6  ECBB  F00F         	call	_CantaIR
  3160                           
  3161                           ;Menu.c: 382:                 LCDcolm++;
  3162  0007DA  2A32               	incf	_LCDcolm^0,f,c
  3163                           
  3164                           ;Menu.c: 383:                 if (LCDcolm == 16){
  3165  0007DC  0E10               	movlw	16
  3166  0007DE  1832               	xorwf	_LCDcolm^0,w,c
  3167  0007E0  E001 D67F          	bnz	l6487
  3168                           
  3169                           ;Menu.c: 384:                     resetDisplay();
  3170  0007E4  EC6C  F000         	call	_resetDisplay	;wreg free
  3171                           
  3172                           ;Menu.c: 385:                     LCDcolm = 0;
  3173  0007E8  6A32               	clrf	_LCDcolm^0,c
  3174                           
  3175                           ;Menu.c: 386:                     state = 60;
  3176  0007EA  0E3C               	movlw	60
  3177  0007EC  6E79               	movwf	menuMotor@state^0,c
  3178                           
  3179                           ;Menu.c: 387:                     incrementPosition();
  3180  0007EE  ECBC  F000         	call	_incrementPosition	;wreg free
  3181  0007F2  D677               	goto	l6487
  3182  0007F4                     l6747:
  3183                           
  3184                           ;Menu.c: 394:             if (DaGetNumScores() > 1) state = 62;
  3185  0007F4  ECC8  F000         	call	_DaGetNumScores	;wreg free
  3186  0007F8  6E6E               	movwf	??_menuMotor^0,c
  3187  0007FA  0E01               	movlw	1
  3188  0007FC  646E               	cpfsgt	??_menuMotor^0,c
  3189  0007FE  D002               	goto	l6751
  3190  000800  0E3E               	movlw	62
  3191  000802  6E79               	movwf	menuMotor@state^0,c
  3192  000804                     l6751:
  3193                           
  3194                           ;Menu.c: 395:             if (isPressed() && KeGetGenericValue() == '#'){
  3195  000804  ECEF  F00F         	call	_isPressed	;wreg free
  3196  000808  0900               	iorlw	0
  3197  00080A  B4D8               	btfsc	status,2,c
  3198  00080C  0012               	return	
  3199  00080E  EC8B  F00F         	call	_KeGetGenericValue	;wreg free
  3200  000812  0A23               	xorlw	35
  3201  000814  E0AC               	bz	u6440
  3202  000816  0012               	return	
  3203  000818                     l6763:
  3204                           
  3205                           ;Menu.c: 405:             displayLogOut();
  3206  000818  ECE4  F00D         	call	_displayLogOut	;wreg free
  3207                           
  3208                           ;Menu.c: 406:             if (LCDrow == 1){
  3209  00081C  0434               	decf	_LCDrow^0,w,c
  3210  00081E  A4D8               	btfss	status,2,c
  3211  000820  0012               	return	
  3212                           
  3213                           ;Menu.c: 407:                 state = 81;
  3214  000822  0E51               	movlw	81
  3215  000824  D70D               	goto	L4
  3216  000826                     l6771:
  3217                           
  3218                           ;Menu.c: 412:             if (TiGetTics(timer) >= 3600){
  3219  000826  5035               	movf	_timer^0,w,c
  3220  000828  EC22  F00F         	call	_TiGetTics
  3221  00082C  BE5F               	btfsc	(?_TiGetTics+1)^0,7,c
  3222  00082E  0012               	return	
  3223  000830  D8AB               	call	PL70	;call to abstracted procedure
  3224  000832  A0D8               	btfss	status,0,c
  3225  000834  0012               	return	
  3226                           
  3227                           ;Menu.c: 413:                 state = 0;
  3228  000836  6A79               	clrf	menuMotor@state^0,c
  3229                           
  3230                           ;Menu.c: 414:                 resetDisplay();
  3231  000838  EC6C  F000         	call	_resetDisplay	;wreg free
  3232                           
  3233                           ;Menu.c: 415:                 LCDcolm = 0;
  3234  00083C  6A32               	clrf	_LCDcolm^0,c
  3235  00083E  D79A               	goto	l6693
  3236  000840                     l6781:
  3237                           
  3238                           ;Menu.c: 420:             displayString(&sysTime);
  3239  000840  0ECE               	movlw	low _sysTime
  3240  000842  6E6C               	movwf	displayString@string^0,c
  3241  000844  ECD1  F00E         	call	_displayString	;wreg free
  3242                           
  3243                           ;Menu.c: 421:             if(LCDrow == 1){
  3244  000848  0434               	decf	_LCDrow^0,w,c
  3245  00084A  A4D8               	btfss	status,2,c
  3246  00084C  0012               	return	
  3247                           
  3248                           ;Menu.c: 422:                 displaySysTime();
  3249  00084E  EC71  F000         	call	_displaySysTime	;wreg free
  3250                           
  3251                           ;Menu.c: 423:                 state = 101;
  3252  000852  0E65               	movlw	101
  3253  000854  6E79               	movwf	menuMotor@state^0,c
  3254  000856  0C65               	retlw	101
  3255  000858                     l6789:
  3256                           
  3257                           ;Menu.c: 427:             if (isPressed() && KeGetGenericValue() == '#'){
  3258  000858  ECEF  F00F         	call	_isPressed	;wreg free
  3259  00085C  0900               	iorlw	0
  3260  00085E  B4D8               	btfsc	status,2,c
  3261  000860  0012               	return	
  3262  000862  EC8B  F00F         	call	_KeGetGenericValue	;wreg free
  3263  000866  0A23               	xorlw	35
  3264  000868  A4D8               	btfss	status,2,c
  3265  00086A  0012               	return	
  3266                           
  3267                           ;Menu.c: 428:                 resetDisplay();
  3268  00086C  EC6C  F000         	call	_resetDisplay	;wreg free
  3269                           
  3270                           ;Menu.c: 429:                 LCDcolm = 0;
  3271                           
  3272                           ;Menu.c: 430:                 state = 9;
  3273  000870  D890               	call	PL90	;call to abstracted procedure
  3274                           
  3275                           ;Menu.c: 431:                 stopTimer();
  3276  000872  ECB8  F000         	call	_stopTimer	;wreg free
  3277  000876  D77E               	goto	l6693
  3278  000878                     l6805:
  3279  000878  5079               	movf	menuMotor@state^0,w,c
  3280  00087A  6E6E               	movwf	??_menuMotor^0,c
  3281  00087C  6A6F               	clrf	(??_menuMotor+1)^0,c
  3282                           
  3283                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3284                           ; Switch size 1, requested type "space"
  3285                           ; Number of cases is 1, Range of values is 0 to 0
  3286                           ; switch strategies available:
  3287                           ; Name         Instructions Cycles
  3288                           ; simple_byte            4     3 (average)
  3289                           ;	Chosen strategy is simple_byte
  3290  00087E  506F               	movf	(??_menuMotor+1)^0,w,c
  3291  000880  A4D8               	btfss	status,2,c
  3292  000882  0012               	return	
  3293                           
  3294                           ; Switch size 1, requested type "space"
  3295                           ; Number of cases is 35, Range of values is 0 to 101
  3296                           ; switch strategies available:
  3297                           ; Name         Instructions Cycles
  3298                           ; simple_byte          106    54 (average)
  3299                           ;	Chosen strategy is simple_byte
  3300  000884  506E               	movf	??_menuMotor^0,w,c
  3301  000886  E101 D524          	bz	l6325
  3302  00088A  0A01               	xorlw	1	; case 1
  3303  00088C  E101 D52E          	bz	l6337
  3304  000890  0A03               	xorlw	3	; case 2
  3305  000892  E101 D53E          	bz	l6345
  3306  000896  0A01               	xorlw	1	; case 3
  3307  000898  E101 D552          	bz	l6357
  3308  00089C  0A07               	xorlw	7	; case 4
  3309  00089E  E101 D564          	bz	l6371
  3310  0008A2  0A01               	xorlw	1	; case 5
  3311  0008A4  E101 D58E          	bz	l6399
  3312  0008A8  0A03               	xorlw	3	; case 6
  3313  0008AA  E101 D595          	bz	l6411
  3314  0008AE  0A01               	xorlw	1	; case 7
  3315  0008B0  E101 D5B4          	bz	l6435
  3316  0008B4  0A0F               	xorlw	15	; case 8
  3317  0008B6  E101 D5BF          	bz	l6443
  3318  0008BA  0A01               	xorlw	1	; case 9
  3319  0008BC  E101 D5F1          	bz	l6473
  3320  0008C0  0A03               	xorlw	3	; case 10
  3321  0008C2  E101 D607          	bz	l6483
  3322  0008C6  0A01               	xorlw	1	; case 11
  3323  0008C8  E101 D60E          	bz	l6489
  3324  0008CC  0A07               	xorlw	7	; case 12
  3325  0008CE  E101 D655          	bz	l6537
  3326  0008D2  0A01               	xorlw	1	; case 13
  3327  0008D4  E101 D663          	bz	l6547
  3328  0008D8  0A03               	xorlw	3	; case 14
  3329  0008DA  E101 D673          	bz	l6559
  3330  0008DE  0A01               	xorlw	1	; case 15
  3331  0008E0  E101 D680          	bz	l6571
  3332  0008E4  0A1F               	xorlw	31	; case 16
  3333  0008E6  E101 D6AD          	bz	l6603
  3334  0008EA  0A01               	xorlw	1	; case 17
  3335  0008EC  E101 D6B3          	bz	l6609
  3336  0008F0  0A03               	xorlw	3	; case 18
  3337  0008F2  E101 D6BB          	bz	l6615
  3338  0008F6  0A01               	xorlw	1	; case 19
  3339  0008F8  E101 D6C1          	bz	l6623
  3340  0008FC  0A07               	xorlw	7	; case 20
  3341  0008FE  E101 D6C5          	bz	l6631
  3342  000902  0A01               	xorlw	1	; case 21
  3343  000904  E101 D6D6          	bz	l6643
  3344  000908  0A03               	xorlw	3	; case 22
  3345  00090A  E101 D6DF          	bz	l6651
  3346  00090E  0A01               	xorlw	1	; case 23
  3347  000910  E101 D6FC          	bz	l6659
  3348  000914  0A0F               	xorlw	15	; case 24
  3349  000916  E101 D709          	bz	l6667
  3350  00091A  0A30               	xorlw	48	; case 40
  3351  00091C  E101 D712          	bz	l6675
  3352  000920  0A01               	xorlw	1	; case 41
  3353  000922  E101 D71B          	bz	l6683
  3354  000926  0A15               	xorlw	21	; case 60
  3355  000928  E101 D72F          	bz	l6709
  3356  00092C  0A01               	xorlw	1	; case 61
  3357  00092E  E101 D73F          	bz	l6721
  3358  000932  0A03               	xorlw	3	; case 62
  3359  000934  E101 D743          	bz	l6727
  3360  000938  0A01               	xorlw	1	; case 63
  3361  00093A  E101 D75B          	bz	l6747
  3362  00093E  0A6F               	xorlw	111	; case 80
  3363  000940  E101 D76A          	bz	l6763
  3364  000944  0A01               	xorlw	1	; case 81
  3365  000946  E101 D76E          	bz	l6771
  3366  00094A  0A35               	xorlw	53	; case 100
  3367  00094C  E101 D778          	bz	l6781
  3368  000950  0A01               	xorlw	1	; case 101
  3369  000952  E082               	bz	l6789
  3370  000954  0012               	return		;funcret
  3371  000956                     __end_of_menuMotor:
  3372                           	callstack 0
  3373  000956                     PL34:
  3374                           	callstack 23
  3375  000956  0F47               	addlw	low _mUser
  3376  000958  6ED9               	movwf	fsr2l,c
  3377  00095A  6ADA               	clrf	fsr2h,c
  3378  00095C  50DF               	movf	indf2,w,c
  3379  00095E  0012               	return	
  3380  000960                     __end_ofPL34:
  3381                           	callstack 0
  3382  000960                     PL44:
  3383                           	callstack 23
  3384  000960  5030               	movf	_pos^0,w,c
  3385  000962  0F47               	addlw	low _mUser
  3386  000964  6ED9               	movwf	fsr2l,c
  3387  000966  6ADA               	clrf	fsr2h,c
  3388  000968  0012               	return	
  3389  00096A                     __end_ofPL44:
  3390                           	callstack 0
  3391  00096A                     PL48:
  3392                           	callstack 23
  3393  00096A  5030               	movf	_pos^0,w,c
  3394  00096C  0F50               	addlw	low (_mUser+9)
  3395  00096E  6ED9               	movwf	fsr2l,c
  3396  000970  6ADA               	clrf	fsr2h,c
  3397  000972  0012               	return	
  3398  000974                     __end_ofPL48:
  3399                           	callstack 0
  3400  000974                     PL62:
  3401                           	callstack 23
  3402  000974  0E05               	movlw	5
  3403  000976  6E33               	movwf	_LCDcol^0,c
  3404  000978  C034  F066         	movff	_LCDrow,LcGotoXY@Row
  3405  00097C  5033               	movf	_LCDcol^0,w,c
  3406  00097E  0012               	return	
  3407  000980                     __end_ofPL62:
  3408                           	callstack 0
  3409  000980                     PL66:
  3410                           	callstack 23
  3411  000980  C034  F066         	movff	_LCDrow,LcGotoXY@Row
  3412  000984  5033               	movf	_LCDcol^0,w,c
  3413  000986  0012               	return	
  3414  000988                     __end_ofPL66:
  3415                           	callstack 0
  3416  000988                     PL70:
  3417                           	callstack 23
  3418  000988  0E10               	movlw	16
  3419  00098A  5C5E               	subwf	?_TiGetTics^0,w,c
  3420  00098C  0E0E               	movlw	14
  3421  00098E  585F               	subwfb	(?_TiGetTics+1)^0,w,c
  3422  000990  0012               	return	
  3423  000992                     __end_ofPL70:
  3424                           	callstack 0
  3425  000992                     PL90:
  3426                           	callstack 23
  3427  000992  6A32               	clrf	_LCDcolm^0,c
  3428  000994  0E09               	movlw	9
  3429  000996  6E79               	movwf	menuMotor@state^0,c
  3430  000998  0C09               	retlw	9
  3431  00099A                     __end_ofPL90:
  3432                           	callstack 0
  3433                           
  3434 ;; *************** function _timerOver *****************
  3435 ;; Defined at:
  3436 ;;		line 506 in file "time.c"
  3437 ;; Parameters:    Size  Location     Type
  3438 ;;		None
  3439 ;; Auto vars:     Size  Location     Type
  3440 ;;		None
  3441 ;; Return value:  Size  Location     Type
  3442 ;;                  1    wreg      unsigned char 
  3443 ;; Registers used:
  3444 ;;		wreg, status,2
  3445 ;; Tracked objects:
  3446 ;;		On entry : 0/0
  3447 ;;		On exit  : 0/0
  3448 ;;		Unchanged: 0/0
  3449 ;; Data sizes:     COMRAM   BANK0   BANK1
  3450 ;;      Params:         0       0       0
  3451 ;;      Locals:         0       0       0
  3452 ;;      Temps:          0       0       0
  3453 ;;      Totals:         0       0       0
  3454 ;;Total ram usage:        0 bytes
  3455 ;; Hardware stack levels used: 1
  3456 ;; Hardware stack levels required when called: 2
  3457 ;; This function calls:
  3458 ;;		Nothing
  3459 ;; This function is called by:
  3460 ;;		_menuMotor
  3461 ;; This function uses a non-reentrant model
  3462 ;;
  3463                           
  3464                           	psect	text9
  3465  000124                     __ptext9:
  3466                           	callstack 0
  3467  000124                     _timerOver:
  3468                           	callstack 27
  3469                           
  3470                           ;time.c: 507:     return state == 0;
  3471                           
  3472                           ;incstack = 0
  3473  000124  5013               	movf	_state@time$F1845^0,w,c
  3474  000126  B4D8               	btfsc	status,2,c
  3475  000128  0C01               	retlw	1
  3476  00012A  0C00               	retlw	0	;funcret
  3477  00012C                     __end_of_timerOver:
  3478                           	callstack 0
  3479                           
  3480 ;; *************** function _stopTimer *****************
  3481 ;; Defined at:
  3482 ;;		line 463 in file "time.c"
  3483 ;; Parameters:    Size  Location     Type
  3484 ;;		None
  3485 ;; Auto vars:     Size  Location     Type
  3486 ;;		None
  3487 ;; Return value:  Size  Location     Type
  3488 ;;                  1    wreg      void 
  3489 ;; Registers used:
  3490 ;;		None
  3491 ;; Tracked objects:
  3492 ;;		On entry : 0/0
  3493 ;;		On exit  : 0/0
  3494 ;;		Unchanged: 0/0
  3495 ;; Data sizes:     COMRAM   BANK0   BANK1
  3496 ;;      Params:         0       0       0
  3497 ;;      Locals:         0       0       0
  3498 ;;      Temps:          0       0       0
  3499 ;;      Totals:         0       0       0
  3500 ;;Total ram usage:        0 bytes
  3501 ;; Hardware stack levels used: 1
  3502 ;; Hardware stack levels required when called: 2
  3503 ;; This function calls:
  3504 ;;		Nothing
  3505 ;; This function is called by:
  3506 ;;		_menuMotor
  3507 ;; This function uses a non-reentrant model
  3508 ;;
  3509                           
  3510                           	psect	text10
  3511  000170                     __ptext10:
  3512                           	callstack 0
  3513  000170                     _stopTimer:
  3514                           	callstack 27
  3515                           
  3516                           ;time.c: 464:     state = 0;
  3517                           
  3518                           ;incstack = 0
  3519  000170  6A13               	clrf	_state@time$F1845^0,c
  3520  000172  0012               	return		;funcret
  3521  000174                     __end_of_stopTimer:
  3522                           	callstack 0
  3523                           
  3524 ;; *************** function _startTimer *****************
  3525 ;; Defined at:
  3526 ;;		line 459 in file "time.c"
  3527 ;; Parameters:    Size  Location     Type
  3528 ;;		None
  3529 ;; Auto vars:     Size  Location     Type
  3530 ;;		None
  3531 ;; Return value:  Size  Location     Type
  3532 ;;                  1    wreg      void 
  3533 ;; Registers used:
  3534 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3535 ;; Tracked objects:
  3536 ;;		On entry : 0/0
  3537 ;;		On exit  : 0/0
  3538 ;;		Unchanged: 0/0
  3539 ;; Data sizes:     COMRAM   BANK0   BANK1
  3540 ;;      Params:         0       0       0
  3541 ;;      Locals:         0       0       0
  3542 ;;      Temps:          0       0       0
  3543 ;;      Totals:         0       0       0
  3544 ;;Total ram usage:        0 bytes
  3545 ;; Hardware stack levels used: 1
  3546 ;; Hardware stack levels required when called: 3
  3547 ;; This function calls:
  3548 ;;		_TiResetTics
  3549 ;; This function is called by:
  3550 ;;		_menuMotor
  3551 ;; This function uses a non-reentrant model
  3552 ;;
  3553                           
  3554                           	psect	text11
  3555  001FF6                     __ptext11:
  3556                           	callstack 0
  3557  001FF6                     _startTimer:
  3558                           	callstack 26
  3559                           
  3560                           ;time.c: 460:     state = 2;
  3561                           
  3562                           ;incstack = 0
  3563  001FF6  0E02               	movlw	2
  3564  001FF8  6E13               	movwf	_state@time$F1845^0,c
  3565                           
  3566                           ;time.c: 461:     TiResetTics(timer);
  3567  001FFA  5014               	movf	_timer@time$F1844^0,w,c
  3568  001FFC  EFAB  F00F         	goto	_TiResetTics
  3569  002000                     __end_of_startTimer:
  3570                           	callstack 0
  3571                           
  3572 ;; *************** function _resetTimer *****************
  3573 ;; Defined at:
  3574 ;;		line 471 in file "time.c"
  3575 ;; Parameters:    Size  Location     Type
  3576 ;;		None
  3577 ;; Auto vars:     Size  Location     Type
  3578 ;;		None
  3579 ;; Return value:  Size  Location     Type
  3580 ;;                  1    wreg      void 
  3581 ;; Registers used:
  3582 ;;		None
  3583 ;; Tracked objects:
  3584 ;;		On entry : 0/0
  3585 ;;		On exit  : 0/0
  3586 ;;		Unchanged: 0/0
  3587 ;; Data sizes:     COMRAM   BANK0   BANK1
  3588 ;;      Params:         0       0       0
  3589 ;;      Locals:         0       0       0
  3590 ;;      Temps:          0       0       0
  3591 ;;      Totals:         0       0       0
  3592 ;;Total ram usage:        0 bytes
  3593 ;; Hardware stack levels used: 1
  3594 ;; Hardware stack levels required when called: 2
  3595 ;; This function calls:
  3596 ;;		Nothing
  3597 ;; This function is called by:
  3598 ;;		_menuMotor
  3599 ;; This function uses a non-reentrant model
  3600 ;;
  3601                           
  3602                           	psect	text12
  3603  0000CE                     __ptext12:
  3604                           	callstack 0
  3605  0000CE                     _resetTimer:
  3606                           	callstack 27
  3607                           
  3608                           ;time.c: 472:     second = seconds;
  3609                           
  3610                           ;incstack = 0
  3611  0000CE  C018  F017         	movff	_seconds,_second
  3612                           
  3613                           ;time.c: 473:     minute = minutes;
  3614  0000D2  C078  F077         	movff	_minutes,_minute
  3615  0000D6  0012               	return		;funcret
  3616  0000D8                     __end_of_resetTimer:
  3617                           	callstack 0
  3618                           
  3619 ;; *************** function _resetPosition *****************
  3620 ;; Defined at:
  3621 ;;		line 376 in file "EEPROM.c"
  3622 ;; Parameters:    Size  Location     Type
  3623 ;;		None
  3624 ;; Auto vars:     Size  Location     Type
  3625 ;;		None
  3626 ;; Return value:  Size  Location     Type
  3627 ;;                  1    wreg      void 
  3628 ;; Registers used:
  3629 ;;		None
  3630 ;; Tracked objects:
  3631 ;;		On entry : 0/0
  3632 ;;		On exit  : 0/0
  3633 ;;		Unchanged: 0/0
  3634 ;; Data sizes:     COMRAM   BANK0   BANK1
  3635 ;;      Params:         0       0       0
  3636 ;;      Locals:         0       0       0
  3637 ;;      Temps:          0       0       0
  3638 ;;      Totals:         0       0       0
  3639 ;;Total ram usage:        0 bytes
  3640 ;; Hardware stack levels used: 1
  3641 ;; Hardware stack levels required when called: 2
  3642 ;; This function calls:
  3643 ;;		Nothing
  3644 ;; This function is called by:
  3645 ;;		_menuMotor
  3646 ;; This function uses a non-reentrant model
  3647 ;;
  3648                           
  3649                           	psect	text13
  3650  000174                     __ptext13:
  3651                           	callstack 0
  3652  000174                     _resetPosition:
  3653                           	callstack 27
  3654                           
  3655                           ;EEPROM.c: 377:     position = 0;
  3656                           
  3657                           ;incstack = 0
  3658  000174  6A1F               	clrf	_position^0,c
  3659  000176  0012               	return		;funcret
  3660  000178                     __end_of_resetPosition:
  3661                           	callstack 0
  3662                           
  3663 ;; *************** function _resetDisplay *****************
  3664 ;; Defined at:
  3665 ;;		line 438 in file "Menu.c"
  3666 ;; Parameters:    Size  Location     Type
  3667 ;;		None
  3668 ;; Auto vars:     Size  Location     Type
  3669 ;;		None
  3670 ;; Return value:  Size  Location     Type
  3671 ;;                  1    wreg      void 
  3672 ;; Registers used:
  3673 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3674 ;; Tracked objects:
  3675 ;;		On entry : 0/0
  3676 ;;		On exit  : 0/0
  3677 ;;		Unchanged: 0/0
  3678 ;; Data sizes:     COMRAM   BANK0   BANK1
  3679 ;;      Params:         0       0       0
  3680 ;;      Locals:         0       0       0
  3681 ;;      Temps:          0       0       0
  3682 ;;      Totals:         0       0       0
  3683 ;;Total ram usage:        0 bytes
  3684 ;; Hardware stack levels used: 1
  3685 ;; Hardware stack levels required when called: 5
  3686 ;; This function calls:
  3687 ;;		_LcClear
  3688 ;; This function is called by:
  3689 ;;		_menuMotor
  3690 ;; This function uses a non-reentrant model
  3691 ;;
  3692                           
  3693                           	psect	text14
  3694  0000D8                     __ptext14:
  3695                           	callstack 0
  3696  0000D8                     _resetDisplay:
  3697                           	callstack 24
  3698                           
  3699                           ;Menu.c: 439:     LcClear();
  3700                           
  3701                           ;incstack = 0
  3702  0000D8  EC1B  F000         	call	_LcClear	;wreg free
  3703                           
  3704                           ;Menu.c: 440:     LCDcol = LCDrow = 0;
  3705  0000DC  6A34               	clrf	_LCDrow^0,c
  3706  0000DE  6A33               	clrf	_LCDcol^0,c
  3707  0000E0  0012               	return		;funcret
  3708  0000E2                     __end_of_resetDisplay:
  3709                           	callstack 0
  3710                           
  3711 ;; *************** function _modifyTime *****************
  3712 ;; Defined at:
  3713 ;;		line 476 in file "time.c"
  3714 ;; Parameters:    Size  Location     Type
  3715 ;;		None
  3716 ;; Auto vars:     Size  Location     Type
  3717 ;;		None
  3718 ;; Return value:  Size  Location     Type
  3719 ;;                  1    wreg      void 
  3720 ;; Registers used:
  3721 ;;		wreg, status,2
  3722 ;; Tracked objects:
  3723 ;;		On entry : 0/0
  3724 ;;		On exit  : 0/0
  3725 ;;		Unchanged: 0/0
  3726 ;; Data sizes:     COMRAM   BANK0   BANK1
  3727 ;;      Params:         0       0       0
  3728 ;;      Locals:         0       0       0
  3729 ;;      Temps:          0       0       0
  3730 ;;      Totals:         0       0       0
  3731 ;;Total ram usage:        0 bytes
  3732 ;; Hardware stack levels used: 1
  3733 ;; Hardware stack levels required when called: 2
  3734 ;; This function calls:
  3735 ;;		Nothing
  3736 ;; This function is called by:
  3737 ;;		_menuMotor
  3738 ;; This function uses a non-reentrant model
  3739 ;;
  3740                           
  3741                           	psect	text15
  3742  00012C                     __ptext15:
  3743                           	callstack 0
  3744  00012C                     _modifyTime:
  3745                           	callstack 0
  3746                           
  3747                           ;time.c: 477:     state = 20;
  3748                           
  3749                           ;incstack = 0
  3750  00012C  D000               	goto	PL96	;call to abstracted procedure
  3751  00012E                     __end_of_modifyTime:
  3752                           	callstack 0
  3753  00012E                     PL96:
  3754                           	callstack 24
  3755  00012E  0E14               	movlw	20
  3756  000130  6E13               	movwf	_state@time$F1845^0,c
  3757  000132  0C14               	retlw	20	;funcret
  3758  000134                     __end_ofPL96:
  3759                           	callstack 0
  3760                           
  3761 ;; *************** function _mainMenu *****************
  3762 ;; Defined at:
  3763 ;;		line 453 in file "Menu.c"
  3764 ;; Parameters:    Size  Location     Type
  3765 ;;		None
  3766 ;; Auto vars:     Size  Location     Type
  3767 ;;		None
  3768 ;; Return value:  Size  Location     Type
  3769 ;;                  1    wreg      void 
  3770 ;; Registers used:
  3771 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3772 ;; Tracked objects:
  3773 ;;		On entry : 0/0
  3774 ;;		On exit  : 0/0
  3775 ;;		Unchanged: 0/0
  3776 ;; Data sizes:     COMRAM   BANK0   BANK1
  3777 ;;      Params:         0       0       0
  3778 ;;      Locals:         0       0       0
  3779 ;;      Temps:          2       0       0
  3780 ;;      Totals:         2       0       0
  3781 ;;Total ram usage:        2 bytes
  3782 ;; Hardware stack levels used: 1
  3783 ;; Hardware stack levels required when called: 6
  3784 ;; This function calls:
  3785 ;;		_LcPutChar
  3786 ;;		___awmod
  3787 ;;		_nextRow
  3788 ;; This function is called by:
  3789 ;;		_menuMotor
  3790 ;; This function uses a non-reentrant model
  3791 ;;
  3792                           
  3793                           	psect	text16
  3794  0016CC                     __ptext16:
  3795                           	callstack 0
  3796  0016CC                     _mainMenu:
  3797                           	callstack 23
  3798                           
  3799                           ;Menu.c: 454:     if (LCDrow+val < 5){
  3800                           
  3801                           ;incstack = 0
  3802  0016CC  5031               	movf	_val^0,w,c
  3803  0016CE  C034  F06C         	movff	_LCDrow,??_mainMenu
  3804  0016D2  6A6D               	clrf	(??_mainMenu+1)^0,c
  3805  0016D4  266C               	addwf	??_mainMenu^0,f,c
  3806  0016D6  0E00               	movlw	0
  3807  0016D8  226D               	addwfc	(??_mainMenu+1)^0,f,c
  3808  0016DA  BE6D               	btfsc	(??_mainMenu+1)^0,7,c
  3809  0016DC  D006               	goto	u5370
  3810  0016DE  506D               	movf	(??_mainMenu+1)^0,w,c
  3811  0016E0  E129               	bnz	l635
  3812  0016E2  0E05               	movlw	5
  3813  0016E4  5C6C               	subwf	??_mainMenu^0,w,c
  3814  0016E6  B0D8               	btfsc	status,0,c
  3815  0016E8  0012               	return	
  3816  0016EA                     u5370:
  3817                           
  3818                           ;Menu.c: 455:         if (MAINMENUSIZE[LCDrow+val] > 16){
  3819  0016EA  D837               	call	PL64	;call to abstracted procedure
  3820  0016EC  0E10               	movlw	16
  3821  0016EE  64DF               	cpfsgt	indf2,c
  3822  0016F0  D015               	goto	l5973
  3823                           
  3824                           ;Menu.c: 456:             if (LCDcol < 16){
  3825  0016F2  6033               	cpfslt	_LCDcol^0,c
  3826  0016F4  EF54  F000         	goto	_nextRow
  3827                           
  3828                           ;Menu.c: 457:                 LcPutChar(MAINMENU[LCDrow+val][(LCDcol+LCDcolm) % MAINMENU
      +                          SIZE[LCDrow+val]]);
  3829  0016F8  5033               	movf	_LCDcol^0,w,c
  3830  0016FA  2432               	addwf	_LCDcolm^0,w,c
  3831  0016FC  6E5E               	movwf	___awmod@dividend^0,c
  3832  0016FE  6A5F               	clrf	(___awmod@dividend+1)^0,c
  3833  001700  365F               	rlcf	(___awmod@dividend+1)^0,f,c
  3834  001702  D82B               	call	PL64	;call to abstracted procedure
  3835  001704  50DF               	movf	indf2,w,c
  3836  001706  6E60               	movwf	___awmod@divisor^0,c
  3837  001708  6A61               	clrf	(___awmod@divisor+1)^0,c
  3838  00170A  EC72  F00C         	call	___awmod	;wreg free
  3839  00170E  D813               	call	PL20	;call to abstracted procedure
  3840  001710  245E               	addwf	?___awmod^0,w,c
  3841  001712  D81B               	call	PL26	;call to abstracted procedure
  3842  001714  ECE6  F00E         	call	_LcPutChar
  3843  001718                     l5969:
  3844                           
  3845                           ;Menu.c: 458:                 LCDcol++;
  3846  001718  2A33               	incf	_LCDcol^0,f,c
  3847                           
  3848                           ;Menu.c: 459:             }else {
  3849  00171A  0012               	return	
  3850  00171C                     l5973:
  3851  00171C  D80C               	call	PL20	;call to abstracted procedure
  3852  00171E  2433               	addwf	_LCDcol^0,w,c
  3853  001720  D814               	call	PL26	;call to abstracted procedure
  3854  001722  E102 EF54  F000    	bz	_nextRow
  3855                           
  3856                           ;Menu.c: 464:             LcPutChar(MAINMENU[LCDrow+val][LCDcol]);
  3857  001728  D806               	call	PL20	;call to abstracted procedure
  3858  00172A  2433               	addwf	_LCDcol^0,w,c
  3859  00172C  D80E               	call	PL26	;call to abstracted procedure
  3860  00172E  ECE6  F00E         	call	_LcPutChar
  3861  001732  D7F2               	goto	l5969
  3862  001734                     l635:
  3863  001734  0012               	return		;funcret
  3864  001736                     __end_of_mainMenu:
  3865                           	callstack 0
  3866  001736                     PL20:
  3867                           	callstack 23
  3868  001736  5031               	movf	_val^0,w,c
  3869  001738  0D1C               	mullw	28
  3870  00173A  CFF3 F06C          	movff	prodl,??_mainMenu
  3871  00173E  5034               	movf	_LCDrow^0,w,c
  3872  001740  0D1C               	mullw	28
  3873  001742  50F3               	movf	243,w,c
  3874  001744  0F0D               	addlw	low _MAINMENU
  3875  001746  246C               	addwf	??_mainMenu^0,w,c
  3876  001748  0012               	return	
  3877  00174A                     __end_ofPL20:
  3878                           	callstack 0
  3879  00174A                     PL26:
  3880                           	callstack 23
  3881  00174A  6E6D               	movwf	(??_mainMenu+1)^0,c
  3882  00174C  C06D  FFF6         	movff	??_mainMenu+1,tblptrl
  3883  001750                     	if	1	;There is more than 1 active tblptr byte
  3884  001750  0E02               	movlw	high __smallconst
  3885  001752  6EF7               	movwf	tblptrh,c
  3886  001754                     	endif
  3887  001754                     	if	0	;tblptru may be non-zero
  3888  001754                     	endif
  3889  001754                     	if	0	;tblptru may be non-zero
  3890  001754                     	endif
  3891  001754  0008               	tblrd		*
  3892  001756  50F5               	movf	tablat,w,c
  3893  001758  0012               	return	
  3894  00175A                     __end_ofPL26:
  3895                           	callstack 0
  3896  00175A                     PL64:
  3897                           	callstack 23
  3898  00175A  5034               	movf	_LCDrow^0,w,c
  3899  00175C  0F72               	addlw	low _MAINMENUSIZE
  3900  00175E  2431               	addwf	_val^0,w,c
  3901  001760  6ED9               	movwf	fsr2l,c
  3902  001762  6ADA               	clrf	fsr2h,c
  3903  001764  0012               	return	
  3904  001766                     __end_ofPL64:
  3905                           	callstack 0
  3906                           
  3907 ;; *************** function ___awmod *****************
  3908 ;; Defined at:
  3909 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\awmod.c"
  3910 ;; Parameters:    Size  Location     Type
  3911 ;;  dividend        2    5[COMRAM] int 
  3912 ;;  divisor         2    7[COMRAM] int 
  3913 ;; Auto vars:     Size  Location     Type
  3914 ;;  sign            1   10[COMRAM] unsigned char 
  3915 ;;  counter         1    9[COMRAM] unsigned char 
  3916 ;; Return value:  Size  Location     Type
  3917 ;;                  2    5[COMRAM] int 
  3918 ;; Registers used:
  3919 ;;		wreg, status,2, status,0
  3920 ;; Tracked objects:
  3921 ;;		On entry : 0/0
  3922 ;;		On exit  : 0/0
  3923 ;;		Unchanged: 0/0
  3924 ;; Data sizes:     COMRAM   BANK0   BANK1
  3925 ;;      Params:         4       0       0
  3926 ;;      Locals:         2       0       0
  3927 ;;      Temps:          0       0       0
  3928 ;;      Totals:         6       0       0
  3929 ;;Total ram usage:        6 bytes
  3930 ;; Hardware stack levels used: 1
  3931 ;; Hardware stack levels required when called: 2
  3932 ;; This function calls:
  3933 ;;		Nothing
  3934 ;; This function is called by:
  3935 ;;		_mainMenu
  3936 ;; This function uses a non-reentrant model
  3937 ;;
  3938                           
  3939                           	psect	text17
  3940  0018E4                     __ptext17:
  3941                           	callstack 0
  3942  0018E4                     ___awmod:
  3943                           	callstack 26
  3944                           
  3945                           ;incstack = 0
  3946  0018E4  6A63               	clrf	___awmod@sign^0,c
  3947  0018E6  AE5F               	btfss	(___awmod@dividend+1)^0,7,c
  3948  0018E8  D006               	goto	l4003
  3949  0018EA  6C5E               	negf	___awmod@dividend^0,c
  3950  0018EC  1E5F               	comf	(___awmod@dividend+1)^0,f,c
  3951  0018EE  B0D8               	btfsc	status,0,c
  3952  0018F0  2A5F               	incf	(___awmod@dividend+1)^0,f,c
  3953  0018F2  0E01               	movlw	1
  3954  0018F4  6E63               	movwf	___awmod@sign^0,c
  3955  0018F6                     l4003:
  3956  0018F6  AE61               	btfss	(___awmod@divisor+1)^0,7,c
  3957  0018F8  D004               	goto	l4007
  3958  0018FA  6C60               	negf	___awmod@divisor^0,c
  3959  0018FC  1E61               	comf	(___awmod@divisor+1)^0,f,c
  3960  0018FE  B0D8               	btfsc	status,0,c
  3961  001900  2A61               	incf	(___awmod@divisor+1)^0,f,c
  3962  001902                     l4007:
  3963  001902  5060               	movf	___awmod@divisor^0,w,c
  3964  001904  1061               	iorwf	(___awmod@divisor+1)^0,w,c
  3965  001906  E017               	bz	l4023
  3966  001908  0E01               	movlw	1
  3967  00190A  6E62               	movwf	___awmod@counter^0,c
  3968  00190C  D004               	goto	l4013
  3969  00190E                     l4011:
  3970  00190E  90D8               	bcf	status,0,c
  3971  001910  3660               	rlcf	___awmod@divisor^0,f,c
  3972  001912  3661               	rlcf	(___awmod@divisor+1)^0,f,c
  3973  001914  2A62               	incf	___awmod@counter^0,f,c
  3974  001916                     l4013:
  3975  001916  AE61               	btfss	(___awmod@divisor+1)^0,7,c
  3976  001918  D7FA               	goto	l4011
  3977  00191A                     u2930:
  3978  00191A  5060               	movf	___awmod@divisor^0,w,c
  3979  00191C  5C5E               	subwf	___awmod@dividend^0,w,c
  3980  00191E  5061               	movf	(___awmod@divisor+1)^0,w,c
  3981  001920  585F               	subwfb	(___awmod@dividend+1)^0,w,c
  3982  001922  E304               	bnc	l4019
  3983  001924  5060               	movf	___awmod@divisor^0,w,c
  3984  001926  5E5E               	subwf	___awmod@dividend^0,f,c
  3985  001928  5061               	movf	(___awmod@divisor+1)^0,w,c
  3986  00192A  5A5F               	subwfb	(___awmod@dividend+1)^0,f,c
  3987  00192C                     l4019:
  3988  00192C  90D8               	bcf	status,0,c
  3989  00192E  3261               	rrcf	(___awmod@divisor+1)^0,f,c
  3990  001930  3260               	rrcf	___awmod@divisor^0,f,c
  3991  001932  2E62               	decfsz	___awmod@counter^0,f,c
  3992  001934  D7F2               	goto	u2930
  3993  001936                     l4023:
  3994  001936  5063               	movf	___awmod@sign^0,w,c
  3995  001938  E004               	bz	l4027
  3996  00193A  6C5E               	negf	___awmod@dividend^0,c
  3997  00193C  1E5F               	comf	(___awmod@dividend+1)^0,f,c
  3998  00193E  B0D8               	btfsc	status,0,c
  3999  001940  2A5F               	incf	(___awmod@dividend+1)^0,f,c
  4000  001942                     l4027:
  4001  001942  C05E  F05E         	movff	___awmod@dividend,?___awmod
  4002  001946  C05F  F05F         	movff	___awmod@dividend+1,?___awmod+1
  4003  00194A  0012               	return		;funcret
  4004  00194C                     __end_of___awmod:
  4005                           	callstack 0
  4006                           
  4007 ;; *************** function _isPressed *****************
  4008 ;; Defined at:
  4009 ;;		line 207 in file "keypad.c"
  4010 ;; Parameters:    Size  Location     Type
  4011 ;;		None
  4012 ;; Auto vars:     Size  Location     Type
  4013 ;;		None
  4014 ;; Return value:  Size  Location     Type
  4015 ;;                  1    wreg      unsigned char 
  4016 ;; Registers used:
  4017 ;;		wreg, status,2, status,0
  4018 ;; Tracked objects:
  4019 ;;		On entry : 0/0
  4020 ;;		On exit  : 0/0
  4021 ;;		Unchanged: 0/0
  4022 ;; Data sizes:     COMRAM   BANK0   BANK1
  4023 ;;      Params:         0       0       0
  4024 ;;      Locals:         1       0       0
  4025 ;;      Temps:          0       0       0
  4026 ;;      Totals:         1       0       0
  4027 ;;Total ram usage:        1 bytes
  4028 ;; Hardware stack levels used: 1
  4029 ;; Hardware stack levels required when called: 2
  4030 ;; This function calls:
  4031 ;;		Nothing
  4032 ;; This function is called by:
  4033 ;;		_menuMotor
  4034 ;;		_timeMotor
  4035 ;; This function uses a non-reentrant model
  4036 ;;
  4037                           
  4038                           	psect	text18
  4039  001FDE                     __ptext18:
  4040                           	callstack 0
  4041  001FDE                     _isPressed:
  4042                           	callstack 27
  4043                           
  4044                           ;keypad.c: 209:  return pressed && (stateSMS == 1||stateSMS == 4);
  4045                           
  4046                           ;incstack = 0
  4047  001FDE  6A5E               	clrf	_isPressed$638^0,c
  4048  001FE0  5040               	movf	_pressed^0,w,c
  4049  001FE2  E007               	bz	l195
  4050  001FE4  043C               	decf	_stateSMS^0,w,c
  4051  001FE6  E003               	bz	u3040
  4052  001FE8  0E04               	movlw	4
  4053  001FEA  183C               	xorwf	_stateSMS^0,w,c
  4054  001FEC  E102               	bnz	l195
  4055  001FEE                     u3040:
  4056  001FEE  0E01               	movlw	1
  4057  001FF0  6E5E               	movwf	_isPressed$638^0,c
  4058  001FF2                     l195:
  4059  001FF2  505E               	movf	_isPressed$638^0,w,c
  4060  001FF4  0012               	return		;funcret
  4061  001FF6                     __end_of_isPressed:
  4062                           	callstack 0
  4063                           
  4064 ;; *************** function _incrementPosition *****************
  4065 ;; Defined at:
  4066 ;;		line 372 in file "EEPROM.c"
  4067 ;; Parameters:    Size  Location     Type
  4068 ;;		None
  4069 ;; Auto vars:     Size  Location     Type
  4070 ;;		None
  4071 ;; Return value:  Size  Location     Type
  4072 ;;                  1    wreg      void 
  4073 ;; Registers used:
  4074 ;;		status,2, status,0
  4075 ;; Tracked objects:
  4076 ;;		On entry : 0/0
  4077 ;;		On exit  : 0/0
  4078 ;;		Unchanged: 0/0
  4079 ;; Data sizes:     COMRAM   BANK0   BANK1
  4080 ;;      Params:         0       0       0
  4081 ;;      Locals:         0       0       0
  4082 ;;      Temps:          0       0       0
  4083 ;;      Totals:         0       0       0
  4084 ;;Total ram usage:        0 bytes
  4085 ;; Hardware stack levels used: 1
  4086 ;; Hardware stack levels required when called: 2
  4087 ;; This function calls:
  4088 ;;		Nothing
  4089 ;; This function is called by:
  4090 ;;		_menuMotor
  4091 ;; This function uses a non-reentrant model
  4092 ;;
  4093                           
  4094                           	psect	text19
  4095  000178                     __ptext19:
  4096                           	callstack 0
  4097  000178                     _incrementPosition:
  4098                           	callstack 27
  4099                           
  4100                           ;EEPROM.c: 373:     position++;
  4101                           
  4102                           ;incstack = 0
  4103  000178  2A1F               	incf	_position^0,f,c
  4104  00017A  0012               	return		;funcret
  4105  00017C                     __end_of_incrementPosition:
  4106                           	callstack 0
  4107                           
  4108 ;; *************** function _getPresses *****************
  4109 ;; Defined at:
  4110 ;;		line 242 in file "keypad.c"
  4111 ;; Parameters:    Size  Location     Type
  4112 ;;		None
  4113 ;; Auto vars:     Size  Location     Type
  4114 ;;		None
  4115 ;; Return value:  Size  Location     Type
  4116 ;;                  1    wreg      unsigned char 
  4117 ;; Registers used:
  4118 ;;		wreg, status,2
  4119 ;; Tracked objects:
  4120 ;;		On entry : 0/0
  4121 ;;		On exit  : 0/0
  4122 ;;		Unchanged: 0/0
  4123 ;; Data sizes:     COMRAM   BANK0   BANK1
  4124 ;;      Params:         0       0       0
  4125 ;;      Locals:         0       0       0
  4126 ;;      Temps:          0       0       0
  4127 ;;      Totals:         0       0       0
  4128 ;;Total ram usage:        0 bytes
  4129 ;; Hardware stack levels used: 1
  4130 ;; Hardware stack levels required when called: 2
  4131 ;; This function calls:
  4132 ;;		Nothing
  4133 ;; This function is called by:
  4134 ;;		_menuMotor
  4135 ;; This function uses a non-reentrant model
  4136 ;;
  4137                           
  4138                           	psect	text20
  4139  00017C                     __ptext20:
  4140                           	callstack 0
  4141  00017C                     _getPresses:
  4142                           	callstack 27
  4143                           
  4144                           ;keypad.c: 243:     return available;
  4145                           
  4146                           ;incstack = 0
  4147  00017C  503E               	movf	_available^0,w,c
  4148  00017E  0012               	return		;funcret
  4149  000180                     __end_of_getPresses:
  4150                           	callstack 0
  4151                           
  4152 ;; *************** function _displayTimeRemaining *****************
  4153 ;; Defined at:
  4154 ;;		line 466 in file "time.c"
  4155 ;; Parameters:    Size  Location     Type
  4156 ;;		None
  4157 ;; Auto vars:     Size  Location     Type
  4158 ;;		None
  4159 ;; Return value:  Size  Location     Type
  4160 ;;                  1    wreg      void 
  4161 ;; Registers used:
  4162 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4163 ;; Tracked objects:
  4164 ;;		On entry : 0/0
  4165 ;;		On exit  : 0/0
  4166 ;;		Unchanged: 0/0
  4167 ;; Data sizes:     COMRAM   BANK0   BANK1
  4168 ;;      Params:         0       0       0
  4169 ;;      Locals:         0       0       0
  4170 ;;      Temps:          0       0       0
  4171 ;;      Totals:         0       0       0
  4172 ;;Total ram usage:        0 bytes
  4173 ;; Hardware stack levels used: 1
  4174 ;; Hardware stack levels required when called: 5
  4175 ;; This function calls:
  4176 ;;		_LcGotoXY
  4177 ;; This function is called by:
  4178 ;;		_menuMotor
  4179 ;; This function uses a non-reentrant model
  4180 ;;
  4181                           
  4182                           	psect	text21
  4183  000076                     __ptext21:
  4184                           	callstack 0
  4185  000076                     _displayTimeRemaining:
  4186                           	callstack 24
  4187                           
  4188                           ;time.c: 467:     game = 1;
  4189                           
  4190                           ;incstack = 0
  4191  000076  0E01               	movlw	1
  4192  000078  6E12               	movwf	_game^0,c
  4193                           
  4194                           ;time.c: 468:     LcGotoXY(11,0);
  4195  00007A  0E00               	movlw	0
  4196  00007C  6E66               	movwf	LcGotoXY@Row^0,c
  4197  00007E  0E0B               	movlw	11
  4198  000080  ECA4  F00E         	call	_LcGotoXY
  4199                           
  4200                           ;time.c: 469:     state = 20;
  4201  000084  EF97  F000         	goto	PL96	;call to abstracted procedure
  4202  000088                     __end_of_displayTimeRemaining:
  4203                           	callstack 0
  4204                           
  4205 ;; *************** function _displaySysTime *****************
  4206 ;; Defined at:
  4207 ;;		line 501 in file "time.c"
  4208 ;; Parameters:    Size  Location     Type
  4209 ;;		None
  4210 ;; Auto vars:     Size  Location     Type
  4211 ;;		None
  4212 ;; Return value:  Size  Location     Type
  4213 ;;                  1    wreg      void 
  4214 ;; Registers used:
  4215 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4216 ;; Tracked objects:
  4217 ;;		On entry : 0/0
  4218 ;;		On exit  : 0/0
  4219 ;;		Unchanged: 0/0
  4220 ;; Data sizes:     COMRAM   BANK0   BANK1
  4221 ;;      Params:         0       0       0
  4222 ;;      Locals:         0       0       0
  4223 ;;      Temps:          0       0       0
  4224 ;;      Totals:         0       0       0
  4225 ;;Total ram usage:        0 bytes
  4226 ;; Hardware stack levels used: 1
  4227 ;; Hardware stack levels required when called: 5
  4228 ;; This function calls:
  4229 ;;		_LcGotoXY
  4230 ;; This function is called by:
  4231 ;;		_menuMotor
  4232 ;; This function uses a non-reentrant model
  4233 ;;
  4234                           
  4235                           	psect	text22
  4236  0000E2                     __ptext22:
  4237                           	callstack 0
  4238  0000E2                     _displaySysTime:
  4239                           	callstack 24
  4240                           
  4241                           ;time.c: 502:     state = 30;
  4242                           
  4243                           ;incstack = 0
  4244  0000E2  0E1E               	movlw	30
  4245                           
  4246                           ;time.c: 503:     LcGotoXY(0,1);
  4247  0000E4  ECE1  F008         	call	PL58	;call to abstracted procedure
  4248  0000E8  EFA4  F00E         	goto	_LcGotoXY
  4249  0000EC                     __end_of_displaySysTime:
  4250                           	callstack 0
  4251                           
  4252 ;; *************** function _displayString *****************
  4253 ;; Defined at:
  4254 ;;		line 443 in file "Menu.c"
  4255 ;; Parameters:    Size  Location     Type
  4256 ;;  string          1   19[COMRAM] PTR unsigned char 
  4257 ;;		 -> sysTime(14), modifyTimeString(13), TIME(16), LOGREGSCREEN(12), 
  4258 ;;		 -> LOGINMENU(22), 
  4259 ;; Auto vars:     Size  Location     Type
  4260 ;;		None
  4261 ;; Return value:  Size  Location     Type
  4262 ;;                  1    wreg      void 
  4263 ;; Registers used:
  4264 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4265 ;; Tracked objects:
  4266 ;;		On entry : 0/0
  4267 ;;		On exit  : 0/0
  4268 ;;		Unchanged: 0/0
  4269 ;; Data sizes:     COMRAM   BANK0   BANK1
  4270 ;;      Params:         1       0       0
  4271 ;;      Locals:         0       0       0
  4272 ;;      Temps:          0       0       0
  4273 ;;      Totals:         1       0       0
  4274 ;;Total ram usage:        1 bytes
  4275 ;; Hardware stack levels used: 1
  4276 ;; Hardware stack levels required when called: 6
  4277 ;; This function calls:
  4278 ;;		_LcPutChar
  4279 ;;		_nextRow
  4280 ;; This function is called by:
  4281 ;;		_menuMotor
  4282 ;; This function uses a non-reentrant model
  4283 ;;
  4284                           
  4285                           	psect	text23
  4286  001DA2                     __ptext23:
  4287                           	callstack 0
  4288  001DA2                     _displayString:
  4289                           	callstack 0
  4290                           
  4291                           ;Menu.c: 444:     if (string[LCDcol+LCDcolm] != '\0'){
  4292                           
  4293                           ;incstack = 0
  4294  001DA2  D810               	call	PL54	;call to abstracted procedure
  4295  001DA4  6ED9               	movwf	fsr2l,c
  4296  001DA6  6ADA               	clrf	fsr2h,c
  4297  001DA8  50DF               	movf	indf2,w,c
  4298  001DAA  E102 EF54  F000    	bz	_nextRow
  4299                           
  4300                           ;Menu.c: 445:         LcPutChar(string[LCDcol+LCDcolm]);
  4301  001DB0  D809               	call	PL54	;call to abstracted procedure
  4302  001DB2  D804               	call	PL36	;call to abstracted procedure
  4303  001DB4  ECE6  F00E         	call	_LcPutChar
  4304                           
  4305                           ;Menu.c: 446:         LCDcol++;
  4306  001DB8  2A33               	incf	_LCDcol^0,f,c
  4307                           
  4308                           ;Menu.c: 447:     } else {
  4309  001DBA  0012               	return	
  4310  001DBC                     __end_of_displayString:
  4311                           	callstack 0
  4312  001DBC                     PL36:
  4313                           	callstack 23
  4314  001DBC  6ED9               	movwf	fsr2l,c
  4315  001DBE  6ADA               	clrf	fsr2h,c
  4316  001DC0  50DF               	movf	indf2,w,c
  4317  001DC2  0012               	return	
  4318  001DC4                     __end_ofPL36:
  4319                           	callstack 0
  4320  001DC4                     PL54:
  4321                           	callstack 23
  4322  001DC4  506C               	movf	displayString@string^0,w,c
  4323  001DC6  2433               	addwf	_LCDcol^0,w,c
  4324  001DC8  2432               	addwf	_LCDcolm^0,w,c
  4325  001DCA  0012               	return	
  4326  001DCC                     __end_ofPL54:
  4327                           	callstack 0
  4328                           
  4329 ;; *************** function _displayScoresMarquee *****************
  4330 ;; Defined at:
  4331 ;;		line 289 in file "EEPROM.c"
  4332 ;; Parameters:    Size  Location     Type
  4333 ;;		None
  4334 ;; Auto vars:     Size  Location     Type
  4335 ;;		None
  4336 ;; Return value:  Size  Location     Type
  4337 ;;                  1    wreg      void 
  4338 ;; Registers used:
  4339 ;;		wreg, status,2
  4340 ;; Tracked objects:
  4341 ;;		On entry : 0/0
  4342 ;;		On exit  : 0/0
  4343 ;;		Unchanged: 0/0
  4344 ;; Data sizes:     COMRAM   BANK0   BANK1
  4345 ;;      Params:         0       0       0
  4346 ;;      Locals:         0       0       0
  4347 ;;      Temps:          0       0       0
  4348 ;;      Totals:         0       0       0
  4349 ;;Total ram usage:        0 bytes
  4350 ;; Hardware stack levels used: 1
  4351 ;; Hardware stack levels required when called: 2
  4352 ;; This function calls:
  4353 ;;		Nothing
  4354 ;; This function is called by:
  4355 ;;		_menuMotor
  4356 ;; This function uses a non-reentrant model
  4357 ;;
  4358                           
  4359                           	psect	text24
  4360  000134                     __ptext24:
  4361                           	callstack 0
  4362  000134                     _displayScoresMarquee:
  4363                           	callstack 27
  4364                           
  4365                           ;EEPROM.c: 290:     state = 50;
  4366                           
  4367                           ;incstack = 0
  4368  000134  0E32               	movlw	50
  4369  000136  6E1E               	movwf	_state@EEPROM$F1761^0,c
  4370                           
  4371                           ;EEPROM.c: 291:     status = 0;
  4372  000138  6A1C               	clrf	_status^0,c
  4373  00013A  0012               	return		;funcret
  4374  00013C                     __end_of_displayScoresMarquee:
  4375                           	callstack 0
  4376                           
  4377 ;; *************** function _displayResults *****************
  4378 ;; Defined at:
  4379 ;;		line 486 in file "Menu.c"
  4380 ;; Parameters:    Size  Location     Type
  4381 ;;		None
  4382 ;; Auto vars:     Size  Location     Type
  4383 ;;		None
  4384 ;; Return value:  Size  Location     Type
  4385 ;;                  1    wreg      void 
  4386 ;; Registers used:
  4387 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4388 ;; Tracked objects:
  4389 ;;		On entry : 0/0
  4390 ;;		On exit  : 0/0
  4391 ;;		Unchanged: 0/0
  4392 ;; Data sizes:     COMRAM   BANK0   BANK1
  4393 ;;      Params:         0       0       0
  4394 ;;      Locals:         0       0       0
  4395 ;;      Temps:          0       0       0
  4396 ;;      Totals:         0       0       0
  4397 ;;Total ram usage:        0 bytes
  4398 ;; Hardware stack levels used: 1
  4399 ;; Hardware stack levels required when called: 6
  4400 ;; This function calls:
  4401 ;;		_LcPutChar
  4402 ;;		_nextRow
  4403 ;; This function is called by:
  4404 ;;		_menuMotor
  4405 ;; This function uses a non-reentrant model
  4406 ;;
  4407                           
  4408                           	psect	text25
  4409  001DF6                     __ptext25:
  4410                           	callstack 0
  4411  001DF6                     _displayResults:
  4412                           	callstack 0
  4413                           
  4414                           ;Menu.c: 487:     if (RESULTS[LCDrow][LCDcol] != '\0'){
  4415                           
  4416                           ;incstack = 0
  4417  001DF6  D80D               	call	PL40	;call to abstracted procedure
  4418  001DF8  6ED9               	movwf	fsr2l,c
  4419  001DFA  6ADA               	clrf	fsr2h,c
  4420  001DFC  50DF               	movf	indf2,w,c
  4421  001DFE  E102 EF54  F000    	bz	_nextRow
  4422                           
  4423                           ;Menu.c: 488:         LcPutChar(RESULTS[LCDrow][LCDcol]);
  4424  001E04  D806               	call	PL40	;call to abstracted procedure
  4425  001E06  ECDE  F00E         	call	PL36	;call to abstracted procedure
  4426  001E0A  ECE6  F00E         	call	_LcPutChar
  4427                           
  4428                           ;Menu.c: 489:         LCDcol++;
  4429  001E0E  2A33               	incf	_LCDcol^0,f,c
  4430                           
  4431                           ;Menu.c: 490:     } else {
  4432  001E10  0012               	return	
  4433  001E12                     __end_of_displayResults:
  4434                           	callstack 0
  4435  001E12                     PL40:
  4436                           	callstack 23
  4437  001E12  5034               	movf	_LCDrow^0,w,c
  4438  001E14  0D0B               	mullw	11
  4439  001E16  50F3               	movf	243,w,c
  4440  001E18  0F80               	addlw	low _RESULTS
  4441  001E1A  2433               	addwf	_LCDcol^0,w,c
  4442  001E1C  0012               	return	
  4443  001E1E                     __end_ofPL40:
  4444                           	callstack 0
  4445                           
  4446 ;; *************** function _displayLogOut *****************
  4447 ;; Defined at:
  4448 ;;		line 495 in file "Menu.c"
  4449 ;; Parameters:    Size  Location     Type
  4450 ;;		None
  4451 ;; Auto vars:     Size  Location     Type
  4452 ;;		None
  4453 ;; Return value:  Size  Location     Type
  4454 ;;                  1    wreg      void 
  4455 ;; Registers used:
  4456 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4457 ;; Tracked objects:
  4458 ;;		On entry : 0/0
  4459 ;;		On exit  : 0/0
  4460 ;;		Unchanged: 0/0
  4461 ;; Data sizes:     COMRAM   BANK0   BANK1
  4462 ;;      Params:         0       0       0
  4463 ;;      Locals:         0       0       0
  4464 ;;      Temps:          0       0       0
  4465 ;;      Totals:         0       0       0
  4466 ;;Total ram usage:        0 bytes
  4467 ;; Hardware stack levels used: 1
  4468 ;; Hardware stack levels required when called: 6
  4469 ;; This function calls:
  4470 ;;		_LcPutChar
  4471 ;;		_nextRow
  4472 ;; This function is called by:
  4473 ;;		_menuMotor
  4474 ;; This function uses a non-reentrant model
  4475 ;;
  4476                           
  4477                           	psect	text26
  4478  001BC8                     __ptext26:
  4479                           	callstack 0
  4480  001BC8                     _displayLogOut:
  4481                           	callstack 23
  4482                           
  4483                           ;Menu.c: 496:     if (LOGOUTMESSAGE[LCDcol] != '\0'){
  4484                           
  4485                           ;incstack = 0
  4486  001BC8  5033               	movf	_LCDcol^0,w,c
  4487  001BCA  0F96               	addlw	low _LOGOUTMESSAGE
  4488  001BCC  6ED9               	movwf	fsr2l,c
  4489  001BCE  6ADA               	clrf	fsr2h,c
  4490  001BD0  50DF               	movf	indf2,w,c
  4491  001BD2  E008               	bz	l6033
  4492                           
  4493                           ;Menu.c: 497:         LcPutChar(LOGOUTMESSAGE[LCDcol]);
  4494  001BD4  5033               	movf	_LCDcol^0,w,c
  4495  001BD6  0F96               	addlw	low _LOGOUTMESSAGE
  4496  001BD8  ECDE  F00E         	call	PL36	;call to abstracted procedure
  4497  001BDC  ECE6  F00E         	call	_LcPutChar
  4498                           
  4499                           ;Menu.c: 498:         LCDcol++;
  4500  001BE0  2A33               	incf	_LCDcol^0,f,c
  4501                           
  4502                           ;Menu.c: 499:     } else if (mUser.username[LCDcolm] != '\0' && LCDcolm < 8) {
  4503  001BE2  0012               	return	
  4504  001BE4                     l6033:
  4505  001BE4  5032               	movf	_LCDcolm^0,w,c
  4506  001BE6  ECAB  F004         	call	PL34	;call to abstracted procedure
  4507  001BEA  E102 EF54  F000    	bz	_nextRow
  4508  001BF0  0E08               	movlw	8
  4509  001BF2  6032               	cpfslt	_LCDcolm^0,c
  4510  001BF4  EF54  F000         	goto	_nextRow
  4511                           
  4512                           ;Menu.c: 500:         LcPutChar(mUser.username[LCDcolm]);
  4513  001BF8  5032               	movf	_LCDcolm^0,w,c
  4514  001BFA  ECAB  F004         	call	PL34	;call to abstracted procedure
  4515  001BFE  ECE6  F00E         	call	_LcPutChar
  4516                           
  4517                           ;Menu.c: 501:         LCDcolm++;
  4518  001C02  2A32               	incf	_LCDcolm^0,f,c
  4519                           
  4520                           ;Menu.c: 502:     } else {
  4521  001C04  0012               	return	
  4522  001C06                     __end_of_displayLogOut:
  4523                           	callstack 0
  4524                           
  4525 ;; *************** function _displayError *****************
  4526 ;; Defined at:
  4527 ;;		line 472 in file "Menu.c"
  4528 ;; Parameters:    Size  Location     Type
  4529 ;;		None
  4530 ;; Auto vars:     Size  Location     Type
  4531 ;;		None
  4532 ;; Return value:  Size  Location     Type
  4533 ;;                  1    wreg      void 
  4534 ;; Registers used:
  4535 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4536 ;; Tracked objects:
  4537 ;;		On entry : 0/0
  4538 ;;		On exit  : 0/0
  4539 ;;		Unchanged: 0/0
  4540 ;; Data sizes:     COMRAM   BANK0   BANK1
  4541 ;;      Params:         0       0       0
  4542 ;;      Locals:         0       0       0
  4543 ;;      Temps:          0       0       0
  4544 ;;      Totals:         0       0       0
  4545 ;;Total ram usage:        0 bytes
  4546 ;; Hardware stack levels used: 1
  4547 ;; Hardware stack levels required when called: 6
  4548 ;; This function calls:
  4549 ;;		_LcPutChar
  4550 ;;		_nextRow
  4551 ;; This function is called by:
  4552 ;;		_menuMotor
  4553 ;; This function uses a non-reentrant model
  4554 ;;
  4555                           
  4556                           	psect	text27
  4557  001C7C                     __ptext27:
  4558                           	callstack 0
  4559  001C7C                     _displayError:
  4560                           	callstack 23
  4561                           
  4562                           ;Menu.c: 473:     if (LCDrow == 0){
  4563                           
  4564                           ;incstack = 0
  4565  001C7C  5034               	movf	_LCDrow^0,w,c
  4566  001C7E  E110               	bnz	l5995
  4567                           
  4568                           ;Menu.c: 474:        if (ERROR[LCDcol] != '\0'){
  4569  001C80  5033               	movf	_LCDcol^0,w,c
  4570  001C82  0F9F               	addlw	low _ERROR
  4571  001C84  6ED9               	movwf	fsr2l,c
  4572  001C86  6ADA               	clrf	fsr2h,c
  4573  001C88  50DF               	movf	indf2,w,c
  4574  001C8A  E102 EF54  F000    	bz	_nextRow
  4575                           
  4576                           ;Menu.c: 475:             LcPutChar(ERROR[LCDcol]);
  4577  001C90  5033               	movf	_LCDcol^0,w,c
  4578  001C92  0F9F               	addlw	low _ERROR
  4579  001C94  ECDE  F00E         	call	PL36	;call to abstracted procedure
  4580  001C98  ECE6  F00E         	call	_LcPutChar
  4581                           
  4582                           ;Menu.c: 476:             LCDcol++;
  4583  001C9C  2A33               	incf	_LCDcol^0,f,c
  4584                           
  4585                           ;Menu.c: 477:         } else {
  4586  001C9E  0012               	return	
  4587  001CA0                     l5995:
  4588                           
  4589                           ;Menu.c: 481:         LcPutChar(val);
  4590  001CA0  5031               	movf	_val^0,w,c
  4591  001CA2  ECE6  F00E         	call	_LcPutChar
  4592                           
  4593                           ;Menu.c: 482:         LcPutChar(LCDcolm);
  4594  001CA6  5032               	movf	_LCDcolm^0,w,c
  4595  001CA8  ECE6  F00E         	call	_LcPutChar
  4596                           
  4597                           ;Menu.c: 483:         LCDrow++;
  4598  001CAC  2A34               	incf	_LCDrow^0,f,c
  4599  001CAE  0012               	return		;funcret
  4600  001CB0                     __end_of_displayError:
  4601                           	callstack 0
  4602                           
  4603 ;; *************** function _nextRow *****************
  4604 ;; Defined at:
  4605 ;;		line 507 in file "Menu.c"
  4606 ;; Parameters:    Size  Location     Type
  4607 ;;		None
  4608 ;; Auto vars:     Size  Location     Type
  4609 ;;		None
  4610 ;; Return value:  Size  Location     Type
  4611 ;;                  1    wreg      void 
  4612 ;; Registers used:
  4613 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4614 ;; Tracked objects:
  4615 ;;		On entry : 0/0
  4616 ;;		On exit  : 0/0
  4617 ;;		Unchanged: 0/0
  4618 ;; Data sizes:     COMRAM   BANK0   BANK1
  4619 ;;      Params:         0       0       0
  4620 ;;      Locals:         0       0       0
  4621 ;;      Temps:          0       0       0
  4622 ;;      Totals:         0       0       0
  4623 ;;Total ram usage:        0 bytes
  4624 ;; Hardware stack levels used: 1
  4625 ;; Hardware stack levels required when called: 5
  4626 ;; This function calls:
  4627 ;;		_LcGotoXY
  4628 ;; This function is called by:
  4629 ;;		_displayString
  4630 ;;		_mainMenu
  4631 ;;		_displayError
  4632 ;;		_displayResults
  4633 ;;		_displayLogOut
  4634 ;; This function uses a non-reentrant model
  4635 ;;
  4636                           
  4637                           	psect	text28
  4638  0000A8                     __ptext28:
  4639                           	callstack 0
  4640  0000A8                     _nextRow:
  4641                           	callstack 23
  4642                           
  4643                           ;Menu.c: 508:     LCDrow++;
  4644                           
  4645                           ;incstack = 0
  4646  0000A8  2A34               	incf	_LCDrow^0,f,c
  4647                           
  4648                           ;Menu.c: 509:     LcGotoXY(0,1);
  4649  0000AA  ECE5  F008         	call	PL60	;call to abstracted procedure
  4650  0000AE  ECA4  F00E         	call	_LcGotoXY
  4651                           
  4652                           ;Menu.c: 510:     LCDcol = 0;
  4653  0000B2  6A33               	clrf	_LCDcol^0,c
  4654  0000B4  0012               	return		;funcret
  4655  0000B6                     __end_of_nextRow:
  4656                           	callstack 0
  4657                           
  4658 ;; *************** function _SiRecievedByte *****************
  4659 ;; Defined at:
  4660 ;;		line 45 in file "SIO.c"
  4661 ;; Parameters:    Size  Location     Type
  4662 ;;		None
  4663 ;; Auto vars:     Size  Location     Type
  4664 ;;		None
  4665 ;; Return value:  Size  Location     Type
  4666 ;;                  1    wreg      unsigned char 
  4667 ;; Registers used:
  4668 ;;		wreg
  4669 ;; Tracked objects:
  4670 ;;		On entry : 0/0
  4671 ;;		On exit  : 0/0
  4672 ;;		Unchanged: 0/0
  4673 ;; Data sizes:     COMRAM   BANK0   BANK1
  4674 ;;      Params:         0       0       0
  4675 ;;      Locals:         0       0       0
  4676 ;;      Temps:          0       0       0
  4677 ;;      Totals:         0       0       0
  4678 ;;Total ram usage:        0 bytes
  4679 ;; Hardware stack levels used: 1
  4680 ;; Hardware stack levels required when called: 2
  4681 ;; This function calls:
  4682 ;;		Nothing
  4683 ;; This function is called by:
  4684 ;;		_menuMotor
  4685 ;; This function uses a non-reentrant model
  4686 ;;
  4687                           
  4688                           	psect	text29
  4689  000164                     __ptext29:
  4690                           	callstack 0
  4691  000164                     _SiRecievedByte:
  4692                           	callstack 27
  4693                           
  4694                           ;SIO.c: 46:     return PIR1bits.RCIF;
  4695                           
  4696                           ;incstack = 0
  4697  000164  BA9E               	btfsc	158,5,c	;volatile
  4698  000166  0C01               	retlw	1
  4699  000168  0C00               	retlw	0	;funcret
  4700  00016A                     __end_of_SiRecievedByte:
  4701                           	callstack 0
  4702                           
  4703 ;; *************** function _SiReadByte *****************
  4704 ;; Defined at:
  4705 ;;		line 49 in file "SIO.c"
  4706 ;; Parameters:    Size  Location     Type
  4707 ;;		None
  4708 ;; Auto vars:     Size  Location     Type
  4709 ;;		None
  4710 ;; Return value:  Size  Location     Type
  4711 ;;                  1    wreg      unsigned char 
  4712 ;; Registers used:
  4713 ;;		wreg, status,2
  4714 ;; Tracked objects:
  4715 ;;		On entry : 0/0
  4716 ;;		On exit  : 0/0
  4717 ;;		Unchanged: 0/0
  4718 ;; Data sizes:     COMRAM   BANK0   BANK1
  4719 ;;      Params:         0       0       0
  4720 ;;      Locals:         0       0       0
  4721 ;;      Temps:          0       0       0
  4722 ;;      Totals:         0       0       0
  4723 ;;Total ram usage:        0 bytes
  4724 ;; Hardware stack levels used: 1
  4725 ;; Hardware stack levels required when called: 2
  4726 ;; This function calls:
  4727 ;;		Nothing
  4728 ;; This function is called by:
  4729 ;;		_menuMotor
  4730 ;; This function uses a non-reentrant model
  4731 ;;
  4732                           
  4733                           	psect	text30
  4734  000180                     __ptext30:
  4735                           	callstack 0
  4736  000180                     _SiReadByte:
  4737                           	callstack 27
  4738                           
  4739                           ;SIO.c: 50:     return RCREG;
  4740                           
  4741                           ;incstack = 0
  4742  000180  50AE               	movf	174,w,c	;volatile
  4743  000182  0012               	return		;funcret
  4744  000184                     __end_of_SiReadByte:
  4745                           	callstack 0
  4746                           
  4747 ;; *************** function _LcCursorOn *****************
  4748 ;; Defined at:
  4749 ;;		line 112 in file "LcTLCD.c"
  4750 ;; Parameters:    Size  Location     Type
  4751 ;;		None
  4752 ;; Auto vars:     Size  Location     Type
  4753 ;;		None
  4754 ;; Return value:  Size  Location     Type
  4755 ;;                  1    wreg      void 
  4756 ;; Registers used:
  4757 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4758 ;; Tracked objects:
  4759 ;;		On entry : 0/0
  4760 ;;		On exit  : 0/0
  4761 ;;		Unchanged: 0/0
  4762 ;; Data sizes:     COMRAM   BANK0   BANK1
  4763 ;;      Params:         0       0       0
  4764 ;;      Locals:         0       0       0
  4765 ;;      Temps:          0       0       0
  4766 ;;      Totals:         0       0       0
  4767 ;;Total ram usage:        0 bytes
  4768 ;; Hardware stack levels used: 1
  4769 ;; Hardware stack levels required when called: 4
  4770 ;; This function calls:
  4771 ;;		_CantaIR
  4772 ;;		_WaitForBusy
  4773 ;; This function is called by:
  4774 ;;		_menuMotor
  4775 ;;		_timeMotor
  4776 ;; This function uses a non-reentrant model
  4777 ;;
  4778                           
  4779                           	psect	text31
  4780  0000EC                     __ptext31:
  4781                           	callstack 0
  4782  0000EC                     _LcCursorOn:
  4783                           	callstack 25
  4784                           
  4785                           ;LcTLCD.c: 115:  WaitForBusy();
  4786                           
  4787                           ;incstack = 0
  4788  0000EC  EC03  F00E         	call	_WaitForBusy	;wreg free
  4789                           
  4790                           ;LcTLCD.c: 116:  CantaIR(0x08 | 0x04 | 0x02);
  4791  0000F0  0E0E               	movlw	14
  4792  0000F2  EFBB  F00F         	goto	_CantaIR
  4793  0000F6                     __end_of_LcCursorOn:
  4794                           	callstack 0
  4795                           
  4796 ;; *************** function _LcCursorOff *****************
  4797 ;; Defined at:
  4798 ;;		line 119 in file "LcTLCD.c"
  4799 ;; Parameters:    Size  Location     Type
  4800 ;;		None
  4801 ;; Auto vars:     Size  Location     Type
  4802 ;;		None
  4803 ;; Return value:  Size  Location     Type
  4804 ;;                  1    wreg      void 
  4805 ;; Registers used:
  4806 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4807 ;; Tracked objects:
  4808 ;;		On entry : 0/0
  4809 ;;		On exit  : 0/0
  4810 ;;		Unchanged: 0/0
  4811 ;; Data sizes:     COMRAM   BANK0   BANK1
  4812 ;;      Params:         0       0       0
  4813 ;;      Locals:         0       0       0
  4814 ;;      Temps:          0       0       0
  4815 ;;      Totals:         0       0       0
  4816 ;;Total ram usage:        0 bytes
  4817 ;; Hardware stack levels used: 1
  4818 ;; Hardware stack levels required when called: 4
  4819 ;; This function calls:
  4820 ;;		_CantaIR
  4821 ;;		_WaitForBusy
  4822 ;; This function is called by:
  4823 ;;		_menuMotor
  4824 ;; This function uses a non-reentrant model
  4825 ;;
  4826                           
  4827                           	psect	text32
  4828  0000F6                     __ptext32:
  4829                           	callstack 0
  4830  0000F6                     _LcCursorOff:
  4831                           	callstack 25
  4832                           
  4833                           ;LcTLCD.c: 122:  WaitForBusy();
  4834                           
  4835                           ;incstack = 0
  4836  0000F6  EC03  F00E         	call	_WaitForBusy	;wreg free
  4837                           
  4838                           ;LcTLCD.c: 123:  CantaIR(0x08 | 0x04);
  4839  0000FA  0E0C               	movlw	12
  4840  0000FC  EFBB  F00F         	goto	_CantaIR
  4841  000100                     __end_of_LcCursorOff:
  4842                           	callstack 0
  4843                           
  4844 ;; *************** function _KeSetMode *****************
  4845 ;; Defined at:
  4846 ;;		line 247 in file "keypad.c"
  4847 ;; Parameters:    Size  Location     Type
  4848 ;;  menuMode        1    wreg     unsigned char 
  4849 ;; Auto vars:     Size  Location     Type
  4850 ;;  menuMode        1    6[COMRAM] unsigned char 
  4851 ;; Return value:  Size  Location     Type
  4852 ;;                  1    wreg      void 
  4853 ;; Registers used:
  4854 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4855 ;; Tracked objects:
  4856 ;;		On entry : 0/0
  4857 ;;		On exit  : 0/0
  4858 ;;		Unchanged: 0/0
  4859 ;; Data sizes:     COMRAM   BANK0   BANK1
  4860 ;;      Params:         0       0       0
  4861 ;;      Locals:         1       0       0
  4862 ;;      Temps:          0       0       0
  4863 ;;      Totals:         1       0       0
  4864 ;;Total ram usage:        1 bytes
  4865 ;; Hardware stack levels used: 1
  4866 ;; Hardware stack levels required when called: 3
  4867 ;; This function calls:
  4868 ;;		_TiResetTics
  4869 ;; This function is called by:
  4870 ;;		_menuMotor
  4871 ;; This function uses a non-reentrant model
  4872 ;;
  4873                           
  4874                           	psect	text33
  4875  001E6A                     __ptext33:
  4876                           	callstack 0
  4877  001E6A                     _KeSetMode:
  4878                           	callstack 26
  4879                           
  4880                           ;incstack = 0
  4881                           ;KeSetMode@menuMode stored from wreg
  4882  001E6A  6E5F               	movwf	KeSetMode@menuMode^0,c
  4883                           
  4884                           ;keypad.c: 248:     if (menuMode == 1){
  4885  001E6C  045F               	decf	KeSetMode@menuMode^0,w,c
  4886  001E6E  E108               	bnz	l5927
  4887                           
  4888                           ;keypad.c: 249:         previous = 0;
  4889  001E70  6A41               	clrf	_previous^0,c
  4890                           
  4891                           ;keypad.c: 250:         numPresses = 0;
  4892  001E72  6A3F               	clrf	_numPresses^0,c
  4893                           
  4894                           ;keypad.c: 251:         available = 0;
  4895  001E74  6A3E               	clrf	_available^0,c
  4896                           
  4897                           ;keypad.c: 252:         stateSMS = 2;
  4898  001E76  0E02               	movlw	2
  4899  001E78  6E3C               	movwf	_stateSMS^0,c
  4900                           
  4901                           ;keypad.c: 253:         TiResetTics(timer_SMS);
  4902  001E7A  5043               	movf	_timer_SMS^0,w,c
  4903  001E7C  EFAB  F00F         	goto	_TiResetTics
  4904  001E80                     l5927:
  4905  001E80  505F               	movf	KeSetMode@menuMode^0,w,c
  4906  001E82  A4D8               	btfss	status,2,c
  4907  001E84  0012               	return	
  4908                           
  4909                           ;keypad.c: 255:         stateSMS = 4;
  4910  001E86  D000               	goto	PL84	;call to abstracted procedure
  4911  001E88                     __end_of_KeSetMode:
  4912                           	callstack 0
  4913  001E88                     PL84:
  4914                           	callstack 26
  4915  001E88  0E04               	movlw	4
  4916  001E8A  6E3C               	movwf	_stateSMS^0,c
  4917  001E8C  0C04               	retlw	4
  4918  001E8E                     __end_ofPL84:
  4919                           	callstack 0
  4920                           
  4921 ;; *************** function _KeGetCharValue *****************
  4922 ;; Defined at:
  4923 ;;		line 221 in file "keypad.c"
  4924 ;; Parameters:    Size  Location     Type
  4925 ;;		None
  4926 ;; Auto vars:     Size  Location     Type
  4927 ;;		None
  4928 ;; Return value:  Size  Location     Type
  4929 ;;                  1    wreg      unsigned char 
  4930 ;; Registers used:
  4931 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4932 ;; Tracked objects:
  4933 ;;		On entry : 0/0
  4934 ;;		On exit  : 0/0
  4935 ;;		Unchanged: 0/0
  4936 ;; Data sizes:     COMRAM   BANK0   BANK1
  4937 ;;      Params:         0       0       0
  4938 ;;      Locals:         0       0       0
  4939 ;;      Temps:          0       0       0
  4940 ;;      Totals:         0       0       0
  4941 ;;Total ram usage:        0 bytes
  4942 ;; Hardware stack levels used: 1
  4943 ;; Hardware stack levels required when called: 4
  4944 ;; This function calls:
  4945 ;;		_KeGetGenericValue
  4946 ;;		_getFullValue
  4947 ;; This function is called by:
  4948 ;;		_menuMotor
  4949 ;; This function uses a non-reentrant model
  4950 ;;
  4951                           
  4952                           	psect	text34
  4953  00013C                     __ptext34:
  4954                           	callstack 0
  4955  00013C                     _KeGetCharValue:
  4956                           	callstack 25
  4957                           
  4958                           ;keypad.c: 222:     return getFullValue(KeGetGenericValue());
  4959                           
  4960                           ;incstack = 0
  4961  00013C  EC8B  F00F         	call	_KeGetGenericValue	;wreg free
  4962  000140  EF70  F00D         	goto	_getFullValue
  4963  000144                     __end_of_KeGetCharValue:
  4964                           	callstack 0
  4965                           
  4966 ;; *************** function _getFullValue *****************
  4967 ;; Defined at:
  4968 ;;		line 230 in file "keypad.c"
  4969 ;; Parameters:    Size  Location     Type
  4970 ;;  generic         1    wreg     unsigned char 
  4971 ;; Auto vars:     Size  Location     Type
  4972 ;;  generic         1    9[COMRAM] unsigned char 
  4973 ;; Return value:  Size  Location     Type
  4974 ;;                  1    wreg      unsigned char 
  4975 ;; Registers used:
  4976 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
  4977 ;; Tracked objects:
  4978 ;;		On entry : 0/0
  4979 ;;		On exit  : 0/0
  4980 ;;		Unchanged: 0/0
  4981 ;; Data sizes:     COMRAM   BANK0   BANK1
  4982 ;;      Params:         0       0       0
  4983 ;;      Locals:         1       0       0
  4984 ;;      Temps:          4       0       0
  4985 ;;      Totals:         5       0       0
  4986 ;;Total ram usage:        5 bytes
  4987 ;; Hardware stack levels used: 1
  4988 ;; Hardware stack levels required when called: 2
  4989 ;; This function calls:
  4990 ;;		Nothing
  4991 ;; This function is called by:
  4992 ;;		_KeGetCharValue
  4993 ;; This function uses a non-reentrant model
  4994 ;;
  4995                           
  4996                           	psect	text35
  4997  001AE0                     __ptext35:
  4998                           	callstack 0
  4999  001AE0                     _getFullValue:
  5000                           	callstack 26
  5001                           
  5002                           ;incstack = 0
  5003                           ;getFullValue@generic stored from wreg
  5004  001AE0  6E62               	movwf	getFullValue@generic^0,c
  5005                           
  5006                           ;keypad.c: 232:     if (generic - '0' >= 2 && generic - '0' <= 9){
  5007  001AE2  D81F               	call	PL32	;call to abstracted procedure
  5008  001AE4  E103               	bnz	u2850
  5009  001AE6  0E02               	movlw	2
  5010  001AE8  5C60               	subwf	(??_getFullValue+2)^0,w,c
  5011  001AEA  E30A               	bnc	l3959
  5012  001AEC                     u2850:
  5013  001AEC  D81A               	call	PL32	;call to abstracted procedure
  5014  001AEE  E108               	bnz	l3959
  5015  001AF0  0E0A               	movlw	10
  5016  001AF2  5C60               	subwf	(??_getFullValue+2)^0,w,c
  5017  001AF4  E205               	bc	l3959
  5018                           
  5019                           ;keypad.c: 233:         if (SMSTABLE[generic - '0' - 1][(numPresses-1)] == '\0'){
  5020  001AF6  D806               	call	PL22	;call to abstracted procedure
  5021  001AF8  E105               	bnz	PL22
  5022                           
  5023                           ;keypad.c: 234:             numPresses = 1;
  5024  001AFA  0E01               	movlw	1
  5025  001AFC  6E3F               	movwf	_numPresses^0,c
  5026  001AFE                     l3955:
  5027                           
  5028                           ;keypad.c: 236:         return SMSTABLE[generic - '0' - 1][(numPresses-1)];
  5029  001AFE  D002               	goto	PL22	;call to abstracted procedure
  5030  001B00                     l3959:
  5031                           
  5032                           ;keypad.c: 238:     return generic;
  5033  001B00  5062               	movf	getFullValue@generic^0,w,c
  5034  001B02  0012               	return		;funcret
  5035  001B04                     __end_of_getFullValue:
  5036                           	callstack 0
  5037  001B04                     PL22:
  5038                           	callstack 26
  5039  001B04  5062               	movf	getFullValue@generic^0,w,c
  5040  001B06  0D06               	mullw	6
  5041  001B08  50F3               	movf	243,w,c
  5042  001B0A  0F99               	addlw	low _SMSTABLE
  5043  001B0C  243F               	addwf	_numPresses^0,w,c
  5044  001B0E  6E5E               	movwf	??_getFullValue^0,c
  5045  001B10  0ED9               	movlw	217
  5046  001B12  265E               	addwf	??_getFullValue^0,f,c
  5047  001B14  C05E  FFF6         	movff	??_getFullValue,tblptrl
  5048  001B18                     	if	1	;There is more than 1 active tblptr byte
  5049  001B18  0E02               	movlw	high __smallconst
  5050  001B1A  6EF7               	movwf	tblptrh,c
  5051  001B1C                     	endif
  5052  001B1C                     	if	0	;tblptru may be non-zero
  5053  001B1C                     	endif
  5054  001B1C                     	if	0	;tblptru may be non-zero
  5055  001B1C                     	endif
  5056  001B1C  0008               	tblrd		*
  5057  001B1E  50F5               	movf	tablat,w,c
  5058  001B20  0012               	return	
  5059  001B22                     __end_ofPL22:
  5060                           	callstack 0
  5061  001B22                     PL32:
  5062                           	callstack 26
  5063  001B22  0ED0               	movlw	208
  5064  001B24  6E5E               	movwf	??_getFullValue^0,c
  5065  001B26  685F               	setf	(??_getFullValue+1)^0,c
  5066  001B28  5062               	movf	getFullValue@generic^0,w,c
  5067  001B2A  6E60               	movwf	(??_getFullValue+2)^0,c
  5068  001B2C  6A61               	clrf	(??_getFullValue+3)^0,c
  5069  001B2E  505E               	movf	??_getFullValue^0,w,c
  5070  001B30  2660               	addwf	(??_getFullValue+2)^0,f,c
  5071  001B32  505F               	movf	(??_getFullValue+1)^0,w,c
  5072  001B34  2261               	addwfc	(??_getFullValue+3)^0,f,c
  5073  001B36  5061               	movf	(??_getFullValue+3)^0,w,c
  5074  001B38  0012               	return	
  5075  001B3A                     __end_ofPL32:
  5076                           	callstack 0
  5077                           
  5078 ;; *************** function _JoSetMode *****************
  5079 ;; Defined at:
  5080 ;;		line 107 in file "Joystick.c"
  5081 ;; Parameters:    Size  Location     Type
  5082 ;;  mode            1    wreg     unsigned char 
  5083 ;; Auto vars:     Size  Location     Type
  5084 ;;  mode            1    5[COMRAM] unsigned char 
  5085 ;; Return value:  Size  Location     Type
  5086 ;;                  1    wreg      void 
  5087 ;; Registers used:
  5088 ;;		wreg
  5089 ;; Tracked objects:
  5090 ;;		On entry : 0/0
  5091 ;;		On exit  : 0/0
  5092 ;;		Unchanged: 0/0
  5093 ;; Data sizes:     COMRAM   BANK0   BANK1
  5094 ;;      Params:         0       0       0
  5095 ;;      Locals:         1       0       0
  5096 ;;      Temps:          0       0       0
  5097 ;;      Totals:         1       0       0
  5098 ;;Total ram usage:        1 bytes
  5099 ;; Hardware stack levels used: 1
  5100 ;; Hardware stack levels required when called: 2
  5101 ;; This function calls:
  5102 ;;		Nothing
  5103 ;; This function is called by:
  5104 ;;		_menuMotor
  5105 ;; This function uses a non-reentrant model
  5106 ;;
  5107                           
  5108                           	psect	text36
  5109  000144                     __ptext36:
  5110                           	callstack 0
  5111  000144                     _JoSetMode:
  5112                           	callstack 27
  5113                           
  5114                           ;incstack = 0
  5115                           ;JoSetMode@mode stored from wreg
  5116  000144  6E5E               	movwf	JoSetMode@mode^0,c
  5117                           
  5118                           ;Joystick.c: 108:     joyMode = mode;
  5119  000146  C05E  F029         	movff	JoSetMode@mode,_joyMode
  5120  00014A  0012               	return		;funcret
  5121  00014C                     __end_of_JoSetMode:
  5122                           	callstack 0
  5123                           
  5124 ;; *************** function _JoMoved *****************
  5125 ;; Defined at:
  5126 ;;		line 99 in file "Joystick.c"
  5127 ;; Parameters:    Size  Location     Type
  5128 ;;		None
  5129 ;; Auto vars:     Size  Location     Type
  5130 ;;		None
  5131 ;; Return value:  Size  Location     Type
  5132 ;;                  1    wreg      unsigned char 
  5133 ;; Registers used:
  5134 ;;		wreg, status,2
  5135 ;; Tracked objects:
  5136 ;;		On entry : 0/0
  5137 ;;		On exit  : 0/0
  5138 ;;		Unchanged: 0/0
  5139 ;; Data sizes:     COMRAM   BANK0   BANK1
  5140 ;;      Params:         0       0       0
  5141 ;;      Locals:         0       0       0
  5142 ;;      Temps:          0       0       0
  5143 ;;      Totals:         0       0       0
  5144 ;;Total ram usage:        0 bytes
  5145 ;; Hardware stack levels used: 1
  5146 ;; Hardware stack levels required when called: 2
  5147 ;; This function calls:
  5148 ;;		Nothing
  5149 ;; This function is called by:
  5150 ;;		_menuMotor
  5151 ;; This function uses a non-reentrant model
  5152 ;;
  5153                           
  5154                           	psect	text37
  5155  000184                     __ptext37:
  5156                           	callstack 0
  5157  000184                     _JoMoved:
  5158                           	callstack 27
  5159                           
  5160                           ;Joystick.c: 100:     return moved;
  5161                           
  5162                           ;incstack = 0
  5163  000184  502B               	movf	_moved^0,w,c
  5164  000186  0012               	return		;funcret
  5165  000188                     __end_of_JoMoved:
  5166                           	callstack 0
  5167                           
  5168 ;; *************** function _JoDirection *****************
  5169 ;; Defined at:
  5170 ;;		line 103 in file "Joystick.c"
  5171 ;; Parameters:    Size  Location     Type
  5172 ;;		None
  5173 ;; Auto vars:     Size  Location     Type
  5174 ;;		None
  5175 ;; Return value:  Size  Location     Type
  5176 ;;                  1    wreg      unsigned char 
  5177 ;; Registers used:
  5178 ;;		wreg, status,2
  5179 ;; Tracked objects:
  5180 ;;		On entry : 0/0
  5181 ;;		On exit  : 0/0
  5182 ;;		Unchanged: 0/0
  5183 ;; Data sizes:     COMRAM   BANK0   BANK1
  5184 ;;      Params:         0       0       0
  5185 ;;      Locals:         0       0       0
  5186 ;;      Temps:          0       0       0
  5187 ;;      Totals:         0       0       0
  5188 ;;Total ram usage:        0 bytes
  5189 ;; Hardware stack levels used: 1
  5190 ;; Hardware stack levels required when called: 2
  5191 ;; This function calls:
  5192 ;;		Nothing
  5193 ;; This function is called by:
  5194 ;;		_menuMotor
  5195 ;; This function uses a non-reentrant model
  5196 ;;
  5197                           
  5198                           	psect	text38
  5199  000188                     __ptext38:
  5200                           	callstack 0
  5201  000188                     _JoDirection:
  5202                           	callstack 27
  5203                           
  5204                           ;Joystick.c: 104:     return send;
  5205                           
  5206                           ;incstack = 0
  5207  000188  502E               	movf	_send^0,w,c
  5208  00018A  0012               	return		;funcret
  5209  00018C                     __end_of_JoDirection:
  5210                           	callstack 0
  5211                           
  5212 ;; *************** function _DaSaveUser *****************
  5213 ;; Defined at:
  5214 ;;		line 307 in file "EEPROM.c"
  5215 ;; Parameters:    Size  Location     Type
  5216 ;;  regUser         1    5[COMRAM] PTR struct .
  5217 ;;		 -> mUser(18), 
  5218 ;; Auto vars:     Size  Location     Type
  5219 ;;		None
  5220 ;; Return value:  Size  Location     Type
  5221 ;;                  1    wreg      void 
  5222 ;; Registers used:
  5223 ;;		wreg, status,2, status,0
  5224 ;; Tracked objects:
  5225 ;;		On entry : 0/0
  5226 ;;		On exit  : 0/0
  5227 ;;		Unchanged: 0/0
  5228 ;; Data sizes:     COMRAM   BANK0   BANK1
  5229 ;;      Params:         1       0       0
  5230 ;;      Locals:         0       0       0
  5231 ;;      Temps:          0       0       0
  5232 ;;      Totals:         1       0       0
  5233 ;;Total ram usage:        1 bytes
  5234 ;; Hardware stack levels used: 1
  5235 ;; Hardware stack levels required when called: 2
  5236 ;; This function calls:
  5237 ;;		Nothing
  5238 ;; This function is called by:
  5239 ;;		_menuMotor
  5240 ;; This function uses a non-reentrant model
  5241 ;;
  5242                           
  5243                           	psect	text39
  5244  000062                     __ptext39:
  5245                           	callstack 0
  5246  000062                     _DaSaveUser:
  5247                           	callstack 27
  5248                           
  5249                           ;EEPROM.c: 308:     state = 5;
  5250                           
  5251                           ;incstack = 0
  5252  000062  0E05               	movlw	5
  5253  000064  6E1E               	movwf	_state@EEPROM$F1761^0,c
  5254                           
  5255                           ;EEPROM.c: 309:     position = 0;
  5256  000066  6A1F               	clrf	_position^0,c
  5257                           
  5258                           ;EEPROM.c: 310:     userNum = 0;
  5259  000068  6A1D               	clrf	_userNum^0,c
  5260                           
  5261                           ;EEPROM.c: 311:     mUser = regUser;
  5262  00006A  C05E  F00B         	movff	DaSaveUser@regUser,_mUser@EEPROM$F1764
  5263  00006E  6A0C               	clrf	(_mUser@EEPROM$F1764+1)^0,c
  5264                           
  5265                           ;EEPROM.c: 312:     status = 2;
  5266  000070  0E02               	movlw	2
  5267  000072  6E1C               	movwf	_status^0,c
  5268  000074  0C02               	retlw	2	;funcret
  5269  000076                     __end_of_DaSaveUser:
  5270                           	callstack 0
  5271                           
  5272 ;; *************** function _DaSaveScore *****************
  5273 ;; Defined at:
  5274 ;;		line 323 in file "EEPROM.c"
  5275 ;; Parameters:    Size  Location     Type
  5276 ;;  userScore       1    wreg     unsigned char 
  5277 ;; Auto vars:     Size  Location     Type
  5278 ;;  userScore       1   19[COMRAM] unsigned char 
  5279 ;; Return value:  Size  Location     Type
  5280 ;;                  1    wreg      void 
  5281 ;; Registers used:
  5282 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5283 ;; Tracked objects:
  5284 ;;		On entry : 0/0
  5285 ;;		On exit  : 0/0
  5286 ;;		Unchanged: 0/0
  5287 ;; Data sizes:     COMRAM   BANK0   BANK1
  5288 ;;      Params:         0       0       0
  5289 ;;      Locals:         1       0       0
  5290 ;;      Temps:          0       0       0
  5291 ;;      Totals:         1       0       0
  5292 ;;Total ram usage:        1 bytes
  5293 ;; Hardware stack levels used: 1
  5294 ;; Hardware stack levels required when called: 6
  5295 ;; This function calls:
  5296 ;;		_LcClear
  5297 ;;		_LcPutChar
  5298 ;;		___lbdiv
  5299 ;;		___lbmod
  5300 ;; This function is called by:
  5301 ;;		_menuMotor
  5302 ;; This function uses a non-reentrant model
  5303 ;;
  5304                           
  5305                           	psect	text40
  5306  001CB0                     __ptext40:
  5307                           	callstack 0
  5308  001CB0                     _DaSaveScore:
  5309                           	callstack 23
  5310                           
  5311                           ;incstack = 0
  5312                           ;DaSaveScore@userScore stored from wreg
  5313  001CB0  6E6C               	movwf	DaSaveScore@userScore^0,c
  5314                           
  5315                           ;EEPROM.c: 324:     saveScore = userScore;
  5316  001CB2  C06C  F01A         	movff	DaSaveScore@userScore,_saveScore
  5317                           
  5318                           ;EEPROM.c: 325:     LcClear();
  5319  001CB6  EC1B  F000         	call	_LcClear	;wreg free
  5320                           
  5321                           ;EEPROM.c: 326:     LcPutChar((saveScore/10)+'0');
  5322  001CBA  0E0A               	movlw	10
  5323  001CBC  6E5E               	movwf	___lbdiv@divisor^0,c
  5324  001CBE  501A               	movf	_saveScore^0,w,c
  5325  001CC0  EC72  F00E         	call	___lbdiv
  5326  001CC4  0F30               	addlw	48
  5327  001CC6  ECE6  F00E         	call	_LcPutChar
  5328                           
  5329                           ;EEPROM.c: 327:     LcPutChar((saveScore%10)+'0');
  5330  001CCA  0E0A               	movlw	10
  5331  001CCC  6E5E               	movwf	___lbmod@divisor^0,c
  5332  001CCE  501A               	movf	_saveScore^0,w,c
  5333  001CD0  EC0F  F00F         	call	___lbmod
  5334  001CD4  0F30               	addlw	48
  5335  001CD6  ECE6  F00E         	call	_LcPutChar
  5336                           
  5337                           ;EEPROM.c: 328:     position = 0;
  5338  001CDA  6A1F               	clrf	_position^0,c
  5339                           
  5340                           ;EEPROM.c: 329:     status = 0;
  5341  001CDC  6A1C               	clrf	_status^0,c
  5342                           
  5343                           ;EEPROM.c: 330:     state = 20;
  5344  001CDE  0E14               	movlw	20
  5345  001CE0  6E1E               	movwf	_state@EEPROM$F1761^0,c
  5346  001CE2  0C14               	retlw	20	;funcret
  5347  001CE4                     __end_of_DaSaveScore:
  5348                           	callstack 0
  5349                           
  5350 ;; *************** function _LcClear *****************
  5351 ;; Defined at:
  5352 ;;		line 105 in file "LcTLCD.c"
  5353 ;; Parameters:    Size  Location     Type
  5354 ;;		None
  5355 ;; Auto vars:     Size  Location     Type
  5356 ;;		None
  5357 ;; Return value:  Size  Location     Type
  5358 ;;                  1    wreg      void 
  5359 ;; Registers used:
  5360 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5361 ;; Tracked objects:
  5362 ;;		On entry : 0/0
  5363 ;;		On exit  : 0/0
  5364 ;;		Unchanged: 0/0
  5365 ;; Data sizes:     COMRAM   BANK0   BANK1
  5366 ;;      Params:         0       0       0
  5367 ;;      Locals:         0       0       0
  5368 ;;      Temps:          0       0       0
  5369 ;;      Totals:         0       0       0
  5370 ;;Total ram usage:        0 bytes
  5371 ;; Hardware stack levels used: 1
  5372 ;; Hardware stack levels required when called: 4
  5373 ;; This function calls:
  5374 ;;		_CantaIR
  5375 ;;		_Espera
  5376 ;;		_WaitForBusy
  5377 ;; This function is called by:
  5378 ;;		_resetDisplay
  5379 ;;		_DaSaveScore
  5380 ;; This function uses a non-reentrant model
  5381 ;;
  5382                           
  5383                           	psect	text41
  5384  000036                     __ptext41:
  5385                           	callstack 0
  5386  000036                     _LcClear:
  5387                           	callstack 24
  5388                           
  5389                           ;LcTLCD.c: 108:  WaitForBusy(); CantaIR(0x01);
  5390                           
  5391                           ;incstack = 0
  5392  000036  EC03  F00E         	call	_WaitForBusy	;wreg free
  5393  00003A  0E01               	movlw	1
  5394  00003C  ECBB  F00F         	call	_CantaIR
  5395                           
  5396                           ;LcTLCD.c: 109:  Espera(Timer, 3);
  5397  000040  EC0E  F00B         	call	PL16	;call to abstracted procedure
  5398  000044  0E03               	movlw	3
  5399  000046  6E67               	movwf	Espera@ms^0,c
  5400  000048  EF9B  F00F         	goto	_Espera	;wreg free
  5401  00004C                     __end_of_LcClear:
  5402                           	callstack 0
  5403                           
  5404 ;; *************** function _DaGetStatus *****************
  5405 ;; Defined at:
  5406 ;;		line 315 in file "EEPROM.c"
  5407 ;; Parameters:    Size  Location     Type
  5408 ;;		None
  5409 ;; Auto vars:     Size  Location     Type
  5410 ;;		None
  5411 ;; Return value:  Size  Location     Type
  5412 ;;                  1    wreg      unsigned char 
  5413 ;; Registers used:
  5414 ;;		wreg, status,2
  5415 ;; Tracked objects:
  5416 ;;		On entry : 0/0
  5417 ;;		On exit  : 0/0
  5418 ;;		Unchanged: 0/0
  5419 ;; Data sizes:     COMRAM   BANK0   BANK1
  5420 ;;      Params:         0       0       0
  5421 ;;      Locals:         0       0       0
  5422 ;;      Temps:          0       0       0
  5423 ;;      Totals:         0       0       0
  5424 ;;Total ram usage:        0 bytes
  5425 ;; Hardware stack levels used: 1
  5426 ;; Hardware stack levels required when called: 2
  5427 ;; This function calls:
  5428 ;;		Nothing
  5429 ;; This function is called by:
  5430 ;;		_menuMotor
  5431 ;; This function uses a non-reentrant model
  5432 ;;
  5433                           
  5434                           	psect	text42
  5435  00018C                     __ptext42:
  5436                           	callstack 0
  5437  00018C                     _DaGetStatus:
  5438                           	callstack 27
  5439                           
  5440                           ;EEPROM.c: 316:     return status;
  5441                           
  5442                           ;incstack = 0
  5443  00018C  501C               	movf	_status^0,w,c
  5444  00018E  0012               	return		;funcret
  5445  000190                     __end_of_DaGetStatus:
  5446                           	callstack 0
  5447                           
  5448 ;; *************** function _DaGetNumScores *****************
  5449 ;; Defined at:
  5450 ;;		line 369 in file "EEPROM.c"
  5451 ;; Parameters:    Size  Location     Type
  5452 ;;		None
  5453 ;; Auto vars:     Size  Location     Type
  5454 ;;		None
  5455 ;; Return value:  Size  Location     Type
  5456 ;;                  1    wreg      unsigned char 
  5457 ;; Registers used:
  5458 ;;		wreg, status,2
  5459 ;; Tracked objects:
  5460 ;;		On entry : 0/0
  5461 ;;		On exit  : 0/0
  5462 ;;		Unchanged: 0/0
  5463 ;; Data sizes:     COMRAM   BANK0   BANK1
  5464 ;;      Params:         0       0       0
  5465 ;;      Locals:         0       0       0
  5466 ;;      Temps:          0       0       0
  5467 ;;      Totals:         0       0       0
  5468 ;;Total ram usage:        0 bytes
  5469 ;; Hardware stack levels used: 1
  5470 ;; Hardware stack levels required when called: 2
  5471 ;; This function calls:
  5472 ;;		Nothing
  5473 ;; This function is called by:
  5474 ;;		_menuMotor
  5475 ;; This function uses a non-reentrant model
  5476 ;;
  5477                           
  5478                           	psect	text43
  5479  000190                     __ptext43:
  5480                           	callstack 0
  5481  000190                     _DaGetNumScores:
  5482                           	callstack 27
  5483                           
  5484                           ;EEPROM.c: 370:     return numScores;
  5485                           
  5486                           ;incstack = 0
  5487  000190  5020               	movf	_numScores^0,w,c
  5488  000192  0012               	return		;funcret
  5489  000194                     __end_of_DaGetNumScores:
  5490                           	callstack 0
  5491                           
  5492 ;; *************** function _DaGetIdle *****************
  5493 ;; Defined at:
  5494 ;;		line 319 in file "EEPROM.c"
  5495 ;; Parameters:    Size  Location     Type
  5496 ;;		None
  5497 ;; Auto vars:     Size  Location     Type
  5498 ;;		None
  5499 ;; Return value:  Size  Location     Type
  5500 ;;                  1    wreg      unsigned char 
  5501 ;; Registers used:
  5502 ;;		wreg, status,2
  5503 ;; Tracked objects:
  5504 ;;		On entry : 0/0
  5505 ;;		On exit  : 0/0
  5506 ;;		Unchanged: 0/0
  5507 ;; Data sizes:     COMRAM   BANK0   BANK1
  5508 ;;      Params:         0       0       0
  5509 ;;      Locals:         0       0       0
  5510 ;;      Temps:          0       0       0
  5511 ;;      Totals:         0       0       0
  5512 ;;Total ram usage:        0 bytes
  5513 ;; Hardware stack levels used: 1
  5514 ;; Hardware stack levels required when called: 2
  5515 ;; This function calls:
  5516 ;;		Nothing
  5517 ;; This function is called by:
  5518 ;;		_menuMotor
  5519 ;; This function uses a non-reentrant model
  5520 ;;
  5521                           
  5522                           	psect	text44
  5523  00014C                     __ptext44:
  5524                           	callstack 0
  5525  00014C                     _DaGetIdle:
  5526                           	callstack 27
  5527                           
  5528                           ;EEPROM.c: 320:     return state == 0;
  5529                           
  5530                           ;incstack = 0
  5531  00014C  501E               	movf	_state@EEPROM$F1761^0,w,c
  5532  00014E  B4D8               	btfsc	status,2,c
  5533  000150  0C01               	retlw	1
  5534  000152  0C00               	retlw	0	;funcret
  5535  000154                     __end_of_DaGetIdle:
  5536                           	callstack 0
  5537                           
  5538 ;; *************** function _DaFindUser *****************
  5539 ;; Defined at:
  5540 ;;		line 293 in file "EEPROM.c"
  5541 ;; Parameters:    Size  Location     Type
  5542 ;;  logUser         1   18[COMRAM] PTR struct .
  5543 ;;		 -> mUser(18), 
  5544 ;; Auto vars:     Size  Location     Type
  5545 ;;		None
  5546 ;; Return value:  Size  Location     Type
  5547 ;;                  1    wreg      void 
  5548 ;; Registers used:
  5549 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5550 ;; Tracked objects:
  5551 ;;		On entry : 0/0
  5552 ;;		On exit  : 0/0
  5553 ;;		Unchanged: 0/0
  5554 ;; Data sizes:     COMRAM   BANK0   BANK1
  5555 ;;      Params:         1       0       0
  5556 ;;      Locals:         0       0       0
  5557 ;;      Temps:          0       0       0
  5558 ;;      Totals:         1       0       0
  5559 ;;Total ram usage:        1 bytes
  5560 ;; Hardware stack levels used: 1
  5561 ;; Hardware stack levels required when called: 5
  5562 ;; This function calls:
  5563 ;;		_LcGotoXY
  5564 ;; This function is called by:
  5565 ;;		_menuMotor
  5566 ;; This function uses a non-reentrant model
  5567 ;;
  5568                           
  5569                           	psect	text45
  5570  001FAC                     __ptext45:
  5571                           	callstack 0
  5572  001FAC                     _DaFindUser:
  5573                           	callstack 24
  5574                           
  5575                           ;EEPROM.c: 294:     state = 1;
  5576                           
  5577                           ;incstack = 0
  5578  001FAC  0E01               	movlw	1
  5579  001FAE  6E1E               	movwf	_state@EEPROM$F1761^0,c
  5580                           
  5581                           ;EEPROM.c: 295:     userNum = 0;
  5582  001FB0  6A1D               	clrf	_userNum^0,c
  5583                           
  5584                           ;EEPROM.c: 296:     mUser = logUser;
  5585  001FB2  C06B  F00B         	movff	DaFindUser@logUser,_mUser@EEPROM$F1764
  5586  001FB6  6A0C               	clrf	(_mUser@EEPROM$F1764+1)^0,c
  5587                           
  5588                           ;EEPROM.c: 297:     status = 2;
  5589  001FB8  0E02               	movlw	2
  5590  001FBA  6E1C               	movwf	_status^0,c
  5591                           
  5592                           ;EEPROM.c: 298:     LcGotoXY(10,0);
  5593  001FBC  0E00               	movlw	0
  5594  001FBE  6E66               	movwf	LcGotoXY@Row^0,c
  5595  001FC0  0E0A               	movlw	10
  5596  001FC2  EFA4  F00E         	goto	_LcGotoXY
  5597  001FC6                     __end_of_DaFindUser:
  5598                           	callstack 0
  5599                           
  5600 ;; *************** function _joystickMotor *****************
  5601 ;; Defined at:
  5602 ;;		line 29 in file "Joystick.c"
  5603 ;; Parameters:    Size  Location     Type
  5604 ;;		None
  5605 ;; Auto vars:     Size  Location     Type
  5606 ;;		None
  5607 ;; Return value:  Size  Location     Type
  5608 ;;                  1    wreg      void 
  5609 ;; Registers used:
  5610 ;;		wreg, status,2, status,0, cstack
  5611 ;; Tracked objects:
  5612 ;;		On entry : 0/0
  5613 ;;		On exit  : 0/0
  5614 ;;		Unchanged: 0/0
  5615 ;; Data sizes:     COMRAM   BANK0   BANK1
  5616 ;;      Params:         0       0       0
  5617 ;;      Locals:         0       0       0
  5618 ;;      Temps:          2       0       0
  5619 ;;      Totals:         2       0       0
  5620 ;;Total ram usage:        2 bytes
  5621 ;; Hardware stack levels used: 1
  5622 ;; Hardware stack levels required when called: 3
  5623 ;; This function calls:
  5624 ;;		_SiIsAvailable
  5625 ;;		_SiSendChar
  5626 ;; This function is called by:
  5627 ;;		_main
  5628 ;; This function uses a non-reentrant model
  5629 ;;
  5630                           
  5631                           	psect	text46
  5632  001410                     __ptext46:
  5633                           	callstack 0
  5634  001410                     _joystickMotor:
  5635                           	callstack 27
  5636                           
  5637                           ;Joystick.c: 30:     switch (stateJoy){
  5638                           
  5639                           ;incstack = 0
  5640  001410  D04B               	goto	l5187
  5641  001412                     l694:
  5642                           
  5643                           ;Joystick.c: 32:             if (ADCON0bits.GO_DONE == 0){
  5644  001412  B2C2               	btfsc	194,1,c	;volatile
  5645  001414  0012               	return	
  5646                           
  5647                           ;Joystick.c: 33:                 y = ADRESH;
  5648  001416  CFC4 F02C          	movff	4036,_y	;volatile
  5649                           
  5650                           ;Joystick.c: 34:                 ADCON0bits.CHS0=1;
  5651  00141A  84C2               	bsf	194,2,c	;volatile
  5652                           
  5653                           ;Joystick.c: 35:                 ADCON0bits.CHS1=0;
  5654  00141C  96C2               	bcf	194,3,c	;volatile
  5655                           
  5656                           ;Joystick.c: 36:                 stateJoy = 1;
  5657  00141E  0E01               	movlw	1
  5658  001420  6E2A               	movwf	_stateJoy^0,c
  5659                           
  5660                           ;Joystick.c: 37:                 ADCON0bits.GO_DONE=1;
  5661  001422  82C2               	bsf	194,1,c	;volatile
  5662  001424  0C01               	retlw	1
  5663  001426                     l697:
  5664                           
  5665                           ;Joystick.c: 41:             if (ADCON0bits.GO_DONE == 0){
  5666  001426  B2C2               	btfsc	194,1,c	;volatile
  5667  001428  0012               	return	
  5668                           
  5669                           ;Joystick.c: 42:                 x = ADRESH;
  5670  00142A  CFC4 F02D          	movff	4036,_x	;volatile
  5671                           
  5672                           ;Joystick.c: 43:                 ADCON0bits.CHS0=0;
  5673  00142E  94C2               	bcf	194,2,c	;volatile
  5674                           
  5675                           ;Joystick.c: 44:                 ADCON0bits.CHS1=1;
  5676  001430  86C2               	bsf	194,3,c	;volatile
  5677                           
  5678                           ;Joystick.c: 45:                 stateJoy = 2;
  5679  001432  0E02               	movlw	2
  5680  001434  6E2A               	movwf	_stateJoy^0,c
  5681  001436  0C02               	retlw	2
  5682  001438                     l5141:
  5683                           
  5684                           ;Joystick.c: 49:             stateJoy = 4;
  5685  001438  0E04               	movlw	4
  5686  00143A  6E2A               	movwf	_stateJoy^0,c
  5687                           
  5688                           ;Joystick.c: 50:             if (moved){
  5689  00143C  502B               	movf	_moved^0,w,c
  5690  00143E  E00E               	bz	l5153
  5691                           
  5692                           ;Joystick.c: 51:                 if (x >= 100 && x <= 150 && y >= 100 && y <= 150){
  5693  001440  0E63               	movlw	99
  5694  001442  642D               	cpfsgt	_x^0,c
  5695  001444  0C63               	retlw	99
  5696  001446  0E97               	movlw	151
  5697  001448  602D               	cpfslt	_x^0,c
  5698  00144A  0C97               	retlw	151
  5699  00144C  0E63               	movlw	99
  5700  00144E  642C               	cpfsgt	_y^0,c
  5701  001450  0C63               	retlw	99
  5702  001452  0E97               	movlw	151
  5703  001454  602C               	cpfslt	_y^0,c
  5704  001456  0C97               	retlw	151
  5705                           
  5706                           ;Joystick.c: 52:                     moved = 0;
  5707  001458  6A2B               	clrf	_moved^0,c
  5708                           
  5709                           ;Joystick.c: 54:             }else {
  5710                           
  5711                           ;Joystick.c: 53:                 }
  5712  00145A  0012               	return	
  5713  00145C                     l5153:
  5714                           
  5715                           ;Joystick.c: 55:                 if (x <= 10){
  5716  00145C  0E0B               	movlw	11
  5717  00145E  602D               	cpfslt	_x^0,c
  5718  001460  D008               	goto	l5159
  5719                           
  5720                           ;Joystick.c: 56:                     send = 'A';
  5721  001462  0E41               	movlw	65
  5722  001464                     L6:
  5723  001464  6E2E               	movwf	_send^0,c
  5724                           
  5725                           ;Joystick.c: 57:                     moved = 1;
  5726  001466  0E01               	movlw	1
  5727  001468  6E2B               	movwf	_moved^0,c
  5728                           
  5729                           ;Joystick.c: 58:                     stateJoy = 4+joyMode;
  5730  00146A  5029               	movf	_joyMode^0,w,c
  5731  00146C  0F04               	addlw	4
  5732  00146E  6E2A               	movwf	_stateJoy^0,c
  5733                           
  5734                           ;Joystick.c: 59:                 } else if (x >= 240){
  5735  001470  0012               	return	
  5736  001472                     l5159:
  5737  001472  0EEF               	movlw	239
  5738  001474  642D               	cpfsgt	_x^0,c
  5739  001476  D002               	goto	l5165
  5740                           
  5741                           ;Joystick.c: 60:                     send = 'D';
  5742  001478  0E44               	movlw	68
  5743  00147A  D7F4               	goto	L6
  5744  00147C                     l5165:
  5745  00147C  0E0B               	movlw	11
  5746  00147E  602C               	cpfslt	_y^0,c
  5747  001480  D002               	goto	l5171
  5748                           
  5749                           ;Joystick.c: 64:                     send = 'S';
  5750  001482  0E53               	movlw	83
  5751  001484  D7EF               	goto	L6
  5752  001486                     l5171:
  5753  001486  0EEF               	movlw	239
  5754  001488  642C               	cpfsgt	_y^0,c
  5755  00148A  0CEF               	retlw	239
  5756                           
  5757                           ;Joystick.c: 68:                     send = 'W';
  5758  00148C  0E57               	movlw	87
  5759  00148E  D7EA               	goto	L6
  5760  001490                     l710:
  5761                           
  5762                           ;Joystick.c: 80:             stateJoy = 0;
  5763                           
  5764                           ;Joystick.c: 81:             ADCON0bits.GO_DONE=1;
  5765                           
  5766                           ;Joystick.c: 82:             break;
  5767  001490  D01B               	goto	PL92	;call to abstracted procedure
  5768  001492                     l5177:
  5769                           
  5770                           ;Joystick.c: 85:             if(SiIsAvailable()){
  5771  001492  ECB5  F000         	call	_SiIsAvailable	;wreg free
  5772  001496  0900               	iorlw	0
  5773  001498  B4D8               	btfsc	status,2,c
  5774  00149A  0012               	return	
  5775                           
  5776                           ;Joystick.c: 86:                 SiSendChar(send);
  5777  00149C  502E               	movf	_send^0,w,c
  5778  00149E  ECAE  F000         	call	_SiSendChar
  5779                           
  5780                           ;Joystick.c: 87:                 stateJoy = 0;
  5781                           
  5782                           ;Joystick.c: 88:                 ADCON0bits.GO_DONE=1;
  5783  0014A2  D012               	goto	PL92	;call to abstracted procedure
  5784  0014A4                     l713:
  5785                           
  5786                           ;Joystick.c: 92:             stateJoy = 0;
  5787  0014A4  6A2A               	clrf	_stateJoy^0,c
  5788                           
  5789                           ;Joystick.c: 93:             break;
  5790  0014A6  0012               	return	
  5791  0014A8                     l5187:
  5792  0014A8  502A               	movf	_stateJoy^0,w,c
  5793  0014AA  6E5F               	movwf	??_joystickMotor^0,c
  5794  0014AC  6A60               	clrf	(??_joystickMotor+1)^0,c
  5795                           
  5796                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5797                           ; Switch size 1, requested type "space"
  5798                           ; Number of cases is 1, Range of values is 0 to 0
  5799                           ; switch strategies available:
  5800                           ; Name         Instructions Cycles
  5801                           ; simple_byte            4     3 (average)
  5802                           ;	Chosen strategy is simple_byte
  5803  0014AE  5060               	movf	(??_joystickMotor+1)^0,w,c
  5804  0014B0  E1F9               	bnz	l713
  5805                           
  5806                           ; Switch size 1, requested type "space"
  5807                           ; Number of cases is 5, Range of values is 0 to 5
  5808                           ; switch strategies available:
  5809                           ; Name         Instructions Cycles
  5810                           ; simple_byte           16     9 (average)
  5811                           ;	Chosen strategy is simple_byte
  5812  0014B2  505F               	movf	??_joystickMotor^0,w,c
  5813  0014B4  E0AE               	bz	l694
  5814  0014B6  0A01               	xorlw	1	; case 1
  5815  0014B8  E0B6               	bz	l697
  5816  0014BA  0A03               	xorlw	3	; case 2
  5817  0014BC  E0BD               	bz	l5141
  5818  0014BE  0A06               	xorlw	6	; case 4
  5819  0014C0  E003               	bz	PL92
  5820  0014C2  0A01               	xorlw	1	; case 5
  5821  0014C4  E0E6               	bz	l5177
  5822  0014C6  D7EE               	goto	l713
  5823  0014C8                     __end_of_joystickMotor:
  5824                           	callstack 0
  5825  0014C8                     PL92:
  5826                           	callstack 27
  5827  0014C8  6A2A               	clrf	_stateJoy^0,c
  5828  0014CA  82C2               	bsf	194,1,c	;volatile
  5829  0014CC  0012               	return	
  5830  0014CE                     __end_ofPL92:
  5831                           	callstack 0
  5832                           
  5833 ;; *************** function _initTime *****************
  5834 ;; Defined at:
  5835 ;;		line 293 in file "time.c"
  5836 ;; Parameters:    Size  Location     Type
  5837 ;;		None
  5838 ;; Auto vars:     Size  Location     Type
  5839 ;;		None
  5840 ;; Return value:  Size  Location     Type
  5841 ;;                  1    wreg      void 
  5842 ;; Registers used:
  5843 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5844 ;; Tracked objects:
  5845 ;;		On entry : 0/0
  5846 ;;		On exit  : 0/0
  5847 ;;		Unchanged: 0/0
  5848 ;; Data sizes:     COMRAM   BANK0   BANK1
  5849 ;;      Params:         0       0       0
  5850 ;;      Locals:         0       0       0
  5851 ;;      Temps:          0       0       0
  5852 ;;      Totals:         0       0       0
  5853 ;;Total ram usage:        0 bytes
  5854 ;; Hardware stack levels used: 1
  5855 ;; Hardware stack levels required when called: 3
  5856 ;; This function calls:
  5857 ;;		_TiGetTimer
  5858 ;; This function is called by:
  5859 ;;		_main
  5860 ;; This function uses a non-reentrant model
  5861 ;;
  5862                           
  5863                           	psect	text47
  5864  000154                     __ptext47:
  5865                           	callstack 0
  5866  000154                     _initTime:
  5867                           	callstack 27
  5868                           
  5869                           ;time.c: 294:     timer = TiGetTimer();
  5870                           
  5871                           ;incstack = 0
  5872  000154  EC8C  F00E         	call	_TiGetTimer	;wreg free
  5873  000158  6E14               	movwf	_timer@time$F1844^0,c
  5874  00015A  0012               	return		;funcret
  5875  00015C                     __end_of_initTime:
  5876                           	callstack 0
  5877                           
  5878 ;; *************** function _initSIO *****************
  5879 ;; Defined at:
  5880 ;;		line 16 in file "SIO.c"
  5881 ;; Parameters:    Size  Location     Type
  5882 ;;		None
  5883 ;; Auto vars:     Size  Location     Type
  5884 ;;		None
  5885 ;; Return value:  Size  Location     Type
  5886 ;;                  1    wreg      void 
  5887 ;; Registers used:
  5888 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5889 ;; Tracked objects:
  5890 ;;		On entry : 0/0
  5891 ;;		On exit  : 0/0
  5892 ;;		Unchanged: 0/0
  5893 ;; Data sizes:     COMRAM   BANK0   BANK1
  5894 ;;      Params:         0       0       0
  5895 ;;      Locals:         0       0       0
  5896 ;;      Temps:          0       0       0
  5897 ;;      Totals:         0       0       0
  5898 ;;Total ram usage:        0 bytes
  5899 ;; Hardware stack levels used: 1
  5900 ;; Hardware stack levels required when called: 3
  5901 ;; This function calls:
  5902 ;;		_TiGetTimer
  5903 ;; This function is called by:
  5904 ;;		_main
  5905 ;; This function uses a non-reentrant model
  5906 ;;
  5907                           
  5908                           	psect	text48
  5909  001E8E                     __ptext48:
  5910                           	callstack 0
  5911  001E8E                     _initSIO:
  5912                           	callstack 27
  5913                           
  5914                           ;SIO.c: 17:     TRISCbits.TRISC7 = 1;
  5915                           
  5916                           ;incstack = 0
  5917  001E8E  8E94               	bsf	148,7,c	;volatile
  5918                           
  5919                           ;SIO.c: 18:     TRISCbits.TRISC6 = 1;
  5920  001E90  8C94               	bsf	148,6,c	;volatile
  5921                           
  5922                           ;SIO.c: 19:     TXSTAbits.BRGH = 1;
  5923  001E92  84AC               	bsf	172,2,c	;volatile
  5924                           
  5925                           ;SIO.c: 20:     TXSTAbits.TXEN = 1;
  5926  001E94  8AAC               	bsf	172,5,c	;volatile
  5927                           
  5928                           ;SIO.c: 21:     TXSTAbits.SYNC = 0;
  5929  001E96  98AC               	bcf	172,4,c	;volatile
  5930                           
  5931                           ;SIO.c: 23:     RCSTAbits.SPEN = 1;
  5932  001E98  8EAB               	bsf	171,7,c	;volatile
  5933                           
  5934                           ;SIO.c: 24:     RCSTAbits.CREN = 1;
  5935  001E9A  88AB               	bsf	171,4,c	;volatile
  5936                           
  5937                           ;SIO.c: 26:     BAUDCONbits.BRG16 = 0;
  5938  001E9C  96B8               	bcf	184,3,c	;volatile
  5939                           
  5940                           ;SIO.c: 28:     SPBRG = 255;
  5941  001E9E  68AF               	setf	175,c	;volatile
  5942                           
  5943                           ;SIO.c: 31:     TRISCbits.TRISC5 = 1;
  5944  001EA0  8A94               	bsf	148,5,c	;volatile
  5945                           
  5946                           ;SIO.c: 32:     TRISCbits.TRISC4 = 0;
  5947  001EA2  9894               	bcf	148,4,c	;volatile
  5948                           
  5949                           ;SIO.c: 33:     timerRX = TiGetTimer();
  5950  001EA4  EC8C  F00E         	call	_TiGetTimer	;wreg free
  5951  001EA8  6E27               	movwf	_timerRX^0,c
  5952                           
  5953                           ;SIO.c: 34:     timerTX = TiGetTimer();
  5954  001EAA  EC8C  F00E         	call	_TiGetTimer	;wreg free
  5955  001EAE  6E23               	movwf	_timerTX^0,c
  5956  001EB0  0012               	return		;funcret
  5957  001EB2                     __end_of_initSIO:
  5958                           	callstack 0
  5959                           
  5960 ;; *************** function _initMenu *****************
  5961 ;; Defined at:
  5962 ;;		line 33 in file "Menu.c"
  5963 ;; Parameters:    Size  Location     Type
  5964 ;;		None
  5965 ;; Auto vars:     Size  Location     Type
  5966 ;;		None
  5967 ;; Return value:  Size  Location     Type
  5968 ;;                  1    wreg      void 
  5969 ;; Registers used:
  5970 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5971 ;; Tracked objects:
  5972 ;;		On entry : 0/0
  5973 ;;		On exit  : 0/0
  5974 ;;		Unchanged: 0/0
  5975 ;; Data sizes:     COMRAM   BANK0   BANK1
  5976 ;;      Params:         0       0       0
  5977 ;;      Locals:         0       0       0
  5978 ;;      Temps:          0       0       0
  5979 ;;      Totals:         0       0       0
  5980 ;;Total ram usage:        0 bytes
  5981 ;; Hardware stack levels used: 1
  5982 ;; Hardware stack levels required when called: 3
  5983 ;; This function calls:
  5984 ;;		_TiGetTimer
  5985 ;; This function is called by:
  5986 ;;		_main
  5987 ;; This function uses a non-reentrant model
  5988 ;;
  5989                           
  5990                           	psect	text49
  5991  000100                     __ptext49:
  5992                           	callstack 0
  5993  000100                     _initMenu:
  5994                           	callstack 27
  5995                           
  5996                           ;Menu.c: 34:     timer = TiGetTimer();
  5997                           
  5998                           ;incstack = 0
  5999  000100  EC8C  F00E         	call	_TiGetTimer	;wreg free
  6000  000104  6E35               	movwf	_timer^0,c
  6001                           
  6002                           ;Menu.c: 35:     val = 0;
  6003  000106  6A31               	clrf	_val^0,c
  6004  000108  0012               	return		;funcret
  6005  00010A                     __end_of_initMenu:
  6006                           	callstack 0
  6007                           
  6008 ;; *************** function _initKeypad *****************
  6009 ;; Defined at:
  6010 ;;		line 29 in file "keypad.c"
  6011 ;; Parameters:    Size  Location     Type
  6012 ;;		None
  6013 ;; Auto vars:     Size  Location     Type
  6014 ;;		None
  6015 ;; Return value:  Size  Location     Type
  6016 ;;                  1    wreg      void 
  6017 ;; Registers used:
  6018 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6019 ;; Tracked objects:
  6020 ;;		On entry : 0/0
  6021 ;;		On exit  : 0/0
  6022 ;;		Unchanged: 0/0
  6023 ;; Data sizes:     COMRAM   BANK0   BANK1
  6024 ;;      Params:         0       0       0
  6025 ;;      Locals:         0       0       0
  6026 ;;      Temps:          0       0       0
  6027 ;;      Totals:         0       0       0
  6028 ;;Total ram usage:        0 bytes
  6029 ;; Hardware stack levels used: 1
  6030 ;; Hardware stack levels required when called: 3
  6031 ;; This function calls:
  6032 ;;		_TiGetTimer
  6033 ;; This function is called by:
  6034 ;;		_main
  6035 ;; This function uses a non-reentrant model
  6036 ;;
  6037                           
  6038                           	psect	text50
  6039  001EF6                     __ptext50:
  6040                           	callstack 0
  6041  001EF6                     _initKeypad:
  6042                           	callstack 27
  6043                           
  6044                           ;keypad.c: 30:     INTCON2bits.RBPU = 0;
  6045                           
  6046                           ;incstack = 0
  6047  001EF6  9EF1               	bcf	241,7,c	;volatile
  6048                           
  6049                           ;keypad.c: 32:     TRISBbits.TRISB0 = 1;
  6050  001EF8  8093               	bsf	147,0,c	;volatile
  6051                           
  6052                           ;keypad.c: 33:     TRISBbits.TRISB1 = 1;
  6053  001EFA  8293               	bsf	147,1,c	;volatile
  6054                           
  6055                           ;keypad.c: 34:     TRISBbits.TRISB2 = 1;
  6056  001EFC  8493               	bsf	147,2,c	;volatile
  6057                           
  6058                           ;keypad.c: 35:     TRISBbits.TRISB3 = 0;
  6059  001EFE  9693               	bcf	147,3,c	;volatile
  6060                           
  6061                           ;keypad.c: 36:     TRISBbits.TRISB4 = 0;
  6062  001F00  9893               	bcf	147,4,c	;volatile
  6063                           
  6064                           ;keypad.c: 37:     TRISBbits.TRISB5 = 0;
  6065  001F02  9A93               	bcf	147,5,c	;volatile
  6066                           
  6067                           ;keypad.c: 38:     TRISBbits.TRISB6 = 0;
  6068  001F04  9C93               	bcf	147,6,c	;volatile
  6069                           
  6070                           ;keypad.c: 39:     TRISAbits.TRISA4 = 0;
  6071  001F06  9892               	bcf	146,4,c	;volatile
  6072                           
  6073                           ;keypad.c: 40:     timerBounces = TiGetTimer();
  6074  001F08  EC8C  F00E         	call	_TiGetTimer	;wreg free
  6075  001F0C  6E44               	movwf	_timerBounces^0,c
  6076                           
  6077                           ;keypad.c: 41:     timer_SMS = TiGetTimer();
  6078  001F0E  EC8C  F00E         	call	_TiGetTimer	;wreg free
  6079  001F12  6E43               	movwf	_timer_SMS^0,c
  6080  001F14  0012               	return		;funcret
  6081  001F16                     __end_of_initKeypad:
  6082                           	callstack 0
  6083                           
  6084 ;; *************** function _initJoystick *****************
  6085 ;; Defined at:
  6086 ;;		line 11 in file "Joystick.c"
  6087 ;; Parameters:    Size  Location     Type
  6088 ;;		None
  6089 ;; Auto vars:     Size  Location     Type
  6090 ;;		None
  6091 ;; Return value:  Size  Location     Type
  6092 ;;                  1    wreg      void 
  6093 ;; Registers used:
  6094 ;;		wreg, status,2
  6095 ;; Tracked objects:
  6096 ;;		On entry : 0/0
  6097 ;;		On exit  : 0/0
  6098 ;;		Unchanged: 0/0
  6099 ;; Data sizes:     COMRAM   BANK0   BANK1
  6100 ;;      Params:         0       0       0
  6101 ;;      Locals:         0       0       0
  6102 ;;      Temps:          0       0       0
  6103 ;;      Totals:         0       0       0
  6104 ;;Total ram usage:        0 bytes
  6105 ;; Hardware stack levels used: 1
  6106 ;; Hardware stack levels required when called: 2
  6107 ;; This function calls:
  6108 ;;		Nothing
  6109 ;; This function is called by:
  6110 ;;		_main
  6111 ;; This function uses a non-reentrant model
  6112 ;;
  6113                           
  6114                           	psect	text51
  6115  001EB2                     __ptext51:
  6116                           	callstack 0
  6117  001EB2                     _initJoystick:
  6118                           	callstack 28
  6119                           
  6120                           ;Joystick.c: 12:     TRISAbits.TRISA0 = 1;
  6121                           
  6122                           ;incstack = 0
  6123  001EB2  8092               	bsf	146,0,c	;volatile
  6124                           
  6125                           ;Joystick.c: 13:     TRISAbits.TRISA1 = 1;
  6126  001EB4  8292               	bsf	146,1,c	;volatile
  6127                           
  6128                           ;Joystick.c: 14:     ADCON0 = 0x03;
  6129  001EB6  0E03               	movlw	3
  6130  001EB8  6EC2               	movwf	194,c	;volatile
  6131                           
  6132                           ;Joystick.c: 15:     ADCON1 = 0x0C;
  6133  001EBA  0E0C               	movlw	12
  6134  001EBC  6EC1               	movwf	193,c	;volatile
  6135                           
  6136                           ;Joystick.c: 16:     ADCON2 = 0x44;
  6137  001EBE  0E44               	movlw	68
  6138  001EC0  6EC0               	movwf	192,c	;volatile
  6139                           
  6140                           ;Joystick.c: 18:     TRISCbits.TRISC0 = 0;
  6141  001EC2  9094               	bcf	148,0,c	;volatile
  6142                           
  6143                           ;Joystick.c: 19:     TRISCbits.TRISC1 = 0;
  6144  001EC4  9294               	bcf	148,1,c	;volatile
  6145                           
  6146                           ;Joystick.c: 20:     TRISCbits.TRISC2 = 0;
  6147  001EC6  9494               	bcf	148,2,c	;volatile
  6148                           
  6149                           ;Joystick.c: 21:     moved = 0;
  6150  001EC8  6A2B               	clrf	_moved^0,c
  6151                           
  6152                           ;Joystick.c: 22:     ADCON0bits.GO_DONE=1;
  6153  001ECA  82C2               	bsf	194,1,c	;volatile
  6154                           
  6155                           ;Joystick.c: 23:     ADCON0bits.CHS0=0;
  6156  001ECC  94C2               	bcf	194,2,c	;volatile
  6157                           
  6158                           ;Joystick.c: 24:     ADCON0bits.CHS1=1;
  6159  001ECE  86C2               	bsf	194,3,c	;volatile
  6160                           
  6161                           ;Joystick.c: 25:     stateJoy = 0;
  6162  001ED0  6A2A               	clrf	_stateJoy^0,c
  6163  001ED2  0012               	return		;funcret
  6164  001ED4                     __end_of_initJoystick:
  6165                           	callstack 0
  6166                           
  6167 ;; *************** function _initData *****************
  6168 ;; Defined at:
  6169 ;;		line 27 in file "EEPROM.c"
  6170 ;; Parameters:    Size  Location     Type
  6171 ;;		None
  6172 ;; Auto vars:     Size  Location     Type
  6173 ;;		None
  6174 ;; Return value:  Size  Location     Type
  6175 ;;                  1    wreg      void 
  6176 ;; Registers used:
  6177 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6178 ;; Tracked objects:
  6179 ;;		On entry : 0/0
  6180 ;;		On exit  : 0/0
  6181 ;;		Unchanged: 0/0
  6182 ;; Data sizes:     COMRAM   BANK0   BANK1
  6183 ;;      Params:         0       0       0
  6184 ;;      Locals:         0       0       0
  6185 ;;      Temps:          0       0       0
  6186 ;;      Totals:         0       0       0
  6187 ;;Total ram usage:        0 bytes
  6188 ;; Hardware stack levels used: 1
  6189 ;; Hardware stack levels required when called: 4
  6190 ;; This function calls:
  6191 ;;		_readEEPROM
  6192 ;;		_readUserData
  6193 ;; This function is called by:
  6194 ;;		_main
  6195 ;; This function uses a non-reentrant model
  6196 ;;
  6197                           
  6198                           	psect	text52
  6199  001A7E                     __ptext52:
  6200                           	callstack 0
  6201  001A7E                     _initData:
  6202                           	callstack 26
  6203                           
  6204                           ;EEPROM.c: 28:     state = 0;
  6205                           
  6206                           ;incstack = 0
  6207  001A7E  6A1E               	clrf	_state@EEPROM$F1761^0,c
  6208                           
  6209                           ;EEPROM.c: 29:     for (userNum = 0; userNum < 8; userNum++){
  6210  001A80  6A1D               	clrf	_userNum^0,c
  6211  001A82                     l2505:
  6212  001A82  0E07               	movlw	7
  6213  001A84  641D               	cpfsgt	_userNum^0,c
  6214  001A86  D001               	goto	l2509
  6215  001A88  D004               	goto	l859
  6216  001A8A                     l2509:
  6217                           
  6218                           ;EEPROM.c: 30:         readUserData();
  6219  001A8A  ECB3  F00B         	call	_readUserData	;wreg free
  6220                           
  6221                           ;EEPROM.c: 31:     }
  6222  001A8E  2A1D               	incf	_userNum^0,f,c
  6223  001A90  D7F8               	goto	l2505
  6224  001A92                     l859:
  6225                           
  6226                           ;EEPROM.c: 32:     for (position = 0; position < 5;){
  6227  001A92  6A1F               	clrf	_position^0,c
  6228  001A94                     l2515:
  6229  001A94  0E04               	movlw	4
  6230  001A96  641F               	cpfsgt	_position^0,c
  6231  001A98  D001               	goto	l2519
  6232  001A9A  D013               	goto	l2525
  6233  001A9C                     l2519:
  6234                           
  6235                           ;EEPROM.c: 33:         topScores[position].score = readEEPROM((0x90)+position);
  6236  001A9C  501F               	movf	_position^0,w,c
  6237  001A9E  EC03  F007         	call	PL8	;call to abstracted procedure
  6238  001AA2  501F               	movf	_position^0,w,c
  6239  001AA4  0F90               	addlw	144
  6240  001AA6  EC4C  F000         	call	_readEEPROM
  6241  001AAA  6EDF               	movwf	indf2,c
  6242                           
  6243                           ;EEPROM.c: 34:         topScores[position].userNum = readEEPROM((0xA0)+position);
  6244  001AAC  501F               	movf	_position^0,w,c
  6245  001AAE  0D02               	mullw	2
  6246  001AB0  ECF1  F006         	call	PL4	;call to abstracted procedure
  6247  001AB4  501F               	movf	_position^0,w,c
  6248  001AB6  0FA0               	addlw	160
  6249  001AB8  EC4C  F000         	call	_readEEPROM
  6250  001ABC  6EDF               	movwf	indf2,c
  6251                           
  6252                           ;EEPROM.c: 35:         position++;
  6253  001ABE  2A1F               	incf	_position^0,f,c
  6254  001AC0  D7E9               	goto	l2515
  6255  001AC2                     l2525:
  6256                           
  6257                           ;EEPROM.c: 37:     lastUserPointer = readEEPROM(0xFF);
  6258  001AC2  0EFF               	movlw	255
  6259  001AC4  EC4C  F000         	call	_readEEPROM
  6260  001AC8  6E1B               	movwf	_lastUserPointer^0,c
  6261                           
  6262                           ;EEPROM.c: 38:     numScores = readEEPROM(0xFE);
  6263  001ACA  0EFE               	movlw	254
  6264  001ACC  EC4C  F000         	call	_readEEPROM
  6265  001AD0  6E20               	movwf	_numScores^0,c
  6266                           
  6267                           ;EEPROM.c: 39:     if (lastUserPointer == 0xFF){
  6268  001AD2  281B               	incf	_lastUserPointer^0,w,c
  6269  001AD4  E101               	bnz	l2531
  6270                           
  6271                           ;EEPROM.c: 40:         lastUserPointer = 0;
  6272  001AD6  6A1B               	clrf	_lastUserPointer^0,c
  6273  001AD8                     l2531:
  6274                           
  6275                           ;EEPROM.c: 42:     if (numScores == 0xFF){
  6276  001AD8  2820               	incf	_numScores^0,w,c
  6277  001ADA  B4D8               	btfsc	status,2,c
  6278                           
  6279                           ;EEPROM.c: 43:         numScores = 0;
  6280  001ADC  6A20               	clrf	_numScores^0,c
  6281  001ADE  0012               	return		;funcret
  6282  001AE0                     __end_of_initData:
  6283                           	callstack 0
  6284                           
  6285 ;; *************** function _readUserData *****************
  6286 ;; Defined at:
  6287 ;;		line 333 in file "EEPROM.c"
  6288 ;; Parameters:    Size  Location     Type
  6289 ;;		None
  6290 ;; Auto vars:     Size  Location     Type
  6291 ;;		None
  6292 ;; Return value:  Size  Location     Type
  6293 ;;                  1    wreg      void 
  6294 ;; Registers used:
  6295 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6296 ;; Tracked objects:
  6297 ;;		On entry : 0/0
  6298 ;;		On exit  : 0/0
  6299 ;;		Unchanged: 0/0
  6300 ;; Data sizes:     COMRAM   BANK0   BANK1
  6301 ;;      Params:         0       0       0
  6302 ;;      Locals:         0       0       0
  6303 ;;      Temps:          2       0       0
  6304 ;;      Totals:         2       0       0
  6305 ;;Total ram usage:        2 bytes
  6306 ;; Hardware stack levels used: 1
  6307 ;; Hardware stack levels required when called: 3
  6308 ;; This function calls:
  6309 ;;		_readEEPROM
  6310 ;; This function is called by:
  6311 ;;		_initData
  6312 ;; This function uses a non-reentrant model
  6313 ;;
  6314                           
  6315                           	psect	text53
  6316  001766                     __ptext53:
  6317                           	callstack 0
  6318  001766                     _readUserData:
  6319                           	callstack 26
  6320                           
  6321                           ;EEPROM.c: 334:     for (position = 0; position < 8; position++){
  6322                           
  6323                           ;incstack = 0
  6324  001766  6A1F               	clrf	_position^0,c
  6325  001768                     l2303:
  6326  001768  0E07               	movlw	7
  6327  00176A  641F               	cpfsgt	_position^0,c
  6328  00176C  D001               	goto	l2307
  6329  00176E  D007               	goto	l2313
  6330  001770                     l2307:
  6331                           
  6332                           ;EEPROM.c: 335:         users[userNum].username[position] = readEEPROM((userNum*16)+posi
      +                          tion);
  6333  001770  D839               	call	PL50	;call to abstracted procedure
  6334  001772  D829               	call	PL24	;call to abstracted procedure
  6335  001774  EC4C  F000         	call	_readEEPROM
  6336  001778  6EDF               	movwf	indf2,c
  6337                           
  6338                           ;EEPROM.c: 336:     }
  6339  00177A  2A1F               	incf	_position^0,f,c
  6340  00177C  D7F5               	goto	l2303
  6341  00177E                     l2313:
  6342                           
  6343                           ;EEPROM.c: 337:     users[userNum].username[8] = '\0';
  6344  00177E  501D               	movf	_userNum^0,w,c
  6345  001780  0D12               	mullw	18
  6346  001782  0E08               	movlw	low (_users+8)
  6347  001784  24F3               	addwf	243,w,c
  6348  001786  6ED9               	movwf	fsr2l,c
  6349  001788  0E01               	movlw	high (_users+8)
  6350  00178A  20F4               	addwfc	prodh,w,c
  6351  00178C  6EDA               	movwf	fsr2h,c
  6352  00178E  6ADF               	clrf	indf2,c
  6353                           
  6354                           ;EEPROM.c: 338:     for (position = 0; position < 8; position++){
  6355  001790  6A1F               	clrf	_position^0,c
  6356  001792                     l2317:
  6357  001792  0E07               	movlw	7
  6358  001794  641F               	cpfsgt	_position^0,c
  6359  001796  D001               	goto	l2321
  6360  001798  D00C               	goto	l2327
  6361  00179A                     l2321:
  6362                           
  6363                           ;EEPROM.c: 339:         users[userNum].password[position] = readEEPROM((userNum*16)+8+po
      +                          sition);
  6364  00179A  D824               	call	PL50	;call to abstracted procedure
  6365  00179C  0E09               	movlw	9
  6366  00179E  265F               	addwf	??_readUserData^0,f,c
  6367  0017A0  0E00               	movlw	0
  6368  0017A2  2260               	addwfc	(??_readUserData+1)^0,f,c
  6369  0017A4  D810               	call	PL24	;call to abstracted procedure
  6370  0017A6  0F08               	addlw	8
  6371  0017A8  EC4C  F000         	call	_readEEPROM
  6372  0017AC  6EDF               	movwf	indf2,c
  6373                           
  6374                           ;EEPROM.c: 340:     }
  6375  0017AE  2A1F               	incf	_position^0,f,c
  6376  0017B0  D7F0               	goto	l2317
  6377  0017B2                     l2327:
  6378                           
  6379                           ;EEPROM.c: 341:     users[userNum].password[8] = '\0';
  6380  0017B2  501D               	movf	_userNum^0,w,c
  6381  0017B4  0D12               	mullw	18
  6382  0017B6  0E11               	movlw	low (_users+17)
  6383  0017B8  24F3               	addwf	243,w,c
  6384  0017BA  6ED9               	movwf	fsr2l,c
  6385  0017BC  0E01               	movlw	high (_users+17)
  6386  0017BE  20F4               	addwfc	prodh,w,c
  6387  0017C0  6EDA               	movwf	fsr2h,c
  6388  0017C2  6ADF               	clrf	indf2,c
  6389  0017C4  0C00               	retlw	0	;funcret
  6390  0017C6                     __end_of_readUserData:
  6391                           	callstack 0
  6392  0017C6                     PL24:
  6393                           	callstack 26
  6394  0017C6  50F3               	movf	243,w,c
  6395  0017C8  265F               	addwf	??_readUserData^0,f,c
  6396  0017CA  50F4               	movf	244,w,c
  6397  0017CC  2260               	addwfc	(??_readUserData+1)^0,f,c
  6398  0017CE  501F               	movf	_position^0,w,c
  6399  0017D0  245F               	addwf	??_readUserData^0,w,c
  6400  0017D2  6ED9               	movwf	fsr2l,c
  6401  0017D4  0E00               	movlw	0
  6402  0017D6  2060               	addwfc	(??_readUserData+1)^0,w,c
  6403  0017D8  6EDA               	movwf	fsr2h,c
  6404  0017DA  501D               	movf	_userNum^0,w,c
  6405  0017DC  0D10               	mullw	16
  6406  0017DE  50F3               	movf	243,w,c
  6407  0017E0  241F               	addwf	_position^0,w,c
  6408  0017E2  0012               	return	
  6409  0017E4                     __end_ofPL24:
  6410                           	callstack 0
  6411  0017E4                     PL50:
  6412                           	callstack 26
  6413  0017E4  501D               	movf	_userNum^0,w,c
  6414  0017E6  0D12               	mullw	18
  6415  0017E8  0E00               	movlw	low _users
  6416  0017EA  6E5F               	movwf	??_readUserData^0,c
  6417  0017EC  0E01               	movlw	high _users
  6418  0017EE  6E60               	movwf	(??_readUserData+1)^0,c
  6419  0017F0  0012               	return	
  6420  0017F2                     __end_ofPL50:
  6421                           	callstack 0
  6422                           
  6423 ;; *************** function _readEEPROM *****************
  6424 ;; Defined at:
  6425 ;;		line 361 in file "EEPROM.c"
  6426 ;; Parameters:    Size  Location     Type
  6427 ;;  address         1    wreg     unsigned char 
  6428 ;; Auto vars:     Size  Location     Type
  6429 ;;  address         1    5[COMRAM] unsigned char 
  6430 ;; Return value:  Size  Location     Type
  6431 ;;                  1    wreg      unsigned char 
  6432 ;; Registers used:
  6433 ;;		wreg, status,2
  6434 ;; Tracked objects:
  6435 ;;		On entry : 0/0
  6436 ;;		On exit  : 0/0
  6437 ;;		Unchanged: 0/0
  6438 ;; Data sizes:     COMRAM   BANK0   BANK1
  6439 ;;      Params:         0       0       0
  6440 ;;      Locals:         1       0       0
  6441 ;;      Temps:          0       0       0
  6442 ;;      Totals:         1       0       0
  6443 ;;Total ram usage:        1 bytes
  6444 ;; Hardware stack levels used: 1
  6445 ;; Hardware stack levels required when called: 2
  6446 ;; This function calls:
  6447 ;;		Nothing
  6448 ;; This function is called by:
  6449 ;;		_initData
  6450 ;;		_readUserData
  6451 ;; This function uses a non-reentrant model
  6452 ;;
  6453                           
  6454                           	psect	text54
  6455  000098                     __ptext54:
  6456                           	callstack 0
  6457  000098                     _readEEPROM:
  6458                           	callstack 26
  6459                           
  6460                           ;incstack = 0
  6461                           ;readEEPROM@address stored from wreg
  6462  000098  6E5E               	movwf	readEEPROM@address^0,c
  6463                           
  6464                           ;EEPROM.c: 362:     EECON1bits.EEPGD = 0;
  6465  00009A  9EA6               	bcf	166,7,c	;volsfr
  6466                           
  6467                           ;EEPROM.c: 363:     EECON1bits.CFGS = 0;
  6468  00009C  9CA6               	bcf	166,6,c	;volsfr
  6469                           
  6470                           ;EEPROM.c: 364:     EEADR = address;
  6471  00009E  C05E  FFA9         	movff	readEEPROM@address,4009	;volatile
  6472                           
  6473                           ;EEPROM.c: 365:     EECON1bits.RD = 1;
  6474  0000A2  80A6               	bsf	166,0,c	;volsfr
  6475                           
  6476                           ;EEPROM.c: 366:     return EEDATA;
  6477  0000A4  50A8               	movf	168,w,c	;volatile
  6478  0000A6  0012               	return		;funcret
  6479  0000A8                     __end_of_readEEPROM:
  6480                           	callstack 0
  6481                           
  6482 ;; *************** function _initAudio *****************
  6483 ;; Defined at:
  6484 ;;		line 19 in file "Audio.c"
  6485 ;; Parameters:    Size  Location     Type
  6486 ;;		None
  6487 ;; Auto vars:     Size  Location     Type
  6488 ;;		None
  6489 ;; Return value:  Size  Location     Type
  6490 ;;                  1    wreg      void 
  6491 ;; Registers used:
  6492 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6493 ;; Tracked objects:
  6494 ;;		On entry : 0/0
  6495 ;;		On exit  : 0/0
  6496 ;;		Unchanged: 0/0
  6497 ;; Data sizes:     COMRAM   BANK0   BANK1
  6498 ;;      Params:         0       0       0
  6499 ;;      Locals:         0       0       0
  6500 ;;      Temps:          0       0       0
  6501 ;;      Totals:         0       0       0
  6502 ;;Total ram usage:        0 bytes
  6503 ;; Hardware stack levels used: 1
  6504 ;; Hardware stack levels required when called: 3
  6505 ;; This function calls:
  6506 ;;		_TiGetTimer
  6507 ;; This function is called by:
  6508 ;;		_main
  6509 ;; This function uses a non-reentrant model
  6510 ;;
  6511                           
  6512                           	psect	text55
  6513  00004C                     __ptext55:
  6514                           	callstack 0
  6515  00004C                     _initAudio:
  6516                           	callstack 27
  6517                           
  6518                           ;Audio.c: 20:     TRISCbits.TRISC3 = 0;
  6519                           
  6520                           ;incstack = 0
  6521  00004C  9694               	bcf	148,3,c	;volatile
  6522                           
  6523                           ;Audio.c: 21:     state = 0;
  6524  00004E  6A39               	clrf	_state@Audio$F967^0,c
  6525                           
  6526                           ;Audio.c: 22:     periodTimer = TiGetTimer();
  6527  000050  EC8C  F00E         	call	_TiGetTimer	;wreg free
  6528  000054  6E38               	movwf	_periodTimer^0,c
  6529                           
  6530                           ;Audio.c: 23:     timerSong = TiGetTimer();
  6531  000056  EC8C  F00E         	call	_TiGetTimer	;wreg free
  6532  00005A  6E37               	movwf	_timerSong^0,c
  6533                           
  6534                           ;Audio.c: 24:     period = 1;
  6535  00005C  0E01               	movlw	1
  6536  00005E  6E36               	movwf	_period^0,c
  6537  000060  0C01               	retlw	1	;funcret
  6538  000062                     __end_of_initAudio:
  6539                           	callstack 0
  6540                           
  6541 ;; *************** function _dataMotor *****************
  6542 ;; Defined at:
  6543 ;;		line 47 in file "EEPROM.c"
  6544 ;; Parameters:    Size  Location     Type
  6545 ;;		None
  6546 ;; Auto vars:     Size  Location     Type
  6547 ;;		None
  6548 ;; Return value:  Size  Location     Type
  6549 ;;                  1    wreg      void 
  6550 ;; Registers used:
  6551 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6552 ;; Tracked objects:
  6553 ;;		On entry : 0/0
  6554 ;;		On exit  : 0/0
  6555 ;;		Unchanged: 0/0
  6556 ;; Data sizes:     COMRAM   BANK0   BANK1
  6557 ;;      Params:         0       0       0
  6558 ;;      Locals:         0       2       0
  6559 ;;      Temps:          6       0       0
  6560 ;;      Totals:         6       2       0
  6561 ;;Total ram usage:        8 bytes
  6562 ;; Hardware stack levels used: 1
  6563 ;; Hardware stack levels required when called: 6
  6564 ;; This function calls:
  6565 ;;		_LcGotoXY
  6566 ;;		_LcPutChar
  6567 ;;		___lbdiv
  6568 ;;		___lbmod
  6569 ;;		_saveEEPROM
  6570 ;; This function is called by:
  6571 ;;		_main
  6572 ;; This function uses a non-reentrant model
  6573 ;;
  6574                           
  6575                           	psect	text56
  6576  00099A                     __ptext56:
  6577                           	callstack 0
  6578  00099A                     _dataMotor:
  6579                           	callstack 24
  6580                           
  6581                           ;EEPROM.c: 48:     switch(state){
  6582                           
  6583                           ;incstack = 0
  6584  00099A  D1BE               	goto	l7039
  6585  00099C                     l6813:
  6586                           
  6587                           ;EEPROM.c: 53:             status = 2;
  6588  00099C  0E02               	movlw	2
  6589  00099E  6E1C               	movwf	_status^0,c
  6590                           
  6591                           ;EEPROM.c: 54:             if (userNum != 8){
  6592  0009A0  0E08               	movlw	8
  6593  0009A2  181D               	xorwf	_userNum^0,w,c
  6594  0009A4  E003               	bz	l6819
  6595                           
  6596                           ;EEPROM.c: 55:                 state = 2;
  6597  0009A6  0E02               	movlw	2
  6598  0009A8  6E1E               	movwf	_state@EEPROM$F1761^0,c
  6599                           
  6600                           ;EEPROM.c: 57:             } else {
  6601  0009AA  0C02               	retlw	2
  6602  0009AC                     l6819:
  6603                           
  6604                           ;EEPROM.c: 58:                 status = 1;
  6605  0009AC  0E01               	movlw	1
  6606  0009AE  6E1C               	movwf	_status^0,c
  6607  0009B0                     l6821:
  6608                           
  6609                           ;EEPROM.c: 59:                 state = 0;
  6610  0009B0  6A1E               	clrf	_state@EEPROM$F1761^0,c
  6611  0009B2  0012               	return	
  6612  0009B4                     l6823:
  6613                           
  6614                           ;EEPROM.c: 64:             if (users[userNum].username[position] == (*mUser).username[po
      +                          sition]){
  6615  0009B4  501F               	movf	_position^0,w,c
  6616  0009B6  240B               	addwf	_mUser@EEPROM$F1764^0,w,c
  6617  0009B8  6ED9               	movwf	fsr2l,c
  6618  0009BA  DA2B               	call	PL10	;call to abstracted procedure
  6619  0009BC  E109               	bnz	l874
  6620                           
  6621                           ;EEPROM.c: 67:                 if ((*mUser).username[position] == '\0'){
  6622  0009BE  DA3F               	call	PL12	;call to abstracted procedure
  6623  0009C0  50DF               	movf	indf2,w,c
  6624  0009C2  E104               	bnz	l6831
  6625                           
  6626                           ;EEPROM.c: 68:                     state = 3;
  6627  0009C4  0E03               	movlw	3
  6628  0009C6  6E1E               	movwf	_state@EEPROM$F1761^0,c
  6629                           
  6630                           ;EEPROM.c: 69:                     position = 0;
  6631  0009C8  6A1F               	clrf	_position^0,c
  6632                           
  6633                           ;EEPROM.c: 70:                 } else {
  6634  0009CA  0012               	return	
  6635  0009CC                     l6831:
  6636                           
  6637                           ;EEPROM.c: 71:                     position++;
  6638  0009CC  2A1F               	incf	_position^0,f,c
  6639  0009CE  0012               	return	
  6640  0009D0                     l874:
  6641                           
  6642                           ;EEPROM.c: 74:                 position = 0;
  6643  0009D0  6A1F               	clrf	_position^0,c
  6644                           
  6645                           ;EEPROM.c: 75:                 userNum++;
  6646  0009D2  2A1D               	incf	_userNum^0,f,c
  6647                           
  6648                           ;EEPROM.c: 76:                 state = 1;
  6649  0009D4  0E01               	movlw	1
  6650  0009D6  6E1E               	movwf	_state@EEPROM$F1761^0,c
  6651  0009D8  0C01               	retlw	1
  6652  0009DA                     l6837:
  6653                           
  6654                           ;EEPROM.c: 83:             if (users[userNum].password[position] == (*mUser).password[po
      +                          sition]){
  6655  0009DA  DA08               	call	PL6	;call to abstracted procedure
  6656  0009DC  501D               	movf	_userNum^0,w,c
  6657  0009DE  0D12               	mullw	18
  6658  0009E0  0E00               	movlw	low _users
  6659  0009E2  6E6F               	movwf	(??_dataMotor+3)^0,c
  6660  0009E4  0E01               	movlw	high _users
  6661  0009E6  6E70               	movwf	(??_dataMotor+4)^0,c
  6662  0009E8  0E09               	movlw	9
  6663  0009EA  266F               	addwf	(??_dataMotor+3)^0,f,c
  6664  0009EC  0E00               	movlw	0
  6665  0009EE  2270               	addwfc	(??_dataMotor+4)^0,f,c
  6666  0009F0  50F3               	movf	243,w,c
  6667  0009F2  266F               	addwf	(??_dataMotor+3)^0,f,c
  6668  0009F4  50F4               	movf	244,w,c
  6669  0009F6  2270               	addwfc	(??_dataMotor+4)^0,f,c
  6670  0009F8  501F               	movf	_position^0,w,c
  6671  0009FA  246F               	addwf	(??_dataMotor+3)^0,w,c
  6672  0009FC  6EE1               	movwf	fsr1l,c
  6673  0009FE  0E00               	movlw	0
  6674  000A00  2070               	addwfc	(??_dataMotor+4)^0,w,c
  6675  000A02  6EE2               	movwf	fsr1h,c
  6676  000A04  50DE               	movf	postinc2,w,c
  6677  000A06  18E6               	xorwf	postinc1,w,c
  6678  000A08  E1D1               	bnz	l6819
  6679                           
  6680                           ;EEPROM.c: 85:                 if ((*mUser).password[position] == '\0'){
  6681  000A0A  D9F0               	call	PL6	;call to abstracted procedure
  6682  000A0C  50DF               	movf	indf2,w,c
  6683  000A0E  E1DE               	bnz	l6831
  6684                           
  6685                           ;EEPROM.c: 86:                     state = 0;
  6686  000A10  6A1E               	clrf	_state@EEPROM$F1761^0,c
  6687                           
  6688                           ;EEPROM.c: 87:                     status = 0;
  6689  000A12  6A1C               	clrf	_status^0,c
  6690                           
  6691                           ;EEPROM.c: 88:                 }else {
  6692  000A14  0012               	return	
  6693  000A16                     l6849:
  6694                           
  6695                           ;EEPROM.c: 102:             if (userNum != 8){
  6696  000A16  0E08               	movlw	8
  6697  000A18  181D               	xorwf	_userNum^0,w,c
  6698  000A1A  E003               	bz	l6853
  6699                           
  6700                           ;EEPROM.c: 103:                 state = 6;
  6701  000A1C  0E06               	movlw	6
  6702  000A1E  6E1E               	movwf	_state@EEPROM$F1761^0,c
  6703                           
  6704                           ;EEPROM.c: 105:             } else {
  6705  000A20  0C06               	retlw	6
  6706  000A22                     l6853:
  6707                           
  6708                           ;EEPROM.c: 106:                 state = 10;
  6709  000A22  0E0A               	movlw	10
  6710  000A24  6E1E               	movwf	_state@EEPROM$F1761^0,c
  6711  000A26  0C0A               	retlw	10
  6712  000A28                     l6855:
  6713                           
  6714                           ;EEPROM.c: 110:             if (users[userNum].username[position] == (*mUser).username[p
      +                          osition]){
  6715  000A28  501F               	movf	_position^0,w,c
  6716  000A2A  240B               	addwf	_mUser@EEPROM$F1764^0,w,c
  6717  000A2C  6ED9               	movwf	fsr2l,c
  6718  000A2E  D9F1               	call	PL10	;call to abstracted procedure
  6719  000A30  E107               	bnz	l6865
  6720                           
  6721                           ;EEPROM.c: 112:                 if ((*mUser).username[position] == '\0'){
  6722  000A32  DA05               	call	PL12	;call to abstracted procedure
  6723  000A34  50DF               	movf	indf2,w,c
  6724  000A36  E1CA               	bnz	l6831
  6725                           
  6726                           ;EEPROM.c: 113:                     state = 0;
  6727  000A38  6A1E               	clrf	_state@EEPROM$F1761^0,c
  6728                           
  6729                           ;EEPROM.c: 114:                     status = 4;
  6730  000A3A  0E04               	movlw	4
  6731  000A3C  6E1C               	movwf	_status^0,c
  6732                           
  6733                           ;EEPROM.c: 115:                 }else {
  6734  000A3E  0C04               	retlw	4
  6735  000A40                     l6865:
  6736                           
  6737                           ;EEPROM.c: 120:                 state = 7;
  6738  000A40  0E07               	movlw	7
  6739  000A42  6E1E               	movwf	_state@EEPROM$F1761^0,c
  6740  000A44  0C07               	retlw	7
  6741  000A46                     l891:
  6742                           
  6743                           ;EEPROM.c: 125:             position = 0;
  6744  000A46  6A1F               	clrf	_position^0,c
  6745                           
  6746                           ;EEPROM.c: 126:             userNum++;
  6747  000A48  2A1D               	incf	_userNum^0,f,c
  6748                           
  6749                           ;EEPROM.c: 127:             state = 5;
  6750  000A4A  0E05               	movlw	5
  6751  000A4C  6E1E               	movwf	_state@EEPROM$F1761^0,c
  6752                           
  6753                           ;EEPROM.c: 128:             break;
  6754  000A4E  0C05               	retlw	5
  6755  000A50                     l6871:
  6756                           
  6757                           ;EEPROM.c: 131:             saveEEPROM((lastUserPointer*16)+position ,(*mUser).username[
      +                          position]);
  6758  000A50  D9F6               	call	PL12	;call to abstracted procedure
  6759  000A52  DA03               	call	PL52	;call to abstracted procedure
  6760  000A54  EC6A  F00F         	call	_saveEEPROM
  6761                           
  6762                           ;EEPROM.c: 132:             users[lastUserPointer].username[position] = (*mUser).usernam
      +                          e[position];
  6763  000A58  D9F2               	call	PL12	;call to abstracted procedure
  6764  000A5A  501B               	movf	_lastUserPointer^0,w,c
  6765  000A5C  0D12               	mullw	18
  6766  000A5E  0E00               	movlw	low _users
  6767  000A60  6E6C               	movwf	??_dataMotor^0,c
  6768  000A62  0E01               	movlw	high _users
  6769  000A64  6E6D               	movwf	(??_dataMotor+1)^0,c
  6770  000A66  50F3               	movf	243,w,c
  6771  000A68  266C               	addwf	??_dataMotor^0,f,c
  6772  000A6A  50F4               	movf	244,w,c
  6773  000A6C  226D               	addwfc	(??_dataMotor+1)^0,f,c
  6774  000A6E  501F               	movf	_position^0,w,c
  6775  000A70  246C               	addwf	??_dataMotor^0,w,c
  6776  000A72  6EE1               	movwf	fsr1l,c
  6777  000A74  0E00               	movlw	0
  6778  000A76  206D               	addwfc	(??_dataMotor+1)^0,w,c
  6779  000A78  6EE2               	movwf	fsr1h,c
  6780  000A7A  CFDF FFE7          	movff	indf2,indf1
  6781                           
  6782                           ;EEPROM.c: 133:             if(position < 7){
  6783  000A7E  0E07               	movlw	7
  6784  000A80  601F               	cpfslt	_position^0,c
  6785  000A82  D003               	goto	l893
  6786                           
  6787                           ;EEPROM.c: 134:                 position++;
  6788  000A84  2A1F               	incf	_position^0,f,c
  6789                           
  6790                           ;EEPROM.c: 135:                 saveState = 10;
  6791  000A86  0E0A               	movlw	10
  6792  000A88  D002               	goto	L7
  6793  000A8A                     l893:
  6794                           
  6795                           ;EEPROM.c: 137:                 position = 0;
  6796  000A8A  6A1F               	clrf	_position^0,c
  6797  000A8C                     l6881:
  6798                           
  6799                           ;EEPROM.c: 138:                 saveState = 12;
  6800  000A8C  0E0C               	movlw	12
  6801  000A8E                     L7:
  6802  000A8E  6E19               	movwf	_saveState^0,c
  6803  000A90                     l894:
  6804                           
  6805                           ;EEPROM.c: 140:             state = 11;
  6806  000A90  0E0B               	movlw	11
  6807  000A92  6E1E               	movwf	_state@EEPROM$F1761^0,c
  6808                           
  6809                           ;EEPROM.c: 141:             break;
  6810  000A94  0C0B               	retlw	11
  6811  000A96                     l895:
  6812                           
  6813                           ;EEPROM.c: 143:             if(EECON1bits.WR == 0){
  6814  000A96  B2A6               	btfsc	166,1,c	;volsfr
  6815  000A98  0012               	return	
  6816                           
  6817                           ;EEPROM.c: 144:                 state = saveState;
  6818  000A9A  C019  F01E         	movff	_saveState,_state@EEPROM$F1761
  6819  000A9E  0012               	return	
  6820  000AA0                     l6885:
  6821                           
  6822                           ;EEPROM.c: 148:             users[lastUserPointer].password[position] = (*mUser).passwor
      +                          d[position];
  6823  000AA0  D9A5               	call	PL6	;call to abstracted procedure
  6824  000AA2  501B               	movf	_lastUserPointer^0,w,c
  6825  000AA4  0D12               	mullw	18
  6826  000AA6  0E00               	movlw	low _users
  6827  000AA8  6E6E               	movwf	(??_dataMotor+2)^0,c
  6828  000AAA  0E01               	movlw	high _users
  6829  000AAC  6E6F               	movwf	(??_dataMotor+3)^0,c
  6830  000AAE  0E09               	movlw	9
  6831  000AB0  266E               	addwf	(??_dataMotor+2)^0,f,c
  6832  000AB2  0E00               	movlw	0
  6833  000AB4  226F               	addwfc	(??_dataMotor+3)^0,f,c
  6834  000AB6  50F3               	movf	243,w,c
  6835  000AB8  266E               	addwf	(??_dataMotor+2)^0,f,c
  6836  000ABA  50F4               	movf	244,w,c
  6837  000ABC  226F               	addwfc	(??_dataMotor+3)^0,f,c
  6838  000ABE  501F               	movf	_position^0,w,c
  6839  000AC0  246E               	addwf	(??_dataMotor+2)^0,w,c
  6840  000AC2  6EE1               	movwf	fsr1l,c
  6841  000AC4  0E00               	movlw	0
  6842  000AC6  206F               	addwfc	(??_dataMotor+3)^0,w,c
  6843  000AC8  6EE2               	movwf	fsr1h,c
  6844  000ACA  CFDF FFE7          	movff	indf2,indf1
  6845                           
  6846                           ;EEPROM.c: 149:             saveEEPROM((lastUserPointer*16)+position+8,(*mUser).password
      +                          [position]);
  6847  000ACE  D98E               	call	PL6	;call to abstracted procedure
  6848  000AD0  D9C4               	call	PL52	;call to abstracted procedure
  6849  000AD2  0F08               	addlw	8
  6850  000AD4  EC6A  F00F         	call	_saveEEPROM
  6851                           
  6852                           ;EEPROM.c: 150:             if(position < 7){
  6853  000AD8  0E07               	movlw	7
  6854  000ADA  601F               	cpfslt	_position^0,c
  6855  000ADC  D002               	goto	l898
  6856                           
  6857                           ;EEPROM.c: 151:                 position++;
  6858  000ADE  2A1F               	incf	_position^0,f,c
  6859  000AE0  D7D5               	goto	l6881
  6860  000AE2                     l898:
  6861                           
  6862                           ;EEPROM.c: 154:                 position = 0;
  6863  000AE2  6A1F               	clrf	_position^0,c
  6864                           
  6865                           ;EEPROM.c: 155:                 saveState = 14;
  6866  000AE4  0E0E               	movlw	14
  6867  000AE6  D7D3               	goto	L7
  6868  000AE8                     l6897:
  6869                           
  6870                           ;EEPROM.c: 160:             if (position >= numScores){
  6871  000AE8  5020               	movf	_numScores^0,w,c
  6872  000AEA  5C1F               	subwf	_position^0,w,c
  6873  000AEC  E302               	bnc	l6903
  6874                           
  6875                           ;EEPROM.c: 161:                 state = 16;
  6876  000AEE  0E10               	movlw	16
  6877  000AF0  D76A               	goto	L8
  6878  000AF2                     l6903:
  6879  000AF2  501F               	movf	_position^0,w,c
  6880  000AF4  0D02               	mullw	2
  6881  000AF6  D975               	call	PL4	;call to abstracted procedure
  6882  000AF8  501B               	movf	_lastUserPointer^0,w,c
  6883  000AFA  18DE               	xorwf	postinc2,w,c
  6884  000AFC  E001 D766          	bnz	l6831
  6885                           
  6886                           ;EEPROM.c: 164:                 topScores[position].userNum = 0xFF;
  6887  000B00  501F               	movf	_position^0,w,c
  6888  000B02  0D02               	mullw	2
  6889  000B04  D96E               	call	PL4	;call to abstracted procedure
  6890  000B06  68DF               	setf	indf2,c
  6891                           
  6892                           ;EEPROM.c: 165:                 topScores[position].score = 0xFF;
  6893  000B08  501F               	movf	_position^0,w,c
  6894  000B0A  D97D               	call	PL8	;call to abstracted procedure
  6895  000B0C  68DF               	setf	indf2,c
  6896                           
  6897                           ;EEPROM.c: 166:                 numScores--;
  6898  000B0E  0620               	decf	_numScores^0,f,c
  6899                           
  6900                           ;EEPROM.c: 167:                 state = 15;
  6901  000B10  0E0F               	movlw	15
  6902  000B12  6E1E               	movwf	_state@EEPROM$F1761^0,c
  6903                           
  6904                           ;EEPROM.c: 168:             }else{
  6905  000B14  0C0F               	retlw	15
  6906  000B16                     l6913:
  6907                           
  6908                           ;EEPROM.c: 173:             if (position < numScores){
  6909  000B16  5020               	movf	_numScores^0,w,c
  6910  000B18  5C1F               	subwf	_position^0,w,c
  6911  000B1A  E218               	bc	l906
  6912                           
  6913                           ;EEPROM.c: 174:                 topScores[position].userNum = topScores[position+1].user
      +                          Num;
  6914  000B1C  501F               	movf	_position^0,w,c
  6915  000B1E  0D02               	mullw	2
  6916  000B20  50F3               	movf	243,w,c
  6917  000B22  0F04               	addlw	low (_topScores+3)
  6918  000B24  6ED9               	movwf	fsr2l,c
  6919  000B26  6ADA               	clrf	fsr2h,c
  6920  000B28  501F               	movf	_position^0,w,c
  6921  000B2A  0D02               	mullw	2
  6922  000B2C  50F3               	movf	243,w,c
  6923  000B2E  0F02               	addlw	low (_topScores+1)
  6924  000B30  6EE1               	movwf	fsr1l,c
  6925  000B32  6AE2               	clrf	fsr1h,c
  6926  000B34  CFDF FFE7          	movff	indf2,indf1
  6927                           
  6928                           ;EEPROM.c: 175:                 topScores[position].score = topScores[position+1].score;
  6929  000B38  501F               	movf	_position^0,w,c
  6930  000B3A  0D02               	mullw	2
  6931  000B3C  50F3               	movf	243,w,c
  6932  000B3E  0F03               	addlw	low (_topScores+2)
  6933  000B40  6ED9               	movwf	fsr2l,c
  6934  000B42  6ADA               	clrf	fsr2h,c
  6935  000B44  D983               	call	PL18	;call to abstracted procedure
  6936  000B46  CFDF FFE7          	movff	indf2,indf1
  6937  000B4A  D740               	goto	l6831
  6938  000B4C                     l906:
  6939                           
  6940                           ;EEPROM.c: 178:                 position = 0;
  6941  000B4C  6A1F               	clrf	_position^0,c
  6942                           
  6943                           ;EEPROM.c: 179:                 state = 14;
  6944  000B4E  0E0E               	movlw	14
  6945  000B50  6E1E               	movwf	_state@EEPROM$F1761^0,c
  6946  000B52  0C0E               	retlw	14
  6947  000B54                     l6921:
  6948                           
  6949                           ;EEPROM.c: 183:             if (position < 5){
  6950  000B54  0E05               	movlw	5
  6951  000B56  601F               	cpfslt	_position^0,c
  6952  000B58  D00A               	goto	l6929
  6953                           
  6954                           ;EEPROM.c: 184:                 saveEEPROM(0x90 + position, topScores[position].score);
  6955  000B5A  501F               	movf	_position^0,w,c
  6956  000B5C  D954               	call	PL8	;call to abstracted procedure
  6957  000B5E  50DF               	movf	indf2,w,c
  6958  000B60  6E5E               	movwf	saveEEPROM@data^0,c
  6959  000B62  501F               	movf	_position^0,w,c
  6960  000B64  0F90               	addlw	144
  6961  000B66  EC6A  F00F         	call	_saveEEPROM
  6962                           
  6963                           ;EEPROM.c: 185:                 saveState = 17;
  6964  000B6A  0E11               	movlw	17
  6965  000B6C  D790               	goto	L7
  6966  000B6E                     l6929:
  6967                           
  6968                           ;EEPROM.c: 188:                 state = 18;
  6969  000B6E  0E12               	movlw	18
  6970  000B70  6E1E               	movwf	_state@EEPROM$F1761^0,c
  6971  000B72  0C12               	retlw	18
  6972  000B74                     l6931:
  6973                           
  6974                           ;EEPROM.c: 193:             saveEEPROM(0xA0 + position, topScores[position].userNum);
  6975  000B74  501F               	movf	_position^0,w,c
  6976  000B76  0D02               	mullw	2
  6977  000B78  D934               	call	PL4	;call to abstracted procedure
  6978  000B7A  50DF               	movf	indf2,w,c
  6979  000B7C  6E5E               	movwf	saveEEPROM@data^0,c
  6980  000B7E  501F               	movf	_position^0,w,c
  6981  000B80  0FA0               	addlw	160
  6982  000B82  EC6A  F00F         	call	_saveEEPROM
  6983                           
  6984                           ;EEPROM.c: 194:             saveState = 16;
  6985  000B86  0E10               	movlw	16
  6986  000B88  6E19               	movwf	_saveState^0,c
  6987                           
  6988                           ;EEPROM.c: 195:             state = 11;
  6989  000B8A  0E0B               	movlw	11
  6990  000B8C  6E1E               	movwf	_state@EEPROM$F1761^0,c
  6991  000B8E  D71E               	goto	l6831
  6992  000B90                     l6939:
  6993                           
  6994                           ;EEPROM.c: 201:             saveEEPROM(0xFE,numScores);
  6995  000B90  D96B               	call	PL80	;call to abstracted procedure
  6996  000B92  EC6A  F00F         	call	_saveEEPROM
  6997                           
  6998                           ;EEPROM.c: 203:             saveState = 19;
  6999  000B96  0E13               	movlw	19
  7000  000B98  D77A               	goto	L7
  7001  000B9A                     l6945:
  7002                           
  7003                           ;EEPROM.c: 207:             lastUserPointer = (lastUserPointer+1)%8;
  7004  000B9A  281B               	incf	_lastUserPointer^0,w,c
  7005  000B9C  0B07               	andlw	7
  7006  000B9E  6E1B               	movwf	_lastUserPointer^0,c
  7007                           
  7008                           ;EEPROM.c: 208:             saveEEPROM(0xFF,lastUserPointer);
  7009  000BA0  C01B  F05E         	movff	_lastUserPointer,saveEEPROM@data
  7010  000BA4  0EFF               	movlw	255
  7011  000BA6  EC6A  F00F         	call	_saveEEPROM
  7012                           
  7013                           ;EEPROM.c: 209:             saveState = 0;
  7014  000BAA  6A19               	clrf	_saveState^0,c
  7015                           
  7016                           ;EEPROM.c: 210:             status = 3;
  7017  000BAC  0E03               	movlw	3
  7018  000BAE  6E1C               	movwf	_status^0,c
  7019  000BB0  D76F               	goto	l894
  7020  000BB2                     l6955:
  7021                           
  7022                           ;EEPROM.c: 215:             if (numScores < 5){
  7023  000BB2  0E05               	movlw	5
  7024  000BB4  6020               	cpfslt	_numScores^0,c
  7025  000BB6  D008               	goto	l6967
  7026                           
  7027                           ;EEPROM.c: 216:                 status = numScores;
  7028  000BB8  C020  F01C         	movff	_numScores,_status
  7029                           
  7030                           ;EEPROM.c: 217:                 numScores++;
  7031  000BBC  2A20               	incf	_numScores^0,f,c
  7032                           
  7033                           ;EEPROM.c: 218:                 saveEEPROM(0xFE,numScores);
  7034  000BBE  D954               	call	PL80	;call to abstracted procedure
  7035  000BC0  EC6A  F00F         	call	_saveEEPROM
  7036                           
  7037                           ;EEPROM.c: 220:                 saveState = 21;
  7038  000BC4  0E15               	movlw	21
  7039  000BC6  D763               	goto	L7
  7040  000BC8                     l6967:
  7041  000BC8  0E05               	movlw	5
  7042  000BCA  181F               	xorwf	_position^0,w,c
  7043  000BCC  E109               	bnz	l6973
  7044                           
  7045                           ;EEPROM.c: 224:                 if (topScores[status].score < saveScore){
  7046  000BCE  501C               	movf	_status^0,w,c
  7047  000BD0  D91A               	call	PL8	;call to abstracted procedure
  7048  000BD2  501A               	movf	_saveScore^0,w,c
  7049  000BD4  5CDE               	subwf	postinc2,w,c
  7050  000BD6  E301 D6EB          	bc	l6821
  7051                           
  7052                           ;EEPROM.c: 225:                     state = 21;
  7053  000BDA  0E15               	movlw	21
  7054  000BDC  6E1E               	movwf	_state@EEPROM$F1761^0,c
  7055                           
  7056                           ;EEPROM.c: 226:                 } else{
  7057  000BDE  0C15               	retlw	21
  7058  000BE0                     l6973:
  7059                           
  7060                           ;EEPROM.c: 230:                 if (topScores[position].score < topScores[status].score)
      +                          {
  7061  000BE0  501C               	movf	_status^0,w,c
  7062  000BE2  D911               	call	PL8	;call to abstracted procedure
  7063  000BE4  D933               	call	PL18	;call to abstracted procedure
  7064  000BE6  50DE               	movf	postinc2,w,c
  7065  000BE8  5CE6               	subwf	postinc1,w,c
  7066  000BEA  E301 D6EF          	bc	l6831
  7067                           
  7068                           ;EEPROM.c: 231:                     status = position;
  7069  000BEE  C01F  F01C         	movff	_position,_status
  7070  000BF2  D6EC               	goto	l6831
  7071  000BF4                     l6979:
  7072                           
  7073                           ;EEPROM.c: 237:             topScores[status].score = saveScore;
  7074  000BF4  501C               	movf	_status^0,w,c
  7075  000BF6  D907               	call	PL8	;call to abstracted procedure
  7076  000BF8  C01A  FFDF         	movff	_saveScore,indf2
  7077                           
  7078                           ;EEPROM.c: 238:             topScores[status].userNum = userNum;
  7079  000BFC  501C               	movf	_status^0,w,c
  7080  000BFE  0D02               	mullw	2
  7081  000C00  D8F0               	call	PL4	;call to abstracted procedure
  7082  000C02  C01D  FFDF         	movff	_userNum,indf2
  7083                           
  7084                           ;EEPROM.c: 239:             state = 22;
  7085  000C06  0E16               	movlw	22
  7086  000C08  6E1E               	movwf	_state@EEPROM$F1761^0,c
  7087                           
  7088                           ;EEPROM.c: 240:             break;
  7089  000C0A  0C16               	retlw	22
  7090  000C0C                     l6983:
  7091                           
  7092                           ;EEPROM.c: 242:             saveEEPROM(0x90 + status,saveScore);
  7093  000C0C  C01A  F05E         	movff	_saveScore,saveEEPROM@data
  7094  000C10  501C               	movf	_status^0,w,c
  7095  000C12  0F90               	addlw	144
  7096  000C14  EC6A  F00F         	call	_saveEEPROM
  7097                           
  7098                           ;EEPROM.c: 243:             saveState = 23;
  7099  000C18  0E17               	movlw	23
  7100  000C1A  D739               	goto	L7
  7101  000C1C                     l6989:
  7102                           
  7103                           ;EEPROM.c: 247:             saveEEPROM(0xA0 + status,userNum);
  7104  000C1C  C01D  F05E         	movff	_userNum,saveEEPROM@data
  7105  000C20  501C               	movf	_status^0,w,c
  7106  000C22  0FA0               	addlw	160
  7107  000C24  EC6A  F00F         	call	_saveEEPROM
  7108                           
  7109                           ;EEPROM.c: 248:             saveState = 0;
  7110  000C28  6A19               	clrf	_saveState^0,c
  7111  000C2A  D732               	goto	l894
  7112  000C2C                     l6995:
  7113                           
  7114                           ;EEPROM.c: 252:             if (users[topScores[position].userNum].username[status] != '
      +                          \0'){
  7115  000C2C  501F               	movf	_position^0,w,c
  7116  000C2E  D8C2               	call	PL2	;call to abstracted procedure
  7117  000C30  E006               	bz	l7001
  7118                           
  7119                           ;EEPROM.c: 253:                 LcPutChar(users[topScores[position].userNum].username[st
      +                          atus]);
  7120  000C32  501F               	movf	_position^0,w,c
  7121  000C34  D8BF               	call	PL2	;call to abstracted procedure
  7122  000C36  ECE6  F00E         	call	_LcPutChar
  7123  000C3A                     l6999:
  7124                           
  7125                           ;EEPROM.c: 254:                 status++;
  7126  000C3A  2A1C               	incf	_status^0,f,c
  7127                           
  7128                           ;EEPROM.c: 255:             } else {
  7129  000C3C  0012               	return	
  7130  000C3E                     l7001:
  7131                           
  7132                           ;EEPROM.c: 256:                 LcPutChar(':');
  7133  000C3E  0E3A               	movlw	58
  7134  000C40  ECE6  F00E         	call	_LcPutChar
  7135                           
  7136                           ;EEPROM.c: 257:                 state = 51;
  7137  000C44  0E33               	movlw	51
  7138  000C46  6E1E               	movwf	_state@EEPROM$F1761^0,c
  7139                           
  7140                           ;EEPROM.c: 258:                 LcGotoXY(0,1);
  7141  000C48  ECE5  F008         	call	PL60	;call to abstracted procedure
  7142  000C4C  ECA4  F00E         	call	_LcGotoXY
  7143                           
  7144                           ;EEPROM.c: 259:                 status = 0;
  7145  000C50  6A1C               	clrf	_status^0,c
  7146  000C52  0012               	return	
  7147  000C54                     l7009:
  7148                           
  7149                           ;EEPROM.c: 263:             LcPutChar((topScores[position].score/10)+'0');
  7150  000C54  0E0A               	movlw	10
  7151  000C56  6E5E               	movwf	___lbdiv@divisor^0,c
  7152  000C58  501F               	movf	_position^0,w,c
  7153  000C5A  D8D5               	call	PL8	;call to abstracted procedure
  7154  000C5C  50DF               	movf	indf2,w,c
  7155  000C5E  EC72  F00E         	call	___lbdiv
  7156  000C62  0F30               	addlw	48
  7157  000C64  ECE6  F00E         	call	_LcPutChar
  7158                           
  7159                           ;EEPROM.c: 264:             LcPutChar((topScores[position].score%10)+'0');
  7160  000C68  0E0A               	movlw	10
  7161  000C6A  6E5E               	movwf	___lbmod@divisor^0,c
  7162  000C6C  501F               	movf	_position^0,w,c
  7163  000C6E  D8CB               	call	PL8	;call to abstracted procedure
  7164  000C70  50DF               	movf	indf2,w,c
  7165  000C72  EC0F  F00F         	call	___lbmod
  7166  000C76  0F30               	addlw	48
  7167  000C78  ECE6  F00E         	call	_LcPutChar
  7168                           
  7169                           ;EEPROM.c: 265:             LcGotoXY(16,0);
  7170  000C7C  0E00               	movlw	0
  7171  000C7E  6E66               	movwf	LcGotoXY@Row^0,c
  7172  000C80  0E10               	movlw	16
  7173  000C82  ECA4  F00E         	call	_LcGotoXY
  7174                           
  7175                           ;EEPROM.c: 266:             if (position == numScores){ position = 0;}
  7176  000C86  5020               	movf	_numScores^0,w,c
  7177  000C88  181F               	xorwf	_position^0,w,c
  7178  000C8A  E101               	bnz	l7015
  7179  000C8C  6A1F               	clrf	_position^0,c
  7180  000C8E                     l7015:
  7181                           
  7182                           ;EEPROM.c: 267:             state = 52;
  7183  000C8E  0E34               	movlw	52
  7184  000C90  6E1E               	movwf	_state@EEPROM$F1761^0,c
  7185                           
  7186                           ;EEPROM.c: 268:             break;
  7187  000C92  0C34               	retlw	52
  7188  000C94                     l7017:
  7189                           
  7190                           ;EEPROM.c: 270:             saveState = position+1 == numScores? 0:position+1;
  7191  000C94  5020               	movf	_numScores^0,w,c
  7192  000C96  6E6C               	movwf	??_dataMotor^0,c
  7193  000C98  6A6D               	clrf	(??_dataMotor+1)^0,c
  7194  000C9A  501F               	movf	_position^0,w,c
  7195  000C9C  6E6E               	movwf	(??_dataMotor+2)^0,c
  7196  000C9E  6A6F               	clrf	(??_dataMotor+3)^0,c
  7197  000CA0  2A6E               	incf	(??_dataMotor+2)^0,f,c
  7198  000CA2  0E00               	movlw	0
  7199  000CA4  226F               	addwfc	(??_dataMotor+3)^0,f,c
  7200  000CA6  506C               	movf	??_dataMotor^0,w,c
  7201  000CA8  186E               	xorwf	(??_dataMotor+2)^0,w,c
  7202  000CAA  E103               	bnz	u6810
  7203  000CAC  506D               	movf	(??_dataMotor+1)^0,w,c
  7204  000CAE  186F               	xorwf	(??_dataMotor+3)^0,w,c
  7205  000CB0  E007               	bz	l932
  7206  000CB2                     u6810:
  7207  000CB2  281F               	incf	_position^0,w,c
  7208  000CB4  0100               	movlb	0	; () banked
  7209  000CB6  6FF5               	movwf	_dataMotor$1786& (0+255),b
  7210  000CB8  6BF6               	clrf	(_dataMotor$1786+1)& (0+255),b
  7211  000CBA  0E00               	movlw	0
  7212  000CBC  23F6               	addwfc	(_dataMotor$1786+1)& (0+255),f,b
  7213  000CBE  D003               	goto	l934
  7214  000CC0                     l932:
  7215  000CC0  0100               	movlb	0	; () banked
  7216  000CC2  6BF5               	clrf	_dataMotor$1786& (0+255),b
  7217  000CC4  6BF6               	clrf	(_dataMotor$1786+1)& (0+255),b
  7218  000CC6                     l934:
  7219                           
  7220                           ; BSR set to: 0
  7221  000CC6  C0F5  F019         	movff	_dataMotor$1786,_saveState
  7222                           
  7223                           ; BSR set to: 0
  7224                           ;EEPROM.c: 271:             if (users[topScores[saveState].userNum].username[status] != 
      +                          '\0'){
  7225  000CCA  5019               	movf	_saveState^0,w,c
  7226  000CCC  D873               	call	PL2	;call to abstracted procedure
  7227  000CCE  E005               	bz	l7027
  7228                           
  7229                           ; BSR set to: 0
  7230                           ;EEPROM.c: 272:                 LcPutChar(users[topScores[saveState].userNum].username[s
      +                          tatus]);
  7231  000CD0  5019               	movf	_saveState^0,w,c
  7232  000CD2  D870               	call	PL2	;call to abstracted procedure
  7233  000CD4  ECE6  F00E         	call	_LcPutChar
  7234  000CD8  D7B0               	goto	l6999
  7235  000CDA                     l7027:
  7236                           
  7237                           ; BSR set to: 0
  7238                           ;EEPROM.c: 275:                 LcPutChar(':');
  7239  000CDA  0E3A               	movlw	58
  7240  000CDC  ECE6  F00E         	call	_LcPutChar
  7241                           
  7242                           ;EEPROM.c: 276:                 state = 53;
  7243  000CE0  0E35               	movlw	53
  7244  000CE2  6E1E               	movwf	_state@EEPROM$F1761^0,c
  7245                           
  7246                           ;EEPROM.c: 277:                 LcGotoXY(16,1);
  7247  000CE4  0E01               	movlw	1
  7248  000CE6  6E66               	movwf	LcGotoXY@Row^0,c
  7249  000CE8  0E10               	movlw	16
  7250  000CEA  EFA4  F00E         	goto	_LcGotoXY
  7251  000CEE                     l7033:
  7252                           
  7253                           ;EEPROM.c: 281:             LcPutChar((topScores[saveState].score/10)+'0');
  7254  000CEE  0E0A               	movlw	10
  7255  000CF0  6E5E               	movwf	___lbdiv@divisor^0,c
  7256  000CF2  5019               	movf	_saveState^0,w,c
  7257  000CF4  D888               	call	PL8	;call to abstracted procedure
  7258  000CF6  50DF               	movf	indf2,w,c
  7259  000CF8  EC72  F00E         	call	___lbdiv
  7260  000CFC  0F30               	addlw	48
  7261  000CFE  ECE6  F00E         	call	_LcPutChar
  7262                           
  7263                           ;EEPROM.c: 282:             LcPutChar((topScores[saveState].score%10)+'0');
  7264  000D02  0E0A               	movlw	10
  7265  000D04  6E5E               	movwf	___lbmod@divisor^0,c
  7266  000D06  5019               	movf	_saveState^0,w,c
  7267  000D08  D87E               	call	PL8	;call to abstracted procedure
  7268  000D0A  50DF               	movf	indf2,w,c
  7269  000D0C  EC0F  F00F         	call	___lbmod
  7270  000D10  0F30               	addlw	48
  7271  000D12  ECE6  F00E         	call	_LcPutChar
  7272  000D16  D64C               	goto	l6821
  7273  000D18                     l7039:
  7274  000D18  501E               	movf	_state@EEPROM$F1761^0,w,c
  7275  000D1A  6E6C               	movwf	??_dataMotor^0,c
  7276  000D1C  6A6D               	clrf	(??_dataMotor+1)^0,c
  7277                           
  7278                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7279                           ; Switch size 1, requested type "space"
  7280                           ; Number of cases is 1, Range of values is 0 to 0
  7281                           ; switch strategies available:
  7282                           ; Name         Instructions Cycles
  7283                           ; simple_byte            4     3 (average)
  7284                           ;	Chosen strategy is simple_byte
  7285  000D1E  506D               	movf	(??_dataMotor+1)^0,w,c
  7286  000D20  A4D8               	btfss	status,2,c
  7287  000D22  0012               	return	
  7288                           
  7289                           ; Switch size 1, requested type "space"
  7290                           ; Number of cases is 24, Range of values is 0 to 53
  7291                           ; switch strategies available:
  7292                           ; Name         Instructions Cycles
  7293                           ; simple_byte           73    37 (average)
  7294                           ;	Chosen strategy is simple_byte
  7295  000D24  506C               	movf	??_dataMotor^0,w,c
  7296  000D26  B4D8               	btfsc	status,2,c
  7297  000D28  0012               	return	
  7298  000D2A  0A01               	xorlw	1	; case 1
  7299  000D2C  E101 D636          	bz	l6813
  7300  000D30  0A03               	xorlw	3	; case 2
  7301  000D32  E101 D63F          	bz	l6823
  7302  000D36  0A01               	xorlw	1	; case 3
  7303  000D38  E101 D64F          	bz	l6837
  7304  000D3C  0A06               	xorlw	6	; case 5
  7305  000D3E  E101 D66A          	bz	l6849
  7306  000D42  0A03               	xorlw	3	; case 6
  7307  000D44  E101 D670          	bz	l6855
  7308  000D48  0A01               	xorlw	1	; case 7
  7309  000D4A  E101 D67C          	bz	l891
  7310  000D4E  0A0D               	xorlw	13	; case 10
  7311  000D50  E101 D67E          	bz	l6871
  7312  000D54  0A01               	xorlw	1	; case 11
  7313  000D56  E101 D69E          	bz	l895
  7314  000D5A  0A07               	xorlw	7	; case 12
  7315  000D5C  E101 D6A0          	bz	l6885
  7316  000D60  0A02               	xorlw	2	; case 14
  7317  000D62  E101 D6C1          	bz	l6897
  7318  000D66  0A01               	xorlw	1	; case 15
  7319  000D68  E101 D6D5          	bz	l6913
  7320  000D6C  0A1F               	xorlw	31	; case 16
  7321  000D6E  E101 D6F1          	bz	l6921
  7322  000D72  0A01               	xorlw	1	; case 17
  7323  000D74  E101 D6FE          	bz	l6931
  7324  000D78  0A03               	xorlw	3	; case 18
  7325  000D7A  E101 D709          	bz	l6939
  7326  000D7E  0A01               	xorlw	1	; case 19
  7327  000D80  E101 D70B          	bz	l6945
  7328  000D84  0A07               	xorlw	7	; case 20
  7329  000D86  E101 D714          	bz	l6955
  7330  000D8A  0A01               	xorlw	1	; case 21
  7331  000D8C  E101 D732          	bz	l6979
  7332  000D90  0A03               	xorlw	3	; case 22
  7333  000D92  E101 D73B          	bz	l6983
  7334  000D96  0A01               	xorlw	1	; case 23
  7335  000D98  E101 D740          	bz	l6989
  7336  000D9C  0A25               	xorlw	37	; case 50
  7337  000D9E  E101 D745          	bz	l6995
  7338  000DA2  0A01               	xorlw	1	; case 51
  7339  000DA4  E101 D756          	bz	l7009
  7340  000DA8  0A07               	xorlw	7	; case 52
  7341  000DAA  E101 D773          	bz	l7017
  7342  000DAE  0A01               	xorlw	1	; case 53
  7343  000DB0  E09E               	bz	l7033
  7344  000DB2  0012               	return		;funcret
  7345  000DB4                     __end_of_dataMotor:
  7346                           	callstack 0
  7347  000DB4                     PL2:
  7348                           	callstack 24
  7349  000DB4  0D02               	mullw	2
  7350  000DB6  50F3               	movf	243,w,c
  7351  000DB8  0F02               	addlw	low (_topScores+1)
  7352  000DBA  6ED9               	movwf	fsr2l,c
  7353  000DBC  6ADA               	clrf	fsr2h,c
  7354  000DBE  50DF               	movf	indf2,w,c
  7355  000DC0  0D12               	mullw	18
  7356  000DC2  0E00               	movlw	low _users
  7357  000DC4  6E6C               	movwf	??_dataMotor^0,c
  7358  000DC6  0E01               	movlw	high _users
  7359  000DC8  6E6D               	movwf	(??_dataMotor+1)^0,c
  7360  000DCA  50F3               	movf	243,w,c
  7361  000DCC  266C               	addwf	??_dataMotor^0,f,c
  7362  000DCE  50F4               	movf	244,w,c
  7363  000DD0  226D               	addwfc	(??_dataMotor+1)^0,f,c
  7364  000DD2  501C               	movf	_status^0,w,c
  7365  000DD4  246C               	addwf	??_dataMotor^0,w,c
  7366  000DD6  6ED9               	movwf	fsr2l,c
  7367  000DD8  0E00               	movlw	0
  7368  000DDA  206D               	addwfc	(??_dataMotor+1)^0,w,c
  7369  000DDC  6EDA               	movwf	fsr2h,c
  7370  000DDE  50DF               	movf	indf2,w,c
  7371  000DE0  0012               	return	
  7372  000DE2                     __end_ofPL2:
  7373                           	callstack 0
  7374  000DE2                     PL4:
  7375                           	callstack 26
  7376  000DE2  50F3               	movf	243,w,c
  7377  000DE4  0F02               	addlw	low (_topScores+1)
  7378  000DE6  6ED9               	movwf	fsr2l,c
  7379  000DE8  6ADA               	clrf	fsr2h,c
  7380  000DEA  0012               	return	
  7381  000DEC                     __end_ofPL4:
  7382                           	callstack 0
  7383  000DEC                     PL6:
  7384                           	callstack 24
  7385  000DEC  501F               	movf	_position^0,w,c
  7386  000DEE  240B               	addwf	_mUser@EEPROM$F1764^0,w,c
  7387  000DF0  6E6C               	movwf	??_dataMotor^0,c
  7388  000DF2  0E00               	movlw	0
  7389  000DF4  200C               	addwfc	(_mUser@EEPROM$F1764+1)^0,w,c
  7390  000DF6  6E6D               	movwf	(??_dataMotor+1)^0,c
  7391  000DF8  0E09               	movlw	9
  7392  000DFA  246C               	addwf	??_dataMotor^0,w,c
  7393  000DFC  6ED9               	movwf	fsr2l,c
  7394  000DFE  0E00               	movlw	0
  7395  000E00  206D               	addwfc	(??_dataMotor+1)^0,w,c
  7396  000E02  6EDA               	movwf	fsr2h,c
  7397  000E04  0012               	return	
  7398  000E06                     __end_ofPL6:
  7399                           	callstack 0
  7400  000E06                     PL8:
  7401                           	callstack 26
  7402  000E06  0D02               	mullw	2
  7403  000E08  50F3               	movf	243,w,c
  7404  000E0A  0F01               	addlw	low _topScores
  7405  000E0C  6ED9               	movwf	fsr2l,c
  7406  000E0E  6ADA               	clrf	fsr2h,c
  7407  000E10  0012               	return	
  7408  000E12                     __end_ofPL8:
  7409                           	callstack 0
  7410  000E12                     PL10:
  7411                           	callstack 24
  7412  000E12  0E00               	movlw	0
  7413  000E14  200C               	addwfc	(_mUser@EEPROM$F1764+1)^0,w,c
  7414  000E16  6EDA               	movwf	fsr2h,c
  7415  000E18  501D               	movf	_userNum^0,w,c
  7416  000E1A  0D12               	mullw	18
  7417  000E1C  0E00               	movlw	low _users
  7418  000E1E  6E6D               	movwf	(??_dataMotor+1)^0,c
  7419  000E20  0E01               	movlw	high _users
  7420  000E22  6E6E               	movwf	(??_dataMotor+2)^0,c
  7421  000E24  50F3               	movf	243,w,c
  7422  000E26  266D               	addwf	(??_dataMotor+1)^0,f,c
  7423  000E28  50F4               	movf	244,w,c
  7424  000E2A  226E               	addwfc	(??_dataMotor+2)^0,f,c
  7425  000E2C  501F               	movf	_position^0,w,c
  7426  000E2E  246D               	addwf	(??_dataMotor+1)^0,w,c
  7427  000E30  6EE1               	movwf	fsr1l,c
  7428  000E32  0E00               	movlw	0
  7429  000E34  206E               	addwfc	(??_dataMotor+2)^0,w,c
  7430  000E36  6EE2               	movwf	fsr1h,c
  7431  000E38  50DE               	movf	postinc2,w,c
  7432  000E3A  18E6               	xorwf	postinc1,w,c
  7433  000E3C  0012               	return	
  7434  000E3E                     __end_ofPL10:
  7435                           	callstack 0
  7436  000E3E                     PL12:
  7437                           	callstack 24
  7438  000E3E  501F               	movf	_position^0,w,c
  7439  000E40  240B               	addwf	_mUser@EEPROM$F1764^0,w,c
  7440  000E42  6ED9               	movwf	fsr2l,c
  7441  000E44  0E00               	movlw	0
  7442  000E46  200C               	addwfc	(_mUser@EEPROM$F1764+1)^0,w,c
  7443  000E48  6EDA               	movwf	fsr2h,c
  7444  000E4A  0012               	return	
  7445  000E4C                     __end_ofPL12:
  7446                           	callstack 0
  7447  000E4C                     PL18:
  7448                           	callstack 24
  7449  000E4C  501F               	movf	_position^0,w,c
  7450  000E4E  0D02               	mullw	2
  7451  000E50  50F3               	movf	243,w,c
  7452  000E52  0F01               	addlw	low _topScores
  7453  000E54  6EE1               	movwf	fsr1l,c
  7454  000E56  6AE2               	clrf	fsr1h,c
  7455  000E58  0012               	return	
  7456  000E5A                     __end_ofPL18:
  7457                           	callstack 0
  7458  000E5A                     PL52:
  7459                           	callstack 24
  7460  000E5A  50DF               	movf	indf2,w,c
  7461  000E5C  6E5E               	movwf	saveEEPROM@data^0,c
  7462  000E5E  501B               	movf	_lastUserPointer^0,w,c
  7463  000E60  0D10               	mullw	16
  7464  000E62  50F3               	movf	243,w,c
  7465  000E64  241F               	addwf	_position^0,w,c
  7466  000E66  0012               	return	
  7467  000E68                     __end_ofPL52:
  7468                           	callstack 0
  7469  000E68                     PL80:
  7470                           	callstack 24
  7471  000E68  C020  F05E         	movff	_numScores,saveEEPROM@data
  7472  000E6C  0CFE               	retlw	254
  7473  000E6E                     __end_ofPL80:
  7474                           	callstack 0
  7475                           
  7476 ;; *************** function _saveEEPROM *****************
  7477 ;; Defined at:
  7478 ;;		line 344 in file "EEPROM.c"
  7479 ;; Parameters:    Size  Location     Type
  7480 ;;  ad              1    wreg     unsigned char 
  7481 ;;  data            1    5[COMRAM] unsigned char 
  7482 ;; Auto vars:     Size  Location     Type
  7483 ;;  ad              1    6[COMRAM] unsigned char 
  7484 ;; Return value:  Size  Location     Type
  7485 ;;                  1    wreg      void 
  7486 ;; Registers used:
  7487 ;;		wreg, status,2
  7488 ;; Tracked objects:
  7489 ;;		On entry : 0/0
  7490 ;;		On exit  : 0/0
  7491 ;;		Unchanged: 0/0
  7492 ;; Data sizes:     COMRAM   BANK0   BANK1
  7493 ;;      Params:         1       0       0
  7494 ;;      Locals:         1       0       0
  7495 ;;      Temps:          0       0       0
  7496 ;;      Totals:         2       0       0
  7497 ;;Total ram usage:        2 bytes
  7498 ;; Hardware stack levels used: 1
  7499 ;; Hardware stack levels required when called: 2
  7500 ;; This function calls:
  7501 ;;		Nothing
  7502 ;; This function is called by:
  7503 ;;		_dataMotor
  7504 ;; This function uses a non-reentrant model
  7505 ;;
  7506                           
  7507                           	psect	text57
  7508  001ED4                     __ptext57:
  7509                           	callstack 0
  7510  001ED4                     _saveEEPROM:
  7511                           	callstack 27
  7512                           
  7513                           ;incstack = 0
  7514                           ;saveEEPROM@ad stored from wreg
  7515  001ED4  6E5F               	movwf	saveEEPROM@ad^0,c
  7516                           
  7517                           ;EEPROM.c: 345:     EEADR = ad;
  7518  001ED6  C05F  FFA9         	movff	saveEEPROM@ad,4009	;volatile
  7519                           
  7520                           ;EEPROM.c: 346:     EEDATA = data;
  7521  001EDA  C05E  FFA8         	movff	saveEEPROM@data,4008	;volatile
  7522                           
  7523                           ;EEPROM.c: 347:     EECON1bits.EEPGD = 0;
  7524  001EDE  9EA6               	bcf	166,7,c	;volsfr
  7525                           
  7526                           ;EEPROM.c: 348:     EECON1bits.CFGS = 0;
  7527  001EE0  9CA6               	bcf	166,6,c	;volsfr
  7528                           
  7529                           ;EEPROM.c: 349:     EECON1bits.WREN = 1;
  7530  001EE2  84A6               	bsf	166,2,c	;volsfr
  7531                           
  7532                           ;EEPROM.c: 350:     INTCONbits.GIE = 0;
  7533  001EE4  9EF2               	bcf	242,7,c	;volatile
  7534                           
  7535                           ;EEPROM.c: 351:     EECON2 = 0x55;
  7536  001EE6  0E55               	movlw	85
  7537  001EE8  6EA7               	movwf	167,c	;volsfr
  7538                           
  7539                           ;EEPROM.c: 352:     EECON2 = 0xAA;
  7540  001EEA  0EAA               	movlw	170
  7541  001EEC  6EA7               	movwf	167,c	;volsfr
  7542                           
  7543                           ;EEPROM.c: 353:     EECON1bits.WR = 1;
  7544  001EEE  82A6               	bsf	166,1,c	;volsfr
  7545                           
  7546                           ;EEPROM.c: 354:     INTCONbits.GIE = 1;
  7547  001EF0  8EF2               	bsf	242,7,c	;volatile
  7548                           
  7549                           ;EEPROM.c: 355:     EECON1bits.WREN = 0;
  7550  001EF2  94A6               	bcf	166,2,c	;volsfr
  7551  001EF4  0CAA               	retlw	170	;funcret
  7552  001EF6                     __end_of_saveEEPROM:
  7553                           	callstack 0
  7554                           
  7555 ;; *************** function ___lbmod *****************
  7556 ;; Defined at:
  7557 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\lbmod.c"
  7558 ;; Parameters:    Size  Location     Type
  7559 ;;  dividend        1    wreg     unsigned char 
  7560 ;;  divisor         1    5[COMRAM] unsigned char 
  7561 ;; Auto vars:     Size  Location     Type
  7562 ;;  dividend        1    6[COMRAM] unsigned char 
  7563 ;;  rem             1    8[COMRAM] unsigned char 
  7564 ;;  counter         1    7[COMRAM] unsigned char 
  7565 ;; Return value:  Size  Location     Type
  7566 ;;                  1    wreg      unsigned char 
  7567 ;; Registers used:
  7568 ;;		wreg, status,2, status,0
  7569 ;; Tracked objects:
  7570 ;;		On entry : 0/0
  7571 ;;		On exit  : 0/0
  7572 ;;		Unchanged: 0/0
  7573 ;; Data sizes:     COMRAM   BANK0   BANK1
  7574 ;;      Params:         1       0       0
  7575 ;;      Locals:         3       0       0
  7576 ;;      Temps:          0       0       0
  7577 ;;      Totals:         4       0       0
  7578 ;;Total ram usage:        4 bytes
  7579 ;; Hardware stack levels used: 1
  7580 ;; Hardware stack levels required when called: 2
  7581 ;; This function calls:
  7582 ;;		Nothing
  7583 ;; This function is called by:
  7584 ;;		_menuMotor
  7585 ;;		_dataMotor
  7586 ;;		_DaSaveScore
  7587 ;;		_timeMotor
  7588 ;; This function uses a non-reentrant model
  7589 ;;
  7590                           
  7591                           	psect	text58
  7592  001E1E                     __ptext58:
  7593                           	callstack 0
  7594  001E1E                     ___lbmod:
  7595                           	callstack 27
  7596                           
  7597                           ;incstack = 0
  7598                           ;___lbmod@dividend stored from wreg
  7599  001E1E  6E5F               	movwf	___lbmod@dividend^0,c
  7600  001E20  0E08               	movlw	8
  7601  001E22  6E60               	movwf	___lbmod@counter^0,c
  7602  001E24  6A61               	clrf	___lbmod@rem^0,c
  7603  001E26                     l5905:
  7604  001E26  90D8               	bcf	status,0,c
  7605  001E28  345F               	rlcf	___lbmod@dividend^0,w,c
  7606  001E2A  3461               	rlcf	___lbmod@rem^0,w,c
  7607  001E2C  6E61               	movwf	___lbmod@rem^0,c
  7608  001E2E  90D8               	bcf	status,0,c
  7609  001E30  365F               	rlcf	___lbmod@dividend^0,f,c
  7610  001E32  505E               	movf	___lbmod@divisor^0,w,c
  7611  001E34  5C61               	subwf	___lbmod@rem^0,w,c
  7612  001E36  E302               	bnc	l5913
  7613  001E38  505E               	movf	___lbmod@divisor^0,w,c
  7614  001E3A  5E61               	subwf	___lbmod@rem^0,f,c
  7615  001E3C                     l5913:
  7616  001E3C  2E60               	decfsz	___lbmod@counter^0,f,c
  7617  001E3E  D7F3               	goto	l5905
  7618  001E40  5061               	movf	___lbmod@rem^0,w,c
  7619  001E42  0012               	return		;funcret
  7620  001E44                     __end_of___lbmod:
  7621                           	callstack 0
  7622                           
  7623 ;; *************** function ___lbdiv *****************
  7624 ;; Defined at:
  7625 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\lbdiv.c"
  7626 ;; Parameters:    Size  Location     Type
  7627 ;;  dividend        1    wreg     unsigned char 
  7628 ;;  divisor         1    5[COMRAM] unsigned char 
  7629 ;; Auto vars:     Size  Location     Type
  7630 ;;  dividend        1    6[COMRAM] unsigned char 
  7631 ;;  quotient        1    8[COMRAM] unsigned char 
  7632 ;;  counter         1    7[COMRAM] unsigned char 
  7633 ;; Return value:  Size  Location     Type
  7634 ;;                  1    wreg      unsigned char 
  7635 ;; Registers used:
  7636 ;;		wreg, status,2, status,0
  7637 ;; Tracked objects:
  7638 ;;		On entry : 0/0
  7639 ;;		On exit  : 0/0
  7640 ;;		Unchanged: 0/0
  7641 ;; Data sizes:     COMRAM   BANK0   BANK1
  7642 ;;      Params:         1       0       0
  7643 ;;      Locals:         3       0       0
  7644 ;;      Temps:          0       0       0
  7645 ;;      Totals:         4       0       0
  7646 ;;Total ram usage:        4 bytes
  7647 ;; Hardware stack levels used: 1
  7648 ;; Hardware stack levels required when called: 2
  7649 ;; This function calls:
  7650 ;;		Nothing
  7651 ;; This function is called by:
  7652 ;;		_menuMotor
  7653 ;;		_dataMotor
  7654 ;;		_DaSaveScore
  7655 ;;		_timeMotor
  7656 ;; This function uses a non-reentrant model
  7657 ;;
  7658                           
  7659                           	psect	text59
  7660  001CE4                     __ptext59:
  7661                           	callstack 0
  7662  001CE4                     ___lbdiv:
  7663                           	callstack 27
  7664                           
  7665                           ;incstack = 0
  7666                           ;___lbdiv@dividend stored from wreg
  7667  001CE4  6E5F               	movwf	___lbdiv@dividend^0,c
  7668  001CE6  6A61               	clrf	___lbdiv@quotient^0,c
  7669  001CE8  505E               	movf	___lbdiv@divisor^0,w,c
  7670  001CEA  E014               	bz	l5897
  7671  001CEC  0E01               	movlw	1
  7672  001CEE  6E60               	movwf	___lbdiv@counter^0,c
  7673  001CF0  D003               	goto	l5885
  7674  001CF2                     l5881:
  7675  001CF2  90D8               	bcf	status,0,c
  7676  001CF4  365E               	rlcf	___lbdiv@divisor^0,f,c
  7677  001CF6  2A60               	incf	___lbdiv@counter^0,f,c
  7678  001CF8                     l5885:
  7679  001CF8  AE5E               	btfss	___lbdiv@divisor^0,7,c
  7680  001CFA  D7FB               	goto	l5881
  7681  001CFC                     u5310:
  7682  001CFC  90D8               	bcf	status,0,c
  7683  001CFE  3661               	rlcf	___lbdiv@quotient^0,f,c
  7684  001D00  505E               	movf	___lbdiv@divisor^0,w,c
  7685  001D02  5C5F               	subwf	___lbdiv@dividend^0,w,c
  7686  001D04  E303               	bnc	l5893
  7687  001D06  505E               	movf	___lbdiv@divisor^0,w,c
  7688  001D08  5E5F               	subwf	___lbdiv@dividend^0,f,c
  7689  001D0A  8061               	bsf	___lbdiv@quotient^0,0,c
  7690  001D0C                     l5893:
  7691  001D0C  90D8               	bcf	status,0,c
  7692  001D0E  325E               	rrcf	___lbdiv@divisor^0,f,c
  7693  001D10  2E60               	decfsz	___lbdiv@counter^0,f,c
  7694  001D12  D7F4               	goto	u5310
  7695  001D14                     l5897:
  7696  001D14  5061               	movf	___lbdiv@quotient^0,w,c
  7697  001D16  0012               	return		;funcret
  7698  001D18                     __end_of___lbdiv:
  7699                           	callstack 0
  7700                           
  7701 ;; *************** function _LcPutChar *****************
  7702 ;; Defined at:
  7703 ;;		line 154 in file "LcTLCD.c"
  7704 ;; Parameters:    Size  Location     Type
  7705 ;;  c               1    wreg     unsigned char 
  7706 ;; Auto vars:     Size  Location     Type
  7707 ;;  c               1   18[COMRAM] unsigned char 
  7708 ;; Return value:  Size  Location     Type
  7709 ;;                  1    wreg      void 
  7710 ;; Registers used:
  7711 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7712 ;; Tracked objects:
  7713 ;;		On entry : 0/0
  7714 ;;		On exit  : 0/0
  7715 ;;		Unchanged: 0/0
  7716 ;; Data sizes:     COMRAM   BANK0   BANK1
  7717 ;;      Params:         0       0       0
  7718 ;;      Locals:         1       0       0
  7719 ;;      Temps:          0       0       0
  7720 ;;      Totals:         1       0       0
  7721 ;;Total ram usage:        1 bytes
  7722 ;; Hardware stack levels used: 1
  7723 ;; Hardware stack levels required when called: 5
  7724 ;; This function calls:
  7725 ;;		_CantaData
  7726 ;;		_LcGotoXY
  7727 ;;		_WaitForBusy
  7728 ;; This function is called by:
  7729 ;;		_menuMotor
  7730 ;;		_displayString
  7731 ;;		_mainMenu
  7732 ;;		_displayError
  7733 ;;		_displayResults
  7734 ;;		_displayLogOut
  7735 ;;		_dataMotor
  7736 ;;		_DaSaveScore
  7737 ;;		_timeMotor
  7738 ;;		_sendChar
  7739 ;; This function uses a non-reentrant model
  7740 ;;
  7741                           
  7742                           	psect	text60
  7743  001DCC                     __ptext60:
  7744                           	callstack 0
  7745  001DCC                     _LcPutChar:
  7746                           	callstack 23
  7747                           
  7748                           ;incstack = 0
  7749                           ;LcPutChar@c stored from wreg
  7750  001DCC  6E6B               	movwf	LcPutChar@c^0,c
  7751                           
  7752                           ;LcTLCD.c: 164:  WaitForBusy(); CantaData(c);
  7753  001DCE  EC03  F00E         	call	_WaitForBusy	;wreg free
  7754  001DD2  506B               	movf	LcPutChar@c^0,w,c
  7755  001DD4  EC22  F00E         	call	_CantaData
  7756                           
  7757                           ;LcTLCD.c: 166:  ++ColumnAct;
  7758  001DD8  2A3A               	incf	_ColumnAct^0,f,c
  7759                           
  7760                           ;LcTLCD.c: 168:     if (ColumnAct >= 40) {
  7761  001DDA  0E27               	movlw	39
  7762  001DDC  643A               	cpfsgt	_ColumnAct^0,c
  7763  001DDE  0C27               	retlw	39
  7764                           
  7765                           ;LcTLCD.c: 169:         ColumnAct = 0;
  7766  001DE0  6A3A               	clrf	_ColumnAct^0,c
  7767                           
  7768                           ;LcTLCD.c: 170:   if (++RowAct >= 2) RowAct = 0;
  7769  001DE2  2A3B               	incf	_RowAct^0,f,c
  7770  001DE4  0E01               	movlw	1
  7771  001DE6  643B               	cpfsgt	_RowAct^0,c
  7772  001DE8  D001               	goto	l5863
  7773  001DEA  6A3B               	clrf	_RowAct^0,c
  7774  001DEC                     l5863:
  7775                           
  7776                           ;LcTLCD.c: 171:   LcGotoXY(ColumnAct, RowAct);
  7777  001DEC  C03B  F066         	movff	_RowAct,LcGotoXY@Row
  7778  001DF0  503A               	movf	_ColumnAct^0,w,c
  7779  001DF2  EFA4  F00E         	goto	_LcGotoXY
  7780  001DF6                     __end_of_LcPutChar:
  7781                           	callstack 0
  7782                           
  7783 ;; *************** function _LcGotoXY *****************
  7784 ;; Defined at:
  7785 ;;		line 126 in file "LcTLCD.c"
  7786 ;; Parameters:    Size  Location     Type
  7787 ;;  Column          1    wreg     unsigned char 
  7788 ;;  Row             1   13[COMRAM] unsigned char 
  7789 ;; Auto vars:     Size  Location     Type
  7790 ;;  Column          1   17[COMRAM] unsigned char 
  7791 ;;  Fisics          1   14[COMRAM] unsigned char 
  7792 ;; Return value:  Size  Location     Type
  7793 ;;                  1    wreg      void 
  7794 ;; Registers used:
  7795 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7796 ;; Tracked objects:
  7797 ;;		On entry : 0/0
  7798 ;;		On exit  : 0/0
  7799 ;;		Unchanged: 0/0
  7800 ;; Data sizes:     COMRAM   BANK0   BANK1
  7801 ;;      Params:         1       0       0
  7802 ;;      Locals:         4       0       0
  7803 ;;      Temps:          0       0       0
  7804 ;;      Totals:         5       0       0
  7805 ;;Total ram usage:        5 bytes
  7806 ;; Hardware stack levels used: 1
  7807 ;; Hardware stack levels required when called: 4
  7808 ;; This function calls:
  7809 ;;		_CantaIR
  7810 ;;		_WaitForBusy
  7811 ;; This function is called by:
  7812 ;;		_LcPutChar
  7813 ;;		_menuMotor
  7814 ;;		_nextRow
  7815 ;;		_dataMotor
  7816 ;;		_DaFindUser
  7817 ;;		_timeMotor
  7818 ;;		_displayTimeRemaining
  7819 ;;		_displaySysTime
  7820 ;; This function uses a non-reentrant model
  7821 ;;
  7822                           
  7823                           	psect	text61
  7824  001D48                     __ptext61:
  7825                           	callstack 0
  7826  001D48                     _LcGotoXY:
  7827                           	callstack 23
  7828                           
  7829                           ;incstack = 0
  7830                           ;LcGotoXY@Column stored from wreg
  7831  001D48  6E6A               	movwf	LcGotoXY@Column^0,c
  7832                           
  7833                           ;LcTLCD.c: 130:  char Fisics;;LcTLCD.c: 132:  Fisics = Column + (!Row ? 0 : 0x40);
  7834  001D4A  5066               	movf	LcGotoXY@Row^0,w,c
  7835  001D4C  E004               	bz	l279
  7836  001D4E  6A69               	clrf	(_LcGotoXY$844+1)^0,c
  7837  001D50  0E40               	movlw	64
  7838  001D52  6E68               	movwf	_LcGotoXY$844^0,c
  7839  001D54  D002               	goto	l5815
  7840  001D56                     l279:
  7841  001D56  6A68               	clrf	_LcGotoXY$844^0,c
  7842  001D58  6A69               	clrf	(_LcGotoXY$844+1)^0,c
  7843  001D5A                     l5815:
  7844  001D5A  506A               	movf	LcGotoXY@Column^0,w,c
  7845  001D5C  2468               	addwf	_LcGotoXY$844^0,w,c
  7846  001D5E  6E67               	movwf	LcGotoXY@Fisics^0,c
  7847                           
  7848                           ;LcTLCD.c: 147:  WaitForBusy();
  7849  001D60  EC03  F00E         	call	_WaitForBusy	;wreg free
  7850                           
  7851                           ;LcTLCD.c: 148:  CantaIR(0x80 | Fisics);
  7852  001D64  5067               	movf	LcGotoXY@Fisics^0,w,c
  7853  001D66  0980               	iorlw	128
  7854  001D68  ECBB  F00F         	call	_CantaIR
  7855                           
  7856                           ;LcTLCD.c: 150:  RowAct = Row;
  7857  001D6C  C066  F03B         	movff	LcGotoXY@Row,_RowAct
  7858                           
  7859                           ;LcTLCD.c: 151:  ColumnAct = Column;
  7860  001D70  C06A  F03A         	movff	LcGotoXY@Column,_ColumnAct
  7861  001D74  0012               	return		;funcret
  7862  001D76                     __end_of_LcGotoXY:
  7863                           	callstack 0
  7864                           
  7865 ;; *************** function _CantaData *****************
  7866 ;; Defined at:
  7867 ;;		line 244 in file "LcTLCD.c"
  7868 ;; Parameters:    Size  Location     Type
  7869 ;;  Data            1    wreg     unsigned char 
  7870 ;; Auto vars:     Size  Location     Type
  7871 ;;  Data            1    7[COMRAM] unsigned char 
  7872 ;; Return value:  Size  Location     Type
  7873 ;;                  1    wreg      void 
  7874 ;; Registers used:
  7875 ;;		wreg, status,2, status,0, cstack
  7876 ;; Tracked objects:
  7877 ;;		On entry : 0/0
  7878 ;;		On exit  : 0/0
  7879 ;;		Unchanged: 0/0
  7880 ;; Data sizes:     COMRAM   BANK0   BANK1
  7881 ;;      Params:         0       0       0
  7882 ;;      Locals:         1       0       0
  7883 ;;      Temps:          0       0       0
  7884 ;;      Totals:         1       0       0
  7885 ;;Total ram usage:        1 bytes
  7886 ;; Hardware stack levels used: 1
  7887 ;; Hardware stack levels required when called: 3
  7888 ;; This function calls:
  7889 ;;		_CantaPartAlta
  7890 ;;		_CantaPartBaixa
  7891 ;; This function is called by:
  7892 ;;		_LcPutChar
  7893 ;; This function uses a non-reentrant model
  7894 ;;
  7895                           
  7896                           	psect	text62
  7897  001C44                     __ptext62:
  7898                           	callstack 0
  7899  001C44                     _CantaData:
  7900                           	callstack 24
  7901                           
  7902                           ;incstack = 0
  7903                           ;CantaData@Data stored from wreg
  7904  001C44  6E60               	movwf	CantaData@Data^0,c
  7905                           
  7906                           ;LcTLCD.c: 245:  (TRISDbits.TRISD0 = TRISDbits.TRISD1 = TRISDbits.TRISD2 = TRISDbits.TRI
      +                          SD3 = 0);
  7907  001C46  9695               	bcf	149,3,c	;volatile
  7908  001C48  9495               	bcf	149,2,c	;volatile
  7909  001C4A  9295               	bcf	149,1,c	;volatile
  7910  001C4C  9095               	bcf	149,0,c	;volatile
  7911                           
  7912                           ;LcTLCD.c: 246:  (LATDbits.LATD4 = 1);
  7913  001C4E  888C               	bsf	140,4,c	;volatile
  7914                           
  7915                           ;LcTLCD.c: 247:  (LATDbits.LATD5 = 0);
  7916  001C50  9A8C               	bcf	140,5,c	;volatile
  7917                           
  7918                           ;LcTLCD.c: 248:  (LATDbits.LATD6 = 1);
  7919  001C52  8C8C               	bsf	140,6,c	;volatile
  7920                           
  7921                           ;LcTLCD.c: 249:  CantaPartAlta(Data);
  7922  001C54  5060               	movf	CantaData@Data^0,w,c
  7923  001C56  EC0C  F00D         	call	_CantaPartAlta
  7924                           
  7925                           ;LcTLCD.c: 250:  (LATDbits.LATD6 = 1);
  7926                           
  7927                           ;LcTLCD.c: 251:  (LATDbits.LATD6 = 0);
  7928                           
  7929                           ;LcTLCD.c: 252:  (LATDbits.LATD6 = 0);
  7930                           
  7931                           ;LcTLCD.c: 253:  (LATDbits.LATD6 = 1);
  7932  001C5A  D80B               	call	PL72	;call to abstracted procedure
  7933                           
  7934                           ;LcTLCD.c: 254:  CantaPartBaixa(Data);
  7935  001C5C  5060               	movf	CantaData@Data^0,w,c
  7936  001C5E  ECD9  F00C         	call	_CantaPartBaixa
  7937                           
  7938                           ;LcTLCD.c: 255:  (LATDbits.LATD6 = 1);
  7939                           
  7940                           ;LcTLCD.c: 256:  (LATDbits.LATD6 = 0);
  7941                           
  7942                           ;LcTLCD.c: 257:  (TRISDbits.TRISD0 = TRISDbits.TRISD1 = TRISDbits.TRISD2 = TRISDbits.TRI
      +                          SD3 = 1);
  7943  001C62  D000               	goto	PL42	;call to abstracted procedure
  7944  001C64                     __end_of_CantaData:
  7945                           	callstack 0
  7946  001C64                     PL42:
  7947                           	callstack 23
  7948  001C64  8C8C               	bsf	140,6,c	;volatile
  7949  001C66  9C8C               	bcf	140,6,c	;volatile
  7950  001C68  8695               	bsf	149,3,c	;volatile
  7951  001C6A  8495               	bsf	149,2,c	;volatile
  7952  001C6C  8295               	bsf	149,1,c	;volatile
  7953  001C6E  8095               	bsf	149,0,c	;volatile
  7954  001C70  0012               	return		;funcret
  7955  001C72                     __end_ofPL42:
  7956                           	callstack 0
  7957  001C72                     PL72:
  7958                           	callstack 23
  7959  001C72  8C8C               	bsf	140,6,c	;volatile
  7960  001C74  9C8C               	bcf	140,6,c	;volatile
  7961  001C76  9C8C               	bcf	140,6,c	;volatile
  7962  001C78  8C8C               	bsf	140,6,c	;volatile
  7963  001C7A  0012               	return	
  7964  001C7C                     __end_ofPL72:
  7965                           	callstack 0
  7966                           
  7967 ;; *************** function _btMotor *****************
  7968 ;; Defined at:
  7969 ;;		line 53 in file "SIO.c"
  7970 ;; Parameters:    Size  Location     Type
  7971 ;;		None
  7972 ;; Auto vars:     Size  Location     Type
  7973 ;;		None
  7974 ;; Return value:  Size  Location     Type
  7975 ;;                  1    wreg      void 
  7976 ;; Registers used:
  7977 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7978 ;; Tracked objects:
  7979 ;;		On entry : 0/0
  7980 ;;		On exit  : 0/0
  7981 ;;		Unchanged: 0/0
  7982 ;; Data sizes:     COMRAM   BANK0   BANK1
  7983 ;;      Params:         0       0       0
  7984 ;;      Locals:         0       0       0
  7985 ;;      Temps:          2       0       0
  7986 ;;      Totals:         2       0       0
  7987 ;;Total ram usage:        2 bytes
  7988 ;; Hardware stack levels used: 1
  7989 ;; Hardware stack levels required when called: 3
  7990 ;; This function calls:
  7991 ;;		_SiIsAvailable
  7992 ;;		_SiSendChar
  7993 ;;		_TiGetTics
  7994 ;;		_TiResetTics
  7995 ;; This function is called by:
  7996 ;;		_main
  7997 ;; This function uses a non-reentrant model
  7998 ;;
  7999                           
  8000                           	psect	text63
  8001  001310                     __ptext63:
  8002                           	callstack 0
  8003  001310                     _btMotor:
  8004                           	callstack 27
  8005                           
  8006                           ;SIO.c: 54:     switch (stateRX){
  8007                           
  8008                           ;incstack = 0
  8009  001310  D036               	goto	l7263
  8010  001312                     l784:
  8011                           
  8012                           ;SIO.c: 56:             if (PORTCbits.RC5 == 0){
  8013  001312  BA82               	btfsc	130,5,c	;volatile
  8014  001314  D070               	goto	l7285
  8015                           
  8016                           ;SIO.c: 58:                 TiResetTics(timerRX);
  8017  001316  5027               	movf	_timerRX^0,w,c
  8018  001318  ECAB  F00F         	call	_TiResetTics
  8019                           
  8020                           ;SIO.c: 59:                 dataRX =0;
  8021  00131C  6A26               	clrf	_dataRX^0,c
  8022                           
  8023                           ;SIO.c: 60:                 counterRX = 0;
  8024  00131E  6A25               	clrf	_counterRX^0,c
  8025                           
  8026                           ;SIO.c: 61:                 stateRX = 1;
  8027  001320  0E01               	movlw	1
  8028  001322  6E28               	movwf	_stateRX^0,c
  8029  001324  D068               	goto	l7285
  8030  001326                     l7235:
  8031                           
  8032                           ;SIO.c: 65:             if (counterRX >= 8){
  8033  001326  0E07               	movlw	7
  8034  001328  6425               	cpfsgt	_counterRX^0,c
  8035  00132A  D009               	goto	l7243
  8036                           
  8037                           ;SIO.c: 66:                 if (SiIsAvailable()){
  8038  00132C  ECB5  F000         	call	_SiIsAvailable	;wreg free
  8039  001330  0900               	iorlw	0
  8040  001332  E003               	bz	l7241
  8041                           
  8042                           ;SIO.c: 67:                     SiSendChar(dataRX);
  8043  001334  5026               	movf	_dataRX^0,w,c
  8044  001336  ECAE  F000         	call	_SiSendChar
  8045  00133A                     l7241:
  8046                           
  8047                           ;SIO.c: 69:                 stateRX = 0;
  8048  00133A  6A28               	clrf	_stateRX^0,c
  8049                           
  8050                           ;SIO.c: 70:             } else if (TiGetTics(timerRX) >= 1){
  8051  00133C  D05C               	goto	l7285
  8052  00133E                     l7243:
  8053  00133E  5027               	movf	_timerRX^0,w,c
  8054  001340  EC22  F00F         	call	_TiGetTics
  8055  001344  BE5F               	btfsc	(?_TiGetTics+1)^0,7,c
  8056  001346  D057               	goto	l7285
  8057  001348  505F               	movf	(?_TiGetTics+1)^0,w,c
  8058  00134A  E102               	bnz	u7090
  8059  00134C  045E               	decf	?_TiGetTics^0,w,c
  8060  00134E  E353               	bnc	l7285
  8061  001350                     u7090:
  8062                           
  8063                           ;SIO.c: 71:                 if(PORTCbits.RC5){
  8064  001350  AA82               	btfss	130,5,c	;volatile
  8065  001352  D002               	goto	l7249
  8066                           
  8067                           ;SIO.c: 72:                     dataRX = dataRX | 0x80;
  8068  001354  8E26               	bsf	_dataRX^0,7,c
  8069                           
  8070                           ;SIO.c: 73:                 }else {
  8071  001356  D001               	goto	l7251
  8072  001358                     l7249:
  8073                           
  8074                           ;SIO.c: 74:                     dataRX = dataRX & 0x7F;
  8075  001358  9E26               	bcf	_dataRX^0,7,c
  8076  00135A                     l7251:
  8077                           
  8078                           ;SIO.c: 76:                 dataRX = (dataRX >>1);
  8079  00135A  90D8               	bcf	status,0,c
  8080  00135C  3226               	rrcf	_dataRX^0,f,c
  8081                           
  8082                           ;SIO.c: 77:                 TiResetTics(timerRX);
  8083  00135E  5027               	movf	_timerRX^0,w,c
  8084  001360  ECAB  F00F         	call	_TiResetTics
  8085                           
  8086                           ;SIO.c: 78:                 counterRX++;
  8087  001364  2A25               	incf	_counterRX^0,f,c
  8088  001366  D047               	goto	l7285
  8089  001368                     l7257:
  8090                           
  8091                           ;SIO.c: 82:             if(TiGetTics(timerRX) >= 24){
  8092  001368  5027               	movf	_timerRX^0,w,c
  8093  00136A  EC22  F00F         	call	_TiGetTics
  8094  00136E  BE5F               	btfsc	(?_TiGetTics+1)^0,7,c
  8095  001370  D042               	goto	l7285
  8096  001372  505F               	movf	(?_TiGetTics+1)^0,w,c
  8097  001374  E1E2               	bnz	l7241
  8098  001376  0E18               	movlw	24
  8099  001378  5C5E               	subwf	?_TiGetTics^0,w,c
  8100  00137A  E2DF               	bc	l7241
  8101  00137C  D03C               	goto	l7285
  8102  00137E                     l7263:
  8103  00137E  5028               	movf	_stateRX^0,w,c
  8104  001380  6E65               	movwf	??_btMotor^0,c
  8105  001382  6A66               	clrf	(??_btMotor+1)^0,c
  8106                           
  8107                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  8108                           ; Switch size 1, requested type "space"
  8109                           ; Number of cases is 1, Range of values is 0 to 0
  8110                           ; switch strategies available:
  8111                           ; Name         Instructions Cycles
  8112                           ; simple_byte            4     3 (average)
  8113                           ;	Chosen strategy is simple_byte
  8114  001384  5066               	movf	(??_btMotor+1)^0,w,c
  8115  001386  E137               	bnz	l7285
  8116                           
  8117                           ; Switch size 1, requested type "space"
  8118                           ; Number of cases is 3, Range of values is 0 to 2
  8119                           ; switch strategies available:
  8120                           ; Name         Instructions Cycles
  8121                           ; simple_byte           10     6 (average)
  8122                           ;	Chosen strategy is simple_byte
  8123  001388  5065               	movf	??_btMotor^0,w,c
  8124  00138A  E0C3               	bz	l784
  8125  00138C  0A01               	xorlw	1	; case 1
  8126  00138E  E0CB               	bz	l7235
  8127  001390  0A03               	xorlw	3	; case 2
  8128  001392  E0EA               	bz	l7257
  8129                           
  8130                           ;SIO.c: 87:     switch (stateTX){
  8131  001394  D030               	goto	l7285
  8132  001396                     l797:
  8133                           
  8134                           ;SIO.c: 89:             LATCbits.LATC4 = 1 & 0x01;
  8135  001396  888B               	bsf	139,4,c	;volatile
  8136                           
  8137                           ;SIO.c: 90:             counterTX = 0;
  8138  001398  6A21               	clrf	_counterTX^0,c
  8139                           
  8140                           ;SIO.c: 91:             break;
  8141  00139A  0012               	return	
  8142  00139C                     l7265:
  8143                           
  8144                           ;SIO.c: 94:             if(TiGetTics(timerTX) >= 1){
  8145  00139C  5023               	movf	_timerTX^0,w,c
  8146  00139E  EC22  F00F         	call	_TiGetTics
  8147  0013A2  BE5F               	btfsc	(?_TiGetTics+1)^0,7,c
  8148  0013A4  0012               	return	
  8149  0013A6  505F               	movf	(?_TiGetTics+1)^0,w,c
  8150  0013A8  E103               	bnz	u7120
  8151  0013AA  045E               	decf	?_TiGetTics^0,w,c
  8152  0013AC  A0D8               	btfss	status,0,c
  8153  0013AE  0012               	return	
  8154  0013B0                     u7120:
  8155                           
  8156                           ;SIO.c: 95:                 if (counterTX < 8){
  8157  0013B0  0E08               	movlw	8
  8158  0013B2  6021               	cpfslt	_counterTX^0,c
  8159  0013B4  D00E               	goto	l7273
  8160                           
  8161                           ;SIO.c: 96:                     LATCbits.LATC4 = (dataTX & 0x01);
  8162  0013B6  C022  F065         	movff	_dataTX,??_btMotor
  8163  0013BA  0E01               	movlw	1
  8164  0013BC  1665               	andwf	??_btMotor^0,f,c
  8165  0013BE  3A65               	swapf	??_btMotor^0,f,c
  8166  0013C0  508B               	movf	139,w,c	;volatile
  8167  0013C2  1865               	xorwf	??_btMotor^0,w,c
  8168  0013C4  0BEF               	andlw	-17
  8169  0013C6  1865               	xorwf	??_btMotor^0,w,c
  8170  0013C8  6E8B               	movwf	139,c	;volatile
  8171                           
  8172                           ;SIO.c: 97:                     dataTX = (dataTX >> 1);
  8173  0013CA  90D8               	bcf	status,0,c
  8174  0013CC  3222               	rrcf	_dataTX^0,f,c
  8175                           
  8176                           ;SIO.c: 98:                     counterTX++;
  8177  0013CE  2A21               	incf	_counterTX^0,f,c
  8178                           
  8179                           ;SIO.c: 99:                 }
  8180  0013D0  D002               	goto	l7277
  8181  0013D2                     l7273:
  8182                           
  8183                           ;SIO.c: 101:                     stateTX++;
  8184  0013D2  2A24               	incf	_stateTX^0,f,c
  8185                           
  8186                           ;SIO.c: 102:                     LATCbits.LATC4 = 1 & 0x01;
  8187  0013D4  888B               	bsf	139,4,c	;volatile
  8188  0013D6                     l7277:
  8189                           
  8190                           ;SIO.c: 104:                 TiResetTics(timerTX);
  8191  0013D6  5023               	movf	_timerTX^0,w,c
  8192  0013D8  EFAB  F00F         	goto	_TiResetTics
  8193  0013DC                     l7279:
  8194                           
  8195                           ;SIO.c: 109:             if(TiGetTics(timerTX) >= 1){
  8196  0013DC  5023               	movf	_timerTX^0,w,c
  8197  0013DE  EC22  F00F         	call	_TiGetTics
  8198  0013E2  BE5F               	btfsc	(?_TiGetTics+1)^0,7,c
  8199  0013E4  0012               	return	
  8200  0013E6  505F               	movf	(?_TiGetTics+1)^0,w,c
  8201  0013E8  E103               	bnz	u7140
  8202  0013EA  045E               	decf	?_TiGetTics^0,w,c
  8203  0013EC  A0D8               	btfss	status,0,c
  8204  0013EE  0012               	return	
  8205  0013F0                     u7140:
  8206                           
  8207                           ;SIO.c: 110:                 LATCbits.LATC4 = 1 & 0x01;
  8208  0013F0  888B               	bsf	139,4,c	;volatile
  8209                           
  8210                           ;SIO.c: 111:                 stateTX=0;
  8211  0013F2  6A24               	clrf	_stateTX^0,c
  8212  0013F4  0012               	return	
  8213  0013F6                     l7285:
  8214  0013F6  5024               	movf	_stateTX^0,w,c
  8215  0013F8  6E65               	movwf	??_btMotor^0,c
  8216  0013FA  6A66               	clrf	(??_btMotor+1)^0,c
  8217                           
  8218                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  8219                           ; Switch size 1, requested type "space"
  8220                           ; Number of cases is 1, Range of values is 0 to 0
  8221                           ; switch strategies available:
  8222                           ; Name         Instructions Cycles
  8223                           ; simple_byte            4     3 (average)
  8224                           ;	Chosen strategy is simple_byte
  8225  0013FC  5066               	movf	(??_btMotor+1)^0,w,c
  8226  0013FE  A4D8               	btfss	status,2,c
  8227  001400  0012               	return	
  8228                           
  8229                           ; Switch size 1, requested type "space"
  8230                           ; Number of cases is 3, Range of values is 0 to 2
  8231                           ; switch strategies available:
  8232                           ; Name         Instructions Cycles
  8233                           ; simple_byte           10     6 (average)
  8234                           ;	Chosen strategy is simple_byte
  8235  001402  5065               	movf	??_btMotor^0,w,c
  8236  001404  E0C8               	bz	l797
  8237  001406  0A01               	xorlw	1	; case 1
  8238  001408  E0C9               	bz	l7265
  8239  00140A  0A03               	xorlw	3	; case 2
  8240  00140C  E0E7               	bz	l7279
  8241  00140E  0012               	return		;funcret
  8242  001410                     __end_of_btMotor:
  8243                           	callstack 0
  8244                           
  8245 ;; *************** function _SiSendChar *****************
  8246 ;; Defined at:
  8247 ;;		line 41 in file "SIO.c"
  8248 ;; Parameters:    Size  Location     Type
  8249 ;;  myByte          1    wreg     unsigned char 
  8250 ;; Auto vars:     Size  Location     Type
  8251 ;;  myByte          1    5[COMRAM] unsigned char 
  8252 ;; Return value:  Size  Location     Type
  8253 ;;                  1    wreg      void 
  8254 ;; Registers used:
  8255 ;;		wreg
  8256 ;; Tracked objects:
  8257 ;;		On entry : 0/0
  8258 ;;		On exit  : 0/0
  8259 ;;		Unchanged: 0/0
  8260 ;; Data sizes:     COMRAM   BANK0   BANK1
  8261 ;;      Params:         0       0       0
  8262 ;;      Locals:         1       0       0
  8263 ;;      Temps:          0       0       0
  8264 ;;      Totals:         1       0       0
  8265 ;;Total ram usage:        1 bytes
  8266 ;; Hardware stack levels used: 1
  8267 ;; Hardware stack levels required when called: 2
  8268 ;; This function calls:
  8269 ;;		Nothing
  8270 ;; This function is called by:
  8271 ;;		_menuMotor
  8272 ;;		_joystickMotor
  8273 ;;		_btMotor
  8274 ;; This function uses a non-reentrant model
  8275 ;;
  8276                           
  8277                           	psect	text64
  8278  00015C                     __ptext64:
  8279                           	callstack 0
  8280  00015C                     _SiSendChar:
  8281                           	callstack 27
  8282                           
  8283                           ;incstack = 0
  8284                           ;SiSendChar@myByte stored from wreg
  8285  00015C  6E5E               	movwf	SiSendChar@myByte^0,c
  8286                           
  8287                           ;SIO.c: 42:     TXREG = myByte;
  8288  00015E  C05E  FFAD         	movff	SiSendChar@myByte,4013	;volatile
  8289  000162  0012               	return		;funcret
  8290  000164                     __end_of_SiSendChar:
  8291                           	callstack 0
  8292                           
  8293 ;; *************** function _SiIsAvailable *****************
  8294 ;; Defined at:
  8295 ;;		line 37 in file "SIO.c"
  8296 ;; Parameters:    Size  Location     Type
  8297 ;;		None
  8298 ;; Auto vars:     Size  Location     Type
  8299 ;;		None
  8300 ;; Return value:  Size  Location     Type
  8301 ;;                  1    wreg      unsigned char 
  8302 ;; Registers used:
  8303 ;;		wreg
  8304 ;; Tracked objects:
  8305 ;;		On entry : 0/0
  8306 ;;		On exit  : 0/0
  8307 ;;		Unchanged: 0/0
  8308 ;; Data sizes:     COMRAM   BANK0   BANK1
  8309 ;;      Params:         0       0       0
  8310 ;;      Locals:         0       0       0
  8311 ;;      Temps:          0       0       0
  8312 ;;      Totals:         0       0       0
  8313 ;;Total ram usage:        0 bytes
  8314 ;; Hardware stack levels used: 1
  8315 ;; Hardware stack levels required when called: 2
  8316 ;; This function calls:
  8317 ;;		Nothing
  8318 ;; This function is called by:
  8319 ;;		_menuMotor
  8320 ;;		_joystickMotor
  8321 ;;		_btMotor
  8322 ;; This function uses a non-reentrant model
  8323 ;;
  8324                           
  8325                           	psect	text65
  8326  00016A                     __ptext65:
  8327                           	callstack 0
  8328  00016A                     _SiIsAvailable:
  8329                           	callstack 27
  8330                           
  8331                           ;SIO.c: 38:     return TXSTAbits.TRMT;
  8332                           
  8333                           ;incstack = 0
  8334  00016A  B2AC               	btfsc	172,1,c	;volatile
  8335  00016C  0C01               	retlw	1
  8336  00016E  0C00               	retlw	0	;funcret
  8337  000170                     __end_of_SiIsAvailable:
  8338                           	callstack 0
  8339                           
  8340 ;; *************** function _audioMotor *****************
  8341 ;; Defined at:
  8342 ;;		line 27 in file "Audio.c"
  8343 ;; Parameters:    Size  Location     Type
  8344 ;;		None
  8345 ;; Auto vars:     Size  Location     Type
  8346 ;;		None
  8347 ;; Return value:  Size  Location     Type
  8348 ;;                  1    wreg      void 
  8349 ;; Registers used:
  8350 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8351 ;; Tracked objects:
  8352 ;;		On entry : 0/0
  8353 ;;		On exit  : 0/0
  8354 ;;		Unchanged: 0/0
  8355 ;; Data sizes:     COMRAM   BANK0   BANK1
  8356 ;;      Params:         0       0       0
  8357 ;;      Locals:         0       0       0
  8358 ;;      Temps:          3       0       0
  8359 ;;      Totals:         3       0       0
  8360 ;;Total ram usage:        3 bytes
  8361 ;; Hardware stack levels used: 1
  8362 ;; Hardware stack levels required when called: 3
  8363 ;; This function calls:
  8364 ;;		_TiGetTics
  8365 ;;		_TiResetTics
  8366 ;; This function is called by:
  8367 ;;		_main
  8368 ;; This function uses a non-reentrant model
  8369 ;;
  8370                           
  8371                           	psect	text66
  8372  001628                     __ptext66:
  8373                           	callstack 0
  8374  001628                     _audioMotor:
  8375                           	callstack 27
  8376                           
  8377                           ;Audio.c: 28:     switch(state){
  8378                           
  8379                           ;incstack = 0
  8380  001628  D030               	goto	l6165
  8381  00162A                     l6135:
  8382                           
  8383                           ;Audio.c: 33:             if (TiGetTics(periodTimer)>= (period+1)){
  8384  00162A  D848               	call	PL46	;call to abstracted procedure
  8385  00162C  EC22  F00F         	call	_TiGetTics
  8386  001630  D83C               	call	PL38	;call to abstracted procedure
  8387  001632  A0D8               	btfss	status,0,c
  8388  001634  0012               	return	
  8389                           
  8390                           ;Audio.c: 34:                 TiResetTics(periodTimer);
  8391  001636  5038               	movf	_periodTimer^0,w,c
  8392  001638  ECAB  F00F         	call	_TiResetTics
  8393                           
  8394                           ;Audio.c: 35:                 LATCbits.LATC3=1;;
  8395  00163C  868B               	bsf	139,3,c	;volatile
  8396                           
  8397                           ;Audio.c: 36:                 state = 2;
  8398  00163E  0E02               	movlw	2
  8399  001640  6E39               	movwf	_state@Audio$F967^0,c
  8400  001642  0C02               	retlw	2
  8401  001644                     l6143:
  8402                           
  8403                           ;Audio.c: 40:             if (TiGetTics(periodTimer)>= (period+1)){
  8404  001644  D83B               	call	PL46	;call to abstracted procedure
  8405  001646  EC22  F00F         	call	_TiGetTics
  8406  00164A  D82F               	call	PL38	;call to abstracted procedure
  8407  00164C  A0D8               	btfss	status,0,c
  8408  00164E  0012               	return	
  8409                           
  8410                           ;Audio.c: 41:                 TiResetTics(periodTimer);
  8411  001650  5038               	movf	_periodTimer^0,w,c
  8412  001652  ECAB  F00F         	call	_TiResetTics
  8413                           
  8414                           ;Audio.c: 42:                 LATCbits.LATC3=0;;
  8415  001656  968B               	bcf	139,3,c	;volatile
  8416                           
  8417                           ;Audio.c: 43:                 state = 3;
  8418  001658  0E03               	movlw	3
  8419  00165A  6E39               	movwf	_state@Audio$F967^0,c
  8420  00165C  0C03               	retlw	3
  8421  00165E                     l6151:
  8422                           
  8423                           ;Audio.c: 48:             state = 1;
  8424  00165E  0E01               	movlw	1
  8425  001660  6E39               	movwf	_state@Audio$F967^0,c
  8426                           
  8427                           ;Audio.c: 49:             if (TiGetTics(timerSong) >= 1200){
  8428  001662  5037               	movf	_timerSong^0,w,c
  8429  001664  EC22  F00F         	call	_TiGetTics
  8430  001668  BE5F               	btfsc	(?_TiGetTics+1)^0,7,c
  8431  00166A  0012               	return	
  8432  00166C  ECDC  F008         	call	PL30	;call to abstracted procedure
  8433  001670  A0D8               	btfss	status,0,c
  8434  001672  0012               	return	
  8435                           
  8436                           ;Audio.c: 50:                 period++;
  8437  001674  2A36               	incf	_period^0,f,c
  8438                           
  8439                           ;Audio.c: 51:                 TiResetTics(timerSong);
  8440  001676  5037               	movf	_timerSong^0,w,c
  8441  001678  ECAB  F00F         	call	_TiResetTics
  8442                           
  8443                           ;Audio.c: 52:                 if (period == 6){
  8444  00167C  0E06               	movlw	6
  8445  00167E  1836               	xorwf	_period^0,w,c
  8446  001680  A4D8               	btfss	status,2,c
  8447  001682  0012               	return	
  8448                           
  8449                           ;Audio.c: 53:                     period = 0;
  8450  001684  6A36               	clrf	_period^0,c
  8451                           
  8452                           ;Audio.c: 54:                     state = 0;
  8453  001686  6A39               	clrf	_state@Audio$F967^0,c
  8454  001688  0012               	return	
  8455  00168A                     l6165:
  8456  00168A  5039               	movf	_state@Audio$F967^0,w,c
  8457  00168C  6E65               	movwf	??_audioMotor^0,c
  8458  00168E  6A66               	clrf	(??_audioMotor+1)^0,c
  8459                           
  8460                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  8461                           ; Switch size 1, requested type "space"
  8462                           ; Number of cases is 1, Range of values is 0 to 0
  8463                           ; switch strategies available:
  8464                           ; Name         Instructions Cycles
  8465                           ; simple_byte            4     3 (average)
  8466                           ;	Chosen strategy is simple_byte
  8467  001690  5066               	movf	(??_audioMotor+1)^0,w,c
  8468  001692  A4D8               	btfss	status,2,c
  8469  001694  0012               	return	
  8470                           
  8471                           ; Switch size 1, requested type "space"
  8472                           ; Number of cases is 4, Range of values is 0 to 3
  8473                           ; switch strategies available:
  8474                           ; Name         Instructions Cycles
  8475                           ; simple_byte           13     7 (average)
  8476                           ;	Chosen strategy is simple_byte
  8477  001696  5065               	movf	??_audioMotor^0,w,c
  8478  001698  B4D8               	btfsc	status,2,c
  8479  00169A  0012               	return	
  8480  00169C  0A01               	xorlw	1	; case 1
  8481  00169E  E0C5               	bz	l6135
  8482  0016A0  0A03               	xorlw	3	; case 2
  8483  0016A2  E0D0               	bz	l6143
  8484  0016A4  0A01               	xorlw	1	; case 3
  8485  0016A6  E0DB               	bz	l6151
  8486  0016A8  0012               	return		;funcret
  8487  0016AA                     __end_of_audioMotor:
  8488                           	callstack 0
  8489  0016AA                     PL38:
  8490                           	callstack 27
  8491  0016AA  5065               	movf	??_audioMotor^0,w,c
  8492  0016AC  5C5E               	subwf	?_TiGetTics^0,w,c
  8493  0016AE  505F               	movf	(?_TiGetTics+1)^0,w,c
  8494  0016B0  0A80               	xorlw	128
  8495  0016B2  6E67               	movwf	(??_audioMotor+2)^0,c
  8496  0016B4  5066               	movf	(??_audioMotor+1)^0,w,c
  8497  0016B6  0A80               	xorlw	128
  8498  0016B8  5867               	subwfb	(??_audioMotor+2)^0,w,c
  8499  0016BA  0012               	return	
  8500  0016BC                     __end_ofPL38:
  8501                           	callstack 0
  8502  0016BC                     PL46:
  8503                           	callstack 27
  8504  0016BC  5036               	movf	_period^0,w,c
  8505  0016BE  6E65               	movwf	??_audioMotor^0,c
  8506  0016C0  6A66               	clrf	(??_audioMotor+1)^0,c
  8507  0016C2  2A65               	incf	??_audioMotor^0,f,c
  8508  0016C4  0E00               	movlw	0
  8509  0016C6  2266               	addwfc	(??_audioMotor+1)^0,f,c
  8510  0016C8  5038               	movf	_periodTimer^0,w,c
  8511  0016CA  0012               	return	
  8512  0016CC                     __end_ofPL46:
  8513                           	callstack 0
  8514                           
  8515 ;; *************** function _TiInitTimer *****************
  8516 ;; Defined at:
  8517 ;;		line 17 in file "TTimer.c"
  8518 ;; Parameters:    Size  Location     Type
  8519 ;;		None
  8520 ;; Auto vars:     Size  Location     Type
  8521 ;;		None
  8522 ;; Return value:  Size  Location     Type
  8523 ;;                  1    wreg      void 
  8524 ;; Registers used:
  8525 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  8526 ;; Tracked objects:
  8527 ;;		On entry : 0/0
  8528 ;;		On exit  : 0/0
  8529 ;;		Unchanged: 0/0
  8530 ;; Data sizes:     COMRAM   BANK0   BANK1
  8531 ;;      Params:         0       0       0
  8532 ;;      Locals:         0       0       0
  8533 ;;      Temps:          0       0       0
  8534 ;;      Totals:         0       0       0
  8535 ;;Total ram usage:        0 bytes
  8536 ;; Hardware stack levels used: 1
  8537 ;; Hardware stack levels required when called: 2
  8538 ;; This function calls:
  8539 ;;		Nothing
  8540 ;; This function is called by:
  8541 ;;		_main
  8542 ;; This function uses a non-reentrant model
  8543 ;;
  8544                           
  8545                           	psect	text67
  8546  001D76                     __ptext67:
  8547                           	callstack 0
  8548  001D76                     _TiInitTimer:
  8549                           	callstack 28
  8550                           
  8551                           ;TTimer.c: 20:     RCONbits.IPEN = 0;
  8552                           
  8553                           ;incstack = 0
  8554  001D76  9ED0               	bcf	208,7,c	;volatile
  8555                           
  8556                           ;TTimer.c: 21:     INTCONbits.GIE_GIEH = 1;
  8557  001D78  8EF2               	bsf	242,7,c	;volatile
  8558                           
  8559                           ;TTimer.c: 22:     INTCONbits.PEIE_GIEL = 1;
  8560  001D7A  8CF2               	bsf	242,6,c	;volatile
  8561                           
  8562                           ;TTimer.c: 23:     INTCONbits.TMR0IE = 1;
  8563  001D7C  8AF2               	bsf	242,5,c	;volatile
  8564                           
  8565                           ;TTimer.c: 24:     INTCONbits.TMR0IF = 0;
  8566  001D7E  94F2               	bcf	242,2,c	;volatile
  8567                           
  8568                           ;TTimer.c: 25:     T0CON = 0x08;
  8569  001D80  0E08               	movlw	8
  8570  001D82  6ED5               	movwf	213,c	;volatile
  8571                           
  8572                           ;TTimer.c: 27:     TMR0H = 0xD8;
  8573  001D84  0ED8               	movlw	216
  8574  001D86  6ED7               	movwf	215,c	;volatile
  8575                           
  8576                           ;TTimer.c: 28:     TMR0L = 0xF0;
  8577  001D88  0EF0               	movlw	240
  8578  001D8A  6ED6               	movwf	214,c	;volatile
  8579                           
  8580                           ;TTimer.c: 29:     T0CONbits.TMR0ON = 1;
  8581  001D8C  8ED5               	bsf	213,7,c	;volatile
  8582                           
  8583                           ;TTimer.c: 31:     for (counter=0;counter<25;counter++) {
  8584  001D8E  6A46               	clrf	_counter^0,c
  8585  001D90                     l4377:
  8586  001D90  0E18               	movlw	24
  8587  001D92  6446               	cpfsgt	_counter^0,c
  8588  001D94  D001               	goto	l4381
  8589  001D96  0C18               	retlw	24
  8590  001D98                     l4381:
  8591                           
  8592                           ;TTimer.c: 32:  s_Timers[counter].b_busy=0;
  8593  001D98  EC9B  F00E         	call	PL14	;call to abstracted procedure
  8594  001D9C  6ADF               	clrf	indf2,c
  8595                           
  8596                           ;TTimer.c: 33:     }
  8597  001D9E  2A46               	incf	_counter^0,f,c
  8598  001DA0  D7F7               	goto	l4377
  8599  001DA2                     __end_of_TiInitTimer:
  8600                           	callstack 0
  8601                           
  8602 ;; *************** function _SMSMotor *****************
  8603 ;; Defined at:
  8604 ;;		line 133 in file "keypad.c"
  8605 ;; Parameters:    Size  Location     Type
  8606 ;;		None
  8607 ;; Auto vars:     Size  Location     Type
  8608 ;;		None
  8609 ;; Return value:  Size  Location     Type
  8610 ;;                  1    wreg      void 
  8611 ;; Registers used:
  8612 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8613 ;; Tracked objects:
  8614 ;;		On entry : 0/0
  8615 ;;		On exit  : 0/0
  8616 ;;		Unchanged: 0/0
  8617 ;; Data sizes:     COMRAM   BANK0   BANK1
  8618 ;;      Params:         0       0       0
  8619 ;;      Locals:         0       0       0
  8620 ;;      Temps:          2       0       0
  8621 ;;      Totals:         2       0       0
  8622 ;;Total ram usage:        2 bytes
  8623 ;; Hardware stack levels used: 1
  8624 ;; Hardware stack levels required when called: 4
  8625 ;; This function calls:
  8626 ;;		_KeGetGenericValue
  8627 ;;		_TiGetTics
  8628 ;;		_TiResetTics
  8629 ;; This function is called by:
  8630 ;;		_main
  8631 ;; This function uses a non-reentrant model
  8632 ;;
  8633                           
  8634                           	psect	text68
  8635  0014CE                     __ptext68:
  8636                           	callstack 0
  8637  0014CE                     _SMSMotor:
  8638                           	callstack 26
  8639                           
  8640                           ;keypad.c: 134:     switch(stateSMS){
  8641                           
  8642                           ;incstack = 0
  8643  0014CE  D043               	goto	l6227
  8644  0014D0                     l6175:
  8645                           
  8646                           ;keypad.c: 139:             if(pressed){
  8647  0014D0  5040               	movf	_pressed^0,w,c
  8648  0014D2  E021               	bz	l177
  8649                           
  8650                           ;keypad.c: 140:                 stateSMS=1;
  8651  0014D4  0E01               	movlw	1
  8652  0014D6  6E3C               	movwf	_stateSMS^0,c
  8653                           
  8654                           ;keypad.c: 141:                 currentKey = KeGetGenericValue();
  8655  0014D8  EC8B  F00F         	call	_KeGetGenericValue	;wreg free
  8656  0014DC  6E42               	movwf	_currentKey^0,c
  8657                           
  8658                           ;keypad.c: 142:                 available = 2;
  8659  0014DE  0E02               	movlw	2
  8660  0014E0  6E3E               	movwf	_available^0,c
  8661                           
  8662                           ;keypad.c: 143:                 if (TiGetTics(timer_SMS)>=1200){
  8663  0014E2  5043               	movf	_timer_SMS^0,w,c
  8664  0014E4  EC22  F00F         	call	_TiGetTics
  8665  0014E8  BE5F               	btfsc	(?_TiGetTics+1)^0,7,c
  8666  0014EA  D008               	goto	l6191
  8667  0014EC  ECDC  F008         	call	PL30	;call to abstracted procedure
  8668  0014F0  E305               	bnc	l6191
  8669                           
  8670                           ;keypad.c: 144:                     available = 1;
  8671  0014F2  0E01               	movlw	1
  8672  0014F4  6E3E               	movwf	_available^0,c
  8673                           
  8674                           ;keypad.c: 145:                     numPresses = 0;
  8675  0014F6  6A3F               	clrf	_numPresses^0,c
  8676                           
  8677                           ;keypad.c: 146:                     previous = 0;
  8678  0014F8  6A41               	clrf	_previous^0,c
  8679                           
  8680                           ;keypad.c: 147:                 } else if(numPresses != 0 && previous != currentKey ){
  8681  0014FA  D00A               	goto	l6201
  8682  0014FC                     l6191:
  8683  0014FC  503F               	movf	_numPresses^0,w,c
  8684  0014FE  E008               	bz	l6201
  8685  001500  5042               	movf	_currentKey^0,w,c
  8686  001502  1841               	xorwf	_previous^0,w,c
  8687  001504  E005               	bz	l6201
  8688                           
  8689                           ;keypad.c: 149:                     available = 1;
  8690  001506  0E01               	movlw	1
  8691  001508  6E3E               	movwf	_available^0,c
  8692                           
  8693                           ;keypad.c: 151:                     previous = currentKey;
  8694  00150A  C042  F041         	movff	_currentKey,_previous
  8695                           
  8696                           ;keypad.c: 153:                     numPresses = 0;
  8697  00150E  6A3F               	clrf	_numPresses^0,c
  8698  001510                     l6201:
  8699                           
  8700                           ;keypad.c: 157:                 TiResetTics(timer_SMS);
  8701  001510  5043               	movf	_timer_SMS^0,w,c
  8702  001512  EFAB  F00F         	goto	_TiResetTics
  8703  001516                     l177:
  8704                           
  8705                           ;keypad.c: 160:               previous=currentKey;
  8706  001516  C042  F041         	movff	_currentKey,_previous
  8707  00151A  0012               	return	
  8708  00151C                     l6203:
  8709                           
  8710                           ;keypad.c: 172:             numPresses++;
  8711  00151C  2A3F               	incf	_numPresses^0,f,c
  8712                           
  8713                           ;keypad.c: 173:             stateSMS = 2;
  8714  00151E  0E02               	movlw	2
  8715  001520  6E3C               	movwf	_stateSMS^0,c
  8716                           
  8717                           ;keypad.c: 174:             break;
  8718  001522  0C02               	retlw	2
  8719  001524                     l6207:
  8720                           
  8721                           ;keypad.c: 177:             if (!pressed){
  8722  001524  5040               	movf	_pressed^0,w,c
  8723  001526  A4D8               	btfss	status,2,c
  8724  001528  0012               	return	
  8725                           
  8726                           ;keypad.c: 178:                 TiResetTics(timer_SMS);
  8727  00152A  5043               	movf	_timer_SMS^0,w,c
  8728  00152C  ECAB  F00F         	call	_TiResetTics
  8729                           
  8730                           ;keypad.c: 180:                 stateSMS = 0;
  8731  001530  6A3C               	clrf	_stateSMS^0,c
  8732  001532  0012               	return	
  8733  001534                     l6213:
  8734                           
  8735                           ;keypad.c: 185:             if(pressed){
  8736  001534  5040               	movf	_pressed^0,w,c
  8737  001536  B4D8               	btfsc	status,2,c
  8738  001538  0012               	return	
  8739                           
  8740                           ;keypad.c: 186:                 stateSMS = 4;
  8741  00153A  EF44  F00F         	goto	PL84	;call to abstracted procedure
  8742  00153E                     l6217:
  8743                           
  8744                           ;keypad.c: 191:             stateSMS = 5;
  8745  00153E  0E05               	movlw	5
  8746  001540  6E3C               	movwf	_stateSMS^0,c
  8747                           
  8748                           ;keypad.c: 192:             break;
  8749  001542  0C05               	retlw	5
  8750  001544                     l6219:
  8751                           
  8752                           ;keypad.c: 194:             if (!pressed){
  8753  001544  5040               	movf	_pressed^0,w,c
  8754  001546  A4D8               	btfss	status,2,c
  8755  001548  0012               	return	
  8756                           
  8757                           ;keypad.c: 195:                 TiResetTics(timer_SMS);
  8758  00154A  5043               	movf	_timer_SMS^0,w,c
  8759  00154C  ECAB  F00F         	call	_TiResetTics
  8760                           
  8761                           ;keypad.c: 197:                 stateSMS = 3;
  8762  001550  0E03               	movlw	3
  8763  001552  6E3C               	movwf	_stateSMS^0,c
  8764  001554  0C03               	retlw	3
  8765  001556                     l6227:
  8766  001556  503C               	movf	_stateSMS^0,w,c
  8767  001558  6E65               	movwf	??_SMSMotor^0,c
  8768  00155A  6A66               	clrf	(??_SMSMotor+1)^0,c
  8769                           
  8770                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  8771                           ; Switch size 1, requested type "space"
  8772                           ; Number of cases is 1, Range of values is 0 to 0
  8773                           ; switch strategies available:
  8774                           ; Name         Instructions Cycles
  8775                           ; simple_byte            4     3 (average)
  8776                           ;	Chosen strategy is simple_byte
  8777  00155C  5066               	movf	(??_SMSMotor+1)^0,w,c
  8778  00155E  A4D8               	btfss	status,2,c
  8779  001560  0012               	return	
  8780                           
  8781                           ; Switch size 1, requested type "space"
  8782                           ; Number of cases is 6, Range of values is 0 to 5
  8783                           ; switch strategies available:
  8784                           ; Name         Instructions Cycles
  8785                           ; simple_byte           19    10 (average)
  8786                           ;	Chosen strategy is simple_byte
  8787  001562  5065               	movf	??_SMSMotor^0,w,c
  8788  001564  E0B5               	bz	l6175
  8789  001566  0A01               	xorlw	1	; case 1
  8790  001568  E0D9               	bz	l6203
  8791  00156A  0A03               	xorlw	3	; case 2
  8792  00156C  E0DB               	bz	l6207
  8793  00156E  0A01               	xorlw	1	; case 3
  8794  001570  E0E1               	bz	l6213
  8795  001572  0A07               	xorlw	7	; case 4
  8796  001574  E0E4               	bz	l6217
  8797  001576  0A01               	xorlw	1	; case 5
  8798  001578  E0E5               	bz	l6219
  8799  00157A  0012               	return		;funcret
  8800  00157C                     __end_of_SMSMotor:
  8801                           	callstack 0
  8802                           
  8803 ;; *************** function _KeGetGenericValue *****************
  8804 ;; Defined at:
  8805 ;;		line 224 in file "keypad.c"
  8806 ;; Parameters:    Size  Location     Type
  8807 ;;		None
  8808 ;; Auto vars:     Size  Location     Type
  8809 ;;		None
  8810 ;; Return value:  Size  Location     Type
  8811 ;;                  1    wreg      unsigned char 
  8812 ;; Registers used:
  8813 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8814 ;; Tracked objects:
  8815 ;;		On entry : 0/0
  8816 ;;		On exit  : 0/0
  8817 ;;		Unchanged: 0/0
  8818 ;; Data sizes:     COMRAM   BANK0   BANK1
  8819 ;;      Params:         0       0       0
  8820 ;;      Locals:         0       0       0
  8821 ;;      Temps:          2       0       0
  8822 ;;      Totals:         2       0       0
  8823 ;;Total ram usage:        2 bytes
  8824 ;; Hardware stack levels used: 1
  8825 ;; Hardware stack levels required when called: 3
  8826 ;; This function calls:
  8827 ;;		_getColumn
  8828 ;; This function is called by:
  8829 ;;		_SMSMotor
  8830 ;;		_KeGetCharValue
  8831 ;;		_menuMotor
  8832 ;;		_timeMotor
  8833 ;; This function uses a non-reentrant model
  8834 ;;
  8835                           
  8836                           	psect	text69
  8837  001F16                     __ptext69:
  8838                           	callstack 0
  8839  001F16                     _KeGetGenericValue:
  8840                           	callstack 26
  8841                           
  8842                           ;keypad.c: 225:     return TABLE[(row*3)+getColumn()];
  8843                           
  8844                           ;incstack = 0
  8845  001F16  EC85  F000         	call	_getColumn	;wreg free
  8846  001F1A  6E5E               	movwf	??_KeGetGenericValue^0,c
  8847  001F1C  5045               	movf	_row^0,w,c
  8848  001F1E  0D03               	mullw	3
  8849  001F20  50F3               	movf	243,w,c
  8850  001F22  0F01               	addlw	low _TABLE
  8851  001F24  245E               	addwf	??_KeGetGenericValue^0,w,c
  8852  001F26  6E5F               	movwf	(??_KeGetGenericValue+1)^0,c
  8853  001F28  C05F  FFF6         	movff	??_KeGetGenericValue+1,tblptrl
  8854  001F2C                     	if	1	;There is more than 1 active tblptr byte
  8855  001F2C  0E02               	movlw	high __smallconst
  8856  001F2E  6EF7               	movwf	tblptrh,c
  8857  001F30                     	endif
  8858  001F30                     	if	0	;tblptru may be non-zero
  8859  001F30                     	endif
  8860  001F30                     	if	0	;tblptru may be non-zero
  8861  001F30                     	endif
  8862  001F30  0008               	tblrd		*
  8863  001F32  50F5               	movf	tablat,w,c
  8864  001F34  0012               	return		;funcret
  8865  001F36                     __end_of_KeGetGenericValue:
  8866                           	callstack 0
  8867                           
  8868 ;; *************** function _getColumn *****************
  8869 ;; Defined at:
  8870 ;;		line 211 in file "keypad.c"
  8871 ;; Parameters:    Size  Location     Type
  8872 ;;		None
  8873 ;; Auto vars:     Size  Location     Type
  8874 ;;		None
  8875 ;; Return value:  Size  Location     Type
  8876 ;;                  1    wreg      unsigned char 
  8877 ;; Registers used:
  8878 ;;		wreg
  8879 ;; Tracked objects:
  8880 ;;		On entry : 0/0
  8881 ;;		On exit  : 0/0
  8882 ;;		Unchanged: 0/0
  8883 ;; Data sizes:     COMRAM   BANK0   BANK1
  8884 ;;      Params:         0       0       0
  8885 ;;      Locals:         0       0       0
  8886 ;;      Temps:          0       0       0
  8887 ;;      Totals:         0       0       0
  8888 ;;Total ram usage:        0 bytes
  8889 ;; Hardware stack levels used: 1
  8890 ;; Hardware stack levels required when called: 2
  8891 ;; This function calls:
  8892 ;;		Nothing
  8893 ;; This function is called by:
  8894 ;;		_KeGetGenericValue
  8895 ;; This function uses a non-reentrant model
  8896 ;;
  8897                           
  8898                           	psect	text70
  8899  00010A                     __ptext70:
  8900                           	callstack 0
  8901  00010A                     _getColumn:
  8902                           	callstack 26
  8903                           
  8904                           ;keypad.c: 212:     if (!PORTBbits.RB0) return 0;
  8905                           
  8906                           ;incstack = 0
  8907  00010A  A081               	btfss	129,0,c	;volatile
  8908  00010C  0C00               	retlw	0
  8909                           
  8910                           ;keypad.c: 213:     if (!PORTBbits.RB1) return 1;
  8911  00010E  A281               	btfss	129,1,c	;volatile
  8912  000110  0C01               	retlw	1
  8913                           
  8914                           ;keypad.c: 214:     return 2;
  8915  000112  0C02               	retlw	2	;funcret
  8916  000114                     __end_of_getColumn:
  8917                           	callstack 0
  8918                           
  8919 ;; *************** function _LcInit *****************
  8920 ;; Defined at:
  8921 ;;		line 60 in file "LcTLCD.c"
  8922 ;; Parameters:    Size  Location     Type
  8923 ;;  rows            1    wreg     unsigned char 
  8924 ;;  columns         1   17[COMRAM] unsigned char 
  8925 ;; Auto vars:     Size  Location     Type
  8926 ;;  rows            1   18[COMRAM] unsigned char 
  8927 ;;  i               1   19[COMRAM] unsigned char 
  8928 ;; Return value:  Size  Location     Type
  8929 ;;                  1    wreg      void 
  8930 ;; Registers used:
  8931 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8932 ;; Tracked objects:
  8933 ;;		On entry : 0/0
  8934 ;;		On exit  : 0/0
  8935 ;;		Unchanged: 0/0
  8936 ;; Data sizes:     COMRAM   BANK0   BANK1
  8937 ;;      Params:         1       0       0
  8938 ;;      Locals:         2       0       0
  8939 ;;      Temps:          0       0       0
  8940 ;;      Totals:         3       0       0
  8941 ;;Total ram usage:        3 bytes
  8942 ;; Hardware stack levels used: 1
  8943 ;; Hardware stack levels required when called: 4
  8944 ;; This function calls:
  8945 ;;		_CantaIR
  8946 ;;		_EscriuPrimeraOrdre
  8947 ;;		_Espera
  8948 ;;		_TiGetTimer
  8949 ;;		_WaitForBusy
  8950 ;; This function is called by:
  8951 ;;		_main
  8952 ;; This function uses a non-reentrant model
  8953 ;;
  8954                           
  8955                           	psect	text71
  8956  00157C                     __ptext71:
  8957                           	callstack 0
  8958  00157C                     _LcInit:
  8959                           	callstack 26
  8960                           
  8961                           ;LcTLCD.c: 68:  Rows = rows; Columns = columns;
  8962                           
  8963                           ;incstack = 0
  8964  00157C  EC8C  F00E         	call	_TiGetTimer	;wreg free
  8965  001580  6E0D               	movwf	_Timer^0,c
  8966  001582  6A0E               	clrf	(_Timer+1)^0,c
  8967                           
  8968                           ;LcTLCD.c: 69:  RowAct = ColumnAct = 0;
  8969  001584  6A3A               	clrf	_ColumnAct^0,c
  8970  001586  6A3B               	clrf	_RowAct^0,c
  8971                           
  8972                           ;LcTLCD.c: 70:  (TRISDbits.TRISD4 = TRISDbits.TRISD5 = TRISDbits.TRISD6 = 0);
  8973  001588  9C95               	bcf	149,6,c	;volatile
  8974  00158A  9A95               	bcf	149,5,c	;volatile
  8975  00158C  9895               	bcf	149,4,c	;volatile
  8976                           
  8977                           ;LcTLCD.c: 71:  for (i = 0; i < 2; i++) {
  8978  00158E  6A6C               	clrf	LcInit@i^0,c
  8979  001590                     l6101:
  8980                           
  8981                           ;LcTLCD.c: 72:   Espera(Timer, 100);
  8982  001590  D845               	call	PL16	;call to abstracted procedure
  8983  001592  0E64               	movlw	100
  8984  001594  6E67               	movwf	Espera@ms^0,c
  8985  001596  EC9B  F00F         	call	_Espera	;wreg free
  8986                           
  8987                           ;LcTLCD.c: 75:   EscriuPrimeraOrdre(0x02 | 0x01);
  8988  00159A  0E03               	movlw	3
  8989  00159C  ECF9  F00B         	call	_EscriuPrimeraOrdre
  8990                           
  8991                           ;LcTLCD.c: 76:   Espera(Timer, 5);
  8992  0015A0  D83D               	call	PL16	;call to abstracted procedure
  8993  0015A2  0E05               	movlw	5
  8994  0015A4  6E67               	movwf	Espera@ms^0,c
  8995  0015A6  EC9B  F00F         	call	_Espera	;wreg free
  8996                           
  8997                           ;LcTLCD.c: 77:   EscriuPrimeraOrdre(0x02 | 0x01);
  8998  0015AA  0E03               	movlw	3
  8999  0015AC  ECF9  F00B         	call	_EscriuPrimeraOrdre
  9000                           
  9001                           ;LcTLCD.c: 78:   Espera(Timer, 1);
  9002  0015B0  D835               	call	PL16	;call to abstracted procedure
  9003  0015B2  0E01               	movlw	1
  9004  0015B4  6E67               	movwf	Espera@ms^0,c
  9005  0015B6  EC9B  F00F         	call	_Espera	;wreg free
  9006                           
  9007                           ;LcTLCD.c: 79:   EscriuPrimeraOrdre(0x02 | 0x01);
  9008  0015BA  0E03               	movlw	3
  9009  0015BC  ECF9  F00B         	call	_EscriuPrimeraOrdre
  9010                           
  9011                           ;LcTLCD.c: 80:   Espera(Timer, 1);
  9012  0015C0  D82D               	call	PL16	;call to abstracted procedure
  9013  0015C2  0E01               	movlw	1
  9014  0015C4  6E67               	movwf	Espera@ms^0,c
  9015  0015C6  EC9B  F00F         	call	_Espera	;wreg free
  9016                           
  9017                           ;LcTLCD.c: 83:   EscriuPrimeraOrdre(0x02);
  9018  0015CA  0E02               	movlw	2
  9019  0015CC  ECF9  F00B         	call	_EscriuPrimeraOrdre
  9020                           
  9021                           ;LcTLCD.c: 84:   Espera(Timer, 1);
  9022  0015D0  D825               	call	PL16	;call to abstracted procedure
  9023  0015D2  0E01               	movlw	1
  9024  0015D4  6E67               	movwf	Espera@ms^0,c
  9025  0015D6  EC9B  F00F         	call	_Espera	;wreg free
  9026                           
  9027                           ;LcTLCD.c: 85:   CantaIR(0x20 | 0x08);
  9028  0015DA  0E28               	movlw	40
  9029  0015DC  ECBB  F00F         	call	_CantaIR
  9030                           
  9031                           ;LcTLCD.c: 88:   WaitForBusy(); CantaIR(0x08);
  9032  0015E0  EC03  F00E         	call	_WaitForBusy	;wreg free
  9033  0015E4  0E08               	movlw	8
  9034  0015E6  ECBB  F00F         	call	_CantaIR
  9035                           
  9036                           ;LcTLCD.c: 89:   WaitForBusy(); CantaIR(0x01);
  9037  0015EA  EC03  F00E         	call	_WaitForBusy	;wreg free
  9038  0015EE  0E01               	movlw	1
  9039  0015F0  ECBB  F00F         	call	_CantaIR
  9040                           
  9041                           ;LcTLCD.c: 90:   Espera(Timer,3);
  9042  0015F4  D813               	call	PL16	;call to abstracted procedure
  9043  0015F6  0E03               	movlw	3
  9044  0015F8  6E67               	movwf	Espera@ms^0,c
  9045  0015FA  EC9B  F00F         	call	_Espera	;wreg free
  9046                           
  9047                           ;LcTLCD.c: 91:   WaitForBusy(); CantaIR(0x04 | 0x02);
  9048  0015FE  EC03  F00E         	call	_WaitForBusy	;wreg free
  9049  001602  0E06               	movlw	6
  9050  001604  ECBB  F00F         	call	_CantaIR
  9051                           
  9052                           ;LcTLCD.c: 92:   WaitForBusy(); CantaIR(0x08 | 0x04 | 0x02 | 0x01);
  9053  001608  EC03  F00E         	call	_WaitForBusy	;wreg free
  9054  00160C  0E0F               	movlw	15
  9055  00160E  ECBB  F00F         	call	_CantaIR
  9056                           
  9057                           ;LcTLCD.c: 93:  }
  9058  001612  2A6C               	incf	LcInit@i^0,f,c
  9059  001614  0E01               	movlw	1
  9060  001616  646C               	cpfsgt	LcInit@i^0,c
  9061  001618  D7BB               	goto	l6101
  9062  00161A  0C01               	retlw	1
  9063  00161C                     __end_of_LcInit:
  9064                           	callstack 0
  9065  00161C                     PL16:
  9066                           	callstack 26
  9067  00161C  C00D  F065         	movff	_Timer,Espera@Timer
  9068  001620  C00E  F066         	movff	_Timer+1,Espera@Timer+1
  9069  001624  6A68               	clrf	(Espera@ms+1)^0,c
  9070  001626  0012               	return	
  9071  001628                     __end_ofPL16:
  9072                           	callstack 0
  9073                           
  9074 ;; *************** function _WaitForBusy *****************
  9075 ;; Defined at:
  9076 ;;		line 260 in file "LcTLCD.c"
  9077 ;; Parameters:    Size  Location     Type
  9078 ;;		None
  9079 ;; Auto vars:     Size  Location     Type
  9080 ;;  Busy            1   12[COMRAM] unsigned char 
  9081 ;; Return value:  Size  Location     Type
  9082 ;;                  1    wreg      void 
  9083 ;; Registers used:
  9084 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9085 ;; Tracked objects:
  9086 ;;		On entry : 0/0
  9087 ;;		On exit  : 0/0
  9088 ;;		Unchanged: 0/0
  9089 ;; Data sizes:     COMRAM   BANK0   BANK1
  9090 ;;      Params:         0       0       0
  9091 ;;      Locals:         1       0       0
  9092 ;;      Temps:          0       0       0
  9093 ;;      Totals:         1       0       0
  9094 ;;Total ram usage:        1 bytes
  9095 ;; Hardware stack levels used: 1
  9096 ;; Hardware stack levels required when called: 3
  9097 ;; This function calls:
  9098 ;;		_TiGetTics
  9099 ;;		_TiResetTics
  9100 ;; This function is called by:
  9101 ;;		_LcInit
  9102 ;;		_LcClear
  9103 ;;		_LcCursorOn
  9104 ;;		_LcCursorOff
  9105 ;;		_LcGotoXY
  9106 ;;		_LcPutChar
  9107 ;; This function uses a non-reentrant model
  9108 ;;
  9109                           
  9110                           	psect	text72
  9111  001C06                     __ptext72:
  9112                           	callstack 0
  9113  001C06                     _WaitForBusy:
  9114                           	callstack 24
  9115                           
  9116                           ;LcTLCD.c: 261:  (TRISDbits.TRISD0 = TRISDbits.TRISD1 = TRISDbits.TRISD2 = TRISDbits.TRI
      +                          SD3 = 1);
  9117                           
  9118                           ;incstack = 0
  9119  001C06  8695               	bsf	149,3,c	;volatile
  9120  001C08  8495               	bsf	149,2,c	;volatile
  9121  001C0A  8295               	bsf	149,1,c	;volatile
  9122  001C0C  8095               	bsf	149,0,c	;volatile
  9123                           
  9124                           ;LcTLCD.c: 262:  (LATDbits.LATD4 = 0);
  9125  001C0E  988C               	bcf	140,4,c	;volatile
  9126                           
  9127                           ;LcTLCD.c: 263:  (LATDbits.LATD5 = 1);
  9128  001C10  8A8C               	bsf	140,5,c	;volatile
  9129                           
  9130                           ;LcTLCD.c: 264:  TiResetTics(Timer);
  9131  001C12  500D               	movf	_Timer^0,w,c
  9132  001C14  ECAB  F00F         	call	_TiResetTics
  9133  001C18                     l5783:
  9134                           
  9135                           ;LcTLCD.c: 266:   (LATDbits.LATD6 = 1);(LATDbits.LATD6 = 1);
  9136  001C18  8C8C               	bsf	140,6,c	;volatile
  9137  001C1A  8C8C               	bsf	140,6,c	;volatile
  9138                           
  9139                           ;LcTLCD.c: 267:   Busy = (PORTDbits.RD3);
  9140  001C1C  0E00               	movlw	0
  9141  001C1E  B683               	btfsc	131,3,c	;volatile
  9142  001C20  0E01               	movlw	1
  9143  001C22  6E65               	movwf	WaitForBusy@Busy^0,c
  9144                           
  9145                           ;LcTLCD.c: 268:   (LATDbits.LATD6 = 0);
  9146  001C24  9C8C               	bcf	140,6,c	;volatile
  9147                           
  9148                           ;LcTLCD.c: 269:   (LATDbits.LATD6 = 0);
  9149  001C26  9C8C               	bcf	140,6,c	;volatile
  9150                           
  9151                           ;LcTLCD.c: 270:   (LATDbits.LATD6 = 1);(LATDbits.LATD6 = 1);
  9152  001C28  8C8C               	bsf	140,6,c	;volatile
  9153  001C2A  8C8C               	bsf	140,6,c	;volatile
  9154                           
  9155                           ;LcTLCD.c: 272:   (LATDbits.LATD6 = 0);
  9156  001C2C  9C8C               	bcf	140,6,c	;volatile
  9157                           
  9158                           ;LcTLCD.c: 273:   (LATDbits.LATD6 = 0);
  9159  001C2E  9C8C               	bcf	140,6,c	;volatile
  9160                           
  9161                           ;LcTLCD.c: 274:   if (TiGetTics(Timer)) break;
  9162  001C30  500D               	movf	_Timer^0,w,c
  9163  001C32  EC22  F00F         	call	_TiGetTics
  9164  001C36  505E               	movf	?_TiGetTics^0,w,c
  9165  001C38  105F               	iorwf	(?_TiGetTics+1)^0,w,c
  9166  001C3A  E001               	bz	l5805
  9167  001C3C  0012               	return	
  9168  001C3E                     l5805:
  9169                           
  9170                           ;LcTLCD.c: 275:  } while(Busy);
  9171  001C3E  5065               	movf	WaitForBusy@Busy^0,w,c
  9172  001C40  E1EB               	bnz	l5783
  9173  001C42  0012               	return		;funcret
  9174  001C44                     __end_of_WaitForBusy:
  9175                           	callstack 0
  9176                           
  9177 ;; *************** function _TiGetTimer *****************
  9178 ;; Defined at:
  9179 ;;		line 74 in file "TTimer.c"
  9180 ;; Parameters:    Size  Location     Type
  9181 ;;		None
  9182 ;; Auto vars:     Size  Location     Type
  9183 ;;		None
  9184 ;; Return value:  Size  Location     Type
  9185 ;;                  1    wreg      unsigned char 
  9186 ;; Registers used:
  9187 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  9188 ;; Tracked objects:
  9189 ;;		On entry : 0/0
  9190 ;;		On exit  : 0/0
  9191 ;;		Unchanged: 0/0
  9192 ;; Data sizes:     COMRAM   BANK0   BANK1
  9193 ;;      Params:         0       0       0
  9194 ;;      Locals:         0       0       0
  9195 ;;      Temps:          1       0       0
  9196 ;;      Totals:         1       0       0
  9197 ;;Total ram usage:        1 bytes
  9198 ;; Hardware stack levels used: 1
  9199 ;; Hardware stack levels required when called: 2
  9200 ;; This function calls:
  9201 ;;		Nothing
  9202 ;; This function is called by:
  9203 ;;		_initKeypad
  9204 ;;		_LcInit
  9205 ;;		_initAudio
  9206 ;;		_initMenu
  9207 ;;		_initSIO
  9208 ;;		_initTime
  9209 ;; This function uses a non-reentrant model
  9210 ;;
  9211                           
  9212                           	psect	text73
  9213  001D18                     __ptext73:
  9214                           	callstack 0
  9215  001D18                     _TiGetTimer:
  9216                           	callstack 27
  9217                           
  9218                           ;TTimer.c: 78:     counter=0;
  9219                           
  9220                           ;incstack = 0
  9221  001D18  6A46               	clrf	_counter^0,c
  9222                           
  9223                           ;TTimer.c: 79:     while (s_Timers[counter].b_busy==1) {
  9224  001D1A  D005               	goto	l4085
  9225  001D1C                     l4077:
  9226                           
  9227                           ;TTimer.c: 80:         counter++;
  9228  001D1C  2A46               	incf	_counter^0,f,c
  9229                           
  9230                           ;TTimer.c: 81:  if (counter == 25) return -1;
  9231  001D1E  0E19               	movlw	25
  9232  001D20  1846               	xorwf	_counter^0,w,c
  9233  001D22  E101               	bnz	l4085
  9234  001D24  0CFF               	retlw	255
  9235  001D26                     l4085:
  9236                           
  9237                           ;TTimer.c: 79:     while (s_Timers[counter].b_busy==1) {
  9238  001D26  D807               	call	PL14	;call to abstracted procedure
  9239  001D28  04DE               	decf	postinc2,w,c
  9240  001D2A  E0F8               	bz	l4077
  9241                           
  9242                           ;TTimer.c: 83:     s_Timers[counter].b_busy=1;
  9243  001D2C  D804               	call	PL14	;call to abstracted procedure
  9244  001D2E  0E01               	movlw	1
  9245  001D30  6EDF               	movwf	indf2,c
  9246                           
  9247                           ;TTimer.c: 84:     return (counter);
  9248  001D32  5046               	movf	_counter^0,w,c
  9249  001D34  0012               	return		;funcret
  9250  001D36                     __end_of_TiGetTimer:
  9251                           	callstack 0
  9252  001D36                     PL14:
  9253                           	callstack 28
  9254  001D36  5046               	movf	_counter^0,w,c
  9255  001D38  0D03               	mullw	3
  9256  001D3A  0E92               	movlw	low (_s_Timers+2)
  9257  001D3C  24F3               	addwf	243,w,c
  9258  001D3E  6ED9               	movwf	fsr2l,c
  9259  001D40  0E01               	movlw	high (_s_Timers+2)
  9260  001D42  20F4               	addwfc	prodh,w,c
  9261  001D44  6EDA               	movwf	fsr2h,c
  9262  001D46  0012               	return	
  9263  001D48                     __end_ofPL14:
  9264                           	callstack 0
  9265                           
  9266 ;; *************** function _Espera *****************
  9267 ;; Defined at:
  9268 ;;		line 209 in file "LcTLCD.c"
  9269 ;; Parameters:    Size  Location     Type
  9270 ;;  Timer           2   12[COMRAM] int 
  9271 ;;  ms              2   14[COMRAM] int 
  9272 ;; Auto vars:     Size  Location     Type
  9273 ;;		None
  9274 ;; Return value:  Size  Location     Type
  9275 ;;                  1    wreg      void 
  9276 ;; Registers used:
  9277 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9278 ;; Tracked objects:
  9279 ;;		On entry : 0/0
  9280 ;;		On exit  : 0/0
  9281 ;;		Unchanged: 0/0
  9282 ;; Data sizes:     COMRAM   BANK0   BANK1
  9283 ;;      Params:         4       0       0
  9284 ;;      Locals:         0       0       0
  9285 ;;      Temps:          1       0       0
  9286 ;;      Totals:         5       0       0
  9287 ;;Total ram usage:        5 bytes
  9288 ;; Hardware stack levels used: 1
  9289 ;; Hardware stack levels required when called: 3
  9290 ;; This function calls:
  9291 ;;		_TiGetTics
  9292 ;;		_TiResetTics
  9293 ;; This function is called by:
  9294 ;;		_LcInit
  9295 ;;		_LcClear
  9296 ;; This function uses a non-reentrant model
  9297 ;;
  9298                           
  9299                           	psect	text74
  9300  001F36                     __ptext74:
  9301                           	callstack 0
  9302  001F36                     _Espera:
  9303                           	callstack 24
  9304                           
  9305                           ;LcTLCD.c: 210:  TiResetTics(Timer);
  9306                           
  9307                           ;incstack = 0
  9308  001F36  5065               	movf	Espera@Timer^0,w,c
  9309  001F38  ECAB  F00F         	call	_TiResetTics
  9310  001F3C                     l5809:
  9311  001F3C  5065               	movf	Espera@Timer^0,w,c
  9312  001F3E  EC22  F00F         	call	_TiGetTics
  9313  001F42  5067               	movf	Espera@ms^0,w,c
  9314  001F44  5C5E               	subwf	?_TiGetTics^0,w,c
  9315  001F46  505F               	movf	(?_TiGetTics+1)^0,w,c
  9316  001F48  0A80               	xorlw	128
  9317  001F4A  6E69               	movwf	??_Espera^0,c
  9318  001F4C  5068               	movf	(Espera@ms+1)^0,w,c
  9319  001F4E  0A80               	xorlw	128
  9320  001F50  5869               	subwfb	??_Espera^0,w,c
  9321  001F52  E3F4               	bnc	l5809
  9322  001F54  0012               	return		;funcret
  9323  001F56                     __end_of_Espera:
  9324                           	callstack 0
  9325                           
  9326 ;; *************** function _EscriuPrimeraOrdre *****************
  9327 ;; Defined at:
  9328 ;;		line 278 in file "LcTLCD.c"
  9329 ;; Parameters:    Size  Location     Type
  9330 ;;  ordre           1    wreg     unsigned char 
  9331 ;; Auto vars:     Size  Location     Type
  9332 ;;  ordre           1    6[COMRAM] unsigned char 
  9333 ;; Return value:  Size  Location     Type
  9334 ;;                  1    wreg      void 
  9335 ;; Registers used:
  9336 ;;		wreg, status,2, status,0
  9337 ;; Tracked objects:
  9338 ;;		On entry : 0/0
  9339 ;;		On exit  : 0/0
  9340 ;;		Unchanged: 0/0
  9341 ;; Data sizes:     COMRAM   BANK0   BANK1
  9342 ;;      Params:         0       0       0
  9343 ;;      Locals:         1       0       0
  9344 ;;      Temps:          1       0       0
  9345 ;;      Totals:         2       0       0
  9346 ;;Total ram usage:        2 bytes
  9347 ;; Hardware stack levels used: 1
  9348 ;; Hardware stack levels required when called: 2
  9349 ;; This function calls:
  9350 ;;		Nothing
  9351 ;; This function is called by:
  9352 ;;		_LcInit
  9353 ;; This function uses a non-reentrant model
  9354 ;;
  9355                           
  9356                           	psect	text75
  9357  0017F2                     __ptext75:
  9358                           	callstack 0
  9359  0017F2                     _EscriuPrimeraOrdre:
  9360                           	callstack 27
  9361                           
  9362                           ;incstack = 0
  9363                           ;EscriuPrimeraOrdre@ordre stored from wreg
  9364  0017F2  6E5F               	movwf	EscriuPrimeraOrdre@ordre^0,c
  9365                           
  9366                           ;LcTLCD.c: 280:  (TRISDbits.TRISD0 = TRISDbits.TRISD1 = TRISDbits.TRISD2 = TRISDbits.TRI
      +                          SD3 = 0); (LATDbits.LATD4 = 0); (LATDbits.LATD5 = 0);
  9367  0017F4  9695               	bcf	149,3,c	;volatile
  9368                           
  9369                           ;LcTLCD.c: 281:  (LATDbits.LATD6 = 1); (LATDbits.LATD6 = 1);
  9370  0017F6  D82F               	call	PL56	;call to abstracted procedure
  9371  0017F8  8C8C               	bsf	140,6,c	;volatile
  9372                           
  9373                           ;LcTLCD.c: 282:   (LATDbits.LATD3 = (ordre & 0x08 ? 1 : 0));
  9374  0017FA  A65F               	btfss	EscriuPrimeraOrdre@ordre^0,3,c
  9375  0017FC  D003               	goto	u450
  9376  0017FE  6A5E               	clrf	??_EscriuPrimeraOrdre^0,c
  9377  001800  2A5E               	incf	??_EscriuPrimeraOrdre^0,f,c
  9378  001802  D001               	goto	u468
  9379  001804                     u450:
  9380  001804  6A5E               	clrf	??_EscriuPrimeraOrdre^0,c
  9381  001806                     u468:
  9382  001806  465E               	rlncf	??_EscriuPrimeraOrdre^0,f,c
  9383  001808  D82D               	call	PL76	;call to abstracted procedure
  9384  00180A  0BF7               	andlw	-9
  9385  00180C  185E               	xorwf	??_EscriuPrimeraOrdre^0,w,c
  9386  00180E  6E8C               	movwf	140,c	;volatile
  9387                           
  9388                           ;LcTLCD.c: 283:   (LATDbits.LATD2 = (ordre & 0x04 ? 1 : 0));
  9389  001810  A45F               	btfss	EscriuPrimeraOrdre@ordre^0,2,c
  9390  001812  D003               	goto	u470
  9391  001814  6A5E               	clrf	??_EscriuPrimeraOrdre^0,c
  9392  001816  2A5E               	incf	??_EscriuPrimeraOrdre^0,f,c
  9393  001818  D001               	goto	u488
  9394  00181A                     u470:
  9395  00181A  6A5E               	clrf	??_EscriuPrimeraOrdre^0,c
  9396  00181C                     u488:
  9397  00181C  D823               	call	PL76	;call to abstracted procedure
  9398  00181E  0BFB               	andlw	-5
  9399  001820  185E               	xorwf	??_EscriuPrimeraOrdre^0,w,c
  9400  001822  6E8C               	movwf	140,c	;volatile
  9401                           
  9402                           ;LcTLCD.c: 284:   (LATDbits.LATD1 = (ordre & 0x02 ? 1 : 0));
  9403  001824  A25F               	btfss	EscriuPrimeraOrdre@ordre^0,1,c
  9404  001826  D003               	goto	u490
  9405  001828  6A5E               	clrf	??_EscriuPrimeraOrdre^0,c
  9406  00182A  2A5E               	incf	??_EscriuPrimeraOrdre^0,f,c
  9407  00182C  D001               	goto	u508
  9408  00182E                     u490:
  9409  00182E  6A5E               	clrf	??_EscriuPrimeraOrdre^0,c
  9410  001830                     u508:
  9411  001830  465E               	rlncf	??_EscriuPrimeraOrdre^0,f,c
  9412  001832  508C               	movf	140,w,c	;volatile
  9413  001834  185E               	xorwf	??_EscriuPrimeraOrdre^0,w,c
  9414  001836  0BFD               	andlw	-3
  9415  001838  185E               	xorwf	??_EscriuPrimeraOrdre^0,w,c
  9416  00183A  6E8C               	movwf	140,c	;volatile
  9417                           
  9418                           ;LcTLCD.c: 285:   (LATDbits.LATD0 = (ordre & 0x01 ? 1 : 0));
  9419  00183C  A05F               	btfss	EscriuPrimeraOrdre@ordre^0,0,c
  9420  00183E  D003               	goto	u510
  9421  001840  6A5E               	clrf	??_EscriuPrimeraOrdre^0,c
  9422  001842  2A5E               	incf	??_EscriuPrimeraOrdre^0,f,c
  9423  001844  D001               	goto	u528
  9424  001846                     u510:
  9425  001846  6A5E               	clrf	??_EscriuPrimeraOrdre^0,c
  9426  001848                     u528:
  9427  001848  508C               	movf	140,w,c	;volatile
  9428  00184A  185E               	xorwf	??_EscriuPrimeraOrdre^0,w,c
  9429  00184C  0BFE               	andlw	-2
  9430  00184E  185E               	xorwf	??_EscriuPrimeraOrdre^0,w,c
  9431  001850  6E8C               	movwf	140,c	;volatile
  9432                           
  9433                           ;LcTLCD.c: 286:  (LATDbits.LATD6 = 0);
  9434  001852  9C8C               	bcf	140,6,c	;volatile
  9435  001854  0012               	return		;funcret
  9436  001856                     __end_of_EscriuPrimeraOrdre:
  9437                           	callstack 0
  9438  001856                     PL56:
  9439                           	callstack 23
  9440  001856  9495               	bcf	149,2,c	;volatile
  9441  001858  9295               	bcf	149,1,c	;volatile
  9442  00185A  9095               	bcf	149,0,c	;volatile
  9443  00185C  988C               	bcf	140,4,c	;volatile
  9444  00185E  9A8C               	bcf	140,5,c	;volatile
  9445  001860  8C8C               	bsf	140,6,c	;volatile
  9446  001862  0012               	return	
  9447  001864                     __end_ofPL56:
  9448                           	callstack 0
  9449  001864                     PL76:
  9450                           	callstack 27
  9451  001864  465E               	rlncf	??_EscriuPrimeraOrdre^0,f,c
  9452  001866  465E               	rlncf	??_EscriuPrimeraOrdre^0,f,c
  9453  001868  508C               	movf	140,w,c	;volatile
  9454  00186A  185E               	xorwf	??_EscriuPrimeraOrdre^0,w,c
  9455  00186C  0012               	return	
  9456  00186E                     __end_ofPL76:
  9457                           	callstack 0
  9458                           
  9459 ;; *************** function _CantaIR *****************
  9460 ;; Defined at:
  9461 ;;		line 228 in file "LcTLCD.c"
  9462 ;; Parameters:    Size  Location     Type
  9463 ;;  IR              1    wreg     unsigned char 
  9464 ;; Auto vars:     Size  Location     Type
  9465 ;;  IR              1    7[COMRAM] unsigned char 
  9466 ;; Return value:  Size  Location     Type
  9467 ;;                  1    wreg      void 
  9468 ;; Registers used:
  9469 ;;		wreg, status,2, status,0, cstack
  9470 ;; Tracked objects:
  9471 ;;		On entry : 0/0
  9472 ;;		On exit  : 0/0
  9473 ;;		Unchanged: 0/0
  9474 ;; Data sizes:     COMRAM   BANK0   BANK1
  9475 ;;      Params:         0       0       0
  9476 ;;      Locals:         1       0       0
  9477 ;;      Temps:          0       0       0
  9478 ;;      Totals:         1       0       0
  9479 ;;Total ram usage:        1 bytes
  9480 ;; Hardware stack levels used: 1
  9481 ;; Hardware stack levels required when called: 3
  9482 ;; This function calls:
  9483 ;;		_CantaPartAlta
  9484 ;;		_CantaPartBaixa
  9485 ;; This function is called by:
  9486 ;;		_LcInit
  9487 ;;		_LcClear
  9488 ;;		_LcCursorOn
  9489 ;;		_LcCursorOff
  9490 ;;		_LcGotoXY
  9491 ;;		_menuMotor
  9492 ;; This function uses a non-reentrant model
  9493 ;;
  9494                           
  9495                           	psect	text76
  9496  001F76                     __ptext76:
  9497                           	callstack 0
  9498  001F76                     _CantaIR:
  9499                           	callstack 23
  9500                           
  9501                           ;incstack = 0
  9502                           ;CantaIR@IR stored from wreg
  9503  001F76  6E60               	movwf	CantaIR@IR^0,c
  9504                           
  9505                           ;LcTLCD.c: 229:  (TRISDbits.TRISD0 = TRISDbits.TRISD1 = TRISDbits.TRISD2 = TRISDbits.TRI
      +                          SD3 = 0);
  9506  001F78  9695               	bcf	149,3,c	;volatile
  9507                           
  9508                           ;LcTLCD.c: 230:  (LATDbits.LATD4 = 0);
  9509                           
  9510                           ;LcTLCD.c: 231:  (LATDbits.LATD5 = 0);
  9511                           
  9512                           ;LcTLCD.c: 232:  (LATDbits.LATD6 = 1);
  9513  001F7A  EC2B  F00C         	call	PL56	;call to abstracted procedure
  9514                           
  9515                           ;LcTLCD.c: 233:  CantaPartAlta(IR);
  9516  001F7E  5060               	movf	CantaIR@IR^0,w,c
  9517  001F80  EC0C  F00D         	call	_CantaPartAlta
  9518                           
  9519                           ;LcTLCD.c: 234:  (LATDbits.LATD6 = 1);
  9520                           
  9521                           ;LcTLCD.c: 235:  (LATDbits.LATD6 = 0);
  9522                           
  9523                           ;LcTLCD.c: 236:  (LATDbits.LATD6 = 0);
  9524                           
  9525                           ;LcTLCD.c: 237:  (LATDbits.LATD6 = 1);
  9526  001F84  EC39  F00E         	call	PL72	;call to abstracted procedure
  9527                           
  9528                           ;LcTLCD.c: 238:  CantaPartBaixa(IR);
  9529  001F88  5060               	movf	CantaIR@IR^0,w,c
  9530  001F8A  ECD9  F00C         	call	_CantaPartBaixa
  9531                           
  9532                           ;LcTLCD.c: 239:  (LATDbits.LATD6 = 1);
  9533                           
  9534                           ;LcTLCD.c: 240:  (LATDbits.LATD6 = 0);
  9535                           
  9536                           ;LcTLCD.c: 241:  (TRISDbits.TRISD0 = TRISDbits.TRISD1 = TRISDbits.TRISD2 = TRISDbits.TRI
      +                          SD3 = 1);
  9537  001F8E  EF32  F00E         	goto	PL42	;call to abstracted procedure
  9538  001F92                     __end_of_CantaIR:
  9539                           	callstack 0
  9540                           
  9541 ;; *************** function _CantaPartBaixa *****************
  9542 ;; Defined at:
  9543 ;;		line 221 in file "LcTLCD.c"
  9544 ;; Parameters:    Size  Location     Type
  9545 ;;  c               1    wreg     unsigned char 
  9546 ;; Auto vars:     Size  Location     Type
  9547 ;;  c               1    6[COMRAM] unsigned char 
  9548 ;; Return value:  Size  Location     Type
  9549 ;;                  1    wreg      void 
  9550 ;; Registers used:
  9551 ;;		wreg, status,2, status,0
  9552 ;; Tracked objects:
  9553 ;;		On entry : 0/0
  9554 ;;		On exit  : 0/0
  9555 ;;		Unchanged: 0/0
  9556 ;; Data sizes:     COMRAM   BANK0   BANK1
  9557 ;;      Params:         0       0       0
  9558 ;;      Locals:         1       0       0
  9559 ;;      Temps:          1       0       0
  9560 ;;      Totals:         2       0       0
  9561 ;;Total ram usage:        2 bytes
  9562 ;; Hardware stack levels used: 1
  9563 ;; Hardware stack levels required when called: 2
  9564 ;; This function calls:
  9565 ;;		Nothing
  9566 ;; This function is called by:
  9567 ;;		_CantaIR
  9568 ;;		_CantaData
  9569 ;; This function uses a non-reentrant model
  9570 ;;
  9571                           
  9572                           	psect	text77
  9573  0019B2                     __ptext77:
  9574                           	callstack 0
  9575  0019B2                     _CantaPartBaixa:
  9576                           	callstack 23
  9577                           
  9578                           ;incstack = 0
  9579                           ;CantaPartBaixa@c stored from wreg
  9580  0019B2  6E5F               	movwf	CantaPartBaixa@c^0,c
  9581                           
  9582                           ;LcTLCD.c: 222:   (LATDbits.LATD3 = (c & 0x08 ? 1 : 0));
  9583  0019B4  A65F               	btfss	CantaPartBaixa@c^0,3,c
  9584  0019B6  D003               	goto	u5160
  9585  0019B8  6A5E               	clrf	??_CantaPartBaixa^0,c
  9586  0019BA  2A5E               	incf	??_CantaPartBaixa^0,f,c
  9587  0019BC  D001               	goto	u5178
  9588  0019BE                     u5160:
  9589  0019BE  6A5E               	clrf	??_CantaPartBaixa^0,c
  9590  0019C0                     u5178:
  9591  0019C0  465E               	rlncf	??_CantaPartBaixa^0,f,c
  9592  0019C2  D825               	call	PL74	;call to abstracted procedure
  9593  0019C4  0BF7               	andlw	-9
  9594  0019C6  185E               	xorwf	??_CantaPartBaixa^0,w,c
  9595  0019C8  6E8C               	movwf	140,c	;volatile
  9596                           
  9597                           ;LcTLCD.c: 223:   (LATDbits.LATD2 = (c & 0x04 ? 1 : 0));
  9598  0019CA  A45F               	btfss	CantaPartBaixa@c^0,2,c
  9599  0019CC  D003               	goto	u5180
  9600  0019CE  6A5E               	clrf	??_CantaPartBaixa^0,c
  9601  0019D0  2A5E               	incf	??_CantaPartBaixa^0,f,c
  9602  0019D2  D001               	goto	u5198
  9603  0019D4                     u5180:
  9604  0019D4  6A5E               	clrf	??_CantaPartBaixa^0,c
  9605  0019D6                     u5198:
  9606  0019D6  D81B               	call	PL74	;call to abstracted procedure
  9607  0019D8  0BFB               	andlw	-5
  9608  0019DA  185E               	xorwf	??_CantaPartBaixa^0,w,c
  9609  0019DC  6E8C               	movwf	140,c	;volatile
  9610                           
  9611                           ;LcTLCD.c: 224:   (LATDbits.LATD1 = (c & 0x02 ? 1 : 0));
  9612  0019DE  A25F               	btfss	CantaPartBaixa@c^0,1,c
  9613  0019E0  D003               	goto	u5200
  9614  0019E2  6A5E               	clrf	??_CantaPartBaixa^0,c
  9615  0019E4  2A5E               	incf	??_CantaPartBaixa^0,f,c
  9616  0019E6  D001               	goto	u5218
  9617  0019E8                     u5200:
  9618  0019E8  6A5E               	clrf	??_CantaPartBaixa^0,c
  9619  0019EA                     u5218:
  9620  0019EA  465E               	rlncf	??_CantaPartBaixa^0,f,c
  9621  0019EC  508C               	movf	140,w,c	;volatile
  9622  0019EE  185E               	xorwf	??_CantaPartBaixa^0,w,c
  9623  0019F0  0BFD               	andlw	-3
  9624  0019F2  185E               	xorwf	??_CantaPartBaixa^0,w,c
  9625  0019F4  6E8C               	movwf	140,c	;volatile
  9626                           
  9627                           ;LcTLCD.c: 225:   (LATDbits.LATD0 = (c & 0x01 ? 1 : 0));
  9628  0019F6  A05F               	btfss	CantaPartBaixa@c^0,0,c
  9629  0019F8  D003               	goto	u5220
  9630  0019FA  6A5E               	clrf	??_CantaPartBaixa^0,c
  9631  0019FC  2A5E               	incf	??_CantaPartBaixa^0,f,c
  9632  0019FE  D001               	goto	u5238
  9633  001A00                     u5220:
  9634  001A00  6A5E               	clrf	??_CantaPartBaixa^0,c
  9635  001A02                     u5238:
  9636  001A02  508C               	movf	140,w,c	;volatile
  9637  001A04  185E               	xorwf	??_CantaPartBaixa^0,w,c
  9638  001A06  0BFE               	andlw	-2
  9639  001A08  185E               	xorwf	??_CantaPartBaixa^0,w,c
  9640  001A0A  6E8C               	movwf	140,c	;volatile
  9641  001A0C  0012               	return		;funcret
  9642  001A0E                     __end_of_CantaPartBaixa:
  9643                           	callstack 0
  9644  001A0E                     PL74:
  9645                           	callstack 23
  9646  001A0E  465E               	rlncf	??_CantaPartBaixa^0,f,c
  9647  001A10  465E               	rlncf	??_CantaPartBaixa^0,f,c
  9648  001A12  508C               	movf	140,w,c	;volatile
  9649  001A14  185E               	xorwf	??_CantaPartBaixa^0,w,c
  9650  001A16  0012               	return	
  9651  001A18                     __end_ofPL74:
  9652                           	callstack 0
  9653                           
  9654 ;; *************** function _CantaPartAlta *****************
  9655 ;; Defined at:
  9656 ;;		line 214 in file "LcTLCD.c"
  9657 ;; Parameters:    Size  Location     Type
  9658 ;;  c               1    wreg     unsigned char 
  9659 ;; Auto vars:     Size  Location     Type
  9660 ;;  c               1    6[COMRAM] unsigned char 
  9661 ;; Return value:  Size  Location     Type
  9662 ;;                  1    wreg      void 
  9663 ;; Registers used:
  9664 ;;		wreg, status,2, status,0
  9665 ;; Tracked objects:
  9666 ;;		On entry : 0/0
  9667 ;;		On exit  : 0/0
  9668 ;;		Unchanged: 0/0
  9669 ;; Data sizes:     COMRAM   BANK0   BANK1
  9670 ;;      Params:         0       0       0
  9671 ;;      Locals:         1       0       0
  9672 ;;      Temps:          1       0       0
  9673 ;;      Totals:         2       0       0
  9674 ;;Total ram usage:        2 bytes
  9675 ;; Hardware stack levels used: 1
  9676 ;; Hardware stack levels required when called: 2
  9677 ;; This function calls:
  9678 ;;		Nothing
  9679 ;; This function is called by:
  9680 ;;		_CantaIR
  9681 ;;		_CantaData
  9682 ;; This function uses a non-reentrant model
  9683 ;;
  9684                           
  9685                           	psect	text78
  9686  001A18                     __ptext78:
  9687                           	callstack 0
  9688  001A18                     _CantaPartAlta:
  9689                           	callstack 23
  9690                           
  9691                           ;incstack = 0
  9692                           ;CantaPartAlta@c stored from wreg
  9693  001A18  6E5F               	movwf	CantaPartAlta@c^0,c
  9694                           
  9695                           ;LcTLCD.c: 215:   (LATDbits.LATD3 = (c & 0x80 ? 1 : 0));
  9696  001A1A  AE5F               	btfss	CantaPartAlta@c^0,7,c
  9697  001A1C  D003               	goto	u5080
  9698  001A1E  6A5E               	clrf	??_CantaPartAlta^0,c
  9699  001A20  2A5E               	incf	??_CantaPartAlta^0,f,c
  9700  001A22  D001               	goto	u5098
  9701  001A24                     u5080:
  9702  001A24  6A5E               	clrf	??_CantaPartAlta^0,c
  9703  001A26                     u5098:
  9704  001A26  465E               	rlncf	??_CantaPartAlta^0,f,c
  9705  001A28  D825               	call	PL68	;call to abstracted procedure
  9706  001A2A  0BF7               	andlw	-9
  9707  001A2C  185E               	xorwf	??_CantaPartAlta^0,w,c
  9708  001A2E  6E8C               	movwf	140,c	;volatile
  9709                           
  9710                           ;LcTLCD.c: 216:   (LATDbits.LATD2 = (c & 0x40 ? 1 : 0));
  9711  001A30  AC5F               	btfss	CantaPartAlta@c^0,6,c
  9712  001A32  D003               	goto	u5100
  9713  001A34  6A5E               	clrf	??_CantaPartAlta^0,c
  9714  001A36  2A5E               	incf	??_CantaPartAlta^0,f,c
  9715  001A38  D001               	goto	u5118
  9716  001A3A                     u5100:
  9717  001A3A  6A5E               	clrf	??_CantaPartAlta^0,c
  9718  001A3C                     u5118:
  9719  001A3C  D81B               	call	PL68	;call to abstracted procedure
  9720  001A3E  0BFB               	andlw	-5
  9721  001A40  185E               	xorwf	??_CantaPartAlta^0,w,c
  9722  001A42  6E8C               	movwf	140,c	;volatile
  9723                           
  9724                           ;LcTLCD.c: 217:   (LATDbits.LATD1 = (c & 0x20 ? 1 : 0));
  9725  001A44  AA5F               	btfss	CantaPartAlta@c^0,5,c
  9726  001A46  D003               	goto	u5120
  9727  001A48  6A5E               	clrf	??_CantaPartAlta^0,c
  9728  001A4A  2A5E               	incf	??_CantaPartAlta^0,f,c
  9729  001A4C  D001               	goto	u5138
  9730  001A4E                     u5120:
  9731  001A4E  6A5E               	clrf	??_CantaPartAlta^0,c
  9732  001A50                     u5138:
  9733  001A50  465E               	rlncf	??_CantaPartAlta^0,f,c
  9734  001A52  508C               	movf	140,w,c	;volatile
  9735  001A54  185E               	xorwf	??_CantaPartAlta^0,w,c
  9736  001A56  0BFD               	andlw	-3
  9737  001A58  185E               	xorwf	??_CantaPartAlta^0,w,c
  9738  001A5A  6E8C               	movwf	140,c	;volatile
  9739                           
  9740                           ;LcTLCD.c: 218:   (LATDbits.LATD0 = (c & 0x10 ? 1 : 0));
  9741  001A5C  A85F               	btfss	CantaPartAlta@c^0,4,c
  9742  001A5E  D003               	goto	u5140
  9743  001A60  6A5E               	clrf	??_CantaPartAlta^0,c
  9744  001A62  2A5E               	incf	??_CantaPartAlta^0,f,c
  9745  001A64  D001               	goto	u5158
  9746  001A66                     u5140:
  9747  001A66  6A5E               	clrf	??_CantaPartAlta^0,c
  9748  001A68                     u5158:
  9749  001A68  508C               	movf	140,w,c	;volatile
  9750  001A6A  185E               	xorwf	??_CantaPartAlta^0,w,c
  9751  001A6C  0BFE               	andlw	-2
  9752  001A6E  185E               	xorwf	??_CantaPartAlta^0,w,c
  9753  001A70  6E8C               	movwf	140,c	;volatile
  9754  001A72  0012               	return		;funcret
  9755  001A74                     __end_of_CantaPartAlta:
  9756                           	callstack 0
  9757  001A74                     PL68:
  9758                           	callstack 23
  9759  001A74  465E               	rlncf	??_CantaPartAlta^0,f,c
  9760  001A76  465E               	rlncf	??_CantaPartAlta^0,f,c
  9761  001A78  508C               	movf	140,w,c	;volatile
  9762  001A7A  185E               	xorwf	??_CantaPartAlta^0,w,c
  9763  001A7C  0012               	return	
  9764  001A7E                     __end_ofPL68:
  9765                           	callstack 0
  9766                           
  9767 ;; *************** function _KeypadMotor *****************
  9768 ;; Defined at:
  9769 ;;		line 46 in file "keypad.c"
  9770 ;; Parameters:    Size  Location     Type
  9771 ;;		None
  9772 ;; Auto vars:     Size  Location     Type
  9773 ;;		None
  9774 ;; Return value:  Size  Location     Type
  9775 ;;                  1    wreg      void 
  9776 ;; Registers used:
  9777 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9778 ;; Tracked objects:
  9779 ;;		On entry : 0/0
  9780 ;;		On exit  : 0/0
  9781 ;;		Unchanged: 0/0
  9782 ;; Data sizes:     COMRAM   BANK0   BANK1
  9783 ;;      Params:         0       0       0
  9784 ;;      Locals:         0       0       0
  9785 ;;      Temps:          2       0       0
  9786 ;;      Totals:         2       0       0
  9787 ;;Total ram usage:        2 bytes
  9788 ;; Hardware stack levels used: 1
  9789 ;; Hardware stack levels required when called: 3
  9790 ;; This function calls:
  9791 ;;		_TiGetTics
  9792 ;;		_TiResetTics
  9793 ;; This function is called by:
  9794 ;;		_main
  9795 ;; This function uses a non-reentrant model
  9796 ;;
  9797                           
  9798                           	psect	text79
  9799  0011FA                     __ptext79:
  9800                           	callstack 0
  9801  0011FA                     _KeypadMotor:
  9802                           	callstack 27
  9803                           
  9804                           ;keypad.c: 48:     switch (state){
  9805                           
  9806                           ;incstack = 0
  9807  0011FA  D070               	goto	l6317
  9808  0011FC                     l148:
  9809                           
  9810                           ;keypad.c: 51:             if (!!(PORTBbits.RB0 && PORTBbits.RB1 && PORTBbits.RB2)){
  9811  0011FC  B081               	btfsc	129,0,c	;volatile
  9812  0011FE  A281               	btfss	129,1,c	;volatile
  9813  001200  D00A               	goto	l6245
  9814  001202  A481               	btfss	129,2,c	;volatile
  9815  001204  D008               	goto	l6245
  9816                           
  9817                           ;keypad.c: 52:                 LATBbits.LATB3=0;
  9818  001206  968A               	bcf	138,3,c	;volatile
  9819                           
  9820                           ;keypad.c: 53:                 LATBbits.LATB4=1;
  9821  001208  888A               	bsf	138,4,c	;volatile
  9822                           
  9823                           ;keypad.c: 54:                 LATBbits.LATB5=1;
  9824  00120A  8A8A               	bsf	138,5,c	;volatile
  9825                           
  9826                           ;keypad.c: 55:                 LATBbits.LATB6=1;
  9827  00120C  8C8A               	bsf	138,6,c	;volatile
  9828                           
  9829                           ;keypad.c: 56:                 state=1;
  9830  00120E  0E01               	movlw	1
  9831  001210  6E3D               	movwf	_state^0,c
  9832                           
  9833                           ;keypad.c: 57:                 row=0;
  9834  001212  6A45               	clrf	_row^0,c
  9835                           
  9836                           ;keypad.c: 58:             }else{
  9837  001214  0012               	return	
  9838  001216                     l6245:
  9839                           
  9840                           ;keypad.c: 59:                 state=4;
  9841  001216  0E04               	movlw	4
  9842  001218  6E3D               	movwf	_state^0,c
  9843  00121A  0C04               	retlw	4
  9844  00121C                     l152:
  9845                           
  9846                           ;keypad.c: 63:            if (!!(PORTBbits.RB0 && PORTBbits.RB1 && PORTBbits.RB2)){
  9847  00121C  B081               	btfsc	129,0,c	;volatile
  9848  00121E  A281               	btfss	129,1,c	;volatile
  9849  001220  D7FA               	goto	l6245
  9850  001222  A481               	btfss	129,2,c	;volatile
  9851  001224  D7F8               	goto	l6245
  9852                           
  9853                           ;keypad.c: 64:                 LATBbits.LATB3=1;
  9854  001226  868A               	bsf	138,3,c	;volatile
  9855                           
  9856                           ;keypad.c: 65:                 LATBbits.LATB4=0;
  9857  001228  988A               	bcf	138,4,c	;volatile
  9858                           
  9859                           ;keypad.c: 66:                 LATBbits.LATB5=1;
  9860  00122A  8A8A               	bsf	138,5,c	;volatile
  9861                           
  9862                           ;keypad.c: 67:                 LATBbits.LATB6=1;
  9863  00122C  8C8A               	bsf	138,6,c	;volatile
  9864                           
  9865                           ;keypad.c: 68:                 state=2;
  9866  00122E  0E02               	movlw	2
  9867  001230  6E3D               	movwf	_state^0,c
  9868                           
  9869                           ;keypad.c: 69:                 row=1;
  9870  001232  0E01               	movlw	1
  9871  001234  6E45               	movwf	_row^0,c
  9872                           
  9873                           ;keypad.c: 71:             }else{
  9874  001236  0C01               	retlw	1
  9875  001238                     l155:
  9876                           
  9877                           ;keypad.c: 76:             if (!!(PORTBbits.RB0 && PORTBbits.RB1 && PORTBbits.RB2)){
  9878  001238  B081               	btfsc	129,0,c	;volatile
  9879  00123A  A281               	btfss	129,1,c	;volatile
  9880  00123C  D7EC               	goto	l6245
  9881  00123E  A481               	btfss	129,2,c	;volatile
  9882  001240  D7EA               	goto	l6245
  9883                           
  9884                           ;keypad.c: 77:                 LATBbits.LATB3=1;
  9885  001242  868A               	bsf	138,3,c	;volatile
  9886                           
  9887                           ;keypad.c: 78:                 LATBbits.LATB4=1;
  9888  001244  888A               	bsf	138,4,c	;volatile
  9889                           
  9890                           ;keypad.c: 79:                 LATBbits.LATB5=0;
  9891  001246  9A8A               	bcf	138,5,c	;volatile
  9892                           
  9893                           ;keypad.c: 80:                 LATBbits.LATB6=1;
  9894  001248  8C8A               	bsf	138,6,c	;volatile
  9895                           
  9896                           ;keypad.c: 81:                 state=3;
  9897  00124A  0E03               	movlw	3
  9898  00124C  6E3D               	movwf	_state^0,c
  9899                           
  9900                           ;keypad.c: 82:                 row=2;
  9901  00124E  0E02               	movlw	2
  9902  001250  6E45               	movwf	_row^0,c
  9903                           
  9904                           ;keypad.c: 83:             }else{
  9905  001252  0C02               	retlw	2
  9906  001254                     l158:
  9907                           
  9908                           ;keypad.c: 88:             if (!!(PORTBbits.RB0 && PORTBbits.RB1 && PORTBbits.RB2)){
  9909  001254  B081               	btfsc	129,0,c	;volatile
  9910  001256  A281               	btfss	129,1,c	;volatile
  9911  001258  D7DE               	goto	l6245
  9912  00125A  A481               	btfss	129,2,c	;volatile
  9913  00125C  D7DC               	goto	l6245
  9914                           
  9915                           ;keypad.c: 89:                 LATBbits.LATB3=1;
  9916  00125E  868A               	bsf	138,3,c	;volatile
  9917                           
  9918                           ;keypad.c: 90:                 LATBbits.LATB4=1;
  9919  001260  888A               	bsf	138,4,c	;volatile
  9920                           
  9921                           ;keypad.c: 91:                 LATBbits.LATB5=1;
  9922  001262  8A8A               	bsf	138,5,c	;volatile
  9923                           
  9924                           ;keypad.c: 92:                 LATBbits.LATB6=0;
  9925  001264  9C8A               	bcf	138,6,c	;volatile
  9926                           
  9927                           ;keypad.c: 93:                 row=3;
  9928  001266  0E03               	movlw	3
  9929  001268  6E45               	movwf	_row^0,c
  9930  00126A                     l6275:
  9931                           
  9932                           ;keypad.c: 94:                 state=0;
  9933  00126A  6A3D               	clrf	_state^0,c
  9934                           
  9935                           ;keypad.c: 95:             }else{
  9936  00126C  0012               	return	
  9937  00126E                     l6279:
  9938                           
  9939                           ;keypad.c: 100:             state=5;
  9940  00126E  0E05               	movlw	5
  9941  001270  6E3D               	movwf	_state^0,c
  9942                           
  9943                           ;keypad.c: 101:             TiResetTics(timerBounces);
  9944  001272  5044               	movf	_timerBounces^0,w,c
  9945  001274  EFAB  F00F         	goto	_TiResetTics
  9946  001278                     l6283:
  9947                           
  9948                           ;keypad.c: 104:             if (TiGetTics(timerBounces) >= 25){
  9949  001278  5044               	movf	_timerBounces^0,w,c
  9950  00127A  EC22  F00F         	call	_TiGetTics
  9951  00127E  BE5F               	btfsc	(?_TiGetTics+1)^0,7,c
  9952  001280  0012               	return	
  9953  001282  505F               	movf	(?_TiGetTics+1)^0,w,c
  9954  001284  E104               	bnz	u5740
  9955  001286  0E19               	movlw	25
  9956  001288  5C5E               	subwf	?_TiGetTics^0,w,c
  9957  00128A  A0D8               	btfss	status,0,c
  9958  00128C  0012               	return	
  9959  00128E                     u5740:
  9960                           
  9961                           ;keypad.c: 105:                 if (!!(PORTBbits.RB0 && PORTBbits.RB1 && PORTBbits.RB2))
      +                          {
  9962  00128E  B081               	btfsc	129,0,c	;volatile
  9963  001290  A281               	btfss	129,1,c	;volatile
  9964  001292  D002               	goto	l6293
  9965  001294  B481               	btfsc	129,2,c	;volatile
  9966  001296  D7E9               	goto	l6275
  9967  001298                     l6293:
  9968                           
  9969                           ;keypad.c: 108:                     pressed = 1;
  9970  001298  0E01               	movlw	1
  9971  00129A  6E40               	movwf	_pressed^0,c
  9972                           
  9973                           ;keypad.c: 109:                     state = 6;
  9974  00129C  D036               	goto	PL82	;call to abstracted procedure
  9975  00129E                     l166:
  9976                           
  9977                           ;keypad.c: 114:             if (!!(PORTBbits.RB0 && PORTBbits.RB1 && PORTBbits.RB2)){
  9978  00129E  B081               	btfsc	129,0,c	;volatile
  9979  0012A0  A281               	btfss	129,1,c	;volatile
  9980  0012A2  0012               	return	
  9981  0012A4  A481               	btfss	129,2,c	;volatile
  9982  0012A6  0012               	return	
  9983                           
  9984                           ;keypad.c: 115:                 TiResetTics(timerBounces);
  9985  0012A8  5044               	movf	_timerBounces^0,w,c
  9986  0012AA  ECAB  F00F         	call	_TiResetTics
  9987                           
  9988                           ;keypad.c: 116:                 state = 7;
  9989  0012AE  0E07               	movlw	7
  9990  0012B0  6E3D               	movwf	_state^0,c
  9991  0012B2  0C07               	retlw	7
  9992  0012B4                     l6303:
  9993                           
  9994                           ;keypad.c: 120:             if (TiGetTics(timerBounces) >= 25){
  9995  0012B4  5044               	movf	_timerBounces^0,w,c
  9996  0012B6  EC22  F00F         	call	_TiGetTics
  9997  0012BA  BE5F               	btfsc	(?_TiGetTics+1)^0,7,c
  9998  0012BC  0012               	return	
  9999  0012BE  505F               	movf	(?_TiGetTics+1)^0,w,c
 10000  0012C0  E104               	bnz	u5810
 10001  0012C2  0E19               	movlw	25
 10002  0012C4  5C5E               	subwf	?_TiGetTics^0,w,c
 10003  0012C6  A0D8               	btfss	status,0,c
 10004  0012C8  0012               	return	
 10005  0012CA                     u5810:
 10006                           
 10007                           ;keypad.c: 121:                 if (!!(PORTBbits.RB0 && PORTBbits.RB1 && PORTBbits.RB2))
      +                          {
 10008  0012CA  B081               	btfsc	129,0,c	;volatile
 10009  0012CC  A281               	btfss	129,1,c	;volatile
 10010  0012CE  D01D               	goto	PL82
 10011  0012D0  A481               	btfss	129,2,c	;volatile
 10012  0012D2  D01B               	goto	PL82
 10013                           
 10014                           ;keypad.c: 122:                     pressed = 0;
 10015  0012D4  6A40               	clrf	_pressed^0,c
 10016                           
 10017                           ;keypad.c: 123:                     state = 0;
 10018  0012D6  6A3D               	clrf	_state^0,c
 10019                           
 10020                           ;keypad.c: 124:                 } else {
 10021  0012D8  0012               	return	
 10022  0012DA                     l6313:
 10023                           
 10024                           ;keypad.c: 125:                     state = 6;
 10025  0012DA  D017               	goto	PL82	;call to abstracted procedure
 10026  0012DC                     l6317:
 10027  0012DC  503D               	movf	_state^0,w,c
 10028  0012DE  6E65               	movwf	??_KeypadMotor^0,c
 10029  0012E0  6A66               	clrf	(??_KeypadMotor+1)^0,c
 10030                           
 10031                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 10032                           ; Switch size 1, requested type "space"
 10033                           ; Number of cases is 1, Range of values is 0 to 0
 10034                           ; switch strategies available:
 10035                           ; Name         Instructions Cycles
 10036                           ; simple_byte            4     3 (average)
 10037                           ;	Chosen strategy is simple_byte
 10038  0012E2  5066               	movf	(??_KeypadMotor+1)^0,w,c
 10039  0012E4  A4D8               	btfss	status,2,c
 10040  0012E6  0012               	return	
 10041                           
 10042                           ; Switch size 1, requested type "space"
 10043                           ; Number of cases is 8, Range of values is 0 to 7
 10044                           ; switch strategies available:
 10045                           ; Name         Instructions Cycles
 10046                           ; simple_byte           25    13 (average)
 10047                           ;	Chosen strategy is simple_byte
 10048  0012E8  5065               	movf	??_KeypadMotor^0,w,c
 10049  0012EA  E088               	bz	l148
 10050  0012EC  0A01               	xorlw	1	; case 1
 10051  0012EE  E096               	bz	l152
 10052  0012F0  0A03               	xorlw	3	; case 2
 10053  0012F2  E0A2               	bz	l155
 10054  0012F4  0A01               	xorlw	1	; case 3
 10055  0012F6  E0AE               	bz	l158
 10056  0012F8  0A07               	xorlw	7	; case 4
 10057  0012FA  E0B9               	bz	l6279
 10058  0012FC  0A01               	xorlw	1	; case 5
 10059  0012FE  E0BC               	bz	l6283
 10060  001300  0A03               	xorlw	3	; case 6
 10061  001302  E0CD               	bz	l166
 10062  001304  0A01               	xorlw	1	; case 7
 10063  001306  E0D6               	bz	l6303
 10064  001308  0012               	return		;funcret
 10065  00130A                     __end_of_KeypadMotor:
 10066                           	callstack 0
 10067  00130A                     PL82:
 10068                           	callstack 27
 10069  00130A  0E06               	movlw	6
 10070  00130C  6E3D               	movwf	_state^0,c
 10071  00130E  0C06               	retlw	6
 10072  001310                     __end_ofPL82:
 10073                           	callstack 0
 10074                           
 10075 ;; *************** function _TiResetTics *****************
 10076 ;; Defined at:
 10077 ;;		line 59 in file "TTimer.c"
 10078 ;; Parameters:    Size  Location     Type
 10079 ;;  Handle          1    wreg     unsigned char 
 10080 ;; Auto vars:     Size  Location     Type
 10081 ;;  Handle          1    5[COMRAM] unsigned char 
 10082 ;; Return value:  Size  Location     Type
 10083 ;;                  1    wreg      void 
 10084 ;; Registers used:
 10085 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 10086 ;; Tracked objects:
 10087 ;;		On entry : 0/0
 10088 ;;		On exit  : 0/0
 10089 ;;		Unchanged: 0/0
 10090 ;; Data sizes:     COMRAM   BANK0   BANK1
 10091 ;;      Params:         0       0       0
 10092 ;;      Locals:         1       0       0
 10093 ;;      Temps:          0       0       0
 10094 ;;      Totals:         1       0       0
 10095 ;;Total ram usage:        1 bytes
 10096 ;; Hardware stack levels used: 1
 10097 ;; Hardware stack levels required when called: 2
 10098 ;; This function calls:
 10099 ;;		Nothing
 10100 ;; This function is called by:
 10101 ;;		_KeypadMotor
 10102 ;;		_SMSMotor
 10103 ;;		_KeSetMode
 10104 ;;		_Espera
 10105 ;;		_WaitForBusy
 10106 ;;		_audioMotor
 10107 ;;		_startSong
 10108 ;;		_menuMotor
 10109 ;;		_btMotor
 10110 ;;		_timeMotor
 10111 ;;		_startTimer
 10112 ;; This function uses a non-reentrant model
 10113 ;;
 10114                           
 10115                           	psect	text80
 10116  001F56                     __ptext80:
 10117                           	callstack 0
 10118  001F56                     _TiResetTics:
 10119                           	callstack 25
 10120                           
 10121                           ;incstack = 0
 10122                           ;TiResetTics@Handle stored from wreg
 10123  001F56  6E5E               	movwf	TiResetTics@Handle^0,c
 10124                           
 10125                           ;TTimer.c: 63:     s_Timers[Handle].h_initialTics=h_Tics;
 10126  001F58  505E               	movf	TiResetTics@Handle^0,w,c
 10127  001F5A  D805               	call	PL28	;call to abstracted procedure
 10128  001F5C  C00F  FFDE         	movff	_h_Tics,postinc2
 10129  001F60  C010  FFDD         	movff	_h_Tics+1,postdec2
 10130  001F64  0012               	return		;funcret
 10131  001F66                     __end_of_TiResetTics:
 10132                           	callstack 0
 10133  001F66                     PL28:
 10134                           	callstack 23
 10135  001F66  0D03               	mullw	3
 10136  001F68  0E90               	movlw	low _s_Timers
 10137  001F6A  24F3               	addwf	243,w,c
 10138  001F6C  6ED9               	movwf	fsr2l,c
 10139  001F6E  0E01               	movlw	high _s_Timers
 10140  001F70  20F4               	addwfc	prodh,w,c
 10141  001F72  6EDA               	movwf	fsr2h,c
 10142  001F74  0012               	return	
 10143  001F76                     __end_ofPL28:
 10144                           	callstack 0
 10145                           
 10146 ;; *************** function _TiGetTics *****************
 10147 ;; Defined at:
 10148 ;;		line 65 in file "TTimer.c"
 10149 ;; Parameters:    Size  Location     Type
 10150 ;;  Handle          1    wreg     unsigned char 
 10151 ;; Auto vars:     Size  Location     Type
 10152 ;;  Handle          1    9[COMRAM] unsigned char 
 10153 ;;  actual          2   10[COMRAM] volatile unsigned int 
 10154 ;; Return value:  Size  Location     Type
 10155 ;;                  2    5[COMRAM] int 
 10156 ;; Registers used:
 10157 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 10158 ;; Tracked objects:
 10159 ;;		On entry : 0/0
 10160 ;;		On exit  : 0/0
 10161 ;;		Unchanged: 0/0
 10162 ;; Data sizes:     COMRAM   BANK0   BANK1
 10163 ;;      Params:         2       0       0
 10164 ;;      Locals:         3       0       0
 10165 ;;      Temps:          2       0       0
 10166 ;;      Totals:         7       0       0
 10167 ;;Total ram usage:        7 bytes
 10168 ;; Hardware stack levels used: 1
 10169 ;; Hardware stack levels required when called: 2
 10170 ;; This function calls:
 10171 ;;		Nothing
 10172 ;; This function is called by:
 10173 ;;		_KeypadMotor
 10174 ;;		_SMSMotor
 10175 ;;		_Espera
 10176 ;;		_WaitForBusy
 10177 ;;		_audioMotor
 10178 ;;		_menuMotor
 10179 ;;		_btMotor
 10180 ;;		_timeMotor
 10181 ;; This function uses a non-reentrant model
 10182 ;;
 10183                           
 10184                           	psect	text81
 10185  001E44                     __ptext81:
 10186                           	callstack 0
 10187  001E44                     _TiGetTics:
 10188                           	callstack 24
 10189                           
 10190                           ;incstack = 0
 10191                           ;TiGetTics@Handle stored from wreg
 10192  001E44  6E62               	movwf	TiGetTics@Handle^0,c
 10193                           
 10194                           ;TTimer.c: 69:     volatile unsigned int actual;;TTimer.c: 70:     actual=h_Tics;
 10195  001E46  C00F  F063         	movff	_h_Tics,TiGetTics@actual	;volatile
 10196  001E4A  C010  F064         	movff	_h_Tics+1,TiGetTics@actual+1	;volatile
 10197                           
 10198                           ;TTimer.c: 71:     return (actual-(s_Timers[Handle].h_initialTics));
 10199  001E4E  5062               	movf	TiGetTics@Handle^0,w,c
 10200  001E50  ECB3  F00F         	call	PL28	;call to abstracted procedure
 10201  001E54  CFDE F060          	movff	postinc2,??_TiGetTics
 10202  001E58  CFDD F061          	movff	postdec2,??_TiGetTics+1
 10203  001E5C  5060               	movf	??_TiGetTics^0,w,c
 10204  001E5E  5C63               	subwf	TiGetTics@actual^0,w,c	;volatile
 10205  001E60  6E5E               	movwf	?_TiGetTics^0,c
 10206  001E62  5061               	movf	(??_TiGetTics+1)^0,w,c
 10207  001E64  5864               	subwfb	(TiGetTics@actual+1)^0,w,c	;volatile
 10208  001E66  6E5F               	movwf	(?_TiGetTics+1)^0,c
 10209  001E68  0012               	return		;funcret
 10210  001E6A                     __end_of_TiGetTics:
 10211                           	callstack 0
 10212                           
 10213 ;; *************** function _RSI_High *****************
 10214 ;; Defined at:
 10215 ;;		line 32 in file "main.c"
 10216 ;; Parameters:    Size  Location     Type
 10217 ;;		None
 10218 ;; Auto vars:     Size  Location     Type
 10219 ;;		None
 10220 ;; Return value:  Size  Location     Type
 10221 ;;                  1    wreg      void 
 10222 ;; Registers used:
 10223 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 10224 ;; Tracked objects:
 10225 ;;		On entry : 0/0
 10226 ;;		On exit  : 0/0
 10227 ;;		Unchanged: 0/0
 10228 ;; Data sizes:     COMRAM   BANK0   BANK1
 10229 ;;      Params:         0       0       0
 10230 ;;      Locals:         0       0       0
 10231 ;;      Temps:          4       0       0
 10232 ;;      Totals:         4       0       0
 10233 ;;Total ram usage:        4 bytes
 10234 ;; Hardware stack levels used: 1
 10235 ;; Hardware stack levels required when called: 1
 10236 ;; This function calls:
 10237 ;;		__TiRSITimer
 10238 ;; This function is called by:
 10239 ;;		Interrupt level 2
 10240 ;; This function uses a non-reentrant model
 10241 ;;
 10242                           
 10243                           	psect	intcode
 10244  000008                     __pintcode:
 10245                           	callstack 0
 10246  000008                     _RSI_High:
 10247                           	callstack 23
 10248                           
 10249                           ;incstack = 0
 10250  000008  827A               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 10251  00000A  CFD9 F05A          	movff	fsr2l,??_RSI_High
 10252  00000E  CFDA F05B          	movff	fsr2h,??_RSI_High+1
 10253  000012  CFF3 F05C          	movff	prodl,??_RSI_High+2
 10254  000016  CFF4 F05D          	movff	prodh,??_RSI_High+3
 10255  00001A  ECC2  F00D         	call	__TiRSITimer	;wreg free
 10256  00001E  C05D  FFF4         	movff	??_RSI_High+3,prodh
 10257  000022  C05C  FFF3         	movff	??_RSI_High+2,prodl
 10258  000026  C05B  FFDA         	movff	??_RSI_High+1,fsr2h
 10259  00002A  C05A  FFD9         	movff	??_RSI_High,fsr2l
 10260  00002E  927A               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 10261  000030  0011               	retfie		f
 10262  000032                     __end_of_RSI_High:
 10263                           	callstack 0
 10264                           
 10265 ;; *************** function __TiRSITimer *****************
 10266 ;; Defined at:
 10267 ;;		line 37 in file "TTimer.c"
 10268 ;; Parameters:    Size  Location     Type
 10269 ;;		None
 10270 ;; Auto vars:     Size  Location     Type
 10271 ;;		None
 10272 ;; Return value:  Size  Location     Type
 10273 ;;                  1    wreg      void 
 10274 ;; Registers used:
 10275 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 10276 ;; Tracked objects:
 10277 ;;		On entry : 0/0
 10278 ;;		On exit  : 0/0
 10279 ;;		Unchanged: 0/0
 10280 ;; Data sizes:     COMRAM   BANK0   BANK1
 10281 ;;      Params:         0       0       0
 10282 ;;      Locals:         0       0       0
 10283 ;;      Temps:          1       0       0
 10284 ;;      Totals:         1       0       0
 10285 ;;Total ram usage:        1 bytes
 10286 ;; Hardware stack levels used: 1
 10287 ;; This function calls:
 10288 ;;		Nothing
 10289 ;; This function is called by:
 10290 ;;		_RSI_High
 10291 ;; This function uses a non-reentrant model
 10292 ;;
 10293                           
 10294                           	psect	text83
 10295  001B84                     __ptext83:
 10296                           	callstack 0
 10297  001B84                     __TiRSITimer:
 10298                           	callstack 23
 10299                           
 10300                           ;TTimer.c: 43:     TMR0H = 0xDF;
 10301                           
 10302                           ;incstack = 0
 10303  001B84  0EDF               	movlw	223
 10304  001B86  6ED7               	movwf	215,c	;volatile
 10305                           
 10306                           ;TTimer.c: 44:     TMR0L = 0x73;
 10307  001B88  0E73               	movlw	115
 10308  001B8A  6ED6               	movwf	214,c	;volatile
 10309                           
 10310                           ;TTimer.c: 45:     INTCONbits.TMR0IF = 0;
 10311  001B8C  94F2               	bcf	242,2,c	;volatile
 10312                           
 10313                           ;TTimer.c: 46:     h_Tics++;
 10314  001B8E  4A0F               	infsnz	_h_Tics^0,f,c
 10315  001B90  2A10               	incf	(_h_Tics+1)^0,f,c
 10316                           
 10317                           ;TTimer.c: 48:     if (h_Tics>=30000) {
 10318  001B92  0E30               	movlw	48
 10319  001B94  5C0F               	subwf	_h_Tics^0,w,c
 10320  001B96  0E75               	movlw	117
 10321  001B98  5810               	subwfb	(_h_Tics+1)^0,w,c
 10322  001B9A  A0D8               	btfss	status,0,c
 10323  001B9C  0012               	return	
 10324                           
 10325                           ;TTimer.c: 50:         for (counter=0;counter<25;counter++){
 10326  001B9E  6A46               	clrf	_counter^0,c
 10327  001BA0                     i2l4357:
 10328  001BA0  0E18               	movlw	24
 10329  001BA2  6446               	cpfsgt	_counter^0,c
 10330  001BA4  D001               	goto	i2l4361
 10331  001BA6  D00D               	goto	i2l77
 10332  001BA8                     i2l4361:
 10333                           
 10334                           ;TTimer.c: 51:             if (s_Timers[counter].b_busy==1){
 10335  001BA8  EC9B  F00E         	call	PL14	;call to abstracted procedure
 10336  001BAC  04DE               	decf	postinc2,w,c
 10337  001BAE  E107               	bnz	i2l4365
 10338                           
 10339                           ;TTimer.c: 52:                 s_Timers[counter].h_initialTics -= h_Tics;
 10340  001BB0  5046               	movf	_counter^0,w,c
 10341  001BB2  ECB3  F00F         	call	PL28	;call to abstracted procedure
 10342  001BB6  500F               	movf	_h_Tics^0,w,c
 10343  001BB8  5EDE               	subwf	postinc2,f,c
 10344  001BBA  5010               	movf	(_h_Tics+1)^0,w,c
 10345  001BBC  5ADD               	subwfb	postdec2,f,c
 10346  001BBE                     i2l4365:
 10347                           
 10348                           ;TTimer.c: 54:         }
 10349  001BBE  2A46               	incf	_counter^0,f,c
 10350  001BC0  D7EF               	goto	i2l4357
 10351  001BC2                     i2l77:
 10352                           
 10353                           ;TTimer.c: 55:         h_Tics=0;
 10354  001BC2  6A0F               	clrf	_h_Tics^0,c
 10355  001BC4  6A10               	clrf	(_h_Tics+1)^0,c
 10356  001BC6  0012               	return		;funcret
 10357  001BC8                     __end_of__TiRSITimer:
 10358                           	callstack 0
 10359                           
 10360                           	psect	rparam
 10361  0000                     
 10362                           	psect	temp
 10363  00007A                     btemp:
 10364                           	callstack 0
 10365  00007A                     	ds	1
 10366  0000                     int$flags	set	btemp
 10367  0000                     wtemp8	set	btemp+1
 10368  0000                     ttemp5	set	btemp+1
 10369  0000                     ttemp6	set	btemp+4
 10370  0000                     ttemp7	set	btemp+8
 10371                           
 10372                           	psect	idloc
 10373                           
 10374                           ;Config register IDLOC0 @ 0x200000
 10375                           ;	unspecified, using default values
 10376  200000                     	org	2097152
 10377  200000  FF                 	db	255
 10378                           
 10379                           ;Config register IDLOC1 @ 0x200001
 10380                           ;	unspecified, using default values
 10381  200001                     	org	2097153
 10382  200001  FF                 	db	255
 10383                           
 10384                           ;Config register IDLOC2 @ 0x200002
 10385                           ;	unspecified, using default values
 10386  200002                     	org	2097154
 10387  200002  FF                 	db	255
 10388                           
 10389                           ;Config register IDLOC3 @ 0x200003
 10390                           ;	unspecified, using default values
 10391  200003                     	org	2097155
 10392  200003  FF                 	db	255
 10393                           
 10394                           ;Config register IDLOC4 @ 0x200004
 10395                           ;	unspecified, using default values
 10396  200004                     	org	2097156
 10397  200004  FF                 	db	255
 10398                           
 10399                           ;Config register IDLOC5 @ 0x200005
 10400                           ;	unspecified, using default values
 10401  200005                     	org	2097157
 10402  200005  FF                 	db	255
 10403                           
 10404                           ;Config register IDLOC6 @ 0x200006
 10405                           ;	unspecified, using default values
 10406  200006                     	org	2097158
 10407  200006  FF                 	db	255
 10408                           
 10409                           ;Config register IDLOC7 @ 0x200007
 10410                           ;	unspecified, using default values
 10411  200007                     	org	2097159
 10412  200007  FF                 	db	255
 10413                           
 10414                           	psect	config
 10415                           
 10416                           ; Padding undefined space
 10417  300000                     	org	3145728
 10418  300000  FF                 	db	255
 10419                           
 10420                           ;Config register CONFIG1H @ 0x300001
 10421                           ;	Oscillator
 10422                           ;	OSC = HSPLL, HS oscillator, PLL enabled (Clock Frequency = 4 x FOSC1)
 10423                           ;	Fail-Safe Clock Monitor Enable bit
 10424                           ;	FCMEN = 0x0, unprogrammed default
 10425                           ;	Internal/External Oscillator Switchover bit
 10426                           ;	IESO = 0x0, unprogrammed default
 10427  300001                     	org	3145729
 10428  300001  06                 	db	6
 10429                           
 10430                           ;Config register CONFIG2L @ 0x300002
 10431                           ;	Power-up Timer Enable bit
 10432                           ;	PWRT = OFF, PWRT disabled
 10433                           ;	Brown-out Reset Enable bits
 10434                           ;	BOR = OFF, Brown-out Reset disabled in hardware and software
 10435                           ;	Brown-out Reset Voltage bits
 10436                           ;	BORV = 0x3, unprogrammed default
 10437  300002                     	org	3145730
 10438  300002  19                 	db	25
 10439                           
 10440                           ;Config register CONFIG2H @ 0x300003
 10441                           ;	Watchdog Timer Enable bit
 10442                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
 10443                           ;	Watchdog Timer Postscale Select bits
 10444                           ;	WDTPS = 0xF, unprogrammed default
 10445  300003                     	org	3145731
 10446  300003  1E                 	db	30
 10447                           
 10448                           ; Padding undefined space
 10449  300004                     	org	3145732
 10450  300004  FF                 	db	255
 10451                           
 10452                           ;Config register CONFIG3H @ 0x300005
 10453                           ;	CCP2 MUX bit
 10454                           ;	CCP2MX = 0x1, unprogrammed default
 10455                           ;	PORTB A/D Enable bit
 10456                           ;	PBADEN = DIG, PORTB<4:0> pins are configured as digital I/O on Reset
 10457                           ;	Low-Power Timer1 Oscillator Enable bit
 10458                           ;	LPT1OSC = 0x0, unprogrammed default
 10459                           ;	MCLR Pin Enable bit
 10460                           ;	MCLRE = OFF, RE3 input pin enabled; MCLR disabled
 10461  300005                     	org	3145733
 10462  300005  01                 	db	1
 10463                           
 10464                           ;Config register CONFIG4L @ 0x300006
 10465                           ;	Stack Full/Underflow Reset Enable bit
 10466                           ;	STVREN = 0x1, unprogrammed default
 10467                           ;	Single-Supply ICSP Enable bit
 10468                           ;	LVP = OFF, Single-Supply ICSP disabled
 10469                           ;	Boot Block Size Select bits
 10470                           ;	BBSIZ = 0x0, unprogrammed default
 10471                           ;	Extended Instruction Set Enable bit
 10472                           ;	XINST = 0x0, unprogrammed default
 10473                           ;	Background Debugger Enable bit
 10474                           ;	DEBUG = OFF, Background debugger disabled, RB6 and RB7 configured as general purpose I
      +                          /O pins
 10475  300006                     	org	3145734
 10476  300006  81                 	db	129
 10477                           
 10478                           ; Padding undefined space
 10479  300007                     	org	3145735
 10480  300007  FF                 	db	255
 10481                           
 10482                           ;Config register CONFIG5L @ 0x300008
 10483                           ;	unspecified, using default values
 10484                           ;	Code Protection bit
 10485                           ;	CP0 = 0x1, unprogrammed default
 10486                           ;	Code Protection bit
 10487                           ;	CP1 = 0x1, unprogrammed default
 10488  300008                     	org	3145736
 10489  300008  03                 	db	3
 10490                           
 10491                           ;Config register CONFIG5H @ 0x300009
 10492                           ;	unspecified, using default values
 10493                           ;	Boot Block Code Protection bitProtect Boot
 10494                           ;	CPB = 0x1, unprogrammed default
 10495                           ;	Data EEPROM Code Protection bit
 10496                           ;	CPD = 0x1, unprogrammed default
 10497  300009                     	org	3145737
 10498  300009  C0                 	db	192
 10499                           
 10500                           ;Config register CONFIG6L @ 0x30000A
 10501                           ;	unspecified, using default values
 10502                           ;	Write Protection bit
 10503                           ;	WRT0 = 0x1, unprogrammed default
 10504                           ;	Write Protection bit
 10505                           ;	WRT1 = 0x1, unprogrammed default
 10506  30000A                     	org	3145738
 10507  30000A  03                 	db	3
 10508                           
 10509                           ;Config register CONFIG6H @ 0x30000B
 10510                           ;	unspecified, using default values
 10511                           ;	Configuration Register Write Protection bit
 10512                           ;	WRTC = 0x1, unprogrammed default
 10513                           ;	Boot Block Write Protection bit
 10514                           ;	WRTB = 0x1, unprogrammed default
 10515                           ;	Data EEPROM Write Protection bit
 10516                           ;	WRTD = 0x1, unprogrammed default
 10517  30000B                     	org	3145739
 10518  30000B  E0                 	db	224
 10519                           
 10520                           ;Config register CONFIG7L @ 0x30000C
 10521                           ;	unspecified, using default values
 10522                           ;	Table Read Protection bit
 10523                           ;	EBTR0 = 0x1, unprogrammed default
 10524                           ;	Table Read Protection bit
 10525                           ;	EBTR1 = 0x1, unprogrammed default
 10526  30000C                     	org	3145740
 10527  30000C  03                 	db	3
 10528                           
 10529                           ;Config register CONFIG7H @ 0x30000D
 10530                           ;	unspecified, using default values
 10531                           ;	Boot Block Table Read Protection bit
 10532                           ;	EBTRB = 0x1, unprogrammed default
 10533  30000D                     	org	3145741
 10534  30000D  40                 	db	64
 10535                           tosu	equ	0xFFF
 10536                           tosh	equ	0xFFE
 10537                           tosl	equ	0xFFD
 10538                           stkptr	equ	0xFFC
 10539                           pclatu	equ	0xFFB
 10540                           pclath	equ	0xFFA
 10541                           pcl	equ	0xFF9
 10542                           tblptru	equ	0xFF8
 10543                           tblptrh	equ	0xFF7
 10544                           tblptrl	equ	0xFF6
 10545                           tablat	equ	0xFF5
 10546                           prodh	equ	0xFF4
 10547                           prodl	equ	0xFF3
 10548                           indf0	equ	0xFEF
 10549                           postinc0	equ	0xFEE
 10550                           postdec0	equ	0xFED
 10551                           preinc0	equ	0xFEC
 10552                           plusw0	equ	0xFEB
 10553                           fsr0h	equ	0xFEA
 10554                           fsr0l	equ	0xFE9
 10555                           wreg	equ	0xFE8
 10556                           indf1	equ	0xFE7
 10557                           postinc1	equ	0xFE6
 10558                           postdec1	equ	0xFE5
 10559                           preinc1	equ	0xFE4
 10560                           plusw1	equ	0xFE3
 10561                           fsr1h	equ	0xFE2
 10562                           fsr1l	equ	0xFE1
 10563                           bsr	equ	0xFE0
 10564                           indf2	equ	0xFDF
 10565                           postinc2	equ	0xFDE
 10566                           postdec2	equ	0xFDD
 10567                           preinc2	equ	0xFDC
 10568                           plusw2	equ	0xFDB
 10569                           fsr2h	equ	0xFDA
 10570                           fsr2l	equ	0xFD9
 10571                           status	equ	0xFD8

Data Sizes:
    Strings     0
    Constant    206
    Data        125
    BSS         307
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     25     121
    BANK0           128      2     119
    BANK1           256      0     219

Pointer List with Targets:

    DaSaveUser@regUser	PTR struct . size(1) Largest target is 18
		 -> mUser(COMRAM[18]), 

    DaFindUser@logUser	PTR struct . size(1) Largest target is 18
		 -> mUser(COMRAM[18]), 

    mUser@EEPROM$F1764	PTR struct . size(2) Largest target is 18
		 -> NULL(NULL[0]), mUser(COMRAM[18]), 

    displayString@string	PTR unsigned char  size(1) Largest target is 22
		 -> sysTime(BANK0[14]), modifyTimeString(BANK0[13]), TIME(BANK0[16]), LOGREGSCREEN(BANK0[12]), 
		 -> LOGINMENU(BANK0[22]), 


Critical Paths under _main in COMRAM

    _main->_dataMotor
    _timeMotor->_sendChar
    _startSong->_TiResetTics
    _sendChar->_LcPutChar
    _menuMotor->_mainMenu
    _startTimer->_TiResetTics
    _mainMenu->_LcPutChar
    _displayTimeRemaining->_LcGotoXY
    _displaySysTime->_LcGotoXY
    _displayString->_LcPutChar
    _displayResults->_LcPutChar
    _displayLogOut->_LcPutChar
    _displayError->_LcPutChar
    _nextRow->_LcGotoXY
    _LcCursorOn->_WaitForBusy
    _LcCursorOff->_WaitForBusy
    _KeSetMode->_TiResetTics
    _KeGetCharValue->_getFullValue
    _DaSaveScore->_LcPutChar
    _LcClear->_Espera
    _DaFindUser->_LcGotoXY
    _joystickMotor->_SiSendChar
    _initTime->_TiGetTimer
    _initSIO->_TiGetTimer
    _initMenu->_TiGetTimer
    _initKeypad->_TiGetTimer
    _initData->_readUserData
    _readUserData->_readEEPROM
    _initAudio->_TiGetTimer
    _dataMotor->_LcPutChar
    _LcPutChar->_LcGotoXY
    _LcGotoXY->_WaitForBusy
    _CantaData->_CantaPartAlta
    _CantaData->_CantaPartBaixa
    _btMotor->_TiGetTics
    _audioMotor->_TiGetTics
    _SMSMotor->_TiGetTics
    _LcInit->_Espera
    _WaitForBusy->_TiGetTics
    _Espera->_TiGetTics
    _CantaIR->_CantaPartAlta
    _CantaIR->_CantaPartBaixa
    _KeypadMotor->_TiGetTics

Critical Paths under _RSI_High in COMRAM

    _RSI_High->__TiRSITimer

Critical Paths under _main in BANK0

    _main->_dataMotor

Critical Paths under _RSI_High in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _RSI_High in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   68450
                        _KeypadMotor
                             _LcInit
                           _SMSMotor
                        _TiInitTimer
                         _audioMotor
                            _btMotor
                          _dataMotor
                          _initAudio
                           _initData
                       _initJoystick
                         _initKeypad
                           _initMenu
                            _initSIO
                           _initTime
                      _joystickMotor
                          _menuMotor
                          _timeMotor
 ---------------------------------------------------------------------------------
 (1) _timeMotor                                            2     2      0   10167
                                             20 COMRAM     2     2      0
                  _KeGetGenericValue
                         _LcCursorOn
                           _LcGotoXY
                          _LcPutChar
                          _TiGetTics
                        _TiResetTics
                            ___lbdiv
                            ___lbmod
                        _btAvailable
                          _isPressed
                           _sendChar
                     _updateGameTime
                      _updateSysTime
 ---------------------------------------------------------------------------------
 (2) _updateSysTime                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _updateGameTime                                       0     0      0      31
                          _startSong
 ---------------------------------------------------------------------------------
 (3) _startSong                                            0     0      0      31
                        _TiResetTics
 ---------------------------------------------------------------------------------
 (2) _sendChar                                             1     1      0    2592
                                             19 COMRAM     1     1      0
                          _LcPutChar
                         _btSendByte
 ---------------------------------------------------------------------------------
 (3) _btSendByte                                           1     1      0      15
                                              5 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _btAvailable                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _menuMotor                                            2     2      0   47799
                                             21 COMRAM     2     2      0
                            _CantaIR
                         _DaFindUser
                          _DaGetIdle
                     _DaGetNumScores
                        _DaGetStatus
                        _DaSaveScore
                         _DaSaveUser
                        _JoDirection
                            _JoMoved
                          _JoSetMode
                     _KeGetCharValue
                  _KeGetGenericValue
                          _KeSetMode
                        _LcCursorOff
                         _LcCursorOn
                           _LcGotoXY
                          _LcPutChar
                      _SiIsAvailable
                         _SiReadByte
                     _SiRecievedByte
                         _SiSendChar
                          _TiGetTics
                        _TiResetTics
                            ___lbdiv
                            ___lbmod
                       _displayError
                      _displayLogOut
                     _displayResults
               _displayScoresMarquee
                      _displayString
                     _displaySysTime
               _displayTimeRemaining
                         _getPresses
                  _incrementPosition
                          _isPressed
                           _mainMenu
                         _modifyTime
                       _resetDisplay
                      _resetPosition
                         _resetTimer
                         _startTimer
                          _stopTimer
                          _timerOver
 ---------------------------------------------------------------------------------
 (2) _timerOver                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _stopTimer                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _startTimer                                           0     0      0      31
                        _TiResetTics
 ---------------------------------------------------------------------------------
 (2) _resetTimer                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _resetPosition                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _resetDisplay                                         0     0      0    1889
                            _LcClear
 ---------------------------------------------------------------------------------
 (2) _modifyTime                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _mainMenu                                             2     2      0    5069
                                             19 COMRAM     2     2      0
                          _LcPutChar
                            ___awmod
                            _nextRow
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              6     2      4     448
                                              5 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) _isPressed                                            1     1      0      24
                                              5 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _incrementPosition                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _getPresses                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _displayTimeRemaining                                 0     0      0    2075
                           _LcGotoXY
 ---------------------------------------------------------------------------------
 (2) _displaySysTime                                       0     0      0    2075
                           _LcGotoXY
 ---------------------------------------------------------------------------------
 (2) _displayString                                        1     0      1    5133
                                             19 COMRAM     1     0      1
                          _LcPutChar
                            _nextRow
 ---------------------------------------------------------------------------------
 (2) _displayScoresMarquee                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _displayResults                                       0     0      0    4621
                          _LcPutChar
                            _nextRow
 ---------------------------------------------------------------------------------
 (2) _displayLogOut                                        0     0      0    4621
                          _LcPutChar
                            _nextRow
 ---------------------------------------------------------------------------------
 (2) _displayError                                         0     0      0    4621
                          _LcPutChar
                            _nextRow
 ---------------------------------------------------------------------------------
 (3) _nextRow                                              0     0      0    2075
                           _LcGotoXY
 ---------------------------------------------------------------------------------
 (2) _SiRecievedByte                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _SiReadByte                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _LcCursorOn                                           0     0      0     440
                            _CantaIR
                        _WaitForBusy
 ---------------------------------------------------------------------------------
 (2) _LcCursorOff                                          0     0      0     440
                            _CantaIR
                        _WaitForBusy
 ---------------------------------------------------------------------------------
 (2) _KeSetMode                                            1     1      0      93
                                              6 COMRAM     1     1      0
                        _TiResetTics
 ---------------------------------------------------------------------------------
 (2) _KeGetCharValue                                       0     0      0     110
                  _KeGetGenericValue
                       _getFullValue
 ---------------------------------------------------------------------------------
 (3) _getFullValue                                         5     5      0     110
                                              5 COMRAM     5     5      0
 ---------------------------------------------------------------------------------
 (2) _JoSetMode                                            1     1      0      22
                                              5 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _JoMoved                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _JoDirection                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _DaSaveUser                                           1     0      1      98
                                              5 COMRAM     1     0      1
 ---------------------------------------------------------------------------------
 (2) _DaSaveScore                                          1     1      0    6829
                                             19 COMRAM     1     1      0
                            _LcClear
                          _LcPutChar
                            ___lbdiv
                            ___lbmod
 ---------------------------------------------------------------------------------
 (3) _LcClear                                              0     0      0    1889
                            _CantaIR
                             _Espera
                        _WaitForBusy
 ---------------------------------------------------------------------------------
 (2) _DaGetStatus                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _DaGetNumScores                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _DaGetIdle                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _DaFindUser                                           1     0      1    2196
                                             18 COMRAM     1     0      1
                           _LcGotoXY
 ---------------------------------------------------------------------------------
 (1) _joystickMotor                                        2     2      0      22
                                              6 COMRAM     2     2      0
                      _SiIsAvailable
                         _SiSendChar
 ---------------------------------------------------------------------------------
 (1) _initTime                                             0     0      0       0
                         _TiGetTimer
 ---------------------------------------------------------------------------------
 (1) _initSIO                                              0     0      0       0
                         _TiGetTimer
 ---------------------------------------------------------------------------------
 (1) _initMenu                                             0     0      0       0
                         _TiGetTimer
 ---------------------------------------------------------------------------------
 (1) _initKeypad                                           0     0      0       0
                         _TiGetTimer
 ---------------------------------------------------------------------------------
 (1) _initJoystick                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initData                                             0     0      0      30
                         _readEEPROM
                       _readUserData
 ---------------------------------------------------------------------------------
 (2) _readUserData                                         2     2      0      15
                                              6 COMRAM     2     2      0
                         _readEEPROM
 ---------------------------------------------------------------------------------
 (3) _readEEPROM                                           1     1      0      15
                                              5 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _initAudio                                            0     0      0       0
                         _TiGetTimer
 ---------------------------------------------------------------------------------
 (1) _dataMotor                                            8     8      0    7893
                                             19 COMRAM     6     6      0
                                              0 BANK0      2     2      0
                           _LcGotoXY
                          _LcPutChar
                            ___lbdiv
                            ___lbmod
                         _saveEEPROM
 ---------------------------------------------------------------------------------
 (2) _saveEEPROM                                           2     1      1     872
                                              5 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (2) ___lbmod                                              4     3      1    1222
                                              5 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 (2) ___lbdiv                                              4     3      1    1141
                                              5 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 (3) _LcPutChar                                            1     1      0    2546
                                             18 COMRAM     1     1      0
                          _CantaData
                           _LcGotoXY
                        _WaitForBusy
 ---------------------------------------------------------------------------------
 (4) _LcGotoXY                                             5     4      1    2075
                                             13 COMRAM     5     4      1
                            _CantaIR
                        _WaitForBusy
 ---------------------------------------------------------------------------------
 (4) _CantaData                                            1     1      0     310
                                              7 COMRAM     1     1      0
                      _CantaPartAlta
                     _CantaPartBaixa
 ---------------------------------------------------------------------------------
 (1) _btMotor                                              2     2      0     118
                                             12 COMRAM     2     2      0
                      _SiIsAvailable
                         _SiSendChar
                          _TiGetTics
                        _TiResetTics
 ---------------------------------------------------------------------------------
 (2) _SiSendChar                                           1     1      0      22
                                              5 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _SiIsAvailable                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _audioMotor                                           3     3      0      96
                                             12 COMRAM     3     3      0
                          _TiGetTics
                        _TiResetTics
 ---------------------------------------------------------------------------------
 (1) _TiInitTimer                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SMSMotor                                             2     2      0      96
                                             12 COMRAM     2     2      0
                  _KeGetGenericValue
                          _TiGetTics
                        _TiResetTics
 ---------------------------------------------------------------------------------
 (2) _KeGetGenericValue                                    2     2      0       0
                                              5 COMRAM     2     2      0
                          _getColumn
 ---------------------------------------------------------------------------------
 (3) _getColumn                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _LcInit                                               3     2      1    2133
                                             17 COMRAM     3     2      1
                            _CantaIR
                 _EscriuPrimeraOrdre
                             _Espera
                         _TiGetTimer
                        _WaitForBusy
 ---------------------------------------------------------------------------------
 (4) _WaitForBusy                                          1     1      0     130
                                             12 COMRAM     1     1      0
                          _TiGetTics
                        _TiResetTics
 ---------------------------------------------------------------------------------
 (2) _TiGetTimer                                           1     1      0       0
                                              5 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (4) _Espera                                               5     1      4    1449
                                             12 COMRAM     5     1      4
                          _TiGetTics
                        _TiResetTics
 ---------------------------------------------------------------------------------
 (2) _EscriuPrimeraOrdre                                   2     2      0      60
                                              5 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (5) _CantaIR                                              1     1      0     310
                                              7 COMRAM     1     1      0
                      _CantaPartAlta
                     _CantaPartBaixa
 ---------------------------------------------------------------------------------
 (6) _CantaPartBaixa                                       2     2      0     124
                                              5 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (6) _CantaPartAlta                                        2     2      0     124
                                              5 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _KeypadMotor                                          2     2      0      96
                                             12 COMRAM     2     2      0
                          _TiGetTics
                        _TiResetTics
 ---------------------------------------------------------------------------------
 (4) _TiResetTics                                          1     1      0      31
                                              5 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (5) _TiGetTics                                            7     5      2      65
                                              5 COMRAM     7     5      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _RSI_High                                             4     4      0       0
                                              1 COMRAM     4     4      0
                        __TiRSITimer
 ---------------------------------------------------------------------------------
 (8) __TiRSITimer                                          1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _KeypadMotor
     _TiGetTics
     _TiResetTics
   _LcInit
     _CantaIR
       _CantaPartAlta
       _CantaPartBaixa
     _EscriuPrimeraOrdre
     _Espera
       _TiGetTics
       _TiResetTics
     _TiGetTimer
     _WaitForBusy
       _TiGetTics
       _TiResetTics
   _SMSMotor
     _KeGetGenericValue
       _getColumn
     _TiGetTics
     _TiResetTics
   _TiInitTimer
   _audioMotor
     _TiGetTics
     _TiResetTics
   _btMotor
     _SiIsAvailable
     _SiSendChar
     _TiGetTics
     _TiResetTics
   _dataMotor
     _LcGotoXY
       _CantaIR
       _WaitForBusy
     _LcPutChar
       _CantaData
         _CantaPartAlta
         _CantaPartBaixa
       _LcGotoXY
       _WaitForBusy
     ___lbdiv
     ___lbmod
     _saveEEPROM
   _initAudio
     _TiGetTimer
   _initData
     _readEEPROM
     _readUserData
       _readEEPROM
   _initJoystick
   _initKeypad
     _TiGetTimer
   _initMenu
     _TiGetTimer
   _initSIO
     _TiGetTimer
   _initTime
     _TiGetTimer
   _joystickMotor
     _SiIsAvailable
     _SiSendChar
   _menuMotor
     _CantaIR
     _DaFindUser
       _LcGotoXY
     _DaGetIdle
     _DaGetNumScores
     _DaGetStatus
     _DaSaveScore
       _LcClear
         _CantaIR
         _Espera
         _WaitForBusy
       _LcPutChar
       ___lbdiv
       ___lbmod
     _DaSaveUser
     _JoDirection
     _JoMoved
     _JoSetMode
     _KeGetCharValue
       _KeGetGenericValue
       _getFullValue
     _KeGetGenericValue
     _KeSetMode
       _TiResetTics
     _LcCursorOff
       _CantaIR
       _WaitForBusy
     _LcCursorOn
       _CantaIR
       _WaitForBusy
     _LcGotoXY
     _LcPutChar
     _SiIsAvailable
     _SiReadByte
     _SiRecievedByte
     _SiSendChar
     _TiGetTics
     _TiResetTics
     ___lbdiv
     ___lbmod
     _displayError
       _LcPutChar
       _nextRow
         _LcGotoXY
     _displayLogOut
       _LcPutChar
       _nextRow
     _displayResults
       _LcPutChar
       _nextRow
     _displayScoresMarquee
     _displayString
       _LcPutChar
       _nextRow
     _displaySysTime
       _LcGotoXY
     _displayTimeRemaining
       _LcGotoXY
     _getPresses
     _incrementPosition
     _isPressed
     _mainMenu
       _LcPutChar
       ___awmod
       _nextRow
     _modifyTime
     _resetDisplay
       _LcClear
     _resetPosition
     _resetTimer
     _startTimer
       _TiResetTics
     _stopTimer
     _timerOver
   _timeMotor
     _KeGetGenericValue
     _LcCursorOn
     _LcGotoXY
     _LcPutChar
     _TiGetTics
     _TiResetTics
     ___lbdiv
     ___lbmod
     _btAvailable
     _isPressed
     _sendChar
       _LcPutChar
       _btSendByte
     _updateGameTime
       _startSong
         _TiResetTics
     _updateSysTime

 _RSI_High (ROOT)
   __TiRSITimer

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             1FF      0       0      22        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      DB       7       85.5%
BITBANK0            80      0       0       4        0.0%
BANK0               80      2      77       5       93.0%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     19      79       1       96.0%
BITBIGSFRhlhh       19      0       0       9        0.0%
BITBIGSFRhh          D      0       0       8        0.0%
BITBIGSFRlhhhh       B      0       0      11        0.0%
BITBIGSFRlhhlhl      8      0       0      14        0.0%
BITBIGSFRlhhlll      8      0       0      17        0.0%
BITBIGSFRlhhllh      7      0       0      16        0.0%
BITBIGSFRlhhlhh      7      0       0      13        0.0%
BITBIGSFRllhlh       5      0       0      19        0.0%
BITBIGSFRllhhh       5      0       0      18        0.0%
BITBIGSFRhll         4      0       0      10        0.0%
BITBIGSFRlhhllh      1      0       0      15        0.0%
BITBIGSFRlhhhl       1      0       0      12        0.0%
BITBIGSFRlll         1      0       0      20        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     1CB      21        0.0%
DATA                 0      0     1CB       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.36 build 20220127204148 
Symbol Table                                                                                   Tue Jun 28 20:05:24 2022

           TiResetTics@Handle 005E                 _updateSysTime 0088                             _x 002D  
                           _y 002C        ??_displayTimeRemaining 006B                            PL2 0DB4  
                          PL4 0DE2                            PL6 0DEC                            PL8 0E06  
      __end_of_displayResults 1E12        __end_of_updateGameTime 1FAC        __end_of_displaySysTime 00EC  
               ?_displayError 0059                           PL10 0E12                           PL20 1736  
                         PL12 0E3E                           PL30 11B8                           PL22 1B04  
                         PL14 1D36                           PL40 1E12                           PL32 1B22  
                         PL24 17C6                           PL16 161C                           PL50 17E4  
                         PL42 1C64                           PL34 0956                           PL26 174A  
                         PL18 0E4C                           PL60 11CA                           PL52 0E5A  
                         PL44 0960                           PL36 1DBC                           PL28 1F66  
                         PL70 0988                           PL62 0974                           PL54 1DC4  
                         PL46 16BC                           PL38 16AA                           PL80 0E68  
                         PL72 1C72                           PL64 175A                           PL56 1856  
                         PL48 096A                           PL90 0992                           PL82 130A  
                         PL74 1A0E                           PL66 0980                           PL58 11C2  
                         PL92 14C8                           PL84 1E88                           PL76 1864  
                         PL68 1A74                           PL94 11EA                           PL86 11DA  
                         PL78 11D0                           PL96 012E                           PL88 11E2  
                         PL98 11F2                           l152 121C                           l155 1238  
                         l148 11FC                           l166 129E                           l158 1254  
                         l177 1516                           l195 1FF2                           l710 1490  
                         l279 1D56                           l713 14A4                           l538 051E  
                         l635 1734                           l906 0B4C                           l932 0CC0  
                         l934 0CC6                           l694 1412                           l784 1312  
                         l697 1426                           l874 09D0                           l891 0A46  
                         l859 1A92                           l797 1396                           l893 0A8A  
                         l894 0A90                           l895 0A96                           l898 0AE2  
                         u510 1846                           u450 1804                           u508 1830  
                         u470 181A                           u528 1848                           u490 182E  
                         u468 1806                           u488 181C                           _val 0031  
                         _pos 0030                           _row 0045              ??_CantaPartBaixa 005E  
                ___awmod@sign 0063                           prod 000FF3                           wreg 000FE8  
         __end_of_JoDirection 018C                ?_displayLogOut 0059                ?_displayString 006C  
                        l2303 1768                          l2321 179A                          l2313 177E  
                        l2307 1770                          l4011 190E                          l4003 18F6  
                        l2317 1792                          l4013 1916                          l2327 17B2  
                        l4023 1936                          l4007 1902                          l2505 1A82  
                        l2531 1AD8                          l2515 1A94                          l4027 1942  
                        l4019 192C                          l2525 1AC2                          l2509 1A8A  
                        l2357 0094                          l2519 1A9C                          l4077 1D1C  
                        l4085 1D26                          l6101 1590                          l5141 1438  
                        l6201 1510                          l7001 0C3E                          l5153 145C  
                        l6033 1BE4                          l6203 151C                          l5171 1486  
                        l6213 1534                          l4381 1D98                          l5165 147C  
                        l6303 12B4                          l6207 1524                          l6151 165E  
                        l6143 1644                          l6135 162A                          l7015 0C8E  
                        l5159 1472                          l6313 12DA                          l6217 153E  
                        l4377 1D90                          l7033 0CEE                          l7017 0C94  
                        l7009 0C54                          l5177 1492                          l6081 1FA8  
                        l7121 0F84                          l7113 0F66                          l7105 0F42  
                        l6219 1544                          l6227 1556                          l7027 0CDA  
                        l5187 14A8                          l6411 03D8                          l7203 10F4  
                        l7131 0FA8                          l6245 1216                          l6317 12DC  
                        l6165 168A                          l6325 02D2                          l7117 0F72  
                        l7109 0F54                          l7053 0E8A                          l6191 14FC  
                        l6175 14D0                          l7039 0D18                          l6511 053A  
                        l6503 0520                          l7207 110A                          l7143 0FDC  
                        l7127 0FA0                          l7047 0E70                          l7241 133A  
                        l6521 054C                          l6441 0432                          l6345 0312  
                        l6337 02EC                          l7081 0EEC                          l7073 0ECE  
                        l7065 0EB0                          l7313 1B62                          l6283 1278  
                        l6275 126A                          l7251 135A                          l7243 133E  
                        l7235 1326                          l3955 1AFE                          l6603 0644  
                        l6443 0438                          l6435 041C                          l6419 03F2  
                        l6371 036A                          l7219 112C                          l6293 1298  
                        l5805 1C3E                          l6517 0548                          l6429 0410  
                        l6357 0340                          l7181 1086                          l7157 101A  
                        l6279 126E                          l7263 137E                          l5815 1D5A  
                        l3959 1B00                          l6631 068C                          l6623 067E  
                        l6615 066C                          l6535 0578                          l6455 0462  
                        l6439 042A                          l7191 10BC                          l5809 1F3C  
                        l7273 13D2                          l7265 139C                          l7257 1368  
                        l7249 1358                          l5913 1E3C                          l5905 1E26  
                        l6721 07B0                          l6713 0798                          l6609 0656  
                        l6545 059A                          l6537 057C                          l6473 04A2  
                        l6393 03BE                          l6377 0386                          l7169 104E  
                        l7097 0F24                          l7089 0F06                          l6651 06CC  
                        l6643 06B4                          l6571 05E4                          l6547 059E  
                        l6483 04D4                          l6467 048E                          l6459 0474  
                        l6387 03A6                          l7195 10D2                          l7187 10A6  
                        l7277 13D6                          l7285 13F6                          l6821 09B0  
                        l6813 099C                          l6709 078A                          l6637 069E  
                        l6805 0878                          l5783 1C18                          l7279 13DC  
                        l5863 1DEC                          l6903 0AF2                          l6831 09CC  
                        l6823 09B4                          l5927 1E80                          l6751 0804  
                        l6727 07BE                          l6559 05C4                          l6487 04E2  
                        l6399 03C4                          l7199 10DE                          l5881 1CF2  
                        l6921 0B54                          l6913 0B16                          l6593 0628  
                        l6577 05F8                          l6569 05DE                          l6489 04E8  
                        l6931 0B74                          l6819 09AC                          l6771 0826  
                        l6763 0818                          l6747 07F4                          l6683 075C  
                        l6675 0744                          l6667 072C                          l6659 070C  
                        l6595 062E                          l5893 1D0C                          l5885 1CF8  
                        l6853 0A22                          l6837 09DA                          l5973 171C  
                        l6781 0840                          l6693 0774                          l6871 0A50  
                        l6855 0A28                          l6695 0778                          l6599 063E  
                        l5897 1D14                          l6945 0B9A                          l6929 0B6E  
                        l6881 0A8C                          l6865 0A40                          l6849 0A16  
                        l5969 1718                          l6955 0BB2                          l6939 0B90  
                        l5995 1CA0                          l6973 0BE0                          l6885 0AA0  
                        l6789 0858                          l6983 0C0C                          l6967 0BC8  
                        l6897 0AE8                          l6995 0C2C                          l6979 0BF4  
                        l6989 0C1C                          l6999 0C3A                          u3040 1FEE  
                        u5100 1A3A                          u5120 1A4E                          u5200 19E8  
                        u5140 1A66                          u5220 1A00                          u5118 1A3C  
                        u5310 1CFC                          u6030 046E                          u5080 1A24  
                        u5160 19BE                          u5138 1A50                          u5218 19EA  
                        u2850 1AEC                          u2930 191A                          u5180 19D4  
                        u5158 1A68                          u5238 1A02                          u6070 04CA  
                        u7120 13B0                          u5098 1A26                          u5178 19C0  
                        u5370 16EA                          u7140 13F0                          u5198 19D6  
                        u6440 076E                          u6280 0612                          u5810 12CA  
                        u7090 1350                          u5740 128E                          u5920 0380  
                        u6810 0CB2                          i2l77 1BC2                          u5890 0330  
                        _TIME 00BE                ?_SiIsAvailable 0059                          _game 0012  
                        _main 1B3A                          _send 002E                          fsr1h 000FE2  
                        fsr2h 000FDA                          indf1 000FE7                          indf2 000FDF  
                        fsr1l 000FE1                          fsr2l 000FD9                    _LcCursorOn 00EC  
                        btemp 007A                          prodh 000FF4                          prodl 000FF3  
             __end_of_LcClear 004C                          start 0032               __end_of_CantaIR 1F92  
               LcInit@columns 006A                ?_updateSysTime 0059               __end_of_JoMoved 0188  
                ___param_bank 000000                 _isPressed$638 005E              __end_of_MAINMENU 0299  
             ?_displayResults 0059                ??_displayError 006C               ?_updateGameTime 0059  
             ?_displaySysTime 0059                   Espera@Timer 0065                         ?_main 0059  
             __end_of___lbdiv 1D18                         _EEADR 000FA9               __end_of___awmod 194C  
             __end_of___lbmod 1E44                 ??_TiInitTimer 005E                         _T0CON 000FD5  
                       _ERROR 009F                         _TABLE 0201                         _RCREG 000FAE  
               ??_KeypadMotor 0065                         _TMR0H 000FD7                         _TMR0L 000FD6  
                       _SPBRG 000FAF                         _TXREG 000FAD               __end_of_btMotor 1410  
                 ?_DaFindUser 006B                         _Timer 000D              __end_of_SMSTABLE 02CF  
             __end_of_initSIO 1EB2                         _mUser 0047                         _moved 002B  
                       _timer 0035                   _LcCursorOff 00F6                         _state 003D  
                       _users 0100              __end_of_RSI_High 0032               __end_of_nextRow 00B6  
            __end_of_SMSMotor 157C                         tablat 000FF5                 ??_TiResetTics 005E  
                       ttemp5 007B                         ttemp6 007E                         ttemp7 0082  
                       status 000FD8                   ?_DaSaveUser 005E                         wtemp8 007B  
             ___lbdiv@divisor 005E              __end_of_LcGotoXY 1D76                saveEEPROM@data 005E  
             ___lbdiv@counter 0060                 ??__TiRSITimer 0059                    _TiGetTimer 1D18  
     EscriuPrimeraOrdre@ordre 005F               __initialization 194C                    _SiReadByte 0180  
                __end_of_main 1B84          __end_of_getFullValue 1B04                    _SiSendChar 015C  
                 _JoDirection 0188                        ??_main 0072                 __activetblptr 000002  
               ?_initJoystick 0059               ??_displayLogOut 006C               ??_displayString 006D  
                      _ADCON0 000FC2                        _ADCON1 000FC1                        _ADCON2 000FC0  
         __end_of_TiInitTimer 1DA2                        _ADRESH 000FC4                        _EEDATA 000FA8  
                      _EECON2 000FA7               ??_SiIsAvailable 005E           __end_of_KeypadMotor 130A  
                   ??_LcClear 006A                     ??_CantaIR 0060                        i2l4361 1BA8  
                      i2l4365 1BBE                        i2l4357 1BA0                        _LCDcol 0033  
              LcGotoXY@Fisics 0067                LcGotoXY@Column 006A                        _LCDrow 0034  
               ??_WaitForBusy 0065                 ?_readUserData 0059            _mUser@EEPROM$F1764 000B  
                   ??_JoMoved 005E                   ?_LcCursorOn 0059             KeSetMode@menuMode 005F  
                      _LcInit 157C               ??_updateSysTime 005E                  ?_DaGetStatus 0059  
                      _Espera 1F36                  _LcGotoXY$844 0068             __end_of_DaGetIdle 0154  
                      _RowAct 003B           __end_of_TiResetTics 1F66              __end_of_mainMenu 1736  
                      _h_Tics 000F                        _dataRX 0026                        _dataTX 0022  
                   ??___lbdiv 005F                     ??___awmod 0062                     ??___lbmod 005F  
                      _mScore 002F              __end_of_initData 1AE0              __end_of_initMenu 010A  
            __end_of_initTime 015C           __end_of__TiRSITimer 1BC8                        clear_0 1992  
                      clear_1 199E                        _minute 0077                        _second 0017  
                      _period 0036                     ??_btMotor 0065               ___awmod@divisor 0060  
                      isa$std 000001               ___awmod@counter 0062              __end_of_sendChar 1FDE  
                      _status 001C                ??_initJoystick 005E                     ??_initSIO 005F  
                __pdataCOMRAM 0072         __end_of_resetPosition 0178                     ??_nextRow 006B  
                __mediumconst 0000                        tblptrh 000FF7                        tblptrl 000FF6  
                      tblptru 000FF8                  ?_DaSaveScore 0059             __end_of_CantaData 1C64  
            ___lbdiv@dividend 005F                ??_readUserData 005F               ___lbmod@divisor 005E  
        __end_of_displayError 1CB0                    __accesstop 0080       __end_of__initialization 19A4  
           __end_of_KeSetMode 1E88               ___lbmod@counter 0060                 _LOGOUTMESSAGE 0096  
           __end_of_LcPutChar 1DF6          DaSaveScore@userScore 006C                 ___rparam_used 000001  
               __end_of_TABLE 020D                   ?_TiGetTimer 0059             __end_of_JoSetMode 014C  
              __pcstackCOMRAM 0059           __end_of_WaitForBusy 1C44                   ?_SiReadByte 0059  
                __pidataBANK0 186E         __end_of_joystickMotor 14C8                   ?_SiSendChar 0059  
                  __end_ofPL2 0DE2                    __end_ofPL4 0DEC                    __end_ofPL6 0E06  
                  __end_ofPL8 0E12              ___lbdiv@quotient 0061                     ?_RSI_High 0059  
                   ?_SMSMotor 0059             __end_of_TiGetTics 1E6A                _SiRecievedByte 0164  
                 _TiInitTimer 1D76                   _KeypadMotor 11FA                     ?_LcGotoXY 0066  
                  __pbssBANK1 0100                   _TiResetTics 1F56                    _btSendByte 00C2  
          _state@EEPROM$F1761 001E                       ?_LcInit 006A                 _CantaPartAlta 1A18  
                     ?_Espera 0065                   __TiRSITimer 1B84              ??_displayResults 006C  
            ??_updateGameTime 005F              ??_displaySysTime 006B        __end_of_SiRecievedByte 016A  
                  ??_RSI_High 005A                    ??_SMSMotor 0065                    _getPresses 017C  
                  _audioMotor 1628                       LcInit@i 006C                       _LCDcolm 0032  
                ??_DaFindUser 006C                    ??_LcGotoXY 0067                 ?_resetDisplay 0059  
                     _RESULTS 0080                  ?_LcCursorOff 0059                  _getFullValue 1AE0  
           __end_of_dataMotor 0DB4                     ?_mainMenu 0059                       _LcClear 0036  
                     _CantaIR 1F76                     ?_initData 0059                     ?_initMenu 0059  
                   ?_initTime 0059                  ??_DaSaveUser 005F                   _WaitForBusy 1C06  
                     _JoMoved 0184                    _readEEPROM 0098                ?_CantaPartAlta 0059  
           __end_of_getColumn 0114          __end_of_initJoystick 1ED4                 ??_btAvailable 005E  
                   ?_sendChar 0059                _DaGetNumScores 0190                       __Hparam 0000  
                     __Lparam 0000                    _initKeypad 1EF6            __end_of_DaFindUser 1FC6  
                     ___lbdiv 1CE4                       ___awmod 18E4                       ___lbmod 1E1E  
                _MAINMENUSIZE 0072                  __psmallconst 0200                    _currentKey 0042  
           __end_of_isPressed 1FF6                  ?_JoDirection 0059                       __pcinit 194C  
             ?_SiRecievedByte 0059                       _btMotor 1310                       __ramtop 0200  
        __end_of_readUserData 17C6                       __ptext0 1B3A                       __ptext1 0E6E  
                     __ptext2 0088                       __ptext3 1F92                       __ptext4 00B6  
                     __ptext5 1FC6                       __ptext6 00C2                       __ptext7 011C  
                     __ptext8 02D0                       __ptext9 0124             __end_of_initAudio 0062  
                   _T0CONbits 000FD5                     CantaIR@IR 0060                       _initSIO 1E8E  
                     _counter 0046                    _saveEEPROM 1ED4             __end_of_menuMotor 0956  
                     _joyMode 0029            __end_of_DaSaveUser 0076              ___awmod@dividend 005E  
              ??_resetDisplay 006A                       _nextRow 00A8                       _minutes 0078  
                     _seconds 0018                    _modifyTime 012C                       _timerRX 0027  
                     _timerTX 0023                       _pressed 0040                       _stateRX 0028  
                     _stateTX 0024               WaitForBusy@Busy 0065                       _userNum 001D  
                     _sysTime 00CE          end_of_initialization 19A4                    ??_mainMenu 006C  
                   _LOGINMENU 00A8                    ??_initData 0061                    ??_initMenu 005F  
                  ??_initTime 005F        __end_of_DaGetNumScores 0194                   ?_btSendByte 0059  
               __Lmediumconst 0000               TiGetTics@Handle 0062                  ??_LcCursorOn 0066  
           __end_of_timeMotor 11B8                    ??_sendChar 006C             __end_of_timerOver 012C  
                  _resetTimer 00CE                    _numPresses 003F               TiGetTics@actual 0063  
                   _RCSTAbits 000FAB                       postdec1 000FE5                       postdec2 000FDD  
                     postinc0 000FEE                       postinc1 000FE6                       postinc2 000FDE  
           __end_of_startSong 00C2           __end_of_btAvailable 0124                     _DaGetIdle 014C  
           __end_of_stopTimer 0174                     _PORTBbits 000F81                  _displayError 1C7C  
                   _PORTCbits 000F82                     _PORTDbits 000F83                   ?_getPresses 0059  
                 ?_audioMotor 0059             _KeGetGenericValue 1F16             _incrementPosition 0178  
          __end_of_LcCursorOn 00F6              ___lbmod@dividend 005F            ?_KeGetGenericValue 0059  
                   _TRISAbits 000F92                     _TRISBbits 000F93                     _TRISCbits 000F94  
                   _TRISDbits 000F95         __end_of_displayLogOut 1C06            ?_incrementPosition 0059  
           readEEPROM@address 005E         __end_of_displayString 1DBC           getFullValue@generic 0062  
                  _startTimer 1FF6           ??_KeGetGenericValue 005E               ??_CantaPartAlta 005E  
       __end_of_SiIsAvailable 0170                   ___lbmod@rem 0061           ??_incrementPosition 005E  
                   _CantaData 1C44               ?_DaGetNumScores 0059                   ?_readEEPROM 0059  
                   _TXSTAbits 000FAC                  ??_TiGetTimer 005E                  saveEEPROM@ad 005F  
              __end_of_LcInit 161C                     _KeSetMode 1E6A         __end_of_updateSysTime 0098  
                   _LcPutChar 1DCC                  ??_SiReadByte 005E                __end_of_Espera 1F56  
                 ?_initKeypad 0059                _KeGetCharValue 013C                  ??_SiSendChar 005E  
  __end_of_EscriuPrimeraOrdre 1856                    ?_DaGetIdle 0059                   _BAUDCONbits 000FB8  
                   _JoSetMode 0144     __end_of_KeGetGenericValue 1F36                 __pidataCOMRAM 0114  
            _timer@time$F1844 0014     __end_of_incrementPosition 017C                     _ColumnAct 003A  
                ?_TiInitTimer 0059                   ?_saveEEPROM 005E                  ?_KeypadMotor 0059  
                 __end_ofPL10 0E3E                   __end_ofPL20 174A                   __end_ofPL12 0E4C  
                 __end_ofPL30 11C2                   __end_ofPL22 1B22                   __end_ofPL14 1D48  
                 __end_ofPL40 1E1E                   __end_ofPL32 1B3A                   __end_ofPL24 17E4  
                 __end_ofPL16 1628                   __end_ofPL50 17F2                   __end_ofPL42 1C72  
                 __end_ofPL34 0960                   __end_ofPL26 175A                   __end_ofPL18 0E5A  
                 __end_ofPL60 11D0                   __end_ofPL52 0E68                   __end_ofPL44 096A  
                 __end_ofPL36 1DC4                   __end_ofPL28 1F76                   __end_ofPL70 0992  
                 __end_ofPL62 0980                   __end_ofPL54 1DCC                   __end_ofPL46 16CC  
                 __end_ofPL38 16BC                   __end_ofPL80 0E6E                   __end_ofPL72 1C7C  
                 __end_ofPL64 1766                   __end_ofPL56 1864                   __end_ofPL48 0974  
                 __end_ofPL90 099A                   __end_ofPL82 1310                   __end_ofPL74 1A18  
                 __end_ofPL66 0988                   __end_ofPL58 11CA                   __end_ofPL92 14CE  
                 __end_ofPL84 1E8E                   __end_ofPL76 186E                   __end_ofPL68 1A7E  
                 __end_ofPL94 11F2                   __end_ofPL86 11E2                   __end_ofPL78 11DA  
                 __end_ofPL96 0134                   __end_ofPL88 11EA                   __end_ofPL98 11FA  
         start_initialization 194C                     _TiGetTics 1E44                   ?_modifyTime 0059  
          __end_of_TiGetTimer 1D36              _state@Audio$F967 0039            __end_of_SiReadByte 0184  
                ?_TiResetTics 0059                    ?_CantaData 0059            __end_of_SiSendChar 0164  
                    ??_LcInit 006B                  _LOGREGSCREEN 00E9                   _btAvailable 011C  
                 ?_resetTimer 0059        __end_of_KeGetCharValue 0144                  ?__TiRSITimer 0059  
                    ??_Espera 0069  __end_of_displayScoresMarquee 013C                    ?_KeSetMode 0059  
        __end_of_resetDisplay 00E2                    ?_LcPutChar 0059                   __pdataBANK0 0080  
         displayString@string 006C                    ?_JoSetMode 0059                  _initJoystick 1EB2  
                 __pbssCOMRAM 0001                 __pcstackBANK0 00F5                    ?_TiGetTics 005E  
            SiSendChar@myByte 005E                   ?_startTimer 0059  __end_of_displayTimeRemaining 0088  
                    ?_LcClear 0059                      ?_CantaIR 0059                _CantaPartBaixa 19B2  
                ?_WaitForBusy 0059                  _readUserData 1766                      ?_JoMoved 0059  
                  sendChar@bt 006C                     _dataMotor 099A               ?_KeGetCharValue 0059  
            ??_SiRecievedByte 005E                     __pintcode 0008                     _getColumn 010A  
                    ?___lbdiv 005E                      ?___awmod 005E                      ?___lbmod 005E  
                   _available 003E               CantaPartBaixa@c 005F                   ??_DaGetIdle 005E  
                    ?_btMotor 0059                      ?_initSIO 0059                   __smallconst 0200  
                   _isPressed 1FDE                      ?_nextRow 0059                     _counterRX 0025  
                   _counterTX 0021                     _initAudio 004C                 _resetPosition 0174  
                   _menuMotor 02D0        __end_of_CantaPartBaixa 1A0E                      _MAINMENU 020D  
                 ??_CantaData 0060                  ??_btSendByte 005E                      _LATAbits 000F89  
                    _LATBbits 000F8A                      _LATCbits 000F8B                      _LATDbits 000F8C  
                  ?_dataMotor 0059                     _saveScore 001A                 ??_DaGetStatus 005E  
                   _saveState 0019                   ??_KeSetMode 005F                     _numScores 0020  
                    _PIR1bits 000F9E                   ??_LcPutChar 006B                     _timeMotor 0E6E  
                    _RCONbits 000FD0                    ?_getColumn 0059                     _timer_SMS 0043  
                   _timerOver 0124                     _timerSong 0037                      _SMSTABLE 0299  
               _joystickMotor 1410                   ??_JoSetMode 005E                     _topScores 0001  
                    _RSI_High 0008                    _ADCON0bits 000FC2                  ??_getPresses 005E  
                    _SMSMotor 14CE                  ??_audioMotor 0065                     _startSong 00B6  
              btSendByte@byte 005E                    ?_isPressed 0059            __end_of_btSendByte 00CE  
                    Espera@ms 0067                     _stopTimer 0170                      _LcGotoXY 1D48  
              ?_resetPosition 0059                   ??_TiGetTics 0060                    ?_initAudio 0059  
                   _sysMinute 0015                     _sysSecond 0016          _displayScoresMarquee 0134  
               ??_DaSaveScore 006C              ??_DaGetNumScores 005E                   LcGotoXY@Row 0066  
                  ?_menuMotor 0059                   _INTCON2bits 000FF1                     copy_data0 1960  
                   copy_data1 1980               ?_CantaPartBaixa 0059              _modifyTimeString 00DC  
                ??_readEEPROM 005E                menuMotor@state 0079                    _EECON1bits 000FA6  
          __end_of_getPresses 0180                      __Hrparam 0000            __end_of_audioMotor 16AA  
                    __Lrparam 0000                  ??_initKeypad 005F                    ?_timeMotor 0059  
               JoSetMode@mode 005E                    ?_timerOver 0059                ?_joystickMotor 0059  
         __end_of_DaGetStatus 0190          _displayTimeRemaining 0076                    ?_startSong 0059  
                ??_saveEEPROM 005F            __end_of_readEEPROM 00A8                    ?_stopTimer 0059  
       ?_displayScoresMarquee 0059                  ??_modifyTime 005E                _val@time$F1847 0011  
                _resetDisplay 00D8                      __ptext10 0170                      __ptext11 1FF6  
          _EscriuPrimeraOrdre 17F2                      __ptext20 017C                      __ptext12 00CE  
                    __ptext21 0076                      __ptext13 0174                      __ptext30 0180  
                    __ptext22 00E2                      __ptext14 00D8                      __ptext31 00EC  
                    __ptext23 1DA2                      __ptext15 012C                      __ptext40 1CB0  
                    __ptext32 00F6                      __ptext24 0134                      __ptext16 16CC  
                    __ptext41 0036                      __ptext33 1E6A                      __ptext25 1DF6  
                    __ptext17 18E4                      __ptext50 1EF6                      __ptext42 018C  
                    __ptext34 013C                      __ptext26 1BC8                      __ptext18 1FDE  
                    __ptext51 1EB2                      __ptext43 0190                      __ptext35 1AE0  
                    __ptext27 1C7C                      __ptext19 0178                      __ptext60 1DCC  
                    __ptext52 1A7E                      __ptext44 014C                      __ptext36 0144  
                    __ptext28 00A8                      __ptext61 1D48                      __ptext53 1766  
                    __ptext45 1FAC                      __ptext37 0184                      __ptext29 0164  
                    __ptext70 010A                      __ptext62 1C44                      __ptext54 0098  
                    __ptext46 1410                      __ptext38 0188                      __ptext71 157C  
                    __ptext63 1310                      __ptext55 004C                      __ptext47 0154  
                    __ptext39 0062                      __ptext80 1F56                      __ptext72 1C06  
                    __ptext64 015C                      __ptext56 099A                      __ptext48 1E8E  
                    __ptext81 1E44                      __ptext73 1D18                      __ptext65 016A  
                    __ptext57 1ED4                      __ptext49 0100                      __ptext74 1F36  
                    __ptext66 1628                      __ptext58 1E1E                      __ptext83 1B84  
                    __ptext75 17F2                      __ptext67 1D76                      __ptext59 1CE4  
                    __ptext76 1F76                      __ptext68 14CE                      __ptext77 19B2  
                    __ptext69 1F16                      __ptext78 1A18                      __ptext79 11FA  
              CantaPartAlta@c 005F               _lastUserPointer 001B                      _mainMenu 16CC  
          __end_of_initKeypad 1F16                      _s_Timers 0190                      _initData 1A7E  
                    _initMenu 0100                      _initTime 0154           ?_EscriuPrimeraOrdre 0059  
       __end_of_CantaPartAlta 1A74           __end_of_DaSaveScore 1CE4                   ??_dataMotor 006C  
               CantaData@Data 0060                      _sendChar 1FC6                  ?_btAvailable 0059  
                ??_resetTimer 005E            __end_of_saveEEPROM 1EF6                   ??_getColumn 005E  
                    isa$xinst 000000                      _previous 0041                      int$flags 007A  
                    _position 001F                      _stateSMS 003C            __end_of_modifyTime 012E  
                    _stateJoy 002A         ?_displayTimeRemaining 0059          ??_EscriuPrimeraOrdre 005E  
                  LcInit@rows 006B               ??_resetPosition 005E                   _periodTimer 0038  
                 ??_isPressed 005E                    _INTCONbits 000FF2                   ??_initAudio 005F  
          __end_of_resetTimer 00D8                   ??_menuMotor 006E                 ??_LcCursorOff 0066  
               ?_getFullValue 0059                  ??_startTimer 005F                      intlevel2 0000  
            ??_KeGetCharValue 0063                  _timerBounces 0044                    LcPutChar@c 006B  
                 _DaGetStatus 018C               ??_joystickMotor 005F                   ??_timeMotor 006D  
            _state@time$F1845 0013                   ??_timerOver 005E                 ??_JoDirection 005E  
          __end_of_startTimer 2000                _displayResults 1DF6                   ??_startSong 005F  
              _updateGameTime 1F92                _displaySysTime 00E2        ??_displayScoresMarquee 005E  
                 ??_stopTimer 005E                    _DaFindUser 1FAC             DaFindUser@logUser 006B  
              ??_getFullValue 005E                 _displayLogOut 1BC8                   _DaSaveScore 1CB0  
              _dataMotor$1786 00F5                 _displayString 1DA2                 _SiIsAvailable 016A  
                  _DaSaveUser 0062           __end_of_LcCursorOff 0100             DaSaveUser@regUser 005E  
