

Microchip MPLAB XC8 Assembler V2.36 build 20220127204148 
                                                                                               Mon Jun 06 12:19:42 2022

Microchip MPLAB XC8 C Compiler v2.36 (Free license) build 20220127204148 Og9 
     1                           	processor	18F4321
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    12                           	psect	text0,global,reloc=2,class=CODE,delta=1
    13                           	psect	text1,global,reloc=2,class=CODE,delta=1
    14                           	psect	text2,global,reloc=2,class=CODE,delta=1
    15                           	psect	text3,global,reloc=2,class=CODE,delta=1
    16                           	psect	text4,global,reloc=2,class=CODE,delta=1
    17                           	psect	text5,global,reloc=2,class=CODE,delta=1
    18                           	psect	text6,global,reloc=2,class=CODE,delta=1
    19                           	psect	text7,global,reloc=2,class=CODE,delta=1
    20                           	psect	text8,global,reloc=2,class=CODE,delta=1
    21                           	psect	text9,global,reloc=2,class=CODE,delta=1
    22                           	psect	text10,global,reloc=2,class=CODE,delta=1
    23                           	psect	text11,global,reloc=2,class=CODE,delta=1
    24                           	psect	text12,global,reloc=2,class=CODE,delta=1
    25                           	psect	text13,global,reloc=2,class=CODE,delta=1
    26                           	psect	text14,global,reloc=2,class=CODE,delta=1
    27                           	psect	text15,global,reloc=2,class=CODE,delta=1
    28                           	psect	text16,global,reloc=2,class=CODE,delta=1
    29                           	psect	text17,global,reloc=2,class=CODE,delta=1
    30                           	psect	text18,global,reloc=2,class=CODE,delta=1
    31                           	psect	text19,global,reloc=2,class=CODE,delta=1
    32                           	psect	text20,global,reloc=2,class=CODE,delta=1
    33                           	psect	text21,global,reloc=2,class=CODE,delta=1
    34                           	psect	text22,global,reloc=2,class=CODE,delta=1
    35                           	psect	text23,global,reloc=2,class=CODE,delta=1
    36                           	psect	text24,global,reloc=2,class=CODE,delta=1
    37                           	psect	text25,global,reloc=2,class=CODE,delta=1
    38                           	psect	text26,global,reloc=2,class=CODE,delta=1
    39                           	psect	text27,global,reloc=2,class=CODE,delta=1
    40                           	psect	text28,global,reloc=2,class=CODE,delta=1
    41                           	psect	text29,global,reloc=2,class=CODE,delta=1
    42                           	psect	text30,global,reloc=2,class=CODE,delta=1
    43                           	psect	text31,global,reloc=2,class=CODE,delta=1
    44                           	psect	text32,global,reloc=2,class=CODE,delta=1
    45                           	psect	text33,global,reloc=2,class=CODE,delta=1
    46                           	psect	text34,global,reloc=2,class=CODE,delta=1
    47                           	psect	text35,global,reloc=2,class=CODE,delta=1
    48                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    49                           	psect	text37,global,reloc=2,class=CODE,delta=1
    50                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    51                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    52                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    53                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    54                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    55  0000                     
    56                           ; Version 2.36
    57                           ; Generated 28/01/2022 GMT
    58                           ; 
    59                           ; Copyright Â© 2022, Microchip Technology Inc. and its subsidiaries ("Microchip")
    60                           ; All rights reserved.
    61                           ; 
    62                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    63                           ; 
    64                           ; Redistribution and use in source and binary forms, with or without modification, are
    65                           ; permitted provided that the following conditions are met:
    66                           ; 
    67                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    68                           ;        conditions and the following disclaimer.
    69                           ; 
    70                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    71                           ;        of conditions and the following disclaimer in the documentation and/or other
    72                           ;        materials provided with the distribution. Publication is not required when
    73                           ;        this file is used in an embedded application.
    74                           ; 
    75                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    76                           ;        software without specific prior written permission.
    77                           ; 
    78                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    79                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    80                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    81                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    82                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    83                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    84                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    85                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    86                           ; 
    87                           ; 
    88                           ; Code-generator required, PIC18F4321 Definitions
    89                           ; 
    90                           ; SFR Addresses
    91  0000                     
    92                           	psect	idataCOMRAM
    93  000F80                     __pidataCOMRAM:
    94                           	callstack 0
    95                           
    96                           ;initializer for menuMotor@state
    97  000F80  01                 	db	1
    98                           
    99                           	psect	smallconst
   100  000200                     __psmallconst:
   101                           	callstack 0
   102  000200  00                 	db	0
   103  000201  31                 	db	49
   104  000202  2E                 	db	46
   105  000203  50                 	db	80
   106  000204  4C                 	db	76
   107  000205  41                 	db	65
   108  000206  59                 	db	89
   109  000207  20                 	db	32
   110  000208  41                 	db	65
   111  000209  20                 	db	32
   112  00020A  47                 	db	71
   113  00020B  41                 	db	65
   114  00020C  4D                 	db	77
   115  00020D  45                 	db	69
   116  00020E  00                 	db	0
   117  00020F  00                 	db	0
   118  000210  00                 	db	0
   119  000211  00                 	db	0
   120  000212  00                 	db	0
   121  000213  00                 	db	0
   122  000214  00                 	db	0
   123  000215  00                 	db	0
   124  000216  00                 	db	0
   125  000217  00                 	db	0
   126  000218  00                 	db	0
   127  000219  00                 	db	0
   128  00021A  00                 	db	0
   129  00021B  00                 	db	0
   130  00021C  00                 	db	0
   131  00021D  32                 	db	50
   132  00021E  2E                 	db	46
   133  00021F  4D                 	db	77
   134  000220  4F                 	db	79
   135  000221  44                 	db	68
   136  000222  49                 	db	73
   137  000223  46                 	db	70
   138  000224  59                 	db	89
   139  000225  20                 	db	32
   140  000226  54                 	db	84
   141  000227  49                 	db	73
   142  000228  4D                 	db	77
   143  000229  45                 	db	69
   144  00022A  00                 	db	0
   145  00022B  00                 	db	0
   146  00022C  00                 	db	0
   147  00022D  00                 	db	0
   148  00022E  00                 	db	0
   149  00022F  00                 	db	0
   150  000230  00                 	db	0
   151  000231  00                 	db	0
   152  000232  00                 	db	0
   153  000233  00                 	db	0
   154  000234  00                 	db	0
   155  000235  00                 	db	0
   156  000236  00                 	db	0
   157  000237  00                 	db	0
   158  000238  00                 	db	0
   159  000239  33                 	db	51
   160  00023A  2E                 	db	46
   161  00023B  53                 	db	83
   162  00023C  48                 	db	72
   163  00023D  4F                 	db	79
   164  00023E  57                 	db	87
   165  00023F  20                 	db	32
   166  000240  47                 	db	71
   167  000241  45                 	db	69
   168  000242  4E                 	db	78
   169  000243  45                 	db	69
   170  000244  52                 	db	82
   171  000245  41                 	db	65
   172  000246  4C                 	db	76
   173  000247  20                 	db	32
   174  000248  54                 	db	84
   175  000249  4F                 	db	79
   176  00024A  50                 	db	80
   177  00024B  20                 	db	32
   178  00024C  35                 	db	53
   179  00024D  20                 	db	32
   180  00024E  53                 	db	83
   181  00024F  43                 	db	67
   182  000250  4F                 	db	79
   183  000251  52                 	db	82
   184  000252  45                 	db	69
   185  000253  53                 	db	83
   186  000254  00                 	db	0
   187  000255  34                 	db	52
   188  000256  2E                 	db	46
   189  000257  4C                 	db	76
   190  000258  4F                 	db	79
   191  000259  47                 	db	71
   192  00025A  4F                 	db	79
   193  00025B  55                 	db	85
   194  00025C  54                 	db	84
   195  00025D  00                 	db	0
   196  00025E  00                 	db	0
   197  00025F  00                 	db	0
   198  000260  00                 	db	0
   199  000261  00                 	db	0
   200  000262  00                 	db	0
   201  000263  00                 	db	0
   202  000264  00                 	db	0
   203  000265  00                 	db	0
   204  000266  00                 	db	0
   205  000267  00                 	db	0
   206  000268  00                 	db	0
   207  000269  00                 	db	0
   208  00026A  00                 	db	0
   209  00026B  00                 	db	0
   210  00026C  00                 	db	0
   211  00026D  00                 	db	0
   212  00026E  00                 	db	0
   213  00026F  00                 	db	0
   214  000270  00                 	db	0
   215  000271                     __end_of_MAINMENU:
   216                           	callstack 0
   217  000271                     _LOGREGSCREEN:
   218                           	callstack 0
   219  000271  55                 	db	85
   220  000272  53                 	db	83
   221  000273  45                 	db	69
   222  000274  52                 	db	82
   223  000275  3A                 	db	58
   224  000276  00                 	db	0
   225  000277  50                 	db	80
   226  000278  53                 	db	83
   227  000279  57                 	db	87
   228  00027A  44                 	db	68
   229  00027B  3A                 	db	58
   230  00027C  00                 	db	0
   231  00027D                     __end_of_LOGREGSCREEN:
   232                           	callstack 0
   233  00027D                     _TABLE:
   234                           	callstack 0
   235  00027D  31                 	db	49
   236  00027E  32                 	db	50
   237  00027F  33                 	db	51
   238  000280  34                 	db	52
   239  000281  35                 	db	53
   240  000282  36                 	db	54
   241  000283  37                 	db	55
   242  000284  38                 	db	56
   243  000285  39                 	db	57
   244  000286  2A                 	db	42
   245  000287  30                 	db	48
   246  000288  23                 	db	35
   247  000289                     __end_of_TABLE:
   248                           	callstack 0
   249  000289                     _SMSTABLE:
   250                           	callstack 0
   251  000289  31                 	db	49
   252  00028A  00                 	db	0
   253  00028B  00                 	db	0
   254  00028C  00                 	db	0
   255  00028D  00                 	db	0
   256  00028E  00                 	db	0
   257  00028F  41                 	db	65
   258  000290  42                 	db	66
   259  000291  43                 	db	67
   260  000292  32                 	db	50
   261  000293  00                 	db	0
   262  000294  00                 	db	0
   263  000295  44                 	db	68
   264  000296  45                 	db	69
   265  000297  46                 	db	70
   266  000298  33                 	db	51
   267  000299  00                 	db	0
   268  00029A  00                 	db	0
   269  00029B  47                 	db	71
   270  00029C  48                 	db	72
   271  00029D  49                 	db	73
   272  00029E  34                 	db	52
   273  00029F  00                 	db	0
   274  0002A0  00                 	db	0
   275  0002A1  4A                 	db	74
   276  0002A2  4B                 	db	75
   277  0002A3  4C                 	db	76
   278  0002A4  35                 	db	53
   279  0002A5  00                 	db	0
   280  0002A6  00                 	db	0
   281  0002A7  4D                 	db	77
   282  0002A8  4E                 	db	78
   283  0002A9  4F                 	db	79
   284  0002AA  36                 	db	54
   285  0002AB  00                 	db	0
   286  0002AC  00                 	db	0
   287  0002AD  50                 	db	80
   288  0002AE  51                 	db	81
   289  0002AF  52                 	db	82
   290  0002B0  53                 	db	83
   291  0002B1  37                 	db	55
   292  0002B2  00                 	db	0
   293  0002B3  54                 	db	84
   294  0002B4  55                 	db	85
   295  0002B5  56                 	db	86
   296  0002B6  38                 	db	56
   297  0002B7  00                 	db	0
   298  0002B8  00                 	db	0
   299  0002B9  57                 	db	87
   300  0002BA  58                 	db	88
   301  0002BB  59                 	db	89
   302  0002BC  5A                 	db	90
   303  0002BD  39                 	db	57
   304  0002BE  00                 	db	0
   305  0002BF                     __end_of_SMSTABLE:
   306                           	callstack 0
   307  0002BF                     _LOGINMENU:
   308                           	callstack 0
   309  0002BF  31                 	db	49
   310  0002C0  2E                 	db	46
   311  0002C1  4C                 	db	76
   312  0002C2  4F                 	db	79
   313  0002C3  47                 	db	71
   314  0002C4  49                 	db	73
   315  0002C5  4E                 	db	78
   316  0002C6  00                 	db	0
   317  0002C7  00                 	db	0
   318  0002C8  00                 	db	0
   319  0002C9  00                 	db	0
   320  0002CA  32                 	db	50
   321  0002CB  2E                 	db	46
   322  0002CC  52                 	db	82
   323  0002CD  45                 	db	69
   324  0002CE  47                 	db	71
   325  0002CF  49                 	db	73
   326  0002D0  53                 	db	83
   327  0002D1  54                 	db	84
   328  0002D2  45                 	db	69
   329  0002D3  52                 	db	82
   330  0002D4  00                 	db	0
   331  0002D5                     __end_of_LOGINMENU:
   332                           	callstack 0
   333  0000                     _TRISCbits	set	3988
   334  0000                     _TRISDbits	set	3989
   335  0000                     _TRISBbits	set	3987
   336  0000                     _TMR0L	set	4054
   337  0000                     _TMR0H	set	4055
   338  0000                     _TXSTAbits	set	4012
   339  0000                     _TRISC	set	3988
   340  0000                     _ADCON0bits	set	4034
   341  0000                     _T0CONbits	set	4053
   342  0000                     _OSCTUNEbits	set	3995
   343  0000                     _PORTBbits	set	3969
   344  0000                     _LATA	set	3977
   345  0000                     _TRISAbits	set	3986
   346  0000                     _OSCTUNE	set	3995
   347  0000                     _OSCCON	set	4051
   348  0000                     _T0CON	set	4053
   349  0000                     _INTCONbits	set	4082
   350  0000                     _RCSTA	set	4011
   351  0000                     _TXSTA	set	4012
   352  0000                     _SPBRG	set	4015
   353  0000                     _ADCON2	set	4032
   354  0000                     _ADCON1	set	4033
   355  0000                     _ADCON0	set	4034
   356  0000                     _RCONbits	set	4048
   357  0000                     _LATDbits	set	3980
   358  0000                     _LATC	set	3979
   359  0000                     _LATBbits	set	3978
   360  0000                     _INTCON2bits	set	4081
   361  0000                     _PORTDbits	set	3971
   362  0000                     _ADRESH	set	4036
   363  0000                     _BAUDCONbits	set	4024
   364  0000                     _TXREG	set	4013
   365  0002D5  00                 	db	0	; dummy byte at the end
   366  0000                     
   367                           ; #config settings
   368                           
   369                           	psect	cinit
   370  000D0A                     __pcinit:
   371                           	callstack 0
   372  000D0A                     start_initialization:
   373                           	callstack 0
   374  000D0A                     __initialization:
   375                           	callstack 0
   376                           
   377                           ; Initialize objects allocated to COMRAM (1 bytes)
   378                           ; load TBLPTR registers with __pidataCOMRAM
   379  000D0A  0E80               	movlw	low __pidataCOMRAM
   380  000D0C  6EF6               	movwf	tblptrl,c
   381  000D0E  0E0F               	movlw	high __pidataCOMRAM
   382  000D10  6EF7               	movwf	tblptrh,c
   383  000D12  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   384  000D14  6EF8               	movwf	tblptru,c
   385  000D16  0009               	tblrd		*+	;fetch initializer
   386  000D18  CFF5 F03F          	movff	tablat,__pdataCOMRAM
   387                           
   388                           ; Clear objects allocated to BANK0 (75 bytes)
   389  000D1C  EE00  F080         	lfsr	0,__pbssBANK0
   390  000D20  0E4B               	movlw	75
   391  000D22                     clear_0:
   392  000D22  6AEE               	clrf	postinc0,c
   393  000D24  06E8               	decf	wreg,f,c
   394  000D26  E1FD               	bnz	clear_0
   395                           
   396                           ; Clear objects allocated to COMRAM (34 bytes)
   397  000D28  EE00  F001         	lfsr	0,__pbssCOMRAM
   398  000D2C  0E22               	movlw	34
   399  000D2E                     clear_1:
   400  000D2E  6AEE               	clrf	postinc0,c
   401  000D30  06E8               	decf	wreg,f,c
   402  000D32  E1FD               	bnz	clear_1
   403  000D34                     end_of_initialization:
   404                           	callstack 0
   405  000D34                     __end_of__initialization:
   406                           	callstack 0
   407  000D34  9040               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   408  000D36  9240               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   409  000D38  0E00               	movlw	low (__Lmediumconst shr (0+16))
   410  000D3A  6EF8               	movwf	tblptru,c
   411  000D3C  0100               	movlb	0
   412  000D3E  EF1E  F006         	goto	_main	;jump to C main() function
   413                           
   414                           	psect	bssCOMRAM
   415  000001                     __pbssCOMRAM:
   416                           	callstack 0
   417  000001                     _Timer:
   418                           	callstack 0
   419  000001                     	ds	2
   420  000003                     _h_Tics:
   421                           	callstack 0
   422  000003                     	ds	2
   423  000005                     _tick_count:
   424                           	callstack 0
   425  000005                     	ds	2
   426  000007                     joystickMotor@state:
   427                           	callstack 0
   428  000007                     	ds	1
   429  000008                     _moved:
   430                           	callstack 0
   431  000008                     	ds	1
   432  000009                     _y:
   433                           	callstack 0
   434  000009                     	ds	1
   435  00000A                     _x:
   436                           	callstack 0
   437  00000A                     	ds	1
   438  00000B                     _send:
   439                           	callstack 0
   440  00000B                     	ds	1
   441  00000C                     _val:
   442                           	callstack 0
   443  00000C                     	ds	1
   444  00000D                     _LCDcol:
   445                           	callstack 0
   446  00000D                     	ds	1
   447  00000E                     _LCDrow:
   448                           	callstack 0
   449  00000E                     	ds	1
   450  00000F                     	ds	1
   451  000010                     	ds	1
   452  000011                     	ds	1
   453  000012                     	ds	1
   454  000013                     _ColumnAct:
   455                           	callstack 0
   456  000013                     	ds	1
   457  000014                     _RowAct:
   458                           	callstack 0
   459  000014                     	ds	1
   460  000015                     _Columns:
   461                           	callstack 0
   462  000015                     	ds	1
   463  000016                     _Rows:
   464                           	callstack 0
   465  000016                     	ds	1
   466  000017                     _stateSMS:
   467                           	callstack 0
   468  000017                     	ds	1
   469  000018                     _state:
   470                           	callstack 0
   471  000018                     	ds	1
   472  000019                     _available:
   473                           	callstack 0
   474  000019                     	ds	1
   475  00001A                     _numPresses:
   476                           	callstack 0
   477  00001A                     	ds	1
   478  00001B                     _pressed:
   479                           	callstack 0
   480  00001B                     	ds	1
   481  00001C                     _previous:
   482                           	callstack 0
   483  00001C                     	ds	1
   484  00001D                     _currentKey:
   485                           	callstack 0
   486  00001D                     	ds	1
   487  00001E                     _timer_SMS:
   488                           	callstack 0
   489  00001E                     	ds	1
   490  00001F                     _timerBounces:
   491                           	callstack 0
   492  00001F                     	ds	1
   493  000020                     _row:
   494                           	callstack 0
   495  000020                     	ds	1
   496  000021                     _counter:
   497                           	callstack 0
   498  000021                     	ds	1
   499  000022                     _tmr:
   500                           	callstack 0
   501  000022                     	ds	1
   502                           
   503                           	psect	dataCOMRAM
   504  00003F                     __pdataCOMRAM:
   505                           	callstack 0
   506  00003F                     menuMotor@state:
   507                           	callstack 0
   508  00003F                     	ds	1
   509                           
   510                           	psect	bssBANK0
   511  000080                     __pbssBANK0:
   512                           	callstack 0
   513  000080                     _s_Timers:
   514                           	callstack 0
   515  000080                     	ds	75
   516                           
   517                           	psect	cstackCOMRAM
   518  000023                     __pcstackCOMRAM:
   519                           	callstack 0
   520  000023                     
   521                           ; 1 bytes @ 0x0
   522  000023                     	ds	1
   523  000024                     ??_RSI_High:
   524                           
   525                           ; 1 bytes @ 0x1
   526  000024                     	ds	4
   527  000028                     ??_KeGetGenericValue:
   528  000028                     ??_getFullValue:
   529  000028                     ??_EscriuPrimeraOrdre:
   530  000028                     ??_CantaPartAlta:
   531  000028                     ??_CantaPartBaixa:
   532  000028                     ?_TiGetTics:
   533                           	callstack 0
   534  000028                     TiResetTics@Handle:
   535                           	callstack 0
   536  000028                     _isPressed$607:
   537                           	callstack 0
   538  000028                     SiSendChar@myByte:
   539                           	callstack 0
   540                           
   541                           ; 1 bytes @ 0x5
   542  000028                     	ds	1
   543  000029                     ??_joystickMotor:
   544  000029                     KeSetMode@menuMode:
   545                           	callstack 0
   546  000029                     CantaPartAlta@c:
   547                           	callstack 0
   548  000029                     CantaPartBaixa@c:
   549                           	callstack 0
   550  000029                     EscriuPrimeraOrdre@ordre:
   551                           	callstack 0
   552                           
   553                           ; 1 bytes @ 0x6
   554  000029                     	ds	1
   555  00002A                     ??_TiGetTics:
   556  00002A                     CantaIR@IR:
   557                           	callstack 0
   558  00002A                     CantaData@Data:
   559                           	callstack 0
   560                           
   561                           ; 1 bytes @ 0x7
   562  00002A                     	ds	2
   563  00002C                     TiGetTics@Handle:
   564                           	callstack 0
   565  00002C                     getFullValue@generic:
   566                           	callstack 0
   567                           
   568                           ; 1 bytes @ 0x9
   569  00002C                     	ds	1
   570  00002D                     TiGetTics@actual:
   571                           	callstack 0
   572                           
   573                           ; 2 bytes @ 0xA
   574  00002D                     	ds	2
   575  00002F                     ??_SMSMotor:
   576  00002F                     ??_KeypadMotor:
   577  00002F                     WaitForBusy@Busy:
   578                           	callstack 0
   579  00002F                     Espera@Timer:
   580                           	callstack 0
   581                           
   582                           ; 2 bytes @ 0xC
   583  00002F                     	ds	1
   584  000030                     LcGotoXY@Row:
   585                           	callstack 0
   586                           
   587                           ; 1 bytes @ 0xD
   588  000030                     	ds	1
   589  000031                     ??_LcGotoXY:
   590  000031                     Espera@ms:
   591                           	callstack 0
   592                           
   593                           ; 2 bytes @ 0xE
   594  000031                     	ds	2
   595  000033                     ??_Espera:
   596  000033                     _LcGotoXY$813:
   597                           	callstack 0
   598                           
   599                           ; 2 bytes @ 0x10
   600  000033                     	ds	1
   601  000034                     LcInit@columns:
   602                           	callstack 0
   603                           
   604                           ; 1 bytes @ 0x11
   605  000034                     	ds	1
   606  000035                     ??_LcInit:
   607  000035                     LcGotoXY@Fisics:
   608                           	callstack 0
   609                           
   610                           ; 2 bytes @ 0x12
   611  000035                     	ds	1
   612  000036                     LcInit@rows:
   613                           	callstack 0
   614                           
   615                           ; 1 bytes @ 0x13
   616  000036                     	ds	1
   617  000037                     LcGotoXY@Column:
   618                           	callstack 0
   619  000037                     LcInit@i:
   620                           	callstack 0
   621                           
   622                           ; 2 bytes @ 0x14
   623  000037                     	ds	1
   624  000038                     LcPutChar@c:
   625                           	callstack 0
   626                           
   627                           ; 1 bytes @ 0x15
   628  000038                     	ds	1
   629  000039                     displayMenu@row:
   630                           	callstack 0
   631                           
   632                           ; 1 bytes @ 0x16
   633  000039                     	ds	1
   634  00003A                     ??_displayMenu:
   635                           
   636                           ; 1 bytes @ 0x17
   637  00003A                     	ds	2
   638  00003C                     displayMenu@menuMode:
   639                           	callstack 0
   640                           
   641                           ; 1 bytes @ 0x19
   642  00003C                     	ds	1
   643  00003D                     ??_menuMotor:
   644                           
   645                           ; 1 bytes @ 0x1A
   646  00003D                     	ds	2
   647  00003F                     
   648                           ; 1 bytes @ 0x1C
   649 ;;
   650 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   651 ;;
   652 ;; *************** function _main *****************
   653 ;; Defined at:
   654 ;;		line 46 in file "main.c"
   655 ;; Parameters:    Size  Location     Type
   656 ;;		None
   657 ;; Auto vars:     Size  Location     Type
   658 ;;		None
   659 ;; Return value:  Size  Location     Type
   660 ;;                  1    wreg      void 
   661 ;; Registers used:
   662 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   663 ;; Tracked objects:
   664 ;;		On entry : 0/0
   665 ;;		On exit  : 0/0
   666 ;;		Unchanged: 0/0
   667 ;; Data sizes:     COMRAM   BANK0   BANK1
   668 ;;      Params:         0       0       0
   669 ;;      Locals:         0       0       0
   670 ;;      Temps:          0       0       0
   671 ;;      Totals:         0       0       0
   672 ;;Total ram usage:        0 bytes
   673 ;; Hardware stack levels required when called: 8
   674 ;; This function calls:
   675 ;;		_InitPorts
   676 ;;		_KeypadMotor
   677 ;;		_LcInit
   678 ;;		_SMSMotor
   679 ;;		_TiGetTics
   680 ;;		_TiGetTimer
   681 ;;		_TiInitTimer
   682 ;;		_TiResetTics
   683 ;;		_initJoystick
   684 ;;		_initKeypad
   685 ;;		_initSIO
   686 ;;		_joystickMotor
   687 ;;		_menuMotor
   688 ;; This function is called by:
   689 ;;		Startup code after reset
   690 ;; This function uses a non-reentrant model
   691 ;;
   692                           
   693                           	psect	text0
   694  000C3C                     __ptext0:
   695                           	callstack 0
   696  000C3C                     _main:
   697                           	callstack 23
   698                           
   699                           ;incstack = 0
   700  000C3C  EC9C  F007         	call	_InitPorts	;wreg free
   701  000C40  ECA1  F006         	call	_TiInitTimer	;wreg free
   702  000C44  EC68  F006         	call	_TiGetTimer	;wreg free
   703  000C48  6E22               	movwf	_tmr^0,c
   704  000C4A  EC6B  F007         	call	_initJoystick	;wreg free
   705  000C4E  EC5C  F007         	call	_initKeypad	;wreg free
   706  000C52  0E10               	movlw	16
   707  000C54  6E34               	movwf	LcInit@columns^0,c
   708  000C56  0E02               	movlw	2
   709  000C58  ECBE  F002         	call	_LcInit
   710  000C5C  EC7A  F007         	call	_initSIO	;wreg free
   711  000C60                     l2571:
   712  000C60  5022               	movf	_tmr^0,w,c
   713  000C62  EC05  F007         	call	_TiGetTics
   714  000C66  BE29               	btfsc	(?_TiGetTics+1)^0,7,c
   715  000C68  D00A               	goto	l2577
   716  000C6A  0EE8               	movlw	232
   717  000C6C  5C28               	subwf	?_TiGetTics^0,w,c
   718  000C6E  0E03               	movlw	3
   719  000C70  5829               	subwfb	(?_TiGetTics+1)^0,w,c
   720  000C72  A0D8               	btfss	status,0,c
   721  000C74  D004               	goto	l2577
   722  000C76  1E89               	comf	137,f,c	;volatile
   723  000C78  5022               	movf	_tmr^0,w,c
   724  000C7A  EC86  F007         	call	_TiResetTics
   725  000C7E                     l2577:
   726  000C7E  EC3F  F003         	call	_SMSMotor	;wreg free
   727  000C82  EC1F  F002         	call	_KeypadMotor	;wreg free
   728  000C86  EC6B  F001         	call	_menuMotor	;wreg free
   729  000C8A  ECAF  F003         	call	_joystickMotor	;wreg free
   730  000C8E  D7E8               	goto	l2571
   731  000C90                     __end_of_main:
   732                           	callstack 0
   733                           
   734 ;; *************** function _menuMotor *****************
   735 ;; Defined at:
   736 ;;		line 18 in file "Menu.c"
   737 ;; Parameters:    Size  Location     Type
   738 ;;		None
   739 ;; Auto vars:     Size  Location     Type
   740 ;;		None
   741 ;; Return value:  Size  Location     Type
   742 ;;                  1    wreg      void 
   743 ;; Registers used:
   744 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   745 ;; Tracked objects:
   746 ;;		On entry : 0/0
   747 ;;		On exit  : 0/0
   748 ;;		Unchanged: 0/0
   749 ;; Data sizes:     COMRAM   BANK0   BANK1
   750 ;;      Params:         0       0       0
   751 ;;      Locals:         0       0       0
   752 ;;      Temps:          2       0       0
   753 ;;      Totals:         2       0       0
   754 ;;Total ram usage:        2 bytes
   755 ;; Hardware stack levels used: 1
   756 ;; Hardware stack levels required when called: 7
   757 ;; This function calls:
   758 ;;		_KeGetCharValue
   759 ;;		_KeGetGenericValue
   760 ;;		_KeSetMode
   761 ;;		_LcClear
   762 ;;		_LcCursorOff
   763 ;;		_LcCursorOn
   764 ;;		_LcGotoXY
   765 ;;		_LcPutChar
   766 ;;		_displayMenu
   767 ;;		_getPresses
   768 ;;		_isPressed
   769 ;; This function is called by:
   770 ;;		_main
   771 ;; This function uses a non-reentrant model
   772 ;;
   773                           
   774                           	psect	text1
   775  0002D6                     __ptext1:
   776                           	callstack 0
   777  0002D6                     _menuMotor:
   778                           	callstack 23
   779                           
   780                           ;Menu.c: 19:     static char state = 1;;Menu.c: 20:     switch (state){
   781                           
   782                           ;incstack = 0
   783  0002D6  D098               	goto	l2551
   784  0002D8                     l2467:
   785                           
   786                           ;Menu.c: 22:             displayMenu(0,0);
   787  0002D8  0E00               	movlw	0
   788  0002DA  6E39               	movwf	displayMenu@row^0,c
   789  0002DC  0E00               	movlw	0
   790  0002DE  EC13  F004         	call	_displayMenu
   791                           
   792                           ;Menu.c: 23:             if (LCDrow == 2){
   793  0002E2  0E02               	movlw	2
   794  0002E4  180E               	xorwf	_LCDrow^0,w,c
   795  0002E6  A4D8               	btfss	status,2,c
   796  0002E8  0012               	return	
   797                           
   798                           ;Menu.c: 24:                 LcCursorOff();
   799  0002EA  ECA9  F007         	call	_LcCursorOff	;wreg free
   800                           
   801                           ;Menu.c: 25:                 KeSetMode(0);
   802  0002EE  0E00               	movlw	0
   803  0002F0  ECEF  F006         	call	_KeSetMode
   804                           
   805                           ;Menu.c: 26:                 state = 2;
   806  0002F4  0E02               	movlw	2
   807  0002F6  6E3F               	movwf	menuMotor@state^0,c
   808  0002F8  0012               	return	
   809  0002FA                     l2475:
   810                           
   811                           ;Menu.c: 30:             if (isPressed()){
   812  0002FA  EC2C  F007         	call	_isPressed	;wreg free
   813  0002FE  0900               	iorlw	0
   814  000300  B4D8               	btfsc	status,2,c
   815  000302  0012               	return	
   816                           
   817                           ;Menu.c: 31:                 val = KeGetGenericValue() - '0';
   818  000304  EC4C  F007         	call	_KeGetGenericValue	;wreg free
   819  000308  0FD0               	addlw	208
   820  00030A  6E0C               	movwf	_val^0,c
   821                           
   822                           ;Menu.c: 32:                 if (val == 1||val == 2){
   823  00030C  040C               	decf	_val^0,w,c
   824  00030E  B4D8               	btfsc	status,2,c
   825  000310  D004               	goto	u1980
   826  000312  0E02               	movlw	2
   827  000314  180C               	xorwf	_val^0,w,c
   828  000316  A4D8               	btfss	status,2,c
   829  000318  0012               	return	
   830  00031A                     u1980:
   831                           
   832                           ;Menu.c: 33:                     LcClear();
   833  00031A  EC3C  F007         	call	_LcClear	;wreg free
   834                           
   835                           ;Menu.c: 34:                     LcGotoXY(0,0);
   836  00031E  0E00               	movlw	0
   837  000320  6E30               	movwf	LcGotoXY@Row^0,c
   838  000322  0E00               	movlw	0
   839  000324  EC71  F004         	call	_LcGotoXY
   840                           
   841                           ;Menu.c: 35:                     KeSetMode(1);
   842  000328  0E01               	movlw	1
   843  00032A  ECEF  F006         	call	_KeSetMode
   844                           
   845                           ;Menu.c: 36:                     LCDcol = LCDrow = 0;
   846  00032E  0E00               	movlw	0
   847  000330  6E0E               	movwf	_LCDrow^0,c
   848  000332  C00E  F00D         	movff	_LCDrow,_LCDcol
   849                           
   850                           ;Menu.c: 37:                     state = 3;
   851  000336  0E03               	movlw	3
   852  000338  6E3F               	movwf	menuMotor@state^0,c
   853  00033A  0012               	return	
   854  00033C                     l2489:
   855                           
   856                           ;Menu.c: 43:             displayMenu(1,0);
   857  00033C  0E00               	movlw	0
   858  00033E  6E39               	movwf	displayMenu@row^0,c
   859  000340  0E01               	movlw	1
   860  000342  EC13  F004         	call	_displayMenu
   861                           
   862                           ;Menu.c: 44:             if (LCDrow == 2){
   863  000346  0E02               	movlw	2
   864  000348  180E               	xorwf	_LCDrow^0,w,c
   865  00034A  A4D8               	btfss	status,2,c
   866  00034C  0012               	return	
   867                           
   868                           ;Menu.c: 45:                 LCDrow = 0;
   869  00034E  0E00               	movlw	0
   870  000350  6E0E               	movwf	_LCDrow^0,c
   871                           
   872                           ;Menu.c: 46:                 LCDcol = 5;
   873  000352  0E05               	movlw	5
   874  000354  6E0D               	movwf	_LCDcol^0,c
   875                           
   876                           ;Menu.c: 47:                 LcGotoXY(LCDcol,LCDrow);
   877  000356  C00E  F030         	movff	_LCDrow,LcGotoXY@Row
   878  00035A  500D               	movf	_LCDcol^0,w,c
   879  00035C  EC71  F004         	call	_LcGotoXY
   880                           
   881                           ;Menu.c: 48:                 LcCursorOn();
   882  000360  ECA3  F007         	call	_LcCursorOn	;wreg free
   883                           
   884                           ;Menu.c: 49:                 state = 4;
   885  000364  0E04               	movlw	4
   886  000366  6E3F               	movwf	menuMotor@state^0,c
   887  000368  0012               	return	
   888  00036A                     l2499:
   889                           
   890                           ;Menu.c: 53:             if (LCDcol >= 12 && getPresses() == 0){
   891  00036A  0E0B               	movlw	11
   892  00036C  640D               	cpfsgt	_LCDcol^0,c
   893  00036E  D008               	goto	l2505
   894  000370  ECBE  F007         	call	_getPresses	;wreg free
   895  000374  0900               	iorlw	0
   896  000376  A4D8               	btfss	status,2,c
   897  000378  D003               	goto	l2505
   898  00037A                     u2010:
   899                           
   900                           ;Menu.c: 54:                 state = 5;
   901  00037A  0E05               	movlw	5
   902  00037C  6E3F               	movwf	menuMotor@state^0,c
   903                           
   904                           ;Menu.c: 55:             }else if (isPressed()){
   905  00037E  0012               	return	
   906  000380                     l2505:
   907  000380  EC2C  F007         	call	_isPressed	;wreg free
   908  000384  0900               	iorlw	0
   909  000386  B4D8               	btfsc	status,2,c
   910  000388  0012               	return	
   911                           
   912                           ;Menu.c: 56:                 if (getPresses() == 2){
   913  00038A  ECBE  F007         	call	_getPresses	;wreg free
   914  00038E  0A02               	xorlw	2
   915  000390  A4D8               	btfss	status,2,c
   916  000392  D006               	goto	l2513
   917                           
   918                           ;Menu.c: 57:                     LcGotoXY(LCDcol--,LCDrow);
   919  000394  C00E  F030         	movff	_LCDrow,LcGotoXY@Row
   920  000398  500D               	movf	_LCDcol^0,w,c
   921  00039A  EC71  F004         	call	_LcGotoXY
   922  00039E  060D               	decf	_LCDcol^0,f,c
   923  0003A0                     l2513:
   924                           
   925                           ;Menu.c: 59:                 if (KeGetGenericValue() != '#'){
   926  0003A0  EC4C  F007         	call	_KeGetGenericValue	;wreg free
   927  0003A4  0A23               	xorlw	35
   928  0003A6  B4D8               	btfsc	status,2,c
   929  0003A8  D7E8               	goto	u2010
   930                           
   931                           ;Menu.c: 60:                     LcPutChar(KeGetCharValue());
   932  0003AA  ECB5  F007         	call	_KeGetCharValue	;wreg free
   933  0003AE  EC0D  F005         	call	_LcPutChar
   934  0003B2                     l2517:
   935                           
   936                           ;Menu.c: 61:                     LCDcol++;
   937  0003B2  2A0D               	incf	_LCDcol^0,f,c
   938  0003B4  0012               	return	
   939  0003B6                     l2525:
   940                           
   941                           ;Menu.c: 77:             LCDrow = 1;
   942  0003B6  0E01               	movlw	1
   943  0003B8  6E0E               	movwf	_LCDrow^0,c
   944                           
   945                           ;Menu.c: 78:             LCDcol = 5;
   946  0003BA  0E05               	movlw	5
   947  0003BC  6E0D               	movwf	_LCDcol^0,c
   948                           
   949                           ;Menu.c: 79:             KeSetMode(1);
   950  0003BE  0E01               	movlw	1
   951  0003C0  ECEF  F006         	call	_KeSetMode
   952                           
   953                           ;Menu.c: 80:             LcGotoXY(LCDcol,LCDrow);
   954  0003C4  C00E  F030         	movff	_LCDrow,LcGotoXY@Row
   955  0003C8  500D               	movf	_LCDcol^0,w,c
   956  0003CA  EC71  F004         	call	_LcGotoXY
   957                           
   958                           ;Menu.c: 81:             state = 6;
   959  0003CE  0E06               	movlw	6
   960  0003D0  6E3F               	movwf	menuMotor@state^0,c
   961                           
   962                           ;Menu.c: 82:             break;
   963  0003D2  0012               	return	
   964  0003D4                     l2531:
   965                           
   966                           ;Menu.c: 84:             if (isPressed()){
   967  0003D4  EC2C  F007         	call	_isPressed	;wreg free
   968  0003D8  0900               	iorlw	0
   969  0003DA  B4D8               	btfsc	status,2,c
   970  0003DC  0012               	return	
   971                           
   972                           ;Menu.c: 85:                 if (getPresses() == 2){
   973  0003DE  ECBE  F007         	call	_getPresses	;wreg free
   974  0003E2  0A02               	xorlw	2
   975  0003E4  A4D8               	btfss	status,2,c
   976  0003E6  D006               	goto	l2539
   977                           
   978                           ;Menu.c: 86:                     LcGotoXY(LCDcol--,LCDrow);
   979  0003E8  C00E  F030         	movff	_LCDrow,LcGotoXY@Row
   980  0003EC  500D               	movf	_LCDcol^0,w,c
   981  0003EE  EC71  F004         	call	_LcGotoXY
   982  0003F2  060D               	decf	_LCDcol^0,f,c
   983  0003F4                     l2539:
   984                           
   985                           ;Menu.c: 89:                 if (KeGetGenericValue() != '#'){
   986  0003F4  EC4C  F007         	call	_KeGetGenericValue	;wreg free
   987  0003F8  0A23               	xorlw	35
   988  0003FA  B4D8               	btfsc	status,2,c
   989  0003FC  0012               	return	
   990                           
   991                           ;Menu.c: 90:                     LcPutChar(KeGetCharValue());
   992  0003FE  ECB5  F007         	call	_KeGetCharValue	;wreg free
   993  000402  EC0D  F005         	call	_LcPutChar
   994  000406  D7D5               	goto	l2517
   995  000408                     l2551:
   996  000408  503F               	movf	menuMotor@state^0,w,c
   997  00040A  6E3D               	movwf	??_menuMotor^0,c
   998  00040C  6A3E               	clrf	(??_menuMotor+1)^0,c
   999                           
  1000                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1001                           ; Switch size 1, requested type "simple"
  1002                           ; Number of cases is 1, Range of values is 0 to 0
  1003                           ; switch strategies available:
  1004                           ; Name         Instructions Cycles
  1005                           ; simple_byte            4     3 (average)
  1006                           ;	Chosen strategy is simple_byte
  1007  00040E  503E               	movf	(??_menuMotor+1)^0,w,c
  1008  000410  0A00               	xorlw	0	; case 0
  1009  000412  A4D8               	btfss	status,2,c
  1010  000414  0012               	return	
  1011                           
  1012                           ; Switch size 1, requested type "simple"
  1013                           ; Number of cases is 6, Range of values is 1 to 6
  1014                           ; switch strategies available:
  1015                           ; Name         Instructions Cycles
  1016                           ; simple_byte           19    10 (average)
  1017                           ;	Chosen strategy is simple_byte
  1018  000416  503D               	movf	??_menuMotor^0,w,c
  1019  000418  0A01               	xorlw	1	; case 1
  1020  00041A  B4D8               	btfsc	status,2,c
  1021  00041C  D75D               	goto	l2467
  1022  00041E  0A03               	xorlw	3	; case 2
  1023  000420  B4D8               	btfsc	status,2,c
  1024  000422  D76B               	goto	l2475
  1025  000424  0A01               	xorlw	1	; case 3
  1026  000426  B4D8               	btfsc	status,2,c
  1027  000428  D789               	goto	l2489
  1028  00042A  0A07               	xorlw	7	; case 4
  1029  00042C  B4D8               	btfsc	status,2,c
  1030  00042E  D79D               	goto	l2499
  1031  000430  0A01               	xorlw	1	; case 5
  1032  000432  B4D8               	btfsc	status,2,c
  1033  000434  D7C0               	goto	l2525
  1034  000436  0A03               	xorlw	3	; case 6
  1035  000438  A4D8               	btfss	status,2,c
  1036  00043A  0012               	return	
  1037  00043C  D7CB               	goto	l2531
  1038  00043E                     __end_of_menuMotor:
  1039                           	callstack 0
  1040                           
  1041 ;; *************** function _isPressed *****************
  1042 ;; Defined at:
  1043 ;;		line 210 in file "keypad.c"
  1044 ;; Parameters:    Size  Location     Type
  1045 ;;		None
  1046 ;; Auto vars:     Size  Location     Type
  1047 ;;		None
  1048 ;; Return value:  Size  Location     Type
  1049 ;;                  1    wreg      unsigned char 
  1050 ;; Registers used:
  1051 ;;		wreg, status,2, status,0
  1052 ;; Tracked objects:
  1053 ;;		On entry : 0/0
  1054 ;;		On exit  : 0/0
  1055 ;;		Unchanged: 0/0
  1056 ;; Data sizes:     COMRAM   BANK0   BANK1
  1057 ;;      Params:         0       0       0
  1058 ;;      Locals:         1       0       0
  1059 ;;      Temps:          0       0       0
  1060 ;;      Totals:         1       0       0
  1061 ;;Total ram usage:        1 bytes
  1062 ;; Hardware stack levels used: 1
  1063 ;; Hardware stack levels required when called: 2
  1064 ;; This function calls:
  1065 ;;		Nothing
  1066 ;; This function is called by:
  1067 ;;		_menuMotor
  1068 ;; This function uses a non-reentrant model
  1069 ;;
  1070                           
  1071                           	psect	text2
  1072  000E58                     __ptext2:
  1073                           	callstack 0
  1074  000E58                     _isPressed:
  1075                           	callstack 27
  1076                           
  1077                           ;keypad.c: 212:  return pressed && (stateSMS == 1||stateSMS == 4);
  1078                           
  1079                           ;incstack = 0
  1080  000E58  0E00               	movlw	0
  1081  000E5A  6E28               	movwf	_isPressed$607^0,c
  1082  000E5C  501B               	movf	_pressed^0,w,c
  1083  000E5E  B4D8               	btfsc	status,2,c
  1084  000E60  D009               	goto	l201
  1085  000E62  0417               	decf	_stateSMS^0,w,c
  1086  000E64  B4D8               	btfsc	status,2,c
  1087  000E66  D004               	goto	u1530
  1088  000E68  0E04               	movlw	4
  1089  000E6A  1817               	xorwf	_stateSMS^0,w,c
  1090  000E6C  A4D8               	btfss	status,2,c
  1091  000E6E  D002               	goto	l201
  1092  000E70                     u1530:
  1093  000E70  0E01               	movlw	1
  1094  000E72  6E28               	movwf	_isPressed$607^0,c
  1095  000E74                     l201:
  1096  000E74  5028               	movf	_isPressed$607^0,w,c
  1097  000E76  0012               	return		;funcret
  1098  000E78                     __end_of_isPressed:
  1099                           	callstack 0
  1100                           
  1101 ;; *************** function _getPresses *****************
  1102 ;; Defined at:
  1103 ;;		line 245 in file "keypad.c"
  1104 ;; Parameters:    Size  Location     Type
  1105 ;;		None
  1106 ;; Auto vars:     Size  Location     Type
  1107 ;;		None
  1108 ;; Return value:  Size  Location     Type
  1109 ;;                  1    wreg      unsigned char 
  1110 ;; Registers used:
  1111 ;;		wreg, status,2
  1112 ;; Tracked objects:
  1113 ;;		On entry : 0/0
  1114 ;;		On exit  : 0/0
  1115 ;;		Unchanged: 0/0
  1116 ;; Data sizes:     COMRAM   BANK0   BANK1
  1117 ;;      Params:         0       0       0
  1118 ;;      Locals:         0       0       0
  1119 ;;      Temps:          0       0       0
  1120 ;;      Totals:         0       0       0
  1121 ;;Total ram usage:        0 bytes
  1122 ;; Hardware stack levels used: 1
  1123 ;; Hardware stack levels required when called: 2
  1124 ;; This function calls:
  1125 ;;		Nothing
  1126 ;; This function is called by:
  1127 ;;		_menuMotor
  1128 ;; This function uses a non-reentrant model
  1129 ;;
  1130                           
  1131                           	psect	text3
  1132  000F7C                     __ptext3:
  1133                           	callstack 0
  1134  000F7C                     _getPresses:
  1135                           	callstack 27
  1136                           
  1137                           ;keypad.c: 246:     return available;
  1138                           
  1139                           ;incstack = 0
  1140  000F7C  5019               	movf	_available^0,w,c
  1141  000F7E  0012               	return		;funcret
  1142  000F80                     __end_of_getPresses:
  1143                           	callstack 0
  1144                           
  1145 ;; *************** function _displayMenu *****************
  1146 ;; Defined at:
  1147 ;;		line 106 in file "Menu.c"
  1148 ;; Parameters:    Size  Location     Type
  1149 ;;  menuMode        1    wreg     unsigned char 
  1150 ;;  row             1   22[COMRAM] unsigned char 
  1151 ;; Auto vars:     Size  Location     Type
  1152 ;;  menuMode        1   25[COMRAM] unsigned char 
  1153 ;; Return value:  Size  Location     Type
  1154 ;;                  1    wreg      void 
  1155 ;; Registers used:
  1156 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1157 ;; Tracked objects:
  1158 ;;		On entry : 0/0
  1159 ;;		On exit  : 0/0
  1160 ;;		Unchanged: 0/0
  1161 ;; Data sizes:     COMRAM   BANK0   BANK1
  1162 ;;      Params:         1       0       0
  1163 ;;      Locals:         1       0       0
  1164 ;;      Temps:          2       0       0
  1165 ;;      Totals:         4       0       0
  1166 ;;Total ram usage:        4 bytes
  1167 ;; Hardware stack levels used: 1
  1168 ;; Hardware stack levels required when called: 6
  1169 ;; This function calls:
  1170 ;;		_LcGotoXY
  1171 ;;		_LcPutChar
  1172 ;; This function is called by:
  1173 ;;		_menuMotor
  1174 ;; This function uses a non-reentrant model
  1175 ;;
  1176                           
  1177                           	psect	text4
  1178  000826                     __ptext4:
  1179                           	callstack 0
  1180  000826                     _displayMenu:
  1181                           	callstack 23
  1182                           
  1183                           ;incstack = 0
  1184                           ;displayMenu@menuMode stored from wreg
  1185  000826  6E3C               	movwf	displayMenu@menuMode^0,c
  1186                           
  1187                           ;Menu.c: 107:     if (menuMode == 0){
  1188  000828  503C               	movf	displayMenu@menuMode^0,w,c
  1189  00082A  A4D8               	btfss	status,2,c
  1190  00082C  D032               	goto	l2217
  1191                           
  1192                           ;Menu.c: 108:         if (LOGINMENU[LCDrow+row][LCDcol] != '\0'){
  1193  00082E  5039               	movf	displayMenu@row^0,w,c
  1194  000830  0D0B               	mullw	11
  1195  000832  CFF3 F03A          	movff	prodl,??_displayMenu
  1196  000836  500E               	movf	_LCDrow^0,w,c
  1197  000838  0D0B               	mullw	11
  1198  00083A  50F3               	movf	243,w,c
  1199  00083C  0FBF               	addlw	low _LOGINMENU
  1200  00083E  243A               	addwf	??_displayMenu^0,w,c
  1201  000840  240D               	addwf	_LCDcol^0,w,c
  1202  000842  6E3B               	movwf	(??_displayMenu+1)^0,c
  1203  000844  C03B  FFF6         	movff	??_displayMenu+1,tblptrl
  1204  000848                     	if	1	;There is more than 1 active tblptr byte
  1205  000848  0E02               	movlw	high __smallconst
  1206  00084A  6EF7               	movwf	tblptrh,c
  1207  00084C                     	endif
  1208  00084C                     	if	0	;tblptru may be non-zero
  1209  00084C                     	endif
  1210  00084C                     	if	0	;tblptru may be non-zero
  1211  00084C                     	endif
  1212  00084C  0008               	tblrd		*
  1213  00084E  50F5               	movf	tablat,w,c
  1214  000850  0900               	iorlw	0
  1215  000852  B4D8               	btfsc	status,2,c
  1216  000854  D015               	goto	l2211
  1217                           
  1218                           ;Menu.c: 109:             LcPutChar(LOGINMENU[LCDrow+row][LCDcol]);
  1219  000856  5039               	movf	displayMenu@row^0,w,c
  1220  000858  0D0B               	mullw	11
  1221  00085A  CFF3 F03A          	movff	prodl,??_displayMenu
  1222  00085E  500E               	movf	_LCDrow^0,w,c
  1223  000860  0D0B               	mullw	11
  1224  000862  50F3               	movf	243,w,c
  1225  000864  0FBF               	addlw	low _LOGINMENU
  1226  000866  243A               	addwf	??_displayMenu^0,w,c
  1227  000868  240D               	addwf	_LCDcol^0,w,c
  1228  00086A  6E3B               	movwf	(??_displayMenu+1)^0,c
  1229  00086C  C03B  FFF6         	movff	??_displayMenu+1,tblptrl
  1230  000870                     	if	1	;There is more than 1 active tblptr byte
  1231  000870  0E02               	movlw	high __smallconst
  1232  000872  6EF7               	movwf	tblptrh,c
  1233  000874                     	endif
  1234  000874                     	if	0	;tblptru may be non-zero
  1235  000874                     	endif
  1236  000874                     	if	0	;tblptru may be non-zero
  1237  000874                     	endif
  1238  000874  0008               	tblrd		*
  1239  000876  50F5               	movf	tablat,w,c
  1240  000878  EC0D  F005         	call	_LcPutChar
  1241  00087C                     l2209:
  1242                           
  1243                           ;Menu.c: 110:             LCDcol++;
  1244  00087C  2A0D               	incf	_LCDcol^0,f,c
  1245                           
  1246                           ;Menu.c: 111:         } else {
  1247  00087E  0012               	return	
  1248  000880                     l2211:
  1249                           
  1250                           ;Menu.c: 112:             LCDrow++;
  1251  000880  2A0E               	incf	_LCDrow^0,f,c
  1252                           
  1253                           ;Menu.c: 113:             LcGotoXY(0,1);
  1254  000882  0E01               	movlw	1
  1255  000884  6E30               	movwf	LcGotoXY@Row^0,c
  1256  000886  0E00               	movlw	0
  1257  000888  EC71  F004         	call	_LcGotoXY
  1258  00088C                     l2215:
  1259                           
  1260                           ;Menu.c: 114:             LCDcol = 0;
  1261  00088C  0E00               	movlw	0
  1262  00088E  6E0D               	movwf	_LCDcol^0,c
  1263  000890  0012               	return	
  1264  000892                     l2217:
  1265  000892  043C               	decf	displayMenu@menuMode^0,w,c
  1266  000894  A4D8               	btfss	status,2,c
  1267  000896  0012               	return	
  1268                           
  1269                           ;Menu.c: 117:         if (LOGREGSCREEN[LCDrow][LCDcol] != '\0'){
  1270  000898  500E               	movf	_LCDrow^0,w,c
  1271  00089A  0D06               	mullw	6
  1272  00089C  50F3               	movf	243,w,c
  1273  00089E  0F71               	addlw	low _LOGREGSCREEN
  1274  0008A0  240D               	addwf	_LCDcol^0,w,c
  1275  0008A2  6E3A               	movwf	??_displayMenu^0,c
  1276  0008A4  C03A  FFF6         	movff	??_displayMenu,tblptrl
  1277  0008A8                     	if	1	;There is more than 1 active tblptr byte
  1278  0008A8  0E02               	movlw	high __smallconst
  1279  0008AA  6EF7               	movwf	tblptrh,c
  1280  0008AC                     	endif
  1281  0008AC                     	if	0	;tblptru may be non-zero
  1282  0008AC                     	endif
  1283  0008AC                     	if	0	;tblptru may be non-zero
  1284  0008AC                     	endif
  1285  0008AC  0008               	tblrd		*
  1286  0008AE  50F5               	movf	tablat,w,c
  1287  0008B0  0900               	iorlw	0
  1288  0008B2  B4D8               	btfsc	status,2,c
  1289  0008B4  D00F               	goto	l2225
  1290                           
  1291                           ;Menu.c: 118:             LcPutChar(LOGREGSCREEN[LCDrow][LCDcol]);
  1292  0008B6  500E               	movf	_LCDrow^0,w,c
  1293  0008B8  0D06               	mullw	6
  1294  0008BA  50F3               	movf	243,w,c
  1295  0008BC  0F71               	addlw	low _LOGREGSCREEN
  1296  0008BE  240D               	addwf	_LCDcol^0,w,c
  1297  0008C0  6E3A               	movwf	??_displayMenu^0,c
  1298  0008C2  C03A  FFF6         	movff	??_displayMenu,tblptrl
  1299  0008C6                     	if	1	;There is more than 1 active tblptr byte
  1300  0008C6  0E02               	movlw	high __smallconst
  1301  0008C8  6EF7               	movwf	tblptrh,c
  1302  0008CA                     	endif
  1303  0008CA                     	if	0	;tblptru may be non-zero
  1304  0008CA                     	endif
  1305  0008CA                     	if	0	;tblptru may be non-zero
  1306  0008CA                     	endif
  1307  0008CA  0008               	tblrd		*
  1308  0008CC  50F5               	movf	tablat,w,c
  1309  0008CE  EC0D  F005         	call	_LcPutChar
  1310  0008D2  D7D4               	goto	l2209
  1311  0008D4                     l2225:
  1312                           
  1313                           ;Menu.c: 121:             LCDrow++;
  1314  0008D4  2A0E               	incf	_LCDrow^0,f,c
  1315                           
  1316                           ;Menu.c: 122:             LcGotoXY(0,1);
  1317  0008D6  0E01               	movlw	1
  1318  0008D8  6E30               	movwf	LcGotoXY@Row^0,c
  1319  0008DA  0E00               	movlw	0
  1320  0008DC  EC71  F004         	call	_LcGotoXY
  1321  0008E0  D7D5               	goto	l2215
  1322  0008E2                     __end_of_displayMenu:
  1323                           	callstack 0
  1324                           
  1325 ;; *************** function _LcPutChar *****************
  1326 ;; Defined at:
  1327 ;;		line 161 in file "LcTLCD.c"
  1328 ;; Parameters:    Size  Location     Type
  1329 ;;  c               1    wreg     unsigned char 
  1330 ;; Auto vars:     Size  Location     Type
  1331 ;;  c               1   21[COMRAM] unsigned char 
  1332 ;; Return value:  Size  Location     Type
  1333 ;;                  1    wreg      void 
  1334 ;; Registers used:
  1335 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1336 ;; Tracked objects:
  1337 ;;		On entry : 0/0
  1338 ;;		On exit  : 0/0
  1339 ;;		Unchanged: 0/0
  1340 ;; Data sizes:     COMRAM   BANK0   BANK1
  1341 ;;      Params:         0       0       0
  1342 ;;      Locals:         1       0       0
  1343 ;;      Temps:          0       0       0
  1344 ;;      Totals:         1       0       0
  1345 ;;Total ram usage:        1 bytes
  1346 ;; Hardware stack levels used: 1
  1347 ;; Hardware stack levels required when called: 5
  1348 ;; This function calls:
  1349 ;;		_CantaData
  1350 ;;		_LcGotoXY
  1351 ;;		_WaitForBusy
  1352 ;; This function is called by:
  1353 ;;		_menuMotor
  1354 ;;		_displayMenu
  1355 ;; This function uses a non-reentrant model
  1356 ;;
  1357                           
  1358                           	psect	text5
  1359  000A1A                     __ptext5:
  1360                           	callstack 0
  1361  000A1A                     _LcPutChar:
  1362                           	callstack 23
  1363                           
  1364                           ;incstack = 0
  1365                           ;LcPutChar@c stored from wreg
  1366  000A1A  6E38               	movwf	LcPutChar@c^0,c
  1367                           
  1368                           ;LcTLCD.c: 171:  WaitForBusy(); CantaData(c);
  1369  000A1C  EC48  F006         	call	_WaitForBusy	;wreg free
  1370  000A20  5038               	movf	LcPutChar@c^0,w,c
  1371  000A22  ECBD  F006         	call	_CantaData
  1372                           
  1373                           ;LcTLCD.c: 173:  ++ColumnAct;
  1374  000A26  2A13               	incf	_ColumnAct^0,f,c
  1375                           
  1376                           ;LcTLCD.c: 174:  if (Rows == 3) {
  1377  000A28  0E03               	movlw	3
  1378  000A2A  1816               	xorwf	_Rows^0,w,c
  1379  000A2C  A4D8               	btfss	status,2,c
  1380  000A2E  D011               	goto	l2131
  1381                           
  1382                           ;LcTLCD.c: 175:   if (ColumnAct >= 20) {
  1383  000A30  0E13               	movlw	19
  1384  000A32  6413               	cpfsgt	_ColumnAct^0,c
  1385  000A34  0012               	return	
  1386                           
  1387                           ;LcTLCD.c: 176:    ColumnAct = 0;
  1388  000A36  0E00               	movlw	0
  1389  000A38  6E13               	movwf	_ColumnAct^0,c
  1390                           
  1391                           ;LcTLCD.c: 177:    if (++RowAct >= 4) RowAct = 0;
  1392  000A3A  2A14               	incf	_RowAct^0,f,c
  1393  000A3C  0E03               	movlw	3
  1394  000A3E  6414               	cpfsgt	_RowAct^0,c
  1395  000A40  D002               	goto	l2129
  1396  000A42  0E00               	movlw	0
  1397  000A44  6E14               	movwf	_RowAct^0,c
  1398  000A46                     l2129:
  1399                           
  1400                           ;LcTLCD.c: 178:    LcGotoXY(ColumnAct, RowAct);
  1401  000A46  C014  F030         	movff	_RowAct,LcGotoXY@Row
  1402  000A4A  5013               	movf	_ColumnAct^0,w,c
  1403  000A4C  EC71  F004         	call	_LcGotoXY
  1404  000A50  0012               	return	
  1405  000A52                     l2131:
  1406                           
  1407                           ;LcTLCD.c: 181:  if (Rows == 2) {
  1408  000A52  0E02               	movlw	2
  1409  000A54  1816               	xorwf	_Rows^0,w,c
  1410  000A56  A4D8               	btfss	status,2,c
  1411  000A58  D011               	goto	l2143
  1412                           
  1413                           ;LcTLCD.c: 182:   if (ColumnAct >= 40) {
  1414  000A5A  0E27               	movlw	39
  1415  000A5C  6413               	cpfsgt	_ColumnAct^0,c
  1416  000A5E  0012               	return	
  1417                           
  1418                           ;LcTLCD.c: 183:    ColumnAct = 0;
  1419  000A60  0E00               	movlw	0
  1420  000A62  6E13               	movwf	_ColumnAct^0,c
  1421                           
  1422                           ;LcTLCD.c: 184:    if (++RowAct >= 2) RowAct = 0;
  1423  000A64  2A14               	incf	_RowAct^0,f,c
  1424  000A66  0E01               	movlw	1
  1425  000A68  6414               	cpfsgt	_RowAct^0,c
  1426  000A6A  D002               	goto	l2141
  1427  000A6C  0E00               	movlw	0
  1428  000A6E  6E14               	movwf	_RowAct^0,c
  1429  000A70                     l2141:
  1430                           
  1431                           ;LcTLCD.c: 185:    LcGotoXY(ColumnAct, RowAct);
  1432  000A70  C014  F030         	movff	_RowAct,LcGotoXY@Row
  1433  000A74  5013               	movf	_ColumnAct^0,w,c
  1434  000A76  EC71  F004         	call	_LcGotoXY
  1435  000A7A  0012               	return	
  1436  000A7C                     l2143:
  1437                           
  1438                           ;LcTLCD.c: 188:  if (RowAct == 1) {
  1439  000A7C  0414               	decf	_RowAct^0,w,c
  1440  000A7E  A4D8               	btfss	status,2,c
  1441  000A80  0012               	return	
  1442                           
  1443                           ;LcTLCD.c: 189:   if (ColumnAct >= 40) ColumnAct = 0;
  1444  000A82  0E27               	movlw	39
  1445  000A84  6413               	cpfsgt	_ColumnAct^0,c
  1446  000A86  D002               	goto	l2149
  1447  000A88  0E00               	movlw	0
  1448  000A8A  6E13               	movwf	_ColumnAct^0,c
  1449  000A8C                     l2149:
  1450                           
  1451                           ;LcTLCD.c: 190:   LcGotoXY(ColumnAct, RowAct);
  1452  000A8C  C014  F030         	movff	_RowAct,LcGotoXY@Row
  1453  000A90  5013               	movf	_ColumnAct^0,w,c
  1454  000A92  EC71  F004         	call	_LcGotoXY
  1455  000A96  0012               	return		;funcret
  1456  000A98                     __end_of_LcPutChar:
  1457                           	callstack 0
  1458                           
  1459 ;; *************** function _LcGotoXY *****************
  1460 ;; Defined at:
  1461 ;;		line 134 in file "LcTLCD.c"
  1462 ;; Parameters:    Size  Location     Type
  1463 ;;  Column          1    wreg     unsigned char 
  1464 ;;  Row             1   13[COMRAM] unsigned char 
  1465 ;; Auto vars:     Size  Location     Type
  1466 ;;  Column          1   20[COMRAM] unsigned char 
  1467 ;;  Fisics          2   18[COMRAM] int 
  1468 ;; Return value:  Size  Location     Type
  1469 ;;                  1    wreg      void 
  1470 ;; Registers used:
  1471 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1472 ;; Tracked objects:
  1473 ;;		On entry : 0/0
  1474 ;;		On exit  : 0/0
  1475 ;;		Unchanged: 0/0
  1476 ;; Data sizes:     COMRAM   BANK0   BANK1
  1477 ;;      Params:         1       0       0
  1478 ;;      Locals:         5       0       0
  1479 ;;      Temps:          2       0       0
  1480 ;;      Totals:         8       0       0
  1481 ;;Total ram usage:        8 bytes
  1482 ;; Hardware stack levels used: 1
  1483 ;; Hardware stack levels required when called: 4
  1484 ;; This function calls:
  1485 ;;		_CantaIR
  1486 ;;		_WaitForBusy
  1487 ;; This function is called by:
  1488 ;;		_LcPutChar
  1489 ;;		_menuMotor
  1490 ;;		_displayMenu
  1491 ;; This function uses a non-reentrant model
  1492 ;;
  1493                           
  1494                           	psect	text6
  1495  0008E2                     __ptext6:
  1496                           	callstack 0
  1497  0008E2                     _LcGotoXY:
  1498                           	callstack 23
  1499                           
  1500                           ;incstack = 0
  1501                           ;LcGotoXY@Column stored from wreg
  1502  0008E2  6E37               	movwf	LcGotoXY@Column^0,c
  1503                           
  1504                           ;LcTLCD.c: 138:  int Fisics;;LcTLCD.c: 140:  switch (Rows) {
  1505  0008E4  D036               	goto	l2077
  1506  0008E6                     l2055:
  1507                           
  1508                           ;LcTLCD.c: 142:    Fisics = Column + (!Row ? 0 : 0x40); break;
  1509  0008E6  5030               	movf	LcGotoXY@Row^0,w,c
  1510  0008E8  B4D8               	btfsc	status,2,c
  1511  0008EA  D004               	goto	l2059
  1512  0008EC  0E00               	movlw	0
  1513  0008EE  6E34               	movwf	(_LcGotoXY$813+1)^0,c
  1514  0008F0  0E40               	movlw	64
  1515  0008F2  D003               	goto	L1
  1516  0008F4                     l2059:
  1517  0008F4  0E00               	movlw	0
  1518  0008F6  6E34               	movwf	(_LcGotoXY$813+1)^0,c
  1519  0008F8  0E00               	movlw	0
  1520  0008FA                     L1:
  1521  0008FA  6E33               	movwf	_LcGotoXY$813^0,c
  1522  0008FC  5037               	movf	LcGotoXY@Column^0,w,c
  1523  0008FE  2433               	addwf	_LcGotoXY$813^0,w,c
  1524  000900  6E35               	movwf	LcGotoXY@Fisics^0,c
  1525  000902  0E00               	movlw	0
  1526  000904  2034               	addwfc	(_LcGotoXY$813+1)^0,w,c
  1527  000906  6E36               	movwf	(LcGotoXY@Fisics+1)^0,c
  1528  000908  D036               	goto	l2079
  1529  00090A                     l291:
  1530                           
  1531                           ;LcTLCD.c: 144:    Fisics = Column;
  1532  00090A  C037  F035         	movff	LcGotoXY@Column,LcGotoXY@Fisics
  1533  00090E  6A36               	clrf	(LcGotoXY@Fisics+1)^0,c
  1534                           
  1535                           ;LcTLCD.c: 145:    if (Row == 1) Fisics += 0x40; else
  1536  000910  0430               	decf	LcGotoXY@Row^0,w,c
  1537  000912  A4D8               	btfss	status,2,c
  1538  000914  D002               	goto	l2067
  1539  000916  0E40               	movlw	64
  1540  000918  D005               	goto	L2
  1541  00091A                     l2067:
  1542                           
  1543                           ;LcTLCD.c: 146:    if (Row == 2) Fisics += Columns; else
  1544  00091A  0E02               	movlw	2
  1545  00091C  1830               	xorwf	LcGotoXY@Row^0,w,c
  1546  00091E  A4D8               	btfss	status,2,c
  1547  000920  D004               	goto	l2071
  1548  000922  5015               	movf	_Columns^0,w,c
  1549  000924                     L2:
  1550  000924  2635               	addwf	LcGotoXY@Fisics^0,f,c
  1551  000926  0E00               	movlw	0
  1552  000928  D00E               	goto	L3
  1553  00092A                     l2071:
  1554                           
  1555                           ;LcTLCD.c: 147:    if (Row == 3) Fisics += 0x40+Columns;
  1556  00092A  0E03               	movlw	3
  1557  00092C  1830               	xorwf	LcGotoXY@Row^0,w,c
  1558  00092E  A4D8               	btfss	status,2,c
  1559  000930  D022               	goto	l2079
  1560  000932  5015               	movf	_Columns^0,w,c
  1561  000934  6E31               	movwf	??_LcGotoXY^0,c
  1562  000936  6A32               	clrf	(??_LcGotoXY+1)^0,c
  1563  000938  0E40               	movlw	64
  1564  00093A  2631               	addwf	??_LcGotoXY^0,f,c
  1565  00093C  0E00               	movlw	0
  1566  00093E  2232               	addwfc	(??_LcGotoXY+1)^0,f,c
  1567  000940  5031               	movf	??_LcGotoXY^0,w,c
  1568  000942  2635               	addwf	LcGotoXY@Fisics^0,f,c
  1569  000944  5032               	movf	(??_LcGotoXY+1)^0,w,c
  1570  000946                     L3:
  1571  000946  2236               	addwfc	(LcGotoXY@Fisics+1)^0,f,c
  1572                           
  1573                           ;LcTLCD.c: 148:    break;
  1574  000948  D016               	goto	l2079
  1575  00094A                     l298:
  1576                           
  1577                           ;LcTLCD.c: 151:    Fisics = Column; break;
  1578  00094A  C037  F035         	movff	LcGotoXY@Column,LcGotoXY@Fisics
  1579  00094E  6A36               	clrf	(LcGotoXY@Fisics+1)^0,c
  1580  000950  D012               	goto	l2079
  1581  000952                     l2077:
  1582  000952  5016               	movf	_Rows^0,w,c
  1583  000954  6E31               	movwf	??_LcGotoXY^0,c
  1584  000956  6A32               	clrf	(??_LcGotoXY+1)^0,c
  1585                           
  1586                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1587                           ; Switch size 1, requested type "simple"
  1588                           ; Number of cases is 1, Range of values is 0 to 0
  1589                           ; switch strategies available:
  1590                           ; Name         Instructions Cycles
  1591                           ; simple_byte            4     3 (average)
  1592                           ;	Chosen strategy is simple_byte
  1593  000958  5032               	movf	(??_LcGotoXY+1)^0,w,c
  1594  00095A  0A00               	xorlw	0	; case 0
  1595  00095C  A4D8               	btfss	status,2,c
  1596  00095E  D7F5               	goto	l298
  1597                           
  1598                           ; Switch size 1, requested type "simple"
  1599                           ; Number of cases is 3, Range of values is 1 to 4
  1600                           ; switch strategies available:
  1601                           ; Name         Instructions Cycles
  1602                           ; simple_byte           10     6 (average)
  1603                           ;	Chosen strategy is simple_byte
  1604  000960  5031               	movf	??_LcGotoXY^0,w,c
  1605  000962  0A01               	xorlw	1	; case 1
  1606  000964  B4D8               	btfsc	status,2,c
  1607  000966  D7F1               	goto	l298
  1608  000968  0A03               	xorlw	3	; case 2
  1609  00096A  B4D8               	btfsc	status,2,c
  1610  00096C  D7BC               	goto	l2055
  1611  00096E  0A06               	xorlw	6	; case 4
  1612  000970  B4D8               	btfsc	status,2,c
  1613  000972  D7CB               	goto	l291
  1614  000974  D7EA               	goto	l298
  1615  000976                     l2079:
  1616                           
  1617                           ;LcTLCD.c: 154:  WaitForBusy();
  1618  000976  EC48  F006         	call	_WaitForBusy	;wreg free
  1619                           
  1620                           ;LcTLCD.c: 155:  CantaIR(0x80 | Fisics);
  1621  00097A  5035               	movf	LcGotoXY@Fisics^0,w,c
  1622  00097C  0980               	iorlw	128
  1623  00097E  ECD6  F006         	call	_CantaIR
  1624                           
  1625                           ;LcTLCD.c: 157:  RowAct = Row;
  1626  000982  C030  F014         	movff	LcGotoXY@Row,_RowAct
  1627                           
  1628                           ;LcTLCD.c: 158:  ColumnAct = Column;
  1629  000986  C037  F013         	movff	LcGotoXY@Column,_ColumnAct
  1630  00098A  0012               	return		;funcret
  1631  00098C                     __end_of_LcGotoXY:
  1632                           	callstack 0
  1633                           
  1634 ;; *************** function _CantaData *****************
  1635 ;; Defined at:
  1636 ;;		line 245 in file "LcTLCD.c"
  1637 ;; Parameters:    Size  Location     Type
  1638 ;;  Data            1    wreg     unsigned char 
  1639 ;; Auto vars:     Size  Location     Type
  1640 ;;  Data            1    7[COMRAM] unsigned char 
  1641 ;; Return value:  Size  Location     Type
  1642 ;;                  1    wreg      void 
  1643 ;; Registers used:
  1644 ;;		wreg, status,2, status,0, cstack
  1645 ;; Tracked objects:
  1646 ;;		On entry : 0/0
  1647 ;;		On exit  : 0/0
  1648 ;;		Unchanged: 0/0
  1649 ;; Data sizes:     COMRAM   BANK0   BANK1
  1650 ;;      Params:         0       0       0
  1651 ;;      Locals:         1       0       0
  1652 ;;      Temps:          0       0       0
  1653 ;;      Totals:         1       0       0
  1654 ;;Total ram usage:        1 bytes
  1655 ;; Hardware stack levels used: 1
  1656 ;; Hardware stack levels required when called: 3
  1657 ;; This function calls:
  1658 ;;		_CantaPartAlta
  1659 ;;		_CantaPartBaixa
  1660 ;; This function is called by:
  1661 ;;		_LcPutChar
  1662 ;; This function uses a non-reentrant model
  1663 ;;
  1664                           
  1665                           	psect	text7
  1666  000D7A                     __ptext7:
  1667                           	callstack 0
  1668  000D7A                     _CantaData:
  1669                           	callstack 24
  1670                           
  1671                           ;incstack = 0
  1672                           ;CantaData@Data stored from wreg
  1673  000D7A  6E2A               	movwf	CantaData@Data^0,c
  1674                           
  1675                           ;LcTLCD.c: 246:  (TRISDbits.TRISD0 = TRISDbits.TRISD1 = TRISDbits.TRISD2 = TRISDbits.TRI
      +                          SD3 = 0);
  1676  000D7C  9695               	bcf	149,3,c	;volatile
  1677  000D7E  9495               	bcf	149,2,c	;volatile
  1678  000D80  9295               	bcf	149,1,c	;volatile
  1679  000D82  9095               	bcf	149,0,c	;volatile
  1680                           
  1681                           ;LcTLCD.c: 247:  (LATDbits.LATD4 = 1);
  1682  000D84  888C               	bsf	140,4,c	;volatile
  1683                           
  1684                           ;LcTLCD.c: 248:  (LATDbits.LATD5 = 0);
  1685  000D86  9A8C               	bcf	140,5,c	;volatile
  1686                           
  1687                           ;LcTLCD.c: 249:  (LATDbits.LATD6 = 1);
  1688  000D88  8C8C               	bsf	140,6,c	;volatile
  1689                           
  1690                           ;LcTLCD.c: 250:  CantaPartAlta(Data);
  1691  000D8A  502A               	movf	CantaData@Data^0,w,c
  1692  000D8C  ECBD  F005         	call	_CantaPartAlta
  1693                           
  1694                           ;LcTLCD.c: 251:  (LATDbits.LATD6 = 1);
  1695  000D90  8C8C               	bsf	140,6,c	;volatile
  1696                           
  1697                           ;LcTLCD.c: 252:  (LATDbits.LATD6 = 0);
  1698  000D92  9C8C               	bcf	140,6,c	;volatile
  1699                           
  1700                           ;LcTLCD.c: 253:  (LATDbits.LATD6 = 0);
  1701  000D94  9C8C               	bcf	140,6,c	;volatile
  1702                           
  1703                           ;LcTLCD.c: 254:  (LATDbits.LATD6 = 1);
  1704  000D96  8C8C               	bsf	140,6,c	;volatile
  1705                           
  1706                           ;LcTLCD.c: 255:  CantaPartBaixa(Data);
  1707  000D98  502A               	movf	CantaData@Data^0,w,c
  1708  000D9A  EC89  F005         	call	_CantaPartBaixa
  1709                           
  1710                           ;LcTLCD.c: 256:  (LATDbits.LATD6 = 1);
  1711  000D9E  8C8C               	bsf	140,6,c	;volatile
  1712                           
  1713                           ;LcTLCD.c: 257:  (LATDbits.LATD6 = 0);
  1714  000DA0  9C8C               	bcf	140,6,c	;volatile
  1715                           
  1716                           ;LcTLCD.c: 258:  (TRISDbits.TRISD0 = TRISDbits.TRISD1 = TRISDbits.TRISD2 = TRISDbits.TRI
      +                          SD3 = 1);
  1717  000DA2  8695               	bsf	149,3,c	;volatile
  1718  000DA4  8495               	bsf	149,2,c	;volatile
  1719  000DA6  8295               	bsf	149,1,c	;volatile
  1720  000DA8  8095               	bsf	149,0,c	;volatile
  1721  000DAA  0012               	return		;funcret
  1722  000DAC                     __end_of_CantaData:
  1723                           	callstack 0
  1724                           
  1725 ;; *************** function _LcCursorOn *****************
  1726 ;; Defined at:
  1727 ;;		line 120 in file "LcTLCD.c"
  1728 ;; Parameters:    Size  Location     Type
  1729 ;;		None
  1730 ;; Auto vars:     Size  Location     Type
  1731 ;;		None
  1732 ;; Return value:  Size  Location     Type
  1733 ;;                  1    wreg      void 
  1734 ;; Registers used:
  1735 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1736 ;; Tracked objects:
  1737 ;;		On entry : 0/0
  1738 ;;		On exit  : 0/0
  1739 ;;		Unchanged: 0/0
  1740 ;; Data sizes:     COMRAM   BANK0   BANK1
  1741 ;;      Params:         0       0       0
  1742 ;;      Locals:         0       0       0
  1743 ;;      Temps:          0       0       0
  1744 ;;      Totals:         0       0       0
  1745 ;;Total ram usage:        0 bytes
  1746 ;; Hardware stack levels used: 1
  1747 ;; Hardware stack levels required when called: 4
  1748 ;; This function calls:
  1749 ;;		_CantaIR
  1750 ;;		_WaitForBusy
  1751 ;; This function is called by:
  1752 ;;		_menuMotor
  1753 ;; This function uses a non-reentrant model
  1754 ;;
  1755                           
  1756                           	psect	text8
  1757  000F46                     __ptext8:
  1758                           	callstack 0
  1759  000F46                     _LcCursorOn:
  1760                           	callstack 25
  1761                           
  1762                           ;LcTLCD.c: 123:  WaitForBusy();
  1763                           
  1764                           ;incstack = 0
  1765  000F46  EC48  F006         	call	_WaitForBusy	;wreg free
  1766                           
  1767                           ;LcTLCD.c: 124:  CantaIR(0x08 | 0x04 | 0x02);
  1768  000F4A  0E0E               	movlw	14
  1769  000F4C  ECD6  F006         	call	_CantaIR
  1770  000F50  0012               	return		;funcret
  1771  000F52                     __end_of_LcCursorOn:
  1772                           	callstack 0
  1773                           
  1774 ;; *************** function _LcCursorOff *****************
  1775 ;; Defined at:
  1776 ;;		line 127 in file "LcTLCD.c"
  1777 ;; Parameters:    Size  Location     Type
  1778 ;;		None
  1779 ;; Auto vars:     Size  Location     Type
  1780 ;;		None
  1781 ;; Return value:  Size  Location     Type
  1782 ;;                  1    wreg      void 
  1783 ;; Registers used:
  1784 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1785 ;; Tracked objects:
  1786 ;;		On entry : 0/0
  1787 ;;		On exit  : 0/0
  1788 ;;		Unchanged: 0/0
  1789 ;; Data sizes:     COMRAM   BANK0   BANK1
  1790 ;;      Params:         0       0       0
  1791 ;;      Locals:         0       0       0
  1792 ;;      Temps:          0       0       0
  1793 ;;      Totals:         0       0       0
  1794 ;;Total ram usage:        0 bytes
  1795 ;; Hardware stack levels used: 1
  1796 ;; Hardware stack levels required when called: 4
  1797 ;; This function calls:
  1798 ;;		_CantaIR
  1799 ;;		_WaitForBusy
  1800 ;; This function is called by:
  1801 ;;		_menuMotor
  1802 ;; This function uses a non-reentrant model
  1803 ;;
  1804                           
  1805                           	psect	text9
  1806  000F52                     __ptext9:
  1807                           	callstack 0
  1808  000F52                     _LcCursorOff:
  1809                           	callstack 25
  1810                           
  1811                           ;LcTLCD.c: 130:  WaitForBusy();
  1812                           
  1813                           ;incstack = 0
  1814  000F52  EC48  F006         	call	_WaitForBusy	;wreg free
  1815                           
  1816                           ;LcTLCD.c: 131:  CantaIR(0x08 | 0x04);
  1817  000F56  0E0C               	movlw	12
  1818  000F58  ECD6  F006         	call	_CantaIR
  1819  000F5C  0012               	return		;funcret
  1820  000F5E                     __end_of_LcCursorOff:
  1821                           	callstack 0
  1822                           
  1823 ;; *************** function _LcClear *****************
  1824 ;; Defined at:
  1825 ;;		line 113 in file "LcTLCD.c"
  1826 ;; Parameters:    Size  Location     Type
  1827 ;;		None
  1828 ;; Auto vars:     Size  Location     Type
  1829 ;;		None
  1830 ;; Return value:  Size  Location     Type
  1831 ;;                  1    wreg      void 
  1832 ;; Registers used:
  1833 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1834 ;; Tracked objects:
  1835 ;;		On entry : 0/0
  1836 ;;		On exit  : 0/0
  1837 ;;		Unchanged: 0/0
  1838 ;; Data sizes:     COMRAM   BANK0   BANK1
  1839 ;;      Params:         0       0       0
  1840 ;;      Locals:         0       0       0
  1841 ;;      Temps:          0       0       0
  1842 ;;      Totals:         0       0       0
  1843 ;;Total ram usage:        0 bytes
  1844 ;; Hardware stack levels used: 1
  1845 ;; Hardware stack levels required when called: 4
  1846 ;; This function calls:
  1847 ;;		_CantaIR
  1848 ;;		_Espera
  1849 ;;		_WaitForBusy
  1850 ;; This function is called by:
  1851 ;;		_menuMotor
  1852 ;; This function uses a non-reentrant model
  1853 ;;
  1854                           
  1855                           	psect	text10
  1856  000E78                     __ptext10:
  1857                           	callstack 0
  1858  000E78                     _LcClear:
  1859                           	callstack 25
  1860                           
  1861                           ;LcTLCD.c: 116:  WaitForBusy(); CantaIR(0x01);
  1862                           
  1863                           ;incstack = 0
  1864  000E78  EC48  F006         	call	_WaitForBusy	;wreg free
  1865  000E7C  0E01               	movlw	1
  1866  000E7E  ECD6  F006         	call	_CantaIR
  1867                           
  1868                           ;LcTLCD.c: 117:  Espera(Timer, 3);
  1869  000E82  C001  F02F         	movff	_Timer,Espera@Timer
  1870  000E86  C002  F030         	movff	_Timer+1,Espera@Timer+1
  1871  000E8A  0E00               	movlw	0
  1872  000E8C  6E32               	movwf	(Espera@ms+1)^0,c
  1873  000E8E  0E03               	movlw	3
  1874  000E90  6E31               	movwf	Espera@ms^0,c
  1875  000E92  EC1B  F007         	call	_Espera	;wreg free
  1876  000E96  0012               	return		;funcret
  1877  000E98                     __end_of_LcClear:
  1878                           	callstack 0
  1879                           
  1880 ;; *************** function _KeSetMode *****************
  1881 ;; Defined at:
  1882 ;;		line 250 in file "keypad.c"
  1883 ;; Parameters:    Size  Location     Type
  1884 ;;  menuMode        1    wreg     unsigned char 
  1885 ;; Auto vars:     Size  Location     Type
  1886 ;;  menuMode        1    6[COMRAM] unsigned char 
  1887 ;; Return value:  Size  Location     Type
  1888 ;;                  1    wreg      void 
  1889 ;; Registers used:
  1890 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1891 ;; Tracked objects:
  1892 ;;		On entry : 0/0
  1893 ;;		On exit  : 0/0
  1894 ;;		Unchanged: 0/0
  1895 ;; Data sizes:     COMRAM   BANK0   BANK1
  1896 ;;      Params:         0       0       0
  1897 ;;      Locals:         1       0       0
  1898 ;;      Temps:          0       0       0
  1899 ;;      Totals:         1       0       0
  1900 ;;Total ram usage:        1 bytes
  1901 ;; Hardware stack levels used: 1
  1902 ;; Hardware stack levels required when called: 3
  1903 ;; This function calls:
  1904 ;;		_TiResetTics
  1905 ;; This function is called by:
  1906 ;;		_menuMotor
  1907 ;; This function uses a non-reentrant model
  1908 ;;
  1909                           
  1910                           	psect	text11
  1911  000DDE                     __ptext11:
  1912                           	callstack 0
  1913  000DDE                     _KeSetMode:
  1914                           	callstack 26
  1915                           
  1916                           ;incstack = 0
  1917                           ;KeSetMode@menuMode stored from wreg
  1918  000DDE  6E29               	movwf	KeSetMode@menuMode^0,c
  1919                           
  1920                           ;keypad.c: 251:     if (menuMode == 1){
  1921  000DE0  0429               	decf	KeSetMode@menuMode^0,w,c
  1922  000DE2  A4D8               	btfss	status,2,c
  1923  000DE4  D00C               	goto	l2185
  1924                           
  1925                           ;keypad.c: 252:         previous = 0;
  1926  000DE6  0E00               	movlw	0
  1927  000DE8  6E1C               	movwf	_previous^0,c
  1928                           
  1929                           ;keypad.c: 253:         numPresses = 0;
  1930  000DEA  0E00               	movlw	0
  1931  000DEC  6E1A               	movwf	_numPresses^0,c
  1932                           
  1933                           ;keypad.c: 254:         available = 0;
  1934  000DEE  0E00               	movlw	0
  1935  000DF0  6E19               	movwf	_available^0,c
  1936                           
  1937                           ;keypad.c: 255:         stateSMS = 2;
  1938  000DF2  0E02               	movlw	2
  1939  000DF4  6E17               	movwf	_stateSMS^0,c
  1940                           
  1941                           ;keypad.c: 256:         TiResetTics(timer_SMS);
  1942  000DF6  501E               	movf	_timer_SMS^0,w,c
  1943  000DF8  EC86  F007         	call	_TiResetTics
  1944                           
  1945                           ;keypad.c: 257:     } else if (menuMode == 0){
  1946  000DFC  0012               	return	
  1947  000DFE                     l2185:
  1948  000DFE  5029               	movf	KeSetMode@menuMode^0,w,c
  1949  000E00  A4D8               	btfss	status,2,c
  1950  000E02  0012               	return	
  1951                           
  1952                           ;keypad.c: 258:         stateSMS = 4;
  1953  000E04  0E04               	movlw	4
  1954  000E06  6E17               	movwf	_stateSMS^0,c
  1955  000E08  0012               	return		;funcret
  1956  000E0A                     __end_of_KeSetMode:
  1957                           	callstack 0
  1958                           
  1959 ;; *************** function _KeGetCharValue *****************
  1960 ;; Defined at:
  1961 ;;		line 224 in file "keypad.c"
  1962 ;; Parameters:    Size  Location     Type
  1963 ;;		None
  1964 ;; Auto vars:     Size  Location     Type
  1965 ;;		None
  1966 ;; Return value:  Size  Location     Type
  1967 ;;                  1    wreg      unsigned char 
  1968 ;; Registers used:
  1969 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1970 ;; Tracked objects:
  1971 ;;		On entry : 0/0
  1972 ;;		On exit  : 0/0
  1973 ;;		Unchanged: 0/0
  1974 ;; Data sizes:     COMRAM   BANK0   BANK1
  1975 ;;      Params:         0       0       0
  1976 ;;      Locals:         0       0       0
  1977 ;;      Temps:          0       0       0
  1978 ;;      Totals:         0       0       0
  1979 ;;Total ram usage:        0 bytes
  1980 ;; Hardware stack levels used: 1
  1981 ;; Hardware stack levels required when called: 4
  1982 ;; This function calls:
  1983 ;;		_KeGetGenericValue
  1984 ;;		_getFullValue
  1985 ;; This function is called by:
  1986 ;;		_menuMotor
  1987 ;; This function uses a non-reentrant model
  1988 ;;
  1989                           
  1990                           	psect	text12
  1991  000F6A                     __ptext12:
  1992                           	callstack 0
  1993  000F6A                     _KeGetCharValue:
  1994                           	callstack 25
  1995                           
  1996                           ;keypad.c: 225:     return getFullValue(KeGetGenericValue());
  1997                           
  1998                           ;incstack = 0
  1999  000F6A  EC4C  F007         	call	_KeGetGenericValue	;wreg free
  2000  000F6E  ECC6  F004         	call	_getFullValue
  2001  000F72  0012               	return		;funcret
  2002  000F74                     __end_of_KeGetCharValue:
  2003                           	callstack 0
  2004                           
  2005 ;; *************** function _getFullValue *****************
  2006 ;; Defined at:
  2007 ;;		line 233 in file "keypad.c"
  2008 ;; Parameters:    Size  Location     Type
  2009 ;;  generic         1    wreg     unsigned char 
  2010 ;; Auto vars:     Size  Location     Type
  2011 ;;  generic         1    9[COMRAM] unsigned char 
  2012 ;; Return value:  Size  Location     Type
  2013 ;;                  1    wreg      unsigned char 
  2014 ;; Registers used:
  2015 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
  2016 ;; Tracked objects:
  2017 ;;		On entry : 0/0
  2018 ;;		On exit  : 0/0
  2019 ;;		Unchanged: 0/0
  2020 ;; Data sizes:     COMRAM   BANK0   BANK1
  2021 ;;      Params:         0       0       0
  2022 ;;      Locals:         1       0       0
  2023 ;;      Temps:          4       0       0
  2024 ;;      Totals:         5       0       0
  2025 ;;Total ram usage:        5 bytes
  2026 ;; Hardware stack levels used: 1
  2027 ;; Hardware stack levels required when called: 2
  2028 ;; This function calls:
  2029 ;;		Nothing
  2030 ;; This function is called by:
  2031 ;;		_KeGetCharValue
  2032 ;; This function uses a non-reentrant model
  2033 ;;
  2034                           
  2035                           	psect	text13
  2036  00098C                     __ptext13:
  2037                           	callstack 0
  2038  00098C                     _getFullValue:
  2039                           	callstack 26
  2040                           
  2041                           ;incstack = 0
  2042                           ;getFullValue@generic stored from wreg
  2043  00098C  6E2C               	movwf	getFullValue@generic^0,c
  2044                           
  2045                           ;keypad.c: 235:     if (generic - '0' >= 2 && generic - '0' <= 9){
  2046  00098E  0ED0               	movlw	208
  2047  000990  6E28               	movwf	??_getFullValue^0,c
  2048  000992  0EFF               	movlw	255
  2049  000994  6E29               	movwf	(??_getFullValue+1)^0,c
  2050  000996  502C               	movf	getFullValue@generic^0,w,c
  2051  000998  6E2A               	movwf	(??_getFullValue+2)^0,c
  2052  00099A  6A2B               	clrf	(??_getFullValue+3)^0,c
  2053  00099C  5028               	movf	??_getFullValue^0,w,c
  2054  00099E  262A               	addwf	(??_getFullValue+2)^0,f,c
  2055  0009A0  5029               	movf	(??_getFullValue+1)^0,w,c
  2056  0009A2  222B               	addwfc	(??_getFullValue+3)^0,f,c
  2057  0009A4  502B               	movf	(??_getFullValue+3)^0,w,c
  2058  0009A6  E104               	bnz	u250
  2059  0009A8  0E02               	movlw	2
  2060  0009AA  5C2A               	subwf	(??_getFullValue+2)^0,w,c
  2061  0009AC  A0D8               	btfss	status,0,c
  2062  0009AE  D033               	goto	l1381
  2063  0009B0                     u250:
  2064  0009B0  0ED0               	movlw	208
  2065  0009B2  6E28               	movwf	??_getFullValue^0,c
  2066  0009B4  0EFF               	movlw	255
  2067  0009B6  6E29               	movwf	(??_getFullValue+1)^0,c
  2068  0009B8  502C               	movf	getFullValue@generic^0,w,c
  2069  0009BA  6E2A               	movwf	(??_getFullValue+2)^0,c
  2070  0009BC  6A2B               	clrf	(??_getFullValue+3)^0,c
  2071  0009BE  5028               	movf	??_getFullValue^0,w,c
  2072  0009C0  262A               	addwf	(??_getFullValue+2)^0,f,c
  2073  0009C2  5029               	movf	(??_getFullValue+1)^0,w,c
  2074  0009C4  222B               	addwfc	(??_getFullValue+3)^0,f,c
  2075  0009C6  502B               	movf	(??_getFullValue+3)^0,w,c
  2076  0009C8  E126               	bnz	l1381
  2077  0009CA  0E0A               	movlw	10
  2078  0009CC  5C2A               	subwf	(??_getFullValue+2)^0,w,c
  2079  0009CE  B0D8               	btfsc	status,0,c
  2080  0009D0  D022               	goto	l1381
  2081                           
  2082                           ;keypad.c: 236:         if (SMSTABLE[generic - '0' - 1][(numPresses-1)] == '\0'){
  2083  0009D2  502C               	movf	getFullValue@generic^0,w,c
  2084  0009D4  0D06               	mullw	6
  2085  0009D6  50F3               	movf	243,w,c
  2086  0009D8  0F89               	addlw	low _SMSTABLE
  2087  0009DA  241A               	addwf	_numPresses^0,w,c
  2088  0009DC  6E28               	movwf	??_getFullValue^0,c
  2089  0009DE  0ED9               	movlw	217
  2090  0009E0  2628               	addwf	??_getFullValue^0,f,c
  2091  0009E2  C028  FFF6         	movff	??_getFullValue,tblptrl
  2092  0009E6                     	if	1	;There is more than 1 active tblptr byte
  2093  0009E6  0E02               	movlw	high __smallconst
  2094  0009E8  6EF7               	movwf	tblptrh,c
  2095  0009EA                     	endif
  2096  0009EA                     	if	0	;tblptru may be non-zero
  2097  0009EA                     	endif
  2098  0009EA                     	if	0	;tblptru may be non-zero
  2099  0009EA                     	endif
  2100  0009EA  0008               	tblrd		*
  2101  0009EC  50F5               	movf	tablat,w,c
  2102  0009EE  0900               	iorlw	0
  2103  0009F0  A4D8               	btfss	status,2,c
  2104  0009F2  D002               	goto	l1377
  2105                           
  2106                           ;keypad.c: 237:             numPresses = 1;
  2107  0009F4  0E01               	movlw	1
  2108  0009F6  6E1A               	movwf	_numPresses^0,c
  2109  0009F8                     l1377:
  2110                           
  2111                           ;keypad.c: 239:         return SMSTABLE[generic - '0' - 1][(numPresses-1)];
  2112  0009F8  502C               	movf	getFullValue@generic^0,w,c
  2113  0009FA  0D06               	mullw	6
  2114  0009FC  50F3               	movf	243,w,c
  2115  0009FE  0F89               	addlw	low _SMSTABLE
  2116  000A00  241A               	addwf	_numPresses^0,w,c
  2117  000A02  6E28               	movwf	??_getFullValue^0,c
  2118  000A04  0ED9               	movlw	217
  2119  000A06  2628               	addwf	??_getFullValue^0,f,c
  2120  000A08  C028  FFF6         	movff	??_getFullValue,tblptrl
  2121  000A0C                     	if	1	;There is more than 1 active tblptr byte
  2122  000A0C  0E02               	movlw	high __smallconst
  2123  000A0E  6EF7               	movwf	tblptrh,c
  2124  000A10                     	endif
  2125  000A10                     	if	0	;tblptru may be non-zero
  2126  000A10                     	endif
  2127  000A10                     	if	0	;tblptru may be non-zero
  2128  000A10                     	endif
  2129  000A10  0008               	tblrd		*
  2130  000A12  50F5               	movf	tablat,w,c
  2131  000A14  0012               	return	
  2132  000A16                     l1381:
  2133                           
  2134                           ;keypad.c: 241:     return generic;
  2135  000A16  502C               	movf	getFullValue@generic^0,w,c
  2136  000A18  0012               	return		;funcret
  2137  000A1A                     __end_of_getFullValue:
  2138                           	callstack 0
  2139                           
  2140 ;; *************** function _joystickMotor *****************
  2141 ;; Defined at:
  2142 ;;		line 24 in file "Joystick.c"
  2143 ;; Parameters:    Size  Location     Type
  2144 ;;		None
  2145 ;; Auto vars:     Size  Location     Type
  2146 ;;		None
  2147 ;; Return value:  Size  Location     Type
  2148 ;;                  1    wreg      void 
  2149 ;; Registers used:
  2150 ;;		wreg, status,2, status,0, cstack
  2151 ;; Tracked objects:
  2152 ;;		On entry : 0/0
  2153 ;;		On exit  : 0/0
  2154 ;;		Unchanged: 0/0
  2155 ;; Data sizes:     COMRAM   BANK0   BANK1
  2156 ;;      Params:         0       0       0
  2157 ;;      Locals:         0       0       0
  2158 ;;      Temps:          2       0       0
  2159 ;;      Totals:         2       0       0
  2160 ;;Total ram usage:        2 bytes
  2161 ;; Hardware stack levels used: 1
  2162 ;; Hardware stack levels required when called: 3
  2163 ;; This function calls:
  2164 ;;		_SiIsAvailable
  2165 ;;		_SiSendChar
  2166 ;; This function is called by:
  2167 ;;		_main
  2168 ;; This function uses a non-reentrant model
  2169 ;;
  2170                           
  2171                           	psect	text14
  2172  00075E                     __ptext14:
  2173                           	callstack 0
  2174  00075E                     _joystickMotor:
  2175                           	callstack 27
  2176                           
  2177                           ;Joystick.c: 25:     static char state = 0;;Joystick.c: 27:     switch (state){
  2178                           
  2179                           ;incstack = 0
  2180  00075E  D04B               	goto	l1939
  2181  000760                     l491:
  2182                           
  2183                           ;Joystick.c: 29:             if (ADCON0bits.GO_DONE == 0){
  2184  000760  B2C2               	btfsc	194,1,c	;volatile
  2185  000762  0012               	return	
  2186                           
  2187                           ;Joystick.c: 30:                 y = ADRESH;
  2188  000764  CFC4 F009          	movff	4036,_y	;volatile
  2189                           
  2190                           ;Joystick.c: 31:                 ADCON0bits.CHS0=0;
  2191  000768  94C2               	bcf	194,2,c	;volatile
  2192                           
  2193                           ;Joystick.c: 32:                 state = 1;
  2194  00076A  0E01               	movlw	1
  2195  00076C  6E07               	movwf	joystickMotor@state^0,c
  2196                           
  2197                           ;Joystick.c: 33:                 ADCON0bits.GO_DONE=1;
  2198  00076E  82C2               	bsf	194,1,c	;volatile
  2199  000770  0012               	return	
  2200  000772                     l494:
  2201                           
  2202                           ;Joystick.c: 37:             if (ADCON0bits.GO_DONE == 0){
  2203  000772  B2C2               	btfsc	194,1,c	;volatile
  2204  000774  0012               	return	
  2205                           
  2206                           ;Joystick.c: 38:                 x = ADRESH;
  2207  000776  CFC4 F00A          	movff	4036,_x	;volatile
  2208                           
  2209                           ;Joystick.c: 39:                 ADCON0bits.CHS0=1;
  2210  00077A  84C2               	bsf	194,2,c	;volatile
  2211                           
  2212                           ;Joystick.c: 40:                 state = 2;
  2213  00077C  0E02               	movlw	2
  2214  00077E  6E07               	movwf	joystickMotor@state^0,c
  2215  000780  0012               	return	
  2216  000782                     l1897:
  2217                           
  2218                           ;Joystick.c: 44:             if (moved){
  2219  000782  5008               	movf	_moved^0,w,c
  2220  000784  B4D8               	btfsc	status,2,c
  2221  000786  D00E               	goto	l1909
  2222                           
  2223                           ;Joystick.c: 45:                 if (x >= 100 && x <= 150 && y >= 100 && y <= 150){
  2224  000788  0E63               	movlw	99
  2225  00078A  640A               	cpfsgt	_x^0,c
  2226  00078C  D021               	goto	l499
  2227  00078E  0E97               	movlw	151
  2228  000790  600A               	cpfslt	_x^0,c
  2229  000792  D01E               	goto	l499
  2230  000794  0E63               	movlw	99
  2231  000796  6409               	cpfsgt	_y^0,c
  2232  000798  D01B               	goto	l499
  2233  00079A  0E97               	movlw	151
  2234  00079C  6009               	cpfslt	_y^0,c
  2235  00079E  D018               	goto	l499
  2236                           
  2237                           ;Joystick.c: 46:                     moved = 0;
  2238  0007A0  0E00               	movlw	0
  2239  0007A2  D015               	goto	L5
  2240  0007A4                     l1909:
  2241                           
  2242                           ;Joystick.c: 49:                 if (x <= 10){
  2243  0007A4  0E0B               	movlw	11
  2244  0007A6  600A               	cpfslt	_x^0,c
  2245  0007A8  D002               	goto	l1913
  2246                           
  2247                           ;Joystick.c: 50:                     send = 'A';
  2248  0007AA  0E41               	movlw	65
  2249  0007AC  D00E               	goto	L7
  2250  0007AE                     l1913:
  2251  0007AE  0EEF               	movlw	239
  2252  0007B0  640A               	cpfsgt	_x^0,c
  2253  0007B2  D002               	goto	l1917
  2254                           
  2255                           ;Joystick.c: 53:                     send = 'D';
  2256  0007B4  0E44               	movlw	68
  2257  0007B6  D009               	goto	L7
  2258  0007B8                     l1917:
  2259  0007B8  0E0B               	movlw	11
  2260  0007BA  6009               	cpfslt	_y^0,c
  2261  0007BC  D002               	goto	l1921
  2262                           
  2263                           ;Joystick.c: 56:                     send = 'S';
  2264  0007BE  0E53               	movlw	83
  2265  0007C0  D004               	goto	L7
  2266  0007C2                     l1921:
  2267  0007C2  0EEF               	movlw	239
  2268  0007C4  6409               	cpfsgt	_y^0,c
  2269  0007C6  D004               	goto	l499
  2270                           
  2271                           ;Joystick.c: 59:                     send = 'W';
  2272  0007C8  0E57               	movlw	87
  2273  0007CA                     L7:
  2274  0007CA  6E0B               	movwf	_send^0,c
  2275                           
  2276                           ;Joystick.c: 60:                     moved = 1;
  2277  0007CC  0E01               	movlw	1
  2278  0007CE                     L5:
  2279  0007CE  6E08               	movwf	_moved^0,c
  2280  0007D0                     l499:
  2281                           
  2282                           ;Joystick.c: 65:             state = 10;
  2283  0007D0  0E0A               	movlw	10
  2284  0007D2  6E07               	movwf	joystickMotor@state^0,c
  2285                           
  2286                           ;Joystick.c: 66:             break;
  2287  0007D4  0012               	return	
  2288  0007D6                     l1925:
  2289                           
  2290                           ;Joystick.c: 69:             if(SiIsAvailable()){
  2291  0007D6  ECAF  F007         	call	_SiIsAvailable	;wreg free
  2292  0007DA  0900               	iorlw	0
  2293  0007DC  B4D8               	btfsc	status,2,c
  2294  0007DE  0012               	return	
  2295                           
  2296                           ;Joystick.c: 70:                 SiSendChar(send);
  2297  0007E0  500B               	movf	_send^0,w,c
  2298  0007E2  ECBA  F007         	call	_SiSendChar
  2299                           
  2300                           ;Joystick.c: 71:                 state = 0;
  2301  0007E6  0E00               	movlw	0
  2302  0007E8  6E07               	movwf	joystickMotor@state^0,c
  2303                           
  2304                           ;Joystick.c: 72:                 ADCON0bits.GO_DONE=1;
  2305  0007EA  82C2               	bsf	194,1,c	;volatile
  2306  0007EC  0012               	return	
  2307  0007EE                     l1933:
  2308                           
  2309                           ;Joystick.c: 78:             state = 0;
  2310  0007EE  0E00               	movlw	0
  2311  0007F0  6E07               	movwf	joystickMotor@state^0,c
  2312                           
  2313                           ;Joystick.c: 79:             ADCON0bits.GO_DONE=1;
  2314  0007F2  82C2               	bsf	194,1,c	;volatile
  2315                           
  2316                           ;Joystick.c: 80:             break;
  2317  0007F4  0012               	return	
  2318  0007F6                     l1939:
  2319  0007F6  5007               	movf	joystickMotor@state^0,w,c
  2320  0007F8  6E29               	movwf	??_joystickMotor^0,c
  2321  0007FA  6A2A               	clrf	(??_joystickMotor+1)^0,c
  2322                           
  2323                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2324                           ; Switch size 1, requested type "simple"
  2325                           ; Number of cases is 1, Range of values is 0 to 0
  2326                           ; switch strategies available:
  2327                           ; Name         Instructions Cycles
  2328                           ; simple_byte            4     3 (average)
  2329                           ;	Chosen strategy is simple_byte
  2330  0007FC  502A               	movf	(??_joystickMotor+1)^0,w,c
  2331  0007FE  0A00               	xorlw	0	; case 0
  2332  000800  A4D8               	btfss	status,2,c
  2333  000802  0012               	return	
  2334                           
  2335                           ; Switch size 1, requested type "simple"
  2336                           ; Number of cases is 5, Range of values is 0 to 10
  2337                           ; switch strategies available:
  2338                           ; Name         Instructions Cycles
  2339                           ; simple_byte           16     9 (average)
  2340                           ;	Chosen strategy is simple_byte
  2341  000804  5029               	movf	??_joystickMotor^0,w,c
  2342  000806  0A00               	xorlw	0	; case 0
  2343  000808  B4D8               	btfsc	status,2,c
  2344  00080A  D7AA               	goto	l491
  2345  00080C  0A01               	xorlw	1	; case 1
  2346  00080E  B4D8               	btfsc	status,2,c
  2347  000810  D7B0               	goto	l494
  2348  000812  0A03               	xorlw	3	; case 2
  2349  000814  B4D8               	btfsc	status,2,c
  2350  000816  D7B5               	goto	l1897
  2351  000818  0A06               	xorlw	6	; case 4
  2352  00081A  B4D8               	btfsc	status,2,c
  2353  00081C  D7DC               	goto	l1925
  2354  00081E  0A0E               	xorlw	14	; case 10
  2355  000820  A4D8               	btfss	status,2,c
  2356  000822  0012               	return	
  2357  000824  D7E4               	goto	l1933
  2358  000826                     __end_of_joystickMotor:
  2359                           	callstack 0
  2360                           
  2361 ;; *************** function _SiSendChar *****************
  2362 ;; Defined at:
  2363 ;;		line 27 in file "SIO.c"
  2364 ;; Parameters:    Size  Location     Type
  2365 ;;  myByte          1    wreg     unsigned char 
  2366 ;; Auto vars:     Size  Location     Type
  2367 ;;  myByte          1    5[COMRAM] unsigned char 
  2368 ;; Return value:  Size  Location     Type
  2369 ;;                  1    wreg      void 
  2370 ;; Registers used:
  2371 ;;		wreg
  2372 ;; Tracked objects:
  2373 ;;		On entry : 0/0
  2374 ;;		On exit  : 0/0
  2375 ;;		Unchanged: 0/0
  2376 ;; Data sizes:     COMRAM   BANK0   BANK1
  2377 ;;      Params:         0       0       0
  2378 ;;      Locals:         1       0       0
  2379 ;;      Temps:          0       0       0
  2380 ;;      Totals:         1       0       0
  2381 ;;Total ram usage:        1 bytes
  2382 ;; Hardware stack levels used: 1
  2383 ;; Hardware stack levels required when called: 2
  2384 ;; This function calls:
  2385 ;;		Nothing
  2386 ;; This function is called by:
  2387 ;;		_joystickMotor
  2388 ;; This function uses a non-reentrant model
  2389 ;;
  2390                           
  2391                           	psect	text15
  2392  000F74                     __ptext15:
  2393                           	callstack 0
  2394  000F74                     _SiSendChar:
  2395                           	callstack 27
  2396                           
  2397                           ;incstack = 0
  2398                           ;SiSendChar@myByte stored from wreg
  2399  000F74  6E28               	movwf	SiSendChar@myByte^0,c
  2400                           
  2401                           ;SIO.c: 28:     TXREG = myByte;
  2402  000F76  C028  FFAD         	movff	SiSendChar@myByte,4013	;volatile
  2403  000F7A  0012               	return		;funcret
  2404  000F7C                     __end_of_SiSendChar:
  2405                           	callstack 0
  2406                           
  2407 ;; *************** function _SiIsAvailable *****************
  2408 ;; Defined at:
  2409 ;;		line 23 in file "SIO.c"
  2410 ;; Parameters:    Size  Location     Type
  2411 ;;		None
  2412 ;; Auto vars:     Size  Location     Type
  2413 ;;		None
  2414 ;; Return value:  Size  Location     Type
  2415 ;;                  1    wreg      unsigned char 
  2416 ;; Registers used:
  2417 ;;		wreg
  2418 ;; Tracked objects:
  2419 ;;		On entry : 0/0
  2420 ;;		On exit  : 0/0
  2421 ;;		Unchanged: 0/0
  2422 ;; Data sizes:     COMRAM   BANK0   BANK1
  2423 ;;      Params:         0       0       0
  2424 ;;      Locals:         0       0       0
  2425 ;;      Temps:          0       0       0
  2426 ;;      Totals:         0       0       0
  2427 ;;Total ram usage:        0 bytes
  2428 ;; Hardware stack levels used: 1
  2429 ;; Hardware stack levels required when called: 2
  2430 ;; This function calls:
  2431 ;;		Nothing
  2432 ;; This function is called by:
  2433 ;;		_joystickMotor
  2434 ;; This function uses a non-reentrant model
  2435 ;;
  2436                           
  2437                           	psect	text16
  2438  000F5E                     __ptext16:
  2439                           	callstack 0
  2440  000F5E                     _SiIsAvailable:
  2441                           	callstack 27
  2442                           
  2443                           ;SIO.c: 24:     return TXSTAbits.TRMT;
  2444                           
  2445                           ;incstack = 0
  2446  000F5E  A2AC               	btfss	172,1,c	;volatile
  2447  000F60  D002               	goto	u560
  2448  000F62  0E01               	movlw	1
  2449  000F64  0012               	return	
  2450  000F66                     u560:
  2451  000F66  0E00               	movlw	0
  2452  000F68  0012               	return		;funcret
  2453  000F6A                     __end_of_SiIsAvailable:
  2454                           	callstack 0
  2455                           
  2456 ;; *************** function _initSIO *****************
  2457 ;; Defined at:
  2458 ;;		line 5 in file "SIO.c"
  2459 ;; Parameters:    Size  Location     Type
  2460 ;;		None
  2461 ;; Auto vars:     Size  Location     Type
  2462 ;;		None
  2463 ;; Return value:  Size  Location     Type
  2464 ;;                  1    wreg      void 
  2465 ;; Registers used:
  2466 ;;		wreg, status,2, status,0
  2467 ;; Tracked objects:
  2468 ;;		On entry : 0/0
  2469 ;;		On exit  : 0/0
  2470 ;;		Unchanged: 0/0
  2471 ;; Data sizes:     COMRAM   BANK0   BANK1
  2472 ;;      Params:         0       0       0
  2473 ;;      Locals:         0       0       0
  2474 ;;      Temps:          0       0       0
  2475 ;;      Totals:         0       0       0
  2476 ;;Total ram usage:        0 bytes
  2477 ;; Hardware stack levels used: 1
  2478 ;; Hardware stack levels required when called: 2
  2479 ;; This function calls:
  2480 ;;		Nothing
  2481 ;; This function is called by:
  2482 ;;		_main
  2483 ;; This function uses a non-reentrant model
  2484 ;;
  2485                           
  2486                           	psect	text17
  2487  000EF4                     __ptext17:
  2488                           	callstack 0
  2489  000EF4                     _initSIO:
  2490                           	callstack 28
  2491                           
  2492                           ;SIO.c: 6:     SPBRG=64;
  2493                           
  2494                           ;incstack = 0
  2495  000EF4  0E40               	movlw	64
  2496  000EF6  6EAF               	movwf	175,c	;volatile
  2497                           
  2498                           ;SIO.c: 7:     TRISC |= 0xC0;
  2499  000EF8  0EC0               	movlw	192
  2500  000EFA  1294               	iorwf	148,f,c	;volatile
  2501                           
  2502                           ;SIO.c: 8:  TXSTA = 0b00100100;
  2503  000EFC  0E24               	movlw	36
  2504  000EFE  6EAC               	movwf	172,c	;volatile
  2505                           
  2506                           ;SIO.c: 9:  RCSTA = 0b10010000;
  2507  000F00  0E90               	movlw	144
  2508  000F02  6EAB               	movwf	171,c	;volatile
  2509                           
  2510                           ;SIO.c: 10:  BAUDCONbits.BRG16 = 0;
  2511  000F04  96B8               	bcf	184,3,c	;volatile
  2512                           
  2513                           ;SIO.c: 11:     TRISCbits.TRISC6=1;
  2514  000F06  8C94               	bsf	148,6,c	;volatile
  2515                           
  2516                           ;SIO.c: 12:     TRISCbits.TRISC7=1;
  2517  000F08  8E94               	bsf	148,7,c	;volatile
  2518  000F0A  0012               	return		;funcret
  2519  000F0C                     __end_of_initSIO:
  2520                           	callstack 0
  2521                           
  2522 ;; *************** function _initKeypad *****************
  2523 ;; Defined at:
  2524 ;;		line 29 in file "keypad.c"
  2525 ;; Parameters:    Size  Location     Type
  2526 ;;		None
  2527 ;; Auto vars:     Size  Location     Type
  2528 ;;		None
  2529 ;; Return value:  Size  Location     Type
  2530 ;;                  1    wreg      void 
  2531 ;; Registers used:
  2532 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2533 ;; Tracked objects:
  2534 ;;		On entry : 0/0
  2535 ;;		On exit  : 0/0
  2536 ;;		Unchanged: 0/0
  2537 ;; Data sizes:     COMRAM   BANK0   BANK1
  2538 ;;      Params:         0       0       0
  2539 ;;      Locals:         0       0       0
  2540 ;;      Temps:          0       0       0
  2541 ;;      Totals:         0       0       0
  2542 ;;Total ram usage:        0 bytes
  2543 ;; Hardware stack levels used: 1
  2544 ;; Hardware stack levels required when called: 3
  2545 ;; This function calls:
  2546 ;;		_TiGetTimer
  2547 ;; This function is called by:
  2548 ;;		_main
  2549 ;; This function uses a non-reentrant model
  2550 ;;
  2551                           
  2552                           	psect	text18
  2553  000EB8                     __ptext18:
  2554                           	callstack 0
  2555  000EB8                     _initKeypad:
  2556                           	callstack 27
  2557                           
  2558                           ;keypad.c: 30:     INTCON2bits.RBPU = 0;
  2559                           
  2560                           ;incstack = 0
  2561  000EB8  9EF1               	bcf	241,7,c	;volatile
  2562                           
  2563                           ;keypad.c: 33:     TRISBbits.TRISB0 = 1;
  2564  000EBA  8093               	bsf	147,0,c	;volatile
  2565                           
  2566                           ;keypad.c: 34:     TRISBbits.TRISB1 = 1;
  2567  000EBC  8293               	bsf	147,1,c	;volatile
  2568                           
  2569                           ;keypad.c: 35:     TRISBbits.TRISB2 = 1;
  2570  000EBE  8493               	bsf	147,2,c	;volatile
  2571                           
  2572                           ;keypad.c: 36:     TRISBbits.TRISB3 = 0;
  2573  000EC0  9693               	bcf	147,3,c	;volatile
  2574                           
  2575                           ;keypad.c: 37:     TRISBbits.TRISB4 = 0;
  2576  000EC2  9893               	bcf	147,4,c	;volatile
  2577                           
  2578                           ;keypad.c: 38:     TRISBbits.TRISB5 = 0;
  2579  000EC4  9A93               	bcf	147,5,c	;volatile
  2580                           
  2581                           ;keypad.c: 39:     TRISBbits.TRISB6 = 0;
  2582  000EC6  9C93               	bcf	147,6,c	;volatile
  2583                           
  2584                           ;keypad.c: 40:     timerBounces = TiGetTimer();
  2585  000EC8  EC68  F006         	call	_TiGetTimer	;wreg free
  2586  000ECC  6E1F               	movwf	_timerBounces^0,c
  2587                           
  2588                           ;keypad.c: 41:     timer_SMS = TiGetTimer();
  2589  000ECE  EC68  F006         	call	_TiGetTimer	;wreg free
  2590  000ED2  6E1E               	movwf	_timer_SMS^0,c
  2591  000ED4  0012               	return		;funcret
  2592  000ED6                     __end_of_initKeypad:
  2593                           	callstack 0
  2594                           
  2595 ;; *************** function _initJoystick *****************
  2596 ;; Defined at:
  2597 ;;		line 9 in file "Joystick.c"
  2598 ;; Parameters:    Size  Location     Type
  2599 ;;		None
  2600 ;; Auto vars:     Size  Location     Type
  2601 ;;		None
  2602 ;; Return value:  Size  Location     Type
  2603 ;;                  1    wreg      void 
  2604 ;; Registers used:
  2605 ;;		wreg, status,2
  2606 ;; Tracked objects:
  2607 ;;		On entry : 0/0
  2608 ;;		On exit  : 0/0
  2609 ;;		Unchanged: 0/0
  2610 ;; Data sizes:     COMRAM   BANK0   BANK1
  2611 ;;      Params:         0       0       0
  2612 ;;      Locals:         0       0       0
  2613 ;;      Temps:          0       0       0
  2614 ;;      Totals:         0       0       0
  2615 ;;Total ram usage:        0 bytes
  2616 ;; Hardware stack levels used: 1
  2617 ;; Hardware stack levels required when called: 2
  2618 ;; This function calls:
  2619 ;;		Nothing
  2620 ;; This function is called by:
  2621 ;;		_main
  2622 ;; This function uses a non-reentrant model
  2623 ;;
  2624                           
  2625                           	psect	text19
  2626  000ED6                     __ptext19:
  2627                           	callstack 0
  2628  000ED6                     _initJoystick:
  2629                           	callstack 28
  2630                           
  2631                           ;Joystick.c: 10:     TRISAbits.TRISA0 = 1;
  2632                           
  2633                           ;incstack = 0
  2634  000ED6  8092               	bsf	146,0,c	;volatile
  2635                           
  2636                           ;Joystick.c: 11:     TRISAbits.TRISA1 = 1;
  2637  000ED8  8292               	bsf	146,1,c	;volatile
  2638                           
  2639                           ;Joystick.c: 12:     ADCON0 = 0x03;
  2640  000EDA  0E03               	movlw	3
  2641  000EDC  6EC2               	movwf	194,c	;volatile
  2642                           
  2643                           ;Joystick.c: 13:     ADCON1 = 0x0D;
  2644  000EDE  0E0D               	movlw	13
  2645  000EE0  6EC1               	movwf	193,c	;volatile
  2646                           
  2647                           ;Joystick.c: 14:     ADCON2 = 0x44;
  2648  000EE2  0E44               	movlw	68
  2649  000EE4  6EC0               	movwf	192,c	;volatile
  2650                           
  2651                           ;Joystick.c: 16:     TRISCbits.TRISC0 = 0;
  2652  000EE6  9094               	bcf	148,0,c	;volatile
  2653                           
  2654                           ;Joystick.c: 17:     TRISCbits.TRISC1 = 0;
  2655  000EE8  9294               	bcf	148,1,c	;volatile
  2656                           
  2657                           ;Joystick.c: 18:     TRISCbits.TRISC2 = 0;
  2658  000EEA  9494               	bcf	148,2,c	;volatile
  2659                           
  2660                           ;Joystick.c: 19:     TRISCbits.TRISC3 = 0;
  2661  000EEC  9694               	bcf	148,3,c	;volatile
  2662                           
  2663                           ;Joystick.c: 20:     moved = 0;
  2664  000EEE  0E00               	movlw	0
  2665  000EF0  6E08               	movwf	_moved^0,c
  2666  000EF2  0012               	return		;funcret
  2667  000EF4                     __end_of_initJoystick:
  2668                           	callstack 0
  2669                           
  2670 ;; *************** function _TiInitTimer *****************
  2671 ;; Defined at:
  2672 ;;		line 17 in file "TTimer.c"
  2673 ;; Parameters:    Size  Location     Type
  2674 ;;		None
  2675 ;; Auto vars:     Size  Location     Type
  2676 ;;		None
  2677 ;; Return value:  Size  Location     Type
  2678 ;;                  1    wreg      void 
  2679 ;; Registers used:
  2680 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  2681 ;; Tracked objects:
  2682 ;;		On entry : 0/0
  2683 ;;		On exit  : 0/0
  2684 ;;		Unchanged: 0/0
  2685 ;; Data sizes:     COMRAM   BANK0   BANK1
  2686 ;;      Params:         0       0       0
  2687 ;;      Locals:         0       0       0
  2688 ;;      Temps:          0       0       0
  2689 ;;      Totals:         0       0       0
  2690 ;;Total ram usage:        0 bytes
  2691 ;; Hardware stack levels used: 1
  2692 ;; Hardware stack levels required when called: 2
  2693 ;; This function calls:
  2694 ;;		Nothing
  2695 ;; This function is called by:
  2696 ;;		_main
  2697 ;; This function uses a non-reentrant model
  2698 ;;
  2699                           
  2700                           	psect	text20
  2701  000D42                     __ptext20:
  2702                           	callstack 0
  2703  000D42                     _TiInitTimer:
  2704                           	callstack 28
  2705                           
  2706                           ;TTimer.c: 20:     RCONbits.IPEN = 0;
  2707                           
  2708                           ;incstack = 0
  2709  000D42  9ED0               	bcf	208,7,c	;volatile
  2710                           
  2711                           ;TTimer.c: 21:     INTCONbits.GIE_GIEH = 1;
  2712  000D44  8EF2               	bsf	242,7,c	;volatile
  2713                           
  2714                           ;TTimer.c: 22:     INTCONbits.PEIE_GIEL = 1;
  2715  000D46  8CF2               	bsf	242,6,c	;volatile
  2716                           
  2717                           ;TTimer.c: 23:     INTCONbits.TMR0IE = 1;
  2718  000D48  8AF2               	bsf	242,5,c	;volatile
  2719                           
  2720                           ;TTimer.c: 24:     INTCONbits.TMR0IF = 0;
  2721  000D4A  94F2               	bcf	242,2,c	;volatile
  2722                           
  2723                           ;TTimer.c: 25:     T0CON = 0x08;
  2724  000D4C  0E08               	movlw	8
  2725  000D4E  6ED5               	movwf	213,c	;volatile
  2726                           
  2727                           ;TTimer.c: 27:     TMR0H = 0xD8;
  2728  000D50  0ED8               	movlw	216
  2729  000D52  6ED7               	movwf	215,c	;volatile
  2730                           
  2731                           ;TTimer.c: 28:     TMR0L = 0xF0;
  2732  000D54  0EF0               	movlw	240
  2733  000D56  6ED6               	movwf	214,c	;volatile
  2734                           
  2735                           ;TTimer.c: 29:     T0CONbits.TMR0ON = 1;
  2736  000D58  8ED5               	bsf	213,7,c	;volatile
  2737                           
  2738                           ;TTimer.c: 31:     for (counter=0;counter<25;counter++) {
  2739  000D5A  0E00               	movlw	0
  2740  000D5C  6E21               	movwf	_counter^0,c
  2741  000D5E                     l2261:
  2742  000D5E  0E18               	movlw	24
  2743  000D60  6421               	cpfsgt	_counter^0,c
  2744  000D62  D001               	goto	l2265
  2745  000D64  0012               	return	
  2746  000D66                     l2265:
  2747                           
  2748                           ;TTimer.c: 32:  s_Timers[counter].b_busy=0;
  2749  000D66  5021               	movf	_counter^0,w,c
  2750  000D68  0D03               	mullw	3
  2751  000D6A  50F3               	movf	243,w,c
  2752  000D6C  0F82               	addlw	low (_s_Timers+2)
  2753  000D6E  6ED9               	movwf	fsr2l,c
  2754  000D70  6ADA               	clrf	fsr2h,c
  2755  000D72  0E00               	movlw	0
  2756  000D74  6EDF               	movwf	indf2,c
  2757                           
  2758                           ;TTimer.c: 33:     }
  2759  000D76  2A21               	incf	_counter^0,f,c
  2760  000D78  D7F2               	goto	l2261
  2761  000D7A                     __end_of_TiInitTimer:
  2762                           	callstack 0
  2763                           
  2764 ;; *************** function _SMSMotor *****************
  2765 ;; Defined at:
  2766 ;;		line 133 in file "keypad.c"
  2767 ;; Parameters:    Size  Location     Type
  2768 ;;		None
  2769 ;; Auto vars:     Size  Location     Type
  2770 ;;		None
  2771 ;; Return value:  Size  Location     Type
  2772 ;;                  1    wreg      void 
  2773 ;; Registers used:
  2774 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2775 ;; Tracked objects:
  2776 ;;		On entry : 0/0
  2777 ;;		On exit  : 0/0
  2778 ;;		Unchanged: 0/0
  2779 ;; Data sizes:     COMRAM   BANK0   BANK1
  2780 ;;      Params:         0       0       0
  2781 ;;      Locals:         0       0       0
  2782 ;;      Temps:          2       0       0
  2783 ;;      Totals:         2       0       0
  2784 ;;Total ram usage:        2 bytes
  2785 ;; Hardware stack levels used: 1
  2786 ;; Hardware stack levels required when called: 4
  2787 ;; This function calls:
  2788 ;;		_KeGetGenericValue
  2789 ;;		_TiGetTics
  2790 ;;		_TiResetTics
  2791 ;; This function is called by:
  2792 ;;		_main
  2793 ;; This function uses a non-reentrant model
  2794 ;;
  2795                           
  2796                           	psect	text21
  2797  00067E                     __ptext21:
  2798                           	callstack 0
  2799  00067E                     _SMSMotor:
  2800                           	callstack 26
  2801                           
  2802                           ;keypad.c: 134:     switch(stateSMS){
  2803                           
  2804                           ;incstack = 0
  2805  00067E  D054               	goto	l2373
  2806  000680                     l182:
  2807                           
  2808                           ;keypad.c: 137:             LATC = available;
  2809  000680  C019  FF8B         	movff	_available,3979	;volatile
  2810                           
  2811                           ;keypad.c: 138:             if (TiGetTics(timer_SMS)>=1000){
  2812  000684  501E               	movf	_timer_SMS^0,w,c
  2813  000686  EC05  F007         	call	_TiGetTics
  2814  00068A  BE29               	btfsc	(?_TiGetTics+1)^0,7,c
  2815  00068C  D010               	goto	l2331
  2816  00068E  0EE8               	movlw	232
  2817  000690  5C28               	subwf	?_TiGetTics^0,w,c
  2818  000692  0E03               	movlw	3
  2819  000694  5829               	subwfb	(?_TiGetTics+1)^0,w,c
  2820  000696  A0D8               	btfss	status,0,c
  2821  000698  D00A               	goto	l2331
  2822                           
  2823                           ;keypad.c: 140:                 previous = 0;
  2824  00069A  0E00               	movlw	0
  2825  00069C  6E1C               	movwf	_previous^0,c
  2826                           
  2827                           ;keypad.c: 141:                 numPresses = 0;
  2828  00069E  0E00               	movlw	0
  2829  0006A0  6E1A               	movwf	_numPresses^0,c
  2830                           
  2831                           ;keypad.c: 142:                 available = 0;
  2832  0006A2  0E00               	movlw	0
  2833  0006A4  6E19               	movwf	_available^0,c
  2834                           
  2835                           ;keypad.c: 143:                 TiResetTics(timer_SMS);
  2836  0006A6  501E               	movf	_timer_SMS^0,w,c
  2837  0006A8  EC86  F007         	call	_TiResetTics
  2838                           
  2839                           ;keypad.c: 145:             }else{
  2840  0006AC  0012               	return	
  2841  0006AE                     l2331:
  2842                           
  2843                           ;keypad.c: 146:                 if(pressed){
  2844  0006AE  501B               	movf	_pressed^0,w,c
  2845  0006B0  B4D8               	btfsc	status,2,c
  2846  0006B2  D018               	goto	l185
  2847                           
  2848                           ;keypad.c: 147:                     stateSMS=1;
  2849  0006B4  0E01               	movlw	1
  2850  0006B6  6E17               	movwf	_stateSMS^0,c
  2851                           
  2852                           ;keypad.c: 148:                     currentKey = KeGetGenericValue();
  2853  0006B8  EC4C  F007         	call	_KeGetGenericValue	;wreg free
  2854  0006BC  6E1D               	movwf	_currentKey^0,c
  2855                           
  2856                           ;keypad.c: 149:                     available = 2;
  2857  0006BE  0E02               	movlw	2
  2858  0006C0  6E19               	movwf	_available^0,c
  2859                           
  2860                           ;keypad.c: 150:                     if(numPresses != 0 && previous != currentKey ){
  2861  0006C2  501A               	movf	_numPresses^0,w,c
  2862  0006C4  B4D8               	btfsc	status,2,c
  2863  0006C6  D00A               	goto	l2347
  2864  0006C8  501D               	movf	_currentKey^0,w,c
  2865  0006CA  181C               	xorwf	_previous^0,w,c
  2866  0006CC  B4D8               	btfsc	status,2,c
  2867  0006CE  D006               	goto	l2347
  2868                           
  2869                           ;keypad.c: 152:                         available = 1;
  2870  0006D0  0E01               	movlw	1
  2871  0006D2  6E19               	movwf	_available^0,c
  2872                           
  2873                           ;keypad.c: 154:                         previous = currentKey;
  2874  0006D4  C01D  F01C         	movff	_currentKey,_previous
  2875                           
  2876                           ;keypad.c: 156:                         numPresses = 0;
  2877  0006D8  0E00               	movlw	0
  2878  0006DA  6E1A               	movwf	_numPresses^0,c
  2879  0006DC                     l2347:
  2880                           
  2881                           ;keypad.c: 160:                     TiResetTics(timer_SMS);
  2882  0006DC  501E               	movf	_timer_SMS^0,w,c
  2883  0006DE  EC86  F007         	call	_TiResetTics
  2884                           
  2885                           ;keypad.c: 162:                 }else{
  2886  0006E2  0012               	return	
  2887  0006E4                     l185:
  2888                           
  2889                           ;keypad.c: 163:                   previous=currentKey;
  2890  0006E4  C01D  F01C         	movff	_currentKey,_previous
  2891  0006E8  0012               	return	
  2892  0006EA                     l2349:
  2893                           
  2894                           ;keypad.c: 175:             numPresses++;
  2895  0006EA  2A1A               	incf	_numPresses^0,f,c
  2896                           
  2897                           ;keypad.c: 176:             stateSMS = 2;
  2898  0006EC  0E02               	movlw	2
  2899  0006EE  6E17               	movwf	_stateSMS^0,c
  2900                           
  2901                           ;keypad.c: 177:             break;
  2902  0006F0  0012               	return	
  2903  0006F2                     l2353:
  2904                           
  2905                           ;keypad.c: 180:             if (!pressed){
  2906  0006F2  501B               	movf	_pressed^0,w,c
  2907  0006F4  A4D8               	btfss	status,2,c
  2908  0006F6  0012               	return	
  2909                           
  2910                           ;keypad.c: 181:                 TiResetTics(timer_SMS);
  2911  0006F8  501E               	movf	_timer_SMS^0,w,c
  2912  0006FA  EC86  F007         	call	_TiResetTics
  2913                           
  2914                           ;keypad.c: 183:                 stateSMS = 0;
  2915  0006FE  0E00               	movlw	0
  2916  000700  6E17               	movwf	_stateSMS^0,c
  2917  000702  0012               	return	
  2918  000704                     l2359:
  2919                           
  2920                           ;keypad.c: 188:             if(pressed){
  2921  000704  501B               	movf	_pressed^0,w,c
  2922  000706  B4D8               	btfsc	status,2,c
  2923  000708  0012               	return	
  2924                           
  2925                           ;keypad.c: 189:                 stateSMS = 4;
  2926  00070A  0E04               	movlw	4
  2927  00070C  6E17               	movwf	_stateSMS^0,c
  2928  00070E  0012               	return	
  2929  000710                     l2363:
  2930                           
  2931                           ;keypad.c: 194:             stateSMS = 5;
  2932  000710  0E05               	movlw	5
  2933  000712  6E17               	movwf	_stateSMS^0,c
  2934                           
  2935                           ;keypad.c: 195:             break;
  2936  000714  0012               	return	
  2937  000716                     l2365:
  2938                           
  2939                           ;keypad.c: 197:             if (!pressed){
  2940  000716  501B               	movf	_pressed^0,w,c
  2941  000718  A4D8               	btfss	status,2,c
  2942  00071A  0012               	return	
  2943                           
  2944                           ;keypad.c: 198:                 TiResetTics(timer_SMS);
  2945  00071C  501E               	movf	_timer_SMS^0,w,c
  2946  00071E  EC86  F007         	call	_TiResetTics
  2947                           
  2948                           ;keypad.c: 200:                 stateSMS = 3;
  2949  000722  0E03               	movlw	3
  2950  000724  6E17               	movwf	_stateSMS^0,c
  2951  000726  0012               	return	
  2952  000728                     l2373:
  2953  000728  5017               	movf	_stateSMS^0,w,c
  2954  00072A  6E2F               	movwf	??_SMSMotor^0,c
  2955  00072C  6A30               	clrf	(??_SMSMotor+1)^0,c
  2956                           
  2957                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2958                           ; Switch size 1, requested type "simple"
  2959                           ; Number of cases is 1, Range of values is 0 to 0
  2960                           ; switch strategies available:
  2961                           ; Name         Instructions Cycles
  2962                           ; simple_byte            4     3 (average)
  2963                           ;	Chosen strategy is simple_byte
  2964  00072E  5030               	movf	(??_SMSMotor+1)^0,w,c
  2965  000730  0A00               	xorlw	0	; case 0
  2966  000732  A4D8               	btfss	status,2,c
  2967  000734  0012               	return	
  2968                           
  2969                           ; Switch size 1, requested type "simple"
  2970                           ; Number of cases is 6, Range of values is 0 to 5
  2971                           ; switch strategies available:
  2972                           ; Name         Instructions Cycles
  2973                           ; simple_byte           19    10 (average)
  2974                           ;	Chosen strategy is simple_byte
  2975  000736  502F               	movf	??_SMSMotor^0,w,c
  2976  000738  0A00               	xorlw	0	; case 0
  2977  00073A  B4D8               	btfsc	status,2,c
  2978  00073C  D7A1               	goto	l182
  2979  00073E  0A01               	xorlw	1	; case 1
  2980  000740  B4D8               	btfsc	status,2,c
  2981  000742  D7D3               	goto	l2349
  2982  000744  0A03               	xorlw	3	; case 2
  2983  000746  B4D8               	btfsc	status,2,c
  2984  000748  D7D4               	goto	l2353
  2985  00074A  0A01               	xorlw	1	; case 3
  2986  00074C  B4D8               	btfsc	status,2,c
  2987  00074E  D7DA               	goto	l2359
  2988  000750  0A07               	xorlw	7	; case 4
  2989  000752  B4D8               	btfsc	status,2,c
  2990  000754  D7DD               	goto	l2363
  2991  000756  0A01               	xorlw	1	; case 5
  2992  000758  A4D8               	btfss	status,2,c
  2993  00075A  0012               	return	
  2994  00075C  D7DC               	goto	l2365
  2995  00075E                     __end_of_SMSMotor:
  2996                           	callstack 0
  2997                           
  2998 ;; *************** function _KeGetGenericValue *****************
  2999 ;; Defined at:
  3000 ;;		line 227 in file "keypad.c"
  3001 ;; Parameters:    Size  Location     Type
  3002 ;;		None
  3003 ;; Auto vars:     Size  Location     Type
  3004 ;;		None
  3005 ;; Return value:  Size  Location     Type
  3006 ;;                  1    wreg      unsigned char 
  3007 ;; Registers used:
  3008 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3009 ;; Tracked objects:
  3010 ;;		On entry : 0/0
  3011 ;;		On exit  : 0/0
  3012 ;;		Unchanged: 0/0
  3013 ;; Data sizes:     COMRAM   BANK0   BANK1
  3014 ;;      Params:         0       0       0
  3015 ;;      Locals:         0       0       0
  3016 ;;      Temps:          2       0       0
  3017 ;;      Totals:         2       0       0
  3018 ;;Total ram usage:        2 bytes
  3019 ;; Hardware stack levels used: 1
  3020 ;; Hardware stack levels required when called: 3
  3021 ;; This function calls:
  3022 ;;		_getColumn
  3023 ;; This function is called by:
  3024 ;;		_SMSMotor
  3025 ;;		_KeGetCharValue
  3026 ;;		_menuMotor
  3027 ;; This function uses a non-reentrant model
  3028 ;;
  3029                           
  3030                           	psect	text22
  3031  000E98                     __ptext22:
  3032                           	callstack 0
  3033  000E98                     _KeGetGenericValue:
  3034                           	callstack 26
  3035                           
  3036                           ;keypad.c: 228:     return TABLE[(row*3)+getColumn()];
  3037                           
  3038                           ;incstack = 0
  3039  000E98  EC92  F007         	call	_getColumn	;wreg free
  3040  000E9C  6E28               	movwf	??_KeGetGenericValue^0,c
  3041  000E9E  5020               	movf	_row^0,w,c
  3042  000EA0  0D03               	mullw	3
  3043  000EA2  50F3               	movf	243,w,c
  3044  000EA4  0F7D               	addlw	low _TABLE
  3045  000EA6  2428               	addwf	??_KeGetGenericValue^0,w,c
  3046  000EA8  6E29               	movwf	(??_KeGetGenericValue+1)^0,c
  3047  000EAA  C029  FFF6         	movff	??_KeGetGenericValue+1,tblptrl
  3048  000EAE                     	if	1	;There is more than 1 active tblptr byte
  3049  000EAE  0E02               	movlw	high __smallconst
  3050  000EB0  6EF7               	movwf	tblptrh,c
  3051  000EB2                     	endif
  3052  000EB2                     	if	0	;tblptru may be non-zero
  3053  000EB2                     	endif
  3054  000EB2                     	if	0	;tblptru may be non-zero
  3055  000EB2                     	endif
  3056  000EB2  0008               	tblrd		*
  3057  000EB4  50F5               	movf	tablat,w,c
  3058  000EB6  0012               	return		;funcret
  3059  000EB8                     __end_of_KeGetGenericValue:
  3060                           	callstack 0
  3061                           
  3062 ;; *************** function _getColumn *****************
  3063 ;; Defined at:
  3064 ;;		line 214 in file "keypad.c"
  3065 ;; Parameters:    Size  Location     Type
  3066 ;;		None
  3067 ;; Auto vars:     Size  Location     Type
  3068 ;;		None
  3069 ;; Return value:  Size  Location     Type
  3070 ;;                  1    wreg      unsigned char 
  3071 ;; Registers used:
  3072 ;;		wreg
  3073 ;; Tracked objects:
  3074 ;;		On entry : 0/0
  3075 ;;		On exit  : 0/0
  3076 ;;		Unchanged: 0/0
  3077 ;; Data sizes:     COMRAM   BANK0   BANK1
  3078 ;;      Params:         0       0       0
  3079 ;;      Locals:         0       0       0
  3080 ;;      Temps:          0       0       0
  3081 ;;      Totals:         0       0       0
  3082 ;;Total ram usage:        0 bytes
  3083 ;; Hardware stack levels used: 1
  3084 ;; Hardware stack levels required when called: 2
  3085 ;; This function calls:
  3086 ;;		Nothing
  3087 ;; This function is called by:
  3088 ;;		_KeGetGenericValue
  3089 ;; This function uses a non-reentrant model
  3090 ;;
  3091                           
  3092                           	psect	text23
  3093  000F24                     __ptext23:
  3094                           	callstack 0
  3095  000F24                     _getColumn:
  3096                           	callstack 26
  3097                           
  3098                           ;keypad.c: 215:     if (!PORTBbits.RB0) return 0;
  3099                           
  3100                           ;incstack = 0
  3101  000F24  B081               	btfsc	129,0,c	;volatile
  3102  000F26  D002               	goto	l205
  3103  000F28  0E00               	movlw	0
  3104  000F2A  0012               	return	
  3105  000F2C                     l205:
  3106                           
  3107                           ;keypad.c: 216:     if (!PORTBbits.RB1) return 1;
  3108  000F2C  B281               	btfsc	129,1,c	;volatile
  3109  000F2E  D002               	goto	l1305
  3110  000F30  0E01               	movlw	1
  3111  000F32  0012               	return	
  3112  000F34                     l1305:
  3113                           
  3114                           ;keypad.c: 217:     return 2;
  3115  000F34  0E02               	movlw	2
  3116  000F36  0012               	return		;funcret
  3117  000F38                     __end_of_getColumn:
  3118                           	callstack 0
  3119                           
  3120 ;; *************** function _LcInit *****************
  3121 ;; Defined at:
  3122 ;;		line 68 in file "LcTLCD.c"
  3123 ;; Parameters:    Size  Location     Type
  3124 ;;  rows            1    wreg     unsigned char 
  3125 ;;  columns         1   17[COMRAM] unsigned char 
  3126 ;; Auto vars:     Size  Location     Type
  3127 ;;  rows            1   19[COMRAM] unsigned char 
  3128 ;;  i               2   20[COMRAM] int 
  3129 ;; Return value:  Size  Location     Type
  3130 ;;                  1    wreg      void 
  3131 ;; Registers used:
  3132 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3133 ;; Tracked objects:
  3134 ;;		On entry : 0/0
  3135 ;;		On exit  : 0/0
  3136 ;;		Unchanged: 0/0
  3137 ;; Data sizes:     COMRAM   BANK0   BANK1
  3138 ;;      Params:         1       0       0
  3139 ;;      Locals:         3       0       0
  3140 ;;      Temps:          1       0       0
  3141 ;;      Totals:         5       0       0
  3142 ;;Total ram usage:        5 bytes
  3143 ;; Hardware stack levels used: 1
  3144 ;; Hardware stack levels required when called: 4
  3145 ;; This function calls:
  3146 ;;		_CantaIR
  3147 ;;		_EscriuPrimeraOrdre
  3148 ;;		_Espera
  3149 ;;		_TiGetTimer
  3150 ;;		_WaitForBusy
  3151 ;; This function is called by:
  3152 ;;		_main
  3153 ;; This function uses a non-reentrant model
  3154 ;;
  3155                           
  3156                           	psect	text24
  3157  00057C                     __ptext24:
  3158                           	callstack 0
  3159  00057C                     _LcInit:
  3160                           	callstack 26
  3161                           
  3162                           ;incstack = 0
  3163                           ;LcInit@rows stored from wreg
  3164  00057C  6E36               	movwf	LcInit@rows^0,c
  3165                           
  3166                           ;LcTLCD.c: 74:  int i;;LcTLCD.c: 75:  Timer = TiGetTimer();
  3167  00057E  EC68  F006         	call	_TiGetTimer	;wreg free
  3168  000582  6E35               	movwf	??_LcInit^0,c
  3169  000584  5035               	movf	??_LcInit^0,w,c
  3170  000586  6E01               	movwf	_Timer^0,c
  3171  000588  6A02               	clrf	(_Timer+1)^0,c
  3172                           
  3173                           ;LcTLCD.c: 76:  Rows = rows; Columns = columns;
  3174  00058A  C036  F016         	movff	LcInit@rows,_Rows
  3175  00058E  C034  F015         	movff	LcInit@columns,_Columns
  3176                           
  3177                           ;LcTLCD.c: 77:  RowAct = ColumnAct = 0;
  3178  000592  0E00               	movlw	0
  3179  000594  6E13               	movwf	_ColumnAct^0,c
  3180  000596  C013  F014         	movff	_ColumnAct,_RowAct
  3181                           
  3182                           ;LcTLCD.c: 78:  (TRISDbits.TRISD4 = TRISDbits.TRISD5 = TRISDbits.TRISD6 = 0);
  3183  00059A  9C95               	bcf	149,6,c	;volatile
  3184  00059C  9A95               	bcf	149,5,c	;volatile
  3185  00059E  9895               	bcf	149,4,c	;volatile
  3186                           
  3187                           ;LcTLCD.c: 79:  for (i = 0; i < 2; i++) {
  3188  0005A0  0E00               	movlw	0
  3189  0005A2  6E38               	movwf	(LcInit@i+1)^0,c
  3190  0005A4  0E00               	movlw	0
  3191  0005A6  6E37               	movwf	LcInit@i^0,c
  3192  0005A8                     l2291:
  3193                           
  3194                           ;LcTLCD.c: 80:   Espera(Timer, 100);
  3195  0005A8  C001  F02F         	movff	_Timer,Espera@Timer
  3196  0005AC  C002  F030         	movff	_Timer+1,Espera@Timer+1
  3197  0005B0  0E00               	movlw	0
  3198  0005B2  6E32               	movwf	(Espera@ms+1)^0,c
  3199  0005B4  0E64               	movlw	100
  3200  0005B6  6E31               	movwf	Espera@ms^0,c
  3201  0005B8  EC1B  F007         	call	_Espera	;wreg free
  3202                           
  3203                           ;LcTLCD.c: 83:   EscriuPrimeraOrdre(0x02 | 0x01);
  3204  0005BC  0E03               	movlw	3
  3205  0005BE  EC4C  F005         	call	_EscriuPrimeraOrdre
  3206                           
  3207                           ;LcTLCD.c: 84:   Espera(Timer, 5);
  3208  0005C2  C001  F02F         	movff	_Timer,Espera@Timer
  3209  0005C6  C002  F030         	movff	_Timer+1,Espera@Timer+1
  3210  0005CA  0E00               	movlw	0
  3211  0005CC  6E32               	movwf	(Espera@ms+1)^0,c
  3212  0005CE  0E05               	movlw	5
  3213  0005D0  6E31               	movwf	Espera@ms^0,c
  3214  0005D2  EC1B  F007         	call	_Espera	;wreg free
  3215                           
  3216                           ;LcTLCD.c: 85:   EscriuPrimeraOrdre(0x02 | 0x01);
  3217  0005D6  0E03               	movlw	3
  3218  0005D8  EC4C  F005         	call	_EscriuPrimeraOrdre
  3219                           
  3220                           ;LcTLCD.c: 86:   Espera(Timer, 1);
  3221  0005DC  C001  F02F         	movff	_Timer,Espera@Timer
  3222  0005E0  C002  F030         	movff	_Timer+1,Espera@Timer+1
  3223  0005E4  0E00               	movlw	0
  3224  0005E6  6E32               	movwf	(Espera@ms+1)^0,c
  3225  0005E8  0E01               	movlw	1
  3226  0005EA  6E31               	movwf	Espera@ms^0,c
  3227  0005EC  EC1B  F007         	call	_Espera	;wreg free
  3228                           
  3229                           ;LcTLCD.c: 87:   EscriuPrimeraOrdre(0x02 | 0x01);
  3230  0005F0  0E03               	movlw	3
  3231  0005F2  EC4C  F005         	call	_EscriuPrimeraOrdre
  3232                           
  3233                           ;LcTLCD.c: 88:   Espera(Timer, 1);
  3234  0005F6  C001  F02F         	movff	_Timer,Espera@Timer
  3235  0005FA  C002  F030         	movff	_Timer+1,Espera@Timer+1
  3236  0005FE  0E00               	movlw	0
  3237  000600  6E32               	movwf	(Espera@ms+1)^0,c
  3238  000602  0E01               	movlw	1
  3239  000604  6E31               	movwf	Espera@ms^0,c
  3240  000606  EC1B  F007         	call	_Espera	;wreg free
  3241                           
  3242                           ;LcTLCD.c: 91:   EscriuPrimeraOrdre(0x02);
  3243  00060A  0E02               	movlw	2
  3244  00060C  EC4C  F005         	call	_EscriuPrimeraOrdre
  3245                           
  3246                           ;LcTLCD.c: 92:   Espera(Timer, 1);
  3247  000610  C001  F02F         	movff	_Timer,Espera@Timer
  3248  000614  C002  F030         	movff	_Timer+1,Espera@Timer+1
  3249  000618  0E00               	movlw	0
  3250  00061A  6E32               	movwf	(Espera@ms+1)^0,c
  3251  00061C  0E01               	movlw	1
  3252  00061E  6E31               	movwf	Espera@ms^0,c
  3253  000620  EC1B  F007         	call	_Espera	;wreg free
  3254                           
  3255                           ;LcTLCD.c: 93:   CantaIR(0x20 | 0x08);
  3256  000624  0E28               	movlw	40
  3257  000626  ECD6  F006         	call	_CantaIR
  3258                           
  3259                           ;LcTLCD.c: 96:   WaitForBusy(); CantaIR(0x08);
  3260  00062A  EC48  F006         	call	_WaitForBusy	;wreg free
  3261  00062E  0E08               	movlw	8
  3262  000630  ECD6  F006         	call	_CantaIR
  3263                           
  3264                           ;LcTLCD.c: 97:   WaitForBusy(); CantaIR(0x01);
  3265  000634  EC48  F006         	call	_WaitForBusy	;wreg free
  3266  000638  0E01               	movlw	1
  3267  00063A  ECD6  F006         	call	_CantaIR
  3268                           
  3269                           ;LcTLCD.c: 98:   Espera(Timer,3);
  3270  00063E  C001  F02F         	movff	_Timer,Espera@Timer
  3271  000642  C002  F030         	movff	_Timer+1,Espera@Timer+1
  3272  000646  0E00               	movlw	0
  3273  000648  6E32               	movwf	(Espera@ms+1)^0,c
  3274  00064A  0E03               	movlw	3
  3275  00064C  6E31               	movwf	Espera@ms^0,c
  3276  00064E  EC1B  F007         	call	_Espera	;wreg free
  3277                           
  3278                           ;LcTLCD.c: 99:   WaitForBusy(); CantaIR(0x04 | 0x02);
  3279  000652  EC48  F006         	call	_WaitForBusy	;wreg free
  3280  000656  0E06               	movlw	6
  3281  000658  ECD6  F006         	call	_CantaIR
  3282                           
  3283                           ;LcTLCD.c: 100:   WaitForBusy(); CantaIR(0x08 | 0x04 | 0x02 | 0x01);
  3284  00065C  EC48  F006         	call	_WaitForBusy	;wreg free
  3285  000660  0E0F               	movlw	15
  3286  000662  ECD6  F006         	call	_CantaIR
  3287                           
  3288                           ;LcTLCD.c: 101:  }
  3289  000666  4A37               	infsnz	LcInit@i^0,f,c
  3290  000668  2A38               	incf	(LcInit@i+1)^0,f,c
  3291  00066A  BE38               	btfsc	(LcInit@i+1)^0,7,c
  3292  00066C  D79D               	goto	l2291
  3293  00066E  5038               	movf	(LcInit@i+1)^0,w,c
  3294  000670  E105               	bnz	u1640
  3295  000672  0E02               	movlw	2
  3296  000674  5C37               	subwf	LcInit@i^0,w,c
  3297  000676  B0D8               	btfsc	status,0,c
  3298  000678  0012               	return	
  3299  00067A  D796               	goto	l2291
  3300  00067C                     u1640:
  3301  00067C  0012               	return		;funcret
  3302  00067E                     __end_of_LcInit:
  3303                           	callstack 0
  3304                           
  3305 ;; *************** function _WaitForBusy *****************
  3306 ;; Defined at:
  3307 ;;		line 261 in file "LcTLCD.c"
  3308 ;; Parameters:    Size  Location     Type
  3309 ;;		None
  3310 ;; Auto vars:     Size  Location     Type
  3311 ;;  Busy            1   12[COMRAM] unsigned char 
  3312 ;; Return value:  Size  Location     Type
  3313 ;;                  1    wreg      void 
  3314 ;; Registers used:
  3315 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3316 ;; Tracked objects:
  3317 ;;		On entry : 0/0
  3318 ;;		On exit  : 0/0
  3319 ;;		Unchanged: 0/0
  3320 ;; Data sizes:     COMRAM   BANK0   BANK1
  3321 ;;      Params:         0       0       0
  3322 ;;      Locals:         1       0       0
  3323 ;;      Temps:          0       0       0
  3324 ;;      Totals:         1       0       0
  3325 ;;Total ram usage:        1 bytes
  3326 ;; Hardware stack levels used: 1
  3327 ;; Hardware stack levels required when called: 3
  3328 ;; This function calls:
  3329 ;;		_TiGetTics
  3330 ;;		_TiResetTics
  3331 ;; This function is called by:
  3332 ;;		_LcInit
  3333 ;;		_LcClear
  3334 ;;		_LcCursorOn
  3335 ;;		_LcCursorOff
  3336 ;;		_LcGotoXY
  3337 ;;		_LcPutChar
  3338 ;; This function uses a non-reentrant model
  3339 ;;
  3340                           
  3341                           	psect	text25
  3342  000C90                     __ptext25:
  3343                           	callstack 0
  3344  000C90                     _WaitForBusy:
  3345                           	callstack 24
  3346                           
  3347                           ;LcTLCD.c: 262:  (TRISDbits.TRISD0 = TRISDbits.TRISD1 = TRISDbits.TRISD2 = TRISDbits.TRI
      +                          SD3 = 1);
  3348                           
  3349                           ;incstack = 0
  3350  000C90  8695               	bsf	149,3,c	;volatile
  3351  000C92  8495               	bsf	149,2,c	;volatile
  3352  000C94  8295               	bsf	149,1,c	;volatile
  3353  000C96  8095               	bsf	149,0,c	;volatile
  3354                           
  3355                           ;LcTLCD.c: 263:  (LATDbits.LATD4 = 0);
  3356  000C98  988C               	bcf	140,4,c	;volatile
  3357                           
  3358                           ;LcTLCD.c: 264:  (LATDbits.LATD5 = 1);
  3359  000C9A  8A8C               	bsf	140,5,c	;volatile
  3360                           
  3361                           ;LcTLCD.c: 265:  TiResetTics(Timer);
  3362  000C9C  5001               	movf	_Timer^0,w,c
  3363  000C9E  EC86  F007         	call	_TiResetTics
  3364  000CA2                     l2029:
  3365                           
  3366                           ;LcTLCD.c: 267:   (LATDbits.LATD6 = 1);(LATDbits.LATD6 = 1);
  3367  000CA2  8C8C               	bsf	140,6,c	;volatile
  3368  000CA4  8C8C               	bsf	140,6,c	;volatile
  3369                           
  3370                           ;LcTLCD.c: 268:   Busy = (PORTDbits.RD3);
  3371  000CA6  0E00               	movlw	0
  3372  000CA8  B683               	btfsc	131,3,c	;volatile
  3373  000CAA  0E01               	movlw	1
  3374  000CAC  6E2F               	movwf	WaitForBusy@Busy^0,c
  3375                           
  3376                           ;LcTLCD.c: 269:   (LATDbits.LATD6 = 0);
  3377  000CAE  9C8C               	bcf	140,6,c	;volatile
  3378                           
  3379                           ;LcTLCD.c: 270:   (LATDbits.LATD6 = 0);
  3380  000CB0  9C8C               	bcf	140,6,c	;volatile
  3381                           
  3382                           ;LcTLCD.c: 271:   (LATDbits.LATD6 = 1);(LATDbits.LATD6 = 1);
  3383  000CB2  8C8C               	bsf	140,6,c	;volatile
  3384  000CB4  8C8C               	bsf	140,6,c	;volatile
  3385                           
  3386                           ;LcTLCD.c: 273:   (LATDbits.LATD6 = 0);
  3387  000CB6  9C8C               	bcf	140,6,c	;volatile
  3388                           
  3389                           ;LcTLCD.c: 274:   (LATDbits.LATD6 = 0);
  3390  000CB8  9C8C               	bcf	140,6,c	;volatile
  3391                           
  3392                           ;LcTLCD.c: 275:   if (TiGetTics(Timer)) break;
  3393  000CBA  5001               	movf	_Timer^0,w,c
  3394  000CBC  EC05  F007         	call	_TiGetTics
  3395  000CC0  5028               	movf	?_TiGetTics^0,w,c
  3396  000CC2  1029               	iorwf	(?_TiGetTics+1)^0,w,c
  3397  000CC4  A4D8               	btfss	status,2,c
  3398  000CC6  0012               	return	
  3399                           
  3400                           ;LcTLCD.c: 276:  } while(Busy);
  3401  000CC8  502F               	movf	WaitForBusy@Busy^0,w,c
  3402  000CCA  B4D8               	btfsc	status,2,c
  3403  000CCC  0012               	return	
  3404  000CCE  D7E9               	goto	l2029
  3405  000CD0                     __end_of_WaitForBusy:
  3406                           	callstack 0
  3407                           
  3408 ;; *************** function _TiGetTimer *****************
  3409 ;; Defined at:
  3410 ;;		line 72 in file "TTimer.c"
  3411 ;; Parameters:    Size  Location     Type
  3412 ;;		None
  3413 ;; Auto vars:     Size  Location     Type
  3414 ;;		None
  3415 ;; Return value:  Size  Location     Type
  3416 ;;                  1    wreg      unsigned char 
  3417 ;; Registers used:
  3418 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  3419 ;; Tracked objects:
  3420 ;;		On entry : 0/0
  3421 ;;		On exit  : 0/0
  3422 ;;		Unchanged: 0/0
  3423 ;; Data sizes:     COMRAM   BANK0   BANK1
  3424 ;;      Params:         0       0       0
  3425 ;;      Locals:         0       0       0
  3426 ;;      Temps:          1       0       0
  3427 ;;      Totals:         1       0       0
  3428 ;;Total ram usage:        1 bytes
  3429 ;; Hardware stack levels used: 1
  3430 ;; Hardware stack levels required when called: 2
  3431 ;; This function calls:
  3432 ;;		Nothing
  3433 ;; This function is called by:
  3434 ;;		_main
  3435 ;;		_initKeypad
  3436 ;;		_LcInit
  3437 ;; This function uses a non-reentrant model
  3438 ;;
  3439                           
  3440                           	psect	text26
  3441  000CD0                     __ptext26:
  3442                           	callstack 0
  3443  000CD0                     _TiGetTimer:
  3444                           	callstack 27
  3445                           
  3446                           ;TTimer.c: 76:     counter=0;
  3447                           
  3448                           ;incstack = 0
  3449  000CD0  0E00               	movlw	0
  3450  000CD2  6E21               	movwf	_counter^0,c
  3451                           
  3452                           ;TTimer.c: 77:     while (s_Timers[counter].b_busy==1) {
  3453  000CD4  D007               	goto	l2161
  3454  000CD6                     l2153:
  3455                           
  3456                           ;TTimer.c: 78:         counter++;
  3457  000CD6  2A21               	incf	_counter^0,f,c
  3458                           
  3459                           ;TTimer.c: 79:  if (counter == 25) return -1;
  3460  000CD8  0E19               	movlw	25
  3461  000CDA  1821               	xorwf	_counter^0,w,c
  3462  000CDC  A4D8               	btfss	status,2,c
  3463  000CDE  D002               	goto	l2161
  3464  000CE0  0EFF               	movlw	255
  3465  000CE2  0012               	return	
  3466  000CE4                     l2161:
  3467                           
  3468                           ;TTimer.c: 77:     while (s_Timers[counter].b_busy==1) {
  3469  000CE4  5021               	movf	_counter^0,w,c
  3470  000CE6  0D03               	mullw	3
  3471  000CE8  50F3               	movf	243,w,c
  3472  000CEA  0F82               	addlw	low (_s_Timers+2)
  3473  000CEC  6ED9               	movwf	fsr2l,c
  3474  000CEE  6ADA               	clrf	fsr2h,c
  3475  000CF0  04DE               	decf	postinc2,w,c
  3476  000CF2  B4D8               	btfsc	status,2,c
  3477  000CF4  D7F0               	goto	l2153
  3478                           
  3479                           ;TTimer.c: 81:     s_Timers[counter].b_busy=1;
  3480  000CF6  5021               	movf	_counter^0,w,c
  3481  000CF8  0D03               	mullw	3
  3482  000CFA  50F3               	movf	243,w,c
  3483  000CFC  0F82               	addlw	low (_s_Timers+2)
  3484  000CFE  6ED9               	movwf	fsr2l,c
  3485  000D00  6ADA               	clrf	fsr2h,c
  3486  000D02  0E01               	movlw	1
  3487  000D04  6EDF               	movwf	indf2,c
  3488                           
  3489                           ;TTimer.c: 82:     return (counter);
  3490  000D06  5021               	movf	_counter^0,w,c
  3491  000D08  0012               	return		;funcret
  3492  000D0A                     __end_of_TiGetTimer:
  3493                           	callstack 0
  3494                           
  3495 ;; *************** function _Espera *****************
  3496 ;; Defined at:
  3497 ;;		line 210 in file "LcTLCD.c"
  3498 ;; Parameters:    Size  Location     Type
  3499 ;;  Timer           2   12[COMRAM] int 
  3500 ;;  ms              2   14[COMRAM] int 
  3501 ;; Auto vars:     Size  Location     Type
  3502 ;;		None
  3503 ;; Return value:  Size  Location     Type
  3504 ;;                  1    wreg      void 
  3505 ;; Registers used:
  3506 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3507 ;; Tracked objects:
  3508 ;;		On entry : 0/0
  3509 ;;		On exit  : 0/0
  3510 ;;		Unchanged: 0/0
  3511 ;; Data sizes:     COMRAM   BANK0   BANK1
  3512 ;;      Params:         4       0       0
  3513 ;;      Locals:         0       0       0
  3514 ;;      Temps:          1       0       0
  3515 ;;      Totals:         5       0       0
  3516 ;;Total ram usage:        5 bytes
  3517 ;; Hardware stack levels used: 1
  3518 ;; Hardware stack levels required when called: 3
  3519 ;; This function calls:
  3520 ;;		_TiGetTics
  3521 ;;		_TiResetTics
  3522 ;; This function is called by:
  3523 ;;		_LcInit
  3524 ;;		_LcClear
  3525 ;; This function uses a non-reentrant model
  3526 ;;
  3527                           
  3528                           	psect	text27
  3529  000E36                     __ptext27:
  3530                           	callstack 0
  3531  000E36                     _Espera:
  3532                           	callstack 25
  3533                           
  3534                           ;LcTLCD.c: 211:  TiResetTics(Timer);
  3535                           
  3536                           ;incstack = 0
  3537  000E36  502F               	movf	Espera@Timer^0,w,c
  3538  000E38  EC86  F007         	call	_TiResetTics
  3539  000E3C                     l2111:
  3540  000E3C  502F               	movf	Espera@Timer^0,w,c
  3541  000E3E  EC05  F007         	call	_TiGetTics
  3542  000E42  5031               	movf	Espera@ms^0,w,c
  3543  000E44  5C28               	subwf	?_TiGetTics^0,w,c
  3544  000E46  5029               	movf	(?_TiGetTics+1)^0,w,c
  3545  000E48  0A80               	xorlw	128
  3546  000E4A  6E33               	movwf	??_Espera^0,c
  3547  000E4C  5032               	movf	(Espera@ms+1)^0,w,c
  3548  000E4E  0A80               	xorlw	128
  3549  000E50  5833               	subwfb	??_Espera^0,w,c
  3550  000E52  B0D8               	btfsc	status,0,c
  3551  000E54  0012               	return	
  3552  000E56  D7F2               	goto	l2111
  3553  000E58                     __end_of_Espera:
  3554                           	callstack 0
  3555                           
  3556 ;; *************** function _EscriuPrimeraOrdre *****************
  3557 ;; Defined at:
  3558 ;;		line 279 in file "LcTLCD.c"
  3559 ;; Parameters:    Size  Location     Type
  3560 ;;  ordre           1    wreg     unsigned char 
  3561 ;; Auto vars:     Size  Location     Type
  3562 ;;  ordre           1    6[COMRAM] unsigned char 
  3563 ;; Return value:  Size  Location     Type
  3564 ;;                  1    wreg      void 
  3565 ;; Registers used:
  3566 ;;		wreg, status,2, status,0
  3567 ;; Tracked objects:
  3568 ;;		On entry : 0/0
  3569 ;;		On exit  : 0/0
  3570 ;;		Unchanged: 0/0
  3571 ;; Data sizes:     COMRAM   BANK0   BANK1
  3572 ;;      Params:         0       0       0
  3573 ;;      Locals:         1       0       0
  3574 ;;      Temps:          1       0       0
  3575 ;;      Totals:         2       0       0
  3576 ;;Total ram usage:        2 bytes
  3577 ;; Hardware stack levels used: 1
  3578 ;; Hardware stack levels required when called: 2
  3579 ;; This function calls:
  3580 ;;		Nothing
  3581 ;; This function is called by:
  3582 ;;		_LcInit
  3583 ;; This function uses a non-reentrant model
  3584 ;;
  3585                           
  3586                           	psect	text28
  3587  000A98                     __ptext28:
  3588                           	callstack 0
  3589  000A98                     _EscriuPrimeraOrdre:
  3590                           	callstack 27
  3591                           
  3592                           ;incstack = 0
  3593                           ;EscriuPrimeraOrdre@ordre stored from wreg
  3594  000A98  6E29               	movwf	EscriuPrimeraOrdre@ordre^0,c
  3595                           
  3596                           ;LcTLCD.c: 281:  (TRISDbits.TRISD0 = TRISDbits.TRISD1 = TRISDbits.TRISD2 = TRISDbits.TRI
      +                          SD3 = 0); (LATDbits.LATD4 = 0); (LATDbits.LATD5 = 0);
  3597  000A9A  9695               	bcf	149,3,c	;volatile
  3598  000A9C  9495               	bcf	149,2,c	;volatile
  3599  000A9E  9295               	bcf	149,1,c	;volatile
  3600  000AA0  9095               	bcf	149,0,c	;volatile
  3601  000AA2  988C               	bcf	140,4,c	;volatile
  3602  000AA4  9A8C               	bcf	140,5,c	;volatile
  3603                           
  3604                           ;LcTLCD.c: 282:  (LATDbits.LATD6 = 1); (LATDbits.LATD6 = 1);
  3605  000AA6  8C8C               	bsf	140,6,c	;volatile
  3606  000AA8  8C8C               	bsf	140,6,c	;volatile
  3607                           
  3608                           ;LcTLCD.c: 283:   (LATDbits.LATD3 = (ordre & 0x08 ? 1 : 0));
  3609  000AAA  A629               	btfss	EscriuPrimeraOrdre@ordre^0,3,c
  3610  000AAC  D003               	goto	u440
  3611  000AAE  6A28               	clrf	??_EscriuPrimeraOrdre^0,c
  3612  000AB0  2A28               	incf	??_EscriuPrimeraOrdre^0,f,c
  3613  000AB2  D001               	goto	u458
  3614  000AB4                     u440:
  3615  000AB4  6A28               	clrf	??_EscriuPrimeraOrdre^0,c
  3616  000AB6                     u458:
  3617  000AB6  4628               	rlncf	??_EscriuPrimeraOrdre^0,f,c
  3618  000AB8  4628               	rlncf	??_EscriuPrimeraOrdre^0,f,c
  3619  000ABA  4628               	rlncf	??_EscriuPrimeraOrdre^0,f,c
  3620  000ABC  508C               	movf	140,w,c	;volatile
  3621  000ABE  1828               	xorwf	??_EscriuPrimeraOrdre^0,w,c
  3622  000AC0  0BF7               	andlw	-9
  3623  000AC2  1828               	xorwf	??_EscriuPrimeraOrdre^0,w,c
  3624  000AC4  6E8C               	movwf	140,c	;volatile
  3625                           
  3626                           ;LcTLCD.c: 284:   (LATDbits.LATD2 = (ordre & 0x04 ? 1 : 0));
  3627  000AC6  A429               	btfss	EscriuPrimeraOrdre@ordre^0,2,c
  3628  000AC8  D003               	goto	u460
  3629  000ACA  6A28               	clrf	??_EscriuPrimeraOrdre^0,c
  3630  000ACC  2A28               	incf	??_EscriuPrimeraOrdre^0,f,c
  3631  000ACE  D001               	goto	u478
  3632  000AD0                     u460:
  3633  000AD0  6A28               	clrf	??_EscriuPrimeraOrdre^0,c
  3634  000AD2                     u478:
  3635  000AD2  4628               	rlncf	??_EscriuPrimeraOrdre^0,f,c
  3636  000AD4  4628               	rlncf	??_EscriuPrimeraOrdre^0,f,c
  3637  000AD6  508C               	movf	140,w,c	;volatile
  3638  000AD8  1828               	xorwf	??_EscriuPrimeraOrdre^0,w,c
  3639  000ADA  0BFB               	andlw	-5
  3640  000ADC  1828               	xorwf	??_EscriuPrimeraOrdre^0,w,c
  3641  000ADE  6E8C               	movwf	140,c	;volatile
  3642                           
  3643                           ;LcTLCD.c: 285:   (LATDbits.LATD1 = (ordre & 0x02 ? 1 : 0));
  3644  000AE0  A229               	btfss	EscriuPrimeraOrdre@ordre^0,1,c
  3645  000AE2  D003               	goto	u480
  3646  000AE4  6A28               	clrf	??_EscriuPrimeraOrdre^0,c
  3647  000AE6  2A28               	incf	??_EscriuPrimeraOrdre^0,f,c
  3648  000AE8  D001               	goto	u498
  3649  000AEA                     u480:
  3650  000AEA  6A28               	clrf	??_EscriuPrimeraOrdre^0,c
  3651  000AEC                     u498:
  3652  000AEC  4628               	rlncf	??_EscriuPrimeraOrdre^0,f,c
  3653  000AEE  508C               	movf	140,w,c	;volatile
  3654  000AF0  1828               	xorwf	??_EscriuPrimeraOrdre^0,w,c
  3655  000AF2  0BFD               	andlw	-3
  3656  000AF4  1828               	xorwf	??_EscriuPrimeraOrdre^0,w,c
  3657  000AF6  6E8C               	movwf	140,c	;volatile
  3658                           
  3659                           ;LcTLCD.c: 286:   (LATDbits.LATD0 = (ordre & 0x01 ? 1 : 0));
  3660  000AF8  A029               	btfss	EscriuPrimeraOrdre@ordre^0,0,c
  3661  000AFA  D003               	goto	u500
  3662  000AFC  6A28               	clrf	??_EscriuPrimeraOrdre^0,c
  3663  000AFE  2A28               	incf	??_EscriuPrimeraOrdre^0,f,c
  3664  000B00  D001               	goto	u518
  3665  000B02                     u500:
  3666  000B02  6A28               	clrf	??_EscriuPrimeraOrdre^0,c
  3667  000B04                     u518:
  3668  000B04  508C               	movf	140,w,c	;volatile
  3669  000B06  1828               	xorwf	??_EscriuPrimeraOrdre^0,w,c
  3670  000B08  0BFE               	andlw	-2
  3671  000B0A  1828               	xorwf	??_EscriuPrimeraOrdre^0,w,c
  3672  000B0C  6E8C               	movwf	140,c	;volatile
  3673                           
  3674                           ;LcTLCD.c: 287:  (LATDbits.LATD6 = 0);
  3675  000B0E  9C8C               	bcf	140,6,c	;volatile
  3676  000B10  0012               	return		;funcret
  3677  000B12                     __end_of_EscriuPrimeraOrdre:
  3678                           	callstack 0
  3679                           
  3680 ;; *************** function _CantaIR *****************
  3681 ;; Defined at:
  3682 ;;		line 229 in file "LcTLCD.c"
  3683 ;; Parameters:    Size  Location     Type
  3684 ;;  IR              1    wreg     unsigned char 
  3685 ;; Auto vars:     Size  Location     Type
  3686 ;;  IR              1    7[COMRAM] unsigned char 
  3687 ;; Return value:  Size  Location     Type
  3688 ;;                  1    wreg      void 
  3689 ;; Registers used:
  3690 ;;		wreg, status,2, status,0, cstack
  3691 ;; Tracked objects:
  3692 ;;		On entry : 0/0
  3693 ;;		On exit  : 0/0
  3694 ;;		Unchanged: 0/0
  3695 ;; Data sizes:     COMRAM   BANK0   BANK1
  3696 ;;      Params:         0       0       0
  3697 ;;      Locals:         1       0       0
  3698 ;;      Temps:          0       0       0
  3699 ;;      Totals:         1       0       0
  3700 ;;Total ram usage:        1 bytes
  3701 ;; Hardware stack levels used: 1
  3702 ;; Hardware stack levels required when called: 3
  3703 ;; This function calls:
  3704 ;;		_CantaPartAlta
  3705 ;;		_CantaPartBaixa
  3706 ;; This function is called by:
  3707 ;;		_LcInit
  3708 ;;		_LcClear
  3709 ;;		_LcCursorOn
  3710 ;;		_LcCursorOff
  3711 ;;		_LcGotoXY
  3712 ;; This function uses a non-reentrant model
  3713 ;;
  3714                           
  3715                           	psect	text29
  3716  000DAC                     __ptext29:
  3717                           	callstack 0
  3718  000DAC                     _CantaIR:
  3719                           	callstack 23
  3720                           
  3721                           ;incstack = 0
  3722                           ;CantaIR@IR stored from wreg
  3723  000DAC  6E2A               	movwf	CantaIR@IR^0,c
  3724                           
  3725                           ;LcTLCD.c: 230:  (TRISDbits.TRISD0 = TRISDbits.TRISD1 = TRISDbits.TRISD2 = TRISDbits.TRI
      +                          SD3 = 0);
  3726  000DAE  9695               	bcf	149,3,c	;volatile
  3727  000DB0  9495               	bcf	149,2,c	;volatile
  3728  000DB2  9295               	bcf	149,1,c	;volatile
  3729  000DB4  9095               	bcf	149,0,c	;volatile
  3730                           
  3731                           ;LcTLCD.c: 231:  (LATDbits.LATD4 = 0);
  3732  000DB6  988C               	bcf	140,4,c	;volatile
  3733                           
  3734                           ;LcTLCD.c: 232:  (LATDbits.LATD5 = 0);
  3735  000DB8  9A8C               	bcf	140,5,c	;volatile
  3736                           
  3737                           ;LcTLCD.c: 233:  (LATDbits.LATD6 = 1);
  3738  000DBA  8C8C               	bsf	140,6,c	;volatile
  3739                           
  3740                           ;LcTLCD.c: 234:  CantaPartAlta(IR);
  3741  000DBC  502A               	movf	CantaIR@IR^0,w,c
  3742  000DBE  ECBD  F005         	call	_CantaPartAlta
  3743                           
  3744                           ;LcTLCD.c: 235:  (LATDbits.LATD6 = 1);
  3745  000DC2  8C8C               	bsf	140,6,c	;volatile
  3746                           
  3747                           ;LcTLCD.c: 236:  (LATDbits.LATD6 = 0);
  3748  000DC4  9C8C               	bcf	140,6,c	;volatile
  3749                           
  3750                           ;LcTLCD.c: 237:  (LATDbits.LATD6 = 0);
  3751  000DC6  9C8C               	bcf	140,6,c	;volatile
  3752                           
  3753                           ;LcTLCD.c: 238:  (LATDbits.LATD6 = 1);
  3754  000DC8  8C8C               	bsf	140,6,c	;volatile
  3755                           
  3756                           ;LcTLCD.c: 239:  CantaPartBaixa(IR);
  3757  000DCA  502A               	movf	CantaIR@IR^0,w,c
  3758  000DCC  EC89  F005         	call	_CantaPartBaixa
  3759                           
  3760                           ;LcTLCD.c: 240:  (LATDbits.LATD6 = 1);
  3761  000DD0  8C8C               	bsf	140,6,c	;volatile
  3762                           
  3763                           ;LcTLCD.c: 241:  (LATDbits.LATD6 = 0);
  3764  000DD2  9C8C               	bcf	140,6,c	;volatile
  3765                           
  3766                           ;LcTLCD.c: 242:  (TRISDbits.TRISD0 = TRISDbits.TRISD1 = TRISDbits.TRISD2 = TRISDbits.TRI
      +                          SD3 = 1);
  3767  000DD4  8695               	bsf	149,3,c	;volatile
  3768  000DD6  8495               	bsf	149,2,c	;volatile
  3769  000DD8  8295               	bsf	149,1,c	;volatile
  3770  000DDA  8095               	bsf	149,0,c	;volatile
  3771  000DDC  0012               	return		;funcret
  3772  000DDE                     __end_of_CantaIR:
  3773                           	callstack 0
  3774                           
  3775 ;; *************** function _CantaPartBaixa *****************
  3776 ;; Defined at:
  3777 ;;		line 222 in file "LcTLCD.c"
  3778 ;; Parameters:    Size  Location     Type
  3779 ;;  c               1    wreg     unsigned char 
  3780 ;; Auto vars:     Size  Location     Type
  3781 ;;  c               1    6[COMRAM] unsigned char 
  3782 ;; Return value:  Size  Location     Type
  3783 ;;                  1    wreg      void 
  3784 ;; Registers used:
  3785 ;;		wreg, status,2, status,0
  3786 ;; Tracked objects:
  3787 ;;		On entry : 0/0
  3788 ;;		On exit  : 0/0
  3789 ;;		Unchanged: 0/0
  3790 ;; Data sizes:     COMRAM   BANK0   BANK1
  3791 ;;      Params:         0       0       0
  3792 ;;      Locals:         1       0       0
  3793 ;;      Temps:          1       0       0
  3794 ;;      Totals:         2       0       0
  3795 ;;Total ram usage:        2 bytes
  3796 ;; Hardware stack levels used: 1
  3797 ;; Hardware stack levels required when called: 2
  3798 ;; This function calls:
  3799 ;;		Nothing
  3800 ;; This function is called by:
  3801 ;;		_CantaIR
  3802 ;;		_CantaData
  3803 ;; This function uses a non-reentrant model
  3804 ;;
  3805                           
  3806                           	psect	text30
  3807  000B12                     __ptext30:
  3808                           	callstack 0
  3809  000B12                     _CantaPartBaixa:
  3810                           	callstack 23
  3811                           
  3812                           ;incstack = 0
  3813                           ;CantaPartBaixa@c stored from wreg
  3814  000B12  6E29               	movwf	CantaPartBaixa@c^0,c
  3815                           
  3816                           ;LcTLCD.c: 223:   (LATDbits.LATD3 = (c & 0x08 ? 1 : 0));
  3817  000B14  A629               	btfss	CantaPartBaixa@c^0,3,c
  3818  000B16  D003               	goto	u1260
  3819  000B18  6A28               	clrf	??_CantaPartBaixa^0,c
  3820  000B1A  2A28               	incf	??_CantaPartBaixa^0,f,c
  3821  000B1C  D001               	goto	u1278
  3822  000B1E                     u1260:
  3823  000B1E  6A28               	clrf	??_CantaPartBaixa^0,c
  3824  000B20                     u1278:
  3825  000B20  4628               	rlncf	??_CantaPartBaixa^0,f,c
  3826  000B22  4628               	rlncf	??_CantaPartBaixa^0,f,c
  3827  000B24  4628               	rlncf	??_CantaPartBaixa^0,f,c
  3828  000B26  508C               	movf	140,w,c	;volatile
  3829  000B28  1828               	xorwf	??_CantaPartBaixa^0,w,c
  3830  000B2A  0BF7               	andlw	-9
  3831  000B2C  1828               	xorwf	??_CantaPartBaixa^0,w,c
  3832  000B2E  6E8C               	movwf	140,c	;volatile
  3833                           
  3834                           ;LcTLCD.c: 224:   (LATDbits.LATD2 = (c & 0x04 ? 1 : 0));
  3835  000B30  A429               	btfss	CantaPartBaixa@c^0,2,c
  3836  000B32  D003               	goto	u1280
  3837  000B34  6A28               	clrf	??_CantaPartBaixa^0,c
  3838  000B36  2A28               	incf	??_CantaPartBaixa^0,f,c
  3839  000B38  D001               	goto	u1298
  3840  000B3A                     u1280:
  3841  000B3A  6A28               	clrf	??_CantaPartBaixa^0,c
  3842  000B3C                     u1298:
  3843  000B3C  4628               	rlncf	??_CantaPartBaixa^0,f,c
  3844  000B3E  4628               	rlncf	??_CantaPartBaixa^0,f,c
  3845  000B40  508C               	movf	140,w,c	;volatile
  3846  000B42  1828               	xorwf	??_CantaPartBaixa^0,w,c
  3847  000B44  0BFB               	andlw	-5
  3848  000B46  1828               	xorwf	??_CantaPartBaixa^0,w,c
  3849  000B48  6E8C               	movwf	140,c	;volatile
  3850                           
  3851                           ;LcTLCD.c: 225:   (LATDbits.LATD1 = (c & 0x02 ? 1 : 0));
  3852  000B4A  A229               	btfss	CantaPartBaixa@c^0,1,c
  3853  000B4C  D003               	goto	u1300
  3854  000B4E  6A28               	clrf	??_CantaPartBaixa^0,c
  3855  000B50  2A28               	incf	??_CantaPartBaixa^0,f,c
  3856  000B52  D001               	goto	u1318
  3857  000B54                     u1300:
  3858  000B54  6A28               	clrf	??_CantaPartBaixa^0,c
  3859  000B56                     u1318:
  3860  000B56  4628               	rlncf	??_CantaPartBaixa^0,f,c
  3861  000B58  508C               	movf	140,w,c	;volatile
  3862  000B5A  1828               	xorwf	??_CantaPartBaixa^0,w,c
  3863  000B5C  0BFD               	andlw	-3
  3864  000B5E  1828               	xorwf	??_CantaPartBaixa^0,w,c
  3865  000B60  6E8C               	movwf	140,c	;volatile
  3866                           
  3867                           ;LcTLCD.c: 226:   (LATDbits.LATD0 = (c & 0x01 ? 1 : 0));
  3868  000B62  A029               	btfss	CantaPartBaixa@c^0,0,c
  3869  000B64  D003               	goto	u1320
  3870  000B66  6A28               	clrf	??_CantaPartBaixa^0,c
  3871  000B68  2A28               	incf	??_CantaPartBaixa^0,f,c
  3872  000B6A  D001               	goto	u1338
  3873  000B6C                     u1320:
  3874  000B6C  6A28               	clrf	??_CantaPartBaixa^0,c
  3875  000B6E                     u1338:
  3876  000B6E  508C               	movf	140,w,c	;volatile
  3877  000B70  1828               	xorwf	??_CantaPartBaixa^0,w,c
  3878  000B72  0BFE               	andlw	-2
  3879  000B74  1828               	xorwf	??_CantaPartBaixa^0,w,c
  3880  000B76  6E8C               	movwf	140,c	;volatile
  3881  000B78  0012               	return		;funcret
  3882  000B7A                     __end_of_CantaPartBaixa:
  3883                           	callstack 0
  3884                           
  3885 ;; *************** function _CantaPartAlta *****************
  3886 ;; Defined at:
  3887 ;;		line 215 in file "LcTLCD.c"
  3888 ;; Parameters:    Size  Location     Type
  3889 ;;  c               1    wreg     unsigned char 
  3890 ;; Auto vars:     Size  Location     Type
  3891 ;;  c               1    6[COMRAM] unsigned char 
  3892 ;; Return value:  Size  Location     Type
  3893 ;;                  1    wreg      void 
  3894 ;; Registers used:
  3895 ;;		wreg, status,2, status,0
  3896 ;; Tracked objects:
  3897 ;;		On entry : 0/0
  3898 ;;		On exit  : 0/0
  3899 ;;		Unchanged: 0/0
  3900 ;; Data sizes:     COMRAM   BANK0   BANK1
  3901 ;;      Params:         0       0       0
  3902 ;;      Locals:         1       0       0
  3903 ;;      Temps:          1       0       0
  3904 ;;      Totals:         2       0       0
  3905 ;;Total ram usage:        2 bytes
  3906 ;; Hardware stack levels used: 1
  3907 ;; Hardware stack levels required when called: 2
  3908 ;; This function calls:
  3909 ;;		Nothing
  3910 ;; This function is called by:
  3911 ;;		_CantaIR
  3912 ;;		_CantaData
  3913 ;; This function uses a non-reentrant model
  3914 ;;
  3915                           
  3916                           	psect	text31
  3917  000B7A                     __ptext31:
  3918                           	callstack 0
  3919  000B7A                     _CantaPartAlta:
  3920                           	callstack 23
  3921                           
  3922                           ;incstack = 0
  3923                           ;CantaPartAlta@c stored from wreg
  3924  000B7A  6E29               	movwf	CantaPartAlta@c^0,c
  3925                           
  3926                           ;LcTLCD.c: 216:   (LATDbits.LATD3 = (c & 0x80 ? 1 : 0));
  3927  000B7C  AE29               	btfss	CantaPartAlta@c^0,7,c
  3928  000B7E  D003               	goto	u1180
  3929  000B80  6A28               	clrf	??_CantaPartAlta^0,c
  3930  000B82  2A28               	incf	??_CantaPartAlta^0,f,c
  3931  000B84  D001               	goto	u1198
  3932  000B86                     u1180:
  3933  000B86  6A28               	clrf	??_CantaPartAlta^0,c
  3934  000B88                     u1198:
  3935  000B88  4628               	rlncf	??_CantaPartAlta^0,f,c
  3936  000B8A  4628               	rlncf	??_CantaPartAlta^0,f,c
  3937  000B8C  4628               	rlncf	??_CantaPartAlta^0,f,c
  3938  000B8E  508C               	movf	140,w,c	;volatile
  3939  000B90  1828               	xorwf	??_CantaPartAlta^0,w,c
  3940  000B92  0BF7               	andlw	-9
  3941  000B94  1828               	xorwf	??_CantaPartAlta^0,w,c
  3942  000B96  6E8C               	movwf	140,c	;volatile
  3943                           
  3944                           ;LcTLCD.c: 217:   (LATDbits.LATD2 = (c & 0x40 ? 1 : 0));
  3945  000B98  AC29               	btfss	CantaPartAlta@c^0,6,c
  3946  000B9A  D003               	goto	u1200
  3947  000B9C  6A28               	clrf	??_CantaPartAlta^0,c
  3948  000B9E  2A28               	incf	??_CantaPartAlta^0,f,c
  3949  000BA0  D001               	goto	u1218
  3950  000BA2                     u1200:
  3951  000BA2  6A28               	clrf	??_CantaPartAlta^0,c
  3952  000BA4                     u1218:
  3953  000BA4  4628               	rlncf	??_CantaPartAlta^0,f,c
  3954  000BA6  4628               	rlncf	??_CantaPartAlta^0,f,c
  3955  000BA8  508C               	movf	140,w,c	;volatile
  3956  000BAA  1828               	xorwf	??_CantaPartAlta^0,w,c
  3957  000BAC  0BFB               	andlw	-5
  3958  000BAE  1828               	xorwf	??_CantaPartAlta^0,w,c
  3959  000BB0  6E8C               	movwf	140,c	;volatile
  3960                           
  3961                           ;LcTLCD.c: 218:   (LATDbits.LATD1 = (c & 0x20 ? 1 : 0));
  3962  000BB2  AA29               	btfss	CantaPartAlta@c^0,5,c
  3963  000BB4  D003               	goto	u1220
  3964  000BB6  6A28               	clrf	??_CantaPartAlta^0,c
  3965  000BB8  2A28               	incf	??_CantaPartAlta^0,f,c
  3966  000BBA  D001               	goto	u1238
  3967  000BBC                     u1220:
  3968  000BBC  6A28               	clrf	??_CantaPartAlta^0,c
  3969  000BBE                     u1238:
  3970  000BBE  4628               	rlncf	??_CantaPartAlta^0,f,c
  3971  000BC0  508C               	movf	140,w,c	;volatile
  3972  000BC2  1828               	xorwf	??_CantaPartAlta^0,w,c
  3973  000BC4  0BFD               	andlw	-3
  3974  000BC6  1828               	xorwf	??_CantaPartAlta^0,w,c
  3975  000BC8  6E8C               	movwf	140,c	;volatile
  3976                           
  3977                           ;LcTLCD.c: 219:   (LATDbits.LATD0 = (c & 0x10 ? 1 : 0));
  3978  000BCA  A829               	btfss	CantaPartAlta@c^0,4,c
  3979  000BCC  D003               	goto	u1240
  3980  000BCE  6A28               	clrf	??_CantaPartAlta^0,c
  3981  000BD0  2A28               	incf	??_CantaPartAlta^0,f,c
  3982  000BD2  D001               	goto	u1258
  3983  000BD4                     u1240:
  3984  000BD4  6A28               	clrf	??_CantaPartAlta^0,c
  3985  000BD6                     u1258:
  3986  000BD6  508C               	movf	140,w,c	;volatile
  3987  000BD8  1828               	xorwf	??_CantaPartAlta^0,w,c
  3988  000BDA  0BFE               	andlw	-2
  3989  000BDC  1828               	xorwf	??_CantaPartAlta^0,w,c
  3990  000BDE  6E8C               	movwf	140,c	;volatile
  3991  000BE0  0012               	return		;funcret
  3992  000BE2                     __end_of_CantaPartAlta:
  3993                           	callstack 0
  3994                           
  3995 ;; *************** function _KeypadMotor *****************
  3996 ;; Defined at:
  3997 ;;		line 46 in file "keypad.c"
  3998 ;; Parameters:    Size  Location     Type
  3999 ;;		None
  4000 ;; Auto vars:     Size  Location     Type
  4001 ;;		None
  4002 ;; Return value:  Size  Location     Type
  4003 ;;                  1    wreg      void 
  4004 ;; Registers used:
  4005 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4006 ;; Tracked objects:
  4007 ;;		On entry : 0/0
  4008 ;;		On exit  : 0/0
  4009 ;;		Unchanged: 0/0
  4010 ;; Data sizes:     COMRAM   BANK0   BANK1
  4011 ;;      Params:         0       0       0
  4012 ;;      Locals:         0       0       0
  4013 ;;      Temps:          2       0       0
  4014 ;;      Totals:         2       0       0
  4015 ;;Total ram usage:        2 bytes
  4016 ;; Hardware stack levels used: 1
  4017 ;; Hardware stack levels required when called: 3
  4018 ;; This function calls:
  4019 ;;		_TiGetTics
  4020 ;;		_TiResetTics
  4021 ;; This function is called by:
  4022 ;;		_main
  4023 ;; This function uses a non-reentrant model
  4024 ;;
  4025                           
  4026                           	psect	text32
  4027  00043E                     __ptext32:
  4028                           	callstack 0
  4029  00043E                     _KeypadMotor:
  4030                           	callstack 27
  4031                           
  4032                           ;keypad.c: 48:     switch (state){
  4033                           
  4034                           ;incstack = 0
  4035  00043E  D07D               	goto	l2459
  4036  000440                     l154:
  4037                           
  4038                           ;keypad.c: 51:             if (!!(PORTBbits.RB0 && PORTBbits.RB1 && PORTBbits.RB2)){
  4039  000440  B081               	btfsc	129,0,c	;volatile
  4040  000442  A281               	btfss	129,1,c	;volatile
  4041  000444  D00B               	goto	l2389
  4042  000446  A481               	btfss	129,2,c	;volatile
  4043  000448  D009               	goto	l2389
  4044                           
  4045                           ;keypad.c: 52:                 LATBbits.LATB3=0;
  4046  00044A  968A               	bcf	138,3,c	;volatile
  4047                           
  4048                           ;keypad.c: 53:                 LATBbits.LATB4=1;
  4049  00044C  888A               	bsf	138,4,c	;volatile
  4050                           
  4051                           ;keypad.c: 54:                 LATBbits.LATB5=1;
  4052  00044E  8A8A               	bsf	138,5,c	;volatile
  4053                           
  4054                           ;keypad.c: 55:                 LATBbits.LATB6=1;
  4055  000450  8C8A               	bsf	138,6,c	;volatile
  4056                           
  4057                           ;keypad.c: 56:                 state=1;
  4058  000452  0E01               	movlw	1
  4059  000454  6E18               	movwf	_state^0,c
  4060                           
  4061                           ;keypad.c: 57:                 row=0;
  4062  000456  0E00               	movlw	0
  4063  000458  6E20               	movwf	_row^0,c
  4064                           
  4065                           ;keypad.c: 58:             }else{
  4066  00045A  0012               	return	
  4067  00045C                     l2389:
  4068                           
  4069                           ;keypad.c: 59:                 state=4;
  4070  00045C  0E04               	movlw	4
  4071  00045E  6E18               	movwf	_state^0,c
  4072  000460  0012               	return	
  4073  000462                     l158:
  4074                           
  4075                           ;keypad.c: 63:            if (!!(PORTBbits.RB0 && PORTBbits.RB1 && PORTBbits.RB2)){
  4076  000462  B081               	btfsc	129,0,c	;volatile
  4077  000464  A281               	btfss	129,1,c	;volatile
  4078  000466  D7FA               	goto	l2389
  4079  000468  A481               	btfss	129,2,c	;volatile
  4080  00046A  D7F8               	goto	l2389
  4081                           
  4082                           ;keypad.c: 64:                 LATBbits.LATB3=1;
  4083  00046C  868A               	bsf	138,3,c	;volatile
  4084                           
  4085                           ;keypad.c: 65:                 LATBbits.LATB4=0;
  4086  00046E  988A               	bcf	138,4,c	;volatile
  4087                           
  4088                           ;keypad.c: 66:                 LATBbits.LATB5=1;
  4089  000470  8A8A               	bsf	138,5,c	;volatile
  4090                           
  4091                           ;keypad.c: 67:                 LATBbits.LATB6=1;
  4092  000472  8C8A               	bsf	138,6,c	;volatile
  4093                           
  4094                           ;keypad.c: 68:                 state=2;
  4095  000474  0E02               	movlw	2
  4096  000476  6E18               	movwf	_state^0,c
  4097                           
  4098                           ;keypad.c: 69:                 row=1;
  4099  000478  0E01               	movlw	1
  4100  00047A  6E20               	movwf	_row^0,c
  4101                           
  4102                           ;keypad.c: 71:             }else{
  4103  00047C  0012               	return	
  4104  00047E                     l161:
  4105                           
  4106                           ;keypad.c: 76:             if (!!(PORTBbits.RB0 && PORTBbits.RB1 && PORTBbits.RB2)){
  4107  00047E  B081               	btfsc	129,0,c	;volatile
  4108  000480  A281               	btfss	129,1,c	;volatile
  4109  000482  D7EC               	goto	l2389
  4110  000484  A481               	btfss	129,2,c	;volatile
  4111  000486  D7EA               	goto	l2389
  4112                           
  4113                           ;keypad.c: 77:                 LATBbits.LATB3=1;
  4114  000488  868A               	bsf	138,3,c	;volatile
  4115                           
  4116                           ;keypad.c: 78:                 LATBbits.LATB4=1;
  4117  00048A  888A               	bsf	138,4,c	;volatile
  4118                           
  4119                           ;keypad.c: 79:                 LATBbits.LATB5=0;
  4120  00048C  9A8A               	bcf	138,5,c	;volatile
  4121                           
  4122                           ;keypad.c: 80:                 LATBbits.LATB6=1;
  4123  00048E  8C8A               	bsf	138,6,c	;volatile
  4124                           
  4125                           ;keypad.c: 81:                 state=3;
  4126  000490  0E03               	movlw	3
  4127  000492  6E18               	movwf	_state^0,c
  4128                           
  4129                           ;keypad.c: 82:                 row=2;
  4130  000494  0E02               	movlw	2
  4131  000496  6E20               	movwf	_row^0,c
  4132                           
  4133                           ;keypad.c: 83:             }else{
  4134  000498  0012               	return	
  4135  00049A                     l164:
  4136                           
  4137                           ;keypad.c: 88:             if (!!(PORTBbits.RB0 && PORTBbits.RB1 && PORTBbits.RB2)){
  4138  00049A  B081               	btfsc	129,0,c	;volatile
  4139  00049C  A281               	btfss	129,1,c	;volatile
  4140  00049E  D7DE               	goto	l2389
  4141  0004A0  A481               	btfss	129,2,c	;volatile
  4142  0004A2  D7DC               	goto	l2389
  4143                           
  4144                           ;keypad.c: 89:                 LATBbits.LATB3=1;
  4145  0004A4  868A               	bsf	138,3,c	;volatile
  4146                           
  4147                           ;keypad.c: 90:                 LATBbits.LATB4=1;
  4148  0004A6  888A               	bsf	138,4,c	;volatile
  4149                           
  4150                           ;keypad.c: 91:                 LATBbits.LATB5=1;
  4151  0004A8  8A8A               	bsf	138,5,c	;volatile
  4152                           
  4153                           ;keypad.c: 92:                 LATBbits.LATB6=0;
  4154  0004AA  9C8A               	bcf	138,6,c	;volatile
  4155                           
  4156                           ;keypad.c: 93:                 row=3;
  4157  0004AC  0E03               	movlw	3
  4158  0004AE  6E20               	movwf	_row^0,c
  4159                           
  4160                           ;keypad.c: 94:                 state=0;
  4161  0004B0  0E00               	movlw	0
  4162  0004B2  6E18               	movwf	_state^0,c
  4163                           
  4164                           ;keypad.c: 95:             }else{
  4165  0004B4  0012               	return	
  4166  0004B6                     l2421:
  4167                           
  4168                           ;keypad.c: 100:             state=5;
  4169  0004B6  0E05               	movlw	5
  4170  0004B8  6E18               	movwf	_state^0,c
  4171                           
  4172                           ;keypad.c: 101:             TiResetTics(timerBounces);
  4173  0004BA  501F               	movf	_timerBounces^0,w,c
  4174  0004BC  EC86  F007         	call	_TiResetTics
  4175                           
  4176                           ;keypad.c: 102:             break;
  4177  0004C0  0012               	return	
  4178  0004C2                     l2425:
  4179                           
  4180                           ;keypad.c: 104:             if (TiGetTics(timerBounces) >= 25){
  4181  0004C2  501F               	movf	_timerBounces^0,w,c
  4182  0004C4  EC05  F007         	call	_TiGetTics
  4183  0004C8  BE29               	btfsc	(?_TiGetTics+1)^0,7,c
  4184  0004CA  0012               	return	
  4185  0004CC  5029               	movf	(?_TiGetTics+1)^0,w,c
  4186  0004CE  E104               	bnz	u1840
  4187  0004D0  0E19               	movlw	25
  4188  0004D2  5C28               	subwf	?_TiGetTics^0,w,c
  4189  0004D4  A0D8               	btfss	status,0,c
  4190  0004D6  0012               	return	
  4191  0004D8                     u1840:
  4192                           
  4193                           ;keypad.c: 105:                 if (!!(PORTBbits.RB0 && PORTBbits.RB1 && PORTBbits.RB2))
      +                          {
  4194  0004D8  B081               	btfsc	129,0,c	;volatile
  4195  0004DA  A281               	btfss	129,1,c	;volatile
  4196  0004DC  D005               	goto	l2435
  4197  0004DE  A481               	btfss	129,2,c	;volatile
  4198  0004E0  D003               	goto	l2435
  4199                           
  4200                           ;keypad.c: 106:                     state = 0;
  4201  0004E2  0E00               	movlw	0
  4202  0004E4  6E18               	movwf	_state^0,c
  4203                           
  4204                           ;keypad.c: 107:                 } else{
  4205  0004E6  0012               	return	
  4206  0004E8                     l2435:
  4207                           
  4208                           ;keypad.c: 108:                     pressed = 1;
  4209  0004E8  0E01               	movlw	1
  4210  0004EA  6E1B               	movwf	_pressed^0,c
  4211                           
  4212                           ;keypad.c: 109:                     state = 6;
  4213  0004EC  0E06               	movlw	6
  4214  0004EE  6E18               	movwf	_state^0,c
  4215  0004F0  0012               	return	
  4216  0004F2                     l172:
  4217                           
  4218                           ;keypad.c: 114:             if (!!(PORTBbits.RB0 && PORTBbits.RB1 && PORTBbits.RB2)){
  4219  0004F2  A081               	btfss	129,0,c	;volatile
  4220  0004F4  0012               	return	
  4221  0004F6  A281               	btfss	129,1,c	;volatile
  4222  0004F8  0012               	return	
  4223  0004FA  A481               	btfss	129,2,c	;volatile
  4224  0004FC  0012               	return	
  4225                           
  4226                           ;keypad.c: 115:                 TiResetTics(timerBounces);
  4227  0004FE  501F               	movf	_timerBounces^0,w,c
  4228  000500  EC86  F007         	call	_TiResetTics
  4229                           
  4230                           ;keypad.c: 116:                 state = 7;
  4231  000504  0E07               	movlw	7
  4232  000506  6E18               	movwf	_state^0,c
  4233  000508  0012               	return	
  4234  00050A                     l2445:
  4235                           
  4236                           ;keypad.c: 120:             if (TiGetTics(timerBounces) >= 25){
  4237  00050A  501F               	movf	_timerBounces^0,w,c
  4238  00050C  EC05  F007         	call	_TiGetTics
  4239  000510  BE29               	btfsc	(?_TiGetTics+1)^0,7,c
  4240  000512  0012               	return	
  4241  000514  5029               	movf	(?_TiGetTics+1)^0,w,c
  4242  000516  E104               	bnz	u1910
  4243  000518  0E19               	movlw	25
  4244  00051A  5C28               	subwf	?_TiGetTics^0,w,c
  4245  00051C  A0D8               	btfss	status,0,c
  4246  00051E  0012               	return	
  4247  000520                     u1910:
  4248                           
  4249                           ;keypad.c: 121:                 if (!!(PORTBbits.RB0 && PORTBbits.RB1 && PORTBbits.RB2))
      +                          {
  4250  000520  B081               	btfsc	129,0,c	;volatile
  4251  000522  A281               	btfss	129,1,c	;volatile
  4252  000524  D007               	goto	l2455
  4253  000526  A481               	btfss	129,2,c	;volatile
  4254  000528  D005               	goto	l2455
  4255                           
  4256                           ;keypad.c: 122:                     pressed = 0;
  4257  00052A  0E00               	movlw	0
  4258  00052C  6E1B               	movwf	_pressed^0,c
  4259                           
  4260                           ;keypad.c: 123:                     state = 0;
  4261  00052E  0E00               	movlw	0
  4262  000530  6E18               	movwf	_state^0,c
  4263                           
  4264                           ;keypad.c: 124:                 } else {
  4265  000532  0012               	return	
  4266  000534                     l2455:
  4267                           
  4268                           ;keypad.c: 125:                     state = 6;
  4269  000534  0E06               	movlw	6
  4270  000536  6E18               	movwf	_state^0,c
  4271  000538  0012               	return	
  4272  00053A                     l2459:
  4273  00053A  5018               	movf	_state^0,w,c
  4274  00053C  6E2F               	movwf	??_KeypadMotor^0,c
  4275  00053E  6A30               	clrf	(??_KeypadMotor+1)^0,c
  4276                           
  4277                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4278                           ; Switch size 1, requested type "simple"
  4279                           ; Number of cases is 1, Range of values is 0 to 0
  4280                           ; switch strategies available:
  4281                           ; Name         Instructions Cycles
  4282                           ; simple_byte            4     3 (average)
  4283                           ;	Chosen strategy is simple_byte
  4284  000540  5030               	movf	(??_KeypadMotor+1)^0,w,c
  4285  000542  0A00               	xorlw	0	; case 0
  4286  000544  A4D8               	btfss	status,2,c
  4287  000546  0012               	return	
  4288                           
  4289                           ; Switch size 1, requested type "simple"
  4290                           ; Number of cases is 8, Range of values is 0 to 7
  4291                           ; switch strategies available:
  4292                           ; Name         Instructions Cycles
  4293                           ; simple_byte           25    13 (average)
  4294                           ;	Chosen strategy is simple_byte
  4295  000548  502F               	movf	??_KeypadMotor^0,w,c
  4296  00054A  0A00               	xorlw	0	; case 0
  4297  00054C  B4D8               	btfsc	status,2,c
  4298  00054E  D778               	goto	l154
  4299  000550  0A01               	xorlw	1	; case 1
  4300  000552  B4D8               	btfsc	status,2,c
  4301  000554  D786               	goto	l158
  4302  000556  0A03               	xorlw	3	; case 2
  4303  000558  B4D8               	btfsc	status,2,c
  4304  00055A  D791               	goto	l161
  4305  00055C  0A01               	xorlw	1	; case 3
  4306  00055E  B4D8               	btfsc	status,2,c
  4307  000560  D79C               	goto	l164
  4308  000562  0A07               	xorlw	7	; case 4
  4309  000564  B4D8               	btfsc	status,2,c
  4310  000566  D7A7               	goto	l2421
  4311  000568  0A01               	xorlw	1	; case 5
  4312  00056A  B4D8               	btfsc	status,2,c
  4313  00056C  D7AA               	goto	l2425
  4314  00056E  0A03               	xorlw	3	; case 6
  4315  000570  B4D8               	btfsc	status,2,c
  4316  000572  D7BF               	goto	l172
  4317  000574  0A01               	xorlw	1	; case 7
  4318  000576  A4D8               	btfss	status,2,c
  4319  000578  0012               	return	
  4320  00057A  D7C7               	goto	l2445
  4321  00057C                     __end_of_KeypadMotor:
  4322                           	callstack 0
  4323                           
  4324 ;; *************** function _TiResetTics *****************
  4325 ;; Defined at:
  4326 ;;		line 57 in file "TTimer.c"
  4327 ;; Parameters:    Size  Location     Type
  4328 ;;  Handle          1    wreg     unsigned char 
  4329 ;; Auto vars:     Size  Location     Type
  4330 ;;  Handle          1    5[COMRAM] unsigned char 
  4331 ;; Return value:  Size  Location     Type
  4332 ;;                  1    wreg      void 
  4333 ;; Registers used:
  4334 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  4335 ;; Tracked objects:
  4336 ;;		On entry : 0/0
  4337 ;;		On exit  : 0/0
  4338 ;;		Unchanged: 0/0
  4339 ;; Data sizes:     COMRAM   BANK0   BANK1
  4340 ;;      Params:         0       0       0
  4341 ;;      Locals:         1       0       0
  4342 ;;      Temps:          0       0       0
  4343 ;;      Totals:         1       0       0
  4344 ;;Total ram usage:        1 bytes
  4345 ;; Hardware stack levels used: 1
  4346 ;; Hardware stack levels required when called: 2
  4347 ;; This function calls:
  4348 ;;		Nothing
  4349 ;; This function is called by:
  4350 ;;		_main
  4351 ;;		_KeypadMotor
  4352 ;;		_SMSMotor
  4353 ;;		_KeSetMode
  4354 ;;		_Espera
  4355 ;;		_WaitForBusy
  4356 ;; This function uses a non-reentrant model
  4357 ;;
  4358                           
  4359                           	psect	text33
  4360  000F0C                     __ptext33:
  4361                           	callstack 0
  4362  000F0C                     _TiResetTics:
  4363                           	callstack 24
  4364                           
  4365                           ;incstack = 0
  4366                           ;TiResetTics@Handle stored from wreg
  4367  000F0C  6E28               	movwf	TiResetTics@Handle^0,c
  4368                           
  4369                           ;TTimer.c: 61:     s_Timers[Handle].h_initialTics=h_Tics;
  4370  000F0E  5028               	movf	TiResetTics@Handle^0,w,c
  4371  000F10  0D03               	mullw	3
  4372  000F12  50F3               	movf	243,w,c
  4373  000F14  0F80               	addlw	low _s_Timers
  4374  000F16  6ED9               	movwf	fsr2l,c
  4375  000F18  6ADA               	clrf	fsr2h,c
  4376  000F1A  C003  FFDE         	movff	_h_Tics,postinc2
  4377  000F1E  C004  FFDD         	movff	_h_Tics+1,postdec2
  4378  000F22  0012               	return		;funcret
  4379  000F24                     __end_of_TiResetTics:
  4380                           	callstack 0
  4381                           
  4382 ;; *************** function _TiGetTics *****************
  4383 ;; Defined at:
  4384 ;;		line 63 in file "TTimer.c"
  4385 ;; Parameters:    Size  Location     Type
  4386 ;;  Handle          1    wreg     unsigned char 
  4387 ;; Auto vars:     Size  Location     Type
  4388 ;;  Handle          1    9[COMRAM] unsigned char 
  4389 ;;  actual          2   10[COMRAM] volatile unsigned int 
  4390 ;; Return value:  Size  Location     Type
  4391 ;;                  2    5[COMRAM] int 
  4392 ;; Registers used:
  4393 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  4394 ;; Tracked objects:
  4395 ;;		On entry : 0/0
  4396 ;;		On exit  : 0/0
  4397 ;;		Unchanged: 0/0
  4398 ;; Data sizes:     COMRAM   BANK0   BANK1
  4399 ;;      Params:         2       0       0
  4400 ;;      Locals:         3       0       0
  4401 ;;      Temps:          2       0       0
  4402 ;;      Totals:         7       0       0
  4403 ;;Total ram usage:        7 bytes
  4404 ;; Hardware stack levels used: 1
  4405 ;; Hardware stack levels required when called: 2
  4406 ;; This function calls:
  4407 ;;		Nothing
  4408 ;; This function is called by:
  4409 ;;		_main
  4410 ;;		_KeypadMotor
  4411 ;;		_SMSMotor
  4412 ;;		_Espera
  4413 ;;		_WaitForBusy
  4414 ;; This function uses a non-reentrant model
  4415 ;;
  4416                           
  4417                           	psect	text34
  4418  000E0A                     __ptext34:
  4419                           	callstack 0
  4420  000E0A                     _TiGetTics:
  4421                           	callstack 24
  4422                           
  4423                           ;incstack = 0
  4424                           ;TiGetTics@Handle stored from wreg
  4425  000E0A  6E2C               	movwf	TiGetTics@Handle^0,c
  4426                           
  4427                           ;TTimer.c: 67:     volatile unsigned int actual;;TTimer.c: 68:     actual=h_Tics;
  4428  000E0C  C003  F02D         	movff	_h_Tics,TiGetTics@actual	;volatile
  4429  000E10  C004  F02E         	movff	_h_Tics+1,TiGetTics@actual+1	;volatile
  4430                           
  4431                           ;TTimer.c: 69:     return (actual-(s_Timers[Handle].h_initialTics));
  4432  000E14  502C               	movf	TiGetTics@Handle^0,w,c
  4433  000E16  0D03               	mullw	3
  4434  000E18  50F3               	movf	243,w,c
  4435  000E1A  0F80               	addlw	low _s_Timers
  4436  000E1C  6ED9               	movwf	fsr2l,c
  4437  000E1E  6ADA               	clrf	fsr2h,c
  4438  000E20  CFDE F02A          	movff	postinc2,??_TiGetTics
  4439  000E24  CFDD F02B          	movff	postdec2,??_TiGetTics+1
  4440  000E28  502A               	movf	??_TiGetTics^0,w,c
  4441  000E2A  5C2D               	subwf	TiGetTics@actual^0,w,c	;volatile
  4442  000E2C  6E28               	movwf	?_TiGetTics^0,c
  4443  000E2E  502B               	movf	(??_TiGetTics+1)^0,w,c
  4444  000E30  582E               	subwfb	(TiGetTics@actual+1)^0,w,c	;volatile
  4445  000E32  6E29               	movwf	(?_TiGetTics+1)^0,c
  4446  000E34  0012               	return		;funcret
  4447  000E36                     __end_of_TiGetTics:
  4448                           	callstack 0
  4449                           
  4450 ;; *************** function _InitPorts *****************
  4451 ;; Defined at:
  4452 ;;		line 39 in file "main.c"
  4453 ;; Parameters:    Size  Location     Type
  4454 ;;		None
  4455 ;; Auto vars:     Size  Location     Type
  4456 ;;		None
  4457 ;; Return value:  Size  Location     Type
  4458 ;;                  1    wreg      void 
  4459 ;; Registers used:
  4460 ;;		wreg, status,2
  4461 ;; Tracked objects:
  4462 ;;		On entry : 0/0
  4463 ;;		On exit  : 0/0
  4464 ;;		Unchanged: 0/0
  4465 ;; Data sizes:     COMRAM   BANK0   BANK1
  4466 ;;      Params:         0       0       0
  4467 ;;      Locals:         0       0       0
  4468 ;;      Temps:          0       0       0
  4469 ;;      Totals:         0       0       0
  4470 ;;Total ram usage:        0 bytes
  4471 ;; Hardware stack levels used: 1
  4472 ;; Hardware stack levels required when called: 2
  4473 ;; This function calls:
  4474 ;;		Nothing
  4475 ;; This function is called by:
  4476 ;;		_main
  4477 ;; This function uses a non-reentrant model
  4478 ;;
  4479                           
  4480                           	psect	text35
  4481  000F38                     __ptext35:
  4482                           	callstack 0
  4483  000F38                     _InitPorts:
  4484                           	callstack 28
  4485                           
  4486                           ;main.c: 40: 
  4487                           
  4488                           ;incstack = 0
  4489  000F38  0E00               	movlw	0
  4490  000F3A  6ED3               	movwf	211,c	;volatile
  4491                           
  4492                           ;main.c: 41: 
  4493  000F3C  0E04               	movlw	4
  4494  000F3E  6E9B               	movwf	155,c	;volatile
  4495                           
  4496                           ;main.c: 42:         KeypadMotor();
  4497  000F40  8C9B               	bsf	155,6,c	;volatile
  4498                           
  4499                           ;main.c: 43:         menuMotor();
  4500  000F42  9692               	bcf	146,3,c	;volatile
  4501  000F44  0012               	return		;funcret
  4502  000F46                     __end_of_InitPorts:
  4503                           	callstack 0
  4504                           
  4505 ;; *************** function _RSI_High *****************
  4506 ;; Defined at:
  4507 ;;		line 29 in file "main.c"
  4508 ;; Parameters:    Size  Location     Type
  4509 ;;		None
  4510 ;; Auto vars:     Size  Location     Type
  4511 ;;		None
  4512 ;; Return value:  Size  Location     Type
  4513 ;;                  1    wreg      void 
  4514 ;; Registers used:
  4515 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4516 ;; Tracked objects:
  4517 ;;		On entry : 0/0
  4518 ;;		On exit  : 0/0
  4519 ;;		Unchanged: 0/0
  4520 ;; Data sizes:     COMRAM   BANK0   BANK1
  4521 ;;      Params:         0       0       0
  4522 ;;      Locals:         0       0       0
  4523 ;;      Temps:          4       0       0
  4524 ;;      Totals:         4       0       0
  4525 ;;Total ram usage:        4 bytes
  4526 ;; Hardware stack levels used: 1
  4527 ;; Hardware stack levels required when called: 1
  4528 ;; This function calls:
  4529 ;;		__TiRSITimer
  4530 ;; This function is called by:
  4531 ;;		Interrupt level 2
  4532 ;; This function uses a non-reentrant model
  4533 ;;
  4534                           
  4535                           	psect	intcode
  4536  000008                     __pintcode:
  4537                           	callstack 0
  4538  000008                     _RSI_High:
  4539                           	callstack 23
  4540                           
  4541                           ;incstack = 0
  4542  000008  8240               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  4543  00000A  CFD9 F024          	movff	fsr2l,??_RSI_High
  4544  00000E  CFDA F025          	movff	fsr2h,??_RSI_High+1
  4545  000012  CFF3 F026          	movff	prodl,??_RSI_High+2
  4546  000016  CFF4 F027          	movff	prodh,??_RSI_High+3
  4547                           
  4548                           ;main.c: 31:     initSIO();
  4549  00001A  ECF1  F005         	call	__TiRSITimer	;wreg free
  4550  00001E  C027  FFF4         	movff	??_RSI_High+3,prodh
  4551  000022  C026  FFF3         	movff	??_RSI_High+2,prodl
  4552  000026  C025  FFDA         	movff	??_RSI_High+1,fsr2h
  4553  00002A  C024  FFD9         	movff	??_RSI_High,fsr2l
  4554  00002E  9240               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  4555  000030  0011               	retfie		f
  4556  000032                     __end_of_RSI_High:
  4557                           	callstack 0
  4558                           
  4559 ;; *************** function __TiRSITimer *****************
  4560 ;; Defined at:
  4561 ;;		line 37 in file "TTimer.c"
  4562 ;; Parameters:    Size  Location     Type
  4563 ;;		None
  4564 ;; Auto vars:     Size  Location     Type
  4565 ;;		None
  4566 ;; Return value:  Size  Location     Type
  4567 ;;                  1    wreg      void 
  4568 ;; Registers used:
  4569 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  4570 ;; Tracked objects:
  4571 ;;		On entry : 0/0
  4572 ;;		On exit  : 0/0
  4573 ;;		Unchanged: 0/0
  4574 ;; Data sizes:     COMRAM   BANK0   BANK1
  4575 ;;      Params:         0       0       0
  4576 ;;      Locals:         0       0       0
  4577 ;;      Temps:          1       0       0
  4578 ;;      Totals:         1       0       0
  4579 ;;Total ram usage:        1 bytes
  4580 ;; Hardware stack levels used: 1
  4581 ;; This function calls:
  4582 ;;		Nothing
  4583 ;; This function is called by:
  4584 ;;		_RSI_High
  4585 ;; This function uses a non-reentrant model
  4586 ;;
  4587                           
  4588                           	psect	text37
  4589  000BE2                     __ptext37:
  4590                           	callstack 0
  4591  000BE2                     __TiRSITimer:
  4592                           	callstack 23
  4593                           
  4594                           ;TTimer.c: 40:     TMR0H = 0xD8;
  4595                           
  4596                           ;incstack = 0
  4597  000BE2  0ED8               	movlw	216
  4598  000BE4  6ED7               	movwf	215,c	;volatile
  4599                           
  4600                           ;TTimer.c: 41:     TMR0L = 0xF0;
  4601  000BE6  0EF0               	movlw	240
  4602  000BE8  6ED6               	movwf	214,c	;volatile
  4603                           
  4604                           ;TTimer.c: 43:     INTCONbits.TMR0IF = 0;
  4605  000BEA  94F2               	bcf	242,2,c	;volatile
  4606                           
  4607                           ;TTimer.c: 44:     h_Tics++;
  4608  000BEC  4A03               	infsnz	_h_Tics^0,f,c
  4609  000BEE  2A04               	incf	(_h_Tics+1)^0,f,c
  4610                           
  4611                           ;TTimer.c: 46:     if (h_Tics>=30000) {
  4612  000BF0  0E30               	movlw	48
  4613  000BF2  5C03               	subwf	_h_Tics^0,w,c
  4614  000BF4  0E75               	movlw	117
  4615  000BF6  5804               	subwfb	(_h_Tics+1)^0,w,c
  4616  000BF8  A0D8               	btfss	status,0,c
  4617  000BFA  0012               	return	
  4618                           
  4619                           ;TTimer.c: 48:         for (counter=0;counter<25;counter++){
  4620  000BFC  0E00               	movlw	0
  4621  000BFE  6E21               	movwf	_counter^0,c
  4622  000C00                     i2l2241:
  4623  000C00  0E18               	movlw	24
  4624  000C02  6421               	cpfsgt	_counter^0,c
  4625  000C04  D001               	goto	i2l2245
  4626  000C06  D015               	goto	i2l2253
  4627  000C08                     i2l2245:
  4628                           
  4629                           ;TTimer.c: 49:             if (s_Timers[counter].b_busy==1){
  4630  000C08  5021               	movf	_counter^0,w,c
  4631  000C0A  0D03               	mullw	3
  4632  000C0C  50F3               	movf	243,w,c
  4633  000C0E  0F82               	addlw	low (_s_Timers+2)
  4634  000C10  6ED9               	movwf	fsr2l,c
  4635  000C12  6ADA               	clrf	fsr2h,c
  4636  000C14  04DE               	decf	postinc2,w,c
  4637  000C16  A4D8               	btfss	status,2,c
  4638  000C18  D00A               	goto	i2l2249
  4639                           
  4640                           ;TTimer.c: 50:                 s_Timers[counter].h_initialTics -= h_Tics;
  4641  000C1A  5021               	movf	_counter^0,w,c
  4642  000C1C  0D03               	mullw	3
  4643  000C1E  50F3               	movf	243,w,c
  4644  000C20  0F80               	addlw	low _s_Timers
  4645  000C22  6ED9               	movwf	fsr2l,c
  4646  000C24  6ADA               	clrf	fsr2h,c
  4647  000C26  5003               	movf	_h_Tics^0,w,c
  4648  000C28  5EDE               	subwf	postinc2,f,c
  4649  000C2A  5004               	movf	(_h_Tics+1)^0,w,c
  4650  000C2C  5ADD               	subwfb	postdec2,f,c
  4651  000C2E                     i2l2249:
  4652                           
  4653                           ;TTimer.c: 52:         }
  4654  000C2E  2A21               	incf	_counter^0,f,c
  4655  000C30  D7E7               	goto	i2l2241
  4656  000C32                     i2l2253:
  4657                           
  4658                           ;TTimer.c: 53:         h_Tics=0;
  4659  000C32  0E00               	movlw	0
  4660  000C34  6E04               	movwf	(_h_Tics+1)^0,c
  4661  000C36  0E00               	movlw	0
  4662  000C38  6E03               	movwf	_h_Tics^0,c
  4663  000C3A  0012               	return		;funcret
  4664  000C3C                     __end_of__TiRSITimer:
  4665                           	callstack 0
  4666                           
  4667                           	psect	rparam
  4668  0000                     
  4669                           	psect	temp
  4670  000040                     btemp:
  4671                           	callstack 0
  4672  000040                     	ds	1
  4673  0000                     int$flags	set	btemp
  4674  0000                     wtemp8	set	btemp+1
  4675  0000                     ttemp5	set	btemp+1
  4676  0000                     ttemp6	set	btemp+4
  4677  0000                     ttemp7	set	btemp+8
  4678                           
  4679                           	psect	idloc
  4680                           
  4681                           ;Config register IDLOC0 @ 0x200000
  4682                           ;	unspecified, using default values
  4683  200000                     	org	2097152
  4684  200000  FF                 	db	255
  4685                           
  4686                           ;Config register IDLOC1 @ 0x200001
  4687                           ;	unspecified, using default values
  4688  200001                     	org	2097153
  4689  200001  FF                 	db	255
  4690                           
  4691                           ;Config register IDLOC2 @ 0x200002
  4692                           ;	unspecified, using default values
  4693  200002                     	org	2097154
  4694  200002  FF                 	db	255
  4695                           
  4696                           ;Config register IDLOC3 @ 0x200003
  4697                           ;	unspecified, using default values
  4698  200003                     	org	2097155
  4699  200003  FF                 	db	255
  4700                           
  4701                           ;Config register IDLOC4 @ 0x200004
  4702                           ;	unspecified, using default values
  4703  200004                     	org	2097156
  4704  200004  FF                 	db	255
  4705                           
  4706                           ;Config register IDLOC5 @ 0x200005
  4707                           ;	unspecified, using default values
  4708  200005                     	org	2097157
  4709  200005  FF                 	db	255
  4710                           
  4711                           ;Config register IDLOC6 @ 0x200006
  4712                           ;	unspecified, using default values
  4713  200006                     	org	2097158
  4714  200006  FF                 	db	255
  4715                           
  4716                           ;Config register IDLOC7 @ 0x200007
  4717                           ;	unspecified, using default values
  4718  200007                     	org	2097159
  4719  200007  FF                 	db	255
  4720                           
  4721                           	psect	config
  4722                           
  4723                           ; Padding undefined space
  4724  300000                     	org	3145728
  4725  300000  FF                 	db	255
  4726                           
  4727                           ;Config register CONFIG1H @ 0x300001
  4728                           ;	Oscillator
  4729                           ;	OSC = HS, HS Oscillator
  4730                           ;	Fail-Safe Clock Monitor Enable bit
  4731                           ;	FCMEN = 0x0, unprogrammed default
  4732                           ;	Internal/External Oscillator Switchover bit
  4733                           ;	IESO = 0x0, unprogrammed default
  4734  300001                     	org	3145729
  4735  300001  02                 	db	2
  4736                           
  4737                           ;Config register CONFIG2L @ 0x300002
  4738                           ;	Power-up Timer Enable bit
  4739                           ;	PWRT = OFF, PWRT disabled
  4740                           ;	Brown-out Reset Enable bits
  4741                           ;	BOR = OFF, Brown-out Reset disabled in hardware and software
  4742                           ;	Brown-out Reset Voltage bits
  4743                           ;	BORV = 0x3, unprogrammed default
  4744  300002                     	org	3145730
  4745  300002  19                 	db	25
  4746                           
  4747                           ;Config register CONFIG2H @ 0x300003
  4748                           ;	Watchdog Timer Enable bit
  4749                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
  4750                           ;	Watchdog Timer Postscale Select bits
  4751                           ;	WDTPS = 0xF, unprogrammed default
  4752  300003                     	org	3145731
  4753  300003  1E                 	db	30
  4754                           
  4755                           ; Padding undefined space
  4756  300004                     	org	3145732
  4757  300004  FF                 	db	255
  4758                           
  4759                           ;Config register CONFIG3H @ 0x300005
  4760                           ;	CCP2 MUX bit
  4761                           ;	CCP2MX = 0x1, unprogrammed default
  4762                           ;	PORTB A/D Enable bit
  4763                           ;	PBADEN = DIG, PORTB<4:0> pins are configured as digital I/O on Reset
  4764                           ;	Low-Power Timer1 Oscillator Enable bit
  4765                           ;	LPT1OSC = 0x0, unprogrammed default
  4766                           ;	MCLR Pin Enable bit
  4767                           ;	MCLRE = OFF, RE3 input pin enabled; MCLR disabled
  4768  300005                     	org	3145733
  4769  300005  01                 	db	1
  4770                           
  4771                           ;Config register CONFIG4L @ 0x300006
  4772                           ;	Stack Full/Underflow Reset Enable bit
  4773                           ;	STVREN = 0x1, unprogrammed default
  4774                           ;	Single-Supply ICSP Enable bit
  4775                           ;	LVP = OFF, Single-Supply ICSP disabled
  4776                           ;	Boot Block Size Select bits
  4777                           ;	BBSIZ = 0x0, unprogrammed default
  4778                           ;	Extended Instruction Set Enable bit
  4779                           ;	XINST = 0x0, unprogrammed default
  4780                           ;	Background Debugger Enable bit
  4781                           ;	DEBUG = OFF, Background debugger disabled, RB6 and RB7 configured as general purpose I
      +                          /O pins
  4782  300006                     	org	3145734
  4783  300006  81                 	db	129
  4784                           
  4785                           ; Padding undefined space
  4786  300007                     	org	3145735
  4787  300007  FF                 	db	255
  4788                           
  4789                           ;Config register CONFIG5L @ 0x300008
  4790                           ;	unspecified, using default values
  4791                           ;	Code Protection bit
  4792                           ;	CP0 = 0x1, unprogrammed default
  4793                           ;	Code Protection bit
  4794                           ;	CP1 = 0x1, unprogrammed default
  4795  300008                     	org	3145736
  4796  300008  03                 	db	3
  4797                           
  4798                           ;Config register CONFIG5H @ 0x300009
  4799                           ;	unspecified, using default values
  4800                           ;	Boot Block Code Protection bitProtect Boot
  4801                           ;	CPB = 0x1, unprogrammed default
  4802                           ;	Data EEPROM Code Protection bit
  4803                           ;	CPD = 0x1, unprogrammed default
  4804  300009                     	org	3145737
  4805  300009  C0                 	db	192
  4806                           
  4807                           ;Config register CONFIG6L @ 0x30000A
  4808                           ;	unspecified, using default values
  4809                           ;	Write Protection bit
  4810                           ;	WRT0 = 0x1, unprogrammed default
  4811                           ;	Write Protection bit
  4812                           ;	WRT1 = 0x1, unprogrammed default
  4813  30000A                     	org	3145738
  4814  30000A  03                 	db	3
  4815                           
  4816                           ;Config register CONFIG6H @ 0x30000B
  4817                           ;	unspecified, using default values
  4818                           ;	Configuration Register Write Protection bit
  4819                           ;	WRTC = 0x1, unprogrammed default
  4820                           ;	Boot Block Write Protection bit
  4821                           ;	WRTB = 0x1, unprogrammed default
  4822                           ;	Data EEPROM Write Protection bit
  4823                           ;	WRTD = 0x1, unprogrammed default
  4824  30000B                     	org	3145739
  4825  30000B  E0                 	db	224
  4826                           
  4827                           ;Config register CONFIG7L @ 0x30000C
  4828                           ;	unspecified, using default values
  4829                           ;	Table Read Protection bit
  4830                           ;	EBTR0 = 0x1, unprogrammed default
  4831                           ;	Table Read Protection bit
  4832                           ;	EBTR1 = 0x1, unprogrammed default
  4833  30000C                     	org	3145740
  4834  30000C  03                 	db	3
  4835                           
  4836                           ;Config register CONFIG7H @ 0x30000D
  4837                           ;	unspecified, using default values
  4838                           ;	Boot Block Table Read Protection bit
  4839                           ;	EBTRB = 0x1, unprogrammed default
  4840  30000D                     	org	3145741
  4841  30000D  40                 	db	64
  4842                           tosu	equ	0xFFF
  4843                           tosh	equ	0xFFE
  4844                           tosl	equ	0xFFD
  4845                           stkptr	equ	0xFFC
  4846                           pclatu	equ	0xFFB
  4847                           pclath	equ	0xFFA
  4848                           pcl	equ	0xFF9
  4849                           tblptru	equ	0xFF8
  4850                           tblptrh	equ	0xFF7
  4851                           tblptrl	equ	0xFF6
  4852                           tablat	equ	0xFF5
  4853                           prodh	equ	0xFF4
  4854                           prodl	equ	0xFF3
  4855                           indf0	equ	0xFEF
  4856                           postinc0	equ	0xFEE
  4857                           postdec0	equ	0xFED
  4858                           preinc0	equ	0xFEC
  4859                           plusw0	equ	0xFEB
  4860                           fsr0h	equ	0xFEA
  4861                           fsr0l	equ	0xFE9
  4862                           wreg	equ	0xFE8
  4863                           indf1	equ	0xFE7
  4864                           postinc1	equ	0xFE6
  4865                           postdec1	equ	0xFE5
  4866                           preinc1	equ	0xFE4
  4867                           plusw1	equ	0xFE3
  4868                           fsr1h	equ	0xFE2
  4869                           fsr1l	equ	0xFE1
  4870                           bsr	equ	0xFE0
  4871                           indf2	equ	0xFDF
  4872                           postinc2	equ	0xFDE
  4873                           postdec2	equ	0xFDD
  4874                           preinc2	equ	0xFDC
  4875                           plusw2	equ	0xFDB
  4876                           fsr2h	equ	0xFDA
  4877                           fsr2l	equ	0xFD9
  4878                           status	equ	0xFD8

Data Sizes:
    Strings     0
    Constant    212
    Data        1
    BSS         109
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     28      63
    BANK0           128      0      75
    BANK1           256      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMRAM

    _main->_menuMotor
    _menuMotor->_displayMenu
    _displayMenu->_LcPutChar
    _LcPutChar->_LcGotoXY
    _LcGotoXY->_WaitForBusy
    _CantaData->_CantaPartAlta
    _CantaData->_CantaPartBaixa
    _LcCursorOn->_WaitForBusy
    _LcCursorOff->_WaitForBusy
    _LcClear->_Espera
    _KeSetMode->_TiResetTics
    _KeGetCharValue->_getFullValue
    _joystickMotor->_SiSendChar
    _initKeypad->_TiGetTimer
    _SMSMotor->_TiGetTics
    _LcInit->_Espera
    _WaitForBusy->_TiGetTics
    _Espera->_TiGetTics
    _CantaIR->_CantaPartAlta
    _CantaIR->_CantaPartBaixa
    _KeypadMotor->_TiGetTics

Critical Paths under _RSI_High in COMRAM

    _RSI_High->__TiRSITimer

Critical Paths under _main in BANK0

    None.

Critical Paths under _RSI_High in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _RSI_High in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   10425
                          _InitPorts
                        _KeypadMotor
                             _LcInit
                           _SMSMotor
                          _TiGetTics
                         _TiGetTimer
                        _TiInitTimer
                        _TiResetTics
                       _initJoystick
                         _initKeypad
                            _initSIO
                      _joystickMotor
                          _menuMotor
 ---------------------------------------------------------------------------------
 (1) _menuMotor                                            2     2      0    8476
                                             26 COMRAM     2     2      0
                     _KeGetCharValue
                  _KeGetGenericValue
                          _KeSetMode
                            _LcClear
                        _LcCursorOff
                         _LcCursorOn
                           _LcGotoXY
                          _LcPutChar
                        _displayMenu
                         _getPresses
                          _isPressed
 ---------------------------------------------------------------------------------
 (2) _isPressed                                            1     1      0      24
                                              5 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _getPresses                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _displayMenu                                          4     3      1    3212
                                             22 COMRAM     4     3      1
                           _LcGotoXY
                          _LcPutChar
 ---------------------------------------------------------------------------------
 (3) _LcPutChar                                            1     1      0    1652
                                             21 COMRAM     1     1      0
                          _CantaData
                           _LcGotoXY
                        _WaitForBusy
 ---------------------------------------------------------------------------------
 (4) _LcGotoXY                                             8     7      1    1320
                                             13 COMRAM     8     7      1
                            _CantaIR
                        _WaitForBusy
 ---------------------------------------------------------------------------------
 (4) _CantaData                                            1     1      0     220
                                              7 COMRAM     1     1      0
                      _CantaPartAlta
                     _CantaPartBaixa
 ---------------------------------------------------------------------------------
 (2) _LcCursorOn                                           0     0      0     310
                            _CantaIR
                        _WaitForBusy
 ---------------------------------------------------------------------------------
 (2) _LcCursorOff                                          0     0      0     310
                            _CantaIR
                        _WaitForBusy
 ---------------------------------------------------------------------------------
 (2) _LcClear                                              0     0      0    1507
                            _CantaIR
                             _Espera
                        _WaitForBusy
 ---------------------------------------------------------------------------------
 (2) _KeSetMode                                            1     1      0      66
                                              6 COMRAM     1     1      0
                        _TiResetTics
 ---------------------------------------------------------------------------------
 (2) _KeGetCharValue                                       0     0      0      75
                  _KeGetGenericValue
                       _getFullValue
 ---------------------------------------------------------------------------------
 (3) _getFullValue                                         5     5      0      75
                                              5 COMRAM     5     5      0
 ---------------------------------------------------------------------------------
 (1) _joystickMotor                                        2     2      0      15
                                              6 COMRAM     2     2      0
                      _SiIsAvailable
                         _SiSendChar
 ---------------------------------------------------------------------------------
 (2) _SiSendChar                                           1     1      0      15
                                              5 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _SiIsAvailable                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initSIO                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initKeypad                                           0     0      0       0
                         _TiGetTimer
 ---------------------------------------------------------------------------------
 (1) _initJoystick                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _TiInitTimer                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SMSMotor                                             2     2      0      67
                                             12 COMRAM     2     2      0
                  _KeGetGenericValue
                          _TiGetTics
                        _TiResetTics
 ---------------------------------------------------------------------------------
 (2) _KeGetGenericValue                                    2     2      0       0
                                              5 COMRAM     2     2      0
                          _getColumn
 ---------------------------------------------------------------------------------
 (3) _getColumn                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _LcInit                                               5     4      1    1733
                                             17 COMRAM     5     4      1
                            _CantaIR
                 _EscriuPrimeraOrdre
                             _Espera
                         _TiGetTimer
                        _WaitForBusy
 ---------------------------------------------------------------------------------
 (4) _WaitForBusy                                          1     1      0      90
                                             12 COMRAM     1     1      0
                          _TiGetTics
                        _TiResetTics
 ---------------------------------------------------------------------------------
 (2) _TiGetTimer                                           1     1      0       0
                                              5 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _Espera                                               5     1      4    1197
                                             12 COMRAM     5     1      4
                          _TiGetTics
                        _TiResetTics
 ---------------------------------------------------------------------------------
 (2) _EscriuPrimeraOrdre                                   2     2      0      60
                                              5 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (5) _CantaIR                                              1     1      0     220
                                              7 COMRAM     1     1      0
                      _CantaPartAlta
                     _CantaPartBaixa
 ---------------------------------------------------------------------------------
 (6) _CantaPartBaixa                                       2     2      0      88
                                              5 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (6) _CantaPartAlta                                        2     2      0      88
                                              5 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _KeypadMotor                                          2     2      0      67
                                             12 COMRAM     2     2      0
                          _TiGetTics
                        _TiResetTics
 ---------------------------------------------------------------------------------
 (5) _TiResetTics                                          1     1      0      22
                                              5 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (5) _TiGetTics                                            7     5      2      45
                                              5 COMRAM     7     5      2
 ---------------------------------------------------------------------------------
 (1) _InitPorts                                            0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _RSI_High                                             4     4      0       0
                                              1 COMRAM     4     4      0
                        __TiRSITimer
 ---------------------------------------------------------------------------------
 (8) __TiRSITimer                                          1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _InitPorts
   _KeypadMotor
     _TiGetTics
     _TiResetTics
   _LcInit
     _CantaIR
       _CantaPartAlta
       _CantaPartBaixa
     _EscriuPrimeraOrdre
     _Espera
       _TiGetTics
       _TiResetTics
     _TiGetTimer
     _WaitForBusy
       _TiGetTics
       _TiResetTics
   _SMSMotor
     _KeGetGenericValue
       _getColumn
     _TiGetTics
     _TiResetTics
   _TiGetTics
   _TiGetTimer
   _TiInitTimer
   _TiResetTics
   _initJoystick
   _initKeypad
     _TiGetTimer
   _initSIO
   _joystickMotor
     _SiIsAvailable
     _SiSendChar
   _menuMotor
     _KeGetCharValue
       _KeGetGenericValue
       _getFullValue
     _KeGetGenericValue
     _KeSetMode
       _TiResetTics
     _LcClear
       _CantaIR
       _Espera
       _WaitForBusy
     _LcCursorOff
       _CantaIR
       _WaitForBusy
     _LcCursorOn
       _CantaIR
       _WaitForBusy
     _LcGotoXY
       _CantaIR
       _WaitForBusy
     _LcPutChar
       _CantaData
         _CantaPartAlta
         _CantaPartBaixa
       _LcGotoXY
       _WaitForBusy
     _displayMenu
       _LcGotoXY
       _LcPutChar
     _getPresses
     _isPressed

 _RSI_High (ROOT)
   __TiRSITimer

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             1FF      0       0      24        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0      4B       5       58.6%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     1C      3F       1       50.0%
BITBIGSFRhlhh       19      0       0       9        0.0%
BITBIGSFRlhllll      F      0       0      17        0.0%
BITBIGSFRhh          D      0       0       8        0.0%
BITBIGSFRlhlhh       B      0       0      12        0.0%
BITBIGSFRlhllhl      8      0       0      15        0.0%
BITBIGSFRlhllhh      7      0       0      14        0.0%
BITBIGSFRllllhh      5      0       0      20        0.0%
BITBIGSFRllhh        5      0       0      18        0.0%
BITBIGSFRlllh        5      0       0      19        0.0%
BITBIGSFRlhh         2      0       0      11        0.0%
BITBIGSFRlhlllh      1      0       0      16        0.0%
BITBIGSFRlhlhl       1      0       0      13        0.0%
BITBIGSFRllllhl      1      0       0      21        0.0%
BITBIGSFRhll         1      0       0      10        0.0%
BITBIGSFRlllll       1      0       0      22        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      8A      23        0.0%
DATA                 0      0      8A       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.36 build 20220127204148 
Symbol Table                                                                                   Mon Jun 06 12:19:42 2022

         TiResetTics@Handle 0028                           _x 000A                           _y 0009  
              ?_displayMenu 0039                         l201 0E74                         l205 0F2C  
                       l161 047E                         l154 0440                         l172 04F2  
                       l164 049A                         l158 0462                         l182 0680  
                       l185 06E4                         l291 090A                         l298 094A  
                       l491 0760                         l494 0772                         l499 07D0  
                       u250 09B0                         u500 0B02                         u440 0AB4  
                       u460 0AD0                         u518 0B04                         u480 0AEA  
                       u560 0F66                         u458 0AB6                         u478 0AD2  
                       u498 0AEC                         _val 000C                         _tmr 0022  
                       _row 0020            ??_CantaPartBaixa 0028                         wreg 000FE8  
                      l2111 0E3C                        l1305 0F34                        l2131 0A52  
                      l2211 0880                        l2029 0CA2                        l2141 0A70  
                      l2071 092A                        l2055 08E6                        l2143 0A7C  
                      l2215 088C                        l2153 0CD6                        l2161 0CE4  
                      l2129 0A46                        l2225 08D4                        l2209 087C  
                      l2217 0892                        l2331 06AE                        l2067 091A  
                      l2059 08F4                        l2421 04B6                        l2261 0D5E  
                      l1381 0A16                        l2077 0952                        l2149 0A8C  
                      l2079 0976                        l2425 04C2                        l2353 06F2  
                      l2265 0D66                        l1377 09F8                        l2185 0DFE  
                      l2513 03A0                        l2505 0380                        l2435 04E8  
                      l2291 05A8                        l2363 0710                        l2347 06DC  
                      l2531 03D4                        l2445 050A                        l2365 0716  
                      l2349 06EA                        l2373 0728                        l2525 03B6  
                      l2517 03B2                        l2455 0534                        l2359 0704  
                      l2551 0408                        l1921 07C2                        l1913 07AE  
                      l2459 053A                        l2539 03F4                        l2475 02FA  
                      l2467 02D8                        l2571 0C60                        l2389 045C  
                      l1933 07EE                        l1925 07D6                        l1917 07B8  
                      l1909 07A4                        l2489 033C                        l2577 0C7E  
                      l1939 07F6                        l2499 036A                        l1897 0782  
                      u1200 0BA2                        u2010 037A                        u1220 0BBC  
                      u1300 0B54                        u1240 0BD4                        u1320 0B6C  
                      u1218 0BA4                        u1180 0B86                        u1260 0B1E  
                      _LATA 000F89                        u1238 0BBE                        u1318 0B56  
                      _LATC 000F8B                        u1280 0B3A                        u1258 0BD6  
                      u1338 0B6E                        u1530 0E70                        u1198 0B88  
                      u1278 0B20                        u1640 067C                        u1298 0B3C  
                      u1910 0520                        u1840 04D8                        u1980 031A  
            ?_SiIsAvailable 0023                        _Rows 0016                        _main 0C3C  
                      _send 000B                        fsr2h 000FDA                        indf2 000FDF  
                      fsr2l 000FD9                  _LcCursorOn 0F46                        btemp 0040  
                      prodh 000FF4                        prodl 000FF3             __end_of_LcClear 0E98  
                      start 0032             __end_of_CantaIR 0DDE               LcInit@columns 0034  
              ___param_bank 000000               _isPressed$607 0028            __end_of_MAINMENU 0271  
               Espera@Timer 002F                       ?_main 0023               ??_TiInitTimer 0028  
                     _T0CON 000FD5                       _TABLE 027D                       _RCSTA 000FAB  
             ??_KeypadMotor 002F                       _TMR0H 000FD7                       _TMR0L 000FD6  
                     _SPBRG 000FAF                       _TRISC 000F94                       _TXREG 000FAD  
                     _TXSTA 000FAC                       _Timer 0001            __end_of_SMSTABLE 02BF  
           __end_of_initSIO 0F0C                       _moved 0008                       _timer 0011  
               _LcCursorOff 0F52                       _state 0018                       _start 000F  
          __end_of_RSI_High 0032            __end_of_SMSMotor 075E                       tablat 000FF5  
             ??_TiResetTics 0028                       ttemp5 0041                       ttemp6 0044  
                     ttemp7 0048                       status 000FD8                       wtemp8 0041  
          __end_of_LcGotoXY 098C               ??__TiRSITimer 0023                  _TiGetTimer 0CD0  
   EscriuPrimeraOrdre@ordre 0029             __initialization 0D0A                __end_of_main 0C90  
      __end_of_getFullValue 0A1A                  _SiSendChar 0F74                      ??_main 003F  
             __activetblptr 000002               ?_initJoystick 0023           __end_of_LOGINMENU 02D5  
                    _ADCON0 000FC2                      _ADCON1 000FC1                      _ADCON2 000FC0  
       __end_of_TiInitTimer 0D7A                      _ADRESH 000FC4             ??_SiIsAvailable 0028  
       __end_of_KeypadMotor 057C                   ??_LcClear 0034                   ??_CantaIR 002A  
                    i2l2241 0C00                      i2l2253 0C32                      i2l2245 0C08  
                    i2l2249 0C2E                      _LCDcol 000D              LcGotoXY@Fisics 0035  
            LcGotoXY@Column 0037                      _LCDrow 000E                      _OSCCON 000FD3  
             ??_WaitForBusy 002F                 ?_LcCursorOn 0023           KeSetMode@menuMode 0029  
                    _LcInit 057C                      _Espera 0E36                _LcGotoXY$813 0033  
                    _RowAct 0014         __end_of_TiResetTics 0F24                      _h_Tics 0003  
       __end_of__TiRSITimer 0C3C                      clear_0 0D22                      clear_1 0D2E  
                    _period 0010                      isa$std 000001              ??_initJoystick 0028  
                 ??_initSIO 0028                __pdataCOMRAM 003F                __mediumconst 0000  
                    tblptrh 000FF7                      tblptrl 000FF6                      tblptru 000FF8  
         __end_of_CantaData 0DAC                  __accesstop 0080     __end_of__initialization 0D34  
         __end_of_KeSetMode 0E0A           __end_of_LcPutChar 0A98               ___rparam_used 000001  
             __end_of_TABLE 0289                 ?_TiGetTimer 0023              __pcstackCOMRAM 0023  
       __end_of_WaitForBusy 0CD0       __end_of_joystickMotor 0826                 ?_SiSendChar 0023  
                 ?_RSI_High 0023                   ?_SMSMotor 0023           __end_of_TiGetTics 0E36  
         __end_of_InitPorts 0F46                 _TiInitTimer 0D42                 _KeypadMotor 043E  
                 ?_LcGotoXY 0030                  __pbssBANK0 0080                 _TiResetTics 0F0C  
                   ?_LcInit 0034               _CantaPartAlta 0B7A                     ?_Espera 002F  
               __TiRSITimer 0BE2                  ??_RSI_High 0024                  ??_SMSMotor 002F  
                _getPresses 0F7C        __end_of_LOGREGSCREEN 027D                     LcInit@i 0037  
                ??_LcGotoXY 0031                     _OSCTUNE 000F9B                ?_LcCursorOff 0023  
              _getFullValue 098C                     _LcClear 0E78                     _CantaIR 0DAC  
        joystickMotor@state 0007                 _WaitForBusy 0C90              ?_CantaPartAlta 0023  
                   _Columns 0015           __end_of_getColumn 0F38        __end_of_initJoystick 0EF4  
                   __Hparam 0000                     __Lparam 0000                  _initKeypad 0EB8  
              __psmallconst 0200                  _currentKey 001D           __end_of_isPressed 0E78  
                   __pcinit 0D0A                     __ramtop 0200                     __ptext0 0C3C  
                   __ptext1 02D6                     __ptext2 0E58                     __ptext3 0F7C  
                   __ptext4 0826                     __ptext5 0A1A                     __ptext6 08E2  
                   __ptext7 0D7A                     __ptext8 0F46                     __ptext9 0F52  
                 _T0CONbits 000FD5                   CantaIR@IR 002A                     _initSIO 0EF4  
                   _counter 0021              displayMenu@row 0039           __end_of_menuMotor 043E  
                   _pressed 001B             WaitForBusy@Busy 002F        end_of_initialization 0D34  
                 _LOGINMENU 02BF               __Lmediumconst 0000             TiGetTics@Handle 002C  
              ??_LcCursorOn 0030                  _tick_count 0005                  _numPresses 001A  
           TiGetTics@actual 002D                     postdec2 000FDD                     postinc0 000FEE  
                   postinc2 000FDE                   _PORTBbits 000F81                   _PORTDbits 000F83  
               ?_getPresses 0023           _KeGetGenericValue 0E98          __end_of_LcCursorOn 0F52  
        ?_KeGetGenericValue 0023                   _TRISAbits 000F92                   _TRISBbits 000F93  
                 _TRISCbits 000F94                   _TRISDbits 000F95         getFullValue@generic 002C  
       ??_KeGetGenericValue 0028             ??_CantaPartAlta 0028       __end_of_SiIsAvailable 0F6A  
                 _CantaData 0D7A                   _TXSTAbits 000FAC                ??_TiGetTimer 0028  
            __end_of_LcInit 067E                   _KeSetMode 0DDE                   _LcPutChar 0A1A  
            __end_of_Espera 0E58                 ?_initKeypad 0023              _KeGetCharValue 0F6A  
             ??_displayMenu 003A                ??_SiSendChar 0028  __end_of_EscriuPrimeraOrdre 0B12  
               _BAUDCONbits 000FB8   __end_of_KeGetGenericValue 0EB8               __pidataCOMRAM 0F80  
                 _ColumnAct 0013                ?_TiInitTimer 0023                ?_KeypadMotor 0023  
       start_initialization 0D0A                   _TiGetTics 0E0A                   _InitPorts 0F38  
        __end_of_TiGetTimer 0D0A            _state@Audio$F896 0012         displayMenu@menuMode 003C  
              ?_TiResetTics 0023                  ?_CantaData 0023          __end_of_SiSendChar 0F7C  
                  ??_LcInit 0035                _LOGREGSCREEN 0271      __end_of_KeGetCharValue 0F74  
              ?__TiRSITimer 0023                    ??_Espera 0033                  ?_KeSetMode 0023  
                ?_LcPutChar 0023         __end_of_displayMenu 08E2                _initJoystick 0ED6  
               __pbssCOMRAM 0001                  ?_TiGetTics 0028            SiSendChar@myByte 0028  
                ?_InitPorts 0023                    ?_LcClear 0023                    ?_CantaIR 0023  
            _CantaPartBaixa 0B12                ?_WaitForBusy 0023             ?_KeGetCharValue 0023  
                 __pintcode 0008                   _getColumn 0F24                   _available 0019  
           CantaPartBaixa@c 0029                    ?_initSIO 0023                 __smallconst 0200  
                 _isPressed 0E58                   _menuMotor 02D6      __end_of_CantaPartBaixa 0B7A  
                  _MAINMENU 0201                 ??_CantaData 002A                    _LATBbits 000F8A  
                  _LATDbits 000F8C                 ??_KeSetMode 0029                 ??_LcPutChar 0038  
                  _RCONbits 000FD0                  ?_getColumn 0023                   _timer_SMS 001E  
               _displayMenu 0826                    _SMSTABLE 0289               _joystickMotor 075E  
                  _RSI_High 0008                  _ADCON0bits 000FC2                ??_getPresses 0028  
                  _SMSMotor 067E                  ?_isPressed 0023                    Espera@ms 0031  
                  _LcGotoXY 08E2                 ??_TiGetTics 002A                 ??_InitPorts 0028  
               LcGotoXY@Row 0030                  ?_menuMotor 0023                 _INTCON2bits 000FF1  
           ?_CantaPartBaixa 0023              menuMotor@state 003F          __end_of_getPresses 0F80  
                  __Hrparam 0000                    __Lrparam 0000                ??_initKeypad 0029  
            ?_joystickMotor 0023                    __ptext10 0E78                    __ptext11 0DDE  
        _EscriuPrimeraOrdre 0A98                    __ptext20 0D42                    __ptext12 0F6A  
                  __ptext21 067E                    __ptext13 098C                    __ptext30 0B12  
                  __ptext22 0E98                    __ptext14 075E                    __ptext31 0B7A  
                  __ptext23 0F24                    __ptext15 0F74                    __ptext32 043E  
                  __ptext24 057C                    __ptext16 0F5E                    __ptext33 0F0C  
                  __ptext25 0C90                    __ptext17 0EF4                    __ptext34 0E0A  
                  __ptext26 0CD0                    __ptext18 0EB8                    __ptext35 0F38  
                  __ptext27 0E36                    __ptext19 0ED6                    __ptext28 0A98  
                  __ptext37 0BE2                    __ptext29 0DAC              CantaPartAlta@c 0029  
        __end_of_initKeypad 0ED6                    _s_Timers 0080         ?_EscriuPrimeraOrdre 0023  
     __end_of_CantaPartAlta 0BE2               CantaData@Data 002A                 ??_getColumn 0028  
                  isa$xinst 000000                    _previous 001C                    int$flags 0040  
                  _stateSMS 0017        ??_EscriuPrimeraOrdre 0028                  LcInit@rows 0036  
               ??_isPressed 0028                 _OSCTUNEbits 000F9B                  _INTCONbits 000FF2  
               ??_menuMotor 003D               ??_LcCursorOff 0030               ?_getFullValue 0023  
                  intlevel2 0000            ??_KeGetCharValue 002D                _timerBounces 001F  
                LcPutChar@c 0038             ??_joystickMotor 0029              ??_getFullValue 0028  
             _SiIsAvailable 0F5E         __end_of_LcCursorOff 0F5E  
