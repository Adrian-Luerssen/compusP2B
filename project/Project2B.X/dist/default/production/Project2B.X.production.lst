

Microchip MPLAB XC8 Assembler V2.36 build 20220127204148 
                                                                                               Tue Jun 28 23:09:58 2022

Microchip MPLAB XC8 C Compiler v2.36 (Pro license) build 20220127204148 Og9s 
     1                           	processor	18F4321
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	plic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    11                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    14                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    15                           	psect	text0,global,reloc=2,class=CODE,delta=1
    16                           	psect	text1,global,reloc=2,class=CODE,delta=1
    17                           	psect	text2,global,reloc=2,class=CODE,delta=1
    18                           	psect	text3,global,reloc=2,class=CODE,delta=1
    19                           	psect	text4,global,reloc=2,class=CODE,delta=1
    20                           	psect	text5,global,reloc=2,class=CODE,delta=1
    21                           	psect	text6,global,reloc=2,class=CODE,delta=1
    22                           	psect	text7,global,reloc=2,class=CODE,delta=1
    23                           	psect	text8,global,reloc=2,class=CODE,delta=1
    24                           	psect	text9,global,reloc=2,class=CODE,delta=1
    25                           	psect	text10,global,reloc=2,class=CODE,delta=1
    26                           	psect	text11,global,reloc=2,class=CODE,delta=1
    27                           	psect	text12,global,reloc=2,class=CODE,delta=1
    28                           	psect	text13,global,reloc=2,class=CODE,delta=1
    29                           	psect	text14,global,reloc=2,class=CODE,delta=1
    30                           	psect	text15,global,reloc=2,class=CODE,delta=1
    31                           	psect	text16,global,reloc=2,class=CODE,delta=1
    32                           	psect	text17,global,reloc=2,class=CODE,delta=1,group=1
    33                           	psect	text18,global,reloc=2,class=CODE,delta=1
    34                           	psect	text19,global,reloc=2,class=CODE,delta=1
    35                           	psect	text20,global,reloc=2,class=CODE,delta=1
    36                           	psect	text21,global,reloc=2,class=CODE,delta=1
    37                           	psect	text22,global,reloc=2,class=CODE,delta=1
    38                           	psect	text23,global,reloc=2,class=CODE,delta=1
    39                           	psect	text24,global,reloc=2,class=CODE,delta=1
    40                           	psect	text25,global,reloc=2,class=CODE,delta=1
    41                           	psect	text26,global,reloc=2,class=CODE,delta=1
    42                           	psect	text27,global,reloc=2,class=CODE,delta=1
    43                           	psect	text28,global,reloc=2,class=CODE,delta=1
    44                           	psect	text29,global,reloc=2,class=CODE,delta=1
    45                           	psect	text30,global,reloc=2,class=CODE,delta=1
    46                           	psect	text31,global,reloc=2,class=CODE,delta=1
    47                           	psect	text32,global,reloc=2,class=CODE,delta=1
    48                           	psect	text33,global,reloc=2,class=CODE,delta=1
    49                           	psect	text34,global,reloc=2,class=CODE,delta=1
    50                           	psect	text35,global,reloc=2,class=CODE,delta=1
    51                           	psect	text36,global,reloc=2,class=CODE,delta=1
    52                           	psect	text37,global,reloc=2,class=CODE,delta=1
    53                           	psect	text38,global,reloc=2,class=CODE,delta=1
    54                           	psect	text39,global,reloc=2,class=CODE,delta=1
    55                           	psect	text40,global,reloc=2,class=CODE,delta=1
    56                           	psect	text41,global,reloc=2,class=CODE,delta=1
    57                           	psect	text42,global,reloc=2,class=CODE,delta=1
    58                           	psect	text43,global,reloc=2,class=CODE,delta=1
    59                           	psect	text44,global,reloc=2,class=CODE,delta=1
    60                           	psect	text45,global,reloc=2,class=CODE,delta=1
    61                           	psect	text46,global,reloc=2,class=CODE,delta=1
    62                           	psect	text47,global,reloc=2,class=CODE,delta=1
    63                           	psect	text48,global,reloc=2,class=CODE,delta=1
    64                           	psect	text49,global,reloc=2,class=CODE,delta=1
    65                           	psect	text50,global,reloc=2,class=CODE,delta=1
    66                           	psect	text51,global,reloc=2,class=CODE,delta=1
    67                           	psect	text52,global,reloc=2,class=CODE,delta=1
    68                           	psect	text53,global,reloc=2,class=CODE,delta=1
    69                           	psect	text54,global,reloc=2,class=CODE,delta=1
    70                           	psect	text55,global,reloc=2,class=CODE,delta=1
    71                           	psect	text56,global,reloc=2,class=CODE,delta=1
    72                           	psect	text57,global,reloc=2,class=CODE,delta=1
    73                           	psect	text58,global,reloc=2,class=CODE,delta=1,group=1
    74                           	psect	text59,global,reloc=2,class=CODE,delta=1,group=1
    75                           	psect	text60,global,reloc=2,class=CODE,delta=1
    76                           	psect	text61,global,reloc=2,class=CODE,delta=1
    77                           	psect	text62,global,reloc=2,class=CODE,delta=1
    78                           	psect	text63,global,reloc=2,class=CODE,delta=1
    79                           	psect	text64,global,reloc=2,class=CODE,delta=1
    80                           	psect	text65,global,reloc=2,class=CODE,delta=1
    81                           	psect	text66,global,reloc=2,class=CODE,delta=1
    82                           	psect	text67,global,reloc=2,class=CODE,delta=1
    83                           	psect	text68,global,reloc=2,class=CODE,delta=1
    84                           	psect	text69,global,reloc=2,class=CODE,delta=1
    85                           	psect	text70,global,reloc=2,class=CODE,delta=1
    86                           	psect	text71,global,reloc=2,class=CODE,delta=1
    87                           	psect	text72,global,reloc=2,class=CODE,delta=1
    88                           	psect	text73,global,reloc=2,class=CODE,delta=1
    89                           	psect	text74,global,reloc=2,class=CODE,delta=1
    90                           	psect	text75,global,reloc=2,class=CODE,delta=1
    91                           	psect	text76,global,reloc=2,class=CODE,delta=1
    92                           	psect	text77,global,reloc=2,class=CODE,delta=1
    93                           	psect	text78,global,reloc=2,class=CODE,delta=1
    94                           	psect	text79,global,reloc=2,class=CODE,delta=1
    95                           	psect	text80,global,reloc=2,class=CODE,delta=1
    96                           	psect	text81,global,reloc=2,class=CODE,delta=1
    97                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    98                           	psect	text83,global,reloc=2,class=CODE,delta=1
    99                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
   100                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   101                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   102                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
   103                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
   104                           	psect	pa_nodes0,global,class=CODE,delta=1
   105  0000                     
   106                           ; Version 2.36
   107                           ; Generated 28/01/2022 GMT
   108                           ; 
   109                           ; Copyright Â© 2022, Microchip Technology Inc. and its subsidiaries ("Microchip")
   110                           ; All rights reserved.
   111                           ; 
   112                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   113                           ; 
   114                           ; Redistribution and use in source and binary forms, with or without modification, are
   115                           ; permitted provided that the following conditions are met:
   116                           ; 
   117                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   118                           ;        conditions and the following disclaimer.
   119                           ; 
   120                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   121                           ;        of conditions and the following disclaimer in the documentation and/or other
   122                           ;        materials provided with the distribution. Publication is not required when
   123                           ;        this file is used in an embedded application.
   124                           ; 
   125                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   126                           ;        software without specific prior written permission.
   127                           ; 
   128                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   129                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   130                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   131                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   132                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   133                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   134                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   135                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   136                           ; 
   137                           ; 
   138                           ; Code-generator required, PIC18F4321 Definitions
   139                           ; 
   140                           ; SFR Addresses
   141  0000                     
   142                           	psect	idataCOMRAM
   143  000114                     __pidataCOMRAM:
   144                           	callstack 0
   145                           
   146                           ;initializer for _MAINMENUSIZE
   147  000114  0E                 	db	14
   148  000115  0E                 	db	14
   149  000116  1C                 	db	28
   150  000117  09                 	db	9
   151  000118  0C                 	db	12
   152                           
   153                           ;initializer for _minute
   154  000119  1E                 	db	30
   155                           
   156                           ;initializer for _minutes
   157  00011A  1E                 	db	30
   158                           
   159                           ;initializer for menuMotor@state
   160  00011B  01                 	db	1
   161                           
   162                           	psect	idataBANK0
   163  00186E                     __pidataBANK0:
   164                           	callstack 0
   165                           
   166                           ;initializer for _RESULTS
   167  00186E  54                 	db	84
   168  00186F  49                 	db	73
   169  001870  4D                 	db	77
   170  001871  45                 	db	69
   171  001872  20                 	db	32
   172  001873  4C                 	db	76
   173  001874  45                 	db	69
   174  001875  46                 	db	70
   175  001876  54                 	db	84
   176  001877  3A                 	db	58
   177  001878  00                 	db	0
   178  001879  53                 	db	83
   179  00187A  43                 	db	67
   180  00187B  4F                 	db	79
   181  00187C  52                 	db	82
   182  00187D  45                 	db	69
   183  00187E  3A                 	db	58
   184  00187F  00                 	db	0
   185  001880  00                 	db	0
   186  001881  00                 	db	0
   187  001882  00                 	db	0
   188  001883  00                 	db	0
   189                           
   190                           ;initializer for _LOGOUTMESSAGE
   191  001884  42                 	db	66
   192  001885  59                 	db	89
   193  001886  45                 	db	69
   194  001887  20                 	db	32
   195  001888  42                 	db	66
   196  001889  59                 	db	89
   197  00188A  45                 	db	69
   198  00188B  20                 	db	32
   199  00188C  00                 	db	0
   200                           
   201                           ;initializer for _ERROR
   202  00188D  45                 	db	69
   203  00188E  52                 	db	82
   204  00188F  52                 	db	82
   205  001890  4F                 	db	79
   206  001891  52                 	db	82
   207  001892  53                 	db	83
   208  001893  3A                 	db	58
   209  001894  20                 	db	32
   210  001895  00                 	db	0
   211                           
   212                           ;initializer for _LOGINMENU
   213  001896  31                 	db	49
   214  001897  2E                 	db	46
   215  001898  4C                 	db	76
   216  001899  4F                 	db	79
   217  00189A  47                 	db	71
   218  00189B  49                 	db	73
   219  00189C  4E                 	db	78
   220  00189D  00                 	db	0
   221  00189E  00                 	db	0
   222  00189F  00                 	db	0
   223  0018A0  00                 	db	0
   224  0018A1  32                 	db	50
   225  0018A2  2E                 	db	46
   226  0018A3  52                 	db	82
   227  0018A4  45                 	db	69
   228  0018A5  47                 	db	71
   229  0018A6  49                 	db	73
   230  0018A7  53                 	db	83
   231  0018A8  54                 	db	84
   232  0018A9  45                 	db	69
   233  0018AA  52                 	db	82
   234  0018AB  00                 	db	0
   235                           
   236                           ;initializer for _TIME
   237  0018AC  54                 	db	84
   238  0018AD  49                 	db	73
   239  0018AE  4D                 	db	77
   240  0018AF  45                 	db	69
   241  0018B0  20                 	db	32
   242  0018B1  52                 	db	82
   243  0018B2  45                 	db	69
   244  0018B3  4D                 	db	77
   245  0018B4  41                 	db	65
   246  0018B5  49                 	db	73
   247  0018B6  4E                 	db	78
   248  0018B7  49                 	db	73
   249  0018B8  4E                 	db	78
   250  0018B9  47                 	db	71
   251  0018BA  3A                 	db	58
   252  0018BB  20                 	db	32
   253                           
   254                           ;initializer for _sysTime
   255  0018BC  43                 	db	67
   256  0018BD  55                 	db	85
   257  0018BE  52                 	db	82
   258  0018BF  52                 	db	82
   259  0018C0  45                 	db	69
   260  0018C1  4E                 	db	78
   261  0018C2  54                 	db	84
   262  0018C3  20                 	db	32
   263  0018C4  54                 	db	84
   264  0018C5  49                 	db	73
   265  0018C6  4D                 	db	77
   266  0018C7  45                 	db	69
   267  0018C8  3A                 	db	58
   268  0018C9  00                 	db	0
   269                           
   270                           ;initializer for _modifyTimeString
   271  0018CA  4D                 	db	77
   272  0018CB  4F                 	db	79
   273  0018CC  44                 	db	68
   274  0018CD  49                 	db	73
   275  0018CE  46                 	db	70
   276  0018CF  59                 	db	89
   277  0018D0  20                 	db	32
   278  0018D1  54                 	db	84
   279  0018D2  49                 	db	73
   280  0018D3  4D                 	db	77
   281  0018D4  45                 	db	69
   282  0018D5  3A                 	db	58
   283  0018D6  00                 	db	0
   284                           
   285                           ;initializer for _LOGREGSCREEN
   286  0018D7  55                 	db	85
   287  0018D8  53                 	db	83
   288  0018D9  45                 	db	69
   289  0018DA  52                 	db	82
   290  0018DB  3A                 	db	58
   291  0018DC  00                 	db	0
   292  0018DD  50                 	db	80
   293  0018DE  53                 	db	83
   294  0018DF  57                 	db	87
   295  0018E0  44                 	db	68
   296  0018E1  3A                 	db	58
   297  0018E2  00                 	db	0
   298                           
   299                           	psect	smallconst
   300  000200                     __psmallconst:
   301                           	callstack 0
   302  000200  00                 	db	0
   303  000201                     _TABLE:
   304                           	callstack 0
   305  000201  31                 	db	49
   306  000202  32                 	db	50
   307  000203  33                 	db	51
   308  000204  34                 	db	52
   309  000205  35                 	db	53
   310  000206  36                 	db	54
   311  000207  37                 	db	55
   312  000208  38                 	db	56
   313  000209  39                 	db	57
   314  00020A  2A                 	db	42
   315  00020B  30                 	db	48
   316  00020C  23                 	db	35
   317  00020D                     __end_of_TABLE:
   318                           	callstack 0
   319  00020D                     _MAINMENU:
   320                           	callstack 0
   321  00020D  31                 	db	49
   322  00020E  2E                 	db	46
   323  00020F  50                 	db	80
   324  000210  4C                 	db	76
   325  000211  41                 	db	65
   326  000212  59                 	db	89
   327  000213  20                 	db	32
   328  000214  41                 	db	65
   329  000215  20                 	db	32
   330  000216  47                 	db	71
   331  000217  41                 	db	65
   332  000218  4D                 	db	77
   333  000219  45                 	db	69
   334  00021A  00                 	db	0
   335  00021B  00                 	db	0
   336  00021C  00                 	db	0
   337  00021D  00                 	db	0
   338  00021E  00                 	db	0
   339  00021F  00                 	db	0
   340  000220  00                 	db	0
   341  000221  00                 	db	0
   342  000222  00                 	db	0
   343  000223  00                 	db	0
   344  000224  00                 	db	0
   345  000225  00                 	db	0
   346  000226  00                 	db	0
   347  000227  00                 	db	0
   348  000228  00                 	db	0
   349  000229  32                 	db	50
   350  00022A  2E                 	db	46
   351  00022B  4D                 	db	77
   352  00022C  4F                 	db	79
   353  00022D  44                 	db	68
   354  00022E  49                 	db	73
   355  00022F  46                 	db	70
   356  000230  59                 	db	89
   357  000231  20                 	db	32
   358  000232  54                 	db	84
   359  000233  49                 	db	73
   360  000234  4D                 	db	77
   361  000235  45                 	db	69
   362  000236  00                 	db	0
   363  000237  00                 	db	0
   364  000238  00                 	db	0
   365  000239  00                 	db	0
   366  00023A  00                 	db	0
   367  00023B  00                 	db	0
   368  00023C  00                 	db	0
   369  00023D  00                 	db	0
   370  00023E  00                 	db	0
   371  00023F  00                 	db	0
   372  000240  00                 	db	0
   373  000241  00                 	db	0
   374  000242  00                 	db	0
   375  000243  00                 	db	0
   376  000244  00                 	db	0
   377  000245  33                 	db	51
   378  000246  2E                 	db	46
   379  000247  53                 	db	83
   380  000248  48                 	db	72
   381  000249  4F                 	db	79
   382  00024A  57                 	db	87
   383  00024B  20                 	db	32
   384  00024C  47                 	db	71
   385  00024D  45                 	db	69
   386  00024E  4E                 	db	78
   387  00024F  45                 	db	69
   388  000250  52                 	db	82
   389  000251  41                 	db	65
   390  000252  4C                 	db	76
   391  000253  20                 	db	32
   392  000254  54                 	db	84
   393  000255  4F                 	db	79
   394  000256  50                 	db	80
   395  000257  20                 	db	32
   396  000258  35                 	db	53
   397  000259  20                 	db	32
   398  00025A  53                 	db	83
   399  00025B  43                 	db	67
   400  00025C  4F                 	db	79
   401  00025D  52                 	db	82
   402  00025E  45                 	db	69
   403  00025F  53                 	db	83
   404  000260  20                 	db	32
   405  000261  34                 	db	52
   406  000262  2E                 	db	46
   407  000263  4C                 	db	76
   408  000264  4F                 	db	79
   409  000265  47                 	db	71
   410  000266  4F                 	db	79
   411  000267  55                 	db	85
   412  000268  54                 	db	84
   413  000269  00                 	db	0
   414  00026A  00                 	db	0
   415  00026B  00                 	db	0
   416  00026C  00                 	db	0
   417  00026D  00                 	db	0
   418  00026E  00                 	db	0
   419  00026F  00                 	db	0
   420  000270  00                 	db	0
   421  000271  00                 	db	0
   422  000272  00                 	db	0
   423  000273  00                 	db	0
   424  000274  00                 	db	0
   425  000275  00                 	db	0
   426  000276  00                 	db	0
   427  000277  00                 	db	0
   428  000278  00                 	db	0
   429  000279  00                 	db	0
   430  00027A  00                 	db	0
   431  00027B  00                 	db	0
   432  00027C  00                 	db	0
   433  00027D  35                 	db	53
   434  00027E  2E                 	db	46
   435  00027F  53                 	db	83
   436  000280  48                 	db	72
   437  000281  4F                 	db	79
   438  000282  57                 	db	87
   439  000283  20                 	db	32
   440  000284  54                 	db	84
   441  000285  49                 	db	73
   442  000286  4D                 	db	77
   443  000287  45                 	db	69
   444  000288  00                 	db	0
   445  000289  00                 	db	0
   446  00028A  00                 	db	0
   447  00028B  00                 	db	0
   448  00028C  00                 	db	0
   449  00028D  00                 	db	0
   450  00028E  00                 	db	0
   451  00028F  00                 	db	0
   452  000290  00                 	db	0
   453  000291  00                 	db	0
   454  000292  00                 	db	0
   455  000293  00                 	db	0
   456  000294  00                 	db	0
   457  000295  00                 	db	0
   458  000296  00                 	db	0
   459  000297  00                 	db	0
   460  000298  00                 	db	0
   461  000299                     __end_of_MAINMENU:
   462                           	callstack 0
   463  000299                     _SMSTABLE:
   464                           	callstack 0
   465  000299  31                 	db	49
   466  00029A  00                 	db	0
   467  00029B  00                 	db	0
   468  00029C  00                 	db	0
   469  00029D  00                 	db	0
   470  00029E  00                 	db	0
   471  00029F  41                 	db	65
   472  0002A0  42                 	db	66
   473  0002A1  43                 	db	67
   474  0002A2  32                 	db	50
   475  0002A3  00                 	db	0
   476  0002A4  00                 	db	0
   477  0002A5  44                 	db	68
   478  0002A6  45                 	db	69
   479  0002A7  46                 	db	70
   480  0002A8  33                 	db	51
   481  0002A9  00                 	db	0
   482  0002AA  00                 	db	0
   483  0002AB  47                 	db	71
   484  0002AC  48                 	db	72
   485  0002AD  49                 	db	73
   486  0002AE  34                 	db	52
   487  0002AF  00                 	db	0
   488  0002B0  00                 	db	0
   489  0002B1  4A                 	db	74
   490  0002B2  4B                 	db	75
   491  0002B3  4C                 	db	76
   492  0002B4  35                 	db	53
   493  0002B5  00                 	db	0
   494  0002B6  00                 	db	0
   495  0002B7  4D                 	db	77
   496  0002B8  4E                 	db	78
   497  0002B9  4F                 	db	79
   498  0002BA  36                 	db	54
   499  0002BB  00                 	db	0
   500  0002BC  00                 	db	0
   501  0002BD  50                 	db	80
   502  0002BE  51                 	db	81
   503  0002BF  52                 	db	82
   504  0002C0  53                 	db	83
   505  0002C1  37                 	db	55
   506  0002C2  00                 	db	0
   507  0002C3  54                 	db	84
   508  0002C4  55                 	db	85
   509  0002C5  56                 	db	86
   510  0002C6  38                 	db	56
   511  0002C7  00                 	db	0
   512  0002C8  00                 	db	0
   513  0002C9  57                 	db	87
   514  0002CA  58                 	db	88
   515  0002CB  59                 	db	89
   516  0002CC  5A                 	db	90
   517  0002CD  39                 	db	57
   518  0002CE  00                 	db	0
   519  0002CF                     __end_of_SMSTABLE:
   520                           	callstack 0
   521  0000                     _EECON2	set	4007
   522  0000                     _EEDATA	set	4008
   523  0000                     _EEADR	set	4009
   524  0000                     _PORTCbits	set	3970
   525  0000                     _RCREG	set	4014
   526  0000                     _TXREG	set	4013
   527  0000                     _SPBRG	set	4015
   528  0000                     _BAUDCONbits	set	4024
   529  0000                     _LATCbits	set	3979
   530  0000                     _TRISCbits	set	3988
   531  0000                     _PORTDbits	set	3971
   532  0000                     _LATDbits	set	3980
   533  0000                     _TRISDbits	set	3989
   534  0000                     _LATAbits	set	3977
   535  0000                     _LATBbits	set	3978
   536  0000                     _TMR0L	set	4054
   537  0000                     _TMR0H	set	4055
   538  0000                     _ADCON0bits	set	4034
   539  0000                     _T0CONbits	set	4053
   540  0000                     _PORTBbits	set	3969
   541  0000                     _TRISAbits	set	3986
   542  0000                     _TRISBbits	set	3987
   543  0000                     _RCONbits	set	4048
   544  0000                     _T0CON	set	4053
   545  0000                     _INTCONbits	set	4082
   546  0000                     _INTCON2bits	set	4081
   547  0000                     _PIR1bits	set	3998
   548  0000                     _RCSTAbits	set	4011
   549  0000                     _TXSTAbits	set	4012
   550  0000                     _ADCON2	set	4032
   551  0000                     _ADCON1	set	4033
   552  0000                     _ADCON0	set	4034
   553  0000                     _ADRESH	set	4036
   554  0000                     _EECON1bits	set	4006
   555  0002CF  00                 	db	0	; dummy byte at the end
   556  0000                     
   557                           ; #config settings
   558                           
   559                           	psect	cinit
   560  00194C                     __pcinit:
   561                           	callstack 0
   562  00194C                     start_initialization:
   563                           	callstack 0
   564  00194C                     __initialization:
   565                           	callstack 0
   566                           
   567                           ; Initialize objects allocated to BANK0 (117 bytes)
   568                           ; load TBLPTR registers with __pidataBANK0
   569  00194C  0E6E               	movlw	low __pidataBANK0
   570  00194E  6EF6               	movwf	tblptrl,c
   571  001950  0E18               	movlw	high __pidataBANK0
   572  001952  6EF7               	movwf	tblptrh,c
   573  001954  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   574  001956  6EF8               	movwf	tblptru,c
   575  001958  EE00  F080         	lfsr	0,__pdataBANK0
   576  00195C  EE10 F075          	lfsr	1,117
   577  001960                     copy_data0:
   578  001960  0009               	tblrd		*+
   579  001962  CFF5 FFEE          	movff	tablat,postinc0
   580  001966  50E5               	movf	postdec1,w,c
   581  001968  50E1               	movf	fsr1l,w,c
   582  00196A  E1FA               	bnz	copy_data0
   583                           
   584                           ; Initialize objects allocated to COMRAM (8 bytes)
   585                           ; load TBLPTR registers with __pidataCOMRAM
   586  00196C  0E14               	movlw	low __pidataCOMRAM
   587  00196E  6EF6               	movwf	tblptrl,c
   588  001970  0E01               	movlw	high __pidataCOMRAM
   589  001972  6EF7               	movwf	tblptrh,c
   590  001974  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   591  001976  6EF8               	movwf	tblptru,c
   592  001978  EE00  F072         	lfsr	0,__pdataCOMRAM
   593  00197C  EE10 F008          	lfsr	1,8
   594  001980                     copy_data1:
   595  001980  0009               	tblrd		*+
   596  001982  CFF5 FFEE          	movff	tablat,postinc0
   597  001986  50E5               	movf	postdec1,w,c
   598  001988  50E1               	movf	fsr1l,w,c
   599  00198A  E1FA               	bnz	copy_data1
   600                           
   601                           ; Clear objects allocated to BANK1 (219 bytes)
   602  00198C  EE01  F000         	lfsr	0,__pbssBANK1
   603  001990  0EDB               	movlw	219
   604  001992                     clear_0:
   605  001992  6AEE               	clrf	postinc0,c
   606  001994  06E8               	decf	wreg,f,c
   607  001996  E1FD               	bnz	clear_0
   608                           
   609                           ; Clear objects allocated to COMRAM (88 bytes)
   610  001998  EE00  F001         	lfsr	0,__pbssCOMRAM
   611  00199C  0E58               	movlw	88
   612  00199E                     clear_1:
   613  00199E  6AEE               	clrf	postinc0,c
   614  0019A0  06E8               	decf	wreg,f,c
   615  0019A2  E1FD               	bnz	clear_1
   616  0019A4                     end_of_initialization:
   617                           	callstack 0
   618  0019A4                     __end_of__initialization:
   619                           	callstack 0
   620  0019A4  907A               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   621  0019A6  927A               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   622  0019A8  0E00               	movlw	low (__Lmediumconst shr (0+16))
   623  0019AA  6EF8               	movwf	tblptru,c
   624  0019AC  0100               	movlb	0
   625  0019AE  EF9D  F00D         	goto	_main	;jump to C main() function
   626                           
   627                           	psect	bssCOMRAM
   628  000001                     __pbssCOMRAM:
   629                           	callstack 0
   630  000001                     _topScores:
   631                           	callstack 0
   632  000001                     	ds	10
   633  00000B                     _mUser@EEPROM$F1764:
   634                           	callstack 0
   635  00000B                     	ds	2
   636  00000D                     _Timer:
   637                           	callstack 0
   638  00000D                     	ds	2
   639  00000F                     _h_Tics:
   640                           	callstack 0
   641  00000F                     	ds	2
   642  000011                     _val@time$F1847:
   643                           	callstack 0
   644  000011                     	ds	1
   645  000012                     _game:
   646                           	callstack 0
   647  000012                     	ds	1
   648  000013                     _state@time$F1845:
   649                           	callstack 0
   650  000013                     	ds	1
   651  000014                     _timer@time$F1844:
   652                           	callstack 0
   653  000014                     	ds	1
   654  000015                     _sysMinute:
   655                           	callstack 0
   656  000015                     	ds	1
   657  000016                     _sysSecond:
   658                           	callstack 0
   659  000016                     	ds	1
   660  000017                     _second:
   661                           	callstack 0
   662  000017                     	ds	1
   663  000018                     _seconds:
   664                           	callstack 0
   665  000018                     	ds	1
   666  000019                     _saveState:
   667                           	callstack 0
   668  000019                     	ds	1
   669  00001A                     _saveScore:
   670                           	callstack 0
   671  00001A                     	ds	1
   672  00001B                     _lastUserPointer:
   673                           	callstack 0
   674  00001B                     	ds	1
   675  00001C                     _status:
   676                           	callstack 0
   677  00001C                     	ds	1
   678  00001D                     _userNum:
   679                           	callstack 0
   680  00001D                     	ds	1
   681  00001E                     _state@EEPROM$F1761:
   682                           	callstack 0
   683  00001E                     	ds	1
   684  00001F                     _position:
   685                           	callstack 0
   686  00001F                     	ds	1
   687  000020                     _numScores:
   688                           	callstack 0
   689  000020                     	ds	1
   690  000021                     _counterTX:
   691                           	callstack 0
   692  000021                     	ds	1
   693  000022                     _dataTX:
   694                           	callstack 0
   695  000022                     	ds	1
   696  000023                     _timerTX:
   697                           	callstack 0
   698  000023                     	ds	1
   699  000024                     _stateTX:
   700                           	callstack 0
   701  000024                     	ds	1
   702  000025                     _counterRX:
   703                           	callstack 0
   704  000025                     	ds	1
   705  000026                     _dataRX:
   706                           	callstack 0
   707  000026                     	ds	1
   708  000027                     _timerRX:
   709                           	callstack 0
   710  000027                     	ds	1
   711  000028                     _stateRX:
   712                           	callstack 0
   713  000028                     	ds	1
   714  000029                     _joyMode:
   715                           	callstack 0
   716  000029                     	ds	1
   717  00002A                     _stateJoy:
   718                           	callstack 0
   719  00002A                     	ds	1
   720  00002B                     _moved:
   721                           	callstack 0
   722  00002B                     	ds	1
   723  00002C                     _y:
   724                           	callstack 0
   725  00002C                     	ds	1
   726  00002D                     _x:
   727                           	callstack 0
   728  00002D                     	ds	1
   729  00002E                     _send:
   730                           	callstack 0
   731  00002E                     	ds	1
   732  00002F                     _mScore:
   733                           	callstack 0
   734  00002F                     	ds	1
   735  000030                     _pos:
   736                           	callstack 0
   737  000030                     	ds	1
   738  000031                     _val:
   739                           	callstack 0
   740  000031                     	ds	1
   741  000032                     _LCDcolm:
   742                           	callstack 0
   743  000032                     	ds	1
   744  000033                     _LCDcol:
   745                           	callstack 0
   746  000033                     	ds	1
   747  000034                     _LCDrow:
   748                           	callstack 0
   749  000034                     	ds	1
   750  000035                     _timer:
   751                           	callstack 0
   752  000035                     	ds	1
   753  000036                     _period:
   754                           	callstack 0
   755  000036                     	ds	1
   756  000037                     _timerSong:
   757                           	callstack 0
   758  000037                     	ds	1
   759  000038                     _periodTimer:
   760                           	callstack 0
   761  000038                     	ds	1
   762  000039                     _state@Audio$F967:
   763                           	callstack 0
   764  000039                     	ds	1
   765  00003A                     _ColumnAct:
   766                           	callstack 0
   767  00003A                     	ds	1
   768  00003B                     _RowAct:
   769                           	callstack 0
   770  00003B                     	ds	1
   771  00003C                     _stateSMS:
   772                           	callstack 0
   773  00003C                     	ds	1
   774  00003D                     _state:
   775                           	callstack 0
   776  00003D                     	ds	1
   777  00003E                     _available:
   778                           	callstack 0
   779  00003E                     	ds	1
   780  00003F                     _numPresses:
   781                           	callstack 0
   782  00003F                     	ds	1
   783  000040                     _pressed:
   784                           	callstack 0
   785  000040                     	ds	1
   786  000041                     _previous:
   787                           	callstack 0
   788  000041                     	ds	1
   789  000042                     _currentKey:
   790                           	callstack 0
   791  000042                     	ds	1
   792  000043                     _timer_SMS:
   793                           	callstack 0
   794  000043                     	ds	1
   795  000044                     _timerBounces:
   796                           	callstack 0
   797  000044                     	ds	1
   798  000045                     _row:
   799                           	callstack 0
   800  000045                     	ds	1
   801  000046                     _counter:
   802                           	callstack 0
   803  000046                     	ds	1
   804  000047                     _mUser:
   805                           	callstack 0
   806  000047                     	ds	18
   807                           
   808                           	psect	dataCOMRAM
   809  000072                     __pdataCOMRAM:
   810                           	callstack 0
   811  000072                     _MAINMENUSIZE:
   812                           	callstack 0
   813  000072                     	ds	5
   814  000077                     _minute:
   815                           	callstack 0
   816  000077                     	ds	1
   817  000078                     _minutes:
   818                           	callstack 0
   819  000078                     	ds	1
   820  000079                     menuMotor@state:
   821                           	callstack 0
   822  000079                     	ds	1
   823                           
   824                           	psect	dataBANK0
   825  000080                     __pdataBANK0:
   826                           	callstack 0
   827  000080                     _RESULTS:
   828                           	callstack 0
   829  000080                     	ds	22
   830  000096                     _LOGOUTMESSAGE:
   831                           	callstack 0
   832  000096                     	ds	9
   833  00009F                     _ERROR:
   834                           	callstack 0
   835  00009F                     	ds	9
   836  0000A8                     _LOGINMENU:
   837                           	callstack 0
   838  0000A8                     	ds	22
   839  0000BE                     _TIME:
   840                           	callstack 0
   841  0000BE                     	ds	16
   842  0000CE                     _sysTime:
   843                           	callstack 0
   844  0000CE                     	ds	14
   845  0000DC                     _modifyTimeString:
   846                           	callstack 0
   847  0000DC                     	ds	13
   848  0000E9                     _LOGREGSCREEN:
   849                           	callstack 0
   850  0000E9                     	ds	12
   851                           
   852                           	psect	bssBANK1
   853  000100                     __pbssBANK1:
   854                           	callstack 0
   855  000100                     _users:
   856                           	callstack 0
   857  000100                     	ds	144
   858  000190                     _s_Timers:
   859                           	callstack 0
   860  000190                     	ds	75
   861                           
   862                           	psect	cstackBANK0
   863  0000F5                     __pcstackBANK0:
   864                           	callstack 0
   865  0000F5                     _dataMotor$1786:
   866                           	callstack 0
   867                           
   868                           ; 2 bytes @ 0x0
   869  0000F5                     	ds	2
   870                           
   871                           	psect	cstackCOMRAM
   872  000059                     __pcstackCOMRAM:
   873                           	callstack 0
   874  000059                     
   875                           ; 1 bytes @ 0x0
   876  000059                     	ds	1
   877  00005A                     ??_RSI_High:
   878                           
   879                           ; 1 bytes @ 0x1
   880  00005A                     	ds	4
   881  00005E                     ??_KeGetGenericValue:
   882  00005E                     ??_getFullValue:
   883  00005E                     ??_EscriuPrimeraOrdre:
   884  00005E                     ??_CantaPartAlta:
   885  00005E                     ??_CantaPartBaixa:
   886  00005E                     ?_TiGetTics:
   887                           	callstack 0
   888  00005E                     ?___awmod:
   889                           	callstack 0
   890  00005E                     TiResetTics@Handle:
   891                           	callstack 0
   892  00005E                     _isPressed$638:
   893                           	callstack 0
   894  00005E                     JoSetMode@mode:
   895                           	callstack 0
   896  00005E                     SiSendChar@myByte:
   897                           	callstack 0
   898  00005E                     btSendByte@byte:
   899                           	callstack 0
   900  00005E                     DaSaveUser@regUser:
   901                           	callstack 0
   902  00005E                     saveEEPROM@data:
   903                           	callstack 0
   904  00005E                     readEEPROM@address:
   905                           	callstack 0
   906  00005E                     ___lbdiv@divisor:
   907                           	callstack 0
   908  00005E                     ___lbmod@divisor:
   909                           	callstack 0
   910  00005E                     ___awmod@dividend:
   911                           	callstack 0
   912                           
   913                           ; 2 bytes @ 0x5
   914  00005E                     	ds	1
   915  00005F                     ??_joystickMotor:
   916  00005F                     ??_readUserData:
   917  00005F                     KeSetMode@menuMode:
   918                           	callstack 0
   919  00005F                     CantaPartAlta@c:
   920                           	callstack 0
   921  00005F                     CantaPartBaixa@c:
   922                           	callstack 0
   923  00005F                     EscriuPrimeraOrdre@ordre:
   924                           	callstack 0
   925  00005F                     saveEEPROM@ad:
   926                           	callstack 0
   927  00005F                     ___lbdiv@dividend:
   928                           	callstack 0
   929  00005F                     ___lbmod@dividend:
   930                           	callstack 0
   931                           
   932                           ; 1 bytes @ 0x6
   933  00005F                     	ds	1
   934  000060                     ??_TiGetTics:
   935  000060                     CantaIR@IR:
   936                           	callstack 0
   937  000060                     CantaData@Data:
   938                           	callstack 0
   939  000060                     ___lbdiv@counter:
   940                           	callstack 0
   941  000060                     ___lbmod@counter:
   942                           	callstack 0
   943  000060                     ___awmod@divisor:
   944                           	callstack 0
   945                           
   946                           ; 2 bytes @ 0x7
   947  000060                     	ds	1
   948  000061                     ___lbdiv@quotient:
   949                           	callstack 0
   950  000061                     ___lbmod@rem:
   951                           	callstack 0
   952                           
   953                           ; 1 bytes @ 0x8
   954  000061                     	ds	1
   955  000062                     TiGetTics@Handle:
   956                           	callstack 0
   957  000062                     getFullValue@generic:
   958                           	callstack 0
   959  000062                     ___awmod@counter:
   960                           	callstack 0
   961                           
   962                           ; 1 bytes @ 0x9
   963  000062                     	ds	1
   964  000063                     ___awmod@sign:
   965                           	callstack 0
   966  000063                     TiGetTics@actual:
   967                           	callstack 0
   968                           
   969                           ; 2 bytes @ 0xA
   970  000063                     	ds	2
   971  000065                     ??_audioMotor:
   972  000065                     ??_SMSMotor:
   973  000065                     ??_KeypadMotor:
   974  000065                     ??_btMotor:
   975  000065                     WaitForBusy@Busy:
   976                           	callstack 0
   977  000065                     Espera@Timer:
   978                           	callstack 0
   979                           
   980                           ; 2 bytes @ 0xC
   981  000065                     	ds	1
   982  000066                     LcGotoXY@Row:
   983                           	callstack 0
   984                           
   985                           ; 1 bytes @ 0xD
   986  000066                     	ds	1
   987  000067                     LcGotoXY@Fisics:
   988                           	callstack 0
   989  000067                     Espera@ms:
   990                           	callstack 0
   991                           
   992                           ; 2 bytes @ 0xE
   993  000067                     	ds	1
   994  000068                     _LcGotoXY$844:
   995                           	callstack 0
   996                           
   997                           ; 2 bytes @ 0xF
   998  000068                     	ds	1
   999  000069                     ??_Espera:
  1000                           
  1001                           ; 1 bytes @ 0x10
  1002  000069                     	ds	1
  1003  00006A                     LcInit@columns:
  1004                           	callstack 0
  1005  00006A                     LcGotoXY@Column:
  1006                           	callstack 0
  1007                           
  1008                           ; 1 bytes @ 0x11
  1009  00006A                     	ds	1
  1010  00006B                     LcInit@rows:
  1011                           	callstack 0
  1012  00006B                     LcPutChar@c:
  1013                           	callstack 0
  1014  00006B                     DaFindUser@logUser:
  1015                           	callstack 0
  1016                           
  1017                           ; 1 bytes @ 0x12
  1018  00006B                     	ds	1
  1019  00006C                     ??_dataMotor:
  1020  00006C                     ??_mainMenu:
  1021  00006C                     LcInit@i:
  1022                           	callstack 0
  1023  00006C                     displayString@string:
  1024                           	callstack 0
  1025  00006C                     DaSaveScore@userScore:
  1026                           	callstack 0
  1027  00006C                     sendChar@bt:
  1028                           	callstack 0
  1029                           
  1030                           ; 1 bytes @ 0x13
  1031  00006C                     	ds	1
  1032  00006D                     ??_timeMotor:
  1033  00006D                     
  1034                           ; 1 bytes @ 0x14
  1035  00006D                     	ds	1
  1036  00006E                     ??_menuMotor:
  1037                           
  1038                           ; 1 bytes @ 0x15
  1039  00006E                     	ds	4
  1040  000072                     
  1041                           ; 1 bytes @ 0x19
  1042 ;;
  1043 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1044 ;;
  1045 ;; *************** function _main *****************
  1046 ;; Defined at:
  1047 ;;		line 38 in file "main.c"
  1048 ;; Parameters:    Size  Location     Type
  1049 ;;		None
  1050 ;; Auto vars:     Size  Location     Type
  1051 ;;		None
  1052 ;; Return value:  Size  Location     Type
  1053 ;;                  1    wreg      void 
  1054 ;; Registers used:
  1055 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1056 ;; Tracked objects:
  1057 ;;		On entry : 0/0
  1058 ;;		On exit  : 0/0
  1059 ;;		Unchanged: 0/0
  1060 ;; Data sizes:     COMRAM   BANK0   BANK1
  1061 ;;      Params:         0       0       0
  1062 ;;      Locals:         0       0       0
  1063 ;;      Temps:          0       0       0
  1064 ;;      Totals:         0       0       0
  1065 ;;Total ram usage:        0 bytes
  1066 ;; Hardware stack levels required when called: 8
  1067 ;; This function calls:
  1068 ;;		_KeypadMotor
  1069 ;;		_LcInit
  1070 ;;		_SMSMotor
  1071 ;;		_TiInitTimer
  1072 ;;		_audioMotor
  1073 ;;		_btMotor
  1074 ;;		_dataMotor
  1075 ;;		_initAudio
  1076 ;;		_initData
  1077 ;;		_initJoystick
  1078 ;;		_initKeypad
  1079 ;;		_initMenu
  1080 ;;		_initSIO
  1081 ;;		_initTime
  1082 ;;		_joystickMotor
  1083 ;;		_menuMotor
  1084 ;;		_timeMotor
  1085 ;; This function is called by:
  1086 ;;		Startup code after reset
  1087 ;; This function uses a non-reentrant model
  1088 ;;
  1089                           
  1090                           	psect	text0
  1091  001B3A                     __ptext0:
  1092                           	callstack 0
  1093  001B3A                     _main:
  1094                           	callstack 23
  1095                           
  1096                           ;incstack = 0
  1097  001B3A  ECBB  F00E         	call	_TiInitTimer	;wreg free
  1098  001B3E  EC59  F00F         	call	_initJoystick	;wreg free
  1099  001B42  EC7B  F00F         	call	_initKeypad	;wreg free
  1100  001B46  0E10               	movlw	16
  1101  001B48  6E6A               	movwf	LcInit@columns^0,c
  1102  001B4A  ECBE  F00A         	call	_LcInit
  1103  001B4E  EC47  F00F         	call	_initSIO	;wreg free
  1104  001B52  EC80  F000         	call	_initMenu	;wreg free
  1105  001B56  EC26  F000         	call	_initAudio	;wreg free
  1106  001B5A  ECAA  F000         	call	_initTime	;wreg free
  1107  001B5E  EC3F  F00D         	call	_initData	;wreg free
  1108  001B62                     l7319:
  1109  001B62  EC14  F00B         	call	_audioMotor	;wreg free
  1110  001B66  EC67  F00A         	call	_SMSMotor	;wreg free
  1111  001B6A  ECFD  F008         	call	_KeypadMotor	;wreg free
  1112  001B6E  EC68  F001         	call	_menuMotor	;wreg free
  1113  001B72  EC08  F00A         	call	_joystickMotor	;wreg free
  1114  001B76  ECD4  F004         	call	_dataMotor	;wreg free
  1115  001B7A  EC3E  F007         	call	_timeMotor	;wreg free
  1116  001B7E  EC88  F009         	call	_btMotor	;wreg free
  1117  001B82  D7EF               	goto	l7319
  1118  001B84                     __end_of_main:
  1119                           	callstack 0
  1120                           
  1121 ;; *************** function _timeMotor *****************
  1122 ;; Defined at:
  1123 ;;		line 297 in file "time.c"
  1124 ;; Parameters:    Size  Location     Type
  1125 ;;		None
  1126 ;; Auto vars:     Size  Location     Type
  1127 ;;		None
  1128 ;; Return value:  Size  Location     Type
  1129 ;;                  1    wreg      void 
  1130 ;; Registers used:
  1131 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1132 ;; Tracked objects:
  1133 ;;		On entry : 0/0
  1134 ;;		On exit  : 0/0
  1135 ;;		Unchanged: 0/0
  1136 ;; Data sizes:     COMRAM   BANK0   BANK1
  1137 ;;      Params:         0       0       0
  1138 ;;      Locals:         0       0       0
  1139 ;;      Temps:          2       0       0
  1140 ;;      Totals:         2       0       0
  1141 ;;Total ram usage:        2 bytes
  1142 ;; Hardware stack levels used: 1
  1143 ;; Hardware stack levels required when called: 7
  1144 ;; This function calls:
  1145 ;;		_KeGetGenericValue
  1146 ;;		_LcCursorOn
  1147 ;;		_LcGotoXY
  1148 ;;		_LcPutChar
  1149 ;;		_TiGetTics
  1150 ;;		_TiResetTics
  1151 ;;		___lbdiv
  1152 ;;		___lbmod
  1153 ;;		_btAvailable
  1154 ;;		_isPressed
  1155 ;;		_sendChar
  1156 ;;		_updateGameTime
  1157 ;;		_updateSysTime
  1158 ;; This function is called by:
  1159 ;;		_main
  1160 ;; This function uses a non-reentrant model
  1161 ;;
  1162                           
  1163                           	psect	text1
  1164  000E7C                     __ptext1:
  1165                           	callstack 0
  1166  000E7C                     _timeMotor:
  1167                           	callstack 23
  1168                           
  1169                           ;time.c: 298:     switch (state){
  1170                           
  1171                           ;incstack = 0
  1172  000E7C  D161               	goto	l7225
  1173  000E7E                     l7053:
  1174                           
  1175                           ;time.c: 300:             if (TiGetTics(timer) >= 1200){
  1176  000E7E  5014               	movf	_timer@time$F1844^0,w,c
  1177  000E80  EC22  F00F         	call	_TiGetTics
  1178  000E84  BE5F               	btfsc	(?_TiGetTics+1)^0,7,c
  1179  000E86  0012               	return	
  1180  000E88  ECA9  F004         	call	PL26	;call to abstracted procedure
  1181  000E8C  A0D8               	btfss	status,0,c
  1182  000E8E  0012               	return	
  1183                           
  1184                           ;time.c: 301:                 TiResetTics(timer);
  1185  000E90  5014               	movf	_timer@time$F1844^0,w,c
  1186  000E92  ECAB  F00F         	call	_TiResetTics
  1187                           
  1188                           ;time.c: 302:                 updateSysTime();
  1189  000E96  EF44  F000         	goto	_updateSysTime	;wreg free
  1190  000E9A                     l7059:
  1191                           
  1192                           ;time.c: 306:             if (TiGetTics(timer) >= 1200){
  1193  000E9A  5014               	movf	_timer@time$F1844^0,w,c
  1194  000E9C  EC22  F00F         	call	_TiGetTics
  1195  000EA0  BE5F               	btfsc	(?_TiGetTics+1)^0,7,c
  1196  000EA2  0012               	return	
  1197  000EA4  ECA9  F004         	call	PL26	;call to abstracted procedure
  1198  000EA8  A0D8               	btfss	status,0,c
  1199  000EAA  0012               	return	
  1200                           
  1201                           ;time.c: 307:                 TiResetTics(timer);
  1202  000EAC  5014               	movf	_timer@time$F1844^0,w,c
  1203  000EAE  ECAB  F00F         	call	_TiResetTics
  1204                           
  1205                           ;time.c: 308:                 state = 2;
  1206  000EB2  0E02               	movlw	2
  1207                           
  1208                           ;time.c: 309:                 LcGotoXY(0,1);
  1209  000EB4  D98B               	call	PL58	;call to abstracted procedure
  1210  000EB6  ECA4  F00E         	call	_LcGotoXY
  1211                           
  1212                           ;time.c: 310:                 updateGameTime();
  1213  000EBA  ECC9  F00F         	call	_updateGameTime	;wreg free
  1214  000EBE  EF44  F000         	goto	_updateSysTime
  1215  000EC2                     l7071:
  1216                           
  1217                           ;time.c: 316:             if (btAvailable()){
  1218  000EC2  EC8E  F000         	call	_btAvailable	;wreg free
  1219  000EC6  0900               	iorlw	0
  1220  000EC8  B4D8               	btfsc	status,2,c
  1221  000ECA  0012               	return	
  1222                           
  1223                           ;time.c: 317:                 val = minute/10;
  1224  000ECC  D992               	call	PL96	;call to abstracted procedure
  1225  000ECE  EC72  F00E         	call	___lbdiv
  1226  000ED2  6E11               	movwf	_val@time$F1847^0,c
  1227                           
  1228                           ;time.c: 318:                 sendChar(1);
  1229  000ED4  0E01               	movlw	1
  1230  000ED6  ECE3  F00F         	call	_sendChar
  1231                           
  1232                           ;time.c: 319:                 state = 3;
  1233  000EDA  0E03               	movlw	3
  1234  000EDC  6E13               	movwf	_state@time$F1845^0,c
  1235  000EDE  0C03               	retlw	3
  1236  000EE0                     l7079:
  1237                           
  1238                           ;time.c: 325:             if (btAvailable()){
  1239  000EE0  EC8E  F000         	call	_btAvailable	;wreg free
  1240  000EE4  0900               	iorlw	0
  1241  000EE6  B4D8               	btfsc	status,2,c
  1242  000EE8  0012               	return	
  1243                           
  1244                           ;time.c: 326:                 val = minute%10;
  1245  000EEA  D97B               	call	PL88	;call to abstracted procedure
  1246  000EEC  EC0F  F00F         	call	___lbmod
  1247  000EF0  6E11               	movwf	_val@time$F1847^0,c
  1248                           
  1249                           ;time.c: 327:                 sendChar(1);
  1250  000EF2  0E01               	movlw	1
  1251  000EF4  ECE3  F00F         	call	_sendChar
  1252                           
  1253                           ;time.c: 328:                 state = 4;
  1254  000EF8  0E04               	movlw	4
  1255  000EFA  6E13               	movwf	_state@time$F1845^0,c
  1256  000EFC  0C04               	retlw	4
  1257  000EFE                     l7087:
  1258                           
  1259                           ;time.c: 333:             if (btAvailable()){
  1260  000EFE  EC8E  F000         	call	_btAvailable	;wreg free
  1261  000F02  0900               	iorlw	0
  1262  000F04  B4D8               	btfsc	status,2,c
  1263  000F06  0012               	return	
  1264                           
  1265                           ;time.c: 334:                 val = 10;
  1266  000F08  0E0A               	movlw	10
  1267  000F0A  6E11               	movwf	_val@time$F1847^0,c
  1268                           
  1269                           ;time.c: 335:                 sendChar(1);
  1270  000F0C  0E01               	movlw	1
  1271  000F0E  ECE3  F00F         	call	_sendChar
  1272                           
  1273                           ;time.c: 336:                 state = 5;
  1274  000F12  0E05               	movlw	5
  1275  000F14  6E13               	movwf	_state@time$F1845^0,c
  1276  000F16  0C05               	retlw	5
  1277  000F18                     l7095:
  1278                           
  1279                           ;time.c: 341:             if (btAvailable()){
  1280  000F18  EC8E  F000         	call	_btAvailable	;wreg free
  1281  000F1C  0900               	iorlw	0
  1282  000F1E  B4D8               	btfsc	status,2,c
  1283  000F20  0012               	return	
  1284                           
  1285                           ;time.c: 342:                 val = second/10;
  1286  000F22  D963               	call	PL90	;call to abstracted procedure
  1287  000F24  EC72  F00E         	call	___lbdiv
  1288  000F28  6E11               	movwf	_val@time$F1847^0,c
  1289                           
  1290                           ;time.c: 343:                 sendChar(1);
  1291  000F2A  0E01               	movlw	1
  1292  000F2C  ECE3  F00F         	call	_sendChar
  1293                           
  1294                           ;time.c: 344:                 state = 6;
  1295  000F30  0E06               	movlw	6
  1296  000F32  6E13               	movwf	_state@time$F1845^0,c
  1297  000F34  0C06               	retlw	6
  1298  000F36                     l7103:
  1299                           
  1300                           ;time.c: 349:             if (btAvailable()){
  1301  000F36  EC8E  F000         	call	_btAvailable	;wreg free
  1302  000F3A  0900               	iorlw	0
  1303  000F3C  B4D8               	btfsc	status,2,c
  1304  000F3E  0012               	return	
  1305                           
  1306                           ;time.c: 350:                 val = second%10;
  1307  000F40  D94C               	call	PL82	;call to abstracted procedure
  1308  000F42  EC0F  F00F         	call	___lbmod
  1309  000F46  6E11               	movwf	_val@time$F1847^0,c
  1310                           
  1311                           ;time.c: 351:                 sendChar(1);
  1312  000F48  0E01               	movlw	1
  1313  000F4A  ECE3  F00F         	call	_sendChar
  1314                           
  1315                           ;time.c: 352:                 state = 1;
  1316  000F4E  0E01               	movlw	1
  1317  000F50  6E13               	movwf	_state@time$F1845^0,c
  1318  000F52  0C01               	retlw	1
  1319  000F54                     l7111:
  1320                           
  1321                           ;time.c: 357:             LcPutChar(minute/10+'0');
  1322  000F54  D94E               	call	PL96	;call to abstracted procedure
  1323  000F56  EC72  F00E         	call	___lbdiv
  1324  000F5A  0F30               	addlw	48
  1325  000F5C  ECE6  F00E         	call	_LcPutChar
  1326                           
  1327                           ;time.c: 358:             state = 21;
  1328  000F60  0E15               	movlw	21
  1329  000F62  6E13               	movwf	_state@time$F1845^0,c
  1330                           
  1331                           ;time.c: 359:             break;
  1332  000F64  0C15               	retlw	21
  1333  000F66                     l7115:
  1334                           
  1335                           ;time.c: 362:             LcPutChar(minute%10+'0');
  1336  000F66  D93D               	call	PL88	;call to abstracted procedure
  1337  000F68  EC0F  F00F         	call	___lbmod
  1338  000F6C  0F30               	addlw	48
  1339  000F6E  ECE6  F00E         	call	_LcPutChar
  1340                           
  1341                           ;time.c: 363:             state = 22;
  1342  000F72  0E16               	movlw	22
  1343  000F74  6E13               	movwf	_state@time$F1845^0,c
  1344                           
  1345                           ;time.c: 364:             break;
  1346  000F76  0C16               	retlw	22
  1347  000F78                     l7119:
  1348                           
  1349                           ;time.c: 367:             LcPutChar(':');
  1350  000F78  0E3A               	movlw	58
  1351  000F7A  ECE6  F00E         	call	_LcPutChar
  1352                           
  1353                           ;time.c: 368:             state = 23;
  1354  000F7E  0E17               	movlw	23
  1355  000F80  6E13               	movwf	_state@time$F1845^0,c
  1356                           
  1357                           ;time.c: 369:             break;
  1358  000F82  0C17               	retlw	23
  1359  000F84                     l7123:
  1360                           
  1361                           ;time.c: 372:             LcPutChar(second/10+'0');
  1362  000F84  D932               	call	PL90	;call to abstracted procedure
  1363  000F86  EC72  F00E         	call	___lbdiv
  1364  000F8A  0F30               	addlw	48
  1365  000F8C  ECE6  F00E         	call	_LcPutChar
  1366                           
  1367                           ;time.c: 373:             state = 24;
  1368  000F90  0E18               	movlw	24
  1369  000F92  6E13               	movwf	_state@time$F1845^0,c
  1370                           
  1371                           ;time.c: 374:             break;
  1372  000F94  0C18               	retlw	24
  1373  000F96                     l7127:
  1374                           
  1375                           ;time.c: 377:             LcPutChar(second%10+'0');
  1376  000F96  D921               	call	PL82	;call to abstracted procedure
  1377  000F98  EC0F  F00F         	call	___lbmod
  1378  000F9C  0F30               	addlw	48
  1379  000F9E  ECE6  F00E         	call	_LcPutChar
  1380                           
  1381                           ;time.c: 378:             LcGotoXY(0,1);
  1382  000FA2  D918               	call	PL60	;call to abstracted procedure
  1383  000FA4  ECA4  F00E         	call	_LcGotoXY
  1384                           
  1385                           ;time.c: 379:             if (game){
  1386  000FA8  5012               	movf	_game^0,w,c
  1387  000FAA  E003               	bz	l7133
  1388                           
  1389                           ;time.c: 380:                 game = 0;
  1390  000FAC  6A12               	clrf	_game^0,c
  1391                           
  1392                           ;time.c: 381:                 state = 0;
  1393  000FAE  6A13               	clrf	_state@time$F1845^0,c
  1394                           
  1395                           ;time.c: 382:             } else {
  1396  000FB0  D004               	goto	l7137
  1397  000FB2                     l7133:
  1398                           
  1399                           ;time.c: 383:                 LcCursorOn();
  1400  000FB2  EC76  F000         	call	_LcCursorOn	;wreg free
  1401                           
  1402                           ;time.c: 384:                 state = 25;
  1403  000FB6  0E19               	movlw	25
  1404  000FB8  6E13               	movwf	_state@time$F1845^0,c
  1405  000FBA                     l7137:
  1406                           
  1407                           ;time.c: 388:             if (isPressed() && KeGetGenericValue() != '*' && KeGetGenericV
      +                          alue() != '#' ){
  1408  000FBA  ECEF  F00F         	call	_isPressed	;wreg free
  1409  000FBE  0900               	iorlw	0
  1410  000FC0  B4D8               	btfsc	status,2,c
  1411  000FC2  0012               	return	
  1412  000FC4  EC8B  F00F         	call	_KeGetGenericValue	;wreg free
  1413  000FC8  0A2A               	xorlw	42
  1414  000FCA  B4D8               	btfsc	status,2,c
  1415  000FCC  0012               	return	
  1416  000FCE  EC8B  F00F         	call	_KeGetGenericValue	;wreg free
  1417  000FD2  0A23               	xorlw	35
  1418  000FD4  B4D8               	btfsc	status,2,c
  1419  000FD6  0012               	return	
  1420                           
  1421                           ;time.c: 389:                 minute = (KeGetGenericValue()-'0')*10;
  1422  000FD8  EC8B  F00F         	call	_KeGetGenericValue	;wreg free
  1423  000FDC  0FD0               	addlw	208
  1424  000FDE  0D0A               	mullw	10
  1425  000FE0  CFF3 F077          	movff	prodl,_minute
  1426                           
  1427                           ;time.c: 390:                 LcPutChar(KeGetGenericValue());
  1428  000FE4  EC8B  F00F         	call	_KeGetGenericValue	;wreg free
  1429  000FE8  ECE6  F00E         	call	_LcPutChar
  1430                           
  1431                           ;time.c: 391:                 state = 26;
  1432  000FEC  0E1A               	movlw	26
  1433  000FEE  6E13               	movwf	_state@time$F1845^0,c
  1434  000FF0  0C1A               	retlw	26
  1435  000FF2                     l7149:
  1436                           
  1437                           ;time.c: 395:             if (isPressed() && KeGetGenericValue() != '*' && KeGetGenericV
      +                          alue() != '#' ){
  1438  000FF2  ECEF  F00F         	call	_isPressed	;wreg free
  1439  000FF6  0900               	iorlw	0
  1440  000FF8  B4D8               	btfsc	status,2,c
  1441  000FFA  0012               	return	
  1442  000FFC  EC8B  F00F         	call	_KeGetGenericValue	;wreg free
  1443  001000  0A2A               	xorlw	42
  1444  001002  B4D8               	btfsc	status,2,c
  1445  001004  0012               	return	
  1446  001006  EC8B  F00F         	call	_KeGetGenericValue	;wreg free
  1447  00100A  0A23               	xorlw	35
  1448  00100C  B4D8               	btfsc	status,2,c
  1449  00100E  0012               	return	
  1450                           
  1451                           ;time.c: 396:                 minute +=KeGetGenericValue()-'0';
  1452  001010  EC8B  F00F         	call	_KeGetGenericValue	;wreg free
  1453  001014  0FD0               	addlw	208
  1454  001016  2677               	addwf	_minute^0,f,c
  1455                           
  1456                           ;time.c: 397:                 LcPutChar(KeGetGenericValue());
  1457  001018  EC8B  F00F         	call	_KeGetGenericValue	;wreg free
  1458  00101C  ECE6  F00E         	call	_LcPutChar
  1459                           
  1460                           ;time.c: 398:                 LcPutChar(':');
  1461  001020  0E3A               	movlw	58
  1462  001022  ECE6  F00E         	call	_LcPutChar
  1463                           
  1464                           ;time.c: 399:                 state = 27;
  1465  001026  0E1B               	movlw	27
  1466  001028  6E13               	movwf	_state@time$F1845^0,c
  1467  00102A  0C1B               	retlw	27
  1468  00102C                     l7163:
  1469                           
  1470                           ;time.c: 403:             if (isPressed() && KeGetGenericValue() != '*' && KeGetGenericV
      +                          alue() != '#' ){
  1471  00102C  ECEF  F00F         	call	_isPressed	;wreg free
  1472  001030  0900               	iorlw	0
  1473  001032  B4D8               	btfsc	status,2,c
  1474  001034  0012               	return	
  1475  001036  EC8B  F00F         	call	_KeGetGenericValue	;wreg free
  1476  00103A  0A2A               	xorlw	42
  1477  00103C  B4D8               	btfsc	status,2,c
  1478  00103E  0012               	return	
  1479  001040  EC8B  F00F         	call	_KeGetGenericValue	;wreg free
  1480  001044  0A23               	xorlw	35
  1481  001046  B4D8               	btfsc	status,2,c
  1482  001048  0012               	return	
  1483                           
  1484                           ;time.c: 404:                 second = (KeGetGenericValue()-'0')*10;
  1485  00104A  EC8B  F00F         	call	_KeGetGenericValue	;wreg free
  1486  00104E  0FD0               	addlw	208
  1487  001050  0D0A               	mullw	10
  1488  001052  CFF3 F017          	movff	prodl,_second
  1489                           
  1490                           ;time.c: 405:                 LcPutChar(KeGetGenericValue());
  1491  001056  EC8B  F00F         	call	_KeGetGenericValue	;wreg free
  1492  00105A  ECE6  F00E         	call	_LcPutChar
  1493                           
  1494                           ;time.c: 406:                 state = 28;
  1495  00105E  0E1C               	movlw	28
  1496  001060  6E13               	movwf	_state@time$F1845^0,c
  1497  001062  0C1C               	retlw	28
  1498  001064                     l7175:
  1499                           
  1500                           ;time.c: 410:             if (isPressed() && KeGetGenericValue() != '*' && KeGetGenericV
      +                          alue() != '#' ){
  1501  001064  ECEF  F00F         	call	_isPressed	;wreg free
  1502  001068  0900               	iorlw	0
  1503  00106A  B4D8               	btfsc	status,2,c
  1504  00106C  0012               	return	
  1505  00106E  EC8B  F00F         	call	_KeGetGenericValue	;wreg free
  1506  001072  0A2A               	xorlw	42
  1507  001074  B4D8               	btfsc	status,2,c
  1508  001076  0012               	return	
  1509  001078  EC8B  F00F         	call	_KeGetGenericValue	;wreg free
  1510  00107C  0A23               	xorlw	35
  1511  00107E  B4D8               	btfsc	status,2,c
  1512  001080  0012               	return	
  1513                           
  1514                           ;time.c: 411:                 second += KeGetGenericValue()-'0';
  1515  001082  EC8B  F00F         	call	_KeGetGenericValue	;wreg free
  1516  001086  0FD0               	addlw	208
  1517  001088  2617               	addwf	_second^0,f,c
  1518                           
  1519                           ;time.c: 412:                 LcPutChar(KeGetGenericValue());
  1520  00108A  EC8B  F00F         	call	_KeGetGenericValue	;wreg free
  1521  00108E  ECE6  F00E         	call	_LcPutChar
  1522                           
  1523                           ;time.c: 413:                 state = 29;
  1524  001092  0E1D               	movlw	29
  1525  001094  6E13               	movwf	_state@time$F1845^0,c
  1526  001096  0C1D               	retlw	29
  1527  001098                     l7187:
  1528                           
  1529                           ;time.c: 417:             if (isPressed() && KeGetGenericValue() == '#'){
  1530  001098  ECEF  F00F         	call	_isPressed	;wreg free
  1531  00109C  0900               	iorlw	0
  1532  00109E  B4D8               	btfsc	status,2,c
  1533  0010A0  0012               	return	
  1534  0010A2  EC8B  F00F         	call	_KeGetGenericValue	;wreg free
  1535  0010A6  0A23               	xorlw	35
  1536  0010A8  A4D8               	btfss	status,2,c
  1537  0010AA  0012               	return	
  1538                           
  1539                           ;time.c: 418:                 seconds = second;
  1540  0010AC  C017  F018         	movff	_second,_seconds
  1541                           
  1542                           ;time.c: 419:                 minutes = minute;
  1543  0010B0  C077  F078         	movff	_minute,_minutes
  1544                           
  1545                           ;time.c: 420:                 state = 0;
  1546  0010B4  6A13               	clrf	_state@time$F1845^0,c
  1547  0010B6  0012               	return	
  1548  0010B8                     l7193:
  1549                           
  1550                           ;time.c: 425:             LcPutChar(sysMinute/10+'0');
  1551  0010B8  0E0A               	movlw	10
  1552  0010BA  6E5E               	movwf	___lbdiv@divisor^0,c
  1553  0010BC  5015               	movf	_sysMinute^0,w,c
  1554  0010BE  EC72  F00E         	call	___lbdiv
  1555  0010C2  0F30               	addlw	48
  1556  0010C4  ECE6  F00E         	call	_LcPutChar
  1557                           
  1558                           ;time.c: 426:             state = 31;
  1559  0010C8  0E1F               	movlw	31
  1560  0010CA  6E13               	movwf	_state@time$F1845^0,c
  1561                           
  1562                           ;time.c: 427:             break;
  1563  0010CC  0C1F               	retlw	31
  1564  0010CE                     l7197:
  1565                           
  1566                           ;time.c: 430:             LcPutChar(sysMinute%10+'0');
  1567  0010CE  0E0A               	movlw	10
  1568  0010D0  6E5E               	movwf	___lbmod@divisor^0,c
  1569  0010D2  5015               	movf	_sysMinute^0,w,c
  1570  0010D4  EC0F  F00F         	call	___lbmod
  1571  0010D8  0F30               	addlw	48
  1572  0010DA  ECE6  F00E         	call	_LcPutChar
  1573                           
  1574                           ;time.c: 431:             state = 32;
  1575  0010DE  0E20               	movlw	32
  1576  0010E0  6E13               	movwf	_state@time$F1845^0,c
  1577                           
  1578                           ;time.c: 432:             break;
  1579  0010E2  0C20               	retlw	32
  1580  0010E4                     l7201:
  1581                           
  1582                           ;time.c: 435:             LcPutChar(':');
  1583  0010E4  0E3A               	movlw	58
  1584  0010E6  ECE6  F00E         	call	_LcPutChar
  1585                           
  1586                           ;time.c: 436:             state = 33;
  1587  0010EA  0E21               	movlw	33
  1588  0010EC  6E13               	movwf	_state@time$F1845^0,c
  1589                           
  1590                           ;time.c: 437:             break;
  1591  0010EE  0C21               	retlw	33
  1592  0010F0                     l7205:
  1593                           
  1594                           ;time.c: 440:             LcPutChar(sysSecond/10+'0');
  1595  0010F0  0E0A               	movlw	10
  1596  0010F2  6E5E               	movwf	___lbdiv@divisor^0,c
  1597  0010F4  5016               	movf	_sysSecond^0,w,c
  1598  0010F6  EC72  F00E         	call	___lbdiv
  1599  0010FA  0F30               	addlw	48
  1600  0010FC  ECE6  F00E         	call	_LcPutChar
  1601                           
  1602                           ;time.c: 441:             state = 34;
  1603  001100  0E22               	movlw	34
  1604  001102  6E13               	movwf	_state@time$F1845^0,c
  1605                           
  1606                           ;time.c: 442:             break;
  1607  001104  0C22               	retlw	34
  1608  001106                     l7209:
  1609                           
  1610                           ;time.c: 445:             LcPutChar(sysSecond%10+'0');
  1611  001106  0E0A               	movlw	10
  1612  001108  6E5E               	movwf	___lbmod@divisor^0,c
  1613  00110A  5016               	movf	_sysSecond^0,w,c
  1614  00110C  EC0F  F00F         	call	___lbmod
  1615  001110  0F30               	addlw	48
  1616  001112  ECE6  F00E         	call	_LcPutChar
  1617                           
  1618                           ;time.c: 446:             state = 35;
  1619  001116  0E23               	movlw	35
  1620  001118  6E13               	movwf	_state@time$F1845^0,c
  1621                           
  1622                           ;time.c: 447:             break;
  1623  00111A  0C23               	retlw	35
  1624  00111C                     l7213:
  1625                           
  1626                           ;time.c: 449:             if (TiGetTics(timer) >= 1200){
  1627  00111C  5014               	movf	_timer@time$F1844^0,w,c
  1628  00111E  EC22  F00F         	call	_TiGetTics
  1629  001122  BE5F               	btfsc	(?_TiGetTics+1)^0,7,c
  1630  001124  0012               	return	
  1631  001126  ECA9  F004         	call	PL26	;call to abstracted procedure
  1632  00112A  A0D8               	btfss	status,0,c
  1633  00112C  0012               	return	
  1634                           
  1635                           ;time.c: 450:                 TiResetTics(timer);
  1636  00112E  5014               	movf	_timer@time$F1844^0,w,c
  1637  001130  ECAB  F00F         	call	_TiResetTics
  1638                           
  1639                           ;time.c: 451:                 updateSysTime();
  1640  001134  EC44  F000         	call	_updateSysTime	;wreg free
  1641                           
  1642                           ;time.c: 452:                 state = 30;
  1643  001138  0E1E               	movlw	30
  1644                           
  1645                           ;time.c: 453:                 LcGotoXY(0,1);
  1646  00113A  D848               	call	PL58	;call to abstracted procedure
  1647  00113C  EFA4  F00E         	goto	_LcGotoXY
  1648  001140                     l7225:
  1649  001140  5013               	movf	_state@time$F1845^0,w,c
  1650  001142  6E6D               	movwf	??_timeMotor^0,c
  1651  001144  6A6E               	clrf	(??_timeMotor+1)^0,c
  1652                           
  1653                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1654                           ; Switch size 1, requested type "space"
  1655                           ; Number of cases is 1, Range of values is 0 to 0
  1656                           ; switch strategies available:
  1657                           ; Name         Instructions Cycles
  1658                           ; simple_byte            4     3 (average)
  1659                           ;	Chosen strategy is simple_byte
  1660  001146  506E               	movf	(??_timeMotor+1)^0,w,c
  1661  001148  A4D8               	btfss	status,2,c
  1662  00114A  0012               	return	
  1663                           
  1664                           ; Switch size 1, requested type "space"
  1665                           ; Number of cases is 23, Range of values is 0 to 35
  1666                           ; switch strategies available:
  1667                           ; Name         Instructions Cycles
  1668                           ; simple_byte           70    36 (average)
  1669                           ;	Chosen strategy is simple_byte
  1670  00114C  506D               	movf	??_timeMotor^0,w,c
  1671  00114E  E101 D696          	bz	l7053
  1672  001152  0A01               	xorlw	1	; case 1
  1673  001154  E101 D6A1          	bz	l7059
  1674  001158  0A03               	xorlw	3	; case 2
  1675  00115A  E101 D6B2          	bz	l7071
  1676  00115E  0A01               	xorlw	1	; case 3
  1677  001160  E101 D6BE          	bz	l7079
  1678  001164  0A07               	xorlw	7	; case 4
  1679  001166  E101 D6CA          	bz	l7087
  1680  00116A  0A01               	xorlw	1	; case 5
  1681  00116C  E101 D6D4          	bz	l7095
  1682  001170  0A03               	xorlw	3	; case 6
  1683  001172  E101 D6E0          	bz	l7103
  1684  001176  0A12               	xorlw	18	; case 20
  1685  001178  E101 D6EC          	bz	l7111
  1686  00117C  0A01               	xorlw	1	; case 21
  1687  00117E  E101 D6F2          	bz	l7115
  1688  001182  0A03               	xorlw	3	; case 22
  1689  001184  E101 D6F8          	bz	l7119
  1690  001188  0A01               	xorlw	1	; case 23
  1691  00118A  E101 D6FB          	bz	l7123
  1692  00118E  0A0F               	xorlw	15	; case 24
  1693  001190  E101 D701          	bz	l7127
  1694  001194  0A01               	xorlw	1	; case 25
  1695  001196  E101 D710          	bz	l7137
  1696  00119A  0A03               	xorlw	3	; case 26
  1697  00119C  E101 D729          	bz	l7149
  1698  0011A0  0A01               	xorlw	1	; case 27
  1699  0011A2  E101 D743          	bz	l7163
  1700  0011A6  0A07               	xorlw	7	; case 28
  1701  0011A8  E101 D75C          	bz	l7175
  1702  0011AC  0A01               	xorlw	1	; case 29
  1703  0011AE  E101 D773          	bz	l7187
  1704  0011B2  0A03               	xorlw	3	; case 30
  1705  0011B4  E081               	bz	l7193
  1706  0011B6  0A01               	xorlw	1	; case 31
  1707  0011B8  E08A               	bz	l7197
  1708  0011BA  0A3F               	xorlw	63	; case 32
  1709  0011BC  E093               	bz	l7201
  1710  0011BE  0A01               	xorlw	1	; case 33
  1711  0011C0  E097               	bz	l7205
  1712  0011C2  0A03               	xorlw	3	; case 34
  1713  0011C4  E0A0               	bz	l7209
  1714  0011C6  0A01               	xorlw	1	; case 35
  1715  0011C8  E0A9               	bz	l7213
  1716  0011CA  0012               	return		;funcret
  1717  0011CC                     __end_of_timeMotor:
  1718                           	callstack 0
  1719  0011CC                     PL58:
  1720                           	callstack 23
  1721  0011CC  6E13               	movwf	_state@time$F1845^0,c
  1722  0011CE  0E01               	movlw	1
  1723  0011D0  6E66               	movwf	LcGotoXY@Row^0,c
  1724  0011D2  0C00               	retlw	0
  1725  0011D4                     __end_ofPL58:
  1726                           	callstack 0
  1727  0011D4                     PL60:
  1728                           	callstack 24
  1729  0011D4  0E01               	movlw	1
  1730  0011D6  6E66               	movwf	LcGotoXY@Row^0,c
  1731  0011D8  0C00               	retlw	0
  1732  0011DA                     __end_ofPL60:
  1733                           	callstack 0
  1734  0011DA                     PL82:
  1735                           	callstack 23
  1736  0011DA  0E0A               	movlw	10
  1737  0011DC  6E5E               	movwf	___lbmod@divisor^0,c
  1738  0011DE  5017               	movf	_second^0,w,c
  1739  0011E0  0012               	return	
  1740  0011E2                     __end_ofPL82:
  1741                           	callstack 0
  1742  0011E2                     PL88:
  1743                           	callstack 23
  1744  0011E2  0E0A               	movlw	10
  1745  0011E4  6E5E               	movwf	___lbmod@divisor^0,c
  1746  0011E6  5077               	movf	_minute^0,w,c
  1747  0011E8  0012               	return	
  1748  0011EA                     __end_ofPL88:
  1749                           	callstack 0
  1750  0011EA                     PL90:
  1751                           	callstack 23
  1752  0011EA  0E0A               	movlw	10
  1753  0011EC  6E5E               	movwf	___lbdiv@divisor^0,c
  1754  0011EE  5017               	movf	_second^0,w,c
  1755  0011F0  0012               	return	
  1756  0011F2                     __end_ofPL90:
  1757                           	callstack 0
  1758  0011F2                     PL96:
  1759                           	callstack 23
  1760  0011F2  0E0A               	movlw	10
  1761  0011F4  6E5E               	movwf	___lbdiv@divisor^0,c
  1762  0011F6  5077               	movf	_minute^0,w,c
  1763  0011F8  0012               	return	
  1764  0011FA                     __end_ofPL96:
  1765                           	callstack 0
  1766                           
  1767 ;; *************** function _updateSysTime *****************
  1768 ;; Defined at:
  1769 ;;		line 492 in file "time.c"
  1770 ;; Parameters:    Size  Location     Type
  1771 ;;		None
  1772 ;; Auto vars:     Size  Location     Type
  1773 ;;		None
  1774 ;; Return value:  Size  Location     Type
  1775 ;;                  1    wreg      void 
  1776 ;; Registers used:
  1777 ;;		wreg, status,2, status,0
  1778 ;; Tracked objects:
  1779 ;;		On entry : 0/0
  1780 ;;		On exit  : 0/0
  1781 ;;		Unchanged: 0/0
  1782 ;; Data sizes:     COMRAM   BANK0   BANK1
  1783 ;;      Params:         0       0       0
  1784 ;;      Locals:         0       0       0
  1785 ;;      Temps:          0       0       0
  1786 ;;      Totals:         0       0       0
  1787 ;;Total ram usage:        0 bytes
  1788 ;; Hardware stack levels used: 1
  1789 ;; Hardware stack levels required when called: 2
  1790 ;; This function calls:
  1791 ;;		Nothing
  1792 ;; This function is called by:
  1793 ;;		_timeMotor
  1794 ;; This function uses a non-reentrant model
  1795 ;;
  1796                           
  1797                           	psect	text2
  1798  000088                     __ptext2:
  1799                           	callstack 0
  1800  000088                     _updateSysTime:
  1801                           	callstack 27
  1802                           
  1803                           ;time.c: 493:     if (sysSecond == 59){
  1804                           
  1805                           ;incstack = 0
  1806  000088  0E3B               	movlw	59
  1807  00008A  1816               	xorwf	_sysSecond^0,w,c
  1808  00008C  E103               	bnz	l2357
  1809                           
  1810                           ;time.c: 494:         sysSecond = 0;
  1811  00008E  6A16               	clrf	_sysSecond^0,c
  1812                           
  1813                           ;time.c: 495:         sysMinute++;
  1814  000090  2A15               	incf	_sysMinute^0,f,c
  1815                           
  1816                           ;time.c: 496:     } else {
  1817  000092  0012               	return	
  1818  000094                     l2357:
  1819                           
  1820                           ;time.c: 497:         sysSecond++;
  1821  000094  2A16               	incf	_sysSecond^0,f,c
  1822  000096  0012               	return		;funcret
  1823  000098                     __end_of_updateSysTime:
  1824                           	callstack 0
  1825                           
  1826 ;; *************** function _updateGameTime *****************
  1827 ;; Defined at:
  1828 ;;		line 480 in file "time.c"
  1829 ;; Parameters:    Size  Location     Type
  1830 ;;		None
  1831 ;; Auto vars:     Size  Location     Type
  1832 ;;		None
  1833 ;; Return value:  Size  Location     Type
  1834 ;;                  1    wreg      void 
  1835 ;; Registers used:
  1836 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1837 ;; Tracked objects:
  1838 ;;		On entry : 0/0
  1839 ;;		On exit  : 0/0
  1840 ;;		Unchanged: 0/0
  1841 ;; Data sizes:     COMRAM   BANK0   BANK1
  1842 ;;      Params:         0       0       0
  1843 ;;      Locals:         0       0       0
  1844 ;;      Temps:          0       0       0
  1845 ;;      Totals:         0       0       0
  1846 ;;Total ram usage:        0 bytes
  1847 ;; Hardware stack levels used: 1
  1848 ;; Hardware stack levels required when called: 4
  1849 ;; This function calls:
  1850 ;;		_startSong
  1851 ;; This function is called by:
  1852 ;;		_timeMotor
  1853 ;; This function uses a non-reentrant model
  1854 ;;
  1855                           
  1856                           	psect	text3
  1857  001F92                     __ptext3:
  1858                           	callstack 0
  1859  001F92                     _updateGameTime:
  1860                           	callstack 25
  1861                           
  1862                           ;time.c: 481:     if (second == 0){
  1863                           
  1864                           ;incstack = 0
  1865  001F92  5017               	movf	_second^0,w,c
  1866  001F94  E109               	bnz	l6085
  1867                           
  1868                           ;time.c: 482:         second = 59;
  1869  001F96  0E3B               	movlw	59
  1870  001F98  6E17               	movwf	_second^0,c
  1871                           
  1872                           ;time.c: 483:         minute--;
  1873  001F9A  0677               	decf	_minute^0,f,c
  1874                           
  1875                           ;time.c: 484:         startSong();
  1876  001F9C  EC5B  F000         	call	_startSong	;wreg free
  1877                           
  1878                           ;time.c: 485:         if (minute == 0){
  1879  001FA0  5077               	movf	_minute^0,w,c
  1880  001FA2  B4D8               	btfsc	status,2,c
  1881                           
  1882                           ;time.c: 486:             state = 0;
  1883  001FA4  6A13               	clrf	_state@time$F1845^0,c
  1884  001FA6  0012               	return	
  1885  001FA8                     l6085:
  1886                           
  1887                           ;time.c: 489:         second--;
  1888  001FA8  0617               	decf	_second^0,f,c
  1889  001FAA  0012               	return		;funcret
  1890  001FAC                     __end_of_updateGameTime:
  1891                           	callstack 0
  1892                           
  1893 ;; *************** function _startSong *****************
  1894 ;; Defined at:
  1895 ;;		line 62 in file "Audio.c"
  1896 ;; Parameters:    Size  Location     Type
  1897 ;;		None
  1898 ;; Auto vars:     Size  Location     Type
  1899 ;;		None
  1900 ;; Return value:  Size  Location     Type
  1901 ;;                  1    wreg      void 
  1902 ;; Registers used:
  1903 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1904 ;; Tracked objects:
  1905 ;;		On entry : 0/0
  1906 ;;		On exit  : 0/0
  1907 ;;		Unchanged: 0/0
  1908 ;; Data sizes:     COMRAM   BANK0   BANK1
  1909 ;;      Params:         0       0       0
  1910 ;;      Locals:         0       0       0
  1911 ;;      Temps:          0       0       0
  1912 ;;      Totals:         0       0       0
  1913 ;;Total ram usage:        0 bytes
  1914 ;; Hardware stack levels used: 1
  1915 ;; Hardware stack levels required when called: 3
  1916 ;; This function calls:
  1917 ;;		_TiResetTics
  1918 ;; This function is called by:
  1919 ;;		_updateGameTime
  1920 ;; This function uses a non-reentrant model
  1921 ;;
  1922                           
  1923                           	psect	text4
  1924  0000B6                     __ptext4:
  1925                           	callstack 0
  1926  0000B6                     _startSong:
  1927                           	callstack 25
  1928                           
  1929                           ;Audio.c: 63:     TiResetTics(periodTimer);
  1930                           
  1931                           ;incstack = 0
  1932  0000B6  5038               	movf	_periodTimer^0,w,c
  1933  0000B8  ECAB  F00F         	call	_TiResetTics
  1934                           
  1935                           ;Audio.c: 64:     state = 1;
  1936  0000BC  0E01               	movlw	1
  1937  0000BE  6E39               	movwf	_state@Audio$F967^0,c
  1938  0000C0  0C01               	retlw	1	;funcret
  1939  0000C2                     __end_of_startSong:
  1940                           	callstack 0
  1941                           
  1942 ;; *************** function _sendChar *****************
  1943 ;; Defined at:
  1944 ;;		line 510 in file "time.c"
  1945 ;; Parameters:    Size  Location     Type
  1946 ;;  bt              1    wreg     unsigned char 
  1947 ;; Auto vars:     Size  Location     Type
  1948 ;;  bt              1   19[COMRAM] unsigned char 
  1949 ;; Return value:  Size  Location     Type
  1950 ;;                  1    wreg      void 
  1951 ;; Registers used:
  1952 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1953 ;; Tracked objects:
  1954 ;;		On entry : 0/0
  1955 ;;		On exit  : 0/0
  1956 ;;		Unchanged: 0/0
  1957 ;; Data sizes:     COMRAM   BANK0   BANK1
  1958 ;;      Params:         0       0       0
  1959 ;;      Locals:         1       0       0
  1960 ;;      Temps:          0       0       0
  1961 ;;      Totals:         1       0       0
  1962 ;;Total ram usage:        1 bytes
  1963 ;; Hardware stack levels used: 1
  1964 ;; Hardware stack levels required when called: 6
  1965 ;; This function calls:
  1966 ;;		_LcPutChar
  1967 ;;		_btSendByte
  1968 ;; This function is called by:
  1969 ;;		_timeMotor
  1970 ;; This function uses a non-reentrant model
  1971 ;;
  1972                           
  1973                           	psect	text5
  1974  001FC6                     __ptext5:
  1975                           	callstack 0
  1976  001FC6                     _sendChar:
  1977                           	callstack 23
  1978                           
  1979                           ;incstack = 0
  1980                           ;sendChar@bt stored from wreg
  1981  001FC6  6E6C               	movwf	sendChar@bt^0,c
  1982                           
  1983                           ;time.c: 511:     LcPutChar(val+'0');
  1984  001FC8  5011               	movf	_val@time$F1847^0,w,c
  1985  001FCA  0F30               	addlw	48
  1986  001FCC  ECE6  F00E         	call	_LcPutChar
  1987                           
  1988                           ;time.c: 512:     if (bt){
  1989  001FD0  506C               	movf	sendChar@bt^0,w,c
  1990  001FD2  B4D8               	btfsc	status,2,c
  1991  001FD4  0012               	return	
  1992                           
  1993                           ;time.c: 513:         btSendByte(val+'0');
  1994  001FD6  5011               	movf	_val@time$F1847^0,w,c
  1995  001FD8  0F30               	addlw	48
  1996  001FDA  EF61  F000         	goto	_btSendByte
  1997  001FDE                     __end_of_sendChar:
  1998                           	callstack 0
  1999                           
  2000 ;; *************** function _btSendByte *****************
  2001 ;; Defined at:
  2002 ;;		line 121 in file "SIO.c"
  2003 ;; Parameters:    Size  Location     Type
  2004 ;;  byte            1    wreg     unsigned char 
  2005 ;; Auto vars:     Size  Location     Type
  2006 ;;  byte            1    5[COMRAM] unsigned char 
  2007 ;; Return value:  Size  Location     Type
  2008 ;;                  1    wreg      void 
  2009 ;; Registers used:
  2010 ;;		wreg, status,2
  2011 ;; Tracked objects:
  2012 ;;		On entry : 0/0
  2013 ;;		On exit  : 0/0
  2014 ;;		Unchanged: 0/0
  2015 ;; Data sizes:     COMRAM   BANK0   BANK1
  2016 ;;      Params:         0       0       0
  2017 ;;      Locals:         1       0       0
  2018 ;;      Temps:          0       0       0
  2019 ;;      Totals:         1       0       0
  2020 ;;Total ram usage:        1 bytes
  2021 ;; Hardware stack levels used: 1
  2022 ;; Hardware stack levels required when called: 2
  2023 ;; This function calls:
  2024 ;;		Nothing
  2025 ;; This function is called by:
  2026 ;;		_sendChar
  2027 ;; This function uses a non-reentrant model
  2028 ;;
  2029                           
  2030                           	psect	text6
  2031  0000C2                     __ptext6:
  2032                           	callstack 0
  2033  0000C2                     _btSendByte:
  2034                           	callstack 26
  2035                           
  2036                           ;incstack = 0
  2037                           ;btSendByte@byte stored from wreg
  2038  0000C2  6E5E               	movwf	btSendByte@byte^0,c
  2039                           
  2040                           ;SIO.c: 122:     stateTX = 1;
  2041  0000C4  0E01               	movlw	1
  2042  0000C6  6E24               	movwf	_stateTX^0,c
  2043                           
  2044                           ;SIO.c: 123:     dataTX = byte;
  2045  0000C8  C05E  F022         	movff	btSendByte@byte,_dataTX
  2046  0000CC  0C01               	retlw	1	;funcret
  2047  0000CE                     __end_of_btSendByte:
  2048                           	callstack 0
  2049                           
  2050 ;; *************** function _btAvailable *****************
  2051 ;; Defined at:
  2052 ;;		line 118 in file "SIO.c"
  2053 ;; Parameters:    Size  Location     Type
  2054 ;;		None
  2055 ;; Auto vars:     Size  Location     Type
  2056 ;;		None
  2057 ;; Return value:  Size  Location     Type
  2058 ;;                  1    wreg      unsigned char 
  2059 ;; Registers used:
  2060 ;;		wreg, status,2
  2061 ;; Tracked objects:
  2062 ;;		On entry : 0/0
  2063 ;;		On exit  : 0/0
  2064 ;;		Unchanged: 0/0
  2065 ;; Data sizes:     COMRAM   BANK0   BANK1
  2066 ;;      Params:         0       0       0
  2067 ;;      Locals:         0       0       0
  2068 ;;      Temps:          0       0       0
  2069 ;;      Totals:         0       0       0
  2070 ;;Total ram usage:        0 bytes
  2071 ;; Hardware stack levels used: 1
  2072 ;; Hardware stack levels required when called: 2
  2073 ;; This function calls:
  2074 ;;		Nothing
  2075 ;; This function is called by:
  2076 ;;		_timeMotor
  2077 ;; This function uses a non-reentrant model
  2078 ;;
  2079                           
  2080                           	psect	text7
  2081  00011C                     __ptext7:
  2082                           	callstack 0
  2083  00011C                     _btAvailable:
  2084                           	callstack 27
  2085                           
  2086                           ;SIO.c: 119:     return stateTX == 0;
  2087                           
  2088                           ;incstack = 0
  2089  00011C  5024               	movf	_stateTX^0,w,c
  2090  00011E  B4D8               	btfsc	status,2,c
  2091  000120  0C01               	retlw	1
  2092  000122  0C00               	retlw	0	;funcret
  2093  000124                     __end_of_btAvailable:
  2094                           	callstack 0
  2095                           
  2096 ;; *************** function _menuMotor *****************
  2097 ;; Defined at:
  2098 ;;		line 39 in file "Menu.c"
  2099 ;; Parameters:    Size  Location     Type
  2100 ;;		None
  2101 ;; Auto vars:     Size  Location     Type
  2102 ;;		None
  2103 ;; Return value:  Size  Location     Type
  2104 ;;                  1    wreg      void 
  2105 ;; Registers used:
  2106 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2107 ;; Tracked objects:
  2108 ;;		On entry : 0/0
  2109 ;;		On exit  : 0/0
  2110 ;;		Unchanged: 0/0
  2111 ;; Data sizes:     COMRAM   BANK0   BANK1
  2112 ;;      Params:         0       0       0
  2113 ;;      Locals:         0       0       0
  2114 ;;      Temps:          2       0       0
  2115 ;;      Totals:         2       0       0
  2116 ;;Total ram usage:        2 bytes
  2117 ;; Hardware stack levels used: 1
  2118 ;; Hardware stack levels required when called: 7
  2119 ;; This function calls:
  2120 ;;		_CantaIR
  2121 ;;		_DaFindUser
  2122 ;;		_DaGetIdle
  2123 ;;		_DaGetNumScores
  2124 ;;		_DaGetStatus
  2125 ;;		_DaSaveScore
  2126 ;;		_DaSaveUser
  2127 ;;		_JoDirection
  2128 ;;		_JoMoved
  2129 ;;		_JoSetMode
  2130 ;;		_KeGetCharValue
  2131 ;;		_KeGetGenericValue
  2132 ;;		_KeSetMode
  2133 ;;		_LcCursorOff
  2134 ;;		_LcCursorOn
  2135 ;;		_LcGotoXY
  2136 ;;		_LcPutChar
  2137 ;;		_SiIsAvailable
  2138 ;;		_SiReadByte
  2139 ;;		_SiRecievedByte
  2140 ;;		_SiSendChar
  2141 ;;		_TiGetTics
  2142 ;;		_TiResetTics
  2143 ;;		___lbdiv
  2144 ;;		___lbmod
  2145 ;;		_displayError
  2146 ;;		_displayLogOut
  2147 ;;		_displayResults
  2148 ;;		_displayScoresMarquee
  2149 ;;		_displayString
  2150 ;;		_displaySysTime
  2151 ;;		_displayTimeRemaining
  2152 ;;		_getPresses
  2153 ;;		_incrementPosition
  2154 ;;		_isPressed
  2155 ;;		_mainMenu
  2156 ;;		_modifyTime
  2157 ;;		_resetDisplay
  2158 ;;		_resetPosition
  2159 ;;		_resetTimer
  2160 ;;		_startTimer
  2161 ;;		_stopTimer
  2162 ;;		_timerOver
  2163 ;; This function is called by:
  2164 ;;		_main
  2165 ;; This function uses a non-reentrant model
  2166 ;;
  2167                           
  2168                           	psect	text8
  2169  0002D0                     __ptext8:
  2170                           	callstack 0
  2171  0002D0                     _menuMotor:
  2172                           	callstack 23
  2173                           
  2174                           ;Menu.c: 40:     static char state = 1;;Menu.c: 41:     switch (state){
  2175                           
  2176                           ;incstack = 0
  2177  0002D0  D2D1               	goto	l6811
  2178  0002D2                     l6329:
  2179                           
  2180                           ;Menu.c: 43:             mUser.username[pos] = '\0';
  2181  0002D2  DB49               	call	PL44	;call to abstracted procedure
  2182  0002D4  6ADF               	clrf	indf2,c
  2183                           
  2184                           ;Menu.c: 44:             mUser.password[pos] = '\0';
  2185  0002D6  DB4C               	call	PL48	;call to abstracted procedure
  2186  0002D8  6ADF               	clrf	indf2,c
  2187                           
  2188                           ;Menu.c: 45:             pos++;
  2189  0002DA  2A30               	incf	_pos^0,f,c
  2190                           
  2191                           ;Menu.c: 46:             if (val == 9){
  2192  0002DC  0E09               	movlw	9
  2193  0002DE  1831               	xorwf	_val^0,w,c
  2194  0002E0  E105               	bnz	l6341
  2195                           
  2196                           ;Menu.c: 47:                 state = 1;
  2197  0002E2  0E01               	movlw	1
  2198  0002E4  6E79               	movwf	menuMotor@state^0,c
  2199                           
  2200                           ;Menu.c: 48:                 resetDisplay();
  2201  0002E6  EC6C  F000         	call	_resetDisplay	;wreg free
  2202                           
  2203                           ;Menu.c: 49:                 pos = 0;
  2204  0002EA  6A30               	clrf	_pos^0,c
  2205  0002EC                     l6341:
  2206                           
  2207                           ;Menu.c: 52:             displayString(&LOGINMENU[LCDrow]);
  2208  0002EC  5034               	movf	_LCDrow^0,w,c
  2209  0002EE  0D0B               	mullw	11
  2210  0002F0  50F3               	movf	243,w,c
  2211  0002F2  0FA8               	addlw	low _LOGINMENU
  2212  0002F4  6E6C               	movwf	displayString@string^0,c
  2213  0002F6  ECD1  F00E         	call	_displayString	;wreg free
  2214                           
  2215                           ;Menu.c: 53:             if (LCDrow == 2){
  2216  0002FA  0E02               	movlw	2
  2217  0002FC  1834               	xorwf	_LCDrow^0,w,c
  2218  0002FE  A4D8               	btfss	status,2,c
  2219  000300  0012               	return	
  2220                           
  2221                           ;Menu.c: 54:                 LcCursorOff();
  2222  000302  EC7B  F000         	call	_LcCursorOff	;wreg free
  2223                           
  2224                           ;Menu.c: 55:                 KeSetMode(0);
  2225  000306  0E00               	movlw	0
  2226  000308  EC35  F00F         	call	_KeSetMode
  2227                           
  2228                           ;Menu.c: 56:                 state = 2;
  2229  00030C  0E02               	movlw	2
  2230  00030E  6E79               	movwf	menuMotor@state^0,c
  2231                           
  2232                           ;Menu.c: 58:             break;
  2233                           
  2234                           ;Menu.c: 57:             }
  2235  000310  0C02               	retlw	2
  2236  000312                     l6349:
  2237                           
  2238                           ;Menu.c: 60:             if (isPressed()){
  2239  000312  ECEF  F00F         	call	_isPressed	;wreg free
  2240  000316  0900               	iorlw	0
  2241  000318  B4D8               	btfsc	status,2,c
  2242  00031A  0012               	return	
  2243                           
  2244                           ;Menu.c: 61:                 val = KeGetGenericValue() - '0';
  2245  00031C  EC8B  F00F         	call	_KeGetGenericValue	;wreg free
  2246  000320  0FD0               	addlw	208
  2247  000322  6E31               	movwf	_val^0,c
  2248                           
  2249                           ;Menu.c: 62:                 if (val == 1||val == 2){
  2250  000324  0431               	decf	_val^0,w,c
  2251  000326  E004               	bz	u5890
  2252  000328  0E02               	movlw	2
  2253  00032A  1831               	xorwf	_val^0,w,c
  2254  00032C  A4D8               	btfss	status,2,c
  2255  00032E  0012               	return	
  2256  000330                     u5890:
  2257                           
  2258                           ;Menu.c: 63:                     resetDisplay();
  2259  000330  EC6C  F000         	call	_resetDisplay	;wreg free
  2260                           
  2261                           ;Menu.c: 64:                     KeSetMode(1);
  2262  000334  0E01               	movlw	1
  2263  000336  EC35  F00F         	call	_KeSetMode
  2264                           
  2265                           ;Menu.c: 65:                     state = 3;
  2266  00033A  0E03               	movlw	3
  2267  00033C  6E79               	movwf	menuMotor@state^0,c
  2268  00033E  0C03               	retlw	3
  2269  000340                     l6361:
  2270                           
  2271                           ;Menu.c: 71:             displayString(&LOGREGSCREEN[LCDrow]);
  2272  000340  5034               	movf	_LCDrow^0,w,c
  2273  000342  0D06               	mullw	6
  2274  000344  50F3               	movf	243,w,c
  2275  000346  0FE9               	addlw	low _LOGREGSCREEN
  2276  000348  6E6C               	movwf	displayString@string^0,c
  2277  00034A  ECD1  F00E         	call	_displayString	;wreg free
  2278                           
  2279                           ;Menu.c: 72:             if (LCDrow == 2){
  2280  00034E  0E02               	movlw	2
  2281  000350  1834               	xorwf	_LCDrow^0,w,c
  2282  000352  A4D8               	btfss	status,2,c
  2283  000354  0012               	return	
  2284                           
  2285                           ;Menu.c: 73:                 LCDrow = 0;
  2286  000356  6A34               	clrf	_LCDrow^0,c
  2287                           
  2288                           ;Menu.c: 74:                 LCDcol = 5;
  2289                           
  2290                           ;Menu.c: 75:                 LcGotoXY(LCDcol,LCDrow);
  2291  000358  DB10               	call	PL62	;call to abstracted procedure
  2292  00035A  ECA4  F00E         	call	_LcGotoXY
  2293                           
  2294                           ;Menu.c: 76:                 LcCursorOn();
  2295  00035E  EC76  F000         	call	_LcCursorOn	;wreg free
  2296                           
  2297                           ;Menu.c: 77:                 state = 4;
  2298  000362  0E04               	movlw	4
  2299  000364  6E79               	movwf	menuMotor@state^0,c
  2300                           
  2301                           ;Menu.c: 78:                 pos = 0;
  2302  000366  6A30               	clrf	_pos^0,c
  2303  000368  0012               	return	
  2304  00036A                     l6375:
  2305                           
  2306                           ;Menu.c: 82:             if (LCDcol >= 12 && TiGetTics(timer) >= 1200){
  2307  00036A  0E0B               	movlw	11
  2308  00036C  6433               	cpfsgt	_LCDcol^0,c
  2309  00036E  D00A               	goto	l6381
  2310  000370  5035               	movf	_timer^0,w,c
  2311  000372  EC22  F00F         	call	_TiGetTics
  2312  000376  BE5F               	btfsc	(?_TiGetTics+1)^0,7,c
  2313  000378  D005               	goto	l6381
  2314  00037A  DAEB               	call	PL26	;call to abstracted procedure
  2315  00037C  E303               	bnc	l6381
  2316  00037E                     u5920:
  2317                           
  2318                           ;Menu.c: 83:                 state = 5;
  2319  00037E  0E05               	movlw	5
  2320  000380  6E79               	movwf	menuMotor@state^0,c
  2321                           
  2322                           ;Menu.c: 84:             }else if (isPressed()){
  2323  000382  0C05               	retlw	5
  2324  000384                     l6381:
  2325  000384  ECEF  F00F         	call	_isPressed	;wreg free
  2326  000388  0900               	iorlw	0
  2327  00038A  B4D8               	btfsc	status,2,c
  2328  00038C  0012               	return	
  2329                           
  2330                           ;Menu.c: 85:                 TiResetTics(timer);
  2331  00038E  5035               	movf	_timer^0,w,c
  2332  000390  ECAB  F00F         	call	_TiResetTics
  2333                           
  2334                           ;Menu.c: 86:                 if (getPresses() == 2){
  2335  000394  ECBE  F000         	call	_getPresses	;wreg free
  2336  000398  0A02               	xorlw	2
  2337  00039A  E104               	bnz	l6391
  2338                           
  2339                           ;Menu.c: 87:                     LcGotoXY(LCDcol,LCDrow);
  2340  00039C  DAF4               	call	PL66	;call to abstracted procedure
  2341  00039E  ECA4  F00E         	call	_LcGotoXY
  2342                           
  2343                           ;Menu.c: 88:                     LCDcol--;
  2344  0003A2  0633               	decf	_LCDcol^0,f,c
  2345  0003A4                     l6391:
  2346                           
  2347                           ;Menu.c: 90:                 if (KeGetGenericValue() != '#'){
  2348  0003A4  EC8B  F00F         	call	_KeGetGenericValue	;wreg free
  2349  0003A8  0A23               	xorlw	35
  2350  0003AA  E0E9               	bz	u5920
  2351                           
  2352                           ;Menu.c: 91:                     mUser.username[pos] = KeGetCharValue();
  2353  0003AC  DADC               	call	PL44	;call to abstracted procedure
  2354  0003AE  EC9E  F000         	call	_KeGetCharValue	;wreg free
  2355  0003B2  6EDF               	movwf	indf2,c
  2356                           
  2357                           ;Menu.c: 92:                     LcPutChar(mUser.username[pos]);
  2358  0003B4  5030               	movf	_pos^0,w,c
  2359  0003B6  DAD2               	call	PL34	;call to abstracted procedure
  2360  0003B8  ECE6  F00E         	call	_LcPutChar
  2361  0003BC                     l6397:
  2362                           
  2363                           ;Menu.c: 93:                     LCDcol++;
  2364  0003BC  2A33               	incf	_LCDcol^0,f,c
  2365                           
  2366                           ;Menu.c: 94:                     pos++;
  2367  0003BE  2A30               	incf	_pos^0,f,c
  2368                           
  2369                           ;Menu.c: 97:                 } else {
  2370  0003C0  0012               	return	
  2371  0003C2                     l6403:
  2372                           
  2373                           ;Menu.c: 105:             mUser.username[pos] = '\0';
  2374  0003C2  DAD1               	call	PL44	;call to abstracted procedure
  2375  0003C4  0E00               	movlw	0
  2376  0003C6  6EDF               	movwf	indf2,c
  2377                           
  2378                           ;Menu.c: 106:             LCDrow = 1;
  2379  0003C8  0E01               	movlw	1
  2380  0003CA  6E34               	movwf	_LCDrow^0,c
  2381                           
  2382                           ;Menu.c: 107:             LCDcol = 5;
  2383                           
  2384                           ;Menu.c: 108:             LcGotoXY(LCDcol,LCDrow);
  2385  0003CC  DAD6               	call	PL62	;call to abstracted procedure
  2386  0003CE  ECA4  F00E         	call	_LcGotoXY
  2387                           
  2388                           ;Menu.c: 109:             state = 6;
  2389  0003D2  0E06               	movlw	6
  2390  0003D4  D7C7               	goto	L1
  2391  0003D6                     l6415:
  2392                           
  2393                           ;Menu.c: 113:             if (isPressed()){
  2394  0003D6  ECEF  F00F         	call	_isPressed	;wreg free
  2395  0003DA  0900               	iorlw	0
  2396  0003DC  B4D8               	btfsc	status,2,c
  2397  0003DE  0012               	return	
  2398                           
  2399                           ;Menu.c: 114:                 if (getPresses() == 2){
  2400  0003E0  ECBE  F000         	call	_getPresses	;wreg free
  2401  0003E4  0A02               	xorlw	2
  2402  0003E6  E104               	bnz	l6423
  2403                           
  2404                           ;Menu.c: 115:                     LcGotoXY(LCDcol,LCDrow);
  2405  0003E8  DACE               	call	PL66	;call to abstracted procedure
  2406  0003EA  ECA4  F00E         	call	_LcGotoXY
  2407                           
  2408                           ;Menu.c: 116:                     LCDcol--;
  2409  0003EE  0633               	decf	_LCDcol^0,f,c
  2410  0003F0                     l6423:
  2411                           
  2412                           ;Menu.c: 119:                 if (KeGetGenericValue() != '#'){
  2413  0003F0  EC8B  F00F         	call	_KeGetGenericValue	;wreg free
  2414  0003F4  0A23               	xorlw	35
  2415  0003F6  E00B               	bz	l6433
  2416                           
  2417                           ;Menu.c: 120:                     mUser.password[pos] = KeGetCharValue();
  2418  0003F8  DABB               	call	PL48	;call to abstracted procedure
  2419  0003FA  EC9E  F000         	call	_KeGetCharValue	;wreg free
  2420  0003FE  6EDF               	movwf	indf2,c
  2421                           
  2422                           ;Menu.c: 121:                     LcPutChar(mUser.password[pos]);
  2423  000400  5030               	movf	_pos^0,w,c
  2424  000402  0F50               	addlw	low (_mUser+9)
  2425  000404  ECDE  F00E         	call	PL36	;call to abstracted procedure
  2426  000408  ECE6  F00E         	call	_LcPutChar
  2427  00040C  D7D7               	goto	l6397
  2428  00040E                     l6433:
  2429                           
  2430                           ;Menu.c: 125:                     mUser.password[pos] = '\0';
  2431  00040E  DAB0               	call	PL48	;call to abstracted procedure
  2432  000410  6ADF               	clrf	indf2,c
  2433                           
  2434                           ;Menu.c: 126:                     pos = 0;
  2435  000412  6A30               	clrf	_pos^0,c
  2436                           
  2437                           ;Menu.c: 127:                     state = 7;
  2438  000414  0E07               	movlw	7
  2439  000416  6E79               	movwf	menuMotor@state^0,c
  2440  000418  0C07               	retlw	7
  2441  00041A                     l6439:
  2442                           
  2443                           ;Menu.c: 133:             if (val == 1){
  2444  00041A  0431               	decf	_val^0,w,c
  2445  00041C  E105               	bnz	l6443
  2446                           
  2447                           ;Menu.c: 134:                 DaFindUser(&mUser);
  2448  00041E  0E47               	movlw	low _mUser
  2449  000420  6E6B               	movwf	DaFindUser@logUser^0,c
  2450  000422  ECD6  F00F         	call	_DaFindUser	;wreg free
  2451                           
  2452                           ;Menu.c: 136:             } else {
  2453  000426  D004               	goto	l6445
  2454  000428                     l6443:
  2455                           
  2456                           ;Menu.c: 137:                 DaSaveUser(&mUser);
  2457  000428  0E47               	movlw	low _mUser
  2458  00042A  6E5E               	movwf	DaSaveUser@regUser^0,c
  2459  00042C  EC31  F000         	call	_DaSaveUser	;wreg free
  2460  000430                     l6445:
  2461                           
  2462                           ;Menu.c: 139:             state = 8;
  2463  000430  0E08               	movlw	8
  2464  000432  6E79               	movwf	menuMotor@state^0,c
  2465                           
  2466                           ;Menu.c: 140:             break;
  2467  000434  0C08               	retlw	8
  2468  000436                     l6447:
  2469                           
  2470                           ;Menu.c: 142:             if (DaGetIdle()){
  2471  000436  ECA6  F000         	call	_DaGetIdle	;wreg free
  2472  00043A  0900               	iorlw	0
  2473  00043C  B4D8               	btfsc	status,2,c
  2474  00043E  0012               	return	
  2475                           
  2476                           ;Menu.c: 143:                 if (val == 1){
  2477  000440  0431               	decf	_val^0,w,c
  2478  000442  E115               	bnz	l6463
  2479                           
  2480                           ;Menu.c: 144:                     resetDisplay();
  2481  000444  EC6C  F000         	call	_resetDisplay	;wreg free
  2482                           
  2483                           ;Menu.c: 145:                     KeSetMode(0);
  2484  000448  0E00               	movlw	0
  2485  00044A  EC35  F00F         	call	_KeSetMode
  2486                           
  2487                           ;Menu.c: 146:                     if (DaGetStatus() == 0){
  2488  00044E  ECC6  F000         	call	_DaGetStatus	;wreg free
  2489  000452  0900               	iorlw	0
  2490  000454  E103               	bnz	l6459
  2491                           
  2492                           ;Menu.c: 148:                         state = 9;
  2493                           
  2494                           ;Menu.c: 149:                         val =0;
  2495  000456  DAA4               	call	PL98	;call to abstracted procedure
  2496                           
  2497                           ;Menu.c: 150:                     } else if (DaGetStatus() == 1){
  2498  000458  EF6C  F000         	goto	_resetDisplay
  2499  00045C                     l6459:
  2500  00045C  ECC6  F000         	call	_DaGetStatus	;wreg free
  2501  000460  06E8               	decf	wreg,f,c
  2502  000462  E002 EF6C  F000    	bnz	_resetDisplay
  2503  000468                     u6030:
  2504                           
  2505                           ;Menu.c: 151:                         state = 0;
  2506  000468  6A79               	clrf	menuMotor@state^0,c
  2507  00046A  EF6C  F000         	goto	_resetDisplay
  2508  00046E                     l6463:
  2509                           
  2510                           ;Menu.c: 155:                     if (DaGetStatus() == 3){
  2511  00046E  ECC6  F000         	call	_DaGetStatus	;wreg free
  2512  000472  0A03               	xorlw	3
  2513  000474  E109               	bnz	l6471
  2514                           
  2515                           ;Menu.c: 156:                         KeSetMode(1);
  2516  000476  0E01               	movlw	1
  2517  000478  EC35  F00F         	call	_KeSetMode
  2518                           
  2519                           ;Menu.c: 157:                         state = 3;
  2520  00047C  0E03               	movlw	3
  2521  00047E  6E79               	movwf	menuMotor@state^0,c
  2522                           
  2523                           ;Menu.c: 158:                         val = 1;
  2524  000480  0E01               	movlw	1
  2525  000482  6E31               	movwf	_val^0,c
  2526                           
  2527                           ;Menu.c: 159:                     } else if (DaGetStatus() == 4){
  2528  000484  EF6C  F000         	goto	_resetDisplay
  2529  000488                     l6471:
  2530  000488  ECC6  F000         	call	_DaGetStatus	;wreg free
  2531  00048C  0A04               	xorlw	4
  2532  00048E  E002 EF6C  F000    	bnz	_resetDisplay
  2533                           
  2534                           ;Menu.c: 160:                         KeSetMode(0);
  2535  000494  0E00               	movlw	0
  2536  000496  EC35  F00F         	call	_KeSetMode
  2537  00049A  D7E6               	goto	u6030
  2538  00049C                     l6477:
  2539                           
  2540                           ;Menu.c: 169:             mainMenu();
  2541  00049C  EC66  F00B         	call	_mainMenu	;wreg free
  2542                           
  2543                           ;Menu.c: 170:             if (LCDrow == 2 || LCDrow+val >= 5){
  2544  0004A0  0E02               	movlw	2
  2545  0004A2  1834               	xorwf	_LCDrow^0,w,c
  2546  0004A4  E00F               	bz	u6070
  2547  0004A6  5031               	movf	_val^0,w,c
  2548  0004A8  C034  F06E         	movff	_LCDrow,??_menuMotor
  2549  0004AC  6A6F               	clrf	(??_menuMotor+1)^0,c
  2550  0004AE  266E               	addwf	??_menuMotor^0,f,c
  2551  0004B0  0E00               	movlw	0
  2552  0004B2  226F               	addwfc	(??_menuMotor+1)^0,f,c
  2553  0004B4  BE6F               	btfsc	(??_menuMotor+1)^0,7,c
  2554  0004B6  0C00               	retlw	0
  2555  0004B8  506F               	movf	(??_menuMotor+1)^0,w,c
  2556  0004BA  E104               	bnz	u6070
  2557  0004BC  0E05               	movlw	5
  2558  0004BE  5C6E               	subwf	??_menuMotor^0,w,c
  2559  0004C0  A0D8               	btfss	status,0,c
  2560  0004C2  0012               	return	
  2561  0004C4                     u6070:
  2562                           
  2563                           ;Menu.c: 171:                 LcCursorOff();
  2564  0004C4  EC7B  F000         	call	_LcCursorOff	;wreg free
  2565                           
  2566                           ;Menu.c: 172:                 state = 10;
  2567  0004C8  0E0A               	movlw	10
  2568  0004CA  6E79               	movwf	menuMotor@state^0,c
  2569  0004CC  0C0A               	retlw	10
  2570  0004CE                     l6487:
  2571                           
  2572                           ;Menu.c: 176:             if (!JoMoved()){
  2573  0004CE  ECC2  F000         	call	_JoMoved	;wreg free
  2574  0004D2  0900               	iorlw	0
  2575  0004D4  A4D8               	btfss	status,2,c
  2576  0004D6  0012               	return	
  2577                           
  2578                           ;Menu.c: 177:                 state = 11;
  2579  0004D8  0E0B               	movlw	11
  2580  0004DA  D0AC               	goto	L4
  2581  0004DC                     l6491:
  2582                           
  2583                           ;Menu.c: 178:                 TiResetTics(timer);
  2584  0004DC  5035               	movf	_timer^0,w,c
  2585  0004DE  EFAB  F00F         	goto	_TiResetTics
  2586  0004E2                     l6493:
  2587                           
  2588                           ;Menu.c: 182:             if (val < 4 && val > 0){
  2589  0004E2  0E04               	movlw	4
  2590  0004E4  6031               	cpfslt	_val^0,c
  2591  0004E6  D015               	goto	l538
  2592  0004E8  5031               	movf	_val^0,w,c
  2593  0004EA  E013               	bz	l538
  2594                           
  2595                           ;Menu.c: 183:                 if (TiGetTics(timer) >= 1200){
  2596  0004EC  5035               	movf	_timer^0,w,c
  2597  0004EE  EC22  F00F         	call	_TiGetTics
  2598  0004F2  BE5F               	btfsc	(?_TiGetTics+1)^0,7,c
  2599  0004F4  D00F               	goto	l6507
  2600  0004F6  DA2D               	call	PL26	;call to abstracted procedure
  2601  0004F8  E30D               	bnc	l6507
  2602                           
  2603                           ;Menu.c: 184:                     LCDcolm++;
  2604  0004FA  2A32               	incf	_LCDcolm^0,f,c
  2605                           
  2606                           ;Menu.c: 185:                     LCDcolm = LCDcolm % MAINMENUSIZE[2];
  2607  0004FC  C074  F05E         	movff	_MAINMENUSIZE+2,___lbmod@divisor
  2608  000500  5032               	movf	_LCDcolm^0,w,c
  2609  000502  EC0F  F00F         	call	___lbmod
  2610  000506  6E32               	movwf	_LCDcolm^0,c
  2611                           
  2612                           ;Menu.c: 186:                     state = 9;
  2613  000508  0E09               	movlw	9
  2614  00050A  6E79               	movwf	menuMotor@state^0,c
  2615                           
  2616                           ;Menu.c: 187:                     resetDisplay();
  2617  00050C  EC6C  F000         	call	_resetDisplay	;wreg free
  2618  000510  D001               	goto	l6507
  2619  000512                     l538:
  2620                           
  2621                           ;Menu.c: 190:                 LCDcolm = 0;
  2622  000512  6A32               	clrf	_LCDcolm^0,c
  2623  000514                     l6507:
  2624                           
  2625                           ;Menu.c: 192:             if (JoMoved()){
  2626  000514  ECC2  F000         	call	_JoMoved	;wreg free
  2627  000518  0900               	iorlw	0
  2628  00051A  E012               	bz	l6525
  2629                           
  2630                           ;Menu.c: 193:                 if (JoDirection() == 'S' && val < 4){
  2631  00051C  ECC4  F000         	call	_JoDirection	;wreg free
  2632  000520  0A53               	xorlw	83
  2633  000522  E105               	bnz	l6515
  2634  000524  0E04               	movlw	4
  2635  000526  6031               	cpfslt	_val^0,c
  2636  000528  D002               	goto	l6515
  2637                           
  2638                           ;Menu.c: 194:                     val++;
  2639  00052A  2A31               	incf	_val^0,f,c
  2640                           
  2641                           ;Menu.c: 195:                 } else if(JoDirection() == 'W' && val > 0){
  2642  00052C  D007               	goto	l6521
  2643  00052E                     l6515:
  2644  00052E  ECC4  F000         	call	_JoDirection	;wreg free
  2645  000532  0A57               	xorlw	87
  2646  000534  E103               	bnz	l6521
  2647  000536  5031               	movf	_val^0,w,c
  2648  000538  E001               	bz	l6521
  2649                           
  2650                           ;Menu.c: 196:                     val--;
  2651  00053A  0631               	decf	_val^0,f,c
  2652  00053C                     l6521:
  2653                           
  2654                           ;Menu.c: 198:                 state = 9;
  2655  00053C  0E09               	movlw	9
  2656  00053E  D0BD               	goto	L3
  2657  000540                     l6525:
  2658  000540  ECEF  F00F         	call	_isPressed	;wreg free
  2659  000544  0900               	iorlw	0
  2660  000546  B4D8               	btfsc	status,2,c
  2661  000548  0012               	return	
  2662  00054A  EC8B  F00F         	call	_KeGetGenericValue	;wreg free
  2663  00054E  0A23               	xorlw	35
  2664  000550  A4D8               	btfss	status,2,c
  2665  000552  0012               	return	
  2666                           
  2667                           ;Menu.c: 201:                 resetDisplay();
  2668  000554  EC6C  F000         	call	_resetDisplay	;wreg free
  2669                           
  2670                           ;Menu.c: 202:                 state = (val+1)*20;
  2671  000558  2831               	incf	_val^0,w,c
  2672  00055A  0D14               	mullw	20
  2673  00055C  CFF3 F079          	movff	prodl,menuMotor@state
  2674                           
  2675                           ;Menu.c: 203:                 resetPosition();
  2676  000560  ECBA  F000         	call	_resetPosition	;wreg free
  2677                           
  2678                           ;Menu.c: 204:                 if (val == 0){
  2679  000564  5031               	movf	_val^0,w,c
  2680  000566  E102               	bnz	l6539
  2681                           
  2682                           ;Menu.c: 205:                     state = 12;
  2683  000568  0E0C               	movlw	12
  2684  00056A  6E79               	movwf	menuMotor@state^0,c
  2685  00056C                     l6539:
  2686                           
  2687                           ;Menu.c: 207:                 LCDcolm = 0;
  2688  00056C  6A32               	clrf	_LCDcolm^0,c
  2689  00056E  0012               	return	
  2690  000570                     l6541:
  2691                           
  2692                           ;Menu.c: 217:             if (SiIsAvailable()){
  2693  000570  ECB5  F000         	call	_SiIsAvailable	;wreg free
  2694  000574  0900               	iorlw	0
  2695  000576  B4D8               	btfsc	status,2,c
  2696  000578  0012               	return	
  2697                           
  2698                           ;Menu.c: 218:                 SiSendChar(mUser.username[val]);
  2699  00057A  5031               	movf	_val^0,w,c
  2700  00057C  D9EF               	call	PL34	;call to abstracted procedure
  2701  00057E  ECAE  F000         	call	_SiSendChar
  2702                           
  2703                           ;Menu.c: 219:                 if (mUser.username[val] == '\0'){
  2704  000582  5031               	movf	_val^0,w,c
  2705  000584  D9EB               	call	PL34	;call to abstracted procedure
  2706  000586  E103               	bnz	l6549
  2707                           
  2708                           ;Menu.c: 220:                     state = 13;
  2709  000588  0E0D               	movlw	13
  2710  00058A  6E79               	movwf	menuMotor@state^0,c
  2711                           
  2712                           ;Menu.c: 221:                 } else {
  2713  00058C  0C0D               	retlw	13
  2714  00058E                     l6549:
  2715                           
  2716                           ;Menu.c: 222:                     val++;
  2717  00058E  2A31               	incf	_val^0,f,c
  2718  000590  0012               	return	
  2719  000592                     l6551:
  2720                           
  2721                           ;Menu.c: 227:             if (SiRecievedByte()){
  2722  000592  ECB2  F000         	call	_SiRecievedByte	;wreg free
  2723  000596  0900               	iorlw	0
  2724  000598  B4D8               	btfsc	status,2,c
  2725  00059A  0012               	return	
  2726                           
  2727                           ;Menu.c: 228:                 val = SiReadByte();
  2728  00059C  ECC0  F000         	call	_SiReadByte	;wreg free
  2729  0005A0  6E31               	movwf	_val^0,c
  2730                           
  2731                           ;Menu.c: 229:                 if (val == 'K'){
  2732  0005A2  0E4B               	movlw	75
  2733  0005A4  1831               	xorwf	_val^0,w,c
  2734  0005A6  A4D8               	btfss	status,2,c
  2735  0005A8  0012               	return	
  2736                           
  2737                           ;Menu.c: 230:                     state = 14;
  2738  0005AA  0E0E               	movlw	14
  2739  0005AC  6E79               	movwf	menuMotor@state^0,c
  2740                           
  2741                           ;Menu.c: 231:                     JoSetMode(1);
  2742  0005AE  0E01               	movlw	1
  2743  0005B0  ECA2  F000         	call	_JoSetMode
  2744  0005B4  EF6C  F000         	goto	_resetDisplay
  2745  0005B8                     l6563:
  2746                           
  2747                           ;Menu.c: 238:             displayString(&TIME);
  2748  0005B8  0EBE               	movlw	low _TIME
  2749  0005BA  6E6C               	movwf	displayString@string^0,c
  2750  0005BC  ECD1  F00E         	call	_displayString	;wreg free
  2751                           
  2752                           ;Menu.c: 239:             if (LCDrow == 1){
  2753  0005C0  0434               	decf	_LCDrow^0,w,c
  2754  0005C2  A4D8               	btfss	status,2,c
  2755  0005C4  0012               	return	
  2756                           
  2757                           ;Menu.c: 240:                 LcCursorOff();
  2758  0005C6  EC7B  F000         	call	_LcCursorOff	;wreg free
  2759                           
  2760                           ;Menu.c: 241:                 resetTimer();
  2761  0005CA  EC67  F000         	call	_resetTimer	;wreg free
  2762                           
  2763                           ;Menu.c: 242:                 startTimer();
  2764  0005CE  ECFB  F00F         	call	_startTimer	;wreg free
  2765  0005D2                     l6573:
  2766                           
  2767                           ;Menu.c: 243:                 state = 15;
  2768  0005D2  0E0F               	movlw	15
  2769  0005D4  6E79               	movwf	menuMotor@state^0,c
  2770  0005D6  0C0F               	retlw	15
  2771  0005D8                     l6575:
  2772                           
  2773                           ;Menu.c: 247:             if (timerOver()){
  2774  0005D8  EC92  F000         	call	_timerOver	;wreg free
  2775  0005DC  0900               	iorlw	0
  2776  0005DE  E006               	bz	l6581
  2777                           
  2778                           ;Menu.c: 248:                 JoSetMode(0);
  2779  0005E0  0E00               	movlw	0
  2780  0005E2  ECA2  F000         	call	_JoSetMode
  2781                           
  2782                           ;Menu.c: 249:                 state = 17;
  2783  0005E6  0E11               	movlw	17
  2784  0005E8  6E79               	movwf	menuMotor@state^0,c
  2785                           
  2786                           ;Menu.c: 250:             } else if (isPressed()){
  2787  0005EA  0C11               	retlw	17
  2788  0005EC                     l6581:
  2789  0005EC  ECEF  F00F         	call	_isPressed	;wreg free
  2790  0005F0  0900               	iorlw	0
  2791  0005F2  E017               	bz	l6599
  2792                           
  2793                           ;Menu.c: 251:                 val = KeGetGenericValue();
  2794  0005F4  EC8B  F00F         	call	_KeGetGenericValue	;wreg free
  2795  0005F8  6E31               	movwf	_val^0,c
  2796                           
  2797                           ;Menu.c: 252:                 if (val == '*' || val == '#'){
  2798  0005FA  0E2A               	movlw	42
  2799  0005FC  1831               	xorwf	_val^0,w,c
  2800  0005FE  E003               	bz	u6280
  2801  000600  0E23               	movlw	35
  2802  000602  1831               	xorwf	_val^0,w,c
  2803  000604  E10B               	bnz	l6597
  2804  000606                     u6280:
  2805                           
  2806                           ;Menu.c: 253:                     if (val == '*'){
  2807  000606  0E2A               	movlw	42
  2808  000608  1831               	xorwf	_val^0,w,c
  2809  00060A  A4D8               	btfss	status,2,c
  2810  00060C  0012               	return	
  2811                           
  2812                           ;Menu.c: 254:                         JoSetMode(0);
  2813  00060E  0E00               	movlw	0
  2814  000610  ECA2  F000         	call	_JoSetMode
  2815                           
  2816                           ;Menu.c: 255:                         state = 17;
  2817  000614  0E11               	movlw	17
  2818  000616  6E79               	movwf	menuMotor@state^0,c
  2819                           
  2820                           ;Menu.c: 256:                         stopTimer();
  2821  000618  EFB8  F000         	goto	_stopTimer	;wreg free
  2822  00061C                     l6597:
  2823                           
  2824                           ;Menu.c: 259:                     state = 16;
  2825  00061C  0E10               	movlw	16
  2826  00061E  6E79               	movwf	menuMotor@state^0,c
  2827  000620  0C10               	retlw	16
  2828  000622                     l6599:
  2829  000622  ECB2  F000         	call	_SiRecievedByte	;wreg free
  2830  000626  0900               	iorlw	0
  2831  000628  B4D8               	btfsc	status,2,c
  2832  00062A  0012               	return	
  2833                           
  2834                           ;Menu.c: 263:                 mScore = SiReadByte();
  2835  00062C  ECC0  F000         	call	_SiReadByte	;wreg free
  2836  000630  D01E               	goto	L5
  2837  000632                     l6603:
  2838                           
  2839                           ;Menu.c: 264:                 state = 20;
  2840  000632  0E14               	movlw	20
  2841  000634                     L4:
  2842  000634  6E79               	movwf	menuMotor@state^0,c
  2843  000636  D752               	goto	l6491
  2844  000638                     l6607:
  2845                           
  2846                           ;Menu.c: 269:             if (SiIsAvailable()){
  2847  000638  ECB5  F000         	call	_SiIsAvailable	;wreg free
  2848  00063C  0900               	iorlw	0
  2849  00063E  B4D8               	btfsc	status,2,c
  2850  000640  0012               	return	
  2851                           
  2852                           ;Menu.c: 270:                 SiSendChar(val);
  2853  000642  5031               	movf	_val^0,w,c
  2854  000644  ECAE  F000         	call	_SiSendChar
  2855  000648  D7C4               	goto	l6573
  2856  00064A                     l6613:
  2857                           
  2858                           ;Menu.c: 275:             if (SiIsAvailable()){
  2859  00064A  ECB5  F000         	call	_SiIsAvailable	;wreg free
  2860  00064E  0900               	iorlw	0
  2861  000650  B4D8               	btfsc	status,2,c
  2862  000652  0012               	return	
  2863                           
  2864                           ;Menu.c: 276:                 SiSendChar('F');
  2865  000654  0E46               	movlw	70
  2866  000656  ECAE  F000         	call	_SiSendChar
  2867                           
  2868                           ;Menu.c: 277:                 state = 18;
  2869  00065A  0E12               	movlw	18
  2870  00065C  6E79               	movwf	menuMotor@state^0,c
  2871  00065E  0C12               	retlw	18
  2872  000660                     l6619:
  2873                           
  2874                           ;Menu.c: 281:             if (SiRecievedByte()){
  2875  000660  ECB2  F000         	call	_SiRecievedByte	;wreg free
  2876  000664  0900               	iorlw	0
  2877  000666  B4D8               	btfsc	status,2,c
  2878  000668  0012               	return	
  2879                           
  2880                           ;Menu.c: 282:                 mScore = SiReadByte();
  2881  00066A  ECC0  F000         	call	_SiReadByte	;wreg free
  2882  00066E                     L5:
  2883  00066E  6E2F               	movwf	_mScore^0,c
  2884  000670  D7E0               	goto	l6603
  2885  000672                     l6627:
  2886                           
  2887                           ;Menu.c: 288:             displayError();
  2888  000672  EC3E  F00E         	call	_displayError	;wreg free
  2889                           
  2890                           ;Menu.c: 289:             if(LCDrow == 2){
  2891  000676  0E02               	movlw	2
  2892  000678  1834               	xorwf	_LCDrow^0,w,c
  2893  00067A  A4D8               	btfss	status,2,c
  2894  00067C  0012               	return	
  2895  00067E  D7D9               	goto	l6603
  2896  000680                     l6635:
  2897                           
  2898                           ;Menu.c: 295:             if (TiGetTics(timer) >= 3600){
  2899  000680  5035               	movf	_timer^0,w,c
  2900  000682  EC22  F00F         	call	_TiGetTics
  2901  000686  BE5F               	btfsc	(?_TiGetTics+1)^0,7,c
  2902  000688  D004               	goto	l6641
  2903  00068A  D981               	call	PL72	;call to abstracted procedure
  2904  00068C  E302               	bnc	l6641
  2905                           
  2906                           ;Menu.c: 296:                 state = 22;
  2907  00068E  0E16               	movlw	22
  2908  000690  D014               	goto	L3
  2909  000692                     l6641:
  2910  000692  ECB2  F000         	call	_SiRecievedByte	;wreg free
  2911  000696  0900               	iorlw	0
  2912  000698  B4D8               	btfsc	status,2,c
  2913  00069A  0012               	return	
  2914                           
  2915                           ;Menu.c: 299:                 val = SiReadByte();
  2916  00069C  ECC0  F000         	call	_SiReadByte	;wreg free
  2917  0006A0  6E31               	movwf	_val^0,c
  2918                           
  2919                           ;Menu.c: 300:                 state = 21;
  2920  0006A2  0E15               	movlw	21
  2921  0006A4  6E79               	movwf	menuMotor@state^0,c
  2922  0006A6  0C15               	retlw	21
  2923  0006A8                     l6647:
  2924                           
  2925                           ;Menu.c: 304:             if (SiRecievedByte()){
  2926  0006A8  ECB2  F000         	call	_SiRecievedByte	;wreg free
  2927  0006AC  0900               	iorlw	0
  2928  0006AE  B4D8               	btfsc	status,2,c
  2929  0006B0  0012               	return	
  2930                           
  2931                           ;Menu.c: 305:                 LCDcolm = SiReadByte();
  2932  0006B2  ECC0  F000         	call	_SiReadByte	;wreg free
  2933  0006B6  6E32               	movwf	_LCDcolm^0,c
  2934                           
  2935                           ;Menu.c: 306:                 state = 19;
  2936  0006B8  0E13               	movlw	19
  2937  0006BA                     L3:
  2938  0006BA  6E79               	movwf	menuMotor@state^0,c
  2939  0006BC  EF6C  F000         	goto	_resetDisplay
  2940  0006C0                     l6655:
  2941                           
  2942                           ;Menu.c: 311:             displayResults();
  2943  0006C0  ECFB  F00E         	call	_displayResults	;wreg free
  2944                           
  2945                           ;Menu.c: 312:             if(LCDrow == 2){
  2946  0006C4  0E02               	movlw	2
  2947  0006C6  1834               	xorwf	_LCDrow^0,w,c
  2948  0006C8  A4D8               	btfss	status,2,c
  2949  0006CA  0012               	return	
  2950                           
  2951                           ;Menu.c: 313:                 LcGotoXY(7,1);
  2952  0006CC  0E01               	movlw	1
  2953  0006CE  6E66               	movwf	LcGotoXY@Row^0,c
  2954  0006D0  0E07               	movlw	7
  2955  0006D2  ECA4  F00E         	call	_LcGotoXY
  2956                           
  2957                           ;Menu.c: 314:                 LcPutChar((mScore/10)+'0');
  2958  0006D6  0E0A               	movlw	10
  2959  0006D8  6E5E               	movwf	___lbdiv@divisor^0,c
  2960  0006DA  502F               	movf	_mScore^0,w,c
  2961  0006DC  EC72  F00E         	call	___lbdiv
  2962  0006E0  0F30               	addlw	48
  2963  0006E2  ECE6  F00E         	call	_LcPutChar
  2964                           
  2965                           ;Menu.c: 315:                 LcPutChar((mScore%10)+'0');
  2966  0006E6  0E0A               	movlw	10
  2967  0006E8  6E5E               	movwf	___lbmod@divisor^0,c
  2968  0006EA  502F               	movf	_mScore^0,w,c
  2969  0006EC  EC0F  F00F         	call	___lbmod
  2970  0006F0  0F30               	addlw	48
  2971  0006F2  ECE6  F00E         	call	_LcPutChar
  2972                           
  2973                           ;Menu.c: 316:                 displayTimeRemaining();
  2974  0006F6  EC3B  F000         	call	_displayTimeRemaining	;wreg free
  2975                           
  2976                           ;Menu.c: 317:                 state = 23;
  2977  0006FA  0E17               	movlw	23
  2978  0006FC  6E79               	movwf	menuMotor@state^0,c
  2979  0006FE  0C17               	retlw	23
  2980  000700                     l6663:
  2981                           
  2982                           ;Menu.c: 321:             if (isPressed() && KeGetGenericValue() == '#'){
  2983  000700  ECEF  F00F         	call	_isPressed	;wreg free
  2984  000704  0900               	iorlw	0
  2985  000706  B4D8               	btfsc	status,2,c
  2986  000708  0012               	return	
  2987  00070A  EC8B  F00F         	call	_KeGetGenericValue	;wreg free
  2988  00070E  0A23               	xorlw	35
  2989  000710  A4D8               	btfss	status,2,c
  2990  000712  0012               	return	
  2991                           
  2992                           ;Menu.c: 322:                 DaSaveScore(mScore);
  2993  000714  502F               	movf	_mScore^0,w,c
  2994  000716  EC58  F00E         	call	_DaSaveScore
  2995                           
  2996                           ;Menu.c: 323:                 state = 24;
  2997  00071A  0E18               	movlw	24
  2998  00071C  6E79               	movwf	menuMotor@state^0,c
  2999  00071E  0C18               	retlw	24
  3000  000720                     l6671:
  3001                           
  3002                           ;Menu.c: 327:             if (DaGetIdle()){
  3003  000720  ECA6  F000         	call	_DaGetIdle	;wreg free
  3004  000724  0900               	iorlw	0
  3005  000726  B4D8               	btfsc	status,2,c
  3006  000728  0012               	return	
  3007                           
  3008                           ;Menu.c: 328:                 state = 9;
  3009  00072A  0E09               	movlw	9
  3010  00072C  6E79               	movwf	menuMotor@state^0,c
  3011                           
  3012                           ;Menu.c: 329:                 resetDisplay();
  3013  00072E  EC6C  F000         	call	_resetDisplay	;wreg free
  3014                           
  3015                           ;Menu.c: 330:                 val = LCDcolm = 0;
  3016  000732  6A32               	clrf	_LCDcolm^0,c
  3017  000734  6A31               	clrf	_val^0,c
  3018  000736  0012               	return	
  3019  000738                     l6679:
  3020                           
  3021                           ;Menu.c: 335:             displayString(&modifyTimeString);
  3022  000738  0EDC               	movlw	low _modifyTimeString
  3023  00073A  6E6C               	movwf	displayString@string^0,c
  3024  00073C  ECD1  F00E         	call	_displayString	;wreg free
  3025                           
  3026                           ;Menu.c: 336:             if(LCDrow == 1){
  3027  000740  0434               	decf	_LCDrow^0,w,c
  3028  000742  A4D8               	btfss	status,2,c
  3029  000744  0012               	return	
  3030                           
  3031                           ;Menu.c: 337:                 modifyTime();
  3032  000746  EC96  F000         	call	_modifyTime	;wreg free
  3033                           
  3034                           ;Menu.c: 338:                 state = 41;
  3035  00074A  0E29               	movlw	41
  3036  00074C  6E79               	movwf	menuMotor@state^0,c
  3037  00074E  0C29               	retlw	41
  3038  000750                     l6687:
  3039                           
  3040                           ;Menu.c: 342:             if (isPressed()){
  3041  000750  ECEF  F00F         	call	_isPressed	;wreg free
  3042  000754  0900               	iorlw	0
  3043  000756  B4D8               	btfsc	status,2,c
  3044  000758  0012               	return	
  3045                           
  3046                           ;Menu.c: 343:                 if(KeGetGenericValue() == '*' ){
  3047  00075A  EC8B  F00F         	call	_KeGetGenericValue	;wreg free
  3048  00075E  0A2A               	xorlw	42
  3049  000760  E106               	bnz	l6701
  3050                           
  3051                           ;Menu.c: 344:                     resetDisplay();
  3052  000762  EC6C  F000         	call	_resetDisplay	;wreg free
  3053                           
  3054                           ;Menu.c: 345:                     LCDcolm = 0;
  3055  000766  6A32               	clrf	_LCDcolm^0,c
  3056                           
  3057                           ;Menu.c: 346:                     state = 9;
  3058                           
  3059                           ;Menu.c: 347:                     val =0;
  3060  000768  D91B               	call	PL98	;call to abstracted procedure
  3061                           
  3062                           ;Menu.c: 348:                     resetTimer();
  3063  00076A  EF67  F000         	goto	_resetTimer	;wreg free
  3064  00076E                     l6701:
  3065  00076E  EC8B  F00F         	call	_KeGetGenericValue	;wreg free
  3066  000772  0A23               	xorlw	35
  3067  000774  E001 D70B          	bnz	l6549
  3068                           
  3069                           ;Menu.c: 350:                     if (val >= 4){
  3070  000778  0E03               	movlw	3
  3071  00077A  6431               	cpfsgt	_val^0,c
  3072  00077C  0C03               	retlw	3
  3073  00077E                     u6460:
  3074                           
  3075                           ;Menu.c: 351:                         resetDisplay();
  3076  00077E  EC6C  F000         	call	_resetDisplay	;wreg free
  3077                           
  3078                           ;Menu.c: 352:                         LCDcolm = 0;
  3079                           
  3080                           ;Menu.c: 353:                         state = 9;
  3081  000782  D90A               	call	PL92	;call to abstracted procedure
  3082  000784                     l6711:
  3083                           
  3084                           ;Menu.c: 354:                         val =0;
  3085  000784  6A31               	clrf	_val^0,c
  3086  000786  0012               	return	
  3087  000788                     l6715:
  3088                           
  3089                           ;Menu.c: 363:             if (DaGetNumScores() == 0){
  3090  000788  ECC8  F000         	call	_DaGetNumScores	;wreg free
  3091  00078C  0900               	iorlw	0
  3092  00078E  E103               	bnz	l6719
  3093                           
  3094                           ;Menu.c: 364:                 state = 9;
  3095  000790  0E09               	movlw	9
  3096  000792  6E79               	movwf	menuMotor@state^0,c
  3097                           
  3098                           ;Menu.c: 365:             }else{
  3099  000794  0C09               	retlw	9
  3100  000796                     l6719:
  3101                           
  3102                           ;Menu.c: 367:                 displayScoresMarquee();
  3103  000796  EC9A  F000         	call	_displayScoresMarquee	;wreg free
  3104                           
  3105                           ;Menu.c: 368:                 state = 61;
  3106  00079A  0E3D               	movlw	61
  3107  00079C  6E79               	movwf	menuMotor@state^0,c
  3108                           
  3109                           ;Menu.c: 369:                 if (DaGetNumScores() == 1) state+=2;
  3110  00079E  ECC8  F000         	call	_DaGetNumScores	;wreg free
  3111  0007A2  06E8               	decf	wreg,f,c
  3112  0007A4  A4D8               	btfss	status,2,c
  3113  0007A6  0012               	return	
  3114  0007A8  0E02               	movlw	2
  3115  0007AA  2679               	addwf	menuMotor@state^0,f,c
  3116  0007AC  0C02               	retlw	2
  3117  0007AE                     l6727:
  3118                           
  3119                           ;Menu.c: 374:             if (DaGetIdle()){
  3120  0007AE  ECA6  F000         	call	_DaGetIdle	;wreg free
  3121  0007B2  0900               	iorlw	0
  3122  0007B4  B4D8               	btfsc	status,2,c
  3123  0007B6  0012               	return	
  3124                           
  3125                           ;Menu.c: 375:                 state = 62;
  3126  0007B8  0E3E               	movlw	62
  3127  0007BA  D73C               	goto	L4
  3128  0007BC                     l6733:
  3129                           
  3130                           ;Menu.c: 380:             state = 63;
  3131  0007BC  0E3F               	movlw	63
  3132  0007BE  6E79               	movwf	menuMotor@state^0,c
  3133                           
  3134                           ;Menu.c: 381:             if (TiGetTics(timer) >= 1200){
  3135  0007C0  5035               	movf	_timer^0,w,c
  3136  0007C2  EC22  F00F         	call	_TiGetTics
  3137  0007C6  BE5F               	btfsc	(?_TiGetTics+1)^0,7,c
  3138  0007C8  0012               	return	
  3139  0007CA  D8C3               	call	PL26	;call to abstracted procedure
  3140  0007CC  A0D8               	btfss	status,0,c
  3141  0007CE  0012               	return	
  3142                           
  3143                           ;Menu.c: 382:                 CantaIR(0x10 | 0x08);
  3144  0007D0  0E18               	movlw	24
  3145  0007D2  ECBB  F00F         	call	_CantaIR
  3146                           
  3147                           ;Menu.c: 383:                 LCDcolm++;
  3148  0007D6  2A32               	incf	_LCDcolm^0,f,c
  3149                           
  3150                           ;Menu.c: 384:                 if (LCDcolm == 16){
  3151  0007D8  0E10               	movlw	16
  3152  0007DA  1832               	xorwf	_LCDcolm^0,w,c
  3153  0007DC  E001 D67E          	bnz	l6491
  3154                           
  3155                           ;Menu.c: 385:                     resetDisplay();
  3156  0007E0  EC6C  F000         	call	_resetDisplay	;wreg free
  3157                           
  3158                           ;Menu.c: 386:                     LCDcolm = 0;
  3159  0007E4  6A32               	clrf	_LCDcolm^0,c
  3160                           
  3161                           ;Menu.c: 387:                     state = 60;
  3162  0007E6  0E3C               	movlw	60
  3163  0007E8  6E79               	movwf	menuMotor@state^0,c
  3164                           
  3165                           ;Menu.c: 388:                     incrementPosition();
  3166  0007EA  ECBC  F000         	call	_incrementPosition	;wreg free
  3167  0007EE  D676               	goto	l6491
  3168  0007F0                     l6753:
  3169                           
  3170                           ;Menu.c: 395:             if (DaGetNumScores() > 1) state = 62;
  3171  0007F0  ECC8  F000         	call	_DaGetNumScores	;wreg free
  3172  0007F4  6E6E               	movwf	??_menuMotor^0,c
  3173  0007F6  0E01               	movlw	1
  3174  0007F8  646E               	cpfsgt	??_menuMotor^0,c
  3175  0007FA  D002               	goto	l6757
  3176  0007FC  0E3E               	movlw	62
  3177  0007FE  6E79               	movwf	menuMotor@state^0,c
  3178  000800                     l6757:
  3179                           
  3180                           ;Menu.c: 396:             if (isPressed() && KeGetGenericValue() == '#'){
  3181  000800  ECEF  F00F         	call	_isPressed	;wreg free
  3182  000804  0900               	iorlw	0
  3183  000806  B4D8               	btfsc	status,2,c
  3184  000808  0012               	return	
  3185  00080A  EC8B  F00F         	call	_KeGetGenericValue	;wreg free
  3186  00080E  0A23               	xorlw	35
  3187  000810  E0B6               	bz	u6460
  3188  000812  0012               	return	
  3189  000814                     l6769:
  3190                           
  3191                           ;Menu.c: 406:             displayLogOut();
  3192  000814  ECE4  F00D         	call	_displayLogOut	;wreg free
  3193                           
  3194                           ;Menu.c: 407:             if (LCDrow == 1){
  3195  000818  0434               	decf	_LCDrow^0,w,c
  3196  00081A  A4D8               	btfss	status,2,c
  3197  00081C  0012               	return	
  3198                           
  3199                           ;Menu.c: 408:                 state = 81;
  3200  00081E  0E51               	movlw	81
  3201  000820  D709               	goto	L4
  3202  000822                     l6777:
  3203                           
  3204                           ;Menu.c: 413:             if (TiGetTics(timer) >= 3600){
  3205  000822  5035               	movf	_timer^0,w,c
  3206  000824  EC22  F00F         	call	_TiGetTics
  3207  000828  BE5F               	btfsc	(?_TiGetTics+1)^0,7,c
  3208  00082A  0012               	return	
  3209  00082C  D8B0               	call	PL72	;call to abstracted procedure
  3210  00082E  A0D8               	btfss	status,0,c
  3211  000830  0012               	return	
  3212                           
  3213                           ;Menu.c: 414:                 state = 0;
  3214  000832  6A79               	clrf	menuMotor@state^0,c
  3215                           
  3216                           ;Menu.c: 415:                 resetDisplay();
  3217  000834  EC6C  F000         	call	_resetDisplay	;wreg free
  3218                           
  3219                           ;Menu.c: 416:                 LCDcolm = 0;
  3220  000838  6A32               	clrf	_LCDcolm^0,c
  3221  00083A  D7A4               	goto	l6711
  3222  00083C                     l6787:
  3223                           
  3224                           ;Menu.c: 421:             displayString(&sysTime);
  3225  00083C  0ECE               	movlw	low _sysTime
  3226  00083E  6E6C               	movwf	displayString@string^0,c
  3227  000840  ECD1  F00E         	call	_displayString	;wreg free
  3228                           
  3229                           ;Menu.c: 422:             if(LCDrow == 1){
  3230  000844  0434               	decf	_LCDrow^0,w,c
  3231  000846  A4D8               	btfss	status,2,c
  3232  000848  0012               	return	
  3233                           
  3234                           ;Menu.c: 423:                 displaySysTime();
  3235  00084A  EC71  F000         	call	_displaySysTime	;wreg free
  3236                           
  3237                           ;Menu.c: 424:                 state = 101;
  3238  00084E  0E65               	movlw	101
  3239  000850  6E79               	movwf	menuMotor@state^0,c
  3240  000852  0C65               	retlw	101
  3241  000854                     l6795:
  3242                           
  3243                           ;Menu.c: 428:             if (isPressed() && KeGetGenericValue() == '#'){
  3244  000854  ECEF  F00F         	call	_isPressed	;wreg free
  3245  000858  0900               	iorlw	0
  3246  00085A  B4D8               	btfsc	status,2,c
  3247  00085C  0012               	return	
  3248  00085E  EC8B  F00F         	call	_KeGetGenericValue	;wreg free
  3249  000862  0A23               	xorlw	35
  3250  000864  A4D8               	btfss	status,2,c
  3251  000866  0012               	return	
  3252                           
  3253                           ;Menu.c: 429:                 resetDisplay();
  3254  000868  EC6C  F000         	call	_resetDisplay	;wreg free
  3255                           
  3256                           ;Menu.c: 430:                 LCDcolm = 0;
  3257                           
  3258                           ;Menu.c: 431:                 state = 9;
  3259  00086C  D895               	call	PL92	;call to abstracted procedure
  3260                           
  3261                           ;Menu.c: 432:                 stopTimer();
  3262  00086E  ECB8  F000         	call	_stopTimer	;wreg free
  3263  000872  D788               	goto	l6711
  3264  000874                     l6811:
  3265  000874  5079               	movf	menuMotor@state^0,w,c
  3266  000876  6E6E               	movwf	??_menuMotor^0,c
  3267  000878  6A6F               	clrf	(??_menuMotor+1)^0,c
  3268                           
  3269                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3270                           ; Switch size 1, requested type "space"
  3271                           ; Number of cases is 1, Range of values is 0 to 0
  3272                           ; switch strategies available:
  3273                           ; Name         Instructions Cycles
  3274                           ; simple_byte            4     3 (average)
  3275                           ;	Chosen strategy is simple_byte
  3276  00087A  506F               	movf	(??_menuMotor+1)^0,w,c
  3277  00087C  A4D8               	btfss	status,2,c
  3278  00087E  0012               	return	
  3279                           
  3280                           ; Switch size 1, requested type "space"
  3281                           ; Number of cases is 35, Range of values is 0 to 101
  3282                           ; switch strategies available:
  3283                           ; Name         Instructions Cycles
  3284                           ; simple_byte          106    54 (average)
  3285                           ;	Chosen strategy is simple_byte
  3286  000880  506E               	movf	??_menuMotor^0,w,c
  3287  000882  E101 D526          	bz	l6329
  3288  000886  0A01               	xorlw	1	; case 1
  3289  000888  E101 D530          	bz	l6341
  3290  00088C  0A03               	xorlw	3	; case 2
  3291  00088E  E101 D540          	bz	l6349
  3292  000892  0A01               	xorlw	1	; case 3
  3293  000894  E101 D554          	bz	l6361
  3294  000898  0A07               	xorlw	7	; case 4
  3295  00089A  E101 D566          	bz	l6375
  3296  00089E  0A01               	xorlw	1	; case 5
  3297  0008A0  E101 D58F          	bz	l6403
  3298  0008A4  0A03               	xorlw	3	; case 6
  3299  0008A6  E101 D596          	bz	l6415
  3300  0008AA  0A01               	xorlw	1	; case 7
  3301  0008AC  E101 D5B5          	bz	l6439
  3302  0008B0  0A0F               	xorlw	15	; case 8
  3303  0008B2  E101 D5C0          	bz	l6447
  3304  0008B6  0A01               	xorlw	1	; case 9
  3305  0008B8  E101 D5F0          	bz	l6477
  3306  0008BC  0A03               	xorlw	3	; case 10
  3307  0008BE  E101 D606          	bz	l6487
  3308  0008C2  0A01               	xorlw	1	; case 11
  3309  0008C4  E101 D60D          	bz	l6493
  3310  0008C8  0A07               	xorlw	7	; case 12
  3311  0008CA  E101 D651          	bz	l6541
  3312  0008CE  0A01               	xorlw	1	; case 13
  3313  0008D0  E101 D65F          	bz	l6551
  3314  0008D4  0A03               	xorlw	3	; case 14
  3315  0008D6  E101 D66F          	bz	l6563
  3316  0008DA  0A01               	xorlw	1	; case 15
  3317  0008DC  E101 D67C          	bz	l6575
  3318  0008E0  0A1F               	xorlw	31	; case 16
  3319  0008E2  E101 D6A9          	bz	l6607
  3320  0008E6  0A01               	xorlw	1	; case 17
  3321  0008E8  E101 D6AF          	bz	l6613
  3322  0008EC  0A03               	xorlw	3	; case 18
  3323  0008EE  E101 D6B7          	bz	l6619
  3324  0008F2  0A01               	xorlw	1	; case 19
  3325  0008F4  E101 D6BD          	bz	l6627
  3326  0008F8  0A07               	xorlw	7	; case 20
  3327  0008FA  E101 D6C1          	bz	l6635
  3328  0008FE  0A01               	xorlw	1	; case 21
  3329  000900  E101 D6D2          	bz	l6647
  3330  000904  0A03               	xorlw	3	; case 22
  3331  000906  E101 D6DB          	bz	l6655
  3332  00090A  0A01               	xorlw	1	; case 23
  3333  00090C  E101 D6F8          	bz	l6663
  3334  000910  0A0F               	xorlw	15	; case 24
  3335  000912  E101 D705          	bz	l6671
  3336  000916  0A30               	xorlw	48	; case 40
  3337  000918  E101 D70E          	bz	l6679
  3338  00091C  0A01               	xorlw	1	; case 41
  3339  00091E  E101 D717          	bz	l6687
  3340  000922  0A15               	xorlw	21	; case 60
  3341  000924  E101 D730          	bz	l6715
  3342  000928  0A01               	xorlw	1	; case 61
  3343  00092A  E101 D740          	bz	l6727
  3344  00092E  0A03               	xorlw	3	; case 62
  3345  000930  E101 D744          	bz	l6733
  3346  000934  0A01               	xorlw	1	; case 63
  3347  000936  E101 D75B          	bz	l6753
  3348  00093A  0A6F               	xorlw	111	; case 80
  3349  00093C  E101 D76A          	bz	l6769
  3350  000940  0A01               	xorlw	1	; case 81
  3351  000942  E101 D76E          	bz	l6777
  3352  000946  0A35               	xorlw	53	; case 100
  3353  000948  E101 D778          	bz	l6787
  3354  00094C  0A01               	xorlw	1	; case 101
  3355  00094E  E082               	bz	l6795
  3356  000950  0012               	return		;funcret
  3357  000952                     __end_of_menuMotor:
  3358                           	callstack 0
  3359  000952                     PL26:
  3360                           	callstack 27
  3361  000952  0EB0               	movlw	176
  3362  000954  5C5E               	subwf	?_TiGetTics^0,w,c
  3363  000956  0E04               	movlw	4
  3364  000958  585F               	subwfb	(?_TiGetTics+1)^0,w,c
  3365  00095A  0012               	return	
  3366  00095C                     __end_ofPL26:
  3367                           	callstack 0
  3368  00095C                     PL34:
  3369                           	callstack 23
  3370  00095C  0F47               	addlw	low _mUser
  3371  00095E  6ED9               	movwf	fsr2l,c
  3372  000960  6ADA               	clrf	fsr2h,c
  3373  000962  50DF               	movf	indf2,w,c
  3374  000964  0012               	return	
  3375  000966                     __end_ofPL34:
  3376                           	callstack 0
  3377  000966                     PL44:
  3378                           	callstack 23
  3379  000966  5030               	movf	_pos^0,w,c
  3380  000968  0F47               	addlw	low _mUser
  3381  00096A  6ED9               	movwf	fsr2l,c
  3382  00096C  6ADA               	clrf	fsr2h,c
  3383  00096E  0012               	return	
  3384  000970                     __end_ofPL44:
  3385                           	callstack 0
  3386  000970                     PL48:
  3387                           	callstack 23
  3388  000970  5030               	movf	_pos^0,w,c
  3389  000972  0F50               	addlw	low (_mUser+9)
  3390  000974  6ED9               	movwf	fsr2l,c
  3391  000976  6ADA               	clrf	fsr2h,c
  3392  000978  0012               	return	
  3393  00097A                     __end_ofPL48:
  3394                           	callstack 0
  3395  00097A                     PL62:
  3396                           	callstack 23
  3397  00097A  0E05               	movlw	5
  3398  00097C  6E33               	movwf	_LCDcol^0,c
  3399  00097E  C034  F066         	movff	_LCDrow,LcGotoXY@Row
  3400  000982  5033               	movf	_LCDcol^0,w,c
  3401  000984  0012               	return	
  3402  000986                     __end_ofPL62:
  3403                           	callstack 0
  3404  000986                     PL66:
  3405                           	callstack 23
  3406  000986  C034  F066         	movff	_LCDrow,LcGotoXY@Row
  3407  00098A  5033               	movf	_LCDcol^0,w,c
  3408  00098C  0012               	return	
  3409  00098E                     __end_ofPL66:
  3410                           	callstack 0
  3411  00098E                     PL72:
  3412                           	callstack 23
  3413  00098E  0E10               	movlw	16
  3414  000990  5C5E               	subwf	?_TiGetTics^0,w,c
  3415  000992  0E0E               	movlw	14
  3416  000994  585F               	subwfb	(?_TiGetTics+1)^0,w,c
  3417  000996  0012               	return	
  3418  000998                     __end_ofPL72:
  3419                           	callstack 0
  3420  000998                     PL92:
  3421                           	callstack 23
  3422  000998  6A32               	clrf	_LCDcolm^0,c
  3423  00099A  0E09               	movlw	9
  3424  00099C  6E79               	movwf	menuMotor@state^0,c
  3425  00099E  0C09               	retlw	9
  3426  0009A0                     __end_ofPL92:
  3427                           	callstack 0
  3428  0009A0                     PL98:
  3429                           	callstack 23
  3430  0009A0  0E09               	movlw	9
  3431  0009A2  6E79               	movwf	menuMotor@state^0,c
  3432  0009A4  6A31               	clrf	_val^0,c
  3433  0009A6  0012               	return	
  3434  0009A8                     __end_ofPL98:
  3435                           	callstack 0
  3436                           
  3437 ;; *************** function _timerOver *****************
  3438 ;; Defined at:
  3439 ;;		line 506 in file "time.c"
  3440 ;; Parameters:    Size  Location     Type
  3441 ;;		None
  3442 ;; Auto vars:     Size  Location     Type
  3443 ;;		None
  3444 ;; Return value:  Size  Location     Type
  3445 ;;                  1    wreg      unsigned char 
  3446 ;; Registers used:
  3447 ;;		wreg, status,2
  3448 ;; Tracked objects:
  3449 ;;		On entry : 0/0
  3450 ;;		On exit  : 0/0
  3451 ;;		Unchanged: 0/0
  3452 ;; Data sizes:     COMRAM   BANK0   BANK1
  3453 ;;      Params:         0       0       0
  3454 ;;      Locals:         0       0       0
  3455 ;;      Temps:          0       0       0
  3456 ;;      Totals:         0       0       0
  3457 ;;Total ram usage:        0 bytes
  3458 ;; Hardware stack levels used: 1
  3459 ;; Hardware stack levels required when called: 2
  3460 ;; This function calls:
  3461 ;;		Nothing
  3462 ;; This function is called by:
  3463 ;;		_menuMotor
  3464 ;; This function uses a non-reentrant model
  3465 ;;
  3466                           
  3467                           	psect	text9
  3468  000124                     __ptext9:
  3469                           	callstack 0
  3470  000124                     _timerOver:
  3471                           	callstack 27
  3472                           
  3473                           ;time.c: 507:     return state == 0;
  3474                           
  3475                           ;incstack = 0
  3476  000124  5013               	movf	_state@time$F1845^0,w,c
  3477  000126  B4D8               	btfsc	status,2,c
  3478  000128  0C01               	retlw	1
  3479  00012A  0C00               	retlw	0	;funcret
  3480  00012C                     __end_of_timerOver:
  3481                           	callstack 0
  3482                           
  3483 ;; *************** function _stopTimer *****************
  3484 ;; Defined at:
  3485 ;;		line 463 in file "time.c"
  3486 ;; Parameters:    Size  Location     Type
  3487 ;;		None
  3488 ;; Auto vars:     Size  Location     Type
  3489 ;;		None
  3490 ;; Return value:  Size  Location     Type
  3491 ;;                  1    wreg      void 
  3492 ;; Registers used:
  3493 ;;		None
  3494 ;; Tracked objects:
  3495 ;;		On entry : 0/0
  3496 ;;		On exit  : 0/0
  3497 ;;		Unchanged: 0/0
  3498 ;; Data sizes:     COMRAM   BANK0   BANK1
  3499 ;;      Params:         0       0       0
  3500 ;;      Locals:         0       0       0
  3501 ;;      Temps:          0       0       0
  3502 ;;      Totals:         0       0       0
  3503 ;;Total ram usage:        0 bytes
  3504 ;; Hardware stack levels used: 1
  3505 ;; Hardware stack levels required when called: 2
  3506 ;; This function calls:
  3507 ;;		Nothing
  3508 ;; This function is called by:
  3509 ;;		_menuMotor
  3510 ;; This function uses a non-reentrant model
  3511 ;;
  3512                           
  3513                           	psect	text10
  3514  000170                     __ptext10:
  3515                           	callstack 0
  3516  000170                     _stopTimer:
  3517                           	callstack 27
  3518                           
  3519                           ;time.c: 464:     state = 0;
  3520                           
  3521                           ;incstack = 0
  3522  000170  6A13               	clrf	_state@time$F1845^0,c
  3523  000172  0012               	return		;funcret
  3524  000174                     __end_of_stopTimer:
  3525                           	callstack 0
  3526                           
  3527 ;; *************** function _startTimer *****************
  3528 ;; Defined at:
  3529 ;;		line 459 in file "time.c"
  3530 ;; Parameters:    Size  Location     Type
  3531 ;;		None
  3532 ;; Auto vars:     Size  Location     Type
  3533 ;;		None
  3534 ;; Return value:  Size  Location     Type
  3535 ;;                  1    wreg      void 
  3536 ;; Registers used:
  3537 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3538 ;; Tracked objects:
  3539 ;;		On entry : 0/0
  3540 ;;		On exit  : 0/0
  3541 ;;		Unchanged: 0/0
  3542 ;; Data sizes:     COMRAM   BANK0   BANK1
  3543 ;;      Params:         0       0       0
  3544 ;;      Locals:         0       0       0
  3545 ;;      Temps:          0       0       0
  3546 ;;      Totals:         0       0       0
  3547 ;;Total ram usage:        0 bytes
  3548 ;; Hardware stack levels used: 1
  3549 ;; Hardware stack levels required when called: 3
  3550 ;; This function calls:
  3551 ;;		_TiResetTics
  3552 ;; This function is called by:
  3553 ;;		_menuMotor
  3554 ;; This function uses a non-reentrant model
  3555 ;;
  3556                           
  3557                           	psect	text11
  3558  001FF6                     __ptext11:
  3559                           	callstack 0
  3560  001FF6                     _startTimer:
  3561                           	callstack 26
  3562                           
  3563                           ;time.c: 460:     state = 2;
  3564                           
  3565                           ;incstack = 0
  3566  001FF6  0E02               	movlw	2
  3567  001FF8  6E13               	movwf	_state@time$F1845^0,c
  3568                           
  3569                           ;time.c: 461:     TiResetTics(timer);
  3570  001FFA  5014               	movf	_timer@time$F1844^0,w,c
  3571  001FFC  EFAB  F00F         	goto	_TiResetTics
  3572  002000                     __end_of_startTimer:
  3573                           	callstack 0
  3574                           
  3575 ;; *************** function _resetTimer *****************
  3576 ;; Defined at:
  3577 ;;		line 471 in file "time.c"
  3578 ;; Parameters:    Size  Location     Type
  3579 ;;		None
  3580 ;; Auto vars:     Size  Location     Type
  3581 ;;		None
  3582 ;; Return value:  Size  Location     Type
  3583 ;;                  1    wreg      void 
  3584 ;; Registers used:
  3585 ;;		None
  3586 ;; Tracked objects:
  3587 ;;		On entry : 0/0
  3588 ;;		On exit  : 0/0
  3589 ;;		Unchanged: 0/0
  3590 ;; Data sizes:     COMRAM   BANK0   BANK1
  3591 ;;      Params:         0       0       0
  3592 ;;      Locals:         0       0       0
  3593 ;;      Temps:          0       0       0
  3594 ;;      Totals:         0       0       0
  3595 ;;Total ram usage:        0 bytes
  3596 ;; Hardware stack levels used: 1
  3597 ;; Hardware stack levels required when called: 2
  3598 ;; This function calls:
  3599 ;;		Nothing
  3600 ;; This function is called by:
  3601 ;;		_menuMotor
  3602 ;; This function uses a non-reentrant model
  3603 ;;
  3604                           
  3605                           	psect	text12
  3606  0000CE                     __ptext12:
  3607                           	callstack 0
  3608  0000CE                     _resetTimer:
  3609                           	callstack 27
  3610                           
  3611                           ;time.c: 472:     second = seconds;
  3612                           
  3613                           ;incstack = 0
  3614  0000CE  C018  F017         	movff	_seconds,_second
  3615                           
  3616                           ;time.c: 473:     minute = minutes;
  3617  0000D2  C078  F077         	movff	_minutes,_minute
  3618  0000D6  0012               	return		;funcret
  3619  0000D8                     __end_of_resetTimer:
  3620                           	callstack 0
  3621                           
  3622 ;; *************** function _resetPosition *****************
  3623 ;; Defined at:
  3624 ;;		line 376 in file "EEPROM.c"
  3625 ;; Parameters:    Size  Location     Type
  3626 ;;		None
  3627 ;; Auto vars:     Size  Location     Type
  3628 ;;		None
  3629 ;; Return value:  Size  Location     Type
  3630 ;;                  1    wreg      void 
  3631 ;; Registers used:
  3632 ;;		None
  3633 ;; Tracked objects:
  3634 ;;		On entry : 0/0
  3635 ;;		On exit  : 0/0
  3636 ;;		Unchanged: 0/0
  3637 ;; Data sizes:     COMRAM   BANK0   BANK1
  3638 ;;      Params:         0       0       0
  3639 ;;      Locals:         0       0       0
  3640 ;;      Temps:          0       0       0
  3641 ;;      Totals:         0       0       0
  3642 ;;Total ram usage:        0 bytes
  3643 ;; Hardware stack levels used: 1
  3644 ;; Hardware stack levels required when called: 2
  3645 ;; This function calls:
  3646 ;;		Nothing
  3647 ;; This function is called by:
  3648 ;;		_menuMotor
  3649 ;; This function uses a non-reentrant model
  3650 ;;
  3651                           
  3652                           	psect	text13
  3653  000174                     __ptext13:
  3654                           	callstack 0
  3655  000174                     _resetPosition:
  3656                           	callstack 27
  3657                           
  3658                           ;EEPROM.c: 377:     position = 0;
  3659                           
  3660                           ;incstack = 0
  3661  000174  6A1F               	clrf	_position^0,c
  3662  000176  0012               	return		;funcret
  3663  000178                     __end_of_resetPosition:
  3664                           	callstack 0
  3665                           
  3666 ;; *************** function _resetDisplay *****************
  3667 ;; Defined at:
  3668 ;;		line 439 in file "Menu.c"
  3669 ;; Parameters:    Size  Location     Type
  3670 ;;		None
  3671 ;; Auto vars:     Size  Location     Type
  3672 ;;		None
  3673 ;; Return value:  Size  Location     Type
  3674 ;;                  1    wreg      void 
  3675 ;; Registers used:
  3676 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3677 ;; Tracked objects:
  3678 ;;		On entry : 0/0
  3679 ;;		On exit  : 0/0
  3680 ;;		Unchanged: 0/0
  3681 ;; Data sizes:     COMRAM   BANK0   BANK1
  3682 ;;      Params:         0       0       0
  3683 ;;      Locals:         0       0       0
  3684 ;;      Temps:          0       0       0
  3685 ;;      Totals:         0       0       0
  3686 ;;Total ram usage:        0 bytes
  3687 ;; Hardware stack levels used: 1
  3688 ;; Hardware stack levels required when called: 5
  3689 ;; This function calls:
  3690 ;;		_LcClear
  3691 ;; This function is called by:
  3692 ;;		_menuMotor
  3693 ;; This function uses a non-reentrant model
  3694 ;;
  3695                           
  3696                           	psect	text14
  3697  0000D8                     __ptext14:
  3698                           	callstack 0
  3699  0000D8                     _resetDisplay:
  3700                           	callstack 24
  3701                           
  3702                           ;Menu.c: 440:     LcClear();
  3703                           
  3704                           ;incstack = 0
  3705  0000D8  EC1B  F000         	call	_LcClear	;wreg free
  3706                           
  3707                           ;Menu.c: 441:     LCDcol = LCDrow = 0;
  3708  0000DC  6A34               	clrf	_LCDrow^0,c
  3709  0000DE  6A33               	clrf	_LCDcol^0,c
  3710  0000E0  0012               	return		;funcret
  3711  0000E2                     __end_of_resetDisplay:
  3712                           	callstack 0
  3713                           
  3714 ;; *************** function _modifyTime *****************
  3715 ;; Defined at:
  3716 ;;		line 476 in file "time.c"
  3717 ;; Parameters:    Size  Location     Type
  3718 ;;		None
  3719 ;; Auto vars:     Size  Location     Type
  3720 ;;		None
  3721 ;; Return value:  Size  Location     Type
  3722 ;;                  1    wreg      void 
  3723 ;; Registers used:
  3724 ;;		wreg, status,2
  3725 ;; Tracked objects:
  3726 ;;		On entry : 0/0
  3727 ;;		On exit  : 0/0
  3728 ;;		Unchanged: 0/0
  3729 ;; Data sizes:     COMRAM   BANK0   BANK1
  3730 ;;      Params:         0       0       0
  3731 ;;      Locals:         0       0       0
  3732 ;;      Temps:          0       0       0
  3733 ;;      Totals:         0       0       0
  3734 ;;Total ram usage:        0 bytes
  3735 ;; Hardware stack levels used: 1
  3736 ;; Hardware stack levels required when called: 2
  3737 ;; This function calls:
  3738 ;;		Nothing
  3739 ;; This function is called by:
  3740 ;;		_menuMotor
  3741 ;; This function uses a non-reentrant model
  3742 ;;
  3743                           
  3744                           	psect	text15
  3745  00012C                     __ptext15:
  3746                           	callstack 0
  3747  00012C                     _modifyTime:
  3748                           	callstack 0
  3749                           
  3750                           ;time.c: 477:     state = 20;
  3751                           
  3752                           ;incstack = 0
  3753  00012C  D000               	goto	PL80	;call to abstracted procedure
  3754  00012E                     __end_of_modifyTime:
  3755                           	callstack 0
  3756  00012E                     PL80:
  3757                           	callstack 24
  3758  00012E  0E14               	movlw	20
  3759  000130  6E13               	movwf	_state@time$F1845^0,c
  3760  000132  0C14               	retlw	20	;funcret
  3761  000134                     __end_ofPL80:
  3762                           	callstack 0
  3763                           
  3764 ;; *************** function _mainMenu *****************
  3765 ;; Defined at:
  3766 ;;		line 454 in file "Menu.c"
  3767 ;; Parameters:    Size  Location     Type
  3768 ;;		None
  3769 ;; Auto vars:     Size  Location     Type
  3770 ;;		None
  3771 ;; Return value:  Size  Location     Type
  3772 ;;                  1    wreg      void 
  3773 ;; Registers used:
  3774 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3775 ;; Tracked objects:
  3776 ;;		On entry : 0/0
  3777 ;;		On exit  : 0/0
  3778 ;;		Unchanged: 0/0
  3779 ;; Data sizes:     COMRAM   BANK0   BANK1
  3780 ;;      Params:         0       0       0
  3781 ;;      Locals:         0       0       0
  3782 ;;      Temps:          2       0       0
  3783 ;;      Totals:         2       0       0
  3784 ;;Total ram usage:        2 bytes
  3785 ;; Hardware stack levels used: 1
  3786 ;; Hardware stack levels required when called: 6
  3787 ;; This function calls:
  3788 ;;		_LcPutChar
  3789 ;;		___awmod
  3790 ;;		_nextRow
  3791 ;; This function is called by:
  3792 ;;		_menuMotor
  3793 ;; This function uses a non-reentrant model
  3794 ;;
  3795                           
  3796                           	psect	text16
  3797  0016CC                     __ptext16:
  3798                           	callstack 0
  3799  0016CC                     _mainMenu:
  3800                           	callstack 23
  3801                           
  3802                           ;Menu.c: 455:     if (LCDrow+val < 5){
  3803                           
  3804                           ;incstack = 0
  3805  0016CC  5031               	movf	_val^0,w,c
  3806  0016CE  C034  F06C         	movff	_LCDrow,??_mainMenu
  3807  0016D2  6A6D               	clrf	(??_mainMenu+1)^0,c
  3808  0016D4  266C               	addwf	??_mainMenu^0,f,c
  3809  0016D6  0E00               	movlw	0
  3810  0016D8  226D               	addwfc	(??_mainMenu+1)^0,f,c
  3811  0016DA  BE6D               	btfsc	(??_mainMenu+1)^0,7,c
  3812  0016DC  D006               	goto	u5370
  3813  0016DE  506D               	movf	(??_mainMenu+1)^0,w,c
  3814  0016E0  E129               	bnz	l635
  3815  0016E2  0E05               	movlw	5
  3816  0016E4  5C6C               	subwf	??_mainMenu^0,w,c
  3817  0016E6  B0D8               	btfsc	status,0,c
  3818  0016E8  0012               	return	
  3819  0016EA                     u5370:
  3820                           
  3821                           ;Menu.c: 456:         if (MAINMENUSIZE[LCDrow+val] > 16){
  3822  0016EA  D837               	call	PL64	;call to abstracted procedure
  3823  0016EC  0E10               	movlw	16
  3824  0016EE  64DF               	cpfsgt	indf2,c
  3825  0016F0  D015               	goto	l5977
  3826                           
  3827                           ;Menu.c: 457:             if (LCDcol < 16){
  3828  0016F2  6033               	cpfslt	_LCDcol^0,c
  3829  0016F4  EF54  F000         	goto	_nextRow
  3830                           
  3831                           ;Menu.c: 458:                 LcPutChar(MAINMENU[LCDrow+val][(LCDcol+LCDcolm) % MAINMENU
      +                          SIZE[LCDrow+val]]);
  3832  0016F8  5033               	movf	_LCDcol^0,w,c
  3833  0016FA  2432               	addwf	_LCDcolm^0,w,c
  3834  0016FC  6E5E               	movwf	___awmod@dividend^0,c
  3835  0016FE  6A5F               	clrf	(___awmod@dividend+1)^0,c
  3836  001700  365F               	rlcf	(___awmod@dividend+1)^0,f,c
  3837  001702  D82B               	call	PL64	;call to abstracted procedure
  3838  001704  50DF               	movf	indf2,w,c
  3839  001706  6E60               	movwf	___awmod@divisor^0,c
  3840  001708  6A61               	clrf	(___awmod@divisor+1)^0,c
  3841  00170A  EC72  F00C         	call	___awmod	;wreg free
  3842  00170E  D813               	call	PL20	;call to abstracted procedure
  3843  001710  245E               	addwf	?___awmod^0,w,c
  3844  001712  D81B               	call	PL30	;call to abstracted procedure
  3845  001714  ECE6  F00E         	call	_LcPutChar
  3846  001718                     l5973:
  3847                           
  3848                           ;Menu.c: 459:                 LCDcol++;
  3849  001718  2A33               	incf	_LCDcol^0,f,c
  3850                           
  3851                           ;Menu.c: 460:             }else {
  3852  00171A  0012               	return	
  3853  00171C                     l5977:
  3854  00171C  D80C               	call	PL20	;call to abstracted procedure
  3855  00171E  2433               	addwf	_LCDcol^0,w,c
  3856  001720  D814               	call	PL30	;call to abstracted procedure
  3857  001722  E102 EF54  F000    	bz	_nextRow
  3858                           
  3859                           ;Menu.c: 465:             LcPutChar(MAINMENU[LCDrow+val][LCDcol]);
  3860  001728  D806               	call	PL20	;call to abstracted procedure
  3861  00172A  2433               	addwf	_LCDcol^0,w,c
  3862  00172C  D80E               	call	PL30	;call to abstracted procedure
  3863  00172E  ECE6  F00E         	call	_LcPutChar
  3864  001732  D7F2               	goto	l5973
  3865  001734                     l635:
  3866  001734  0012               	return		;funcret
  3867  001736                     __end_of_mainMenu:
  3868                           	callstack 0
  3869  001736                     PL20:
  3870                           	callstack 23
  3871  001736  5031               	movf	_val^0,w,c
  3872  001738  0D1C               	mullw	28
  3873  00173A  CFF3 F06C          	movff	prodl,??_mainMenu
  3874  00173E  5034               	movf	_LCDrow^0,w,c
  3875  001740  0D1C               	mullw	28
  3876  001742  50F3               	movf	243,w,c
  3877  001744  0F0D               	addlw	low _MAINMENU
  3878  001746  246C               	addwf	??_mainMenu^0,w,c
  3879  001748  0012               	return	
  3880  00174A                     __end_ofPL20:
  3881                           	callstack 0
  3882  00174A                     PL30:
  3883                           	callstack 23
  3884  00174A  6E6D               	movwf	(??_mainMenu+1)^0,c
  3885  00174C  C06D  FFF6         	movff	??_mainMenu+1,tblptrl
  3886  001750                     	if	1	;There is more than 1 active tblptr byte
  3887  001750  0E02               	movlw	high __smallconst
  3888  001752  6EF7               	movwf	tblptrh,c
  3889  001754                     	endif
  3890  001754                     	if	0	;tblptru may be non-zero
  3891  001754                     	endif
  3892  001754                     	if	0	;tblptru may be non-zero
  3893  001754                     	endif
  3894  001754  0008               	tblrd		*
  3895  001756  50F5               	movf	tablat,w,c
  3896  001758  0012               	return	
  3897  00175A                     __end_ofPL30:
  3898                           	callstack 0
  3899  00175A                     PL64:
  3900                           	callstack 23
  3901  00175A  5034               	movf	_LCDrow^0,w,c
  3902  00175C  0F72               	addlw	low _MAINMENUSIZE
  3903  00175E  2431               	addwf	_val^0,w,c
  3904  001760  6ED9               	movwf	fsr2l,c
  3905  001762  6ADA               	clrf	fsr2h,c
  3906  001764  0012               	return	
  3907  001766                     __end_ofPL64:
  3908                           	callstack 0
  3909                           
  3910 ;; *************** function ___awmod *****************
  3911 ;; Defined at:
  3912 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\awmod.c"
  3913 ;; Parameters:    Size  Location     Type
  3914 ;;  dividend        2    5[COMRAM] int 
  3915 ;;  divisor         2    7[COMRAM] int 
  3916 ;; Auto vars:     Size  Location     Type
  3917 ;;  sign            1   10[COMRAM] unsigned char 
  3918 ;;  counter         1    9[COMRAM] unsigned char 
  3919 ;; Return value:  Size  Location     Type
  3920 ;;                  2    5[COMRAM] int 
  3921 ;; Registers used:
  3922 ;;		wreg, status,2, status,0
  3923 ;; Tracked objects:
  3924 ;;		On entry : 0/0
  3925 ;;		On exit  : 0/0
  3926 ;;		Unchanged: 0/0
  3927 ;; Data sizes:     COMRAM   BANK0   BANK1
  3928 ;;      Params:         4       0       0
  3929 ;;      Locals:         2       0       0
  3930 ;;      Temps:          0       0       0
  3931 ;;      Totals:         6       0       0
  3932 ;;Total ram usage:        6 bytes
  3933 ;; Hardware stack levels used: 1
  3934 ;; Hardware stack levels required when called: 2
  3935 ;; This function calls:
  3936 ;;		Nothing
  3937 ;; This function is called by:
  3938 ;;		_mainMenu
  3939 ;; This function uses a non-reentrant model
  3940 ;;
  3941                           
  3942                           	psect	text17
  3943  0018E4                     __ptext17:
  3944                           	callstack 0
  3945  0018E4                     ___awmod:
  3946                           	callstack 26
  3947                           
  3948                           ;incstack = 0
  3949  0018E4  6A63               	clrf	___awmod@sign^0,c
  3950  0018E6  AE5F               	btfss	(___awmod@dividend+1)^0,7,c
  3951  0018E8  D006               	goto	l4005
  3952  0018EA  6C5E               	negf	___awmod@dividend^0,c
  3953  0018EC  1E5F               	comf	(___awmod@dividend+1)^0,f,c
  3954  0018EE  B0D8               	btfsc	status,0,c
  3955  0018F0  2A5F               	incf	(___awmod@dividend+1)^0,f,c
  3956  0018F2  0E01               	movlw	1
  3957  0018F4  6E63               	movwf	___awmod@sign^0,c
  3958  0018F6                     l4005:
  3959  0018F6  AE61               	btfss	(___awmod@divisor+1)^0,7,c
  3960  0018F8  D004               	goto	l4009
  3961  0018FA  6C60               	negf	___awmod@divisor^0,c
  3962  0018FC  1E61               	comf	(___awmod@divisor+1)^0,f,c
  3963  0018FE  B0D8               	btfsc	status,0,c
  3964  001900  2A61               	incf	(___awmod@divisor+1)^0,f,c
  3965  001902                     l4009:
  3966  001902  5060               	movf	___awmod@divisor^0,w,c
  3967  001904  1061               	iorwf	(___awmod@divisor+1)^0,w,c
  3968  001906  E017               	bz	l4025
  3969  001908  0E01               	movlw	1
  3970  00190A  6E62               	movwf	___awmod@counter^0,c
  3971  00190C  D004               	goto	l4015
  3972  00190E                     l4013:
  3973  00190E  90D8               	bcf	status,0,c
  3974  001910  3660               	rlcf	___awmod@divisor^0,f,c
  3975  001912  3661               	rlcf	(___awmod@divisor+1)^0,f,c
  3976  001914  2A62               	incf	___awmod@counter^0,f,c
  3977  001916                     l4015:
  3978  001916  AE61               	btfss	(___awmod@divisor+1)^0,7,c
  3979  001918  D7FA               	goto	l4013
  3980  00191A                     u2930:
  3981  00191A  5060               	movf	___awmod@divisor^0,w,c
  3982  00191C  5C5E               	subwf	___awmod@dividend^0,w,c
  3983  00191E  5061               	movf	(___awmod@divisor+1)^0,w,c
  3984  001920  585F               	subwfb	(___awmod@dividend+1)^0,w,c
  3985  001922  E304               	bnc	l4021
  3986  001924  5060               	movf	___awmod@divisor^0,w,c
  3987  001926  5E5E               	subwf	___awmod@dividend^0,f,c
  3988  001928  5061               	movf	(___awmod@divisor+1)^0,w,c
  3989  00192A  5A5F               	subwfb	(___awmod@dividend+1)^0,f,c
  3990  00192C                     l4021:
  3991  00192C  90D8               	bcf	status,0,c
  3992  00192E  3261               	rrcf	(___awmod@divisor+1)^0,f,c
  3993  001930  3260               	rrcf	___awmod@divisor^0,f,c
  3994  001932  2E62               	decfsz	___awmod@counter^0,f,c
  3995  001934  D7F2               	goto	u2930
  3996  001936                     l4025:
  3997  001936  5063               	movf	___awmod@sign^0,w,c
  3998  001938  E004               	bz	l4029
  3999  00193A  6C5E               	negf	___awmod@dividend^0,c
  4000  00193C  1E5F               	comf	(___awmod@dividend+1)^0,f,c
  4001  00193E  B0D8               	btfsc	status,0,c
  4002  001940  2A5F               	incf	(___awmod@dividend+1)^0,f,c
  4003  001942                     l4029:
  4004  001942  C05E  F05E         	movff	___awmod@dividend,?___awmod
  4005  001946  C05F  F05F         	movff	___awmod@dividend+1,?___awmod+1
  4006  00194A  0012               	return		;funcret
  4007  00194C                     __end_of___awmod:
  4008                           	callstack 0
  4009                           
  4010 ;; *************** function _isPressed *****************
  4011 ;; Defined at:
  4012 ;;		line 207 in file "keypad.c"
  4013 ;; Parameters:    Size  Location     Type
  4014 ;;		None
  4015 ;; Auto vars:     Size  Location     Type
  4016 ;;		None
  4017 ;; Return value:  Size  Location     Type
  4018 ;;                  1    wreg      unsigned char 
  4019 ;; Registers used:
  4020 ;;		wreg, status,2, status,0
  4021 ;; Tracked objects:
  4022 ;;		On entry : 0/0
  4023 ;;		On exit  : 0/0
  4024 ;;		Unchanged: 0/0
  4025 ;; Data sizes:     COMRAM   BANK0   BANK1
  4026 ;;      Params:         0       0       0
  4027 ;;      Locals:         1       0       0
  4028 ;;      Temps:          0       0       0
  4029 ;;      Totals:         1       0       0
  4030 ;;Total ram usage:        1 bytes
  4031 ;; Hardware stack levels used: 1
  4032 ;; Hardware stack levels required when called: 2
  4033 ;; This function calls:
  4034 ;;		Nothing
  4035 ;; This function is called by:
  4036 ;;		_menuMotor
  4037 ;;		_timeMotor
  4038 ;; This function uses a non-reentrant model
  4039 ;;
  4040                           
  4041                           	psect	text18
  4042  001FDE                     __ptext18:
  4043                           	callstack 0
  4044  001FDE                     _isPressed:
  4045                           	callstack 27
  4046                           
  4047                           ;keypad.c: 209:  return pressed && (stateSMS == 1||stateSMS == 4);
  4048                           
  4049                           ;incstack = 0
  4050  001FDE  6A5E               	clrf	_isPressed$638^0,c
  4051  001FE0  5040               	movf	_pressed^0,w,c
  4052  001FE2  E007               	bz	l195
  4053  001FE4  043C               	decf	_stateSMS^0,w,c
  4054  001FE6  E003               	bz	u3040
  4055  001FE8  0E04               	movlw	4
  4056  001FEA  183C               	xorwf	_stateSMS^0,w,c
  4057  001FEC  E102               	bnz	l195
  4058  001FEE                     u3040:
  4059  001FEE  0E01               	movlw	1
  4060  001FF0  6E5E               	movwf	_isPressed$638^0,c
  4061  001FF2                     l195:
  4062  001FF2  505E               	movf	_isPressed$638^0,w,c
  4063  001FF4  0012               	return		;funcret
  4064  001FF6                     __end_of_isPressed:
  4065                           	callstack 0
  4066                           
  4067 ;; *************** function _incrementPosition *****************
  4068 ;; Defined at:
  4069 ;;		line 372 in file "EEPROM.c"
  4070 ;; Parameters:    Size  Location     Type
  4071 ;;		None
  4072 ;; Auto vars:     Size  Location     Type
  4073 ;;		None
  4074 ;; Return value:  Size  Location     Type
  4075 ;;                  1    wreg      void 
  4076 ;; Registers used:
  4077 ;;		status,2, status,0
  4078 ;; Tracked objects:
  4079 ;;		On entry : 0/0
  4080 ;;		On exit  : 0/0
  4081 ;;		Unchanged: 0/0
  4082 ;; Data sizes:     COMRAM   BANK0   BANK1
  4083 ;;      Params:         0       0       0
  4084 ;;      Locals:         0       0       0
  4085 ;;      Temps:          0       0       0
  4086 ;;      Totals:         0       0       0
  4087 ;;Total ram usage:        0 bytes
  4088 ;; Hardware stack levels used: 1
  4089 ;; Hardware stack levels required when called: 2
  4090 ;; This function calls:
  4091 ;;		Nothing
  4092 ;; This function is called by:
  4093 ;;		_menuMotor
  4094 ;; This function uses a non-reentrant model
  4095 ;;
  4096                           
  4097                           	psect	text19
  4098  000178                     __ptext19:
  4099                           	callstack 0
  4100  000178                     _incrementPosition:
  4101                           	callstack 27
  4102                           
  4103                           ;EEPROM.c: 373:     position++;
  4104                           
  4105                           ;incstack = 0
  4106  000178  2A1F               	incf	_position^0,f,c
  4107  00017A  0012               	return		;funcret
  4108  00017C                     __end_of_incrementPosition:
  4109                           	callstack 0
  4110                           
  4111 ;; *************** function _getPresses *****************
  4112 ;; Defined at:
  4113 ;;		line 242 in file "keypad.c"
  4114 ;; Parameters:    Size  Location     Type
  4115 ;;		None
  4116 ;; Auto vars:     Size  Location     Type
  4117 ;;		None
  4118 ;; Return value:  Size  Location     Type
  4119 ;;                  1    wreg      unsigned char 
  4120 ;; Registers used:
  4121 ;;		wreg, status,2
  4122 ;; Tracked objects:
  4123 ;;		On entry : 0/0
  4124 ;;		On exit  : 0/0
  4125 ;;		Unchanged: 0/0
  4126 ;; Data sizes:     COMRAM   BANK0   BANK1
  4127 ;;      Params:         0       0       0
  4128 ;;      Locals:         0       0       0
  4129 ;;      Temps:          0       0       0
  4130 ;;      Totals:         0       0       0
  4131 ;;Total ram usage:        0 bytes
  4132 ;; Hardware stack levels used: 1
  4133 ;; Hardware stack levels required when called: 2
  4134 ;; This function calls:
  4135 ;;		Nothing
  4136 ;; This function is called by:
  4137 ;;		_menuMotor
  4138 ;; This function uses a non-reentrant model
  4139 ;;
  4140                           
  4141                           	psect	text20
  4142  00017C                     __ptext20:
  4143                           	callstack 0
  4144  00017C                     _getPresses:
  4145                           	callstack 27
  4146                           
  4147                           ;keypad.c: 243:     return available;
  4148                           
  4149                           ;incstack = 0
  4150  00017C  503E               	movf	_available^0,w,c
  4151  00017E  0012               	return		;funcret
  4152  000180                     __end_of_getPresses:
  4153                           	callstack 0
  4154                           
  4155 ;; *************** function _displayTimeRemaining *****************
  4156 ;; Defined at:
  4157 ;;		line 466 in file "time.c"
  4158 ;; Parameters:    Size  Location     Type
  4159 ;;		None
  4160 ;; Auto vars:     Size  Location     Type
  4161 ;;		None
  4162 ;; Return value:  Size  Location     Type
  4163 ;;                  1    wreg      void 
  4164 ;; Registers used:
  4165 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4166 ;; Tracked objects:
  4167 ;;		On entry : 0/0
  4168 ;;		On exit  : 0/0
  4169 ;;		Unchanged: 0/0
  4170 ;; Data sizes:     COMRAM   BANK0   BANK1
  4171 ;;      Params:         0       0       0
  4172 ;;      Locals:         0       0       0
  4173 ;;      Temps:          0       0       0
  4174 ;;      Totals:         0       0       0
  4175 ;;Total ram usage:        0 bytes
  4176 ;; Hardware stack levels used: 1
  4177 ;; Hardware stack levels required when called: 5
  4178 ;; This function calls:
  4179 ;;		_LcGotoXY
  4180 ;; This function is called by:
  4181 ;;		_menuMotor
  4182 ;; This function uses a non-reentrant model
  4183 ;;
  4184                           
  4185                           	psect	text21
  4186  000076                     __ptext21:
  4187                           	callstack 0
  4188  000076                     _displayTimeRemaining:
  4189                           	callstack 24
  4190                           
  4191                           ;time.c: 467:     game = 1;
  4192                           
  4193                           ;incstack = 0
  4194  000076  0E01               	movlw	1
  4195  000078  6E12               	movwf	_game^0,c
  4196                           
  4197                           ;time.c: 468:     LcGotoXY(11,0);
  4198  00007A  0E00               	movlw	0
  4199  00007C  6E66               	movwf	LcGotoXY@Row^0,c
  4200  00007E  0E0B               	movlw	11
  4201  000080  ECA4  F00E         	call	_LcGotoXY
  4202                           
  4203                           ;time.c: 469:     state = 20;
  4204  000084  EF97  F000         	goto	PL80	;call to abstracted procedure
  4205  000088                     __end_of_displayTimeRemaining:
  4206                           	callstack 0
  4207                           
  4208 ;; *************** function _displaySysTime *****************
  4209 ;; Defined at:
  4210 ;;		line 501 in file "time.c"
  4211 ;; Parameters:    Size  Location     Type
  4212 ;;		None
  4213 ;; Auto vars:     Size  Location     Type
  4214 ;;		None
  4215 ;; Return value:  Size  Location     Type
  4216 ;;                  1    wreg      void 
  4217 ;; Registers used:
  4218 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4219 ;; Tracked objects:
  4220 ;;		On entry : 0/0
  4221 ;;		On exit  : 0/0
  4222 ;;		Unchanged: 0/0
  4223 ;; Data sizes:     COMRAM   BANK0   BANK1
  4224 ;;      Params:         0       0       0
  4225 ;;      Locals:         0       0       0
  4226 ;;      Temps:          0       0       0
  4227 ;;      Totals:         0       0       0
  4228 ;;Total ram usage:        0 bytes
  4229 ;; Hardware stack levels used: 1
  4230 ;; Hardware stack levels required when called: 5
  4231 ;; This function calls:
  4232 ;;		_LcGotoXY
  4233 ;; This function is called by:
  4234 ;;		_menuMotor
  4235 ;; This function uses a non-reentrant model
  4236 ;;
  4237                           
  4238                           	psect	text22
  4239  0000E2                     __ptext22:
  4240                           	callstack 0
  4241  0000E2                     _displaySysTime:
  4242                           	callstack 24
  4243                           
  4244                           ;time.c: 502:     state = 30;
  4245                           
  4246                           ;incstack = 0
  4247  0000E2  0E1E               	movlw	30
  4248                           
  4249                           ;time.c: 503:     LcGotoXY(0,1);
  4250  0000E4  ECE6  F008         	call	PL58	;call to abstracted procedure
  4251  0000E8  EFA4  F00E         	goto	_LcGotoXY
  4252  0000EC                     __end_of_displaySysTime:
  4253                           	callstack 0
  4254                           
  4255 ;; *************** function _displayString *****************
  4256 ;; Defined at:
  4257 ;;		line 444 in file "Menu.c"
  4258 ;; Parameters:    Size  Location     Type
  4259 ;;  string          1   19[COMRAM] PTR unsigned char 
  4260 ;;		 -> sysTime(14), modifyTimeString(13), TIME(16), LOGREGSCREEN(12), 
  4261 ;;		 -> LOGINMENU(22), 
  4262 ;; Auto vars:     Size  Location     Type
  4263 ;;		None
  4264 ;; Return value:  Size  Location     Type
  4265 ;;                  1    wreg      void 
  4266 ;; Registers used:
  4267 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4268 ;; Tracked objects:
  4269 ;;		On entry : 0/0
  4270 ;;		On exit  : 0/0
  4271 ;;		Unchanged: 0/0
  4272 ;; Data sizes:     COMRAM   BANK0   BANK1
  4273 ;;      Params:         1       0       0
  4274 ;;      Locals:         0       0       0
  4275 ;;      Temps:          0       0       0
  4276 ;;      Totals:         1       0       0
  4277 ;;Total ram usage:        1 bytes
  4278 ;; Hardware stack levels used: 1
  4279 ;; Hardware stack levels required when called: 6
  4280 ;; This function calls:
  4281 ;;		_LcPutChar
  4282 ;;		_nextRow
  4283 ;; This function is called by:
  4284 ;;		_menuMotor
  4285 ;; This function uses a non-reentrant model
  4286 ;;
  4287                           
  4288                           	psect	text23
  4289  001DA2                     __ptext23:
  4290                           	callstack 0
  4291  001DA2                     _displayString:
  4292                           	callstack 0
  4293                           
  4294                           ;Menu.c: 445:     if (string[LCDcol+LCDcolm] != '\0'){
  4295                           
  4296                           ;incstack = 0
  4297  001DA2  D810               	call	PL52	;call to abstracted procedure
  4298  001DA4  6ED9               	movwf	fsr2l,c
  4299  001DA6  6ADA               	clrf	fsr2h,c
  4300  001DA8  50DF               	movf	indf2,w,c
  4301  001DAA  E102 EF54  F000    	bz	_nextRow
  4302                           
  4303                           ;Menu.c: 446:         LcPutChar(string[LCDcol+LCDcolm]);
  4304  001DB0  D809               	call	PL52	;call to abstracted procedure
  4305  001DB2  D804               	call	PL36	;call to abstracted procedure
  4306  001DB4  ECE6  F00E         	call	_LcPutChar
  4307                           
  4308                           ;Menu.c: 447:         LCDcol++;
  4309  001DB8  2A33               	incf	_LCDcol^0,f,c
  4310                           
  4311                           ;Menu.c: 448:     } else {
  4312  001DBA  0012               	return	
  4313  001DBC                     __end_of_displayString:
  4314                           	callstack 0
  4315  001DBC                     PL36:
  4316                           	callstack 23
  4317  001DBC  6ED9               	movwf	fsr2l,c
  4318  001DBE  6ADA               	clrf	fsr2h,c
  4319  001DC0  50DF               	movf	indf2,w,c
  4320  001DC2  0012               	return	
  4321  001DC4                     __end_ofPL36:
  4322                           	callstack 0
  4323  001DC4                     PL52:
  4324                           	callstack 23
  4325  001DC4  506C               	movf	displayString@string^0,w,c
  4326  001DC6  2433               	addwf	_LCDcol^0,w,c
  4327  001DC8  2432               	addwf	_LCDcolm^0,w,c
  4328  001DCA  0012               	return	
  4329  001DCC                     __end_ofPL52:
  4330                           	callstack 0
  4331                           
  4332 ;; *************** function _displayScoresMarquee *****************
  4333 ;; Defined at:
  4334 ;;		line 289 in file "EEPROM.c"
  4335 ;; Parameters:    Size  Location     Type
  4336 ;;		None
  4337 ;; Auto vars:     Size  Location     Type
  4338 ;;		None
  4339 ;; Return value:  Size  Location     Type
  4340 ;;                  1    wreg      void 
  4341 ;; Registers used:
  4342 ;;		wreg, status,2
  4343 ;; Tracked objects:
  4344 ;;		On entry : 0/0
  4345 ;;		On exit  : 0/0
  4346 ;;		Unchanged: 0/0
  4347 ;; Data sizes:     COMRAM   BANK0   BANK1
  4348 ;;      Params:         0       0       0
  4349 ;;      Locals:         0       0       0
  4350 ;;      Temps:          0       0       0
  4351 ;;      Totals:         0       0       0
  4352 ;;Total ram usage:        0 bytes
  4353 ;; Hardware stack levels used: 1
  4354 ;; Hardware stack levels required when called: 2
  4355 ;; This function calls:
  4356 ;;		Nothing
  4357 ;; This function is called by:
  4358 ;;		_menuMotor
  4359 ;; This function uses a non-reentrant model
  4360 ;;
  4361                           
  4362                           	psect	text24
  4363  000134                     __ptext24:
  4364                           	callstack 0
  4365  000134                     _displayScoresMarquee:
  4366                           	callstack 27
  4367                           
  4368                           ;EEPROM.c: 290:     state = 50;
  4369                           
  4370                           ;incstack = 0
  4371  000134  0E32               	movlw	50
  4372  000136  6E1E               	movwf	_state@EEPROM$F1761^0,c
  4373                           
  4374                           ;EEPROM.c: 291:     status = 0;
  4375  000138  6A1C               	clrf	_status^0,c
  4376  00013A  0012               	return		;funcret
  4377  00013C                     __end_of_displayScoresMarquee:
  4378                           	callstack 0
  4379                           
  4380 ;; *************** function _displayResults *****************
  4381 ;; Defined at:
  4382 ;;		line 487 in file "Menu.c"
  4383 ;; Parameters:    Size  Location     Type
  4384 ;;		None
  4385 ;; Auto vars:     Size  Location     Type
  4386 ;;		None
  4387 ;; Return value:  Size  Location     Type
  4388 ;;                  1    wreg      void 
  4389 ;; Registers used:
  4390 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4391 ;; Tracked objects:
  4392 ;;		On entry : 0/0
  4393 ;;		On exit  : 0/0
  4394 ;;		Unchanged: 0/0
  4395 ;; Data sizes:     COMRAM   BANK0   BANK1
  4396 ;;      Params:         0       0       0
  4397 ;;      Locals:         0       0       0
  4398 ;;      Temps:          0       0       0
  4399 ;;      Totals:         0       0       0
  4400 ;;Total ram usage:        0 bytes
  4401 ;; Hardware stack levels used: 1
  4402 ;; Hardware stack levels required when called: 6
  4403 ;; This function calls:
  4404 ;;		_LcPutChar
  4405 ;;		_nextRow
  4406 ;; This function is called by:
  4407 ;;		_menuMotor
  4408 ;; This function uses a non-reentrant model
  4409 ;;
  4410                           
  4411                           	psect	text25
  4412  001DF6                     __ptext25:
  4413                           	callstack 0
  4414  001DF6                     _displayResults:
  4415                           	callstack 0
  4416                           
  4417                           ;Menu.c: 488:     if (RESULTS[LCDrow][LCDcol] != '\0'){
  4418                           
  4419                           ;incstack = 0
  4420  001DF6  D80D               	call	PL40	;call to abstracted procedure
  4421  001DF8  6ED9               	movwf	fsr2l,c
  4422  001DFA  6ADA               	clrf	fsr2h,c
  4423  001DFC  50DF               	movf	indf2,w,c
  4424  001DFE  E102 EF54  F000    	bz	_nextRow
  4425                           
  4426                           ;Menu.c: 489:         LcPutChar(RESULTS[LCDrow][LCDcol]);
  4427  001E04  D806               	call	PL40	;call to abstracted procedure
  4428  001E06  ECDE  F00E         	call	PL36	;call to abstracted procedure
  4429  001E0A  ECE6  F00E         	call	_LcPutChar
  4430                           
  4431                           ;Menu.c: 490:         LCDcol++;
  4432  001E0E  2A33               	incf	_LCDcol^0,f,c
  4433                           
  4434                           ;Menu.c: 491:     } else {
  4435  001E10  0012               	return	
  4436  001E12                     __end_of_displayResults:
  4437                           	callstack 0
  4438  001E12                     PL40:
  4439                           	callstack 23
  4440  001E12  5034               	movf	_LCDrow^0,w,c
  4441  001E14  0D0B               	mullw	11
  4442  001E16  50F3               	movf	243,w,c
  4443  001E18  0F80               	addlw	low _RESULTS
  4444  001E1A  2433               	addwf	_LCDcol^0,w,c
  4445  001E1C  0012               	return	
  4446  001E1E                     __end_ofPL40:
  4447                           	callstack 0
  4448                           
  4449 ;; *************** function _displayLogOut *****************
  4450 ;; Defined at:
  4451 ;;		line 496 in file "Menu.c"
  4452 ;; Parameters:    Size  Location     Type
  4453 ;;		None
  4454 ;; Auto vars:     Size  Location     Type
  4455 ;;		None
  4456 ;; Return value:  Size  Location     Type
  4457 ;;                  1    wreg      void 
  4458 ;; Registers used:
  4459 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4460 ;; Tracked objects:
  4461 ;;		On entry : 0/0
  4462 ;;		On exit  : 0/0
  4463 ;;		Unchanged: 0/0
  4464 ;; Data sizes:     COMRAM   BANK0   BANK1
  4465 ;;      Params:         0       0       0
  4466 ;;      Locals:         0       0       0
  4467 ;;      Temps:          0       0       0
  4468 ;;      Totals:         0       0       0
  4469 ;;Total ram usage:        0 bytes
  4470 ;; Hardware stack levels used: 1
  4471 ;; Hardware stack levels required when called: 6
  4472 ;; This function calls:
  4473 ;;		_LcPutChar
  4474 ;;		_nextRow
  4475 ;; This function is called by:
  4476 ;;		_menuMotor
  4477 ;; This function uses a non-reentrant model
  4478 ;;
  4479                           
  4480                           	psect	text26
  4481  001BC8                     __ptext26:
  4482                           	callstack 0
  4483  001BC8                     _displayLogOut:
  4484                           	callstack 23
  4485                           
  4486                           ;Menu.c: 497:     if (LOGOUTMESSAGE[LCDcol] != '\0'){
  4487                           
  4488                           ;incstack = 0
  4489  001BC8  5033               	movf	_LCDcol^0,w,c
  4490  001BCA  0F96               	addlw	low _LOGOUTMESSAGE
  4491  001BCC  6ED9               	movwf	fsr2l,c
  4492  001BCE  6ADA               	clrf	fsr2h,c
  4493  001BD0  50DF               	movf	indf2,w,c
  4494  001BD2  E008               	bz	l6037
  4495                           
  4496                           ;Menu.c: 498:         LcPutChar(LOGOUTMESSAGE[LCDcol]);
  4497  001BD4  5033               	movf	_LCDcol^0,w,c
  4498  001BD6  0F96               	addlw	low _LOGOUTMESSAGE
  4499  001BD8  ECDE  F00E         	call	PL36	;call to abstracted procedure
  4500  001BDC  ECE6  F00E         	call	_LcPutChar
  4501                           
  4502                           ;Menu.c: 499:         LCDcol++;
  4503  001BE0  2A33               	incf	_LCDcol^0,f,c
  4504                           
  4505                           ;Menu.c: 500:     } else if (mUser.username[LCDcolm] != '\0' && LCDcolm < 8) {
  4506  001BE2  0012               	return	
  4507  001BE4                     l6037:
  4508  001BE4  5032               	movf	_LCDcolm^0,w,c
  4509  001BE6  ECAE  F004         	call	PL34	;call to abstracted procedure
  4510  001BEA  E102 EF54  F000    	bz	_nextRow
  4511  001BF0  0E08               	movlw	8
  4512  001BF2  6032               	cpfslt	_LCDcolm^0,c
  4513  001BF4  EF54  F000         	goto	_nextRow
  4514                           
  4515                           ;Menu.c: 501:         LcPutChar(mUser.username[LCDcolm]);
  4516  001BF8  5032               	movf	_LCDcolm^0,w,c
  4517  001BFA  ECAE  F004         	call	PL34	;call to abstracted procedure
  4518  001BFE  ECE6  F00E         	call	_LcPutChar
  4519                           
  4520                           ;Menu.c: 502:         LCDcolm++;
  4521  001C02  2A32               	incf	_LCDcolm^0,f,c
  4522                           
  4523                           ;Menu.c: 503:     } else {
  4524  001C04  0012               	return	
  4525  001C06                     __end_of_displayLogOut:
  4526                           	callstack 0
  4527                           
  4528 ;; *************** function _displayError *****************
  4529 ;; Defined at:
  4530 ;;		line 473 in file "Menu.c"
  4531 ;; Parameters:    Size  Location     Type
  4532 ;;		None
  4533 ;; Auto vars:     Size  Location     Type
  4534 ;;		None
  4535 ;; Return value:  Size  Location     Type
  4536 ;;                  1    wreg      void 
  4537 ;; Registers used:
  4538 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4539 ;; Tracked objects:
  4540 ;;		On entry : 0/0
  4541 ;;		On exit  : 0/0
  4542 ;;		Unchanged: 0/0
  4543 ;; Data sizes:     COMRAM   BANK0   BANK1
  4544 ;;      Params:         0       0       0
  4545 ;;      Locals:         0       0       0
  4546 ;;      Temps:          0       0       0
  4547 ;;      Totals:         0       0       0
  4548 ;;Total ram usage:        0 bytes
  4549 ;; Hardware stack levels used: 1
  4550 ;; Hardware stack levels required when called: 6
  4551 ;; This function calls:
  4552 ;;		_LcPutChar
  4553 ;;		_nextRow
  4554 ;; This function is called by:
  4555 ;;		_menuMotor
  4556 ;; This function uses a non-reentrant model
  4557 ;;
  4558                           
  4559                           	psect	text27
  4560  001C7C                     __ptext27:
  4561                           	callstack 0
  4562  001C7C                     _displayError:
  4563                           	callstack 23
  4564                           
  4565                           ;Menu.c: 474:     if (LCDrow == 0){
  4566                           
  4567                           ;incstack = 0
  4568  001C7C  5034               	movf	_LCDrow^0,w,c
  4569  001C7E  E110               	bnz	l5999
  4570                           
  4571                           ;Menu.c: 475:        if (ERROR[LCDcol] != '\0'){
  4572  001C80  5033               	movf	_LCDcol^0,w,c
  4573  001C82  0F9F               	addlw	low _ERROR
  4574  001C84  6ED9               	movwf	fsr2l,c
  4575  001C86  6ADA               	clrf	fsr2h,c
  4576  001C88  50DF               	movf	indf2,w,c
  4577  001C8A  E102 EF54  F000    	bz	_nextRow
  4578                           
  4579                           ;Menu.c: 476:             LcPutChar(ERROR[LCDcol]);
  4580  001C90  5033               	movf	_LCDcol^0,w,c
  4581  001C92  0F9F               	addlw	low _ERROR
  4582  001C94  ECDE  F00E         	call	PL36	;call to abstracted procedure
  4583  001C98  ECE6  F00E         	call	_LcPutChar
  4584                           
  4585                           ;Menu.c: 477:             LCDcol++;
  4586  001C9C  2A33               	incf	_LCDcol^0,f,c
  4587                           
  4588                           ;Menu.c: 478:         } else {
  4589  001C9E  0012               	return	
  4590  001CA0                     l5999:
  4591                           
  4592                           ;Menu.c: 482:         LcPutChar(val);
  4593  001CA0  5031               	movf	_val^0,w,c
  4594  001CA2  ECE6  F00E         	call	_LcPutChar
  4595                           
  4596                           ;Menu.c: 483:         LcPutChar(LCDcolm);
  4597  001CA6  5032               	movf	_LCDcolm^0,w,c
  4598  001CA8  ECE6  F00E         	call	_LcPutChar
  4599                           
  4600                           ;Menu.c: 484:         LCDrow++;
  4601  001CAC  2A34               	incf	_LCDrow^0,f,c
  4602  001CAE  0012               	return		;funcret
  4603  001CB0                     __end_of_displayError:
  4604                           	callstack 0
  4605                           
  4606 ;; *************** function _nextRow *****************
  4607 ;; Defined at:
  4608 ;;		line 508 in file "Menu.c"
  4609 ;; Parameters:    Size  Location     Type
  4610 ;;		None
  4611 ;; Auto vars:     Size  Location     Type
  4612 ;;		None
  4613 ;; Return value:  Size  Location     Type
  4614 ;;                  1    wreg      void 
  4615 ;; Registers used:
  4616 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4617 ;; Tracked objects:
  4618 ;;		On entry : 0/0
  4619 ;;		On exit  : 0/0
  4620 ;;		Unchanged: 0/0
  4621 ;; Data sizes:     COMRAM   BANK0   BANK1
  4622 ;;      Params:         0       0       0
  4623 ;;      Locals:         0       0       0
  4624 ;;      Temps:          0       0       0
  4625 ;;      Totals:         0       0       0
  4626 ;;Total ram usage:        0 bytes
  4627 ;; Hardware stack levels used: 1
  4628 ;; Hardware stack levels required when called: 5
  4629 ;; This function calls:
  4630 ;;		_LcGotoXY
  4631 ;; This function is called by:
  4632 ;;		_displayString
  4633 ;;		_mainMenu
  4634 ;;		_displayError
  4635 ;;		_displayResults
  4636 ;;		_displayLogOut
  4637 ;; This function uses a non-reentrant model
  4638 ;;
  4639                           
  4640                           	psect	text28
  4641  0000A8                     __ptext28:
  4642                           	callstack 0
  4643  0000A8                     _nextRow:
  4644                           	callstack 23
  4645                           
  4646                           ;Menu.c: 509:     LCDrow++;
  4647                           
  4648                           ;incstack = 0
  4649  0000A8  2A34               	incf	_LCDrow^0,f,c
  4650                           
  4651                           ;Menu.c: 510:     LcGotoXY(0,1);
  4652  0000AA  ECEA  F008         	call	PL60	;call to abstracted procedure
  4653  0000AE  ECA4  F00E         	call	_LcGotoXY
  4654                           
  4655                           ;Menu.c: 511:     LCDcol = 0;
  4656  0000B2  6A33               	clrf	_LCDcol^0,c
  4657  0000B4  0012               	return		;funcret
  4658  0000B6                     __end_of_nextRow:
  4659                           	callstack 0
  4660                           
  4661 ;; *************** function _SiRecievedByte *****************
  4662 ;; Defined at:
  4663 ;;		line 45 in file "SIO.c"
  4664 ;; Parameters:    Size  Location     Type
  4665 ;;		None
  4666 ;; Auto vars:     Size  Location     Type
  4667 ;;		None
  4668 ;; Return value:  Size  Location     Type
  4669 ;;                  1    wreg      unsigned char 
  4670 ;; Registers used:
  4671 ;;		wreg
  4672 ;; Tracked objects:
  4673 ;;		On entry : 0/0
  4674 ;;		On exit  : 0/0
  4675 ;;		Unchanged: 0/0
  4676 ;; Data sizes:     COMRAM   BANK0   BANK1
  4677 ;;      Params:         0       0       0
  4678 ;;      Locals:         0       0       0
  4679 ;;      Temps:          0       0       0
  4680 ;;      Totals:         0       0       0
  4681 ;;Total ram usage:        0 bytes
  4682 ;; Hardware stack levels used: 1
  4683 ;; Hardware stack levels required when called: 2
  4684 ;; This function calls:
  4685 ;;		Nothing
  4686 ;; This function is called by:
  4687 ;;		_menuMotor
  4688 ;; This function uses a non-reentrant model
  4689 ;;
  4690                           
  4691                           	psect	text29
  4692  000164                     __ptext29:
  4693                           	callstack 0
  4694  000164                     _SiRecievedByte:
  4695                           	callstack 27
  4696                           
  4697                           ;SIO.c: 46:     return PIR1bits.RCIF;
  4698                           
  4699                           ;incstack = 0
  4700  000164  BA9E               	btfsc	158,5,c	;volatile
  4701  000166  0C01               	retlw	1
  4702  000168  0C00               	retlw	0	;funcret
  4703  00016A                     __end_of_SiRecievedByte:
  4704                           	callstack 0
  4705                           
  4706 ;; *************** function _SiReadByte *****************
  4707 ;; Defined at:
  4708 ;;		line 49 in file "SIO.c"
  4709 ;; Parameters:    Size  Location     Type
  4710 ;;		None
  4711 ;; Auto vars:     Size  Location     Type
  4712 ;;		None
  4713 ;; Return value:  Size  Location     Type
  4714 ;;                  1    wreg      unsigned char 
  4715 ;; Registers used:
  4716 ;;		wreg, status,2
  4717 ;; Tracked objects:
  4718 ;;		On entry : 0/0
  4719 ;;		On exit  : 0/0
  4720 ;;		Unchanged: 0/0
  4721 ;; Data sizes:     COMRAM   BANK0   BANK1
  4722 ;;      Params:         0       0       0
  4723 ;;      Locals:         0       0       0
  4724 ;;      Temps:          0       0       0
  4725 ;;      Totals:         0       0       0
  4726 ;;Total ram usage:        0 bytes
  4727 ;; Hardware stack levels used: 1
  4728 ;; Hardware stack levels required when called: 2
  4729 ;; This function calls:
  4730 ;;		Nothing
  4731 ;; This function is called by:
  4732 ;;		_menuMotor
  4733 ;; This function uses a non-reentrant model
  4734 ;;
  4735                           
  4736                           	psect	text30
  4737  000180                     __ptext30:
  4738                           	callstack 0
  4739  000180                     _SiReadByte:
  4740                           	callstack 27
  4741                           
  4742                           ;SIO.c: 50:     return RCREG;
  4743                           
  4744                           ;incstack = 0
  4745  000180  50AE               	movf	174,w,c	;volatile
  4746  000182  0012               	return		;funcret
  4747  000184                     __end_of_SiReadByte:
  4748                           	callstack 0
  4749                           
  4750 ;; *************** function _LcCursorOn *****************
  4751 ;; Defined at:
  4752 ;;		line 112 in file "LcTLCD.c"
  4753 ;; Parameters:    Size  Location     Type
  4754 ;;		None
  4755 ;; Auto vars:     Size  Location     Type
  4756 ;;		None
  4757 ;; Return value:  Size  Location     Type
  4758 ;;                  1    wreg      void 
  4759 ;; Registers used:
  4760 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4761 ;; Tracked objects:
  4762 ;;		On entry : 0/0
  4763 ;;		On exit  : 0/0
  4764 ;;		Unchanged: 0/0
  4765 ;; Data sizes:     COMRAM   BANK0   BANK1
  4766 ;;      Params:         0       0       0
  4767 ;;      Locals:         0       0       0
  4768 ;;      Temps:          0       0       0
  4769 ;;      Totals:         0       0       0
  4770 ;;Total ram usage:        0 bytes
  4771 ;; Hardware stack levels used: 1
  4772 ;; Hardware stack levels required when called: 4
  4773 ;; This function calls:
  4774 ;;		_CantaIR
  4775 ;;		_WaitForBusy
  4776 ;; This function is called by:
  4777 ;;		_menuMotor
  4778 ;;		_timeMotor
  4779 ;; This function uses a non-reentrant model
  4780 ;;
  4781                           
  4782                           	psect	text31
  4783  0000EC                     __ptext31:
  4784                           	callstack 0
  4785  0000EC                     _LcCursorOn:
  4786                           	callstack 25
  4787                           
  4788                           ;LcTLCD.c: 115:  WaitForBusy();
  4789                           
  4790                           ;incstack = 0
  4791  0000EC  EC03  F00E         	call	_WaitForBusy	;wreg free
  4792                           
  4793                           ;LcTLCD.c: 116:  CantaIR(0x08 | 0x04 | 0x02);
  4794  0000F0  0E0E               	movlw	14
  4795  0000F2  EFBB  F00F         	goto	_CantaIR
  4796  0000F6                     __end_of_LcCursorOn:
  4797                           	callstack 0
  4798                           
  4799 ;; *************** function _LcCursorOff *****************
  4800 ;; Defined at:
  4801 ;;		line 119 in file "LcTLCD.c"
  4802 ;; Parameters:    Size  Location     Type
  4803 ;;		None
  4804 ;; Auto vars:     Size  Location     Type
  4805 ;;		None
  4806 ;; Return value:  Size  Location     Type
  4807 ;;                  1    wreg      void 
  4808 ;; Registers used:
  4809 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4810 ;; Tracked objects:
  4811 ;;		On entry : 0/0
  4812 ;;		On exit  : 0/0
  4813 ;;		Unchanged: 0/0
  4814 ;; Data sizes:     COMRAM   BANK0   BANK1
  4815 ;;      Params:         0       0       0
  4816 ;;      Locals:         0       0       0
  4817 ;;      Temps:          0       0       0
  4818 ;;      Totals:         0       0       0
  4819 ;;Total ram usage:        0 bytes
  4820 ;; Hardware stack levels used: 1
  4821 ;; Hardware stack levels required when called: 4
  4822 ;; This function calls:
  4823 ;;		_CantaIR
  4824 ;;		_WaitForBusy
  4825 ;; This function is called by:
  4826 ;;		_menuMotor
  4827 ;; This function uses a non-reentrant model
  4828 ;;
  4829                           
  4830                           	psect	text32
  4831  0000F6                     __ptext32:
  4832                           	callstack 0
  4833  0000F6                     _LcCursorOff:
  4834                           	callstack 25
  4835                           
  4836                           ;LcTLCD.c: 122:  WaitForBusy();
  4837                           
  4838                           ;incstack = 0
  4839  0000F6  EC03  F00E         	call	_WaitForBusy	;wreg free
  4840                           
  4841                           ;LcTLCD.c: 123:  CantaIR(0x08 | 0x04);
  4842  0000FA  0E0C               	movlw	12
  4843  0000FC  EFBB  F00F         	goto	_CantaIR
  4844  000100                     __end_of_LcCursorOff:
  4845                           	callstack 0
  4846                           
  4847 ;; *************** function _KeSetMode *****************
  4848 ;; Defined at:
  4849 ;;		line 247 in file "keypad.c"
  4850 ;; Parameters:    Size  Location     Type
  4851 ;;  menuMode        1    wreg     unsigned char 
  4852 ;; Auto vars:     Size  Location     Type
  4853 ;;  menuMode        1    6[COMRAM] unsigned char 
  4854 ;; Return value:  Size  Location     Type
  4855 ;;                  1    wreg      void 
  4856 ;; Registers used:
  4857 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4858 ;; Tracked objects:
  4859 ;;		On entry : 0/0
  4860 ;;		On exit  : 0/0
  4861 ;;		Unchanged: 0/0
  4862 ;; Data sizes:     COMRAM   BANK0   BANK1
  4863 ;;      Params:         0       0       0
  4864 ;;      Locals:         1       0       0
  4865 ;;      Temps:          0       0       0
  4866 ;;      Totals:         1       0       0
  4867 ;;Total ram usage:        1 bytes
  4868 ;; Hardware stack levels used: 1
  4869 ;; Hardware stack levels required when called: 3
  4870 ;; This function calls:
  4871 ;;		_TiResetTics
  4872 ;; This function is called by:
  4873 ;;		_menuMotor
  4874 ;; This function uses a non-reentrant model
  4875 ;;
  4876                           
  4877                           	psect	text33
  4878  001E6A                     __ptext33:
  4879                           	callstack 0
  4880  001E6A                     _KeSetMode:
  4881                           	callstack 26
  4882                           
  4883                           ;incstack = 0
  4884                           ;KeSetMode@menuMode stored from wreg
  4885  001E6A  6E5F               	movwf	KeSetMode@menuMode^0,c
  4886                           
  4887                           ;keypad.c: 248:     if (menuMode == 1){
  4888  001E6C  045F               	decf	KeSetMode@menuMode^0,w,c
  4889  001E6E  E108               	bnz	l5931
  4890                           
  4891                           ;keypad.c: 249:         previous = 0;
  4892  001E70  6A41               	clrf	_previous^0,c
  4893                           
  4894                           ;keypad.c: 250:         numPresses = 0;
  4895  001E72  6A3F               	clrf	_numPresses^0,c
  4896                           
  4897                           ;keypad.c: 251:         available = 0;
  4898  001E74  6A3E               	clrf	_available^0,c
  4899                           
  4900                           ;keypad.c: 252:         stateSMS = 2;
  4901  001E76  0E02               	movlw	2
  4902  001E78  6E3C               	movwf	_stateSMS^0,c
  4903                           
  4904                           ;keypad.c: 253:         TiResetTics(timer_SMS);
  4905  001E7A  5043               	movf	_timer_SMS^0,w,c
  4906  001E7C  EFAB  F00F         	goto	_TiResetTics
  4907  001E80                     l5931:
  4908  001E80  505F               	movf	KeSetMode@menuMode^0,w,c
  4909  001E82  A4D8               	btfss	status,2,c
  4910  001E84  0012               	return	
  4911                           
  4912                           ;keypad.c: 255:         stateSMS = 4;
  4913  001E86  D000               	goto	PL86	;call to abstracted procedure
  4914  001E88                     __end_of_KeSetMode:
  4915                           	callstack 0
  4916  001E88                     PL86:
  4917                           	callstack 26
  4918  001E88  0E04               	movlw	4
  4919  001E8A  6E3C               	movwf	_stateSMS^0,c
  4920  001E8C  0C04               	retlw	4
  4921  001E8E                     __end_ofPL86:
  4922                           	callstack 0
  4923                           
  4924 ;; *************** function _KeGetCharValue *****************
  4925 ;; Defined at:
  4926 ;;		line 221 in file "keypad.c"
  4927 ;; Parameters:    Size  Location     Type
  4928 ;;		None
  4929 ;; Auto vars:     Size  Location     Type
  4930 ;;		None
  4931 ;; Return value:  Size  Location     Type
  4932 ;;                  1    wreg      unsigned char 
  4933 ;; Registers used:
  4934 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4935 ;; Tracked objects:
  4936 ;;		On entry : 0/0
  4937 ;;		On exit  : 0/0
  4938 ;;		Unchanged: 0/0
  4939 ;; Data sizes:     COMRAM   BANK0   BANK1
  4940 ;;      Params:         0       0       0
  4941 ;;      Locals:         0       0       0
  4942 ;;      Temps:          0       0       0
  4943 ;;      Totals:         0       0       0
  4944 ;;Total ram usage:        0 bytes
  4945 ;; Hardware stack levels used: 1
  4946 ;; Hardware stack levels required when called: 4
  4947 ;; This function calls:
  4948 ;;		_KeGetGenericValue
  4949 ;;		_getFullValue
  4950 ;; This function is called by:
  4951 ;;		_menuMotor
  4952 ;; This function uses a non-reentrant model
  4953 ;;
  4954                           
  4955                           	psect	text34
  4956  00013C                     __ptext34:
  4957                           	callstack 0
  4958  00013C                     _KeGetCharValue:
  4959                           	callstack 25
  4960                           
  4961                           ;keypad.c: 222:     return getFullValue(KeGetGenericValue());
  4962                           
  4963                           ;incstack = 0
  4964  00013C  EC8B  F00F         	call	_KeGetGenericValue	;wreg free
  4965  000140  EF70  F00D         	goto	_getFullValue
  4966  000144                     __end_of_KeGetCharValue:
  4967                           	callstack 0
  4968                           
  4969 ;; *************** function _getFullValue *****************
  4970 ;; Defined at:
  4971 ;;		line 230 in file "keypad.c"
  4972 ;; Parameters:    Size  Location     Type
  4973 ;;  generic         1    wreg     unsigned char 
  4974 ;; Auto vars:     Size  Location     Type
  4975 ;;  generic         1    9[COMRAM] unsigned char 
  4976 ;; Return value:  Size  Location     Type
  4977 ;;                  1    wreg      unsigned char 
  4978 ;; Registers used:
  4979 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
  4980 ;; Tracked objects:
  4981 ;;		On entry : 0/0
  4982 ;;		On exit  : 0/0
  4983 ;;		Unchanged: 0/0
  4984 ;; Data sizes:     COMRAM   BANK0   BANK1
  4985 ;;      Params:         0       0       0
  4986 ;;      Locals:         1       0       0
  4987 ;;      Temps:          4       0       0
  4988 ;;      Totals:         5       0       0
  4989 ;;Total ram usage:        5 bytes
  4990 ;; Hardware stack levels used: 1
  4991 ;; Hardware stack levels required when called: 2
  4992 ;; This function calls:
  4993 ;;		Nothing
  4994 ;; This function is called by:
  4995 ;;		_KeGetCharValue
  4996 ;; This function uses a non-reentrant model
  4997 ;;
  4998                           
  4999                           	psect	text35
  5000  001AE0                     __ptext35:
  5001                           	callstack 0
  5002  001AE0                     _getFullValue:
  5003                           	callstack 26
  5004                           
  5005                           ;incstack = 0
  5006                           ;getFullValue@generic stored from wreg
  5007  001AE0  6E62               	movwf	getFullValue@generic^0,c
  5008                           
  5009                           ;keypad.c: 232:     if (generic - '0' >= 2 && generic - '0' <= 9){
  5010  001AE2  D81F               	call	PL32	;call to abstracted procedure
  5011  001AE4  E103               	bnz	u2850
  5012  001AE6  0E02               	movlw	2
  5013  001AE8  5C60               	subwf	(??_getFullValue+2)^0,w,c
  5014  001AEA  E30A               	bnc	l3961
  5015  001AEC                     u2850:
  5016  001AEC  D81A               	call	PL32	;call to abstracted procedure
  5017  001AEE  E108               	bnz	l3961
  5018  001AF0  0E0A               	movlw	10
  5019  001AF2  5C60               	subwf	(??_getFullValue+2)^0,w,c
  5020  001AF4  E205               	bc	l3961
  5021                           
  5022                           ;keypad.c: 233:         if (SMSTABLE[generic - '0' - 1][(numPresses-1)] == '\0'){
  5023  001AF6  D806               	call	PL24	;call to abstracted procedure
  5024  001AF8  E105               	bnz	PL24
  5025                           
  5026                           ;keypad.c: 234:             numPresses = 1;
  5027  001AFA  0E01               	movlw	1
  5028  001AFC  6E3F               	movwf	_numPresses^0,c
  5029  001AFE                     l3957:
  5030                           
  5031                           ;keypad.c: 236:         return SMSTABLE[generic - '0' - 1][(numPresses-1)];
  5032  001AFE  D002               	goto	PL24	;call to abstracted procedure
  5033  001B00                     l3961:
  5034                           
  5035                           ;keypad.c: 238:     return generic;
  5036  001B00  5062               	movf	getFullValue@generic^0,w,c
  5037  001B02  0012               	return		;funcret
  5038  001B04                     __end_of_getFullValue:
  5039                           	callstack 0
  5040  001B04                     PL24:
  5041                           	callstack 26
  5042  001B04  5062               	movf	getFullValue@generic^0,w,c
  5043  001B06  0D06               	mullw	6
  5044  001B08  50F3               	movf	243,w,c
  5045  001B0A  0F99               	addlw	low _SMSTABLE
  5046  001B0C  243F               	addwf	_numPresses^0,w,c
  5047  001B0E  6E5E               	movwf	??_getFullValue^0,c
  5048  001B10  0ED9               	movlw	217
  5049  001B12  265E               	addwf	??_getFullValue^0,f,c
  5050  001B14  C05E  FFF6         	movff	??_getFullValue,tblptrl
  5051  001B18                     	if	1	;There is more than 1 active tblptr byte
  5052  001B18  0E02               	movlw	high __smallconst
  5053  001B1A  6EF7               	movwf	tblptrh,c
  5054  001B1C                     	endif
  5055  001B1C                     	if	0	;tblptru may be non-zero
  5056  001B1C                     	endif
  5057  001B1C                     	if	0	;tblptru may be non-zero
  5058  001B1C                     	endif
  5059  001B1C  0008               	tblrd		*
  5060  001B1E  50F5               	movf	tablat,w,c
  5061  001B20  0012               	return	
  5062  001B22                     __end_ofPL24:
  5063                           	callstack 0
  5064  001B22                     PL32:
  5065                           	callstack 26
  5066  001B22  0ED0               	movlw	208
  5067  001B24  6E5E               	movwf	??_getFullValue^0,c
  5068  001B26  685F               	setf	(??_getFullValue+1)^0,c
  5069  001B28  5062               	movf	getFullValue@generic^0,w,c
  5070  001B2A  6E60               	movwf	(??_getFullValue+2)^0,c
  5071  001B2C  6A61               	clrf	(??_getFullValue+3)^0,c
  5072  001B2E  505E               	movf	??_getFullValue^0,w,c
  5073  001B30  2660               	addwf	(??_getFullValue+2)^0,f,c
  5074  001B32  505F               	movf	(??_getFullValue+1)^0,w,c
  5075  001B34  2261               	addwfc	(??_getFullValue+3)^0,f,c
  5076  001B36  5061               	movf	(??_getFullValue+3)^0,w,c
  5077  001B38  0012               	return	
  5078  001B3A                     __end_ofPL32:
  5079                           	callstack 0
  5080                           
  5081 ;; *************** function _JoSetMode *****************
  5082 ;; Defined at:
  5083 ;;		line 107 in file "Joystick.c"
  5084 ;; Parameters:    Size  Location     Type
  5085 ;;  mode            1    wreg     unsigned char 
  5086 ;; Auto vars:     Size  Location     Type
  5087 ;;  mode            1    5[COMRAM] unsigned char 
  5088 ;; Return value:  Size  Location     Type
  5089 ;;                  1    wreg      void 
  5090 ;; Registers used:
  5091 ;;		wreg
  5092 ;; Tracked objects:
  5093 ;;		On entry : 0/0
  5094 ;;		On exit  : 0/0
  5095 ;;		Unchanged: 0/0
  5096 ;; Data sizes:     COMRAM   BANK0   BANK1
  5097 ;;      Params:         0       0       0
  5098 ;;      Locals:         1       0       0
  5099 ;;      Temps:          0       0       0
  5100 ;;      Totals:         1       0       0
  5101 ;;Total ram usage:        1 bytes
  5102 ;; Hardware stack levels used: 1
  5103 ;; Hardware stack levels required when called: 2
  5104 ;; This function calls:
  5105 ;;		Nothing
  5106 ;; This function is called by:
  5107 ;;		_menuMotor
  5108 ;; This function uses a non-reentrant model
  5109 ;;
  5110                           
  5111                           	psect	text36
  5112  000144                     __ptext36:
  5113                           	callstack 0
  5114  000144                     _JoSetMode:
  5115                           	callstack 27
  5116                           
  5117                           ;incstack = 0
  5118                           ;JoSetMode@mode stored from wreg
  5119  000144  6E5E               	movwf	JoSetMode@mode^0,c
  5120                           
  5121                           ;Joystick.c: 108:     joyMode = mode;
  5122  000146  C05E  F029         	movff	JoSetMode@mode,_joyMode
  5123  00014A  0012               	return		;funcret
  5124  00014C                     __end_of_JoSetMode:
  5125                           	callstack 0
  5126                           
  5127 ;; *************** function _JoMoved *****************
  5128 ;; Defined at:
  5129 ;;		line 99 in file "Joystick.c"
  5130 ;; Parameters:    Size  Location     Type
  5131 ;;		None
  5132 ;; Auto vars:     Size  Location     Type
  5133 ;;		None
  5134 ;; Return value:  Size  Location     Type
  5135 ;;                  1    wreg      unsigned char 
  5136 ;; Registers used:
  5137 ;;		wreg, status,2
  5138 ;; Tracked objects:
  5139 ;;		On entry : 0/0
  5140 ;;		On exit  : 0/0
  5141 ;;		Unchanged: 0/0
  5142 ;; Data sizes:     COMRAM   BANK0   BANK1
  5143 ;;      Params:         0       0       0
  5144 ;;      Locals:         0       0       0
  5145 ;;      Temps:          0       0       0
  5146 ;;      Totals:         0       0       0
  5147 ;;Total ram usage:        0 bytes
  5148 ;; Hardware stack levels used: 1
  5149 ;; Hardware stack levels required when called: 2
  5150 ;; This function calls:
  5151 ;;		Nothing
  5152 ;; This function is called by:
  5153 ;;		_menuMotor
  5154 ;; This function uses a non-reentrant model
  5155 ;;
  5156                           
  5157                           	psect	text37
  5158  000184                     __ptext37:
  5159                           	callstack 0
  5160  000184                     _JoMoved:
  5161                           	callstack 27
  5162                           
  5163                           ;Joystick.c: 100:     return moved;
  5164                           
  5165                           ;incstack = 0
  5166  000184  502B               	movf	_moved^0,w,c
  5167  000186  0012               	return		;funcret
  5168  000188                     __end_of_JoMoved:
  5169                           	callstack 0
  5170                           
  5171 ;; *************** function _JoDirection *****************
  5172 ;; Defined at:
  5173 ;;		line 103 in file "Joystick.c"
  5174 ;; Parameters:    Size  Location     Type
  5175 ;;		None
  5176 ;; Auto vars:     Size  Location     Type
  5177 ;;		None
  5178 ;; Return value:  Size  Location     Type
  5179 ;;                  1    wreg      unsigned char 
  5180 ;; Registers used:
  5181 ;;		wreg, status,2
  5182 ;; Tracked objects:
  5183 ;;		On entry : 0/0
  5184 ;;		On exit  : 0/0
  5185 ;;		Unchanged: 0/0
  5186 ;; Data sizes:     COMRAM   BANK0   BANK1
  5187 ;;      Params:         0       0       0
  5188 ;;      Locals:         0       0       0
  5189 ;;      Temps:          0       0       0
  5190 ;;      Totals:         0       0       0
  5191 ;;Total ram usage:        0 bytes
  5192 ;; Hardware stack levels used: 1
  5193 ;; Hardware stack levels required when called: 2
  5194 ;; This function calls:
  5195 ;;		Nothing
  5196 ;; This function is called by:
  5197 ;;		_menuMotor
  5198 ;; This function uses a non-reentrant model
  5199 ;;
  5200                           
  5201                           	psect	text38
  5202  000188                     __ptext38:
  5203                           	callstack 0
  5204  000188                     _JoDirection:
  5205                           	callstack 27
  5206                           
  5207                           ;Joystick.c: 104:     return send;
  5208                           
  5209                           ;incstack = 0
  5210  000188  502E               	movf	_send^0,w,c
  5211  00018A  0012               	return		;funcret
  5212  00018C                     __end_of_JoDirection:
  5213                           	callstack 0
  5214                           
  5215 ;; *************** function _DaSaveUser *****************
  5216 ;; Defined at:
  5217 ;;		line 307 in file "EEPROM.c"
  5218 ;; Parameters:    Size  Location     Type
  5219 ;;  regUser         1    5[COMRAM] PTR struct .
  5220 ;;		 -> mUser(18), 
  5221 ;; Auto vars:     Size  Location     Type
  5222 ;;		None
  5223 ;; Return value:  Size  Location     Type
  5224 ;;                  1    wreg      void 
  5225 ;; Registers used:
  5226 ;;		wreg, status,2, status,0
  5227 ;; Tracked objects:
  5228 ;;		On entry : 0/0
  5229 ;;		On exit  : 0/0
  5230 ;;		Unchanged: 0/0
  5231 ;; Data sizes:     COMRAM   BANK0   BANK1
  5232 ;;      Params:         1       0       0
  5233 ;;      Locals:         0       0       0
  5234 ;;      Temps:          0       0       0
  5235 ;;      Totals:         1       0       0
  5236 ;;Total ram usage:        1 bytes
  5237 ;; Hardware stack levels used: 1
  5238 ;; Hardware stack levels required when called: 2
  5239 ;; This function calls:
  5240 ;;		Nothing
  5241 ;; This function is called by:
  5242 ;;		_menuMotor
  5243 ;; This function uses a non-reentrant model
  5244 ;;
  5245                           
  5246                           	psect	text39
  5247  000062                     __ptext39:
  5248                           	callstack 0
  5249  000062                     _DaSaveUser:
  5250                           	callstack 27
  5251                           
  5252                           ;EEPROM.c: 308:     state = 5;
  5253                           
  5254                           ;incstack = 0
  5255  000062  0E05               	movlw	5
  5256  000064  6E1E               	movwf	_state@EEPROM$F1761^0,c
  5257                           
  5258                           ;EEPROM.c: 309:     position = 0;
  5259  000066  6A1F               	clrf	_position^0,c
  5260                           
  5261                           ;EEPROM.c: 310:     userNum = 0;
  5262  000068  6A1D               	clrf	_userNum^0,c
  5263                           
  5264                           ;EEPROM.c: 311:     mUser = regUser;
  5265  00006A  C05E  F00B         	movff	DaSaveUser@regUser,_mUser@EEPROM$F1764
  5266  00006E  6A0C               	clrf	(_mUser@EEPROM$F1764+1)^0,c
  5267                           
  5268                           ;EEPROM.c: 312:     status = 2;
  5269  000070  0E02               	movlw	2
  5270  000072  6E1C               	movwf	_status^0,c
  5271  000074  0C02               	retlw	2	;funcret
  5272  000076                     __end_of_DaSaveUser:
  5273                           	callstack 0
  5274                           
  5275 ;; *************** function _DaSaveScore *****************
  5276 ;; Defined at:
  5277 ;;		line 323 in file "EEPROM.c"
  5278 ;; Parameters:    Size  Location     Type
  5279 ;;  userScore       1    wreg     unsigned char 
  5280 ;; Auto vars:     Size  Location     Type
  5281 ;;  userScore       1   19[COMRAM] unsigned char 
  5282 ;; Return value:  Size  Location     Type
  5283 ;;                  1    wreg      void 
  5284 ;; Registers used:
  5285 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5286 ;; Tracked objects:
  5287 ;;		On entry : 0/0
  5288 ;;		On exit  : 0/0
  5289 ;;		Unchanged: 0/0
  5290 ;; Data sizes:     COMRAM   BANK0   BANK1
  5291 ;;      Params:         0       0       0
  5292 ;;      Locals:         1       0       0
  5293 ;;      Temps:          0       0       0
  5294 ;;      Totals:         1       0       0
  5295 ;;Total ram usage:        1 bytes
  5296 ;; Hardware stack levels used: 1
  5297 ;; Hardware stack levels required when called: 6
  5298 ;; This function calls:
  5299 ;;		_LcClear
  5300 ;;		_LcPutChar
  5301 ;;		___lbdiv
  5302 ;;		___lbmod
  5303 ;; This function is called by:
  5304 ;;		_menuMotor
  5305 ;; This function uses a non-reentrant model
  5306 ;;
  5307                           
  5308                           	psect	text40
  5309  001CB0                     __ptext40:
  5310                           	callstack 0
  5311  001CB0                     _DaSaveScore:
  5312                           	callstack 23
  5313                           
  5314                           ;incstack = 0
  5315                           ;DaSaveScore@userScore stored from wreg
  5316  001CB0  6E6C               	movwf	DaSaveScore@userScore^0,c
  5317                           
  5318                           ;EEPROM.c: 324:     saveScore = userScore;
  5319  001CB2  C06C  F01A         	movff	DaSaveScore@userScore,_saveScore
  5320                           
  5321                           ;EEPROM.c: 325:     LcClear();
  5322  001CB6  EC1B  F000         	call	_LcClear	;wreg free
  5323                           
  5324                           ;EEPROM.c: 326:     LcPutChar((saveScore/10)+'0');
  5325  001CBA  0E0A               	movlw	10
  5326  001CBC  6E5E               	movwf	___lbdiv@divisor^0,c
  5327  001CBE  501A               	movf	_saveScore^0,w,c
  5328  001CC0  EC72  F00E         	call	___lbdiv
  5329  001CC4  0F30               	addlw	48
  5330  001CC6  ECE6  F00E         	call	_LcPutChar
  5331                           
  5332                           ;EEPROM.c: 327:     LcPutChar((saveScore%10)+'0');
  5333  001CCA  0E0A               	movlw	10
  5334  001CCC  6E5E               	movwf	___lbmod@divisor^0,c
  5335  001CCE  501A               	movf	_saveScore^0,w,c
  5336  001CD0  EC0F  F00F         	call	___lbmod
  5337  001CD4  0F30               	addlw	48
  5338  001CD6  ECE6  F00E         	call	_LcPutChar
  5339                           
  5340                           ;EEPROM.c: 328:     position = 0;
  5341  001CDA  6A1F               	clrf	_position^0,c
  5342                           
  5343                           ;EEPROM.c: 329:     status = 0;
  5344  001CDC  6A1C               	clrf	_status^0,c
  5345                           
  5346                           ;EEPROM.c: 330:     state = 20;
  5347  001CDE  0E14               	movlw	20
  5348  001CE0  6E1E               	movwf	_state@EEPROM$F1761^0,c
  5349  001CE2  0C14               	retlw	20	;funcret
  5350  001CE4                     __end_of_DaSaveScore:
  5351                           	callstack 0
  5352                           
  5353 ;; *************** function _LcClear *****************
  5354 ;; Defined at:
  5355 ;;		line 105 in file "LcTLCD.c"
  5356 ;; Parameters:    Size  Location     Type
  5357 ;;		None
  5358 ;; Auto vars:     Size  Location     Type
  5359 ;;		None
  5360 ;; Return value:  Size  Location     Type
  5361 ;;                  1    wreg      void 
  5362 ;; Registers used:
  5363 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5364 ;; Tracked objects:
  5365 ;;		On entry : 0/0
  5366 ;;		On exit  : 0/0
  5367 ;;		Unchanged: 0/0
  5368 ;; Data sizes:     COMRAM   BANK0   BANK1
  5369 ;;      Params:         0       0       0
  5370 ;;      Locals:         0       0       0
  5371 ;;      Temps:          0       0       0
  5372 ;;      Totals:         0       0       0
  5373 ;;Total ram usage:        0 bytes
  5374 ;; Hardware stack levels used: 1
  5375 ;; Hardware stack levels required when called: 4
  5376 ;; This function calls:
  5377 ;;		_CantaIR
  5378 ;;		_Espera
  5379 ;;		_WaitForBusy
  5380 ;; This function is called by:
  5381 ;;		_resetDisplay
  5382 ;;		_DaSaveScore
  5383 ;; This function uses a non-reentrant model
  5384 ;;
  5385                           
  5386                           	psect	text41
  5387  000036                     __ptext41:
  5388                           	callstack 0
  5389  000036                     _LcClear:
  5390                           	callstack 24
  5391                           
  5392                           ;LcTLCD.c: 108:  WaitForBusy(); CantaIR(0x01);
  5393                           
  5394                           ;incstack = 0
  5395  000036  EC03  F00E         	call	_WaitForBusy	;wreg free
  5396  00003A  0E01               	movlw	1
  5397  00003C  ECBB  F00F         	call	_CantaIR
  5398                           
  5399                           ;LcTLCD.c: 109:  Espera(Timer, 3);
  5400  000040  EC0E  F00B         	call	PL16	;call to abstracted procedure
  5401  000044  0E03               	movlw	3
  5402  000046  6E67               	movwf	Espera@ms^0,c
  5403  000048  EF9B  F00F         	goto	_Espera	;wreg free
  5404  00004C                     __end_of_LcClear:
  5405                           	callstack 0
  5406                           
  5407 ;; *************** function _DaGetStatus *****************
  5408 ;; Defined at:
  5409 ;;		line 315 in file "EEPROM.c"
  5410 ;; Parameters:    Size  Location     Type
  5411 ;;		None
  5412 ;; Auto vars:     Size  Location     Type
  5413 ;;		None
  5414 ;; Return value:  Size  Location     Type
  5415 ;;                  1    wreg      unsigned char 
  5416 ;; Registers used:
  5417 ;;		wreg, status,2
  5418 ;; Tracked objects:
  5419 ;;		On entry : 0/0
  5420 ;;		On exit  : 0/0
  5421 ;;		Unchanged: 0/0
  5422 ;; Data sizes:     COMRAM   BANK0   BANK1
  5423 ;;      Params:         0       0       0
  5424 ;;      Locals:         0       0       0
  5425 ;;      Temps:          0       0       0
  5426 ;;      Totals:         0       0       0
  5427 ;;Total ram usage:        0 bytes
  5428 ;; Hardware stack levels used: 1
  5429 ;; Hardware stack levels required when called: 2
  5430 ;; This function calls:
  5431 ;;		Nothing
  5432 ;; This function is called by:
  5433 ;;		_menuMotor
  5434 ;; This function uses a non-reentrant model
  5435 ;;
  5436                           
  5437                           	psect	text42
  5438  00018C                     __ptext42:
  5439                           	callstack 0
  5440  00018C                     _DaGetStatus:
  5441                           	callstack 27
  5442                           
  5443                           ;EEPROM.c: 316:     return status;
  5444                           
  5445                           ;incstack = 0
  5446  00018C  501C               	movf	_status^0,w,c
  5447  00018E  0012               	return		;funcret
  5448  000190                     __end_of_DaGetStatus:
  5449                           	callstack 0
  5450                           
  5451 ;; *************** function _DaGetNumScores *****************
  5452 ;; Defined at:
  5453 ;;		line 369 in file "EEPROM.c"
  5454 ;; Parameters:    Size  Location     Type
  5455 ;;		None
  5456 ;; Auto vars:     Size  Location     Type
  5457 ;;		None
  5458 ;; Return value:  Size  Location     Type
  5459 ;;                  1    wreg      unsigned char 
  5460 ;; Registers used:
  5461 ;;		wreg, status,2
  5462 ;; Tracked objects:
  5463 ;;		On entry : 0/0
  5464 ;;		On exit  : 0/0
  5465 ;;		Unchanged: 0/0
  5466 ;; Data sizes:     COMRAM   BANK0   BANK1
  5467 ;;      Params:         0       0       0
  5468 ;;      Locals:         0       0       0
  5469 ;;      Temps:          0       0       0
  5470 ;;      Totals:         0       0       0
  5471 ;;Total ram usage:        0 bytes
  5472 ;; Hardware stack levels used: 1
  5473 ;; Hardware stack levels required when called: 2
  5474 ;; This function calls:
  5475 ;;		Nothing
  5476 ;; This function is called by:
  5477 ;;		_menuMotor
  5478 ;; This function uses a non-reentrant model
  5479 ;;
  5480                           
  5481                           	psect	text43
  5482  000190                     __ptext43:
  5483                           	callstack 0
  5484  000190                     _DaGetNumScores:
  5485                           	callstack 27
  5486                           
  5487                           ;EEPROM.c: 370:     return numScores;
  5488                           
  5489                           ;incstack = 0
  5490  000190  5020               	movf	_numScores^0,w,c
  5491  000192  0012               	return		;funcret
  5492  000194                     __end_of_DaGetNumScores:
  5493                           	callstack 0
  5494                           
  5495 ;; *************** function _DaGetIdle *****************
  5496 ;; Defined at:
  5497 ;;		line 319 in file "EEPROM.c"
  5498 ;; Parameters:    Size  Location     Type
  5499 ;;		None
  5500 ;; Auto vars:     Size  Location     Type
  5501 ;;		None
  5502 ;; Return value:  Size  Location     Type
  5503 ;;                  1    wreg      unsigned char 
  5504 ;; Registers used:
  5505 ;;		wreg, status,2
  5506 ;; Tracked objects:
  5507 ;;		On entry : 0/0
  5508 ;;		On exit  : 0/0
  5509 ;;		Unchanged: 0/0
  5510 ;; Data sizes:     COMRAM   BANK0   BANK1
  5511 ;;      Params:         0       0       0
  5512 ;;      Locals:         0       0       0
  5513 ;;      Temps:          0       0       0
  5514 ;;      Totals:         0       0       0
  5515 ;;Total ram usage:        0 bytes
  5516 ;; Hardware stack levels used: 1
  5517 ;; Hardware stack levels required when called: 2
  5518 ;; This function calls:
  5519 ;;		Nothing
  5520 ;; This function is called by:
  5521 ;;		_menuMotor
  5522 ;; This function uses a non-reentrant model
  5523 ;;
  5524                           
  5525                           	psect	text44
  5526  00014C                     __ptext44:
  5527                           	callstack 0
  5528  00014C                     _DaGetIdle:
  5529                           	callstack 27
  5530                           
  5531                           ;EEPROM.c: 320:     return state == 0;
  5532                           
  5533                           ;incstack = 0
  5534  00014C  501E               	movf	_state@EEPROM$F1761^0,w,c
  5535  00014E  B4D8               	btfsc	status,2,c
  5536  000150  0C01               	retlw	1
  5537  000152  0C00               	retlw	0	;funcret
  5538  000154                     __end_of_DaGetIdle:
  5539                           	callstack 0
  5540                           
  5541 ;; *************** function _DaFindUser *****************
  5542 ;; Defined at:
  5543 ;;		line 293 in file "EEPROM.c"
  5544 ;; Parameters:    Size  Location     Type
  5545 ;;  logUser         1   18[COMRAM] PTR struct .
  5546 ;;		 -> mUser(18), 
  5547 ;; Auto vars:     Size  Location     Type
  5548 ;;		None
  5549 ;; Return value:  Size  Location     Type
  5550 ;;                  1    wreg      void 
  5551 ;; Registers used:
  5552 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5553 ;; Tracked objects:
  5554 ;;		On entry : 0/0
  5555 ;;		On exit  : 0/0
  5556 ;;		Unchanged: 0/0
  5557 ;; Data sizes:     COMRAM   BANK0   BANK1
  5558 ;;      Params:         1       0       0
  5559 ;;      Locals:         0       0       0
  5560 ;;      Temps:          0       0       0
  5561 ;;      Totals:         1       0       0
  5562 ;;Total ram usage:        1 bytes
  5563 ;; Hardware stack levels used: 1
  5564 ;; Hardware stack levels required when called: 5
  5565 ;; This function calls:
  5566 ;;		_LcGotoXY
  5567 ;; This function is called by:
  5568 ;;		_menuMotor
  5569 ;; This function uses a non-reentrant model
  5570 ;;
  5571                           
  5572                           	psect	text45
  5573  001FAC                     __ptext45:
  5574                           	callstack 0
  5575  001FAC                     _DaFindUser:
  5576                           	callstack 24
  5577                           
  5578                           ;EEPROM.c: 294:     state = 1;
  5579                           
  5580                           ;incstack = 0
  5581  001FAC  0E01               	movlw	1
  5582  001FAE  6E1E               	movwf	_state@EEPROM$F1761^0,c
  5583                           
  5584                           ;EEPROM.c: 295:     userNum = 0;
  5585  001FB0  6A1D               	clrf	_userNum^0,c
  5586                           
  5587                           ;EEPROM.c: 296:     mUser = logUser;
  5588  001FB2  C06B  F00B         	movff	DaFindUser@logUser,_mUser@EEPROM$F1764
  5589  001FB6  6A0C               	clrf	(_mUser@EEPROM$F1764+1)^0,c
  5590                           
  5591                           ;EEPROM.c: 297:     status = 2;
  5592  001FB8  0E02               	movlw	2
  5593  001FBA  6E1C               	movwf	_status^0,c
  5594                           
  5595                           ;EEPROM.c: 298:     LcGotoXY(10,0);
  5596  001FBC  0E00               	movlw	0
  5597  001FBE  6E66               	movwf	LcGotoXY@Row^0,c
  5598  001FC0  0E0A               	movlw	10
  5599  001FC2  EFA4  F00E         	goto	_LcGotoXY
  5600  001FC6                     __end_of_DaFindUser:
  5601                           	callstack 0
  5602                           
  5603 ;; *************** function _joystickMotor *****************
  5604 ;; Defined at:
  5605 ;;		line 29 in file "Joystick.c"
  5606 ;; Parameters:    Size  Location     Type
  5607 ;;		None
  5608 ;; Auto vars:     Size  Location     Type
  5609 ;;		None
  5610 ;; Return value:  Size  Location     Type
  5611 ;;                  1    wreg      void 
  5612 ;; Registers used:
  5613 ;;		wreg, status,2, status,0, cstack
  5614 ;; Tracked objects:
  5615 ;;		On entry : 0/0
  5616 ;;		On exit  : 0/0
  5617 ;;		Unchanged: 0/0
  5618 ;; Data sizes:     COMRAM   BANK0   BANK1
  5619 ;;      Params:         0       0       0
  5620 ;;      Locals:         0       0       0
  5621 ;;      Temps:          2       0       0
  5622 ;;      Totals:         2       0       0
  5623 ;;Total ram usage:        2 bytes
  5624 ;; Hardware stack levels used: 1
  5625 ;; Hardware stack levels required when called: 3
  5626 ;; This function calls:
  5627 ;;		_SiIsAvailable
  5628 ;;		_SiSendChar
  5629 ;; This function is called by:
  5630 ;;		_main
  5631 ;; This function uses a non-reentrant model
  5632 ;;
  5633                           
  5634                           	psect	text46
  5635  001410                     __ptext46:
  5636                           	callstack 0
  5637  001410                     _joystickMotor:
  5638                           	callstack 27
  5639                           
  5640                           ;Joystick.c: 30:     switch (stateJoy){
  5641                           
  5642                           ;incstack = 0
  5643  001410  D04B               	goto	l5191
  5644  001412                     l694:
  5645                           
  5646                           ;Joystick.c: 32:             if (ADCON0bits.GO_DONE == 0){
  5647  001412  B2C2               	btfsc	194,1,c	;volatile
  5648  001414  0012               	return	
  5649                           
  5650                           ;Joystick.c: 33:                 y = ADRESH;
  5651  001416  CFC4 F02C          	movff	4036,_y	;volatile
  5652                           
  5653                           ;Joystick.c: 34:                 ADCON0bits.CHS0=1;
  5654  00141A  84C2               	bsf	194,2,c	;volatile
  5655                           
  5656                           ;Joystick.c: 35:                 ADCON0bits.CHS1=0;
  5657  00141C  96C2               	bcf	194,3,c	;volatile
  5658                           
  5659                           ;Joystick.c: 36:                 stateJoy = 1;
  5660  00141E  0E01               	movlw	1
  5661  001420  6E2A               	movwf	_stateJoy^0,c
  5662                           
  5663                           ;Joystick.c: 37:                 ADCON0bits.GO_DONE=1;
  5664  001422  82C2               	bsf	194,1,c	;volatile
  5665  001424  0C01               	retlw	1
  5666  001426                     l697:
  5667                           
  5668                           ;Joystick.c: 41:             if (ADCON0bits.GO_DONE == 0){
  5669  001426  B2C2               	btfsc	194,1,c	;volatile
  5670  001428  0012               	return	
  5671                           
  5672                           ;Joystick.c: 42:                 x = ADRESH;
  5673  00142A  CFC4 F02D          	movff	4036,_x	;volatile
  5674                           
  5675                           ;Joystick.c: 43:                 ADCON0bits.CHS0=0;
  5676  00142E  94C2               	bcf	194,2,c	;volatile
  5677                           
  5678                           ;Joystick.c: 44:                 ADCON0bits.CHS1=1;
  5679  001430  86C2               	bsf	194,3,c	;volatile
  5680                           
  5681                           ;Joystick.c: 45:                 stateJoy = 2;
  5682  001432  0E02               	movlw	2
  5683  001434  6E2A               	movwf	_stateJoy^0,c
  5684  001436  0C02               	retlw	2
  5685  001438                     l5145:
  5686                           
  5687                           ;Joystick.c: 49:             stateJoy = 4;
  5688  001438  0E04               	movlw	4
  5689  00143A  6E2A               	movwf	_stateJoy^0,c
  5690                           
  5691                           ;Joystick.c: 50:             if (moved){
  5692  00143C  502B               	movf	_moved^0,w,c
  5693  00143E  E00E               	bz	l5157
  5694                           
  5695                           ;Joystick.c: 51:                 if (x >= 100 && x <= 150 && y >= 100 && y <= 150){
  5696  001440  0E63               	movlw	99
  5697  001442  642D               	cpfsgt	_x^0,c
  5698  001444  0C63               	retlw	99
  5699  001446  0E97               	movlw	151
  5700  001448  602D               	cpfslt	_x^0,c
  5701  00144A  0C97               	retlw	151
  5702  00144C  0E63               	movlw	99
  5703  00144E  642C               	cpfsgt	_y^0,c
  5704  001450  0C63               	retlw	99
  5705  001452  0E97               	movlw	151
  5706  001454  602C               	cpfslt	_y^0,c
  5707  001456  0C97               	retlw	151
  5708                           
  5709                           ;Joystick.c: 52:                     moved = 0;
  5710  001458  6A2B               	clrf	_moved^0,c
  5711                           
  5712                           ;Joystick.c: 54:             }else {
  5713                           
  5714                           ;Joystick.c: 53:                 }
  5715  00145A  0012               	return	
  5716  00145C                     l5157:
  5717                           
  5718                           ;Joystick.c: 55:                 if (x <= 10){
  5719  00145C  0E0B               	movlw	11
  5720  00145E  602D               	cpfslt	_x^0,c
  5721  001460  D008               	goto	l5163
  5722                           
  5723                           ;Joystick.c: 56:                     send = 'A';
  5724  001462  0E41               	movlw	65
  5725  001464                     L6:
  5726  001464  6E2E               	movwf	_send^0,c
  5727                           
  5728                           ;Joystick.c: 57:                     moved = 1;
  5729  001466  0E01               	movlw	1
  5730  001468  6E2B               	movwf	_moved^0,c
  5731                           
  5732                           ;Joystick.c: 58:                     stateJoy = 4+joyMode;
  5733  00146A  5029               	movf	_joyMode^0,w,c
  5734  00146C  0F04               	addlw	4
  5735  00146E  6E2A               	movwf	_stateJoy^0,c
  5736                           
  5737                           ;Joystick.c: 59:                 } else if (x >= 240){
  5738  001470  0012               	return	
  5739  001472                     l5163:
  5740  001472  0EEF               	movlw	239
  5741  001474  642D               	cpfsgt	_x^0,c
  5742  001476  D002               	goto	l5169
  5743                           
  5744                           ;Joystick.c: 60:                     send = 'D';
  5745  001478  0E44               	movlw	68
  5746  00147A  D7F4               	goto	L6
  5747  00147C                     l5169:
  5748  00147C  0E0B               	movlw	11
  5749  00147E  602C               	cpfslt	_y^0,c
  5750  001480  D002               	goto	l5175
  5751                           
  5752                           ;Joystick.c: 64:                     send = 'S';
  5753  001482  0E53               	movlw	83
  5754  001484  D7EF               	goto	L6
  5755  001486                     l5175:
  5756  001486  0EEF               	movlw	239
  5757  001488  642C               	cpfsgt	_y^0,c
  5758  00148A  0CEF               	retlw	239
  5759                           
  5760                           ;Joystick.c: 68:                     send = 'W';
  5761  00148C  0E57               	movlw	87
  5762  00148E  D7EA               	goto	L6
  5763  001490                     l710:
  5764                           
  5765                           ;Joystick.c: 80:             stateJoy = 0;
  5766                           
  5767                           ;Joystick.c: 81:             ADCON0bits.GO_DONE=1;
  5768                           
  5769                           ;Joystick.c: 82:             break;
  5770  001490  D01B               	goto	PL94	;call to abstracted procedure
  5771  001492                     l5181:
  5772                           
  5773                           ;Joystick.c: 85:             if(SiIsAvailable()){
  5774  001492  ECB5  F000         	call	_SiIsAvailable	;wreg free
  5775  001496  0900               	iorlw	0
  5776  001498  B4D8               	btfsc	status,2,c
  5777  00149A  0012               	return	
  5778                           
  5779                           ;Joystick.c: 86:                 SiSendChar(send);
  5780  00149C  502E               	movf	_send^0,w,c
  5781  00149E  ECAE  F000         	call	_SiSendChar
  5782                           
  5783                           ;Joystick.c: 87:                 stateJoy = 0;
  5784                           
  5785                           ;Joystick.c: 88:                 ADCON0bits.GO_DONE=1;
  5786  0014A2  D012               	goto	PL94	;call to abstracted procedure
  5787  0014A4                     l713:
  5788                           
  5789                           ;Joystick.c: 92:             stateJoy = 0;
  5790  0014A4  6A2A               	clrf	_stateJoy^0,c
  5791                           
  5792                           ;Joystick.c: 93:             break;
  5793  0014A6  0012               	return	
  5794  0014A8                     l5191:
  5795  0014A8  502A               	movf	_stateJoy^0,w,c
  5796  0014AA  6E5F               	movwf	??_joystickMotor^0,c
  5797  0014AC  6A60               	clrf	(??_joystickMotor+1)^0,c
  5798                           
  5799                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5800                           ; Switch size 1, requested type "space"
  5801                           ; Number of cases is 1, Range of values is 0 to 0
  5802                           ; switch strategies available:
  5803                           ; Name         Instructions Cycles
  5804                           ; simple_byte            4     3 (average)
  5805                           ;	Chosen strategy is simple_byte
  5806  0014AE  5060               	movf	(??_joystickMotor+1)^0,w,c
  5807  0014B0  E1F9               	bnz	l713
  5808                           
  5809                           ; Switch size 1, requested type "space"
  5810                           ; Number of cases is 5, Range of values is 0 to 5
  5811                           ; switch strategies available:
  5812                           ; Name         Instructions Cycles
  5813                           ; simple_byte           16     9 (average)
  5814                           ;	Chosen strategy is simple_byte
  5815  0014B2  505F               	movf	??_joystickMotor^0,w,c
  5816  0014B4  E0AE               	bz	l694
  5817  0014B6  0A01               	xorlw	1	; case 1
  5818  0014B8  E0B6               	bz	l697
  5819  0014BA  0A03               	xorlw	3	; case 2
  5820  0014BC  E0BD               	bz	l5145
  5821  0014BE  0A06               	xorlw	6	; case 4
  5822  0014C0  E003               	bz	PL94
  5823  0014C2  0A01               	xorlw	1	; case 5
  5824  0014C4  E0E6               	bz	l5181
  5825  0014C6  D7EE               	goto	l713
  5826  0014C8                     __end_of_joystickMotor:
  5827                           	callstack 0
  5828  0014C8                     PL94:
  5829                           	callstack 27
  5830  0014C8  6A2A               	clrf	_stateJoy^0,c
  5831  0014CA  82C2               	bsf	194,1,c	;volatile
  5832  0014CC  0012               	return	
  5833  0014CE                     __end_ofPL94:
  5834                           	callstack 0
  5835                           
  5836 ;; *************** function _initTime *****************
  5837 ;; Defined at:
  5838 ;;		line 293 in file "time.c"
  5839 ;; Parameters:    Size  Location     Type
  5840 ;;		None
  5841 ;; Auto vars:     Size  Location     Type
  5842 ;;		None
  5843 ;; Return value:  Size  Location     Type
  5844 ;;                  1    wreg      void 
  5845 ;; Registers used:
  5846 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5847 ;; Tracked objects:
  5848 ;;		On entry : 0/0
  5849 ;;		On exit  : 0/0
  5850 ;;		Unchanged: 0/0
  5851 ;; Data sizes:     COMRAM   BANK0   BANK1
  5852 ;;      Params:         0       0       0
  5853 ;;      Locals:         0       0       0
  5854 ;;      Temps:          0       0       0
  5855 ;;      Totals:         0       0       0
  5856 ;;Total ram usage:        0 bytes
  5857 ;; Hardware stack levels used: 1
  5858 ;; Hardware stack levels required when called: 3
  5859 ;; This function calls:
  5860 ;;		_TiGetTimer
  5861 ;; This function is called by:
  5862 ;;		_main
  5863 ;; This function uses a non-reentrant model
  5864 ;;
  5865                           
  5866                           	psect	text47
  5867  000154                     __ptext47:
  5868                           	callstack 0
  5869  000154                     _initTime:
  5870                           	callstack 27
  5871                           
  5872                           ;time.c: 294:     timer = TiGetTimer();
  5873                           
  5874                           ;incstack = 0
  5875  000154  EC8C  F00E         	call	_TiGetTimer	;wreg free
  5876  000158  6E14               	movwf	_timer@time$F1844^0,c
  5877  00015A  0012               	return		;funcret
  5878  00015C                     __end_of_initTime:
  5879                           	callstack 0
  5880                           
  5881 ;; *************** function _initSIO *****************
  5882 ;; Defined at:
  5883 ;;		line 16 in file "SIO.c"
  5884 ;; Parameters:    Size  Location     Type
  5885 ;;		None
  5886 ;; Auto vars:     Size  Location     Type
  5887 ;;		None
  5888 ;; Return value:  Size  Location     Type
  5889 ;;                  1    wreg      void 
  5890 ;; Registers used:
  5891 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5892 ;; Tracked objects:
  5893 ;;		On entry : 0/0
  5894 ;;		On exit  : 0/0
  5895 ;;		Unchanged: 0/0
  5896 ;; Data sizes:     COMRAM   BANK0   BANK1
  5897 ;;      Params:         0       0       0
  5898 ;;      Locals:         0       0       0
  5899 ;;      Temps:          0       0       0
  5900 ;;      Totals:         0       0       0
  5901 ;;Total ram usage:        0 bytes
  5902 ;; Hardware stack levels used: 1
  5903 ;; Hardware stack levels required when called: 3
  5904 ;; This function calls:
  5905 ;;		_TiGetTimer
  5906 ;; This function is called by:
  5907 ;;		_main
  5908 ;; This function uses a non-reentrant model
  5909 ;;
  5910                           
  5911                           	psect	text48
  5912  001E8E                     __ptext48:
  5913                           	callstack 0
  5914  001E8E                     _initSIO:
  5915                           	callstack 27
  5916                           
  5917                           ;SIO.c: 17:     TRISCbits.TRISC7 = 1;
  5918                           
  5919                           ;incstack = 0
  5920  001E8E  8E94               	bsf	148,7,c	;volatile
  5921                           
  5922                           ;SIO.c: 18:     TRISCbits.TRISC6 = 1;
  5923  001E90  8C94               	bsf	148,6,c	;volatile
  5924                           
  5925                           ;SIO.c: 19:     TXSTAbits.BRGH = 1;
  5926  001E92  84AC               	bsf	172,2,c	;volatile
  5927                           
  5928                           ;SIO.c: 20:     TXSTAbits.TXEN = 1;
  5929  001E94  8AAC               	bsf	172,5,c	;volatile
  5930                           
  5931                           ;SIO.c: 21:     TXSTAbits.SYNC = 0;
  5932  001E96  98AC               	bcf	172,4,c	;volatile
  5933                           
  5934                           ;SIO.c: 23:     RCSTAbits.SPEN = 1;
  5935  001E98  8EAB               	bsf	171,7,c	;volatile
  5936                           
  5937                           ;SIO.c: 24:     RCSTAbits.CREN = 1;
  5938  001E9A  88AB               	bsf	171,4,c	;volatile
  5939                           
  5940                           ;SIO.c: 26:     BAUDCONbits.BRG16 = 0;
  5941  001E9C  96B8               	bcf	184,3,c	;volatile
  5942                           
  5943                           ;SIO.c: 28:     SPBRG = 255;
  5944  001E9E  68AF               	setf	175,c	;volatile
  5945                           
  5946                           ;SIO.c: 31:     TRISCbits.TRISC5 = 1;
  5947  001EA0  8A94               	bsf	148,5,c	;volatile
  5948                           
  5949                           ;SIO.c: 32:     TRISCbits.TRISC4 = 0;
  5950  001EA2  9894               	bcf	148,4,c	;volatile
  5951                           
  5952                           ;SIO.c: 33:     timerRX = TiGetTimer();
  5953  001EA4  EC8C  F00E         	call	_TiGetTimer	;wreg free
  5954  001EA8  6E27               	movwf	_timerRX^0,c
  5955                           
  5956                           ;SIO.c: 34:     timerTX = TiGetTimer();
  5957  001EAA  EC8C  F00E         	call	_TiGetTimer	;wreg free
  5958  001EAE  6E23               	movwf	_timerTX^0,c
  5959  001EB0  0012               	return		;funcret
  5960  001EB2                     __end_of_initSIO:
  5961                           	callstack 0
  5962                           
  5963 ;; *************** function _initMenu *****************
  5964 ;; Defined at:
  5965 ;;		line 33 in file "Menu.c"
  5966 ;; Parameters:    Size  Location     Type
  5967 ;;		None
  5968 ;; Auto vars:     Size  Location     Type
  5969 ;;		None
  5970 ;; Return value:  Size  Location     Type
  5971 ;;                  1    wreg      void 
  5972 ;; Registers used:
  5973 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5974 ;; Tracked objects:
  5975 ;;		On entry : 0/0
  5976 ;;		On exit  : 0/0
  5977 ;;		Unchanged: 0/0
  5978 ;; Data sizes:     COMRAM   BANK0   BANK1
  5979 ;;      Params:         0       0       0
  5980 ;;      Locals:         0       0       0
  5981 ;;      Temps:          0       0       0
  5982 ;;      Totals:         0       0       0
  5983 ;;Total ram usage:        0 bytes
  5984 ;; Hardware stack levels used: 1
  5985 ;; Hardware stack levels required when called: 3
  5986 ;; This function calls:
  5987 ;;		_TiGetTimer
  5988 ;; This function is called by:
  5989 ;;		_main
  5990 ;; This function uses a non-reentrant model
  5991 ;;
  5992                           
  5993                           	psect	text49
  5994  000100                     __ptext49:
  5995                           	callstack 0
  5996  000100                     _initMenu:
  5997                           	callstack 27
  5998                           
  5999                           ;Menu.c: 34:     timer = TiGetTimer();
  6000                           
  6001                           ;incstack = 0
  6002  000100  EC8C  F00E         	call	_TiGetTimer	;wreg free
  6003  000104  6E35               	movwf	_timer^0,c
  6004                           
  6005                           ;Menu.c: 35:     val = 0;
  6006  000106  6A31               	clrf	_val^0,c
  6007  000108  0012               	return		;funcret
  6008  00010A                     __end_of_initMenu:
  6009                           	callstack 0
  6010                           
  6011 ;; *************** function _initKeypad *****************
  6012 ;; Defined at:
  6013 ;;		line 29 in file "keypad.c"
  6014 ;; Parameters:    Size  Location     Type
  6015 ;;		None
  6016 ;; Auto vars:     Size  Location     Type
  6017 ;;		None
  6018 ;; Return value:  Size  Location     Type
  6019 ;;                  1    wreg      void 
  6020 ;; Registers used:
  6021 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6022 ;; Tracked objects:
  6023 ;;		On entry : 0/0
  6024 ;;		On exit  : 0/0
  6025 ;;		Unchanged: 0/0
  6026 ;; Data sizes:     COMRAM   BANK0   BANK1
  6027 ;;      Params:         0       0       0
  6028 ;;      Locals:         0       0       0
  6029 ;;      Temps:          0       0       0
  6030 ;;      Totals:         0       0       0
  6031 ;;Total ram usage:        0 bytes
  6032 ;; Hardware stack levels used: 1
  6033 ;; Hardware stack levels required when called: 3
  6034 ;; This function calls:
  6035 ;;		_TiGetTimer
  6036 ;; This function is called by:
  6037 ;;		_main
  6038 ;; This function uses a non-reentrant model
  6039 ;;
  6040                           
  6041                           	psect	text50
  6042  001EF6                     __ptext50:
  6043                           	callstack 0
  6044  001EF6                     _initKeypad:
  6045                           	callstack 27
  6046                           
  6047                           ;keypad.c: 30:     INTCON2bits.RBPU = 0;
  6048                           
  6049                           ;incstack = 0
  6050  001EF6  9EF1               	bcf	241,7,c	;volatile
  6051                           
  6052                           ;keypad.c: 32:     TRISBbits.TRISB0 = 1;
  6053  001EF8  8093               	bsf	147,0,c	;volatile
  6054                           
  6055                           ;keypad.c: 33:     TRISBbits.TRISB1 = 1;
  6056  001EFA  8293               	bsf	147,1,c	;volatile
  6057                           
  6058                           ;keypad.c: 34:     TRISBbits.TRISB2 = 1;
  6059  001EFC  8493               	bsf	147,2,c	;volatile
  6060                           
  6061                           ;keypad.c: 35:     TRISBbits.TRISB3 = 0;
  6062  001EFE  9693               	bcf	147,3,c	;volatile
  6063                           
  6064                           ;keypad.c: 36:     TRISBbits.TRISB4 = 0;
  6065  001F00  9893               	bcf	147,4,c	;volatile
  6066                           
  6067                           ;keypad.c: 37:     TRISBbits.TRISB5 = 0;
  6068  001F02  9A93               	bcf	147,5,c	;volatile
  6069                           
  6070                           ;keypad.c: 38:     TRISBbits.TRISB6 = 0;
  6071  001F04  9C93               	bcf	147,6,c	;volatile
  6072                           
  6073                           ;keypad.c: 39:     TRISAbits.TRISA4 = 0;
  6074  001F06  9892               	bcf	146,4,c	;volatile
  6075                           
  6076                           ;keypad.c: 40:     timerBounces = TiGetTimer();
  6077  001F08  EC8C  F00E         	call	_TiGetTimer	;wreg free
  6078  001F0C  6E44               	movwf	_timerBounces^0,c
  6079                           
  6080                           ;keypad.c: 41:     timer_SMS = TiGetTimer();
  6081  001F0E  EC8C  F00E         	call	_TiGetTimer	;wreg free
  6082  001F12  6E43               	movwf	_timer_SMS^0,c
  6083  001F14  0012               	return		;funcret
  6084  001F16                     __end_of_initKeypad:
  6085                           	callstack 0
  6086                           
  6087 ;; *************** function _initJoystick *****************
  6088 ;; Defined at:
  6089 ;;		line 11 in file "Joystick.c"
  6090 ;; Parameters:    Size  Location     Type
  6091 ;;		None
  6092 ;; Auto vars:     Size  Location     Type
  6093 ;;		None
  6094 ;; Return value:  Size  Location     Type
  6095 ;;                  1    wreg      void 
  6096 ;; Registers used:
  6097 ;;		wreg, status,2
  6098 ;; Tracked objects:
  6099 ;;		On entry : 0/0
  6100 ;;		On exit  : 0/0
  6101 ;;		Unchanged: 0/0
  6102 ;; Data sizes:     COMRAM   BANK0   BANK1
  6103 ;;      Params:         0       0       0
  6104 ;;      Locals:         0       0       0
  6105 ;;      Temps:          0       0       0
  6106 ;;      Totals:         0       0       0
  6107 ;;Total ram usage:        0 bytes
  6108 ;; Hardware stack levels used: 1
  6109 ;; Hardware stack levels required when called: 2
  6110 ;; This function calls:
  6111 ;;		Nothing
  6112 ;; This function is called by:
  6113 ;;		_main
  6114 ;; This function uses a non-reentrant model
  6115 ;;
  6116                           
  6117                           	psect	text51
  6118  001EB2                     __ptext51:
  6119                           	callstack 0
  6120  001EB2                     _initJoystick:
  6121                           	callstack 28
  6122                           
  6123                           ;Joystick.c: 12:     TRISAbits.TRISA0 = 1;
  6124                           
  6125                           ;incstack = 0
  6126  001EB2  8092               	bsf	146,0,c	;volatile
  6127                           
  6128                           ;Joystick.c: 13:     TRISAbits.TRISA1 = 1;
  6129  001EB4  8292               	bsf	146,1,c	;volatile
  6130                           
  6131                           ;Joystick.c: 14:     ADCON0 = 0x03;
  6132  001EB6  0E03               	movlw	3
  6133  001EB8  6EC2               	movwf	194,c	;volatile
  6134                           
  6135                           ;Joystick.c: 15:     ADCON1 = 0x0C;
  6136  001EBA  0E0C               	movlw	12
  6137  001EBC  6EC1               	movwf	193,c	;volatile
  6138                           
  6139                           ;Joystick.c: 16:     ADCON2 = 0x44;
  6140  001EBE  0E44               	movlw	68
  6141  001EC0  6EC0               	movwf	192,c	;volatile
  6142                           
  6143                           ;Joystick.c: 18:     TRISCbits.TRISC0 = 0;
  6144  001EC2  9094               	bcf	148,0,c	;volatile
  6145                           
  6146                           ;Joystick.c: 19:     TRISCbits.TRISC1 = 0;
  6147  001EC4  9294               	bcf	148,1,c	;volatile
  6148                           
  6149                           ;Joystick.c: 20:     TRISCbits.TRISC2 = 0;
  6150  001EC6  9494               	bcf	148,2,c	;volatile
  6151                           
  6152                           ;Joystick.c: 21:     moved = 0;
  6153  001EC8  6A2B               	clrf	_moved^0,c
  6154                           
  6155                           ;Joystick.c: 22:     ADCON0bits.GO_DONE=1;
  6156  001ECA  82C2               	bsf	194,1,c	;volatile
  6157                           
  6158                           ;Joystick.c: 23:     ADCON0bits.CHS0=0;
  6159  001ECC  94C2               	bcf	194,2,c	;volatile
  6160                           
  6161                           ;Joystick.c: 24:     ADCON0bits.CHS1=1;
  6162  001ECE  86C2               	bsf	194,3,c	;volatile
  6163                           
  6164                           ;Joystick.c: 25:     stateJoy = 0;
  6165  001ED0  6A2A               	clrf	_stateJoy^0,c
  6166  001ED2  0012               	return		;funcret
  6167  001ED4                     __end_of_initJoystick:
  6168                           	callstack 0
  6169                           
  6170 ;; *************** function _initData *****************
  6171 ;; Defined at:
  6172 ;;		line 27 in file "EEPROM.c"
  6173 ;; Parameters:    Size  Location     Type
  6174 ;;		None
  6175 ;; Auto vars:     Size  Location     Type
  6176 ;;		None
  6177 ;; Return value:  Size  Location     Type
  6178 ;;                  1    wreg      void 
  6179 ;; Registers used:
  6180 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6181 ;; Tracked objects:
  6182 ;;		On entry : 0/0
  6183 ;;		On exit  : 0/0
  6184 ;;		Unchanged: 0/0
  6185 ;; Data sizes:     COMRAM   BANK0   BANK1
  6186 ;;      Params:         0       0       0
  6187 ;;      Locals:         0       0       0
  6188 ;;      Temps:          0       0       0
  6189 ;;      Totals:         0       0       0
  6190 ;;Total ram usage:        0 bytes
  6191 ;; Hardware stack levels used: 1
  6192 ;; Hardware stack levels required when called: 4
  6193 ;; This function calls:
  6194 ;;		_readEEPROM
  6195 ;;		_readUserData
  6196 ;; This function is called by:
  6197 ;;		_main
  6198 ;; This function uses a non-reentrant model
  6199 ;;
  6200                           
  6201                           	psect	text52
  6202  001A7E                     __ptext52:
  6203                           	callstack 0
  6204  001A7E                     _initData:
  6205                           	callstack 26
  6206                           
  6207                           ;EEPROM.c: 28:     state = 0;
  6208                           
  6209                           ;incstack = 0
  6210  001A7E  6A1E               	clrf	_state@EEPROM$F1761^0,c
  6211                           
  6212                           ;EEPROM.c: 29:     for (userNum = 0; userNum < 8; userNum++){
  6213  001A80  6A1D               	clrf	_userNum^0,c
  6214  001A82                     l2505:
  6215  001A82  0E07               	movlw	7
  6216  001A84  641D               	cpfsgt	_userNum^0,c
  6217  001A86  D001               	goto	l2509
  6218  001A88  D004               	goto	l859
  6219  001A8A                     l2509:
  6220                           
  6221                           ;EEPROM.c: 30:         readUserData();
  6222  001A8A  ECB3  F00B         	call	_readUserData	;wreg free
  6223                           
  6224                           ;EEPROM.c: 31:     }
  6225  001A8E  2A1D               	incf	_userNum^0,f,c
  6226  001A90  D7F8               	goto	l2505
  6227  001A92                     l859:
  6228                           
  6229                           ;EEPROM.c: 32:     for (position = 0; position < 5;){
  6230  001A92  6A1F               	clrf	_position^0,c
  6231  001A94                     l2515:
  6232  001A94  0E04               	movlw	4
  6233  001A96  641F               	cpfsgt	_position^0,c
  6234  001A98  D001               	goto	l2519
  6235  001A9A  D013               	goto	l2525
  6236  001A9C                     l2519:
  6237                           
  6238                           ;EEPROM.c: 33:         topScores[position].score = readEEPROM((0x90)+position);
  6239  001A9C  501F               	movf	_position^0,w,c
  6240  001A9E  EC0A  F007         	call	PL8	;call to abstracted procedure
  6241  001AA2  501F               	movf	_position^0,w,c
  6242  001AA4  0F90               	addlw	144
  6243  001AA6  EC4C  F000         	call	_readEEPROM
  6244  001AAA  6EDF               	movwf	indf2,c
  6245                           
  6246                           ;EEPROM.c: 34:         topScores[position].userNum = readEEPROM((0xA0)+position);
  6247  001AAC  501F               	movf	_position^0,w,c
  6248  001AAE  0D02               	mullw	2
  6249  001AB0  ECF8  F006         	call	PL4	;call to abstracted procedure
  6250  001AB4  501F               	movf	_position^0,w,c
  6251  001AB6  0FA0               	addlw	160
  6252  001AB8  EC4C  F000         	call	_readEEPROM
  6253  001ABC  6EDF               	movwf	indf2,c
  6254                           
  6255                           ;EEPROM.c: 35:         position++;
  6256  001ABE  2A1F               	incf	_position^0,f,c
  6257  001AC0  D7E9               	goto	l2515
  6258  001AC2                     l2525:
  6259                           
  6260                           ;EEPROM.c: 37:     lastUserPointer = readEEPROM(0xFF);
  6261  001AC2  0EFF               	movlw	255
  6262  001AC4  EC4C  F000         	call	_readEEPROM
  6263  001AC8  6E1B               	movwf	_lastUserPointer^0,c
  6264                           
  6265                           ;EEPROM.c: 38:     numScores = readEEPROM(0xFE);
  6266  001ACA  0EFE               	movlw	254
  6267  001ACC  EC4C  F000         	call	_readEEPROM
  6268  001AD0  6E20               	movwf	_numScores^0,c
  6269                           
  6270                           ;EEPROM.c: 39:     if (lastUserPointer == 0xFF){
  6271  001AD2  281B               	incf	_lastUserPointer^0,w,c
  6272  001AD4  E101               	bnz	l2531
  6273                           
  6274                           ;EEPROM.c: 40:         lastUserPointer = 0;
  6275  001AD6  6A1B               	clrf	_lastUserPointer^0,c
  6276  001AD8                     l2531:
  6277                           
  6278                           ;EEPROM.c: 42:     if (numScores == 0xFF){
  6279  001AD8  2820               	incf	_numScores^0,w,c
  6280  001ADA  B4D8               	btfsc	status,2,c
  6281                           
  6282                           ;EEPROM.c: 43:         numScores = 0;
  6283  001ADC  6A20               	clrf	_numScores^0,c
  6284  001ADE  0012               	return		;funcret
  6285  001AE0                     __end_of_initData:
  6286                           	callstack 0
  6287                           
  6288 ;; *************** function _readUserData *****************
  6289 ;; Defined at:
  6290 ;;		line 333 in file "EEPROM.c"
  6291 ;; Parameters:    Size  Location     Type
  6292 ;;		None
  6293 ;; Auto vars:     Size  Location     Type
  6294 ;;		None
  6295 ;; Return value:  Size  Location     Type
  6296 ;;                  1    wreg      void 
  6297 ;; Registers used:
  6298 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6299 ;; Tracked objects:
  6300 ;;		On entry : 0/0
  6301 ;;		On exit  : 0/0
  6302 ;;		Unchanged: 0/0
  6303 ;; Data sizes:     COMRAM   BANK0   BANK1
  6304 ;;      Params:         0       0       0
  6305 ;;      Locals:         0       0       0
  6306 ;;      Temps:          2       0       0
  6307 ;;      Totals:         2       0       0
  6308 ;;Total ram usage:        2 bytes
  6309 ;; Hardware stack levels used: 1
  6310 ;; Hardware stack levels required when called: 3
  6311 ;; This function calls:
  6312 ;;		_readEEPROM
  6313 ;; This function is called by:
  6314 ;;		_initData
  6315 ;; This function uses a non-reentrant model
  6316 ;;
  6317                           
  6318                           	psect	text53
  6319  001766                     __ptext53:
  6320                           	callstack 0
  6321  001766                     _readUserData:
  6322                           	callstack 26
  6323                           
  6324                           ;EEPROM.c: 334:     for (position = 0; position < 8; position++){
  6325                           
  6326                           ;incstack = 0
  6327  001766  6A1F               	clrf	_position^0,c
  6328  001768                     l2303:
  6329  001768  0E07               	movlw	7
  6330  00176A  641F               	cpfsgt	_position^0,c
  6331  00176C  D001               	goto	l2307
  6332  00176E  D007               	goto	l2313
  6333  001770                     l2307:
  6334                           
  6335                           ;EEPROM.c: 335:         users[userNum].username[position] = readEEPROM((userNum*16)+posi
      +                          tion);
  6336  001770  D839               	call	PL56	;call to abstracted procedure
  6337  001772  D829               	call	PL22	;call to abstracted procedure
  6338  001774  EC4C  F000         	call	_readEEPROM
  6339  001778  6EDF               	movwf	indf2,c
  6340                           
  6341                           ;EEPROM.c: 336:     }
  6342  00177A  2A1F               	incf	_position^0,f,c
  6343  00177C  D7F5               	goto	l2303
  6344  00177E                     l2313:
  6345                           
  6346                           ;EEPROM.c: 337:     users[userNum].username[8] = '\0';
  6347  00177E  501D               	movf	_userNum^0,w,c
  6348  001780  0D12               	mullw	18
  6349  001782  0E08               	movlw	low (_users+8)
  6350  001784  24F3               	addwf	243,w,c
  6351  001786  6ED9               	movwf	fsr2l,c
  6352  001788  0E01               	movlw	high (_users+8)
  6353  00178A  20F4               	addwfc	prodh,w,c
  6354  00178C  6EDA               	movwf	fsr2h,c
  6355  00178E  6ADF               	clrf	indf2,c
  6356                           
  6357                           ;EEPROM.c: 338:     for (position = 0; position < 8; position++){
  6358  001790  6A1F               	clrf	_position^0,c
  6359  001792                     l2317:
  6360  001792  0E07               	movlw	7
  6361  001794  641F               	cpfsgt	_position^0,c
  6362  001796  D001               	goto	l2321
  6363  001798  D00C               	goto	l2327
  6364  00179A                     l2321:
  6365                           
  6366                           ;EEPROM.c: 339:         users[userNum].password[position] = readEEPROM((userNum*16)+8+po
      +                          sition);
  6367  00179A  D824               	call	PL56	;call to abstracted procedure
  6368  00179C  0E09               	movlw	9
  6369  00179E  265F               	addwf	??_readUserData^0,f,c
  6370  0017A0  0E00               	movlw	0
  6371  0017A2  2260               	addwfc	(??_readUserData+1)^0,f,c
  6372  0017A4  D810               	call	PL22	;call to abstracted procedure
  6373  0017A6  0F08               	addlw	8
  6374  0017A8  EC4C  F000         	call	_readEEPROM
  6375  0017AC  6EDF               	movwf	indf2,c
  6376                           
  6377                           ;EEPROM.c: 340:     }
  6378  0017AE  2A1F               	incf	_position^0,f,c
  6379  0017B0  D7F0               	goto	l2317
  6380  0017B2                     l2327:
  6381                           
  6382                           ;EEPROM.c: 341:     users[userNum].password[8] = '\0';
  6383  0017B2  501D               	movf	_userNum^0,w,c
  6384  0017B4  0D12               	mullw	18
  6385  0017B6  0E11               	movlw	low (_users+17)
  6386  0017B8  24F3               	addwf	243,w,c
  6387  0017BA  6ED9               	movwf	fsr2l,c
  6388  0017BC  0E01               	movlw	high (_users+17)
  6389  0017BE  20F4               	addwfc	prodh,w,c
  6390  0017C0  6EDA               	movwf	fsr2h,c
  6391  0017C2  6ADF               	clrf	indf2,c
  6392  0017C4  0C00               	retlw	0	;funcret
  6393  0017C6                     __end_of_readUserData:
  6394                           	callstack 0
  6395  0017C6                     PL22:
  6396                           	callstack 26
  6397  0017C6  50F3               	movf	243,w,c
  6398  0017C8  265F               	addwf	??_readUserData^0,f,c
  6399  0017CA  50F4               	movf	244,w,c
  6400  0017CC  2260               	addwfc	(??_readUserData+1)^0,f,c
  6401  0017CE  501F               	movf	_position^0,w,c
  6402  0017D0  245F               	addwf	??_readUserData^0,w,c
  6403  0017D2  6ED9               	movwf	fsr2l,c
  6404  0017D4  0E00               	movlw	0
  6405  0017D6  2060               	addwfc	(??_readUserData+1)^0,w,c
  6406  0017D8  6EDA               	movwf	fsr2h,c
  6407  0017DA  501D               	movf	_userNum^0,w,c
  6408  0017DC  0D10               	mullw	16
  6409  0017DE  50F3               	movf	243,w,c
  6410  0017E0  241F               	addwf	_position^0,w,c
  6411  0017E2  0012               	return	
  6412  0017E4                     __end_ofPL22:
  6413                           	callstack 0
  6414  0017E4                     PL56:
  6415                           	callstack 26
  6416  0017E4  501D               	movf	_userNum^0,w,c
  6417  0017E6  0D12               	mullw	18
  6418  0017E8  0E00               	movlw	low _users
  6419  0017EA  6E5F               	movwf	??_readUserData^0,c
  6420  0017EC  0E01               	movlw	high _users
  6421  0017EE  6E60               	movwf	(??_readUserData+1)^0,c
  6422  0017F0  0012               	return	
  6423  0017F2                     __end_ofPL56:
  6424                           	callstack 0
  6425                           
  6426 ;; *************** function _readEEPROM *****************
  6427 ;; Defined at:
  6428 ;;		line 361 in file "EEPROM.c"
  6429 ;; Parameters:    Size  Location     Type
  6430 ;;  address         1    wreg     unsigned char 
  6431 ;; Auto vars:     Size  Location     Type
  6432 ;;  address         1    5[COMRAM] unsigned char 
  6433 ;; Return value:  Size  Location     Type
  6434 ;;                  1    wreg      unsigned char 
  6435 ;; Registers used:
  6436 ;;		wreg, status,2
  6437 ;; Tracked objects:
  6438 ;;		On entry : 0/0
  6439 ;;		On exit  : 0/0
  6440 ;;		Unchanged: 0/0
  6441 ;; Data sizes:     COMRAM   BANK0   BANK1
  6442 ;;      Params:         0       0       0
  6443 ;;      Locals:         1       0       0
  6444 ;;      Temps:          0       0       0
  6445 ;;      Totals:         1       0       0
  6446 ;;Total ram usage:        1 bytes
  6447 ;; Hardware stack levels used: 1
  6448 ;; Hardware stack levels required when called: 2
  6449 ;; This function calls:
  6450 ;;		Nothing
  6451 ;; This function is called by:
  6452 ;;		_initData
  6453 ;;		_readUserData
  6454 ;; This function uses a non-reentrant model
  6455 ;;
  6456                           
  6457                           	psect	text54
  6458  000098                     __ptext54:
  6459                           	callstack 0
  6460  000098                     _readEEPROM:
  6461                           	callstack 26
  6462                           
  6463                           ;incstack = 0
  6464                           ;readEEPROM@address stored from wreg
  6465  000098  6E5E               	movwf	readEEPROM@address^0,c
  6466                           
  6467                           ;EEPROM.c: 362:     EECON1bits.EEPGD = 0;
  6468  00009A  9EA6               	bcf	166,7,c	;volsfr
  6469                           
  6470                           ;EEPROM.c: 363:     EECON1bits.CFGS = 0;
  6471  00009C  9CA6               	bcf	166,6,c	;volsfr
  6472                           
  6473                           ;EEPROM.c: 364:     EEADR = address;
  6474  00009E  C05E  FFA9         	movff	readEEPROM@address,4009	;volatile
  6475                           
  6476                           ;EEPROM.c: 365:     EECON1bits.RD = 1;
  6477  0000A2  80A6               	bsf	166,0,c	;volsfr
  6478                           
  6479                           ;EEPROM.c: 366:     return EEDATA;
  6480  0000A4  50A8               	movf	168,w,c	;volatile
  6481  0000A6  0012               	return		;funcret
  6482  0000A8                     __end_of_readEEPROM:
  6483                           	callstack 0
  6484                           
  6485 ;; *************** function _initAudio *****************
  6486 ;; Defined at:
  6487 ;;		line 19 in file "Audio.c"
  6488 ;; Parameters:    Size  Location     Type
  6489 ;;		None
  6490 ;; Auto vars:     Size  Location     Type
  6491 ;;		None
  6492 ;; Return value:  Size  Location     Type
  6493 ;;                  1    wreg      void 
  6494 ;; Registers used:
  6495 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6496 ;; Tracked objects:
  6497 ;;		On entry : 0/0
  6498 ;;		On exit  : 0/0
  6499 ;;		Unchanged: 0/0
  6500 ;; Data sizes:     COMRAM   BANK0   BANK1
  6501 ;;      Params:         0       0       0
  6502 ;;      Locals:         0       0       0
  6503 ;;      Temps:          0       0       0
  6504 ;;      Totals:         0       0       0
  6505 ;;Total ram usage:        0 bytes
  6506 ;; Hardware stack levels used: 1
  6507 ;; Hardware stack levels required when called: 3
  6508 ;; This function calls:
  6509 ;;		_TiGetTimer
  6510 ;; This function is called by:
  6511 ;;		_main
  6512 ;; This function uses a non-reentrant model
  6513 ;;
  6514                           
  6515                           	psect	text55
  6516  00004C                     __ptext55:
  6517                           	callstack 0
  6518  00004C                     _initAudio:
  6519                           	callstack 27
  6520                           
  6521                           ;Audio.c: 20:     TRISCbits.TRISC3 = 0;
  6522                           
  6523                           ;incstack = 0
  6524  00004C  9694               	bcf	148,3,c	;volatile
  6525                           
  6526                           ;Audio.c: 21:     state = 0;
  6527  00004E  6A39               	clrf	_state@Audio$F967^0,c
  6528                           
  6529                           ;Audio.c: 22:     periodTimer = TiGetTimer();
  6530  000050  EC8C  F00E         	call	_TiGetTimer	;wreg free
  6531  000054  6E38               	movwf	_periodTimer^0,c
  6532                           
  6533                           ;Audio.c: 23:     timerSong = TiGetTimer();
  6534  000056  EC8C  F00E         	call	_TiGetTimer	;wreg free
  6535  00005A  6E37               	movwf	_timerSong^0,c
  6536                           
  6537                           ;Audio.c: 24:     period = 1;
  6538  00005C  0E01               	movlw	1
  6539  00005E  6E36               	movwf	_period^0,c
  6540  000060  0C01               	retlw	1	;funcret
  6541  000062                     __end_of_initAudio:
  6542                           	callstack 0
  6543                           
  6544 ;; *************** function _dataMotor *****************
  6545 ;; Defined at:
  6546 ;;		line 47 in file "EEPROM.c"
  6547 ;; Parameters:    Size  Location     Type
  6548 ;;		None
  6549 ;; Auto vars:     Size  Location     Type
  6550 ;;		None
  6551 ;; Return value:  Size  Location     Type
  6552 ;;                  1    wreg      void 
  6553 ;; Registers used:
  6554 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6555 ;; Tracked objects:
  6556 ;;		On entry : 0/0
  6557 ;;		On exit  : 0/0
  6558 ;;		Unchanged: 0/0
  6559 ;; Data sizes:     COMRAM   BANK0   BANK1
  6560 ;;      Params:         0       0       0
  6561 ;;      Locals:         0       2       0
  6562 ;;      Temps:          6       0       0
  6563 ;;      Totals:         6       2       0
  6564 ;;Total ram usage:        8 bytes
  6565 ;; Hardware stack levels used: 1
  6566 ;; Hardware stack levels required when called: 6
  6567 ;; This function calls:
  6568 ;;		_LcGotoXY
  6569 ;;		_LcPutChar
  6570 ;;		___lbdiv
  6571 ;;		___lbmod
  6572 ;;		_saveEEPROM
  6573 ;; This function is called by:
  6574 ;;		_main
  6575 ;; This function uses a non-reentrant model
  6576 ;;
  6577                           
  6578                           	psect	text56
  6579  0009A8                     __ptext56:
  6580                           	callstack 0
  6581  0009A8                     _dataMotor:
  6582                           	callstack 24
  6583                           
  6584                           ;EEPROM.c: 48:     switch(state){
  6585                           
  6586                           ;incstack = 0
  6587  0009A8  D1BE               	goto	l7045
  6588  0009AA                     l6819:
  6589                           
  6590                           ;EEPROM.c: 53:             status = 2;
  6591  0009AA  0E02               	movlw	2
  6592  0009AC  6E1C               	movwf	_status^0,c
  6593                           
  6594                           ;EEPROM.c: 54:             if (userNum != 8){
  6595  0009AE  0E08               	movlw	8
  6596  0009B0  181D               	xorwf	_userNum^0,w,c
  6597  0009B2  E003               	bz	l6825
  6598                           
  6599                           ;EEPROM.c: 55:                 state = 2;
  6600  0009B4  0E02               	movlw	2
  6601  0009B6  6E1E               	movwf	_state@EEPROM$F1761^0,c
  6602                           
  6603                           ;EEPROM.c: 57:             } else {
  6604  0009B8  0C02               	retlw	2
  6605  0009BA                     l6825:
  6606                           
  6607                           ;EEPROM.c: 58:                 status = 1;
  6608  0009BA  0E01               	movlw	1
  6609  0009BC  6E1C               	movwf	_status^0,c
  6610  0009BE                     l6827:
  6611                           
  6612                           ;EEPROM.c: 59:                 state = 0;
  6613  0009BE  6A1E               	clrf	_state@EEPROM$F1761^0,c
  6614  0009C0  0012               	return	
  6615  0009C2                     l6829:
  6616                           
  6617                           ;EEPROM.c: 64:             if (users[userNum].username[position] == (*mUser).username[po
      +                          sition]){
  6618  0009C2  501F               	movf	_position^0,w,c
  6619  0009C4  240B               	addwf	_mUser@EEPROM$F1764^0,w,c
  6620  0009C6  6ED9               	movwf	fsr2l,c
  6621  0009C8  DA2B               	call	PL10	;call to abstracted procedure
  6622  0009CA  E109               	bnz	l874
  6623                           
  6624                           ;EEPROM.c: 67:                 if ((*mUser).username[position] == '\0'){
  6625  0009CC  DA3F               	call	PL12	;call to abstracted procedure
  6626  0009CE  50DF               	movf	indf2,w,c
  6627  0009D0  E104               	bnz	l6837
  6628                           
  6629                           ;EEPROM.c: 68:                     state = 3;
  6630  0009D2  0E03               	movlw	3
  6631  0009D4  6E1E               	movwf	_state@EEPROM$F1761^0,c
  6632                           
  6633                           ;EEPROM.c: 69:                     position = 0;
  6634  0009D6  6A1F               	clrf	_position^0,c
  6635                           
  6636                           ;EEPROM.c: 70:                 } else {
  6637  0009D8  0012               	return	
  6638  0009DA                     l6837:
  6639                           
  6640                           ;EEPROM.c: 71:                     position++;
  6641  0009DA  2A1F               	incf	_position^0,f,c
  6642  0009DC  0012               	return	
  6643  0009DE                     l874:
  6644                           
  6645                           ;EEPROM.c: 74:                 position = 0;
  6646  0009DE  6A1F               	clrf	_position^0,c
  6647                           
  6648                           ;EEPROM.c: 75:                 userNum++;
  6649  0009E0  2A1D               	incf	_userNum^0,f,c
  6650                           
  6651                           ;EEPROM.c: 76:                 state = 1;
  6652  0009E2  0E01               	movlw	1
  6653  0009E4  6E1E               	movwf	_state@EEPROM$F1761^0,c
  6654  0009E6  0C01               	retlw	1
  6655  0009E8                     l6843:
  6656                           
  6657                           ;EEPROM.c: 83:             if (users[userNum].password[position] == (*mUser).password[po
      +                          sition]){
  6658  0009E8  DA08               	call	PL6	;call to abstracted procedure
  6659  0009EA  501D               	movf	_userNum^0,w,c
  6660  0009EC  0D12               	mullw	18
  6661  0009EE  0E00               	movlw	low _users
  6662  0009F0  6E6F               	movwf	(??_dataMotor+3)^0,c
  6663  0009F2  0E01               	movlw	high _users
  6664  0009F4  6E70               	movwf	(??_dataMotor+4)^0,c
  6665  0009F6  0E09               	movlw	9
  6666  0009F8  266F               	addwf	(??_dataMotor+3)^0,f,c
  6667  0009FA  0E00               	movlw	0
  6668  0009FC  2270               	addwfc	(??_dataMotor+4)^0,f,c
  6669  0009FE  50F3               	movf	243,w,c
  6670  000A00  266F               	addwf	(??_dataMotor+3)^0,f,c
  6671  000A02  50F4               	movf	244,w,c
  6672  000A04  2270               	addwfc	(??_dataMotor+4)^0,f,c
  6673  000A06  501F               	movf	_position^0,w,c
  6674  000A08  246F               	addwf	(??_dataMotor+3)^0,w,c
  6675  000A0A  6EE1               	movwf	fsr1l,c
  6676  000A0C  0E00               	movlw	0
  6677  000A0E  2070               	addwfc	(??_dataMotor+4)^0,w,c
  6678  000A10  6EE2               	movwf	fsr1h,c
  6679  000A12  50DE               	movf	postinc2,w,c
  6680  000A14  18E6               	xorwf	postinc1,w,c
  6681  000A16  E1D1               	bnz	l6825
  6682                           
  6683                           ;EEPROM.c: 85:                 if ((*mUser).password[position] == '\0'){
  6684  000A18  D9F0               	call	PL6	;call to abstracted procedure
  6685  000A1A  50DF               	movf	indf2,w,c
  6686  000A1C  E1DE               	bnz	l6837
  6687                           
  6688                           ;EEPROM.c: 86:                     state = 0;
  6689  000A1E  6A1E               	clrf	_state@EEPROM$F1761^0,c
  6690                           
  6691                           ;EEPROM.c: 87:                     status = 0;
  6692  000A20  6A1C               	clrf	_status^0,c
  6693                           
  6694                           ;EEPROM.c: 88:                 }else {
  6695  000A22  0012               	return	
  6696  000A24                     l6855:
  6697                           
  6698                           ;EEPROM.c: 102:             if (userNum != 8){
  6699  000A24  0E08               	movlw	8
  6700  000A26  181D               	xorwf	_userNum^0,w,c
  6701  000A28  E003               	bz	l6859
  6702                           
  6703                           ;EEPROM.c: 103:                 state = 6;
  6704  000A2A  0E06               	movlw	6
  6705  000A2C  6E1E               	movwf	_state@EEPROM$F1761^0,c
  6706                           
  6707                           ;EEPROM.c: 105:             } else {
  6708  000A2E  0C06               	retlw	6
  6709  000A30                     l6859:
  6710                           
  6711                           ;EEPROM.c: 106:                 state = 10;
  6712  000A30  0E0A               	movlw	10
  6713  000A32  6E1E               	movwf	_state@EEPROM$F1761^0,c
  6714  000A34  0C0A               	retlw	10
  6715  000A36                     l6861:
  6716                           
  6717                           ;EEPROM.c: 110:             if (users[userNum].username[position] == (*mUser).username[p
      +                          osition]){
  6718  000A36  501F               	movf	_position^0,w,c
  6719  000A38  240B               	addwf	_mUser@EEPROM$F1764^0,w,c
  6720  000A3A  6ED9               	movwf	fsr2l,c
  6721  000A3C  D9F1               	call	PL10	;call to abstracted procedure
  6722  000A3E  E107               	bnz	l6871
  6723                           
  6724                           ;EEPROM.c: 112:                 if ((*mUser).username[position] == '\0'){
  6725  000A40  DA05               	call	PL12	;call to abstracted procedure
  6726  000A42  50DF               	movf	indf2,w,c
  6727  000A44  E1CA               	bnz	l6837
  6728                           
  6729                           ;EEPROM.c: 113:                     state = 0;
  6730  000A46  6A1E               	clrf	_state@EEPROM$F1761^0,c
  6731                           
  6732                           ;EEPROM.c: 114:                     status = 4;
  6733  000A48  0E04               	movlw	4
  6734  000A4A  6E1C               	movwf	_status^0,c
  6735                           
  6736                           ;EEPROM.c: 115:                 }else {
  6737  000A4C  0C04               	retlw	4
  6738  000A4E                     l6871:
  6739                           
  6740                           ;EEPROM.c: 120:                 state = 7;
  6741  000A4E  0E07               	movlw	7
  6742  000A50  6E1E               	movwf	_state@EEPROM$F1761^0,c
  6743  000A52  0C07               	retlw	7
  6744  000A54                     l891:
  6745                           
  6746                           ;EEPROM.c: 125:             position = 0;
  6747  000A54  6A1F               	clrf	_position^0,c
  6748                           
  6749                           ;EEPROM.c: 126:             userNum++;
  6750  000A56  2A1D               	incf	_userNum^0,f,c
  6751                           
  6752                           ;EEPROM.c: 127:             state = 5;
  6753  000A58  0E05               	movlw	5
  6754  000A5A  6E1E               	movwf	_state@EEPROM$F1761^0,c
  6755                           
  6756                           ;EEPROM.c: 128:             break;
  6757  000A5C  0C05               	retlw	5
  6758  000A5E                     l6877:
  6759                           
  6760                           ;EEPROM.c: 131:             saveEEPROM((lastUserPointer*16)+position ,(*mUser).username[
      +                          position]);
  6761  000A5E  D9F6               	call	PL12	;call to abstracted procedure
  6762  000A60  DA03               	call	PL50	;call to abstracted procedure
  6763  000A62  EC6A  F00F         	call	_saveEEPROM
  6764                           
  6765                           ;EEPROM.c: 132:             users[lastUserPointer].username[position] = (*mUser).usernam
      +                          e[position];
  6766  000A66  D9F2               	call	PL12	;call to abstracted procedure
  6767  000A68  501B               	movf	_lastUserPointer^0,w,c
  6768  000A6A  0D12               	mullw	18
  6769  000A6C  0E00               	movlw	low _users
  6770  000A6E  6E6C               	movwf	??_dataMotor^0,c
  6771  000A70  0E01               	movlw	high _users
  6772  000A72  6E6D               	movwf	(??_dataMotor+1)^0,c
  6773  000A74  50F3               	movf	243,w,c
  6774  000A76  266C               	addwf	??_dataMotor^0,f,c
  6775  000A78  50F4               	movf	244,w,c
  6776  000A7A  226D               	addwfc	(??_dataMotor+1)^0,f,c
  6777  000A7C  501F               	movf	_position^0,w,c
  6778  000A7E  246C               	addwf	??_dataMotor^0,w,c
  6779  000A80  6EE1               	movwf	fsr1l,c
  6780  000A82  0E00               	movlw	0
  6781  000A84  206D               	addwfc	(??_dataMotor+1)^0,w,c
  6782  000A86  6EE2               	movwf	fsr1h,c
  6783  000A88  CFDF FFE7          	movff	indf2,indf1
  6784                           
  6785                           ;EEPROM.c: 133:             if(position < 7){
  6786  000A8C  0E07               	movlw	7
  6787  000A8E  601F               	cpfslt	_position^0,c
  6788  000A90  D003               	goto	l893
  6789                           
  6790                           ;EEPROM.c: 134:                 position++;
  6791  000A92  2A1F               	incf	_position^0,f,c
  6792                           
  6793                           ;EEPROM.c: 135:                 saveState = 10;
  6794  000A94  0E0A               	movlw	10
  6795  000A96  D002               	goto	L7
  6796  000A98                     l893:
  6797                           
  6798                           ;EEPROM.c: 137:                 position = 0;
  6799  000A98  6A1F               	clrf	_position^0,c
  6800  000A9A                     l6887:
  6801                           
  6802                           ;EEPROM.c: 138:                 saveState = 12;
  6803  000A9A  0E0C               	movlw	12
  6804  000A9C                     L7:
  6805  000A9C  6E19               	movwf	_saveState^0,c
  6806  000A9E                     l894:
  6807                           
  6808                           ;EEPROM.c: 140:             state = 11;
  6809  000A9E  0E0B               	movlw	11
  6810  000AA0  6E1E               	movwf	_state@EEPROM$F1761^0,c
  6811                           
  6812                           ;EEPROM.c: 141:             break;
  6813  000AA2  0C0B               	retlw	11
  6814  000AA4                     l895:
  6815                           
  6816                           ;EEPROM.c: 143:             if(EECON1bits.WR == 0){
  6817  000AA4  B2A6               	btfsc	166,1,c	;volsfr
  6818  000AA6  0012               	return	
  6819                           
  6820                           ;EEPROM.c: 144:                 state = saveState;
  6821  000AA8  C019  F01E         	movff	_saveState,_state@EEPROM$F1761
  6822  000AAC  0012               	return	
  6823  000AAE                     l6891:
  6824                           
  6825                           ;EEPROM.c: 148:             users[lastUserPointer].password[position] = (*mUser).passwor
      +                          d[position];
  6826  000AAE  D9A5               	call	PL6	;call to abstracted procedure
  6827  000AB0  501B               	movf	_lastUserPointer^0,w,c
  6828  000AB2  0D12               	mullw	18
  6829  000AB4  0E00               	movlw	low _users
  6830  000AB6  6E6E               	movwf	(??_dataMotor+2)^0,c
  6831  000AB8  0E01               	movlw	high _users
  6832  000ABA  6E6F               	movwf	(??_dataMotor+3)^0,c
  6833  000ABC  0E09               	movlw	9
  6834  000ABE  266E               	addwf	(??_dataMotor+2)^0,f,c
  6835  000AC0  0E00               	movlw	0
  6836  000AC2  226F               	addwfc	(??_dataMotor+3)^0,f,c
  6837  000AC4  50F3               	movf	243,w,c
  6838  000AC6  266E               	addwf	(??_dataMotor+2)^0,f,c
  6839  000AC8  50F4               	movf	244,w,c
  6840  000ACA  226F               	addwfc	(??_dataMotor+3)^0,f,c
  6841  000ACC  501F               	movf	_position^0,w,c
  6842  000ACE  246E               	addwf	(??_dataMotor+2)^0,w,c
  6843  000AD0  6EE1               	movwf	fsr1l,c
  6844  000AD2  0E00               	movlw	0
  6845  000AD4  206F               	addwfc	(??_dataMotor+3)^0,w,c
  6846  000AD6  6EE2               	movwf	fsr1h,c
  6847  000AD8  CFDF FFE7          	movff	indf2,indf1
  6848                           
  6849                           ;EEPROM.c: 149:             saveEEPROM((lastUserPointer*16)+position+8,(*mUser).password
      +                          [position]);
  6850  000ADC  D98E               	call	PL6	;call to abstracted procedure
  6851  000ADE  D9C4               	call	PL50	;call to abstracted procedure
  6852  000AE0  0F08               	addlw	8
  6853  000AE2  EC6A  F00F         	call	_saveEEPROM
  6854                           
  6855                           ;EEPROM.c: 150:             if(position < 7){
  6856  000AE6  0E07               	movlw	7
  6857  000AE8  601F               	cpfslt	_position^0,c
  6858  000AEA  D002               	goto	l898
  6859                           
  6860                           ;EEPROM.c: 151:                 position++;
  6861  000AEC  2A1F               	incf	_position^0,f,c
  6862  000AEE  D7D5               	goto	l6887
  6863  000AF0                     l898:
  6864                           
  6865                           ;EEPROM.c: 154:                 position = 0;
  6866  000AF0  6A1F               	clrf	_position^0,c
  6867                           
  6868                           ;EEPROM.c: 155:                 saveState = 14;
  6869  000AF2  0E0E               	movlw	14
  6870  000AF4  D7D3               	goto	L7
  6871  000AF6                     l6903:
  6872                           
  6873                           ;EEPROM.c: 160:             if (position >= numScores){
  6874  000AF6  5020               	movf	_numScores^0,w,c
  6875  000AF8  5C1F               	subwf	_position^0,w,c
  6876  000AFA  E302               	bnc	l6909
  6877                           
  6878                           ;EEPROM.c: 161:                 state = 16;
  6879  000AFC  0E10               	movlw	16
  6880  000AFE  D76A               	goto	L8
  6881  000B00                     l6909:
  6882  000B00  501F               	movf	_position^0,w,c
  6883  000B02  0D02               	mullw	2
  6884  000B04  D975               	call	PL4	;call to abstracted procedure
  6885  000B06  501B               	movf	_lastUserPointer^0,w,c
  6886  000B08  18DE               	xorwf	postinc2,w,c
  6887  000B0A  E001 D766          	bnz	l6837
  6888                           
  6889                           ;EEPROM.c: 164:                 topScores[position].userNum = 0xFF;
  6890  000B0E  501F               	movf	_position^0,w,c
  6891  000B10  0D02               	mullw	2
  6892  000B12  D96E               	call	PL4	;call to abstracted procedure
  6893  000B14  68DF               	setf	indf2,c
  6894                           
  6895                           ;EEPROM.c: 165:                 topScores[position].score = 0xFF;
  6896  000B16  501F               	movf	_position^0,w,c
  6897  000B18  D97D               	call	PL8	;call to abstracted procedure
  6898  000B1A  68DF               	setf	indf2,c
  6899                           
  6900                           ;EEPROM.c: 166:                 numScores--;
  6901  000B1C  0620               	decf	_numScores^0,f,c
  6902                           
  6903                           ;EEPROM.c: 167:                 state = 15;
  6904  000B1E  0E0F               	movlw	15
  6905  000B20  6E1E               	movwf	_state@EEPROM$F1761^0,c
  6906                           
  6907                           ;EEPROM.c: 168:             }else{
  6908  000B22  0C0F               	retlw	15
  6909  000B24                     l6919:
  6910                           
  6911                           ;EEPROM.c: 173:             if (position < numScores){
  6912  000B24  5020               	movf	_numScores^0,w,c
  6913  000B26  5C1F               	subwf	_position^0,w,c
  6914  000B28  E218               	bc	l906
  6915                           
  6916                           ;EEPROM.c: 174:                 topScores[position].userNum = topScores[position+1].user
      +                          Num;
  6917  000B2A  501F               	movf	_position^0,w,c
  6918  000B2C  0D02               	mullw	2
  6919  000B2E  50F3               	movf	243,w,c
  6920  000B30  0F04               	addlw	low (_topScores+3)
  6921  000B32  6ED9               	movwf	fsr2l,c
  6922  000B34  6ADA               	clrf	fsr2h,c
  6923  000B36  501F               	movf	_position^0,w,c
  6924  000B38  0D02               	mullw	2
  6925  000B3A  50F3               	movf	243,w,c
  6926  000B3C  0F02               	addlw	low (_topScores+1)
  6927  000B3E  6EE1               	movwf	fsr1l,c
  6928  000B40  6AE2               	clrf	fsr1h,c
  6929  000B42  CFDF FFE7          	movff	indf2,indf1
  6930                           
  6931                           ;EEPROM.c: 175:                 topScores[position].score = topScores[position+1].score;
  6932  000B46  501F               	movf	_position^0,w,c
  6933  000B48  0D02               	mullw	2
  6934  000B4A  50F3               	movf	243,w,c
  6935  000B4C  0F03               	addlw	low (_topScores+2)
  6936  000B4E  6ED9               	movwf	fsr2l,c
  6937  000B50  6ADA               	clrf	fsr2h,c
  6938  000B52  D983               	call	PL18	;call to abstracted procedure
  6939  000B54  CFDF FFE7          	movff	indf2,indf1
  6940  000B58  D740               	goto	l6837
  6941  000B5A                     l906:
  6942                           
  6943                           ;EEPROM.c: 178:                 position = 0;
  6944  000B5A  6A1F               	clrf	_position^0,c
  6945                           
  6946                           ;EEPROM.c: 179:                 state = 14;
  6947  000B5C  0E0E               	movlw	14
  6948  000B5E  6E1E               	movwf	_state@EEPROM$F1761^0,c
  6949  000B60  0C0E               	retlw	14
  6950  000B62                     l6927:
  6951                           
  6952                           ;EEPROM.c: 183:             if (position < 5){
  6953  000B62  0E05               	movlw	5
  6954  000B64  601F               	cpfslt	_position^0,c
  6955  000B66  D00A               	goto	l6935
  6956                           
  6957                           ;EEPROM.c: 184:                 saveEEPROM(0x90 + position, topScores[position].score);
  6958  000B68  501F               	movf	_position^0,w,c
  6959  000B6A  D954               	call	PL8	;call to abstracted procedure
  6960  000B6C  50DF               	movf	indf2,w,c
  6961  000B6E  6E5E               	movwf	saveEEPROM@data^0,c
  6962  000B70  501F               	movf	_position^0,w,c
  6963  000B72  0F90               	addlw	144
  6964  000B74  EC6A  F00F         	call	_saveEEPROM
  6965                           
  6966                           ;EEPROM.c: 185:                 saveState = 17;
  6967  000B78  0E11               	movlw	17
  6968  000B7A  D790               	goto	L7
  6969  000B7C                     l6935:
  6970                           
  6971                           ;EEPROM.c: 188:                 state = 18;
  6972  000B7C  0E12               	movlw	18
  6973  000B7E  6E1E               	movwf	_state@EEPROM$F1761^0,c
  6974  000B80  0C12               	retlw	18
  6975  000B82                     l6937:
  6976                           
  6977                           ;EEPROM.c: 193:             saveEEPROM(0xA0 + position, topScores[position].userNum);
  6978  000B82  501F               	movf	_position^0,w,c
  6979  000B84  0D02               	mullw	2
  6980  000B86  D934               	call	PL4	;call to abstracted procedure
  6981  000B88  50DF               	movf	indf2,w,c
  6982  000B8A  6E5E               	movwf	saveEEPROM@data^0,c
  6983  000B8C  501F               	movf	_position^0,w,c
  6984  000B8E  0FA0               	addlw	160
  6985  000B90  EC6A  F00F         	call	_saveEEPROM
  6986                           
  6987                           ;EEPROM.c: 194:             saveState = 16;
  6988  000B94  0E10               	movlw	16
  6989  000B96  6E19               	movwf	_saveState^0,c
  6990                           
  6991                           ;EEPROM.c: 195:             state = 11;
  6992  000B98  0E0B               	movlw	11
  6993  000B9A  6E1E               	movwf	_state@EEPROM$F1761^0,c
  6994  000B9C  D71E               	goto	l6837
  6995  000B9E                     l6945:
  6996                           
  6997                           ;EEPROM.c: 201:             saveEEPROM(0xFE,numScores);
  6998  000B9E  D96B               	call	PL78	;call to abstracted procedure
  6999  000BA0  EC6A  F00F         	call	_saveEEPROM
  7000                           
  7001                           ;EEPROM.c: 203:             saveState = 19;
  7002  000BA4  0E13               	movlw	19
  7003  000BA6  D77A               	goto	L7
  7004  000BA8                     l6951:
  7005                           
  7006                           ;EEPROM.c: 207:             lastUserPointer = (lastUserPointer+1)%8;
  7007  000BA8  281B               	incf	_lastUserPointer^0,w,c
  7008  000BAA  0B07               	andlw	7
  7009  000BAC  6E1B               	movwf	_lastUserPointer^0,c
  7010                           
  7011                           ;EEPROM.c: 208:             saveEEPROM(0xFF,lastUserPointer);
  7012  000BAE  C01B  F05E         	movff	_lastUserPointer,saveEEPROM@data
  7013  000BB2  0EFF               	movlw	255
  7014  000BB4  EC6A  F00F         	call	_saveEEPROM
  7015                           
  7016                           ;EEPROM.c: 209:             saveState = 0;
  7017  000BB8  6A19               	clrf	_saveState^0,c
  7018                           
  7019                           ;EEPROM.c: 210:             status = 3;
  7020  000BBA  0E03               	movlw	3
  7021  000BBC  6E1C               	movwf	_status^0,c
  7022  000BBE  D76F               	goto	l894
  7023  000BC0                     l6961:
  7024                           
  7025                           ;EEPROM.c: 215:             if (numScores < 5){
  7026  000BC0  0E05               	movlw	5
  7027  000BC2  6020               	cpfslt	_numScores^0,c
  7028  000BC4  D008               	goto	l6973
  7029                           
  7030                           ;EEPROM.c: 216:                 status = numScores;
  7031  000BC6  C020  F01C         	movff	_numScores,_status
  7032                           
  7033                           ;EEPROM.c: 217:                 numScores++;
  7034  000BCA  2A20               	incf	_numScores^0,f,c
  7035                           
  7036                           ;EEPROM.c: 218:                 saveEEPROM(0xFE,numScores);
  7037  000BCC  D954               	call	PL78	;call to abstracted procedure
  7038  000BCE  EC6A  F00F         	call	_saveEEPROM
  7039                           
  7040                           ;EEPROM.c: 220:                 saveState = 21;
  7041  000BD2  0E15               	movlw	21
  7042  000BD4  D763               	goto	L7
  7043  000BD6                     l6973:
  7044  000BD6  0E05               	movlw	5
  7045  000BD8  181F               	xorwf	_position^0,w,c
  7046  000BDA  E109               	bnz	l6979
  7047                           
  7048                           ;EEPROM.c: 224:                 if (topScores[status].score < saveScore){
  7049  000BDC  501C               	movf	_status^0,w,c
  7050  000BDE  D91A               	call	PL8	;call to abstracted procedure
  7051  000BE0  501A               	movf	_saveScore^0,w,c
  7052  000BE2  5CDE               	subwf	postinc2,w,c
  7053  000BE4  E301 D6EB          	bc	l6827
  7054                           
  7055                           ;EEPROM.c: 225:                     state = 21;
  7056  000BE8  0E15               	movlw	21
  7057  000BEA  6E1E               	movwf	_state@EEPROM$F1761^0,c
  7058                           
  7059                           ;EEPROM.c: 226:                 } else{
  7060  000BEC  0C15               	retlw	21
  7061  000BEE                     l6979:
  7062                           
  7063                           ;EEPROM.c: 230:                 if (topScores[position].score < topScores[status].score)
      +                          {
  7064  000BEE  501C               	movf	_status^0,w,c
  7065  000BF0  D911               	call	PL8	;call to abstracted procedure
  7066  000BF2  D933               	call	PL18	;call to abstracted procedure
  7067  000BF4  50DE               	movf	postinc2,w,c
  7068  000BF6  5CE6               	subwf	postinc1,w,c
  7069  000BF8  E301 D6EF          	bc	l6837
  7070                           
  7071                           ;EEPROM.c: 231:                     status = position;
  7072  000BFC  C01F  F01C         	movff	_position,_status
  7073  000C00  D6EC               	goto	l6837
  7074  000C02                     l6985:
  7075                           
  7076                           ;EEPROM.c: 237:             topScores[status].score = saveScore;
  7077  000C02  501C               	movf	_status^0,w,c
  7078  000C04  D907               	call	PL8	;call to abstracted procedure
  7079  000C06  C01A  FFDF         	movff	_saveScore,indf2
  7080                           
  7081                           ;EEPROM.c: 238:             topScores[status].userNum = userNum;
  7082  000C0A  501C               	movf	_status^0,w,c
  7083  000C0C  0D02               	mullw	2
  7084  000C0E  D8F0               	call	PL4	;call to abstracted procedure
  7085  000C10  C01D  FFDF         	movff	_userNum,indf2
  7086                           
  7087                           ;EEPROM.c: 239:             state = 22;
  7088  000C14  0E16               	movlw	22
  7089  000C16  6E1E               	movwf	_state@EEPROM$F1761^0,c
  7090                           
  7091                           ;EEPROM.c: 240:             break;
  7092  000C18  0C16               	retlw	22
  7093  000C1A                     l6989:
  7094                           
  7095                           ;EEPROM.c: 242:             saveEEPROM(0x90 + status,saveScore);
  7096  000C1A  C01A  F05E         	movff	_saveScore,saveEEPROM@data
  7097  000C1E  501C               	movf	_status^0,w,c
  7098  000C20  0F90               	addlw	144
  7099  000C22  EC6A  F00F         	call	_saveEEPROM
  7100                           
  7101                           ;EEPROM.c: 243:             saveState = 23;
  7102  000C26  0E17               	movlw	23
  7103  000C28  D739               	goto	L7
  7104  000C2A                     l6995:
  7105                           
  7106                           ;EEPROM.c: 247:             saveEEPROM(0xA0 + status,userNum);
  7107  000C2A  C01D  F05E         	movff	_userNum,saveEEPROM@data
  7108  000C2E  501C               	movf	_status^0,w,c
  7109  000C30  0FA0               	addlw	160
  7110  000C32  EC6A  F00F         	call	_saveEEPROM
  7111                           
  7112                           ;EEPROM.c: 248:             saveState = 0;
  7113  000C36  6A19               	clrf	_saveState^0,c
  7114  000C38  D732               	goto	l894
  7115  000C3A                     l7001:
  7116                           
  7117                           ;EEPROM.c: 252:             if (users[topScores[position].userNum].username[status] != '
      +                          \0'){
  7118  000C3A  501F               	movf	_position^0,w,c
  7119  000C3C  D8C2               	call	PL2	;call to abstracted procedure
  7120  000C3E  E006               	bz	l7007
  7121                           
  7122                           ;EEPROM.c: 253:                 LcPutChar(users[topScores[position].userNum].username[st
      +                          atus]);
  7123  000C40  501F               	movf	_position^0,w,c
  7124  000C42  D8BF               	call	PL2	;call to abstracted procedure
  7125  000C44  ECE6  F00E         	call	_LcPutChar
  7126  000C48                     l7005:
  7127                           
  7128                           ;EEPROM.c: 254:                 status++;
  7129  000C48  2A1C               	incf	_status^0,f,c
  7130                           
  7131                           ;EEPROM.c: 255:             } else {
  7132  000C4A  0012               	return	
  7133  000C4C                     l7007:
  7134                           
  7135                           ;EEPROM.c: 256:                 LcPutChar(':');
  7136  000C4C  0E3A               	movlw	58
  7137  000C4E  ECE6  F00E         	call	_LcPutChar
  7138                           
  7139                           ;EEPROM.c: 257:                 state = 51;
  7140  000C52  0E33               	movlw	51
  7141  000C54  6E1E               	movwf	_state@EEPROM$F1761^0,c
  7142                           
  7143                           ;EEPROM.c: 258:                 LcGotoXY(0,1);
  7144  000C56  ECEA  F008         	call	PL60	;call to abstracted procedure
  7145  000C5A  ECA4  F00E         	call	_LcGotoXY
  7146                           
  7147                           ;EEPROM.c: 259:                 status = 0;
  7148  000C5E  6A1C               	clrf	_status^0,c
  7149  000C60  0012               	return	
  7150  000C62                     l7015:
  7151                           
  7152                           ;EEPROM.c: 263:             LcPutChar((topScores[position].score/10)+'0');
  7153  000C62  0E0A               	movlw	10
  7154  000C64  6E5E               	movwf	___lbdiv@divisor^0,c
  7155  000C66  501F               	movf	_position^0,w,c
  7156  000C68  D8D5               	call	PL8	;call to abstracted procedure
  7157  000C6A  50DF               	movf	indf2,w,c
  7158  000C6C  EC72  F00E         	call	___lbdiv
  7159  000C70  0F30               	addlw	48
  7160  000C72  ECE6  F00E         	call	_LcPutChar
  7161                           
  7162                           ;EEPROM.c: 264:             LcPutChar((topScores[position].score%10)+'0');
  7163  000C76  0E0A               	movlw	10
  7164  000C78  6E5E               	movwf	___lbmod@divisor^0,c
  7165  000C7A  501F               	movf	_position^0,w,c
  7166  000C7C  D8CB               	call	PL8	;call to abstracted procedure
  7167  000C7E  50DF               	movf	indf2,w,c
  7168  000C80  EC0F  F00F         	call	___lbmod
  7169  000C84  0F30               	addlw	48
  7170  000C86  ECE6  F00E         	call	_LcPutChar
  7171                           
  7172                           ;EEPROM.c: 265:             LcGotoXY(16,0);
  7173  000C8A  0E00               	movlw	0
  7174  000C8C  6E66               	movwf	LcGotoXY@Row^0,c
  7175  000C8E  0E10               	movlw	16
  7176  000C90  ECA4  F00E         	call	_LcGotoXY
  7177                           
  7178                           ;EEPROM.c: 266:             if (position == numScores){ position = 0;}
  7179  000C94  5020               	movf	_numScores^0,w,c
  7180  000C96  181F               	xorwf	_position^0,w,c
  7181  000C98  E101               	bnz	l7021
  7182  000C9A  6A1F               	clrf	_position^0,c
  7183  000C9C                     l7021:
  7184                           
  7185                           ;EEPROM.c: 267:             state = 52;
  7186  000C9C  0E34               	movlw	52
  7187  000C9E  6E1E               	movwf	_state@EEPROM$F1761^0,c
  7188                           
  7189                           ;EEPROM.c: 268:             break;
  7190  000CA0  0C34               	retlw	52
  7191  000CA2                     l7023:
  7192                           
  7193                           ;EEPROM.c: 270:             saveState = position+1 == numScores? 0:position+1;
  7194  000CA2  5020               	movf	_numScores^0,w,c
  7195  000CA4  6E6C               	movwf	??_dataMotor^0,c
  7196  000CA6  6A6D               	clrf	(??_dataMotor+1)^0,c
  7197  000CA8  501F               	movf	_position^0,w,c
  7198  000CAA  6E6E               	movwf	(??_dataMotor+2)^0,c
  7199  000CAC  6A6F               	clrf	(??_dataMotor+3)^0,c
  7200  000CAE  2A6E               	incf	(??_dataMotor+2)^0,f,c
  7201  000CB0  0E00               	movlw	0
  7202  000CB2  226F               	addwfc	(??_dataMotor+3)^0,f,c
  7203  000CB4  506C               	movf	??_dataMotor^0,w,c
  7204  000CB6  186E               	xorwf	(??_dataMotor+2)^0,w,c
  7205  000CB8  E103               	bnz	u6810
  7206  000CBA  506D               	movf	(??_dataMotor+1)^0,w,c
  7207  000CBC  186F               	xorwf	(??_dataMotor+3)^0,w,c
  7208  000CBE  E007               	bz	l932
  7209  000CC0                     u6810:
  7210  000CC0  281F               	incf	_position^0,w,c
  7211  000CC2  0100               	movlb	0	; () banked
  7212  000CC4  6FF5               	movwf	_dataMotor$1786& (0+255),b
  7213  000CC6  6BF6               	clrf	(_dataMotor$1786+1)& (0+255),b
  7214  000CC8  0E00               	movlw	0
  7215  000CCA  23F6               	addwfc	(_dataMotor$1786+1)& (0+255),f,b
  7216  000CCC  D003               	goto	l934
  7217  000CCE                     l932:
  7218  000CCE  0100               	movlb	0	; () banked
  7219  000CD0  6BF5               	clrf	_dataMotor$1786& (0+255),b
  7220  000CD2  6BF6               	clrf	(_dataMotor$1786+1)& (0+255),b
  7221  000CD4                     l934:
  7222                           
  7223                           ; BSR set to: 0
  7224  000CD4  C0F5  F019         	movff	_dataMotor$1786,_saveState
  7225                           
  7226                           ; BSR set to: 0
  7227                           ;EEPROM.c: 271:             if (users[topScores[saveState].userNum].username[status] != 
      +                          '\0'){
  7228  000CD8  5019               	movf	_saveState^0,w,c
  7229  000CDA  D873               	call	PL2	;call to abstracted procedure
  7230  000CDC  E005               	bz	l7033
  7231                           
  7232                           ; BSR set to: 0
  7233                           ;EEPROM.c: 272:                 LcPutChar(users[topScores[saveState].userNum].username[s
      +                          tatus]);
  7234  000CDE  5019               	movf	_saveState^0,w,c
  7235  000CE0  D870               	call	PL2	;call to abstracted procedure
  7236  000CE2  ECE6  F00E         	call	_LcPutChar
  7237  000CE6  D7B0               	goto	l7005
  7238  000CE8                     l7033:
  7239                           
  7240                           ; BSR set to: 0
  7241                           ;EEPROM.c: 275:                 LcPutChar(':');
  7242  000CE8  0E3A               	movlw	58
  7243  000CEA  ECE6  F00E         	call	_LcPutChar
  7244                           
  7245                           ;EEPROM.c: 276:                 state = 53;
  7246  000CEE  0E35               	movlw	53
  7247  000CF0  6E1E               	movwf	_state@EEPROM$F1761^0,c
  7248                           
  7249                           ;EEPROM.c: 277:                 LcGotoXY(16,1);
  7250  000CF2  0E01               	movlw	1
  7251  000CF4  6E66               	movwf	LcGotoXY@Row^0,c
  7252  000CF6  0E10               	movlw	16
  7253  000CF8  EFA4  F00E         	goto	_LcGotoXY
  7254  000CFC                     l7039:
  7255                           
  7256                           ;EEPROM.c: 281:             LcPutChar((topScores[saveState].score/10)+'0');
  7257  000CFC  0E0A               	movlw	10
  7258  000CFE  6E5E               	movwf	___lbdiv@divisor^0,c
  7259  000D00  5019               	movf	_saveState^0,w,c
  7260  000D02  D888               	call	PL8	;call to abstracted procedure
  7261  000D04  50DF               	movf	indf2,w,c
  7262  000D06  EC72  F00E         	call	___lbdiv
  7263  000D0A  0F30               	addlw	48
  7264  000D0C  ECE6  F00E         	call	_LcPutChar
  7265                           
  7266                           ;EEPROM.c: 282:             LcPutChar((topScores[saveState].score%10)+'0');
  7267  000D10  0E0A               	movlw	10
  7268  000D12  6E5E               	movwf	___lbmod@divisor^0,c
  7269  000D14  5019               	movf	_saveState^0,w,c
  7270  000D16  D87E               	call	PL8	;call to abstracted procedure
  7271  000D18  50DF               	movf	indf2,w,c
  7272  000D1A  EC0F  F00F         	call	___lbmod
  7273  000D1E  0F30               	addlw	48
  7274  000D20  ECE6  F00E         	call	_LcPutChar
  7275  000D24  D64C               	goto	l6827
  7276  000D26                     l7045:
  7277  000D26  501E               	movf	_state@EEPROM$F1761^0,w,c
  7278  000D28  6E6C               	movwf	??_dataMotor^0,c
  7279  000D2A  6A6D               	clrf	(??_dataMotor+1)^0,c
  7280                           
  7281                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7282                           ; Switch size 1, requested type "space"
  7283                           ; Number of cases is 1, Range of values is 0 to 0
  7284                           ; switch strategies available:
  7285                           ; Name         Instructions Cycles
  7286                           ; simple_byte            4     3 (average)
  7287                           ;	Chosen strategy is simple_byte
  7288  000D2C  506D               	movf	(??_dataMotor+1)^0,w,c
  7289  000D2E  A4D8               	btfss	status,2,c
  7290  000D30  0012               	return	
  7291                           
  7292                           ; Switch size 1, requested type "space"
  7293                           ; Number of cases is 24, Range of values is 0 to 53
  7294                           ; switch strategies available:
  7295                           ; Name         Instructions Cycles
  7296                           ; simple_byte           73    37 (average)
  7297                           ;	Chosen strategy is simple_byte
  7298  000D32  506C               	movf	??_dataMotor^0,w,c
  7299  000D34  B4D8               	btfsc	status,2,c
  7300  000D36  0012               	return	
  7301  000D38  0A01               	xorlw	1	; case 1
  7302  000D3A  E101 D636          	bz	l6819
  7303  000D3E  0A03               	xorlw	3	; case 2
  7304  000D40  E101 D63F          	bz	l6829
  7305  000D44  0A01               	xorlw	1	; case 3
  7306  000D46  E101 D64F          	bz	l6843
  7307  000D4A  0A06               	xorlw	6	; case 5
  7308  000D4C  E101 D66A          	bz	l6855
  7309  000D50  0A03               	xorlw	3	; case 6
  7310  000D52  E101 D670          	bz	l6861
  7311  000D56  0A01               	xorlw	1	; case 7
  7312  000D58  E101 D67C          	bz	l891
  7313  000D5C  0A0D               	xorlw	13	; case 10
  7314  000D5E  E101 D67E          	bz	l6877
  7315  000D62  0A01               	xorlw	1	; case 11
  7316  000D64  E101 D69E          	bz	l895
  7317  000D68  0A07               	xorlw	7	; case 12
  7318  000D6A  E101 D6A0          	bz	l6891
  7319  000D6E  0A02               	xorlw	2	; case 14
  7320  000D70  E101 D6C1          	bz	l6903
  7321  000D74  0A01               	xorlw	1	; case 15
  7322  000D76  E101 D6D5          	bz	l6919
  7323  000D7A  0A1F               	xorlw	31	; case 16
  7324  000D7C  E101 D6F1          	bz	l6927
  7325  000D80  0A01               	xorlw	1	; case 17
  7326  000D82  E101 D6FE          	bz	l6937
  7327  000D86  0A03               	xorlw	3	; case 18
  7328  000D88  E101 D709          	bz	l6945
  7329  000D8C  0A01               	xorlw	1	; case 19
  7330  000D8E  E101 D70B          	bz	l6951
  7331  000D92  0A07               	xorlw	7	; case 20
  7332  000D94  E101 D714          	bz	l6961
  7333  000D98  0A01               	xorlw	1	; case 21
  7334  000D9A  E101 D732          	bz	l6985
  7335  000D9E  0A03               	xorlw	3	; case 22
  7336  000DA0  E101 D73B          	bz	l6989
  7337  000DA4  0A01               	xorlw	1	; case 23
  7338  000DA6  E101 D740          	bz	l6995
  7339  000DAA  0A25               	xorlw	37	; case 50
  7340  000DAC  E101 D745          	bz	l7001
  7341  000DB0  0A01               	xorlw	1	; case 51
  7342  000DB2  E101 D756          	bz	l7015
  7343  000DB6  0A07               	xorlw	7	; case 52
  7344  000DB8  E101 D773          	bz	l7023
  7345  000DBC  0A01               	xorlw	1	; case 53
  7346  000DBE  E09E               	bz	l7039
  7347  000DC0  0012               	return		;funcret
  7348  000DC2                     __end_of_dataMotor:
  7349                           	callstack 0
  7350  000DC2                     PL2:
  7351                           	callstack 24
  7352  000DC2  0D02               	mullw	2
  7353  000DC4  50F3               	movf	243,w,c
  7354  000DC6  0F02               	addlw	low (_topScores+1)
  7355  000DC8  6ED9               	movwf	fsr2l,c
  7356  000DCA  6ADA               	clrf	fsr2h,c
  7357  000DCC  50DF               	movf	indf2,w,c
  7358  000DCE  0D12               	mullw	18
  7359  000DD0  0E00               	movlw	low _users
  7360  000DD2  6E6C               	movwf	??_dataMotor^0,c
  7361  000DD4  0E01               	movlw	high _users
  7362  000DD6  6E6D               	movwf	(??_dataMotor+1)^0,c
  7363  000DD8  50F3               	movf	243,w,c
  7364  000DDA  266C               	addwf	??_dataMotor^0,f,c
  7365  000DDC  50F4               	movf	244,w,c
  7366  000DDE  226D               	addwfc	(??_dataMotor+1)^0,f,c
  7367  000DE0  501C               	movf	_status^0,w,c
  7368  000DE2  246C               	addwf	??_dataMotor^0,w,c
  7369  000DE4  6ED9               	movwf	fsr2l,c
  7370  000DE6  0E00               	movlw	0
  7371  000DE8  206D               	addwfc	(??_dataMotor+1)^0,w,c
  7372  000DEA  6EDA               	movwf	fsr2h,c
  7373  000DEC  50DF               	movf	indf2,w,c
  7374  000DEE  0012               	return	
  7375  000DF0                     __end_ofPL2:
  7376                           	callstack 0
  7377  000DF0                     PL4:
  7378                           	callstack 26
  7379  000DF0  50F3               	movf	243,w,c
  7380  000DF2  0F02               	addlw	low (_topScores+1)
  7381  000DF4  6ED9               	movwf	fsr2l,c
  7382  000DF6  6ADA               	clrf	fsr2h,c
  7383  000DF8  0012               	return	
  7384  000DFA                     __end_ofPL4:
  7385                           	callstack 0
  7386  000DFA                     PL6:
  7387                           	callstack 24
  7388  000DFA  501F               	movf	_position^0,w,c
  7389  000DFC  240B               	addwf	_mUser@EEPROM$F1764^0,w,c
  7390  000DFE  6E6C               	movwf	??_dataMotor^0,c
  7391  000E00  0E00               	movlw	0
  7392  000E02  200C               	addwfc	(_mUser@EEPROM$F1764+1)^0,w,c
  7393  000E04  6E6D               	movwf	(??_dataMotor+1)^0,c
  7394  000E06  0E09               	movlw	9
  7395  000E08  246C               	addwf	??_dataMotor^0,w,c
  7396  000E0A  6ED9               	movwf	fsr2l,c
  7397  000E0C  0E00               	movlw	0
  7398  000E0E  206D               	addwfc	(??_dataMotor+1)^0,w,c
  7399  000E10  6EDA               	movwf	fsr2h,c
  7400  000E12  0012               	return	
  7401  000E14                     __end_ofPL6:
  7402                           	callstack 0
  7403  000E14                     PL8:
  7404                           	callstack 26
  7405  000E14  0D02               	mullw	2
  7406  000E16  50F3               	movf	243,w,c
  7407  000E18  0F01               	addlw	low _topScores
  7408  000E1A  6ED9               	movwf	fsr2l,c
  7409  000E1C  6ADA               	clrf	fsr2h,c
  7410  000E1E  0012               	return	
  7411  000E20                     __end_ofPL8:
  7412                           	callstack 0
  7413  000E20                     PL10:
  7414                           	callstack 24
  7415  000E20  0E00               	movlw	0
  7416  000E22  200C               	addwfc	(_mUser@EEPROM$F1764+1)^0,w,c
  7417  000E24  6EDA               	movwf	fsr2h,c
  7418  000E26  501D               	movf	_userNum^0,w,c
  7419  000E28  0D12               	mullw	18
  7420  000E2A  0E00               	movlw	low _users
  7421  000E2C  6E6D               	movwf	(??_dataMotor+1)^0,c
  7422  000E2E  0E01               	movlw	high _users
  7423  000E30  6E6E               	movwf	(??_dataMotor+2)^0,c
  7424  000E32  50F3               	movf	243,w,c
  7425  000E34  266D               	addwf	(??_dataMotor+1)^0,f,c
  7426  000E36  50F4               	movf	244,w,c
  7427  000E38  226E               	addwfc	(??_dataMotor+2)^0,f,c
  7428  000E3A  501F               	movf	_position^0,w,c
  7429  000E3C  246D               	addwf	(??_dataMotor+1)^0,w,c
  7430  000E3E  6EE1               	movwf	fsr1l,c
  7431  000E40  0E00               	movlw	0
  7432  000E42  206E               	addwfc	(??_dataMotor+2)^0,w,c
  7433  000E44  6EE2               	movwf	fsr1h,c
  7434  000E46  50DE               	movf	postinc2,w,c
  7435  000E48  18E6               	xorwf	postinc1,w,c
  7436  000E4A  0012               	return	
  7437  000E4C                     __end_ofPL10:
  7438                           	callstack 0
  7439  000E4C                     PL12:
  7440                           	callstack 24
  7441  000E4C  501F               	movf	_position^0,w,c
  7442  000E4E  240B               	addwf	_mUser@EEPROM$F1764^0,w,c
  7443  000E50  6ED9               	movwf	fsr2l,c
  7444  000E52  0E00               	movlw	0
  7445  000E54  200C               	addwfc	(_mUser@EEPROM$F1764+1)^0,w,c
  7446  000E56  6EDA               	movwf	fsr2h,c
  7447  000E58  0012               	return	
  7448  000E5A                     __end_ofPL12:
  7449                           	callstack 0
  7450  000E5A                     PL18:
  7451                           	callstack 24
  7452  000E5A  501F               	movf	_position^0,w,c
  7453  000E5C  0D02               	mullw	2
  7454  000E5E  50F3               	movf	243,w,c
  7455  000E60  0F01               	addlw	low _topScores
  7456  000E62  6EE1               	movwf	fsr1l,c
  7457  000E64  6AE2               	clrf	fsr1h,c
  7458  000E66  0012               	return	
  7459  000E68                     __end_ofPL18:
  7460                           	callstack 0
  7461  000E68                     PL50:
  7462                           	callstack 24
  7463  000E68  50DF               	movf	indf2,w,c
  7464  000E6A  6E5E               	movwf	saveEEPROM@data^0,c
  7465  000E6C  501B               	movf	_lastUserPointer^0,w,c
  7466  000E6E  0D10               	mullw	16
  7467  000E70  50F3               	movf	243,w,c
  7468  000E72  241F               	addwf	_position^0,w,c
  7469  000E74  0012               	return	
  7470  000E76                     __end_ofPL50:
  7471                           	callstack 0
  7472  000E76                     PL78:
  7473                           	callstack 24
  7474  000E76  C020  F05E         	movff	_numScores,saveEEPROM@data
  7475  000E7A  0CFE               	retlw	254
  7476  000E7C                     __end_ofPL78:
  7477                           	callstack 0
  7478                           
  7479 ;; *************** function _saveEEPROM *****************
  7480 ;; Defined at:
  7481 ;;		line 344 in file "EEPROM.c"
  7482 ;; Parameters:    Size  Location     Type
  7483 ;;  ad              1    wreg     unsigned char 
  7484 ;;  data            1    5[COMRAM] unsigned char 
  7485 ;; Auto vars:     Size  Location     Type
  7486 ;;  ad              1    6[COMRAM] unsigned char 
  7487 ;; Return value:  Size  Location     Type
  7488 ;;                  1    wreg      void 
  7489 ;; Registers used:
  7490 ;;		wreg, status,2
  7491 ;; Tracked objects:
  7492 ;;		On entry : 0/0
  7493 ;;		On exit  : 0/0
  7494 ;;		Unchanged: 0/0
  7495 ;; Data sizes:     COMRAM   BANK0   BANK1
  7496 ;;      Params:         1       0       0
  7497 ;;      Locals:         1       0       0
  7498 ;;      Temps:          0       0       0
  7499 ;;      Totals:         2       0       0
  7500 ;;Total ram usage:        2 bytes
  7501 ;; Hardware stack levels used: 1
  7502 ;; Hardware stack levels required when called: 2
  7503 ;; This function calls:
  7504 ;;		Nothing
  7505 ;; This function is called by:
  7506 ;;		_dataMotor
  7507 ;; This function uses a non-reentrant model
  7508 ;;
  7509                           
  7510                           	psect	text57
  7511  001ED4                     __ptext57:
  7512                           	callstack 0
  7513  001ED4                     _saveEEPROM:
  7514                           	callstack 27
  7515                           
  7516                           ;incstack = 0
  7517                           ;saveEEPROM@ad stored from wreg
  7518  001ED4  6E5F               	movwf	saveEEPROM@ad^0,c
  7519                           
  7520                           ;EEPROM.c: 345:     EEADR = ad;
  7521  001ED6  C05F  FFA9         	movff	saveEEPROM@ad,4009	;volatile
  7522                           
  7523                           ;EEPROM.c: 346:     EEDATA = data;
  7524  001EDA  C05E  FFA8         	movff	saveEEPROM@data,4008	;volatile
  7525                           
  7526                           ;EEPROM.c: 347:     EECON1bits.EEPGD = 0;
  7527  001EDE  9EA6               	bcf	166,7,c	;volsfr
  7528                           
  7529                           ;EEPROM.c: 348:     EECON1bits.CFGS = 0;
  7530  001EE0  9CA6               	bcf	166,6,c	;volsfr
  7531                           
  7532                           ;EEPROM.c: 349:     EECON1bits.WREN = 1;
  7533  001EE2  84A6               	bsf	166,2,c	;volsfr
  7534                           
  7535                           ;EEPROM.c: 350:     INTCONbits.GIE = 0;
  7536  001EE4  9EF2               	bcf	242,7,c	;volatile
  7537                           
  7538                           ;EEPROM.c: 351:     EECON2 = 0x55;
  7539  001EE6  0E55               	movlw	85
  7540  001EE8  6EA7               	movwf	167,c	;volsfr
  7541                           
  7542                           ;EEPROM.c: 352:     EECON2 = 0xAA;
  7543  001EEA  0EAA               	movlw	170
  7544  001EEC  6EA7               	movwf	167,c	;volsfr
  7545                           
  7546                           ;EEPROM.c: 353:     EECON1bits.WR = 1;
  7547  001EEE  82A6               	bsf	166,1,c	;volsfr
  7548                           
  7549                           ;EEPROM.c: 354:     INTCONbits.GIE = 1;
  7550  001EF0  8EF2               	bsf	242,7,c	;volatile
  7551                           
  7552                           ;EEPROM.c: 355:     EECON1bits.WREN = 0;
  7553  001EF2  94A6               	bcf	166,2,c	;volsfr
  7554  001EF4  0CAA               	retlw	170	;funcret
  7555  001EF6                     __end_of_saveEEPROM:
  7556                           	callstack 0
  7557                           
  7558 ;; *************** function ___lbmod *****************
  7559 ;; Defined at:
  7560 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\lbmod.c"
  7561 ;; Parameters:    Size  Location     Type
  7562 ;;  dividend        1    wreg     unsigned char 
  7563 ;;  divisor         1    5[COMRAM] unsigned char 
  7564 ;; Auto vars:     Size  Location     Type
  7565 ;;  dividend        1    6[COMRAM] unsigned char 
  7566 ;;  rem             1    8[COMRAM] unsigned char 
  7567 ;;  counter         1    7[COMRAM] unsigned char 
  7568 ;; Return value:  Size  Location     Type
  7569 ;;                  1    wreg      unsigned char 
  7570 ;; Registers used:
  7571 ;;		wreg, status,2, status,0
  7572 ;; Tracked objects:
  7573 ;;		On entry : 0/0
  7574 ;;		On exit  : 0/0
  7575 ;;		Unchanged: 0/0
  7576 ;; Data sizes:     COMRAM   BANK0   BANK1
  7577 ;;      Params:         1       0       0
  7578 ;;      Locals:         3       0       0
  7579 ;;      Temps:          0       0       0
  7580 ;;      Totals:         4       0       0
  7581 ;;Total ram usage:        4 bytes
  7582 ;; Hardware stack levels used: 1
  7583 ;; Hardware stack levels required when called: 2
  7584 ;; This function calls:
  7585 ;;		Nothing
  7586 ;; This function is called by:
  7587 ;;		_menuMotor
  7588 ;;		_dataMotor
  7589 ;;		_DaSaveScore
  7590 ;;		_timeMotor
  7591 ;; This function uses a non-reentrant model
  7592 ;;
  7593                           
  7594                           	psect	text58
  7595  001E1E                     __ptext58:
  7596                           	callstack 0
  7597  001E1E                     ___lbmod:
  7598                           	callstack 27
  7599                           
  7600                           ;incstack = 0
  7601                           ;___lbmod@dividend stored from wreg
  7602  001E1E  6E5F               	movwf	___lbmod@dividend^0,c
  7603  001E20  0E08               	movlw	8
  7604  001E22  6E60               	movwf	___lbmod@counter^0,c
  7605  001E24  6A61               	clrf	___lbmod@rem^0,c
  7606  001E26                     l5909:
  7607  001E26  90D8               	bcf	status,0,c
  7608  001E28  345F               	rlcf	___lbmod@dividend^0,w,c
  7609  001E2A  3461               	rlcf	___lbmod@rem^0,w,c
  7610  001E2C  6E61               	movwf	___lbmod@rem^0,c
  7611  001E2E  90D8               	bcf	status,0,c
  7612  001E30  365F               	rlcf	___lbmod@dividend^0,f,c
  7613  001E32  505E               	movf	___lbmod@divisor^0,w,c
  7614  001E34  5C61               	subwf	___lbmod@rem^0,w,c
  7615  001E36  E302               	bnc	l5917
  7616  001E38  505E               	movf	___lbmod@divisor^0,w,c
  7617  001E3A  5E61               	subwf	___lbmod@rem^0,f,c
  7618  001E3C                     l5917:
  7619  001E3C  2E60               	decfsz	___lbmod@counter^0,f,c
  7620  001E3E  D7F3               	goto	l5909
  7621  001E40  5061               	movf	___lbmod@rem^0,w,c
  7622  001E42  0012               	return		;funcret
  7623  001E44                     __end_of___lbmod:
  7624                           	callstack 0
  7625                           
  7626 ;; *************** function ___lbdiv *****************
  7627 ;; Defined at:
  7628 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\lbdiv.c"
  7629 ;; Parameters:    Size  Location     Type
  7630 ;;  dividend        1    wreg     unsigned char 
  7631 ;;  divisor         1    5[COMRAM] unsigned char 
  7632 ;; Auto vars:     Size  Location     Type
  7633 ;;  dividend        1    6[COMRAM] unsigned char 
  7634 ;;  quotient        1    8[COMRAM] unsigned char 
  7635 ;;  counter         1    7[COMRAM] unsigned char 
  7636 ;; Return value:  Size  Location     Type
  7637 ;;                  1    wreg      unsigned char 
  7638 ;; Registers used:
  7639 ;;		wreg, status,2, status,0
  7640 ;; Tracked objects:
  7641 ;;		On entry : 0/0
  7642 ;;		On exit  : 0/0
  7643 ;;		Unchanged: 0/0
  7644 ;; Data sizes:     COMRAM   BANK0   BANK1
  7645 ;;      Params:         1       0       0
  7646 ;;      Locals:         3       0       0
  7647 ;;      Temps:          0       0       0
  7648 ;;      Totals:         4       0       0
  7649 ;;Total ram usage:        4 bytes
  7650 ;; Hardware stack levels used: 1
  7651 ;; Hardware stack levels required when called: 2
  7652 ;; This function calls:
  7653 ;;		Nothing
  7654 ;; This function is called by:
  7655 ;;		_menuMotor
  7656 ;;		_dataMotor
  7657 ;;		_DaSaveScore
  7658 ;;		_timeMotor
  7659 ;; This function uses a non-reentrant model
  7660 ;;
  7661                           
  7662                           	psect	text59
  7663  001CE4                     __ptext59:
  7664                           	callstack 0
  7665  001CE4                     ___lbdiv:
  7666                           	callstack 27
  7667                           
  7668                           ;incstack = 0
  7669                           ;___lbdiv@dividend stored from wreg
  7670  001CE4  6E5F               	movwf	___lbdiv@dividend^0,c
  7671  001CE6  6A61               	clrf	___lbdiv@quotient^0,c
  7672  001CE8  505E               	movf	___lbdiv@divisor^0,w,c
  7673  001CEA  E014               	bz	l5901
  7674  001CEC  0E01               	movlw	1
  7675  001CEE  6E60               	movwf	___lbdiv@counter^0,c
  7676  001CF0  D003               	goto	l5889
  7677  001CF2                     l5885:
  7678  001CF2  90D8               	bcf	status,0,c
  7679  001CF4  365E               	rlcf	___lbdiv@divisor^0,f,c
  7680  001CF6  2A60               	incf	___lbdiv@counter^0,f,c
  7681  001CF8                     l5889:
  7682  001CF8  AE5E               	btfss	___lbdiv@divisor^0,7,c
  7683  001CFA  D7FB               	goto	l5885
  7684  001CFC                     u5310:
  7685  001CFC  90D8               	bcf	status,0,c
  7686  001CFE  3661               	rlcf	___lbdiv@quotient^0,f,c
  7687  001D00  505E               	movf	___lbdiv@divisor^0,w,c
  7688  001D02  5C5F               	subwf	___lbdiv@dividend^0,w,c
  7689  001D04  E303               	bnc	l5897
  7690  001D06  505E               	movf	___lbdiv@divisor^0,w,c
  7691  001D08  5E5F               	subwf	___lbdiv@dividend^0,f,c
  7692  001D0A  8061               	bsf	___lbdiv@quotient^0,0,c
  7693  001D0C                     l5897:
  7694  001D0C  90D8               	bcf	status,0,c
  7695  001D0E  325E               	rrcf	___lbdiv@divisor^0,f,c
  7696  001D10  2E60               	decfsz	___lbdiv@counter^0,f,c
  7697  001D12  D7F4               	goto	u5310
  7698  001D14                     l5901:
  7699  001D14  5061               	movf	___lbdiv@quotient^0,w,c
  7700  001D16  0012               	return		;funcret
  7701  001D18                     __end_of___lbdiv:
  7702                           	callstack 0
  7703                           
  7704 ;; *************** function _LcPutChar *****************
  7705 ;; Defined at:
  7706 ;;		line 154 in file "LcTLCD.c"
  7707 ;; Parameters:    Size  Location     Type
  7708 ;;  c               1    wreg     unsigned char 
  7709 ;; Auto vars:     Size  Location     Type
  7710 ;;  c               1   18[COMRAM] unsigned char 
  7711 ;; Return value:  Size  Location     Type
  7712 ;;                  1    wreg      void 
  7713 ;; Registers used:
  7714 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7715 ;; Tracked objects:
  7716 ;;		On entry : 0/0
  7717 ;;		On exit  : 0/0
  7718 ;;		Unchanged: 0/0
  7719 ;; Data sizes:     COMRAM   BANK0   BANK1
  7720 ;;      Params:         0       0       0
  7721 ;;      Locals:         1       0       0
  7722 ;;      Temps:          0       0       0
  7723 ;;      Totals:         1       0       0
  7724 ;;Total ram usage:        1 bytes
  7725 ;; Hardware stack levels used: 1
  7726 ;; Hardware stack levels required when called: 5
  7727 ;; This function calls:
  7728 ;;		_CantaData
  7729 ;;		_LcGotoXY
  7730 ;;		_WaitForBusy
  7731 ;; This function is called by:
  7732 ;;		_menuMotor
  7733 ;;		_displayString
  7734 ;;		_mainMenu
  7735 ;;		_displayError
  7736 ;;		_displayResults
  7737 ;;		_displayLogOut
  7738 ;;		_dataMotor
  7739 ;;		_DaSaveScore
  7740 ;;		_timeMotor
  7741 ;;		_sendChar
  7742 ;; This function uses a non-reentrant model
  7743 ;;
  7744                           
  7745                           	psect	text60
  7746  001DCC                     __ptext60:
  7747                           	callstack 0
  7748  001DCC                     _LcPutChar:
  7749                           	callstack 23
  7750                           
  7751                           ;incstack = 0
  7752                           ;LcPutChar@c stored from wreg
  7753  001DCC  6E6B               	movwf	LcPutChar@c^0,c
  7754                           
  7755                           ;LcTLCD.c: 164:  WaitForBusy(); CantaData(c);
  7756  001DCE  EC03  F00E         	call	_WaitForBusy	;wreg free
  7757  001DD2  506B               	movf	LcPutChar@c^0,w,c
  7758  001DD4  EC22  F00E         	call	_CantaData
  7759                           
  7760                           ;LcTLCD.c: 166:  ++ColumnAct;
  7761  001DD8  2A3A               	incf	_ColumnAct^0,f,c
  7762                           
  7763                           ;LcTLCD.c: 168:     if (ColumnAct >= 40) {
  7764  001DDA  0E27               	movlw	39
  7765  001DDC  643A               	cpfsgt	_ColumnAct^0,c
  7766  001DDE  0C27               	retlw	39
  7767                           
  7768                           ;LcTLCD.c: 169:         ColumnAct = 0;
  7769  001DE0  6A3A               	clrf	_ColumnAct^0,c
  7770                           
  7771                           ;LcTLCD.c: 170:   if (++RowAct >= 2) RowAct = 0;
  7772  001DE2  2A3B               	incf	_RowAct^0,f,c
  7773  001DE4  0E01               	movlw	1
  7774  001DE6  643B               	cpfsgt	_RowAct^0,c
  7775  001DE8  D001               	goto	l5867
  7776  001DEA  6A3B               	clrf	_RowAct^0,c
  7777  001DEC                     l5867:
  7778                           
  7779                           ;LcTLCD.c: 171:   LcGotoXY(ColumnAct, RowAct);
  7780  001DEC  C03B  F066         	movff	_RowAct,LcGotoXY@Row
  7781  001DF0  503A               	movf	_ColumnAct^0,w,c
  7782  001DF2  EFA4  F00E         	goto	_LcGotoXY
  7783  001DF6                     __end_of_LcPutChar:
  7784                           	callstack 0
  7785                           
  7786 ;; *************** function _LcGotoXY *****************
  7787 ;; Defined at:
  7788 ;;		line 126 in file "LcTLCD.c"
  7789 ;; Parameters:    Size  Location     Type
  7790 ;;  Column          1    wreg     unsigned char 
  7791 ;;  Row             1   13[COMRAM] unsigned char 
  7792 ;; Auto vars:     Size  Location     Type
  7793 ;;  Column          1   17[COMRAM] unsigned char 
  7794 ;;  Fisics          1   14[COMRAM] unsigned char 
  7795 ;; Return value:  Size  Location     Type
  7796 ;;                  1    wreg      void 
  7797 ;; Registers used:
  7798 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7799 ;; Tracked objects:
  7800 ;;		On entry : 0/0
  7801 ;;		On exit  : 0/0
  7802 ;;		Unchanged: 0/0
  7803 ;; Data sizes:     COMRAM   BANK0   BANK1
  7804 ;;      Params:         1       0       0
  7805 ;;      Locals:         4       0       0
  7806 ;;      Temps:          0       0       0
  7807 ;;      Totals:         5       0       0
  7808 ;;Total ram usage:        5 bytes
  7809 ;; Hardware stack levels used: 1
  7810 ;; Hardware stack levels required when called: 4
  7811 ;; This function calls:
  7812 ;;		_CantaIR
  7813 ;;		_WaitForBusy
  7814 ;; This function is called by:
  7815 ;;		_LcPutChar
  7816 ;;		_menuMotor
  7817 ;;		_nextRow
  7818 ;;		_dataMotor
  7819 ;;		_DaFindUser
  7820 ;;		_timeMotor
  7821 ;;		_displayTimeRemaining
  7822 ;;		_displaySysTime
  7823 ;; This function uses a non-reentrant model
  7824 ;;
  7825                           
  7826                           	psect	text61
  7827  001D48                     __ptext61:
  7828                           	callstack 0
  7829  001D48                     _LcGotoXY:
  7830                           	callstack 23
  7831                           
  7832                           ;incstack = 0
  7833                           ;LcGotoXY@Column stored from wreg
  7834  001D48  6E6A               	movwf	LcGotoXY@Column^0,c
  7835                           
  7836                           ;LcTLCD.c: 130:  char Fisics;;LcTLCD.c: 132:  Fisics = Column + (!Row ? 0 : 0x40);
  7837  001D4A  5066               	movf	LcGotoXY@Row^0,w,c
  7838  001D4C  E004               	bz	l279
  7839  001D4E  6A69               	clrf	(_LcGotoXY$844+1)^0,c
  7840  001D50  0E40               	movlw	64
  7841  001D52  6E68               	movwf	_LcGotoXY$844^0,c
  7842  001D54  D002               	goto	l5819
  7843  001D56                     l279:
  7844  001D56  6A68               	clrf	_LcGotoXY$844^0,c
  7845  001D58  6A69               	clrf	(_LcGotoXY$844+1)^0,c
  7846  001D5A                     l5819:
  7847  001D5A  506A               	movf	LcGotoXY@Column^0,w,c
  7848  001D5C  2468               	addwf	_LcGotoXY$844^0,w,c
  7849  001D5E  6E67               	movwf	LcGotoXY@Fisics^0,c
  7850                           
  7851                           ;LcTLCD.c: 147:  WaitForBusy();
  7852  001D60  EC03  F00E         	call	_WaitForBusy	;wreg free
  7853                           
  7854                           ;LcTLCD.c: 148:  CantaIR(0x80 | Fisics);
  7855  001D64  5067               	movf	LcGotoXY@Fisics^0,w,c
  7856  001D66  0980               	iorlw	128
  7857  001D68  ECBB  F00F         	call	_CantaIR
  7858                           
  7859                           ;LcTLCD.c: 150:  RowAct = Row;
  7860  001D6C  C066  F03B         	movff	LcGotoXY@Row,_RowAct
  7861                           
  7862                           ;LcTLCD.c: 151:  ColumnAct = Column;
  7863  001D70  C06A  F03A         	movff	LcGotoXY@Column,_ColumnAct
  7864  001D74  0012               	return		;funcret
  7865  001D76                     __end_of_LcGotoXY:
  7866                           	callstack 0
  7867                           
  7868 ;; *************** function _CantaData *****************
  7869 ;; Defined at:
  7870 ;;		line 244 in file "LcTLCD.c"
  7871 ;; Parameters:    Size  Location     Type
  7872 ;;  Data            1    wreg     unsigned char 
  7873 ;; Auto vars:     Size  Location     Type
  7874 ;;  Data            1    7[COMRAM] unsigned char 
  7875 ;; Return value:  Size  Location     Type
  7876 ;;                  1    wreg      void 
  7877 ;; Registers used:
  7878 ;;		wreg, status,2, status,0, cstack
  7879 ;; Tracked objects:
  7880 ;;		On entry : 0/0
  7881 ;;		On exit  : 0/0
  7882 ;;		Unchanged: 0/0
  7883 ;; Data sizes:     COMRAM   BANK0   BANK1
  7884 ;;      Params:         0       0       0
  7885 ;;      Locals:         1       0       0
  7886 ;;      Temps:          0       0       0
  7887 ;;      Totals:         1       0       0
  7888 ;;Total ram usage:        1 bytes
  7889 ;; Hardware stack levels used: 1
  7890 ;; Hardware stack levels required when called: 3
  7891 ;; This function calls:
  7892 ;;		_CantaPartAlta
  7893 ;;		_CantaPartBaixa
  7894 ;; This function is called by:
  7895 ;;		_LcPutChar
  7896 ;; This function uses a non-reentrant model
  7897 ;;
  7898                           
  7899                           	psect	text62
  7900  001C44                     __ptext62:
  7901                           	callstack 0
  7902  001C44                     _CantaData:
  7903                           	callstack 24
  7904                           
  7905                           ;incstack = 0
  7906                           ;CantaData@Data stored from wreg
  7907  001C44  6E60               	movwf	CantaData@Data^0,c
  7908                           
  7909                           ;LcTLCD.c: 245:  (TRISDbits.TRISD0 = TRISDbits.TRISD1 = TRISDbits.TRISD2 = TRISDbits.TRI
      +                          SD3 = 0);
  7910  001C46  9695               	bcf	149,3,c	;volatile
  7911  001C48  9495               	bcf	149,2,c	;volatile
  7912  001C4A  9295               	bcf	149,1,c	;volatile
  7913  001C4C  9095               	bcf	149,0,c	;volatile
  7914                           
  7915                           ;LcTLCD.c: 246:  (LATDbits.LATD4 = 1);
  7916  001C4E  888C               	bsf	140,4,c	;volatile
  7917                           
  7918                           ;LcTLCD.c: 247:  (LATDbits.LATD5 = 0);
  7919  001C50  9A8C               	bcf	140,5,c	;volatile
  7920                           
  7921                           ;LcTLCD.c: 248:  (LATDbits.LATD6 = 1);
  7922  001C52  8C8C               	bsf	140,6,c	;volatile
  7923                           
  7924                           ;LcTLCD.c: 249:  CantaPartAlta(Data);
  7925  001C54  5060               	movf	CantaData@Data^0,w,c
  7926  001C56  EC0C  F00D         	call	_CantaPartAlta
  7927                           
  7928                           ;LcTLCD.c: 250:  (LATDbits.LATD6 = 1);
  7929                           
  7930                           ;LcTLCD.c: 251:  (LATDbits.LATD6 = 0);
  7931                           
  7932                           ;LcTLCD.c: 252:  (LATDbits.LATD6 = 0);
  7933                           
  7934                           ;LcTLCD.c: 253:  (LATDbits.LATD6 = 1);
  7935  001C5A  D80B               	call	PL74	;call to abstracted procedure
  7936                           
  7937                           ;LcTLCD.c: 254:  CantaPartBaixa(Data);
  7938  001C5C  5060               	movf	CantaData@Data^0,w,c
  7939  001C5E  ECD9  F00C         	call	_CantaPartBaixa
  7940                           
  7941                           ;LcTLCD.c: 255:  (LATDbits.LATD6 = 1);
  7942                           
  7943                           ;LcTLCD.c: 256:  (LATDbits.LATD6 = 0);
  7944                           
  7945                           ;LcTLCD.c: 257:  (TRISDbits.TRISD0 = TRISDbits.TRISD1 = TRISDbits.TRISD2 = TRISDbits.TRI
      +                          SD3 = 1);
  7946  001C62  D000               	goto	PL42	;call to abstracted procedure
  7947  001C64                     __end_of_CantaData:
  7948                           	callstack 0
  7949  001C64                     PL42:
  7950                           	callstack 23
  7951  001C64  8C8C               	bsf	140,6,c	;volatile
  7952  001C66  9C8C               	bcf	140,6,c	;volatile
  7953  001C68  8695               	bsf	149,3,c	;volatile
  7954  001C6A  8495               	bsf	149,2,c	;volatile
  7955  001C6C  8295               	bsf	149,1,c	;volatile
  7956  001C6E  8095               	bsf	149,0,c	;volatile
  7957  001C70  0012               	return		;funcret
  7958  001C72                     __end_ofPL42:
  7959                           	callstack 0
  7960  001C72                     PL74:
  7961                           	callstack 23
  7962  001C72  8C8C               	bsf	140,6,c	;volatile
  7963  001C74  9C8C               	bcf	140,6,c	;volatile
  7964  001C76  9C8C               	bcf	140,6,c	;volatile
  7965  001C78  8C8C               	bsf	140,6,c	;volatile
  7966  001C7A  0012               	return	
  7967  001C7C                     __end_ofPL74:
  7968                           	callstack 0
  7969                           
  7970 ;; *************** function _btMotor *****************
  7971 ;; Defined at:
  7972 ;;		line 53 in file "SIO.c"
  7973 ;; Parameters:    Size  Location     Type
  7974 ;;		None
  7975 ;; Auto vars:     Size  Location     Type
  7976 ;;		None
  7977 ;; Return value:  Size  Location     Type
  7978 ;;                  1    wreg      void 
  7979 ;; Registers used:
  7980 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7981 ;; Tracked objects:
  7982 ;;		On entry : 0/0
  7983 ;;		On exit  : 0/0
  7984 ;;		Unchanged: 0/0
  7985 ;; Data sizes:     COMRAM   BANK0   BANK1
  7986 ;;      Params:         0       0       0
  7987 ;;      Locals:         0       0       0
  7988 ;;      Temps:          2       0       0
  7989 ;;      Totals:         2       0       0
  7990 ;;Total ram usage:        2 bytes
  7991 ;; Hardware stack levels used: 1
  7992 ;; Hardware stack levels required when called: 3
  7993 ;; This function calls:
  7994 ;;		_SiIsAvailable
  7995 ;;		_SiSendChar
  7996 ;;		_TiGetTics
  7997 ;;		_TiResetTics
  7998 ;; This function is called by:
  7999 ;;		_main
  8000 ;; This function uses a non-reentrant model
  8001 ;;
  8002                           
  8003                           	psect	text63
  8004  001310                     __ptext63:
  8005                           	callstack 0
  8006  001310                     _btMotor:
  8007                           	callstack 27
  8008                           
  8009                           ;SIO.c: 54:     switch (stateRX){
  8010                           
  8011                           ;incstack = 0
  8012  001310  D036               	goto	l7269
  8013  001312                     l784:
  8014                           
  8015                           ;SIO.c: 56:             if (PORTCbits.RC5 == 0){
  8016  001312  BA82               	btfsc	130,5,c	;volatile
  8017  001314  D070               	goto	l7291
  8018                           
  8019                           ;SIO.c: 58:                 TiResetTics(timerRX);
  8020  001316  5027               	movf	_timerRX^0,w,c
  8021  001318  ECAB  F00F         	call	_TiResetTics
  8022                           
  8023                           ;SIO.c: 59:                 dataRX =0;
  8024  00131C  6A26               	clrf	_dataRX^0,c
  8025                           
  8026                           ;SIO.c: 60:                 counterRX = 0;
  8027  00131E  6A25               	clrf	_counterRX^0,c
  8028                           
  8029                           ;SIO.c: 61:                 stateRX = 1;
  8030  001320  0E01               	movlw	1
  8031  001322  6E28               	movwf	_stateRX^0,c
  8032  001324  D068               	goto	l7291
  8033  001326                     l7241:
  8034                           
  8035                           ;SIO.c: 65:             if (counterRX >= 8){
  8036  001326  0E07               	movlw	7
  8037  001328  6425               	cpfsgt	_counterRX^0,c
  8038  00132A  D009               	goto	l7249
  8039                           
  8040                           ;SIO.c: 66:                 if (SiIsAvailable()){
  8041  00132C  ECB5  F000         	call	_SiIsAvailable	;wreg free
  8042  001330  0900               	iorlw	0
  8043  001332  E003               	bz	l7247
  8044                           
  8045                           ;SIO.c: 67:                     SiSendChar(dataRX);
  8046  001334  5026               	movf	_dataRX^0,w,c
  8047  001336  ECAE  F000         	call	_SiSendChar
  8048  00133A                     l7247:
  8049                           
  8050                           ;SIO.c: 69:                 stateRX = 0;
  8051  00133A  6A28               	clrf	_stateRX^0,c
  8052                           
  8053                           ;SIO.c: 70:             } else if (TiGetTics(timerRX) >= 1){
  8054  00133C  D05C               	goto	l7291
  8055  00133E                     l7249:
  8056  00133E  5027               	movf	_timerRX^0,w,c
  8057  001340  EC22  F00F         	call	_TiGetTics
  8058  001344  BE5F               	btfsc	(?_TiGetTics+1)^0,7,c
  8059  001346  D057               	goto	l7291
  8060  001348  505F               	movf	(?_TiGetTics+1)^0,w,c
  8061  00134A  E102               	bnz	u7090
  8062  00134C  045E               	decf	?_TiGetTics^0,w,c
  8063  00134E  E353               	bnc	l7291
  8064  001350                     u7090:
  8065                           
  8066                           ;SIO.c: 71:                 if(PORTCbits.RC5){
  8067  001350  AA82               	btfss	130,5,c	;volatile
  8068  001352  D002               	goto	l7255
  8069                           
  8070                           ;SIO.c: 72:                     dataRX = dataRX | 0x80;
  8071  001354  8E26               	bsf	_dataRX^0,7,c
  8072                           
  8073                           ;SIO.c: 73:                 }else {
  8074  001356  D001               	goto	l7257
  8075  001358                     l7255:
  8076                           
  8077                           ;SIO.c: 74:                     dataRX = dataRX & 0x7F;
  8078  001358  9E26               	bcf	_dataRX^0,7,c
  8079  00135A                     l7257:
  8080                           
  8081                           ;SIO.c: 76:                 dataRX = (dataRX >>1);
  8082  00135A  90D8               	bcf	status,0,c
  8083  00135C  3226               	rrcf	_dataRX^0,f,c
  8084                           
  8085                           ;SIO.c: 77:                 TiResetTics(timerRX);
  8086  00135E  5027               	movf	_timerRX^0,w,c
  8087  001360  ECAB  F00F         	call	_TiResetTics
  8088                           
  8089                           ;SIO.c: 78:                 counterRX++;
  8090  001364  2A25               	incf	_counterRX^0,f,c
  8091  001366  D047               	goto	l7291
  8092  001368                     l7263:
  8093                           
  8094                           ;SIO.c: 82:             if(TiGetTics(timerRX) >= 24){
  8095  001368  5027               	movf	_timerRX^0,w,c
  8096  00136A  EC22  F00F         	call	_TiGetTics
  8097  00136E  BE5F               	btfsc	(?_TiGetTics+1)^0,7,c
  8098  001370  D042               	goto	l7291
  8099  001372  505F               	movf	(?_TiGetTics+1)^0,w,c
  8100  001374  E1E2               	bnz	l7247
  8101  001376  0E18               	movlw	24
  8102  001378  5C5E               	subwf	?_TiGetTics^0,w,c
  8103  00137A  E2DF               	bc	l7247
  8104  00137C  D03C               	goto	l7291
  8105  00137E                     l7269:
  8106  00137E  5028               	movf	_stateRX^0,w,c
  8107  001380  6E65               	movwf	??_btMotor^0,c
  8108  001382  6A66               	clrf	(??_btMotor+1)^0,c
  8109                           
  8110                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  8111                           ; Switch size 1, requested type "space"
  8112                           ; Number of cases is 1, Range of values is 0 to 0
  8113                           ; switch strategies available:
  8114                           ; Name         Instructions Cycles
  8115                           ; simple_byte            4     3 (average)
  8116                           ;	Chosen strategy is simple_byte
  8117  001384  5066               	movf	(??_btMotor+1)^0,w,c
  8118  001386  E137               	bnz	l7291
  8119                           
  8120                           ; Switch size 1, requested type "space"
  8121                           ; Number of cases is 3, Range of values is 0 to 2
  8122                           ; switch strategies available:
  8123                           ; Name         Instructions Cycles
  8124                           ; simple_byte           10     6 (average)
  8125                           ;	Chosen strategy is simple_byte
  8126  001388  5065               	movf	??_btMotor^0,w,c
  8127  00138A  E0C3               	bz	l784
  8128  00138C  0A01               	xorlw	1	; case 1
  8129  00138E  E0CB               	bz	l7241
  8130  001390  0A03               	xorlw	3	; case 2
  8131  001392  E0EA               	bz	l7263
  8132                           
  8133                           ;SIO.c: 87:     switch (stateTX){
  8134  001394  D030               	goto	l7291
  8135  001396                     l797:
  8136                           
  8137                           ;SIO.c: 89:             LATCbits.LATC4 = 1 & 0x01;
  8138  001396  888B               	bsf	139,4,c	;volatile
  8139                           
  8140                           ;SIO.c: 90:             counterTX = 0;
  8141  001398  6A21               	clrf	_counterTX^0,c
  8142                           
  8143                           ;SIO.c: 91:             break;
  8144  00139A  0012               	return	
  8145  00139C                     l7271:
  8146                           
  8147                           ;SIO.c: 94:             if(TiGetTics(timerTX) >= 1){
  8148  00139C  5023               	movf	_timerTX^0,w,c
  8149  00139E  EC22  F00F         	call	_TiGetTics
  8150  0013A2  BE5F               	btfsc	(?_TiGetTics+1)^0,7,c
  8151  0013A4  0012               	return	
  8152  0013A6  505F               	movf	(?_TiGetTics+1)^0,w,c
  8153  0013A8  E103               	bnz	u7120
  8154  0013AA  045E               	decf	?_TiGetTics^0,w,c
  8155  0013AC  A0D8               	btfss	status,0,c
  8156  0013AE  0012               	return	
  8157  0013B0                     u7120:
  8158                           
  8159                           ;SIO.c: 95:                 if (counterTX < 8){
  8160  0013B0  0E08               	movlw	8
  8161  0013B2  6021               	cpfslt	_counterTX^0,c
  8162  0013B4  D00E               	goto	l7279
  8163                           
  8164                           ;SIO.c: 96:                     LATCbits.LATC4 = (dataTX & 0x01);
  8165  0013B6  C022  F065         	movff	_dataTX,??_btMotor
  8166  0013BA  0E01               	movlw	1
  8167  0013BC  1665               	andwf	??_btMotor^0,f,c
  8168  0013BE  3A65               	swapf	??_btMotor^0,f,c
  8169  0013C0  508B               	movf	139,w,c	;volatile
  8170  0013C2  1865               	xorwf	??_btMotor^0,w,c
  8171  0013C4  0BEF               	andlw	-17
  8172  0013C6  1865               	xorwf	??_btMotor^0,w,c
  8173  0013C8  6E8B               	movwf	139,c	;volatile
  8174                           
  8175                           ;SIO.c: 97:                     dataTX = (dataTX >> 1);
  8176  0013CA  90D8               	bcf	status,0,c
  8177  0013CC  3222               	rrcf	_dataTX^0,f,c
  8178                           
  8179                           ;SIO.c: 98:                     counterTX++;
  8180  0013CE  2A21               	incf	_counterTX^0,f,c
  8181                           
  8182                           ;SIO.c: 99:                 }
  8183  0013D0  D002               	goto	l7283
  8184  0013D2                     l7279:
  8185                           
  8186                           ;SIO.c: 101:                     stateTX++;
  8187  0013D2  2A24               	incf	_stateTX^0,f,c
  8188                           
  8189                           ;SIO.c: 102:                     LATCbits.LATC4 = 1 & 0x01;
  8190  0013D4  888B               	bsf	139,4,c	;volatile
  8191  0013D6                     l7283:
  8192                           
  8193                           ;SIO.c: 104:                 TiResetTics(timerTX);
  8194  0013D6  5023               	movf	_timerTX^0,w,c
  8195  0013D8  EFAB  F00F         	goto	_TiResetTics
  8196  0013DC                     l7285:
  8197                           
  8198                           ;SIO.c: 109:             if(TiGetTics(timerTX) >= 1){
  8199  0013DC  5023               	movf	_timerTX^0,w,c
  8200  0013DE  EC22  F00F         	call	_TiGetTics
  8201  0013E2  BE5F               	btfsc	(?_TiGetTics+1)^0,7,c
  8202  0013E4  0012               	return	
  8203  0013E6  505F               	movf	(?_TiGetTics+1)^0,w,c
  8204  0013E8  E103               	bnz	u7140
  8205  0013EA  045E               	decf	?_TiGetTics^0,w,c
  8206  0013EC  A0D8               	btfss	status,0,c
  8207  0013EE  0012               	return	
  8208  0013F0                     u7140:
  8209                           
  8210                           ;SIO.c: 110:                 LATCbits.LATC4 = 1 & 0x01;
  8211  0013F0  888B               	bsf	139,4,c	;volatile
  8212                           
  8213                           ;SIO.c: 111:                 stateTX=0;
  8214  0013F2  6A24               	clrf	_stateTX^0,c
  8215  0013F4  0012               	return	
  8216  0013F6                     l7291:
  8217  0013F6  5024               	movf	_stateTX^0,w,c
  8218  0013F8  6E65               	movwf	??_btMotor^0,c
  8219  0013FA  6A66               	clrf	(??_btMotor+1)^0,c
  8220                           
  8221                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  8222                           ; Switch size 1, requested type "space"
  8223                           ; Number of cases is 1, Range of values is 0 to 0
  8224                           ; switch strategies available:
  8225                           ; Name         Instructions Cycles
  8226                           ; simple_byte            4     3 (average)
  8227                           ;	Chosen strategy is simple_byte
  8228  0013FC  5066               	movf	(??_btMotor+1)^0,w,c
  8229  0013FE  A4D8               	btfss	status,2,c
  8230  001400  0012               	return	
  8231                           
  8232                           ; Switch size 1, requested type "space"
  8233                           ; Number of cases is 3, Range of values is 0 to 2
  8234                           ; switch strategies available:
  8235                           ; Name         Instructions Cycles
  8236                           ; simple_byte           10     6 (average)
  8237                           ;	Chosen strategy is simple_byte
  8238  001402  5065               	movf	??_btMotor^0,w,c
  8239  001404  E0C8               	bz	l797
  8240  001406  0A01               	xorlw	1	; case 1
  8241  001408  E0C9               	bz	l7271
  8242  00140A  0A03               	xorlw	3	; case 2
  8243  00140C  E0E7               	bz	l7285
  8244  00140E  0012               	return		;funcret
  8245  001410                     __end_of_btMotor:
  8246                           	callstack 0
  8247                           
  8248 ;; *************** function _SiSendChar *****************
  8249 ;; Defined at:
  8250 ;;		line 41 in file "SIO.c"
  8251 ;; Parameters:    Size  Location     Type
  8252 ;;  myByte          1    wreg     unsigned char 
  8253 ;; Auto vars:     Size  Location     Type
  8254 ;;  myByte          1    5[COMRAM] unsigned char 
  8255 ;; Return value:  Size  Location     Type
  8256 ;;                  1    wreg      void 
  8257 ;; Registers used:
  8258 ;;		wreg
  8259 ;; Tracked objects:
  8260 ;;		On entry : 0/0
  8261 ;;		On exit  : 0/0
  8262 ;;		Unchanged: 0/0
  8263 ;; Data sizes:     COMRAM   BANK0   BANK1
  8264 ;;      Params:         0       0       0
  8265 ;;      Locals:         1       0       0
  8266 ;;      Temps:          0       0       0
  8267 ;;      Totals:         1       0       0
  8268 ;;Total ram usage:        1 bytes
  8269 ;; Hardware stack levels used: 1
  8270 ;; Hardware stack levels required when called: 2
  8271 ;; This function calls:
  8272 ;;		Nothing
  8273 ;; This function is called by:
  8274 ;;		_menuMotor
  8275 ;;		_joystickMotor
  8276 ;;		_btMotor
  8277 ;; This function uses a non-reentrant model
  8278 ;;
  8279                           
  8280                           	psect	text64
  8281  00015C                     __ptext64:
  8282                           	callstack 0
  8283  00015C                     _SiSendChar:
  8284                           	callstack 27
  8285                           
  8286                           ;incstack = 0
  8287                           ;SiSendChar@myByte stored from wreg
  8288  00015C  6E5E               	movwf	SiSendChar@myByte^0,c
  8289                           
  8290                           ;SIO.c: 42:     TXREG = myByte;
  8291  00015E  C05E  FFAD         	movff	SiSendChar@myByte,4013	;volatile
  8292  000162  0012               	return		;funcret
  8293  000164                     __end_of_SiSendChar:
  8294                           	callstack 0
  8295                           
  8296 ;; *************** function _SiIsAvailable *****************
  8297 ;; Defined at:
  8298 ;;		line 37 in file "SIO.c"
  8299 ;; Parameters:    Size  Location     Type
  8300 ;;		None
  8301 ;; Auto vars:     Size  Location     Type
  8302 ;;		None
  8303 ;; Return value:  Size  Location     Type
  8304 ;;                  1    wreg      unsigned char 
  8305 ;; Registers used:
  8306 ;;		wreg
  8307 ;; Tracked objects:
  8308 ;;		On entry : 0/0
  8309 ;;		On exit  : 0/0
  8310 ;;		Unchanged: 0/0
  8311 ;; Data sizes:     COMRAM   BANK0   BANK1
  8312 ;;      Params:         0       0       0
  8313 ;;      Locals:         0       0       0
  8314 ;;      Temps:          0       0       0
  8315 ;;      Totals:         0       0       0
  8316 ;;Total ram usage:        0 bytes
  8317 ;; Hardware stack levels used: 1
  8318 ;; Hardware stack levels required when called: 2
  8319 ;; This function calls:
  8320 ;;		Nothing
  8321 ;; This function is called by:
  8322 ;;		_menuMotor
  8323 ;;		_joystickMotor
  8324 ;;		_btMotor
  8325 ;; This function uses a non-reentrant model
  8326 ;;
  8327                           
  8328                           	psect	text65
  8329  00016A                     __ptext65:
  8330                           	callstack 0
  8331  00016A                     _SiIsAvailable:
  8332                           	callstack 27
  8333                           
  8334                           ;SIO.c: 38:     return TXSTAbits.TRMT;
  8335                           
  8336                           ;incstack = 0
  8337  00016A  B2AC               	btfsc	172,1,c	;volatile
  8338  00016C  0C01               	retlw	1
  8339  00016E  0C00               	retlw	0	;funcret
  8340  000170                     __end_of_SiIsAvailable:
  8341                           	callstack 0
  8342                           
  8343 ;; *************** function _audioMotor *****************
  8344 ;; Defined at:
  8345 ;;		line 27 in file "Audio.c"
  8346 ;; Parameters:    Size  Location     Type
  8347 ;;		None
  8348 ;; Auto vars:     Size  Location     Type
  8349 ;;		None
  8350 ;; Return value:  Size  Location     Type
  8351 ;;                  1    wreg      void 
  8352 ;; Registers used:
  8353 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8354 ;; Tracked objects:
  8355 ;;		On entry : 0/0
  8356 ;;		On exit  : 0/0
  8357 ;;		Unchanged: 0/0
  8358 ;; Data sizes:     COMRAM   BANK0   BANK1
  8359 ;;      Params:         0       0       0
  8360 ;;      Locals:         0       0       0
  8361 ;;      Temps:          3       0       0
  8362 ;;      Totals:         3       0       0
  8363 ;;Total ram usage:        3 bytes
  8364 ;; Hardware stack levels used: 1
  8365 ;; Hardware stack levels required when called: 3
  8366 ;; This function calls:
  8367 ;;		_TiGetTics
  8368 ;;		_TiResetTics
  8369 ;; This function is called by:
  8370 ;;		_main
  8371 ;; This function uses a non-reentrant model
  8372 ;;
  8373                           
  8374                           	psect	text66
  8375  001628                     __ptext66:
  8376                           	callstack 0
  8377  001628                     _audioMotor:
  8378                           	callstack 27
  8379                           
  8380                           ;Audio.c: 28:     switch(state){
  8381                           
  8382                           ;incstack = 0
  8383  001628  D030               	goto	l6169
  8384  00162A                     l6139:
  8385                           
  8386                           ;Audio.c: 33:             if (TiGetTics(periodTimer)>= (period+1)){
  8387  00162A  D848               	call	PL46	;call to abstracted procedure
  8388  00162C  EC22  F00F         	call	_TiGetTics
  8389  001630  D83C               	call	PL38	;call to abstracted procedure
  8390  001632  A0D8               	btfss	status,0,c
  8391  001634  0012               	return	
  8392                           
  8393                           ;Audio.c: 34:                 TiResetTics(periodTimer);
  8394  001636  5038               	movf	_periodTimer^0,w,c
  8395  001638  ECAB  F00F         	call	_TiResetTics
  8396                           
  8397                           ;Audio.c: 35:                 LATCbits.LATC3=1;;
  8398  00163C  868B               	bsf	139,3,c	;volatile
  8399                           
  8400                           ;Audio.c: 36:                 state = 2;
  8401  00163E  0E02               	movlw	2
  8402  001640  6E39               	movwf	_state@Audio$F967^0,c
  8403  001642  0C02               	retlw	2
  8404  001644                     l6147:
  8405                           
  8406                           ;Audio.c: 40:             if (TiGetTics(periodTimer)>= (period+1)){
  8407  001644  D83B               	call	PL46	;call to abstracted procedure
  8408  001646  EC22  F00F         	call	_TiGetTics
  8409  00164A  D82F               	call	PL38	;call to abstracted procedure
  8410  00164C  A0D8               	btfss	status,0,c
  8411  00164E  0012               	return	
  8412                           
  8413                           ;Audio.c: 41:                 TiResetTics(periodTimer);
  8414  001650  5038               	movf	_periodTimer^0,w,c
  8415  001652  ECAB  F00F         	call	_TiResetTics
  8416                           
  8417                           ;Audio.c: 42:                 LATCbits.LATC3=0;;
  8418  001656  968B               	bcf	139,3,c	;volatile
  8419                           
  8420                           ;Audio.c: 43:                 state = 3;
  8421  001658  0E03               	movlw	3
  8422  00165A  6E39               	movwf	_state@Audio$F967^0,c
  8423  00165C  0C03               	retlw	3
  8424  00165E                     l6155:
  8425                           
  8426                           ;Audio.c: 48:             state = 1;
  8427  00165E  0E01               	movlw	1
  8428  001660  6E39               	movwf	_state@Audio$F967^0,c
  8429                           
  8430                           ;Audio.c: 49:             if (TiGetTics(timerSong) >= 1200){
  8431  001662  5037               	movf	_timerSong^0,w,c
  8432  001664  EC22  F00F         	call	_TiGetTics
  8433  001668  BE5F               	btfsc	(?_TiGetTics+1)^0,7,c
  8434  00166A  0012               	return	
  8435  00166C  ECA9  F004         	call	PL26	;call to abstracted procedure
  8436  001670  A0D8               	btfss	status,0,c
  8437  001672  0012               	return	
  8438                           
  8439                           ;Audio.c: 50:                 period++;
  8440  001674  2A36               	incf	_period^0,f,c
  8441                           
  8442                           ;Audio.c: 51:                 TiResetTics(timerSong);
  8443  001676  5037               	movf	_timerSong^0,w,c
  8444  001678  ECAB  F00F         	call	_TiResetTics
  8445                           
  8446                           ;Audio.c: 52:                 if (period == 6){
  8447  00167C  0E06               	movlw	6
  8448  00167E  1836               	xorwf	_period^0,w,c
  8449  001680  A4D8               	btfss	status,2,c
  8450  001682  0012               	return	
  8451                           
  8452                           ;Audio.c: 53:                     period = 0;
  8453  001684  6A36               	clrf	_period^0,c
  8454                           
  8455                           ;Audio.c: 54:                     state = 0;
  8456  001686  6A39               	clrf	_state@Audio$F967^0,c
  8457  001688  0012               	return	
  8458  00168A                     l6169:
  8459  00168A  5039               	movf	_state@Audio$F967^0,w,c
  8460  00168C  6E65               	movwf	??_audioMotor^0,c
  8461  00168E  6A66               	clrf	(??_audioMotor+1)^0,c
  8462                           
  8463                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  8464                           ; Switch size 1, requested type "space"
  8465                           ; Number of cases is 1, Range of values is 0 to 0
  8466                           ; switch strategies available:
  8467                           ; Name         Instructions Cycles
  8468                           ; simple_byte            4     3 (average)
  8469                           ;	Chosen strategy is simple_byte
  8470  001690  5066               	movf	(??_audioMotor+1)^0,w,c
  8471  001692  A4D8               	btfss	status,2,c
  8472  001694  0012               	return	
  8473                           
  8474                           ; Switch size 1, requested type "space"
  8475                           ; Number of cases is 4, Range of values is 0 to 3
  8476                           ; switch strategies available:
  8477                           ; Name         Instructions Cycles
  8478                           ; simple_byte           13     7 (average)
  8479                           ;	Chosen strategy is simple_byte
  8480  001696  5065               	movf	??_audioMotor^0,w,c
  8481  001698  B4D8               	btfsc	status,2,c
  8482  00169A  0012               	return	
  8483  00169C  0A01               	xorlw	1	; case 1
  8484  00169E  E0C5               	bz	l6139
  8485  0016A0  0A03               	xorlw	3	; case 2
  8486  0016A2  E0D0               	bz	l6147
  8487  0016A4  0A01               	xorlw	1	; case 3
  8488  0016A6  E0DB               	bz	l6155
  8489  0016A8  0012               	return		;funcret
  8490  0016AA                     __end_of_audioMotor:
  8491                           	callstack 0
  8492  0016AA                     PL38:
  8493                           	callstack 27
  8494  0016AA  5065               	movf	??_audioMotor^0,w,c
  8495  0016AC  5C5E               	subwf	?_TiGetTics^0,w,c
  8496  0016AE  505F               	movf	(?_TiGetTics+1)^0,w,c
  8497  0016B0  0A80               	xorlw	128
  8498  0016B2  6E67               	movwf	(??_audioMotor+2)^0,c
  8499  0016B4  5066               	movf	(??_audioMotor+1)^0,w,c
  8500  0016B6  0A80               	xorlw	128
  8501  0016B8  5867               	subwfb	(??_audioMotor+2)^0,w,c
  8502  0016BA  0012               	return	
  8503  0016BC                     __end_ofPL38:
  8504                           	callstack 0
  8505  0016BC                     PL46:
  8506                           	callstack 27
  8507  0016BC  5036               	movf	_period^0,w,c
  8508  0016BE  6E65               	movwf	??_audioMotor^0,c
  8509  0016C0  6A66               	clrf	(??_audioMotor+1)^0,c
  8510  0016C2  2A65               	incf	??_audioMotor^0,f,c
  8511  0016C4  0E00               	movlw	0
  8512  0016C6  2266               	addwfc	(??_audioMotor+1)^0,f,c
  8513  0016C8  5038               	movf	_periodTimer^0,w,c
  8514  0016CA  0012               	return	
  8515  0016CC                     __end_ofPL46:
  8516                           	callstack 0
  8517                           
  8518 ;; *************** function _TiInitTimer *****************
  8519 ;; Defined at:
  8520 ;;		line 17 in file "TTimer.c"
  8521 ;; Parameters:    Size  Location     Type
  8522 ;;		None
  8523 ;; Auto vars:     Size  Location     Type
  8524 ;;		None
  8525 ;; Return value:  Size  Location     Type
  8526 ;;                  1    wreg      void 
  8527 ;; Registers used:
  8528 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  8529 ;; Tracked objects:
  8530 ;;		On entry : 0/0
  8531 ;;		On exit  : 0/0
  8532 ;;		Unchanged: 0/0
  8533 ;; Data sizes:     COMRAM   BANK0   BANK1
  8534 ;;      Params:         0       0       0
  8535 ;;      Locals:         0       0       0
  8536 ;;      Temps:          0       0       0
  8537 ;;      Totals:         0       0       0
  8538 ;;Total ram usage:        0 bytes
  8539 ;; Hardware stack levels used: 1
  8540 ;; Hardware stack levels required when called: 2
  8541 ;; This function calls:
  8542 ;;		Nothing
  8543 ;; This function is called by:
  8544 ;;		_main
  8545 ;; This function uses a non-reentrant model
  8546 ;;
  8547                           
  8548                           	psect	text67
  8549  001D76                     __ptext67:
  8550                           	callstack 0
  8551  001D76                     _TiInitTimer:
  8552                           	callstack 28
  8553                           
  8554                           ;TTimer.c: 20:     RCONbits.IPEN = 0;
  8555                           
  8556                           ;incstack = 0
  8557  001D76  9ED0               	bcf	208,7,c	;volatile
  8558                           
  8559                           ;TTimer.c: 21:     INTCONbits.GIE_GIEH = 1;
  8560  001D78  8EF2               	bsf	242,7,c	;volatile
  8561                           
  8562                           ;TTimer.c: 22:     INTCONbits.PEIE_GIEL = 1;
  8563  001D7A  8CF2               	bsf	242,6,c	;volatile
  8564                           
  8565                           ;TTimer.c: 23:     INTCONbits.TMR0IE = 1;
  8566  001D7C  8AF2               	bsf	242,5,c	;volatile
  8567                           
  8568                           ;TTimer.c: 24:     INTCONbits.TMR0IF = 0;
  8569  001D7E  94F2               	bcf	242,2,c	;volatile
  8570                           
  8571                           ;TTimer.c: 25:     T0CON = 0x08;
  8572  001D80  0E08               	movlw	8
  8573  001D82  6ED5               	movwf	213,c	;volatile
  8574                           
  8575                           ;TTimer.c: 27:     TMR0H = 0xD8;
  8576  001D84  0ED8               	movlw	216
  8577  001D86  6ED7               	movwf	215,c	;volatile
  8578                           
  8579                           ;TTimer.c: 28:     TMR0L = 0xF0;
  8580  001D88  0EF0               	movlw	240
  8581  001D8A  6ED6               	movwf	214,c	;volatile
  8582                           
  8583                           ;TTimer.c: 29:     T0CONbits.TMR0ON = 1;
  8584  001D8C  8ED5               	bsf	213,7,c	;volatile
  8585                           
  8586                           ;TTimer.c: 31:     for (counter=0;counter<25;counter++) {
  8587  001D8E  6A46               	clrf	_counter^0,c
  8588  001D90                     l4379:
  8589  001D90  0E18               	movlw	24
  8590  001D92  6446               	cpfsgt	_counter^0,c
  8591  001D94  D001               	goto	l4383
  8592  001D96  0C18               	retlw	24
  8593  001D98                     l4383:
  8594                           
  8595                           ;TTimer.c: 32:  s_Timers[counter].b_busy=0;
  8596  001D98  EC9B  F00E         	call	PL14	;call to abstracted procedure
  8597  001D9C  6ADF               	clrf	indf2,c
  8598                           
  8599                           ;TTimer.c: 33:     }
  8600  001D9E  2A46               	incf	_counter^0,f,c
  8601  001DA0  D7F7               	goto	l4379
  8602  001DA2                     __end_of_TiInitTimer:
  8603                           	callstack 0
  8604                           
  8605 ;; *************** function _SMSMotor *****************
  8606 ;; Defined at:
  8607 ;;		line 133 in file "keypad.c"
  8608 ;; Parameters:    Size  Location     Type
  8609 ;;		None
  8610 ;; Auto vars:     Size  Location     Type
  8611 ;;		None
  8612 ;; Return value:  Size  Location     Type
  8613 ;;                  1    wreg      void 
  8614 ;; Registers used:
  8615 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8616 ;; Tracked objects:
  8617 ;;		On entry : 0/0
  8618 ;;		On exit  : 0/0
  8619 ;;		Unchanged: 0/0
  8620 ;; Data sizes:     COMRAM   BANK0   BANK1
  8621 ;;      Params:         0       0       0
  8622 ;;      Locals:         0       0       0
  8623 ;;      Temps:          2       0       0
  8624 ;;      Totals:         2       0       0
  8625 ;;Total ram usage:        2 bytes
  8626 ;; Hardware stack levels used: 1
  8627 ;; Hardware stack levels required when called: 4
  8628 ;; This function calls:
  8629 ;;		_KeGetGenericValue
  8630 ;;		_TiGetTics
  8631 ;;		_TiResetTics
  8632 ;; This function is called by:
  8633 ;;		_main
  8634 ;; This function uses a non-reentrant model
  8635 ;;
  8636                           
  8637                           	psect	text68
  8638  0014CE                     __ptext68:
  8639                           	callstack 0
  8640  0014CE                     _SMSMotor:
  8641                           	callstack 26
  8642                           
  8643                           ;keypad.c: 134:     switch(stateSMS){
  8644                           
  8645                           ;incstack = 0
  8646  0014CE  D043               	goto	l6231
  8647  0014D0                     l6179:
  8648                           
  8649                           ;keypad.c: 139:             if(pressed){
  8650  0014D0  5040               	movf	_pressed^0,w,c
  8651  0014D2  E021               	bz	l177
  8652                           
  8653                           ;keypad.c: 140:                 stateSMS=1;
  8654  0014D4  0E01               	movlw	1
  8655  0014D6  6E3C               	movwf	_stateSMS^0,c
  8656                           
  8657                           ;keypad.c: 141:                 currentKey = KeGetGenericValue();
  8658  0014D8  EC8B  F00F         	call	_KeGetGenericValue	;wreg free
  8659  0014DC  6E42               	movwf	_currentKey^0,c
  8660                           
  8661                           ;keypad.c: 142:                 available = 2;
  8662  0014DE  0E02               	movlw	2
  8663  0014E0  6E3E               	movwf	_available^0,c
  8664                           
  8665                           ;keypad.c: 143:                 if (TiGetTics(timer_SMS)>=1200){
  8666  0014E2  5043               	movf	_timer_SMS^0,w,c
  8667  0014E4  EC22  F00F         	call	_TiGetTics
  8668  0014E8  BE5F               	btfsc	(?_TiGetTics+1)^0,7,c
  8669  0014EA  D008               	goto	l6195
  8670  0014EC  ECA9  F004         	call	PL26	;call to abstracted procedure
  8671  0014F0  E305               	bnc	l6195
  8672                           
  8673                           ;keypad.c: 144:                     available = 1;
  8674  0014F2  0E01               	movlw	1
  8675  0014F4  6E3E               	movwf	_available^0,c
  8676                           
  8677                           ;keypad.c: 145:                     numPresses = 0;
  8678  0014F6  6A3F               	clrf	_numPresses^0,c
  8679                           
  8680                           ;keypad.c: 146:                     previous = 0;
  8681  0014F8  6A41               	clrf	_previous^0,c
  8682                           
  8683                           ;keypad.c: 147:                 } else if(numPresses != 0 && previous != currentKey ){
  8684  0014FA  D00A               	goto	l6205
  8685  0014FC                     l6195:
  8686  0014FC  503F               	movf	_numPresses^0,w,c
  8687  0014FE  E008               	bz	l6205
  8688  001500  5042               	movf	_currentKey^0,w,c
  8689  001502  1841               	xorwf	_previous^0,w,c
  8690  001504  E005               	bz	l6205
  8691                           
  8692                           ;keypad.c: 149:                     available = 1;
  8693  001506  0E01               	movlw	1
  8694  001508  6E3E               	movwf	_available^0,c
  8695                           
  8696                           ;keypad.c: 151:                     previous = currentKey;
  8697  00150A  C042  F041         	movff	_currentKey,_previous
  8698                           
  8699                           ;keypad.c: 153:                     numPresses = 0;
  8700  00150E  6A3F               	clrf	_numPresses^0,c
  8701  001510                     l6205:
  8702                           
  8703                           ;keypad.c: 157:                 TiResetTics(timer_SMS);
  8704  001510  5043               	movf	_timer_SMS^0,w,c
  8705  001512  EFAB  F00F         	goto	_TiResetTics
  8706  001516                     l177:
  8707                           
  8708                           ;keypad.c: 160:               previous=currentKey;
  8709  001516  C042  F041         	movff	_currentKey,_previous
  8710  00151A  0012               	return	
  8711  00151C                     l6207:
  8712                           
  8713                           ;keypad.c: 172:             numPresses++;
  8714  00151C  2A3F               	incf	_numPresses^0,f,c
  8715                           
  8716                           ;keypad.c: 173:             stateSMS = 2;
  8717  00151E  0E02               	movlw	2
  8718  001520  6E3C               	movwf	_stateSMS^0,c
  8719                           
  8720                           ;keypad.c: 174:             break;
  8721  001522  0C02               	retlw	2
  8722  001524                     l6211:
  8723                           
  8724                           ;keypad.c: 177:             if (!pressed){
  8725  001524  5040               	movf	_pressed^0,w,c
  8726  001526  A4D8               	btfss	status,2,c
  8727  001528  0012               	return	
  8728                           
  8729                           ;keypad.c: 178:                 TiResetTics(timer_SMS);
  8730  00152A  5043               	movf	_timer_SMS^0,w,c
  8731  00152C  ECAB  F00F         	call	_TiResetTics
  8732                           
  8733                           ;keypad.c: 180:                 stateSMS = 0;
  8734  001530  6A3C               	clrf	_stateSMS^0,c
  8735  001532  0012               	return	
  8736  001534                     l6217:
  8737                           
  8738                           ;keypad.c: 185:             if(pressed){
  8739  001534  5040               	movf	_pressed^0,w,c
  8740  001536  B4D8               	btfsc	status,2,c
  8741  001538  0012               	return	
  8742                           
  8743                           ;keypad.c: 186:                 stateSMS = 4;
  8744  00153A  EF44  F00F         	goto	PL86	;call to abstracted procedure
  8745  00153E                     l6221:
  8746                           
  8747                           ;keypad.c: 191:             stateSMS = 5;
  8748  00153E  0E05               	movlw	5
  8749  001540  6E3C               	movwf	_stateSMS^0,c
  8750                           
  8751                           ;keypad.c: 192:             break;
  8752  001542  0C05               	retlw	5
  8753  001544                     l6223:
  8754                           
  8755                           ;keypad.c: 194:             if (!pressed){
  8756  001544  5040               	movf	_pressed^0,w,c
  8757  001546  A4D8               	btfss	status,2,c
  8758  001548  0012               	return	
  8759                           
  8760                           ;keypad.c: 195:                 TiResetTics(timer_SMS);
  8761  00154A  5043               	movf	_timer_SMS^0,w,c
  8762  00154C  ECAB  F00F         	call	_TiResetTics
  8763                           
  8764                           ;keypad.c: 197:                 stateSMS = 3;
  8765  001550  0E03               	movlw	3
  8766  001552  6E3C               	movwf	_stateSMS^0,c
  8767  001554  0C03               	retlw	3
  8768  001556                     l6231:
  8769  001556  503C               	movf	_stateSMS^0,w,c
  8770  001558  6E65               	movwf	??_SMSMotor^0,c
  8771  00155A  6A66               	clrf	(??_SMSMotor+1)^0,c
  8772                           
  8773                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  8774                           ; Switch size 1, requested type "space"
  8775                           ; Number of cases is 1, Range of values is 0 to 0
  8776                           ; switch strategies available:
  8777                           ; Name         Instructions Cycles
  8778                           ; simple_byte            4     3 (average)
  8779                           ;	Chosen strategy is simple_byte
  8780  00155C  5066               	movf	(??_SMSMotor+1)^0,w,c
  8781  00155E  A4D8               	btfss	status,2,c
  8782  001560  0012               	return	
  8783                           
  8784                           ; Switch size 1, requested type "space"
  8785                           ; Number of cases is 6, Range of values is 0 to 5
  8786                           ; switch strategies available:
  8787                           ; Name         Instructions Cycles
  8788                           ; simple_byte           19    10 (average)
  8789                           ;	Chosen strategy is simple_byte
  8790  001562  5065               	movf	??_SMSMotor^0,w,c
  8791  001564  E0B5               	bz	l6179
  8792  001566  0A01               	xorlw	1	; case 1
  8793  001568  E0D9               	bz	l6207
  8794  00156A  0A03               	xorlw	3	; case 2
  8795  00156C  E0DB               	bz	l6211
  8796  00156E  0A01               	xorlw	1	; case 3
  8797  001570  E0E1               	bz	l6217
  8798  001572  0A07               	xorlw	7	; case 4
  8799  001574  E0E4               	bz	l6221
  8800  001576  0A01               	xorlw	1	; case 5
  8801  001578  E0E5               	bz	l6223
  8802  00157A  0012               	return		;funcret
  8803  00157C                     __end_of_SMSMotor:
  8804                           	callstack 0
  8805                           
  8806 ;; *************** function _KeGetGenericValue *****************
  8807 ;; Defined at:
  8808 ;;		line 224 in file "keypad.c"
  8809 ;; Parameters:    Size  Location     Type
  8810 ;;		None
  8811 ;; Auto vars:     Size  Location     Type
  8812 ;;		None
  8813 ;; Return value:  Size  Location     Type
  8814 ;;                  1    wreg      unsigned char 
  8815 ;; Registers used:
  8816 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8817 ;; Tracked objects:
  8818 ;;		On entry : 0/0
  8819 ;;		On exit  : 0/0
  8820 ;;		Unchanged: 0/0
  8821 ;; Data sizes:     COMRAM   BANK0   BANK1
  8822 ;;      Params:         0       0       0
  8823 ;;      Locals:         0       0       0
  8824 ;;      Temps:          2       0       0
  8825 ;;      Totals:         2       0       0
  8826 ;;Total ram usage:        2 bytes
  8827 ;; Hardware stack levels used: 1
  8828 ;; Hardware stack levels required when called: 3
  8829 ;; This function calls:
  8830 ;;		_getColumn
  8831 ;; This function is called by:
  8832 ;;		_SMSMotor
  8833 ;;		_KeGetCharValue
  8834 ;;		_menuMotor
  8835 ;;		_timeMotor
  8836 ;; This function uses a non-reentrant model
  8837 ;;
  8838                           
  8839                           	psect	text69
  8840  001F16                     __ptext69:
  8841                           	callstack 0
  8842  001F16                     _KeGetGenericValue:
  8843                           	callstack 26
  8844                           
  8845                           ;keypad.c: 225:     return TABLE[(row*3)+getColumn()];
  8846                           
  8847                           ;incstack = 0
  8848  001F16  EC85  F000         	call	_getColumn	;wreg free
  8849  001F1A  6E5E               	movwf	??_KeGetGenericValue^0,c
  8850  001F1C  5045               	movf	_row^0,w,c
  8851  001F1E  0D03               	mullw	3
  8852  001F20  50F3               	movf	243,w,c
  8853  001F22  0F01               	addlw	low _TABLE
  8854  001F24  245E               	addwf	??_KeGetGenericValue^0,w,c
  8855  001F26  6E5F               	movwf	(??_KeGetGenericValue+1)^0,c
  8856  001F28  C05F  FFF6         	movff	??_KeGetGenericValue+1,tblptrl
  8857  001F2C                     	if	1	;There is more than 1 active tblptr byte
  8858  001F2C  0E02               	movlw	high __smallconst
  8859  001F2E  6EF7               	movwf	tblptrh,c
  8860  001F30                     	endif
  8861  001F30                     	if	0	;tblptru may be non-zero
  8862  001F30                     	endif
  8863  001F30                     	if	0	;tblptru may be non-zero
  8864  001F30                     	endif
  8865  001F30  0008               	tblrd		*
  8866  001F32  50F5               	movf	tablat,w,c
  8867  001F34  0012               	return		;funcret
  8868  001F36                     __end_of_KeGetGenericValue:
  8869                           	callstack 0
  8870                           
  8871 ;; *************** function _getColumn *****************
  8872 ;; Defined at:
  8873 ;;		line 211 in file "keypad.c"
  8874 ;; Parameters:    Size  Location     Type
  8875 ;;		None
  8876 ;; Auto vars:     Size  Location     Type
  8877 ;;		None
  8878 ;; Return value:  Size  Location     Type
  8879 ;;                  1    wreg      unsigned char 
  8880 ;; Registers used:
  8881 ;;		wreg
  8882 ;; Tracked objects:
  8883 ;;		On entry : 0/0
  8884 ;;		On exit  : 0/0
  8885 ;;		Unchanged: 0/0
  8886 ;; Data sizes:     COMRAM   BANK0   BANK1
  8887 ;;      Params:         0       0       0
  8888 ;;      Locals:         0       0       0
  8889 ;;      Temps:          0       0       0
  8890 ;;      Totals:         0       0       0
  8891 ;;Total ram usage:        0 bytes
  8892 ;; Hardware stack levels used: 1
  8893 ;; Hardware stack levels required when called: 2
  8894 ;; This function calls:
  8895 ;;		Nothing
  8896 ;; This function is called by:
  8897 ;;		_KeGetGenericValue
  8898 ;; This function uses a non-reentrant model
  8899 ;;
  8900                           
  8901                           	psect	text70
  8902  00010A                     __ptext70:
  8903                           	callstack 0
  8904  00010A                     _getColumn:
  8905                           	callstack 26
  8906                           
  8907                           ;keypad.c: 212:     if (!PORTBbits.RB0) return 0;
  8908                           
  8909                           ;incstack = 0
  8910  00010A  A081               	btfss	129,0,c	;volatile
  8911  00010C  0C00               	retlw	0
  8912                           
  8913                           ;keypad.c: 213:     if (!PORTBbits.RB1) return 1;
  8914  00010E  A281               	btfss	129,1,c	;volatile
  8915  000110  0C01               	retlw	1
  8916                           
  8917                           ;keypad.c: 214:     return 2;
  8918  000112  0C02               	retlw	2	;funcret
  8919  000114                     __end_of_getColumn:
  8920                           	callstack 0
  8921                           
  8922 ;; *************** function _LcInit *****************
  8923 ;; Defined at:
  8924 ;;		line 60 in file "LcTLCD.c"
  8925 ;; Parameters:    Size  Location     Type
  8926 ;;  rows            1    wreg     unsigned char 
  8927 ;;  columns         1   17[COMRAM] unsigned char 
  8928 ;; Auto vars:     Size  Location     Type
  8929 ;;  rows            1   18[COMRAM] unsigned char 
  8930 ;;  i               1   19[COMRAM] unsigned char 
  8931 ;; Return value:  Size  Location     Type
  8932 ;;                  1    wreg      void 
  8933 ;; Registers used:
  8934 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8935 ;; Tracked objects:
  8936 ;;		On entry : 0/0
  8937 ;;		On exit  : 0/0
  8938 ;;		Unchanged: 0/0
  8939 ;; Data sizes:     COMRAM   BANK0   BANK1
  8940 ;;      Params:         1       0       0
  8941 ;;      Locals:         2       0       0
  8942 ;;      Temps:          0       0       0
  8943 ;;      Totals:         3       0       0
  8944 ;;Total ram usage:        3 bytes
  8945 ;; Hardware stack levels used: 1
  8946 ;; Hardware stack levels required when called: 4
  8947 ;; This function calls:
  8948 ;;		_CantaIR
  8949 ;;		_EscriuPrimeraOrdre
  8950 ;;		_Espera
  8951 ;;		_TiGetTimer
  8952 ;;		_WaitForBusy
  8953 ;; This function is called by:
  8954 ;;		_main
  8955 ;; This function uses a non-reentrant model
  8956 ;;
  8957                           
  8958                           	psect	text71
  8959  00157C                     __ptext71:
  8960                           	callstack 0
  8961  00157C                     _LcInit:
  8962                           	callstack 26
  8963                           
  8964                           ;LcTLCD.c: 68:  Rows = rows; Columns = columns;
  8965                           
  8966                           ;incstack = 0
  8967  00157C  EC8C  F00E         	call	_TiGetTimer	;wreg free
  8968  001580  6E0D               	movwf	_Timer^0,c
  8969  001582  6A0E               	clrf	(_Timer+1)^0,c
  8970                           
  8971                           ;LcTLCD.c: 69:  RowAct = ColumnAct = 0;
  8972  001584  6A3A               	clrf	_ColumnAct^0,c
  8973  001586  6A3B               	clrf	_RowAct^0,c
  8974                           
  8975                           ;LcTLCD.c: 70:  (TRISDbits.TRISD4 = TRISDbits.TRISD5 = TRISDbits.TRISD6 = 0);
  8976  001588  9C95               	bcf	149,6,c	;volatile
  8977  00158A  9A95               	bcf	149,5,c	;volatile
  8978  00158C  9895               	bcf	149,4,c	;volatile
  8979                           
  8980                           ;LcTLCD.c: 71:  for (i = 0; i < 2; i++) {
  8981  00158E  6A6C               	clrf	LcInit@i^0,c
  8982  001590                     l6105:
  8983                           
  8984                           ;LcTLCD.c: 72:   Espera(Timer, 100);
  8985  001590  D845               	call	PL16	;call to abstracted procedure
  8986  001592  0E64               	movlw	100
  8987  001594  6E67               	movwf	Espera@ms^0,c
  8988  001596  EC9B  F00F         	call	_Espera	;wreg free
  8989                           
  8990                           ;LcTLCD.c: 75:   EscriuPrimeraOrdre(0x02 | 0x01);
  8991  00159A  0E03               	movlw	3
  8992  00159C  ECF9  F00B         	call	_EscriuPrimeraOrdre
  8993                           
  8994                           ;LcTLCD.c: 76:   Espera(Timer, 5);
  8995  0015A0  D83D               	call	PL16	;call to abstracted procedure
  8996  0015A2  0E05               	movlw	5
  8997  0015A4  6E67               	movwf	Espera@ms^0,c
  8998  0015A6  EC9B  F00F         	call	_Espera	;wreg free
  8999                           
  9000                           ;LcTLCD.c: 77:   EscriuPrimeraOrdre(0x02 | 0x01);
  9001  0015AA  0E03               	movlw	3
  9002  0015AC  ECF9  F00B         	call	_EscriuPrimeraOrdre
  9003                           
  9004                           ;LcTLCD.c: 78:   Espera(Timer, 1);
  9005  0015B0  D835               	call	PL16	;call to abstracted procedure
  9006  0015B2  0E01               	movlw	1
  9007  0015B4  6E67               	movwf	Espera@ms^0,c
  9008  0015B6  EC9B  F00F         	call	_Espera	;wreg free
  9009                           
  9010                           ;LcTLCD.c: 79:   EscriuPrimeraOrdre(0x02 | 0x01);
  9011  0015BA  0E03               	movlw	3
  9012  0015BC  ECF9  F00B         	call	_EscriuPrimeraOrdre
  9013                           
  9014                           ;LcTLCD.c: 80:   Espera(Timer, 1);
  9015  0015C0  D82D               	call	PL16	;call to abstracted procedure
  9016  0015C2  0E01               	movlw	1
  9017  0015C4  6E67               	movwf	Espera@ms^0,c
  9018  0015C6  EC9B  F00F         	call	_Espera	;wreg free
  9019                           
  9020                           ;LcTLCD.c: 83:   EscriuPrimeraOrdre(0x02);
  9021  0015CA  0E02               	movlw	2
  9022  0015CC  ECF9  F00B         	call	_EscriuPrimeraOrdre
  9023                           
  9024                           ;LcTLCD.c: 84:   Espera(Timer, 1);
  9025  0015D0  D825               	call	PL16	;call to abstracted procedure
  9026  0015D2  0E01               	movlw	1
  9027  0015D4  6E67               	movwf	Espera@ms^0,c
  9028  0015D6  EC9B  F00F         	call	_Espera	;wreg free
  9029                           
  9030                           ;LcTLCD.c: 85:   CantaIR(0x20 | 0x08);
  9031  0015DA  0E28               	movlw	40
  9032  0015DC  ECBB  F00F         	call	_CantaIR
  9033                           
  9034                           ;LcTLCD.c: 88:   WaitForBusy(); CantaIR(0x08);
  9035  0015E0  EC03  F00E         	call	_WaitForBusy	;wreg free
  9036  0015E4  0E08               	movlw	8
  9037  0015E6  ECBB  F00F         	call	_CantaIR
  9038                           
  9039                           ;LcTLCD.c: 89:   WaitForBusy(); CantaIR(0x01);
  9040  0015EA  EC03  F00E         	call	_WaitForBusy	;wreg free
  9041  0015EE  0E01               	movlw	1
  9042  0015F0  ECBB  F00F         	call	_CantaIR
  9043                           
  9044                           ;LcTLCD.c: 90:   Espera(Timer,3);
  9045  0015F4  D813               	call	PL16	;call to abstracted procedure
  9046  0015F6  0E03               	movlw	3
  9047  0015F8  6E67               	movwf	Espera@ms^0,c
  9048  0015FA  EC9B  F00F         	call	_Espera	;wreg free
  9049                           
  9050                           ;LcTLCD.c: 91:   WaitForBusy(); CantaIR(0x04 | 0x02);
  9051  0015FE  EC03  F00E         	call	_WaitForBusy	;wreg free
  9052  001602  0E06               	movlw	6
  9053  001604  ECBB  F00F         	call	_CantaIR
  9054                           
  9055                           ;LcTLCD.c: 92:   WaitForBusy(); CantaIR(0x08 | 0x04 | 0x02 | 0x01);
  9056  001608  EC03  F00E         	call	_WaitForBusy	;wreg free
  9057  00160C  0E0F               	movlw	15
  9058  00160E  ECBB  F00F         	call	_CantaIR
  9059                           
  9060                           ;LcTLCD.c: 93:  }
  9061  001612  2A6C               	incf	LcInit@i^0,f,c
  9062  001614  0E01               	movlw	1
  9063  001616  646C               	cpfsgt	LcInit@i^0,c
  9064  001618  D7BB               	goto	l6105
  9065  00161A  0C01               	retlw	1
  9066  00161C                     __end_of_LcInit:
  9067                           	callstack 0
  9068  00161C                     PL16:
  9069                           	callstack 26
  9070  00161C  C00D  F065         	movff	_Timer,Espera@Timer
  9071  001620  C00E  F066         	movff	_Timer+1,Espera@Timer+1
  9072  001624  6A68               	clrf	(Espera@ms+1)^0,c
  9073  001626  0012               	return	
  9074  001628                     __end_ofPL16:
  9075                           	callstack 0
  9076                           
  9077 ;; *************** function _WaitForBusy *****************
  9078 ;; Defined at:
  9079 ;;		line 260 in file "LcTLCD.c"
  9080 ;; Parameters:    Size  Location     Type
  9081 ;;		None
  9082 ;; Auto vars:     Size  Location     Type
  9083 ;;  Busy            1   12[COMRAM] unsigned char 
  9084 ;; Return value:  Size  Location     Type
  9085 ;;                  1    wreg      void 
  9086 ;; Registers used:
  9087 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9088 ;; Tracked objects:
  9089 ;;		On entry : 0/0
  9090 ;;		On exit  : 0/0
  9091 ;;		Unchanged: 0/0
  9092 ;; Data sizes:     COMRAM   BANK0   BANK1
  9093 ;;      Params:         0       0       0
  9094 ;;      Locals:         1       0       0
  9095 ;;      Temps:          0       0       0
  9096 ;;      Totals:         1       0       0
  9097 ;;Total ram usage:        1 bytes
  9098 ;; Hardware stack levels used: 1
  9099 ;; Hardware stack levels required when called: 3
  9100 ;; This function calls:
  9101 ;;		_TiGetTics
  9102 ;;		_TiResetTics
  9103 ;; This function is called by:
  9104 ;;		_LcInit
  9105 ;;		_LcClear
  9106 ;;		_LcCursorOn
  9107 ;;		_LcCursorOff
  9108 ;;		_LcGotoXY
  9109 ;;		_LcPutChar
  9110 ;; This function uses a non-reentrant model
  9111 ;;
  9112                           
  9113                           	psect	text72
  9114  001C06                     __ptext72:
  9115                           	callstack 0
  9116  001C06                     _WaitForBusy:
  9117                           	callstack 24
  9118                           
  9119                           ;LcTLCD.c: 261:  (TRISDbits.TRISD0 = TRISDbits.TRISD1 = TRISDbits.TRISD2 = TRISDbits.TRI
      +                          SD3 = 1);
  9120                           
  9121                           ;incstack = 0
  9122  001C06  8695               	bsf	149,3,c	;volatile
  9123  001C08  8495               	bsf	149,2,c	;volatile
  9124  001C0A  8295               	bsf	149,1,c	;volatile
  9125  001C0C  8095               	bsf	149,0,c	;volatile
  9126                           
  9127                           ;LcTLCD.c: 262:  (LATDbits.LATD4 = 0);
  9128  001C0E  988C               	bcf	140,4,c	;volatile
  9129                           
  9130                           ;LcTLCD.c: 263:  (LATDbits.LATD5 = 1);
  9131  001C10  8A8C               	bsf	140,5,c	;volatile
  9132                           
  9133                           ;LcTLCD.c: 264:  TiResetTics(Timer);
  9134  001C12  500D               	movf	_Timer^0,w,c
  9135  001C14  ECAB  F00F         	call	_TiResetTics
  9136  001C18                     l5787:
  9137                           
  9138                           ;LcTLCD.c: 266:   (LATDbits.LATD6 = 1);(LATDbits.LATD6 = 1);
  9139  001C18  8C8C               	bsf	140,6,c	;volatile
  9140  001C1A  8C8C               	bsf	140,6,c	;volatile
  9141                           
  9142                           ;LcTLCD.c: 267:   Busy = (PORTDbits.RD3);
  9143  001C1C  0E00               	movlw	0
  9144  001C1E  B683               	btfsc	131,3,c	;volatile
  9145  001C20  0E01               	movlw	1
  9146  001C22  6E65               	movwf	WaitForBusy@Busy^0,c
  9147                           
  9148                           ;LcTLCD.c: 268:   (LATDbits.LATD6 = 0);
  9149  001C24  9C8C               	bcf	140,6,c	;volatile
  9150                           
  9151                           ;LcTLCD.c: 269:   (LATDbits.LATD6 = 0);
  9152  001C26  9C8C               	bcf	140,6,c	;volatile
  9153                           
  9154                           ;LcTLCD.c: 270:   (LATDbits.LATD6 = 1);(LATDbits.LATD6 = 1);
  9155  001C28  8C8C               	bsf	140,6,c	;volatile
  9156  001C2A  8C8C               	bsf	140,6,c	;volatile
  9157                           
  9158                           ;LcTLCD.c: 272:   (LATDbits.LATD6 = 0);
  9159  001C2C  9C8C               	bcf	140,6,c	;volatile
  9160                           
  9161                           ;LcTLCD.c: 273:   (LATDbits.LATD6 = 0);
  9162  001C2E  9C8C               	bcf	140,6,c	;volatile
  9163                           
  9164                           ;LcTLCD.c: 274:   if (TiGetTics(Timer)) break;
  9165  001C30  500D               	movf	_Timer^0,w,c
  9166  001C32  EC22  F00F         	call	_TiGetTics
  9167  001C36  505E               	movf	?_TiGetTics^0,w,c
  9168  001C38  105F               	iorwf	(?_TiGetTics+1)^0,w,c
  9169  001C3A  E001               	bz	l5809
  9170  001C3C  0012               	return	
  9171  001C3E                     l5809:
  9172                           
  9173                           ;LcTLCD.c: 275:  } while(Busy);
  9174  001C3E  5065               	movf	WaitForBusy@Busy^0,w,c
  9175  001C40  E1EB               	bnz	l5787
  9176  001C42  0012               	return		;funcret
  9177  001C44                     __end_of_WaitForBusy:
  9178                           	callstack 0
  9179                           
  9180 ;; *************** function _TiGetTimer *****************
  9181 ;; Defined at:
  9182 ;;		line 74 in file "TTimer.c"
  9183 ;; Parameters:    Size  Location     Type
  9184 ;;		None
  9185 ;; Auto vars:     Size  Location     Type
  9186 ;;		None
  9187 ;; Return value:  Size  Location     Type
  9188 ;;                  1    wreg      unsigned char 
  9189 ;; Registers used:
  9190 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  9191 ;; Tracked objects:
  9192 ;;		On entry : 0/0
  9193 ;;		On exit  : 0/0
  9194 ;;		Unchanged: 0/0
  9195 ;; Data sizes:     COMRAM   BANK0   BANK1
  9196 ;;      Params:         0       0       0
  9197 ;;      Locals:         0       0       0
  9198 ;;      Temps:          1       0       0
  9199 ;;      Totals:         1       0       0
  9200 ;;Total ram usage:        1 bytes
  9201 ;; Hardware stack levels used: 1
  9202 ;; Hardware stack levels required when called: 2
  9203 ;; This function calls:
  9204 ;;		Nothing
  9205 ;; This function is called by:
  9206 ;;		_initKeypad
  9207 ;;		_LcInit
  9208 ;;		_initAudio
  9209 ;;		_initMenu
  9210 ;;		_initSIO
  9211 ;;		_initTime
  9212 ;; This function uses a non-reentrant model
  9213 ;;
  9214                           
  9215                           	psect	text73
  9216  001D18                     __ptext73:
  9217                           	callstack 0
  9218  001D18                     _TiGetTimer:
  9219                           	callstack 27
  9220                           
  9221                           ;TTimer.c: 78:     counter=0;
  9222                           
  9223                           ;incstack = 0
  9224  001D18  6A46               	clrf	_counter^0,c
  9225                           
  9226                           ;TTimer.c: 79:     while (s_Timers[counter].b_busy==1) {
  9227  001D1A  D005               	goto	l4087
  9228  001D1C                     l4079:
  9229                           
  9230                           ;TTimer.c: 80:         counter++;
  9231  001D1C  2A46               	incf	_counter^0,f,c
  9232                           
  9233                           ;TTimer.c: 81:  if (counter == 25) return -1;
  9234  001D1E  0E19               	movlw	25
  9235  001D20  1846               	xorwf	_counter^0,w,c
  9236  001D22  E101               	bnz	l4087
  9237  001D24  0CFF               	retlw	255
  9238  001D26                     l4087:
  9239                           
  9240                           ;TTimer.c: 79:     while (s_Timers[counter].b_busy==1) {
  9241  001D26  D807               	call	PL14	;call to abstracted procedure
  9242  001D28  04DE               	decf	postinc2,w,c
  9243  001D2A  E0F8               	bz	l4079
  9244                           
  9245                           ;TTimer.c: 83:     s_Timers[counter].b_busy=1;
  9246  001D2C  D804               	call	PL14	;call to abstracted procedure
  9247  001D2E  0E01               	movlw	1
  9248  001D30  6EDF               	movwf	indf2,c
  9249                           
  9250                           ;TTimer.c: 84:     return (counter);
  9251  001D32  5046               	movf	_counter^0,w,c
  9252  001D34  0012               	return		;funcret
  9253  001D36                     __end_of_TiGetTimer:
  9254                           	callstack 0
  9255  001D36                     PL14:
  9256                           	callstack 28
  9257  001D36  5046               	movf	_counter^0,w,c
  9258  001D38  0D03               	mullw	3
  9259  001D3A  0E92               	movlw	low (_s_Timers+2)
  9260  001D3C  24F3               	addwf	243,w,c
  9261  001D3E  6ED9               	movwf	fsr2l,c
  9262  001D40  0E01               	movlw	high (_s_Timers+2)
  9263  001D42  20F4               	addwfc	prodh,w,c
  9264  001D44  6EDA               	movwf	fsr2h,c
  9265  001D46  0012               	return	
  9266  001D48                     __end_ofPL14:
  9267                           	callstack 0
  9268                           
  9269 ;; *************** function _Espera *****************
  9270 ;; Defined at:
  9271 ;;		line 209 in file "LcTLCD.c"
  9272 ;; Parameters:    Size  Location     Type
  9273 ;;  Timer           2   12[COMRAM] int 
  9274 ;;  ms              2   14[COMRAM] int 
  9275 ;; Auto vars:     Size  Location     Type
  9276 ;;		None
  9277 ;; Return value:  Size  Location     Type
  9278 ;;                  1    wreg      void 
  9279 ;; Registers used:
  9280 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9281 ;; Tracked objects:
  9282 ;;		On entry : 0/0
  9283 ;;		On exit  : 0/0
  9284 ;;		Unchanged: 0/0
  9285 ;; Data sizes:     COMRAM   BANK0   BANK1
  9286 ;;      Params:         4       0       0
  9287 ;;      Locals:         0       0       0
  9288 ;;      Temps:          1       0       0
  9289 ;;      Totals:         5       0       0
  9290 ;;Total ram usage:        5 bytes
  9291 ;; Hardware stack levels used: 1
  9292 ;; Hardware stack levels required when called: 3
  9293 ;; This function calls:
  9294 ;;		_TiGetTics
  9295 ;;		_TiResetTics
  9296 ;; This function is called by:
  9297 ;;		_LcInit
  9298 ;;		_LcClear
  9299 ;; This function uses a non-reentrant model
  9300 ;;
  9301                           
  9302                           	psect	text74
  9303  001F36                     __ptext74:
  9304                           	callstack 0
  9305  001F36                     _Espera:
  9306                           	callstack 24
  9307                           
  9308                           ;LcTLCD.c: 210:  TiResetTics(Timer);
  9309                           
  9310                           ;incstack = 0
  9311  001F36  5065               	movf	Espera@Timer^0,w,c
  9312  001F38  ECAB  F00F         	call	_TiResetTics
  9313  001F3C                     l5813:
  9314  001F3C  5065               	movf	Espera@Timer^0,w,c
  9315  001F3E  EC22  F00F         	call	_TiGetTics
  9316  001F42  5067               	movf	Espera@ms^0,w,c
  9317  001F44  5C5E               	subwf	?_TiGetTics^0,w,c
  9318  001F46  505F               	movf	(?_TiGetTics+1)^0,w,c
  9319  001F48  0A80               	xorlw	128
  9320  001F4A  6E69               	movwf	??_Espera^0,c
  9321  001F4C  5068               	movf	(Espera@ms+1)^0,w,c
  9322  001F4E  0A80               	xorlw	128
  9323  001F50  5869               	subwfb	??_Espera^0,w,c
  9324  001F52  E3F4               	bnc	l5813
  9325  001F54  0012               	return		;funcret
  9326  001F56                     __end_of_Espera:
  9327                           	callstack 0
  9328                           
  9329 ;; *************** function _EscriuPrimeraOrdre *****************
  9330 ;; Defined at:
  9331 ;;		line 278 in file "LcTLCD.c"
  9332 ;; Parameters:    Size  Location     Type
  9333 ;;  ordre           1    wreg     unsigned char 
  9334 ;; Auto vars:     Size  Location     Type
  9335 ;;  ordre           1    6[COMRAM] unsigned char 
  9336 ;; Return value:  Size  Location     Type
  9337 ;;                  1    wreg      void 
  9338 ;; Registers used:
  9339 ;;		wreg, status,2, status,0
  9340 ;; Tracked objects:
  9341 ;;		On entry : 0/0
  9342 ;;		On exit  : 0/0
  9343 ;;		Unchanged: 0/0
  9344 ;; Data sizes:     COMRAM   BANK0   BANK1
  9345 ;;      Params:         0       0       0
  9346 ;;      Locals:         1       0       0
  9347 ;;      Temps:          1       0       0
  9348 ;;      Totals:         2       0       0
  9349 ;;Total ram usage:        2 bytes
  9350 ;; Hardware stack levels used: 1
  9351 ;; Hardware stack levels required when called: 2
  9352 ;; This function calls:
  9353 ;;		Nothing
  9354 ;; This function is called by:
  9355 ;;		_LcInit
  9356 ;; This function uses a non-reentrant model
  9357 ;;
  9358                           
  9359                           	psect	text75
  9360  0017F2                     __ptext75:
  9361                           	callstack 0
  9362  0017F2                     _EscriuPrimeraOrdre:
  9363                           	callstack 27
  9364                           
  9365                           ;incstack = 0
  9366                           ;EscriuPrimeraOrdre@ordre stored from wreg
  9367  0017F2  6E5F               	movwf	EscriuPrimeraOrdre@ordre^0,c
  9368                           
  9369                           ;LcTLCD.c: 280:  (TRISDbits.TRISD0 = TRISDbits.TRISD1 = TRISDbits.TRISD2 = TRISDbits.TRI
      +                          SD3 = 0); (LATDbits.LATD4 = 0); (LATDbits.LATD5 = 0);
  9370  0017F4  9695               	bcf	149,3,c	;volatile
  9371                           
  9372                           ;LcTLCD.c: 281:  (LATDbits.LATD6 = 1); (LATDbits.LATD6 = 1);
  9373  0017F6  D82F               	call	PL54	;call to abstracted procedure
  9374  0017F8  8C8C               	bsf	140,6,c	;volatile
  9375                           
  9376                           ;LcTLCD.c: 282:   (LATDbits.LATD3 = (ordre & 0x08 ? 1 : 0));
  9377  0017FA  A65F               	btfss	EscriuPrimeraOrdre@ordre^0,3,c
  9378  0017FC  D003               	goto	u450
  9379  0017FE  6A5E               	clrf	??_EscriuPrimeraOrdre^0,c
  9380  001800  2A5E               	incf	??_EscriuPrimeraOrdre^0,f,c
  9381  001802  D001               	goto	u468
  9382  001804                     u450:
  9383  001804  6A5E               	clrf	??_EscriuPrimeraOrdre^0,c
  9384  001806                     u468:
  9385  001806  465E               	rlncf	??_EscriuPrimeraOrdre^0,f,c
  9386  001808  D82D               	call	PL68	;call to abstracted procedure
  9387  00180A  0BF7               	andlw	-9
  9388  00180C  185E               	xorwf	??_EscriuPrimeraOrdre^0,w,c
  9389  00180E  6E8C               	movwf	140,c	;volatile
  9390                           
  9391                           ;LcTLCD.c: 283:   (LATDbits.LATD2 = (ordre & 0x04 ? 1 : 0));
  9392  001810  A45F               	btfss	EscriuPrimeraOrdre@ordre^0,2,c
  9393  001812  D003               	goto	u470
  9394  001814  6A5E               	clrf	??_EscriuPrimeraOrdre^0,c
  9395  001816  2A5E               	incf	??_EscriuPrimeraOrdre^0,f,c
  9396  001818  D001               	goto	u488
  9397  00181A                     u470:
  9398  00181A  6A5E               	clrf	??_EscriuPrimeraOrdre^0,c
  9399  00181C                     u488:
  9400  00181C  D823               	call	PL68	;call to abstracted procedure
  9401  00181E  0BFB               	andlw	-5
  9402  001820  185E               	xorwf	??_EscriuPrimeraOrdre^0,w,c
  9403  001822  6E8C               	movwf	140,c	;volatile
  9404                           
  9405                           ;LcTLCD.c: 284:   (LATDbits.LATD1 = (ordre & 0x02 ? 1 : 0));
  9406  001824  A25F               	btfss	EscriuPrimeraOrdre@ordre^0,1,c
  9407  001826  D003               	goto	u490
  9408  001828  6A5E               	clrf	??_EscriuPrimeraOrdre^0,c
  9409  00182A  2A5E               	incf	??_EscriuPrimeraOrdre^0,f,c
  9410  00182C  D001               	goto	u508
  9411  00182E                     u490:
  9412  00182E  6A5E               	clrf	??_EscriuPrimeraOrdre^0,c
  9413  001830                     u508:
  9414  001830  465E               	rlncf	??_EscriuPrimeraOrdre^0,f,c
  9415  001832  508C               	movf	140,w,c	;volatile
  9416  001834  185E               	xorwf	??_EscriuPrimeraOrdre^0,w,c
  9417  001836  0BFD               	andlw	-3
  9418  001838  185E               	xorwf	??_EscriuPrimeraOrdre^0,w,c
  9419  00183A  6E8C               	movwf	140,c	;volatile
  9420                           
  9421                           ;LcTLCD.c: 285:   (LATDbits.LATD0 = (ordre & 0x01 ? 1 : 0));
  9422  00183C  A05F               	btfss	EscriuPrimeraOrdre@ordre^0,0,c
  9423  00183E  D003               	goto	u510
  9424  001840  6A5E               	clrf	??_EscriuPrimeraOrdre^0,c
  9425  001842  2A5E               	incf	??_EscriuPrimeraOrdre^0,f,c
  9426  001844  D001               	goto	u528
  9427  001846                     u510:
  9428  001846  6A5E               	clrf	??_EscriuPrimeraOrdre^0,c
  9429  001848                     u528:
  9430  001848  508C               	movf	140,w,c	;volatile
  9431  00184A  185E               	xorwf	??_EscriuPrimeraOrdre^0,w,c
  9432  00184C  0BFE               	andlw	-2
  9433  00184E  185E               	xorwf	??_EscriuPrimeraOrdre^0,w,c
  9434  001850  6E8C               	movwf	140,c	;volatile
  9435                           
  9436                           ;LcTLCD.c: 286:  (LATDbits.LATD6 = 0);
  9437  001852  9C8C               	bcf	140,6,c	;volatile
  9438  001854  0012               	return		;funcret
  9439  001856                     __end_of_EscriuPrimeraOrdre:
  9440                           	callstack 0
  9441  001856                     PL54:
  9442                           	callstack 23
  9443  001856  9495               	bcf	149,2,c	;volatile
  9444  001858  9295               	bcf	149,1,c	;volatile
  9445  00185A  9095               	bcf	149,0,c	;volatile
  9446  00185C  988C               	bcf	140,4,c	;volatile
  9447  00185E  9A8C               	bcf	140,5,c	;volatile
  9448  001860  8C8C               	bsf	140,6,c	;volatile
  9449  001862  0012               	return	
  9450  001864                     __end_ofPL54:
  9451                           	callstack 0
  9452  001864                     PL68:
  9453                           	callstack 27
  9454  001864  465E               	rlncf	??_EscriuPrimeraOrdre^0,f,c
  9455  001866  465E               	rlncf	??_EscriuPrimeraOrdre^0,f,c
  9456  001868  508C               	movf	140,w,c	;volatile
  9457  00186A  185E               	xorwf	??_EscriuPrimeraOrdre^0,w,c
  9458  00186C  0012               	return	
  9459  00186E                     __end_ofPL68:
  9460                           	callstack 0
  9461                           
  9462 ;; *************** function _CantaIR *****************
  9463 ;; Defined at:
  9464 ;;		line 228 in file "LcTLCD.c"
  9465 ;; Parameters:    Size  Location     Type
  9466 ;;  IR              1    wreg     unsigned char 
  9467 ;; Auto vars:     Size  Location     Type
  9468 ;;  IR              1    7[COMRAM] unsigned char 
  9469 ;; Return value:  Size  Location     Type
  9470 ;;                  1    wreg      void 
  9471 ;; Registers used:
  9472 ;;		wreg, status,2, status,0, cstack
  9473 ;; Tracked objects:
  9474 ;;		On entry : 0/0
  9475 ;;		On exit  : 0/0
  9476 ;;		Unchanged: 0/0
  9477 ;; Data sizes:     COMRAM   BANK0   BANK1
  9478 ;;      Params:         0       0       0
  9479 ;;      Locals:         1       0       0
  9480 ;;      Temps:          0       0       0
  9481 ;;      Totals:         1       0       0
  9482 ;;Total ram usage:        1 bytes
  9483 ;; Hardware stack levels used: 1
  9484 ;; Hardware stack levels required when called: 3
  9485 ;; This function calls:
  9486 ;;		_CantaPartAlta
  9487 ;;		_CantaPartBaixa
  9488 ;; This function is called by:
  9489 ;;		_LcInit
  9490 ;;		_LcClear
  9491 ;;		_LcCursorOn
  9492 ;;		_LcCursorOff
  9493 ;;		_LcGotoXY
  9494 ;;		_menuMotor
  9495 ;; This function uses a non-reentrant model
  9496 ;;
  9497                           
  9498                           	psect	text76
  9499  001F76                     __ptext76:
  9500                           	callstack 0
  9501  001F76                     _CantaIR:
  9502                           	callstack 23
  9503                           
  9504                           ;incstack = 0
  9505                           ;CantaIR@IR stored from wreg
  9506  001F76  6E60               	movwf	CantaIR@IR^0,c
  9507                           
  9508                           ;LcTLCD.c: 229:  (TRISDbits.TRISD0 = TRISDbits.TRISD1 = TRISDbits.TRISD2 = TRISDbits.TRI
      +                          SD3 = 0);
  9509  001F78  9695               	bcf	149,3,c	;volatile
  9510                           
  9511                           ;LcTLCD.c: 230:  (LATDbits.LATD4 = 0);
  9512                           
  9513                           ;LcTLCD.c: 231:  (LATDbits.LATD5 = 0);
  9514                           
  9515                           ;LcTLCD.c: 232:  (LATDbits.LATD6 = 1);
  9516  001F7A  EC2B  F00C         	call	PL54	;call to abstracted procedure
  9517                           
  9518                           ;LcTLCD.c: 233:  CantaPartAlta(IR);
  9519  001F7E  5060               	movf	CantaIR@IR^0,w,c
  9520  001F80  EC0C  F00D         	call	_CantaPartAlta
  9521                           
  9522                           ;LcTLCD.c: 234:  (LATDbits.LATD6 = 1);
  9523                           
  9524                           ;LcTLCD.c: 235:  (LATDbits.LATD6 = 0);
  9525                           
  9526                           ;LcTLCD.c: 236:  (LATDbits.LATD6 = 0);
  9527                           
  9528                           ;LcTLCD.c: 237:  (LATDbits.LATD6 = 1);
  9529  001F84  EC39  F00E         	call	PL74	;call to abstracted procedure
  9530                           
  9531                           ;LcTLCD.c: 238:  CantaPartBaixa(IR);
  9532  001F88  5060               	movf	CantaIR@IR^0,w,c
  9533  001F8A  ECD9  F00C         	call	_CantaPartBaixa
  9534                           
  9535                           ;LcTLCD.c: 239:  (LATDbits.LATD6 = 1);
  9536                           
  9537                           ;LcTLCD.c: 240:  (LATDbits.LATD6 = 0);
  9538                           
  9539                           ;LcTLCD.c: 241:  (TRISDbits.TRISD0 = TRISDbits.TRISD1 = TRISDbits.TRISD2 = TRISDbits.TRI
      +                          SD3 = 1);
  9540  001F8E  EF32  F00E         	goto	PL42	;call to abstracted procedure
  9541  001F92                     __end_of_CantaIR:
  9542                           	callstack 0
  9543                           
  9544 ;; *************** function _CantaPartBaixa *****************
  9545 ;; Defined at:
  9546 ;;		line 221 in file "LcTLCD.c"
  9547 ;; Parameters:    Size  Location     Type
  9548 ;;  c               1    wreg     unsigned char 
  9549 ;; Auto vars:     Size  Location     Type
  9550 ;;  c               1    6[COMRAM] unsigned char 
  9551 ;; Return value:  Size  Location     Type
  9552 ;;                  1    wreg      void 
  9553 ;; Registers used:
  9554 ;;		wreg, status,2, status,0
  9555 ;; Tracked objects:
  9556 ;;		On entry : 0/0
  9557 ;;		On exit  : 0/0
  9558 ;;		Unchanged: 0/0
  9559 ;; Data sizes:     COMRAM   BANK0   BANK1
  9560 ;;      Params:         0       0       0
  9561 ;;      Locals:         1       0       0
  9562 ;;      Temps:          1       0       0
  9563 ;;      Totals:         2       0       0
  9564 ;;Total ram usage:        2 bytes
  9565 ;; Hardware stack levels used: 1
  9566 ;; Hardware stack levels required when called: 2
  9567 ;; This function calls:
  9568 ;;		Nothing
  9569 ;; This function is called by:
  9570 ;;		_CantaIR
  9571 ;;		_CantaData
  9572 ;; This function uses a non-reentrant model
  9573 ;;
  9574                           
  9575                           	psect	text77
  9576  0019B2                     __ptext77:
  9577                           	callstack 0
  9578  0019B2                     _CantaPartBaixa:
  9579                           	callstack 23
  9580                           
  9581                           ;incstack = 0
  9582                           ;CantaPartBaixa@c stored from wreg
  9583  0019B2  6E5F               	movwf	CantaPartBaixa@c^0,c
  9584                           
  9585                           ;LcTLCD.c: 222:   (LATDbits.LATD3 = (c & 0x08 ? 1 : 0));
  9586  0019B4  A65F               	btfss	CantaPartBaixa@c^0,3,c
  9587  0019B6  D003               	goto	u5160
  9588  0019B8  6A5E               	clrf	??_CantaPartBaixa^0,c
  9589  0019BA  2A5E               	incf	??_CantaPartBaixa^0,f,c
  9590  0019BC  D001               	goto	u5178
  9591  0019BE                     u5160:
  9592  0019BE  6A5E               	clrf	??_CantaPartBaixa^0,c
  9593  0019C0                     u5178:
  9594  0019C0  465E               	rlncf	??_CantaPartBaixa^0,f,c
  9595  0019C2  D825               	call	PL76	;call to abstracted procedure
  9596  0019C4  0BF7               	andlw	-9
  9597  0019C6  185E               	xorwf	??_CantaPartBaixa^0,w,c
  9598  0019C8  6E8C               	movwf	140,c	;volatile
  9599                           
  9600                           ;LcTLCD.c: 223:   (LATDbits.LATD2 = (c & 0x04 ? 1 : 0));
  9601  0019CA  A45F               	btfss	CantaPartBaixa@c^0,2,c
  9602  0019CC  D003               	goto	u5180
  9603  0019CE  6A5E               	clrf	??_CantaPartBaixa^0,c
  9604  0019D0  2A5E               	incf	??_CantaPartBaixa^0,f,c
  9605  0019D2  D001               	goto	u5198
  9606  0019D4                     u5180:
  9607  0019D4  6A5E               	clrf	??_CantaPartBaixa^0,c
  9608  0019D6                     u5198:
  9609  0019D6  D81B               	call	PL76	;call to abstracted procedure
  9610  0019D8  0BFB               	andlw	-5
  9611  0019DA  185E               	xorwf	??_CantaPartBaixa^0,w,c
  9612  0019DC  6E8C               	movwf	140,c	;volatile
  9613                           
  9614                           ;LcTLCD.c: 224:   (LATDbits.LATD1 = (c & 0x02 ? 1 : 0));
  9615  0019DE  A25F               	btfss	CantaPartBaixa@c^0,1,c
  9616  0019E0  D003               	goto	u5200
  9617  0019E2  6A5E               	clrf	??_CantaPartBaixa^0,c
  9618  0019E4  2A5E               	incf	??_CantaPartBaixa^0,f,c
  9619  0019E6  D001               	goto	u5218
  9620  0019E8                     u5200:
  9621  0019E8  6A5E               	clrf	??_CantaPartBaixa^0,c
  9622  0019EA                     u5218:
  9623  0019EA  465E               	rlncf	??_CantaPartBaixa^0,f,c
  9624  0019EC  508C               	movf	140,w,c	;volatile
  9625  0019EE  185E               	xorwf	??_CantaPartBaixa^0,w,c
  9626  0019F0  0BFD               	andlw	-3
  9627  0019F2  185E               	xorwf	??_CantaPartBaixa^0,w,c
  9628  0019F4  6E8C               	movwf	140,c	;volatile
  9629                           
  9630                           ;LcTLCD.c: 225:   (LATDbits.LATD0 = (c & 0x01 ? 1 : 0));
  9631  0019F6  A05F               	btfss	CantaPartBaixa@c^0,0,c
  9632  0019F8  D003               	goto	u5220
  9633  0019FA  6A5E               	clrf	??_CantaPartBaixa^0,c
  9634  0019FC  2A5E               	incf	??_CantaPartBaixa^0,f,c
  9635  0019FE  D001               	goto	u5238
  9636  001A00                     u5220:
  9637  001A00  6A5E               	clrf	??_CantaPartBaixa^0,c
  9638  001A02                     u5238:
  9639  001A02  508C               	movf	140,w,c	;volatile
  9640  001A04  185E               	xorwf	??_CantaPartBaixa^0,w,c
  9641  001A06  0BFE               	andlw	-2
  9642  001A08  185E               	xorwf	??_CantaPartBaixa^0,w,c
  9643  001A0A  6E8C               	movwf	140,c	;volatile
  9644  001A0C  0012               	return		;funcret
  9645  001A0E                     __end_of_CantaPartBaixa:
  9646                           	callstack 0
  9647  001A0E                     PL76:
  9648                           	callstack 23
  9649  001A0E  465E               	rlncf	??_CantaPartBaixa^0,f,c
  9650  001A10  465E               	rlncf	??_CantaPartBaixa^0,f,c
  9651  001A12  508C               	movf	140,w,c	;volatile
  9652  001A14  185E               	xorwf	??_CantaPartBaixa^0,w,c
  9653  001A16  0012               	return	
  9654  001A18                     __end_ofPL76:
  9655                           	callstack 0
  9656                           
  9657 ;; *************** function _CantaPartAlta *****************
  9658 ;; Defined at:
  9659 ;;		line 214 in file "LcTLCD.c"
  9660 ;; Parameters:    Size  Location     Type
  9661 ;;  c               1    wreg     unsigned char 
  9662 ;; Auto vars:     Size  Location     Type
  9663 ;;  c               1    6[COMRAM] unsigned char 
  9664 ;; Return value:  Size  Location     Type
  9665 ;;                  1    wreg      void 
  9666 ;; Registers used:
  9667 ;;		wreg, status,2, status,0
  9668 ;; Tracked objects:
  9669 ;;		On entry : 0/0
  9670 ;;		On exit  : 0/0
  9671 ;;		Unchanged: 0/0
  9672 ;; Data sizes:     COMRAM   BANK0   BANK1
  9673 ;;      Params:         0       0       0
  9674 ;;      Locals:         1       0       0
  9675 ;;      Temps:          1       0       0
  9676 ;;      Totals:         2       0       0
  9677 ;;Total ram usage:        2 bytes
  9678 ;; Hardware stack levels used: 1
  9679 ;; Hardware stack levels required when called: 2
  9680 ;; This function calls:
  9681 ;;		Nothing
  9682 ;; This function is called by:
  9683 ;;		_CantaIR
  9684 ;;		_CantaData
  9685 ;; This function uses a non-reentrant model
  9686 ;;
  9687                           
  9688                           	psect	text78
  9689  001A18                     __ptext78:
  9690                           	callstack 0
  9691  001A18                     _CantaPartAlta:
  9692                           	callstack 23
  9693                           
  9694                           ;incstack = 0
  9695                           ;CantaPartAlta@c stored from wreg
  9696  001A18  6E5F               	movwf	CantaPartAlta@c^0,c
  9697                           
  9698                           ;LcTLCD.c: 215:   (LATDbits.LATD3 = (c & 0x80 ? 1 : 0));
  9699  001A1A  AE5F               	btfss	CantaPartAlta@c^0,7,c
  9700  001A1C  D003               	goto	u5080
  9701  001A1E  6A5E               	clrf	??_CantaPartAlta^0,c
  9702  001A20  2A5E               	incf	??_CantaPartAlta^0,f,c
  9703  001A22  D001               	goto	u5098
  9704  001A24                     u5080:
  9705  001A24  6A5E               	clrf	??_CantaPartAlta^0,c
  9706  001A26                     u5098:
  9707  001A26  465E               	rlncf	??_CantaPartAlta^0,f,c
  9708  001A28  D825               	call	PL70	;call to abstracted procedure
  9709  001A2A  0BF7               	andlw	-9
  9710  001A2C  185E               	xorwf	??_CantaPartAlta^0,w,c
  9711  001A2E  6E8C               	movwf	140,c	;volatile
  9712                           
  9713                           ;LcTLCD.c: 216:   (LATDbits.LATD2 = (c & 0x40 ? 1 : 0));
  9714  001A30  AC5F               	btfss	CantaPartAlta@c^0,6,c
  9715  001A32  D003               	goto	u5100
  9716  001A34  6A5E               	clrf	??_CantaPartAlta^0,c
  9717  001A36  2A5E               	incf	??_CantaPartAlta^0,f,c
  9718  001A38  D001               	goto	u5118
  9719  001A3A                     u5100:
  9720  001A3A  6A5E               	clrf	??_CantaPartAlta^0,c
  9721  001A3C                     u5118:
  9722  001A3C  D81B               	call	PL70	;call to abstracted procedure
  9723  001A3E  0BFB               	andlw	-5
  9724  001A40  185E               	xorwf	??_CantaPartAlta^0,w,c
  9725  001A42  6E8C               	movwf	140,c	;volatile
  9726                           
  9727                           ;LcTLCD.c: 217:   (LATDbits.LATD1 = (c & 0x20 ? 1 : 0));
  9728  001A44  AA5F               	btfss	CantaPartAlta@c^0,5,c
  9729  001A46  D003               	goto	u5120
  9730  001A48  6A5E               	clrf	??_CantaPartAlta^0,c
  9731  001A4A  2A5E               	incf	??_CantaPartAlta^0,f,c
  9732  001A4C  D001               	goto	u5138
  9733  001A4E                     u5120:
  9734  001A4E  6A5E               	clrf	??_CantaPartAlta^0,c
  9735  001A50                     u5138:
  9736  001A50  465E               	rlncf	??_CantaPartAlta^0,f,c
  9737  001A52  508C               	movf	140,w,c	;volatile
  9738  001A54  185E               	xorwf	??_CantaPartAlta^0,w,c
  9739  001A56  0BFD               	andlw	-3
  9740  001A58  185E               	xorwf	??_CantaPartAlta^0,w,c
  9741  001A5A  6E8C               	movwf	140,c	;volatile
  9742                           
  9743                           ;LcTLCD.c: 218:   (LATDbits.LATD0 = (c & 0x10 ? 1 : 0));
  9744  001A5C  A85F               	btfss	CantaPartAlta@c^0,4,c
  9745  001A5E  D003               	goto	u5140
  9746  001A60  6A5E               	clrf	??_CantaPartAlta^0,c
  9747  001A62  2A5E               	incf	??_CantaPartAlta^0,f,c
  9748  001A64  D001               	goto	u5158
  9749  001A66                     u5140:
  9750  001A66  6A5E               	clrf	??_CantaPartAlta^0,c
  9751  001A68                     u5158:
  9752  001A68  508C               	movf	140,w,c	;volatile
  9753  001A6A  185E               	xorwf	??_CantaPartAlta^0,w,c
  9754  001A6C  0BFE               	andlw	-2
  9755  001A6E  185E               	xorwf	??_CantaPartAlta^0,w,c
  9756  001A70  6E8C               	movwf	140,c	;volatile
  9757  001A72  0012               	return		;funcret
  9758  001A74                     __end_of_CantaPartAlta:
  9759                           	callstack 0
  9760  001A74                     PL70:
  9761                           	callstack 23
  9762  001A74  465E               	rlncf	??_CantaPartAlta^0,f,c
  9763  001A76  465E               	rlncf	??_CantaPartAlta^0,f,c
  9764  001A78  508C               	movf	140,w,c	;volatile
  9765  001A7A  185E               	xorwf	??_CantaPartAlta^0,w,c
  9766  001A7C  0012               	return	
  9767  001A7E                     __end_ofPL70:
  9768                           	callstack 0
  9769                           
  9770 ;; *************** function _KeypadMotor *****************
  9771 ;; Defined at:
  9772 ;;		line 46 in file "keypad.c"
  9773 ;; Parameters:    Size  Location     Type
  9774 ;;		None
  9775 ;; Auto vars:     Size  Location     Type
  9776 ;;		None
  9777 ;; Return value:  Size  Location     Type
  9778 ;;                  1    wreg      void 
  9779 ;; Registers used:
  9780 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9781 ;; Tracked objects:
  9782 ;;		On entry : 0/0
  9783 ;;		On exit  : 0/0
  9784 ;;		Unchanged: 0/0
  9785 ;; Data sizes:     COMRAM   BANK0   BANK1
  9786 ;;      Params:         0       0       0
  9787 ;;      Locals:         0       0       0
  9788 ;;      Temps:          2       0       0
  9789 ;;      Totals:         2       0       0
  9790 ;;Total ram usage:        2 bytes
  9791 ;; Hardware stack levels used: 1
  9792 ;; Hardware stack levels required when called: 3
  9793 ;; This function calls:
  9794 ;;		_TiGetTics
  9795 ;;		_TiResetTics
  9796 ;; This function is called by:
  9797 ;;		_main
  9798 ;; This function uses a non-reentrant model
  9799 ;;
  9800                           
  9801                           	psect	text79
  9802  0011FA                     __ptext79:
  9803                           	callstack 0
  9804  0011FA                     _KeypadMotor:
  9805                           	callstack 27
  9806                           
  9807                           ;keypad.c: 48:     switch (state){
  9808                           
  9809                           ;incstack = 0
  9810  0011FA  D070               	goto	l6321
  9811  0011FC                     l148:
  9812                           
  9813                           ;keypad.c: 51:             if (!!(PORTBbits.RB0 && PORTBbits.RB1 && PORTBbits.RB2)){
  9814  0011FC  B081               	btfsc	129,0,c	;volatile
  9815  0011FE  A281               	btfss	129,1,c	;volatile
  9816  001200  D00A               	goto	l6249
  9817  001202  A481               	btfss	129,2,c	;volatile
  9818  001204  D008               	goto	l6249
  9819                           
  9820                           ;keypad.c: 52:                 LATBbits.LATB3=0;
  9821  001206  968A               	bcf	138,3,c	;volatile
  9822                           
  9823                           ;keypad.c: 53:                 LATBbits.LATB4=1;
  9824  001208  888A               	bsf	138,4,c	;volatile
  9825                           
  9826                           ;keypad.c: 54:                 LATBbits.LATB5=1;
  9827  00120A  8A8A               	bsf	138,5,c	;volatile
  9828                           
  9829                           ;keypad.c: 55:                 LATBbits.LATB6=1;
  9830  00120C  8C8A               	bsf	138,6,c	;volatile
  9831                           
  9832                           ;keypad.c: 56:                 state=1;
  9833  00120E  0E01               	movlw	1
  9834  001210  6E3D               	movwf	_state^0,c
  9835                           
  9836                           ;keypad.c: 57:                 row=0;
  9837  001212  6A45               	clrf	_row^0,c
  9838                           
  9839                           ;keypad.c: 58:             }else{
  9840  001214  0012               	return	
  9841  001216                     l6249:
  9842                           
  9843                           ;keypad.c: 59:                 state=4;
  9844  001216  0E04               	movlw	4
  9845  001218  6E3D               	movwf	_state^0,c
  9846  00121A  0C04               	retlw	4
  9847  00121C                     l152:
  9848                           
  9849                           ;keypad.c: 63:            if (!!(PORTBbits.RB0 && PORTBbits.RB1 && PORTBbits.RB2)){
  9850  00121C  B081               	btfsc	129,0,c	;volatile
  9851  00121E  A281               	btfss	129,1,c	;volatile
  9852  001220  D7FA               	goto	l6249
  9853  001222  A481               	btfss	129,2,c	;volatile
  9854  001224  D7F8               	goto	l6249
  9855                           
  9856                           ;keypad.c: 64:                 LATBbits.LATB3=1;
  9857  001226  868A               	bsf	138,3,c	;volatile
  9858                           
  9859                           ;keypad.c: 65:                 LATBbits.LATB4=0;
  9860  001228  988A               	bcf	138,4,c	;volatile
  9861                           
  9862                           ;keypad.c: 66:                 LATBbits.LATB5=1;
  9863  00122A  8A8A               	bsf	138,5,c	;volatile
  9864                           
  9865                           ;keypad.c: 67:                 LATBbits.LATB6=1;
  9866  00122C  8C8A               	bsf	138,6,c	;volatile
  9867                           
  9868                           ;keypad.c: 68:                 state=2;
  9869  00122E  0E02               	movlw	2
  9870  001230  6E3D               	movwf	_state^0,c
  9871                           
  9872                           ;keypad.c: 69:                 row=1;
  9873  001232  0E01               	movlw	1
  9874  001234  6E45               	movwf	_row^0,c
  9875                           
  9876                           ;keypad.c: 71:             }else{
  9877  001236  0C01               	retlw	1
  9878  001238                     l155:
  9879                           
  9880                           ;keypad.c: 76:             if (!!(PORTBbits.RB0 && PORTBbits.RB1 && PORTBbits.RB2)){
  9881  001238  B081               	btfsc	129,0,c	;volatile
  9882  00123A  A281               	btfss	129,1,c	;volatile
  9883  00123C  D7EC               	goto	l6249
  9884  00123E  A481               	btfss	129,2,c	;volatile
  9885  001240  D7EA               	goto	l6249
  9886                           
  9887                           ;keypad.c: 77:                 LATBbits.LATB3=1;
  9888  001242  868A               	bsf	138,3,c	;volatile
  9889                           
  9890                           ;keypad.c: 78:                 LATBbits.LATB4=1;
  9891  001244  888A               	bsf	138,4,c	;volatile
  9892                           
  9893                           ;keypad.c: 79:                 LATBbits.LATB5=0;
  9894  001246  9A8A               	bcf	138,5,c	;volatile
  9895                           
  9896                           ;keypad.c: 80:                 LATBbits.LATB6=1;
  9897  001248  8C8A               	bsf	138,6,c	;volatile
  9898                           
  9899                           ;keypad.c: 81:                 state=3;
  9900  00124A  0E03               	movlw	3
  9901  00124C  6E3D               	movwf	_state^0,c
  9902                           
  9903                           ;keypad.c: 82:                 row=2;
  9904  00124E  0E02               	movlw	2
  9905  001250  6E45               	movwf	_row^0,c
  9906                           
  9907                           ;keypad.c: 83:             }else{
  9908  001252  0C02               	retlw	2
  9909  001254                     l158:
  9910                           
  9911                           ;keypad.c: 88:             if (!!(PORTBbits.RB0 && PORTBbits.RB1 && PORTBbits.RB2)){
  9912  001254  B081               	btfsc	129,0,c	;volatile
  9913  001256  A281               	btfss	129,1,c	;volatile
  9914  001258  D7DE               	goto	l6249
  9915  00125A  A481               	btfss	129,2,c	;volatile
  9916  00125C  D7DC               	goto	l6249
  9917                           
  9918                           ;keypad.c: 89:                 LATBbits.LATB3=1;
  9919  00125E  868A               	bsf	138,3,c	;volatile
  9920                           
  9921                           ;keypad.c: 90:                 LATBbits.LATB4=1;
  9922  001260  888A               	bsf	138,4,c	;volatile
  9923                           
  9924                           ;keypad.c: 91:                 LATBbits.LATB5=1;
  9925  001262  8A8A               	bsf	138,5,c	;volatile
  9926                           
  9927                           ;keypad.c: 92:                 LATBbits.LATB6=0;
  9928  001264  9C8A               	bcf	138,6,c	;volatile
  9929                           
  9930                           ;keypad.c: 93:                 row=3;
  9931  001266  0E03               	movlw	3
  9932  001268  6E45               	movwf	_row^0,c
  9933  00126A                     l6279:
  9934                           
  9935                           ;keypad.c: 94:                 state=0;
  9936  00126A  6A3D               	clrf	_state^0,c
  9937                           
  9938                           ;keypad.c: 95:             }else{
  9939  00126C  0012               	return	
  9940  00126E                     l6283:
  9941                           
  9942                           ;keypad.c: 100:             state=5;
  9943  00126E  0E05               	movlw	5
  9944  001270  6E3D               	movwf	_state^0,c
  9945                           
  9946                           ;keypad.c: 101:             TiResetTics(timerBounces);
  9947  001272  5044               	movf	_timerBounces^0,w,c
  9948  001274  EFAB  F00F         	goto	_TiResetTics
  9949  001278                     l6287:
  9950                           
  9951                           ;keypad.c: 104:             if (TiGetTics(timerBounces) >= 25){
  9952  001278  5044               	movf	_timerBounces^0,w,c
  9953  00127A  EC22  F00F         	call	_TiGetTics
  9954  00127E  BE5F               	btfsc	(?_TiGetTics+1)^0,7,c
  9955  001280  0012               	return	
  9956  001282  505F               	movf	(?_TiGetTics+1)^0,w,c
  9957  001284  E104               	bnz	u5740
  9958  001286  0E19               	movlw	25
  9959  001288  5C5E               	subwf	?_TiGetTics^0,w,c
  9960  00128A  A0D8               	btfss	status,0,c
  9961  00128C  0012               	return	
  9962  00128E                     u5740:
  9963                           
  9964                           ;keypad.c: 105:                 if (!!(PORTBbits.RB0 && PORTBbits.RB1 && PORTBbits.RB2))
      +                          {
  9965  00128E  B081               	btfsc	129,0,c	;volatile
  9966  001290  A281               	btfss	129,1,c	;volatile
  9967  001292  D002               	goto	l6297
  9968  001294  B481               	btfsc	129,2,c	;volatile
  9969  001296  D7E9               	goto	l6279
  9970  001298                     l6297:
  9971                           
  9972                           ;keypad.c: 108:                     pressed = 1;
  9973  001298  0E01               	movlw	1
  9974  00129A  6E40               	movwf	_pressed^0,c
  9975                           
  9976                           ;keypad.c: 109:                     state = 6;
  9977  00129C  D036               	goto	PL84	;call to abstracted procedure
  9978  00129E                     l166:
  9979                           
  9980                           ;keypad.c: 114:             if (!!(PORTBbits.RB0 && PORTBbits.RB1 && PORTBbits.RB2)){
  9981  00129E  B081               	btfsc	129,0,c	;volatile
  9982  0012A0  A281               	btfss	129,1,c	;volatile
  9983  0012A2  0012               	return	
  9984  0012A4  A481               	btfss	129,2,c	;volatile
  9985  0012A6  0012               	return	
  9986                           
  9987                           ;keypad.c: 115:                 TiResetTics(timerBounces);
  9988  0012A8  5044               	movf	_timerBounces^0,w,c
  9989  0012AA  ECAB  F00F         	call	_TiResetTics
  9990                           
  9991                           ;keypad.c: 116:                 state = 7;
  9992  0012AE  0E07               	movlw	7
  9993  0012B0  6E3D               	movwf	_state^0,c
  9994  0012B2  0C07               	retlw	7
  9995  0012B4                     l6307:
  9996                           
  9997                           ;keypad.c: 120:             if (TiGetTics(timerBounces) >= 25){
  9998  0012B4  5044               	movf	_timerBounces^0,w,c
  9999  0012B6  EC22  F00F         	call	_TiGetTics
 10000  0012BA  BE5F               	btfsc	(?_TiGetTics+1)^0,7,c
 10001  0012BC  0012               	return	
 10002  0012BE  505F               	movf	(?_TiGetTics+1)^0,w,c
 10003  0012C0  E104               	bnz	u5810
 10004  0012C2  0E19               	movlw	25
 10005  0012C4  5C5E               	subwf	?_TiGetTics^0,w,c
 10006  0012C6  A0D8               	btfss	status,0,c
 10007  0012C8  0012               	return	
 10008  0012CA                     u5810:
 10009                           
 10010                           ;keypad.c: 121:                 if (!!(PORTBbits.RB0 && PORTBbits.RB1 && PORTBbits.RB2))
      +                          {
 10011  0012CA  B081               	btfsc	129,0,c	;volatile
 10012  0012CC  A281               	btfss	129,1,c	;volatile
 10013  0012CE  D01D               	goto	PL84
 10014  0012D0  A481               	btfss	129,2,c	;volatile
 10015  0012D2  D01B               	goto	PL84
 10016                           
 10017                           ;keypad.c: 122:                     pressed = 0;
 10018  0012D4  6A40               	clrf	_pressed^0,c
 10019                           
 10020                           ;keypad.c: 123:                     state = 0;
 10021  0012D6  6A3D               	clrf	_state^0,c
 10022                           
 10023                           ;keypad.c: 124:                 } else {
 10024  0012D8  0012               	return	
 10025  0012DA                     l6317:
 10026                           
 10027                           ;keypad.c: 125:                     state = 6;
 10028  0012DA  D017               	goto	PL84	;call to abstracted procedure
 10029  0012DC                     l6321:
 10030  0012DC  503D               	movf	_state^0,w,c
 10031  0012DE  6E65               	movwf	??_KeypadMotor^0,c
 10032  0012E0  6A66               	clrf	(??_KeypadMotor+1)^0,c
 10033                           
 10034                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 10035                           ; Switch size 1, requested type "space"
 10036                           ; Number of cases is 1, Range of values is 0 to 0
 10037                           ; switch strategies available:
 10038                           ; Name         Instructions Cycles
 10039                           ; simple_byte            4     3 (average)
 10040                           ;	Chosen strategy is simple_byte
 10041  0012E2  5066               	movf	(??_KeypadMotor+1)^0,w,c
 10042  0012E4  A4D8               	btfss	status,2,c
 10043  0012E6  0012               	return	
 10044                           
 10045                           ; Switch size 1, requested type "space"
 10046                           ; Number of cases is 8, Range of values is 0 to 7
 10047                           ; switch strategies available:
 10048                           ; Name         Instructions Cycles
 10049                           ; simple_byte           25    13 (average)
 10050                           ;	Chosen strategy is simple_byte
 10051  0012E8  5065               	movf	??_KeypadMotor^0,w,c
 10052  0012EA  E088               	bz	l148
 10053  0012EC  0A01               	xorlw	1	; case 1
 10054  0012EE  E096               	bz	l152
 10055  0012F0  0A03               	xorlw	3	; case 2
 10056  0012F2  E0A2               	bz	l155
 10057  0012F4  0A01               	xorlw	1	; case 3
 10058  0012F6  E0AE               	bz	l158
 10059  0012F8  0A07               	xorlw	7	; case 4
 10060  0012FA  E0B9               	bz	l6283
 10061  0012FC  0A01               	xorlw	1	; case 5
 10062  0012FE  E0BC               	bz	l6287
 10063  001300  0A03               	xorlw	3	; case 6
 10064  001302  E0CD               	bz	l166
 10065  001304  0A01               	xorlw	1	; case 7
 10066  001306  E0D6               	bz	l6307
 10067  001308  0012               	return		;funcret
 10068  00130A                     __end_of_KeypadMotor:
 10069                           	callstack 0
 10070  00130A                     PL84:
 10071                           	callstack 27
 10072  00130A  0E06               	movlw	6
 10073  00130C  6E3D               	movwf	_state^0,c
 10074  00130E  0C06               	retlw	6
 10075  001310                     __end_ofPL84:
 10076                           	callstack 0
 10077                           
 10078 ;; *************** function _TiResetTics *****************
 10079 ;; Defined at:
 10080 ;;		line 59 in file "TTimer.c"
 10081 ;; Parameters:    Size  Location     Type
 10082 ;;  Handle          1    wreg     unsigned char 
 10083 ;; Auto vars:     Size  Location     Type
 10084 ;;  Handle          1    5[COMRAM] unsigned char 
 10085 ;; Return value:  Size  Location     Type
 10086 ;;                  1    wreg      void 
 10087 ;; Registers used:
 10088 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 10089 ;; Tracked objects:
 10090 ;;		On entry : 0/0
 10091 ;;		On exit  : 0/0
 10092 ;;		Unchanged: 0/0
 10093 ;; Data sizes:     COMRAM   BANK0   BANK1
 10094 ;;      Params:         0       0       0
 10095 ;;      Locals:         1       0       0
 10096 ;;      Temps:          0       0       0
 10097 ;;      Totals:         1       0       0
 10098 ;;Total ram usage:        1 bytes
 10099 ;; Hardware stack levels used: 1
 10100 ;; Hardware stack levels required when called: 2
 10101 ;; This function calls:
 10102 ;;		Nothing
 10103 ;; This function is called by:
 10104 ;;		_KeypadMotor
 10105 ;;		_SMSMotor
 10106 ;;		_KeSetMode
 10107 ;;		_Espera
 10108 ;;		_WaitForBusy
 10109 ;;		_audioMotor
 10110 ;;		_startSong
 10111 ;;		_menuMotor
 10112 ;;		_btMotor
 10113 ;;		_timeMotor
 10114 ;;		_startTimer
 10115 ;; This function uses a non-reentrant model
 10116 ;;
 10117                           
 10118                           	psect	text80
 10119  001F56                     __ptext80:
 10120                           	callstack 0
 10121  001F56                     _TiResetTics:
 10122                           	callstack 25
 10123                           
 10124                           ;incstack = 0
 10125                           ;TiResetTics@Handle stored from wreg
 10126  001F56  6E5E               	movwf	TiResetTics@Handle^0,c
 10127                           
 10128                           ;TTimer.c: 63:     s_Timers[Handle].h_initialTics=h_Tics;
 10129  001F58  505E               	movf	TiResetTics@Handle^0,w,c
 10130  001F5A  D805               	call	PL28	;call to abstracted procedure
 10131  001F5C  C00F  FFDE         	movff	_h_Tics,postinc2
 10132  001F60  C010  FFDD         	movff	_h_Tics+1,postdec2
 10133  001F64  0012               	return		;funcret
 10134  001F66                     __end_of_TiResetTics:
 10135                           	callstack 0
 10136  001F66                     PL28:
 10137                           	callstack 23
 10138  001F66  0D03               	mullw	3
 10139  001F68  0E90               	movlw	low _s_Timers
 10140  001F6A  24F3               	addwf	243,w,c
 10141  001F6C  6ED9               	movwf	fsr2l,c
 10142  001F6E  0E01               	movlw	high _s_Timers
 10143  001F70  20F4               	addwfc	prodh,w,c
 10144  001F72  6EDA               	movwf	fsr2h,c
 10145  001F74  0012               	return	
 10146  001F76                     __end_ofPL28:
 10147                           	callstack 0
 10148                           
 10149 ;; *************** function _TiGetTics *****************
 10150 ;; Defined at:
 10151 ;;		line 65 in file "TTimer.c"
 10152 ;; Parameters:    Size  Location     Type
 10153 ;;  Handle          1    wreg     unsigned char 
 10154 ;; Auto vars:     Size  Location     Type
 10155 ;;  Handle          1    9[COMRAM] unsigned char 
 10156 ;;  actual          2   10[COMRAM] volatile unsigned int 
 10157 ;; Return value:  Size  Location     Type
 10158 ;;                  2    5[COMRAM] int 
 10159 ;; Registers used:
 10160 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 10161 ;; Tracked objects:
 10162 ;;		On entry : 0/0
 10163 ;;		On exit  : 0/0
 10164 ;;		Unchanged: 0/0
 10165 ;; Data sizes:     COMRAM   BANK0   BANK1
 10166 ;;      Params:         2       0       0
 10167 ;;      Locals:         3       0       0
 10168 ;;      Temps:          2       0       0
 10169 ;;      Totals:         7       0       0
 10170 ;;Total ram usage:        7 bytes
 10171 ;; Hardware stack levels used: 1
 10172 ;; Hardware stack levels required when called: 2
 10173 ;; This function calls:
 10174 ;;		Nothing
 10175 ;; This function is called by:
 10176 ;;		_KeypadMotor
 10177 ;;		_SMSMotor
 10178 ;;		_Espera
 10179 ;;		_WaitForBusy
 10180 ;;		_audioMotor
 10181 ;;		_menuMotor
 10182 ;;		_btMotor
 10183 ;;		_timeMotor
 10184 ;; This function uses a non-reentrant model
 10185 ;;
 10186                           
 10187                           	psect	text81
 10188  001E44                     __ptext81:
 10189                           	callstack 0
 10190  001E44                     _TiGetTics:
 10191                           	callstack 24
 10192                           
 10193                           ;incstack = 0
 10194                           ;TiGetTics@Handle stored from wreg
 10195  001E44  6E62               	movwf	TiGetTics@Handle^0,c
 10196                           
 10197                           ;TTimer.c: 69:     volatile unsigned int actual;;TTimer.c: 70:     actual=h_Tics;
 10198  001E46  C00F  F063         	movff	_h_Tics,TiGetTics@actual	;volatile
 10199  001E4A  C010  F064         	movff	_h_Tics+1,TiGetTics@actual+1	;volatile
 10200                           
 10201                           ;TTimer.c: 71:     return (actual-(s_Timers[Handle].h_initialTics));
 10202  001E4E  5062               	movf	TiGetTics@Handle^0,w,c
 10203  001E50  ECB3  F00F         	call	PL28	;call to abstracted procedure
 10204  001E54  CFDE F060          	movff	postinc2,??_TiGetTics
 10205  001E58  CFDD F061          	movff	postdec2,??_TiGetTics+1
 10206  001E5C  5060               	movf	??_TiGetTics^0,w,c
 10207  001E5E  5C63               	subwf	TiGetTics@actual^0,w,c	;volatile
 10208  001E60  6E5E               	movwf	?_TiGetTics^0,c
 10209  001E62  5061               	movf	(??_TiGetTics+1)^0,w,c
 10210  001E64  5864               	subwfb	(TiGetTics@actual+1)^0,w,c	;volatile
 10211  001E66  6E5F               	movwf	(?_TiGetTics+1)^0,c
 10212  001E68  0012               	return		;funcret
 10213  001E6A                     __end_of_TiGetTics:
 10214                           	callstack 0
 10215                           
 10216 ;; *************** function _RSI_High *****************
 10217 ;; Defined at:
 10218 ;;		line 32 in file "main.c"
 10219 ;; Parameters:    Size  Location     Type
 10220 ;;		None
 10221 ;; Auto vars:     Size  Location     Type
 10222 ;;		None
 10223 ;; Return value:  Size  Location     Type
 10224 ;;                  1    wreg      void 
 10225 ;; Registers used:
 10226 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 10227 ;; Tracked objects:
 10228 ;;		On entry : 0/0
 10229 ;;		On exit  : 0/0
 10230 ;;		Unchanged: 0/0
 10231 ;; Data sizes:     COMRAM   BANK0   BANK1
 10232 ;;      Params:         0       0       0
 10233 ;;      Locals:         0       0       0
 10234 ;;      Temps:          4       0       0
 10235 ;;      Totals:         4       0       0
 10236 ;;Total ram usage:        4 bytes
 10237 ;; Hardware stack levels used: 1
 10238 ;; Hardware stack levels required when called: 1
 10239 ;; This function calls:
 10240 ;;		__TiRSITimer
 10241 ;; This function is called by:
 10242 ;;		Interrupt level 2
 10243 ;; This function uses a non-reentrant model
 10244 ;;
 10245                           
 10246                           	psect	intcode
 10247  000008                     __pintcode:
 10248                           	callstack 0
 10249  000008                     _RSI_High:
 10250                           	callstack 23
 10251                           
 10252                           ;incstack = 0
 10253  000008  827A               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 10254  00000A  CFD9 F05A          	movff	fsr2l,??_RSI_High
 10255  00000E  CFDA F05B          	movff	fsr2h,??_RSI_High+1
 10256  000012  CFF3 F05C          	movff	prodl,??_RSI_High+2
 10257  000016  CFF4 F05D          	movff	prodh,??_RSI_High+3
 10258  00001A  ECC2  F00D         	call	__TiRSITimer	;wreg free
 10259  00001E  C05D  FFF4         	movff	??_RSI_High+3,prodh
 10260  000022  C05C  FFF3         	movff	??_RSI_High+2,prodl
 10261  000026  C05B  FFDA         	movff	??_RSI_High+1,fsr2h
 10262  00002A  C05A  FFD9         	movff	??_RSI_High,fsr2l
 10263  00002E  927A               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 10264  000030  0011               	retfie		f
 10265  000032                     __end_of_RSI_High:
 10266                           	callstack 0
 10267                           
 10268 ;; *************** function __TiRSITimer *****************
 10269 ;; Defined at:
 10270 ;;		line 37 in file "TTimer.c"
 10271 ;; Parameters:    Size  Location     Type
 10272 ;;		None
 10273 ;; Auto vars:     Size  Location     Type
 10274 ;;		None
 10275 ;; Return value:  Size  Location     Type
 10276 ;;                  1    wreg      void 
 10277 ;; Registers used:
 10278 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 10279 ;; Tracked objects:
 10280 ;;		On entry : 0/0
 10281 ;;		On exit  : 0/0
 10282 ;;		Unchanged: 0/0
 10283 ;; Data sizes:     COMRAM   BANK0   BANK1
 10284 ;;      Params:         0       0       0
 10285 ;;      Locals:         0       0       0
 10286 ;;      Temps:          1       0       0
 10287 ;;      Totals:         1       0       0
 10288 ;;Total ram usage:        1 bytes
 10289 ;; Hardware stack levels used: 1
 10290 ;; This function calls:
 10291 ;;		Nothing
 10292 ;; This function is called by:
 10293 ;;		_RSI_High
 10294 ;; This function uses a non-reentrant model
 10295 ;;
 10296                           
 10297                           	psect	text83
 10298  001B84                     __ptext83:
 10299                           	callstack 0
 10300  001B84                     __TiRSITimer:
 10301                           	callstack 23
 10302                           
 10303                           ;TTimer.c: 43:     TMR0H = 0xDF;
 10304                           
 10305                           ;incstack = 0
 10306  001B84  0EDF               	movlw	223
 10307  001B86  6ED7               	movwf	215,c	;volatile
 10308                           
 10309                           ;TTimer.c: 44:     TMR0L = 0x73;
 10310  001B88  0E73               	movlw	115
 10311  001B8A  6ED6               	movwf	214,c	;volatile
 10312                           
 10313                           ;TTimer.c: 45:     INTCONbits.TMR0IF = 0;
 10314  001B8C  94F2               	bcf	242,2,c	;volatile
 10315                           
 10316                           ;TTimer.c: 46:     h_Tics++;
 10317  001B8E  4A0F               	infsnz	_h_Tics^0,f,c
 10318  001B90  2A10               	incf	(_h_Tics+1)^0,f,c
 10319                           
 10320                           ;TTimer.c: 48:     if (h_Tics>=30000) {
 10321  001B92  0E30               	movlw	48
 10322  001B94  5C0F               	subwf	_h_Tics^0,w,c
 10323  001B96  0E75               	movlw	117
 10324  001B98  5810               	subwfb	(_h_Tics+1)^0,w,c
 10325  001B9A  A0D8               	btfss	status,0,c
 10326  001B9C  0012               	return	
 10327                           
 10328                           ;TTimer.c: 50:         for (counter=0;counter<25;counter++){
 10329  001B9E  6A46               	clrf	_counter^0,c
 10330  001BA0                     i2l4359:
 10331  001BA0  0E18               	movlw	24
 10332  001BA2  6446               	cpfsgt	_counter^0,c
 10333  001BA4  D001               	goto	i2l4363
 10334  001BA6  D00D               	goto	i2l77
 10335  001BA8                     i2l4363:
 10336                           
 10337                           ;TTimer.c: 51:             if (s_Timers[counter].b_busy==1){
 10338  001BA8  EC9B  F00E         	call	PL14	;call to abstracted procedure
 10339  001BAC  04DE               	decf	postinc2,w,c
 10340  001BAE  E107               	bnz	i2l4367
 10341                           
 10342                           ;TTimer.c: 52:                 s_Timers[counter].h_initialTics -= h_Tics;
 10343  001BB0  5046               	movf	_counter^0,w,c
 10344  001BB2  ECB3  F00F         	call	PL28	;call to abstracted procedure
 10345  001BB6  500F               	movf	_h_Tics^0,w,c
 10346  001BB8  5EDE               	subwf	postinc2,f,c
 10347  001BBA  5010               	movf	(_h_Tics+1)^0,w,c
 10348  001BBC  5ADD               	subwfb	postdec2,f,c
 10349  001BBE                     i2l4367:
 10350                           
 10351                           ;TTimer.c: 54:         }
 10352  001BBE  2A46               	incf	_counter^0,f,c
 10353  001BC0  D7EF               	goto	i2l4359
 10354  001BC2                     i2l77:
 10355                           
 10356                           ;TTimer.c: 55:         h_Tics=0;
 10357  001BC2  6A0F               	clrf	_h_Tics^0,c
 10358  001BC4  6A10               	clrf	(_h_Tics+1)^0,c
 10359  001BC6  0012               	return		;funcret
 10360  001BC8                     __end_of__TiRSITimer:
 10361                           	callstack 0
 10362                           
 10363                           	psect	rparam
 10364  0000                     
 10365                           	psect	temp
 10366  00007A                     btemp:
 10367                           	callstack 0
 10368  00007A                     	ds	1
 10369  0000                     int$flags	set	btemp
 10370  0000                     wtemp8	set	btemp+1
 10371  0000                     ttemp5	set	btemp+1
 10372  0000                     ttemp6	set	btemp+4
 10373  0000                     ttemp7	set	btemp+8
 10374                           
 10375                           	psect	idloc
 10376                           
 10377                           ;Config register IDLOC0 @ 0x200000
 10378                           ;	unspecified, using default values
 10379  200000                     	org	2097152
 10380  200000  FF                 	db	255
 10381                           
 10382                           ;Config register IDLOC1 @ 0x200001
 10383                           ;	unspecified, using default values
 10384  200001                     	org	2097153
 10385  200001  FF                 	db	255
 10386                           
 10387                           ;Config register IDLOC2 @ 0x200002
 10388                           ;	unspecified, using default values
 10389  200002                     	org	2097154
 10390  200002  FF                 	db	255
 10391                           
 10392                           ;Config register IDLOC3 @ 0x200003
 10393                           ;	unspecified, using default values
 10394  200003                     	org	2097155
 10395  200003  FF                 	db	255
 10396                           
 10397                           ;Config register IDLOC4 @ 0x200004
 10398                           ;	unspecified, using default values
 10399  200004                     	org	2097156
 10400  200004  FF                 	db	255
 10401                           
 10402                           ;Config register IDLOC5 @ 0x200005
 10403                           ;	unspecified, using default values
 10404  200005                     	org	2097157
 10405  200005  FF                 	db	255
 10406                           
 10407                           ;Config register IDLOC6 @ 0x200006
 10408                           ;	unspecified, using default values
 10409  200006                     	org	2097158
 10410  200006  FF                 	db	255
 10411                           
 10412                           ;Config register IDLOC7 @ 0x200007
 10413                           ;	unspecified, using default values
 10414  200007                     	org	2097159
 10415  200007  FF                 	db	255
 10416                           
 10417                           	psect	config
 10418                           
 10419                           ; Padding undefined space
 10420  300000                     	org	3145728
 10421  300000  FF                 	db	255
 10422                           
 10423                           ;Config register CONFIG1H @ 0x300001
 10424                           ;	Oscillator
 10425                           ;	OSC = HSPLL, HS oscillator, PLL enabled (Clock Frequency = 4 x FOSC1)
 10426                           ;	Fail-Safe Clock Monitor Enable bit
 10427                           ;	FCMEN = 0x0, unprogrammed default
 10428                           ;	Internal/External Oscillator Switchover bit
 10429                           ;	IESO = 0x0, unprogrammed default
 10430  300001                     	org	3145729
 10431  300001  06                 	db	6
 10432                           
 10433                           ;Config register CONFIG2L @ 0x300002
 10434                           ;	Power-up Timer Enable bit
 10435                           ;	PWRT = OFF, PWRT disabled
 10436                           ;	Brown-out Reset Enable bits
 10437                           ;	BOR = OFF, Brown-out Reset disabled in hardware and software
 10438                           ;	Brown-out Reset Voltage bits
 10439                           ;	BORV = 0x3, unprogrammed default
 10440  300002                     	org	3145730
 10441  300002  19                 	db	25
 10442                           
 10443                           ;Config register CONFIG2H @ 0x300003
 10444                           ;	Watchdog Timer Enable bit
 10445                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
 10446                           ;	Watchdog Timer Postscale Select bits
 10447                           ;	WDTPS = 0xF, unprogrammed default
 10448  300003                     	org	3145731
 10449  300003  1E                 	db	30
 10450                           
 10451                           ; Padding undefined space
 10452  300004                     	org	3145732
 10453  300004  FF                 	db	255
 10454                           
 10455                           ;Config register CONFIG3H @ 0x300005
 10456                           ;	CCP2 MUX bit
 10457                           ;	CCP2MX = 0x1, unprogrammed default
 10458                           ;	PORTB A/D Enable bit
 10459                           ;	PBADEN = DIG, PORTB<4:0> pins are configured as digital I/O on Reset
 10460                           ;	Low-Power Timer1 Oscillator Enable bit
 10461                           ;	LPT1OSC = 0x0, unprogrammed default
 10462                           ;	MCLR Pin Enable bit
 10463                           ;	MCLRE = OFF, RE3 input pin enabled; MCLR disabled
 10464  300005                     	org	3145733
 10465  300005  01                 	db	1
 10466                           
 10467                           ;Config register CONFIG4L @ 0x300006
 10468                           ;	Stack Full/Underflow Reset Enable bit
 10469                           ;	STVREN = 0x1, unprogrammed default
 10470                           ;	Single-Supply ICSP Enable bit
 10471                           ;	LVP = OFF, Single-Supply ICSP disabled
 10472                           ;	Boot Block Size Select bits
 10473                           ;	BBSIZ = 0x0, unprogrammed default
 10474                           ;	Extended Instruction Set Enable bit
 10475                           ;	XINST = 0x0, unprogrammed default
 10476                           ;	Background Debugger Enable bit
 10477                           ;	DEBUG = OFF, Background debugger disabled, RB6 and RB7 configured as general purpose I
      +                          /O pins
 10478  300006                     	org	3145734
 10479  300006  81                 	db	129
 10480                           
 10481                           ; Padding undefined space
 10482  300007                     	org	3145735
 10483  300007  FF                 	db	255
 10484                           
 10485                           ;Config register CONFIG5L @ 0x300008
 10486                           ;	unspecified, using default values
 10487                           ;	Code Protection bit
 10488                           ;	CP0 = 0x1, unprogrammed default
 10489                           ;	Code Protection bit
 10490                           ;	CP1 = 0x1, unprogrammed default
 10491  300008                     	org	3145736
 10492  300008  03                 	db	3
 10493                           
 10494                           ;Config register CONFIG5H @ 0x300009
 10495                           ;	unspecified, using default values
 10496                           ;	Boot Block Code Protection bitProtect Boot
 10497                           ;	CPB = 0x1, unprogrammed default
 10498                           ;	Data EEPROM Code Protection bit
 10499                           ;	CPD = 0x1, unprogrammed default
 10500  300009                     	org	3145737
 10501  300009  C0                 	db	192
 10502                           
 10503                           ;Config register CONFIG6L @ 0x30000A
 10504                           ;	unspecified, using default values
 10505                           ;	Write Protection bit
 10506                           ;	WRT0 = 0x1, unprogrammed default
 10507                           ;	Write Protection bit
 10508                           ;	WRT1 = 0x1, unprogrammed default
 10509  30000A                     	org	3145738
 10510  30000A  03                 	db	3
 10511                           
 10512                           ;Config register CONFIG6H @ 0x30000B
 10513                           ;	unspecified, using default values
 10514                           ;	Configuration Register Write Protection bit
 10515                           ;	WRTC = 0x1, unprogrammed default
 10516                           ;	Boot Block Write Protection bit
 10517                           ;	WRTB = 0x1, unprogrammed default
 10518                           ;	Data EEPROM Write Protection bit
 10519                           ;	WRTD = 0x1, unprogrammed default
 10520  30000B                     	org	3145739
 10521  30000B  E0                 	db	224
 10522                           
 10523                           ;Config register CONFIG7L @ 0x30000C
 10524                           ;	unspecified, using default values
 10525                           ;	Table Read Protection bit
 10526                           ;	EBTR0 = 0x1, unprogrammed default
 10527                           ;	Table Read Protection bit
 10528                           ;	EBTR1 = 0x1, unprogrammed default
 10529  30000C                     	org	3145740
 10530  30000C  03                 	db	3
 10531                           
 10532                           ;Config register CONFIG7H @ 0x30000D
 10533                           ;	unspecified, using default values
 10534                           ;	Boot Block Table Read Protection bit
 10535                           ;	EBTRB = 0x1, unprogrammed default
 10536  30000D                     	org	3145741
 10537  30000D  40                 	db	64
 10538                           tosu	equ	0xFFF
 10539                           tosh	equ	0xFFE
 10540                           tosl	equ	0xFFD
 10541                           stkptr	equ	0xFFC
 10542                           pclatu	equ	0xFFB
 10543                           pclath	equ	0xFFA
 10544                           pcl	equ	0xFF9
 10545                           tblptru	equ	0xFF8
 10546                           tblptrh	equ	0xFF7
 10547                           tblptrl	equ	0xFF6
 10548                           tablat	equ	0xFF5
 10549                           prodh	equ	0xFF4
 10550                           prodl	equ	0xFF3
 10551                           indf0	equ	0xFEF
 10552                           postinc0	equ	0xFEE
 10553                           postdec0	equ	0xFED
 10554                           preinc0	equ	0xFEC
 10555                           plusw0	equ	0xFEB
 10556                           fsr0h	equ	0xFEA
 10557                           fsr0l	equ	0xFE9
 10558                           wreg	equ	0xFE8
 10559                           indf1	equ	0xFE7
 10560                           postinc1	equ	0xFE6
 10561                           postdec1	equ	0xFE5
 10562                           preinc1	equ	0xFE4
 10563                           plusw1	equ	0xFE3
 10564                           fsr1h	equ	0xFE2
 10565                           fsr1l	equ	0xFE1
 10566                           bsr	equ	0xFE0
 10567                           indf2	equ	0xFDF
 10568                           postinc2	equ	0xFDE
 10569                           postdec2	equ	0xFDD
 10570                           preinc2	equ	0xFDC
 10571                           plusw2	equ	0xFDB
 10572                           fsr2h	equ	0xFDA
 10573                           fsr2l	equ	0xFD9
 10574                           status	equ	0xFD8

Data Sizes:
    Strings     0
    Constant    206
    Data        125
    BSS         307
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     25     121
    BANK0           128      2     119
    BANK1           256      0     219

Pointer List with Targets:

    DaSaveUser@regUser	PTR struct . size(1) Largest target is 18
		 -> mUser(COMRAM[18]), 

    DaFindUser@logUser	PTR struct . size(1) Largest target is 18
		 -> mUser(COMRAM[18]), 

    mUser@EEPROM$F1764	PTR struct . size(2) Largest target is 18
		 -> NULL(NULL[0]), mUser(COMRAM[18]), 

    displayString@string	PTR unsigned char  size(1) Largest target is 22
		 -> sysTime(BANK0[14]), modifyTimeString(BANK0[13]), TIME(BANK0[16]), LOGREGSCREEN(BANK0[12]), 
		 -> LOGINMENU(BANK0[22]), 


Critical Paths under _main in COMRAM

    _main->_dataMotor
    _timeMotor->_sendChar
    _startSong->_TiResetTics
    _sendChar->_LcPutChar
    _menuMotor->_mainMenu
    _startTimer->_TiResetTics
    _mainMenu->_LcPutChar
    _displayTimeRemaining->_LcGotoXY
    _displaySysTime->_LcGotoXY
    _displayString->_LcPutChar
    _displayResults->_LcPutChar
    _displayLogOut->_LcPutChar
    _displayError->_LcPutChar
    _nextRow->_LcGotoXY
    _LcCursorOn->_WaitForBusy
    _LcCursorOff->_WaitForBusy
    _KeSetMode->_TiResetTics
    _KeGetCharValue->_getFullValue
    _DaSaveScore->_LcPutChar
    _LcClear->_Espera
    _DaFindUser->_LcGotoXY
    _joystickMotor->_SiSendChar
    _initTime->_TiGetTimer
    _initSIO->_TiGetTimer
    _initMenu->_TiGetTimer
    _initKeypad->_TiGetTimer
    _initData->_readUserData
    _readUserData->_readEEPROM
    _initAudio->_TiGetTimer
    _dataMotor->_LcPutChar
    _LcPutChar->_LcGotoXY
    _LcGotoXY->_WaitForBusy
    _CantaData->_CantaPartAlta
    _CantaData->_CantaPartBaixa
    _btMotor->_TiGetTics
    _audioMotor->_TiGetTics
    _SMSMotor->_TiGetTics
    _LcInit->_Espera
    _WaitForBusy->_TiGetTics
    _Espera->_TiGetTics
    _CantaIR->_CantaPartAlta
    _CantaIR->_CantaPartBaixa
    _KeypadMotor->_TiGetTics

Critical Paths under _RSI_High in COMRAM

    _RSI_High->__TiRSITimer

Critical Paths under _main in BANK0

    _main->_dataMotor

Critical Paths under _RSI_High in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _RSI_High in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   68450
                        _KeypadMotor
                             _LcInit
                           _SMSMotor
                        _TiInitTimer
                         _audioMotor
                            _btMotor
                          _dataMotor
                          _initAudio
                           _initData
                       _initJoystick
                         _initKeypad
                           _initMenu
                            _initSIO
                           _initTime
                      _joystickMotor
                          _menuMotor
                          _timeMotor
 ---------------------------------------------------------------------------------
 (1) _timeMotor                                            2     2      0   10167
                                             20 COMRAM     2     2      0
                  _KeGetGenericValue
                         _LcCursorOn
                           _LcGotoXY
                          _LcPutChar
                          _TiGetTics
                        _TiResetTics
                            ___lbdiv
                            ___lbmod
                        _btAvailable
                          _isPressed
                           _sendChar
                     _updateGameTime
                      _updateSysTime
 ---------------------------------------------------------------------------------
 (2) _updateSysTime                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _updateGameTime                                       0     0      0      31
                          _startSong
 ---------------------------------------------------------------------------------
 (3) _startSong                                            0     0      0      31
                        _TiResetTics
 ---------------------------------------------------------------------------------
 (2) _sendChar                                             1     1      0    2592
                                             19 COMRAM     1     1      0
                          _LcPutChar
                         _btSendByte
 ---------------------------------------------------------------------------------
 (3) _btSendByte                                           1     1      0      15
                                              5 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _btAvailable                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _menuMotor                                            2     2      0   47799
                                             21 COMRAM     2     2      0
                            _CantaIR
                         _DaFindUser
                          _DaGetIdle
                     _DaGetNumScores
                        _DaGetStatus
                        _DaSaveScore
                         _DaSaveUser
                        _JoDirection
                            _JoMoved
                          _JoSetMode
                     _KeGetCharValue
                  _KeGetGenericValue
                          _KeSetMode
                        _LcCursorOff
                         _LcCursorOn
                           _LcGotoXY
                          _LcPutChar
                      _SiIsAvailable
                         _SiReadByte
                     _SiRecievedByte
                         _SiSendChar
                          _TiGetTics
                        _TiResetTics
                            ___lbdiv
                            ___lbmod
                       _displayError
                      _displayLogOut
                     _displayResults
               _displayScoresMarquee
                      _displayString
                     _displaySysTime
               _displayTimeRemaining
                         _getPresses
                  _incrementPosition
                          _isPressed
                           _mainMenu
                         _modifyTime
                       _resetDisplay
                      _resetPosition
                         _resetTimer
                         _startTimer
                          _stopTimer
                          _timerOver
 ---------------------------------------------------------------------------------
 (2) _timerOver                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _stopTimer                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _startTimer                                           0     0      0      31
                        _TiResetTics
 ---------------------------------------------------------------------------------
 (2) _resetTimer                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _resetPosition                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _resetDisplay                                         0     0      0    1889
                            _LcClear
 ---------------------------------------------------------------------------------
 (2) _modifyTime                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _mainMenu                                             2     2      0    5069
                                             19 COMRAM     2     2      0
                          _LcPutChar
                            ___awmod
                            _nextRow
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              6     2      4     448
                                              5 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) _isPressed                                            1     1      0      24
                                              5 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _incrementPosition                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _getPresses                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _displayTimeRemaining                                 0     0      0    2075
                           _LcGotoXY
 ---------------------------------------------------------------------------------
 (2) _displaySysTime                                       0     0      0    2075
                           _LcGotoXY
 ---------------------------------------------------------------------------------
 (2) _displayString                                        1     0      1    5133
                                             19 COMRAM     1     0      1
                          _LcPutChar
                            _nextRow
 ---------------------------------------------------------------------------------
 (2) _displayScoresMarquee                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _displayResults                                       0     0      0    4621
                          _LcPutChar
                            _nextRow
 ---------------------------------------------------------------------------------
 (2) _displayLogOut                                        0     0      0    4621
                          _LcPutChar
                            _nextRow
 ---------------------------------------------------------------------------------
 (2) _displayError                                         0     0      0    4621
                          _LcPutChar
                            _nextRow
 ---------------------------------------------------------------------------------
 (3) _nextRow                                              0     0      0    2075
                           _LcGotoXY
 ---------------------------------------------------------------------------------
 (2) _SiRecievedByte                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _SiReadByte                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _LcCursorOn                                           0     0      0     440
                            _CantaIR
                        _WaitForBusy
 ---------------------------------------------------------------------------------
 (2) _LcCursorOff                                          0     0      0     440
                            _CantaIR
                        _WaitForBusy
 ---------------------------------------------------------------------------------
 (2) _KeSetMode                                            1     1      0      93
                                              6 COMRAM     1     1      0
                        _TiResetTics
 ---------------------------------------------------------------------------------
 (2) _KeGetCharValue                                       0     0      0     110
                  _KeGetGenericValue
                       _getFullValue
 ---------------------------------------------------------------------------------
 (3) _getFullValue                                         5     5      0     110
                                              5 COMRAM     5     5      0
 ---------------------------------------------------------------------------------
 (2) _JoSetMode                                            1     1      0      22
                                              5 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _JoMoved                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _JoDirection                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _DaSaveUser                                           1     0      1      98
                                              5 COMRAM     1     0      1
 ---------------------------------------------------------------------------------
 (2) _DaSaveScore                                          1     1      0    6829
                                             19 COMRAM     1     1      0
                            _LcClear
                          _LcPutChar
                            ___lbdiv
                            ___lbmod
 ---------------------------------------------------------------------------------
 (3) _LcClear                                              0     0      0    1889
                            _CantaIR
                             _Espera
                        _WaitForBusy
 ---------------------------------------------------------------------------------
 (2) _DaGetStatus                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _DaGetNumScores                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _DaGetIdle                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _DaFindUser                                           1     0      1    2196
                                             18 COMRAM     1     0      1
                           _LcGotoXY
 ---------------------------------------------------------------------------------
 (1) _joystickMotor                                        2     2      0      22
                                              6 COMRAM     2     2      0
                      _SiIsAvailable
                         _SiSendChar
 ---------------------------------------------------------------------------------
 (1) _initTime                                             0     0      0       0
                         _TiGetTimer
 ---------------------------------------------------------------------------------
 (1) _initSIO                                              0     0      0       0
                         _TiGetTimer
 ---------------------------------------------------------------------------------
 (1) _initMenu                                             0     0      0       0
                         _TiGetTimer
 ---------------------------------------------------------------------------------
 (1) _initKeypad                                           0     0      0       0
                         _TiGetTimer
 ---------------------------------------------------------------------------------
 (1) _initJoystick                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initData                                             0     0      0      30
                         _readEEPROM
                       _readUserData
 ---------------------------------------------------------------------------------
 (2) _readUserData                                         2     2      0      15
                                              6 COMRAM     2     2      0
                         _readEEPROM
 ---------------------------------------------------------------------------------
 (3) _readEEPROM                                           1     1      0      15
                                              5 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _initAudio                                            0     0      0       0
                         _TiGetTimer
 ---------------------------------------------------------------------------------
 (1) _dataMotor                                            8     8      0    7893
                                             19 COMRAM     6     6      0
                                              0 BANK0      2     2      0
                           _LcGotoXY
                          _LcPutChar
                            ___lbdiv
                            ___lbmod
                         _saveEEPROM
 ---------------------------------------------------------------------------------
 (2) _saveEEPROM                                           2     1      1     872
                                              5 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (2) ___lbmod                                              4     3      1    1222
                                              5 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 (2) ___lbdiv                                              4     3      1    1141
                                              5 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 (3) _LcPutChar                                            1     1      0    2546
                                             18 COMRAM     1     1      0
                          _CantaData
                           _LcGotoXY
                        _WaitForBusy
 ---------------------------------------------------------------------------------
 (4) _LcGotoXY                                             5     4      1    2075
                                             13 COMRAM     5     4      1
                            _CantaIR
                        _WaitForBusy
 ---------------------------------------------------------------------------------
 (4) _CantaData                                            1     1      0     310
                                              7 COMRAM     1     1      0
                      _CantaPartAlta
                     _CantaPartBaixa
 ---------------------------------------------------------------------------------
 (1) _btMotor                                              2     2      0     118
                                             12 COMRAM     2     2      0
                      _SiIsAvailable
                         _SiSendChar
                          _TiGetTics
                        _TiResetTics
 ---------------------------------------------------------------------------------
 (2) _SiSendChar                                           1     1      0      22
                                              5 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _SiIsAvailable                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _audioMotor                                           3     3      0      96
                                             12 COMRAM     3     3      0
                          _TiGetTics
                        _TiResetTics
 ---------------------------------------------------------------------------------
 (1) _TiInitTimer                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SMSMotor                                             2     2      0      96
                                             12 COMRAM     2     2      0
                  _KeGetGenericValue
                          _TiGetTics
                        _TiResetTics
 ---------------------------------------------------------------------------------
 (2) _KeGetGenericValue                                    2     2      0       0
                                              5 COMRAM     2     2      0
                          _getColumn
 ---------------------------------------------------------------------------------
 (3) _getColumn                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _LcInit                                               3     2      1    2133
                                             17 COMRAM     3     2      1
                            _CantaIR
                 _EscriuPrimeraOrdre
                             _Espera
                         _TiGetTimer
                        _WaitForBusy
 ---------------------------------------------------------------------------------
 (4) _WaitForBusy                                          1     1      0     130
                                             12 COMRAM     1     1      0
                          _TiGetTics
                        _TiResetTics
 ---------------------------------------------------------------------------------
 (2) _TiGetTimer                                           1     1      0       0
                                              5 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (4) _Espera                                               5     1      4    1449
                                             12 COMRAM     5     1      4
                          _TiGetTics
                        _TiResetTics
 ---------------------------------------------------------------------------------
 (2) _EscriuPrimeraOrdre                                   2     2      0      60
                                              5 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (5) _CantaIR                                              1     1      0     310
                                              7 COMRAM     1     1      0
                      _CantaPartAlta
                     _CantaPartBaixa
 ---------------------------------------------------------------------------------
 (6) _CantaPartBaixa                                       2     2      0     124
                                              5 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (6) _CantaPartAlta                                        2     2      0     124
                                              5 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _KeypadMotor                                          2     2      0      96
                                             12 COMRAM     2     2      0
                          _TiGetTics
                        _TiResetTics
 ---------------------------------------------------------------------------------
 (4) _TiResetTics                                          1     1      0      31
                                              5 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (5) _TiGetTics                                            7     5      2      65
                                              5 COMRAM     7     5      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _RSI_High                                             4     4      0       0
                                              1 COMRAM     4     4      0
                        __TiRSITimer
 ---------------------------------------------------------------------------------
 (8) __TiRSITimer                                          1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _KeypadMotor
     _TiGetTics
     _TiResetTics
   _LcInit
     _CantaIR
       _CantaPartAlta
       _CantaPartBaixa
     _EscriuPrimeraOrdre
     _Espera
       _TiGetTics
       _TiResetTics
     _TiGetTimer
     _WaitForBusy
       _TiGetTics
       _TiResetTics
   _SMSMotor
     _KeGetGenericValue
       _getColumn
     _TiGetTics
     _TiResetTics
   _TiInitTimer
   _audioMotor
     _TiGetTics
     _TiResetTics
   _btMotor
     _SiIsAvailable
     _SiSendChar
     _TiGetTics
     _TiResetTics
   _dataMotor
     _LcGotoXY
       _CantaIR
       _WaitForBusy
     _LcPutChar
       _CantaData
         _CantaPartAlta
         _CantaPartBaixa
       _LcGotoXY
       _WaitForBusy
     ___lbdiv
     ___lbmod
     _saveEEPROM
   _initAudio
     _TiGetTimer
   _initData
     _readEEPROM
     _readUserData
       _readEEPROM
   _initJoystick
   _initKeypad
     _TiGetTimer
   _initMenu
     _TiGetTimer
   _initSIO
     _TiGetTimer
   _initTime
     _TiGetTimer
   _joystickMotor
     _SiIsAvailable
     _SiSendChar
   _menuMotor
     _CantaIR
     _DaFindUser
       _LcGotoXY
     _DaGetIdle
     _DaGetNumScores
     _DaGetStatus
     _DaSaveScore
       _LcClear
         _CantaIR
         _Espera
         _WaitForBusy
       _LcPutChar
       ___lbdiv
       ___lbmod
     _DaSaveUser
     _JoDirection
     _JoMoved
     _JoSetMode
     _KeGetCharValue
       _KeGetGenericValue
       _getFullValue
     _KeGetGenericValue
     _KeSetMode
       _TiResetTics
     _LcCursorOff
       _CantaIR
       _WaitForBusy
     _LcCursorOn
       _CantaIR
       _WaitForBusy
     _LcGotoXY
     _LcPutChar
     _SiIsAvailable
     _SiReadByte
     _SiRecievedByte
     _SiSendChar
     _TiGetTics
     _TiResetTics
     ___lbdiv
     ___lbmod
     _displayError
       _LcPutChar
       _nextRow
         _LcGotoXY
     _displayLogOut
       _LcPutChar
       _nextRow
     _displayResults
       _LcPutChar
       _nextRow
     _displayScoresMarquee
     _displayString
       _LcPutChar
       _nextRow
     _displaySysTime
       _LcGotoXY
     _displayTimeRemaining
       _LcGotoXY
     _getPresses
     _incrementPosition
     _isPressed
     _mainMenu
       _LcPutChar
       ___awmod
       _nextRow
     _modifyTime
     _resetDisplay
       _LcClear
     _resetPosition
     _resetTimer
     _startTimer
       _TiResetTics
     _stopTimer
     _timerOver
   _timeMotor
     _KeGetGenericValue
     _LcCursorOn
     _LcGotoXY
     _LcPutChar
     _TiGetTics
     _TiResetTics
     ___lbdiv
     ___lbmod
     _btAvailable
     _isPressed
     _sendChar
       _LcPutChar
       _btSendByte
     _updateGameTime
       _startSong
         _TiResetTics
     _updateSysTime

 _RSI_High (ROOT)
   __TiRSITimer

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             1FF      0       0      22        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      DB       7       85.5%
BITBANK0            80      0       0       4        0.0%
BANK0               80      2      77       5       93.0%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     19      79       1       96.0%
BITBIGSFRhlhh       19      0       0       9        0.0%
BITBIGSFRhh          D      0       0       8        0.0%
BITBIGSFRlhhhh       B      0       0      11        0.0%
BITBIGSFRlhhlhl      8      0       0      14        0.0%
BITBIGSFRlhhlll      8      0       0      17        0.0%
BITBIGSFRlhhllh      7      0       0      16        0.0%
BITBIGSFRlhhlhh      7      0       0      13        0.0%
BITBIGSFRllhlh       5      0       0      19        0.0%
BITBIGSFRllhhh       5      0       0      18        0.0%
BITBIGSFRhll         4      0       0      10        0.0%
BITBIGSFRlhhllh      1      0       0      15        0.0%
BITBIGSFRlhhhl       1      0       0      12        0.0%
BITBIGSFRlll         1      0       0      20        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     1CB      21        0.0%
DATA                 0      0     1CB       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.36 build 20220127204148 
Symbol Table                                                                                   Tue Jun 28 23:09:58 2022

           TiResetTics@Handle 005E                 _updateSysTime 0088                             _x 002D  
                           _y 002C        ??_displayTimeRemaining 006B                            PL2 0DC2  
                          PL4 0DF0                            PL6 0DFA                            PL8 0E14  
      __end_of_displayResults 1E12        __end_of_updateGameTime 1FAC        __end_of_displaySysTime 00EC  
               ?_displayError 0059                           PL10 0E20                           PL20 1736  
                         PL12 0E4C                           PL30 174A                           PL22 17C6  
                         PL14 1D36                           PL40 1E12                           PL32 1B22  
                         PL24 1B04                           PL16 161C                           PL50 0E68  
                         PL42 1C64                           PL34 095C                           PL26 0952  
                         PL18 0E5A                           PL60 11D4                           PL52 1DC4  
                         PL44 0966                           PL36 1DBC                           PL28 1F66  
                         PL70 1A74                           PL62 097A                           PL54 1856  
                         PL46 16BC                           PL38 16AA                           PL80 012E  
                         PL72 098E                           PL64 175A                           PL56 17E4  
                         PL48 0970                           PL90 11EA                           PL82 11DA  
                         PL74 1C72                           PL66 0986                           PL58 11CC  
                         PL92 0998                           PL84 130A                           PL76 1A0E  
                         PL68 1864                           PL94 14C8                           PL86 1E88  
                         PL78 0E76                           PL96 11F2                           PL88 11E2  
                         PL98 09A0                           l152 121C                           l155 1238  
                         l148 11FC                           l166 129E                           l158 1254  
                         l177 1516                           l195 1FF2                           l710 1490  
                         l279 1D56                           l713 14A4                           l538 0512  
                         l635 1734                           l906 0B5A                           l932 0CCE  
                         l934 0CD4                           l694 1412                           l784 1312  
                         l697 1426                           l874 09DE                           l891 0A54  
                         l859 1A92                           l797 1396                           l893 0A98  
                         l894 0A9E                           l895 0AA4                           l898 0AF0  
                         u510 1846                           u450 1804                           u508 1830  
                         u470 181A                           u528 1848                           u490 182E  
                         u468 1806                           u488 181C                           _val 0031  
                         _pos 0030                           _row 0045              ??_CantaPartBaixa 005E  
                ___awmod@sign 0063                           prod 000FF3                           wreg 000FE8  
         __end_of_JoDirection 018C                ?_displayLogOut 0059                ?_displayString 006C  
                        l2303 1768                          l2321 179A                          l2313 177E  
                        l2307 1770                          l2317 1792                          l4021 192C  
                        l4013 190E                          l4005 18F6                          l2327 17B2  
                        l4015 1916                          l2505 1A82                          l4025 1936  
                        l4009 1902                          l2531 1AD8                          l2515 1A94  
                        l2525 1AC2                          l2509 1A8A                          l4029 1942  
                        l2357 0094                          l2519 1A9C                          l4079 1D1C  
                        l4087 1D26                          l6105 1590                          l7001 0C3A  
                        l5145 1438                          l6211 1524                          l5163 1472  
                        l6221 153E                          l6205 1510                          l7021 0C9C  
                        l7005 0C48                          l5181 1492                          l5157 145C  
                        l6037 1BE4                          l6223 1544                          l6207 151C  
                        l6231 1556                          l4383 1D98                          l7023 0CA2  
                        l7015 0C62                          l7007 0C4C                          l5175 1486  
                        l5191 14A8                          l7111 0F54                          l7103 0F36  
                        l6321 12DC                          l6217 1534                          l7033 0CE8  
                        l5169 147C                          l7201 10E4                          l6307 12B4  
                        l4379 1D90                          l6155 165E                          l6147 1644  
                        l6139 162A                          l6403 03C2                          l7123 0F84  
                        l7115 0F66                          l6317 12DA                          l7045 0D26  
                        l6341 02EC                          l6085 1FA8                          l7213 111C  
                        l7205 10F0                          l7133 0FB2                          l7053 0E7E  
                        l7039 0CFC                          l6423 03F0                          l6415 03D6  
                        l7127 0F96                          l7119 0F78                          l7071 0EC2  
                        l6249 1216                          l6169 168A                          l7241 1326  
                        l3961 1B00                          l6521 053C                          l6433 040E  
                        l6361 0340                          l6329 02D2                          l7209 1106  
                        l7137 0FBA                          l7225 1140                          l6283 126E  
                        l6195 14FC                          l6179 14D0                          l6603 0632  
                        l6515 052E                          l6507 0514                          l6443 0428  
                        l7163 102C                          l7059 0E9A                          l5813 1F3C  
                        l5901 1D14                          l3957 1AFE                          l6701 076E  
                        l6613 064A                          l6541 0570                          l6525 0540  
                        l6445 0430                          l6381 0384                          l6349 0312  
                        l7149 0FF2                          l6287 1278                          l6279 126A  
                        l7271 139C                          l7263 1368                          l7255 1358  
                        l7247 133A                          l6711 0784                          l6607 0638  
                        l6551 0592                          l6471 0488                          l6463 046E  
                        l6447 0436                          l6439 041A                          l6391 03A4  
                        l6375 036A                          l7175 1064                          l7095 0F18  
                        l7087 0EFE                          l7079 0EE0                          l7319 1B62  
                        l6297 1298                          l5809 1C3E                          l7257 135A  
                        l7249 133E                          l6641 0692                          l7193 10B8  
                        l7283 13D6                          l7291 13F6                          l5819 1D5A  
                        l5931 1E80                          l6715 0788                          l6635 0680  
                        l6627 0672                          l6619 0660                          l6563 05B8  
                        l6539 056C                          l6491 04DC                          l6459 045C  
                        l6811 0874                          l7187 1098                          l7285 13DC  
                        l7269 137E                          l5917 1E3C                          l5909 1E26  
                        l6733 07BC                          l6581 05EC                          l6573 05D2  
                        l6549 058E                          l6493 04E2                          l6477 049C  
                        l6397 03BC                          l7197 10CE                          l7279 13D2  
                        l6903 0AF6                          l6727 07AE                          l6719 0796  
                        l6671 0720                          l6663 0700                          l6655 06C0  
                        l6647 06A8                          l6575 05D8                          l6487 04CE  
                        l6825 09BA                          l6753 07F0                          l5787 1C18  
                        l5867 1DEC                          l6843 09E8                          l6827 09BE  
                        l6819 09AA                          l5885 1CF2                          l6909 0B00  
                        l6861 0A36                          l6837 09DA                          l6829 09C2  
                        l5973 1718                          l6757 0800                          l6597 061C  
                        l6951 0BA8                          l6935 0B7C                          l6927 0B62  
                        l6919 0B24                          l6871 0A4E                          l6855 0A24  
                        l6687 0750                          l6679 0738                          l6599 0622  
                        l5897 1D0C                          l5889 1CF8                          l6961 0BC0  
                        l6945 0B9E                          l6937 0B82                          l5977 171C  
                        l6777 0822                          l6769 0814                          l6891 0AAE  
                        l6859 0A30                          l6795 0854                          l6787 083C  
                        l6973 0BD6                          l6877 0A5E                          l6887 0A9A  
                        l5999 1CA0                          l6985 0C02                          l6995 0C2A  
                        l6979 0BEE                          l6989 0C1A                          u3040 1FEE  
                        u5100 1A3A                          u5120 1A4E                          u5200 19E8  
                        u5140 1A66                          u5220 1A00                          u5118 1A3C  
                        u5310 1CFC                          u6030 0468                          u5080 1A24  
                        u5160 19BE                          u5138 1A50                          u5218 19EA  
                        u2850 1AEC                          u2930 191A                          u5180 19D4  
                        u5158 1A68                          u5238 1A02                          u6070 04C4  
                        u7120 13B0                          u5098 1A26                          u5178 19C0  
                        u5370 16EA                          u7140 13F0                          u5198 19D6  
                        u6280 0606                          u5810 12CA                          u7090 1350  
                        u5740 128E                          u6460 077E                          u5920 037E  
                        u6810 0CC0                          i2l77 1BC2                          u5890 0330  
                        _TIME 00BE                ?_SiIsAvailable 0059                          _game 0012  
                        _main 1B3A                          _send 002E                          fsr1h 000FE2  
                        fsr2h 000FDA                          indf1 000FE7                          indf2 000FDF  
                        fsr1l 000FE1                          fsr2l 000FD9                    _LcCursorOn 00EC  
                        btemp 007A                          prodh 000FF4                          prodl 000FF3  
             __end_of_LcClear 004C                          start 0032               __end_of_CantaIR 1F92  
               LcInit@columns 006A                ?_updateSysTime 0059               __end_of_JoMoved 0188  
                ___param_bank 000000                 _isPressed$638 005E              __end_of_MAINMENU 0299  
             ?_displayResults 0059                ??_displayError 006C               ?_updateGameTime 0059  
             ?_displaySysTime 0059                   Espera@Timer 0065                         ?_main 0059  
             __end_of___lbdiv 1D18                         _EEADR 000FA9               __end_of___awmod 194C  
             __end_of___lbmod 1E44                 ??_TiInitTimer 005E                         _T0CON 000FD5  
                       _ERROR 009F                         _TABLE 0201                         _RCREG 000FAE  
               ??_KeypadMotor 0065                         _TMR0H 000FD7                         _TMR0L 000FD6  
                       _SPBRG 000FAF                         _TXREG 000FAD               __end_of_btMotor 1410  
                 ?_DaFindUser 006B                         _Timer 000D              __end_of_SMSTABLE 02CF  
             __end_of_initSIO 1EB2                         _mUser 0047                         _moved 002B  
                       _timer 0035                   _LcCursorOff 00F6                         _state 003D  
                       _users 0100              __end_of_RSI_High 0032               __end_of_nextRow 00B6  
            __end_of_SMSMotor 157C                         tablat 000FF5                 ??_TiResetTics 005E  
                       ttemp5 007B                         ttemp6 007E                         ttemp7 0082  
                       status 000FD8                   ?_DaSaveUser 005E                         wtemp8 007B  
             ___lbdiv@divisor 005E              __end_of_LcGotoXY 1D76                saveEEPROM@data 005E  
             ___lbdiv@counter 0060                 ??__TiRSITimer 0059                    _TiGetTimer 1D18  
     EscriuPrimeraOrdre@ordre 005F               __initialization 194C                    _SiReadByte 0180  
                __end_of_main 1B84          __end_of_getFullValue 1B04                    _SiSendChar 015C  
                 _JoDirection 0188                        ??_main 0072                 __activetblptr 000002  
               ?_initJoystick 0059               ??_displayLogOut 006C               ??_displayString 006D  
                      _ADCON0 000FC2                        _ADCON1 000FC1                        _ADCON2 000FC0  
         __end_of_TiInitTimer 1DA2                        _ADRESH 000FC4                        _EEDATA 000FA8  
                      _EECON2 000FA7               ??_SiIsAvailable 005E           __end_of_KeypadMotor 130A  
                   ??_LcClear 006A                     ??_CantaIR 0060                        i2l4363 1BA8  
                      i2l4367 1BBE                        i2l4359 1BA0                        _LCDcol 0033  
              LcGotoXY@Fisics 0067                LcGotoXY@Column 006A                        _LCDrow 0034  
               ??_WaitForBusy 0065                 ?_readUserData 0059            _mUser@EEPROM$F1764 000B  
                   ??_JoMoved 005E                   ?_LcCursorOn 0059             KeSetMode@menuMode 005F  
                      _LcInit 157C               ??_updateSysTime 005E                  ?_DaGetStatus 0059  
                      _Espera 1F36                  _LcGotoXY$844 0068             __end_of_DaGetIdle 0154  
                      _RowAct 003B           __end_of_TiResetTics 1F66              __end_of_mainMenu 1736  
                      _h_Tics 000F                        _dataRX 0026                        _dataTX 0022  
                   ??___lbdiv 005F                     ??___awmod 0062                     ??___lbmod 005F  
                      _mScore 002F              __end_of_initData 1AE0              __end_of_initMenu 010A  
            __end_of_initTime 015C           __end_of__TiRSITimer 1BC8                        clear_0 1992  
                      clear_1 199E                        _minute 0077                        _second 0017  
                      _period 0036                     ??_btMotor 0065               ___awmod@divisor 0060  
                      isa$std 000001               ___awmod@counter 0062              __end_of_sendChar 1FDE  
                      _status 001C                ??_initJoystick 005E                     ??_initSIO 005F  
                __pdataCOMRAM 0072         __end_of_resetPosition 0178                     ??_nextRow 006B  
                __mediumconst 0000                        tblptrh 000FF7                        tblptrl 000FF6  
                      tblptru 000FF8                  ?_DaSaveScore 0059             __end_of_CantaData 1C64  
            ___lbdiv@dividend 005F                ??_readUserData 005F               ___lbmod@divisor 005E  
        __end_of_displayError 1CB0                    __accesstop 0080       __end_of__initialization 19A4  
           __end_of_KeSetMode 1E88               ___lbmod@counter 0060                 _LOGOUTMESSAGE 0096  
           __end_of_LcPutChar 1DF6          DaSaveScore@userScore 006C                 ___rparam_used 000001  
               __end_of_TABLE 020D                   ?_TiGetTimer 0059             __end_of_JoSetMode 014C  
              __pcstackCOMRAM 0059           __end_of_WaitForBusy 1C44                   ?_SiReadByte 0059  
                __pidataBANK0 186E         __end_of_joystickMotor 14C8                   ?_SiSendChar 0059  
                  __end_ofPL2 0DF0                    __end_ofPL4 0DFA                    __end_ofPL6 0E14  
                  __end_ofPL8 0E20              ___lbdiv@quotient 0061                     ?_RSI_High 0059  
                   ?_SMSMotor 0059             __end_of_TiGetTics 1E6A                _SiRecievedByte 0164  
                 _TiInitTimer 1D76                   _KeypadMotor 11FA                     ?_LcGotoXY 0066  
                  __pbssBANK1 0100                   _TiResetTics 1F56                    _btSendByte 00C2  
          _state@EEPROM$F1761 001E                       ?_LcInit 006A                 _CantaPartAlta 1A18  
                     ?_Espera 0065                   __TiRSITimer 1B84              ??_displayResults 006C  
            ??_updateGameTime 005F              ??_displaySysTime 006B        __end_of_SiRecievedByte 016A  
                  ??_RSI_High 005A                    ??_SMSMotor 0065                    _getPresses 017C  
                  _audioMotor 1628                       LcInit@i 006C                       _LCDcolm 0032  
                ??_DaFindUser 006C                    ??_LcGotoXY 0067                 ?_resetDisplay 0059  
                     _RESULTS 0080                  ?_LcCursorOff 0059                  _getFullValue 1AE0  
           __end_of_dataMotor 0DC2                     ?_mainMenu 0059                       _LcClear 0036  
                     _CantaIR 1F76                     ?_initData 0059                     ?_initMenu 0059  
                   ?_initTime 0059                  ??_DaSaveUser 005F                   _WaitForBusy 1C06  
                     _JoMoved 0184                    _readEEPROM 0098                ?_CantaPartAlta 0059  
           __end_of_getColumn 0114          __end_of_initJoystick 1ED4                 ??_btAvailable 005E  
                   ?_sendChar 0059                _DaGetNumScores 0190                       __Hparam 0000  
                     __Lparam 0000                    _initKeypad 1EF6            __end_of_DaFindUser 1FC6  
                     ___lbdiv 1CE4                       ___awmod 18E4                       ___lbmod 1E1E  
                _MAINMENUSIZE 0072                  __psmallconst 0200                    _currentKey 0042  
           __end_of_isPressed 1FF6                  ?_JoDirection 0059                       __pcinit 194C  
             ?_SiRecievedByte 0059                       _btMotor 1310                       __ramtop 0200  
        __end_of_readUserData 17C6                       __ptext0 1B3A                       __ptext1 0E7C  
                     __ptext2 0088                       __ptext3 1F92                       __ptext4 00B6  
                     __ptext5 1FC6                       __ptext6 00C2                       __ptext7 011C  
                     __ptext8 02D0                       __ptext9 0124             __end_of_initAudio 0062  
                   _T0CONbits 000FD5                     CantaIR@IR 0060                       _initSIO 1E8E  
                     _counter 0046                    _saveEEPROM 1ED4             __end_of_menuMotor 0952  
                     _joyMode 0029            __end_of_DaSaveUser 0076              ___awmod@dividend 005E  
              ??_resetDisplay 006A                       _nextRow 00A8                       _minutes 0078  
                     _seconds 0018                    _modifyTime 012C                       _timerRX 0027  
                     _timerTX 0023                       _pressed 0040                       _stateRX 0028  
                     _stateTX 0024               WaitForBusy@Busy 0065                       _userNum 001D  
                     _sysTime 00CE          end_of_initialization 19A4                    ??_mainMenu 006C  
                   _LOGINMENU 00A8                    ??_initData 0061                    ??_initMenu 005F  
                  ??_initTime 005F        __end_of_DaGetNumScores 0194                   ?_btSendByte 0059  
               __Lmediumconst 0000               TiGetTics@Handle 0062                  ??_LcCursorOn 0066  
           __end_of_timeMotor 11CC                    ??_sendChar 006C             __end_of_timerOver 012C  
                  _resetTimer 00CE                    _numPresses 003F               TiGetTics@actual 0063  
                   _RCSTAbits 000FAB                       postdec1 000FE5                       postdec2 000FDD  
                     postinc0 000FEE                       postinc1 000FE6                       postinc2 000FDE  
           __end_of_startSong 00C2           __end_of_btAvailable 0124                     _DaGetIdle 014C  
           __end_of_stopTimer 0174                     _PORTBbits 000F81                  _displayError 1C7C  
                   _PORTCbits 000F82                     _PORTDbits 000F83                   ?_getPresses 0059  
                 ?_audioMotor 0059             _KeGetGenericValue 1F16             _incrementPosition 0178  
          __end_of_LcCursorOn 00F6              ___lbmod@dividend 005F            ?_KeGetGenericValue 0059  
                   _TRISAbits 000F92                     _TRISBbits 000F93                     _TRISCbits 000F94  
                   _TRISDbits 000F95         __end_of_displayLogOut 1C06            ?_incrementPosition 0059  
           readEEPROM@address 005E         __end_of_displayString 1DBC           getFullValue@generic 0062  
                  _startTimer 1FF6           ??_KeGetGenericValue 005E               ??_CantaPartAlta 005E  
       __end_of_SiIsAvailable 0170                   ___lbmod@rem 0061           ??_incrementPosition 005E  
                   _CantaData 1C44               ?_DaGetNumScores 0059                   ?_readEEPROM 0059  
                   _TXSTAbits 000FAC                  ??_TiGetTimer 005E                  saveEEPROM@ad 005F  
              __end_of_LcInit 161C                     _KeSetMode 1E6A         __end_of_updateSysTime 0098  
                   _LcPutChar 1DCC                  ??_SiReadByte 005E                __end_of_Espera 1F56  
                 ?_initKeypad 0059                _KeGetCharValue 013C                  ??_SiSendChar 005E  
  __end_of_EscriuPrimeraOrdre 1856                    ?_DaGetIdle 0059                   _BAUDCONbits 000FB8  
                   _JoSetMode 0144     __end_of_KeGetGenericValue 1F36                 __pidataCOMRAM 0114  
            _timer@time$F1844 0014     __end_of_incrementPosition 017C                     _ColumnAct 003A  
                ?_TiInitTimer 0059                   ?_saveEEPROM 005E                  ?_KeypadMotor 0059  
                 __end_ofPL10 0E4C                   __end_ofPL20 174A                   __end_ofPL12 0E5A  
                 __end_ofPL30 175A                   __end_ofPL22 17E4                   __end_ofPL14 1D48  
                 __end_ofPL40 1E1E                   __end_ofPL32 1B3A                   __end_ofPL24 1B22  
                 __end_ofPL16 1628                   __end_ofPL50 0E76                   __end_ofPL42 1C72  
                 __end_ofPL34 0966                   __end_ofPL26 095C                   __end_ofPL18 0E68  
                 __end_ofPL60 11DA                   __end_ofPL52 1DCC                   __end_ofPL44 0970  
                 __end_ofPL36 1DC4                   __end_ofPL28 1F76                   __end_ofPL70 1A7E  
                 __end_ofPL62 0986                   __end_ofPL54 1864                   __end_ofPL46 16CC  
                 __end_ofPL38 16BC                   __end_ofPL80 0134                   __end_ofPL72 0998  
                 __end_ofPL64 1766                   __end_ofPL56 17F2                   __end_ofPL48 097A  
                 __end_ofPL90 11F2                   __end_ofPL82 11E2                   __end_ofPL74 1C7C  
                 __end_ofPL66 098E                   __end_ofPL58 11D4                   __end_ofPL92 09A0  
                 __end_ofPL84 1310                   __end_ofPL76 1A18                   __end_ofPL68 186E  
                 __end_ofPL94 14CE                   __end_ofPL86 1E8E                   __end_ofPL78 0E7C  
                 __end_ofPL96 11FA                   __end_ofPL88 11EA                   __end_ofPL98 09A8  
         start_initialization 194C                     _TiGetTics 1E44                   ?_modifyTime 0059  
          __end_of_TiGetTimer 1D36              _state@Audio$F967 0039            __end_of_SiReadByte 0184  
                ?_TiResetTics 0059                    ?_CantaData 0059            __end_of_SiSendChar 0164  
                    ??_LcInit 006B                  _LOGREGSCREEN 00E9                   _btAvailable 011C  
                 ?_resetTimer 0059        __end_of_KeGetCharValue 0144                  ?__TiRSITimer 0059  
                    ??_Espera 0069  __end_of_displayScoresMarquee 013C                    ?_KeSetMode 0059  
        __end_of_resetDisplay 00E2                    ?_LcPutChar 0059                   __pdataBANK0 0080  
         displayString@string 006C                    ?_JoSetMode 0059                  _initJoystick 1EB2  
                 __pbssCOMRAM 0001                 __pcstackBANK0 00F5                    ?_TiGetTics 005E  
            SiSendChar@myByte 005E                   ?_startTimer 0059  __end_of_displayTimeRemaining 0088  
                    ?_LcClear 0059                      ?_CantaIR 0059                _CantaPartBaixa 19B2  
                ?_WaitForBusy 0059                  _readUserData 1766                      ?_JoMoved 0059  
                  sendChar@bt 006C                     _dataMotor 09A8               ?_KeGetCharValue 0059  
            ??_SiRecievedByte 005E                     __pintcode 0008                     _getColumn 010A  
                    ?___lbdiv 005E                      ?___awmod 005E                      ?___lbmod 005E  
                   _available 003E               CantaPartBaixa@c 005F                   ??_DaGetIdle 005E  
                    ?_btMotor 0059                      ?_initSIO 0059                   __smallconst 0200  
                   _isPressed 1FDE                      ?_nextRow 0059                     _counterRX 0025  
                   _counterTX 0021                     _initAudio 004C                 _resetPosition 0174  
                   _menuMotor 02D0        __end_of_CantaPartBaixa 1A0E                      _MAINMENU 020D  
                 ??_CantaData 0060                  ??_btSendByte 005E                      _LATAbits 000F89  
                    _LATBbits 000F8A                      _LATCbits 000F8B                      _LATDbits 000F8C  
                  ?_dataMotor 0059                     _saveScore 001A                 ??_DaGetStatus 005E  
                   _saveState 0019                   ??_KeSetMode 005F                     _numScores 0020  
                    _PIR1bits 000F9E                   ??_LcPutChar 006B                     _timeMotor 0E7C  
                    _RCONbits 000FD0                    ?_getColumn 0059                     _timer_SMS 0043  
                   _timerOver 0124                     _timerSong 0037                      _SMSTABLE 0299  
               _joystickMotor 1410                   ??_JoSetMode 005E                     _topScores 0001  
                    _RSI_High 0008                    _ADCON0bits 000FC2                  ??_getPresses 005E  
                    _SMSMotor 14CE                  ??_audioMotor 0065                     _startSong 00B6  
              btSendByte@byte 005E                    ?_isPressed 0059            __end_of_btSendByte 00CE  
                    Espera@ms 0067                     _stopTimer 0170                      _LcGotoXY 1D48  
              ?_resetPosition 0059                   ??_TiGetTics 0060                    ?_initAudio 0059  
                   _sysMinute 0015                     _sysSecond 0016          _displayScoresMarquee 0134  
               ??_DaSaveScore 006C              ??_DaGetNumScores 005E                   LcGotoXY@Row 0066  
                  ?_menuMotor 0059                   _INTCON2bits 000FF1                     copy_data0 1960  
                   copy_data1 1980               ?_CantaPartBaixa 0059              _modifyTimeString 00DC  
                ??_readEEPROM 005E                menuMotor@state 0079                    _EECON1bits 000FA6  
          __end_of_getPresses 0180                      __Hrparam 0000            __end_of_audioMotor 16AA  
                    __Lrparam 0000                  ??_initKeypad 005F                    ?_timeMotor 0059  
               JoSetMode@mode 005E                    ?_timerOver 0059                ?_joystickMotor 0059  
         __end_of_DaGetStatus 0190          _displayTimeRemaining 0076                    ?_startSong 0059  
                ??_saveEEPROM 005F            __end_of_readEEPROM 00A8                    ?_stopTimer 0059  
       ?_displayScoresMarquee 0059                  ??_modifyTime 005E                _val@time$F1847 0011  
                _resetDisplay 00D8                      __ptext10 0170                      __ptext11 1FF6  
          _EscriuPrimeraOrdre 17F2                      __ptext20 017C                      __ptext12 00CE  
                    __ptext21 0076                      __ptext13 0174                      __ptext30 0180  
                    __ptext22 00E2                      __ptext14 00D8                      __ptext31 00EC  
                    __ptext23 1DA2                      __ptext15 012C                      __ptext40 1CB0  
                    __ptext32 00F6                      __ptext24 0134                      __ptext16 16CC  
                    __ptext41 0036                      __ptext33 1E6A                      __ptext25 1DF6  
                    __ptext17 18E4                      __ptext50 1EF6                      __ptext42 018C  
                    __ptext34 013C                      __ptext26 1BC8                      __ptext18 1FDE  
                    __ptext51 1EB2                      __ptext43 0190                      __ptext35 1AE0  
                    __ptext27 1C7C                      __ptext19 0178                      __ptext60 1DCC  
                    __ptext52 1A7E                      __ptext44 014C                      __ptext36 0144  
                    __ptext28 00A8                      __ptext61 1D48                      __ptext53 1766  
                    __ptext45 1FAC                      __ptext37 0184                      __ptext29 0164  
                    __ptext70 010A                      __ptext62 1C44                      __ptext54 0098  
                    __ptext46 1410                      __ptext38 0188                      __ptext71 157C  
                    __ptext63 1310                      __ptext55 004C                      __ptext47 0154  
                    __ptext39 0062                      __ptext80 1F56                      __ptext72 1C06  
                    __ptext64 015C                      __ptext56 09A8                      __ptext48 1E8E  
                    __ptext81 1E44                      __ptext73 1D18                      __ptext65 016A  
                    __ptext57 1ED4                      __ptext49 0100                      __ptext74 1F36  
                    __ptext66 1628                      __ptext58 1E1E                      __ptext83 1B84  
                    __ptext75 17F2                      __ptext67 1D76                      __ptext59 1CE4  
                    __ptext76 1F76                      __ptext68 14CE                      __ptext77 19B2  
                    __ptext69 1F16                      __ptext78 1A18                      __ptext79 11FA  
              CantaPartAlta@c 005F               _lastUserPointer 001B                      _mainMenu 16CC  
          __end_of_initKeypad 1F16                      _s_Timers 0190                      _initData 1A7E  
                    _initMenu 0100                      _initTime 0154           ?_EscriuPrimeraOrdre 0059  
       __end_of_CantaPartAlta 1A74           __end_of_DaSaveScore 1CE4                   ??_dataMotor 006C  
               CantaData@Data 0060                      _sendChar 1FC6                  ?_btAvailable 0059  
                ??_resetTimer 005E            __end_of_saveEEPROM 1EF6                   ??_getColumn 005E  
                    isa$xinst 000000                      _previous 0041                      int$flags 007A  
                    _position 001F                      _stateSMS 003C            __end_of_modifyTime 012E  
                    _stateJoy 002A         ?_displayTimeRemaining 0059          ??_EscriuPrimeraOrdre 005E  
                  LcInit@rows 006B               ??_resetPosition 005E                   _periodTimer 0038  
                 ??_isPressed 005E                    _INTCONbits 000FF2                   ??_initAudio 005F  
          __end_of_resetTimer 00D8                   ??_menuMotor 006E                 ??_LcCursorOff 0066  
               ?_getFullValue 0059                  ??_startTimer 005F                      intlevel2 0000  
            ??_KeGetCharValue 0063                  _timerBounces 0044                    LcPutChar@c 006B  
                 _DaGetStatus 018C               ??_joystickMotor 005F                   ??_timeMotor 006D  
            _state@time$F1845 0013                   ??_timerOver 005E                 ??_JoDirection 005E  
          __end_of_startTimer 2000                _displayResults 1DF6                   ??_startSong 005F  
              _updateGameTime 1F92                _displaySysTime 00E2        ??_displayScoresMarquee 005E  
                 ??_stopTimer 005E                    _DaFindUser 1FAC             DaFindUser@logUser 006B  
              ??_getFullValue 005E                 _displayLogOut 1BC8                   _DaSaveScore 1CB0  
              _dataMotor$1786 00F5                 _displayString 1DA2                 _SiIsAvailable 016A  
                  _DaSaveUser 0062           __end_of_LcCursorOff 0100             DaSaveUser@regUser 005E  
