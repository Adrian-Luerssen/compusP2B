

Microchip MPLAB XC8 Assembler V2.36 build 20220127204148 
                                                                                               Tue Jun 14 11:45:58 2022

Microchip MPLAB XC8 C Compiler v2.36 (Pro license) build 20220127204148 Og9s 
     1                           	processor	18F4321
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	plic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    13                           	psect	text0,global,reloc=2,class=CODE,delta=1
    14                           	psect	text1,global,reloc=2,class=CODE,delta=1
    15                           	psect	text2,global,reloc=2,class=CODE,delta=1
    16                           	psect	text3,global,reloc=2,class=CODE,delta=1
    17                           	psect	text4,global,reloc=2,class=CODE,delta=1
    18                           	psect	text5,global,reloc=2,class=CODE,delta=1
    19                           	psect	text6,global,reloc=2,class=CODE,delta=1
    20                           	psect	text7,global,reloc=2,class=CODE,delta=1
    21                           	psect	text8,global,reloc=2,class=CODE,delta=1
    22                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=1
    23                           	psect	text10,global,reloc=2,class=CODE,delta=1
    24                           	psect	text11,global,reloc=2,class=CODE,delta=1
    25                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=1
    26                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=1
    27                           	psect	text14,global,reloc=2,class=CODE,delta=1
    28                           	psect	text15,global,reloc=2,class=CODE,delta=1
    29                           	psect	text16,global,reloc=2,class=CODE,delta=1
    30                           	psect	text17,global,reloc=2,class=CODE,delta=1
    31                           	psect	text18,global,reloc=2,class=CODE,delta=1
    32                           	psect	text19,global,reloc=2,class=CODE,delta=1
    33                           	psect	text20,global,reloc=2,class=CODE,delta=1
    34                           	psect	text21,global,reloc=2,class=CODE,delta=1
    35                           	psect	text22,global,reloc=2,class=CODE,delta=1
    36                           	psect	text23,global,reloc=2,class=CODE,delta=1
    37                           	psect	text24,global,reloc=2,class=CODE,delta=1
    38                           	psect	text25,global,reloc=2,class=CODE,delta=1
    39                           	psect	text26,global,reloc=2,class=CODE,delta=1
    40                           	psect	text27,global,reloc=2,class=CODE,delta=1
    41                           	psect	text28,global,reloc=2,class=CODE,delta=1
    42                           	psect	text29,global,reloc=2,class=CODE,delta=1
    43                           	psect	text30,global,reloc=2,class=CODE,delta=1
    44                           	psect	text31,global,reloc=2,class=CODE,delta=1
    45                           	psect	text32,global,reloc=2,class=CODE,delta=1
    46                           	psect	text33,global,reloc=2,class=CODE,delta=1
    47                           	psect	text34,global,reloc=2,class=CODE,delta=1
    48                           	psect	text35,global,reloc=2,class=CODE,delta=1
    49                           	psect	text36,global,reloc=2,class=CODE,delta=1
    50                           	psect	text37,global,reloc=2,class=CODE,delta=1
    51                           	psect	text38,global,reloc=2,class=CODE,delta=1
    52                           	psect	text39,global,reloc=2,class=CODE,delta=1
    53                           	psect	text40,global,reloc=2,class=CODE,delta=1
    54                           	psect	text41,global,reloc=2,class=CODE,delta=1
    55                           	psect	text42,global,reloc=2,class=CODE,delta=1
    56                           	psect	text43,global,reloc=2,class=CODE,delta=1
    57                           	psect	text44,global,reloc=2,class=CODE,delta=1
    58                           	psect	text45,global,reloc=2,class=CODE,delta=1
    59                           	psect	text46,global,reloc=2,class=CODE,delta=1
    60                           	psect	text47,global,reloc=2,class=CODE,delta=1
    61                           	psect	text48,global,reloc=2,class=CODE,delta=1
    62                           	psect	text49,global,reloc=2,class=CODE,delta=1
    63                           	psect	text50,global,reloc=2,class=CODE,delta=1
    64                           	psect	text51,global,reloc=2,class=CODE,delta=1
    65                           	psect	text52,global,reloc=2,class=CODE,delta=1
    66                           	psect	text53,global,reloc=2,class=CODE,delta=1
    67                           	psect	text54,global,reloc=2,class=CODE,delta=1
    68                           	psect	text55,global,reloc=2,class=CODE,delta=1
    69                           	psect	text56,global,reloc=2,class=CODE,delta=1
    70                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    71                           	psect	text58,global,reloc=2,class=CODE,delta=1
    72                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    73                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    74                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    75                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    76                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    77                           	psect	pa_nodes0,global,class=CODE,delta=1
    78  0000                     
    79                           ; Version 2.36
    80                           ; Generated 28/01/2022 GMT
    81                           ; 
    82                           ; Copyright Â© 2022, Microchip Technology Inc. and its subsidiaries ("Microchip")
    83                           ; All rights reserved.
    84                           ; 
    85                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    86                           ; 
    87                           ; Redistribution and use in source and binary forms, with or without modification, are
    88                           ; permitted provided that the following conditions are met:
    89                           ; 
    90                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    91                           ;        conditions and the following disclaimer.
    92                           ; 
    93                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    94                           ;        of conditions and the following disclaimer in the documentation and/or other
    95                           ;        materials provided with the distribution. Publication is not required when
    96                           ;        this file is used in an embedded application.
    97                           ; 
    98                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    99                           ;        software without specific prior written permission.
   100                           ; 
   101                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   102                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   103                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   104                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   105                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   106                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   107                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   108                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   109                           ; 
   110                           ; 
   111                           ; Code-generator required, PIC18F4321 Definitions
   112                           ; 
   113                           ; SFR Addresses
   114  0000                     
   115                           	psect	idataCOMRAM
   116  0017BE                     __pidataCOMRAM:
   117                           	callstack 0
   118                           
   119                           ;initializer for _minute
   120  0017BE  03                 	db	3
   121  0017BF  00                 	db	0
   122                           
   123                           ;initializer for menuMotor@state
   124  0017C0  01                 	db	1
   125                           
   126                           	psect	mediumconst
   127  001EF6                     __pmediumconst:
   128                           	callstack 0
   129  001EF6  00                 	db	0
   130  001EF7                     _RESULTS:
   131                           	callstack 0
   132  001EF7  54                 	db	84
   133  001EF8  49                 	db	73
   134  001EF9  4D                 	db	77
   135  001EFA  45                 	db	69
   136  001EFB  20                 	db	32
   137  001EFC  4C                 	db	76
   138  001EFD  45                 	db	69
   139  001EFE  46                 	db	70
   140  001EFF  54                 	db	84
   141  001F00  3A                 	db	58
   142  001F01  00                 	db	0
   143  001F02  53                 	db	83
   144  001F03  43                 	db	67
   145  001F04  4F                 	db	79
   146  001F05  52                 	db	82
   147  001F06  45                 	db	69
   148  001F07  3A                 	db	58
   149  001F08  00                 	db	0
   150  001F09  00                 	db	0
   151  001F0A  00                 	db	0
   152  001F0B  00                 	db	0
   153  001F0C  00                 	db	0
   154  001F0D                     __end_of_RESULTS:
   155                           	callstack 0
   156  001F0D                     _LOGINMENU:
   157                           	callstack 0
   158  001F0D  31                 	db	49
   159  001F0E  2E                 	db	46
   160  001F0F  4C                 	db	76
   161  001F10  4F                 	db	79
   162  001F11  47                 	db	71
   163  001F12  49                 	db	73
   164  001F13  4E                 	db	78
   165  001F14  00                 	db	0
   166  001F15  00                 	db	0
   167  001F16  00                 	db	0
   168  001F17  00                 	db	0
   169  001F18  32                 	db	50
   170  001F19  2E                 	db	46
   171  001F1A  52                 	db	82
   172  001F1B  45                 	db	69
   173  001F1C  47                 	db	71
   174  001F1D  49                 	db	73
   175  001F1E  53                 	db	83
   176  001F1F  54                 	db	84
   177  001F20  45                 	db	69
   178  001F21  52                 	db	82
   179  001F22  00                 	db	0
   180  001F23                     __end_of_LOGINMENU:
   181                           	callstack 0
   182  001F23                     _TIME:
   183                           	callstack 0
   184  001F23  54                 	db	84
   185  001F24  49                 	db	73
   186  001F25  4D                 	db	77
   187  001F26  45                 	db	69
   188  001F27  20                 	db	32
   189  001F28  52                 	db	82
   190  001F29  45                 	db	69
   191  001F2A  4D                 	db	77
   192  001F2B  41                 	db	65
   193  001F2C  49                 	db	73
   194  001F2D  4E                 	db	78
   195  001F2E  49                 	db	73
   196  001F2F  4E                 	db	78
   197  001F30  47                 	db	71
   198  001F31  3A                 	db	58
   199  001F32  20                 	db	32
   200  001F33                     __end_of_TIME:
   201                           	callstack 0
   202  001F33                     _LOGREGSCREEN:
   203                           	callstack 0
   204  001F33  55                 	db	85
   205  001F34  53                 	db	83
   206  001F35  45                 	db	69
   207  001F36  52                 	db	82
   208  001F37  3A                 	db	58
   209  001F38  00                 	db	0
   210  001F39  50                 	db	80
   211  001F3A  53                 	db	83
   212  001F3B  57                 	db	87
   213  001F3C  44                 	db	68
   214  001F3D  3A                 	db	58
   215  001F3E  00                 	db	0
   216  001F3F                     __end_of_LOGREGSCREEN:
   217                           	callstack 0
   218  001F3F                     _TABLE:
   219                           	callstack 0
   220  001F3F  31                 	db	49
   221  001F40  32                 	db	50
   222  001F41  33                 	db	51
   223  001F42  34                 	db	52
   224  001F43  35                 	db	53
   225  001F44  36                 	db	54
   226  001F45  37                 	db	55
   227  001F46  38                 	db	56
   228  001F47  39                 	db	57
   229  001F48  2A                 	db	42
   230  001F49  30                 	db	48
   231  001F4A  23                 	db	35
   232  001F4B                     __end_of_TABLE:
   233                           	callstack 0
   234  001F4B                     _ERROR:
   235                           	callstack 0
   236  001F4B  45                 	db	69
   237  001F4C  52                 	db	82
   238  001F4D  52                 	db	82
   239  001F4E  4F                 	db	79
   240  001F4F  52                 	db	82
   241  001F50  53                 	db	83
   242  001F51  3A                 	db	58
   243  001F52  20                 	db	32
   244  001F53  00                 	db	0
   245  001F54                     __end_of_ERROR:
   246                           	callstack 0
   247  001F54                     _MAINMENUSIZE:
   248                           	callstack 0
   249  001F54  0E                 	db	14
   250  001F55  0E                 	db	14
   251  001F56  1C                 	db	28
   252  001F57  09                 	db	9
   253  001F58                     __end_of_MAINMENUSIZE:
   254                           	callstack 0
   255  001F58                     _MAINMENU:
   256                           	callstack 0
   257  001F58  31                 	db	49
   258  001F59  2E                 	db	46
   259  001F5A  50                 	db	80
   260  001F5B  4C                 	db	76
   261  001F5C  41                 	db	65
   262  001F5D  59                 	db	89
   263  001F5E  20                 	db	32
   264  001F5F  41                 	db	65
   265  001F60  20                 	db	32
   266  001F61  47                 	db	71
   267  001F62  41                 	db	65
   268  001F63  4D                 	db	77
   269  001F64  45                 	db	69
   270  001F65  00                 	db	0
   271  001F66  00                 	db	0
   272  001F67  00                 	db	0
   273  001F68  00                 	db	0
   274  001F69  00                 	db	0
   275  001F6A  00                 	db	0
   276  001F6B  00                 	db	0
   277  001F6C  00                 	db	0
   278  001F6D  00                 	db	0
   279  001F6E  00                 	db	0
   280  001F6F  00                 	db	0
   281  001F70  00                 	db	0
   282  001F71  00                 	db	0
   283  001F72  00                 	db	0
   284  001F73  00                 	db	0
   285  001F74  32                 	db	50
   286  001F75  2E                 	db	46
   287  001F76  4D                 	db	77
   288  001F77  4F                 	db	79
   289  001F78  44                 	db	68
   290  001F79  49                 	db	73
   291  001F7A  46                 	db	70
   292  001F7B  59                 	db	89
   293  001F7C  20                 	db	32
   294  001F7D  54                 	db	84
   295  001F7E  49                 	db	73
   296  001F7F  4D                 	db	77
   297  001F80  45                 	db	69
   298  001F81  00                 	db	0
   299  001F82  00                 	db	0
   300  001F83  00                 	db	0
   301  001F84  00                 	db	0
   302  001F85  00                 	db	0
   303  001F86  00                 	db	0
   304  001F87  00                 	db	0
   305  001F88  00                 	db	0
   306  001F89  00                 	db	0
   307  001F8A  00                 	db	0
   308  001F8B  00                 	db	0
   309  001F8C  00                 	db	0
   310  001F8D  00                 	db	0
   311  001F8E  00                 	db	0
   312  001F8F  00                 	db	0
   313  001F90  33                 	db	51
   314  001F91  2E                 	db	46
   315  001F92  53                 	db	83
   316  001F93  48                 	db	72
   317  001F94  4F                 	db	79
   318  001F95  57                 	db	87
   319  001F96  20                 	db	32
   320  001F97  47                 	db	71
   321  001F98  45                 	db	69
   322  001F99  4E                 	db	78
   323  001F9A  45                 	db	69
   324  001F9B  52                 	db	82
   325  001F9C  41                 	db	65
   326  001F9D  4C                 	db	76
   327  001F9E  20                 	db	32
   328  001F9F  54                 	db	84
   329  001FA0  4F                 	db	79
   330  001FA1  50                 	db	80
   331  001FA2  20                 	db	32
   332  001FA3  35                 	db	53
   333  001FA4  20                 	db	32
   334  001FA5  53                 	db	83
   335  001FA6  43                 	db	67
   336  001FA7  4F                 	db	79
   337  001FA8  52                 	db	82
   338  001FA9  45                 	db	69
   339  001FAA  53                 	db	83
   340  001FAB  20                 	db	32
   341  001FAC  34                 	db	52
   342  001FAD  2E                 	db	46
   343  001FAE  4C                 	db	76
   344  001FAF  4F                 	db	79
   345  001FB0  47                 	db	71
   346  001FB1  4F                 	db	79
   347  001FB2  55                 	db	85
   348  001FB3  54                 	db	84
   349  001FB4  00                 	db	0
   350  001FB5  00                 	db	0
   351  001FB6  00                 	db	0
   352  001FB7  00                 	db	0
   353  001FB8  00                 	db	0
   354  001FB9  00                 	db	0
   355  001FBA  00                 	db	0
   356  001FBB  00                 	db	0
   357  001FBC  00                 	db	0
   358  001FBD  00                 	db	0
   359  001FBE  00                 	db	0
   360  001FBF  00                 	db	0
   361  001FC0  00                 	db	0
   362  001FC1  00                 	db	0
   363  001FC2  00                 	db	0
   364  001FC3  00                 	db	0
   365  001FC4  00                 	db	0
   366  001FC5  00                 	db	0
   367  001FC6  00                 	db	0
   368  001FC7  00                 	db	0
   369  001FC8                     __end_of_MAINMENU:
   370                           	callstack 0
   371  001FC8                     _SMSTABLE:
   372                           	callstack 0
   373  001FC8  31                 	db	49
   374  001FC9  00                 	db	0
   375  001FCA  00                 	db	0
   376  001FCB  00                 	db	0
   377  001FCC  00                 	db	0
   378  001FCD  00                 	db	0
   379  001FCE  41                 	db	65
   380  001FCF  42                 	db	66
   381  001FD0  43                 	db	67
   382  001FD1  32                 	db	50
   383  001FD2  00                 	db	0
   384  001FD3  00                 	db	0
   385  001FD4  44                 	db	68
   386  001FD5  45                 	db	69
   387  001FD6  46                 	db	70
   388  001FD7  33                 	db	51
   389  001FD8  00                 	db	0
   390  001FD9  00                 	db	0
   391  001FDA  47                 	db	71
   392  001FDB  48                 	db	72
   393  001FDC  49                 	db	73
   394  001FDD  34                 	db	52
   395  001FDE  00                 	db	0
   396  001FDF  00                 	db	0
   397  001FE0  4A                 	db	74
   398  001FE1  4B                 	db	75
   399  001FE2  4C                 	db	76
   400  001FE3  35                 	db	53
   401  001FE4  00                 	db	0
   402  001FE5  00                 	db	0
   403  001FE6  4D                 	db	77
   404  001FE7  4E                 	db	78
   405  001FE8  4F                 	db	79
   406  001FE9  36                 	db	54
   407  001FEA  00                 	db	0
   408  001FEB  00                 	db	0
   409  001FEC  50                 	db	80
   410  001FED  51                 	db	81
   411  001FEE  52                 	db	82
   412  001FEF  53                 	db	83
   413  001FF0  37                 	db	55
   414  001FF1  00                 	db	0
   415  001FF2  54                 	db	84
   416  001FF3  55                 	db	85
   417  001FF4  56                 	db	86
   418  001FF5  38                 	db	56
   419  001FF6  00                 	db	0
   420  001FF7  00                 	db	0
   421  001FF8  57                 	db	87
   422  001FF9  58                 	db	88
   423  001FFA  59                 	db	89
   424  001FFB  5A                 	db	90
   425  001FFC  39                 	db	57
   426  001FFD  00                 	db	0
   427  001FFE                     __end_of_SMSTABLE:
   428                           	callstack 0
   429  0000                     _EECON2	set	4007
   430  0000                     _EEDATA	set	4008
   431  0000                     _EEADR	set	4009
   432  0000                     _RCREG	set	4014
   433  0000                     _TXREG	set	4013
   434  0000                     _SPBRG	set	4015
   435  0000                     _BAUDCONbits	set	4024
   436  0000                     _LATCbits	set	3979
   437  0000                     _TRISCbits	set	3988
   438  0000                     _LATDbits	set	3980
   439  0000                     _TRISDbits	set	3989
   440  0000                     _TMR0L	set	4054
   441  0000                     _TMR0H	set	4055
   442  0000                     _LATC	set	3979
   443  0000                     _ADCON0bits	set	4034
   444  0000                     _T0CONbits	set	4053
   445  0000                     _PORTBbits	set	3969
   446  0000                     _TRISBbits	set	3987
   447  0000                     _RCONbits	set	4048
   448  0000                     _T0CON	set	4053
   449  0000                     _INTCONbits	set	4082
   450  0000                     _INTCON2bits	set	4081
   451  0000                     _PORTDbits	set	3971
   452  0000                     _LATBbits	set	3978
   453  0000                     _PIR1bits	set	3998
   454  0000                     _RCSTAbits	set	4011
   455  0000                     _TXSTAbits	set	4012
   456  0000                     _ADCON2	set	4032
   457  0000                     _ADCON1	set	4033
   458  0000                     _ADCON0	set	4034
   459  0000                     _TRISAbits	set	3986
   460  0000                     _ADRESH	set	4036
   461  0000                     _EECON1bits	set	4006
   462  001FFE  00                 	db	0	; dummy byte at the end
   463  0000                     
   464                           ; #config settings
   465                           
   466                           	psect	cinit
   467  001396                     __pcinit:
   468                           	callstack 0
   469  001396                     start_initialization:
   470                           	callstack 0
   471  001396                     __initialization:
   472                           	callstack 0
   473                           
   474                           ; Initialize objects allocated to COMRAM (3 bytes)
   475                           ; load TBLPTR registers with __pidataCOMRAM
   476  001396  0EBE               	movlw	low __pidataCOMRAM
   477  001398  6EF6               	movwf	tblptrl,c
   478  00139A  0E17               	movlw	high __pidataCOMRAM
   479  00139C  6EF7               	movwf	tblptrh,c
   480  00139E  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   481  0013A0  6EF8               	movwf	tblptru,c
   482  0013A2  0009               	tblrd		*+	;fetch initializer
   483  0013A4  CFF5 F06F          	movff	tablat,__pdataCOMRAM
   484  0013A8  0009               	tblrd		*+	;fetch initializer
   485  0013AA  CFF5 F070          	movff	tablat,__pdataCOMRAM+1
   486  0013AE  0009               	tblrd		*+	;fetch initializer
   487  0013B0  CFF5 F071          	movff	tablat,__pdataCOMRAM+2
   488                           
   489                           ; Clear objects allocated to BANK1 (144 bytes)
   490  0013B4  EE01  F000         	lfsr	0,__pbssBANK1
   491  0013B8  0E90               	movlw	144
   492  0013BA                     clear_0:
   493  0013BA  6AEE               	clrf	postinc0,c
   494  0013BC  06E8               	decf	wreg,f,c
   495  0013BE  E1FD               	bnz	clear_0
   496                           
   497                           ; Clear objects allocated to BANK0 (93 bytes)
   498  0013C0  EE00  F080         	lfsr	0,__pbssBANK0
   499  0013C4  0E5D               	movlw	93
   500  0013C6                     clear_1:
   501  0013C6  6AEE               	clrf	postinc0,c
   502  0013C8  06E8               	decf	wreg,f,c
   503  0013CA  E1FD               	bnz	clear_1
   504                           
   505                           ; Clear objects allocated to COMRAM (69 bytes)
   506  0013CC  EE00  F001         	lfsr	0,__pbssCOMRAM
   507  0013D0  0E45               	movlw	69
   508  0013D2                     clear_2:
   509  0013D2  6AEE               	clrf	postinc0,c
   510  0013D4  06E8               	decf	wreg,f,c
   511  0013D6  E1FD               	bnz	clear_2
   512  0013D8                     end_of_initialization:
   513                           	callstack 0
   514  0013D8                     __end_of__initialization:
   515                           	callstack 0
   516  0013D8  9072               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   517  0013DA  9272               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   518  0013DC  0E00               	movlw	low (__Lmediumconst shr (0+16))
   519  0013DE  6EF8               	movwf	tblptru,c
   520  0013E0  0100               	movlb	0
   521  0013E2  EF15  F00A         	goto	_main	;jump to C main() function
   522                           
   523                           	psect	bssCOMRAM
   524  000001                     __pbssCOMRAM:
   525                           	callstack 0
   526  000001                     _mUser@EEPROM$F1509:
   527                           	callstack 0
   528  000001                     	ds	18
   529  000013                     _topScores:
   530                           	callstack 0
   531  000013                     	ds	10
   532  00001D                     _second:
   533                           	callstack 0
   534  00001D                     	ds	2
   535  00001F                     _Timer:
   536                           	callstack 0
   537  00001F                     	ds	2
   538  000021                     _h_Tics:
   539                           	callstack 0
   540  000021                     	ds	2
   541  000023                     _state@time$F1562:
   542                           	callstack 0
   543  000023                     	ds	1
   544  000024                     _timer@time$F1561:
   545                           	callstack 0
   546  000024                     	ds	1
   547  000025                     _saveScore:
   548                           	callstack 0
   549  000025                     	ds	1
   550  000026                     _lastUserPointer:
   551                           	callstack 0
   552  000026                     	ds	1
   553  000027                     _status:
   554                           	callstack 0
   555  000027                     	ds	1
   556  000028                     _position:
   557                           	callstack 0
   558  000028                     	ds	1
   559  000029                     _userNum:
   560                           	callstack 0
   561  000029                     	ds	1
   562  00002A                     _state@EEPROM$F1505:
   563                           	callstack 0
   564  00002A                     	ds	1
   565  00002B                     _joyMode:
   566                           	callstack 0
   567  00002B                     	ds	1
   568  00002C                     _stateJoy:
   569                           	callstack 0
   570  00002C                     	ds	1
   571  00002D                     _moved:
   572                           	callstack 0
   573  00002D                     	ds	1
   574  00002E                     _y:
   575                           	callstack 0
   576  00002E                     	ds	1
   577  00002F                     _x:
   578                           	callstack 0
   579  00002F                     	ds	1
   580  000030                     _send:
   581                           	callstack 0
   582  000030                     	ds	1
   583  000031                     _mScore:
   584                           	callstack 0
   585  000031                     	ds	1
   586  000032                     _val:
   587                           	callstack 0
   588  000032                     	ds	1
   589  000033                     _LCDcolm:
   590                           	callstack 0
   591  000033                     	ds	1
   592  000034                     _LCDcol:
   593                           	callstack 0
   594  000034                     	ds	1
   595  000035                     _LCDrow:
   596                           	callstack 0
   597  000035                     	ds	1
   598  000036                     _timer:
   599                           	callstack 0
   600  000036                     	ds	1
   601  000037                     _ColumnAct:
   602                           	callstack 0
   603  000037                     	ds	1
   604  000038                     _RowAct:
   605                           	callstack 0
   606  000038                     	ds	1
   607  000039                     _Columns:
   608                           	callstack 0
   609  000039                     	ds	1
   610  00003A                     _Rows:
   611                           	callstack 0
   612  00003A                     	ds	1
   613  00003B                     _stateSMS:
   614                           	callstack 0
   615  00003B                     	ds	1
   616  00003C                     _state:
   617                           	callstack 0
   618  00003C                     	ds	1
   619  00003D                     _available:
   620                           	callstack 0
   621  00003D                     	ds	1
   622  00003E                     _numPresses:
   623                           	callstack 0
   624  00003E                     	ds	1
   625  00003F                     _pressed:
   626                           	callstack 0
   627  00003F                     	ds	1
   628  000040                     _previous:
   629                           	callstack 0
   630  000040                     	ds	1
   631  000041                     _currentKey:
   632                           	callstack 0
   633  000041                     	ds	1
   634  000042                     _timer_SMS:
   635                           	callstack 0
   636  000042                     	ds	1
   637  000043                     _timerBounces:
   638                           	callstack 0
   639  000043                     	ds	1
   640  000044                     _row:
   641                           	callstack 0
   642  000044                     	ds	1
   643  000045                     _counter:
   644                           	callstack 0
   645  000045                     	ds	1
   646                           
   647                           	psect	dataCOMRAM
   648  00006F                     __pdataCOMRAM:
   649                           	callstack 0
   650  00006F                     _minute:
   651                           	callstack 0
   652  00006F                     	ds	2
   653  000071                     menuMotor@state:
   654                           	callstack 0
   655  000071                     	ds	1
   656                           
   657                           	psect	bssBANK0
   658  000080                     __pbssBANK0:
   659                           	callstack 0
   660  000080                     _s_Timers:
   661                           	callstack 0
   662  000080                     	ds	75
   663  0000CB                     _mUser:
   664                           	callstack 0
   665  0000CB                     	ds	18
   666                           
   667                           	psect	bssBANK1
   668  000100                     __pbssBANK1:
   669                           	callstack 0
   670  000100                     _users:
   671                           	callstack 0
   672  000100                     	ds	144
   673                           
   674                           	psect	cstackCOMRAM
   675  000046                     __pcstackCOMRAM:
   676                           	callstack 0
   677  000046                     
   678                           ; 1 bytes @ 0x0
   679  000046                     	ds	1
   680  000047                     ??_RSI_High:
   681                           
   682                           ; 1 bytes @ 0x1
   683  000047                     	ds	4
   684  00004B                     ??_KeGetGenericValue:
   685  00004B                     ??_getFullValue:
   686  00004B                     ??_EscriuPrimeraOrdre:
   687  00004B                     ??_readUserData:
   688  00004B                     ??_CantaPartAlta:
   689  00004B                     ??_CantaPartBaixa:
   690  00004B                     ?_TiGetTics:
   691                           	callstack 0
   692  00004B                     ?___awmod:
   693                           	callstack 0
   694  00004B                     TiResetTics@Handle:
   695                           	callstack 0
   696  00004B                     _isPressed$530:
   697                           	callstack 0
   698  00004B                     JoSetMode@mode:
   699                           	callstack 0
   700  00004B                     SiSendChar@myByte:
   701                           	callstack 0
   702  00004B                     DaSaveScore@userScore:
   703                           	callstack 0
   704  00004B                     ___lbdiv@divisor:
   705                           	callstack 0
   706  00004B                     ___lbmod@divisor:
   707                           	callstack 0
   708  00004B                     ___awmod@dividend:
   709                           	callstack 0
   710  00004B                     DaSaveUser@regUser:
   711                           	callstack 0
   712                           
   713                           ; 18 bytes @ 0x5
   714  00004B                     	ds	1
   715  00004C                     ??_joystickMotor:
   716  00004C                     KeSetMode@menuMode:
   717                           	callstack 0
   718  00004C                     CantaPartAlta@c:
   719                           	callstack 0
   720  00004C                     CantaPartBaixa@c:
   721                           	callstack 0
   722  00004C                     EscriuPrimeraOrdre@ordre:
   723                           	callstack 0
   724  00004C                     ___lbdiv@dividend:
   725                           	callstack 0
   726  00004C                     ___lbmod@dividend:
   727                           	callstack 0
   728                           
   729                           ; 1 bytes @ 0x6
   730  00004C                     	ds	1
   731  00004D                     ??_TiGetTics:
   732  00004D                     CantaIR@IR:
   733                           	callstack 0
   734  00004D                     CantaData@Data:
   735                           	callstack 0
   736  00004D                     ___lbdiv@counter:
   737                           	callstack 0
   738  00004D                     ___lbmod@counter:
   739                           	callstack 0
   740  00004D                     ___awmod@divisor:
   741                           	callstack 0
   742                           
   743                           ; 2 bytes @ 0x7
   744  00004D                     	ds	1
   745  00004E                     ___lbdiv@quotient:
   746                           	callstack 0
   747  00004E                     ___lbmod@rem:
   748                           	callstack 0
   749                           
   750                           ; 1 bytes @ 0x8
   751  00004E                     	ds	1
   752  00004F                     TiGetTics@Handle:
   753                           	callstack 0
   754  00004F                     getFullValue@generic:
   755                           	callstack 0
   756  00004F                     ___awmod@counter:
   757                           	callstack 0
   758                           
   759                           ; 1 bytes @ 0x9
   760  00004F                     	ds	1
   761  000050                     ___awmod@sign:
   762                           	callstack 0
   763  000050                     TiGetTics@actual:
   764                           	callstack 0
   765                           
   766                           ; 2 bytes @ 0xA
   767  000050                     	ds	2
   768  000052                     ??_SMSMotor:
   769  000052                     ??_KeypadMotor:
   770  000052                     WaitForBusy@Busy:
   771                           	callstack 0
   772  000052                     Espera@Timer:
   773                           	callstack 0
   774                           
   775                           ; 2 bytes @ 0xC
   776  000052                     	ds	1
   777  000053                     LcGotoXY@Row:
   778                           	callstack 0
   779                           
   780                           ; 1 bytes @ 0xD
   781  000053                     	ds	1
   782  000054                     ??_LcGotoXY:
   783  000054                     Espera@ms:
   784                           	callstack 0
   785                           
   786                           ; 2 bytes @ 0xE
   787  000054                     	ds	2
   788  000056                     ??_Espera:
   789  000056                     _LcGotoXY$736:
   790                           	callstack 0
   791                           
   792                           ; 2 bytes @ 0x10
   793  000056                     	ds	1
   794  000057                     LcInit@columns:
   795                           	callstack 0
   796                           
   797                           ; 1 bytes @ 0x11
   798  000057                     	ds	1
   799  000058                     LcInit@rows:
   800                           	callstack 0
   801  000058                     LcGotoXY@Fisics:
   802                           	callstack 0
   803                           
   804                           ; 2 bytes @ 0x12
   805  000058                     	ds	1
   806  000059                     LcInit@i:
   807                           	callstack 0
   808                           
   809                           ; 2 bytes @ 0x13
   810  000059                     	ds	1
   811  00005A                     LcGotoXY@Column:
   812                           	callstack 0
   813                           
   814                           ; 1 bytes @ 0x14
   815  00005A                     	ds	1
   816  00005B                     ??_dataMotor:
   817  00005B                     LcPutChar@c:
   818                           	callstack 0
   819  00005B                     DaFindUser@logUser:
   820                           	callstack 0
   821                           
   822                           ; 18 bytes @ 0x15
   823  00005B                     	ds	1
   824  00005C                     ??_timeMotor:
   825  00005C                     displayMenu@row:
   826                           	callstack 0
   827                           
   828                           ; 1 bytes @ 0x16
   829  00005C                     	ds	1
   830  00005D                     ??_displayMenu:
   831  00005D                     
   832                           ; 1 bytes @ 0x17
   833  00005D                     	ds	4
   834  000061                     displayMenu@menuMode:
   835                           	callstack 0
   836                           
   837                           ; 1 bytes @ 0x1B
   838  000061                     	ds	12
   839  00006D                     ??_menuMotor:
   840  00006D                     
   841                           ; 1 bytes @ 0x27
   842  00006D                     	ds	2
   843  00006F                     
   844                           ; 1 bytes @ 0x29
   845 ;;
   846 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   847 ;;
   848 ;; *************** function _main *****************
   849 ;; Defined at:
   850 ;;		line 38 in file "main.c"
   851 ;; Parameters:    Size  Location     Type
   852 ;;		None
   853 ;; Auto vars:     Size  Location     Type
   854 ;;		None
   855 ;; Return value:  Size  Location     Type
   856 ;;                  1    wreg      void 
   857 ;; Registers used:
   858 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   859 ;; Tracked objects:
   860 ;;		On entry : 0/0
   861 ;;		On exit  : 0/0
   862 ;;		Unchanged: 0/0
   863 ;; Data sizes:     COMRAM   BANK0   BANK1
   864 ;;      Params:         0       0       0
   865 ;;      Locals:         0       0       0
   866 ;;      Temps:          0       0       0
   867 ;;      Totals:         0       0       0
   868 ;;Total ram usage:        0 bytes
   869 ;; Hardware stack levels required when called: 8
   870 ;; This function calls:
   871 ;;		_KeypadMotor
   872 ;;		_LcInit
   873 ;;		_SMSMotor
   874 ;;		_TiInitTimer
   875 ;;		_dataMotor
   876 ;;		_initData
   877 ;;		_initJoystick
   878 ;;		_initKeypad
   879 ;;		_initMenu
   880 ;;		_initSIO
   881 ;;		_initTime
   882 ;;		_joystickMotor
   883 ;;		_menuMotor
   884 ;;		_timeMotor
   885 ;; This function is called by:
   886 ;;		Startup code after reset
   887 ;; This function uses a non-reentrant model
   888 ;;
   889                           
   890                           	psect	text0
   891  00142A                     __ptext0:
   892                           	callstack 0
   893  00142A                     _main:
   894                           	callstack 23
   895                           
   896                           ;incstack = 0
   897  00142A  EC8A  F00A         	call	_TiInitTimer	;wreg free
   898  00142E  EC16  F00B         	call	_initJoystick	;wreg free
   899  001432  EC47  F00B         	call	_initKeypad	;wreg free
   900  001436  0E10               	movlw	16
   901  001438  6E57               	movwf	LcInit@columns^0,c
   902  00143A  0E02               	movlw	2
   903  00143C  ECAF  F006         	call	_LcInit
   904  001440  EC89  F00B         	call	_initSIO	;wreg free
   905  001444  ECC9  F00B         	call	_initMenu	;wreg free
   906  001448  ECC5  F00B         	call	_initTime	;wreg free
   907  00144C  ECD0  F008         	call	_initData	;wreg free
   908  001450                     l4838:
   909  001450  EC74  F007         	call	_SMSMotor	;wreg free
   910  001454  EC24  F006         	call	_KeypadMotor	;wreg free
   911  001458  EC1B  F000         	call	_menuMotor	;wreg free
   912  00145C  EC12  F007         	call	_joystickMotor	;wreg free
   913  001460  ECC2  F002         	call	_dataMotor	;wreg free
   914  001464  EC96  F005         	call	_timeMotor	;wreg free
   915  001468  D7F3               	goto	l4838
   916  00146A                     __end_of_main:
   917                           	callstack 0
   918                           
   919 ;; *************** function _timeMotor *****************
   920 ;; Defined at:
   921 ;;		line 21 in file "time.c"
   922 ;; Parameters:    Size  Location     Type
   923 ;;		None
   924 ;; Auto vars:     Size  Location     Type
   925 ;;		None
   926 ;; Return value:  Size  Location     Type
   927 ;;                  1    wreg      void 
   928 ;; Registers used:
   929 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   930 ;; Tracked objects:
   931 ;;		On entry : 0/0
   932 ;;		On exit  : 0/0
   933 ;;		Unchanged: 0/0
   934 ;; Data sizes:     COMRAM   BANK0   BANK1
   935 ;;      Params:         0       0       0
   936 ;;      Locals:         0       0       0
   937 ;;      Temps:          2       0       0
   938 ;;      Totals:         2       0       0
   939 ;;Total ram usage:        2 bytes
   940 ;; Hardware stack levels used: 1
   941 ;; Hardware stack levels required when called: 6
   942 ;; This function calls:
   943 ;;		_LcGotoXY
   944 ;;		_LcPutChar
   945 ;;		_TiGetTics
   946 ;;		_TiResetTics
   947 ;; This function is called by:
   948 ;;		_main
   949 ;; This function uses a non-reentrant model
   950 ;;
   951                           
   952                           	psect	text1
   953  000B2C                     __ptext1:
   954                           	callstack 0
   955  000B2C                     _timeMotor:
   956                           	callstack 24
   957                           
   958                           ;time.c: 22:     switch (state){
   959                           
   960                           ;incstack = 0
   961  000B2C  D06D               	goto	l4814
   962  000B2E                     l4750:
   963                           
   964                           ;time.c: 27:             if (TiGetTics(timer) >= 1200){
   965  000B2E  5024               	movf	_timer@time$F1561^0,w,c
   966  000B30  ECDF  F00A         	call	_TiGetTics
   967  000B34  BE4C               	btfsc	(?_TiGetTics+1)^0,7,c
   968  000B36  0012               	return	
   969  000B38  ECB3  F002         	call	PL62	;call to abstracted procedure
   970  000B3C  A0D8               	btfss	status,0,c
   971  000B3E  0012               	return	
   972                           
   973                           ;time.c: 28:                 TiResetTics(timer);
   974  000B40  5024               	movf	_timer@time$F1561^0,w,c
   975  000B42  EC64  F00B         	call	_TiResetTics
   976                           
   977                           ;time.c: 29:                 state = 2;
   978  000B46  0E02               	movlw	2
   979  000B48  6E23               	movwf	_state@time$F1562^0,c
   980                           
   981                           ;time.c: 30:                 LcGotoXY(0,1);
   982  000B4A  0E01               	movlw	1
   983  000B4C  6E53               	movwf	LcGotoXY@Row^0,c
   984  000B4E  0E00               	movlw	0
   985  000B50  ECCB  F007         	call	_LcGotoXY
   986                           
   987                           ;time.c: 31:                 if (second[1] == 0){
   988  000B54  501E               	movf	(_second+1)^0,w,c
   989  000B56  E115               	bnz	l4772
   990                           
   991                           ;time.c: 32:                     second[1] = 9;
   992  000B58  0E09               	movlw	9
   993  000B5A  6E1E               	movwf	(_second+1)^0,c
   994                           
   995                           ;time.c: 33:                     if (second[0] == 0){
   996  000B5C  501D               	movf	_second^0,w,c
   997  000B5E  E10F               	bnz	l4770
   998                           
   999                           ;time.c: 34:                         second[0] = 5;
  1000  000B60  0E05               	movlw	5
  1001  000B62  6E1D               	movwf	_second^0,c
  1002                           
  1003                           ;time.c: 35:                         if (minute[1] == 0){
  1004  000B64  5070               	movf	(_minute+1)^0,w,c
  1005  000B66  E109               	bnz	l4768
  1006                           
  1007                           ;time.c: 36:                             minute[1] = 9;
  1008  000B68  0E09               	movlw	9
  1009  000B6A  6E70               	movwf	(_minute+1)^0,c
  1010                           
  1011                           ;time.c: 37:                             if (minute[0] == 0){
  1012  000B6C  506F               	movf	_minute^0,w,c
  1013  000B6E  E103               	bnz	l4766
  1014  000B70                     u4250:
  1015                           
  1016                           ;time.c: 38:                                 state = 10;
  1017  000B70  0E0A               	movlw	10
  1018  000B72  6E23               	movwf	_state@time$F1562^0,c
  1019                           
  1020                           ;time.c: 39:                             }else{
  1021  000B74  0C0A               	retlw	10
  1022  000B76                     l4766:
  1023                           
  1024                           ;time.c: 40:                                 minute[0]--;
  1025  000B76  066F               	decf	_minute^0,f,c
  1026  000B78  0012               	return	
  1027  000B7A                     l4768:
  1028                           
  1029                           ;time.c: 43:                             minute[1]--;
  1030  000B7A  0670               	decf	(_minute+1)^0,f,c
  1031  000B7C  0012               	return	
  1032  000B7E                     l4770:
  1033                           
  1034                           ;time.c: 46:                         second[0]--;
  1035  000B7E  061D               	decf	_second^0,f,c
  1036  000B80  0012               	return	
  1037  000B82                     l4772:
  1038                           
  1039                           ;time.c: 49:                     second[1]--;
  1040  000B82  061E               	decf	(_second+1)^0,f,c
  1041  000B84  0012               	return	
  1042  000B86                     l4774:
  1043                           
  1044                           ;time.c: 55:             LcPutChar(minute[0]+'0');
  1045  000B86  506F               	movf	_minute^0,w,c
  1046  000B88  0F30               	addlw	48
  1047  000B8A  ECA1  F009         	call	_LcPutChar
  1048                           
  1049                           ;time.c: 56:             state = 3;
  1050  000B8E  0E03               	movlw	3
  1051  000B90  6E23               	movwf	_state@time$F1562^0,c
  1052                           
  1053                           ;time.c: 57:             break;
  1054  000B92  0C03               	retlw	3
  1055  000B94                     l4778:
  1056                           
  1057                           ;time.c: 60:             LcPutChar(minute[1]+'0');
  1058  000B94  5070               	movf	(_minute+1)^0,w,c
  1059  000B96  0F30               	addlw	48
  1060  000B98  ECA1  F009         	call	_LcPutChar
  1061                           
  1062                           ;time.c: 61:             state = 4;
  1063  000B9C  0E04               	movlw	4
  1064  000B9E  6E23               	movwf	_state@time$F1562^0,c
  1065                           
  1066                           ;time.c: 62:             break;
  1067  000BA0  0C04               	retlw	4
  1068  000BA2                     l4782:
  1069                           
  1070                           ;time.c: 65:             LcPutChar(':');
  1071  000BA2  0E3A               	movlw	58
  1072  000BA4  ECA1  F009         	call	_LcPutChar
  1073                           
  1074                           ;time.c: 66:             state = 5;
  1075  000BA8  0E05               	movlw	5
  1076  000BAA  6E23               	movwf	_state@time$F1562^0,c
  1077                           
  1078                           ;time.c: 67:             break;
  1079  000BAC  0C05               	retlw	5
  1080  000BAE                     l4786:
  1081                           
  1082                           ;time.c: 70:             LcPutChar(second[0]+'0');
  1083  000BAE  501D               	movf	_second^0,w,c
  1084  000BB0  0F30               	addlw	48
  1085  000BB2  ECA1  F009         	call	_LcPutChar
  1086                           
  1087                           ;time.c: 71:             state = 6;
  1088  000BB6  0E06               	movlw	6
  1089  000BB8  6E23               	movwf	_state@time$F1562^0,c
  1090                           
  1091                           ;time.c: 72:             break;
  1092  000BBA  0C06               	retlw	6
  1093  000BBC                     l4790:
  1094                           
  1095                           ;time.c: 75:             LcPutChar(second[1]+'0');
  1096  000BBC  501E               	movf	(_second+1)^0,w,c
  1097  000BBE  0F30               	addlw	48
  1098  000BC0  ECA1  F009         	call	_LcPutChar
  1099                           
  1100                           ;time.c: 76:             state = 1;
  1101  000BC4  0E01               	movlw	1
  1102  000BC6  6E23               	movwf	_state@time$F1562^0,c
  1103                           
  1104                           ;time.c: 77:             break;
  1105  000BC8  0C01               	retlw	1
  1106  000BCA                     l4794:
  1107                           
  1108                           ;time.c: 80:             LcPutChar(minute[0]+'0');
  1109  000BCA  506F               	movf	_minute^0,w,c
  1110  000BCC  0F30               	addlw	48
  1111  000BCE  ECA1  F009         	call	_LcPutChar
  1112                           
  1113                           ;time.c: 81:             state = 8;
  1114  000BD2  0E08               	movlw	8
  1115  000BD4  6E23               	movwf	_state@time$F1562^0,c
  1116                           
  1117                           ;time.c: 82:             break;
  1118  000BD6  0C08               	retlw	8
  1119  000BD8                     l4798:
  1120                           
  1121                           ;time.c: 85:             LcPutChar(minute[1]+'0');
  1122  000BD8  5070               	movf	(_minute+1)^0,w,c
  1123  000BDA  0F30               	addlw	48
  1124  000BDC  ECA1  F009         	call	_LcPutChar
  1125                           
  1126                           ;time.c: 86:             state = 9;
  1127  000BE0  0E09               	movlw	9
  1128  000BE2  6E23               	movwf	_state@time$F1562^0,c
  1129                           
  1130                           ;time.c: 87:             break;
  1131  000BE4  0C09               	retlw	9
  1132  000BE6                     l4802:
  1133                           
  1134                           ;time.c: 90:             LcPutChar(':');
  1135  000BE6  0E3A               	movlw	58
  1136  000BE8  ECA1  F009         	call	_LcPutChar
  1137  000BEC  D7C1               	goto	u4250
  1138  000BEE                     l4806:
  1139                           
  1140                           ;time.c: 95:             LcPutChar(second[0]+'0');
  1141  000BEE  501D               	movf	_second^0,w,c
  1142  000BF0  0F30               	addlw	48
  1143  000BF2  ECA1  F009         	call	_LcPutChar
  1144                           
  1145                           ;time.c: 96:             state = 11;
  1146  000BF6  0E0B               	movlw	11
  1147  000BF8  6E23               	movwf	_state@time$F1562^0,c
  1148                           
  1149                           ;time.c: 97:             break;
  1150  000BFA  0C0B               	retlw	11
  1151  000BFC                     l4810:
  1152                           
  1153                           ;time.c: 100:             LcPutChar(second[1]+'0');
  1154  000BFC  501E               	movf	(_second+1)^0,w,c
  1155  000BFE  0F30               	addlw	48
  1156  000C00  ECA1  F009         	call	_LcPutChar
  1157                           
  1158                           ;time.c: 101:             state = 0;
  1159  000C04  6A23               	clrf	_state@time$F1562^0,c
  1160                           
  1161                           ;time.c: 102:     }
  1162  000C06  0012               	return	
  1163  000C08                     l4814:
  1164  000C08  5023               	movf	_state@time$F1562^0,w,c
  1165  000C0A  6E5C               	movwf	??_timeMotor^0,c
  1166  000C0C  6A5D               	clrf	(??_timeMotor+1)^0,c
  1167                           
  1168                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1169                           ; Switch size 1, requested type "space"
  1170                           ; Number of cases is 1, Range of values is 0 to 0
  1171                           ; switch strategies available:
  1172                           ; Name         Instructions Cycles
  1173                           ; simple_byte            4     3 (average)
  1174                           ;	Chosen strategy is simple_byte
  1175  000C0E  505D               	movf	(??_timeMotor+1)^0,w,c
  1176  000C10  A4D8               	btfss	status,2,c
  1177  000C12  0012               	return	
  1178                           
  1179                           ; Switch size 1, requested type "space"
  1180                           ; Number of cases is 12, Range of values is 0 to 11
  1181                           ; switch strategies available:
  1182                           ; Name         Instructions Cycles
  1183                           ; simple_byte           37    19 (average)
  1184                           ;	Chosen strategy is simple_byte
  1185  000C14  505C               	movf	??_timeMotor^0,w,c
  1186  000C16  B4D8               	btfsc	status,2,c
  1187  000C18  0012               	return	
  1188  000C1A  0A01               	xorlw	1	; case 1
  1189  000C1C  E088               	bz	l4750
  1190  000C1E  0A03               	xorlw	3	; case 2
  1191  000C20  E0B2               	bz	l4774
  1192  000C22  0A01               	xorlw	1	; case 3
  1193  000C24  E0B7               	bz	l4778
  1194  000C26  0A07               	xorlw	7	; case 4
  1195  000C28  E0BC               	bz	l4782
  1196  000C2A  0A01               	xorlw	1	; case 5
  1197  000C2C  E0C0               	bz	l4786
  1198  000C2E  0A03               	xorlw	3	; case 6
  1199  000C30  E0C5               	bz	l4790
  1200  000C32  0A01               	xorlw	1	; case 7
  1201  000C34  E0CA               	bz	l4794
  1202  000C36  0A0F               	xorlw	15	; case 8
  1203  000C38  E0CF               	bz	l4798
  1204  000C3A  0A01               	xorlw	1	; case 9
  1205  000C3C  E0D4               	bz	l4802
  1206  000C3E  0A03               	xorlw	3	; case 10
  1207  000C40  E0D6               	bz	l4806
  1208  000C42  0A01               	xorlw	1	; case 11
  1209  000C44  E0DB               	bz	l4810
  1210  000C46  0012               	return		;funcret
  1211  000C48                     __end_of_timeMotor:
  1212                           	callstack 0
  1213                           
  1214 ;; *************** function _menuMotor *****************
  1215 ;; Defined at:
  1216 ;;		line 29 in file "Menu.c"
  1217 ;; Parameters:    Size  Location     Type
  1218 ;;		None
  1219 ;; Auto vars:     Size  Location     Type
  1220 ;;		None
  1221 ;; Return value:  Size  Location     Type
  1222 ;;                  1    wreg      void 
  1223 ;; Registers used:
  1224 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1225 ;; Tracked objects:
  1226 ;;		On entry : 0/0
  1227 ;;		On exit  : 0/0
  1228 ;;		Unchanged: 0/0
  1229 ;; Data sizes:     COMRAM   BANK0   BANK1
  1230 ;;      Params:         0       0       0
  1231 ;;      Locals:         0       0       0
  1232 ;;      Temps:          2       0       0
  1233 ;;      Totals:         2       0       0
  1234 ;;Total ram usage:        2 bytes
  1235 ;; Hardware stack levels used: 1
  1236 ;; Hardware stack levels required when called: 7
  1237 ;; This function calls:
  1238 ;;		_DaFindUser
  1239 ;;		_DaGetIdle
  1240 ;;		_DaGetStatus
  1241 ;;		_DaSaveScore
  1242 ;;		_DaSaveUser
  1243 ;;		_JoDirection
  1244 ;;		_JoMoved
  1245 ;;		_JoSetMode
  1246 ;;		_KeGetCharValue
  1247 ;;		_KeGetGenericValue
  1248 ;;		_KeSetMode
  1249 ;;		_LcClear
  1250 ;;		_LcCursorOff
  1251 ;;		_LcCursorOn
  1252 ;;		_LcGotoXY
  1253 ;;		_LcPutChar
  1254 ;;		_SiIsAvailable
  1255 ;;		_SiReadByte
  1256 ;;		_SiRecievedByte
  1257 ;;		_SiSendChar
  1258 ;;		_TiGetTics
  1259 ;;		_TiResetTics
  1260 ;;		___lbdiv
  1261 ;;		___lbmod
  1262 ;;		_displayMenu
  1263 ;;		_displayTimeRemaining
  1264 ;;		_getPresses
  1265 ;;		_isPressed
  1266 ;;		_startTimer
  1267 ;;		_stopTimer
  1268 ;; This function is called by:
  1269 ;;		_main
  1270 ;; This function uses a non-reentrant model
  1271 ;;
  1272                           
  1273                           	psect	text2
  1274  000036                     __ptext2:
  1275                           	callstack 0
  1276  000036                     _menuMotor:
  1277                           	callstack 23
  1278                           
  1279                           ;Menu.c: 30:     static char state = 1;;Menu.c: 31:     switch (state){
  1280                           
  1281                           ;incstack = 0
  1282  000036  D23F               	goto	l4376
  1283  000038                     l4042:
  1284                           
  1285                           ;Menu.c: 33:             displayMenu(0,0);
  1286  000038  0E00               	movlw	0
  1287  00003A  6E5C               	movwf	displayMenu@row^0,c
  1288  00003C  EC94  F004         	call	_displayMenu
  1289                           
  1290                           ;Menu.c: 34:             if (LCDrow == 2){
  1291  000040  0E02               	movlw	2
  1292  000042  1835               	xorwf	_LCDrow^0,w,c
  1293  000044  A4D8               	btfss	status,2,c
  1294  000046  0012               	return	
  1295                           
  1296                           ;Menu.c: 35:                 LcCursorOff();
  1297  000048  ECAB  F00B         	call	_LcCursorOff	;wreg free
  1298                           
  1299                           ;Menu.c: 36:                 KeSetMode(0);
  1300  00004C  0E00               	movlw	0
  1301  00004E  ECF2  F00A         	call	_KeSetMode
  1302                           
  1303                           ;Menu.c: 37:                 state = 2;
  1304  000052  0E02               	movlw	2
  1305  000054  6E71               	movwf	menuMotor@state^0,c
  1306  000056  0C02               	retlw	2
  1307  000058                     l4050:
  1308                           
  1309                           ;Menu.c: 41:             if (isPressed()){
  1310  000058  EC72  F00B         	call	_isPressed	;wreg free
  1311  00005C  0900               	iorlw	0
  1312  00005E  B4D8               	btfsc	status,2,c
  1313  000060  0012               	return	
  1314                           
  1315                           ;Menu.c: 42:                 val = KeGetGenericValue() - '0';
  1316  000062  ECA0  F00A         	call	_KeGetGenericValue	;wreg free
  1317  000066  0FD0               	addlw	208
  1318  000068  6E32               	movwf	_val^0,c
  1319                           
  1320                           ;Menu.c: 43:                 if (val == 1||val == 2){
  1321  00006A  0432               	decf	_val^0,w,c
  1322  00006C  E004               	bz	u3350
  1323  00006E  0E02               	movlw	2
  1324  000070  1832               	xorwf	_val^0,w,c
  1325  000072  A4D8               	btfss	status,2,c
  1326  000074  0012               	return	
  1327  000076                     u3350:
  1328                           
  1329                           ;Menu.c: 44:                     LcClear();
  1330  000076  EC7E  F00B         	call	_LcClear	;wreg free
  1331                           
  1332                           ;Menu.c: 45:                     LcGotoXY(0,0);
  1333  00007A  0E00               	movlw	0
  1334  00007C  6A53               	clrf	LcGotoXY@Row^0,c
  1335  00007E  ECCB  F007         	call	_LcGotoXY
  1336                           
  1337                           ;Menu.c: 46:                     KeSetMode(1);
  1338  000082  0E01               	movlw	1
  1339  000084  ECF2  F00A         	call	_KeSetMode
  1340                           
  1341                           ;Menu.c: 47:                     LCDcol = LCDrow = 0;
  1342  000088  6A35               	clrf	_LCDrow^0,c
  1343  00008A  6A34               	clrf	_LCDcol^0,c
  1344                           
  1345                           ;Menu.c: 48:                     state = 3;
  1346  00008C  0E03               	movlw	3
  1347  00008E  6E71               	movwf	menuMotor@state^0,c
  1348  000090  0C03               	retlw	3
  1349  000092                     l4064:
  1350                           
  1351                           ;Menu.c: 54:             displayMenu(1,0);
  1352  000092  0E00               	movlw	0
  1353  000094  6E5C               	movwf	displayMenu@row^0,c
  1354  000096  0E01               	movlw	1
  1355  000098  EC94  F004         	call	_displayMenu
  1356                           
  1357                           ;Menu.c: 55:             if (LCDrow == 2){
  1358  00009C  0E02               	movlw	2
  1359  00009E  1835               	xorwf	_LCDrow^0,w,c
  1360  0000A0  A4D8               	btfss	status,2,c
  1361  0000A2  0012               	return	
  1362                           
  1363                           ;Menu.c: 56:                 LCDrow = 0;
  1364  0000A4  6A35               	clrf	_LCDrow^0,c
  1365                           
  1366                           ;Menu.c: 57:                 LCDcol = 5;
  1367  0000A6  0E05               	movlw	5
  1368  0000A8  6E34               	movwf	_LCDcol^0,c
  1369                           
  1370                           ;Menu.c: 58:                 LcGotoXY(LCDcol,LCDrow);
  1371  0000AA  DA68               	call	PL70	;call to abstracted procedure
  1372  0000AC  ECCB  F007         	call	_LcGotoXY
  1373                           
  1374                           ;Menu.c: 59:                 LcCursorOn();
  1375  0000B0  ECA6  F00B         	call	_LcCursorOn	;wreg free
  1376                           
  1377                           ;Menu.c: 60:                 state = 4;
  1378  0000B4  0E04               	movlw	4
  1379  0000B6  6E71               	movwf	menuMotor@state^0,c
  1380  0000B8  0C04               	retlw	4
  1381  0000BA                     l4076:
  1382                           
  1383                           ;Menu.c: 64:             if (LCDcol >= 12 && TiGetTics(timer) >= 1200){
  1384  0000BA  0E0B               	movlw	11
  1385  0000BC  6434               	cpfsgt	_LCDcol^0,c
  1386  0000BE  D00A               	goto	l4082
  1387  0000C0  5036               	movf	_timer^0,w,c
  1388  0000C2  ECDF  F00A         	call	_TiGetTics
  1389  0000C6  BE4C               	btfsc	(?_TiGetTics+1)^0,7,c
  1390  0000C8  D005               	goto	l4082
  1391  0000CA  DA4D               	call	PL62	;call to abstracted procedure
  1392  0000CC  E303               	bnc	l4082
  1393  0000CE                     u3380:
  1394                           
  1395                           ;Menu.c: 65:                 state = 5;
  1396  0000CE  0E05               	movlw	5
  1397  0000D0  6E71               	movwf	menuMotor@state^0,c
  1398                           
  1399                           ;Menu.c: 66:             }else if (isPressed()){
  1400  0000D2  0C05               	retlw	5
  1401  0000D4                     l4082:
  1402  0000D4  EC72  F00B         	call	_isPressed	;wreg free
  1403  0000D8  0900               	iorlw	0
  1404  0000DA  B4D8               	btfsc	status,2,c
  1405  0000DC  0012               	return	
  1406                           
  1407                           ;Menu.c: 67:                 TiResetTics(timer);
  1408  0000DE  5036               	movf	_timer^0,w,c
  1409  0000E0  EC64  F00B         	call	_TiResetTics
  1410                           
  1411                           ;Menu.c: 68:                 if (getPresses() == 2){
  1412  0000E4  ECD5  F00B         	call	_getPresses	;wreg free
  1413  0000E8  0A02               	xorlw	2
  1414  0000EA  E104               	bnz	l4092
  1415                           
  1416                           ;Menu.c: 69:                     LcGotoXY(LCDcol,LCDrow);
  1417  0000EC  DA47               	call	PL70	;call to abstracted procedure
  1418  0000EE  ECCB  F007         	call	_LcGotoXY
  1419                           
  1420                           ;Menu.c: 70:                     LCDcol--;
  1421  0000F2  0634               	decf	_LCDcol^0,f,c
  1422  0000F4                     l4092:
  1423                           
  1424                           ;Menu.c: 72:                 if (KeGetGenericValue() != '#'){
  1425  0000F4  ECA0  F00A         	call	_KeGetGenericValue	;wreg free
  1426  0000F8  0A23               	xorlw	35
  1427  0000FA  E0E9               	bz	u3380
  1428                           
  1429                           ;Menu.c: 73:                     mUser.username[LCDcol-4] = KeGetCharValue();
  1430  0000FC  DA2A               	call	PL58	;call to abstracted procedure
  1431  0000FE  ECB5  F00B         	call	_KeGetCharValue	;wreg free
  1432  000102  6EDF               	movwf	indf2,c
  1433                           
  1434                           ;Menu.c: 74:                     LcPutChar(mUser.username[LCDcol-4]);
  1435  000104  DA26               	call	PL58	;call to abstracted procedure
  1436  000106  50DF               	movf	indf2,w,c
  1437  000108  ECA1  F009         	call	_LcPutChar
  1438  00010C                     l4098:
  1439                           
  1440                           ;Menu.c: 75:                     LCDcol++;
  1441  00010C  2A34               	incf	_LCDcol^0,f,c
  1442                           
  1443                           ;Menu.c: 79:                 } else {
  1444  00010E  0012               	return	
  1445  000110                     l4102:
  1446                           
  1447                           ;Menu.c: 87:             mUser.username[LCDcol-4] = '\0';
  1448  000110  DA20               	call	PL58	;call to abstracted procedure
  1449  000112  6ADF               	clrf	indf2,c
  1450                           
  1451                           ;Menu.c: 88:             LCDrow = 1;
  1452  000114  0E01               	movlw	1
  1453  000116  6E35               	movwf	_LCDrow^0,c
  1454                           
  1455                           ;Menu.c: 89:             LCDcol = 5;
  1456  000118  0E05               	movlw	5
  1457  00011A  6E34               	movwf	_LCDcol^0,c
  1458                           
  1459                           ;Menu.c: 90:             KeSetMode(1);
  1460  00011C  0E01               	movlw	1
  1461  00011E  ECF2  F00A         	call	_KeSetMode
  1462                           
  1463                           ;Menu.c: 91:             LcGotoXY(LCDcol,LCDrow);
  1464  000122  DA2C               	call	PL70	;call to abstracted procedure
  1465  000124  ECCB  F007         	call	_LcGotoXY
  1466                           
  1467                           ;Menu.c: 92:             state = 6;
  1468  000128  0E06               	movlw	6
  1469  00012A  6E71               	movwf	menuMotor@state^0,c
  1470                           
  1471                           ;Menu.c: 93:             break;
  1472  00012C  0C06               	retlw	6
  1473  00012E                     l4114:
  1474                           
  1475                           ;Menu.c: 95:             if (isPressed()){
  1476  00012E  EC72  F00B         	call	_isPressed	;wreg free
  1477  000132  0900               	iorlw	0
  1478  000134  B4D8               	btfsc	status,2,c
  1479  000136  0012               	return	
  1480                           
  1481                           ;Menu.c: 96:                 if (getPresses() == 2){
  1482  000138  ECD5  F00B         	call	_getPresses	;wreg free
  1483  00013C  0A02               	xorlw	2
  1484  00013E  E104               	bnz	l4122
  1485                           
  1486                           ;Menu.c: 97:                     LcGotoXY(LCDcol,LCDrow);
  1487  000140  DA1D               	call	PL70	;call to abstracted procedure
  1488  000142  ECCB  F007         	call	_LcGotoXY
  1489                           
  1490                           ;Menu.c: 98:                     LCDcol--;
  1491  000146  0634               	decf	_LCDcol^0,f,c
  1492  000148                     l4122:
  1493                           
  1494                           ;Menu.c: 101:                 if (KeGetGenericValue() != '#'){
  1495  000148  ECA0  F00A         	call	_KeGetGenericValue	;wreg free
  1496  00014C  0A23               	xorlw	35
  1497  00014E  E009               	bz	l4130
  1498                           
  1499                           ;Menu.c: 102:                     mUser.password[LCDcol-4] = KeGetCharValue();
  1500  000150  DA05               	call	PL60	;call to abstracted procedure
  1501  000152  ECB5  F00B         	call	_KeGetCharValue	;wreg free
  1502  000156  6EDF               	movwf	indf2,c
  1503                           
  1504                           ;Menu.c: 103:                     LcPutChar(mUser.password[LCDcol-4]);
  1505  000158  DA01               	call	PL60	;call to abstracted procedure
  1506  00015A  50DF               	movf	indf2,w,c
  1507  00015C  ECA1  F009         	call	_LcPutChar
  1508  000160  D7D5               	goto	l4098
  1509  000162                     l4130:
  1510                           
  1511                           ;Menu.c: 106:                     mUser.password[LCDcol-4] = '\0';
  1512  000162  D9FC               	call	PL60	;call to abstracted procedure
  1513  000164  6ADF               	clrf	indf2,c
  1514                           
  1515                           ;Menu.c: 107:                     state = 7;
  1516  000166  0E07               	movlw	7
  1517  000168  6E71               	movwf	menuMotor@state^0,c
  1518  00016A  0C07               	retlw	7
  1519  00016C                     l4134:
  1520                           
  1521                           ;Menu.c: 113:             if (val == 1){
  1522  00016C  0432               	decf	_val^0,w,c
  1523  00016E  E10C               	bnz	l4138
  1524                           
  1525                           ;Menu.c: 114:                 DaFindUser(mUser);
  1526  000170  EE20  F0CB         	lfsr	2,_mUser
  1527  000174  EE00  F05B         	lfsr	0,DaFindUser@logUser
  1528  000178  0E11               	movlw	17
  1529  00017A                     u3461:
  1530  00017A  CFDB FFEB          	movff	plusw2,plusw0
  1531  00017E  06E8               	decf	wreg,f,c
  1532  000180  E2FC               	bc	u3461
  1533  000182  EC04  F00B         	call	_DaFindUser	;wreg free
  1534                           
  1535                           ;Menu.c: 116:             } else {
  1536  000186  D00B               	goto	l4140
  1537  000188                     l4138:
  1538                           
  1539                           ;Menu.c: 117:                 DaSaveUser(mUser);
  1540  000188  EE20  F0CB         	lfsr	2,_mUser
  1541  00018C  EE00  F04B         	lfsr	0,DaSaveUser@regUser
  1542  000190  0E11               	movlw	17
  1543  000192                     u3471:
  1544  000192  CFDB FFEB          	movff	plusw2,plusw0
  1545  000196  06E8               	decf	wreg,f,c
  1546  000198  E2FC               	bc	u3471
  1547  00019A  EC27  F00B         	call	_DaSaveUser	;wreg free
  1548  00019E                     l4140:
  1549                           
  1550                           ;Menu.c: 119:             state = 8;
  1551  00019E  0E08               	movlw	8
  1552  0001A0  6E71               	movwf	menuMotor@state^0,c
  1553                           
  1554                           ;Menu.c: 120:             break;
  1555  0001A2  0C08               	retlw	8
  1556  0001A4                     l4142:
  1557                           
  1558                           ;Menu.c: 122:             if (DaGetIdle()){
  1559  0001A4  ECBD  F00B         	call	_DaGetIdle	;wreg free
  1560  0001A8  0900               	iorlw	0
  1561  0001AA  B4D8               	btfsc	status,2,c
  1562  0001AC  0012               	return	
  1563                           
  1564                           ;Menu.c: 123:                 if (val == 1){
  1565  0001AE  0432               	decf	_val^0,w,c
  1566  0001B0  E112               	bnz	l4158
  1567                           
  1568                           ;Menu.c: 124:                     KeSetMode(0);
  1569  0001B2  0E00               	movlw	0
  1570  0001B4  ECF2  F00A         	call	_KeSetMode
  1571                           
  1572                           ;Menu.c: 125:                     if (DaGetStatus() == 0){
  1573  0001B8  ECDD  F00B         	call	_DaGetStatus	;wreg free
  1574  0001BC  0900               	iorlw	0
  1575  0001BE  E104               	bnz	l4154
  1576                           
  1577                           ;Menu.c: 127:                         state = 9;
  1578  0001C0  0E09               	movlw	9
  1579  0001C2  6E71               	movwf	menuMotor@state^0,c
  1580                           
  1581                           ;Menu.c: 128:                         val =0;
  1582  0001C4  6A32               	clrf	_val^0,c
  1583                           
  1584                           ;Menu.c: 129:                     } else if (DaGetStatus() == 1){
  1585  0001C6  D01B               	goto	l4172
  1586  0001C8                     l4154:
  1587  0001C8  ECDD  F00B         	call	_DaGetStatus	;wreg free
  1588  0001CC  06E8               	decf	wreg,f,c
  1589  0001CE  E117               	bnz	l4172
  1590  0001D0                     u3510:
  1591                           
  1592                           ;Menu.c: 130:                         state = 1;
  1593  0001D0  0E01               	movlw	1
  1594  0001D2  6E71               	movwf	menuMotor@state^0,c
  1595  0001D4  D014               	goto	l4172
  1596  0001D6                     l4158:
  1597                           
  1598                           ;Menu.c: 134:                     if (DaGetStatus() == 3){
  1599  0001D6  ECDD  F00B         	call	_DaGetStatus	;wreg free
  1600  0001DA  0A03               	xorlw	3
  1601  0001DC  E108               	bnz	l4166
  1602                           
  1603                           ;Menu.c: 135:                         KeSetMode(1);
  1604  0001DE  0E01               	movlw	1
  1605  0001E0  ECF2  F00A         	call	_KeSetMode
  1606                           
  1607                           ;Menu.c: 136:                         state = 3;
  1608  0001E4  0E03               	movlw	3
  1609  0001E6  6E71               	movwf	menuMotor@state^0,c
  1610                           
  1611                           ;Menu.c: 137:                         val = 1;
  1612  0001E8  0E01               	movlw	1
  1613  0001EA  6E32               	movwf	_val^0,c
  1614                           
  1615                           ;Menu.c: 138:                     } else if (DaGetStatus() == 4){
  1616  0001EC  D008               	goto	l4172
  1617  0001EE                     l4166:
  1618  0001EE  ECDD  F00B         	call	_DaGetStatus	;wreg free
  1619  0001F2  0A04               	xorlw	4
  1620  0001F4  E104               	bnz	l4172
  1621                           
  1622                           ;Menu.c: 139:                         KeSetMode(0);
  1623  0001F6  0E00               	movlw	0
  1624  0001F8  ECF2  F00A         	call	_KeSetMode
  1625  0001FC  D7E9               	goto	u3510
  1626  0001FE                     l4172:
  1627                           
  1628                           ;Menu.c: 144:                 LcClear();
  1629  0001FE  EC7E  F00B         	call	_LcClear	;wreg free
  1630                           
  1631                           ;Menu.c: 145:                 LcGotoXY(0,0);
  1632  000202  0E00               	movlw	0
  1633  000204  6A53               	clrf	LcGotoXY@Row^0,c
  1634  000206  ECCB  F007         	call	_LcGotoXY
  1635  00020A                     l4176:
  1636                           
  1637                           ;Menu.c: 146:                 LCDcol = LCDrow = 0;
  1638  00020A  6A35               	clrf	_LCDrow^0,c
  1639  00020C  6A34               	clrf	_LCDcol^0,c
  1640  00020E  0012               	return	
  1641  000210                     l4178:
  1642                           
  1643                           ;Menu.c: 151:             displayMenu(2,val);
  1644  000210  C032  F05C         	movff	_val,displayMenu@row
  1645  000214  0E02               	movlw	2
  1646  000216  EC94  F004         	call	_displayMenu
  1647                           
  1648                           ;Menu.c: 152:             if (LCDrow == 2 || LCDrow+val >= 4){
  1649  00021A  0E02               	movlw	2
  1650  00021C  1835               	xorwf	_LCDrow^0,w,c
  1651  00021E  E00F               	bz	u3550
  1652  000220  5032               	movf	_val^0,w,c
  1653  000222  C035  F06D         	movff	_LCDrow,??_menuMotor
  1654  000226  6A6E               	clrf	(??_menuMotor+1)^0,c
  1655  000228  266D               	addwf	??_menuMotor^0,f,c
  1656  00022A  0E00               	movlw	0
  1657  00022C  226E               	addwfc	(??_menuMotor+1)^0,f,c
  1658  00022E  BE6E               	btfsc	(??_menuMotor+1)^0,7,c
  1659  000230  0C00               	retlw	0
  1660  000232  506E               	movf	(??_menuMotor+1)^0,w,c
  1661  000234  E104               	bnz	u3550
  1662  000236  0E04               	movlw	4
  1663  000238  5C6D               	subwf	??_menuMotor^0,w,c
  1664  00023A  A0D8               	btfss	status,0,c
  1665  00023C  0012               	return	
  1666  00023E                     u3550:
  1667                           
  1668                           ;Menu.c: 153:                 LcCursorOff();
  1669  00023E  ECAB  F00B         	call	_LcCursorOff	;wreg free
  1670                           
  1671                           ;Menu.c: 154:                 state = 10;
  1672  000242  0E0A               	movlw	10
  1673  000244  6E71               	movwf	menuMotor@state^0,c
  1674  000246  0C0A               	retlw	10
  1675  000248                     l4188:
  1676                           
  1677                           ;Menu.c: 158:             if (!JoMoved()){
  1678  000248  ECD9  F00B         	call	_JoMoved	;wreg free
  1679  00024C  0900               	iorlw	0
  1680  00024E  A4D8               	btfss	status,2,c
  1681  000250  0012               	return	
  1682                           
  1683                           ;Menu.c: 159:                 state = 11;
  1684  000252  0E0B               	movlw	11
  1685  000254  D099               	goto	L1
  1686  000256                     l4192:
  1687                           
  1688                           ;Menu.c: 160:                 TiResetTics(timer);
  1689  000256  5036               	movf	_timer^0,w,c
  1690  000258  EF64  F00B         	goto	_TiResetTics
  1691  00025C                     l4194:
  1692                           
  1693                           ;Menu.c: 164:             if (TiGetTics(timer) >= 600){
  1694  00025C  5036               	movf	_timer^0,w,c
  1695  00025E  ECDF  F00A         	call	_TiGetTics
  1696  000262  BE4C               	btfsc	(?_TiGetTics+1)^0,7,c
  1697  000264  D016               	goto	l4206
  1698  000266  0E58               	movlw	88
  1699  000268  5C4B               	subwf	?_TiGetTics^0,w,c
  1700  00026A  0E02               	movlw	2
  1701  00026C  584C               	subwfb	(?_TiGetTics+1)^0,w,c
  1702  00026E  E311               	bnc	l4206
  1703                           
  1704                           ;Menu.c: 165:                 LCDcolm++;
  1705  000270  2A33               	incf	_LCDcolm^0,f,c
  1706                           
  1707                           ;Menu.c: 166:                 LCDcolm = LCDcolm % MAINMENUSIZE[2];
  1708  000272  0E56               	movlw	low (_MAINMENUSIZE+2)
  1709  000274  6EF6               	movwf	tblptrl,c
  1710  000276  0E1F               	movlw	high (_MAINMENUSIZE+2)
  1711  000278  6EF7               	movwf	tblptrh,c
  1712  00027A                     	if	0	;tblptru may be non-zero
  1713  00027A                     	endif
  1714  00027A                     	if	0	;tblptru may be non-zero
  1715  00027A                     	endif
  1716  00027A  0008               	tblrd		*
  1717  00027C  CFF5 F04B          	movff	tablat,___lbmod@divisor
  1718  000280  5033               	movf	_LCDcolm^0,w,c
  1719  000282  ECCC  F00A         	call	___lbmod
  1720  000286  6E33               	movwf	_LCDcolm^0,c
  1721  000288                     l4200:
  1722                           
  1723                           ;Menu.c: 167:                 state = 9;
  1724  000288  0E09               	movlw	9
  1725  00028A  6E71               	movwf	menuMotor@state^0,c
  1726  00028C                     l4202:
  1727                           
  1728                           ;Menu.c: 168:                 LcClear();
  1729  00028C  EC7E  F00B         	call	_LcClear	;wreg free
  1730  000290  D7BC               	goto	l4176
  1731  000292                     l4206:
  1732  000292  ECD9  F00B         	call	_JoMoved	;wreg free
  1733  000296  0900               	iorlw	0
  1734  000298  E011               	bz	l4226
  1735                           
  1736                           ;Menu.c: 171:                 if (JoDirection() == 'S' && val < 4){
  1737  00029A  ECDB  F00B         	call	_JoDirection	;wreg free
  1738  00029E  0A53               	xorlw	83
  1739  0002A0  E105               	bnz	l4214
  1740  0002A2  0E04               	movlw	4
  1741  0002A4  6032               	cpfslt	_val^0,c
  1742  0002A6  D002               	goto	l4214
  1743                           
  1744                           ;Menu.c: 172:                     val++;
  1745  0002A8  2A32               	incf	_val^0,f,c
  1746                           
  1747                           ;Menu.c: 173:                 } else if(JoDirection() == 'W' && val > 0){
  1748  0002AA  D7EE               	goto	l4200
  1749  0002AC                     l4214:
  1750  0002AC  ECDB  F00B         	call	_JoDirection	;wreg free
  1751  0002B0  0A57               	xorlw	87
  1752  0002B2  E1EA               	bnz	l4200
  1753  0002B4  5032               	movf	_val^0,w,c
  1754  0002B6  E0E8               	bz	l4200
  1755                           
  1756                           ;Menu.c: 174:                     val--;
  1757  0002B8  0632               	decf	_val^0,f,c
  1758  0002BA  D7E6               	goto	l4200
  1759  0002BC                     l4226:
  1760  0002BC  EC72  F00B         	call	_isPressed	;wreg free
  1761  0002C0  0900               	iorlw	0
  1762  0002C2  B4D8               	btfsc	status,2,c
  1763  0002C4  0012               	return	
  1764  0002C6  ECA0  F00A         	call	_KeGetGenericValue	;wreg free
  1765  0002CA  0A23               	xorlw	35
  1766  0002CC  A4D8               	btfss	status,2,c
  1767  0002CE  0012               	return	
  1768                           
  1769                           ;Menu.c: 180:                 if (val == 0){
  1770  0002D0  5032               	movf	_val^0,w,c
  1771  0002D2  E104               	bnz	l4236
  1772                           
  1773                           ;Menu.c: 181:                     val = 0;
  1774  0002D4  6A32               	clrf	_val^0,c
  1775                           
  1776                           ;Menu.c: 182:                     state = 12;
  1777  0002D6  0E0C               	movlw	12
  1778  0002D8  6E71               	movwf	menuMotor@state^0,c
  1779                           
  1780                           ;Menu.c: 183:                 }else {
  1781  0002DA  0C0C               	retlw	12
  1782  0002DC                     l4236:
  1783                           
  1784                           ;Menu.c: 184:                    state = (val+1)*20;
  1785  0002DC  2832               	incf	_val^0,w,c
  1786  0002DE  0D14               	mullw	20
  1787  0002E0  CFF3 F071          	movff	prodl,menuMotor@state
  1788  0002E4  0012               	return	
  1789  0002E6                     l4238:
  1790                           
  1791                           ;Menu.c: 194:             if (SiIsAvailable()){
  1792  0002E6  ECD0  F00B         	call	_SiIsAvailable	;wreg free
  1793  0002EA  0900               	iorlw	0
  1794  0002EC  B4D8               	btfsc	status,2,c
  1795  0002EE  0012               	return	
  1796                           
  1797                           ;Menu.c: 195:                 SiSendChar(mUser.username[val]);
  1798  0002F0  D93F               	call	PL68	;call to abstracted procedure
  1799  0002F2  ECC1  F00B         	call	_SiSendChar
  1800                           
  1801                           ;Menu.c: 196:                 if (mUser.username[val] == '\0'){
  1802  0002F6  D93C               	call	PL68	;call to abstracted procedure
  1803  0002F8  E103               	bnz	l4246
  1804                           
  1805                           ;Menu.c: 197:                     state = 13;
  1806  0002FA  0E0D               	movlw	13
  1807  0002FC  6E71               	movwf	menuMotor@state^0,c
  1808                           
  1809                           ;Menu.c: 198:                 } else {
  1810  0002FE  0C0D               	retlw	13
  1811  000300                     l4246:
  1812                           
  1813                           ;Menu.c: 199:                     val++;
  1814  000300  2A32               	incf	_val^0,f,c
  1815  000302  0012               	return	
  1816  000304                     l4248:
  1817                           
  1818                           ;Menu.c: 204:             if (SiRecievedByte()){
  1819  000304  ECCD  F00B         	call	_SiRecievedByte	;wreg free
  1820  000308  0900               	iorlw	0
  1821  00030A  B4D8               	btfsc	status,2,c
  1822  00030C  0012               	return	
  1823                           
  1824                           ;Menu.c: 205:                 val = SiReadByte();
  1825  00030E  ECD7  F00B         	call	_SiReadByte	;wreg free
  1826  000312  6E32               	movwf	_val^0,c
  1827                           
  1828                           ;Menu.c: 206:                 if (val == 'K'){
  1829  000314  0E4B               	movlw	75
  1830  000316  1832               	xorwf	_val^0,w,c
  1831  000318  A4D8               	btfss	status,2,c
  1832  00031A  0012               	return	
  1833                           
  1834                           ;Menu.c: 207:                     state = 14;
  1835  00031C  0E0E               	movlw	14
  1836  00031E  6E71               	movwf	menuMotor@state^0,c
  1837                           
  1838                           ;Menu.c: 208:                     JoSetMode(1);
  1839  000320  0E01               	movlw	1
  1840  000322  ECB9  F00B         	call	_JoSetMode
  1841  000326  D7B2               	goto	l4202
  1842  000328                     l4262:
  1843                           
  1844                           ;Menu.c: 216:             displayMenu(3,0);
  1845  000328  0E00               	movlw	0
  1846  00032A  6E5C               	movwf	displayMenu@row^0,c
  1847  00032C  0E03               	movlw	3
  1848  00032E  EC94  F004         	call	_displayMenu
  1849                           
  1850                           ;Menu.c: 217:             if (LCDrow == 1){
  1851  000332  0435               	decf	_LCDrow^0,w,c
  1852  000334  A4D8               	btfss	status,2,c
  1853  000336  0012               	return	
  1854                           
  1855                           ;Menu.c: 218:                 LcCursorOff();
  1856  000338  ECAB  F00B         	call	_LcCursorOff	;wreg free
  1857                           
  1858                           ;Menu.c: 219:                 startTimer();
  1859  00033C  ECA1  F00B         	call	_startTimer	;wreg free
  1860  000340                     l4268:
  1861                           
  1862                           ;Menu.c: 220:                 state = 15;
  1863  000340  0E0F               	movlw	15
  1864  000342  6E71               	movwf	menuMotor@state^0,c
  1865  000344  0C0F               	retlw	15
  1866  000346                     l4270:
  1867                           
  1868                           ;Menu.c: 224:             if (isPressed()){
  1869  000346  EC72  F00B         	call	_isPressed	;wreg free
  1870  00034A  0900               	iorlw	0
  1871  00034C  E014               	bz	l4286
  1872                           
  1873                           ;Menu.c: 225:                 val = KeGetGenericValue();
  1874  00034E  ECA0  F00A         	call	_KeGetGenericValue	;wreg free
  1875  000352  6E32               	movwf	_val^0,c
  1876                           
  1877                           ;Menu.c: 226:                 if (val == '*' || val == '#'){
  1878  000354  0E2A               	movlw	42
  1879  000356  1832               	xorwf	_val^0,w,c
  1880  000358  E003               	bz	u3730
  1881  00035A  0E23               	movlw	35
  1882  00035C  1832               	xorwf	_val^0,w,c
  1883  00035E  E108               	bnz	l4284
  1884  000360                     u3730:
  1885                           
  1886                           ;Menu.c: 227:                     if (val == '*'){
  1887  000360  0E2A               	movlw	42
  1888  000362  1832               	xorwf	_val^0,w,c
  1889  000364  A4D8               	btfss	status,2,c
  1890  000366  0012               	return	
  1891                           
  1892                           ;Menu.c: 228:                         state = 17;
  1893  000368  0E11               	movlw	17
  1894  00036A  6E71               	movwf	menuMotor@state^0,c
  1895                           
  1896                           ;Menu.c: 229:                         stopTimer();
  1897  00036C  EFD3  F00B         	goto	_stopTimer	;wreg free
  1898  000370                     l4284:
  1899                           
  1900                           ;Menu.c: 232:                     state = 16;
  1901  000370  0E10               	movlw	16
  1902  000372  6E71               	movwf	menuMotor@state^0,c
  1903  000374  0C10               	retlw	16
  1904  000376                     l4286:
  1905  000376  ECCD  F00B         	call	_SiRecievedByte	;wreg free
  1906  00037A  0900               	iorlw	0
  1907  00037C  B4D8               	btfsc	status,2,c
  1908  00037E  0012               	return	
  1909                           
  1910                           ;Menu.c: 236:                 mScore = SiReadByte();
  1911  000380  ECD7  F00B         	call	_SiReadByte	;wreg free
  1912  000384  D01E               	goto	L2
  1913  000386                     l4290:
  1914                           
  1915                           ;Menu.c: 237:                 state = 20;
  1916  000386  0E14               	movlw	20
  1917  000388                     L1:
  1918  000388  6E71               	movwf	menuMotor@state^0,c
  1919  00038A  D765               	goto	l4192
  1920  00038C                     l4294:
  1921                           
  1922                           ;Menu.c: 242:             if (SiIsAvailable()){
  1923  00038C  ECD0  F00B         	call	_SiIsAvailable	;wreg free
  1924  000390  0900               	iorlw	0
  1925  000392  B4D8               	btfsc	status,2,c
  1926  000394  0012               	return	
  1927                           
  1928                           ;Menu.c: 243:                 SiSendChar(val);
  1929  000396  5032               	movf	_val^0,w,c
  1930  000398  ECC1  F00B         	call	_SiSendChar
  1931  00039C  D7D1               	goto	l4268
  1932  00039E                     l4300:
  1933                           
  1934                           ;Menu.c: 248:             if (SiIsAvailable()){
  1935  00039E  ECD0  F00B         	call	_SiIsAvailable	;wreg free
  1936  0003A2  0900               	iorlw	0
  1937  0003A4  B4D8               	btfsc	status,2,c
  1938  0003A6  0012               	return	
  1939                           
  1940                           ;Menu.c: 249:                 SiSendChar('F');
  1941  0003A8  0E46               	movlw	70
  1942  0003AA  ECC1  F00B         	call	_SiSendChar
  1943                           
  1944                           ;Menu.c: 250:                 state = 18;
  1945  0003AE  0E12               	movlw	18
  1946  0003B0  6E71               	movwf	menuMotor@state^0,c
  1947  0003B2  0C12               	retlw	18
  1948  0003B4                     l4306:
  1949                           
  1950                           ;Menu.c: 254:             if (SiRecievedByte()){
  1951  0003B4  ECCD  F00B         	call	_SiRecievedByte	;wreg free
  1952  0003B8  0900               	iorlw	0
  1953  0003BA  B4D8               	btfsc	status,2,c
  1954  0003BC  0012               	return	
  1955                           
  1956                           ;Menu.c: 255:                 mScore = SiReadByte();
  1957  0003BE  ECD7  F00B         	call	_SiReadByte	;wreg free
  1958  0003C2                     L2:
  1959  0003C2  6E31               	movwf	_mScore^0,c
  1960  0003C4  D7E0               	goto	l4290
  1961  0003C6                     l4314:
  1962                           
  1963                           ;Menu.c: 261:             displayMenu(4,0);
  1964  0003C6  0E00               	movlw	0
  1965  0003C8  6E5C               	movwf	displayMenu@row^0,c
  1966  0003CA  0E04               	movlw	4
  1967  0003CC  EC94  F004         	call	_displayMenu
  1968                           
  1969                           ;Menu.c: 262:             if(LCDrow == 2){
  1970  0003D0  0E02               	movlw	2
  1971  0003D2  1835               	xorwf	_LCDrow^0,w,c
  1972  0003D4  A4D8               	btfss	status,2,c
  1973  0003D6  0012               	return	
  1974                           
  1975                           ;Menu.c: 263:                 state = 20;
  1976  0003D8  0E14               	movlw	20
  1977  0003DA  6E71               	movwf	menuMotor@state^0,c
  1978  0003DC  0C14               	retlw	20
  1979  0003DE                     l4320:
  1980                           
  1981                           ;Menu.c: 267:             if (TiGetTics(timer) >= 1200*3){
  1982  0003DE  5036               	movf	_timer^0,w,c
  1983  0003E0  ECDF  F00A         	call	_TiGetTics
  1984  0003E4  BE4C               	btfsc	(?_TiGetTics+1)^0,7,c
  1985  0003E6  D00E               	goto	l4330
  1986  0003E8  0E10               	movlw	16
  1987  0003EA  5C4B               	subwf	?_TiGetTics^0,w,c
  1988  0003EC  0E0E               	movlw	14
  1989  0003EE  584C               	subwfb	(?_TiGetTics+1)^0,w,c
  1990  0003F0  E309               	bnc	l4330
  1991                           
  1992                           ;Menu.c: 268:                 state = 22;
  1993  0003F2  0E16               	movlw	22
  1994  0003F4  6E71               	movwf	menuMotor@state^0,c
  1995                           
  1996                           ;Menu.c: 269:                 LcClear();
  1997  0003F6  EC7E  F00B         	call	_LcClear	;wreg free
  1998  0003FA  D05A               	goto	L3
  1999  0003FC                     l4328:
  2000                           
  2001                           ;Menu.c: 271:                 LcGotoXY(0,0);
  2002  0003FC  0E00               	movlw	0
  2003  0003FE  6A53               	clrf	LcGotoXY@Row^0,c
  2004  000400  EFCB  F007         	goto	_LcGotoXY
  2005  000404                     l4330:
  2006  000404  ECCD  F00B         	call	_SiRecievedByte	;wreg free
  2007  000408  0900               	iorlw	0
  2008  00040A  B4D8               	btfsc	status,2,c
  2009  00040C  0012               	return	
  2010                           
  2011                           ;Menu.c: 273:                 val = SiReadByte();
  2012  00040E  ECD7  F00B         	call	_SiReadByte	;wreg free
  2013  000412  6E32               	movwf	_val^0,c
  2014                           
  2015                           ;Menu.c: 274:                 state = 21;
  2016  000414  0E15               	movlw	21
  2017  000416  6E71               	movwf	menuMotor@state^0,c
  2018  000418  0C15               	retlw	21
  2019  00041A                     l4336:
  2020                           
  2021                           ;Menu.c: 278:             if (SiRecievedByte()){
  2022  00041A  ECCD  F00B         	call	_SiRecievedByte	;wreg free
  2023  00041E  0900               	iorlw	0
  2024  000420  B4D8               	btfsc	status,2,c
  2025  000422  0012               	return	
  2026                           
  2027                           ;Menu.c: 279:                 LCDcolm = SiReadByte();
  2028  000424  ECD7  F00B         	call	_SiReadByte	;wreg free
  2029  000428  6E33               	movwf	_LCDcolm^0,c
  2030                           
  2031                           ;Menu.c: 280:                 state = 19;
  2032  00042A  0E13               	movlw	19
  2033  00042C  6E71               	movwf	menuMotor@state^0,c
  2034                           
  2035                           ;Menu.c: 281:                 LcClear();
  2036  00042E  EC7E  F00B         	call	_LcClear	;wreg free
  2037  000432  D03E               	goto	L3
  2038  000434                     l4348:
  2039                           
  2040                           ;Menu.c: 287:             displayMenu(5,0);
  2041  000434  0E00               	movlw	0
  2042  000436  6E5C               	movwf	displayMenu@row^0,c
  2043  000438  0E05               	movlw	5
  2044  00043A  EC94  F004         	call	_displayMenu
  2045                           
  2046                           ;Menu.c: 288:             if(LCDrow == 2){
  2047  00043E  0E02               	movlw	2
  2048  000440  1835               	xorwf	_LCDrow^0,w,c
  2049  000442  A4D8               	btfss	status,2,c
  2050  000444  0012               	return	
  2051                           
  2052                           ;Menu.c: 289:                 LcGotoXY(7,1);
  2053  000446  0E01               	movlw	1
  2054  000448  6E53               	movwf	LcGotoXY@Row^0,c
  2055  00044A  0E07               	movlw	7
  2056  00044C  ECCB  F007         	call	_LcGotoXY
  2057                           
  2058                           ;Menu.c: 290:                 LcPutChar((mScore/10)+'0');
  2059  000450  0E0A               	movlw	10
  2060  000452  6E4B               	movwf	___lbdiv@divisor^0,c
  2061  000454  5031               	movf	_mScore^0,w,c
  2062  000456  EC70  F00A         	call	___lbdiv
  2063  00045A  0F30               	addlw	48
  2064  00045C  ECA1  F009         	call	_LcPutChar
  2065                           
  2066                           ;Menu.c: 291:                 LcPutChar((mScore%10)+'0');
  2067  000460  0E0A               	movlw	10
  2068  000462  6E4B               	movwf	___lbmod@divisor^0,c
  2069  000464  5031               	movf	_mScore^0,w,c
  2070  000466  ECCC  F00A         	call	___lbmod
  2071  00046A  0F30               	addlw	48
  2072  00046C  ECA1  F009         	call	_LcPutChar
  2073                           
  2074                           ;Menu.c: 292:                 displayTimeRemaining();
  2075  000470  EC9B  F00B         	call	_displayTimeRemaining	;wreg free
  2076                           
  2077                           ;Menu.c: 293:                 state = 23;
  2078  000474  0E17               	movlw	23
  2079  000476  6E71               	movwf	menuMotor@state^0,c
  2080  000478  0C17               	retlw	23
  2081  00047A                     l4356:
  2082                           
  2083                           ;Menu.c: 297:             if (isPressed() && KeGetGenericValue() == '#'){
  2084  00047A  EC72  F00B         	call	_isPressed	;wreg free
  2085  00047E  0900               	iorlw	0
  2086  000480  B4D8               	btfsc	status,2,c
  2087  000482  0012               	return	
  2088  000484  ECA0  F00A         	call	_KeGetGenericValue	;wreg free
  2089  000488  0A23               	xorlw	35
  2090  00048A  A4D8               	btfss	status,2,c
  2091  00048C  0012               	return	
  2092                           
  2093                           ;Menu.c: 298:                 DaSaveScore(mScore);
  2094  00048E  5031               	movf	_mScore^0,w,c
  2095  000490  EC93  F00B         	call	_DaSaveScore
  2096                           
  2097                           ;Menu.c: 299:                 state = 24;
  2098  000494  0E18               	movlw	24
  2099  000496  6E71               	movwf	menuMotor@state^0,c
  2100  000498  0C18               	retlw	24
  2101  00049A                     l4364:
  2102                           
  2103                           ;Menu.c: 303:             if (DaGetIdle()){
  2104  00049A  ECBD  F00B         	call	_DaGetIdle	;wreg free
  2105  00049E  0900               	iorlw	0
  2106  0004A0  B4D8               	btfsc	status,2,c
  2107  0004A2  0012               	return	
  2108                           
  2109                           ;Menu.c: 304:                 state = 9;
  2110  0004A4  0E09               	movlw	9
  2111  0004A6  6E71               	movwf	menuMotor@state^0,c
  2112                           
  2113                           ;Menu.c: 305:                 LcClear();
  2114  0004A8  EC7E  F00B         	call	_LcClear	;wreg free
  2115                           
  2116                           ;Menu.c: 306:                 LCDcol = LCDrow = val = LCDcolm = 0;
  2117  0004AC  6A33               	clrf	_LCDcolm^0,c
  2118  0004AE  6A32               	clrf	_val^0,c
  2119  0004B0                     L3:
  2120  0004B0  6A35               	clrf	_LCDrow^0,c
  2121  0004B2  6A34               	clrf	_LCDcol^0,c
  2122  0004B4  D7A3               	goto	l4328
  2123  0004B6                     l4376:
  2124  0004B6  5071               	movf	menuMotor@state^0,w,c
  2125  0004B8  6E6D               	movwf	??_menuMotor^0,c
  2126  0004BA  6A6E               	clrf	(??_menuMotor+1)^0,c
  2127                           
  2128                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2129                           ; Switch size 1, requested type "space"
  2130                           ; Number of cases is 1, Range of values is 0 to 0
  2131                           ; switch strategies available:
  2132                           ; Name         Instructions Cycles
  2133                           ; simple_byte            4     3 (average)
  2134                           ;	Chosen strategy is simple_byte
  2135  0004BC  506E               	movf	(??_menuMotor+1)^0,w,c
  2136  0004BE  A4D8               	btfss	status,2,c
  2137  0004C0  0012               	return	
  2138                           
  2139                           ; Switch size 1, requested type "space"
  2140                           ; Number of cases is 24, Range of values is 1 to 24
  2141                           ; switch strategies available:
  2142                           ; Name         Instructions Cycles
  2143                           ; simple_byte           73    37 (average)
  2144                           ;	Chosen strategy is simple_byte
  2145  0004C2  506D               	movf	??_menuMotor^0,w,c
  2146  0004C4  0A01               	xorlw	1	; case 1
  2147  0004C6  E101 D5B7          	bz	l4042
  2148  0004CA  0A03               	xorlw	3	; case 2
  2149  0004CC  E101 D5C4          	bz	l4050
  2150  0004D0  0A01               	xorlw	1	; case 3
  2151  0004D2  E101 D5DE          	bz	l4064
  2152  0004D6  0A07               	xorlw	7	; case 4
  2153  0004D8  E101 D5EF          	bz	l4076
  2154  0004DC  0A01               	xorlw	1	; case 5
  2155  0004DE  E101 D617          	bz	l4102
  2156  0004E2  0A03               	xorlw	3	; case 6
  2157  0004E4  E101 D623          	bz	l4114
  2158  0004E8  0A01               	xorlw	1	; case 7
  2159  0004EA  E101 D63F          	bz	l4134
  2160  0004EE  0A0F               	xorlw	15	; case 8
  2161  0004F0  E101 D658          	bz	l4142
  2162  0004F4  0A01               	xorlw	1	; case 9
  2163  0004F6  E101 D68B          	bz	l4178
  2164  0004FA  0A03               	xorlw	3	; case 10
  2165  0004FC  E101 D6A4          	bz	l4188
  2166  000500  0A01               	xorlw	1	; case 11
  2167  000502  E101 D6AB          	bz	l4194
  2168  000506  0A07               	xorlw	7	; case 12
  2169  000508  E101 D6ED          	bz	l4238
  2170  00050C  0A01               	xorlw	1	; case 13
  2171  00050E  E101 D6F9          	bz	l4248
  2172  000512  0A03               	xorlw	3	; case 14
  2173  000514  E101 D708          	bz	l4262
  2174  000518  0A01               	xorlw	1	; case 15
  2175  00051A  E101 D714          	bz	l4270
  2176  00051E  0A1F               	xorlw	31	; case 16
  2177  000520  E101 D734          	bz	l4294
  2178  000524  0A01               	xorlw	1	; case 17
  2179  000526  E101 D73A          	bz	l4300
  2180  00052A  0A03               	xorlw	3	; case 18
  2181  00052C  E101 D742          	bz	l4306
  2182  000530  0A01               	xorlw	1	; case 19
  2183  000532  E101 D748          	bz	l4314
  2184  000536  0A07               	xorlw	7	; case 20
  2185  000538  E101 D751          	bz	l4320
  2186  00053C  0A01               	xorlw	1	; case 21
  2187  00053E  E101 D76C          	bz	l4336
  2188  000542  0A03               	xorlw	3	; case 22
  2189  000544  E101 D776          	bz	l4348
  2190  000548  0A01               	xorlw	1	; case 23
  2191  00054A  E097               	bz	l4356
  2192  00054C  0A0F               	xorlw	15	; case 24
  2193  00054E  E0A5               	bz	l4364
  2194  000550  0012               	return		;funcret
  2195  000552                     __end_of_menuMotor:
  2196                           	callstack 0
  2197  000552                     PL58:
  2198                           	callstack 23
  2199  000552  5034               	movf	_LCDcol^0,w,c
  2200  000554  0FC7               	addlw	low (_mUser+252)
  2201  000556  6ED9               	movwf	fsr2l,c
  2202  000558  6ADA               	clrf	fsr2h,c
  2203  00055A  0012               	return	
  2204  00055C                     __end_ofPL58:
  2205                           	callstack 0
  2206  00055C                     PL60:
  2207                           	callstack 23
  2208  00055C  5034               	movf	_LCDcol^0,w,c
  2209  00055E  0FD0               	addlw	low (_mUser+5)
  2210  000560  6ED9               	movwf	fsr2l,c
  2211  000562  6ADA               	clrf	fsr2h,c
  2212  000564  0012               	return	
  2213  000566                     __end_ofPL60:
  2214                           	callstack 0
  2215  000566                     PL62:
  2216                           	callstack 24
  2217  000566  0EB0               	movlw	176
  2218  000568  5C4B               	subwf	?_TiGetTics^0,w,c
  2219  00056A  0E04               	movlw	4
  2220  00056C  584C               	subwfb	(?_TiGetTics+1)^0,w,c
  2221  00056E  0012               	return	
  2222  000570                     __end_ofPL62:
  2223                           	callstack 0
  2224  000570                     PL68:
  2225                           	callstack 23
  2226  000570  5032               	movf	_val^0,w,c
  2227  000572  0FCB               	addlw	low _mUser
  2228  000574  6ED9               	movwf	fsr2l,c
  2229  000576  6ADA               	clrf	fsr2h,c
  2230  000578  50DF               	movf	indf2,w,c
  2231  00057A  0012               	return	
  2232  00057C                     __end_ofPL68:
  2233                           	callstack 0
  2234  00057C                     PL70:
  2235                           	callstack 23
  2236  00057C  C035  F053         	movff	_LCDrow,LcGotoXY@Row
  2237  000580  5034               	movf	_LCDcol^0,w,c
  2238  000582  0012               	return	
  2239  000584                     __end_ofPL70:
  2240                           	callstack 0
  2241                           
  2242 ;; *************** function _stopTimer *****************
  2243 ;; Defined at:
  2244 ;;		line 109 in file "time.c"
  2245 ;; Parameters:    Size  Location     Type
  2246 ;;		None
  2247 ;; Auto vars:     Size  Location     Type
  2248 ;;		None
  2249 ;; Return value:  Size  Location     Type
  2250 ;;                  1    wreg      void 
  2251 ;; Registers used:
  2252 ;;		None
  2253 ;; Tracked objects:
  2254 ;;		On entry : 0/0
  2255 ;;		On exit  : 0/0
  2256 ;;		Unchanged: 0/0
  2257 ;; Data sizes:     COMRAM   BANK0   BANK1
  2258 ;;      Params:         0       0       0
  2259 ;;      Locals:         0       0       0
  2260 ;;      Temps:          0       0       0
  2261 ;;      Totals:         0       0       0
  2262 ;;Total ram usage:        0 bytes
  2263 ;; Hardware stack levels used: 1
  2264 ;; Hardware stack levels required when called: 2
  2265 ;; This function calls:
  2266 ;;		Nothing
  2267 ;; This function is called by:
  2268 ;;		_menuMotor
  2269 ;; This function uses a non-reentrant model
  2270 ;;
  2271                           
  2272                           	psect	text3
  2273  0017A6                     __ptext3:
  2274                           	callstack 0
  2275  0017A6                     _stopTimer:
  2276                           	callstack 27
  2277                           
  2278                           ;time.c: 110:     state = 0;
  2279                           
  2280                           ;incstack = 0
  2281  0017A6  6A23               	clrf	_state@time$F1562^0,c
  2282  0017A8  0012               	return		;funcret
  2283  0017AA                     __end_of_stopTimer:
  2284                           	callstack 0
  2285                           
  2286 ;; *************** function _startTimer *****************
  2287 ;; Defined at:
  2288 ;;		line 105 in file "time.c"
  2289 ;; Parameters:    Size  Location     Type
  2290 ;;		None
  2291 ;; Auto vars:     Size  Location     Type
  2292 ;;		None
  2293 ;; Return value:  Size  Location     Type
  2294 ;;                  1    wreg      void 
  2295 ;; Registers used:
  2296 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2297 ;; Tracked objects:
  2298 ;;		On entry : 0/0
  2299 ;;		On exit  : 0/0
  2300 ;;		Unchanged: 0/0
  2301 ;; Data sizes:     COMRAM   BANK0   BANK1
  2302 ;;      Params:         0       0       0
  2303 ;;      Locals:         0       0       0
  2304 ;;      Temps:          0       0       0
  2305 ;;      Totals:         0       0       0
  2306 ;;Total ram usage:        0 bytes
  2307 ;; Hardware stack levels used: 1
  2308 ;; Hardware stack levels required when called: 3
  2309 ;; This function calls:
  2310 ;;		_TiResetTics
  2311 ;; This function is called by:
  2312 ;;		_menuMotor
  2313 ;; This function uses a non-reentrant model
  2314 ;;
  2315                           
  2316                           	psect	text4
  2317  001742                     __ptext4:
  2318                           	callstack 0
  2319  001742                     _startTimer:
  2320                           	callstack 26
  2321                           
  2322                           ;time.c: 106:     state = 1;
  2323                           
  2324                           ;incstack = 0
  2325  001742  0E01               	movlw	1
  2326  001744  6E23               	movwf	_state@time$F1562^0,c
  2327                           
  2328                           ;time.c: 107:     TiResetTics(timer);
  2329  001746  5024               	movf	_timer@time$F1561^0,w,c
  2330  001748  EF64  F00B         	goto	_TiResetTics
  2331  00174C                     __end_of_startTimer:
  2332                           	callstack 0
  2333                           
  2334 ;; *************** function _isPressed *****************
  2335 ;; Defined at:
  2336 ;;		line 207 in file "keypad.c"
  2337 ;; Parameters:    Size  Location     Type
  2338 ;;		None
  2339 ;; Auto vars:     Size  Location     Type
  2340 ;;		None
  2341 ;; Return value:  Size  Location     Type
  2342 ;;                  1    wreg      unsigned char 
  2343 ;; Registers used:
  2344 ;;		wreg, status,2, status,0
  2345 ;; Tracked objects:
  2346 ;;		On entry : 0/0
  2347 ;;		On exit  : 0/0
  2348 ;;		Unchanged: 0/0
  2349 ;; Data sizes:     COMRAM   BANK0   BANK1
  2350 ;;      Params:         0       0       0
  2351 ;;      Locals:         1       0       0
  2352 ;;      Temps:          0       0       0
  2353 ;;      Totals:         1       0       0
  2354 ;;Total ram usage:        1 bytes
  2355 ;; Hardware stack levels used: 1
  2356 ;; Hardware stack levels required when called: 2
  2357 ;; This function calls:
  2358 ;;		Nothing
  2359 ;; This function is called by:
  2360 ;;		_menuMotor
  2361 ;; This function uses a non-reentrant model
  2362 ;;
  2363                           
  2364                           	psect	text5
  2365  0016E4                     __ptext5:
  2366                           	callstack 0
  2367  0016E4                     _isPressed:
  2368                           	callstack 27
  2369                           
  2370                           ;keypad.c: 209:  return pressed && (stateSMS == 1||stateSMS == 4);
  2371                           
  2372                           ;incstack = 0
  2373  0016E4  6A4B               	clrf	_isPressed$530^0,c
  2374  0016E6  503F               	movf	_pressed^0,w,c
  2375  0016E8  E007               	bz	l185
  2376  0016EA  043B               	decf	_stateSMS^0,w,c
  2377  0016EC  E003               	bz	u2680
  2378  0016EE  0E04               	movlw	4
  2379  0016F0  183B               	xorwf	_stateSMS^0,w,c
  2380  0016F2  E102               	bnz	l185
  2381  0016F4                     u2680:
  2382  0016F4  0E01               	movlw	1
  2383  0016F6  6E4B               	movwf	_isPressed$530^0,c
  2384  0016F8                     l185:
  2385  0016F8  504B               	movf	_isPressed$530^0,w,c
  2386  0016FA  0012               	return		;funcret
  2387  0016FC                     __end_of_isPressed:
  2388                           	callstack 0
  2389                           
  2390 ;; *************** function _getPresses *****************
  2391 ;; Defined at:
  2392 ;;		line 242 in file "keypad.c"
  2393 ;; Parameters:    Size  Location     Type
  2394 ;;		None
  2395 ;; Auto vars:     Size  Location     Type
  2396 ;;		None
  2397 ;; Return value:  Size  Location     Type
  2398 ;;                  1    wreg      unsigned char 
  2399 ;; Registers used:
  2400 ;;		wreg, status,2
  2401 ;; Tracked objects:
  2402 ;;		On entry : 0/0
  2403 ;;		On exit  : 0/0
  2404 ;;		Unchanged: 0/0
  2405 ;; Data sizes:     COMRAM   BANK0   BANK1
  2406 ;;      Params:         0       0       0
  2407 ;;      Locals:         0       0       0
  2408 ;;      Temps:          0       0       0
  2409 ;;      Totals:         0       0       0
  2410 ;;Total ram usage:        0 bytes
  2411 ;; Hardware stack levels used: 1
  2412 ;; Hardware stack levels required when called: 2
  2413 ;; This function calls:
  2414 ;;		Nothing
  2415 ;; This function is called by:
  2416 ;;		_menuMotor
  2417 ;; This function uses a non-reentrant model
  2418 ;;
  2419                           
  2420                           	psect	text6
  2421  0017AA                     __ptext6:
  2422                           	callstack 0
  2423  0017AA                     _getPresses:
  2424                           	callstack 27
  2425                           
  2426                           ;keypad.c: 243:     return available;
  2427                           
  2428                           ;incstack = 0
  2429  0017AA  503D               	movf	_available^0,w,c
  2430  0017AC  0012               	return		;funcret
  2431  0017AE                     __end_of_getPresses:
  2432                           	callstack 0
  2433                           
  2434 ;; *************** function _displayTimeRemaining *****************
  2435 ;; Defined at:
  2436 ;;		line 112 in file "time.c"
  2437 ;; Parameters:    Size  Location     Type
  2438 ;;		None
  2439 ;; Auto vars:     Size  Location     Type
  2440 ;;		None
  2441 ;; Return value:  Size  Location     Type
  2442 ;;                  1    wreg      void 
  2443 ;; Registers used:
  2444 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2445 ;; Tracked objects:
  2446 ;;		On entry : 0/0
  2447 ;;		On exit  : 0/0
  2448 ;;		Unchanged: 0/0
  2449 ;; Data sizes:     COMRAM   BANK0   BANK1
  2450 ;;      Params:         0       0       0
  2451 ;;      Locals:         0       0       0
  2452 ;;      Temps:          0       0       0
  2453 ;;      Totals:         0       0       0
  2454 ;;Total ram usage:        0 bytes
  2455 ;; Hardware stack levels used: 1
  2456 ;; Hardware stack levels required when called: 5
  2457 ;; This function calls:
  2458 ;;		_LcGotoXY
  2459 ;; This function is called by:
  2460 ;;		_menuMotor
  2461 ;; This function uses a non-reentrant model
  2462 ;;
  2463                           
  2464                           	psect	text7
  2465  001736                     __ptext7:
  2466                           	callstack 0
  2467  001736                     _displayTimeRemaining:
  2468                           	callstack 24
  2469                           
  2470                           ;time.c: 113:     state = 7;
  2471                           
  2472                           ;incstack = 0
  2473  001736  0E07               	movlw	7
  2474  001738  6E23               	movwf	_state@time$F1562^0,c
  2475                           
  2476                           ;time.c: 114:     LcGotoXY(11,0);
  2477  00173A  6A53               	clrf	LcGotoXY@Row^0,c
  2478  00173C  0E0B               	movlw	11
  2479  00173E  EFCB  F007         	goto	_LcGotoXY
  2480  001742                     __end_of_displayTimeRemaining:
  2481                           	callstack 0
  2482                           
  2483 ;; *************** function _displayMenu *****************
  2484 ;; Defined at:
  2485 ;;		line 315 in file "Menu.c"
  2486 ;; Parameters:    Size  Location     Type
  2487 ;;  menuMode        1    wreg     unsigned char 
  2488 ;;  row             1   22[COMRAM] unsigned char 
  2489 ;; Auto vars:     Size  Location     Type
  2490 ;;  menuMode        1   27[COMRAM] unsigned char 
  2491 ;; Return value:  Size  Location     Type
  2492 ;;                  1    wreg      void 
  2493 ;; Registers used:
  2494 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2495 ;; Tracked objects:
  2496 ;;		On entry : 0/0
  2497 ;;		On exit  : 0/0
  2498 ;;		Unchanged: 0/0
  2499 ;; Data sizes:     COMRAM   BANK0   BANK1
  2500 ;;      Params:         1       0       0
  2501 ;;      Locals:         1       0       0
  2502 ;;      Temps:          4       0       0
  2503 ;;      Totals:         6       0       0
  2504 ;;Total ram usage:        6 bytes
  2505 ;; Hardware stack levels used: 1
  2506 ;; Hardware stack levels required when called: 6
  2507 ;; This function calls:
  2508 ;;		_LcGotoXY
  2509 ;;		_LcPutChar
  2510 ;;		___awmod
  2511 ;; This function is called by:
  2512 ;;		_menuMotor
  2513 ;; This function uses a non-reentrant model
  2514 ;;
  2515                           
  2516                           	psect	text8
  2517  000928                     __ptext8:
  2518                           	callstack 0
  2519  000928                     _displayMenu:
  2520                           	callstack 23
  2521                           
  2522                           ;incstack = 0
  2523                           ;displayMenu@menuMode stored from wreg
  2524  000928  6E61               	movwf	displayMenu@menuMode^0,c
  2525                           
  2526                           ;Menu.c: 316:     if (menuMode == 0){
  2527  00092A  5061               	movf	displayMenu@menuMode^0,w,c
  2528  00092C  E10E               	bnz	l3588
  2529                           
  2530                           ;Menu.c: 317:         if (LOGINMENU[LCDrow][LCDcol] != '\0'){
  2531  00092E  D8CB               	call	PL18	;call to abstracted procedure
  2532  000930  D89E               	call	PL2	;call to abstracted procedure
  2533  000932  E006               	bz	l3582
  2534                           
  2535                           ;Menu.c: 318:             LcPutChar(LOGINMENU[LCDrow][LCDcol]);
  2536  000934  D8C8               	call	PL18	;call to abstracted procedure
  2537  000936  D89B               	call	PL2	;call to abstracted procedure
  2538  000938  ECA1  F009         	call	_LcPutChar
  2539  00093C                     l3580:
  2540                           
  2541                           ;Menu.c: 319:             LCDcol++;
  2542  00093C  2A34               	incf	_LCDcol^0,f,c
  2543                           
  2544                           ;Menu.c: 320:         } else {
  2545  00093E  0012               	return	
  2546  000940                     l3582:
  2547                           
  2548                           ;Menu.c: 321:             LCDrow++;
  2549                           
  2550                           ;Menu.c: 322:             LcGotoXY(0,1);
  2551  000940  D8DA               	call	PL36	;call to abstracted procedure
  2552  000942  ECCB  F007         	call	_LcGotoXY
  2553  000946                     l3586:
  2554                           
  2555                           ;Menu.c: 323:             LCDcol = 0;
  2556  000946  6A34               	clrf	_LCDcol^0,c
  2557  000948  0012               	return	
  2558  00094A                     l3588:
  2559  00094A  0461               	decf	displayMenu@menuMode^0,w,c
  2560  00094C  E10C               	bnz	l3602
  2561                           
  2562                           ;Menu.c: 326:         if (LOGREGSCREEN[LCDrow][LCDcol] != '\0'){
  2563  00094E  D8C2               	call	PL20	;call to abstracted procedure
  2564  000950  D88E               	call	PL2	;call to abstracted procedure
  2565  000952  E005               	bz	l3596
  2566                           
  2567                           ;Menu.c: 327:             LcPutChar(LOGREGSCREEN[LCDrow][LCDcol]);
  2568  000954  D8BF               	call	PL20	;call to abstracted procedure
  2569  000956  D88B               	call	PL2	;call to abstracted procedure
  2570  000958  ECA1  F009         	call	_LcPutChar
  2571  00095C  D7EF               	goto	l3580
  2572  00095E                     l3596:
  2573                           
  2574                           ;Menu.c: 330:             LCDrow++;
  2575                           
  2576                           ;Menu.c: 331:             LcGotoXY(0,1);
  2577  00095E  D8CB               	call	PL36	;call to abstracted procedure
  2578  000960  ECCB  F007         	call	_LcGotoXY
  2579  000964  D7F0               	goto	l3586
  2580  000966                     l3602:
  2581  000966  0E02               	movlw	2
  2582  000968  1861               	xorwf	displayMenu@menuMode^0,w,c
  2583  00096A  E14D               	bnz	l3632
  2584                           
  2585                           ;Menu.c: 335:         if (LCDrow+row < 4){
  2586  00096C  505C               	movf	displayMenu@row^0,w,c
  2587  00096E  C035  F05D         	movff	_LCDrow,??_displayMenu
  2588  000972  6A5E               	clrf	(??_displayMenu+1)^0,c
  2589  000974  265D               	addwf	??_displayMenu^0,f,c
  2590  000976  0E00               	movlw	0
  2591  000978  225E               	addwfc	(??_displayMenu+1)^0,f,c
  2592  00097A  BE5E               	btfsc	(??_displayMenu+1)^0,7,c
  2593  00097C  D006               	goto	u2760
  2594  00097E  505E               	movf	(??_displayMenu+1)^0,w,c
  2595  000980  E103               	bnz	u2761
  2596  000982  0E04               	movlw	4
  2597  000984  5C5D               	subwf	??_displayMenu^0,w,c
  2598  000986  B0D8               	btfsc	status,0,c
  2599  000988                     u2761:
  2600  000988  0012               	return	
  2601  00098A                     u2760:
  2602                           
  2603                           ;Menu.c: 336:             if (MAINMENUSIZE[LCDrow+row] > 16){
  2604  00098A  D8AB               	call	PL24	;call to abstracted procedure
  2605  00098C  D887               	call	PL6	;call to abstracted procedure
  2606  00098E  0E10               	movlw	16
  2607  000990  0008               	tblrd		*
  2608  000992  64F5               	cpfsgt	tablat,c
  2609  000994  D02A               	goto	l3620
  2610                           
  2611                           ;Menu.c: 337:                 if (LCDcol < 16){
  2612  000996  6034               	cpfslt	_LCDcol^0,c
  2613  000998  D024               	goto	l3614
  2614                           
  2615                           ;Menu.c: 338:                     LcPutChar(MAINMENU[LCDrow+row][(LCDcol+LCDcolm) % MAIN
      +                          MENUSIZE[LCDrow+row]]);
  2616  00099A  5034               	movf	_LCDcol^0,w,c
  2617  00099C  2433               	addwf	_LCDcolm^0,w,c
  2618  00099E  6E4B               	movwf	___awmod@dividend^0,c
  2619  0009A0  6A4C               	clrf	(___awmod@dividend+1)^0,c
  2620  0009A2  364C               	rlcf	(___awmod@dividend+1)^0,f,c
  2621  0009A4  D89E               	call	PL24	;call to abstracted procedure
  2622  0009A6  D87A               	call	PL6	;call to abstracted procedure
  2623  0009A8  0008               	tblrd		*
  2624  0009AA  50F5               	movf	tablat,w,c
  2625  0009AC  6E4D               	movwf	___awmod@divisor^0,c
  2626  0009AE  6A4E               	clrf	(___awmod@divisor+1)^0,c
  2627  0009B0  EC07  F009         	call	___awmod	;wreg free
  2628  0009B4  5035               	movf	_LCDrow^0,w,c
  2629  0009B6  0D1C               	mullw	28
  2630  0009B8  0E58               	movlw	low _MAINMENU
  2631  0009BA  6E5F               	movwf	(??_displayMenu+2)^0,c
  2632  0009BC  0E1F               	movlw	high _MAINMENU
  2633  0009BE  6E60               	movwf	(??_displayMenu+3)^0,c
  2634  0009C0  D8B0               	call	PL80	;call to abstracted procedure
  2635  0009C2  505C               	movf	displayMenu@row^0,w,c
  2636  0009C4  0D1C               	mullw	28
  2637  0009C6  D8AD               	call	PL80	;call to abstracted procedure
  2638  0009C8  504B               	movf	?___awmod^0,w,c
  2639  0009CA  265F               	addwf	(??_displayMenu+2)^0,f,c
  2640  0009CC  504C               	movf	(?___awmod+1)^0,w,c
  2641  0009CE  2260               	addwfc	(??_displayMenu+3)^0,f,c
  2642  0009D0  C05F  FFF6         	movff	??_displayMenu+2,tblptrl
  2643  0009D4  C060  FFF7         	movff	??_displayMenu+3,tblptrh
  2644  0009D8                     	if	0	;tblptru may be non-zero
  2645  0009D8                     	endif
  2646  0009D8                     	if	0	;tblptru may be non-zero
  2647  0009D8                     	endif
  2648  0009D8  0008               	tblrd		*
  2649  0009DA  50F5               	movf	tablat,w,c
  2650  0009DC  ECA1  F009         	call	_LcPutChar
  2651  0009E0  D7AD               	goto	l3580
  2652  0009E2                     l3614:
  2653                           
  2654                           ;Menu.c: 341:                     LCDrow++;
  2655                           
  2656                           ;Menu.c: 342:                     LcGotoXY(0,1);
  2657  0009E2  D889               	call	PL36	;call to abstracted procedure
  2658  0009E4  ECCB  F007         	call	_LcGotoXY
  2659  0009E8  D7AE               	goto	l3586
  2660  0009EA                     l3620:
  2661  0009EA  D860               	call	PL10	;call to abstracted procedure
  2662  0009EC  D84F               	call	PL4	;call to abstracted procedure
  2663  0009EE  D83F               	call	PL2	;call to abstracted procedure
  2664  0009F0  E006               	bz	l3626
  2665                           
  2666                           ;Menu.c: 347:                 LcPutChar(MAINMENU[LCDrow+row][LCDcol]);
  2667  0009F2  D85C               	call	PL10	;call to abstracted procedure
  2668  0009F4  D84B               	call	PL4	;call to abstracted procedure
  2669  0009F6  D83B               	call	PL2	;call to abstracted procedure
  2670  0009F8  ECA1  F009         	call	_LcPutChar
  2671  0009FC  D79F               	goto	l3580
  2672  0009FE                     l3626:
  2673                           
  2674                           ;Menu.c: 350:                 LCDrow++;
  2675                           
  2676                           ;Menu.c: 351:                 LcGotoXY(0,1);
  2677  0009FE  D87B               	call	PL36	;call to abstracted procedure
  2678  000A00  ECCB  F007         	call	_LcGotoXY
  2679  000A04  D7A0               	goto	l3586
  2680  000A06                     l3632:
  2681  000A06  0E03               	movlw	3
  2682  000A08  1861               	xorwf	displayMenu@menuMode^0,w,c
  2683  000A0A  E10A               	bnz	l3646
  2684                           
  2685                           ;Menu.c: 357:         if (TIME[LCDcol] != '\0'){
  2686  000A0C  D881               	call	PL46	;call to abstracted procedure
  2687  000A0E  E004               	bz	l3640
  2688                           
  2689                           ;Menu.c: 358:                 LcPutChar(TIME[LCDcol]);
  2690  000A10  D87F               	call	PL46	;call to abstracted procedure
  2691  000A12  ECA1  F009         	call	_LcPutChar
  2692  000A16  D792               	goto	l3580
  2693  000A18                     l3640:
  2694                           
  2695                           ;Menu.c: 361:                 LCDrow++;
  2696                           
  2697                           ;Menu.c: 362:                 LcGotoXY(0,1);
  2698  000A18  D86E               	call	PL36	;call to abstracted procedure
  2699  000A1A  ECCB  F007         	call	_LcGotoXY
  2700  000A1E  D793               	goto	l3586
  2701  000A20                     l3646:
  2702  000A20  0E04               	movlw	4
  2703  000A22  1861               	xorwf	displayMenu@menuMode^0,w,c
  2704  000A24  E114               	bnz	l3666
  2705                           
  2706                           ;Menu.c: 366:         if (LCDrow == 0){
  2707  000A26  5035               	movf	_LCDrow^0,w,c
  2708  000A28  E10A               	bnz	l3662
  2709                           
  2710                           ;Menu.c: 367:            if (ERROR[LCDcol] != '\0'){
  2711  000A2A  D869               	call	PL44	;call to abstracted procedure
  2712  000A2C  E004               	bz	l3656
  2713                           
  2714                           ;Menu.c: 368:                 LcPutChar(ERROR[LCDcol]);
  2715  000A2E  D867               	call	PL44	;call to abstracted procedure
  2716  000A30  ECA1  F009         	call	_LcPutChar
  2717  000A34  D783               	goto	l3580
  2718  000A36                     l3656:
  2719                           
  2720                           ;Menu.c: 371:                 LCDrow++;
  2721                           
  2722                           ;Menu.c: 372:                 LcGotoXY(0,1);
  2723  000A36  D85F               	call	PL36	;call to abstracted procedure
  2724  000A38  ECCB  F007         	call	_LcGotoXY
  2725  000A3C  D784               	goto	l3586
  2726  000A3E                     l3662:
  2727                           
  2728                           ;Menu.c: 376:             LcPutChar(val);
  2729  000A3E  5032               	movf	_val^0,w,c
  2730  000A40  ECA1  F009         	call	_LcPutChar
  2731                           
  2732                           ;Menu.c: 377:             LcPutChar(LCDcolm);
  2733  000A44  5033               	movf	_LCDcolm^0,w,c
  2734  000A46  ECA1  F009         	call	_LcPutChar
  2735                           
  2736                           ;Menu.c: 378:             LCDrow++;
  2737  000A4A  2A35               	incf	_LCDrow^0,f,c
  2738  000A4C  0012               	return	
  2739  000A4E                     l3666:
  2740  000A4E  0E05               	movlw	5
  2741  000A50  1861               	xorwf	displayMenu@menuMode^0,w,c
  2742  000A52  A4D8               	btfss	status,2,c
  2743  000A54  0012               	return	
  2744                           
  2745                           ;Menu.c: 382:         if (RESULTS[LCDrow][LCDcol] != '\0'){
  2746  000A56  D830               	call	PL16	;call to abstracted procedure
  2747  000A58  D80A               	call	PL2	;call to abstracted procedure
  2748  000A5A  E005               	bz	l3674
  2749                           
  2750                           ;Menu.c: 383:             LcPutChar(RESULTS[LCDrow][LCDcol]);
  2751  000A5C  D82D               	call	PL16	;call to abstracted procedure
  2752  000A5E  D807               	call	PL2	;call to abstracted procedure
  2753  000A60  ECA1  F009         	call	_LcPutChar
  2754  000A64  D76B               	goto	l3580
  2755  000A66                     l3674:
  2756                           
  2757                           ;Menu.c: 386:             LCDrow++;
  2758                           
  2759                           ;Menu.c: 387:             LcGotoXY(0,1);
  2760  000A66  D847               	call	PL36	;call to abstracted procedure
  2761  000A68  ECCB  F007         	call	_LcGotoXY
  2762  000A6C  D76C               	goto	l3586
  2763  000A6E                     __end_of_displayMenu:
  2764                           	callstack 0
  2765  000A6E                     PL2:
  2766                           	callstack 23
  2767  000A6E  50F3               	movf	243,w,c
  2768  000A70  265D               	addwf	??_displayMenu^0,f,c
  2769  000A72  50F4               	movf	244,w,c
  2770  000A74  225E               	addwfc	(??_displayMenu+1)^0,f,c
  2771  000A76  5034               	movf	_LCDcol^0,w,c
  2772  000A78  265D               	addwf	??_displayMenu^0,f,c
  2773  000A7A  0E00               	movlw	0
  2774  000A7C  225E               	addwfc	(??_displayMenu+1)^0,f,c
  2775  000A7E  C05D  FFF6         	movff	??_displayMenu,tblptrl
  2776  000A82  C05E  FFF7         	movff	??_displayMenu+1,tblptrh
  2777  000A86                     	if	0	;tblptru may be non-zero
  2778  000A86                     	endif
  2779  000A86                     	if	0	;tblptru may be non-zero
  2780  000A86                     	endif
  2781  000A86  0008               	tblrd		*
  2782  000A88  50F5               	movf	tablat,w,c
  2783  000A8A  0012               	return	
  2784  000A8C                     __end_ofPL2:
  2785                           	callstack 0
  2786  000A8C                     PL4:
  2787                           	callstack 23
  2788  000A8C  6E5E               	movwf	(??_displayMenu+1)^0,c
  2789  000A8E  50F3               	movf	243,w,c
  2790  000A90  265D               	addwf	??_displayMenu^0,f,c
  2791  000A92  50F4               	movf	244,w,c
  2792  000A94  225E               	addwfc	(??_displayMenu+1)^0,f,c
  2793  000A96  505C               	movf	displayMenu@row^0,w,c
  2794  000A98  0D1C               	mullw	28
  2795  000A9A  0012               	return	
  2796  000A9C                     __end_ofPL4:
  2797                           	callstack 0
  2798  000A9C                     PL6:
  2799                           	callstack 23
  2800  000A9C  265D               	addwf	??_displayMenu^0,f,c
  2801  000A9E  0E00               	movlw	0
  2802  000AA0  225E               	addwfc	(??_displayMenu+1)^0,f,c
  2803  000AA2  C05D  FFF6         	movff	??_displayMenu,tblptrl
  2804  000AA6  C05E  FFF7         	movff	??_displayMenu+1,tblptrh
  2805  000AAA                     	if	0	;tblptru may be non-zero
  2806  000AAA                     	endif
  2807  000AAA                     	if	0	;tblptru may be non-zero
  2808  000AAA                     	endif
  2809  000AAA  0C00               	retlw	0
  2810  000AAC                     __end_ofPL6:
  2811                           	callstack 0
  2812  000AAC                     PL10:
  2813                           	callstack 23
  2814  000AAC  5035               	movf	_LCDrow^0,w,c
  2815  000AAE  0D1C               	mullw	28
  2816  000AB0  0E58               	movlw	low _MAINMENU
  2817  000AB2  6E5D               	movwf	??_displayMenu^0,c
  2818  000AB4  0E1F               	movlw	high _MAINMENU
  2819  000AB6  0012               	return	
  2820  000AB8                     __end_ofPL10:
  2821                           	callstack 0
  2822  000AB8                     PL16:
  2823                           	callstack 23
  2824  000AB8  5035               	movf	_LCDrow^0,w,c
  2825  000ABA  0D0B               	mullw	11
  2826  000ABC  0EF7               	movlw	low _RESULTS
  2827  000ABE  6E5D               	movwf	??_displayMenu^0,c
  2828  000AC0  0E1E               	movlw	high _RESULTS
  2829  000AC2  6E5E               	movwf	(??_displayMenu+1)^0,c
  2830  000AC4  0012               	return	
  2831  000AC6                     __end_ofPL16:
  2832                           	callstack 0
  2833  000AC6                     PL18:
  2834                           	callstack 23
  2835  000AC6  5035               	movf	_LCDrow^0,w,c
  2836  000AC8  0D0B               	mullw	11
  2837  000ACA  0E0D               	movlw	low _LOGINMENU
  2838  000ACC  6E5D               	movwf	??_displayMenu^0,c
  2839  000ACE  0E1F               	movlw	high _LOGINMENU
  2840  000AD0  6E5E               	movwf	(??_displayMenu+1)^0,c
  2841  000AD2  0012               	return	
  2842  000AD4                     __end_ofPL18:
  2843                           	callstack 0
  2844  000AD4                     PL20:
  2845                           	callstack 23
  2846  000AD4  5035               	movf	_LCDrow^0,w,c
  2847  000AD6  0D06               	mullw	6
  2848  000AD8  0E33               	movlw	low _LOGREGSCREEN
  2849  000ADA  6E5D               	movwf	??_displayMenu^0,c
  2850  000ADC  0E1F               	movlw	high _LOGREGSCREEN
  2851  000ADE  6E5E               	movwf	(??_displayMenu+1)^0,c
  2852  000AE0  0012               	return	
  2853  000AE2                     __end_ofPL20:
  2854                           	callstack 0
  2855  000AE2                     PL24:
  2856                           	callstack 23
  2857  000AE2  0E54               	movlw	low _MAINMENUSIZE
  2858  000AE4  6E5D               	movwf	??_displayMenu^0,c
  2859  000AE6  0E1F               	movlw	high _MAINMENUSIZE
  2860  000AE8  6E5E               	movwf	(??_displayMenu+1)^0,c
  2861  000AEA  5035               	movf	_LCDrow^0,w,c
  2862  000AEC  265D               	addwf	??_displayMenu^0,f,c
  2863  000AEE  0E00               	movlw	0
  2864  000AF0  225E               	addwfc	(??_displayMenu+1)^0,f,c
  2865  000AF2  505C               	movf	displayMenu@row^0,w,c
  2866  000AF4  0012               	return	
  2867  000AF6                     __end_ofPL24:
  2868                           	callstack 0
  2869  000AF6                     PL36:
  2870                           	callstack 23
  2871  000AF6  2A35               	incf	_LCDrow^0,f,c
  2872  000AF8  0E01               	movlw	1
  2873  000AFA  6E53               	movwf	LcGotoXY@Row^0,c
  2874  000AFC  0C00               	retlw	0
  2875  000AFE                     __end_ofPL36:
  2876                           	callstack 0
  2877  000AFE                     PL44:
  2878                           	callstack 23
  2879  000AFE  0E4B               	movlw	low _ERROR
  2880  000B00  2434               	addwf	_LCDcol^0,w,c
  2881  000B02  6EF6               	movwf	tblptrl,c
  2882  000B04  6AF7               	clrf	tblptrh,c
  2883  000B06  0E1F               	movlw	high _ERROR
  2884  000B08  22F7               	addwfc	tblptrh,f,c
  2885  000B0A                     	if	0	;There are less than 3 active tblptr bytes
  2886  000B0A                     	endif
  2887  000B0A  0008               	tblrd		*
  2888  000B0C  50F5               	movf	tablat,w,c
  2889  000B0E  0012               	return	
  2890  000B10                     __end_ofPL44:
  2891                           	callstack 0
  2892  000B10                     PL46:
  2893                           	callstack 23
  2894  000B10  0E23               	movlw	low _TIME
  2895  000B12  2434               	addwf	_LCDcol^0,w,c
  2896  000B14  6EF6               	movwf	tblptrl,c
  2897  000B16  6AF7               	clrf	tblptrh,c
  2898  000B18  0E1F               	movlw	high _TIME
  2899  000B1A  22F7               	addwfc	tblptrh,f,c
  2900  000B1C                     	if	0	;There are less than 3 active tblptr bytes
  2901  000B1C                     	endif
  2902  000B1C  0008               	tblrd		*
  2903  000B1E  50F5               	movf	tablat,w,c
  2904  000B20  0012               	return	
  2905  000B22                     __end_ofPL46:
  2906                           	callstack 0
  2907  000B22                     PL80:
  2908                           	callstack 23
  2909  000B22  50F3               	movf	243,w,c
  2910  000B24  265F               	addwf	(??_displayMenu+2)^0,f,c
  2911  000B26  50F4               	movf	244,w,c
  2912  000B28  2260               	addwfc	(??_displayMenu+3)^0,f,c
  2913  000B2A  0012               	return	
  2914  000B2C                     __end_ofPL80:
  2915                           	callstack 0
  2916                           
  2917 ;; *************** function ___awmod *****************
  2918 ;; Defined at:
  2919 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\awmod.c"
  2920 ;; Parameters:    Size  Location     Type
  2921 ;;  dividend        2    5[COMRAM] int 
  2922 ;;  divisor         2    7[COMRAM] int 
  2923 ;; Auto vars:     Size  Location     Type
  2924 ;;  sign            1   10[COMRAM] unsigned char 
  2925 ;;  counter         1    9[COMRAM] unsigned char 
  2926 ;; Return value:  Size  Location     Type
  2927 ;;                  2    5[COMRAM] int 
  2928 ;; Registers used:
  2929 ;;		wreg, status,2, status,0
  2930 ;; Tracked objects:
  2931 ;;		On entry : 0/0
  2932 ;;		On exit  : 0/0
  2933 ;;		Unchanged: 0/0
  2934 ;; Data sizes:     COMRAM   BANK0   BANK1
  2935 ;;      Params:         4       0       0
  2936 ;;      Locals:         2       0       0
  2937 ;;      Temps:          0       0       0
  2938 ;;      Totals:         6       0       0
  2939 ;;Total ram usage:        6 bytes
  2940 ;; Hardware stack levels used: 1
  2941 ;; Hardware stack levels required when called: 2
  2942 ;; This function calls:
  2943 ;;		Nothing
  2944 ;; This function is called by:
  2945 ;;		_displayMenu
  2946 ;; This function uses a non-reentrant model
  2947 ;;
  2948                           
  2949                           	psect	text9
  2950  00120E                     __ptext9:
  2951                           	callstack 0
  2952  00120E                     ___awmod:
  2953                           	callstack 26
  2954                           
  2955                           ;incstack = 0
  2956  00120E  6A50               	clrf	___awmod@sign^0,c
  2957  001210  AE4C               	btfss	(___awmod@dividend+1)^0,7,c
  2958  001212  D006               	goto	l3482
  2959  001214  6C4B               	negf	___awmod@dividend^0,c
  2960  001216  1E4C               	comf	(___awmod@dividend+1)^0,f,c
  2961  001218  B0D8               	btfsc	status,0,c
  2962  00121A  2A4C               	incf	(___awmod@dividend+1)^0,f,c
  2963  00121C  0E01               	movlw	1
  2964  00121E  6E50               	movwf	___awmod@sign^0,c
  2965  001220                     l3482:
  2966  001220  AE4E               	btfss	(___awmod@divisor+1)^0,7,c
  2967  001222  D004               	goto	l3486
  2968  001224  6C4D               	negf	___awmod@divisor^0,c
  2969  001226  1E4E               	comf	(___awmod@divisor+1)^0,f,c
  2970  001228  B0D8               	btfsc	status,0,c
  2971  00122A  2A4E               	incf	(___awmod@divisor+1)^0,f,c
  2972  00122C                     l3486:
  2973  00122C  504D               	movf	___awmod@divisor^0,w,c
  2974  00122E  104E               	iorwf	(___awmod@divisor+1)^0,w,c
  2975  001230  E017               	bz	l3502
  2976  001232  0E01               	movlw	1
  2977  001234  6E4F               	movwf	___awmod@counter^0,c
  2978  001236  D004               	goto	l3492
  2979  001238                     l3490:
  2980  001238  90D8               	bcf	status,0,c
  2981  00123A  364D               	rlcf	___awmod@divisor^0,f,c
  2982  00123C  364E               	rlcf	(___awmod@divisor+1)^0,f,c
  2983  00123E  2A4F               	incf	___awmod@counter^0,f,c
  2984  001240                     l3492:
  2985  001240  AE4E               	btfss	(___awmod@divisor+1)^0,7,c
  2986  001242  D7FA               	goto	l3490
  2987  001244                     u2610:
  2988  001244  504D               	movf	___awmod@divisor^0,w,c
  2989  001246  5C4B               	subwf	___awmod@dividend^0,w,c
  2990  001248  504E               	movf	(___awmod@divisor+1)^0,w,c
  2991  00124A  584C               	subwfb	(___awmod@dividend+1)^0,w,c
  2992  00124C  E304               	bnc	l3498
  2993  00124E  504D               	movf	___awmod@divisor^0,w,c
  2994  001250  5E4B               	subwf	___awmod@dividend^0,f,c
  2995  001252  504E               	movf	(___awmod@divisor+1)^0,w,c
  2996  001254  5A4C               	subwfb	(___awmod@dividend+1)^0,f,c
  2997  001256                     l3498:
  2998  001256  90D8               	bcf	status,0,c
  2999  001258  324E               	rrcf	(___awmod@divisor+1)^0,f,c
  3000  00125A  324D               	rrcf	___awmod@divisor^0,f,c
  3001  00125C  2E4F               	decfsz	___awmod@counter^0,f,c
  3002  00125E  D7F2               	goto	u2610
  3003  001260                     l3502:
  3004  001260  5050               	movf	___awmod@sign^0,w,c
  3005  001262  E004               	bz	l3506
  3006  001264  6C4B               	negf	___awmod@dividend^0,c
  3007  001266  1E4C               	comf	(___awmod@dividend+1)^0,f,c
  3008  001268  B0D8               	btfsc	status,0,c
  3009  00126A  2A4C               	incf	(___awmod@dividend+1)^0,f,c
  3010  00126C                     l3506:
  3011  00126C  C04B  F04B         	movff	___awmod@dividend,?___awmod
  3012  001270  C04C  F04C         	movff	___awmod@dividend+1,?___awmod+1
  3013  001274  0012               	return		;funcret
  3014  001276                     __end_of___awmod:
  3015                           	callstack 0
  3016                           
  3017 ;; *************** function _LcPutChar *****************
  3018 ;; Defined at:
  3019 ;;		line 161 in file "LcTLCD.c"
  3020 ;; Parameters:    Size  Location     Type
  3021 ;;  c               1    wreg     unsigned char 
  3022 ;; Auto vars:     Size  Location     Type
  3023 ;;  c               1   21[COMRAM] unsigned char 
  3024 ;; Return value:  Size  Location     Type
  3025 ;;                  1    wreg      void 
  3026 ;; Registers used:
  3027 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3028 ;; Tracked objects:
  3029 ;;		On entry : 0/0
  3030 ;;		On exit  : 0/0
  3031 ;;		Unchanged: 0/0
  3032 ;; Data sizes:     COMRAM   BANK0   BANK1
  3033 ;;      Params:         0       0       0
  3034 ;;      Locals:         1       0       0
  3035 ;;      Temps:          0       0       0
  3036 ;;      Totals:         1       0       0
  3037 ;;Total ram usage:        1 bytes
  3038 ;; Hardware stack levels used: 1
  3039 ;; Hardware stack levels required when called: 5
  3040 ;; This function calls:
  3041 ;;		_CantaData
  3042 ;;		_LcGotoXY
  3043 ;;		_WaitForBusy
  3044 ;; This function is called by:
  3045 ;;		_menuMotor
  3046 ;;		_displayMenu
  3047 ;;		_timeMotor
  3048 ;; This function uses a non-reentrant model
  3049 ;;
  3050                           
  3051                           	psect	text10
  3052  001342                     __ptext10:
  3053                           	callstack 0
  3054  001342                     _LcPutChar:
  3055                           	callstack 24
  3056                           
  3057                           ;incstack = 0
  3058                           ;LcPutChar@c stored from wreg
  3059  001342  6E5B               	movwf	LcPutChar@c^0,c
  3060                           
  3061                           ;LcTLCD.c: 171:  WaitForBusy(); CantaData(c);
  3062  001344  EC35  F00A         	call	_WaitForBusy	;wreg free
  3063  001348  505B               	movf	LcPutChar@c^0,w,c
  3064  00134A  EC54  F00A         	call	_CantaData
  3065                           
  3066                           ;LcTLCD.c: 173:  ++ColumnAct;
  3067  00134E  2A37               	incf	_ColumnAct^0,f,c
  3068                           
  3069                           ;LcTLCD.c: 174:  if (Rows == 3) {
  3070  001350  0E03               	movlw	3
  3071  001352  183A               	xorwf	_Rows^0,w,c
  3072  001354  E107               	bnz	l3454
  3073                           
  3074                           ;LcTLCD.c: 175:   if (ColumnAct >= 20) {
  3075  001356  0E13               	movlw	19
  3076  001358  6437               	cpfsgt	_ColumnAct^0,c
  3077  00135A  0C13               	retlw	19
  3078                           
  3079                           ;LcTLCD.c: 176:    ColumnAct = 0;
  3080  00135C  6A37               	clrf	_ColumnAct^0,c
  3081                           
  3082                           ;LcTLCD.c: 177:    if (++RowAct >= 4) RowAct = 0;
  3083  00135E  2A38               	incf	_RowAct^0,f,c
  3084  001360  0E03               	movlw	3
  3085  001362  D009               	goto	L4
  3086  001364                     l3454:
  3087                           
  3088                           ;LcTLCD.c: 181:  if (Rows == 2) {
  3089  001364  0E02               	movlw	2
  3090  001366  183A               	xorwf	_Rows^0,w,c
  3091  001368  E10A               	bnz	l3466
  3092                           
  3093                           ;LcTLCD.c: 182:   if (ColumnAct >= 40) {
  3094  00136A  0E27               	movlw	39
  3095  00136C  6437               	cpfsgt	_ColumnAct^0,c
  3096  00136E  0C27               	retlw	39
  3097                           
  3098                           ;LcTLCD.c: 183:    ColumnAct = 0;
  3099  001370  6A37               	clrf	_ColumnAct^0,c
  3100                           
  3101                           ;LcTLCD.c: 184:    if (++RowAct >= 2) RowAct = 0;
  3102  001372  2A38               	incf	_RowAct^0,f,c
  3103  001374  0E01               	movlw	1
  3104  001376                     L4:
  3105  001376  6438               	cpfsgt	_RowAct^0,c
  3106  001378  D009               	goto	l3472
  3107  00137A  6A38               	clrf	_RowAct^0,c
  3108  00137C  D007               	goto	l3472
  3109  00137E                     l3466:
  3110                           
  3111                           ;LcTLCD.c: 188:  if (RowAct == 1) {
  3112  00137E  0438               	decf	_RowAct^0,w,c
  3113  001380  A4D8               	btfss	status,2,c
  3114  001382  0012               	return	
  3115                           
  3116                           ;LcTLCD.c: 189:   if (ColumnAct >= 40) ColumnAct = 0;
  3117  001384  0E27               	movlw	39
  3118  001386  6437               	cpfsgt	_ColumnAct^0,c
  3119  001388  D001               	goto	l3472
  3120  00138A  6A37               	clrf	_ColumnAct^0,c
  3121  00138C                     l3472:
  3122                           
  3123                           ;LcTLCD.c: 190:   LcGotoXY(ColumnAct, RowAct);
  3124  00138C  C038  F053         	movff	_RowAct,LcGotoXY@Row
  3125  001390  5037               	movf	_ColumnAct^0,w,c
  3126  001392  EFCB  F007         	goto	_LcGotoXY
  3127  001396                     __end_of_LcPutChar:
  3128                           	callstack 0
  3129                           
  3130 ;; *************** function _CantaData *****************
  3131 ;; Defined at:
  3132 ;;		line 245 in file "LcTLCD.c"
  3133 ;; Parameters:    Size  Location     Type
  3134 ;;  Data            1    wreg     unsigned char 
  3135 ;; Auto vars:     Size  Location     Type
  3136 ;;  Data            1    7[COMRAM] unsigned char 
  3137 ;; Return value:  Size  Location     Type
  3138 ;;                  1    wreg      void 
  3139 ;; Registers used:
  3140 ;;		wreg, status,2, status,0, cstack
  3141 ;; Tracked objects:
  3142 ;;		On entry : 0/0
  3143 ;;		On exit  : 0/0
  3144 ;;		Unchanged: 0/0
  3145 ;; Data sizes:     COMRAM   BANK0   BANK1
  3146 ;;      Params:         0       0       0
  3147 ;;      Locals:         1       0       0
  3148 ;;      Temps:          0       0       0
  3149 ;;      Totals:         1       0       0
  3150 ;;Total ram usage:        1 bytes
  3151 ;; Hardware stack levels used: 1
  3152 ;; Hardware stack levels required when called: 3
  3153 ;; This function calls:
  3154 ;;		_CantaPartAlta
  3155 ;;		_CantaPartBaixa
  3156 ;; This function is called by:
  3157 ;;		_LcPutChar
  3158 ;; This function uses a non-reentrant model
  3159 ;;
  3160                           
  3161                           	psect	text11
  3162  0014A8                     __ptext11:
  3163                           	callstack 0
  3164  0014A8                     _CantaData:
  3165                           	callstack 25
  3166                           
  3167                           ;incstack = 0
  3168                           ;CantaData@Data stored from wreg
  3169  0014A8  6E4D               	movwf	CantaData@Data^0,c
  3170                           
  3171                           ;LcTLCD.c: 246:  (TRISDbits.TRISD0 = TRISDbits.TRISD1 = TRISDbits.TRISD2 = TRISDbits.TRI
      +                          SD3 = 0);
  3172  0014AA  9695               	bcf	149,3,c	;volatile
  3173  0014AC  9495               	bcf	149,2,c	;volatile
  3174  0014AE  9295               	bcf	149,1,c	;volatile
  3175  0014B0  9095               	bcf	149,0,c	;volatile
  3176                           
  3177                           ;LcTLCD.c: 247:  (LATDbits.LATD4 = 1);
  3178  0014B2  888C               	bsf	140,4,c	;volatile
  3179                           
  3180                           ;LcTLCD.c: 248:  (LATDbits.LATD5 = 0);
  3181  0014B4  9A8C               	bcf	140,5,c	;volatile
  3182                           
  3183                           ;LcTLCD.c: 249:  (LATDbits.LATD6 = 1);
  3184  0014B6  8C8C               	bsf	140,6,c	;volatile
  3185                           
  3186                           ;LcTLCD.c: 250:  CantaPartAlta(Data);
  3187  0014B8  504D               	movf	CantaData@Data^0,w,c
  3188  0014BA  EC6E  F009         	call	_CantaPartAlta
  3189                           
  3190                           ;LcTLCD.c: 251:  (LATDbits.LATD6 = 1);
  3191                           
  3192                           ;LcTLCD.c: 252:  (LATDbits.LATD6 = 0);
  3193                           
  3194                           ;LcTLCD.c: 253:  (LATDbits.LATD6 = 0);
  3195                           
  3196                           ;LcTLCD.c: 254:  (LATDbits.LATD6 = 1);
  3197  0014BE  D80B               	call	PL72	;call to abstracted procedure
  3198                           
  3199                           ;LcTLCD.c: 255:  CantaPartBaixa(Data);
  3200  0014C0  504D               	movf	CantaData@Data^0,w,c
  3201  0014C2  EC3B  F009         	call	_CantaPartBaixa
  3202                           
  3203                           ;LcTLCD.c: 256:  (LATDbits.LATD6 = 1);
  3204                           
  3205                           ;LcTLCD.c: 257:  (LATDbits.LATD6 = 0);
  3206                           
  3207                           ;LcTLCD.c: 258:  (TRISDbits.TRISD0 = TRISDbits.TRISD1 = TRISDbits.TRISD2 = TRISDbits.TRI
      +                          SD3 = 1);
  3208  0014C6  D000               	goto	PL50	;call to abstracted procedure
  3209  0014C8                     __end_of_CantaData:
  3210                           	callstack 0
  3211  0014C8                     PL50:
  3212                           	callstack 24
  3213  0014C8  8C8C               	bsf	140,6,c	;volatile
  3214  0014CA  9C8C               	bcf	140,6,c	;volatile
  3215  0014CC  8695               	bsf	149,3,c	;volatile
  3216  0014CE  8495               	bsf	149,2,c	;volatile
  3217  0014D0  8295               	bsf	149,1,c	;volatile
  3218  0014D2  8095               	bsf	149,0,c	;volatile
  3219  0014D4  0012               	return		;funcret
  3220  0014D6                     __end_ofPL50:
  3221                           	callstack 0
  3222  0014D6                     PL72:
  3223                           	callstack 24
  3224  0014D6  8C8C               	bsf	140,6,c	;volatile
  3225  0014D8  9C8C               	bcf	140,6,c	;volatile
  3226  0014DA  9C8C               	bcf	140,6,c	;volatile
  3227  0014DC  8C8C               	bsf	140,6,c	;volatile
  3228  0014DE  0012               	return	
  3229  0014E0                     __end_ofPL72:
  3230                           	callstack 0
  3231                           
  3232 ;; *************** function ___lbmod *****************
  3233 ;; Defined at:
  3234 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\lbmod.c"
  3235 ;; Parameters:    Size  Location     Type
  3236 ;;  dividend        1    wreg     unsigned char 
  3237 ;;  divisor         1    5[COMRAM] unsigned char 
  3238 ;; Auto vars:     Size  Location     Type
  3239 ;;  dividend        1    6[COMRAM] unsigned char 
  3240 ;;  rem             1    8[COMRAM] unsigned char 
  3241 ;;  counter         1    7[COMRAM] unsigned char 
  3242 ;; Return value:  Size  Location     Type
  3243 ;;                  1    wreg      unsigned char 
  3244 ;; Registers used:
  3245 ;;		wreg, status,2, status,0
  3246 ;; Tracked objects:
  3247 ;;		On entry : 0/0
  3248 ;;		On exit  : 0/0
  3249 ;;		Unchanged: 0/0
  3250 ;; Data sizes:     COMRAM   BANK0   BANK1
  3251 ;;      Params:         1       0       0
  3252 ;;      Locals:         3       0       0
  3253 ;;      Temps:          0       0       0
  3254 ;;      Totals:         4       0       0
  3255 ;;Total ram usage:        4 bytes
  3256 ;; Hardware stack levels used: 1
  3257 ;; Hardware stack levels required when called: 2
  3258 ;; This function calls:
  3259 ;;		Nothing
  3260 ;; This function is called by:
  3261 ;;		_menuMotor
  3262 ;; This function uses a non-reentrant model
  3263 ;;
  3264                           
  3265                           	psect	text12
  3266  001598                     __ptext12:
  3267                           	callstack 0
  3268  001598                     ___lbmod:
  3269                           	callstack 27
  3270                           
  3271                           ;incstack = 0
  3272                           ;___lbmod@dividend stored from wreg
  3273  001598  6E4C               	movwf	___lbmod@dividend^0,c
  3274  00159A  0E08               	movlw	8
  3275  00159C  6E4D               	movwf	___lbmod@counter^0,c
  3276  00159E  6A4E               	clrf	___lbmod@rem^0,c
  3277  0015A0                     l3780:
  3278  0015A0  90D8               	bcf	status,0,c
  3279  0015A2  344C               	rlcf	___lbmod@dividend^0,w,c
  3280  0015A4  344E               	rlcf	___lbmod@rem^0,w,c
  3281  0015A6  6E4E               	movwf	___lbmod@rem^0,c
  3282  0015A8  90D8               	bcf	status,0,c
  3283  0015AA  364C               	rlcf	___lbmod@dividend^0,f,c
  3284  0015AC  504B               	movf	___lbmod@divisor^0,w,c
  3285  0015AE  5C4E               	subwf	___lbmod@rem^0,w,c
  3286  0015B0  E302               	bnc	l3788
  3287  0015B2  504B               	movf	___lbmod@divisor^0,w,c
  3288  0015B4  5E4E               	subwf	___lbmod@rem^0,f,c
  3289  0015B6                     l3788:
  3290  0015B6  2E4D               	decfsz	___lbmod@counter^0,f,c
  3291  0015B8  D7F3               	goto	l3780
  3292  0015BA  504E               	movf	___lbmod@rem^0,w,c
  3293  0015BC  0012               	return		;funcret
  3294  0015BE                     __end_of___lbmod:
  3295                           	callstack 0
  3296                           
  3297 ;; *************** function ___lbdiv *****************
  3298 ;; Defined at:
  3299 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\lbdiv.c"
  3300 ;; Parameters:    Size  Location     Type
  3301 ;;  dividend        1    wreg     unsigned char 
  3302 ;;  divisor         1    5[COMRAM] unsigned char 
  3303 ;; Auto vars:     Size  Location     Type
  3304 ;;  dividend        1    6[COMRAM] unsigned char 
  3305 ;;  quotient        1    8[COMRAM] unsigned char 
  3306 ;;  counter         1    7[COMRAM] unsigned char 
  3307 ;; Return value:  Size  Location     Type
  3308 ;;                  1    wreg      unsigned char 
  3309 ;; Registers used:
  3310 ;;		wreg, status,2, status,0
  3311 ;; Tracked objects:
  3312 ;;		On entry : 0/0
  3313 ;;		On exit  : 0/0
  3314 ;;		Unchanged: 0/0
  3315 ;; Data sizes:     COMRAM   BANK0   BANK1
  3316 ;;      Params:         1       0       0
  3317 ;;      Locals:         3       0       0
  3318 ;;      Temps:          0       0       0
  3319 ;;      Totals:         4       0       0
  3320 ;;Total ram usage:        4 bytes
  3321 ;; Hardware stack levels used: 1
  3322 ;; Hardware stack levels required when called: 2
  3323 ;; This function calls:
  3324 ;;		Nothing
  3325 ;; This function is called by:
  3326 ;;		_menuMotor
  3327 ;; This function uses a non-reentrant model
  3328 ;;
  3329                           
  3330                           	psect	text13
  3331  0014E0                     __ptext13:
  3332                           	callstack 0
  3333  0014E0                     ___lbdiv:
  3334                           	callstack 27
  3335                           
  3336                           ;incstack = 0
  3337                           ;___lbdiv@dividend stored from wreg
  3338  0014E0  6E4C               	movwf	___lbdiv@dividend^0,c
  3339  0014E2  6A4E               	clrf	___lbdiv@quotient^0,c
  3340  0014E4  504B               	movf	___lbdiv@divisor^0,w,c
  3341  0014E6  E014               	bz	l3772
  3342  0014E8  0E01               	movlw	1
  3343  0014EA  6E4D               	movwf	___lbdiv@counter^0,c
  3344  0014EC  D003               	goto	l3760
  3345  0014EE                     l3756:
  3346  0014EE  90D8               	bcf	status,0,c
  3347  0014F0  364B               	rlcf	___lbdiv@divisor^0,f,c
  3348  0014F2  2A4D               	incf	___lbdiv@counter^0,f,c
  3349  0014F4                     l3760:
  3350  0014F4  AE4B               	btfss	___lbdiv@divisor^0,7,c
  3351  0014F6  D7FB               	goto	l3756
  3352  0014F8                     u2940:
  3353  0014F8  90D8               	bcf	status,0,c
  3354  0014FA  364E               	rlcf	___lbdiv@quotient^0,f,c
  3355  0014FC  504B               	movf	___lbdiv@divisor^0,w,c
  3356  0014FE  5C4C               	subwf	___lbdiv@dividend^0,w,c
  3357  001500  E303               	bnc	l3768
  3358  001502  504B               	movf	___lbdiv@divisor^0,w,c
  3359  001504  5E4C               	subwf	___lbdiv@dividend^0,f,c
  3360  001506  804E               	bsf	___lbdiv@quotient^0,0,c
  3361  001508                     l3768:
  3362  001508  90D8               	bcf	status,0,c
  3363  00150A  324B               	rrcf	___lbdiv@divisor^0,f,c
  3364  00150C  2E4D               	decfsz	___lbdiv@counter^0,f,c
  3365  00150E  D7F4               	goto	u2940
  3366  001510                     l3772:
  3367  001510  504E               	movf	___lbdiv@quotient^0,w,c
  3368  001512  0012               	return		;funcret
  3369  001514                     __end_of___lbdiv:
  3370                           	callstack 0
  3371                           
  3372 ;; *************** function _SiRecievedByte *****************
  3373 ;; Defined at:
  3374 ;;		line 31 in file "SIO.c"
  3375 ;; Parameters:    Size  Location     Type
  3376 ;;		None
  3377 ;; Auto vars:     Size  Location     Type
  3378 ;;		None
  3379 ;; Return value:  Size  Location     Type
  3380 ;;                  1    wreg      unsigned char 
  3381 ;; Registers used:
  3382 ;;		wreg
  3383 ;; Tracked objects:
  3384 ;;		On entry : 0/0
  3385 ;;		On exit  : 0/0
  3386 ;;		Unchanged: 0/0
  3387 ;; Data sizes:     COMRAM   BANK0   BANK1
  3388 ;;      Params:         0       0       0
  3389 ;;      Locals:         0       0       0
  3390 ;;      Temps:          0       0       0
  3391 ;;      Totals:         0       0       0
  3392 ;;Total ram usage:        0 bytes
  3393 ;; Hardware stack levels used: 1
  3394 ;; Hardware stack levels required when called: 2
  3395 ;; This function calls:
  3396 ;;		Nothing
  3397 ;; This function is called by:
  3398 ;;		_menuMotor
  3399 ;; This function uses a non-reentrant model
  3400 ;;
  3401                           
  3402                           	psect	text14
  3403  00179A                     __ptext14:
  3404                           	callstack 0
  3405  00179A                     _SiRecievedByte:
  3406                           	callstack 27
  3407                           
  3408                           ;SIO.c: 32:     return PIR1bits.RCIF;
  3409                           
  3410                           ;incstack = 0
  3411  00179A  BA9E               	btfsc	158,5,c	;volatile
  3412  00179C  0C01               	retlw	1
  3413  00179E  0C00               	retlw	0	;funcret
  3414  0017A0                     __end_of_SiRecievedByte:
  3415                           	callstack 0
  3416                           
  3417 ;; *************** function _SiReadByte *****************
  3418 ;; Defined at:
  3419 ;;		line 35 in file "SIO.c"
  3420 ;; Parameters:    Size  Location     Type
  3421 ;;		None
  3422 ;; Auto vars:     Size  Location     Type
  3423 ;;		None
  3424 ;; Return value:  Size  Location     Type
  3425 ;;                  1    wreg      unsigned char 
  3426 ;; Registers used:
  3427 ;;		wreg, status,2
  3428 ;; Tracked objects:
  3429 ;;		On entry : 0/0
  3430 ;;		On exit  : 0/0
  3431 ;;		Unchanged: 0/0
  3432 ;; Data sizes:     COMRAM   BANK0   BANK1
  3433 ;;      Params:         0       0       0
  3434 ;;      Locals:         0       0       0
  3435 ;;      Temps:          0       0       0
  3436 ;;      Totals:         0       0       0
  3437 ;;Total ram usage:        0 bytes
  3438 ;; Hardware stack levels used: 1
  3439 ;; Hardware stack levels required when called: 2
  3440 ;; This function calls:
  3441 ;;		Nothing
  3442 ;; This function is called by:
  3443 ;;		_menuMotor
  3444 ;; This function uses a non-reentrant model
  3445 ;;
  3446                           
  3447                           	psect	text15
  3448  0017AE                     __ptext15:
  3449                           	callstack 0
  3450  0017AE                     _SiReadByte:
  3451                           	callstack 27
  3452                           
  3453                           ;SIO.c: 36:     return RCREG;
  3454                           
  3455                           ;incstack = 0
  3456  0017AE  50AE               	movf	174,w,c	;volatile
  3457  0017B0  0012               	return		;funcret
  3458  0017B2                     __end_of_SiReadByte:
  3459                           	callstack 0
  3460                           
  3461 ;; *************** function _LcCursorOn *****************
  3462 ;; Defined at:
  3463 ;;		line 120 in file "LcTLCD.c"
  3464 ;; Parameters:    Size  Location     Type
  3465 ;;		None
  3466 ;; Auto vars:     Size  Location     Type
  3467 ;;		None
  3468 ;; Return value:  Size  Location     Type
  3469 ;;                  1    wreg      void 
  3470 ;; Registers used:
  3471 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3472 ;; Tracked objects:
  3473 ;;		On entry : 0/0
  3474 ;;		On exit  : 0/0
  3475 ;;		Unchanged: 0/0
  3476 ;; Data sizes:     COMRAM   BANK0   BANK1
  3477 ;;      Params:         0       0       0
  3478 ;;      Locals:         0       0       0
  3479 ;;      Temps:          0       0       0
  3480 ;;      Totals:         0       0       0
  3481 ;;Total ram usage:        0 bytes
  3482 ;; Hardware stack levels used: 1
  3483 ;; Hardware stack levels required when called: 4
  3484 ;; This function calls:
  3485 ;;		_CantaIR
  3486 ;;		_WaitForBusy
  3487 ;; This function is called by:
  3488 ;;		_menuMotor
  3489 ;; This function uses a non-reentrant model
  3490 ;;
  3491                           
  3492                           	psect	text16
  3493  00174C                     __ptext16:
  3494                           	callstack 0
  3495  00174C                     _LcCursorOn:
  3496                           	callstack 25
  3497                           
  3498                           ;LcTLCD.c: 123:  WaitForBusy();
  3499                           
  3500                           ;incstack = 0
  3501  00174C  EC35  F00A         	call	_WaitForBusy	;wreg free
  3502                           
  3503                           ;LcTLCD.c: 124:  CantaIR(0x08 | 0x04 | 0x02);
  3504  001750  0E0E               	movlw	14
  3505  001752  EF56  F00B         	goto	_CantaIR
  3506  001756                     __end_of_LcCursorOn:
  3507                           	callstack 0
  3508                           
  3509 ;; *************** function _LcCursorOff *****************
  3510 ;; Defined at:
  3511 ;;		line 127 in file "LcTLCD.c"
  3512 ;; Parameters:    Size  Location     Type
  3513 ;;		None
  3514 ;; Auto vars:     Size  Location     Type
  3515 ;;		None
  3516 ;; Return value:  Size  Location     Type
  3517 ;;                  1    wreg      void 
  3518 ;; Registers used:
  3519 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3520 ;; Tracked objects:
  3521 ;;		On entry : 0/0
  3522 ;;		On exit  : 0/0
  3523 ;;		Unchanged: 0/0
  3524 ;; Data sizes:     COMRAM   BANK0   BANK1
  3525 ;;      Params:         0       0       0
  3526 ;;      Locals:         0       0       0
  3527 ;;      Temps:          0       0       0
  3528 ;;      Totals:         0       0       0
  3529 ;;Total ram usage:        0 bytes
  3530 ;; Hardware stack levels used: 1
  3531 ;; Hardware stack levels required when called: 4
  3532 ;; This function calls:
  3533 ;;		_CantaIR
  3534 ;;		_WaitForBusy
  3535 ;; This function is called by:
  3536 ;;		_menuMotor
  3537 ;; This function uses a non-reentrant model
  3538 ;;
  3539                           
  3540                           	psect	text17
  3541  001756                     __ptext17:
  3542                           	callstack 0
  3543  001756                     _LcCursorOff:
  3544                           	callstack 25
  3545                           
  3546                           ;LcTLCD.c: 130:  WaitForBusy();
  3547                           
  3548                           ;incstack = 0
  3549  001756  EC35  F00A         	call	_WaitForBusy	;wreg free
  3550                           
  3551                           ;LcTLCD.c: 131:  CantaIR(0x08 | 0x04);
  3552  00175A  0E0C               	movlw	12
  3553  00175C  EF56  F00B         	goto	_CantaIR
  3554  001760                     __end_of_LcCursorOff:
  3555                           	callstack 0
  3556                           
  3557 ;; *************** function _LcClear *****************
  3558 ;; Defined at:
  3559 ;;		line 113 in file "LcTLCD.c"
  3560 ;; Parameters:    Size  Location     Type
  3561 ;;		None
  3562 ;; Auto vars:     Size  Location     Type
  3563 ;;		None
  3564 ;; Return value:  Size  Location     Type
  3565 ;;                  1    wreg      void 
  3566 ;; Registers used:
  3567 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3568 ;; Tracked objects:
  3569 ;;		On entry : 0/0
  3570 ;;		On exit  : 0/0
  3571 ;;		Unchanged: 0/0
  3572 ;; Data sizes:     COMRAM   BANK0   BANK1
  3573 ;;      Params:         0       0       0
  3574 ;;      Locals:         0       0       0
  3575 ;;      Temps:          0       0       0
  3576 ;;      Totals:         0       0       0
  3577 ;;Total ram usage:        0 bytes
  3578 ;; Hardware stack levels used: 1
  3579 ;; Hardware stack levels required when called: 4
  3580 ;; This function calls:
  3581 ;;		_CantaIR
  3582 ;;		_Espera
  3583 ;;		_WaitForBusy
  3584 ;; This function is called by:
  3585 ;;		_menuMotor
  3586 ;; This function uses a non-reentrant model
  3587 ;;
  3588                           
  3589                           	psect	text18
  3590  0016FC                     __ptext18:
  3591                           	callstack 0
  3592  0016FC                     _LcClear:
  3593                           	callstack 25
  3594                           
  3595                           ;LcTLCD.c: 116:  WaitForBusy(); CantaIR(0x01);
  3596                           
  3597                           ;incstack = 0
  3598  0016FC  EC35  F00A         	call	_WaitForBusy	;wreg free
  3599  001700  0E01               	movlw	1
  3600  001702  EC56  F00B         	call	_CantaIR
  3601                           
  3602                           ;LcTLCD.c: 117:  Espera(Timer, 3);
  3603  001706  EC0C  F007         	call	PL22	;call to abstracted procedure
  3604  00170A  0E03               	movlw	3
  3605  00170C  6E54               	movwf	Espera@ms^0,c
  3606  00170E  EF37  F00B         	goto	_Espera	;wreg free
  3607  001712                     __end_of_LcClear:
  3608                           	callstack 0
  3609                           
  3610 ;; *************** function _KeSetMode *****************
  3611 ;; Defined at:
  3612 ;;		line 247 in file "keypad.c"
  3613 ;; Parameters:    Size  Location     Type
  3614 ;;  menuMode        1    wreg     unsigned char 
  3615 ;; Auto vars:     Size  Location     Type
  3616 ;;  menuMode        1    6[COMRAM] unsigned char 
  3617 ;; Return value:  Size  Location     Type
  3618 ;;                  1    wreg      void 
  3619 ;; Registers used:
  3620 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3621 ;; Tracked objects:
  3622 ;;		On entry : 0/0
  3623 ;;		On exit  : 0/0
  3624 ;;		Unchanged: 0/0
  3625 ;; Data sizes:     COMRAM   BANK0   BANK1
  3626 ;;      Params:         0       0       0
  3627 ;;      Locals:         1       0       0
  3628 ;;      Temps:          0       0       0
  3629 ;;      Totals:         1       0       0
  3630 ;;Total ram usage:        1 bytes
  3631 ;; Hardware stack levels used: 1
  3632 ;; Hardware stack levels required when called: 3
  3633 ;; This function calls:
  3634 ;;		_TiResetTics
  3635 ;; This function is called by:
  3636 ;;		_menuMotor
  3637 ;; This function uses a non-reentrant model
  3638 ;;
  3639                           
  3640                           	psect	text19
  3641  0015E4                     __ptext19:
  3642                           	callstack 0
  3643  0015E4                     _KeSetMode:
  3644                           	callstack 26
  3645                           
  3646                           ;incstack = 0
  3647                           ;KeSetMode@menuMode stored from wreg
  3648  0015E4  6E4C               	movwf	KeSetMode@menuMode^0,c
  3649                           
  3650                           ;keypad.c: 248:     if (menuMode == 1){
  3651  0015E6  044C               	decf	KeSetMode@menuMode^0,w,c
  3652  0015E8  E108               	bnz	l3556
  3653                           
  3654                           ;keypad.c: 249:         previous = 0;
  3655  0015EA  6A40               	clrf	_previous^0,c
  3656                           
  3657                           ;keypad.c: 250:         numPresses = 0;
  3658  0015EC  6A3E               	clrf	_numPresses^0,c
  3659                           
  3660                           ;keypad.c: 251:         available = 0;
  3661  0015EE  6A3D               	clrf	_available^0,c
  3662                           
  3663                           ;keypad.c: 252:         stateSMS = 2;
  3664  0015F0  0E02               	movlw	2
  3665  0015F2  6E3B               	movwf	_stateSMS^0,c
  3666                           
  3667                           ;keypad.c: 253:         TiResetTics(timer_SMS);
  3668  0015F4  5042               	movf	_timer_SMS^0,w,c
  3669  0015F6  EF64  F00B         	goto	_TiResetTics
  3670  0015FA                     l3556:
  3671  0015FA  504C               	movf	KeSetMode@menuMode^0,w,c
  3672  0015FC  A4D8               	btfss	status,2,c
  3673  0015FE  0012               	return	
  3674                           
  3675                           ;keypad.c: 255:         stateSMS = 4;
  3676  001600  D000               	goto	PL86	;call to abstracted procedure
  3677  001602                     __end_of_KeSetMode:
  3678                           	callstack 0
  3679  001602                     PL86:
  3680                           	callstack 26
  3681  001602  0E04               	movlw	4
  3682  001604  6E3B               	movwf	_stateSMS^0,c
  3683  001606  0C04               	retlw	4
  3684  001608                     __end_ofPL86:
  3685                           	callstack 0
  3686                           
  3687 ;; *************** function _KeGetCharValue *****************
  3688 ;; Defined at:
  3689 ;;		line 221 in file "keypad.c"
  3690 ;; Parameters:    Size  Location     Type
  3691 ;;		None
  3692 ;; Auto vars:     Size  Location     Type
  3693 ;;		None
  3694 ;; Return value:  Size  Location     Type
  3695 ;;                  1    wreg      unsigned char 
  3696 ;; Registers used:
  3697 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3698 ;; Tracked objects:
  3699 ;;		On entry : 0/0
  3700 ;;		On exit  : 0/0
  3701 ;;		Unchanged: 0/0
  3702 ;; Data sizes:     COMRAM   BANK0   BANK1
  3703 ;;      Params:         0       0       0
  3704 ;;      Locals:         0       0       0
  3705 ;;      Temps:          0       0       0
  3706 ;;      Totals:         0       0       0
  3707 ;;Total ram usage:        0 bytes
  3708 ;; Hardware stack levels used: 1
  3709 ;; Hardware stack levels required when called: 4
  3710 ;; This function calls:
  3711 ;;		_KeGetGenericValue
  3712 ;;		_getFullValue
  3713 ;; This function is called by:
  3714 ;;		_menuMotor
  3715 ;; This function uses a non-reentrant model
  3716 ;;
  3717                           
  3718                           	psect	text20
  3719  00176A                     __ptext20:
  3720                           	callstack 0
  3721  00176A                     _KeGetCharValue:
  3722                           	callstack 25
  3723                           
  3724                           ;keypad.c: 222:     return getFullValue(KeGetGenericValue());
  3725                           
  3726                           ;incstack = 0
  3727  00176A  ECA0  F00A         	call	_KeGetGenericValue	;wreg free
  3728  00176E  EF95  F008         	goto	_getFullValue
  3729  001772                     __end_of_KeGetCharValue:
  3730                           	callstack 0
  3731                           
  3732 ;; *************** function _getFullValue *****************
  3733 ;; Defined at:
  3734 ;;		line 230 in file "keypad.c"
  3735 ;; Parameters:    Size  Location     Type
  3736 ;;  generic         1    wreg     unsigned char 
  3737 ;; Auto vars:     Size  Location     Type
  3738 ;;  generic         1    9[COMRAM] unsigned char 
  3739 ;; Return value:  Size  Location     Type
  3740 ;;                  1    wreg      unsigned char 
  3741 ;; Registers used:
  3742 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
  3743 ;; Tracked objects:
  3744 ;;		On entry : 0/0
  3745 ;;		On exit  : 0/0
  3746 ;;		Unchanged: 0/0
  3747 ;; Data sizes:     COMRAM   BANK0   BANK1
  3748 ;;      Params:         0       0       0
  3749 ;;      Locals:         1       0       0
  3750 ;;      Temps:          4       0       0
  3751 ;;      Totals:         5       0       0
  3752 ;;Total ram usage:        5 bytes
  3753 ;; Hardware stack levels used: 1
  3754 ;; Hardware stack levels required when called: 2
  3755 ;; This function calls:
  3756 ;;		Nothing
  3757 ;; This function is called by:
  3758 ;;		_KeGetCharValue
  3759 ;; This function uses a non-reentrant model
  3760 ;;
  3761                           
  3762                           	psect	text21
  3763  00112A                     __ptext21:
  3764                           	callstack 0
  3765  00112A                     _getFullValue:
  3766                           	callstack 26
  3767                           
  3768                           ;incstack = 0
  3769                           ;getFullValue@generic stored from wreg
  3770  00112A  6E4F               	movwf	getFullValue@generic^0,c
  3771                           
  3772                           ;keypad.c: 232:     if (generic - '0' >= 2 && generic - '0' <= 9){
  3773  00112C  D82D               	call	PL38	;call to abstracted procedure
  3774  00112E  E103               	bnz	u2460
  3775  001130  0E02               	movlw	2
  3776  001132  5C4D               	subwf	(??_getFullValue+2)^0,w,c
  3777  001134  E30A               	bnc	l3428
  3778  001136                     u2460:
  3779  001136  D828               	call	PL38	;call to abstracted procedure
  3780  001138  E108               	bnz	l3428
  3781  00113A  0E0A               	movlw	10
  3782  00113C  5C4D               	subwf	(??_getFullValue+2)^0,w,c
  3783  00113E  E205               	bc	l3428
  3784                           
  3785                           ;keypad.c: 233:         if (SMSTABLE[generic - '0' - 1][(numPresses-1)] == '\0'){
  3786  001140  D806               	call	PL8	;call to abstracted procedure
  3787  001142  E105               	bnz	PL8
  3788                           
  3789                           ;keypad.c: 234:             numPresses = 1;
  3790  001144  0E01               	movlw	1
  3791  001146  6E3E               	movwf	_numPresses^0,c
  3792  001148                     l3424:
  3793                           
  3794                           ;keypad.c: 236:         return SMSTABLE[generic - '0' - 1][(numPresses-1)];
  3795  001148  D002               	goto	PL8	;call to abstracted procedure
  3796  00114A                     l3428:
  3797                           
  3798                           ;keypad.c: 238:     return generic;
  3799  00114A  504F               	movf	getFullValue@generic^0,w,c
  3800  00114C  0012               	return		;funcret
  3801  00114E                     __end_of_getFullValue:
  3802                           	callstack 0
  3803  00114E                     PL8:
  3804                           	callstack 26
  3805  00114E  0ED9               	movlw	217
  3806  001150  6E4B               	movwf	??_getFullValue^0,c
  3807  001152  0EFE               	movlw	254
  3808  001154  6E4C               	movwf	(??_getFullValue+1)^0,c
  3809  001156  504F               	movf	getFullValue@generic^0,w,c
  3810  001158  0D06               	mullw	6
  3811  00115A  0EC8               	movlw	low _SMSTABLE
  3812  00115C  6E4D               	movwf	(??_getFullValue+2)^0,c
  3813  00115E  0E1F               	movlw	high _SMSTABLE
  3814  001160  6E4E               	movwf	(??_getFullValue+3)^0,c
  3815  001162  50F3               	movf	243,w,c
  3816  001164  264D               	addwf	(??_getFullValue+2)^0,f,c
  3817  001166  50F4               	movf	244,w,c
  3818  001168  224E               	addwfc	(??_getFullValue+3)^0,f,c
  3819  00116A  503E               	movf	_numPresses^0,w,c
  3820  00116C  264D               	addwf	(??_getFullValue+2)^0,f,c
  3821  00116E  0E00               	movlw	0
  3822  001170  224E               	addwfc	(??_getFullValue+3)^0,f,c
  3823  001172  504B               	movf	??_getFullValue^0,w,c
  3824  001174  264D               	addwf	(??_getFullValue+2)^0,f,c
  3825  001176  504C               	movf	(??_getFullValue+1)^0,w,c
  3826  001178  224E               	addwfc	(??_getFullValue+3)^0,f,c
  3827  00117A  C04D  FFF6         	movff	??_getFullValue+2,tblptrl
  3828  00117E  C04E  FFF7         	movff	??_getFullValue+3,tblptrh
  3829  001182                     	if	0	;tblptru may be non-zero
  3830  001182                     	endif
  3831  001182                     	if	0	;tblptru may be non-zero
  3832  001182                     	endif
  3833  001182  0008               	tblrd		*
  3834  001184  50F5               	movf	tablat,w,c
  3835  001186  0012               	return	
  3836  001188                     __end_ofPL8:
  3837                           	callstack 0
  3838  001188                     PL38:
  3839                           	callstack 26
  3840  001188  0ED0               	movlw	208
  3841  00118A  6E4B               	movwf	??_getFullValue^0,c
  3842  00118C  684C               	setf	(??_getFullValue+1)^0,c
  3843  00118E  504F               	movf	getFullValue@generic^0,w,c
  3844  001190  6E4D               	movwf	(??_getFullValue+2)^0,c
  3845  001192  6A4E               	clrf	(??_getFullValue+3)^0,c
  3846  001194  504B               	movf	??_getFullValue^0,w,c
  3847  001196  264D               	addwf	(??_getFullValue+2)^0,f,c
  3848  001198  504C               	movf	(??_getFullValue+1)^0,w,c
  3849  00119A  224E               	addwfc	(??_getFullValue+3)^0,f,c
  3850  00119C  504E               	movf	(??_getFullValue+3)^0,w,c
  3851  00119E  0012               	return	
  3852  0011A0                     __end_ofPL38:
  3853                           	callstack 0
  3854                           
  3855 ;; *************** function _JoSetMode *****************
  3856 ;; Defined at:
  3857 ;;		line 109 in file "Joystick.c"
  3858 ;; Parameters:    Size  Location     Type
  3859 ;;  mode            1    wreg     unsigned char 
  3860 ;; Auto vars:     Size  Location     Type
  3861 ;;  mode            1    5[COMRAM] unsigned char 
  3862 ;; Return value:  Size  Location     Type
  3863 ;;                  1    wreg      void 
  3864 ;; Registers used:
  3865 ;;		wreg
  3866 ;; Tracked objects:
  3867 ;;		On entry : 0/0
  3868 ;;		On exit  : 0/0
  3869 ;;		Unchanged: 0/0
  3870 ;; Data sizes:     COMRAM   BANK0   BANK1
  3871 ;;      Params:         0       0       0
  3872 ;;      Locals:         1       0       0
  3873 ;;      Temps:          0       0       0
  3874 ;;      Totals:         1       0       0
  3875 ;;Total ram usage:        1 bytes
  3876 ;; Hardware stack levels used: 1
  3877 ;; Hardware stack levels required when called: 2
  3878 ;; This function calls:
  3879 ;;		Nothing
  3880 ;; This function is called by:
  3881 ;;		_menuMotor
  3882 ;; This function uses a non-reentrant model
  3883 ;;
  3884                           
  3885                           	psect	text22
  3886  001772                     __ptext22:
  3887                           	callstack 0
  3888  001772                     _JoSetMode:
  3889                           	callstack 27
  3890                           
  3891                           ;incstack = 0
  3892                           ;JoSetMode@mode stored from wreg
  3893  001772  6E4B               	movwf	JoSetMode@mode^0,c
  3894                           
  3895                           ;Joystick.c: 110:     joyMode = mode;
  3896  001774  C04B  F02B         	movff	JoSetMode@mode,_joyMode
  3897  001778  0012               	return		;funcret
  3898  00177A                     __end_of_JoSetMode:
  3899                           	callstack 0
  3900                           
  3901 ;; *************** function _JoMoved *****************
  3902 ;; Defined at:
  3903 ;;		line 101 in file "Joystick.c"
  3904 ;; Parameters:    Size  Location     Type
  3905 ;;		None
  3906 ;; Auto vars:     Size  Location     Type
  3907 ;;		None
  3908 ;; Return value:  Size  Location     Type
  3909 ;;                  1    wreg      unsigned char 
  3910 ;; Registers used:
  3911 ;;		wreg, status,2
  3912 ;; Tracked objects:
  3913 ;;		On entry : 0/0
  3914 ;;		On exit  : 0/0
  3915 ;;		Unchanged: 0/0
  3916 ;; Data sizes:     COMRAM   BANK0   BANK1
  3917 ;;      Params:         0       0       0
  3918 ;;      Locals:         0       0       0
  3919 ;;      Temps:          0       0       0
  3920 ;;      Totals:         0       0       0
  3921 ;;Total ram usage:        0 bytes
  3922 ;; Hardware stack levels used: 1
  3923 ;; Hardware stack levels required when called: 2
  3924 ;; This function calls:
  3925 ;;		Nothing
  3926 ;; This function is called by:
  3927 ;;		_menuMotor
  3928 ;; This function uses a non-reentrant model
  3929 ;;
  3930                           
  3931                           	psect	text23
  3932  0017B2                     __ptext23:
  3933                           	callstack 0
  3934  0017B2                     _JoMoved:
  3935                           	callstack 27
  3936                           
  3937                           ;Joystick.c: 102:     return moved;
  3938                           
  3939                           ;incstack = 0
  3940  0017B2  502D               	movf	_moved^0,w,c
  3941  0017B4  0012               	return		;funcret
  3942  0017B6                     __end_of_JoMoved:
  3943                           	callstack 0
  3944                           
  3945 ;; *************** function _JoDirection *****************
  3946 ;; Defined at:
  3947 ;;		line 105 in file "Joystick.c"
  3948 ;; Parameters:    Size  Location     Type
  3949 ;;		None
  3950 ;; Auto vars:     Size  Location     Type
  3951 ;;		None
  3952 ;; Return value:  Size  Location     Type
  3953 ;;                  1    wreg      unsigned char 
  3954 ;; Registers used:
  3955 ;;		wreg, status,2
  3956 ;; Tracked objects:
  3957 ;;		On entry : 0/0
  3958 ;;		On exit  : 0/0
  3959 ;;		Unchanged: 0/0
  3960 ;; Data sizes:     COMRAM   BANK0   BANK1
  3961 ;;      Params:         0       0       0
  3962 ;;      Locals:         0       0       0
  3963 ;;      Temps:          0       0       0
  3964 ;;      Totals:         0       0       0
  3965 ;;Total ram usage:        0 bytes
  3966 ;; Hardware stack levels used: 1
  3967 ;; Hardware stack levels required when called: 2
  3968 ;; This function calls:
  3969 ;;		Nothing
  3970 ;; This function is called by:
  3971 ;;		_menuMotor
  3972 ;; This function uses a non-reentrant model
  3973 ;;
  3974                           
  3975                           	psect	text24
  3976  0017B6                     __ptext24:
  3977                           	callstack 0
  3978  0017B6                     _JoDirection:
  3979                           	callstack 27
  3980                           
  3981                           ;Joystick.c: 106:     return send;
  3982                           
  3983                           ;incstack = 0
  3984  0017B6  5030               	movf	_send^0,w,c
  3985  0017B8  0012               	return		;funcret
  3986  0017BA                     __end_of_JoDirection:
  3987                           	callstack 0
  3988                           
  3989 ;; *************** function _DaSaveUser *****************
  3990 ;; Defined at:
  3991 ;;		line 334 in file "EEPROM.c"
  3992 ;; Parameters:    Size  Location     Type
  3993 ;;  regUser        18    5[COMRAM] struct .
  3994 ;; Auto vars:     Size  Location     Type
  3995 ;;		None
  3996 ;; Return value:  Size  Location     Type
  3997 ;;                  1    wreg      void 
  3998 ;; Registers used:
  3999 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  4000 ;; Tracked objects:
  4001 ;;		On entry : 0/0
  4002 ;;		On exit  : 0/0
  4003 ;;		Unchanged: 0/0
  4004 ;; Data sizes:     COMRAM   BANK0   BANK1
  4005 ;;      Params:        18       0       0
  4006 ;;      Locals:         0       0       0
  4007 ;;      Temps:          0       0       0
  4008 ;;      Totals:        18       0       0
  4009 ;;Total ram usage:       18 bytes
  4010 ;; Hardware stack levels used: 1
  4011 ;; Hardware stack levels required when called: 2
  4012 ;; This function calls:
  4013 ;;		Nothing
  4014 ;; This function is called by:
  4015 ;;		_menuMotor
  4016 ;; This function uses a non-reentrant model
  4017 ;;
  4018                           
  4019                           	psect	text25
  4020  00164E                     __ptext25:
  4021                           	callstack 0
  4022  00164E                     _DaSaveUser:
  4023                           	callstack 27
  4024                           
  4025                           ;EEPROM.c: 335:     state = 5;
  4026                           
  4027                           ;incstack = 0
  4028  00164E  0E05               	movlw	5
  4029  001650  6E2A               	movwf	_state@EEPROM$F1505^0,c
  4030                           
  4031                           ;EEPROM.c: 336:     position = 0;
  4032  001652  6A28               	clrf	_position^0,c
  4033                           
  4034                           ;EEPROM.c: 337:     userNum = 0;
  4035  001654  6A29               	clrf	_userNum^0,c
  4036                           
  4037                           ;EEPROM.c: 338:     mUser = regUser;
  4038  001656  EE20  F04B         	lfsr	2,DaSaveUser@regUser
  4039  00165A  EE10  F001         	lfsr	1,_mUser@EEPROM$F1509
  4040  00165E  0E11               	movlw	17
  4041  001660                     u2881:
  4042  001660  CFDB FFE3          	movff	plusw2,plusw1
  4043  001664  06E8               	decf	wreg,f,c
  4044  001666  E2FC               	bc	u2881
  4045                           
  4046                           ;EEPROM.c: 339:     status = 2;
  4047  001668  0E02               	movlw	2
  4048  00166A  6E27               	movwf	_status^0,c
  4049  00166C  0C02               	retlw	2	;funcret
  4050  00166E                     __end_of_DaSaveUser:
  4051                           	callstack 0
  4052                           
  4053 ;; *************** function _DaSaveScore *****************
  4054 ;; Defined at:
  4055 ;;		line 350 in file "EEPROM.c"
  4056 ;; Parameters:    Size  Location     Type
  4057 ;;  userScore       1    wreg     unsigned char 
  4058 ;; Auto vars:     Size  Location     Type
  4059 ;;  userScore       1    5[COMRAM] unsigned char 
  4060 ;; Return value:  Size  Location     Type
  4061 ;;                  1    wreg      void 
  4062 ;; Registers used:
  4063 ;;		wreg, status,2
  4064 ;; Tracked objects:
  4065 ;;		On entry : 0/0
  4066 ;;		On exit  : 0/0
  4067 ;;		Unchanged: 0/0
  4068 ;; Data sizes:     COMRAM   BANK0   BANK1
  4069 ;;      Params:         0       0       0
  4070 ;;      Locals:         1       0       0
  4071 ;;      Temps:          0       0       0
  4072 ;;      Totals:         1       0       0
  4073 ;;Total ram usage:        1 bytes
  4074 ;; Hardware stack levels used: 1
  4075 ;; Hardware stack levels required when called: 2
  4076 ;; This function calls:
  4077 ;;		Nothing
  4078 ;; This function is called by:
  4079 ;;		_menuMotor
  4080 ;; This function uses a non-reentrant model
  4081 ;;
  4082                           
  4083                           	psect	text26
  4084  001726                     __ptext26:
  4085                           	callstack 0
  4086  001726                     _DaSaveScore:
  4087                           	callstack 27
  4088                           
  4089                           ;incstack = 0
  4090                           ;DaSaveScore@userScore stored from wreg
  4091  001726  6E4B               	movwf	DaSaveScore@userScore^0,c
  4092                           
  4093                           ;EEPROM.c: 351:     saveScore = userScore;
  4094  001728  C04B  F025         	movff	DaSaveScore@userScore,_saveScore
  4095                           
  4096                           ;EEPROM.c: 352:     position = 0;
  4097  00172C  6A28               	clrf	_position^0,c
  4098                           
  4099                           ;EEPROM.c: 353:     status = 0;
  4100  00172E  6A27               	clrf	_status^0,c
  4101                           
  4102                           ;EEPROM.c: 354:     state = 20;
  4103  001730  0E14               	movlw	20
  4104  001732  6E2A               	movwf	_state@EEPROM$F1505^0,c
  4105  001734  0C14               	retlw	20	;funcret
  4106  001736                     __end_of_DaSaveScore:
  4107                           	callstack 0
  4108                           
  4109 ;; *************** function _DaGetStatus *****************
  4110 ;; Defined at:
  4111 ;;		line 342 in file "EEPROM.c"
  4112 ;; Parameters:    Size  Location     Type
  4113 ;;		None
  4114 ;; Auto vars:     Size  Location     Type
  4115 ;;		None
  4116 ;; Return value:  Size  Location     Type
  4117 ;;                  1    wreg      unsigned char 
  4118 ;; Registers used:
  4119 ;;		wreg, status,2
  4120 ;; Tracked objects:
  4121 ;;		On entry : 0/0
  4122 ;;		On exit  : 0/0
  4123 ;;		Unchanged: 0/0
  4124 ;; Data sizes:     COMRAM   BANK0   BANK1
  4125 ;;      Params:         0       0       0
  4126 ;;      Locals:         0       0       0
  4127 ;;      Temps:          0       0       0
  4128 ;;      Totals:         0       0       0
  4129 ;;Total ram usage:        0 bytes
  4130 ;; Hardware stack levels used: 1
  4131 ;; Hardware stack levels required when called: 2
  4132 ;; This function calls:
  4133 ;;		Nothing
  4134 ;; This function is called by:
  4135 ;;		_menuMotor
  4136 ;; This function uses a non-reentrant model
  4137 ;;
  4138                           
  4139                           	psect	text27
  4140  0017BA                     __ptext27:
  4141                           	callstack 0
  4142  0017BA                     _DaGetStatus:
  4143                           	callstack 27
  4144                           
  4145                           ;EEPROM.c: 343:     return status;
  4146                           
  4147                           ;incstack = 0
  4148  0017BA  5027               	movf	_status^0,w,c
  4149  0017BC  0012               	return		;funcret
  4150  0017BE                     __end_of_DaGetStatus:
  4151                           	callstack 0
  4152                           
  4153 ;; *************** function _DaGetIdle *****************
  4154 ;; Defined at:
  4155 ;;		line 346 in file "EEPROM.c"
  4156 ;; Parameters:    Size  Location     Type
  4157 ;;		None
  4158 ;; Auto vars:     Size  Location     Type
  4159 ;;		None
  4160 ;; Return value:  Size  Location     Type
  4161 ;;                  1    wreg      unsigned char 
  4162 ;; Registers used:
  4163 ;;		wreg, status,2
  4164 ;; Tracked objects:
  4165 ;;		On entry : 0/0
  4166 ;;		On exit  : 0/0
  4167 ;;		Unchanged: 0/0
  4168 ;; Data sizes:     COMRAM   BANK0   BANK1
  4169 ;;      Params:         0       0       0
  4170 ;;      Locals:         0       0       0
  4171 ;;      Temps:          0       0       0
  4172 ;;      Totals:         0       0       0
  4173 ;;Total ram usage:        0 bytes
  4174 ;; Hardware stack levels used: 1
  4175 ;; Hardware stack levels required when called: 2
  4176 ;; This function calls:
  4177 ;;		Nothing
  4178 ;; This function is called by:
  4179 ;;		_menuMotor
  4180 ;; This function uses a non-reentrant model
  4181 ;;
  4182                           
  4183                           	psect	text28
  4184  00177A                     __ptext28:
  4185                           	callstack 0
  4186  00177A                     _DaGetIdle:
  4187                           	callstack 27
  4188                           
  4189                           ;EEPROM.c: 347:     return state == 0;
  4190                           
  4191                           ;incstack = 0
  4192  00177A  502A               	movf	_state@EEPROM$F1505^0,w,c
  4193  00177C  B4D8               	btfsc	status,2,c
  4194  00177E  0C01               	retlw	1
  4195  001780  0C00               	retlw	0	;funcret
  4196  001782                     __end_of_DaGetIdle:
  4197                           	callstack 0
  4198                           
  4199 ;; *************** function _DaFindUser *****************
  4200 ;; Defined at:
  4201 ;;		line 320 in file "EEPROM.c"
  4202 ;; Parameters:    Size  Location     Type
  4203 ;;  logUser        18   21[COMRAM] struct .
  4204 ;; Auto vars:     Size  Location     Type
  4205 ;;		None
  4206 ;; Return value:  Size  Location     Type
  4207 ;;                  1    wreg      void 
  4208 ;; Registers used:
  4209 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4210 ;; Tracked objects:
  4211 ;;		On entry : 0/0
  4212 ;;		On exit  : 0/0
  4213 ;;		Unchanged: 0/0
  4214 ;; Data sizes:     COMRAM   BANK0   BANK1
  4215 ;;      Params:        18       0       0
  4216 ;;      Locals:         0       0       0
  4217 ;;      Temps:          0       0       0
  4218 ;;      Totals:        18       0       0
  4219 ;;Total ram usage:       18 bytes
  4220 ;; Hardware stack levels used: 1
  4221 ;; Hardware stack levels required when called: 5
  4222 ;; This function calls:
  4223 ;;		_LcGotoXY
  4224 ;; This function is called by:
  4225 ;;		_menuMotor
  4226 ;; This function uses a non-reentrant model
  4227 ;;
  4228                           
  4229                           	psect	text29
  4230  001608                     __ptext29:
  4231                           	callstack 0
  4232  001608                     _DaFindUser:
  4233                           	callstack 24
  4234                           
  4235                           ;EEPROM.c: 321:     state = 1;
  4236                           
  4237                           ;incstack = 0
  4238  001608  0E01               	movlw	1
  4239  00160A  6E2A               	movwf	_state@EEPROM$F1505^0,c
  4240                           
  4241                           ;EEPROM.c: 322:     userNum = 0;
  4242  00160C  6A29               	clrf	_userNum^0,c
  4243                           
  4244                           ;EEPROM.c: 323:     mUser = logUser;
  4245  00160E  EE20  F05B         	lfsr	2,DaFindUser@logUser
  4246  001612  EE10  F001         	lfsr	1,_mUser@EEPROM$F1509
  4247  001616  0E11               	movlw	17
  4248  001618                     u2871:
  4249  001618  CFDB FFE3          	movff	plusw2,plusw1
  4250  00161C  06E8               	decf	wreg,f,c
  4251  00161E  E2FC               	bc	u2871
  4252                           
  4253                           ;EEPROM.c: 324:     status = 2;
  4254  001620  0E02               	movlw	2
  4255  001622  6E27               	movwf	_status^0,c
  4256                           
  4257                           ;EEPROM.c: 325:     LcGotoXY(10,0);
  4258  001624  6A53               	clrf	LcGotoXY@Row^0,c
  4259  001626  0E0A               	movlw	10
  4260  001628  EFCB  F007         	goto	_LcGotoXY
  4261  00162C                     __end_of_DaFindUser:
  4262                           	callstack 0
  4263                           
  4264 ;; *************** function _joystickMotor *****************
  4265 ;; Defined at:
  4266 ;;		line 29 in file "Joystick.c"
  4267 ;; Parameters:    Size  Location     Type
  4268 ;;		None
  4269 ;; Auto vars:     Size  Location     Type
  4270 ;;		None
  4271 ;; Return value:  Size  Location     Type
  4272 ;;                  1    wreg      void 
  4273 ;; Registers used:
  4274 ;;		wreg, status,2, status,0, cstack
  4275 ;; Tracked objects:
  4276 ;;		On entry : 0/0
  4277 ;;		On exit  : 0/0
  4278 ;;		Unchanged: 0/0
  4279 ;; Data sizes:     COMRAM   BANK0   BANK1
  4280 ;;      Params:         0       0       0
  4281 ;;      Locals:         0       0       0
  4282 ;;      Temps:          2       0       0
  4283 ;;      Totals:         2       0       0
  4284 ;;Total ram usage:        2 bytes
  4285 ;; Hardware stack levels used: 1
  4286 ;; Hardware stack levels required when called: 3
  4287 ;; This function calls:
  4288 ;;		_SiIsAvailable
  4289 ;;		_SiSendChar
  4290 ;; This function is called by:
  4291 ;;		_main
  4292 ;; This function uses a non-reentrant model
  4293 ;;
  4294                           
  4295                           	psect	text30
  4296  000E24                     __ptext30:
  4297                           	callstack 0
  4298  000E24                     _joystickMotor:
  4299                           	callstack 27
  4300                           
  4301                           ;Joystick.c: 30:     LATC = stateJoy;
  4302                           
  4303                           ;incstack = 0
  4304  000E24  C02C  FF8B         	movff	_stateJoy,3979	;volatile
  4305                           
  4306                           ;Joystick.c: 31:     switch (stateJoy){
  4307  000E28  D04C               	goto	l4440
  4308  000E2A                     l630:
  4309                           
  4310                           ;Joystick.c: 33:             if (ADCON0bits.GO_DONE == 0){
  4311  000E2A  B2C2               	btfsc	194,1,c	;volatile
  4312  000E2C  0012               	return	
  4313                           
  4314                           ;Joystick.c: 34:                 y = ADRESH;
  4315  000E2E  CFC4 F02E          	movff	4036,_y	;volatile
  4316                           
  4317                           ;Joystick.c: 35:                 ADCON0bits.CHS0=1;
  4318  000E32  84C2               	bsf	194,2,c	;volatile
  4319                           
  4320                           ;Joystick.c: 36:                 ADCON0bits.CHS1=0;
  4321  000E34  96C2               	bcf	194,3,c	;volatile
  4322                           
  4323                           ;Joystick.c: 37:                 stateJoy = 1;
  4324  000E36  0E01               	movlw	1
  4325  000E38  6E2C               	movwf	_stateJoy^0,c
  4326                           
  4327                           ;Joystick.c: 38:                 ADCON0bits.GO_DONE=1;
  4328  000E3A  82C2               	bsf	194,1,c	;volatile
  4329  000E3C  0C01               	retlw	1
  4330  000E3E                     l633:
  4331                           
  4332                           ;Joystick.c: 42:             if (ADCON0bits.GO_DONE == 0){
  4333  000E3E  B2C2               	btfsc	194,1,c	;volatile
  4334  000E40  0012               	return	
  4335                           
  4336                           ;Joystick.c: 43:                 x = ADRESH;
  4337  000E42  CFC4 F02F          	movff	4036,_x	;volatile
  4338                           
  4339                           ;Joystick.c: 44:                 ADCON0bits.CHS0=0;
  4340  000E46  94C2               	bcf	194,2,c	;volatile
  4341                           
  4342                           ;Joystick.c: 45:                 ADCON0bits.CHS1=1;
  4343  000E48  86C2               	bsf	194,3,c	;volatile
  4344                           
  4345                           ;Joystick.c: 46:                 stateJoy = 2;
  4346  000E4A  0E02               	movlw	2
  4347  000E4C  6E2C               	movwf	_stateJoy^0,c
  4348  000E4E  0C02               	retlw	2
  4349  000E50                     l4394:
  4350                           
  4351                           ;Joystick.c: 50:             stateJoy = 4;
  4352  000E50  0E04               	movlw	4
  4353  000E52  6E2C               	movwf	_stateJoy^0,c
  4354                           
  4355                           ;Joystick.c: 51:             if (moved){
  4356  000E54  502D               	movf	_moved^0,w,c
  4357  000E56  E00F               	bz	l4406
  4358                           
  4359                           ;Joystick.c: 52:                 if (x >= 100 && x <= 150 && y >= 100 && y <= 150){
  4360  000E58  0E63               	movlw	99
  4361  000E5A  642F               	cpfsgt	_x^0,c
  4362  000E5C  0C63               	retlw	99
  4363  000E5E  0E97               	movlw	151
  4364  000E60  602F               	cpfslt	_x^0,c
  4365  000E62  0C97               	retlw	151
  4366  000E64  0E63               	movlw	99
  4367  000E66  642E               	cpfsgt	_y^0,c
  4368  000E68  0C63               	retlw	99
  4369  000E6A  0E97               	movlw	151
  4370  000E6C  602E               	cpfslt	_y^0,c
  4371  000E6E  0C97               	retlw	151
  4372                           
  4373                           ;Joystick.c: 53:                     moved = 0;
  4374  000E70  6A2D               	clrf	_moved^0,c
  4375                           
  4376                           ;Joystick.c: 54:                     LATCbits.LATC0 = 0;
  4377  000E72  908B               	bcf	139,0,c	;volatile
  4378                           
  4379                           ;Joystick.c: 56:             }else {
  4380                           
  4381                           ;Joystick.c: 55:                 }
  4382  000E74  0012               	return	
  4383  000E76                     l4406:
  4384                           
  4385                           ;Joystick.c: 57:                 if (x <= 10){
  4386  000E76  0E0B               	movlw	11
  4387  000E78  602F               	cpfslt	_x^0,c
  4388  000E7A  D008               	goto	l4412
  4389                           
  4390                           ;Joystick.c: 58:                     send = 'A';
  4391  000E7C  0E41               	movlw	65
  4392  000E7E                     L5:
  4393  000E7E  6E30               	movwf	_send^0,c
  4394                           
  4395                           ;Joystick.c: 59:                     moved = 1;
  4396  000E80  0E01               	movlw	1
  4397  000E82  6E2D               	movwf	_moved^0,c
  4398                           
  4399                           ;Joystick.c: 60:                     stateJoy = 4+joyMode;
  4400  000E84  502B               	movf	_joyMode^0,w,c
  4401  000E86  0F04               	addlw	4
  4402  000E88  6E2C               	movwf	_stateJoy^0,c
  4403                           
  4404                           ;Joystick.c: 61:                 } else if (x >= 240){
  4405  000E8A  0012               	return	
  4406  000E8C                     l4412:
  4407  000E8C  0EEF               	movlw	239
  4408  000E8E  642F               	cpfsgt	_x^0,c
  4409  000E90  D002               	goto	l4418
  4410                           
  4411                           ;Joystick.c: 62:                     send = 'D';
  4412  000E92  0E44               	movlw	68
  4413  000E94  D7F4               	goto	L5
  4414  000E96                     l4418:
  4415  000E96  0E0B               	movlw	11
  4416  000E98  602E               	cpfslt	_y^0,c
  4417  000E9A  D002               	goto	l4424
  4418                           
  4419                           ;Joystick.c: 66:                     send = 'S';
  4420  000E9C  0E53               	movlw	83
  4421  000E9E  D7EF               	goto	L5
  4422  000EA0                     l4424:
  4423  000EA0  0EEF               	movlw	239
  4424  000EA2  642E               	cpfsgt	_y^0,c
  4425  000EA4  0CEF               	retlw	239
  4426                           
  4427                           ;Joystick.c: 70:                     send = 'W';
  4428  000EA6  0E57               	movlw	87
  4429  000EA8  D7EA               	goto	L5
  4430  000EAA                     l646:
  4431                           
  4432                           ;Joystick.c: 82:             stateJoy = 0;
  4433                           
  4434                           ;Joystick.c: 83:             ADCON0bits.GO_DONE=1;
  4435                           
  4436                           ;Joystick.c: 84:             break;
  4437  000EAA  D01B               	goto	PL90	;call to abstracted procedure
  4438  000EAC                     l4430:
  4439                           
  4440                           ;Joystick.c: 87:             if(SiIsAvailable()){
  4441  000EAC  ECD0  F00B         	call	_SiIsAvailable	;wreg free
  4442  000EB0  0900               	iorlw	0
  4443  000EB2  B4D8               	btfsc	status,2,c
  4444  000EB4  0012               	return	
  4445                           
  4446                           ;Joystick.c: 88:                 SiSendChar(send);
  4447  000EB6  5030               	movf	_send^0,w,c
  4448  000EB8  ECC1  F00B         	call	_SiSendChar
  4449                           
  4450                           ;Joystick.c: 89:                 stateJoy = 0;
  4451                           
  4452                           ;Joystick.c: 90:                 ADCON0bits.GO_DONE=1;
  4453  000EBC  D012               	goto	PL90	;call to abstracted procedure
  4454  000EBE                     l649:
  4455                           
  4456                           ;Joystick.c: 94:             stateJoy = 0;
  4457  000EBE  6A2C               	clrf	_stateJoy^0,c
  4458                           
  4459                           ;Joystick.c: 95:             break;
  4460  000EC0  0012               	return	
  4461  000EC2                     l4440:
  4462  000EC2  502C               	movf	_stateJoy^0,w,c
  4463  000EC4  6E4C               	movwf	??_joystickMotor^0,c
  4464  000EC6  6A4D               	clrf	(??_joystickMotor+1)^0,c
  4465                           
  4466                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4467                           ; Switch size 1, requested type "space"
  4468                           ; Number of cases is 1, Range of values is 0 to 0
  4469                           ; switch strategies available:
  4470                           ; Name         Instructions Cycles
  4471                           ; simple_byte            4     3 (average)
  4472                           ;	Chosen strategy is simple_byte
  4473  000EC8  504D               	movf	(??_joystickMotor+1)^0,w,c
  4474  000ECA  E1F9               	bnz	l649
  4475                           
  4476                           ; Switch size 1, requested type "space"
  4477                           ; Number of cases is 5, Range of values is 0 to 5
  4478                           ; switch strategies available:
  4479                           ; Name         Instructions Cycles
  4480                           ; simple_byte           16     9 (average)
  4481                           ;	Chosen strategy is simple_byte
  4482  000ECC  504C               	movf	??_joystickMotor^0,w,c
  4483  000ECE  E0AD               	bz	l630
  4484  000ED0  0A01               	xorlw	1	; case 1
  4485  000ED2  E0B5               	bz	l633
  4486  000ED4  0A03               	xorlw	3	; case 2
  4487  000ED6  E0BC               	bz	l4394
  4488  000ED8  0A06               	xorlw	6	; case 4
  4489  000EDA  E003               	bz	PL90
  4490  000EDC  0A01               	xorlw	1	; case 5
  4491  000EDE  E0E6               	bz	l4430
  4492  000EE0  D7EE               	goto	l649
  4493  000EE2                     __end_of_joystickMotor:
  4494                           	callstack 0
  4495  000EE2                     PL90:
  4496                           	callstack 27
  4497  000EE2  6A2C               	clrf	_stateJoy^0,c
  4498  000EE4  82C2               	bsf	194,1,c	;volatile
  4499  000EE6  0012               	return	
  4500  000EE8                     __end_ofPL90:
  4501                           	callstack 0
  4502                           
  4503 ;; *************** function _SiSendChar *****************
  4504 ;; Defined at:
  4505 ;;		line 27 in file "SIO.c"
  4506 ;; Parameters:    Size  Location     Type
  4507 ;;  myByte          1    wreg     unsigned char 
  4508 ;; Auto vars:     Size  Location     Type
  4509 ;;  myByte          1    5[COMRAM] unsigned char 
  4510 ;; Return value:  Size  Location     Type
  4511 ;;                  1    wreg      void 
  4512 ;; Registers used:
  4513 ;;		wreg
  4514 ;; Tracked objects:
  4515 ;;		On entry : 0/0
  4516 ;;		On exit  : 0/0
  4517 ;;		Unchanged: 0/0
  4518 ;; Data sizes:     COMRAM   BANK0   BANK1
  4519 ;;      Params:         0       0       0
  4520 ;;      Locals:         1       0       0
  4521 ;;      Temps:          0       0       0
  4522 ;;      Totals:         1       0       0
  4523 ;;Total ram usage:        1 bytes
  4524 ;; Hardware stack levels used: 1
  4525 ;; Hardware stack levels required when called: 2
  4526 ;; This function calls:
  4527 ;;		Nothing
  4528 ;; This function is called by:
  4529 ;;		_menuMotor
  4530 ;;		_joystickMotor
  4531 ;; This function uses a non-reentrant model
  4532 ;;
  4533                           
  4534                           	psect	text31
  4535  001782                     __ptext31:
  4536                           	callstack 0
  4537  001782                     _SiSendChar:
  4538                           	callstack 27
  4539                           
  4540                           ;incstack = 0
  4541                           ;SiSendChar@myByte stored from wreg
  4542  001782  6E4B               	movwf	SiSendChar@myByte^0,c
  4543                           
  4544                           ;SIO.c: 28:     TXREG = myByte;
  4545  001784  C04B  FFAD         	movff	SiSendChar@myByte,4013	;volatile
  4546  001788  0012               	return		;funcret
  4547  00178A                     __end_of_SiSendChar:
  4548                           	callstack 0
  4549                           
  4550 ;; *************** function _SiIsAvailable *****************
  4551 ;; Defined at:
  4552 ;;		line 23 in file "SIO.c"
  4553 ;; Parameters:    Size  Location     Type
  4554 ;;		None
  4555 ;; Auto vars:     Size  Location     Type
  4556 ;;		None
  4557 ;; Return value:  Size  Location     Type
  4558 ;;                  1    wreg      unsigned char 
  4559 ;; Registers used:
  4560 ;;		wreg
  4561 ;; Tracked objects:
  4562 ;;		On entry : 0/0
  4563 ;;		On exit  : 0/0
  4564 ;;		Unchanged: 0/0
  4565 ;; Data sizes:     COMRAM   BANK0   BANK1
  4566 ;;      Params:         0       0       0
  4567 ;;      Locals:         0       0       0
  4568 ;;      Temps:          0       0       0
  4569 ;;      Totals:         0       0       0
  4570 ;;Total ram usage:        0 bytes
  4571 ;; Hardware stack levels used: 1
  4572 ;; Hardware stack levels required when called: 2
  4573 ;; This function calls:
  4574 ;;		Nothing
  4575 ;; This function is called by:
  4576 ;;		_menuMotor
  4577 ;;		_joystickMotor
  4578 ;; This function uses a non-reentrant model
  4579 ;;
  4580                           
  4581                           	psect	text32
  4582  0017A0                     __ptext32:
  4583                           	callstack 0
  4584  0017A0                     _SiIsAvailable:
  4585                           	callstack 27
  4586                           
  4587                           ;SIO.c: 24:     return TXSTAbits.TRMT;
  4588                           
  4589                           ;incstack = 0
  4590  0017A0  B2AC               	btfsc	172,1,c	;volatile
  4591  0017A2  0C01               	retlw	1
  4592  0017A4  0C00               	retlw	0	;funcret
  4593  0017A6                     __end_of_SiIsAvailable:
  4594                           	callstack 0
  4595                           
  4596 ;; *************** function _initTime *****************
  4597 ;; Defined at:
  4598 ;;		line 17 in file "time.c"
  4599 ;; Parameters:    Size  Location     Type
  4600 ;;		None
  4601 ;; Auto vars:     Size  Location     Type
  4602 ;;		None
  4603 ;; Return value:  Size  Location     Type
  4604 ;;                  1    wreg      void 
  4605 ;; Registers used:
  4606 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4607 ;; Tracked objects:
  4608 ;;		On entry : 0/0
  4609 ;;		On exit  : 0/0
  4610 ;;		Unchanged: 0/0
  4611 ;; Data sizes:     COMRAM   BANK0   BANK1
  4612 ;;      Params:         0       0       0
  4613 ;;      Locals:         0       0       0
  4614 ;;      Temps:          0       0       0
  4615 ;;      Totals:         0       0       0
  4616 ;;Total ram usage:        0 bytes
  4617 ;; Hardware stack levels used: 1
  4618 ;; Hardware stack levels required when called: 3
  4619 ;; This function calls:
  4620 ;;		_TiGetTimer
  4621 ;; This function is called by:
  4622 ;;		_main
  4623 ;; This function uses a non-reentrant model
  4624 ;;
  4625                           
  4626                           	psect	text33
  4627  00178A                     __ptext33:
  4628                           	callstack 0
  4629  00178A                     _initTime:
  4630                           	callstack 27
  4631                           
  4632                           ;time.c: 18:     timer = TiGetTimer();
  4633                           
  4634                           ;incstack = 0
  4635  00178A  ECB6  F00A         	call	_TiGetTimer	;wreg free
  4636  00178E  6E24               	movwf	_timer@time$F1561^0,c
  4637  001790  0012               	return		;funcret
  4638  001792                     __end_of_initTime:
  4639                           	callstack 0
  4640                           
  4641 ;; *************** function _initSIO *****************
  4642 ;; Defined at:
  4643 ;;		line 5 in file "SIO.c"
  4644 ;; Parameters:    Size  Location     Type
  4645 ;;		None
  4646 ;; Auto vars:     Size  Location     Type
  4647 ;;		None
  4648 ;; Return value:  Size  Location     Type
  4649 ;;                  1    wreg      void 
  4650 ;; Registers used:
  4651 ;;		None
  4652 ;; Tracked objects:
  4653 ;;		On entry : 0/0
  4654 ;;		On exit  : 0/0
  4655 ;;		Unchanged: 0/0
  4656 ;; Data sizes:     COMRAM   BANK0   BANK1
  4657 ;;      Params:         0       0       0
  4658 ;;      Locals:         0       0       0
  4659 ;;      Temps:          0       0       0
  4660 ;;      Totals:         0       0       0
  4661 ;;Total ram usage:        0 bytes
  4662 ;; Hardware stack levels used: 1
  4663 ;; Hardware stack levels required when called: 2
  4664 ;; This function calls:
  4665 ;;		Nothing
  4666 ;; This function is called by:
  4667 ;;		_main
  4668 ;; This function uses a non-reentrant model
  4669 ;;
  4670                           
  4671                           	psect	text34
  4672  001712                     __ptext34:
  4673                           	callstack 0
  4674  001712                     _initSIO:
  4675                           	callstack 28
  4676                           
  4677                           ;SIO.c: 8:     TRISCbits.TRISC7 = 1;
  4678                           
  4679                           ;incstack = 0
  4680  001712  8E94               	bsf	148,7,c	;volatile
  4681                           
  4682                           ;SIO.c: 9:     TRISCbits.TRISC6 = 1;
  4683  001714  8C94               	bsf	148,6,c	;volatile
  4684                           
  4685                           ;SIO.c: 10:     TXSTAbits.BRGH = 1;
  4686  001716  84AC               	bsf	172,2,c	;volatile
  4687                           
  4688                           ;SIO.c: 11:     TXSTAbits.TXEN = 1;
  4689  001718  8AAC               	bsf	172,5,c	;volatile
  4690                           
  4691                           ;SIO.c: 12:     TXSTAbits.SYNC = 0;
  4692  00171A  98AC               	bcf	172,4,c	;volatile
  4693                           
  4694                           ;SIO.c: 14:     RCSTAbits.SPEN = 1;
  4695  00171C  8EAB               	bsf	171,7,c	;volatile
  4696                           
  4697                           ;SIO.c: 15:     RCSTAbits.CREN = 1;
  4698  00171E  88AB               	bsf	171,4,c	;volatile
  4699                           
  4700                           ;SIO.c: 17:     BAUDCONbits.BRG16 = 0;
  4701  001720  96B8               	bcf	184,3,c	;volatile
  4702                           
  4703                           ;SIO.c: 19:     SPBRG = 255;
  4704  001722  68AF               	setf	175,c	;volatile
  4705  001724  0012               	return		;funcret
  4706  001726                     __end_of_initSIO:
  4707                           	callstack 0
  4708                           
  4709 ;; *************** function _initMenu *****************
  4710 ;; Defined at:
  4711 ;;		line 24 in file "Menu.c"
  4712 ;; Parameters:    Size  Location     Type
  4713 ;;		None
  4714 ;; Auto vars:     Size  Location     Type
  4715 ;;		None
  4716 ;; Return value:  Size  Location     Type
  4717 ;;                  1    wreg      void 
  4718 ;; Registers used:
  4719 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4720 ;; Tracked objects:
  4721 ;;		On entry : 0/0
  4722 ;;		On exit  : 0/0
  4723 ;;		Unchanged: 0/0
  4724 ;; Data sizes:     COMRAM   BANK0   BANK1
  4725 ;;      Params:         0       0       0
  4726 ;;      Locals:         0       0       0
  4727 ;;      Temps:          0       0       0
  4728 ;;      Totals:         0       0       0
  4729 ;;Total ram usage:        0 bytes
  4730 ;; Hardware stack levels used: 1
  4731 ;; Hardware stack levels required when called: 3
  4732 ;; This function calls:
  4733 ;;		_TiGetTimer
  4734 ;; This function is called by:
  4735 ;;		_main
  4736 ;; This function uses a non-reentrant model
  4737 ;;
  4738                           
  4739                           	psect	text35
  4740  001792                     __ptext35:
  4741                           	callstack 0
  4742  001792                     _initMenu:
  4743                           	callstack 27
  4744                           
  4745                           ;Menu.c: 25:     timer = TiGetTimer();
  4746                           
  4747                           ;incstack = 0
  4748  001792  ECB6  F00A         	call	_TiGetTimer	;wreg free
  4749  001796  6E36               	movwf	_timer^0,c
  4750  001798  0012               	return		;funcret
  4751  00179A                     __end_of_initMenu:
  4752                           	callstack 0
  4753                           
  4754 ;; *************** function _initKeypad *****************
  4755 ;; Defined at:
  4756 ;;		line 29 in file "keypad.c"
  4757 ;; Parameters:    Size  Location     Type
  4758 ;;		None
  4759 ;; Auto vars:     Size  Location     Type
  4760 ;;		None
  4761 ;; Return value:  Size  Location     Type
  4762 ;;                  1    wreg      void 
  4763 ;; Registers used:
  4764 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4765 ;; Tracked objects:
  4766 ;;		On entry : 0/0
  4767 ;;		On exit  : 0/0
  4768 ;;		Unchanged: 0/0
  4769 ;; Data sizes:     COMRAM   BANK0   BANK1
  4770 ;;      Params:         0       0       0
  4771 ;;      Locals:         0       0       0
  4772 ;;      Temps:          0       0       0
  4773 ;;      Totals:         0       0       0
  4774 ;;Total ram usage:        0 bytes
  4775 ;; Hardware stack levels used: 1
  4776 ;; Hardware stack levels required when called: 3
  4777 ;; This function calls:
  4778 ;;		_TiGetTimer
  4779 ;; This function is called by:
  4780 ;;		_main
  4781 ;; This function uses a non-reentrant model
  4782 ;;
  4783                           
  4784                           	psect	text36
  4785  00168E                     __ptext36:
  4786                           	callstack 0
  4787  00168E                     _initKeypad:
  4788                           	callstack 27
  4789                           
  4790                           ;keypad.c: 30:     INTCON2bits.RBPU = 0;
  4791                           
  4792                           ;incstack = 0
  4793  00168E  9EF1               	bcf	241,7,c	;volatile
  4794                           
  4795                           ;keypad.c: 33:     TRISBbits.TRISB0 = 1;
  4796  001690  8093               	bsf	147,0,c	;volatile
  4797                           
  4798                           ;keypad.c: 34:     TRISBbits.TRISB1 = 1;
  4799  001692  8293               	bsf	147,1,c	;volatile
  4800                           
  4801                           ;keypad.c: 35:     TRISBbits.TRISB2 = 1;
  4802  001694  8493               	bsf	147,2,c	;volatile
  4803                           
  4804                           ;keypad.c: 36:     TRISBbits.TRISB3 = 0;
  4805  001696  9693               	bcf	147,3,c	;volatile
  4806                           
  4807                           ;keypad.c: 37:     TRISBbits.TRISB4 = 0;
  4808  001698  9893               	bcf	147,4,c	;volatile
  4809                           
  4810                           ;keypad.c: 38:     TRISBbits.TRISB5 = 0;
  4811  00169A  9A93               	bcf	147,5,c	;volatile
  4812                           
  4813                           ;keypad.c: 39:     TRISBbits.TRISB6 = 0;
  4814  00169C  9C93               	bcf	147,6,c	;volatile
  4815                           
  4816                           ;keypad.c: 40:     timerBounces = TiGetTimer();
  4817  00169E  ECB6  F00A         	call	_TiGetTimer	;wreg free
  4818  0016A2  6E43               	movwf	_timerBounces^0,c
  4819                           
  4820                           ;keypad.c: 41:     timer_SMS = TiGetTimer();
  4821  0016A4  ECB6  F00A         	call	_TiGetTimer	;wreg free
  4822  0016A8  6E42               	movwf	_timer_SMS^0,c
  4823  0016AA  0012               	return		;funcret
  4824  0016AC                     __end_of_initKeypad:
  4825                           	callstack 0
  4826                           
  4827 ;; *************** function _initJoystick *****************
  4828 ;; Defined at:
  4829 ;;		line 11 in file "Joystick.c"
  4830 ;; Parameters:    Size  Location     Type
  4831 ;;		None
  4832 ;; Auto vars:     Size  Location     Type
  4833 ;;		None
  4834 ;; Return value:  Size  Location     Type
  4835 ;;                  1    wreg      void 
  4836 ;; Registers used:
  4837 ;;		wreg, status,2
  4838 ;; Tracked objects:
  4839 ;;		On entry : 0/0
  4840 ;;		On exit  : 0/0
  4841 ;;		Unchanged: 0/0
  4842 ;; Data sizes:     COMRAM   BANK0   BANK1
  4843 ;;      Params:         0       0       0
  4844 ;;      Locals:         0       0       0
  4845 ;;      Temps:          0       0       0
  4846 ;;      Totals:         0       0       0
  4847 ;;Total ram usage:        0 bytes
  4848 ;; Hardware stack levels used: 1
  4849 ;; Hardware stack levels required when called: 2
  4850 ;; This function calls:
  4851 ;;		Nothing
  4852 ;; This function is called by:
  4853 ;;		_main
  4854 ;; This function uses a non-reentrant model
  4855 ;;
  4856                           
  4857                           	psect	text37
  4858  00162C                     __ptext37:
  4859                           	callstack 0
  4860  00162C                     _initJoystick:
  4861                           	callstack 28
  4862                           
  4863                           ;Joystick.c: 12:     TRISAbits.TRISA0 = 1;
  4864                           
  4865                           ;incstack = 0
  4866  00162C  8092               	bsf	146,0,c	;volatile
  4867                           
  4868                           ;Joystick.c: 13:     TRISAbits.TRISA1 = 1;
  4869  00162E  8292               	bsf	146,1,c	;volatile
  4870                           
  4871                           ;Joystick.c: 14:     ADCON0 = 0x03;
  4872  001630  0E03               	movlw	3
  4873  001632  6EC2               	movwf	194,c	;volatile
  4874                           
  4875                           ;Joystick.c: 15:     ADCON1 = 0x0C;
  4876  001634  0E0C               	movlw	12
  4877  001636  6EC1               	movwf	193,c	;volatile
  4878                           
  4879                           ;Joystick.c: 16:     ADCON2 = 0x44;
  4880  001638  0E44               	movlw	68
  4881  00163A  6EC0               	movwf	192,c	;volatile
  4882                           
  4883                           ;Joystick.c: 18:     TRISCbits.TRISC0 = 0;
  4884  00163C  9094               	bcf	148,0,c	;volatile
  4885                           
  4886                           ;Joystick.c: 19:     TRISCbits.TRISC1 = 0;
  4887  00163E  9294               	bcf	148,1,c	;volatile
  4888                           
  4889                           ;Joystick.c: 20:     TRISCbits.TRISC2 = 0;
  4890  001640  9494               	bcf	148,2,c	;volatile
  4891                           
  4892                           ;Joystick.c: 21:     moved = 0;
  4893  001642  6A2D               	clrf	_moved^0,c
  4894                           
  4895                           ;Joystick.c: 22:     ADCON0bits.GO_DONE=1;
  4896  001644  82C2               	bsf	194,1,c	;volatile
  4897                           
  4898                           ;Joystick.c: 23:     ADCON0bits.CHS0=0;
  4899  001646  94C2               	bcf	194,2,c	;volatile
  4900                           
  4901                           ;Joystick.c: 24:     ADCON0bits.CHS1=1;
  4902  001648  86C2               	bsf	194,3,c	;volatile
  4903                           
  4904                           ;Joystick.c: 25:     stateJoy = 0;
  4905  00164A  6A2C               	clrf	_stateJoy^0,c
  4906  00164C  0012               	return		;funcret
  4907  00164E                     __end_of_initJoystick:
  4908                           	callstack 0
  4909                           
  4910 ;; *************** function _initData *****************
  4911 ;; Defined at:
  4912 ;;		line 24 in file "EEPROM.c"
  4913 ;; Parameters:    Size  Location     Type
  4914 ;;		None
  4915 ;; Auto vars:     Size  Location     Type
  4916 ;;		None
  4917 ;; Return value:  Size  Location     Type
  4918 ;;                  1    wreg      void 
  4919 ;; Registers used:
  4920 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4921 ;; Tracked objects:
  4922 ;;		On entry : 0/0
  4923 ;;		On exit  : 0/0
  4924 ;;		Unchanged: 0/0
  4925 ;; Data sizes:     COMRAM   BANK0   BANK1
  4926 ;;      Params:         0       0       0
  4927 ;;      Locals:         0       0       0
  4928 ;;      Temps:          0       0       0
  4929 ;;      Totals:         0       0       0
  4930 ;;Total ram usage:        0 bytes
  4931 ;; Hardware stack levels used: 1
  4932 ;; Hardware stack levels required when called: 3
  4933 ;; This function calls:
  4934 ;;		_readUserData
  4935 ;; This function is called by:
  4936 ;;		_main
  4937 ;; This function uses a non-reentrant model
  4938 ;;
  4939                           
  4940                           	psect	text38
  4941  0011A0                     __ptext38:
  4942                           	callstack 0
  4943  0011A0                     _initData:
  4944                           	callstack 27
  4945                           
  4946                           ;EEPROM.c: 25:     state = 0;
  4947                           
  4948                           ;incstack = 0
  4949  0011A0  6A2A               	clrf	_state@EEPROM$F1505^0,c
  4950                           
  4951                           ;EEPROM.c: 26:     for (userNum = 0; userNum < 8; userNum++){
  4952  0011A2  6A29               	clrf	_userNum^0,c
  4953  0011A4                     l2254:
  4954  0011A4  0E07               	movlw	7
  4955  0011A6  6429               	cpfsgt	_userNum^0,c
  4956  0011A8  D001               	goto	l2258
  4957  0011AA  D004               	goto	l726
  4958  0011AC                     l2258:
  4959                           
  4960                           ;EEPROM.c: 27:         readUserData();
  4961  0011AC  EC15  F008         	call	_readUserData	;wreg free
  4962                           
  4963                           ;EEPROM.c: 28:     }
  4964  0011B0  2A29               	incf	_userNum^0,f,c
  4965  0011B2  D7F8               	goto	l2254
  4966  0011B4                     l726:
  4967                           
  4968                           ;EEPROM.c: 29:     for (position = 0; position < 10; position = position+2){
  4969  0011B4  6A28               	clrf	_position^0,c
  4970  0011B6                     l2264:
  4971  0011B6  0E09               	movlw	9
  4972  0011B8  6428               	cpfsgt	_position^0,c
  4973  0011BA  D001               	goto	l727
  4974  0011BC  D01B               	goto	l728
  4975  0011BE                     l727:
  4976                           
  4977                           ;EEPROM.c: 30:         EECON1bits.EEPGD = 0;
  4978  0011BE  9EA6               	bcf	166,7,c	;volsfr
  4979                           
  4980                           ;EEPROM.c: 31:         EECON1bits.CFGS = 0;
  4981  0011C0  9CA6               	bcf	166,6,c	;volsfr
  4982                           
  4983                           ;EEPROM.c: 32:         EEADR = (0x90)+position;
  4984  0011C2  5028               	movf	_position^0,w,c
  4985  0011C4  0F90               	addlw	144
  4986  0011C6  6EA9               	movwf	169,c	;volatile
  4987                           
  4988                           ;EEPROM.c: 33:         EECON1bits.RD = 1;
  4989  0011C8  80A6               	bsf	166,0,c	;volsfr
  4990                           
  4991                           ;EEPROM.c: 34:         topScores[position].score = EEDATA;
  4992  0011CA  5028               	movf	_position^0,w,c
  4993  0011CC  EC5F  F004         	call	PL30	;call to abstracted procedure
  4994  0011D0  CFA8 FFDF          	movff	4008,indf2	;volatile
  4995                           
  4996                           ;EEPROM.c: 35:         EECON1bits.EEPGD = 0;
  4997  0011D4  9EA6               	bcf	166,7,c	;volsfr
  4998                           
  4999                           ;EEPROM.c: 36:         EECON1bits.CFGS = 0;
  5000  0011D6  9CA6               	bcf	166,6,c	;volsfr
  5001                           
  5002                           ;EEPROM.c: 37:         EEADR = (0x90)+position+1;
  5003  0011D8  5028               	movf	_position^0,w,c
  5004  0011DA  0F91               	addlw	145
  5005  0011DC  6EA9               	movwf	169,c	;volatile
  5006                           
  5007                           ;EEPROM.c: 38:         EECON1bits.RD = 1;
  5008  0011DE  80A6               	bsf	166,0,c	;volsfr
  5009  0011E0                     l729:
  5010  0011E0  B0A6               	btfsc	166,0,c	;volsfr
  5011  0011E2  D7FE               	goto	l729
  5012                           
  5013                           ;EEPROM.c: 40:         topScores[position].userNum = EEDATA;
  5014  0011E4  5028               	movf	_position^0,w,c
  5015  0011E6  EC78  F004         	call	PL40	;call to abstracted procedure
  5016  0011EA  CFA8 FFDF          	movff	4008,indf2	;volatile
  5017                           
  5018                           ;EEPROM.c: 41:     }
  5019  0011EE  0E02               	movlw	2
  5020  0011F0  2628               	addwf	_position^0,f,c
  5021  0011F2  D7E1               	goto	l2264
  5022  0011F4                     l728:
  5023                           
  5024                           ;EEPROM.c: 42:     EECON1bits.EEPGD = 0;
  5025  0011F4  9EA6               	bcf	166,7,c	;volsfr
  5026                           
  5027                           ;EEPROM.c: 43:     EECON1bits.CFGS = 0;
  5028  0011F6  9CA6               	bcf	166,6,c	;volsfr
  5029                           
  5030                           ;EEPROM.c: 44:     EEADR = 0x95;
  5031  0011F8  0E95               	movlw	149
  5032  0011FA  6EA9               	movwf	169,c	;volatile
  5033                           
  5034                           ;EEPROM.c: 45:     EECON1bits.RD = 1;
  5035  0011FC  80A6               	bsf	166,0,c	;volsfr
  5036  0011FE                     l732:
  5037  0011FE  B0A6               	btfsc	166,0,c	;volsfr
  5038  001200  D7FE               	goto	l732
  5039                           
  5040                           ;EEPROM.c: 47:     lastUserPointer = EEDATA;
  5041  001202  CFA8 F026          	movff	4008,_lastUserPointer	;volatile
  5042                           
  5043                           ;EEPROM.c: 48:     if (lastUserPointer == 0xFF){
  5044  001206  2826               	incf	_lastUserPointer^0,w,c
  5045  001208  B4D8               	btfsc	status,2,c
  5046                           
  5047                           ;EEPROM.c: 49:         lastUserPointer = 0;
  5048  00120A  6A26               	clrf	_lastUserPointer^0,c
  5049  00120C  0012               	return		;funcret
  5050  00120E                     __end_of_initData:
  5051                           	callstack 0
  5052                           
  5053 ;; *************** function _readUserData *****************
  5054 ;; Defined at:
  5055 ;;		line 357 in file "EEPROM.c"
  5056 ;; Parameters:    Size  Location     Type
  5057 ;;		None
  5058 ;; Auto vars:     Size  Location     Type
  5059 ;;		None
  5060 ;; Return value:  Size  Location     Type
  5061 ;;                  1    wreg      void 
  5062 ;; Registers used:
  5063 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  5064 ;; Tracked objects:
  5065 ;;		On entry : 0/0
  5066 ;;		On exit  : 0/0
  5067 ;;		Unchanged: 0/0
  5068 ;; Data sizes:     COMRAM   BANK0   BANK1
  5069 ;;      Params:         0       0       0
  5070 ;;      Locals:         0       0       0
  5071 ;;      Temps:          2       0       0
  5072 ;;      Totals:         2       0       0
  5073 ;;Total ram usage:        2 bytes
  5074 ;; Hardware stack levels used: 1
  5075 ;; Hardware stack levels required when called: 2
  5076 ;; This function calls:
  5077 ;;		Nothing
  5078 ;; This function is called by:
  5079 ;;		_initData
  5080 ;; This function uses a non-reentrant model
  5081 ;;
  5082                           
  5083                           	psect	text39
  5084  00102A                     __ptext39:
  5085                           	callstack 0
  5086  00102A                     _readUserData:
  5087                           	callstack 27
  5088                           
  5089                           ;EEPROM.c: 358:     for (position = 0; position < 9; position++){
  5090                           
  5091                           ;incstack = 0
  5092  00102A  6A28               	clrf	_position^0,c
  5093  00102C                     l2062:
  5094  00102C  0E08               	movlw	8
  5095  00102E  6428               	cpfsgt	_position^0,c
  5096  001030  D001               	goto	l821
  5097  001032  D00A               	goto	l822
  5098  001034                     l821:
  5099                           
  5100                           ;EEPROM.c: 359:         EECON1bits.EEPGD = 0;
  5101  001034  9EA6               	bcf	166,7,c	;volsfr
  5102                           
  5103                           ;EEPROM.c: 360:         EECON1bits.CFGS = 0;
  5104  001036  9CA6               	bcf	166,6,c	;volsfr
  5105                           
  5106                           ;EEPROM.c: 361:         EEADR = (userNum*24)+position;
  5107  001038  5029               	movf	_userNum^0,w,c
  5108  00103A  D834               	call	PL76	;call to abstracted procedure
  5109                           
  5110                           ;EEPROM.c: 362:         EECON1bits.RD = 1;
  5111  00103C  80A6               	bsf	166,0,c	;volsfr
  5112  00103E                     l823:
  5113  00103E  B0A6               	btfsc	166,0,c	;volsfr
  5114  001040  D7FE               	goto	l823
  5115                           
  5116                           ;EEPROM.c: 364:         users[userNum].username[position] = EEDATA;
  5117  001042  D823               	call	PL52	;call to abstracted procedure
  5118                           
  5119                           ;EEPROM.c: 365:     }
  5120  001044  D814               	call	PL26	;call to abstracted procedure
  5121  001046  D7F2               	goto	l2062
  5122  001048                     l822:
  5123                           
  5124                           ;EEPROM.c: 366:     for (position = 0; position < 9; position++){
  5125  001048  6A28               	clrf	_position^0,c
  5126  00104A                     l2076:
  5127  00104A  0E08               	movlw	8
  5128  00104C  6428               	cpfsgt	_position^0,c
  5129  00104E  D001               	goto	l826
  5130  001050  0C08               	retlw	8
  5131  001052                     l826:
  5132                           
  5133                           ;EEPROM.c: 367:         EECON1bits.EEPGD = 0;
  5134  001052  9EA6               	bcf	166,7,c	;volsfr
  5135                           
  5136                           ;EEPROM.c: 368:         EECON1bits.CFGS = 0;
  5137  001054  9CA6               	bcf	166,6,c	;volsfr
  5138                           
  5139                           ;EEPROM.c: 369:         EEADR = (userNum*24)+9+position;
  5140  001056  5029               	movf	_userNum^0,w,c
  5141  001058  D81F               	call	PL64	;call to abstracted procedure
  5142                           
  5143                           ;EEPROM.c: 370:         EECON1bits.RD = 1;
  5144  00105A  80A6               	bsf	166,0,c	;volsfr
  5145  00105C                     l828:
  5146  00105C  B0A6               	btfsc	166,0,c	;volsfr
  5147  00105E  D7FE               	goto	l828
  5148                           
  5149                           ;EEPROM.c: 372:         users[userNum].password[position] = EEDATA;
  5150  001060  D814               	call	PL52	;call to abstracted procedure
  5151  001062  0E09               	movlw	9
  5152  001064  264B               	addwf	??_readUserData^0,f,c
  5153  001066  0E00               	movlw	0
  5154  001068  224C               	addwfc	(??_readUserData+1)^0,f,c
  5155                           
  5156                           ;EEPROM.c: 373:     }
  5157  00106A  D801               	call	PL26	;call to abstracted procedure
  5158  00106C  D7EE               	goto	l2076
  5159  00106E                     __end_of_readUserData:
  5160                           	callstack 0
  5161  00106E                     PL26:
  5162                           	callstack 27
  5163  00106E  50F3               	movf	243,w,c
  5164  001070  264B               	addwf	??_readUserData^0,f,c
  5165  001072  50F4               	movf	244,w,c
  5166  001074  224C               	addwfc	(??_readUserData+1)^0,f,c
  5167  001076  5028               	movf	_position^0,w,c
  5168  001078  244B               	addwf	??_readUserData^0,w,c
  5169  00107A  6ED9               	movwf	fsr2l,c
  5170  00107C  0E00               	movlw	0
  5171  00107E  204C               	addwfc	(??_readUserData+1)^0,w,c
  5172  001080  6EDA               	movwf	fsr2h,c
  5173  001082  CFA8 FFDF          	movff	4008,indf2	;volatile
  5174  001086  2A28               	incf	_position^0,f,c
  5175  001088  0012               	return	
  5176  00108A                     __end_ofPL26:
  5177                           	callstack 0
  5178  00108A                     PL52:
  5179                           	callstack 27
  5180  00108A  5029               	movf	_userNum^0,w,c
  5181  00108C  0D12               	mullw	18
  5182  00108E  0E00               	movlw	low _users
  5183  001090  6E4B               	movwf	??_readUserData^0,c
  5184  001092  0E01               	movlw	high _users
  5185  001094  6E4C               	movwf	(??_readUserData+1)^0,c
  5186  001096  0012               	return	
  5187  001098                     __end_ofPL52:
  5188                           	callstack 0
  5189  001098                     PL64:
  5190                           	callstack 25
  5191  001098  0D18               	mullw	24
  5192  00109A  50F3               	movf	243,w,c
  5193  00109C  2428               	addwf	_position^0,w,c
  5194  00109E  0F09               	addlw	9
  5195  0010A0  6EA9               	movwf	169,c	;volatile
  5196  0010A2  0012               	return	
  5197  0010A4                     __end_ofPL64:
  5198                           	callstack 0
  5199  0010A4                     PL76:
  5200                           	callstack 25
  5201  0010A4  0D18               	mullw	24
  5202  0010A6  50F3               	movf	243,w,c
  5203  0010A8  2428               	addwf	_position^0,w,c
  5204  0010AA  6EA9               	movwf	169,c	;volatile
  5205  0010AC  0012               	return	
  5206  0010AE                     __end_ofPL76:
  5207                           	callstack 0
  5208                           
  5209 ;; *************** function _dataMotor *****************
  5210 ;; Defined at:
  5211 ;;		line 53 in file "EEPROM.c"
  5212 ;; Parameters:    Size  Location     Type
  5213 ;;		None
  5214 ;; Auto vars:     Size  Location     Type
  5215 ;;		None
  5216 ;; Return value:  Size  Location     Type
  5217 ;;                  1    wreg      void 
  5218 ;; Registers used:
  5219 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5220 ;; Tracked objects:
  5221 ;;		On entry : 0/0
  5222 ;;		On exit  : 0/0
  5223 ;;		Unchanged: 0/0
  5224 ;; Data sizes:     COMRAM   BANK0   BANK1
  5225 ;;      Params:         0       0       0
  5226 ;;      Locals:         0       0       0
  5227 ;;      Temps:          4       0       0
  5228 ;;      Totals:         4       0       0
  5229 ;;Total ram usage:        4 bytes
  5230 ;; Hardware stack levels used: 1
  5231 ;; Hardware stack levels required when called: 5
  5232 ;; This function calls:
  5233 ;;		_LcGotoXY
  5234 ;; This function is called by:
  5235 ;;		_main
  5236 ;; This function uses a non-reentrant model
  5237 ;;
  5238                           
  5239                           	psect	text40
  5240  000584                     __ptext40:
  5241                           	callstack 0
  5242  000584                     _dataMotor:
  5243                           	callstack 25
  5244                           
  5245                           ;EEPROM.c: 54:     switch(state){
  5246                           
  5247                           ;incstack = 0
  5248  000584  D13A               	goto	l4742
  5249  000586                     l4448:
  5250                           
  5251                           ;EEPROM.c: 59:             status = 2;
  5252  000586  0E02               	movlw	2
  5253  000588  6E27               	movwf	_status^0,c
  5254                           
  5255                           ;EEPROM.c: 60:             if (userNum != 8){
  5256  00058A  0E08               	movlw	8
  5257  00058C  1829               	xorwf	_userNum^0,w,c
  5258  00058E  E003               	bz	l4454
  5259                           
  5260                           ;EEPROM.c: 61:                 state = 2;
  5261  000590  0E02               	movlw	2
  5262  000592  6E2A               	movwf	_state@EEPROM$F1505^0,c
  5263                           
  5264                           ;EEPROM.c: 63:             } else {
  5265  000594  0C02               	retlw	2
  5266  000596                     l4454:
  5267                           
  5268                           ;EEPROM.c: 64:                 status = 1;
  5269  000596  0E01               	movlw	1
  5270  000598  6E27               	movwf	_status^0,c
  5271  00059A                     l4456:
  5272                           
  5273                           ;EEPROM.c: 65:                 state = 0;
  5274  00059A  6A2A               	clrf	_state@EEPROM$F1505^0,c
  5275  00059C  0012               	return	
  5276  00059E                     l4458:
  5277                           
  5278                           ;EEPROM.c: 70:             if (users[userNum].username[position] == mUser.username[posit
      +                          ion]){
  5279  00059E  5028               	movf	_position^0,w,c
  5280  0005A0  D984               	call	PL14	;call to abstracted procedure
  5281  0005A2  D976               	call	PL12	;call to abstracted procedure
  5282  0005A4  E10D               	bnz	l4470
  5283                           
  5284                           ;EEPROM.c: 72:                 if (mUser.username[position] == '\0'){
  5285  0005A6  D99E               	call	PL34	;call to abstracted procedure
  5286  0005A8  E109               	bnz	l4468
  5287                           
  5288                           ;EEPROM.c: 73:                     state = 3;
  5289  0005AA  0E03               	movlw	3
  5290  0005AC  6E2A               	movwf	_state@EEPROM$F1505^0,c
  5291                           
  5292                           ;EEPROM.c: 74:                     LcGotoXY(10,1);
  5293  0005AE  0E01               	movlw	1
  5294  0005B0  6E53               	movwf	LcGotoXY@Row^0,c
  5295  0005B2  0E0A               	movlw	10
  5296  0005B4  ECCB  F007         	call	_LcGotoXY
  5297  0005B8                     l4466:
  5298                           
  5299                           ;EEPROM.c: 75:                     position = 0;
  5300  0005B8  6A28               	clrf	_position^0,c
  5301                           
  5302                           ;EEPROM.c: 76:                 }else {
  5303  0005BA  0012               	return	
  5304  0005BC                     l4468:
  5305                           
  5306                           ;EEPROM.c: 77:                     position++;
  5307  0005BC  2A28               	incf	_position^0,f,c
  5308  0005BE  0012               	return	
  5309  0005C0                     l4470:
  5310                           
  5311                           ;EEPROM.c: 81:                 state = 4;
  5312  0005C0  0E04               	movlw	4
  5313  0005C2  6E2A               	movwf	_state@EEPROM$F1505^0,c
  5314  0005C4  0C04               	retlw	4
  5315  0005C6                     l4472:
  5316                           
  5317                           ;EEPROM.c: 89:             if (users[userNum].password[position] == mUser.password[posit
      +                          ion]){
  5318  0005C6  D99A               	call	PL42	;call to abstracted procedure
  5319  0005C8  5029               	movf	_userNum^0,w,c
  5320  0005CA  0D12               	mullw	18
  5321  0005CC  0E00               	movlw	low _users
  5322  0005CE  6E5C               	movwf	(??_dataMotor+1)^0,c
  5323  0005D0  0E01               	movlw	high _users
  5324  0005D2  6E5D               	movwf	(??_dataMotor+2)^0,c
  5325  0005D4  0E09               	movlw	9
  5326  0005D6  265C               	addwf	(??_dataMotor+1)^0,f,c
  5327  0005D8  0E00               	movlw	0
  5328  0005DA  225D               	addwfc	(??_dataMotor+2)^0,f,c
  5329  0005DC  D959               	call	PL12	;call to abstracted procedure
  5330  0005DE  E1F0               	bnz	l4470
  5331                           
  5332                           ;EEPROM.c: 91:                 if (mUser.password[position] == '\0'){
  5333  0005E0  D98D               	call	PL42	;call to abstracted procedure
  5334  0005E2  50DF               	movf	indf2,w,c
  5335  0005E4  E1EB               	bnz	l4468
  5336                           
  5337                           ;EEPROM.c: 92:                     state = 0;
  5338  0005E6  6A2A               	clrf	_state@EEPROM$F1505^0,c
  5339                           
  5340                           ;EEPROM.c: 93:                     status = 0;
  5341  0005E8  6A27               	clrf	_status^0,c
  5342                           
  5343                           ;EEPROM.c: 94:                 }else {
  5344  0005EA  0012               	return	
  5345  0005EC                     l755:
  5346                           
  5347                           ;EEPROM.c: 106:             position = 0;
  5348  0005EC  6A28               	clrf	_position^0,c
  5349                           
  5350                           ;EEPROM.c: 107:             userNum++;
  5351  0005EE  2A29               	incf	_userNum^0,f,c
  5352                           
  5353                           ;EEPROM.c: 108:             state = 1;
  5354  0005F0  0E01               	movlw	1
  5355  0005F2  6E2A               	movwf	_state@EEPROM$F1505^0,c
  5356                           
  5357                           ;EEPROM.c: 109:             break;
  5358  0005F4  0C01               	retlw	1
  5359  0005F6                     l4486:
  5360                           
  5361                           ;EEPROM.c: 111:             if (userNum != 8){
  5362  0005F6  0E08               	movlw	8
  5363  0005F8  1829               	xorwf	_userNum^0,w,c
  5364  0005FA  E003               	bz	l4490
  5365                           
  5366                           ;EEPROM.c: 112:                 state = 6;
  5367  0005FC  0E06               	movlw	6
  5368  0005FE  6E2A               	movwf	_state@EEPROM$F1505^0,c
  5369                           
  5370                           ;EEPROM.c: 114:             } else {
  5371  000600  0C06               	retlw	6
  5372  000602                     l4490:
  5373                           
  5374                           ;EEPROM.c: 115:                 state = 10;
  5375  000602  0E0A               	movlw	10
  5376  000604  6E2A               	movwf	_state@EEPROM$F1505^0,c
  5377  000606  0C0A               	retlw	10
  5378  000608                     l4492:
  5379                           
  5380                           ;EEPROM.c: 119:             if (users[userNum].username[position] == mUser.username[posi
      +                          tion]){
  5381  000608  5028               	movf	_position^0,w,c
  5382  00060A  D94F               	call	PL14	;call to abstracted procedure
  5383  00060C  D941               	call	PL12	;call to abstracted procedure
  5384  00060E  E106               	bnz	l4502
  5385                           
  5386                           ;EEPROM.c: 121:                 if (mUser.username[position] == '\0'){
  5387  000610  D969               	call	PL34	;call to abstracted procedure
  5388  000612  E1D4               	bnz	l4468
  5389                           
  5390                           ;EEPROM.c: 122:                     state = 0;
  5391  000614  6A2A               	clrf	_state@EEPROM$F1505^0,c
  5392                           
  5393                           ;EEPROM.c: 123:                     status = 4;
  5394  000616  0E04               	movlw	4
  5395  000618  6E27               	movwf	_status^0,c
  5396                           
  5397                           ;EEPROM.c: 124:                 }else {
  5398  00061A  0C04               	retlw	4
  5399  00061C                     l4502:
  5400                           
  5401                           ;EEPROM.c: 129:                 state = 7;
  5402  00061C  0E07               	movlw	7
  5403  00061E  6E2A               	movwf	_state@EEPROM$F1505^0,c
  5404  000620  0C07               	retlw	7
  5405  000622                     l764:
  5406                           
  5407                           ;EEPROM.c: 134:             position = 0;
  5408  000622  6A28               	clrf	_position^0,c
  5409                           
  5410                           ;EEPROM.c: 135:             userNum++;
  5411  000624  2A29               	incf	_userNum^0,f,c
  5412                           
  5413                           ;EEPROM.c: 136:             state = 5;
  5414  000626  0E05               	movlw	5
  5415  000628  6E2A               	movwf	_state@EEPROM$F1505^0,c
  5416                           
  5417                           ;EEPROM.c: 137:             break;
  5418  00062A  0C05               	retlw	5
  5419  00062C                     l4508:
  5420                           
  5421                           ;EEPROM.c: 139:             EEADR = (lastUserPointer*24)+position;
  5422  00062C  5026               	movf	_lastUserPointer^0,w,c
  5423  00062E  EC52  F008         	call	PL76	;call to abstracted procedure
  5424                           
  5425                           ;EEPROM.c: 140:             EEDATA = mUser.username[position];
  5426  000632  D958               	call	PL34	;call to abstracted procedure
  5427  000634  6EA8               	movwf	168,c	;volatile
  5428                           
  5429                           ;EEPROM.c: 141:             users[lastUserPointer].username[position] = mUser.username[p
      +                          osition];
  5430  000636  5028               	movf	_position^0,w,c
  5431  000638  0F01               	addlw	low _mUser@EEPROM$F1509
  5432  00063A  6ED9               	movwf	fsr2l,c
  5433  00063C  6ADA               	clrf	fsr2h,c
  5434  00063E  D963               	call	PL56	;call to abstracted procedure
  5435  000640  D944               	call	PL32	;call to abstracted procedure
  5436                           
  5437                           ;EEPROM.c: 142:             EECON1bits.EEPGD = 0;
  5438  000642  9EA6               	bcf	166,7,c	;volsfr
  5439                           
  5440                           ;EEPROM.c: 143:             EECON1bits.CFGS = 0;
  5441  000644  9CA6               	bcf	166,6,c	;volsfr
  5442                           
  5443                           ;EEPROM.c: 144:             EECON1bits.WREN = 1;
  5444  000646  84A6               	bsf	166,2,c	;volsfr
  5445                           
  5446                           ;EEPROM.c: 145:             INTCONbits.GIE = 0;
  5447  000648  9EF2               	bcf	242,7,c	;volatile
  5448                           
  5449                           ;EEPROM.c: 146:             EECON2 = 0x55;
  5450  00064A  0E55               	movlw	85
  5451  00064C  6EA7               	movwf	167,c	;volsfr
  5452                           
  5453                           ;EEPROM.c: 147:             EECON2 = 0xAA;
  5454  00064E  0EAA               	movlw	170
  5455  000650  6EA7               	movwf	167,c	;volsfr
  5456                           
  5457                           ;EEPROM.c: 148:             EECON1bits.WR = 1;
  5458  000652  82A6               	bsf	166,1,c	;volsfr
  5459                           
  5460                           ;EEPROM.c: 149:             INTCONbits.GIE = 1;
  5461  000654  8EF2               	bsf	242,7,c	;volatile
  5462                           
  5463                           ;EEPROM.c: 150:             EECON1bits.WREN = 0;
  5464  000656  94A6               	bcf	166,2,c	;volsfr
  5465                           
  5466                           ;EEPROM.c: 151:             state = 11;
  5467  000658  0E0B               	movlw	11
  5468  00065A  6E2A               	movwf	_state@EEPROM$F1505^0,c
  5469                           
  5470                           ;EEPROM.c: 152:             break;
  5471  00065C  0C0B               	retlw	11
  5472  00065E                     l766:
  5473                           
  5474                           ;EEPROM.c: 154:             if(EECON1bits.WR == 0){
  5475  00065E  B2A6               	btfsc	166,1,c	;volsfr
  5476  000660  0012               	return	
  5477                           
  5478                           ;EEPROM.c: 155:                 if(mUser.username[position] != '\0'){
  5479  000662  D940               	call	PL34	;call to abstracted procedure
  5480  000664  E002               	bz	l768
  5481                           
  5482                           ;EEPROM.c: 156:                     position++;
  5483  000666  2A28               	incf	_position^0,f,c
  5484  000668  D7CC               	goto	l4490
  5485  00066A                     l768:
  5486                           
  5487                           ;EEPROM.c: 159:                     position = 0;
  5488  00066A  6A28               	clrf	_position^0,c
  5489  00066C                     l4540:
  5490                           
  5491                           ;EEPROM.c: 160:                     state = 12;
  5492  00066C  0E0C               	movlw	12
  5493  00066E  6E2A               	movwf	_state@EEPROM$F1505^0,c
  5494  000670  0C0C               	retlw	12
  5495  000672                     l4542:
  5496                           
  5497                           ;EEPROM.c: 165:             EEADR = (lastUserPointer*24)+position+9;
  5498  000672  5026               	movf	_lastUserPointer^0,w,c
  5499  000674  EC4C  F008         	call	PL64	;call to abstracted procedure
  5500                           
  5501                           ;EEPROM.c: 166:             EEDATA = mUser.password[position];
  5502  000678  D941               	call	PL42	;call to abstracted procedure
  5503  00067A  50DF               	movf	indf2,w,c
  5504  00067C  6EA8               	movwf	168,c	;volatile
  5505                           
  5506                           ;EEPROM.c: 167:             users[lastUserPointer].password[position] = mUser.password[p
      +                          osition];
  5507  00067E  D93E               	call	PL42	;call to abstracted procedure
  5508  000680  D942               	call	PL56	;call to abstracted procedure
  5509  000682  0E09               	movlw	9
  5510  000684  265B               	addwf	??_dataMotor^0,f,c
  5511  000686  0E00               	movlw	0
  5512  000688  225C               	addwfc	(??_dataMotor+1)^0,f,c
  5513  00068A  D91F               	call	PL32	;call to abstracted procedure
  5514                           
  5515                           ;EEPROM.c: 168:             EECON1bits.EEPGD = 0;
  5516  00068C  9EA6               	bcf	166,7,c	;volsfr
  5517                           
  5518                           ;EEPROM.c: 169:             EECON1bits.CFGS = 0;
  5519  00068E  9CA6               	bcf	166,6,c	;volsfr
  5520                           
  5521                           ;EEPROM.c: 170:             EECON1bits.WREN = 1;
  5522  000690  84A6               	bsf	166,2,c	;volsfr
  5523                           
  5524                           ;EEPROM.c: 171:             INTCONbits.GIE = 0;
  5525  000692  9EF2               	bcf	242,7,c	;volatile
  5526                           
  5527                           ;EEPROM.c: 172:             EECON2 = 0x55;
  5528  000694  0E55               	movlw	85
  5529  000696  6EA7               	movwf	167,c	;volsfr
  5530                           
  5531                           ;EEPROM.c: 173:             EECON2 = 0xAA;
  5532  000698  0EAA               	movlw	170
  5533  00069A  6EA7               	movwf	167,c	;volsfr
  5534                           
  5535                           ;EEPROM.c: 174:             EECON1bits.WR = 1;
  5536  00069C  82A6               	bsf	166,1,c	;volsfr
  5537                           
  5538                           ;EEPROM.c: 175:             INTCONbits.GIE = 1;
  5539  00069E  8EF2               	bsf	242,7,c	;volatile
  5540                           
  5541                           ;EEPROM.c: 176:             EECON1bits.WREN = 0;
  5542  0006A0  94A6               	bcf	166,2,c	;volsfr
  5543                           
  5544                           ;EEPROM.c: 177:             state = 13;
  5545  0006A2  0E0D               	movlw	13
  5546  0006A4  6E2A               	movwf	_state@EEPROM$F1505^0,c
  5547                           
  5548                           ;EEPROM.c: 178:             break;
  5549  0006A6  0C0D               	retlw	13
  5550  0006A8                     l771:
  5551                           
  5552                           ;EEPROM.c: 180:             if(EECON1bits.WR == 0){
  5553  0006A8  B2A6               	btfsc	166,1,c	;volsfr
  5554  0006AA  0012               	return	
  5555                           
  5556                           ;EEPROM.c: 181:                 if(mUser.password[position] != '\0'){
  5557  0006AC  D927               	call	PL42	;call to abstracted procedure
  5558  0006AE  50DF               	movf	indf2,w,c
  5559  0006B0  E002               	bz	l773
  5560                           
  5561                           ;EEPROM.c: 182:                     position++;
  5562  0006B2  2A28               	incf	_position^0,f,c
  5563  0006B4  D7DB               	goto	l4540
  5564  0006B6                     l773:
  5565                           
  5566                           ;EEPROM.c: 185:                     position = 0;
  5567  0006B6  6A28               	clrf	_position^0,c
  5568  0006B8                     l4574:
  5569                           
  5570                           ;EEPROM.c: 186:                     state = 14;
  5571  0006B8  0E0E               	movlw	14
  5572  0006BA  6E2A               	movwf	_state@EEPROM$F1505^0,c
  5573  0006BC  0C0E               	retlw	14
  5574  0006BE                     l4576:
  5575                           
  5576                           ;EEPROM.c: 191:             if (position == 5){
  5577  0006BE  0E05               	movlw	5
  5578  0006C0  1828               	xorwf	_position^0,w,c
  5579  0006C2  E103               	bnz	l4582
  5580                           
  5581                           ;EEPROM.c: 192:                 state = 18;
  5582  0006C4  0E12               	movlw	18
  5583  0006C6  6E2A               	movwf	_state@EEPROM$F1505^0,c
  5584  0006C8  D777               	goto	l4466
  5585  0006CA                     l4582:
  5586                           
  5587                           ;EEPROM.c: 195:                if (topScores[position].userNum == lastUserPointer){
  5588  0006CA  5028               	movf	_position^0,w,c
  5589  0006CC  D911               	call	PL40	;call to abstracted procedure
  5590  0006CE  5026               	movf	_lastUserPointer^0,w,c
  5591  0006D0  18DE               	xorwf	postinc2,w,c
  5592  0006D2  E001 D773          	bnz	l4468
  5593                           
  5594                           ;EEPROM.c: 196:                     state = 15;
  5595  0006D6  0E0F               	movlw	15
  5596  0006D8  6E2A               	movwf	_state@EEPROM$F1505^0,c
  5597  0006DA  D770               	goto	l4468
  5598  0006DC                     l4588:
  5599                           
  5600                           ;EEPROM.c: 202:             topScores[position].score = 0xF0;
  5601  0006DC  5028               	movf	_position^0,w,c
  5602  0006DE  D8EF               	call	PL30	;call to abstracted procedure
  5603                           
  5604                           ;EEPROM.c: 203:             EEADR = 0x90 +(position*2);
  5605  0006E0  D919               	call	PL66	;call to abstracted procedure
  5606  0006E2  0F90               	addlw	144
  5607                           
  5608                           ;EEPROM.c: 204:             EEDATA = 0xF0;
  5609  0006E4  D91D               	call	PL88	;call to abstracted procedure
  5610  0006E6                     
  5611                           ;EEPROM.c: 205:             EECON1bits.EEPGD = 0;
  5612  0006E6  9EA6               	bcf	166,7,c	;volsfr
  5613                           
  5614                           ;EEPROM.c: 206:             EECON1bits.CFGS = 0;
  5615  0006E8  9CA6               	bcf	166,6,c	;volsfr
  5616                           
  5617                           ;EEPROM.c: 207:             EECON1bits.WREN = 1;
  5618  0006EA  84A6               	bsf	166,2,c	;volsfr
  5619                           
  5620                           ;EEPROM.c: 208:             INTCONbits.GIE = 0;
  5621  0006EC  9EF2               	bcf	242,7,c	;volatile
  5622                           
  5623                           ;EEPROM.c: 209:             EECON2 = 0x55;
  5624  0006EE  0E55               	movlw	85
  5625  0006F0  6EA7               	movwf	167,c	;volsfr
  5626                           
  5627                           ;EEPROM.c: 210:             EECON2 = 0xAA;
  5628  0006F2  0EAA               	movlw	170
  5629  0006F4  6EA7               	movwf	167,c	;volsfr
  5630                           
  5631                           ;EEPROM.c: 211:             EECON1bits.WR = 1;
  5632  0006F6  82A6               	bsf	166,1,c	;volsfr
  5633                           
  5634                           ;EEPROM.c: 212:             INTCONbits.GIE = 1;
  5635  0006F8  8EF2               	bsf	242,7,c	;volatile
  5636                           
  5637                           ;EEPROM.c: 213:             EECON1bits.WREN = 0;
  5638  0006FA  94A6               	bcf	166,2,c	;volsfr
  5639                           
  5640                           ;EEPROM.c: 214:             state = 15;
  5641  0006FC  0E0F               	movlw	15
  5642  0006FE  6E2A               	movwf	_state@EEPROM$F1505^0,c
  5643                           
  5644                           ;EEPROM.c: 215:             break;
  5645  000700  0C0F               	retlw	15
  5646  000702                     l780:
  5647                           
  5648                           ;EEPROM.c: 217:             if(EECON1bits.WR == 0){
  5649  000702  B2A6               	btfsc	166,1,c	;volsfr
  5650  000704  0012               	return	
  5651                           
  5652                           ;EEPROM.c: 218:                 state = 17;
  5653  000706  0E11               	movlw	17
  5654  000708  6E2A               	movwf	_state@EEPROM$F1505^0,c
  5655  00070A  0C11               	retlw	17
  5656  00070C                     l4616:
  5657                           
  5658                           ;EEPROM.c: 222:             topScores[position].userNum = 0xF0;
  5659  00070C  5028               	movf	_position^0,w,c
  5660  00070E  D8F0               	call	PL40	;call to abstracted procedure
  5661                           
  5662                           ;EEPROM.c: 223:             EEADR = 0x90 +(position*2)+1;
  5663  000710  D901               	call	PL66	;call to abstracted procedure
  5664  000712  0F91               	addlw	145
  5665                           
  5666                           ;EEPROM.c: 224:             EEDATA = 0xF0;
  5667  000714  D905               	call	PL88	;call to abstracted procedure
  5668                           
  5669                           ;EEPROM.c: 225:             EECON1bits.EEPGD = 0;
  5670  000716  9EA6               	bcf	166,7,c	;volsfr
  5671                           
  5672                           ;EEPROM.c: 226:             EECON1bits.CFGS = 0;
  5673  000718  9CA6               	bcf	166,6,c	;volsfr
  5674                           
  5675                           ;EEPROM.c: 227:             EECON1bits.WREN = 1;
  5676  00071A  84A6               	bsf	166,2,c	;volsfr
  5677                           
  5678                           ;EEPROM.c: 228:             INTCONbits.GIE = 0;
  5679  00071C  9EF2               	bcf	242,7,c	;volatile
  5680                           
  5681                           ;EEPROM.c: 229:             EECON2 = 0x55;
  5682  00071E  0E55               	movlw	85
  5683  000720  6EA7               	movwf	167,c	;volsfr
  5684                           
  5685                           ;EEPROM.c: 230:             EECON2 = 0xAA;
  5686  000722  0EAA               	movlw	170
  5687  000724  6EA7               	movwf	167,c	;volsfr
  5688                           
  5689                           ;EEPROM.c: 231:             EECON1bits.WR = 1;
  5690  000726  82A6               	bsf	166,1,c	;volsfr
  5691                           
  5692                           ;EEPROM.c: 232:             INTCONbits.GIE = 1;
  5693  000728  8EF2               	bsf	242,7,c	;volatile
  5694                           
  5695                           ;EEPROM.c: 233:             EECON1bits.WREN = 0;
  5696  00072A  94A6               	bcf	166,2,c	;volsfr
  5697                           
  5698                           ;EEPROM.c: 234:             state = 180;
  5699  00072C  0EB4               	movlw	180
  5700  00072E  6E2A               	movwf	_state@EEPROM$F1505^0,c
  5701                           
  5702                           ;EEPROM.c: 235:             break;
  5703  000730  0CB4               	retlw	180
  5704  000732                     l783:
  5705                           
  5706                           ;EEPROM.c: 237:             if(EECON1bits.WR == 0){
  5707  000732  B2A6               	btfsc	166,1,c	;volsfr
  5708  000734  0012               	return	
  5709  000736  D7C0               	goto	l4574
  5710  000738                     l4644:
  5711                           
  5712                           ;EEPROM.c: 242:             lastUserPointer = (lastUserPointer+1)%8;
  5713  000738  2826               	incf	_lastUserPointer^0,w,c
  5714  00073A  0B07               	andlw	7
  5715  00073C  6E26               	movwf	_lastUserPointer^0,c
  5716                           
  5717                           ;EEPROM.c: 243:             EEADR = 0x95;
  5718  00073E  0E95               	movlw	149
  5719  000740  6EA9               	movwf	169,c	;volatile
  5720                           
  5721                           ;EEPROM.c: 244:             EEDATA = lastUserPointer;
  5722  000742  C026  FFA8         	movff	_lastUserPointer,4008	;volatile
  5723  000746  D7CF               	goto	L9
  5724  000748                     l786:
  5725                           
  5726                           ;EEPROM.c: 257:             if(EECON1bits.WR == 0){
  5727  000748  B2A6               	btfsc	166,1,c	;volsfr
  5728  00074A  0012               	return	
  5729                           
  5730                           ;EEPROM.c: 258:                 status = 3;
  5731  00074C  0E03               	movlw	3
  5732  00074E  D724               	goto	L6
  5733  000750                     l4674:
  5734                           
  5735                           ;EEPROM.c: 263:             if (position == 5){
  5736  000750  0E05               	movlw	5
  5737  000752  1828               	xorwf	_position^0,w,c
  5738  000754  E111               	bnz	l4682
  5739                           
  5740                           ;EEPROM.c: 264:                 if (topScores[status].score < saveScore){
  5741  000756  5027               	movf	_status^0,w,c
  5742  000758  D8B2               	call	PL30	;call to abstracted procedure
  5743  00075A  5025               	movf	_saveScore^0,w,c
  5744  00075C  5CDE               	subwf	postinc2,w,c
  5745  00075E  E301 D71C          	bc	l4456
  5746                           
  5747                           ;EEPROM.c: 265:                     topScores[status].score = saveScore;
  5748  000762  5027               	movf	_status^0,w,c
  5749  000764  D8AC               	call	PL30	;call to abstracted procedure
  5750  000766  C025  FFDF         	movff	_saveScore,indf2
  5751                           
  5752                           ;EEPROM.c: 266:                     topScores[status].userNum = userNum;
  5753  00076A  5027               	movf	_status^0,w,c
  5754  00076C  D8C1               	call	PL40	;call to abstracted procedure
  5755  00076E  C029  FFDF         	movff	_userNum,indf2
  5756                           
  5757                           ;EEPROM.c: 267:                     state = 21;
  5758  000772  0E15               	movlw	21
  5759  000774  6E2A               	movwf	_state@EEPROM$F1505^0,c
  5760                           
  5761                           ;EEPROM.c: 268:                 } else{
  5762  000776  0C15               	retlw	21
  5763  000778                     l4682:
  5764                           
  5765                           ;EEPROM.c: 272:                 if (topScores[position].score < topScores[status].score)
      +                          {
  5766  000778  5027               	movf	_status^0,w,c
  5767  00077A  D8A1               	call	PL30	;call to abstracted procedure
  5768  00077C  5028               	movf	_position^0,w,c
  5769  00077E  0D02               	mullw	2
  5770  000780  50F3               	movf	243,w,c
  5771  000782  0F13               	addlw	low _topScores
  5772  000784  6EE1               	movwf	fsr1l,c
  5773  000786  6AE2               	clrf	fsr1h,c
  5774  000788  50DE               	movf	postinc2,w,c
  5775  00078A  5CE6               	subwf	postinc1,w,c
  5776  00078C  E301 D716          	bc	l4468
  5777                           
  5778                           ;EEPROM.c: 273:                     status = position;
  5779  000790  C028  F027         	movff	_position,_status
  5780  000794  D713               	goto	l4468
  5781  000796                     l4688:
  5782                           
  5783                           ;EEPROM.c: 279:             EEADR = 0x90 + (status*2);
  5784  000796  5027               	movf	_status^0,w,c
  5785  000798  0D02               	mullw	2
  5786  00079A  50F3               	movf	243,w,c
  5787  00079C  0F90               	addlw	144
  5788  00079E  6EA9               	movwf	169,c	;volatile
  5789                           
  5790                           ;EEPROM.c: 280:             EEDATA = saveScore;
  5791  0007A0  C025  FFA8         	movff	_saveScore,4008	;volatile
  5792                           
  5793                           ;EEPROM.c: 281:             EECON1bits.EEPGD = 0;
  5794  0007A4  9EA6               	bcf	166,7,c	;volsfr
  5795                           
  5796                           ;EEPROM.c: 282:             EECON1bits.CFGS = 0;
  5797  0007A6  9CA6               	bcf	166,6,c	;volsfr
  5798                           
  5799                           ;EEPROM.c: 283:             EECON1bits.WREN = 1;
  5800  0007A8  84A6               	bsf	166,2,c	;volsfr
  5801                           
  5802                           ;EEPROM.c: 284:             INTCONbits.GIE = 0;
  5803  0007AA  9EF2               	bcf	242,7,c	;volatile
  5804                           
  5805                           ;EEPROM.c: 285:             EECON2 = 0x55;
  5806  0007AC  0E55               	movlw	85
  5807  0007AE  6EA7               	movwf	167,c	;volsfr
  5808                           
  5809                           ;EEPROM.c: 286:             EECON2 = 0xAA;
  5810  0007B0  0EAA               	movlw	170
  5811  0007B2  6EA7               	movwf	167,c	;volsfr
  5812                           
  5813                           ;EEPROM.c: 287:             EECON1bits.WR = 1;
  5814  0007B4  82A6               	bsf	166,1,c	;volsfr
  5815                           
  5816                           ;EEPROM.c: 288:             INTCONbits.GIE = 1;
  5817  0007B6  8EF2               	bsf	242,7,c	;volatile
  5818                           
  5819                           ;EEPROM.c: 289:             EECON1bits.WREN = 0;
  5820  0007B8  94A6               	bcf	166,2,c	;volsfr
  5821                           
  5822                           ;EEPROM.c: 290:             state = 22;
  5823  0007BA  0E16               	movlw	22
  5824  0007BC  6E2A               	movwf	_state@EEPROM$F1505^0,c
  5825                           
  5826                           ;EEPROM.c: 291:             break;
  5827  0007BE  0C16               	retlw	22
  5828  0007C0                     l795:
  5829                           
  5830                           ;EEPROM.c: 293:             if(EECON1bits.WR == 0){
  5831  0007C0  B2A6               	btfsc	166,1,c	;volsfr
  5832  0007C2  0012               	return	
  5833                           
  5834                           ;EEPROM.c: 294:                 state = 23;
  5835  0007C4  0E17               	movlw	23
  5836  0007C6  6E2A               	movwf	_state@EEPROM$F1505^0,c
  5837  0007C8  0C17               	retlw	23
  5838  0007CA                     l4714:
  5839                           
  5840                           ;EEPROM.c: 298:             EEADR = 0x90 + (status*2)+1;
  5841  0007CA  5027               	movf	_status^0,w,c
  5842  0007CC  0D02               	mullw	2
  5843  0007CE  50F3               	movf	243,w,c
  5844  0007D0  0F91               	addlw	145
  5845  0007D2  6EA9               	movwf	169,c	;volatile
  5846                           
  5847                           ;EEPROM.c: 299:             EEDATA = userNum;
  5848  0007D4  C029  FFA8         	movff	_userNum,4008	;volatile
  5849                           
  5850                           ;EEPROM.c: 300:             EECON1bits.EEPGD = 0;
  5851  0007D8  9EA6               	bcf	166,7,c	;volsfr
  5852                           
  5853                           ;EEPROM.c: 301:             EECON1bits.CFGS = 0;
  5854  0007DA  9CA6               	bcf	166,6,c	;volsfr
  5855                           
  5856                           ;EEPROM.c: 302:             EECON1bits.WREN = 1;
  5857  0007DC  84A6               	bsf	166,2,c	;volsfr
  5858                           
  5859                           ;EEPROM.c: 303:             INTCONbits.GIE = 0;
  5860  0007DE  9EF2               	bcf	242,7,c	;volatile
  5861                           
  5862                           ;EEPROM.c: 304:             EECON2 = 0x55;
  5863  0007E0  0E55               	movlw	85
  5864  0007E2  6EA7               	movwf	167,c	;volsfr
  5865                           
  5866                           ;EEPROM.c: 305:             EECON2 = 0xAA;
  5867  0007E4  0EAA               	movlw	170
  5868  0007E6  6EA7               	movwf	167,c	;volsfr
  5869                           
  5870                           ;EEPROM.c: 306:             EECON1bits.WR = 1;
  5871  0007E8  82A6               	bsf	166,1,c	;volsfr
  5872                           
  5873                           ;EEPROM.c: 307:             INTCONbits.GIE = 1;
  5874  0007EA  8EF2               	bsf	242,7,c	;volatile
  5875                           
  5876                           ;EEPROM.c: 308:             EECON1bits.WREN = 0;
  5877  0007EC  94A6               	bcf	166,2,c	;volsfr
  5878                           
  5879                           ;EEPROM.c: 309:             state = 24;
  5880  0007EE  0E18               	movlw	24
  5881  0007F0  6E2A               	movwf	_state@EEPROM$F1505^0,c
  5882                           
  5883                           ;EEPROM.c: 310:             break;
  5884  0007F2  0C18               	retlw	24
  5885  0007F4                     l798:
  5886                           
  5887                           ;EEPROM.c: 312:             if(EECON1bits.WR == 0){
  5888  0007F4  B2A6               	btfsc	166,1,c	;volsfr
  5889  0007F6  0012               	return	
  5890  0007F8  D6D0               	goto	l4456
  5891  0007FA                     l4742:
  5892  0007FA  502A               	movf	_state@EEPROM$F1505^0,w,c
  5893  0007FC  6E5B               	movwf	??_dataMotor^0,c
  5894  0007FE  6A5C               	clrf	(??_dataMotor+1)^0,c
  5895                           
  5896                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5897                           ; Switch size 1, requested type "space"
  5898                           ; Number of cases is 1, Range of values is 0 to 0
  5899                           ; switch strategies available:
  5900                           ; Name         Instructions Cycles
  5901                           ; simple_byte            4     3 (average)
  5902                           ;	Chosen strategy is simple_byte
  5903  000800  505C               	movf	(??_dataMotor+1)^0,w,c
  5904  000802  A4D8               	btfss	status,2,c
  5905  000804  0012               	return	
  5906                           
  5907                           ; Switch size 1, requested type "space"
  5908                           ; Number of cases is 24, Range of values is 0 to 180
  5909                           ; switch strategies available:
  5910                           ; Name         Instructions Cycles
  5911                           ; simple_byte           73    37 (average)
  5912                           ;	Chosen strategy is simple_byte
  5913  000806  505B               	movf	??_dataMotor^0,w,c
  5914  000808  B4D8               	btfsc	status,2,c
  5915  00080A  0012               	return	
  5916  00080C  0A01               	xorlw	1	; case 1
  5917  00080E  E101 D6BA          	bz	l4448
  5918  000812  0A03               	xorlw	3	; case 2
  5919  000814  E101 D6C3          	bz	l4458
  5920  000818  0A01               	xorlw	1	; case 3
  5921  00081A  E101 D6D4          	bz	l4472
  5922  00081E  0A07               	xorlw	7	; case 4
  5923  000820  E101 D6E4          	bz	l755
  5924  000824  0A01               	xorlw	1	; case 5
  5925  000826  E101 D6E6          	bz	l4486
  5926  00082A  0A03               	xorlw	3	; case 6
  5927  00082C  E101 D6EC          	bz	l4492
  5928  000830  0A01               	xorlw	1	; case 7
  5929  000832  E101 D6F6          	bz	l764
  5930  000836  0A0D               	xorlw	13	; case 10
  5931  000838  E101 D6F8          	bz	l4508
  5932  00083C  0A01               	xorlw	1	; case 11
  5933  00083E  E101 D70E          	bz	l766
  5934  000842  0A07               	xorlw	7	; case 12
  5935  000844  E101 D715          	bz	l4542
  5936  000848  0A01               	xorlw	1	; case 13
  5937  00084A  E101 D72D          	bz	l771
  5938  00084E  0A03               	xorlw	3	; case 14
  5939  000850  E101 D735          	bz	l4576
  5940  000854  0A01               	xorlw	1	; case 15
  5941  000856  E101 D741          	bz	l4588
  5942  00085A  0A1F               	xorlw	31	; case 16
  5943  00085C  E101 D751          	bz	l780
  5944  000860  0A01               	xorlw	1	; case 17
  5945  000862  E101 D753          	bz	l4616
  5946  000866  0A03               	xorlw	3	; case 18
  5947  000868  E101 D766          	bz	l4644
  5948  00086C  0A01               	xorlw	1	; case 19
  5949  00086E  E101 D76B          	bz	l786
  5950  000872  0A07               	xorlw	7	; case 20
  5951  000874  E101 D76C          	bz	l4674
  5952  000878  0A01               	xorlw	1	; case 21
  5953  00087A  E08D               	bz	l4688
  5954  00087C  0A03               	xorlw	3	; case 22
  5955  00087E  E0A0               	bz	l795
  5956  000880  0A01               	xorlw	1	; case 23
  5957  000882  E0A3               	bz	l4714
  5958  000884  0A0F               	xorlw	15	; case 24
  5959  000886  E0B6               	bz	l798
  5960  000888  0AAC               	xorlw	172	; case 180
  5961  00088A  E101 D752          	bz	l783
  5962  00088E  0012               	return		;funcret
  5963  000890                     __end_of_dataMotor:
  5964                           	callstack 0
  5965  000890                     PL12:
  5966                           	callstack 25
  5967  000890  50F3               	movf	243,w,c
  5968  000892  265C               	addwf	(??_dataMotor+1)^0,f,c
  5969  000894  50F4               	movf	244,w,c
  5970  000896  225D               	addwfc	(??_dataMotor+2)^0,f,c
  5971  000898  5028               	movf	_position^0,w,c
  5972  00089A  245C               	addwf	(??_dataMotor+1)^0,w,c
  5973  00089C  6EE1               	movwf	fsr1l,c
  5974  00089E  0E00               	movlw	0
  5975  0008A0  205D               	addwfc	(??_dataMotor+2)^0,w,c
  5976  0008A2  6EE2               	movwf	fsr1h,c
  5977  0008A4  50DE               	movf	postinc2,w,c
  5978  0008A6  18E6               	xorwf	postinc1,w,c
  5979  0008A8  0012               	return	
  5980  0008AA                     __end_ofPL12:
  5981                           	callstack 0
  5982  0008AA                     PL14:
  5983                           	callstack 25
  5984  0008AA  0F01               	addlw	low _mUser@EEPROM$F1509
  5985  0008AC  6ED9               	movwf	fsr2l,c
  5986  0008AE  6ADA               	clrf	fsr2h,c
  5987  0008B0  5029               	movf	_userNum^0,w,c
  5988  0008B2  0D12               	mullw	18
  5989  0008B4  0E00               	movlw	low _users
  5990  0008B6  6E5C               	movwf	(??_dataMotor+1)^0,c
  5991  0008B8  0E01               	movlw	high _users
  5992  0008BA  6E5D               	movwf	(??_dataMotor+2)^0,c
  5993  0008BC  0012               	return	
  5994  0008BE                     __end_ofPL14:
  5995                           	callstack 0
  5996  0008BE                     PL30:
  5997                           	callstack 27
  5998  0008BE  0D02               	mullw	2
  5999  0008C0  50F3               	movf	243,w,c
  6000  0008C2  0F13               	addlw	low _topScores
  6001  0008C4  6ED9               	movwf	fsr2l,c
  6002  0008C6  6ADA               	clrf	fsr2h,c
  6003  0008C8  0012               	return	
  6004  0008CA                     __end_ofPL30:
  6005                           	callstack 0
  6006  0008CA                     PL32:
  6007                           	callstack 25
  6008  0008CA  50F3               	movf	243,w,c
  6009  0008CC  265B               	addwf	??_dataMotor^0,f,c
  6010  0008CE  50F4               	movf	244,w,c
  6011  0008D0  225C               	addwfc	(??_dataMotor+1)^0,f,c
  6012  0008D2  5028               	movf	_position^0,w,c
  6013  0008D4  245B               	addwf	??_dataMotor^0,w,c
  6014  0008D6  6EE1               	movwf	fsr1l,c
  6015  0008D8  0E00               	movlw	0
  6016  0008DA  205C               	addwfc	(??_dataMotor+1)^0,w,c
  6017  0008DC  6EE2               	movwf	fsr1h,c
  6018  0008DE  CFDF FFE7          	movff	indf2,indf1
  6019  0008E2  0012               	return	
  6020  0008E4                     __end_ofPL32:
  6021                           	callstack 0
  6022  0008E4                     PL34:
  6023                           	callstack 25
  6024  0008E4  5028               	movf	_position^0,w,c
  6025  0008E6  0F01               	addlw	low _mUser@EEPROM$F1509
  6026  0008E8  6ED9               	movwf	fsr2l,c
  6027  0008EA  6ADA               	clrf	fsr2h,c
  6028  0008EC  50DF               	movf	indf2,w,c
  6029  0008EE  0012               	return	
  6030  0008F0                     __end_ofPL34:
  6031                           	callstack 0
  6032  0008F0                     PL40:
  6033                           	callstack 27
  6034  0008F0  0D02               	mullw	2
  6035  0008F2  50F3               	movf	243,w,c
  6036  0008F4  0F14               	addlw	low (_topScores+1)
  6037  0008F6  6ED9               	movwf	fsr2l,c
  6038  0008F8  6ADA               	clrf	fsr2h,c
  6039  0008FA  0012               	return	
  6040  0008FC                     __end_ofPL40:
  6041                           	callstack 0
  6042  0008FC                     PL42:
  6043                           	callstack 25
  6044  0008FC  5028               	movf	_position^0,w,c
  6045  0008FE  0F0A               	addlw	low (_mUser@EEPROM$F1509+9)
  6046  000900  6ED9               	movwf	fsr2l,c
  6047  000902  6ADA               	clrf	fsr2h,c
  6048  000904  0012               	return	
  6049  000906                     __end_ofPL42:
  6050                           	callstack 0
  6051  000906                     PL56:
  6052                           	callstack 25
  6053  000906  5026               	movf	_lastUserPointer^0,w,c
  6054  000908  0D12               	mullw	18
  6055  00090A  0E00               	movlw	low _users
  6056  00090C  6E5B               	movwf	??_dataMotor^0,c
  6057  00090E  0E01               	movlw	high _users
  6058  000910  6E5C               	movwf	(??_dataMotor+1)^0,c
  6059  000912  0012               	return	
  6060  000914                     __end_ofPL56:
  6061                           	callstack 0
  6062  000914                     PL66:
  6063                           	callstack 25
  6064  000914  0EF0               	movlw	240
  6065  000916  6EDF               	movwf	indf2,c
  6066  000918  5028               	movf	_position^0,w,c
  6067  00091A  0D02               	mullw	2
  6068  00091C  50F3               	movf	243,w,c
  6069  00091E  0012               	return	
  6070  000920                     __end_ofPL66:
  6071                           	callstack 0
  6072  000920                     PL88:
  6073                           	callstack 25
  6074  000920  6EA9               	movwf	169,c	;volatile
  6075  000922  0EF0               	movlw	240
  6076  000924  6EA8               	movwf	168,c	;volatile
  6077  000926  0CF0               	retlw	240
  6078  000928                     __end_ofPL88:
  6079                           	callstack 0
  6080                           
  6081 ;; *************** function _LcGotoXY *****************
  6082 ;; Defined at:
  6083 ;;		line 134 in file "LcTLCD.c"
  6084 ;; Parameters:    Size  Location     Type
  6085 ;;  Column          1    wreg     unsigned char 
  6086 ;;  Row             1   13[COMRAM] unsigned char 
  6087 ;; Auto vars:     Size  Location     Type
  6088 ;;  Column          1   20[COMRAM] unsigned char 
  6089 ;;  Fisics          2   18[COMRAM] int 
  6090 ;; Return value:  Size  Location     Type
  6091 ;;                  1    wreg      void 
  6092 ;; Registers used:
  6093 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6094 ;; Tracked objects:
  6095 ;;		On entry : 0/0
  6096 ;;		On exit  : 0/0
  6097 ;;		Unchanged: 0/0
  6098 ;; Data sizes:     COMRAM   BANK0   BANK1
  6099 ;;      Params:         1       0       0
  6100 ;;      Locals:         5       0       0
  6101 ;;      Temps:          2       0       0
  6102 ;;      Totals:         8       0       0
  6103 ;;Total ram usage:        8 bytes
  6104 ;; Hardware stack levels used: 1
  6105 ;; Hardware stack levels required when called: 4
  6106 ;; This function calls:
  6107 ;;		_CantaIR
  6108 ;;		_WaitForBusy
  6109 ;; This function is called by:
  6110 ;;		_LcPutChar
  6111 ;;		_menuMotor
  6112 ;;		_displayMenu
  6113 ;;		_dataMotor
  6114 ;;		_DaFindUser
  6115 ;;		_timeMotor
  6116 ;;		_displayTimeRemaining
  6117 ;; This function uses a non-reentrant model
  6118 ;;
  6119                           
  6120                           	psect	text41
  6121  000F96                     __ptext41:
  6122                           	callstack 0
  6123  000F96                     _LcGotoXY:
  6124                           	callstack 24
  6125                           
  6126                           ;incstack = 0
  6127                           ;LcGotoXY@Column stored from wreg
  6128  000F96  6E5A               	movwf	LcGotoXY@Column^0,c
  6129                           
  6130                           ;LcTLCD.c: 138:  int Fisics;;LcTLCD.c: 140:  switch (Rows) {
  6131  000F98  D030               	goto	l3380
  6132  000F9A                     l3360:
  6133                           
  6134                           ;LcTLCD.c: 142:    Fisics = Column + (!Row ? 0 : 0x40); break;
  6135  000F9A  5053               	movf	LcGotoXY@Row^0,w,c
  6136  000F9C  E004               	bz	l271
  6137  000F9E  6A57               	clrf	(_LcGotoXY$736+1)^0,c
  6138  000FA0  0E40               	movlw	64
  6139  000FA2  6E56               	movwf	_LcGotoXY$736^0,c
  6140  000FA4  D002               	goto	l3364
  6141  000FA6                     l271:
  6142  000FA6  6A56               	clrf	_LcGotoXY$736^0,c
  6143  000FA8  6A57               	clrf	(_LcGotoXY$736+1)^0,c
  6144  000FAA                     l3364:
  6145  000FAA  505A               	movf	LcGotoXY@Column^0,w,c
  6146  000FAC  2456               	addwf	_LcGotoXY$736^0,w,c
  6147  000FAE  6E58               	movwf	LcGotoXY@Fisics^0,c
  6148  000FB0  0E00               	movlw	0
  6149  000FB2  2057               	addwfc	(_LcGotoXY$736+1)^0,w,c
  6150  000FB4  6E59               	movwf	(LcGotoXY@Fisics+1)^0,c
  6151  000FB6  D02E               	goto	l3382
  6152  000FB8                     l275:
  6153                           
  6154                           ;LcTLCD.c: 144:    Fisics = Column;
  6155  000FB8  C05A  F058         	movff	LcGotoXY@Column,LcGotoXY@Fisics
  6156  000FBC  6A59               	clrf	(LcGotoXY@Fisics+1)^0,c
  6157                           
  6158                           ;LcTLCD.c: 145:    if (Row == 1) Fisics += 0x40; else
  6159  000FBE  0453               	decf	LcGotoXY@Row^0,w,c
  6160  000FC0  E102               	bnz	l3370
  6161  000FC2  0E40               	movlw	64
  6162  000FC4  D004               	goto	L7
  6163  000FC6                     l3370:
  6164                           
  6165                           ;LcTLCD.c: 146:    if (Row == 2) Fisics += Columns; else
  6166  000FC6  0E02               	movlw	2
  6167  000FC8  1853               	xorwf	LcGotoXY@Row^0,w,c
  6168  000FCA  E104               	bnz	l3374
  6169  000FCC  5039               	movf	_Columns^0,w,c
  6170  000FCE                     L7:
  6171  000FCE  2658               	addwf	LcGotoXY@Fisics^0,f,c
  6172  000FD0  0E00               	movlw	0
  6173  000FD2  D00D               	goto	L8
  6174  000FD4                     l3374:
  6175                           
  6176                           ;LcTLCD.c: 147:    if (Row == 3) Fisics += 0x40+Columns;
  6177  000FD4  0E03               	movlw	3
  6178  000FD6  1853               	xorwf	LcGotoXY@Row^0,w,c
  6179  000FD8  E11D               	bnz	l3382
  6180  000FDA  5039               	movf	_Columns^0,w,c
  6181  000FDC  6E54               	movwf	??_LcGotoXY^0,c
  6182  000FDE  6A55               	clrf	(??_LcGotoXY+1)^0,c
  6183  000FE0  0E40               	movlw	64
  6184  000FE2  2654               	addwf	??_LcGotoXY^0,f,c
  6185  000FE4  0E00               	movlw	0
  6186  000FE6  2255               	addwfc	(??_LcGotoXY+1)^0,f,c
  6187  000FE8  5054               	movf	??_LcGotoXY^0,w,c
  6188  000FEA  2658               	addwf	LcGotoXY@Fisics^0,f,c
  6189  000FEC  5055               	movf	(??_LcGotoXY+1)^0,w,c
  6190  000FEE                     L8:
  6191  000FEE  2259               	addwfc	(LcGotoXY@Fisics+1)^0,f,c
  6192                           
  6193                           ;LcTLCD.c: 148:    break;
  6194  000FF0  D011               	goto	l3382
  6195  000FF2                     l282:
  6196                           
  6197                           ;LcTLCD.c: 151:    Fisics = Column; break;
  6198  000FF2  C05A  F058         	movff	LcGotoXY@Column,LcGotoXY@Fisics
  6199  000FF6  6A59               	clrf	(LcGotoXY@Fisics+1)^0,c
  6200  000FF8  D00D               	goto	l3382
  6201  000FFA                     l3380:
  6202  000FFA  503A               	movf	_Rows^0,w,c
  6203  000FFC  6E54               	movwf	??_LcGotoXY^0,c
  6204  000FFE  6A55               	clrf	(??_LcGotoXY+1)^0,c
  6205                           
  6206                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  6207                           ; Switch size 1, requested type "space"
  6208                           ; Number of cases is 1, Range of values is 0 to 0
  6209                           ; switch strategies available:
  6210                           ; Name         Instructions Cycles
  6211                           ; simple_byte            4     3 (average)
  6212                           ;	Chosen strategy is simple_byte
  6213  001000  5055               	movf	(??_LcGotoXY+1)^0,w,c
  6214  001002  E1F7               	bnz	l282
  6215                           
  6216                           ; Switch size 1, requested type "space"
  6217                           ; Number of cases is 3, Range of values is 1 to 4
  6218                           ; switch strategies available:
  6219                           ; Name         Instructions Cycles
  6220                           ; simple_byte           10     6 (average)
  6221                           ;	Chosen strategy is simple_byte
  6222  001004  5054               	movf	??_LcGotoXY^0,w,c
  6223  001006  0A01               	xorlw	1	; case 1
  6224  001008  E0F4               	bz	l282
  6225  00100A  0A03               	xorlw	3	; case 2
  6226  00100C  E0C6               	bz	l3360
  6227  00100E  0A06               	xorlw	6	; case 4
  6228  001010  E0D3               	bz	l275
  6229  001012  D7EF               	goto	l282
  6230  001014                     l3382:
  6231                           
  6232                           ;LcTLCD.c: 154:  WaitForBusy();
  6233  001014  EC35  F00A         	call	_WaitForBusy	;wreg free
  6234                           
  6235                           ;LcTLCD.c: 155:  CantaIR(0x80 | Fisics);
  6236  001018  5058               	movf	LcGotoXY@Fisics^0,w,c
  6237  00101A  0980               	iorlw	128
  6238  00101C  EC56  F00B         	call	_CantaIR
  6239                           
  6240                           ;LcTLCD.c: 157:  RowAct = Row;
  6241  001020  C053  F038         	movff	LcGotoXY@Row,_RowAct
  6242                           
  6243                           ;LcTLCD.c: 158:  ColumnAct = Column;
  6244  001024  C05A  F037         	movff	LcGotoXY@Column,_ColumnAct
  6245  001028  0012               	return		;funcret
  6246  00102A                     __end_of_LcGotoXY:
  6247                           	callstack 0
  6248                           
  6249 ;; *************** function _TiInitTimer *****************
  6250 ;; Defined at:
  6251 ;;		line 17 in file "TTimer.c"
  6252 ;; Parameters:    Size  Location     Type
  6253 ;;		None
  6254 ;; Auto vars:     Size  Location     Type
  6255 ;;		None
  6256 ;; Return value:  Size  Location     Type
  6257 ;;                  1    wreg      void 
  6258 ;; Registers used:
  6259 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  6260 ;; Tracked objects:
  6261 ;;		On entry : 0/0
  6262 ;;		On exit  : 0/0
  6263 ;;		Unchanged: 0/0
  6264 ;; Data sizes:     COMRAM   BANK0   BANK1
  6265 ;;      Params:         0       0       0
  6266 ;;      Locals:         0       0       0
  6267 ;;      Temps:          0       0       0
  6268 ;;      Totals:         0       0       0
  6269 ;;Total ram usage:        0 bytes
  6270 ;; Hardware stack levels used: 1
  6271 ;; Hardware stack levels required when called: 2
  6272 ;; This function calls:
  6273 ;;		Nothing
  6274 ;; This function is called by:
  6275 ;;		_main
  6276 ;; This function uses a non-reentrant model
  6277 ;;
  6278                           
  6279                           	psect	text42
  6280  001514                     __ptext42:
  6281                           	callstack 0
  6282  001514                     _TiInitTimer:
  6283                           	callstack 28
  6284                           
  6285                           ;TTimer.c: 20:     RCONbits.IPEN = 0;
  6286                           
  6287                           ;incstack = 0
  6288  001514  9ED0               	bcf	208,7,c	;volatile
  6289                           
  6290                           ;TTimer.c: 21:     INTCONbits.GIE_GIEH = 1;
  6291  001516  8EF2               	bsf	242,7,c	;volatile
  6292                           
  6293                           ;TTimer.c: 22:     INTCONbits.PEIE_GIEL = 1;
  6294  001518  8CF2               	bsf	242,6,c	;volatile
  6295                           
  6296                           ;TTimer.c: 23:     INTCONbits.TMR0IE = 1;
  6297  00151A  8AF2               	bsf	242,5,c	;volatile
  6298                           
  6299                           ;TTimer.c: 24:     INTCONbits.TMR0IF = 0;
  6300  00151C  94F2               	bcf	242,2,c	;volatile
  6301                           
  6302                           ;TTimer.c: 25:     T0CON = 0x08;
  6303  00151E  0E08               	movlw	8
  6304  001520  6ED5               	movwf	213,c	;volatile
  6305                           
  6306                           ;TTimer.c: 27:     TMR0H = 0xD8;
  6307  001522  0ED8               	movlw	216
  6308  001524  6ED7               	movwf	215,c	;volatile
  6309                           
  6310                           ;TTimer.c: 28:     TMR0L = 0xF0;
  6311  001526  0EF0               	movlw	240
  6312  001528  6ED6               	movwf	214,c	;volatile
  6313                           
  6314                           ;TTimer.c: 29:     T0CONbits.TMR0ON = 1;
  6315  00152A  8ED5               	bsf	213,7,c	;volatile
  6316                           
  6317                           ;TTimer.c: 31:     for (counter=0;counter<25;counter++) {
  6318  00152C  6A45               	clrf	_counter^0,c
  6319  00152E                     l3824:
  6320  00152E  0E18               	movlw	24
  6321  001530  6445               	cpfsgt	_counter^0,c
  6322  001532  D001               	goto	l3828
  6323  001534  0C18               	retlw	24
  6324  001536                     l3828:
  6325                           
  6326                           ;TTimer.c: 32:  s_Timers[counter].b_busy=0;
  6327  001536  ECC5  F00A         	call	PL28	;call to abstracted procedure
  6328  00153A  6ADF               	clrf	indf2,c
  6329                           
  6330                           ;TTimer.c: 33:     }
  6331  00153C  2A45               	incf	_counter^0,f,c
  6332  00153E  D7F7               	goto	l3824
  6333  001540                     __end_of_TiInitTimer:
  6334                           	callstack 0
  6335                           
  6336 ;; *************** function _SMSMotor *****************
  6337 ;; Defined at:
  6338 ;;		line 133 in file "keypad.c"
  6339 ;; Parameters:    Size  Location     Type
  6340 ;;		None
  6341 ;; Auto vars:     Size  Location     Type
  6342 ;;		None
  6343 ;; Return value:  Size  Location     Type
  6344 ;;                  1    wreg      void 
  6345 ;; Registers used:
  6346 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6347 ;; Tracked objects:
  6348 ;;		On entry : 0/0
  6349 ;;		On exit  : 0/0
  6350 ;;		Unchanged: 0/0
  6351 ;; Data sizes:     COMRAM   BANK0   BANK1
  6352 ;;      Params:         0       0       0
  6353 ;;      Locals:         0       0       0
  6354 ;;      Temps:          2       0       0
  6355 ;;      Totals:         2       0       0
  6356 ;;Total ram usage:        2 bytes
  6357 ;; Hardware stack levels used: 1
  6358 ;; Hardware stack levels required when called: 4
  6359 ;; This function calls:
  6360 ;;		_KeGetGenericValue
  6361 ;;		_TiGetTics
  6362 ;;		_TiResetTics
  6363 ;; This function is called by:
  6364 ;;		_main
  6365 ;; This function uses a non-reentrant model
  6366 ;;
  6367                           
  6368                           	psect	text43
  6369  000EE8                     __ptext43:
  6370                           	callstack 0
  6371  000EE8                     _SMSMotor:
  6372                           	callstack 26
  6373                           
  6374                           ;keypad.c: 134:     switch(stateSMS){
  6375                           
  6376                           ;incstack = 0
  6377  000EE8  D043               	goto	l3944
  6378  000EEA                     l3892:
  6379                           
  6380                           ;keypad.c: 139:             if(pressed){
  6381  000EEA  503F               	movf	_pressed^0,w,c
  6382  000EEC  E021               	bz	l167
  6383                           
  6384                           ;keypad.c: 140:                 stateSMS=1;
  6385  000EEE  0E01               	movlw	1
  6386  000EF0  6E3B               	movwf	_stateSMS^0,c
  6387                           
  6388                           ;keypad.c: 141:                 currentKey = KeGetGenericValue();
  6389  000EF2  ECA0  F00A         	call	_KeGetGenericValue	;wreg free
  6390  000EF6  6E41               	movwf	_currentKey^0,c
  6391                           
  6392                           ;keypad.c: 142:                 available = 2;
  6393  000EF8  0E02               	movlw	2
  6394  000EFA  6E3D               	movwf	_available^0,c
  6395                           
  6396                           ;keypad.c: 143:                 if (TiGetTics(timer_SMS)>=1200){
  6397  000EFC  5042               	movf	_timer_SMS^0,w,c
  6398  000EFE  ECDF  F00A         	call	_TiGetTics
  6399  000F02  BE4C               	btfsc	(?_TiGetTics+1)^0,7,c
  6400  000F04  D008               	goto	l3908
  6401  000F06  ECB3  F002         	call	PL62	;call to abstracted procedure
  6402  000F0A  E305               	bnc	l3908
  6403                           
  6404                           ;keypad.c: 144:                     available = 1;
  6405  000F0C  0E01               	movlw	1
  6406  000F0E  6E3D               	movwf	_available^0,c
  6407                           
  6408                           ;keypad.c: 145:                     numPresses = 0;
  6409  000F10  6A3E               	clrf	_numPresses^0,c
  6410                           
  6411                           ;keypad.c: 146:                     previous = 0;
  6412  000F12  6A40               	clrf	_previous^0,c
  6413                           
  6414                           ;keypad.c: 147:                 } else if(numPresses != 0 && previous != currentKey ){
  6415  000F14  D00A               	goto	l3918
  6416  000F16                     l3908:
  6417  000F16  503E               	movf	_numPresses^0,w,c
  6418  000F18  E008               	bz	l3918
  6419  000F1A  5041               	movf	_currentKey^0,w,c
  6420  000F1C  1840               	xorwf	_previous^0,w,c
  6421  000F1E  E005               	bz	l3918
  6422                           
  6423                           ;keypad.c: 149:                     available = 1;
  6424  000F20  0E01               	movlw	1
  6425  000F22  6E3D               	movwf	_available^0,c
  6426                           
  6427                           ;keypad.c: 151:                     previous = currentKey;
  6428  000F24  C041  F040         	movff	_currentKey,_previous
  6429                           
  6430                           ;keypad.c: 153:                     numPresses = 0;
  6431  000F28  6A3E               	clrf	_numPresses^0,c
  6432  000F2A                     l3918:
  6433                           
  6434                           ;keypad.c: 157:                 TiResetTics(timer_SMS);
  6435  000F2A  5042               	movf	_timer_SMS^0,w,c
  6436  000F2C  EF64  F00B         	goto	_TiResetTics
  6437  000F30                     l167:
  6438                           
  6439                           ;keypad.c: 160:               previous=currentKey;
  6440  000F30  C041  F040         	movff	_currentKey,_previous
  6441  000F34  0012               	return	
  6442  000F36                     l3920:
  6443                           
  6444                           ;keypad.c: 172:             numPresses++;
  6445  000F36  2A3E               	incf	_numPresses^0,f,c
  6446                           
  6447                           ;keypad.c: 173:             stateSMS = 2;
  6448  000F38  0E02               	movlw	2
  6449  000F3A  6E3B               	movwf	_stateSMS^0,c
  6450                           
  6451                           ;keypad.c: 174:             break;
  6452  000F3C  0C02               	retlw	2
  6453  000F3E                     l3924:
  6454                           
  6455                           ;keypad.c: 177:             if (!pressed){
  6456  000F3E  503F               	movf	_pressed^0,w,c
  6457  000F40  A4D8               	btfss	status,2,c
  6458  000F42  0012               	return	
  6459                           
  6460                           ;keypad.c: 178:                 TiResetTics(timer_SMS);
  6461  000F44  5042               	movf	_timer_SMS^0,w,c
  6462  000F46  EC64  F00B         	call	_TiResetTics
  6463                           
  6464                           ;keypad.c: 180:                 stateSMS = 0;
  6465  000F4A  6A3B               	clrf	_stateSMS^0,c
  6466  000F4C  0012               	return	
  6467  000F4E                     l3930:
  6468                           
  6469                           ;keypad.c: 185:             if(pressed){
  6470  000F4E  503F               	movf	_pressed^0,w,c
  6471  000F50  B4D8               	btfsc	status,2,c
  6472  000F52  0012               	return	
  6473                           
  6474                           ;keypad.c: 186:                 stateSMS = 4;
  6475  000F54  EF01  F00B         	goto	PL86	;call to abstracted procedure
  6476  000F58                     l3934:
  6477                           
  6478                           ;keypad.c: 191:             stateSMS = 5;
  6479  000F58  0E05               	movlw	5
  6480  000F5A  6E3B               	movwf	_stateSMS^0,c
  6481                           
  6482                           ;keypad.c: 192:             break;
  6483  000F5C  0C05               	retlw	5
  6484  000F5E                     l3936:
  6485                           
  6486                           ;keypad.c: 194:             if (!pressed){
  6487  000F5E  503F               	movf	_pressed^0,w,c
  6488  000F60  A4D8               	btfss	status,2,c
  6489  000F62  0012               	return	
  6490                           
  6491                           ;keypad.c: 195:                 TiResetTics(timer_SMS);
  6492  000F64  5042               	movf	_timer_SMS^0,w,c
  6493  000F66  EC64  F00B         	call	_TiResetTics
  6494                           
  6495                           ;keypad.c: 197:                 stateSMS = 3;
  6496  000F6A  0E03               	movlw	3
  6497  000F6C  6E3B               	movwf	_stateSMS^0,c
  6498  000F6E  0C03               	retlw	3
  6499  000F70                     l3944:
  6500  000F70  503B               	movf	_stateSMS^0,w,c
  6501  000F72  6E52               	movwf	??_SMSMotor^0,c
  6502  000F74  6A53               	clrf	(??_SMSMotor+1)^0,c
  6503                           
  6504                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  6505                           ; Switch size 1, requested type "space"
  6506                           ; Number of cases is 1, Range of values is 0 to 0
  6507                           ; switch strategies available:
  6508                           ; Name         Instructions Cycles
  6509                           ; simple_byte            4     3 (average)
  6510                           ;	Chosen strategy is simple_byte
  6511  000F76  5053               	movf	(??_SMSMotor+1)^0,w,c
  6512  000F78  A4D8               	btfss	status,2,c
  6513  000F7A  0012               	return	
  6514                           
  6515                           ; Switch size 1, requested type "space"
  6516                           ; Number of cases is 6, Range of values is 0 to 5
  6517                           ; switch strategies available:
  6518                           ; Name         Instructions Cycles
  6519                           ; simple_byte           19    10 (average)
  6520                           ;	Chosen strategy is simple_byte
  6521  000F7C  5052               	movf	??_SMSMotor^0,w,c
  6522  000F7E  E0B5               	bz	l3892
  6523  000F80  0A01               	xorlw	1	; case 1
  6524  000F82  E0D9               	bz	l3920
  6525  000F84  0A03               	xorlw	3	; case 2
  6526  000F86  E0DB               	bz	l3924
  6527  000F88  0A01               	xorlw	1	; case 3
  6528  000F8A  E0E1               	bz	l3930
  6529  000F8C  0A07               	xorlw	7	; case 4
  6530  000F8E  E0E4               	bz	l3934
  6531  000F90  0A01               	xorlw	1	; case 5
  6532  000F92  E0E5               	bz	l3936
  6533  000F94  0012               	return		;funcret
  6534  000F96                     __end_of_SMSMotor:
  6535                           	callstack 0
  6536                           
  6537 ;; *************** function _KeGetGenericValue *****************
  6538 ;; Defined at:
  6539 ;;		line 224 in file "keypad.c"
  6540 ;; Parameters:    Size  Location     Type
  6541 ;;		None
  6542 ;; Auto vars:     Size  Location     Type
  6543 ;;		None
  6544 ;; Return value:  Size  Location     Type
  6545 ;;                  1    wreg      unsigned char 
  6546 ;; Registers used:
  6547 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6548 ;; Tracked objects:
  6549 ;;		On entry : 0/0
  6550 ;;		On exit  : 0/0
  6551 ;;		Unchanged: 0/0
  6552 ;; Data sizes:     COMRAM   BANK0   BANK1
  6553 ;;      Params:         0       0       0
  6554 ;;      Locals:         0       0       0
  6555 ;;      Temps:          2       0       0
  6556 ;;      Totals:         2       0       0
  6557 ;;Total ram usage:        2 bytes
  6558 ;; Hardware stack levels used: 1
  6559 ;; Hardware stack levels required when called: 3
  6560 ;; This function calls:
  6561 ;;		_getColumn
  6562 ;; This function is called by:
  6563 ;;		_SMSMotor
  6564 ;;		_KeGetCharValue
  6565 ;;		_menuMotor
  6566 ;; This function uses a non-reentrant model
  6567 ;;
  6568                           
  6569                           	psect	text44
  6570  001540                     __ptext44:
  6571                           	callstack 0
  6572  001540                     _KeGetGenericValue:
  6573                           	callstack 26
  6574                           
  6575                           ;keypad.c: 225:     return TABLE[(row*3)+getColumn()];
  6576                           
  6577                           ;incstack = 0
  6578  001540  5044               	movf	_row^0,w,c
  6579  001542  0D03               	mullw	3
  6580  001544  0E3F               	movlw	low _TABLE
  6581  001546  6E4B               	movwf	??_KeGetGenericValue^0,c
  6582  001548  0E1F               	movlw	high _TABLE
  6583  00154A  6E4C               	movwf	(??_KeGetGenericValue+1)^0,c
  6584  00154C  50F3               	movf	243,w,c
  6585  00154E  264B               	addwf	??_KeGetGenericValue^0,f,c
  6586  001550  50F4               	movf	244,w,c
  6587  001552  224C               	addwfc	(??_KeGetGenericValue+1)^0,f,c
  6588  001554  ECB0  F00B         	call	_getColumn	;wreg free
  6589  001558  264B               	addwf	??_KeGetGenericValue^0,f,c
  6590  00155A  0E00               	movlw	0
  6591  00155C  224C               	addwfc	(??_KeGetGenericValue+1)^0,f,c
  6592  00155E  C04B  FFF6         	movff	??_KeGetGenericValue,tblptrl
  6593  001562  C04C  FFF7         	movff	??_KeGetGenericValue+1,tblptrh
  6594  001566                     	if	0	;tblptru may be non-zero
  6595  001566                     	endif
  6596  001566                     	if	0	;tblptru may be non-zero
  6597  001566                     	endif
  6598  001566  0008               	tblrd		*
  6599  001568  50F5               	movf	tablat,w,c
  6600  00156A  0012               	return		;funcret
  6601  00156C                     __end_of_KeGetGenericValue:
  6602                           	callstack 0
  6603                           
  6604 ;; *************** function _getColumn *****************
  6605 ;; Defined at:
  6606 ;;		line 211 in file "keypad.c"
  6607 ;; Parameters:    Size  Location     Type
  6608 ;;		None
  6609 ;; Auto vars:     Size  Location     Type
  6610 ;;		None
  6611 ;; Return value:  Size  Location     Type
  6612 ;;                  1    wreg      unsigned char 
  6613 ;; Registers used:
  6614 ;;		wreg
  6615 ;; Tracked objects:
  6616 ;;		On entry : 0/0
  6617 ;;		On exit  : 0/0
  6618 ;;		Unchanged: 0/0
  6619 ;; Data sizes:     COMRAM   BANK0   BANK1
  6620 ;;      Params:         0       0       0
  6621 ;;      Locals:         0       0       0
  6622 ;;      Temps:          0       0       0
  6623 ;;      Totals:         0       0       0
  6624 ;;Total ram usage:        0 bytes
  6625 ;; Hardware stack levels used: 1
  6626 ;; Hardware stack levels required when called: 2
  6627 ;; This function calls:
  6628 ;;		Nothing
  6629 ;; This function is called by:
  6630 ;;		_KeGetGenericValue
  6631 ;; This function uses a non-reentrant model
  6632 ;;
  6633                           
  6634                           	psect	text45
  6635  001760                     __ptext45:
  6636                           	callstack 0
  6637  001760                     _getColumn:
  6638                           	callstack 26
  6639                           
  6640                           ;keypad.c: 212:     if (!PORTBbits.RB0) return 0;
  6641                           
  6642                           ;incstack = 0
  6643  001760  A081               	btfss	129,0,c	;volatile
  6644  001762  0C00               	retlw	0
  6645                           
  6646                           ;keypad.c: 213:     if (!PORTBbits.RB1) return 1;
  6647  001764  A281               	btfss	129,1,c	;volatile
  6648  001766  0C01               	retlw	1
  6649                           
  6650                           ;keypad.c: 214:     return 2;
  6651  001768  0C02               	retlw	2	;funcret
  6652  00176A                     __end_of_getColumn:
  6653                           	callstack 0
  6654                           
  6655 ;; *************** function _LcInit *****************
  6656 ;; Defined at:
  6657 ;;		line 68 in file "LcTLCD.c"
  6658 ;; Parameters:    Size  Location     Type
  6659 ;;  rows            1    wreg     unsigned char 
  6660 ;;  columns         1   17[COMRAM] unsigned char 
  6661 ;; Auto vars:     Size  Location     Type
  6662 ;;  rows            1   18[COMRAM] unsigned char 
  6663 ;;  i               2   19[COMRAM] int 
  6664 ;; Return value:  Size  Location     Type
  6665 ;;                  1    wreg      void 
  6666 ;; Registers used:
  6667 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6668 ;; Tracked objects:
  6669 ;;		On entry : 0/0
  6670 ;;		On exit  : 0/0
  6671 ;;		Unchanged: 0/0
  6672 ;; Data sizes:     COMRAM   BANK0   BANK1
  6673 ;;      Params:         1       0       0
  6674 ;;      Locals:         3       0       0
  6675 ;;      Temps:          0       0       0
  6676 ;;      Totals:         4       0       0
  6677 ;;Total ram usage:        4 bytes
  6678 ;; Hardware stack levels used: 1
  6679 ;; Hardware stack levels required when called: 4
  6680 ;; This function calls:
  6681 ;;		_CantaIR
  6682 ;;		_EscriuPrimeraOrdre
  6683 ;;		_Espera
  6684 ;;		_TiGetTimer
  6685 ;;		_WaitForBusy
  6686 ;; This function is called by:
  6687 ;;		_main
  6688 ;; This function uses a non-reentrant model
  6689 ;;
  6690                           
  6691                           	psect	text46
  6692  000D5E                     __ptext46:
  6693                           	callstack 0
  6694  000D5E                     _LcInit:
  6695                           	callstack 26
  6696                           
  6697                           ;incstack = 0
  6698                           ;LcInit@rows stored from wreg
  6699  000D5E  6E58               	movwf	LcInit@rows^0,c
  6700                           
  6701                           ;LcTLCD.c: 74:  int i;;LcTLCD.c: 75:  Timer = TiGetTimer();
  6702  000D60  ECB6  F00A         	call	_TiGetTimer	;wreg free
  6703  000D64  6E1F               	movwf	_Timer^0,c
  6704  000D66  6A20               	clrf	(_Timer+1)^0,c
  6705                           
  6706                           ;LcTLCD.c: 76:  Rows = rows; Columns = columns;
  6707  000D68  C058  F03A         	movff	LcInit@rows,_Rows
  6708  000D6C  C057  F039         	movff	LcInit@columns,_Columns
  6709                           
  6710                           ;LcTLCD.c: 77:  RowAct = ColumnAct = 0;
  6711  000D70  6A37               	clrf	_ColumnAct^0,c
  6712  000D72  6A38               	clrf	_RowAct^0,c
  6713                           
  6714                           ;LcTLCD.c: 78:  (TRISDbits.TRISD4 = TRISDbits.TRISD5 = TRISDbits.TRISD6 = 0);
  6715  000D74  9C95               	bcf	149,6,c	;volatile
  6716  000D76  9A95               	bcf	149,5,c	;volatile
  6717  000D78  9895               	bcf	149,4,c	;volatile
  6718                           
  6719                           ;LcTLCD.c: 79:  for (i = 0; i < 2; i++) {
  6720  000D7A  6A59               	clrf	LcInit@i^0,c
  6721  000D7C  6A5A               	clrf	(LcInit@i+1)^0,c
  6722  000D7E                     l3854:
  6723                           
  6724                           ;LcTLCD.c: 80:   Espera(Timer, 100);
  6725  000D7E  D84C               	call	PL22	;call to abstracted procedure
  6726  000D80  0E64               	movlw	100
  6727  000D82  6E54               	movwf	Espera@ms^0,c
  6728  000D84  EC37  F00B         	call	_Espera	;wreg free
  6729                           
  6730                           ;LcTLCD.c: 83:   EscriuPrimeraOrdre(0x02 | 0x01);
  6731  000D88  0E03               	movlw	3
  6732  000D8A  EC57  F008         	call	_EscriuPrimeraOrdre
  6733                           
  6734                           ;LcTLCD.c: 84:   Espera(Timer, 5);
  6735  000D8E  D844               	call	PL22	;call to abstracted procedure
  6736  000D90  0E05               	movlw	5
  6737  000D92  6E54               	movwf	Espera@ms^0,c
  6738  000D94  EC37  F00B         	call	_Espera	;wreg free
  6739                           
  6740                           ;LcTLCD.c: 85:   EscriuPrimeraOrdre(0x02 | 0x01);
  6741  000D98  0E03               	movlw	3
  6742  000D9A  EC57  F008         	call	_EscriuPrimeraOrdre
  6743                           
  6744                           ;LcTLCD.c: 86:   Espera(Timer, 1);
  6745  000D9E  D83C               	call	PL22	;call to abstracted procedure
  6746  000DA0  0E01               	movlw	1
  6747  000DA2  6E54               	movwf	Espera@ms^0,c
  6748  000DA4  EC37  F00B         	call	_Espera	;wreg free
  6749                           
  6750                           ;LcTLCD.c: 87:   EscriuPrimeraOrdre(0x02 | 0x01);
  6751  000DA8  0E03               	movlw	3
  6752  000DAA  EC57  F008         	call	_EscriuPrimeraOrdre
  6753                           
  6754                           ;LcTLCD.c: 88:   Espera(Timer, 1);
  6755  000DAE  D834               	call	PL22	;call to abstracted procedure
  6756  000DB0  0E01               	movlw	1
  6757  000DB2  6E54               	movwf	Espera@ms^0,c
  6758  000DB4  EC37  F00B         	call	_Espera	;wreg free
  6759                           
  6760                           ;LcTLCD.c: 91:   EscriuPrimeraOrdre(0x02);
  6761  000DB8  0E02               	movlw	2
  6762  000DBA  EC57  F008         	call	_EscriuPrimeraOrdre
  6763                           
  6764                           ;LcTLCD.c: 92:   Espera(Timer, 1);
  6765  000DBE  D82C               	call	PL22	;call to abstracted procedure
  6766  000DC0  0E01               	movlw	1
  6767  000DC2  6E54               	movwf	Espera@ms^0,c
  6768  000DC4  EC37  F00B         	call	_Espera	;wreg free
  6769                           
  6770                           ;LcTLCD.c: 93:   CantaIR(0x20 | 0x08);
  6771  000DC8  0E28               	movlw	40
  6772  000DCA  EC56  F00B         	call	_CantaIR
  6773                           
  6774                           ;LcTLCD.c: 96:   WaitForBusy(); CantaIR(0x08);
  6775  000DCE  EC35  F00A         	call	_WaitForBusy	;wreg free
  6776  000DD2  0E08               	movlw	8
  6777  000DD4  EC56  F00B         	call	_CantaIR
  6778                           
  6779                           ;LcTLCD.c: 97:   WaitForBusy(); CantaIR(0x01);
  6780  000DD8  EC35  F00A         	call	_WaitForBusy	;wreg free
  6781  000DDC  0E01               	movlw	1
  6782  000DDE  EC56  F00B         	call	_CantaIR
  6783                           
  6784                           ;LcTLCD.c: 98:   Espera(Timer,3);
  6785  000DE2  D81A               	call	PL22	;call to abstracted procedure
  6786  000DE4  0E03               	movlw	3
  6787  000DE6  6E54               	movwf	Espera@ms^0,c
  6788  000DE8  EC37  F00B         	call	_Espera	;wreg free
  6789                           
  6790                           ;LcTLCD.c: 99:   WaitForBusy(); CantaIR(0x04 | 0x02);
  6791  000DEC  EC35  F00A         	call	_WaitForBusy	;wreg free
  6792  000DF0  0E06               	movlw	6
  6793  000DF2  EC56  F00B         	call	_CantaIR
  6794                           
  6795                           ;LcTLCD.c: 100:   WaitForBusy(); CantaIR(0x08 | 0x04 | 0x02 | 0x01);
  6796  000DF6  EC35  F00A         	call	_WaitForBusy	;wreg free
  6797  000DFA  0E0F               	movlw	15
  6798  000DFC  EC56  F00B         	call	_CantaIR
  6799                           
  6800                           ;LcTLCD.c: 101:  }
  6801  000E00  4A59               	infsnz	LcInit@i^0,f,c
  6802  000E02  2A5A               	incf	(LcInit@i+1)^0,f,c
  6803  000E04  BE5A               	btfsc	(LcInit@i+1)^0,7,c
  6804  000E06  D7BB               	goto	l3854
  6805  000E08  505A               	movf	(LcInit@i+1)^0,w,c
  6806  000E0A  E105               	bnz	u3010
  6807  000E0C  0E02               	movlw	2
  6808  000E0E  5C59               	subwf	LcInit@i^0,w,c
  6809  000E10  B0D8               	btfsc	status,0,c
  6810  000E12  0012               	return	
  6811  000E14  D7B4               	goto	l3854
  6812  000E16                     u3010:
  6813  000E16  0012               	return		;funcret
  6814  000E18                     __end_of_LcInit:
  6815                           	callstack 0
  6816  000E18                     PL22:
  6817                           	callstack 26
  6818  000E18  C01F  F052         	movff	_Timer,Espera@Timer
  6819  000E1C  C020  F053         	movff	_Timer+1,Espera@Timer+1
  6820  000E20  6A55               	clrf	(Espera@ms+1)^0,c
  6821  000E22  0012               	return	
  6822  000E24                     __end_ofPL22:
  6823                           	callstack 0
  6824                           
  6825 ;; *************** function _WaitForBusy *****************
  6826 ;; Defined at:
  6827 ;;		line 261 in file "LcTLCD.c"
  6828 ;; Parameters:    Size  Location     Type
  6829 ;;		None
  6830 ;; Auto vars:     Size  Location     Type
  6831 ;;  Busy            1   12[COMRAM] unsigned char 
  6832 ;; Return value:  Size  Location     Type
  6833 ;;                  1    wreg      void 
  6834 ;; Registers used:
  6835 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6836 ;; Tracked objects:
  6837 ;;		On entry : 0/0
  6838 ;;		On exit  : 0/0
  6839 ;;		Unchanged: 0/0
  6840 ;; Data sizes:     COMRAM   BANK0   BANK1
  6841 ;;      Params:         0       0       0
  6842 ;;      Locals:         1       0       0
  6843 ;;      Temps:          0       0       0
  6844 ;;      Totals:         1       0       0
  6845 ;;Total ram usage:        1 bytes
  6846 ;; Hardware stack levels used: 1
  6847 ;; Hardware stack levels required when called: 3
  6848 ;; This function calls:
  6849 ;;		_TiGetTics
  6850 ;;		_TiResetTics
  6851 ;; This function is called by:
  6852 ;;		_LcInit
  6853 ;;		_LcClear
  6854 ;;		_LcCursorOn
  6855 ;;		_LcCursorOff
  6856 ;;		_LcGotoXY
  6857 ;;		_LcPutChar
  6858 ;; This function uses a non-reentrant model
  6859 ;;
  6860                           
  6861                           	psect	text47
  6862  00146A                     __ptext47:
  6863                           	callstack 0
  6864  00146A                     _WaitForBusy:
  6865                           	callstack 25
  6866                           
  6867                           ;LcTLCD.c: 262:  (TRISDbits.TRISD0 = TRISDbits.TRISD1 = TRISDbits.TRISD2 = TRISDbits.TRI
      +                          SD3 = 1);
  6868                           
  6869                           ;incstack = 0
  6870  00146A  8695               	bsf	149,3,c	;volatile
  6871  00146C  8495               	bsf	149,2,c	;volatile
  6872  00146E  8295               	bsf	149,1,c	;volatile
  6873  001470  8095               	bsf	149,0,c	;volatile
  6874                           
  6875                           ;LcTLCD.c: 263:  (LATDbits.LATD4 = 0);
  6876  001472  988C               	bcf	140,4,c	;volatile
  6877                           
  6878                           ;LcTLCD.c: 264:  (LATDbits.LATD5 = 1);
  6879  001474  8A8C               	bsf	140,5,c	;volatile
  6880                           
  6881                           ;LcTLCD.c: 265:  TiResetTics(Timer);
  6882  001476  501F               	movf	_Timer^0,w,c
  6883  001478  EC64  F00B         	call	_TiResetTics
  6884  00147C                     l3320:
  6885                           
  6886                           ;LcTLCD.c: 267:   (LATDbits.LATD6 = 1);(LATDbits.LATD6 = 1);
  6887  00147C  8C8C               	bsf	140,6,c	;volatile
  6888  00147E  8C8C               	bsf	140,6,c	;volatile
  6889                           
  6890                           ;LcTLCD.c: 268:   Busy = (PORTDbits.RD3);
  6891  001480  0E00               	movlw	0
  6892  001482  B683               	btfsc	131,3,c	;volatile
  6893  001484  0E01               	movlw	1
  6894  001486  6E52               	movwf	WaitForBusy@Busy^0,c
  6895                           
  6896                           ;LcTLCD.c: 269:   (LATDbits.LATD6 = 0);
  6897  001488  9C8C               	bcf	140,6,c	;volatile
  6898                           
  6899                           ;LcTLCD.c: 270:   (LATDbits.LATD6 = 0);
  6900  00148A  9C8C               	bcf	140,6,c	;volatile
  6901                           
  6902                           ;LcTLCD.c: 271:   (LATDbits.LATD6 = 1);(LATDbits.LATD6 = 1);
  6903  00148C  8C8C               	bsf	140,6,c	;volatile
  6904  00148E  8C8C               	bsf	140,6,c	;volatile
  6905                           
  6906                           ;LcTLCD.c: 273:   (LATDbits.LATD6 = 0);
  6907  001490  9C8C               	bcf	140,6,c	;volatile
  6908                           
  6909                           ;LcTLCD.c: 274:   (LATDbits.LATD6 = 0);
  6910  001492  9C8C               	bcf	140,6,c	;volatile
  6911                           
  6912                           ;LcTLCD.c: 275:   if (TiGetTics(Timer)) break;
  6913  001494  501F               	movf	_Timer^0,w,c
  6914  001496  ECDF  F00A         	call	_TiGetTics
  6915  00149A  504B               	movf	?_TiGetTics^0,w,c
  6916  00149C  104C               	iorwf	(?_TiGetTics+1)^0,w,c
  6917  00149E  E001               	bz	l3342
  6918  0014A0  0012               	return	
  6919  0014A2                     l3342:
  6920                           
  6921                           ;LcTLCD.c: 276:  } while(Busy);
  6922  0014A2  5052               	movf	WaitForBusy@Busy^0,w,c
  6923  0014A4  E1EB               	bnz	l3320
  6924  0014A6  0012               	return		;funcret
  6925  0014A8                     __end_of_WaitForBusy:
  6926                           	callstack 0
  6927                           
  6928 ;; *************** function _TiGetTimer *****************
  6929 ;; Defined at:
  6930 ;;		line 74 in file "TTimer.c"
  6931 ;; Parameters:    Size  Location     Type
  6932 ;;		None
  6933 ;; Auto vars:     Size  Location     Type
  6934 ;;		None
  6935 ;; Return value:  Size  Location     Type
  6936 ;;                  1    wreg      unsigned char 
  6937 ;; Registers used:
  6938 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  6939 ;; Tracked objects:
  6940 ;;		On entry : 0/0
  6941 ;;		On exit  : 0/0
  6942 ;;		Unchanged: 0/0
  6943 ;; Data sizes:     COMRAM   BANK0   BANK1
  6944 ;;      Params:         0       0       0
  6945 ;;      Locals:         0       0       0
  6946 ;;      Temps:          1       0       0
  6947 ;;      Totals:         1       0       0
  6948 ;;Total ram usage:        1 bytes
  6949 ;; Hardware stack levels used: 1
  6950 ;; Hardware stack levels required when called: 2
  6951 ;; This function calls:
  6952 ;;		Nothing
  6953 ;; This function is called by:
  6954 ;;		_initKeypad
  6955 ;;		_LcInit
  6956 ;;		_initMenu
  6957 ;;		_initTime
  6958 ;; This function uses a non-reentrant model
  6959 ;;
  6960                           
  6961                           	psect	text48
  6962  00156C                     __ptext48:
  6963                           	callstack 0
  6964  00156C                     _TiGetTimer:
  6965                           	callstack 27
  6966                           
  6967                           ;TTimer.c: 78:     counter=0;
  6968                           
  6969                           ;incstack = 0
  6970  00156C  6A45               	clrf	_counter^0,c
  6971                           
  6972                           ;TTimer.c: 79:     while (s_Timers[counter].b_busy==1) {
  6973  00156E  D005               	goto	l3520
  6974  001570                     l3512:
  6975                           
  6976                           ;TTimer.c: 80:         counter++;
  6977  001570  2A45               	incf	_counter^0,f,c
  6978                           
  6979                           ;TTimer.c: 81:  if (counter == 25) return -1;
  6980  001572  0E19               	movlw	25
  6981  001574  1845               	xorwf	_counter^0,w,c
  6982  001576  E101               	bnz	l3520
  6983  001578  0CFF               	retlw	255
  6984  00157A                     l3520:
  6985                           
  6986                           ;TTimer.c: 79:     while (s_Timers[counter].b_busy==1) {
  6987  00157A  D807               	call	PL28	;call to abstracted procedure
  6988  00157C  04DE               	decf	postinc2,w,c
  6989  00157E  E0F8               	bz	l3512
  6990                           
  6991                           ;TTimer.c: 83:     s_Timers[counter].b_busy=1;
  6992  001580  D804               	call	PL28	;call to abstracted procedure
  6993  001582  0E01               	movlw	1
  6994  001584  6EDF               	movwf	indf2,c
  6995                           
  6996                           ;TTimer.c: 84:     return (counter);
  6997  001586  5045               	movf	_counter^0,w,c
  6998  001588  0012               	return		;funcret
  6999  00158A                     __end_of_TiGetTimer:
  7000                           	callstack 0
  7001  00158A                     PL28:
  7002                           	callstack 28
  7003  00158A  5045               	movf	_counter^0,w,c
  7004  00158C  0D03               	mullw	3
  7005  00158E  50F3               	movf	243,w,c
  7006  001590  0F82               	addlw	low (_s_Timers+2)
  7007  001592  6ED9               	movwf	fsr2l,c
  7008  001594  6ADA               	clrf	fsr2h,c
  7009  001596  0012               	return	
  7010  001598                     __end_ofPL28:
  7011                           	callstack 0
  7012                           
  7013 ;; *************** function _Espera *****************
  7014 ;; Defined at:
  7015 ;;		line 210 in file "LcTLCD.c"
  7016 ;; Parameters:    Size  Location     Type
  7017 ;;  Timer           2   12[COMRAM] int 
  7018 ;;  ms              2   14[COMRAM] int 
  7019 ;; Auto vars:     Size  Location     Type
  7020 ;;		None
  7021 ;; Return value:  Size  Location     Type
  7022 ;;                  1    wreg      void 
  7023 ;; Registers used:
  7024 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7025 ;; Tracked objects:
  7026 ;;		On entry : 0/0
  7027 ;;		On exit  : 0/0
  7028 ;;		Unchanged: 0/0
  7029 ;; Data sizes:     COMRAM   BANK0   BANK1
  7030 ;;      Params:         4       0       0
  7031 ;;      Locals:         0       0       0
  7032 ;;      Temps:          1       0       0
  7033 ;;      Totals:         5       0       0
  7034 ;;Total ram usage:        5 bytes
  7035 ;; Hardware stack levels used: 1
  7036 ;; Hardware stack levels required when called: 3
  7037 ;; This function calls:
  7038 ;;		_TiGetTics
  7039 ;;		_TiResetTics
  7040 ;; This function is called by:
  7041 ;;		_LcInit
  7042 ;;		_LcClear
  7043 ;; This function uses a non-reentrant model
  7044 ;;
  7045                           
  7046                           	psect	text49
  7047  00166E                     __ptext49:
  7048                           	callstack 0
  7049  00166E                     _Espera:
  7050                           	callstack 25
  7051                           
  7052                           ;LcTLCD.c: 211:  TiResetTics(Timer);
  7053                           
  7054                           ;incstack = 0
  7055  00166E  5052               	movf	Espera@Timer^0,w,c
  7056  001670  EC64  F00B         	call	_TiResetTics
  7057  001674                     l3434:
  7058  001674  5052               	movf	Espera@Timer^0,w,c
  7059  001676  ECDF  F00A         	call	_TiGetTics
  7060  00167A  5054               	movf	Espera@ms^0,w,c
  7061  00167C  5C4B               	subwf	?_TiGetTics^0,w,c
  7062  00167E  504C               	movf	(?_TiGetTics+1)^0,w,c
  7063  001680  0A80               	xorlw	128
  7064  001682  6E56               	movwf	??_Espera^0,c
  7065  001684  5055               	movf	(Espera@ms+1)^0,w,c
  7066  001686  0A80               	xorlw	128
  7067  001688  5856               	subwfb	??_Espera^0,w,c
  7068  00168A  E3F4               	bnc	l3434
  7069  00168C  0012               	return		;funcret
  7070  00168E                     __end_of_Espera:
  7071                           	callstack 0
  7072                           
  7073 ;; *************** function _EscriuPrimeraOrdre *****************
  7074 ;; Defined at:
  7075 ;;		line 279 in file "LcTLCD.c"
  7076 ;; Parameters:    Size  Location     Type
  7077 ;;  ordre           1    wreg     unsigned char 
  7078 ;; Auto vars:     Size  Location     Type
  7079 ;;  ordre           1    6[COMRAM] unsigned char 
  7080 ;; Return value:  Size  Location     Type
  7081 ;;                  1    wreg      void 
  7082 ;; Registers used:
  7083 ;;		wreg, status,2, status,0
  7084 ;; Tracked objects:
  7085 ;;		On entry : 0/0
  7086 ;;		On exit  : 0/0
  7087 ;;		Unchanged: 0/0
  7088 ;; Data sizes:     COMRAM   BANK0   BANK1
  7089 ;;      Params:         0       0       0
  7090 ;;      Locals:         1       0       0
  7091 ;;      Temps:          1       0       0
  7092 ;;      Totals:         2       0       0
  7093 ;;Total ram usage:        2 bytes
  7094 ;; Hardware stack levels used: 1
  7095 ;; Hardware stack levels required when called: 2
  7096 ;; This function calls:
  7097 ;;		Nothing
  7098 ;; This function is called by:
  7099 ;;		_LcInit
  7100 ;; This function uses a non-reentrant model
  7101 ;;
  7102                           
  7103                           	psect	text50
  7104  0010AE                     __ptext50:
  7105                           	callstack 0
  7106  0010AE                     _EscriuPrimeraOrdre:
  7107                           	callstack 27
  7108                           
  7109                           ;incstack = 0
  7110                           ;EscriuPrimeraOrdre@ordre stored from wreg
  7111  0010AE  6E4C               	movwf	EscriuPrimeraOrdre@ordre^0,c
  7112                           
  7113                           ;LcTLCD.c: 281:  (TRISDbits.TRISD0 = TRISDbits.TRISD1 = TRISDbits.TRISD2 = TRISDbits.TRI
      +                          SD3 = 0); (LATDbits.LATD4 = 0); (LATDbits.LATD5 = 0);
  7114  0010B0  9695               	bcf	149,3,c	;volatile
  7115                           
  7116                           ;LcTLCD.c: 282:  (LATDbits.LATD6 = 1); (LATDbits.LATD6 = 1);
  7117  0010B2  D82F               	call	PL54	;call to abstracted procedure
  7118  0010B4  8C8C               	bsf	140,6,c	;volatile
  7119                           
  7120                           ;LcTLCD.c: 283:   (LATDbits.LATD3 = (ordre & 0x08 ? 1 : 0));
  7121  0010B6  A64C               	btfss	EscriuPrimeraOrdre@ordre^0,3,c
  7122  0010B8  D003               	goto	u500
  7123  0010BA  6A4B               	clrf	??_EscriuPrimeraOrdre^0,c
  7124  0010BC  2A4B               	incf	??_EscriuPrimeraOrdre^0,f,c
  7125  0010BE  D001               	goto	u518
  7126  0010C0                     u500:
  7127  0010C0  6A4B               	clrf	??_EscriuPrimeraOrdre^0,c
  7128  0010C2                     u518:
  7129  0010C2  464B               	rlncf	??_EscriuPrimeraOrdre^0,f,c
  7130  0010C4  D82D               	call	PL78	;call to abstracted procedure
  7131  0010C6  0BF7               	andlw	-9
  7132  0010C8  184B               	xorwf	??_EscriuPrimeraOrdre^0,w,c
  7133  0010CA  6E8C               	movwf	140,c	;volatile
  7134                           
  7135                           ;LcTLCD.c: 284:   (LATDbits.LATD2 = (ordre & 0x04 ? 1 : 0));
  7136  0010CC  A44C               	btfss	EscriuPrimeraOrdre@ordre^0,2,c
  7137  0010CE  D003               	goto	u520
  7138  0010D0  6A4B               	clrf	??_EscriuPrimeraOrdre^0,c
  7139  0010D2  2A4B               	incf	??_EscriuPrimeraOrdre^0,f,c
  7140  0010D4  D001               	goto	u538
  7141  0010D6                     u520:
  7142  0010D6  6A4B               	clrf	??_EscriuPrimeraOrdre^0,c
  7143  0010D8                     u538:
  7144  0010D8  D823               	call	PL78	;call to abstracted procedure
  7145  0010DA  0BFB               	andlw	-5
  7146  0010DC  184B               	xorwf	??_EscriuPrimeraOrdre^0,w,c
  7147  0010DE  6E8C               	movwf	140,c	;volatile
  7148                           
  7149                           ;LcTLCD.c: 285:   (LATDbits.LATD1 = (ordre & 0x02 ? 1 : 0));
  7150  0010E0  A24C               	btfss	EscriuPrimeraOrdre@ordre^0,1,c
  7151  0010E2  D003               	goto	u540
  7152  0010E4  6A4B               	clrf	??_EscriuPrimeraOrdre^0,c
  7153  0010E6  2A4B               	incf	??_EscriuPrimeraOrdre^0,f,c
  7154  0010E8  D001               	goto	u558
  7155  0010EA                     u540:
  7156  0010EA  6A4B               	clrf	??_EscriuPrimeraOrdre^0,c
  7157  0010EC                     u558:
  7158  0010EC  464B               	rlncf	??_EscriuPrimeraOrdre^0,f,c
  7159  0010EE  508C               	movf	140,w,c	;volatile
  7160  0010F0  184B               	xorwf	??_EscriuPrimeraOrdre^0,w,c
  7161  0010F2  0BFD               	andlw	-3
  7162  0010F4  184B               	xorwf	??_EscriuPrimeraOrdre^0,w,c
  7163  0010F6  6E8C               	movwf	140,c	;volatile
  7164                           
  7165                           ;LcTLCD.c: 286:   (LATDbits.LATD0 = (ordre & 0x01 ? 1 : 0));
  7166  0010F8  A04C               	btfss	EscriuPrimeraOrdre@ordre^0,0,c
  7167  0010FA  D003               	goto	u560
  7168  0010FC  6A4B               	clrf	??_EscriuPrimeraOrdre^0,c
  7169  0010FE  2A4B               	incf	??_EscriuPrimeraOrdre^0,f,c
  7170  001100  D001               	goto	u578
  7171  001102                     u560:
  7172  001102  6A4B               	clrf	??_EscriuPrimeraOrdre^0,c
  7173  001104                     u578:
  7174  001104  508C               	movf	140,w,c	;volatile
  7175  001106  184B               	xorwf	??_EscriuPrimeraOrdre^0,w,c
  7176  001108  0BFE               	andlw	-2
  7177  00110A  184B               	xorwf	??_EscriuPrimeraOrdre^0,w,c
  7178  00110C  6E8C               	movwf	140,c	;volatile
  7179                           
  7180                           ;LcTLCD.c: 287:  (LATDbits.LATD6 = 0);
  7181  00110E  9C8C               	bcf	140,6,c	;volatile
  7182  001110  0012               	return		;funcret
  7183  001112                     __end_of_EscriuPrimeraOrdre:
  7184                           	callstack 0
  7185  001112                     PL54:
  7186                           	callstack 24
  7187  001112  9495               	bcf	149,2,c	;volatile
  7188  001114  9295               	bcf	149,1,c	;volatile
  7189  001116  9095               	bcf	149,0,c	;volatile
  7190  001118  988C               	bcf	140,4,c	;volatile
  7191  00111A  9A8C               	bcf	140,5,c	;volatile
  7192  00111C  8C8C               	bsf	140,6,c	;volatile
  7193  00111E  0012               	return	
  7194  001120                     __end_ofPL54:
  7195                           	callstack 0
  7196  001120                     PL78:
  7197                           	callstack 27
  7198  001120  464B               	rlncf	??_EscriuPrimeraOrdre^0,f,c
  7199  001122  464B               	rlncf	??_EscriuPrimeraOrdre^0,f,c
  7200  001124  508C               	movf	140,w,c	;volatile
  7201  001126  184B               	xorwf	??_EscriuPrimeraOrdre^0,w,c
  7202  001128  0012               	return	
  7203  00112A                     __end_ofPL78:
  7204                           	callstack 0
  7205                           
  7206 ;; *************** function _CantaIR *****************
  7207 ;; Defined at:
  7208 ;;		line 229 in file "LcTLCD.c"
  7209 ;; Parameters:    Size  Location     Type
  7210 ;;  IR              1    wreg     unsigned char 
  7211 ;; Auto vars:     Size  Location     Type
  7212 ;;  IR              1    7[COMRAM] unsigned char 
  7213 ;; Return value:  Size  Location     Type
  7214 ;;                  1    wreg      void 
  7215 ;; Registers used:
  7216 ;;		wreg, status,2, status,0, cstack
  7217 ;; Tracked objects:
  7218 ;;		On entry : 0/0
  7219 ;;		On exit  : 0/0
  7220 ;;		Unchanged: 0/0
  7221 ;; Data sizes:     COMRAM   BANK0   BANK1
  7222 ;;      Params:         0       0       0
  7223 ;;      Locals:         1       0       0
  7224 ;;      Temps:          0       0       0
  7225 ;;      Totals:         1       0       0
  7226 ;;Total ram usage:        1 bytes
  7227 ;; Hardware stack levels used: 1
  7228 ;; Hardware stack levels required when called: 3
  7229 ;; This function calls:
  7230 ;;		_CantaPartAlta
  7231 ;;		_CantaPartBaixa
  7232 ;; This function is called by:
  7233 ;;		_LcInit
  7234 ;;		_LcClear
  7235 ;;		_LcCursorOn
  7236 ;;		_LcCursorOff
  7237 ;;		_LcGotoXY
  7238 ;; This function uses a non-reentrant model
  7239 ;;
  7240                           
  7241                           	psect	text51
  7242  0016AC                     __ptext51:
  7243                           	callstack 0
  7244  0016AC                     _CantaIR:
  7245                           	callstack 24
  7246                           
  7247                           ;incstack = 0
  7248                           ;CantaIR@IR stored from wreg
  7249  0016AC  6E4D               	movwf	CantaIR@IR^0,c
  7250                           
  7251                           ;LcTLCD.c: 230:  (TRISDbits.TRISD0 = TRISDbits.TRISD1 = TRISDbits.TRISD2 = TRISDbits.TRI
      +                          SD3 = 0);
  7252  0016AE  9695               	bcf	149,3,c	;volatile
  7253                           
  7254                           ;LcTLCD.c: 231:  (LATDbits.LATD4 = 0);
  7255                           
  7256                           ;LcTLCD.c: 232:  (LATDbits.LATD5 = 0);
  7257                           
  7258                           ;LcTLCD.c: 233:  (LATDbits.LATD6 = 1);
  7259  0016B0  EC89  F008         	call	PL54	;call to abstracted procedure
  7260                           
  7261                           ;LcTLCD.c: 234:  CantaPartAlta(IR);
  7262  0016B4  504D               	movf	CantaIR@IR^0,w,c
  7263  0016B6  EC6E  F009         	call	_CantaPartAlta
  7264                           
  7265                           ;LcTLCD.c: 235:  (LATDbits.LATD6 = 1);
  7266                           
  7267                           ;LcTLCD.c: 236:  (LATDbits.LATD6 = 0);
  7268                           
  7269                           ;LcTLCD.c: 237:  (LATDbits.LATD6 = 0);
  7270                           
  7271                           ;LcTLCD.c: 238:  (LATDbits.LATD6 = 1);
  7272  0016BA  EC6B  F00A         	call	PL72	;call to abstracted procedure
  7273                           
  7274                           ;LcTLCD.c: 239:  CantaPartBaixa(IR);
  7275  0016BE  504D               	movf	CantaIR@IR^0,w,c
  7276  0016C0  EC3B  F009         	call	_CantaPartBaixa
  7277                           
  7278                           ;LcTLCD.c: 240:  (LATDbits.LATD6 = 1);
  7279                           
  7280                           ;LcTLCD.c: 241:  (LATDbits.LATD6 = 0);
  7281                           
  7282                           ;LcTLCD.c: 242:  (TRISDbits.TRISD0 = TRISDbits.TRISD1 = TRISDbits.TRISD2 = TRISDbits.TRI
      +                          SD3 = 1);
  7283  0016C4  EF64  F00A         	goto	PL50	;call to abstracted procedure
  7284  0016C8                     __end_of_CantaIR:
  7285                           	callstack 0
  7286                           
  7287 ;; *************** function _CantaPartBaixa *****************
  7288 ;; Defined at:
  7289 ;;		line 222 in file "LcTLCD.c"
  7290 ;; Parameters:    Size  Location     Type
  7291 ;;  c               1    wreg     unsigned char 
  7292 ;; Auto vars:     Size  Location     Type
  7293 ;;  c               1    6[COMRAM] unsigned char 
  7294 ;; Return value:  Size  Location     Type
  7295 ;;                  1    wreg      void 
  7296 ;; Registers used:
  7297 ;;		wreg, status,2, status,0
  7298 ;; Tracked objects:
  7299 ;;		On entry : 0/0
  7300 ;;		On exit  : 0/0
  7301 ;;		Unchanged: 0/0
  7302 ;; Data sizes:     COMRAM   BANK0   BANK1
  7303 ;;      Params:         0       0       0
  7304 ;;      Locals:         1       0       0
  7305 ;;      Temps:          1       0       0
  7306 ;;      Totals:         2       0       0
  7307 ;;Total ram usage:        2 bytes
  7308 ;; Hardware stack levels used: 1
  7309 ;; Hardware stack levels required when called: 2
  7310 ;; This function calls:
  7311 ;;		Nothing
  7312 ;; This function is called by:
  7313 ;;		_CantaIR
  7314 ;;		_CantaData
  7315 ;; This function uses a non-reentrant model
  7316 ;;
  7317                           
  7318                           	psect	text52
  7319  001276                     __ptext52:
  7320                           	callstack 0
  7321  001276                     _CantaPartBaixa:
  7322                           	callstack 24
  7323                           
  7324                           ;incstack = 0
  7325                           ;CantaPartBaixa@c stored from wreg
  7326  001276  6E4C               	movwf	CantaPartBaixa@c^0,c
  7327                           
  7328                           ;LcTLCD.c: 223:   (LATDbits.LATD3 = (c & 0x08 ? 1 : 0));
  7329  001278  A64C               	btfss	CantaPartBaixa@c^0,3,c
  7330  00127A  D003               	goto	u2300
  7331  00127C  6A4B               	clrf	??_CantaPartBaixa^0,c
  7332  00127E  2A4B               	incf	??_CantaPartBaixa^0,f,c
  7333  001280  D001               	goto	u2318
  7334  001282                     u2300:
  7335  001282  6A4B               	clrf	??_CantaPartBaixa^0,c
  7336  001284                     u2318:
  7337  001284  464B               	rlncf	??_CantaPartBaixa^0,f,c
  7338  001286  D825               	call	PL74	;call to abstracted procedure
  7339  001288  0BF7               	andlw	-9
  7340  00128A  184B               	xorwf	??_CantaPartBaixa^0,w,c
  7341  00128C  6E8C               	movwf	140,c	;volatile
  7342                           
  7343                           ;LcTLCD.c: 224:   (LATDbits.LATD2 = (c & 0x04 ? 1 : 0));
  7344  00128E  A44C               	btfss	CantaPartBaixa@c^0,2,c
  7345  001290  D003               	goto	u2320
  7346  001292  6A4B               	clrf	??_CantaPartBaixa^0,c
  7347  001294  2A4B               	incf	??_CantaPartBaixa^0,f,c
  7348  001296  D001               	goto	u2338
  7349  001298                     u2320:
  7350  001298  6A4B               	clrf	??_CantaPartBaixa^0,c
  7351  00129A                     u2338:
  7352  00129A  D81B               	call	PL74	;call to abstracted procedure
  7353  00129C  0BFB               	andlw	-5
  7354  00129E  184B               	xorwf	??_CantaPartBaixa^0,w,c
  7355  0012A0  6E8C               	movwf	140,c	;volatile
  7356                           
  7357                           ;LcTLCD.c: 225:   (LATDbits.LATD1 = (c & 0x02 ? 1 : 0));
  7358  0012A2  A24C               	btfss	CantaPartBaixa@c^0,1,c
  7359  0012A4  D003               	goto	u2340
  7360  0012A6  6A4B               	clrf	??_CantaPartBaixa^0,c
  7361  0012A8  2A4B               	incf	??_CantaPartBaixa^0,f,c
  7362  0012AA  D001               	goto	u2358
  7363  0012AC                     u2340:
  7364  0012AC  6A4B               	clrf	??_CantaPartBaixa^0,c
  7365  0012AE                     u2358:
  7366  0012AE  464B               	rlncf	??_CantaPartBaixa^0,f,c
  7367  0012B0  508C               	movf	140,w,c	;volatile
  7368  0012B2  184B               	xorwf	??_CantaPartBaixa^0,w,c
  7369  0012B4  0BFD               	andlw	-3
  7370  0012B6  184B               	xorwf	??_CantaPartBaixa^0,w,c
  7371  0012B8  6E8C               	movwf	140,c	;volatile
  7372                           
  7373                           ;LcTLCD.c: 226:   (LATDbits.LATD0 = (c & 0x01 ? 1 : 0));
  7374  0012BA  A04C               	btfss	CantaPartBaixa@c^0,0,c
  7375  0012BC  D003               	goto	u2360
  7376  0012BE  6A4B               	clrf	??_CantaPartBaixa^0,c
  7377  0012C0  2A4B               	incf	??_CantaPartBaixa^0,f,c
  7378  0012C2  D001               	goto	u2378
  7379  0012C4                     u2360:
  7380  0012C4  6A4B               	clrf	??_CantaPartBaixa^0,c
  7381  0012C6                     u2378:
  7382  0012C6  508C               	movf	140,w,c	;volatile
  7383  0012C8  184B               	xorwf	??_CantaPartBaixa^0,w,c
  7384  0012CA  0BFE               	andlw	-2
  7385  0012CC  184B               	xorwf	??_CantaPartBaixa^0,w,c
  7386  0012CE  6E8C               	movwf	140,c	;volatile
  7387  0012D0  0012               	return		;funcret
  7388  0012D2                     __end_of_CantaPartBaixa:
  7389                           	callstack 0
  7390  0012D2                     PL74:
  7391                           	callstack 24
  7392  0012D2  464B               	rlncf	??_CantaPartBaixa^0,f,c
  7393  0012D4  464B               	rlncf	??_CantaPartBaixa^0,f,c
  7394  0012D6  508C               	movf	140,w,c	;volatile
  7395  0012D8  184B               	xorwf	??_CantaPartBaixa^0,w,c
  7396  0012DA  0012               	return	
  7397  0012DC                     __end_ofPL74:
  7398                           	callstack 0
  7399                           
  7400 ;; *************** function _CantaPartAlta *****************
  7401 ;; Defined at:
  7402 ;;		line 215 in file "LcTLCD.c"
  7403 ;; Parameters:    Size  Location     Type
  7404 ;;  c               1    wreg     unsigned char 
  7405 ;; Auto vars:     Size  Location     Type
  7406 ;;  c               1    6[COMRAM] unsigned char 
  7407 ;; Return value:  Size  Location     Type
  7408 ;;                  1    wreg      void 
  7409 ;; Registers used:
  7410 ;;		wreg, status,2, status,0
  7411 ;; Tracked objects:
  7412 ;;		On entry : 0/0
  7413 ;;		On exit  : 0/0
  7414 ;;		Unchanged: 0/0
  7415 ;; Data sizes:     COMRAM   BANK0   BANK1
  7416 ;;      Params:         0       0       0
  7417 ;;      Locals:         1       0       0
  7418 ;;      Temps:          1       0       0
  7419 ;;      Totals:         2       0       0
  7420 ;;Total ram usage:        2 bytes
  7421 ;; Hardware stack levels used: 1
  7422 ;; Hardware stack levels required when called: 2
  7423 ;; This function calls:
  7424 ;;		Nothing
  7425 ;; This function is called by:
  7426 ;;		_CantaIR
  7427 ;;		_CantaData
  7428 ;; This function uses a non-reentrant model
  7429 ;;
  7430                           
  7431                           	psect	text53
  7432  0012DC                     __ptext53:
  7433                           	callstack 0
  7434  0012DC                     _CantaPartAlta:
  7435                           	callstack 24
  7436                           
  7437                           ;incstack = 0
  7438                           ;CantaPartAlta@c stored from wreg
  7439  0012DC  6E4C               	movwf	CantaPartAlta@c^0,c
  7440                           
  7441                           ;LcTLCD.c: 216:   (LATDbits.LATD3 = (c & 0x80 ? 1 : 0));
  7442  0012DE  AE4C               	btfss	CantaPartAlta@c^0,7,c
  7443  0012E0  D003               	goto	u2220
  7444  0012E2  6A4B               	clrf	??_CantaPartAlta^0,c
  7445  0012E4  2A4B               	incf	??_CantaPartAlta^0,f,c
  7446  0012E6  D001               	goto	u2238
  7447  0012E8                     u2220:
  7448  0012E8  6A4B               	clrf	??_CantaPartAlta^0,c
  7449  0012EA                     u2238:
  7450  0012EA  464B               	rlncf	??_CantaPartAlta^0,f,c
  7451  0012EC  D825               	call	PL82	;call to abstracted procedure
  7452  0012EE  0BF7               	andlw	-9
  7453  0012F0  184B               	xorwf	??_CantaPartAlta^0,w,c
  7454  0012F2  6E8C               	movwf	140,c	;volatile
  7455                           
  7456                           ;LcTLCD.c: 217:   (LATDbits.LATD2 = (c & 0x40 ? 1 : 0));
  7457  0012F4  AC4C               	btfss	CantaPartAlta@c^0,6,c
  7458  0012F6  D003               	goto	u2240
  7459  0012F8  6A4B               	clrf	??_CantaPartAlta^0,c
  7460  0012FA  2A4B               	incf	??_CantaPartAlta^0,f,c
  7461  0012FC  D001               	goto	u2258
  7462  0012FE                     u2240:
  7463  0012FE  6A4B               	clrf	??_CantaPartAlta^0,c
  7464  001300                     u2258:
  7465  001300  D81B               	call	PL82	;call to abstracted procedure
  7466  001302  0BFB               	andlw	-5
  7467  001304  184B               	xorwf	??_CantaPartAlta^0,w,c
  7468  001306  6E8C               	movwf	140,c	;volatile
  7469                           
  7470                           ;LcTLCD.c: 218:   (LATDbits.LATD1 = (c & 0x20 ? 1 : 0));
  7471  001308  AA4C               	btfss	CantaPartAlta@c^0,5,c
  7472  00130A  D003               	goto	u2260
  7473  00130C  6A4B               	clrf	??_CantaPartAlta^0,c
  7474  00130E  2A4B               	incf	??_CantaPartAlta^0,f,c
  7475  001310  D001               	goto	u2278
  7476  001312                     u2260:
  7477  001312  6A4B               	clrf	??_CantaPartAlta^0,c
  7478  001314                     u2278:
  7479  001314  464B               	rlncf	??_CantaPartAlta^0,f,c
  7480  001316  508C               	movf	140,w,c	;volatile
  7481  001318  184B               	xorwf	??_CantaPartAlta^0,w,c
  7482  00131A  0BFD               	andlw	-3
  7483  00131C  184B               	xorwf	??_CantaPartAlta^0,w,c
  7484  00131E  6E8C               	movwf	140,c	;volatile
  7485                           
  7486                           ;LcTLCD.c: 219:   (LATDbits.LATD0 = (c & 0x10 ? 1 : 0));
  7487  001320  A84C               	btfss	CantaPartAlta@c^0,4,c
  7488  001322  D003               	goto	u2280
  7489  001324  6A4B               	clrf	??_CantaPartAlta^0,c
  7490  001326  2A4B               	incf	??_CantaPartAlta^0,f,c
  7491  001328  D001               	goto	u2298
  7492  00132A                     u2280:
  7493  00132A  6A4B               	clrf	??_CantaPartAlta^0,c
  7494  00132C                     u2298:
  7495  00132C  508C               	movf	140,w,c	;volatile
  7496  00132E  184B               	xorwf	??_CantaPartAlta^0,w,c
  7497  001330  0BFE               	andlw	-2
  7498  001332  184B               	xorwf	??_CantaPartAlta^0,w,c
  7499  001334  6E8C               	movwf	140,c	;volatile
  7500  001336  0012               	return		;funcret
  7501  001338                     __end_of_CantaPartAlta:
  7502                           	callstack 0
  7503  001338                     PL82:
  7504                           	callstack 24
  7505  001338  464B               	rlncf	??_CantaPartAlta^0,f,c
  7506  00133A  464B               	rlncf	??_CantaPartAlta^0,f,c
  7507  00133C  508C               	movf	140,w,c	;volatile
  7508  00133E  184B               	xorwf	??_CantaPartAlta^0,w,c
  7509  001340  0012               	return	
  7510  001342                     __end_ofPL82:
  7511                           	callstack 0
  7512                           
  7513 ;; *************** function _KeypadMotor *****************
  7514 ;; Defined at:
  7515 ;;		line 46 in file "keypad.c"
  7516 ;; Parameters:    Size  Location     Type
  7517 ;;		None
  7518 ;; Auto vars:     Size  Location     Type
  7519 ;;		None
  7520 ;; Return value:  Size  Location     Type
  7521 ;;                  1    wreg      void 
  7522 ;; Registers used:
  7523 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7524 ;; Tracked objects:
  7525 ;;		On entry : 0/0
  7526 ;;		On exit  : 0/0
  7527 ;;		Unchanged: 0/0
  7528 ;; Data sizes:     COMRAM   BANK0   BANK1
  7529 ;;      Params:         0       0       0
  7530 ;;      Locals:         0       0       0
  7531 ;;      Temps:          2       0       0
  7532 ;;      Totals:         2       0       0
  7533 ;;Total ram usage:        2 bytes
  7534 ;; Hardware stack levels used: 1
  7535 ;; Hardware stack levels required when called: 3
  7536 ;; This function calls:
  7537 ;;		_TiGetTics
  7538 ;;		_TiResetTics
  7539 ;; This function is called by:
  7540 ;;		_main
  7541 ;; This function uses a non-reentrant model
  7542 ;;
  7543                           
  7544                           	psect	text54
  7545  000C48                     __ptext54:
  7546                           	callstack 0
  7547  000C48                     _KeypadMotor:
  7548                           	callstack 27
  7549                           
  7550                           ;keypad.c: 48:     switch (state){
  7551                           
  7552                           ;incstack = 0
  7553  000C48  D070               	goto	l4034
  7554  000C4A                     l138:
  7555                           
  7556                           ;keypad.c: 51:             if (!!(PORTBbits.RB0 && PORTBbits.RB1 && PORTBbits.RB2)){
  7557  000C4A  B081               	btfsc	129,0,c	;volatile
  7558  000C4C  A281               	btfss	129,1,c	;volatile
  7559  000C4E  D00A               	goto	l3962
  7560  000C50  A481               	btfss	129,2,c	;volatile
  7561  000C52  D008               	goto	l3962
  7562                           
  7563                           ;keypad.c: 52:                 LATBbits.LATB3=0;
  7564  000C54  968A               	bcf	138,3,c	;volatile
  7565                           
  7566                           ;keypad.c: 53:                 LATBbits.LATB4=1;
  7567  000C56  888A               	bsf	138,4,c	;volatile
  7568                           
  7569                           ;keypad.c: 54:                 LATBbits.LATB5=1;
  7570  000C58  8A8A               	bsf	138,5,c	;volatile
  7571                           
  7572                           ;keypad.c: 55:                 LATBbits.LATB6=1;
  7573  000C5A  8C8A               	bsf	138,6,c	;volatile
  7574                           
  7575                           ;keypad.c: 56:                 state=1;
  7576  000C5C  0E01               	movlw	1
  7577  000C5E  6E3C               	movwf	_state^0,c
  7578                           
  7579                           ;keypad.c: 57:                 row=0;
  7580  000C60  6A44               	clrf	_row^0,c
  7581                           
  7582                           ;keypad.c: 58:             }else{
  7583  000C62  0012               	return	
  7584  000C64                     l3962:
  7585                           
  7586                           ;keypad.c: 59:                 state=4;
  7587  000C64  0E04               	movlw	4
  7588  000C66  6E3C               	movwf	_state^0,c
  7589  000C68  0C04               	retlw	4
  7590  000C6A                     l142:
  7591                           
  7592                           ;keypad.c: 63:            if (!!(PORTBbits.RB0 && PORTBbits.RB1 && PORTBbits.RB2)){
  7593  000C6A  B081               	btfsc	129,0,c	;volatile
  7594  000C6C  A281               	btfss	129,1,c	;volatile
  7595  000C6E  D7FA               	goto	l3962
  7596  000C70  A481               	btfss	129,2,c	;volatile
  7597  000C72  D7F8               	goto	l3962
  7598                           
  7599                           ;keypad.c: 64:                 LATBbits.LATB3=1;
  7600  000C74  868A               	bsf	138,3,c	;volatile
  7601                           
  7602                           ;keypad.c: 65:                 LATBbits.LATB4=0;
  7603  000C76  988A               	bcf	138,4,c	;volatile
  7604                           
  7605                           ;keypad.c: 66:                 LATBbits.LATB5=1;
  7606  000C78  8A8A               	bsf	138,5,c	;volatile
  7607                           
  7608                           ;keypad.c: 67:                 LATBbits.LATB6=1;
  7609  000C7A  8C8A               	bsf	138,6,c	;volatile
  7610                           
  7611                           ;keypad.c: 68:                 state=2;
  7612  000C7C  0E02               	movlw	2
  7613  000C7E  6E3C               	movwf	_state^0,c
  7614                           
  7615                           ;keypad.c: 69:                 row=1;
  7616  000C80  0E01               	movlw	1
  7617  000C82  6E44               	movwf	_row^0,c
  7618                           
  7619                           ;keypad.c: 71:             }else{
  7620  000C84  0C01               	retlw	1
  7621  000C86                     l145:
  7622                           
  7623                           ;keypad.c: 76:             if (!!(PORTBbits.RB0 && PORTBbits.RB1 && PORTBbits.RB2)){
  7624  000C86  B081               	btfsc	129,0,c	;volatile
  7625  000C88  A281               	btfss	129,1,c	;volatile
  7626  000C8A  D7EC               	goto	l3962
  7627  000C8C  A481               	btfss	129,2,c	;volatile
  7628  000C8E  D7EA               	goto	l3962
  7629                           
  7630                           ;keypad.c: 77:                 LATBbits.LATB3=1;
  7631  000C90  868A               	bsf	138,3,c	;volatile
  7632                           
  7633                           ;keypad.c: 78:                 LATBbits.LATB4=1;
  7634  000C92  888A               	bsf	138,4,c	;volatile
  7635                           
  7636                           ;keypad.c: 79:                 LATBbits.LATB5=0;
  7637  000C94  9A8A               	bcf	138,5,c	;volatile
  7638                           
  7639                           ;keypad.c: 80:                 LATBbits.LATB6=1;
  7640  000C96  8C8A               	bsf	138,6,c	;volatile
  7641                           
  7642                           ;keypad.c: 81:                 state=3;
  7643  000C98  0E03               	movlw	3
  7644  000C9A  6E3C               	movwf	_state^0,c
  7645                           
  7646                           ;keypad.c: 82:                 row=2;
  7647  000C9C  0E02               	movlw	2
  7648  000C9E  6E44               	movwf	_row^0,c
  7649                           
  7650                           ;keypad.c: 83:             }else{
  7651  000CA0  0C02               	retlw	2
  7652  000CA2                     l148:
  7653                           
  7654                           ;keypad.c: 88:             if (!!(PORTBbits.RB0 && PORTBbits.RB1 && PORTBbits.RB2)){
  7655  000CA2  B081               	btfsc	129,0,c	;volatile
  7656  000CA4  A281               	btfss	129,1,c	;volatile
  7657  000CA6  D7DE               	goto	l3962
  7658  000CA8  A481               	btfss	129,2,c	;volatile
  7659  000CAA  D7DC               	goto	l3962
  7660                           
  7661                           ;keypad.c: 89:                 LATBbits.LATB3=1;
  7662  000CAC  868A               	bsf	138,3,c	;volatile
  7663                           
  7664                           ;keypad.c: 90:                 LATBbits.LATB4=1;
  7665  000CAE  888A               	bsf	138,4,c	;volatile
  7666                           
  7667                           ;keypad.c: 91:                 LATBbits.LATB5=1;
  7668  000CB0  8A8A               	bsf	138,5,c	;volatile
  7669                           
  7670                           ;keypad.c: 92:                 LATBbits.LATB6=0;
  7671  000CB2  9C8A               	bcf	138,6,c	;volatile
  7672                           
  7673                           ;keypad.c: 93:                 row=3;
  7674  000CB4  0E03               	movlw	3
  7675  000CB6  6E44               	movwf	_row^0,c
  7676  000CB8                     l3992:
  7677                           
  7678                           ;keypad.c: 94:                 state=0;
  7679  000CB8  6A3C               	clrf	_state^0,c
  7680                           
  7681                           ;keypad.c: 95:             }else{
  7682  000CBA  0012               	return	
  7683  000CBC                     l3996:
  7684                           
  7685                           ;keypad.c: 100:             state=5;
  7686  000CBC  0E05               	movlw	5
  7687  000CBE  6E3C               	movwf	_state^0,c
  7688                           
  7689                           ;keypad.c: 101:             TiResetTics(timerBounces);
  7690  000CC0  5043               	movf	_timerBounces^0,w,c
  7691  000CC2  EF64  F00B         	goto	_TiResetTics
  7692  000CC6                     l4000:
  7693                           
  7694                           ;keypad.c: 104:             if (TiGetTics(timerBounces) >= 25){
  7695  000CC6  5043               	movf	_timerBounces^0,w,c
  7696  000CC8  ECDF  F00A         	call	_TiGetTics
  7697  000CCC  BE4C               	btfsc	(?_TiGetTics+1)^0,7,c
  7698  000CCE  0012               	return	
  7699  000CD0  504C               	movf	(?_TiGetTics+1)^0,w,c
  7700  000CD2  E104               	bnz	u3210
  7701  000CD4  0E19               	movlw	25
  7702  000CD6  5C4B               	subwf	?_TiGetTics^0,w,c
  7703  000CD8  A0D8               	btfss	status,0,c
  7704  000CDA  0012               	return	
  7705  000CDC                     u3210:
  7706                           
  7707                           ;keypad.c: 105:                 if (!!(PORTBbits.RB0 && PORTBbits.RB1 && PORTBbits.RB2))
      +                          {
  7708  000CDC  B081               	btfsc	129,0,c	;volatile
  7709  000CDE  A281               	btfss	129,1,c	;volatile
  7710  000CE0  D002               	goto	l4010
  7711  000CE2  B481               	btfsc	129,2,c	;volatile
  7712  000CE4  D7E9               	goto	l3992
  7713  000CE6                     l4010:
  7714                           
  7715                           ;keypad.c: 108:                     pressed = 1;
  7716  000CE6  0E01               	movlw	1
  7717  000CE8  6E3F               	movwf	_pressed^0,c
  7718                           
  7719                           ;keypad.c: 109:                     state = 6;
  7720  000CEA  D036               	goto	PL84	;call to abstracted procedure
  7721  000CEC                     l156:
  7722                           
  7723                           ;keypad.c: 114:             if (!!(PORTBbits.RB0 && PORTBbits.RB1 && PORTBbits.RB2)){
  7724  000CEC  B081               	btfsc	129,0,c	;volatile
  7725  000CEE  A281               	btfss	129,1,c	;volatile
  7726  000CF0  0012               	return	
  7727  000CF2  A481               	btfss	129,2,c	;volatile
  7728  000CF4  0012               	return	
  7729                           
  7730                           ;keypad.c: 115:                 TiResetTics(timerBounces);
  7731  000CF6  5043               	movf	_timerBounces^0,w,c
  7732  000CF8  EC64  F00B         	call	_TiResetTics
  7733                           
  7734                           ;keypad.c: 116:                 state = 7;
  7735  000CFC  0E07               	movlw	7
  7736  000CFE  6E3C               	movwf	_state^0,c
  7737  000D00  0C07               	retlw	7
  7738  000D02                     l4020:
  7739                           
  7740                           ;keypad.c: 120:             if (TiGetTics(timerBounces) >= 25){
  7741  000D02  5043               	movf	_timerBounces^0,w,c
  7742  000D04  ECDF  F00A         	call	_TiGetTics
  7743  000D08  BE4C               	btfsc	(?_TiGetTics+1)^0,7,c
  7744  000D0A  0012               	return	
  7745  000D0C  504C               	movf	(?_TiGetTics+1)^0,w,c
  7746  000D0E  E104               	bnz	u3280
  7747  000D10  0E19               	movlw	25
  7748  000D12  5C4B               	subwf	?_TiGetTics^0,w,c
  7749  000D14  A0D8               	btfss	status,0,c
  7750  000D16  0012               	return	
  7751  000D18                     u3280:
  7752                           
  7753                           ;keypad.c: 121:                 if (!!(PORTBbits.RB0 && PORTBbits.RB1 && PORTBbits.RB2))
      +                          {
  7754  000D18  B081               	btfsc	129,0,c	;volatile
  7755  000D1A  A281               	btfss	129,1,c	;volatile
  7756  000D1C  D01D               	goto	PL84
  7757  000D1E  A481               	btfss	129,2,c	;volatile
  7758  000D20  D01B               	goto	PL84
  7759                           
  7760                           ;keypad.c: 122:                     pressed = 0;
  7761  000D22  6A3F               	clrf	_pressed^0,c
  7762                           
  7763                           ;keypad.c: 123:                     state = 0;
  7764  000D24  6A3C               	clrf	_state^0,c
  7765                           
  7766                           ;keypad.c: 124:                 } else {
  7767  000D26  0012               	return	
  7768  000D28                     l4030:
  7769                           
  7770                           ;keypad.c: 125:                     state = 6;
  7771  000D28  D017               	goto	PL84	;call to abstracted procedure
  7772  000D2A                     l4034:
  7773  000D2A  503C               	movf	_state^0,w,c
  7774  000D2C  6E52               	movwf	??_KeypadMotor^0,c
  7775  000D2E  6A53               	clrf	(??_KeypadMotor+1)^0,c
  7776                           
  7777                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7778                           ; Switch size 1, requested type "space"
  7779                           ; Number of cases is 1, Range of values is 0 to 0
  7780                           ; switch strategies available:
  7781                           ; Name         Instructions Cycles
  7782                           ; simple_byte            4     3 (average)
  7783                           ;	Chosen strategy is simple_byte
  7784  000D30  5053               	movf	(??_KeypadMotor+1)^0,w,c
  7785  000D32  A4D8               	btfss	status,2,c
  7786  000D34  0012               	return	
  7787                           
  7788                           ; Switch size 1, requested type "space"
  7789                           ; Number of cases is 8, Range of values is 0 to 7
  7790                           ; switch strategies available:
  7791                           ; Name         Instructions Cycles
  7792                           ; simple_byte           25    13 (average)
  7793                           ;	Chosen strategy is simple_byte
  7794  000D36  5052               	movf	??_KeypadMotor^0,w,c
  7795  000D38  E088               	bz	l138
  7796  000D3A  0A01               	xorlw	1	; case 1
  7797  000D3C  E096               	bz	l142
  7798  000D3E  0A03               	xorlw	3	; case 2
  7799  000D40  E0A2               	bz	l145
  7800  000D42  0A01               	xorlw	1	; case 3
  7801  000D44  E0AE               	bz	l148
  7802  000D46  0A07               	xorlw	7	; case 4
  7803  000D48  E0B9               	bz	l3996
  7804  000D4A  0A01               	xorlw	1	; case 5
  7805  000D4C  E0BC               	bz	l4000
  7806  000D4E  0A03               	xorlw	3	; case 6
  7807  000D50  E0CD               	bz	l156
  7808  000D52  0A01               	xorlw	1	; case 7
  7809  000D54  E0D6               	bz	l4020
  7810  000D56  0012               	return		;funcret
  7811  000D58                     __end_of_KeypadMotor:
  7812                           	callstack 0
  7813  000D58                     PL84:
  7814                           	callstack 27
  7815  000D58  0E06               	movlw	6
  7816  000D5A  6E3C               	movwf	_state^0,c
  7817  000D5C  0C06               	retlw	6
  7818  000D5E                     __end_ofPL84:
  7819                           	callstack 0
  7820                           
  7821 ;; *************** function _TiResetTics *****************
  7822 ;; Defined at:
  7823 ;;		line 59 in file "TTimer.c"
  7824 ;; Parameters:    Size  Location     Type
  7825 ;;  Handle          1    wreg     unsigned char 
  7826 ;; Auto vars:     Size  Location     Type
  7827 ;;  Handle          1    5[COMRAM] unsigned char 
  7828 ;; Return value:  Size  Location     Type
  7829 ;;                  1    wreg      void 
  7830 ;; Registers used:
  7831 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  7832 ;; Tracked objects:
  7833 ;;		On entry : 0/0
  7834 ;;		On exit  : 0/0
  7835 ;;		Unchanged: 0/0
  7836 ;; Data sizes:     COMRAM   BANK0   BANK1
  7837 ;;      Params:         0       0       0
  7838 ;;      Locals:         1       0       0
  7839 ;;      Temps:          0       0       0
  7840 ;;      Totals:         1       0       0
  7841 ;;Total ram usage:        1 bytes
  7842 ;; Hardware stack levels used: 1
  7843 ;; Hardware stack levels required when called: 2
  7844 ;; This function calls:
  7845 ;;		Nothing
  7846 ;; This function is called by:
  7847 ;;		_KeypadMotor
  7848 ;;		_SMSMotor
  7849 ;;		_KeSetMode
  7850 ;;		_Espera
  7851 ;;		_WaitForBusy
  7852 ;;		_menuMotor
  7853 ;;		_timeMotor
  7854 ;;		_startTimer
  7855 ;; This function uses a non-reentrant model
  7856 ;;
  7857                           
  7858                           	psect	text55
  7859  0016C8                     __ptext55:
  7860                           	callstack 0
  7861  0016C8                     _TiResetTics:
  7862                           	callstack 27
  7863                           
  7864                           ;incstack = 0
  7865                           ;TiResetTics@Handle stored from wreg
  7866  0016C8  6E4B               	movwf	TiResetTics@Handle^0,c
  7867                           
  7868                           ;TTimer.c: 63:     s_Timers[Handle].h_initialTics=h_Tics;
  7869  0016CA  504B               	movf	TiResetTics@Handle^0,w,c
  7870  0016CC  D805               	call	PL48	;call to abstracted procedure
  7871  0016CE  C021  FFDE         	movff	_h_Tics,postinc2
  7872  0016D2  C022  FFDD         	movff	_h_Tics+1,postdec2
  7873  0016D6  0012               	return		;funcret
  7874  0016D8                     __end_of_TiResetTics:
  7875                           	callstack 0
  7876  0016D8                     PL48:
  7877                           	callstack 23
  7878  0016D8  0D03               	mullw	3
  7879  0016DA  50F3               	movf	243,w,c
  7880  0016DC  0F80               	addlw	low _s_Timers
  7881  0016DE  6ED9               	movwf	fsr2l,c
  7882  0016E0  6ADA               	clrf	fsr2h,c
  7883  0016E2  0012               	return	
  7884  0016E4                     __end_ofPL48:
  7885                           	callstack 0
  7886                           
  7887 ;; *************** function _TiGetTics *****************
  7888 ;; Defined at:
  7889 ;;		line 65 in file "TTimer.c"
  7890 ;; Parameters:    Size  Location     Type
  7891 ;;  Handle          1    wreg     unsigned char 
  7892 ;; Auto vars:     Size  Location     Type
  7893 ;;  Handle          1    9[COMRAM] unsigned char 
  7894 ;;  actual          2   10[COMRAM] volatile unsigned int 
  7895 ;; Return value:  Size  Location     Type
  7896 ;;                  2    5[COMRAM] int 
  7897 ;; Registers used:
  7898 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  7899 ;; Tracked objects:
  7900 ;;		On entry : 0/0
  7901 ;;		On exit  : 0/0
  7902 ;;		Unchanged: 0/0
  7903 ;; Data sizes:     COMRAM   BANK0   BANK1
  7904 ;;      Params:         2       0       0
  7905 ;;      Locals:         3       0       0
  7906 ;;      Temps:          2       0       0
  7907 ;;      Totals:         7       0       0
  7908 ;;Total ram usage:        7 bytes
  7909 ;; Hardware stack levels used: 1
  7910 ;; Hardware stack levels required when called: 2
  7911 ;; This function calls:
  7912 ;;		Nothing
  7913 ;; This function is called by:
  7914 ;;		_KeypadMotor
  7915 ;;		_SMSMotor
  7916 ;;		_Espera
  7917 ;;		_WaitForBusy
  7918 ;;		_menuMotor
  7919 ;;		_timeMotor
  7920 ;; This function uses a non-reentrant model
  7921 ;;
  7922                           
  7923                           	psect	text56
  7924  0015BE                     __ptext56:
  7925                           	callstack 0
  7926  0015BE                     _TiGetTics:
  7927                           	callstack 27
  7928                           
  7929                           ;incstack = 0
  7930                           ;TiGetTics@Handle stored from wreg
  7931  0015BE  6E4F               	movwf	TiGetTics@Handle^0,c
  7932                           
  7933                           ;TTimer.c: 69:     volatile unsigned int actual;;TTimer.c: 70:     actual=h_Tics;
  7934  0015C0  C021  F050         	movff	_h_Tics,TiGetTics@actual	;volatile
  7935  0015C4  C022  F051         	movff	_h_Tics+1,TiGetTics@actual+1	;volatile
  7936                           
  7937                           ;TTimer.c: 71:     return (actual-(s_Timers[Handle].h_initialTics));
  7938  0015C8  504F               	movf	TiGetTics@Handle^0,w,c
  7939  0015CA  EC6C  F00B         	call	PL48	;call to abstracted procedure
  7940  0015CE  CFDE F04D          	movff	postinc2,??_TiGetTics
  7941  0015D2  CFDD F04E          	movff	postdec2,??_TiGetTics+1
  7942  0015D6  504D               	movf	??_TiGetTics^0,w,c
  7943  0015D8  5C50               	subwf	TiGetTics@actual^0,w,c	;volatile
  7944  0015DA  6E4B               	movwf	?_TiGetTics^0,c
  7945  0015DC  504E               	movf	(??_TiGetTics+1)^0,w,c
  7946  0015DE  5851               	subwfb	(TiGetTics@actual+1)^0,w,c	;volatile
  7947  0015E0  6E4C               	movwf	(?_TiGetTics+1)^0,c
  7948  0015E2  0012               	return		;funcret
  7949  0015E4                     __end_of_TiGetTics:
  7950                           	callstack 0
  7951                           
  7952 ;; *************** function _RSI_High *****************
  7953 ;; Defined at:
  7954 ;;		line 32 in file "main.c"
  7955 ;; Parameters:    Size  Location     Type
  7956 ;;		None
  7957 ;; Auto vars:     Size  Location     Type
  7958 ;;		None
  7959 ;; Return value:  Size  Location     Type
  7960 ;;                  1    wreg      void 
  7961 ;; Registers used:
  7962 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7963 ;; Tracked objects:
  7964 ;;		On entry : 0/0
  7965 ;;		On exit  : 0/0
  7966 ;;		Unchanged: 0/0
  7967 ;; Data sizes:     COMRAM   BANK0   BANK1
  7968 ;;      Params:         0       0       0
  7969 ;;      Locals:         0       0       0
  7970 ;;      Temps:          4       0       0
  7971 ;;      Totals:         4       0       0
  7972 ;;Total ram usage:        4 bytes
  7973 ;; Hardware stack levels used: 1
  7974 ;; Hardware stack levels required when called: 1
  7975 ;; This function calls:
  7976 ;;		__TiRSITimer
  7977 ;; This function is called by:
  7978 ;;		Interrupt level 2
  7979 ;; This function uses a non-reentrant model
  7980 ;;
  7981                           
  7982                           	psect	intcode
  7983  000008                     __pintcode:
  7984                           	callstack 0
  7985  000008                     _RSI_High:
  7986                           	callstack 23
  7987                           
  7988                           ;incstack = 0
  7989  000008  8272               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  7990  00000A  CFD9 F047          	movff	fsr2l,??_RSI_High
  7991  00000E  CFDA F048          	movff	fsr2h,??_RSI_High+1
  7992  000012  CFF3 F049          	movff	prodl,??_RSI_High+2
  7993  000016  CFF4 F04A          	movff	prodh,??_RSI_High+3
  7994  00001A  ECF3  F009         	call	__TiRSITimer	;wreg free
  7995  00001E  C04A  FFF4         	movff	??_RSI_High+3,prodh
  7996  000022  C049  FFF3         	movff	??_RSI_High+2,prodl
  7997  000026  C048  FFDA         	movff	??_RSI_High+1,fsr2h
  7998  00002A  C047  FFD9         	movff	??_RSI_High,fsr2l
  7999  00002E  9272               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  8000  000030  0011               	retfie		f
  8001  000032                     __end_of_RSI_High:
  8002                           	callstack 0
  8003                           
  8004 ;; *************** function __TiRSITimer *****************
  8005 ;; Defined at:
  8006 ;;		line 37 in file "TTimer.c"
  8007 ;; Parameters:    Size  Location     Type
  8008 ;;		None
  8009 ;; Auto vars:     Size  Location     Type
  8010 ;;		None
  8011 ;; Return value:  Size  Location     Type
  8012 ;;                  1    wreg      void 
  8013 ;; Registers used:
  8014 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  8015 ;; Tracked objects:
  8016 ;;		On entry : 0/0
  8017 ;;		On exit  : 0/0
  8018 ;;		Unchanged: 0/0
  8019 ;; Data sizes:     COMRAM   BANK0   BANK1
  8020 ;;      Params:         0       0       0
  8021 ;;      Locals:         0       0       0
  8022 ;;      Temps:          1       0       0
  8023 ;;      Totals:         1       0       0
  8024 ;;Total ram usage:        1 bytes
  8025 ;; Hardware stack levels used: 1
  8026 ;; This function calls:
  8027 ;;		Nothing
  8028 ;; This function is called by:
  8029 ;;		_RSI_High
  8030 ;; This function uses a non-reentrant model
  8031 ;;
  8032                           
  8033                           	psect	text58
  8034  0013E6                     __ptext58:
  8035                           	callstack 0
  8036  0013E6                     __TiRSITimer:
  8037                           	callstack 23
  8038                           
  8039                           ;TTimer.c: 43:     TMR0H = 0x20;
  8040                           
  8041                           ;incstack = 0
  8042  0013E6  0E20               	movlw	32
  8043  0013E8  6ED7               	movwf	215,c	;volatile
  8044                           
  8045                           ;TTimer.c: 44:     TMR0L = 0x8A;
  8046  0013EA  0E8A               	movlw	138
  8047  0013EC  6ED6               	movwf	214,c	;volatile
  8048                           
  8049                           ;TTimer.c: 45:     INTCONbits.TMR0IF = 0;
  8050  0013EE  94F2               	bcf	242,2,c	;volatile
  8051                           
  8052                           ;TTimer.c: 46:     h_Tics++;
  8053  0013F0  4A21               	infsnz	_h_Tics^0,f,c
  8054  0013F2  2A22               	incf	(_h_Tics+1)^0,f,c
  8055                           
  8056                           ;TTimer.c: 48:     if (h_Tics>=30000) {
  8057  0013F4  0E30               	movlw	48
  8058  0013F6  5C21               	subwf	_h_Tics^0,w,c
  8059  0013F8  0E75               	movlw	117
  8060  0013FA  5822               	subwfb	(_h_Tics+1)^0,w,c
  8061  0013FC  A0D8               	btfss	status,0,c
  8062  0013FE  0012               	return	
  8063                           
  8064                           ;TTimer.c: 50:         for (counter=0;counter<25;counter++){
  8065  001400  6A45               	clrf	_counter^0,c
  8066  001402                     i2l3804:
  8067  001402  0E18               	movlw	24
  8068  001404  6445               	cpfsgt	_counter^0,c
  8069  001406  D001               	goto	i2l3808
  8070  001408  D00D               	goto	i2l71
  8071  00140A                     i2l3808:
  8072                           
  8073                           ;TTimer.c: 51:             if (s_Timers[counter].b_busy==1){
  8074  00140A  ECC5  F00A         	call	PL28	;call to abstracted procedure
  8075  00140E  04DE               	decf	postinc2,w,c
  8076  001410  E107               	bnz	i2l3812
  8077                           
  8078                           ;TTimer.c: 52:                 s_Timers[counter].h_initialTics -= h_Tics;
  8079  001412  5045               	movf	_counter^0,w,c
  8080  001414  EC6C  F00B         	call	PL48	;call to abstracted procedure
  8081  001418  5021               	movf	_h_Tics^0,w,c
  8082  00141A  5EDE               	subwf	postinc2,f,c
  8083  00141C  5022               	movf	(_h_Tics+1)^0,w,c
  8084  00141E  5ADD               	subwfb	postdec2,f,c
  8085  001420                     i2l3812:
  8086                           
  8087                           ;TTimer.c: 54:         }
  8088  001420  2A45               	incf	_counter^0,f,c
  8089  001422  D7EF               	goto	i2l3804
  8090  001424                     i2l71:
  8091                           
  8092                           ;TTimer.c: 55:         h_Tics=0;
  8093  001424  6A21               	clrf	_h_Tics^0,c
  8094  001426  6A22               	clrf	(_h_Tics+1)^0,c
  8095  001428  0012               	return		;funcret
  8096  00142A                     __end_of__TiRSITimer:
  8097                           	callstack 0
  8098                           
  8099                           	psect	rparam
  8100  0000                     
  8101                           	psect	temp
  8102  000072                     btemp:
  8103                           	callstack 0
  8104  000072                     	ds	1
  8105  0000                     int$flags	set	btemp
  8106  0000                     wtemp8	set	btemp+1
  8107  0000                     ttemp5	set	btemp+1
  8108  0000                     ttemp6	set	btemp+4
  8109  0000                     ttemp7	set	btemp+8
  8110                           
  8111                           	psect	idloc
  8112                           
  8113                           ;Config register IDLOC0 @ 0x200000
  8114                           ;	unspecified, using default values
  8115  200000                     	org	2097152
  8116  200000  FF                 	db	255
  8117                           
  8118                           ;Config register IDLOC1 @ 0x200001
  8119                           ;	unspecified, using default values
  8120  200001                     	org	2097153
  8121  200001  FF                 	db	255
  8122                           
  8123                           ;Config register IDLOC2 @ 0x200002
  8124                           ;	unspecified, using default values
  8125  200002                     	org	2097154
  8126  200002  FF                 	db	255
  8127                           
  8128                           ;Config register IDLOC3 @ 0x200003
  8129                           ;	unspecified, using default values
  8130  200003                     	org	2097155
  8131  200003  FF                 	db	255
  8132                           
  8133                           ;Config register IDLOC4 @ 0x200004
  8134                           ;	unspecified, using default values
  8135  200004                     	org	2097156
  8136  200004  FF                 	db	255
  8137                           
  8138                           ;Config register IDLOC5 @ 0x200005
  8139                           ;	unspecified, using default values
  8140  200005                     	org	2097157
  8141  200005  FF                 	db	255
  8142                           
  8143                           ;Config register IDLOC6 @ 0x200006
  8144                           ;	unspecified, using default values
  8145  200006                     	org	2097158
  8146  200006  FF                 	db	255
  8147                           
  8148                           ;Config register IDLOC7 @ 0x200007
  8149                           ;	unspecified, using default values
  8150  200007                     	org	2097159
  8151  200007  FF                 	db	255
  8152                           
  8153                           	psect	config
  8154                           
  8155                           ; Padding undefined space
  8156  300000                     	org	3145728
  8157  300000  FF                 	db	255
  8158                           
  8159                           ;Config register CONFIG1H @ 0x300001
  8160                           ;	Oscillator
  8161                           ;	OSC = HSPLL, HS oscillator, PLL enabled (Clock Frequency = 4 x FOSC1)
  8162                           ;	Fail-Safe Clock Monitor Enable bit
  8163                           ;	FCMEN = 0x0, unprogrammed default
  8164                           ;	Internal/External Oscillator Switchover bit
  8165                           ;	IESO = 0x0, unprogrammed default
  8166  300001                     	org	3145729
  8167  300001  06                 	db	6
  8168                           
  8169                           ;Config register CONFIG2L @ 0x300002
  8170                           ;	Power-up Timer Enable bit
  8171                           ;	PWRT = OFF, PWRT disabled
  8172                           ;	Brown-out Reset Enable bits
  8173                           ;	BOR = OFF, Brown-out Reset disabled in hardware and software
  8174                           ;	Brown-out Reset Voltage bits
  8175                           ;	BORV = 0x3, unprogrammed default
  8176  300002                     	org	3145730
  8177  300002  19                 	db	25
  8178                           
  8179                           ;Config register CONFIG2H @ 0x300003
  8180                           ;	Watchdog Timer Enable bit
  8181                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
  8182                           ;	Watchdog Timer Postscale Select bits
  8183                           ;	WDTPS = 0xF, unprogrammed default
  8184  300003                     	org	3145731
  8185  300003  1E                 	db	30
  8186                           
  8187                           ; Padding undefined space
  8188  300004                     	org	3145732
  8189  300004  FF                 	db	255
  8190                           
  8191                           ;Config register CONFIG3H @ 0x300005
  8192                           ;	CCP2 MUX bit
  8193                           ;	CCP2MX = 0x1, unprogrammed default
  8194                           ;	PORTB A/D Enable bit
  8195                           ;	PBADEN = DIG, PORTB<4:0> pins are configured as digital I/O on Reset
  8196                           ;	Low-Power Timer1 Oscillator Enable bit
  8197                           ;	LPT1OSC = 0x0, unprogrammed default
  8198                           ;	MCLR Pin Enable bit
  8199                           ;	MCLRE = OFF, RE3 input pin enabled; MCLR disabled
  8200  300005                     	org	3145733
  8201  300005  01                 	db	1
  8202                           
  8203                           ;Config register CONFIG4L @ 0x300006
  8204                           ;	Stack Full/Underflow Reset Enable bit
  8205                           ;	STVREN = 0x1, unprogrammed default
  8206                           ;	Single-Supply ICSP Enable bit
  8207                           ;	LVP = OFF, Single-Supply ICSP disabled
  8208                           ;	Boot Block Size Select bits
  8209                           ;	BBSIZ = 0x0, unprogrammed default
  8210                           ;	Extended Instruction Set Enable bit
  8211                           ;	XINST = 0x0, unprogrammed default
  8212                           ;	Background Debugger Enable bit
  8213                           ;	DEBUG = OFF, Background debugger disabled, RB6 and RB7 configured as general purpose I
      +                          /O pins
  8214  300006                     	org	3145734
  8215  300006  81                 	db	129
  8216                           
  8217                           ; Padding undefined space
  8218  300007                     	org	3145735
  8219  300007  FF                 	db	255
  8220                           
  8221                           ;Config register CONFIG5L @ 0x300008
  8222                           ;	unspecified, using default values
  8223                           ;	Code Protection bit
  8224                           ;	CP0 = 0x1, unprogrammed default
  8225                           ;	Code Protection bit
  8226                           ;	CP1 = 0x1, unprogrammed default
  8227  300008                     	org	3145736
  8228  300008  03                 	db	3
  8229                           
  8230                           ;Config register CONFIG5H @ 0x300009
  8231                           ;	unspecified, using default values
  8232                           ;	Boot Block Code Protection bitProtect Boot
  8233                           ;	CPB = 0x1, unprogrammed default
  8234                           ;	Data EEPROM Code Protection bit
  8235                           ;	CPD = 0x1, unprogrammed default
  8236  300009                     	org	3145737
  8237  300009  C0                 	db	192
  8238                           
  8239                           ;Config register CONFIG6L @ 0x30000A
  8240                           ;	unspecified, using default values
  8241                           ;	Write Protection bit
  8242                           ;	WRT0 = 0x1, unprogrammed default
  8243                           ;	Write Protection bit
  8244                           ;	WRT1 = 0x1, unprogrammed default
  8245  30000A                     	org	3145738
  8246  30000A  03                 	db	3
  8247                           
  8248                           ;Config register CONFIG6H @ 0x30000B
  8249                           ;	unspecified, using default values
  8250                           ;	Configuration Register Write Protection bit
  8251                           ;	WRTC = 0x1, unprogrammed default
  8252                           ;	Boot Block Write Protection bit
  8253                           ;	WRTB = 0x1, unprogrammed default
  8254                           ;	Data EEPROM Write Protection bit
  8255                           ;	WRTD = 0x1, unprogrammed default
  8256  30000B                     	org	3145739
  8257  30000B  E0                 	db	224
  8258                           
  8259                           ;Config register CONFIG7L @ 0x30000C
  8260                           ;	unspecified, using default values
  8261                           ;	Table Read Protection bit
  8262                           ;	EBTR0 = 0x1, unprogrammed default
  8263                           ;	Table Read Protection bit
  8264                           ;	EBTR1 = 0x1, unprogrammed default
  8265  30000C                     	org	3145740
  8266  30000C  03                 	db	3
  8267                           
  8268                           ;Config register CONFIG7H @ 0x30000D
  8269                           ;	unspecified, using default values
  8270                           ;	Boot Block Table Read Protection bit
  8271                           ;	EBTRB = 0x1, unprogrammed default
  8272  30000D                     	org	3145741
  8273  30000D  40                 	db	64
  8274                           tosu	equ	0xFFF
  8275                           tosh	equ	0xFFE
  8276                           tosl	equ	0xFFD
  8277                           stkptr	equ	0xFFC
  8278                           pclatu	equ	0xFFB
  8279                           pclath	equ	0xFFA
  8280                           pcl	equ	0xFF9
  8281                           tblptru	equ	0xFF8
  8282                           tblptrh	equ	0xFF7
  8283                           tblptrl	equ	0xFF6
  8284                           tablat	equ	0xFF5
  8285                           prodh	equ	0xFF4
  8286                           prodl	equ	0xFF3
  8287                           indf0	equ	0xFEF
  8288                           postinc0	equ	0xFEE
  8289                           postdec0	equ	0xFED
  8290                           preinc0	equ	0xFEC
  8291                           plusw0	equ	0xFEB
  8292                           fsr0h	equ	0xFEA
  8293                           fsr0l	equ	0xFE9
  8294                           wreg	equ	0xFE8
  8295                           indf1	equ	0xFE7
  8296                           postinc1	equ	0xFE6
  8297                           postdec1	equ	0xFE5
  8298                           preinc1	equ	0xFE4
  8299                           plusw1	equ	0xFE3
  8300                           fsr1h	equ	0xFE2
  8301                           fsr1l	equ	0xFE1
  8302                           bsr	equ	0xFE0
  8303                           indf2	equ	0xFDF
  8304                           postinc2	equ	0xFDE
  8305                           postdec2	equ	0xFDD
  8306                           preinc2	equ	0xFDC
  8307                           plusw2	equ	0xFDB
  8308                           fsr2h	equ	0xFDA
  8309                           fsr2l	equ	0xFD9
  8310                           status	equ	0xFD8

Data Sizes:
    Strings     0
    Constant    263
    Data        3
    BSS         306
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     41     113
    BANK0           128      0      93
    BANK1           256      0     144

Pointer List with Targets:

    None.

Critical Paths under _main in COMRAM

    _main->_menuMotor
    _timeMotor->_LcPutChar
    _menuMotor->_DaFindUser
    _startTimer->_TiResetTics
    _displayTimeRemaining->_LcGotoXY
    _displayMenu->_LcPutChar
    _LcPutChar->_LcGotoXY
    _CantaData->_CantaPartAlta
    _CantaData->_CantaPartBaixa
    _LcCursorOn->_WaitForBusy
    _LcCursorOff->_WaitForBusy
    _LcClear->_Espera
    _KeSetMode->_TiResetTics
    _KeGetCharValue->_getFullValue
    _DaFindUser->_LcGotoXY
    _joystickMotor->_SiSendChar
    _initTime->_TiGetTimer
    _initMenu->_TiGetTimer
    _initKeypad->_TiGetTimer
    _initData->_readUserData
    _dataMotor->_LcGotoXY
    _LcGotoXY->_WaitForBusy
    _SMSMotor->_TiGetTics
    _LcInit->_Espera
    _WaitForBusy->_TiGetTics
    _Espera->_TiGetTics
    _CantaIR->_CantaPartAlta
    _CantaIR->_CantaPartBaixa
    _KeypadMotor->_TiGetTics

Critical Paths under _RSI_High in COMRAM

    _RSI_High->__TiRSITimer

Critical Paths under _main in BANK0

    None.

Critical Paths under _RSI_High in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _RSI_High in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   29181
                        _KeypadMotor
                             _LcInit
                           _SMSMotor
                        _TiInitTimer
                          _dataMotor
                           _initData
                       _initJoystick
                         _initKeypad
                           _initMenu
                            _initSIO
                           _initTime
                      _joystickMotor
                          _menuMotor
                          _timeMotor
 ---------------------------------------------------------------------------------
 (1) _timeMotor                                            2     2      0    5167
                                             22 COMRAM     2     2      0
                           _LcGotoXY
                          _LcPutChar
                          _TiGetTics
                        _TiResetTics
 ---------------------------------------------------------------------------------
 (1) _menuMotor                                            2     2      0   19741
                                             39 COMRAM     2     2      0
                         _DaFindUser
                          _DaGetIdle
                        _DaGetStatus
                        _DaSaveScore
                         _DaSaveUser
                        _JoDirection
                            _JoMoved
                          _JoSetMode
                     _KeGetCharValue
                  _KeGetGenericValue
                          _KeSetMode
                            _LcClear
                        _LcCursorOff
                         _LcCursorOn
                           _LcGotoXY
                          _LcPutChar
                      _SiIsAvailable
                         _SiReadByte
                     _SiRecievedByte
                         _SiSendChar
                          _TiGetTics
                        _TiResetTics
                            ___lbdiv
                            ___lbmod
                        _displayMenu
               _displayTimeRemaining
                         _getPresses
                          _isPressed
                         _startTimer
                          _stopTimer
 ---------------------------------------------------------------------------------
 (2) _stopTimer                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _startTimer                                           0     0      0      22
                        _TiResetTics
 ---------------------------------------------------------------------------------
 (2) _isPressed                                            1     1      0      24
                                              5 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _getPresses                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _displayTimeRemaining                                 0     0      0    2384
                           _LcGotoXY
 ---------------------------------------------------------------------------------
 (2) _displayMenu                                          6     5      1    6394
                                             22 COMRAM     6     5      1
                           _LcGotoXY
                          _LcPutChar
                            ___awmod
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              6     2      4     574
                                              5 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) _LcPutChar                                            1     1      0    2716
                                             21 COMRAM     1     1      0
                          _CantaData
                           _LcGotoXY
                        _WaitForBusy
 ---------------------------------------------------------------------------------
 (3) _CantaData                                            1     1      0     220
                                              7 COMRAM     1     1      0
                      _CantaPartAlta
                     _CantaPartBaixa
 ---------------------------------------------------------------------------------
 (2) ___lbmod                                              4     3      1     437
                                              5 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 (2) ___lbdiv                                              4     3      1     364
                                              5 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 (2) _SiRecievedByte                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _SiReadByte                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _LcCursorOn                                           0     0      0     310
                            _CantaIR
                        _WaitForBusy
 ---------------------------------------------------------------------------------
 (2) _LcCursorOff                                          0     0      0     310
                            _CantaIR
                        _WaitForBusy
 ---------------------------------------------------------------------------------
 (2) _LcClear                                              0     0      0    1507
                            _CantaIR
                             _Espera
                        _WaitForBusy
 ---------------------------------------------------------------------------------
 (2) _KeSetMode                                            1     1      0      66
                                              6 COMRAM     1     1      0
                        _TiResetTics
 ---------------------------------------------------------------------------------
 (2) _KeGetCharValue                                       0     0      0     110
                  _KeGetGenericValue
                       _getFullValue
 ---------------------------------------------------------------------------------
 (3) _getFullValue                                         5     5      0     110
                                              5 COMRAM     5     5      0
 ---------------------------------------------------------------------------------
 (2) _JoSetMode                                            1     1      0      22
                                              5 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _JoMoved                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _JoDirection                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _DaSaveUser                                          18     0     18      98
                                              5 COMRAM    18     0     18
 ---------------------------------------------------------------------------------
 (2) _DaSaveScore                                          1     1      0      22
                                              5 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _DaGetStatus                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _DaGetIdle                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _DaFindUser                                          18     0     18    2482
                                             21 COMRAM    18     0     18
                           _LcGotoXY
 ---------------------------------------------------------------------------------
 (1) _joystickMotor                                        2     2      0      22
                                              6 COMRAM     2     2      0
                      _SiIsAvailable
                         _SiSendChar
 ---------------------------------------------------------------------------------
 (2) _SiSendChar                                           1     1      0      22
                                              5 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _SiIsAvailable                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initTime                                             0     0      0       0
                         _TiGetTimer
 ---------------------------------------------------------------------------------
 (1) _initSIO                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initMenu                                             0     0      0       0
                         _TiGetTimer
 ---------------------------------------------------------------------------------
 (1) _initKeypad                                           0     0      0       0
                         _TiGetTimer
 ---------------------------------------------------------------------------------
 (1) _initJoystick                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initData                                             0     0      0       0
                       _readUserData
 ---------------------------------------------------------------------------------
 (2) _readUserData                                         2     2      0       0
                                              5 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _dataMotor                                            4     4      0    2384
                                             21 COMRAM     4     4      0
                           _LcGotoXY
 ---------------------------------------------------------------------------------
 (3) _LcGotoXY                                             8     7      1    2384
                                             13 COMRAM     8     7      1
                            _CantaIR
                        _WaitForBusy
 ---------------------------------------------------------------------------------
 (1) _TiInitTimer                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SMSMotor                                             2     2      0      67
                                             12 COMRAM     2     2      0
                  _KeGetGenericValue
                          _TiGetTics
                        _TiResetTics
 ---------------------------------------------------------------------------------
 (2) _KeGetGenericValue                                    2     2      0       0
                                              5 COMRAM     2     2      0
                          _getColumn
 ---------------------------------------------------------------------------------
 (3) _getColumn                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _LcInit                                               4     3      1    1733
                                             17 COMRAM     4     3      1
                            _CantaIR
                 _EscriuPrimeraOrdre
                             _Espera
                         _TiGetTimer
                        _WaitForBusy
 ---------------------------------------------------------------------------------
 (3) _WaitForBusy                                          1     1      0      90
                                             12 COMRAM     1     1      0
                          _TiGetTics
                        _TiResetTics
 ---------------------------------------------------------------------------------
 (2) _TiGetTimer                                           1     1      0       0
                                              5 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _Espera                                               5     1      4    1197
                                             12 COMRAM     5     1      4
                          _TiGetTics
                        _TiResetTics
 ---------------------------------------------------------------------------------
 (2) _EscriuPrimeraOrdre                                   2     2      0      60
                                              5 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (4) _CantaIR                                              1     1      0     220
                                              7 COMRAM     1     1      0
                      _CantaPartAlta
                     _CantaPartBaixa
 ---------------------------------------------------------------------------------
 (5) _CantaPartBaixa                                       2     2      0      88
                                              5 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (5) _CantaPartAlta                                        2     2      0      88
                                              5 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _KeypadMotor                                          2     2      0      67
                                             12 COMRAM     2     2      0
                          _TiGetTics
                        _TiResetTics
 ---------------------------------------------------------------------------------
 (2) _TiResetTics                                          1     1      0      22
                                              5 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _TiGetTics                                            7     5      2      45
                                              5 COMRAM     7     5      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _RSI_High                                             4     4      0       0
                                              1 COMRAM     4     4      0
                        __TiRSITimer
 ---------------------------------------------------------------------------------
 (8) __TiRSITimer                                          1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _KeypadMotor
     _TiGetTics
     _TiResetTics
   _LcInit
     _CantaIR
       _CantaPartAlta
       _CantaPartBaixa
     _EscriuPrimeraOrdre
     _Espera
       _TiGetTics
       _TiResetTics
     _TiGetTimer
     _WaitForBusy
       _TiGetTics
       _TiResetTics
   _SMSMotor
     _KeGetGenericValue
       _getColumn
     _TiGetTics
     _TiResetTics
   _TiInitTimer
   _dataMotor
     _LcGotoXY
       _CantaIR
       _WaitForBusy
   _initData
     _readUserData
   _initJoystick
   _initKeypad
     _TiGetTimer
   _initMenu
     _TiGetTimer
   _initSIO
   _initTime
     _TiGetTimer
   _joystickMotor
     _SiIsAvailable
     _SiSendChar
   _menuMotor
     _DaFindUser
       _LcGotoXY
     _DaGetIdle
     _DaGetStatus
     _DaSaveScore
     _DaSaveUser
     _JoDirection
     _JoMoved
     _JoSetMode
     _KeGetCharValue
       _KeGetGenericValue
       _getFullValue
     _KeGetGenericValue
     _KeSetMode
       _TiResetTics
     _LcClear
       _CantaIR
       _Espera
       _WaitForBusy
     _LcCursorOff
       _CantaIR
       _WaitForBusy
     _LcCursorOn
       _CantaIR
       _WaitForBusy
     _LcGotoXY
     _LcPutChar
       _CantaData
         _CantaPartAlta
         _CantaPartBaixa
       _LcGotoXY
       _WaitForBusy
     _SiIsAvailable
     _SiReadByte
     _SiRecievedByte
     _SiSendChar
     _TiGetTics
     _TiResetTics
     ___lbdiv
     ___lbmod
     _displayMenu
       _LcGotoXY
       _LcPutChar
       ___awmod
     _displayTimeRemaining
       _LcGotoXY
     _getPresses
     _isPressed
     _startTimer
       _TiResetTics
     _stopTimer
   _timeMotor
     _LcGotoXY
     _LcPutChar
     _TiGetTics
     _TiResetTics

 _RSI_High (ROOT)
   __TiRSITimer

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             1FF      0       0      23        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      90       7       56.2%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0      5D       5       72.7%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     29      71       1       89.7%
BITBIGSFRhlhh       19      0       0       9        0.0%
BITBIGSFRhh          D      0       0       8        0.0%
BITBIGSFRlhhhh       B      0       0      11        0.0%
BITBIGSFRlhhlhl      8      0       0      14        0.0%
BITBIGSFRlhhlll      8      0       0      17        0.0%
BITBIGSFRlhhllh      7      0       0      16        0.0%
BITBIGSFRlhhlhh      7      0       0      13        0.0%
BITBIGSFRllhlh       6      0       0      19        0.0%
BITBIGSFRllhhh       5      0       0      18        0.0%
BITBIGSFRhll         4      0       0      10        0.0%
BITBIGSFRlhhllh      1      0       0      15        0.0%
BITBIGSFRlhhhl       1      0       0      12        0.0%
BITBIGSFRllhll       1      0       0      20        0.0%
BITBIGSFRlll         1      0       0      21        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     15E      22        0.0%
DATA                 0      0     15E       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.36 build 20220127204148 
Symbol Table                                                                                   Tue Jun 14 11:45:58 2022

           TiResetTics@Handle 004B                             _x 002F                             _y 002E  
      ??_displayTimeRemaining 005B                  ?_displayMenu 005C                            PL2 0A6E  
                          PL4 0A8C                            PL6 0A9C                            PL8 114E  
                         PL10 0AAC                           PL20 0AD4                           PL12 0890  
                         PL30 08BE                           PL22 0E18                           PL14 08AA  
                         PL40 08F0                           PL32 08CA                           PL24 0AE2  
                         PL16 0AB8                           PL50 14C8                           PL42 08FC  
                         PL34 08E4                           PL26 106E                           PL18 0AC6  
                         PL60 055C                           PL52 108A                           PL44 0AFE  
                         PL36 0AF6                           PL28 158A                           PL70 057C  
                         PL62 0566                           PL54 1112                           PL46 0B10  
                         PL38 1188                           PL80 0B22                           PL72 14D6  
                         PL64 1098                           PL56 0906                           PL48 16D8  
                         PL90 0EE2                           PL82 1338                           PL74 12D2  
                         PL66 0914                           PL58 0552                           PL84 0D58  
                         PL76 10A4                           PL68 0570                           PL86 1602  
                         PL78 1120                           PL88 0920                           l142 0C6A  
                         l145 0C86                           l138 0C4A                           l156 0CEC  
                         l148 0CA2                           l167 0F30                           l271 0FA6  
                         l185 16F8                           l282 0FF2                           l275 0FB8  
                         l630 0E2A                           l633 0E3E                           l732 11FE  
                         l821 1034                           l822 1048                           l726 11B4  
                         l646 0EAA                           l823 103E                           l727 11BE  
                         l728 11F4                           l729 11E0                           l649 0EBE  
                         l826 1052                           l771 06A8                           l755 05EC  
                         l780 0702                           l764 0622                           l828 105C  
                         l773 06B6                           l766 065E                           l783 0732  
                         l768 066A                           l786 0748                           l795 07C0  
                         l798 07F4                           u500 10C0                           u520 10D6  
                         u540 10EA                           u518 10C2                           u560 1102  
                         u538 10D8                           u558 10EC                           u578 1104  
                         _val 0032                           _row 0044              ??_CantaPartBaixa 004B  
                ___awmod@sign 0050                           wreg 000FE8           __end_of_JoDirection 17BA  
                        l2062 102C                          l4000 0CC6                          l4010 0CE6  
                        l4020 0D02                          l2076 104A                          l4030 0D28  
                        l2254 11A4                          l4102 0110                          l3320 147C  
                        l2264 11B6                          l4200 0288                          l4034 0D2A  
                        l2258 11AC                          l4202 028C                          l4130 0162  
                        l4122 0148                          l4114 012E                          l4050 0058  
                        l4042 0038                          l4300 039E                          l4140 019E  
                        l3342 14A2                          l3502 1260                          l4214 02AC  
                        l4206 0292                          l4142 01A4                          l4134 016C  
                        l3512 1570                          l3520 157A                          l3360 0F9A  
                        l3424 1148                          l4320 03DE                          l4064 0092  
                        l3434 1674                          l3370 0FC6                          l3506 126C  
                        l3602 0966                          l4330 0404                          l4314 03C6  
                        l4306 03B4                          l4226 02BC                          l4154 01C8  
                        l4138 0188                          l4082 00D4                          l3364 0FAA  
                        l3380 0FFA                          l4412 0E8C                          l3428 114A  
                        l3620 09EA                          l4236 02DC                          l4172 01FE  
                        l4092 00F4                          l4076 00BA                          l3374 0FD4  
                        l3382 1014                          l4502 061C                          l4430 0EAC  
                        l4406 0E76                          l3454 1364                          l3614 09E2  
                        l4270 0346                          l4262 0328                          l4246 0300  
                        l4238 02E6                          l4166 01EE                          l4158 01D6  
                        l4424 0EA0                          l4440 0EC2                          l3472 138C  
                        l3640 0A18                          l3632 0A06                          l4336 041A  
                        l4328 03FC                          l4248 0304                          l4192 0256  
                        l4176 020A                          l4418 0E96                          l3466 137E  
                        l3490 1238                          l3482 1220                          l3626 09FE  
                        l4290 0386                          l4194 025C                          l4178 0210  
                        l4098 010C                          l4540 066C                          l4508 062C  
                        l3556 15FA                          l3492 1240                          l3580 093C  
                        l4364 049A                          l4356 047A                          l4348 0434  
                        l4284 0370                          l4268 0340                          l4188 0248  
                        l4542 0672                          l4470 05C0                          l4454 0596  
                        l3486 122C                          l3662 0A3E                          l3646 0A20  
                        l3582 0940                          l4294 038C                          l4286 0376  
                        l3920 0F36                          l3824 152E                          l4616 070C  
                        l4472 05C6                          l4456 059A                          l4448 0586  
                        l3760 14F4                          l3656 0A36                          l4376 04B6  
                        l3930 0F4E                          l4714 07CA                          l4490 0602  
                        l4466 05B8                          l4458 059E                          l4394 0E50  
                        l3498 1256                          l3674 0A66                          l3666 0A4E  
                        l3586 0946                          l4810 0BFC                          l4802 0BE6  
                        l3924 0F3E                          l3908 0F16                          l3828 1536  
                        l4644 0738                          l4492 0608                          l4468 05BC  
                        l3756 14EE                          l3772 1510                          l3780 15A0  
                        l3596 095E                          l3588 094A                          l3854 0D7E  
                        l3934 0F58                          l3918 0F2A                          l4582 06CA  
                        l4574 06B8                          l4486 05F6                          l4742 07FA  
                        l4806 0BEE                          l4750 0B2E                          l4814 0C08  
                        l3936 0F5E                          l3944 0F70                          l4576 06BE  
                        l3768 1508                          l3962 0C64                          l4682 0778  
                        l4674 0750                          l4770 0B7E                          l3892 0EEA  
                        l4588 06DC                          l3788 15B6                          l4772 0B82  
                        l4790 0BBC                          l4782 0BA2                          l4774 0B86  
                        l4766 0B76                          l4838 1450                          l3992 0CB8  
                        l4688 0796                          l4768 0B7A                          l4794 0BCA  
                        l4786 0BAE                          l4778 0B94                          l3996 0CBC  
                        l4798 0BD8                          u3010 0E16                          u2220 12E8  
                        u2300 1282                          _LATC 000F8B                          u2240 12FE  
                        u2320 1298                          u3210 0CDC                          u2260 1312  
                        u2340 12AC                          u2238 12EA                          u2318 1284  
                        u2280 132A                          u2360 12C4                          u2258 1300  
                        u2338 129A                          u2610 1244                          u2460 1136  
                        u2278 1314                          u2358 12AE                          u3510 01D0  
                        u3350 0076                          u3280 0D18                          u2298 132C  
                        u2378 12C6                          u4250 0B70                          u3380 00CE  
                        u3461 017A                          u3550 023E                          u3471 0192  
                        u2760 098A                          u2680 16F4                          u2761 0988  
                        u3730 0360                          u2940 14F8                          u2871 1618  
                        u2881 1660                          i2l71 1424                          _TIME 1F23  
             __end_of_RESULTS 1F0D                ?_SiIsAvailable 0046                          _Rows 003A  
                        _main 142A                          _send 0030                          fsr1h 000FE2  
                        fsr2h 000FDA                          indf1 000FE7                          indf2 000FDF  
                        fsr1l 000FE1                          fsr2l 000FD9                    _LcCursorOn 174C  
                        btemp 0072                          prodh 000FF4                          prodl 000FF3  
             __end_of_LcClear 1712                          start 0032               __end_of_CantaIR 16C8  
               LcInit@columns 0057               __end_of_JoMoved 17B6                  ___param_bank 000000  
               _isPressed$530 004B              __end_of_MAINMENU 1FC8                   Espera@Timer 0052  
                       ?_main 0046               __end_of___lbdiv 1514                         _EEADR 000FA9  
             __end_of___awmod 1276               __end_of___lbmod 15BE                 ??_TiInitTimer 004B  
                       _T0CON 000FD5                         _ERROR 1F4B                         _TABLE 1F3F  
                       _RCREG 000FAE                 ??_KeypadMotor 0052                         _TMR0H 000FD7  
                       _TMR0L 000FD6                         _SPBRG 000FAF                         _TXREG 000FAD  
                 ?_DaFindUser 005B                         _Timer 001F              __end_of_SMSTABLE 1FFE  
             __end_of_initSIO 1726                         _mUser 00CB                         _moved 002D  
                       _timer 0036                   _LcCursorOff 1756                         _state 003C  
                       _users 0100              __end_of_RSI_High 0032              __end_of_SMSMotor 0F96  
                       tablat 000FF5                 ??_TiResetTics 004B                         plusw0 000FEB  
                       plusw1 000FE3                         plusw2 000FDB                         ttemp5 0073  
                       ttemp6 0076                         ttemp7 007A                         status 000FD8  
                 ?_DaSaveUser 004B                         wtemp8 0073               ___lbdiv@divisor 004B  
            __end_of_LcGotoXY 102A               ___lbdiv@counter 004D                 ??__TiRSITimer 0046  
                __end_of_TIME 1F33                    _TiGetTimer 156C       EscriuPrimeraOrdre@ordre 004C  
             __initialization 1396                    _SiReadByte 17AE                  __end_of_main 146A  
        __end_of_getFullValue 114E                    _SiSendChar 1782                   _JoDirection 17B6  
                      ??_main 006F                 __activetblptr 000002                 ?_initJoystick 0046  
           __end_of_LOGINMENU 1F23                        _ADCON0 000FC2                        _ADCON1 000FC1  
                      _ADCON2 000FC0          __end_of_MAINMENUSIZE 1F58           __end_of_TiInitTimer 1540  
                      _ADRESH 000FC4                        _EEDATA 000FA8                        _EECON2 000FA7  
             ??_SiIsAvailable 004B           __end_of_KeypadMotor 0D58                     ??_LcClear 0057  
                   ??_CantaIR 004D                        i2l3812 1420                        i2l3804 1402  
                      i2l3808 140A                        _LCDcol 0034                LcGotoXY@Fisics 0058  
              LcGotoXY@Column 005A                        _LCDrow 0035                 ??_WaitForBusy 0052  
               ?_readUserData 0046            _mUser@EEPROM$F1509 0001                     ??_JoMoved 004B  
                 ?_LcCursorOn 0046             KeSetMode@menuMode 004C                        _LcInit 0D5E  
                ?_DaGetStatus 0046                        _Espera 166E                  _LcGotoXY$736 0056  
           __end_of_DaGetIdle 1782                        _RowAct 0038           __end_of_TiResetTics 16D8  
                      _h_Tics 0021                     ??___lbdiv 004C                     ??___awmod 004F  
                   ??___lbmod 004C                        _mScore 0031              __end_of_initData 120E  
            __end_of_initMenu 179A              __end_of_initTime 1792           __end_of__TiRSITimer 142A  
                      clear_0 13BA                        clear_1 13C6                        clear_2 13D2  
                      _minute 006F                        _second 001D               ___awmod@divisor 004D  
                      isa$std 000001               ___awmod@counter 004F                        _status 0027  
              ??_initJoystick 004B                     ??_initSIO 004B                  __pdataCOMRAM 006F  
                __mediumconst 1EF6                        tblptrh 000FF7                        tblptrl 000FF6  
                      tblptru 000FF8                  ?_DaSaveScore 0046             __end_of_CantaData 14C8  
            ___lbdiv@dividend 004C                ??_readUserData 004B               ___lbmod@divisor 004B  
                  __accesstop 0080       __end_of__initialization 13D8             __end_of_KeSetMode 1602  
             ___lbmod@counter 004D             __end_of_LcPutChar 1396          DaSaveScore@userScore 004B  
               ___rparam_used 000001                 __end_of_ERROR 1F54                 __end_of_TABLE 1F4B  
                 ?_TiGetTimer 0046             __end_of_JoSetMode 177A                __pcstackCOMRAM 0046  
         __end_of_WaitForBusy 14A8                   ?_SiReadByte 0046         __end_of_joystickMotor 0EE2  
                 ?_SiSendChar 0046                    __end_ofPL2 0A8C                    __end_ofPL4 0A9C  
                  __end_ofPL6 0AAC                    __end_ofPL8 1188              ___lbdiv@quotient 004E  
                   ?_RSI_High 0046                     ?_SMSMotor 0046             __end_of_TiGetTics 15E4  
              _SiRecievedByte 179A                   _TiInitTimer 1514                   _KeypadMotor 0C48  
                   ?_LcGotoXY 0053                    __pbssBANK0 0080                    __pbssBANK1 0100  
                 _TiResetTics 16C8            _state@EEPROM$F1505 002A                       ?_LcInit 0057  
               _CantaPartAlta 12DC                       ?_Espera 0052                   __TiRSITimer 13E6  
      __end_of_SiRecievedByte 17A0                    ??_RSI_High 0047                    ??_SMSMotor 0052  
                  _getPresses 17AA          __end_of_LOGREGSCREEN 1F3F                       LcInit@i 0059  
                     _LCDcolm 0033                  ??_DaFindUser 006D                    ??_LcGotoXY 0054  
                     _RESULTS 1EF7                  ?_LcCursorOff 0046                  _getFullValue 112A  
           __end_of_dataMotor 0890                       _LcClear 16FC                       _CantaIR 16AC  
                   ?_initData 0046                     ?_initMenu 0046                     ?_initTime 0046  
                ??_DaSaveUser 005D                   _WaitForBusy 146A                       _JoMoved 17B2  
              ?_CantaPartAlta 0046                       _Columns 0039             __end_of_getColumn 176A  
        __end_of_initJoystick 164E                       __Hparam 0000                       __Lparam 0000  
                  _initKeypad 168E            __end_of_DaFindUser 162C                       ___lbdiv 14E0  
                     ___awmod 120E                       ___lbmod 1598                  _MAINMENUSIZE 1F54  
                  _currentKey 0041             __end_of_isPressed 16FC                  ?_JoDirection 0046  
                     __pcinit 1396               ?_SiRecievedByte 0046                       __ramtop 0200  
        __end_of_readUserData 106E                       __ptext0 142A                       __ptext1 0B2C  
                     __ptext2 0036                       __ptext3 17A6                       __ptext4 1742  
                     __ptext5 16E4                       __ptext6 17AA                       __ptext7 1736  
                     __ptext8 0928                       __ptext9 120E                     _T0CONbits 000FD5  
                   CantaIR@IR 004D                       _initSIO 1712                       _counter 0045  
              displayMenu@row 005C             __end_of_menuMotor 0552                       _joyMode 002B  
          __end_of_DaSaveUser 166E              ___awmod@dividend 004B                       _pressed 003F  
             WaitForBusy@Busy 0052                       _userNum 0029          end_of_initialization 13D8  
                   _LOGINMENU 1F0D                    ??_initData 004D                    ??_initMenu 004C  
                  ??_initTime 004C                 __Lmediumconst 1EF6               TiGetTics@Handle 004F  
                ??_LcCursorOn 0053             __end_of_timeMotor 0C48                    _numPresses 003E  
             TiGetTics@actual 0050                     _RCSTAbits 000FAB                       postdec2 000FDD  
                     postinc0 000FEE                       postinc1 000FE6                       postinc2 000FDE  
                   _DaGetIdle 177A             __end_of_stopTimer 17AA                     _PORTBbits 000F81  
                   _PORTDbits 000F83                   ?_getPresses 0046             _KeGetGenericValue 1540  
          __end_of_LcCursorOn 1756              ___lbmod@dividend 004C            ?_KeGetGenericValue 0046  
                   _TRISAbits 000F92                     _TRISBbits 000F93                     _TRISCbits 000F94  
                   _TRISDbits 000F95           getFullValue@generic 004F                    _startTimer 1742  
         ??_KeGetGenericValue 004B               ??_CantaPartAlta 004B         __end_of_SiIsAvailable 17A6  
                 ___lbmod@rem 004E                     _CantaData 14A8                     _TXSTAbits 000FAC  
                ??_TiGetTimer 004B                __end_of_LcInit 0E18                     _KeSetMode 15E4  
                   _LcPutChar 1342                  ??_SiReadByte 004B                __end_of_Espera 168E  
                 ?_initKeypad 0046                _KeGetCharValue 176A                 ??_displayMenu 005D  
                ??_SiSendChar 004B    __end_of_EscriuPrimeraOrdre 1112                    ?_DaGetIdle 0046  
                 _BAUDCONbits 000FB8                     _JoSetMode 1772     __end_of_KeGetGenericValue 156C  
               __pidataCOMRAM 17BE              _timer@time$F1561 0024                     _ColumnAct 0037  
                ?_TiInitTimer 0046                  ?_KeypadMotor 0046                   __end_ofPL10 0AB8  
                 __end_ofPL20 0AE2                   __end_ofPL12 08AA                   __end_ofPL30 08CA  
                 __end_ofPL22 0E24                   __end_ofPL14 08BE                   __end_ofPL40 08FC  
                 __end_ofPL32 08E4                   __end_ofPL24 0AF6                   __end_ofPL16 0AC6  
                 __end_ofPL50 14D6                   __end_ofPL42 0906                   __end_ofPL34 08F0  
                 __end_ofPL26 108A                   __end_ofPL18 0AD4                   __end_ofPL60 0566  
                 __end_ofPL52 1098                   __end_ofPL44 0B10                   __end_ofPL36 0AFE  
                 __end_ofPL28 1598                   __end_ofPL70 0584                   __end_ofPL62 0570  
                 __end_ofPL54 1120                   __end_ofPL46 0B22                   __end_ofPL38 11A0  
                 __end_ofPL80 0B2C                   __end_ofPL72 14E0                   __end_ofPL64 10A4  
                 __end_ofPL56 0914                   __end_ofPL48 16E4                   __end_ofPL90 0EE8  
                 __end_ofPL82 1342                   __end_ofPL74 12DC                   __end_ofPL66 0920  
                 __end_ofPL58 055C                   __end_ofPL84 0D5E                   __end_ofPL76 10AE  
                 __end_ofPL68 057C                   __end_ofPL86 1608                   __end_ofPL78 112A  
                 __end_ofPL88 0928           start_initialization 1396                     _TiGetTics 15BE  
          __end_of_TiGetTimer 158A            __end_of_SiReadByte 17B2           displayMenu@menuMode 0061  
                ?_TiResetTics 0046                    ?_CantaData 0046            __end_of_SiSendChar 178A  
                    ??_LcInit 0058                  _LOGREGSCREEN 1F33        __end_of_KeGetCharValue 1772  
                ?__TiRSITimer 0046                      ??_Espera 0056                    ?_KeSetMode 0046  
                  ?_LcPutChar 0046                    ?_JoSetMode 0046           __end_of_displayMenu 0A6E  
                _initJoystick 162C                   __pbssCOMRAM 0001                    ?_TiGetTics 004B  
            SiSendChar@myByte 004B                   ?_startTimer 0046  __end_of_displayTimeRemaining 1742  
                    ?_LcClear 0046                      ?_CantaIR 0046                _CantaPartBaixa 1276  
                ?_WaitForBusy 0046                  _readUserData 102A                      ?_JoMoved 0046  
                   _dataMotor 0584               ?_KeGetCharValue 0046              ??_SiRecievedByte 004B  
                   __pintcode 0008                     _getColumn 1760                 __pmediumconst 1EF6  
                    ?___lbdiv 004B                      ?___awmod 004B                      ?___lbmod 004B  
                   _available 003D               CantaPartBaixa@c 004C                   ??_DaGetIdle 004B  
                    ?_initSIO 0046                     _isPressed 16E4                     _menuMotor 0036  
      __end_of_CantaPartBaixa 12D2                      _MAINMENU 1F58                   ??_CantaData 004D  
                    _LATBbits 000F8A                      _LATCbits 000F8B                      _LATDbits 000F8C  
                  ?_dataMotor 0046                     _saveScore 0025                 ??_DaGetStatus 004B  
                 ??_KeSetMode 004C                      _PIR1bits 000F9E                   ??_LcPutChar 005B  
                   _timeMotor 0B2C                      _RCONbits 000FD0                    ?_getColumn 0046  
                   _timer_SMS 0042                   _displayMenu 0928                      _SMSTABLE 1FC8  
               _joystickMotor 0E24                   ??_JoSetMode 004B                     _topScores 0013  
                    _RSI_High 0008                    _ADCON0bits 000FC2                  ??_getPresses 004B  
                    _SMSMotor 0EE8                    ?_isPressed 0046                      Espera@ms 0054  
                   _stopTimer 17A6                      _LcGotoXY 0F96                   ??_TiGetTics 004D  
               ??_DaSaveScore 004B                   LcGotoXY@Row 0053                    ?_menuMotor 0046  
                 _INTCON2bits 000FF1               ?_CantaPartBaixa 0046                menuMotor@state 0071  
                  _EECON1bits 000FA6            __end_of_getPresses 17AE                      __Hrparam 0000  
                    __Lrparam 0000                  ??_initKeypad 004C                    ?_timeMotor 0046  
               JoSetMode@mode 004B                ?_joystickMotor 0046           __end_of_DaGetStatus 17BE  
        _displayTimeRemaining 1736                    ?_stopTimer 0046                      __ptext10 1342  
                    __ptext11 14A8            _EscriuPrimeraOrdre 10AE                      __ptext20 176A  
                    __ptext12 1598                      __ptext21 112A                      __ptext13 14E0  
                    __ptext30 0E24                      __ptext22 1772                      __ptext14 179A  
                    __ptext31 1782                      __ptext23 17B2                      __ptext15 17AE  
                    __ptext40 0584                      __ptext32 17A0                      __ptext24 17B6  
                    __ptext16 174C                      __ptext41 0F96                      __ptext33 178A  
                    __ptext25 164E                      __ptext17 1756                      __ptext50 10AE  
                    __ptext42 1514                      __ptext34 1712                      __ptext26 1726  
                    __ptext18 16FC                      __ptext51 16AC                      __ptext43 0EE8  
                    __ptext35 1792                      __ptext27 17BA                      __ptext19 15E4  
                    __ptext52 1276                      __ptext44 1540                      __ptext36 168E  
                    __ptext28 177A                      __ptext53 12DC                      __ptext45 1760  
                    __ptext37 162C                      __ptext29 1608                      __ptext54 0C48  
                    __ptext46 0D5E                      __ptext38 11A0                      __ptext55 16C8  
                    __ptext47 146A                      __ptext39 102A                      __ptext56 15BE  
                    __ptext48 156C                      __ptext49 166E                      __ptext58 13E6  
              CantaPartAlta@c 004C               _lastUserPointer 0026            __end_of_initKeypad 16AC  
                    _s_Timers 0080                      _initData 11A0                      _initMenu 1792  
                    _initTime 178A           ?_EscriuPrimeraOrdre 0046         __end_of_CantaPartAlta 1338  
         __end_of_DaSaveScore 1736                   ??_dataMotor 005B                 CantaData@Data 004D  
                 ??_getColumn 004B                      isa$xinst 000000                      _previous 0040  
                    int$flags 0072                      _position 0028                      _stateSMS 003B  
                    _stateJoy 002C         ?_displayTimeRemaining 0046          ??_EscriuPrimeraOrdre 004B  
                  LcInit@rows 0058                   ??_isPressed 004B                    _INTCONbits 000FF2  
                 ??_menuMotor 006D                 ??_LcCursorOff 0053                 ?_getFullValue 0046  
                ??_startTimer 004C                      intlevel2 0000              ??_KeGetCharValue 0050  
                _timerBounces 0043                    LcPutChar@c 005B                   _DaGetStatus 17BA  
             ??_joystickMotor 004C                   ??_timeMotor 005C              _state@time$F1562 0023  
               ??_JoDirection 004B            __end_of_startTimer 174C                   ??_stopTimer 004B  
                  _DaFindUser 1608             DaFindUser@logUser 005B                ??_getFullValue 004B  
                 _DaSaveScore 1726                 _SiIsAvailable 17A0                    _DaSaveUser 164E  
         __end_of_LcCursorOff 1760             DaSaveUser@regUser 004B  
