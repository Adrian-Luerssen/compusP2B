

Microchip MPLAB XC8 Assembler V2.36 build 20220127204148 
                                                                                               Sat Jun 04 15:01:15 2022

Microchip MPLAB XC8 C Compiler v2.36 (Pro license) build 20220127204148 Og9s 
     1                           	processor	18F4321
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	plic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    12                           	psect	text0,global,reloc=2,class=CODE,delta=1
    13                           	psect	text1,global,reloc=2,class=CODE,delta=1
    14                           	psect	text2,global,reloc=2,class=CODE,delta=1
    15                           	psect	text3,global,reloc=2,class=CODE,delta=1
    16                           	psect	text4,global,reloc=2,class=CODE,delta=1
    17                           	psect	text5,global,reloc=2,class=CODE,delta=1
    18                           	psect	text6,global,reloc=2,class=CODE,delta=1
    19                           	psect	text7,global,reloc=2,class=CODE,delta=1
    20                           	psect	text8,global,reloc=2,class=CODE,delta=1
    21                           	psect	text9,global,reloc=2,class=CODE,delta=1
    22                           	psect	text10,global,reloc=2,class=CODE,delta=1
    23                           	psect	text11,global,reloc=2,class=CODE,delta=1
    24                           	psect	text12,global,reloc=2,class=CODE,delta=1
    25                           	psect	text13,global,reloc=2,class=CODE,delta=1
    26                           	psect	text14,global,reloc=2,class=CODE,delta=1
    27                           	psect	text15,global,reloc=2,class=CODE,delta=1
    28                           	psect	text16,global,reloc=2,class=CODE,delta=1
    29                           	psect	text17,global,reloc=2,class=CODE,delta=1
    30                           	psect	text18,global,reloc=2,class=CODE,delta=1
    31                           	psect	text19,global,reloc=2,class=CODE,delta=1
    32                           	psect	text20,global,reloc=2,class=CODE,delta=1
    33                           	psect	text21,global,reloc=2,class=CODE,delta=1
    34                           	psect	text22,global,reloc=2,class=CODE,delta=1
    35                           	psect	text23,global,reloc=2,class=CODE,delta=1
    36                           	psect	text24,global,reloc=2,class=CODE,delta=1
    37                           	psect	text25,global,reloc=2,class=CODE,delta=1
    38                           	psect	text26,global,reloc=2,class=CODE,delta=1
    39                           	psect	text27,global,reloc=2,class=CODE,delta=1
    40                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    41                           	psect	text29,global,reloc=2,class=CODE,delta=1
    42                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    43                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    44                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    45                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    46                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    47                           	psect	pa_nodes0,global,class=CODE,delta=1
    48  0000                     
    49                           ; Version 2.36
    50                           ; Generated 28/01/2022 GMT
    51                           ; 
    52                           ; Copyright Â© 2022, Microchip Technology Inc. and its subsidiaries ("Microchip")
    53                           ; All rights reserved.
    54                           ; 
    55                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    56                           ; 
    57                           ; Redistribution and use in source and binary forms, with or without modification, are
    58                           ; permitted provided that the following conditions are met:
    59                           ; 
    60                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    61                           ;        conditions and the following disclaimer.
    62                           ; 
    63                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    64                           ;        of conditions and the following disclaimer in the documentation and/or other
    65                           ;        materials provided with the distribution. Publication is not required when
    66                           ;        this file is used in an embedded application.
    67                           ; 
    68                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    69                           ;        software without specific prior written permission.
    70                           ; 
    71                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    72                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    73                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    74                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    75                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    76                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    77                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    78                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    79                           ; 
    80                           ; 
    81                           ; Code-generator required, PIC18F4321 Definitions
    82                           ; 
    83                           ; SFR Addresses
    84  0000                     
    85                           	psect	idataCOMRAM
    86  000B3E                     __pidataCOMRAM:
    87                           	callstack 0
    88                           
    89                           ;initializer for _available
    90  000B3E  01                 	db	1
    91                           
    92                           	psect	smallconst
    93  000200                     __psmallconst:
    94                           	callstack 0
    95  000200  00                 	db	0
    96  000201                     _LOGREGSCREEN:
    97                           	callstack 0
    98  000201  55                 	db	85
    99  000202  53                 	db	83
   100  000203  45                 	db	69
   101  000204  52                 	db	82
   102  000205  3A                 	db	58
   103  000206  00                 	db	0
   104  000207  50                 	db	80
   105  000208  53                 	db	83
   106  000209  57                 	db	87
   107  00020A  44                 	db	68
   108  00020B  3A                 	db	58
   109  00020C  00                 	db	0
   110  00020D                     __end_of_LOGREGSCREEN:
   111                           	callstack 0
   112  00020D                     _TABLE:
   113                           	callstack 0
   114  00020D  31                 	db	49
   115  00020E  32                 	db	50
   116  00020F  33                 	db	51
   117  000210  34                 	db	52
   118  000211  35                 	db	53
   119  000212  36                 	db	54
   120  000213  37                 	db	55
   121  000214  38                 	db	56
   122  000215  39                 	db	57
   123  000216  2A                 	db	42
   124  000217  30                 	db	48
   125  000218  23                 	db	35
   126  000219                     __end_of_TABLE:
   127                           	callstack 0
   128  000219                     _SMSTABLE:
   129                           	callstack 0
   130  000219  31                 	db	49
   131  00021A  00                 	db	0
   132  00021B  00                 	db	0
   133  00021C  00                 	db	0
   134  00021D  00                 	db	0
   135  00021E  00                 	db	0
   136  00021F  41                 	db	65
   137  000220  42                 	db	66
   138  000221  43                 	db	67
   139  000222  32                 	db	50
   140  000223  00                 	db	0
   141  000224  00                 	db	0
   142  000225  44                 	db	68
   143  000226  45                 	db	69
   144  000227  46                 	db	70
   145  000228  33                 	db	51
   146  000229  00                 	db	0
   147  00022A  00                 	db	0
   148  00022B  47                 	db	71
   149  00022C  48                 	db	72
   150  00022D  49                 	db	73
   151  00022E  34                 	db	52
   152  00022F  00                 	db	0
   153  000230  00                 	db	0
   154  000231  4A                 	db	74
   155  000232  4B                 	db	75
   156  000233  4C                 	db	76
   157  000234  35                 	db	53
   158  000235  00                 	db	0
   159  000236  00                 	db	0
   160  000237  4D                 	db	77
   161  000238  4E                 	db	78
   162  000239  4F                 	db	79
   163  00023A  36                 	db	54
   164  00023B  00                 	db	0
   165  00023C  00                 	db	0
   166  00023D  50                 	db	80
   167  00023E  51                 	db	81
   168  00023F  52                 	db	82
   169  000240  53                 	db	83
   170  000241  37                 	db	55
   171  000242  00                 	db	0
   172  000243  54                 	db	84
   173  000244  55                 	db	85
   174  000245  56                 	db	86
   175  000246  38                 	db	56
   176  000247  00                 	db	0
   177  000248  00                 	db	0
   178  000249  57                 	db	87
   179  00024A  58                 	db	88
   180  00024B  59                 	db	89
   181  00024C  5A                 	db	90
   182  00024D  39                 	db	57
   183  00024E  00                 	db	0
   184  00024F                     __end_of_SMSTABLE:
   185                           	callstack 0
   186  00024F                     _LOGINMENU:
   187                           	callstack 0
   188  00024F  31                 	db	49
   189  000250  2E                 	db	46
   190  000251  4C                 	db	76
   191  000252  4F                 	db	79
   192  000253  47                 	db	71
   193  000254  49                 	db	73
   194  000255  4E                 	db	78
   195  000256  00                 	db	0
   196  000257  00                 	db	0
   197  000258  00                 	db	0
   198  000259  00                 	db	0
   199  00025A  32                 	db	50
   200  00025B  2E                 	db	46
   201  00025C  52                 	db	82
   202  00025D  45                 	db	69
   203  00025E  47                 	db	71
   204  00025F  49                 	db	73
   205  000260  53                 	db	83
   206  000261  54                 	db	84
   207  000262  45                 	db	69
   208  000263  52                 	db	82
   209  000264  00                 	db	0
   210  000265                     __end_of_LOGINMENU:
   211                           	callstack 0
   212  0000                     _TMR0L	set	4054
   213  0000                     _TMR0H	set	4055
   214  0000                     _T0CONbits	set	4053
   215  0000                     _PORTBbits	set	3969
   216  0000                     _TRISBbits	set	3987
   217  0000                     _TRISCbits	set	3988
   218  0000                     _RCONbits	set	4048
   219  0000                     _T0CON	set	4053
   220  0000                     _INTCONbits	set	4082
   221  0000                     _INTCON2bits	set	4081
   222  0000                     _TRISDbits	set	3989
   223  0000                     _PORTDbits	set	3971
   224  0000                     _LATBbits	set	3978
   225  0000                     _LATDbits	set	3980
   226  0000                     _LATC	set	3979
   227  000265  00                 	db	0	; dummy byte at the end
   228  0000                     
   229                           ; #config settings
   230                           
   231                           	psect	cinit
   232  00099A                     __pcinit:
   233                           	callstack 0
   234  00099A                     start_initialization:
   235                           	callstack 0
   236  00099A                     __initialization:
   237                           	callstack 0
   238                           
   239                           ; Initialize objects allocated to COMRAM (1 bytes)
   240                           ; load TBLPTR registers with __pidataCOMRAM
   241  00099A  0E3E               	movlw	low __pidataCOMRAM
   242  00099C  6EF6               	movwf	tblptrl,c
   243  00099E  0E0B               	movlw	high __pidataCOMRAM
   244  0009A0  6EF7               	movwf	tblptrh,c
   245  0009A2  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   246  0009A4  6EF8               	movwf	tblptru,c
   247  0009A6  0009               	tblrd		*+	;fetch initializer
   248  0009A8  CFF5 F079          	movff	tablat,__pdataCOMRAM
   249                           
   250                           ; Clear objects allocated to COMRAM (96 bytes)
   251  0009AC  EE00  F001         	lfsr	0,__pbssCOMRAM
   252  0009B0  0E60               	movlw	96
   253  0009B2                     clear_0:
   254  0009B2  6AEE               	clrf	postinc0,c
   255  0009B4  06E8               	decf	wreg,f,c
   256  0009B6  E1FD               	bnz	clear_0
   257  0009B8                     end_of_initialization:
   258                           	callstack 0
   259  0009B8                     __end_of__initialization:
   260                           	callstack 0
   261  0009B8  907A               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   262  0009BA  927A               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   263  0009BC  0E00               	movlw	low (__Lmediumconst shr (0+16))
   264  0009BE  6EF8               	movwf	tblptru,c
   265  0009C0  0100               	movlb	0
   266  0009C2  EF35  F005         	goto	_main	;jump to C main() function
   267                           
   268                           	psect	bssCOMRAM
   269  000001                     __pbssCOMRAM:
   270                           	callstack 0
   271  000001                     _s_Timers:
   272                           	callstack 0
   273  000001                     	ds	75
   274  00004C                     _Timer:
   275                           	callstack 0
   276  00004C                     	ds	2
   277  00004E                     _h_Tics:
   278                           	callstack 0
   279  00004E                     	ds	2
   280  000050                     menuMotor@state:
   281                           	callstack 0
   282  000050                     	ds	1
   283  000051                     _LCDcol:
   284                           	callstack 0
   285  000051                     	ds	1
   286  000052                     _LCDrow:
   287                           	callstack 0
   288  000052                     	ds	1
   289  000053                     _ColumnAct:
   290                           	callstack 0
   291  000053                     	ds	1
   292  000054                     _RowAct:
   293                           	callstack 0
   294  000054                     	ds	1
   295  000055                     _Columns:
   296                           	callstack 0
   297  000055                     	ds	1
   298  000056                     _Rows:
   299                           	callstack 0
   300  000056                     	ds	1
   301  000057                     _stateSMS:
   302                           	callstack 0
   303  000057                     	ds	1
   304  000058                     _state:
   305                           	callstack 0
   306  000058                     	ds	1
   307  000059                     _numPresses:
   308                           	callstack 0
   309  000059                     	ds	1
   310  00005A                     _pressed:
   311                           	callstack 0
   312  00005A                     	ds	1
   313  00005B                     _previous:
   314                           	callstack 0
   315  00005B                     	ds	1
   316  00005C                     _currentKey:
   317                           	callstack 0
   318  00005C                     	ds	1
   319  00005D                     _timer_SMS:
   320                           	callstack 0
   321  00005D                     	ds	1
   322  00005E                     _timerBounces:
   323                           	callstack 0
   324  00005E                     	ds	1
   325  00005F                     _row:
   326                           	callstack 0
   327  00005F                     	ds	1
   328  000060                     _counter:
   329                           	callstack 0
   330  000060                     	ds	1
   331                           
   332                           	psect	dataCOMRAM
   333  000079                     __pdataCOMRAM:
   334                           	callstack 0
   335  000079                     _available:
   336                           	callstack 0
   337  000079                     	ds	1
   338                           
   339                           	psect	cstackBANK0
   340  000080                     __pcstackBANK0:
   341                           	callstack 0
   342  000080                     ??_displayMenu:
   343                           
   344                           ; 1 bytes @ 0x0
   345  000080                     	ds	2
   346  000082                     ??_menuMotor:
   347                           
   348                           ; 1 bytes @ 0x2
   349  000082                     	ds	2
   350                           
   351                           	psect	cstackCOMRAM
   352  000061                     __pcstackCOMRAM:
   353                           	callstack 0
   354  000061                     
   355                           ; 1 bytes @ 0x0
   356  000061                     	ds	1
   357  000062                     ??_RSI_High:
   358                           
   359                           ; 1 bytes @ 0x1
   360  000062                     	ds	4
   361  000066                     ??_getFullValue:
   362  000066                     ??_EscriuPrimeraOrdre:
   363  000066                     ??_CantaPartAlta:
   364  000066                     ??_CantaPartBaixa:
   365  000066                     ?_TiGetTics:
   366                           	callstack 0
   367  000066                     TiResetTics@Handle:
   368                           	callstack 0
   369  000066                     _isPressed$554:
   370                           	callstack 0
   371  000066                     getGenericKey@column:
   372                           	callstack 0
   373                           
   374                           ; 1 bytes @ 0x5
   375  000066                     	ds	1
   376  000067                     ??_getGenericKey:
   377  000067                     CantaPartAlta@c:
   378                           	callstack 0
   379  000067                     CantaPartBaixa@c:
   380                           	callstack 0
   381  000067                     EscriuPrimeraOrdre@ordre:
   382                           	callstack 0
   383                           
   384                           ; 1 bytes @ 0x6
   385  000067                     	ds	1
   386  000068                     ??_TiGetTics:
   387  000068                     getGenericKey@row:
   388                           	callstack 0
   389  000068                     CantaIR@IR:
   390                           	callstack 0
   391  000068                     CantaData@Data:
   392                           	callstack 0
   393                           
   394                           ; 1 bytes @ 0x7
   395  000068                     	ds	1
   396  000069                     
   397                           ; 1 bytes @ 0x8
   398  000069                     	ds	1
   399  00006A                     TiGetTics@Handle:
   400                           	callstack 0
   401  00006A                     getFullValue@generic:
   402                           	callstack 0
   403                           
   404                           ; 1 bytes @ 0x9
   405  00006A                     	ds	1
   406  00006B                     TiGetTics@actual:
   407                           	callstack 0
   408                           
   409                           ; 2 bytes @ 0xA
   410  00006B                     	ds	2
   411  00006D                     ??_SMSMotor:
   412  00006D                     ??_KeypadMotor:
   413  00006D                     WaitForBusy@Busy:
   414                           	callstack 0
   415  00006D                     Espera@Timer:
   416                           	callstack 0
   417                           
   418                           ; 2 bytes @ 0xC
   419  00006D                     	ds	1
   420  00006E                     LcGotoXY@Row:
   421                           	callstack 0
   422                           
   423                           ; 1 bytes @ 0xD
   424  00006E                     	ds	1
   425  00006F                     ??_LcGotoXY:
   426  00006F                     Espera@ms:
   427                           	callstack 0
   428                           
   429                           ; 2 bytes @ 0xE
   430  00006F                     	ds	2
   431  000071                     ??_Espera:
   432  000071                     _LcGotoXY$761:
   433                           	callstack 0
   434                           
   435                           ; 2 bytes @ 0x10
   436  000071                     	ds	1
   437  000072                     LcInit@columns:
   438                           	callstack 0
   439                           
   440                           ; 1 bytes @ 0x11
   441  000072                     	ds	1
   442  000073                     LcInit@rows:
   443                           	callstack 0
   444  000073                     LcGotoXY@Fisics:
   445                           	callstack 0
   446                           
   447                           ; 2 bytes @ 0x12
   448  000073                     	ds	1
   449  000074                     LcInit@i:
   450                           	callstack 0
   451                           
   452                           ; 2 bytes @ 0x13
   453  000074                     	ds	1
   454  000075                     LcGotoXY@Column:
   455                           	callstack 0
   456                           
   457                           ; 1 bytes @ 0x14
   458  000075                     	ds	1
   459  000076                     LcPutChar@c:
   460                           	callstack 0
   461                           
   462                           ; 1 bytes @ 0x15
   463  000076                     	ds	1
   464  000077                     displayMenu@row:
   465                           	callstack 0
   466                           
   467                           ; 1 bytes @ 0x16
   468  000077                     	ds	1
   469  000078                     displayMenu@menuMode:
   470                           	callstack 0
   471                           
   472                           ; 1 bytes @ 0x17
   473  000078                     	ds	1
   474  000079                     
   475                           ; 1 bytes @ 0x18
   476 ;;
   477 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   478 ;;
   479 ;; *************** function _main *****************
   480 ;; Defined at:
   481 ;;		line 38 in file "main.c"
   482 ;; Parameters:    Size  Location     Type
   483 ;;		None
   484 ;; Auto vars:     Size  Location     Type
   485 ;;		None
   486 ;; Return value:  Size  Location     Type
   487 ;;                  1    wreg      void 
   488 ;; Registers used:
   489 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   490 ;; Tracked objects:
   491 ;;		On entry : 0/0
   492 ;;		On exit  : 0/0
   493 ;;		Unchanged: 0/0
   494 ;; Data sizes:     COMRAM   BANK0   BANK1
   495 ;;      Params:         0       0       0
   496 ;;      Locals:         0       0       0
   497 ;;      Temps:          0       0       0
   498 ;;      Totals:         0       0       0
   499 ;;Total ram usage:        0 bytes
   500 ;; Hardware stack levels required when called: 8
   501 ;; This function calls:
   502 ;;		_KeypadMotor
   503 ;;		_LcInit
   504 ;;		_SMSMotor
   505 ;;		_TiInitTimer
   506 ;;		_initKeypad
   507 ;;		_menuMotor
   508 ;; This function is called by:
   509 ;;		Startup code after reset
   510 ;; This function uses a non-reentrant model
   511 ;;
   512                           
   513                           	psect	text0
   514  000A6A                     __ptext0:
   515                           	callstack 0
   516  000A6A                     _main:
   517                           	callstack 23
   518                           
   519                           ;incstack = 0
   520  000A6A  EC0E  F005         	call	_TiInitTimer	;wreg free
   521  000A6E  ECF9  F004         	call	_initKeypad	;wreg free
   522  000A72  0E10               	movlw	16
   523  000A74  6E72               	movwf	LcInit@columns^0,c
   524  000A76  0E02               	movlw	2
   525  000A78  EC34  F002         	call	_LcInit
   526  000A7C                     l2293:
   527  000A7C  ECE1  F002         	call	_SMSMotor	;wreg free
   528  000A80  EC33  F001         	call	_KeypadMotor	;wreg free
   529  000A84  ECBE  F001         	call	_menuMotor	;wreg free
   530  000A88  D7F9               	goto	l2293
   531  000A8A                     __end_of_main:
   532                           	callstack 0
   533                           
   534 ;; *************** function _menuMotor *****************
   535 ;; Defined at:
   536 ;;		line 16 in file "Menu.c"
   537 ;; Parameters:    Size  Location     Type
   538 ;;		None
   539 ;; Auto vars:     Size  Location     Type
   540 ;;		None
   541 ;; Return value:  Size  Location     Type
   542 ;;                  1    wreg      void 
   543 ;; Registers used:
   544 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   545 ;; Tracked objects:
   546 ;;		On entry : 0/0
   547 ;;		On exit  : 0/0
   548 ;;		Unchanged: 0/0
   549 ;; Data sizes:     COMRAM   BANK0   BANK1
   550 ;;      Params:         0       0       0
   551 ;;      Locals:         0       0       0
   552 ;;      Temps:          0       2       0
   553 ;;      Totals:         0       2       0
   554 ;;Total ram usage:        2 bytes
   555 ;; Hardware stack levels used: 1
   556 ;; Hardware stack levels required when called: 7
   557 ;; This function calls:
   558 ;;		_KeGetCharValue
   559 ;;		_KeGetGenericValue
   560 ;;		_LcCursorOn
   561 ;;		_LcGotoXY
   562 ;;		_LcPutChar
   563 ;;		_displayMenu
   564 ;;		_getPresses
   565 ;;		_isPressed
   566 ;; This function is called by:
   567 ;;		_main
   568 ;; This function uses a non-reentrant model
   569 ;;
   570                           
   571                           	psect	text1
   572  00037C                     __ptext1:
   573                           	callstack 0
   574  00037C                     _menuMotor:
   575                           	callstack 23
   576                           
   577                           ;Menu.c: 17:     static char state = 0;;Menu.c: 18:     switch (state){
   578                           
   579                           ;incstack = 0
   580  00037C  D05A               	goto	l2283
   581  00037E                     l2225:
   582                           
   583                           ; BSR set to: 0
   584                           ;Menu.c: 20:             displayMenu(1,0);
   585  00037E  0E00               	movlw	0
   586  000380  6E77               	movwf	displayMenu@row^0,c
   587  000382  0E01               	movlw	1
   588  000384  EC2B  F003         	call	_displayMenu
   589                           
   590                           ;Menu.c: 21:             if (LCDrow == 2){
   591  000388  0E02               	movlw	2
   592  00038A  1852               	xorwf	_LCDrow^0,w,c
   593  00038C  A4D8               	btfss	status,2,c
   594  00038E  0012               	return	
   595                           
   596                           ;Menu.c: 22:                 LCDrow = 0;
   597  000390  6A52               	clrf	_LCDrow^0,c
   598                           
   599                           ;Menu.c: 23:                 LCDcol = 5;
   600                           
   601                           ;Menu.c: 24:                 LcGotoXY(LCDcol,LCDrow);
   602  000392  D85D               	call	PL16	;call to abstracted procedure
   603  000394  EC97  F002         	call	_LcGotoXY
   604                           
   605                           ;Menu.c: 25:                 LcCursorOn();
   606  000398  EC93  F005         	call	_LcCursorOn	;wreg free
   607                           
   608                           ;Menu.c: 26:                 state = 1;
   609  00039C  0E01               	movlw	1
   610  00039E  6E50               	movwf	menuMotor@state^0,c
   611  0003A0  0C01               	retlw	1
   612  0003A2                     l2237:
   613                           
   614                           ; BSR set to: 0
   615                           ;Menu.c: 30:             if (LCDcol >= 12 && getPresses() <= 1){
   616  0003A2  0E0B               	movlw	11
   617  0003A4  6451               	cpfsgt	_LCDcol^0,c
   618  0003A6  D00F               	goto	l2247
   619                           
   620                           ; BSR set to: 0
   621  0003A8  EC9D  F005         	call	_getPresses	;wreg free
   622  0003AC  0100               	movlb	0	; () banked
   623  0003AE  6F82               	movwf	??_menuMotor& (0+255),b
   624  0003B0  0E02               	movlw	2
   625  0003B2  6182               	cpfslt	??_menuMotor& (0+255),b
   626  0003B4  D008               	goto	l2247
   627                           
   628                           ; BSR set to: 0
   629                           ;Menu.c: 31:                 LCDrow = 1;
   630  0003B6  0E01               	movlw	1
   631  0003B8  6E52               	movwf	_LCDrow^0,c
   632                           
   633                           ;Menu.c: 32:                 LCDcol = 5;
   634                           
   635                           ; BSR set to: 0
   636                           ;Menu.c: 33:                 LcGotoXY(LCDcol,LCDrow);
   637  0003BA  D849               	call	PL16	;call to abstracted procedure
   638  0003BC  EC97  F002         	call	_LcGotoXY
   639  0003C0                     l2245:
   640                           
   641                           ;Menu.c: 34:                 state = 2;
   642  0003C0  0E02               	movlw	2
   643  0003C2  6E50               	movwf	menuMotor@state^0,c
   644                           
   645                           ;Menu.c: 35:             }else if (isPressed()){
   646  0003C4  0C02               	retlw	2
   647  0003C6                     l2247:
   648                           
   649                           ; BSR set to: 0
   650  0003C6  EC7C  F005         	call	_isPressed	;wreg free
   651  0003CA  0900               	iorlw	0
   652  0003CC  B4D8               	btfsc	status,2,c
   653  0003CE  0012               	return	
   654                           
   655                           ;Menu.c: 36:                 if (getPresses() > 1){
   656  0003D0  EC9D  F005         	call	_getPresses	;wreg free
   657  0003D4  D846               	call	PL44	;call to abstracted procedure
   658  0003D6  6582               	cpfsgt	??_menuMotor& (0+255),b
   659  0003D8  D004               	goto	l2255
   660                           
   661                           ; BSR set to: 0
   662                           ;Menu.c: 37:                     LcGotoXY(LCDcol--,LCDrow);
   663  0003DA  D83F               	call	PL28	;call to abstracted procedure
   664  0003DC  EC97  F002         	call	_LcGotoXY
   665  0003E0  0651               	decf	_LCDcol^0,f,c
   666  0003E2                     l2255:
   667                           
   668                           ;Menu.c: 39:                 if (KeGetGenericValue() != '#'){
   669  0003E2  EC8D  F005         	call	_KeGetGenericValue	;wreg free
   670  0003E6  0A23               	xorlw	35
   671  0003E8  E006               	bz	l2261
   672                           
   673                           ;Menu.c: 40:                     LcPutChar(KeGetCharValue());
   674  0003EA  EC85  F005         	call	_KeGetCharValue	;wreg free
   675  0003EE  EC44  F004         	call	_LcPutChar
   676  0003F2                     l2259:
   677                           
   678                           ;Menu.c: 41:                     LCDcol++;
   679  0003F2  2A51               	incf	_LCDcol^0,f,c
   680                           
   681                           ;Menu.c: 43:                 } else {
   682  0003F4  0012               	return	
   683  0003F6                     l2261:
   684                           
   685                           ;Menu.c: 44:                     LCDrow = 1;
   686  0003F6  0E01               	movlw	1
   687  0003F8  6E52               	movwf	_LCDrow^0,c
   688                           
   689                           ;Menu.c: 45:                     LCDcol = 5;
   690                           
   691                           ;Menu.c: 46:                     LcGotoXY(LCDcol,LCDrow);
   692  0003FA  D829               	call	PL16	;call to abstracted procedure
   693  0003FC  EC97  F002         	call	_LcGotoXY
   694  000400  D7DF               	goto	l2245
   695  000402                     l2267:
   696                           
   697                           ; BSR set to: 0
   698                           ;Menu.c: 54:             if (isPressed()){
   699  000402  EC7C  F005         	call	_isPressed	;wreg free
   700  000406  0900               	iorlw	0
   701  000408  B4D8               	btfsc	status,2,c
   702  00040A  0012               	return	
   703                           
   704                           ;Menu.c: 55:                 if (getPresses() > 1){
   705  00040C  EC9D  F005         	call	_getPresses	;wreg free
   706  000410  D828               	call	PL44	;call to abstracted procedure
   707  000412  6582               	cpfsgt	??_menuMotor& (0+255),b
   708  000414  D004               	goto	l2275
   709                           
   710                           ; BSR set to: 0
   711                           ;Menu.c: 56:                     LcGotoXY(LCDcol--,LCDrow);
   712  000416  D821               	call	PL28	;call to abstracted procedure
   713  000418  EC97  F002         	call	_LcGotoXY
   714  00041C  0651               	decf	_LCDcol^0,f,c
   715  00041E                     l2275:
   716                           
   717                           ;Menu.c: 59:                 if (KeGetGenericValue() != '#'){
   718  00041E  EC8D  F005         	call	_KeGetGenericValue	;wreg free
   719  000422  0A23               	xorlw	35
   720  000424  B4D8               	btfsc	status,2,c
   721  000426  0012               	return	
   722                           
   723                           ;Menu.c: 60:                     LcPutChar(KeGetCharValue());
   724  000428  EC85  F005         	call	_KeGetCharValue	;wreg free
   725  00042C  EC44  F004         	call	_LcPutChar
   726  000430  D7E0               	goto	l2259
   727  000432                     l2283:
   728  000432  5050               	movf	menuMotor@state^0,w,c
   729  000434  0100               	movlb	0	; () banked
   730  000436  6F82               	movwf	??_menuMotor& (0+255),b
   731  000438  6B83               	clrf	(??_menuMotor+1)& (0+255),b
   732                           
   733                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
   734                           ; Switch size 1, requested type "space"
   735                           ; Number of cases is 1, Range of values is 0 to 0
   736                           ; switch strategies available:
   737                           ; Name         Instructions Cycles
   738                           ; simple_byte            4     3 (average)
   739                           ;	Chosen strategy is simple_byte
   740  00043A  5183               	movf	(??_menuMotor+1)& (0+255),w,b
   741  00043C  A4D8               	btfss	status,2,c
   742  00043E  0012               	return	
   743                           
   744                           ; BSR set to: 0
   745                           ; Switch size 1, requested type "space"
   746                           ; Number of cases is 3, Range of values is 0 to 2
   747                           ; switch strategies available:
   748                           ; Name         Instructions Cycles
   749                           ; simple_byte           10     6 (average)
   750                           ;	Chosen strategy is simple_byte
   751  000440  5182               	movf	??_menuMotor& (0+255),w,b
   752  000442  E09D               	bz	l2225
   753  000444  0A01               	xorlw	1	; case 1
   754  000446  E0AD               	bz	l2237
   755  000448  0A03               	xorlw	3	; case 2
   756  00044A  E0DB               	bz	l2267
   757  00044C  0012               	return		;funcret
   758  00044E                     __end_of_menuMotor:
   759                           	callstack 0
   760  00044E                     PL16:
   761                           	callstack 23
   762  00044E  0E05               	movlw	5
   763  000450  6E51               	movwf	_LCDcol^0,c
   764  000452  C052  F06E         	movff	_LCDrow,LcGotoXY@Row
   765  000456  5051               	movf	_LCDcol^0,w,c
   766  000458  0012               	return	
   767  00045A                     __end_ofPL16:
   768                           	callstack 0
   769  00045A                     PL28:
   770                           	callstack 23
   771  00045A  C052  F06E         	movff	_LCDrow,LcGotoXY@Row
   772  00045E  5051               	movf	_LCDcol^0,w,c
   773  000460  0012               	return	
   774  000462                     __end_ofPL28:
   775                           	callstack 0
   776  000462                     PL44:
   777                           	callstack 23
   778  000462  0100               	movlb	0	; () banked
   779  000464  6F82               	movwf	??_menuMotor& (0+255),b
   780  000466  0C01               	retlw	1
   781  000468                     __end_ofPL44:
   782                           	callstack 0
   783                           
   784 ;; *************** function _isPressed *****************
   785 ;; Defined at:
   786 ;;		line 194 in file "keypad.c"
   787 ;; Parameters:    Size  Location     Type
   788 ;;		None
   789 ;; Auto vars:     Size  Location     Type
   790 ;;		None
   791 ;; Return value:  Size  Location     Type
   792 ;;                  1    wreg      unsigned char 
   793 ;; Registers used:
   794 ;;		wreg, status,2, status,0
   795 ;; Tracked objects:
   796 ;;		On entry : 0/0
   797 ;;		On exit  : 0/0
   798 ;;		Unchanged: 0/0
   799 ;; Data sizes:     COMRAM   BANK0   BANK1
   800 ;;      Params:         0       0       0
   801 ;;      Locals:         1       0       0
   802 ;;      Temps:          0       0       0
   803 ;;      Totals:         1       0       0
   804 ;;Total ram usage:        1 bytes
   805 ;; Hardware stack levels used: 1
   806 ;; Hardware stack levels required when called: 2
   807 ;; This function calls:
   808 ;;		Nothing
   809 ;; This function is called by:
   810 ;;		_menuMotor
   811 ;; This function uses a non-reentrant model
   812 ;;
   813                           
   814                           	psect	text2
   815  000AF8                     __ptext2:
   816                           	callstack 0
   817  000AF8                     _isPressed:
   818                           	callstack 27
   819                           
   820                           ;keypad.c: 196:  return pressed && stateSMS == 1;
   821                           
   822                           ;incstack = 0
   823  000AF8  6A66               	clrf	_isPressed$554^0,c
   824  000AFA  505A               	movf	_pressed^0,w,c
   825  000AFC  E004               	bz	l173
   826  000AFE  0457               	decf	_stateSMS^0,w,c
   827  000B00  E102               	bnz	l173
   828  000B02  0E01               	movlw	1
   829  000B04  6E66               	movwf	_isPressed$554^0,c
   830  000B06                     l173:
   831  000B06  5066               	movf	_isPressed$554^0,w,c
   832  000B08  0012               	return		;funcret
   833  000B0A                     __end_of_isPressed:
   834                           	callstack 0
   835                           
   836 ;; *************** function _getPresses *****************
   837 ;; Defined at:
   838 ;;		line 231 in file "keypad.c"
   839 ;; Parameters:    Size  Location     Type
   840 ;;		None
   841 ;; Auto vars:     Size  Location     Type
   842 ;;		None
   843 ;; Return value:  Size  Location     Type
   844 ;;                  1    wreg      unsigned char 
   845 ;; Registers used:
   846 ;;		wreg, status,2
   847 ;; Tracked objects:
   848 ;;		On entry : 0/0
   849 ;;		On exit  : 0/0
   850 ;;		Unchanged: 0/0
   851 ;; Data sizes:     COMRAM   BANK0   BANK1
   852 ;;      Params:         0       0       0
   853 ;;      Locals:         0       0       0
   854 ;;      Temps:          0       0       0
   855 ;;      Totals:         0       0       0
   856 ;;Total ram usage:        0 bytes
   857 ;; Hardware stack levels used: 1
   858 ;; Hardware stack levels required when called: 2
   859 ;; This function calls:
   860 ;;		Nothing
   861 ;; This function is called by:
   862 ;;		_menuMotor
   863 ;; This function uses a non-reentrant model
   864 ;;
   865                           
   866                           	psect	text3
   867  000B3A                     __ptext3:
   868                           	callstack 0
   869  000B3A                     _getPresses:
   870                           	callstack 27
   871                           
   872                           ;keypad.c: 232:     return available;
   873                           
   874                           ;incstack = 0
   875  000B3A  5079               	movf	_available^0,w,c
   876  000B3C  0012               	return		;funcret
   877  000B3E                     __end_of_getPresses:
   878                           	callstack 0
   879                           
   880 ;; *************** function _displayMenu *****************
   881 ;; Defined at:
   882 ;;		line 71 in file "Menu.c"
   883 ;; Parameters:    Size  Location     Type
   884 ;;  menuMode        1    wreg     unsigned char 
   885 ;;  row             1   22[COMRAM] unsigned char 
   886 ;; Auto vars:     Size  Location     Type
   887 ;;  menuMode        1   23[COMRAM] unsigned char 
   888 ;; Return value:  Size  Location     Type
   889 ;;                  1    wreg      void 
   890 ;; Registers used:
   891 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   892 ;; Tracked objects:
   893 ;;		On entry : 0/0
   894 ;;		On exit  : 0/0
   895 ;;		Unchanged: 0/0
   896 ;; Data sizes:     COMRAM   BANK0   BANK1
   897 ;;      Params:         1       0       0
   898 ;;      Locals:         1       0       0
   899 ;;      Temps:          0       2       0
   900 ;;      Totals:         2       2       0
   901 ;;Total ram usage:        4 bytes
   902 ;; Hardware stack levels used: 1
   903 ;; Hardware stack levels required when called: 6
   904 ;; This function calls:
   905 ;;		_LcGotoXY
   906 ;;		_LcPutChar
   907 ;; This function is called by:
   908 ;;		_menuMotor
   909 ;; This function uses a non-reentrant model
   910 ;;
   911                           
   912                           	psect	text4
   913  000656                     __ptext4:
   914                           	callstack 0
   915  000656                     _displayMenu:
   916                           	callstack 23
   917                           
   918                           ;incstack = 0
   919                           ;displayMenu@menuMode stored from wreg
   920  000656  6E78               	movwf	displayMenu@menuMode^0,c
   921                           
   922                           ;Menu.c: 72:     if (menuMode == 0){
   923  000658  5078               	movf	displayMenu@menuMode^0,w,c
   924  00065A  E111               	bnz	l2209
   925                           
   926                           ;Menu.c: 73:         if (LOGINMENU[LCDrow+row][LCDcol] != '\0'){
   927  00065C  D82D               	call	PL14	;call to abstracted procedure
   928  00065E  0100               	movlb	0	; () banked
   929  000660  D825               	call	PL12	;call to abstracted procedure
   930  000662  D81F               	call	PL8	;call to abstracted procedure
   931  000664  E007               	bz	l2203
   932                           
   933                           ; BSR set to: 0
   934                           ;Menu.c: 74:             LcPutChar(LOGINMENU[LCDrow+row][LCDcol]);
   935  000666  D828               	call	PL14	;call to abstracted procedure
   936  000668  D821               	call	PL12	;call to abstracted procedure
   937  00066A  D81B               	call	PL8	;call to abstracted procedure
   938  00066C  EC44  F004         	call	_LcPutChar
   939  000670                     l2201:
   940                           
   941                           ;Menu.c: 75:             LCDcol++;
   942  000670  2A51               	incf	_LCDcol^0,f,c
   943                           
   944                           ;Menu.c: 76:         } else {
   945  000672  0012               	return	
   946  000674                     l2203:
   947                           
   948                           ; BSR set to: 0
   949                           ;Menu.c: 77:             LCDrow++;
   950                           
   951                           ; BSR set to: 0
   952                           ;Menu.c: 78:             LcGotoXY(0,1);
   953  000674  D834               	call	PL36	;call to abstracted procedure
   954  000676  EC97  F002         	call	_LcGotoXY
   955  00067A                     l2207:
   956                           
   957                           ;Menu.c: 79:             LCDcol = 0;
   958  00067A  6A51               	clrf	_LCDcol^0,c
   959  00067C  0012               	return	
   960  00067E                     l2209:
   961  00067E  0478               	decf	displayMenu@menuMode^0,w,c
   962  000680  A4D8               	btfss	status,2,c
   963  000682  0012               	return	
   964                           
   965                           ;Menu.c: 82:         if (LOGREGSCREEN[LCDrow][LCDcol] != '\0'){
   966  000684  D826               	call	PL26	;call to abstracted procedure
   967  000686  0100               	movlb	0	; () banked
   968  000688  D820               	call	PL22	;call to abstracted procedure
   969  00068A  D80B               	call	PL8	;call to abstracted procedure
   970  00068C  E006               	bz	l2217
   971                           
   972                           ; BSR set to: 0
   973                           ;Menu.c: 83:             LcPutChar(LOGREGSCREEN[LCDrow][LCDcol]);
   974  00068E  D821               	call	PL26	;call to abstracted procedure
   975  000690  D81C               	call	PL22	;call to abstracted procedure
   976  000692  D807               	call	PL8	;call to abstracted procedure
   977  000694  EC44  F004         	call	_LcPutChar
   978  000698  D7EB               	goto	l2201
   979  00069A                     l2217:
   980                           
   981                           ; BSR set to: 0
   982                           ;Menu.c: 86:             LCDrow++;
   983                           
   984                           ; BSR set to: 0
   985                           ;Menu.c: 87:             LcGotoXY(0,1);
   986  00069A  D821               	call	PL36	;call to abstracted procedure
   987  00069C  EC97  F002         	call	_LcGotoXY
   988  0006A0  D7EC               	goto	l2207
   989  0006A2                     __end_of_displayMenu:
   990                           	callstack 0
   991  0006A2                     PL8:
   992                           	callstack 23
   993  0006A2  0E02               	movlw	high __smallconst
   994  0006A4  6EF7               	movwf	tblptrh,c
   995  0006A6                     	endif
   996  0006A6                     	if	0	;tblptru may be non-zero
   997  0006A6                     	endif
   998  0006A6                     	if	0	;tblptru may be non-zero
   999  0006A6                     	endif
  1000  0006A6  0008               	tblrd		*
  1001  0006A8  50F5               	movf	tablat,w,c
  1002  0006AA  0012               	return	
  1003  0006AC                     __end_ofPL8:
  1004                           	callstack 0
  1005  0006AC                     PL12:
  1006                           	callstack 23
  1007  0006AC  2580               	addwf	??_displayMenu& (0+255),w,b
  1008  0006AE  2451               	addwf	_LCDcol^0,w,c
  1009  0006B0  6F81               	movwf	(??_displayMenu+1)& (0+255),b
  1010  0006B2  C081  FFF6         	movff	??_displayMenu+1,tblptrl
  1011  0006B6                     	if	1	;There is more than 1 active tblptr byte
  1012  0006B6  0012               	return	
  1013  0006B8                     __end_ofPL12:
  1014                           	callstack 0
  1015  0006B8                     PL14:
  1016                           	callstack 23
  1017  0006B8  5077               	movf	displayMenu@row^0,w,c
  1018  0006BA  0D0B               	mullw	11
  1019  0006BC  CFF3 F080          	movff	prodl,??_displayMenu
  1020  0006C0  5052               	movf	_LCDrow^0,w,c
  1021  0006C2  0D0B               	mullw	11
  1022  0006C4  50F3               	movf	243,w,c
  1023  0006C6  0F4F               	addlw	low _LOGINMENU
  1024  0006C8  0012               	return	
  1025  0006CA                     __end_ofPL14:
  1026                           	callstack 0
  1027  0006CA                     PL22:
  1028                           	callstack 23
  1029  0006CA  6F80               	movwf	??_displayMenu& (0+255),b
  1030  0006CC  C080  FFF6         	movff	??_displayMenu,tblptrl
  1031  0006D0                     	if	1	;There is more than 1 active tblptr byte
  1032  0006D0  0012               	return	
  1033  0006D2                     __end_ofPL22:
  1034                           	callstack 0
  1035  0006D2                     PL26:
  1036                           	callstack 23
  1037  0006D2  5052               	movf	_LCDrow^0,w,c
  1038  0006D4  0D06               	mullw	6
  1039  0006D6  50F3               	movf	243,w,c
  1040  0006D8  0F01               	addlw	low _LOGREGSCREEN
  1041  0006DA  2451               	addwf	_LCDcol^0,w,c
  1042  0006DC  0012               	return	
  1043  0006DE                     __end_ofPL26:
  1044                           	callstack 0
  1045  0006DE                     PL36:
  1046                           	callstack 23
  1047  0006DE  2A52               	incf	_LCDrow^0,f,c
  1048  0006E0  0E01               	movlw	1
  1049  0006E2  6E6E               	movwf	LcGotoXY@Row^0,c
  1050  0006E4  0C00               	retlw	0
  1051  0006E6                     __end_ofPL36:
  1052                           	callstack 0
  1053                           
  1054 ;; *************** function _LcPutChar *****************
  1055 ;; Defined at:
  1056 ;;		line 161 in file "LcTLCD.c"
  1057 ;; Parameters:    Size  Location     Type
  1058 ;;  c               1    wreg     unsigned char 
  1059 ;; Auto vars:     Size  Location     Type
  1060 ;;  c               1   21[COMRAM] unsigned char 
  1061 ;; Return value:  Size  Location     Type
  1062 ;;                  1    wreg      void 
  1063 ;; Registers used:
  1064 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1065 ;; Tracked objects:
  1066 ;;		On entry : 0/0
  1067 ;;		On exit  : 0/0
  1068 ;;		Unchanged: 0/0
  1069 ;; Data sizes:     COMRAM   BANK0   BANK1
  1070 ;;      Params:         0       0       0
  1071 ;;      Locals:         1       0       0
  1072 ;;      Temps:          0       0       0
  1073 ;;      Totals:         1       0       0
  1074 ;;Total ram usage:        1 bytes
  1075 ;; Hardware stack levels used: 1
  1076 ;; Hardware stack levels required when called: 5
  1077 ;; This function calls:
  1078 ;;		_CantaData
  1079 ;;		_LcGotoXY
  1080 ;;		_WaitForBusy
  1081 ;; This function is called by:
  1082 ;;		_menuMotor
  1083 ;;		_displayMenu
  1084 ;; This function uses a non-reentrant model
  1085 ;;
  1086                           
  1087                           	psect	text5
  1088  000888                     __ptext5:
  1089                           	callstack 0
  1090  000888                     _LcPutChar:
  1091                           	callstack 23
  1092                           
  1093                           ;incstack = 0
  1094                           ;LcPutChar@c stored from wreg
  1095  000888  6E76               	movwf	LcPutChar@c^0,c
  1096                           
  1097                           ;LcTLCD.c: 171:  WaitForBusy(); CantaData(c);
  1098  00088A  EC92  F004         	call	_WaitForBusy	;wreg free
  1099  00088E  5076               	movf	LcPutChar@c^0,w,c
  1100  000890  ECB1  F004         	call	_CantaData
  1101                           
  1102                           ;LcTLCD.c: 173:  ++ColumnAct;
  1103  000894  2A53               	incf	_ColumnAct^0,f,c
  1104                           
  1105                           ;LcTLCD.c: 174:  if (Rows == 3) {
  1106  000896  0E03               	movlw	3
  1107  000898  1856               	xorwf	_Rows^0,w,c
  1108  00089A  E107               	bnz	l1845
  1109                           
  1110                           ;LcTLCD.c: 175:   if (ColumnAct >= 20) {
  1111  00089C  0E13               	movlw	19
  1112  00089E  6453               	cpfsgt	_ColumnAct^0,c
  1113  0008A0  0C13               	retlw	19
  1114                           
  1115                           ;LcTLCD.c: 176:    ColumnAct = 0;
  1116  0008A2  6A53               	clrf	_ColumnAct^0,c
  1117                           
  1118                           ;LcTLCD.c: 177:    if (++RowAct >= 4) RowAct = 0;
  1119  0008A4  2A54               	incf	_RowAct^0,f,c
  1120  0008A6  0E03               	movlw	3
  1121  0008A8  D009               	goto	L1
  1122  0008AA                     l1845:
  1123                           
  1124                           ;LcTLCD.c: 181:  if (Rows == 2) {
  1125  0008AA  0E02               	movlw	2
  1126  0008AC  1856               	xorwf	_Rows^0,w,c
  1127  0008AE  E10A               	bnz	l1857
  1128                           
  1129                           ;LcTLCD.c: 182:   if (ColumnAct >= 40) {
  1130  0008B0  0E27               	movlw	39
  1131  0008B2  6453               	cpfsgt	_ColumnAct^0,c
  1132  0008B4  0C27               	retlw	39
  1133                           
  1134                           ;LcTLCD.c: 183:    ColumnAct = 0;
  1135  0008B6  6A53               	clrf	_ColumnAct^0,c
  1136                           
  1137                           ;LcTLCD.c: 184:    if (++RowAct >= 2) RowAct = 0;
  1138  0008B8  2A54               	incf	_RowAct^0,f,c
  1139  0008BA  0E01               	movlw	1
  1140  0008BC                     L1:
  1141  0008BC  6454               	cpfsgt	_RowAct^0,c
  1142  0008BE  D009               	goto	l1863
  1143  0008C0  6A54               	clrf	_RowAct^0,c
  1144  0008C2  D007               	goto	l1863
  1145  0008C4                     l1857:
  1146                           
  1147                           ;LcTLCD.c: 188:  if (RowAct == 1) {
  1148  0008C4  0454               	decf	_RowAct^0,w,c
  1149  0008C6  A4D8               	btfss	status,2,c
  1150  0008C8  0012               	return	
  1151                           
  1152                           ;LcTLCD.c: 189:   if (ColumnAct >= 40) ColumnAct = 0;
  1153  0008CA  0E27               	movlw	39
  1154  0008CC  6453               	cpfsgt	_ColumnAct^0,c
  1155  0008CE  D001               	goto	l1863
  1156  0008D0  6A53               	clrf	_ColumnAct^0,c
  1157  0008D2                     l1863:
  1158                           
  1159                           ;LcTLCD.c: 190:   LcGotoXY(ColumnAct, RowAct);
  1160  0008D2  C054  F06E         	movff	_RowAct,LcGotoXY@Row
  1161  0008D6  5053               	movf	_ColumnAct^0,w,c
  1162  0008D8  EF97  F002         	goto	_LcGotoXY
  1163  0008DC                     __end_of_LcPutChar:
  1164                           	callstack 0
  1165                           
  1166 ;; *************** function _LcGotoXY *****************
  1167 ;; Defined at:
  1168 ;;		line 134 in file "LcTLCD.c"
  1169 ;; Parameters:    Size  Location     Type
  1170 ;;  Column          1    wreg     unsigned char 
  1171 ;;  Row             1   13[COMRAM] unsigned char 
  1172 ;; Auto vars:     Size  Location     Type
  1173 ;;  Column          1   20[COMRAM] unsigned char 
  1174 ;;  Fisics          2   18[COMRAM] int 
  1175 ;; Return value:  Size  Location     Type
  1176 ;;                  1    wreg      void 
  1177 ;; Registers used:
  1178 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1179 ;; Tracked objects:
  1180 ;;		On entry : 0/0
  1181 ;;		On exit  : 0/0
  1182 ;;		Unchanged: 0/0
  1183 ;; Data sizes:     COMRAM   BANK0   BANK1
  1184 ;;      Params:         1       0       0
  1185 ;;      Locals:         5       0       0
  1186 ;;      Temps:          2       0       0
  1187 ;;      Totals:         8       0       0
  1188 ;;Total ram usage:        8 bytes
  1189 ;; Hardware stack levels used: 1
  1190 ;; Hardware stack levels required when called: 4
  1191 ;; This function calls:
  1192 ;;		_CantaIR
  1193 ;;		_WaitForBusy
  1194 ;; This function is called by:
  1195 ;;		_LcPutChar
  1196 ;;		_menuMotor
  1197 ;;		_displayMenu
  1198 ;; This function uses a non-reentrant model
  1199 ;;
  1200                           
  1201                           	psect	text6
  1202  00052E                     __ptext6:
  1203                           	callstack 0
  1204  00052E                     _LcGotoXY:
  1205                           	callstack 23
  1206                           
  1207                           ;incstack = 0
  1208                           ;LcGotoXY@Column stored from wreg
  1209  00052E  6E75               	movwf	LcGotoXY@Column^0,c
  1210                           
  1211                           ;LcTLCD.c: 138:  int Fisics;;LcTLCD.c: 140:  switch (Rows) {
  1212  000530  D030               	goto	l1791
  1213  000532                     l1771:
  1214                           
  1215                           ;LcTLCD.c: 142:    Fisics = Column + (!Row ? 0 : 0x40); break;
  1216  000532  506E               	movf	LcGotoXY@Row^0,w,c
  1217  000534  E004               	bz	l259
  1218  000536  6A72               	clrf	(_LcGotoXY$761+1)^0,c
  1219  000538  0E40               	movlw	64
  1220  00053A  6E71               	movwf	_LcGotoXY$761^0,c
  1221  00053C  D002               	goto	l1775
  1222  00053E                     l259:
  1223  00053E  6A71               	clrf	_LcGotoXY$761^0,c
  1224  000540  6A72               	clrf	(_LcGotoXY$761+1)^0,c
  1225  000542                     l1775:
  1226  000542  5075               	movf	LcGotoXY@Column^0,w,c
  1227  000544  2471               	addwf	_LcGotoXY$761^0,w,c
  1228  000546  6E73               	movwf	LcGotoXY@Fisics^0,c
  1229  000548  0E00               	movlw	0
  1230  00054A  2072               	addwfc	(_LcGotoXY$761+1)^0,w,c
  1231  00054C  6E74               	movwf	(LcGotoXY@Fisics+1)^0,c
  1232  00054E  D02E               	goto	l1793
  1233  000550                     l263:
  1234                           
  1235                           ;LcTLCD.c: 144:    Fisics = Column;
  1236  000550  C075  F073         	movff	LcGotoXY@Column,LcGotoXY@Fisics
  1237  000554  6A74               	clrf	(LcGotoXY@Fisics+1)^0,c
  1238                           
  1239                           ;LcTLCD.c: 145:    if (Row == 1) Fisics += 0x40; else
  1240  000556  046E               	decf	LcGotoXY@Row^0,w,c
  1241  000558  E102               	bnz	l1781
  1242  00055A  0E40               	movlw	64
  1243  00055C  D004               	goto	L2
  1244  00055E                     l1781:
  1245                           
  1246                           ;LcTLCD.c: 146:    if (Row == 2) Fisics += Columns; else
  1247  00055E  0E02               	movlw	2
  1248  000560  186E               	xorwf	LcGotoXY@Row^0,w,c
  1249  000562  E104               	bnz	l1785
  1250  000564  5055               	movf	_Columns^0,w,c
  1251  000566                     L2:
  1252  000566  2673               	addwf	LcGotoXY@Fisics^0,f,c
  1253  000568  0E00               	movlw	0
  1254  00056A  D00D               	goto	L3
  1255  00056C                     l1785:
  1256                           
  1257                           ;LcTLCD.c: 147:    if (Row == 3) Fisics += 0x40+Columns;
  1258  00056C  0E03               	movlw	3
  1259  00056E  186E               	xorwf	LcGotoXY@Row^0,w,c
  1260  000570  E11D               	bnz	l1793
  1261  000572  5055               	movf	_Columns^0,w,c
  1262  000574  6E6F               	movwf	??_LcGotoXY^0,c
  1263  000576  6A70               	clrf	(??_LcGotoXY+1)^0,c
  1264  000578  0E40               	movlw	64
  1265  00057A  266F               	addwf	??_LcGotoXY^0,f,c
  1266  00057C  0E00               	movlw	0
  1267  00057E  2270               	addwfc	(??_LcGotoXY+1)^0,f,c
  1268  000580  506F               	movf	??_LcGotoXY^0,w,c
  1269  000582  2673               	addwf	LcGotoXY@Fisics^0,f,c
  1270  000584  5070               	movf	(??_LcGotoXY+1)^0,w,c
  1271  000586                     L3:
  1272  000586  2274               	addwfc	(LcGotoXY@Fisics+1)^0,f,c
  1273                           
  1274                           ;LcTLCD.c: 148:    break;
  1275  000588  D011               	goto	l1793
  1276  00058A                     l270:
  1277                           
  1278                           ;LcTLCD.c: 151:    Fisics = Column; break;
  1279  00058A  C075  F073         	movff	LcGotoXY@Column,LcGotoXY@Fisics
  1280  00058E  6A74               	clrf	(LcGotoXY@Fisics+1)^0,c
  1281  000590  D00D               	goto	l1793
  1282  000592                     l1791:
  1283  000592  5056               	movf	_Rows^0,w,c
  1284  000594  6E6F               	movwf	??_LcGotoXY^0,c
  1285  000596  6A70               	clrf	(??_LcGotoXY+1)^0,c
  1286                           
  1287                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1288                           ; Switch size 1, requested type "space"
  1289                           ; Number of cases is 1, Range of values is 0 to 0
  1290                           ; switch strategies available:
  1291                           ; Name         Instructions Cycles
  1292                           ; simple_byte            4     3 (average)
  1293                           ;	Chosen strategy is simple_byte
  1294  000598  5070               	movf	(??_LcGotoXY+1)^0,w,c
  1295  00059A  E1F7               	bnz	l270
  1296                           
  1297                           ; Switch size 1, requested type "space"
  1298                           ; Number of cases is 3, Range of values is 1 to 4
  1299                           ; switch strategies available:
  1300                           ; Name         Instructions Cycles
  1301                           ; simple_byte           10     6 (average)
  1302                           ;	Chosen strategy is simple_byte
  1303  00059C  506F               	movf	??_LcGotoXY^0,w,c
  1304  00059E  0A01               	xorlw	1	; case 1
  1305  0005A0  E0F4               	bz	l270
  1306  0005A2  0A03               	xorlw	3	; case 2
  1307  0005A4  E0C6               	bz	l1771
  1308  0005A6  0A06               	xorlw	6	; case 4
  1309  0005A8  E0D3               	bz	l263
  1310  0005AA  D7EF               	goto	l270
  1311  0005AC                     l1793:
  1312                           
  1313                           ;LcTLCD.c: 154:  WaitForBusy();
  1314  0005AC  EC92  F004         	call	_WaitForBusy	;wreg free
  1315                           
  1316                           ;LcTLCD.c: 155:  CantaIR(0x80 | Fisics);
  1317  0005B0  5073               	movf	LcGotoXY@Fisics^0,w,c
  1318  0005B2  0980               	iorlw	128
  1319  0005B4  EC55  F005         	call	_CantaIR
  1320                           
  1321                           ;LcTLCD.c: 157:  RowAct = Row;
  1322  0005B8  C06E  F054         	movff	LcGotoXY@Row,_RowAct
  1323                           
  1324                           ;LcTLCD.c: 158:  ColumnAct = Column;
  1325  0005BC  C075  F053         	movff	LcGotoXY@Column,_ColumnAct
  1326  0005C0  0012               	return		;funcret
  1327  0005C2                     __end_of_LcGotoXY:
  1328                           	callstack 0
  1329                           
  1330 ;; *************** function _CantaData *****************
  1331 ;; Defined at:
  1332 ;;		line 245 in file "LcTLCD.c"
  1333 ;; Parameters:    Size  Location     Type
  1334 ;;  Data            1    wreg     unsigned char 
  1335 ;; Auto vars:     Size  Location     Type
  1336 ;;  Data            1    7[COMRAM] unsigned char 
  1337 ;; Return value:  Size  Location     Type
  1338 ;;                  1    wreg      void 
  1339 ;; Registers used:
  1340 ;;		wreg, status,2, status,0, cstack
  1341 ;; Tracked objects:
  1342 ;;		On entry : 0/0
  1343 ;;		On exit  : 0/0
  1344 ;;		Unchanged: 0/0
  1345 ;; Data sizes:     COMRAM   BANK0   BANK1
  1346 ;;      Params:         0       0       0
  1347 ;;      Locals:         1       0       0
  1348 ;;      Temps:          0       0       0
  1349 ;;      Totals:         1       0       0
  1350 ;;Total ram usage:        1 bytes
  1351 ;; Hardware stack levels used: 1
  1352 ;; Hardware stack levels required when called: 3
  1353 ;; This function calls:
  1354 ;;		_CantaPartAlta
  1355 ;;		_CantaPartBaixa
  1356 ;; This function is called by:
  1357 ;;		_LcPutChar
  1358 ;; This function uses a non-reentrant model
  1359 ;;
  1360                           
  1361                           	psect	text7
  1362  000962                     __ptext7:
  1363                           	callstack 0
  1364  000962                     _CantaData:
  1365                           	callstack 24
  1366                           
  1367                           ;incstack = 0
  1368                           ;CantaData@Data stored from wreg
  1369  000962  6E68               	movwf	CantaData@Data^0,c
  1370                           
  1371                           ;LcTLCD.c: 246:  (TRISDbits.TRISD0 = TRISDbits.TRISD1 = TRISDbits.TRISD2 = TRISDbits.TRI
      +                          SD3 = 0);
  1372  000964  9695               	bcf	149,3,c	;volatile
  1373  000966  9495               	bcf	149,2,c	;volatile
  1374  000968  9295               	bcf	149,1,c	;volatile
  1375  00096A  9095               	bcf	149,0,c	;volatile
  1376                           
  1377                           ;LcTLCD.c: 247:  (LATDbits.LATD4 = 1);
  1378  00096C  888C               	bsf	140,4,c	;volatile
  1379                           
  1380                           ;LcTLCD.c: 248:  (LATDbits.LATD5 = 0);
  1381  00096E  9A8C               	bcf	140,5,c	;volatile
  1382                           
  1383                           ;LcTLCD.c: 249:  (LATDbits.LATD6 = 1);
  1384  000970  8C8C               	bsf	140,6,c	;volatile
  1385                           
  1386                           ;LcTLCD.c: 250:  CantaPartAlta(Data);
  1387  000972  5068               	movf	CantaData@Data^0,w,c
  1388  000974  ECE4  F003         	call	_CantaPartAlta
  1389                           
  1390                           ;LcTLCD.c: 251:  (LATDbits.LATD6 = 1);
  1391                           
  1392                           ;LcTLCD.c: 252:  (LATDbits.LATD6 = 0);
  1393                           
  1394                           ;LcTLCD.c: 253:  (LATDbits.LATD6 = 0);
  1395                           
  1396                           ;LcTLCD.c: 254:  (LATDbits.LATD6 = 1);
  1397  000978  D80B               	call	PL30	;call to abstracted procedure
  1398                           
  1399                           ;LcTLCD.c: 255:  CantaPartBaixa(Data);
  1400  00097A  5068               	movf	CantaData@Data^0,w,c
  1401  00097C  ECB1  F003         	call	_CantaPartBaixa
  1402                           
  1403                           ;LcTLCD.c: 256:  (LATDbits.LATD6 = 1);
  1404                           
  1405                           ;LcTLCD.c: 257:  (LATDbits.LATD6 = 0);
  1406                           
  1407                           ;LcTLCD.c: 258:  (TRISDbits.TRISD0 = TRISDbits.TRISD1 = TRISDbits.TRISD2 = TRISDbits.TRI
      +                          SD3 = 1);
  1408  000980  D000               	goto	PL20	;call to abstracted procedure
  1409  000982                     __end_of_CantaData:
  1410                           	callstack 0
  1411  000982                     PL20:
  1412                           	callstack 23
  1413  000982  8C8C               	bsf	140,6,c	;volatile
  1414  000984  9C8C               	bcf	140,6,c	;volatile
  1415  000986  8695               	bsf	149,3,c	;volatile
  1416  000988  8495               	bsf	149,2,c	;volatile
  1417  00098A  8295               	bsf	149,1,c	;volatile
  1418  00098C  8095               	bsf	149,0,c	;volatile
  1419  00098E  0012               	return		;funcret
  1420  000990                     __end_ofPL20:
  1421                           	callstack 0
  1422  000990                     PL30:
  1423                           	callstack 23
  1424  000990  8C8C               	bsf	140,6,c	;volatile
  1425  000992  9C8C               	bcf	140,6,c	;volatile
  1426  000994  9C8C               	bcf	140,6,c	;volatile
  1427  000996  8C8C               	bsf	140,6,c	;volatile
  1428  000998  0012               	return	
  1429  00099A                     __end_ofPL30:
  1430                           	callstack 0
  1431                           
  1432 ;; *************** function _LcCursorOn *****************
  1433 ;; Defined at:
  1434 ;;		line 120 in file "LcTLCD.c"
  1435 ;; Parameters:    Size  Location     Type
  1436 ;;		None
  1437 ;; Auto vars:     Size  Location     Type
  1438 ;;		None
  1439 ;; Return value:  Size  Location     Type
  1440 ;;                  1    wreg      void 
  1441 ;; Registers used:
  1442 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1443 ;; Tracked objects:
  1444 ;;		On entry : 0/0
  1445 ;;		On exit  : 0/0
  1446 ;;		Unchanged: 0/0
  1447 ;; Data sizes:     COMRAM   BANK0   BANK1
  1448 ;;      Params:         0       0       0
  1449 ;;      Locals:         0       0       0
  1450 ;;      Temps:          0       0       0
  1451 ;;      Totals:         0       0       0
  1452 ;;Total ram usage:        0 bytes
  1453 ;; Hardware stack levels used: 1
  1454 ;; Hardware stack levels required when called: 4
  1455 ;; This function calls:
  1456 ;;		_CantaIR
  1457 ;;		_WaitForBusy
  1458 ;; This function is called by:
  1459 ;;		_menuMotor
  1460 ;; This function uses a non-reentrant model
  1461 ;;
  1462                           
  1463                           	psect	text8
  1464  000B26                     __ptext8:
  1465                           	callstack 0
  1466  000B26                     _LcCursorOn:
  1467                           	callstack 25
  1468                           
  1469                           ;LcTLCD.c: 123:  WaitForBusy();
  1470                           
  1471                           ;incstack = 0
  1472  000B26  EC92  F004         	call	_WaitForBusy	;wreg free
  1473                           
  1474                           ;LcTLCD.c: 124:  CantaIR(0x08 | 0x04 | 0x02);
  1475  000B2A  0E0E               	movlw	14
  1476  000B2C  EF55  F005         	goto	_CantaIR
  1477  000B30                     __end_of_LcCursorOn:
  1478                           	callstack 0
  1479                           
  1480 ;; *************** function _KeGetGenericValue *****************
  1481 ;; Defined at:
  1482 ;;		line 211 in file "keypad.c"
  1483 ;; Parameters:    Size  Location     Type
  1484 ;;		None
  1485 ;; Auto vars:     Size  Location     Type
  1486 ;;		None
  1487 ;; Return value:  Size  Location     Type
  1488 ;;                  1    wreg      unsigned char 
  1489 ;; Registers used:
  1490 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1491 ;; Tracked objects:
  1492 ;;		On entry : 0/0
  1493 ;;		On exit  : 0/0
  1494 ;;		Unchanged: 0/0
  1495 ;; Data sizes:     COMRAM   BANK0   BANK1
  1496 ;;      Params:         0       0       0
  1497 ;;      Locals:         0       0       0
  1498 ;;      Temps:          0       0       0
  1499 ;;      Totals:         0       0       0
  1500 ;;Total ram usage:        0 bytes
  1501 ;; Hardware stack levels used: 1
  1502 ;; Hardware stack levels required when called: 3
  1503 ;; This function calls:
  1504 ;;		_getColumn
  1505 ;;		_getGenericKey
  1506 ;; This function is called by:
  1507 ;;		_menuMotor
  1508 ;; This function uses a non-reentrant model
  1509 ;;
  1510                           
  1511                           	psect	text9
  1512  000B1A                     __ptext9:
  1513                           	callstack 0
  1514  000B1A                     _KeGetGenericValue:
  1515                           	callstack 26
  1516                           
  1517                           ;keypad.c: 212:     return getGenericKey(row,getColumn());
  1518                           
  1519                           ;incstack = 0
  1520  000B1A  EC98  F005         	call	_getColumn	;wreg free
  1521  000B1E  6E66               	movwf	getGenericKey@column^0,c
  1522  000B20  505F               	movf	_row^0,w,c
  1523  000B22  EF71  F005         	goto	_getGenericKey
  1524  000B26                     __end_of_KeGetGenericValue:
  1525                           	callstack 0
  1526                           
  1527 ;; *************** function _KeGetCharValue *****************
  1528 ;; Defined at:
  1529 ;;		line 208 in file "keypad.c"
  1530 ;; Parameters:    Size  Location     Type
  1531 ;;		None
  1532 ;; Auto vars:     Size  Location     Type
  1533 ;;		None
  1534 ;; Return value:  Size  Location     Type
  1535 ;;                  1    wreg      unsigned char 
  1536 ;; Registers used:
  1537 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1538 ;; Tracked objects:
  1539 ;;		On entry : 0/0
  1540 ;;		On exit  : 0/0
  1541 ;;		Unchanged: 0/0
  1542 ;; Data sizes:     COMRAM   BANK0   BANK1
  1543 ;;      Params:         0       0       0
  1544 ;;      Locals:         0       0       0
  1545 ;;      Temps:          0       0       0
  1546 ;;      Totals:         0       0       0
  1547 ;;Total ram usage:        0 bytes
  1548 ;; Hardware stack levels used: 1
  1549 ;; Hardware stack levels required when called: 3
  1550 ;; This function calls:
  1551 ;;		_getColumn
  1552 ;;		_getFullValue
  1553 ;;		_getGenericKey
  1554 ;; This function is called by:
  1555 ;;		_menuMotor
  1556 ;; This function uses a non-reentrant model
  1557 ;;
  1558                           
  1559                           	psect	text10
  1560  000B0A                     __ptext10:
  1561                           	callstack 0
  1562  000B0A                     _KeGetCharValue:
  1563                           	callstack 26
  1564                           
  1565                           ;keypad.c: 209:     return getFullValue (getGenericKey(row,getColumn()));
  1566                           
  1567                           ;incstack = 0
  1568  000B0A  EC98  F005         	call	_getColumn	;wreg free
  1569  000B0E  6E66               	movwf	getGenericKey@column^0,c
  1570  000B10  505F               	movf	_row^0,w,c
  1571  000B12  EC71  F005         	call	_getGenericKey
  1572  000B16  EF17  F004         	goto	_getFullValue
  1573  000B1A                     __end_of_KeGetCharValue:
  1574                           	callstack 0
  1575                           
  1576 ;; *************** function _getFullValue *****************
  1577 ;; Defined at:
  1578 ;;		line 219 in file "keypad.c"
  1579 ;; Parameters:    Size  Location     Type
  1580 ;;  generic         1    wreg     unsigned char 
  1581 ;; Auto vars:     Size  Location     Type
  1582 ;;  generic         1    9[COMRAM] unsigned char 
  1583 ;; Return value:  Size  Location     Type
  1584 ;;                  1    wreg      unsigned char 
  1585 ;; Registers used:
  1586 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
  1587 ;; Tracked objects:
  1588 ;;		On entry : 0/0
  1589 ;;		On exit  : 0/0
  1590 ;;		Unchanged: 0/0
  1591 ;; Data sizes:     COMRAM   BANK0   BANK1
  1592 ;;      Params:         0       0       0
  1593 ;;      Locals:         1       0       0
  1594 ;;      Temps:          4       0       0
  1595 ;;      Totals:         5       0       0
  1596 ;;Total ram usage:        5 bytes
  1597 ;; Hardware stack levels used: 1
  1598 ;; Hardware stack levels required when called: 2
  1599 ;; This function calls:
  1600 ;;		Nothing
  1601 ;; This function is called by:
  1602 ;;		_KeGetCharValue
  1603 ;; This function uses a non-reentrant model
  1604 ;;
  1605                           
  1606                           	psect	text11
  1607  00082E                     __ptext11:
  1608                           	callstack 0
  1609  00082E                     _getFullValue:
  1610                           	callstack 26
  1611                           
  1612                           ;incstack = 0
  1613                           ;getFullValue@generic stored from wreg
  1614  00082E  6E6A               	movwf	getFullValue@generic^0,c
  1615                           
  1616                           ;keypad.c: 221:     if (generic - '0' >= 2 && generic - '0' <= 9){
  1617  000830  D81F               	call	PL10	;call to abstracted procedure
  1618  000832  E103               	bnz	u250
  1619  000834  0E02               	movlw	2
  1620  000836  5C68               	subwf	(??_getFullValue+2)^0,w,c
  1621  000838  E30A               	bnc	l1239
  1622  00083A                     u250:
  1623  00083A  D81A               	call	PL10	;call to abstracted procedure
  1624  00083C  E108               	bnz	l1239
  1625  00083E  0E0A               	movlw	10
  1626  000840  5C68               	subwf	(??_getFullValue+2)^0,w,c
  1627  000842  E205               	bc	l1239
  1628                           
  1629                           ;keypad.c: 222:         if (SMSTABLE[generic - '0' - 1][(numPresses-1)] == '\0'){
  1630  000844  D806               	call	PL4	;call to abstracted procedure
  1631  000846  E105               	bnz	PL4
  1632                           
  1633                           ;keypad.c: 223:             numPresses = 1;
  1634  000848  0E01               	movlw	1
  1635  00084A  6E59               	movwf	_numPresses^0,c
  1636  00084C                     l1235:
  1637                           
  1638                           ;keypad.c: 225:         return SMSTABLE[generic - '0' - 1][(numPresses-1)];
  1639  00084C  D002               	goto	PL4	;call to abstracted procedure
  1640  00084E                     l1239:
  1641                           
  1642                           ;keypad.c: 227:     return generic;
  1643  00084E  506A               	movf	getFullValue@generic^0,w,c
  1644  000850  0012               	return		;funcret
  1645  000852                     __end_of_getFullValue:
  1646                           	callstack 0
  1647  000852                     PL4:
  1648                           	callstack 26
  1649  000852  506A               	movf	getFullValue@generic^0,w,c
  1650  000854  0D06               	mullw	6
  1651  000856  50F3               	movf	243,w,c
  1652  000858  0F19               	addlw	low _SMSTABLE
  1653  00085A  2459               	addwf	_numPresses^0,w,c
  1654  00085C  6E66               	movwf	??_getFullValue^0,c
  1655  00085E  0ED9               	movlw	217
  1656  000860  2666               	addwf	??_getFullValue^0,f,c
  1657  000862  C066  FFF6         	movff	??_getFullValue,tblptrl
  1658  000866                     	if	1	;There is more than 1 active tblptr byte
  1659  000866  0E02               	movlw	high __smallconst
  1660  000868  6EF7               	movwf	tblptrh,c
  1661  00086A                     	endif
  1662  00086A                     	if	0	;tblptru may be non-zero
  1663  00086A                     	endif
  1664  00086A                     	if	0	;tblptru may be non-zero
  1665  00086A                     	endif
  1666  00086A  0008               	tblrd		*
  1667  00086C  50F5               	movf	tablat,w,c
  1668  00086E  0012               	return	
  1669  000870                     __end_ofPL4:
  1670                           	callstack 0
  1671  000870                     PL10:
  1672                           	callstack 26
  1673  000870  0ED0               	movlw	208
  1674  000872  6E66               	movwf	??_getFullValue^0,c
  1675  000874  6867               	setf	(??_getFullValue+1)^0,c
  1676  000876  506A               	movf	getFullValue@generic^0,w,c
  1677  000878  6E68               	movwf	(??_getFullValue+2)^0,c
  1678  00087A  6A69               	clrf	(??_getFullValue+3)^0,c
  1679  00087C  5066               	movf	??_getFullValue^0,w,c
  1680  00087E  2668               	addwf	(??_getFullValue+2)^0,f,c
  1681  000880  5067               	movf	(??_getFullValue+1)^0,w,c
  1682  000882  2269               	addwfc	(??_getFullValue+3)^0,f,c
  1683  000884  5069               	movf	(??_getFullValue+3)^0,w,c
  1684  000886  0012               	return	
  1685  000888                     __end_ofPL10:
  1686                           	callstack 0
  1687                           
  1688 ;; *************** function _initKeypad *****************
  1689 ;; Defined at:
  1690 ;;		line 29 in file "keypad.c"
  1691 ;; Parameters:    Size  Location     Type
  1692 ;;		None
  1693 ;; Auto vars:     Size  Location     Type
  1694 ;;		None
  1695 ;; Return value:  Size  Location     Type
  1696 ;;                  1    wreg      void 
  1697 ;; Registers used:
  1698 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1699 ;; Tracked objects:
  1700 ;;		On entry : 0/0
  1701 ;;		On exit  : 0/0
  1702 ;;		Unchanged: 0/0
  1703 ;; Data sizes:     COMRAM   BANK0   BANK1
  1704 ;;      Params:         0       0       0
  1705 ;;      Locals:         0       0       0
  1706 ;;      Temps:          0       0       0
  1707 ;;      Totals:         0       0       0
  1708 ;;Total ram usage:        0 bytes
  1709 ;; Hardware stack levels used: 1
  1710 ;; Hardware stack levels required when called: 3
  1711 ;; This function calls:
  1712 ;;		_TiGetTimer
  1713 ;; This function is called by:
  1714 ;;		_main
  1715 ;; This function uses a non-reentrant model
  1716 ;;
  1717                           
  1718                           	psect	text12
  1719  0009F2                     __ptext12:
  1720                           	callstack 0
  1721  0009F2                     _initKeypad:
  1722                           	callstack 27
  1723                           
  1724                           ;keypad.c: 30:     row = 0x11;
  1725                           
  1726                           ;incstack = 0
  1727  0009F2  0E11               	movlw	17
  1728  0009F4  6E5F               	movwf	_row^0,c
  1729                           
  1730                           ;keypad.c: 31:     INTCON2bits.RBPU = 0;
  1731  0009F6  9EF1               	bcf	241,7,c	;volatile
  1732                           
  1733                           ;keypad.c: 32:     TRISCbits.TRISC0 = 0;
  1734  0009F8  9094               	bcf	148,0,c	;volatile
  1735                           
  1736                           ;keypad.c: 33:     TRISCbits.TRISC1 = 0;
  1737  0009FA  9294               	bcf	148,1,c	;volatile
  1738                           
  1739                           ;keypad.c: 34:     TRISCbits.TRISC2 = 0;
  1740  0009FC  9494               	bcf	148,2,c	;volatile
  1741                           
  1742                           ;keypad.c: 35:     TRISCbits.TRISC3 = 0;
  1743  0009FE  9694               	bcf	148,3,c	;volatile
  1744                           
  1745                           ;keypad.c: 37:     TRISBbits.TRISB0 = 1;
  1746  000A00  8093               	bsf	147,0,c	;volatile
  1747                           
  1748                           ;keypad.c: 38:     TRISBbits.TRISB1 = 1;
  1749  000A02  8293               	bsf	147,1,c	;volatile
  1750                           
  1751                           ;keypad.c: 39:     TRISBbits.TRISB2 = 1;
  1752  000A04  8493               	bsf	147,2,c	;volatile
  1753                           
  1754                           ;keypad.c: 40:     TRISBbits.TRISB3 = 0;
  1755  000A06  9693               	bcf	147,3,c	;volatile
  1756                           
  1757                           ;keypad.c: 41:     TRISBbits.TRISB4 = 0;
  1758  000A08  9893               	bcf	147,4,c	;volatile
  1759                           
  1760                           ;keypad.c: 42:     TRISBbits.TRISB5 = 0;
  1761  000A0A  9A93               	bcf	147,5,c	;volatile
  1762                           
  1763                           ;keypad.c: 43:     TRISBbits.TRISB6 = 0;
  1764  000A0C  9C93               	bcf	147,6,c	;volatile
  1765                           
  1766                           ;keypad.c: 44:     timerBounces = TiGetTimer();
  1767  000A0E  ECE3  F004         	call	_TiGetTimer	;wreg free
  1768  000A12  6E5E               	movwf	_timerBounces^0,c
  1769                           
  1770                           ;keypad.c: 45:     timer_SMS = TiGetTimer();
  1771  000A14  ECE3  F004         	call	_TiGetTimer	;wreg free
  1772  000A18  6E5D               	movwf	_timer_SMS^0,c
  1773  000A1A  0012               	return		;funcret
  1774  000A1C                     __end_of_initKeypad:
  1775                           	callstack 0
  1776                           
  1777 ;; *************** function _TiInitTimer *****************
  1778 ;; Defined at:
  1779 ;;		line 17 in file "TTimer.c"
  1780 ;; Parameters:    Size  Location     Type
  1781 ;;		None
  1782 ;; Auto vars:     Size  Location     Type
  1783 ;;		None
  1784 ;; Return value:  Size  Location     Type
  1785 ;;                  1    wreg      void 
  1786 ;; Registers used:
  1787 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  1788 ;; Tracked objects:
  1789 ;;		On entry : 0/0
  1790 ;;		On exit  : 0/0
  1791 ;;		Unchanged: 0/0
  1792 ;; Data sizes:     COMRAM   BANK0   BANK1
  1793 ;;      Params:         0       0       0
  1794 ;;      Locals:         0       0       0
  1795 ;;      Temps:          0       0       0
  1796 ;;      Totals:         0       0       0
  1797 ;;Total ram usage:        0 bytes
  1798 ;; Hardware stack levels used: 1
  1799 ;; Hardware stack levels required when called: 2
  1800 ;; This function calls:
  1801 ;;		Nothing
  1802 ;; This function is called by:
  1803 ;;		_main
  1804 ;; This function uses a non-reentrant model
  1805 ;;
  1806                           
  1807                           	psect	text13
  1808  000A1C                     __ptext13:
  1809                           	callstack 0
  1810  000A1C                     _TiInitTimer:
  1811                           	callstack 28
  1812                           
  1813                           ;TTimer.c: 20:     RCONbits.IPEN = 0;
  1814                           
  1815                           ;incstack = 0
  1816  000A1C  9ED0               	bcf	208,7,c	;volatile
  1817                           
  1818                           ;TTimer.c: 21:     INTCONbits.GIE_GIEH = 1;
  1819  000A1E  8EF2               	bsf	242,7,c	;volatile
  1820                           
  1821                           ;TTimer.c: 22:     INTCONbits.PEIE_GIEL = 1;
  1822  000A20  8CF2               	bsf	242,6,c	;volatile
  1823                           
  1824                           ;TTimer.c: 23:     INTCONbits.TMR0IE = 1;
  1825  000A22  8AF2               	bsf	242,5,c	;volatile
  1826                           
  1827                           ;TTimer.c: 24:     INTCONbits.TMR0IF = 0;
  1828  000A24  94F2               	bcf	242,2,c	;volatile
  1829                           
  1830                           ;TTimer.c: 25:     T0CON = 0x08;
  1831  000A26  0E08               	movlw	8
  1832  000A28  6ED5               	movwf	213,c	;volatile
  1833                           
  1834                           ;TTimer.c: 27:     TMR0H = 0xD8;
  1835                           
  1836                           ;TTimer.c: 28:     TMR0L = 0xF0;
  1837  000A2A  EC8D  F004         	call	PL40	;call to abstracted procedure
  1838                           
  1839                           ;TTimer.c: 29:     T0CONbits.TMR0ON = 1;
  1840  000A2E  8ED5               	bsf	213,7,c	;volatile
  1841                           
  1842                           ;TTimer.c: 31:     for (counter=0;counter<25;counter++) {
  1843  000A30  6A60               	clrf	_counter^0,c
  1844  000A32                     l1393:
  1845  000A32  0E18               	movlw	24
  1846  000A34  6460               	cpfsgt	_counter^0,c
  1847  000A36  D001               	goto	l1397
  1848  000A38  0C18               	retlw	24
  1849  000A3A                     l1397:
  1850                           
  1851                           ;TTimer.c: 32:  s_Timers[counter].b_busy=0;
  1852  000A3A  ECF2  F004         	call	PL6	;call to abstracted procedure
  1853  000A3E  6ADF               	clrf	indf2,c
  1854                           
  1855                           ;TTimer.c: 33:     }
  1856  000A40  2A60               	incf	_counter^0,f,c
  1857  000A42  D7F7               	goto	l1393
  1858  000A44                     __end_of_TiInitTimer:
  1859                           	callstack 0
  1860                           
  1861 ;; *************** function _SMSMotor *****************
  1862 ;; Defined at:
  1863 ;;		line 137 in file "keypad.c"
  1864 ;; Parameters:    Size  Location     Type
  1865 ;;		None
  1866 ;; Auto vars:     Size  Location     Type
  1867 ;;		None
  1868 ;; Return value:  Size  Location     Type
  1869 ;;                  1    wreg      void 
  1870 ;; Registers used:
  1871 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1872 ;; Tracked objects:
  1873 ;;		On entry : 0/0
  1874 ;;		On exit  : 0/0
  1875 ;;		Unchanged: 0/0
  1876 ;; Data sizes:     COMRAM   BANK0   BANK1
  1877 ;;      Params:         0       0       0
  1878 ;;      Locals:         0       0       0
  1879 ;;      Temps:          2       0       0
  1880 ;;      Totals:         2       0       0
  1881 ;;Total ram usage:        2 bytes
  1882 ;; Hardware stack levels used: 1
  1883 ;; Hardware stack levels required when called: 3
  1884 ;; This function calls:
  1885 ;;		_TiGetTics
  1886 ;;		_TiResetTics
  1887 ;;		_getColumn
  1888 ;;		_getGenericKey
  1889 ;; This function is called by:
  1890 ;;		_main
  1891 ;; This function uses a non-reentrant model
  1892 ;;
  1893                           
  1894                           	psect	text14
  1895  0005C2                     __ptext14:
  1896                           	callstack 0
  1897  0005C2                     _SMSMotor:
  1898                           	callstack 27
  1899                           
  1900                           ;keypad.c: 138:     switch(stateSMS){
  1901                           
  1902                           ;incstack = 0
  1903  0005C2  D03C               	goto	l2011
  1904  0005C4                     l158:
  1905                           
  1906                           ;keypad.c: 141:             LATC = available;
  1907  0005C4  C079  FF8B         	movff	_available,3979	;volatile
  1908                           
  1909                           ;keypad.c: 142:             if (TiGetTics(timer_SMS)>=1000){
  1910  0005C8  505D               	movf	_timer_SMS^0,w,c
  1911  0005CA  EC22  F005         	call	_TiGetTics
  1912  0005CE  BE67               	btfsc	(?_TiGetTics+1)^0,7,c
  1913  0005D0  D009               	goto	l1975
  1914  0005D2  0EE8               	movlw	232
  1915  0005D4  5C66               	subwf	?_TiGetTics^0,w,c
  1916  0005D6  0E03               	movlw	3
  1917  0005D8  5867               	subwfb	(?_TiGetTics+1)^0,w,c
  1918  0005DA  E304               	bnc	l1975
  1919                           
  1920                           ;keypad.c: 144:                 previous = 0;
  1921  0005DC  6A5B               	clrf	_previous^0,c
  1922                           
  1923                           ;keypad.c: 145:                 numPresses = 0;
  1924  0005DE  6A59               	clrf	_numPresses^0,c
  1925                           
  1926                           ;keypad.c: 146:                 available = 0;
  1927  0005E0  6A79               	clrf	_available^0,c
  1928  0005E2  D01A               	goto	l1997
  1929  0005E4                     l1975:
  1930                           
  1931                           ;keypad.c: 150:                 if(pressed){
  1932  0005E4  505A               	movf	_pressed^0,w,c
  1933  0005E6  E01B               	bz	l161
  1934                           
  1935                           ;keypad.c: 151:                     stateSMS=1;
  1936  0005E8  0E01               	movlw	1
  1937  0005EA  6E57               	movwf	_stateSMS^0,c
  1938                           
  1939                           ;keypad.c: 152:                     currentKey = getGenericKey(row,getColumn());
  1940  0005EC  EC98  F005         	call	_getColumn	;wreg free
  1941  0005F0  6E66               	movwf	getGenericKey@column^0,c
  1942  0005F2  505F               	movf	_row^0,w,c
  1943  0005F4  EC71  F005         	call	_getGenericKey
  1944  0005F8  6E5C               	movwf	_currentKey^0,c
  1945                           
  1946                           ;keypad.c: 153:                     if(numPresses != 0 && previous != currentKey ){
  1947  0005FA  5059               	movf	_numPresses^0,w,c
  1948  0005FC  E00C               	bz	l1995
  1949  0005FE  505C               	movf	_currentKey^0,w,c
  1950  000600  185B               	xorwf	_previous^0,w,c
  1951  000602  E009               	bz	l1995
  1952                           
  1953                           ;keypad.c: 155:                         available = 0;
  1954  000604  6A79               	clrf	_available^0,c
  1955                           
  1956                           ;keypad.c: 156:                         if (previous == '#') available = 1;
  1957  000606  0E23               	movlw	35
  1958  000608  185B               	xorwf	_previous^0,w,c
  1959  00060A  E102               	bnz	l1991
  1960  00060C  0E01               	movlw	1
  1961  00060E  6E79               	movwf	_available^0,c
  1962  000610                     l1991:
  1963                           
  1964                           ;keypad.c: 157:                         previous = currentKey;
  1965  000610  C05C  F05B         	movff	_currentKey,_previous
  1966                           
  1967                           ;keypad.c: 159:                         numPresses = 0;
  1968  000614  6A59               	clrf	_numPresses^0,c
  1969  000616                     l1995:
  1970                           
  1971                           ;keypad.c: 161:                     available++;
  1972  000616  2A79               	incf	_available^0,f,c
  1973  000618                     l1997:
  1974                           
  1975                           ;keypad.c: 163:                     TiResetTics(timer_SMS);
  1976  000618  505D               	movf	_timer_SMS^0,w,c
  1977  00061A  EF63  F005         	goto	_TiResetTics
  1978  00061E                     l161:
  1979                           
  1980                           ;keypad.c: 166:                   previous=currentKey;
  1981  00061E  C05C  F05B         	movff	_currentKey,_previous
  1982  000622  0012               	return	
  1983  000624                     l1999:
  1984                           
  1985                           ;keypad.c: 178:             numPresses++;
  1986  000624  2A59               	incf	_numPresses^0,f,c
  1987                           
  1988                           ;keypad.c: 179:             stateSMS = 2;
  1989  000626  0E02               	movlw	2
  1990  000628  6E57               	movwf	_stateSMS^0,c
  1991                           
  1992                           ;keypad.c: 180:             break;
  1993  00062A  0C02               	retlw	2
  1994  00062C                     l2003:
  1995                           
  1996                           ;keypad.c: 183:             if (!pressed){
  1997  00062C  505A               	movf	_pressed^0,w,c
  1998  00062E  A4D8               	btfss	status,2,c
  1999  000630  0012               	return	
  2000                           
  2001                           ;keypad.c: 184:                 TiResetTics(timer_SMS);
  2002  000632  505D               	movf	_timer_SMS^0,w,c
  2003  000634  EC63  F005         	call	_TiResetTics
  2004                           
  2005                           ;keypad.c: 186:                 stateSMS = 0;
  2006  000638  6A57               	clrf	_stateSMS^0,c
  2007  00063A  0012               	return	
  2008  00063C                     l2011:
  2009  00063C  5057               	movf	_stateSMS^0,w,c
  2010  00063E  6E6D               	movwf	??_SMSMotor^0,c
  2011  000640  6A6E               	clrf	(??_SMSMotor+1)^0,c
  2012                           
  2013                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2014                           ; Switch size 1, requested type "space"
  2015                           ; Number of cases is 1, Range of values is 0 to 0
  2016                           ; switch strategies available:
  2017                           ; Name         Instructions Cycles
  2018                           ; simple_byte            4     3 (average)
  2019                           ;	Chosen strategy is simple_byte
  2020  000642  506E               	movf	(??_SMSMotor+1)^0,w,c
  2021  000644  A4D8               	btfss	status,2,c
  2022  000646  0012               	return	
  2023                           
  2024                           ; Switch size 1, requested type "space"
  2025                           ; Number of cases is 3, Range of values is 0 to 2
  2026                           ; switch strategies available:
  2027                           ; Name         Instructions Cycles
  2028                           ; simple_byte           10     6 (average)
  2029                           ;	Chosen strategy is simple_byte
  2030  000648  506D               	movf	??_SMSMotor^0,w,c
  2031  00064A  E0BC               	bz	l158
  2032  00064C  0A01               	xorlw	1	; case 1
  2033  00064E  E0EA               	bz	l1999
  2034  000650  0A03               	xorlw	3	; case 2
  2035  000652  E0EC               	bz	l2003
  2036  000654  0012               	return		;funcret
  2037  000656                     __end_of_SMSMotor:
  2038                           	callstack 0
  2039                           
  2040 ;; *************** function _getGenericKey *****************
  2041 ;; Defined at:
  2042 ;;		line 215 in file "keypad.c"
  2043 ;; Parameters:    Size  Location     Type
  2044 ;;  row             1    wreg     unsigned char 
  2045 ;;  column          1    5[COMRAM] unsigned char 
  2046 ;; Auto vars:     Size  Location     Type
  2047 ;;  row             1    7[COMRAM] unsigned char 
  2048 ;; Return value:  Size  Location     Type
  2049 ;;                  1    wreg      unsigned char 
  2050 ;; Registers used:
  2051 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
  2052 ;; Tracked objects:
  2053 ;;		On entry : 0/0
  2054 ;;		On exit  : 0/0
  2055 ;;		Unchanged: 0/0
  2056 ;; Data sizes:     COMRAM   BANK0   BANK1
  2057 ;;      Params:         1       0       0
  2058 ;;      Locals:         1       0       0
  2059 ;;      Temps:          1       0       0
  2060 ;;      Totals:         3       0       0
  2061 ;;Total ram usage:        3 bytes
  2062 ;; Hardware stack levels used: 1
  2063 ;; Hardware stack levels required when called: 2
  2064 ;; This function calls:
  2065 ;;		Nothing
  2066 ;; This function is called by:
  2067 ;;		_SMSMotor
  2068 ;;		_KeGetCharValue
  2069 ;;		_KeGetGenericValue
  2070 ;; This function uses a non-reentrant model
  2071 ;;
  2072                           
  2073                           	psect	text15
  2074  000AE2                     __ptext15:
  2075                           	callstack 0
  2076  000AE2                     _getGenericKey:
  2077                           	callstack 26
  2078                           
  2079                           ;incstack = 0
  2080                           ;getGenericKey@row stored from wreg
  2081  000AE2  6E68               	movwf	getGenericKey@row^0,c
  2082                           
  2083                           ;keypad.c: 216:     return TABLE[(row*3)+column];
  2084  000AE4  5068               	movf	getGenericKey@row^0,w,c
  2085  000AE6  0D03               	mullw	3
  2086  000AE8  50F3               	movf	243,w,c
  2087  000AEA  0F0D               	addlw	low _TABLE
  2088  000AEC  2466               	addwf	getGenericKey@column^0,w,c
  2089  000AEE  6E67               	movwf	??_getGenericKey^0,c
  2090  000AF0  C067  FFF6         	movff	??_getGenericKey,tblptrl
  2091  000AF4                     	if	1	;There is more than 1 active tblptr byte
  2092  000AF4  EF51  F003         	goto	PL8	;call to abstracted procedure
  2093  000AF8                     __end_of_getGenericKey:
  2094                           	callstack 0
  2095                           
  2096 ;; *************** function _getColumn *****************
  2097 ;; Defined at:
  2098 ;;		line 198 in file "keypad.c"
  2099 ;; Parameters:    Size  Location     Type
  2100 ;;		None
  2101 ;; Auto vars:     Size  Location     Type
  2102 ;;		None
  2103 ;; Return value:  Size  Location     Type
  2104 ;;                  1    wreg      unsigned char 
  2105 ;; Registers used:
  2106 ;;		wreg
  2107 ;; Tracked objects:
  2108 ;;		On entry : 0/0
  2109 ;;		On exit  : 0/0
  2110 ;;		Unchanged: 0/0
  2111 ;; Data sizes:     COMRAM   BANK0   BANK1
  2112 ;;      Params:         0       0       0
  2113 ;;      Locals:         0       0       0
  2114 ;;      Temps:          0       0       0
  2115 ;;      Totals:         0       0       0
  2116 ;;Total ram usage:        0 bytes
  2117 ;; Hardware stack levels used: 1
  2118 ;; Hardware stack levels required when called: 2
  2119 ;; This function calls:
  2120 ;;		Nothing
  2121 ;; This function is called by:
  2122 ;;		_SMSMotor
  2123 ;;		_KeGetCharValue
  2124 ;;		_KeGetGenericValue
  2125 ;; This function uses a non-reentrant model
  2126 ;;
  2127                           
  2128                           	psect	text16
  2129  000B30                     __ptext16:
  2130                           	callstack 0
  2131  000B30                     _getColumn:
  2132                           	callstack 26
  2133                           
  2134                           ;keypad.c: 199:     if (!PORTBbits.RB0) return 0;
  2135                           
  2136                           ;incstack = 0
  2137  000B30  A081               	btfss	129,0,c	;volatile
  2138  000B32  0C00               	retlw	0
  2139                           
  2140                           ;keypad.c: 200:     if (!PORTBbits.RB1) return 1;
  2141  000B34  A281               	btfss	129,1,c	;volatile
  2142  000B36  0C01               	retlw	1
  2143                           
  2144                           ;keypad.c: 201:     return 2;
  2145  000B38  0C02               	retlw	2	;funcret
  2146  000B3A                     __end_of_getColumn:
  2147                           	callstack 0
  2148                           
  2149 ;; *************** function _LcInit *****************
  2150 ;; Defined at:
  2151 ;;		line 68 in file "LcTLCD.c"
  2152 ;; Parameters:    Size  Location     Type
  2153 ;;  rows            1    wreg     unsigned char 
  2154 ;;  columns         1   17[COMRAM] unsigned char 
  2155 ;; Auto vars:     Size  Location     Type
  2156 ;;  rows            1   18[COMRAM] unsigned char 
  2157 ;;  i               2   19[COMRAM] int 
  2158 ;; Return value:  Size  Location     Type
  2159 ;;                  1    wreg      void 
  2160 ;; Registers used:
  2161 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2162 ;; Tracked objects:
  2163 ;;		On entry : 0/0
  2164 ;;		On exit  : 0/0
  2165 ;;		Unchanged: 0/0
  2166 ;; Data sizes:     COMRAM   BANK0   BANK1
  2167 ;;      Params:         1       0       0
  2168 ;;      Locals:         3       0       0
  2169 ;;      Temps:          0       0       0
  2170 ;;      Totals:         4       0       0
  2171 ;;Total ram usage:        4 bytes
  2172 ;; Hardware stack levels used: 1
  2173 ;; Hardware stack levels required when called: 4
  2174 ;; This function calls:
  2175 ;;		_CantaIR
  2176 ;;		_EscriuPrimeraOrdre
  2177 ;;		_Espera
  2178 ;;		_TiGetTimer
  2179 ;;		_WaitForBusy
  2180 ;; This function is called by:
  2181 ;;		_main
  2182 ;; This function uses a non-reentrant model
  2183 ;;
  2184                           
  2185                           	psect	text17
  2186  000468                     __ptext17:
  2187                           	callstack 0
  2188  000468                     _LcInit:
  2189                           	callstack 26
  2190                           
  2191                           ;incstack = 0
  2192                           ;LcInit@rows stored from wreg
  2193  000468  6E73               	movwf	LcInit@rows^0,c
  2194                           
  2195                           ;LcTLCD.c: 74:  int i;;LcTLCD.c: 75:  Timer = TiGetTimer();
  2196  00046A  ECE3  F004         	call	_TiGetTimer	;wreg free
  2197  00046E  6E4C               	movwf	_Timer^0,c
  2198  000470  6A4D               	clrf	(_Timer+1)^0,c
  2199                           
  2200                           ;LcTLCD.c: 76:  Rows = rows; Columns = columns;
  2201  000472  C073  F056         	movff	LcInit@rows,_Rows
  2202  000476  C072  F055         	movff	LcInit@columns,_Columns
  2203                           
  2204                           ;LcTLCD.c: 77:  RowAct = ColumnAct = 0;
  2205  00047A  6A53               	clrf	_ColumnAct^0,c
  2206  00047C  6A54               	clrf	_RowAct^0,c
  2207                           
  2208                           ;LcTLCD.c: 78:  (TRISDbits.TRISD4 = TRISDbits.TRISD5 = TRISDbits.TRISD6 = 0);
  2209  00047E  9C95               	bcf	149,6,c	;volatile
  2210  000480  9A95               	bcf	149,5,c	;volatile
  2211  000482  9895               	bcf	149,4,c	;volatile
  2212                           
  2213                           ;LcTLCD.c: 79:  for (i = 0; i < 2; i++) {
  2214  000484  6A74               	clrf	LcInit@i^0,c
  2215  000486  6A75               	clrf	(LcInit@i+1)^0,c
  2216  000488                     l1935:
  2217                           
  2218                           ;LcTLCD.c: 80:   Espera(Timer, 100);
  2219  000488  D84C               	call	PL2	;call to abstracted procedure
  2220  00048A  0E64               	movlw	100
  2221  00048C  6E6F               	movwf	Espera@ms^0,c
  2222  00048E  EC45  F005         	call	_Espera	;wreg free
  2223                           
  2224                           ;LcTLCD.c: 83:   EscriuPrimeraOrdre(0x02 | 0x01);
  2225  000492  0E03               	movlw	3
  2226  000494  EC73  F003         	call	_EscriuPrimeraOrdre
  2227                           
  2228                           ;LcTLCD.c: 84:   Espera(Timer, 5);
  2229  000498  D844               	call	PL2	;call to abstracted procedure
  2230  00049A  0E05               	movlw	5
  2231  00049C  6E6F               	movwf	Espera@ms^0,c
  2232  00049E  EC45  F005         	call	_Espera	;wreg free
  2233                           
  2234                           ;LcTLCD.c: 85:   EscriuPrimeraOrdre(0x02 | 0x01);
  2235  0004A2  0E03               	movlw	3
  2236  0004A4  EC73  F003         	call	_EscriuPrimeraOrdre
  2237                           
  2238                           ;LcTLCD.c: 86:   Espera(Timer, 1);
  2239  0004A8  D83C               	call	PL2	;call to abstracted procedure
  2240  0004AA  0E01               	movlw	1
  2241  0004AC  6E6F               	movwf	Espera@ms^0,c
  2242  0004AE  EC45  F005         	call	_Espera	;wreg free
  2243                           
  2244                           ;LcTLCD.c: 87:   EscriuPrimeraOrdre(0x02 | 0x01);
  2245  0004B2  0E03               	movlw	3
  2246  0004B4  EC73  F003         	call	_EscriuPrimeraOrdre
  2247                           
  2248                           ;LcTLCD.c: 88:   Espera(Timer, 1);
  2249  0004B8  D834               	call	PL2	;call to abstracted procedure
  2250  0004BA  0E01               	movlw	1
  2251  0004BC  6E6F               	movwf	Espera@ms^0,c
  2252  0004BE  EC45  F005         	call	_Espera	;wreg free
  2253                           
  2254                           ;LcTLCD.c: 91:   EscriuPrimeraOrdre(0x02);
  2255  0004C2  0E02               	movlw	2
  2256  0004C4  EC73  F003         	call	_EscriuPrimeraOrdre
  2257                           
  2258                           ;LcTLCD.c: 92:   Espera(Timer, 1);
  2259  0004C8  D82C               	call	PL2	;call to abstracted procedure
  2260  0004CA  0E01               	movlw	1
  2261  0004CC  6E6F               	movwf	Espera@ms^0,c
  2262  0004CE  EC45  F005         	call	_Espera	;wreg free
  2263                           
  2264                           ;LcTLCD.c: 93:   CantaIR(0x20 | 0x08);
  2265  0004D2  0E28               	movlw	40
  2266  0004D4  EC55  F005         	call	_CantaIR
  2267                           
  2268                           ;LcTLCD.c: 96:   WaitForBusy(); CantaIR(0x08);
  2269  0004D8  EC92  F004         	call	_WaitForBusy	;wreg free
  2270  0004DC  0E08               	movlw	8
  2271  0004DE  EC55  F005         	call	_CantaIR
  2272                           
  2273                           ;LcTLCD.c: 97:   WaitForBusy(); CantaIR(0x01);
  2274  0004E2  EC92  F004         	call	_WaitForBusy	;wreg free
  2275  0004E6  0E01               	movlw	1
  2276  0004E8  EC55  F005         	call	_CantaIR
  2277                           
  2278                           ;LcTLCD.c: 98:   Espera(Timer,3);
  2279  0004EC  D81A               	call	PL2	;call to abstracted procedure
  2280  0004EE  0E03               	movlw	3
  2281  0004F0  6E6F               	movwf	Espera@ms^0,c
  2282  0004F2  EC45  F005         	call	_Espera	;wreg free
  2283                           
  2284                           ;LcTLCD.c: 99:   WaitForBusy(); CantaIR(0x04 | 0x02);
  2285  0004F6  EC92  F004         	call	_WaitForBusy	;wreg free
  2286  0004FA  0E06               	movlw	6
  2287  0004FC  EC55  F005         	call	_CantaIR
  2288                           
  2289                           ;LcTLCD.c: 100:   WaitForBusy(); CantaIR(0x08 | 0x04 | 0x02 | 0x01);
  2290  000500  EC92  F004         	call	_WaitForBusy	;wreg free
  2291  000504  0E0F               	movlw	15
  2292  000506  EC55  F005         	call	_CantaIR
  2293                           
  2294                           ;LcTLCD.c: 101:  }
  2295  00050A  4A74               	infsnz	LcInit@i^0,f,c
  2296  00050C  2A75               	incf	(LcInit@i+1)^0,f,c
  2297  00050E  BE75               	btfsc	(LcInit@i+1)^0,7,c
  2298  000510  D7BB               	goto	l1935
  2299  000512  5075               	movf	(LcInit@i+1)^0,w,c
  2300  000514  E105               	bnz	u1330
  2301  000516  0E02               	movlw	2
  2302  000518  5C74               	subwf	LcInit@i^0,w,c
  2303  00051A  B0D8               	btfsc	status,0,c
  2304  00051C  0012               	return	
  2305  00051E  D7B4               	goto	l1935
  2306  000520                     u1330:
  2307  000520  0012               	return		;funcret
  2308  000522                     __end_of_LcInit:
  2309                           	callstack 0
  2310  000522                     PL2:
  2311                           	callstack 26
  2312  000522  C04C  F06D         	movff	_Timer,Espera@Timer
  2313  000526  C04D  F06E         	movff	_Timer+1,Espera@Timer+1
  2314  00052A  6A70               	clrf	(Espera@ms+1)^0,c
  2315  00052C  0012               	return	
  2316  00052E                     __end_ofPL2:
  2317                           	callstack 0
  2318                           
  2319 ;; *************** function _WaitForBusy *****************
  2320 ;; Defined at:
  2321 ;;		line 261 in file "LcTLCD.c"
  2322 ;; Parameters:    Size  Location     Type
  2323 ;;		None
  2324 ;; Auto vars:     Size  Location     Type
  2325 ;;  Busy            1   12[COMRAM] unsigned char 
  2326 ;; Return value:  Size  Location     Type
  2327 ;;                  1    wreg      void 
  2328 ;; Registers used:
  2329 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2330 ;; Tracked objects:
  2331 ;;		On entry : 0/0
  2332 ;;		On exit  : 0/0
  2333 ;;		Unchanged: 0/0
  2334 ;; Data sizes:     COMRAM   BANK0   BANK1
  2335 ;;      Params:         0       0       0
  2336 ;;      Locals:         1       0       0
  2337 ;;      Temps:          0       0       0
  2338 ;;      Totals:         1       0       0
  2339 ;;Total ram usage:        1 bytes
  2340 ;; Hardware stack levels used: 1
  2341 ;; Hardware stack levels required when called: 3
  2342 ;; This function calls:
  2343 ;;		_TiGetTics
  2344 ;;		_TiResetTics
  2345 ;; This function is called by:
  2346 ;;		_LcInit
  2347 ;;		_LcCursorOn
  2348 ;;		_LcGotoXY
  2349 ;;		_LcPutChar
  2350 ;; This function uses a non-reentrant model
  2351 ;;
  2352                           
  2353                           	psect	text18
  2354  000924                     __ptext18:
  2355                           	callstack 0
  2356  000924                     _WaitForBusy:
  2357                           	callstack 24
  2358                           
  2359                           ;LcTLCD.c: 262:  (TRISDbits.TRISD0 = TRISDbits.TRISD1 = TRISDbits.TRISD2 = TRISDbits.TRI
      +                          SD3 = 1);
  2360                           
  2361                           ;incstack = 0
  2362  000924  8695               	bsf	149,3,c	;volatile
  2363  000926  8495               	bsf	149,2,c	;volatile
  2364  000928  8295               	bsf	149,1,c	;volatile
  2365  00092A  8095               	bsf	149,0,c	;volatile
  2366                           
  2367                           ;LcTLCD.c: 263:  (LATDbits.LATD4 = 0);
  2368  00092C  988C               	bcf	140,4,c	;volatile
  2369                           
  2370                           ;LcTLCD.c: 264:  (LATDbits.LATD5 = 1);
  2371  00092E  8A8C               	bsf	140,5,c	;volatile
  2372                           
  2373                           ;LcTLCD.c: 265:  TiResetTics(Timer);
  2374  000930  504C               	movf	_Timer^0,w,c
  2375  000932  EC63  F005         	call	_TiResetTics
  2376  000936                     l1745:
  2377                           
  2378                           ;LcTLCD.c: 267:   (LATDbits.LATD6 = 1);(LATDbits.LATD6 = 1);
  2379  000936  8C8C               	bsf	140,6,c	;volatile
  2380  000938  8C8C               	bsf	140,6,c	;volatile
  2381                           
  2382                           ;LcTLCD.c: 268:   Busy = (PORTDbits.RD3);
  2383  00093A  0E00               	movlw	0
  2384  00093C  B683               	btfsc	131,3,c	;volatile
  2385  00093E  0E01               	movlw	1
  2386  000940  6E6D               	movwf	WaitForBusy@Busy^0,c
  2387                           
  2388                           ;LcTLCD.c: 269:   (LATDbits.LATD6 = 0);
  2389  000942  9C8C               	bcf	140,6,c	;volatile
  2390                           
  2391                           ;LcTLCD.c: 270:   (LATDbits.LATD6 = 0);
  2392  000944  9C8C               	bcf	140,6,c	;volatile
  2393                           
  2394                           ;LcTLCD.c: 271:   (LATDbits.LATD6 = 1);(LATDbits.LATD6 = 1);
  2395  000946  8C8C               	bsf	140,6,c	;volatile
  2396  000948  8C8C               	bsf	140,6,c	;volatile
  2397                           
  2398                           ;LcTLCD.c: 273:   (LATDbits.LATD6 = 0);
  2399  00094A  9C8C               	bcf	140,6,c	;volatile
  2400                           
  2401                           ;LcTLCD.c: 274:   (LATDbits.LATD6 = 0);
  2402  00094C  9C8C               	bcf	140,6,c	;volatile
  2403                           
  2404                           ;LcTLCD.c: 275:   if (TiGetTics(Timer)) break;
  2405  00094E  504C               	movf	_Timer^0,w,c
  2406  000950  EC22  F005         	call	_TiGetTics
  2407  000954  5066               	movf	?_TiGetTics^0,w,c
  2408  000956  1067               	iorwf	(?_TiGetTics+1)^0,w,c
  2409  000958  E001               	bz	l1767
  2410  00095A  0012               	return	
  2411  00095C                     l1767:
  2412                           
  2413                           ;LcTLCD.c: 276:  } while(Busy);
  2414  00095C  506D               	movf	WaitForBusy@Busy^0,w,c
  2415  00095E  E1EB               	bnz	l1745
  2416  000960  0012               	return		;funcret
  2417  000962                     __end_of_WaitForBusy:
  2418                           	callstack 0
  2419                           
  2420 ;; *************** function _TiGetTimer *****************
  2421 ;; Defined at:
  2422 ;;		line 72 in file "TTimer.c"
  2423 ;; Parameters:    Size  Location     Type
  2424 ;;		None
  2425 ;; Auto vars:     Size  Location     Type
  2426 ;;		None
  2427 ;; Return value:  Size  Location     Type
  2428 ;;                  1    wreg      unsigned char 
  2429 ;; Registers used:
  2430 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  2431 ;; Tracked objects:
  2432 ;;		On entry : 0/0
  2433 ;;		On exit  : 0/0
  2434 ;;		Unchanged: 0/0
  2435 ;; Data sizes:     COMRAM   BANK0   BANK1
  2436 ;;      Params:         0       0       0
  2437 ;;      Locals:         0       0       0
  2438 ;;      Temps:          1       0       0
  2439 ;;      Totals:         1       0       0
  2440 ;;Total ram usage:        1 bytes
  2441 ;; Hardware stack levels used: 1
  2442 ;; Hardware stack levels required when called: 2
  2443 ;; This function calls:
  2444 ;;		Nothing
  2445 ;; This function is called by:
  2446 ;;		_initKeypad
  2447 ;;		_LcInit
  2448 ;; This function uses a non-reentrant model
  2449 ;;
  2450                           
  2451                           	psect	text19
  2452  0009C6                     __ptext19:
  2453                           	callstack 0
  2454  0009C6                     _TiGetTimer:
  2455                           	callstack 27
  2456                           
  2457                           ;TTimer.c: 76:     counter=0;
  2458                           
  2459                           ;incstack = 0
  2460  0009C6  6A60               	clrf	_counter^0,c
  2461                           
  2462                           ;TTimer.c: 77:     while (s_Timers[counter].b_busy==1) {
  2463  0009C8  D005               	goto	l1291
  2464  0009CA                     l1283:
  2465                           
  2466                           ;TTimer.c: 78:         counter++;
  2467  0009CA  2A60               	incf	_counter^0,f,c
  2468                           
  2469                           ;TTimer.c: 79:  if (counter == 25) return -1;
  2470  0009CC  0E19               	movlw	25
  2471  0009CE  1860               	xorwf	_counter^0,w,c
  2472  0009D0  E101               	bnz	l1291
  2473  0009D2  0CFF               	retlw	255
  2474  0009D4                     l1291:
  2475                           
  2476                           ;TTimer.c: 77:     while (s_Timers[counter].b_busy==1) {
  2477  0009D4  D807               	call	PL6	;call to abstracted procedure
  2478  0009D6  04DE               	decf	postinc2,w,c
  2479  0009D8  E0F8               	bz	l1283
  2480                           
  2481                           ;TTimer.c: 81:     s_Timers[counter].b_busy=1;
  2482  0009DA  D804               	call	PL6	;call to abstracted procedure
  2483  0009DC  0E01               	movlw	1
  2484  0009DE  6EDF               	movwf	indf2,c
  2485                           
  2486                           ;TTimer.c: 82:     return (counter);
  2487  0009E0  5060               	movf	_counter^0,w,c
  2488  0009E2  0012               	return		;funcret
  2489  0009E4                     __end_of_TiGetTimer:
  2490                           	callstack 0
  2491  0009E4                     PL6:
  2492                           	callstack 28
  2493  0009E4  5060               	movf	_counter^0,w,c
  2494  0009E6  0D03               	mullw	3
  2495  0009E8  50F3               	movf	243,w,c
  2496  0009EA  0F03               	addlw	low (_s_Timers+2)
  2497  0009EC  6ED9               	movwf	fsr2l,c
  2498  0009EE  6ADA               	clrf	fsr2h,c
  2499  0009F0  0012               	return	
  2500  0009F2                     __end_ofPL6:
  2501                           	callstack 0
  2502                           
  2503 ;; *************** function _Espera *****************
  2504 ;; Defined at:
  2505 ;;		line 210 in file "LcTLCD.c"
  2506 ;; Parameters:    Size  Location     Type
  2507 ;;  Timer           2   12[COMRAM] int 
  2508 ;;  ms              2   14[COMRAM] int 
  2509 ;; Auto vars:     Size  Location     Type
  2510 ;;		None
  2511 ;; Return value:  Size  Location     Type
  2512 ;;                  1    wreg      void 
  2513 ;; Registers used:
  2514 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2515 ;; Tracked objects:
  2516 ;;		On entry : 0/0
  2517 ;;		On exit  : 0/0
  2518 ;;		Unchanged: 0/0
  2519 ;; Data sizes:     COMRAM   BANK0   BANK1
  2520 ;;      Params:         4       0       0
  2521 ;;      Locals:         0       0       0
  2522 ;;      Temps:          1       0       0
  2523 ;;      Totals:         5       0       0
  2524 ;;Total ram usage:        5 bytes
  2525 ;; Hardware stack levels used: 1
  2526 ;; Hardware stack levels required when called: 3
  2527 ;; This function calls:
  2528 ;;		_TiGetTics
  2529 ;;		_TiResetTics
  2530 ;; This function is called by:
  2531 ;;		_LcInit
  2532 ;; This function uses a non-reentrant model
  2533 ;;
  2534                           
  2535                           	psect	text20
  2536  000A8A                     __ptext20:
  2537                           	callstack 0
  2538  000A8A                     _Espera:
  2539                           	callstack 26
  2540                           
  2541                           ;LcTLCD.c: 211:  TiResetTics(Timer);
  2542                           
  2543                           ;incstack = 0
  2544  000A8A  506D               	movf	Espera@Timer^0,w,c
  2545  000A8C  EC63  F005         	call	_TiResetTics
  2546  000A90                     l1885:
  2547  000A90  506D               	movf	Espera@Timer^0,w,c
  2548  000A92  EC22  F005         	call	_TiGetTics
  2549  000A96  506F               	movf	Espera@ms^0,w,c
  2550  000A98  5C66               	subwf	?_TiGetTics^0,w,c
  2551  000A9A  5067               	movf	(?_TiGetTics+1)^0,w,c
  2552  000A9C  0A80               	xorlw	128
  2553  000A9E  6E71               	movwf	??_Espera^0,c
  2554  000AA0  5070               	movf	(Espera@ms+1)^0,w,c
  2555  000AA2  0A80               	xorlw	128
  2556  000AA4  5871               	subwfb	??_Espera^0,w,c
  2557  000AA6  E3F4               	bnc	l1885
  2558  000AA8  0012               	return		;funcret
  2559  000AAA                     __end_of_Espera:
  2560                           	callstack 0
  2561                           
  2562 ;; *************** function _EscriuPrimeraOrdre *****************
  2563 ;; Defined at:
  2564 ;;		line 279 in file "LcTLCD.c"
  2565 ;; Parameters:    Size  Location     Type
  2566 ;;  ordre           1    wreg     unsigned char 
  2567 ;; Auto vars:     Size  Location     Type
  2568 ;;  ordre           1    6[COMRAM] unsigned char 
  2569 ;; Return value:  Size  Location     Type
  2570 ;;                  1    wreg      void 
  2571 ;; Registers used:
  2572 ;;		wreg, status,2, status,0
  2573 ;; Tracked objects:
  2574 ;;		On entry : 0/0
  2575 ;;		On exit  : 0/0
  2576 ;;		Unchanged: 0/0
  2577 ;; Data sizes:     COMRAM   BANK0   BANK1
  2578 ;;      Params:         0       0       0
  2579 ;;      Locals:         1       0       0
  2580 ;;      Temps:          1       0       0
  2581 ;;      Totals:         2       0       0
  2582 ;;Total ram usage:        2 bytes
  2583 ;; Hardware stack levels used: 1
  2584 ;; Hardware stack levels required when called: 2
  2585 ;; This function calls:
  2586 ;;		Nothing
  2587 ;; This function is called by:
  2588 ;;		_LcInit
  2589 ;; This function uses a non-reentrant model
  2590 ;;
  2591                           
  2592                           	psect	text21
  2593  0006E6                     __ptext21:
  2594                           	callstack 0
  2595  0006E6                     _EscriuPrimeraOrdre:
  2596                           	callstack 27
  2597                           
  2598                           ;incstack = 0
  2599                           ;EscriuPrimeraOrdre@ordre stored from wreg
  2600  0006E6  6E67               	movwf	EscriuPrimeraOrdre@ordre^0,c
  2601                           
  2602                           ;LcTLCD.c: 281:  (TRISDbits.TRISD0 = TRISDbits.TRISD1 = TRISDbits.TRISD2 = TRISDbits.TRI
      +                          SD3 = 0); (LATDbits.LATD4 = 0); (LATDbits.LATD5 = 0);
  2603  0006E8  9695               	bcf	149,3,c	;volatile
  2604                           
  2605                           ;LcTLCD.c: 282:  (LATDbits.LATD6 = 1); (LATDbits.LATD6 = 1);
  2606  0006EA  D82F               	call	PL24	;call to abstracted procedure
  2607  0006EC  8C8C               	bsf	140,6,c	;volatile
  2608                           
  2609                           ;LcTLCD.c: 283:   (LATDbits.LATD3 = (ordre & 0x08 ? 1 : 0));
  2610  0006EE  A667               	btfss	EscriuPrimeraOrdre@ordre^0,3,c
  2611  0006F0  D003               	goto	u410
  2612  0006F2  6A66               	clrf	??_EscriuPrimeraOrdre^0,c
  2613  0006F4  2A66               	incf	??_EscriuPrimeraOrdre^0,f,c
  2614  0006F6  D001               	goto	u428
  2615  0006F8                     u410:
  2616  0006F8  6A66               	clrf	??_EscriuPrimeraOrdre^0,c
  2617  0006FA                     u428:
  2618  0006FA  4666               	rlncf	??_EscriuPrimeraOrdre^0,f,c
  2619  0006FC  D82D               	call	PL34	;call to abstracted procedure
  2620  0006FE  0BF7               	andlw	-9
  2621  000700  1866               	xorwf	??_EscriuPrimeraOrdre^0,w,c
  2622  000702  6E8C               	movwf	140,c	;volatile
  2623                           
  2624                           ;LcTLCD.c: 284:   (LATDbits.LATD2 = (ordre & 0x04 ? 1 : 0));
  2625  000704  A467               	btfss	EscriuPrimeraOrdre@ordre^0,2,c
  2626  000706  D003               	goto	u430
  2627  000708  6A66               	clrf	??_EscriuPrimeraOrdre^0,c
  2628  00070A  2A66               	incf	??_EscriuPrimeraOrdre^0,f,c
  2629  00070C  D001               	goto	u448
  2630  00070E                     u430:
  2631  00070E  6A66               	clrf	??_EscriuPrimeraOrdre^0,c
  2632  000710                     u448:
  2633  000710  D823               	call	PL34	;call to abstracted procedure
  2634  000712  0BFB               	andlw	-5
  2635  000714  1866               	xorwf	??_EscriuPrimeraOrdre^0,w,c
  2636  000716  6E8C               	movwf	140,c	;volatile
  2637                           
  2638                           ;LcTLCD.c: 285:   (LATDbits.LATD1 = (ordre & 0x02 ? 1 : 0));
  2639  000718  A267               	btfss	EscriuPrimeraOrdre@ordre^0,1,c
  2640  00071A  D003               	goto	u450
  2641  00071C  6A66               	clrf	??_EscriuPrimeraOrdre^0,c
  2642  00071E  2A66               	incf	??_EscriuPrimeraOrdre^0,f,c
  2643  000720  D001               	goto	u468
  2644  000722                     u450:
  2645  000722  6A66               	clrf	??_EscriuPrimeraOrdre^0,c
  2646  000724                     u468:
  2647  000724  4666               	rlncf	??_EscriuPrimeraOrdre^0,f,c
  2648  000726  508C               	movf	140,w,c	;volatile
  2649  000728  1866               	xorwf	??_EscriuPrimeraOrdre^0,w,c
  2650  00072A  0BFD               	andlw	-3
  2651  00072C  1866               	xorwf	??_EscriuPrimeraOrdre^0,w,c
  2652  00072E  6E8C               	movwf	140,c	;volatile
  2653                           
  2654                           ;LcTLCD.c: 286:   (LATDbits.LATD0 = (ordre & 0x01 ? 1 : 0));
  2655  000730  A067               	btfss	EscriuPrimeraOrdre@ordre^0,0,c
  2656  000732  D003               	goto	u470
  2657  000734  6A66               	clrf	??_EscriuPrimeraOrdre^0,c
  2658  000736  2A66               	incf	??_EscriuPrimeraOrdre^0,f,c
  2659  000738  D001               	goto	u488
  2660  00073A                     u470:
  2661  00073A  6A66               	clrf	??_EscriuPrimeraOrdre^0,c
  2662  00073C                     u488:
  2663  00073C  508C               	movf	140,w,c	;volatile
  2664  00073E  1866               	xorwf	??_EscriuPrimeraOrdre^0,w,c
  2665  000740  0BFE               	andlw	-2
  2666  000742  1866               	xorwf	??_EscriuPrimeraOrdre^0,w,c
  2667  000744  6E8C               	movwf	140,c	;volatile
  2668                           
  2669                           ;LcTLCD.c: 287:  (LATDbits.LATD6 = 0);
  2670  000746  9C8C               	bcf	140,6,c	;volatile
  2671  000748  0012               	return		;funcret
  2672  00074A                     __end_of_EscriuPrimeraOrdre:
  2673                           	callstack 0
  2674  00074A                     PL24:
  2675                           	callstack 23
  2676  00074A  9495               	bcf	149,2,c	;volatile
  2677  00074C  9295               	bcf	149,1,c	;volatile
  2678  00074E  9095               	bcf	149,0,c	;volatile
  2679  000750  988C               	bcf	140,4,c	;volatile
  2680  000752  9A8C               	bcf	140,5,c	;volatile
  2681  000754  8C8C               	bsf	140,6,c	;volatile
  2682  000756  0012               	return	
  2683  000758                     __end_ofPL24:
  2684                           	callstack 0
  2685  000758                     PL34:
  2686                           	callstack 27
  2687  000758  4666               	rlncf	??_EscriuPrimeraOrdre^0,f,c
  2688  00075A  4666               	rlncf	??_EscriuPrimeraOrdre^0,f,c
  2689  00075C  508C               	movf	140,w,c	;volatile
  2690  00075E  1866               	xorwf	??_EscriuPrimeraOrdre^0,w,c
  2691  000760  0012               	return	
  2692  000762                     __end_ofPL34:
  2693                           	callstack 0
  2694                           
  2695 ;; *************** function _CantaIR *****************
  2696 ;; Defined at:
  2697 ;;		line 229 in file "LcTLCD.c"
  2698 ;; Parameters:    Size  Location     Type
  2699 ;;  IR              1    wreg     unsigned char 
  2700 ;; Auto vars:     Size  Location     Type
  2701 ;;  IR              1    7[COMRAM] unsigned char 
  2702 ;; Return value:  Size  Location     Type
  2703 ;;                  1    wreg      void 
  2704 ;; Registers used:
  2705 ;;		wreg, status,2, status,0, cstack
  2706 ;; Tracked objects:
  2707 ;;		On entry : 0/0
  2708 ;;		On exit  : 0/0
  2709 ;;		Unchanged: 0/0
  2710 ;; Data sizes:     COMRAM   BANK0   BANK1
  2711 ;;      Params:         0       0       0
  2712 ;;      Locals:         1       0       0
  2713 ;;      Temps:          0       0       0
  2714 ;;      Totals:         1       0       0
  2715 ;;Total ram usage:        1 bytes
  2716 ;; Hardware stack levels used: 1
  2717 ;; Hardware stack levels required when called: 3
  2718 ;; This function calls:
  2719 ;;		_CantaPartAlta
  2720 ;;		_CantaPartBaixa
  2721 ;; This function is called by:
  2722 ;;		_LcInit
  2723 ;;		_LcCursorOn
  2724 ;;		_LcGotoXY
  2725 ;; This function uses a non-reentrant model
  2726 ;;
  2727                           
  2728                           	psect	text22
  2729  000AAA                     __ptext22:
  2730                           	callstack 0
  2731  000AAA                     _CantaIR:
  2732                           	callstack 23
  2733                           
  2734                           ;incstack = 0
  2735                           ;CantaIR@IR stored from wreg
  2736  000AAA  6E68               	movwf	CantaIR@IR^0,c
  2737                           
  2738                           ;LcTLCD.c: 230:  (TRISDbits.TRISD0 = TRISDbits.TRISD1 = TRISDbits.TRISD2 = TRISDbits.TRI
      +                          SD3 = 0);
  2739  000AAC  9695               	bcf	149,3,c	;volatile
  2740                           
  2741                           ;LcTLCD.c: 231:  (LATDbits.LATD4 = 0);
  2742                           
  2743                           ;LcTLCD.c: 232:  (LATDbits.LATD5 = 0);
  2744                           
  2745                           ;LcTLCD.c: 233:  (LATDbits.LATD6 = 1);
  2746  000AAE  ECA5  F003         	call	PL24	;call to abstracted procedure
  2747                           
  2748                           ;LcTLCD.c: 234:  CantaPartAlta(IR);
  2749  000AB2  5068               	movf	CantaIR@IR^0,w,c
  2750  000AB4  ECE4  F003         	call	_CantaPartAlta
  2751                           
  2752                           ;LcTLCD.c: 235:  (LATDbits.LATD6 = 1);
  2753                           
  2754                           ;LcTLCD.c: 236:  (LATDbits.LATD6 = 0);
  2755                           
  2756                           ;LcTLCD.c: 237:  (LATDbits.LATD6 = 0);
  2757                           
  2758                           ;LcTLCD.c: 238:  (LATDbits.LATD6 = 1);
  2759  000AB8  ECC8  F004         	call	PL30	;call to abstracted procedure
  2760                           
  2761                           ;LcTLCD.c: 239:  CantaPartBaixa(IR);
  2762  000ABC  5068               	movf	CantaIR@IR^0,w,c
  2763  000ABE  ECB1  F003         	call	_CantaPartBaixa
  2764                           
  2765                           ;LcTLCD.c: 240:  (LATDbits.LATD6 = 1);
  2766                           
  2767                           ;LcTLCD.c: 241:  (LATDbits.LATD6 = 0);
  2768                           
  2769                           ;LcTLCD.c: 242:  (TRISDbits.TRISD0 = TRISDbits.TRISD1 = TRISDbits.TRISD2 = TRISDbits.TRI
      +                          SD3 = 1);
  2770  000AC2  EFC1  F004         	goto	PL20	;call to abstracted procedure
  2771  000AC6                     __end_of_CantaIR:
  2772                           	callstack 0
  2773                           
  2774 ;; *************** function _CantaPartBaixa *****************
  2775 ;; Defined at:
  2776 ;;		line 222 in file "LcTLCD.c"
  2777 ;; Parameters:    Size  Location     Type
  2778 ;;  c               1    wreg     unsigned char 
  2779 ;; Auto vars:     Size  Location     Type
  2780 ;;  c               1    6[COMRAM] unsigned char 
  2781 ;; Return value:  Size  Location     Type
  2782 ;;                  1    wreg      void 
  2783 ;; Registers used:
  2784 ;;		wreg, status,2, status,0
  2785 ;; Tracked objects:
  2786 ;;		On entry : 0/0
  2787 ;;		On exit  : 0/0
  2788 ;;		Unchanged: 0/0
  2789 ;; Data sizes:     COMRAM   BANK0   BANK1
  2790 ;;      Params:         0       0       0
  2791 ;;      Locals:         1       0       0
  2792 ;;      Temps:          1       0       0
  2793 ;;      Totals:         2       0       0
  2794 ;;Total ram usage:        2 bytes
  2795 ;; Hardware stack levels used: 1
  2796 ;; Hardware stack levels required when called: 2
  2797 ;; This function calls:
  2798 ;;		Nothing
  2799 ;; This function is called by:
  2800 ;;		_CantaIR
  2801 ;;		_CantaData
  2802 ;; This function uses a non-reentrant model
  2803 ;;
  2804                           
  2805                           	psect	text23
  2806  000762                     __ptext23:
  2807                           	callstack 0
  2808  000762                     _CantaPartBaixa:
  2809                           	callstack 23
  2810                           
  2811                           ;incstack = 0
  2812                           ;CantaPartBaixa@c stored from wreg
  2813  000762  6E67               	movwf	CantaPartBaixa@c^0,c
  2814                           
  2815                           ;LcTLCD.c: 223:   (LATDbits.LATD3 = (c & 0x08 ? 1 : 0));
  2816  000764  A667               	btfss	CantaPartBaixa@c^0,3,c
  2817  000766  D003               	goto	u1040
  2818  000768  6A66               	clrf	??_CantaPartBaixa^0,c
  2819  00076A  2A66               	incf	??_CantaPartBaixa^0,f,c
  2820  00076C  D001               	goto	u1058
  2821  00076E                     u1040:
  2822  00076E  6A66               	clrf	??_CantaPartBaixa^0,c
  2823  000770                     u1058:
  2824  000770  4666               	rlncf	??_CantaPartBaixa^0,f,c
  2825  000772  D825               	call	PL32	;call to abstracted procedure
  2826  000774  0BF7               	andlw	-9
  2827  000776  1866               	xorwf	??_CantaPartBaixa^0,w,c
  2828  000778  6E8C               	movwf	140,c	;volatile
  2829                           
  2830                           ;LcTLCD.c: 224:   (LATDbits.LATD2 = (c & 0x04 ? 1 : 0));
  2831  00077A  A467               	btfss	CantaPartBaixa@c^0,2,c
  2832  00077C  D003               	goto	u1060
  2833  00077E  6A66               	clrf	??_CantaPartBaixa^0,c
  2834  000780  2A66               	incf	??_CantaPartBaixa^0,f,c
  2835  000782  D001               	goto	u1078
  2836  000784                     u1060:
  2837  000784  6A66               	clrf	??_CantaPartBaixa^0,c
  2838  000786                     u1078:
  2839  000786  D81B               	call	PL32	;call to abstracted procedure
  2840  000788  0BFB               	andlw	-5
  2841  00078A  1866               	xorwf	??_CantaPartBaixa^0,w,c
  2842  00078C  6E8C               	movwf	140,c	;volatile
  2843                           
  2844                           ;LcTLCD.c: 225:   (LATDbits.LATD1 = (c & 0x02 ? 1 : 0));
  2845  00078E  A267               	btfss	CantaPartBaixa@c^0,1,c
  2846  000790  D003               	goto	u1080
  2847  000792  6A66               	clrf	??_CantaPartBaixa^0,c
  2848  000794  2A66               	incf	??_CantaPartBaixa^0,f,c
  2849  000796  D001               	goto	u1098
  2850  000798                     u1080:
  2851  000798  6A66               	clrf	??_CantaPartBaixa^0,c
  2852  00079A                     u1098:
  2853  00079A  4666               	rlncf	??_CantaPartBaixa^0,f,c
  2854  00079C  508C               	movf	140,w,c	;volatile
  2855  00079E  1866               	xorwf	??_CantaPartBaixa^0,w,c
  2856  0007A0  0BFD               	andlw	-3
  2857  0007A2  1866               	xorwf	??_CantaPartBaixa^0,w,c
  2858  0007A4  6E8C               	movwf	140,c	;volatile
  2859                           
  2860                           ;LcTLCD.c: 226:   (LATDbits.LATD0 = (c & 0x01 ? 1 : 0));
  2861  0007A6  A067               	btfss	CantaPartBaixa@c^0,0,c
  2862  0007A8  D003               	goto	u1100
  2863  0007AA  6A66               	clrf	??_CantaPartBaixa^0,c
  2864  0007AC  2A66               	incf	??_CantaPartBaixa^0,f,c
  2865  0007AE  D001               	goto	u1118
  2866  0007B0                     u1100:
  2867  0007B0  6A66               	clrf	??_CantaPartBaixa^0,c
  2868  0007B2                     u1118:
  2869  0007B2  508C               	movf	140,w,c	;volatile
  2870  0007B4  1866               	xorwf	??_CantaPartBaixa^0,w,c
  2871  0007B6  0BFE               	andlw	-2
  2872  0007B8  1866               	xorwf	??_CantaPartBaixa^0,w,c
  2873  0007BA  6E8C               	movwf	140,c	;volatile
  2874  0007BC  0012               	return		;funcret
  2875  0007BE                     __end_of_CantaPartBaixa:
  2876                           	callstack 0
  2877  0007BE                     PL32:
  2878                           	callstack 23
  2879  0007BE  4666               	rlncf	??_CantaPartBaixa^0,f,c
  2880  0007C0  4666               	rlncf	??_CantaPartBaixa^0,f,c
  2881  0007C2  508C               	movf	140,w,c	;volatile
  2882  0007C4  1866               	xorwf	??_CantaPartBaixa^0,w,c
  2883  0007C6  0012               	return	
  2884  0007C8                     __end_ofPL32:
  2885                           	callstack 0
  2886                           
  2887 ;; *************** function _CantaPartAlta *****************
  2888 ;; Defined at:
  2889 ;;		line 215 in file "LcTLCD.c"
  2890 ;; Parameters:    Size  Location     Type
  2891 ;;  c               1    wreg     unsigned char 
  2892 ;; Auto vars:     Size  Location     Type
  2893 ;;  c               1    6[COMRAM] unsigned char 
  2894 ;; Return value:  Size  Location     Type
  2895 ;;                  1    wreg      void 
  2896 ;; Registers used:
  2897 ;;		wreg, status,2, status,0
  2898 ;; Tracked objects:
  2899 ;;		On entry : 0/0
  2900 ;;		On exit  : 0/0
  2901 ;;		Unchanged: 0/0
  2902 ;; Data sizes:     COMRAM   BANK0   BANK1
  2903 ;;      Params:         0       0       0
  2904 ;;      Locals:         1       0       0
  2905 ;;      Temps:          1       0       0
  2906 ;;      Totals:         2       0       0
  2907 ;;Total ram usage:        2 bytes
  2908 ;; Hardware stack levels used: 1
  2909 ;; Hardware stack levels required when called: 2
  2910 ;; This function calls:
  2911 ;;		Nothing
  2912 ;; This function is called by:
  2913 ;;		_CantaIR
  2914 ;;		_CantaData
  2915 ;; This function uses a non-reentrant model
  2916 ;;
  2917                           
  2918                           	psect	text24
  2919  0007C8                     __ptext24:
  2920                           	callstack 0
  2921  0007C8                     _CantaPartAlta:
  2922                           	callstack 23
  2923                           
  2924                           ;incstack = 0
  2925                           ;CantaPartAlta@c stored from wreg
  2926  0007C8  6E67               	movwf	CantaPartAlta@c^0,c
  2927                           
  2928                           ;LcTLCD.c: 216:   (LATDbits.LATD3 = (c & 0x80 ? 1 : 0));
  2929  0007CA  AE67               	btfss	CantaPartAlta@c^0,7,c
  2930  0007CC  D003               	goto	u960
  2931  0007CE  6A66               	clrf	??_CantaPartAlta^0,c
  2932  0007D0  2A66               	incf	??_CantaPartAlta^0,f,c
  2933  0007D2  D001               	goto	u978
  2934  0007D4                     u960:
  2935  0007D4  6A66               	clrf	??_CantaPartAlta^0,c
  2936  0007D6                     u978:
  2937  0007D6  4666               	rlncf	??_CantaPartAlta^0,f,c
  2938  0007D8  D825               	call	PL38	;call to abstracted procedure
  2939  0007DA  0BF7               	andlw	-9
  2940  0007DC  1866               	xorwf	??_CantaPartAlta^0,w,c
  2941  0007DE  6E8C               	movwf	140,c	;volatile
  2942                           
  2943                           ;LcTLCD.c: 217:   (LATDbits.LATD2 = (c & 0x40 ? 1 : 0));
  2944  0007E0  AC67               	btfss	CantaPartAlta@c^0,6,c
  2945  0007E2  D003               	goto	u980
  2946  0007E4  6A66               	clrf	??_CantaPartAlta^0,c
  2947  0007E6  2A66               	incf	??_CantaPartAlta^0,f,c
  2948  0007E8  D001               	goto	u998
  2949  0007EA                     u980:
  2950  0007EA  6A66               	clrf	??_CantaPartAlta^0,c
  2951  0007EC                     u998:
  2952  0007EC  D81B               	call	PL38	;call to abstracted procedure
  2953  0007EE  0BFB               	andlw	-5
  2954  0007F0  1866               	xorwf	??_CantaPartAlta^0,w,c
  2955  0007F2  6E8C               	movwf	140,c	;volatile
  2956                           
  2957                           ;LcTLCD.c: 218:   (LATDbits.LATD1 = (c & 0x20 ? 1 : 0));
  2958  0007F4  AA67               	btfss	CantaPartAlta@c^0,5,c
  2959  0007F6  D003               	goto	u1000
  2960  0007F8  6A66               	clrf	??_CantaPartAlta^0,c
  2961  0007FA  2A66               	incf	??_CantaPartAlta^0,f,c
  2962  0007FC  D001               	goto	u1018
  2963  0007FE                     u1000:
  2964  0007FE  6A66               	clrf	??_CantaPartAlta^0,c
  2965  000800                     u1018:
  2966  000800  4666               	rlncf	??_CantaPartAlta^0,f,c
  2967  000802  508C               	movf	140,w,c	;volatile
  2968  000804  1866               	xorwf	??_CantaPartAlta^0,w,c
  2969  000806  0BFD               	andlw	-3
  2970  000808  1866               	xorwf	??_CantaPartAlta^0,w,c
  2971  00080A  6E8C               	movwf	140,c	;volatile
  2972                           
  2973                           ;LcTLCD.c: 219:   (LATDbits.LATD0 = (c & 0x10 ? 1 : 0));
  2974  00080C  A867               	btfss	CantaPartAlta@c^0,4,c
  2975  00080E  D003               	goto	u1020
  2976  000810  6A66               	clrf	??_CantaPartAlta^0,c
  2977  000812  2A66               	incf	??_CantaPartAlta^0,f,c
  2978  000814  D001               	goto	u1038
  2979  000816                     u1020:
  2980  000816  6A66               	clrf	??_CantaPartAlta^0,c
  2981  000818                     u1038:
  2982  000818  508C               	movf	140,w,c	;volatile
  2983  00081A  1866               	xorwf	??_CantaPartAlta^0,w,c
  2984  00081C  0BFE               	andlw	-2
  2985  00081E  1866               	xorwf	??_CantaPartAlta^0,w,c
  2986  000820  6E8C               	movwf	140,c	;volatile
  2987  000822  0012               	return		;funcret
  2988  000824                     __end_of_CantaPartAlta:
  2989                           	callstack 0
  2990  000824                     PL38:
  2991                           	callstack 23
  2992  000824  4666               	rlncf	??_CantaPartAlta^0,f,c
  2993  000826  4666               	rlncf	??_CantaPartAlta^0,f,c
  2994  000828  508C               	movf	140,w,c	;volatile
  2995  00082A  1866               	xorwf	??_CantaPartAlta^0,w,c
  2996  00082C  0012               	return	
  2997  00082E                     __end_ofPL38:
  2998                           	callstack 0
  2999                           
  3000 ;; *************** function _KeypadMotor *****************
  3001 ;; Defined at:
  3002 ;;		line 50 in file "keypad.c"
  3003 ;; Parameters:    Size  Location     Type
  3004 ;;		None
  3005 ;; Auto vars:     Size  Location     Type
  3006 ;;		None
  3007 ;; Return value:  Size  Location     Type
  3008 ;;                  1    wreg      void 
  3009 ;; Registers used:
  3010 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3011 ;; Tracked objects:
  3012 ;;		On entry : 0/0
  3013 ;;		On exit  : 0/0
  3014 ;;		Unchanged: 0/0
  3015 ;; Data sizes:     COMRAM   BANK0   BANK1
  3016 ;;      Params:         0       0       0
  3017 ;;      Locals:         0       0       0
  3018 ;;      Temps:          2       0       0
  3019 ;;      Totals:         2       0       0
  3020 ;;Total ram usage:        2 bytes
  3021 ;; Hardware stack levels used: 1
  3022 ;; Hardware stack levels required when called: 3
  3023 ;; This function calls:
  3024 ;;		_TiGetTics
  3025 ;;		_TiResetTics
  3026 ;; This function is called by:
  3027 ;;		_main
  3028 ;; This function uses a non-reentrant model
  3029 ;;
  3030                           
  3031                           	psect	text25
  3032  000266                     __ptext25:
  3033                           	callstack 0
  3034  000266                     _KeypadMotor:
  3035                           	callstack 27
  3036                           
  3037                           ;keypad.c: 52:     switch (state){
  3038                           
  3039                           ;incstack = 0
  3040  000266  D070               	goto	l2101
  3041  000268                     l130:
  3042                           
  3043                           ;keypad.c: 55:             if (!!(PORTBbits.RB0 && PORTBbits.RB1 && PORTBbits.RB2)){
  3044  000268  B081               	btfsc	129,0,c	;volatile
  3045  00026A  A281               	btfss	129,1,c	;volatile
  3046  00026C  D00A               	goto	l2029
  3047  00026E  A481               	btfss	129,2,c	;volatile
  3048  000270  D008               	goto	l2029
  3049                           
  3050                           ;keypad.c: 56:                 LATBbits.LATB3=0;
  3051  000272  968A               	bcf	138,3,c	;volatile
  3052                           
  3053                           ;keypad.c: 57:                 LATBbits.LATB4=1;
  3054  000274  888A               	bsf	138,4,c	;volatile
  3055                           
  3056                           ;keypad.c: 58:                 LATBbits.LATB5=1;
  3057  000276  8A8A               	bsf	138,5,c	;volatile
  3058                           
  3059                           ;keypad.c: 59:                 LATBbits.LATB6=1;
  3060  000278  8C8A               	bsf	138,6,c	;volatile
  3061                           
  3062                           ;keypad.c: 60:                 state=1;
  3063  00027A  0E01               	movlw	1
  3064  00027C  6E58               	movwf	_state^0,c
  3065                           
  3066                           ;keypad.c: 61:                 row=0;
  3067  00027E  6A5F               	clrf	_row^0,c
  3068                           
  3069                           ;keypad.c: 62:             }else{
  3070  000280  0012               	return	
  3071  000282                     l2029:
  3072                           
  3073                           ;keypad.c: 63:                 state=4;
  3074  000282  0E04               	movlw	4
  3075  000284  6E58               	movwf	_state^0,c
  3076  000286  0C04               	retlw	4
  3077  000288                     l134:
  3078                           
  3079                           ;keypad.c: 67:            if (!!(PORTBbits.RB0 && PORTBbits.RB1 && PORTBbits.RB2)){
  3080  000288  B081               	btfsc	129,0,c	;volatile
  3081  00028A  A281               	btfss	129,1,c	;volatile
  3082  00028C  D7FA               	goto	l2029
  3083  00028E  A481               	btfss	129,2,c	;volatile
  3084  000290  D7F8               	goto	l2029
  3085                           
  3086                           ;keypad.c: 68:                 LATBbits.LATB3=1;
  3087  000292  868A               	bsf	138,3,c	;volatile
  3088                           
  3089                           ;keypad.c: 69:                 LATBbits.LATB4=0;
  3090  000294  988A               	bcf	138,4,c	;volatile
  3091                           
  3092                           ;keypad.c: 70:                 LATBbits.LATB5=1;
  3093  000296  8A8A               	bsf	138,5,c	;volatile
  3094                           
  3095                           ;keypad.c: 71:                 LATBbits.LATB6=1;
  3096  000298  8C8A               	bsf	138,6,c	;volatile
  3097                           
  3098                           ;keypad.c: 72:                 state=2;
  3099  00029A  0E02               	movlw	2
  3100  00029C  6E58               	movwf	_state^0,c
  3101                           
  3102                           ;keypad.c: 73:                 row=1;
  3103  00029E  0E01               	movlw	1
  3104  0002A0  6E5F               	movwf	_row^0,c
  3105                           
  3106                           ;keypad.c: 75:             }else{
  3107  0002A2  0C01               	retlw	1
  3108  0002A4                     l137:
  3109                           
  3110                           ;keypad.c: 80:             if (!!(PORTBbits.RB0 && PORTBbits.RB1 && PORTBbits.RB2)){
  3111  0002A4  B081               	btfsc	129,0,c	;volatile
  3112  0002A6  A281               	btfss	129,1,c	;volatile
  3113  0002A8  D7EC               	goto	l2029
  3114  0002AA  A481               	btfss	129,2,c	;volatile
  3115  0002AC  D7EA               	goto	l2029
  3116                           
  3117                           ;keypad.c: 81:                 LATBbits.LATB3=1;
  3118  0002AE  868A               	bsf	138,3,c	;volatile
  3119                           
  3120                           ;keypad.c: 82:                 LATBbits.LATB4=1;
  3121  0002B0  888A               	bsf	138,4,c	;volatile
  3122                           
  3123                           ;keypad.c: 83:                 LATBbits.LATB5=0;
  3124  0002B2  9A8A               	bcf	138,5,c	;volatile
  3125                           
  3126                           ;keypad.c: 84:                 LATBbits.LATB6=1;
  3127  0002B4  8C8A               	bsf	138,6,c	;volatile
  3128                           
  3129                           ;keypad.c: 85:                 state=3;
  3130  0002B6  0E03               	movlw	3
  3131  0002B8  6E58               	movwf	_state^0,c
  3132                           
  3133                           ;keypad.c: 86:                 row=2;
  3134  0002BA  0E02               	movlw	2
  3135  0002BC  6E5F               	movwf	_row^0,c
  3136                           
  3137                           ;keypad.c: 87:             }else{
  3138  0002BE  0C02               	retlw	2
  3139  0002C0                     l140:
  3140                           
  3141                           ;keypad.c: 92:             if (!!(PORTBbits.RB0 && PORTBbits.RB1 && PORTBbits.RB2)){
  3142  0002C0  B081               	btfsc	129,0,c	;volatile
  3143  0002C2  A281               	btfss	129,1,c	;volatile
  3144  0002C4  D7DE               	goto	l2029
  3145  0002C6  A481               	btfss	129,2,c	;volatile
  3146  0002C8  D7DC               	goto	l2029
  3147                           
  3148                           ;keypad.c: 93:                 LATBbits.LATB3=1;
  3149  0002CA  868A               	bsf	138,3,c	;volatile
  3150                           
  3151                           ;keypad.c: 94:                 LATBbits.LATB4=1;
  3152  0002CC  888A               	bsf	138,4,c	;volatile
  3153                           
  3154                           ;keypad.c: 95:                 LATBbits.LATB5=1;
  3155  0002CE  8A8A               	bsf	138,5,c	;volatile
  3156                           
  3157                           ;keypad.c: 96:                 LATBbits.LATB6=0;
  3158  0002D0  9C8A               	bcf	138,6,c	;volatile
  3159                           
  3160                           ;keypad.c: 97:                 row=3;
  3161  0002D2  0E03               	movlw	3
  3162  0002D4  6E5F               	movwf	_row^0,c
  3163  0002D6                     l2059:
  3164                           
  3165                           ;keypad.c: 98:                 state=0;
  3166  0002D6  6A58               	clrf	_state^0,c
  3167                           
  3168                           ;keypad.c: 99:             }else{
  3169  0002D8  0012               	return	
  3170  0002DA                     l2063:
  3171                           
  3172                           ;keypad.c: 104:             state=5;
  3173  0002DA  0E05               	movlw	5
  3174  0002DC  6E58               	movwf	_state^0,c
  3175                           
  3176                           ;keypad.c: 105:             TiResetTics(timerBounces);
  3177  0002DE  505E               	movf	_timerBounces^0,w,c
  3178  0002E0  EF63  F005         	goto	_TiResetTics
  3179  0002E4                     l2067:
  3180                           
  3181                           ;keypad.c: 108:             if (TiGetTics(timerBounces) >= 25){
  3182  0002E4  505E               	movf	_timerBounces^0,w,c
  3183  0002E6  EC22  F005         	call	_TiGetTics
  3184  0002EA  BE67               	btfsc	(?_TiGetTics+1)^0,7,c
  3185  0002EC  0012               	return	
  3186  0002EE  5067               	movf	(?_TiGetTics+1)^0,w,c
  3187  0002F0  E104               	bnz	u1520
  3188  0002F2  0E19               	movlw	25
  3189  0002F4  5C66               	subwf	?_TiGetTics^0,w,c
  3190  0002F6  A0D8               	btfss	status,0,c
  3191  0002F8  0012               	return	
  3192  0002FA                     u1520:
  3193                           
  3194                           ;keypad.c: 109:                 if (!!(PORTBbits.RB0 && PORTBbits.RB1 && PORTBbits.RB2))
      +                          {
  3195  0002FA  B081               	btfsc	129,0,c	;volatile
  3196  0002FC  A281               	btfss	129,1,c	;volatile
  3197  0002FE  D002               	goto	l2077
  3198  000300  B481               	btfsc	129,2,c	;volatile
  3199  000302  D7E9               	goto	l2059
  3200  000304                     l2077:
  3201                           
  3202                           ;keypad.c: 112:                     pressed = 1;
  3203  000304  0E01               	movlw	1
  3204  000306  6E5A               	movwf	_pressed^0,c
  3205                           
  3206                           ;keypad.c: 113:                     state = 6;
  3207  000308  D036               	goto	PL42	;call to abstracted procedure
  3208  00030A                     l148:
  3209                           
  3210                           ;keypad.c: 118:             if (!!(PORTBbits.RB0 && PORTBbits.RB1 && PORTBbits.RB2)){
  3211  00030A  B081               	btfsc	129,0,c	;volatile
  3212  00030C  A281               	btfss	129,1,c	;volatile
  3213  00030E  0012               	return	
  3214  000310  A481               	btfss	129,2,c	;volatile
  3215  000312  0012               	return	
  3216                           
  3217                           ;keypad.c: 119:                 TiResetTics(timerBounces);
  3218  000314  505E               	movf	_timerBounces^0,w,c
  3219  000316  EC63  F005         	call	_TiResetTics
  3220                           
  3221                           ;keypad.c: 120:                 state = 7;
  3222  00031A  0E07               	movlw	7
  3223  00031C  6E58               	movwf	_state^0,c
  3224  00031E  0C07               	retlw	7
  3225  000320                     l2087:
  3226                           
  3227                           ;keypad.c: 124:             if (TiGetTics(timerBounces) >= 25){
  3228  000320  505E               	movf	_timerBounces^0,w,c
  3229  000322  EC22  F005         	call	_TiGetTics
  3230  000326  BE67               	btfsc	(?_TiGetTics+1)^0,7,c
  3231  000328  0012               	return	
  3232  00032A  5067               	movf	(?_TiGetTics+1)^0,w,c
  3233  00032C  E104               	bnz	u1590
  3234  00032E  0E19               	movlw	25
  3235  000330  5C66               	subwf	?_TiGetTics^0,w,c
  3236  000332  A0D8               	btfss	status,0,c
  3237  000334  0012               	return	
  3238  000336                     u1590:
  3239                           
  3240                           ;keypad.c: 125:                 if (!!(PORTBbits.RB0 && PORTBbits.RB1 && PORTBbits.RB2))
      +                          {
  3241  000336  B081               	btfsc	129,0,c	;volatile
  3242  000338  A281               	btfss	129,1,c	;volatile
  3243  00033A  D01D               	goto	PL42
  3244  00033C  A481               	btfss	129,2,c	;volatile
  3245  00033E  D01B               	goto	PL42
  3246                           
  3247                           ;keypad.c: 126:                     pressed = 0;
  3248  000340  6A5A               	clrf	_pressed^0,c
  3249                           
  3250                           ;keypad.c: 127:                     state = 0;
  3251  000342  6A58               	clrf	_state^0,c
  3252                           
  3253                           ;keypad.c: 128:                 } else {
  3254  000344  0012               	return	
  3255  000346                     l2097:
  3256                           
  3257                           ;keypad.c: 129:                     state = 6;
  3258  000346  D017               	goto	PL42	;call to abstracted procedure
  3259  000348                     l2101:
  3260  000348  5058               	movf	_state^0,w,c
  3261  00034A  6E6D               	movwf	??_KeypadMotor^0,c
  3262  00034C  6A6E               	clrf	(??_KeypadMotor+1)^0,c
  3263                           
  3264                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3265                           ; Switch size 1, requested type "space"
  3266                           ; Number of cases is 1, Range of values is 0 to 0
  3267                           ; switch strategies available:
  3268                           ; Name         Instructions Cycles
  3269                           ; simple_byte            4     3 (average)
  3270                           ;	Chosen strategy is simple_byte
  3271  00034E  506E               	movf	(??_KeypadMotor+1)^0,w,c
  3272  000350  A4D8               	btfss	status,2,c
  3273  000352  0012               	return	
  3274                           
  3275                           ; Switch size 1, requested type "space"
  3276                           ; Number of cases is 8, Range of values is 0 to 7
  3277                           ; switch strategies available:
  3278                           ; Name         Instructions Cycles
  3279                           ; simple_byte           25    13 (average)
  3280                           ;	Chosen strategy is simple_byte
  3281  000354  506D               	movf	??_KeypadMotor^0,w,c
  3282  000356  E088               	bz	l130
  3283  000358  0A01               	xorlw	1	; case 1
  3284  00035A  E096               	bz	l134
  3285  00035C  0A03               	xorlw	3	; case 2
  3286  00035E  E0A2               	bz	l137
  3287  000360  0A01               	xorlw	1	; case 3
  3288  000362  E0AE               	bz	l140
  3289  000364  0A07               	xorlw	7	; case 4
  3290  000366  E0B9               	bz	l2063
  3291  000368  0A01               	xorlw	1	; case 5
  3292  00036A  E0BC               	bz	l2067
  3293  00036C  0A03               	xorlw	3	; case 6
  3294  00036E  E0CD               	bz	l148
  3295  000370  0A01               	xorlw	1	; case 7
  3296  000372  E0D6               	bz	l2087
  3297  000374  0012               	return		;funcret
  3298  000376                     __end_of_KeypadMotor:
  3299                           	callstack 0
  3300  000376                     PL42:
  3301                           	callstack 27
  3302  000376  0E06               	movlw	6
  3303  000378  6E58               	movwf	_state^0,c
  3304  00037A  0C06               	retlw	6
  3305  00037C                     __end_ofPL42:
  3306                           	callstack 0
  3307                           
  3308 ;; *************** function _TiResetTics *****************
  3309 ;; Defined at:
  3310 ;;		line 57 in file "TTimer.c"
  3311 ;; Parameters:    Size  Location     Type
  3312 ;;  Handle          1    wreg     unsigned char 
  3313 ;; Auto vars:     Size  Location     Type
  3314 ;;  Handle          1    5[COMRAM] unsigned char 
  3315 ;; Return value:  Size  Location     Type
  3316 ;;                  1    wreg      void 
  3317 ;; Registers used:
  3318 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  3319 ;; Tracked objects:
  3320 ;;		On entry : 0/0
  3321 ;;		On exit  : 0/0
  3322 ;;		Unchanged: 0/0
  3323 ;; Data sizes:     COMRAM   BANK0   BANK1
  3324 ;;      Params:         0       0       0
  3325 ;;      Locals:         1       0       0
  3326 ;;      Temps:          0       0       0
  3327 ;;      Totals:         1       0       0
  3328 ;;Total ram usage:        1 bytes
  3329 ;; Hardware stack levels used: 1
  3330 ;; Hardware stack levels required when called: 2
  3331 ;; This function calls:
  3332 ;;		Nothing
  3333 ;; This function is called by:
  3334 ;;		_KeypadMotor
  3335 ;;		_SMSMotor
  3336 ;;		_Espera
  3337 ;;		_WaitForBusy
  3338 ;; This function uses a non-reentrant model
  3339 ;;
  3340                           
  3341                           	psect	text26
  3342  000AC6                     __ptext26:
  3343                           	callstack 0
  3344  000AC6                     _TiResetTics:
  3345                           	callstack 24
  3346                           
  3347                           ;incstack = 0
  3348                           ;TiResetTics@Handle stored from wreg
  3349  000AC6  6E66               	movwf	TiResetTics@Handle^0,c
  3350                           
  3351                           ;TTimer.c: 61:     s_Timers[Handle].h_initialTics=h_Tics;
  3352  000AC8  5066               	movf	TiResetTics@Handle^0,w,c
  3353  000ACA  D805               	call	PL18	;call to abstracted procedure
  3354  000ACC  C04E  FFDE         	movff	_h_Tics,postinc2
  3355  000AD0  C04F  FFDD         	movff	_h_Tics+1,postdec2
  3356  000AD4  0012               	return		;funcret
  3357  000AD6                     __end_of_TiResetTics:
  3358                           	callstack 0
  3359  000AD6                     PL18:
  3360                           	callstack 23
  3361  000AD6  0D03               	mullw	3
  3362  000AD8  50F3               	movf	243,w,c
  3363  000ADA  0F01               	addlw	low _s_Timers
  3364  000ADC  6ED9               	movwf	fsr2l,c
  3365  000ADE  6ADA               	clrf	fsr2h,c
  3366  000AE0  0012               	return	
  3367  000AE2                     __end_ofPL18:
  3368                           	callstack 0
  3369                           
  3370 ;; *************** function _TiGetTics *****************
  3371 ;; Defined at:
  3372 ;;		line 63 in file "TTimer.c"
  3373 ;; Parameters:    Size  Location     Type
  3374 ;;  Handle          1    wreg     unsigned char 
  3375 ;; Auto vars:     Size  Location     Type
  3376 ;;  Handle          1    9[COMRAM] unsigned char 
  3377 ;;  actual          2   10[COMRAM] volatile unsigned int 
  3378 ;; Return value:  Size  Location     Type
  3379 ;;                  2    5[COMRAM] int 
  3380 ;; Registers used:
  3381 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  3382 ;; Tracked objects:
  3383 ;;		On entry : 0/0
  3384 ;;		On exit  : 0/0
  3385 ;;		Unchanged: 0/0
  3386 ;; Data sizes:     COMRAM   BANK0   BANK1
  3387 ;;      Params:         2       0       0
  3388 ;;      Locals:         3       0       0
  3389 ;;      Temps:          2       0       0
  3390 ;;      Totals:         7       0       0
  3391 ;;Total ram usage:        7 bytes
  3392 ;; Hardware stack levels used: 1
  3393 ;; Hardware stack levels required when called: 2
  3394 ;; This function calls:
  3395 ;;		Nothing
  3396 ;; This function is called by:
  3397 ;;		_KeypadMotor
  3398 ;;		_SMSMotor
  3399 ;;		_Espera
  3400 ;;		_WaitForBusy
  3401 ;; This function uses a non-reentrant model
  3402 ;;
  3403                           
  3404                           	psect	text27
  3405  000A44                     __ptext27:
  3406                           	callstack 0
  3407  000A44                     _TiGetTics:
  3408                           	callstack 24
  3409                           
  3410                           ;incstack = 0
  3411                           ;TiGetTics@Handle stored from wreg
  3412  000A44  6E6A               	movwf	TiGetTics@Handle^0,c
  3413                           
  3414                           ;TTimer.c: 67:     volatile unsigned int actual;;TTimer.c: 68:     actual=h_Tics;
  3415  000A46  C04E  F06B         	movff	_h_Tics,TiGetTics@actual	;volatile
  3416  000A4A  C04F  F06C         	movff	_h_Tics+1,TiGetTics@actual+1	;volatile
  3417                           
  3418                           ;TTimer.c: 69:     return (actual-(s_Timers[Handle].h_initialTics));
  3419  000A4E  506A               	movf	TiGetTics@Handle^0,w,c
  3420  000A50  EC6B  F005         	call	PL18	;call to abstracted procedure
  3421  000A54  CFDE F068          	movff	postinc2,??_TiGetTics
  3422  000A58  CFDD F069          	movff	postdec2,??_TiGetTics+1
  3423  000A5C  5068               	movf	??_TiGetTics^0,w,c
  3424  000A5E  5C6B               	subwf	TiGetTics@actual^0,w,c	;volatile
  3425  000A60  6E66               	movwf	?_TiGetTics^0,c
  3426  000A62  5069               	movf	(??_TiGetTics+1)^0,w,c
  3427  000A64  586C               	subwfb	(TiGetTics@actual+1)^0,w,c	;volatile
  3428  000A66  6E67               	movwf	(?_TiGetTics+1)^0,c
  3429  000A68  0012               	return		;funcret
  3430  000A6A                     __end_of_TiGetTics:
  3431                           	callstack 0
  3432                           
  3433 ;; *************** function _RSI_High *****************
  3434 ;; Defined at:
  3435 ;;		line 27 in file "main.c"
  3436 ;; Parameters:    Size  Location     Type
  3437 ;;		None
  3438 ;; Auto vars:     Size  Location     Type
  3439 ;;		None
  3440 ;; Return value:  Size  Location     Type
  3441 ;;                  1    wreg      void 
  3442 ;; Registers used:
  3443 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3444 ;; Tracked objects:
  3445 ;;		On entry : 0/0
  3446 ;;		On exit  : 0/0
  3447 ;;		Unchanged: 0/0
  3448 ;; Data sizes:     COMRAM   BANK0   BANK1
  3449 ;;      Params:         0       0       0
  3450 ;;      Locals:         0       0       0
  3451 ;;      Temps:          4       0       0
  3452 ;;      Totals:         4       0       0
  3453 ;;Total ram usage:        4 bytes
  3454 ;; Hardware stack levels used: 1
  3455 ;; Hardware stack levels required when called: 1
  3456 ;; This function calls:
  3457 ;;		__TiRSITimer
  3458 ;; This function is called by:
  3459 ;;		Interrupt level 2
  3460 ;; This function uses a non-reentrant model
  3461 ;;
  3462                           
  3463                           	psect	intcode
  3464  000008                     __pintcode:
  3465                           	callstack 0
  3466  000008                     _RSI_High:
  3467                           	callstack 23
  3468                           
  3469                           ;incstack = 0
  3470  000008  827A               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  3471  00000A  CFD9 F062          	movff	fsr2l,??_RSI_High
  3472  00000E  CFDA F063          	movff	fsr2h,??_RSI_High+1
  3473  000012  CFF3 F064          	movff	prodl,??_RSI_High+2
  3474  000016  CFF4 F065          	movff	prodh,??_RSI_High+3
  3475                           
  3476                           ;main.c: 29:         menuMotor();
  3477  00001A  EC6E  F004         	call	__TiRSITimer	;wreg free
  3478  00001E  C065  FFF4         	movff	??_RSI_High+3,prodh
  3479  000022  C064  FFF3         	movff	??_RSI_High+2,prodl
  3480  000026  C063  FFDA         	movff	??_RSI_High+1,fsr2h
  3481  00002A  C062  FFD9         	movff	??_RSI_High,fsr2l
  3482  00002E  927A               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  3483  000030  0011               	retfie		f
  3484  000032                     __end_of_RSI_High:
  3485                           	callstack 0
  3486                           
  3487 ;; *************** function __TiRSITimer *****************
  3488 ;; Defined at:
  3489 ;;		line 37 in file "TTimer.c"
  3490 ;; Parameters:    Size  Location     Type
  3491 ;;		None
  3492 ;; Auto vars:     Size  Location     Type
  3493 ;;		None
  3494 ;; Return value:  Size  Location     Type
  3495 ;;                  1    wreg      void 
  3496 ;; Registers used:
  3497 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  3498 ;; Tracked objects:
  3499 ;;		On entry : 0/0
  3500 ;;		On exit  : 0/0
  3501 ;;		Unchanged: 0/0
  3502 ;; Data sizes:     COMRAM   BANK0   BANK1
  3503 ;;      Params:         0       0       0
  3504 ;;      Locals:         0       0       0
  3505 ;;      Temps:          1       0       0
  3506 ;;      Totals:         1       0       0
  3507 ;;Total ram usage:        1 bytes
  3508 ;; Hardware stack levels used: 1
  3509 ;; This function calls:
  3510 ;;		Nothing
  3511 ;; This function is called by:
  3512 ;;		_RSI_High
  3513 ;; This function uses a non-reentrant model
  3514 ;;
  3515                           
  3516                           	psect	text29
  3517  0008DC                     __ptext29:
  3518                           	callstack 0
  3519  0008DC                     __TiRSITimer:
  3520                           	callstack 0
  3521                           
  3522                           ;TTimer.c: 40:     TMR0H = 0xD8;
  3523                           
  3524                           ;incstack = 0
  3525                           
  3526                           ;TTimer.c: 41:     TMR0L = 0xF0;
  3527  0008DC  D81E               	call	PL40	;call to abstracted procedure
  3528                           
  3529                           ;TTimer.c: 43:     INTCONbits.TMR0IF = 0;
  3530  0008DE  94F2               	bcf	242,2,c	;volatile
  3531                           
  3532                           ;TTimer.c: 44:     h_Tics++;
  3533  0008E0  4A4E               	infsnz	_h_Tics^0,f,c
  3534  0008E2  2A4F               	incf	(_h_Tics+1)^0,f,c
  3535                           
  3536                           ;TTimer.c: 46:     if (h_Tics>=30000) {
  3537  0008E4  0E30               	movlw	48
  3538  0008E6  5C4E               	subwf	_h_Tics^0,w,c
  3539  0008E8  0E75               	movlw	117
  3540  0008EA  584F               	subwfb	(_h_Tics+1)^0,w,c
  3541  0008EC  A0D8               	btfss	status,0,c
  3542  0008EE  0012               	return	
  3543                           
  3544                           ;TTimer.c: 48:         for (counter=0;counter<25;counter++){
  3545  0008F0  6A60               	clrf	_counter^0,c
  3546  0008F2                     i2l1373:
  3547  0008F2  0E18               	movlw	24
  3548  0008F4  6460               	cpfsgt	_counter^0,c
  3549  0008F6  D001               	goto	i2l1377
  3550  0008F8  D00D               	goto	i2l57
  3551  0008FA                     i2l1377:
  3552                           
  3553                           ;TTimer.c: 49:             if (s_Timers[counter].b_busy==1){
  3554  0008FA  ECF2  F004         	call	PL6	;call to abstracted procedure
  3555  0008FE  04DE               	decf	postinc2,w,c
  3556  000900  E107               	bnz	i2l1381
  3557                           
  3558                           ;TTimer.c: 50:                 s_Timers[counter].h_initialTics -= h_Tics;
  3559  000902  5060               	movf	_counter^0,w,c
  3560  000904  EC6B  F005         	call	PL18	;call to abstracted procedure
  3561  000908  504E               	movf	_h_Tics^0,w,c
  3562  00090A  5EDE               	subwf	postinc2,f,c
  3563  00090C  504F               	movf	(_h_Tics+1)^0,w,c
  3564  00090E  5ADD               	subwfb	postdec2,f,c
  3565  000910                     i2l1381:
  3566                           
  3567                           ;TTimer.c: 52:         }
  3568  000910  2A60               	incf	_counter^0,f,c
  3569  000912  D7EF               	goto	i2l1373
  3570  000914                     i2l57:
  3571                           
  3572                           ;TTimer.c: 53:         h_Tics=0;
  3573  000914  6A4E               	clrf	_h_Tics^0,c
  3574  000916  6A4F               	clrf	(_h_Tics+1)^0,c
  3575  000918  0012               	return		;funcret
  3576  00091A                     __end_of__TiRSITimer:
  3577                           	callstack 0
  3578  00091A                     PL40:
  3579                           	callstack 28
  3580  00091A  0ED8               	movlw	216
  3581  00091C  6ED7               	movwf	215,c	;volatile
  3582  00091E  0EF0               	movlw	240
  3583  000920  6ED6               	movwf	214,c	;volatile
  3584  000922  0CF0               	retlw	240
  3585  000924                     __end_ofPL40:
  3586                           	callstack 0
  3587                           
  3588                           	psect	rparam
  3589  0000                     
  3590                           	psect	temp
  3591  00007A                     btemp:
  3592                           	callstack 0
  3593  00007A                     	ds	1
  3594  0000                     int$flags	set	btemp
  3595  0000                     wtemp8	set	btemp+1
  3596  0000                     ttemp5	set	btemp+1
  3597  0000                     ttemp6	set	btemp+4
  3598  0000                     ttemp7	set	btemp+8
  3599                           
  3600                           	psect	idloc
  3601                           
  3602                           ;Config register IDLOC0 @ 0x200000
  3603                           ;	unspecified, using default values
  3604  200000                     	org	2097152
  3605  200000  FF                 	db	255
  3606                           
  3607                           ;Config register IDLOC1 @ 0x200001
  3608                           ;	unspecified, using default values
  3609  200001                     	org	2097153
  3610  200001  FF                 	db	255
  3611                           
  3612                           ;Config register IDLOC2 @ 0x200002
  3613                           ;	unspecified, using default values
  3614  200002                     	org	2097154
  3615  200002  FF                 	db	255
  3616                           
  3617                           ;Config register IDLOC3 @ 0x200003
  3618                           ;	unspecified, using default values
  3619  200003                     	org	2097155
  3620  200003  FF                 	db	255
  3621                           
  3622                           ;Config register IDLOC4 @ 0x200004
  3623                           ;	unspecified, using default values
  3624  200004                     	org	2097156
  3625  200004  FF                 	db	255
  3626                           
  3627                           ;Config register IDLOC5 @ 0x200005
  3628                           ;	unspecified, using default values
  3629  200005                     	org	2097157
  3630  200005  FF                 	db	255
  3631                           
  3632                           ;Config register IDLOC6 @ 0x200006
  3633                           ;	unspecified, using default values
  3634  200006                     	org	2097158
  3635  200006  FF                 	db	255
  3636                           
  3637                           ;Config register IDLOC7 @ 0x200007
  3638                           ;	unspecified, using default values
  3639  200007                     	org	2097159
  3640  200007  FF                 	db	255
  3641                           
  3642                           	psect	config
  3643                           
  3644                           ; Padding undefined space
  3645  300000                     	org	3145728
  3646  300000  FF                 	db	255
  3647                           
  3648                           ;Config register CONFIG1H @ 0x300001
  3649                           ;	Oscillator
  3650                           ;	OSC = HS, HS Oscillator
  3651                           ;	Fail-Safe Clock Monitor Enable bit
  3652                           ;	FCMEN = 0x0, unprogrammed default
  3653                           ;	Internal/External Oscillator Switchover bit
  3654                           ;	IESO = 0x0, unprogrammed default
  3655  300001                     	org	3145729
  3656  300001  02                 	db	2
  3657                           
  3658                           ;Config register CONFIG2L @ 0x300002
  3659                           ;	Power-up Timer Enable bit
  3660                           ;	PWRT = OFF, PWRT disabled
  3661                           ;	Brown-out Reset Enable bits
  3662                           ;	BOR = OFF, Brown-out Reset disabled in hardware and software
  3663                           ;	Brown-out Reset Voltage bits
  3664                           ;	BORV = 0x3, unprogrammed default
  3665  300002                     	org	3145730
  3666  300002  19                 	db	25
  3667                           
  3668                           ;Config register CONFIG2H @ 0x300003
  3669                           ;	Watchdog Timer Enable bit
  3670                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
  3671                           ;	Watchdog Timer Postscale Select bits
  3672                           ;	WDTPS = 0xF, unprogrammed default
  3673  300003                     	org	3145731
  3674  300003  1E                 	db	30
  3675                           
  3676                           ; Padding undefined space
  3677  300004                     	org	3145732
  3678  300004  FF                 	db	255
  3679                           
  3680                           ;Config register CONFIG3H @ 0x300005
  3681                           ;	CCP2 MUX bit
  3682                           ;	CCP2MX = 0x1, unprogrammed default
  3683                           ;	PORTB A/D Enable bit
  3684                           ;	PBADEN = DIG, PORTB<4:0> pins are configured as digital I/O on Reset
  3685                           ;	Low-Power Timer1 Oscillator Enable bit
  3686                           ;	LPT1OSC = 0x0, unprogrammed default
  3687                           ;	MCLR Pin Enable bit
  3688                           ;	MCLRE = OFF, RE3 input pin enabled; MCLR disabled
  3689  300005                     	org	3145733
  3690  300005  01                 	db	1
  3691                           
  3692                           ;Config register CONFIG4L @ 0x300006
  3693                           ;	Stack Full/Underflow Reset Enable bit
  3694                           ;	STVREN = 0x1, unprogrammed default
  3695                           ;	Single-Supply ICSP Enable bit
  3696                           ;	LVP = OFF, Single-Supply ICSP disabled
  3697                           ;	Boot Block Size Select bits
  3698                           ;	BBSIZ = 0x0, unprogrammed default
  3699                           ;	Extended Instruction Set Enable bit
  3700                           ;	XINST = 0x0, unprogrammed default
  3701                           ;	Background Debugger Enable bit
  3702                           ;	DEBUG = OFF, Background debugger disabled, RB6 and RB7 configured as general purpose I
      +                          /O pins
  3703  300006                     	org	3145734
  3704  300006  81                 	db	129
  3705                           
  3706                           ; Padding undefined space
  3707  300007                     	org	3145735
  3708  300007  FF                 	db	255
  3709                           
  3710                           ;Config register CONFIG5L @ 0x300008
  3711                           ;	unspecified, using default values
  3712                           ;	Code Protection bit
  3713                           ;	CP0 = 0x1, unprogrammed default
  3714                           ;	Code Protection bit
  3715                           ;	CP1 = 0x1, unprogrammed default
  3716  300008                     	org	3145736
  3717  300008  03                 	db	3
  3718                           
  3719                           ;Config register CONFIG5H @ 0x300009
  3720                           ;	unspecified, using default values
  3721                           ;	Boot Block Code Protection bitProtect Boot
  3722                           ;	CPB = 0x1, unprogrammed default
  3723                           ;	Data EEPROM Code Protection bit
  3724                           ;	CPD = 0x1, unprogrammed default
  3725  300009                     	org	3145737
  3726  300009  C0                 	db	192
  3727                           
  3728                           ;Config register CONFIG6L @ 0x30000A
  3729                           ;	unspecified, using default values
  3730                           ;	Write Protection bit
  3731                           ;	WRT0 = 0x1, unprogrammed default
  3732                           ;	Write Protection bit
  3733                           ;	WRT1 = 0x1, unprogrammed default
  3734  30000A                     	org	3145738
  3735  30000A  03                 	db	3
  3736                           
  3737                           ;Config register CONFIG6H @ 0x30000B
  3738                           ;	unspecified, using default values
  3739                           ;	Configuration Register Write Protection bit
  3740                           ;	WRTC = 0x1, unprogrammed default
  3741                           ;	Boot Block Write Protection bit
  3742                           ;	WRTB = 0x1, unprogrammed default
  3743                           ;	Data EEPROM Write Protection bit
  3744                           ;	WRTD = 0x1, unprogrammed default
  3745  30000B                     	org	3145739
  3746  30000B  E0                 	db	224
  3747                           
  3748                           ;Config register CONFIG7L @ 0x30000C
  3749                           ;	unspecified, using default values
  3750                           ;	Table Read Protection bit
  3751                           ;	EBTR0 = 0x1, unprogrammed default
  3752                           ;	Table Read Protection bit
  3753                           ;	EBTR1 = 0x1, unprogrammed default
  3754  30000C                     	org	3145740
  3755  30000C  03                 	db	3
  3756                           
  3757                           ;Config register CONFIG7H @ 0x30000D
  3758                           ;	unspecified, using default values
  3759                           ;	Boot Block Table Read Protection bit
  3760                           ;	EBTRB = 0x1, unprogrammed default
  3761  30000D                     	org	3145741
  3762  30000D  40                 	db	64
  3763                           tosu	equ	0xFFF
  3764                           tosh	equ	0xFFE
  3765                           tosl	equ	0xFFD
  3766                           stkptr	equ	0xFFC
  3767                           pclatu	equ	0xFFB
  3768                           pclath	equ	0xFFA
  3769                           pcl	equ	0xFF9
  3770                           tblptru	equ	0xFF8
  3771                           tblptrh	equ	0xFF7
  3772                           tblptrl	equ	0xFF6
  3773                           tablat	equ	0xFF5
  3774                           prodh	equ	0xFF4
  3775                           prodl	equ	0xFF3
  3776                           indf0	equ	0xFEF
  3777                           postinc0	equ	0xFEE
  3778                           postdec0	equ	0xFED
  3779                           preinc0	equ	0xFEC
  3780                           plusw0	equ	0xFEB
  3781                           fsr0h	equ	0xFEA
  3782                           fsr0l	equ	0xFE9
  3783                           wreg	equ	0xFE8
  3784                           indf1	equ	0xFE7
  3785                           postinc1	equ	0xFE6
  3786                           postdec1	equ	0xFE5
  3787                           preinc1	equ	0xFE4
  3788                           plusw1	equ	0xFE3
  3789                           fsr1h	equ	0xFE2
  3790                           fsr1l	equ	0xFE1
  3791                           bsr	equ	0xFE0
  3792                           indf2	equ	0xFDF
  3793                           postinc2	equ	0xFDE
  3794                           postdec2	equ	0xFDD
  3795                           preinc2	equ	0xFDC
  3796                           plusw2	equ	0xFDB
  3797                           fsr2h	equ	0xFDA
  3798                           fsr2l	equ	0xFD9
  3799                           status	equ	0xFD8

Data Sizes:
    Strings     0
    Constant    100
    Data        1
    BSS         96
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     24     121
    BANK0           128      4       4
    BANK1           256      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMRAM

    _menuMotor->_displayMenu
    _displayMenu->_LcPutChar
    _LcPutChar->_LcGotoXY
    _LcGotoXY->_WaitForBusy
    _CantaData->_CantaPartAlta
    _CantaData->_CantaPartBaixa
    _LcCursorOn->_WaitForBusy
    _KeGetGenericValue->_getGenericKey
    _KeGetCharValue->_getFullValue
    _initKeypad->_TiGetTimer
    _SMSMotor->_TiGetTics
    _LcInit->_Espera
    _WaitForBusy->_TiGetTics
    _Espera->_TiGetTics
    _CantaIR->_CantaPartAlta
    _CantaIR->_CantaPartBaixa
    _KeypadMotor->_TiGetTics

Critical Paths under _RSI_High in COMRAM

    _RSI_High->__TiRSITimer

Critical Paths under _main in BANK0

    _main->_menuMotor
    _menuMotor->_displayMenu

Critical Paths under _RSI_High in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _RSI_High in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    9224
                        _KeypadMotor
                             _LcInit
                           _SMSMotor
                        _TiInitTimer
                         _initKeypad
                          _menuMotor
 ---------------------------------------------------------------------------------
 (1) _menuMotor                                            2     2      0    7111
                                              2 BANK0      2     2      0
                     _KeGetCharValue
                  _KeGetGenericValue
                         _LcCursorOn
                           _LcGotoXY
                          _LcPutChar
                        _displayMenu
                         _getPresses
                          _isPressed
 ---------------------------------------------------------------------------------
 (2) _isPressed                                            1     1      0      24
                                              5 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _getPresses                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _displayMenu                                          4     3      1    3186
                                             22 COMRAM     2     1      1
                                              0 BANK0      2     2      0
                           _LcGotoXY
                          _LcPutChar
 ---------------------------------------------------------------------------------
 (3) _LcPutChar                                            1     1      0    1652
                                             21 COMRAM     1     1      0
                          _CantaData
                           _LcGotoXY
                        _WaitForBusy
 ---------------------------------------------------------------------------------
 (4) _LcGotoXY                                             8     7      1    1320
                                             13 COMRAM     8     7      1
                            _CantaIR
                        _WaitForBusy
 ---------------------------------------------------------------------------------
 (4) _CantaData                                            1     1      0     220
                                              7 COMRAM     1     1      0
                      _CantaPartAlta
                     _CantaPartBaixa
 ---------------------------------------------------------------------------------
 (2) _LcCursorOn                                           0     0      0     310
                            _CantaIR
                        _WaitForBusy
 ---------------------------------------------------------------------------------
 (2) _KeGetGenericValue                                    0     0      0     272
                          _getColumn
                      _getGenericKey
 ---------------------------------------------------------------------------------
 (2) _KeGetCharValue                                       0     0      0     347
                          _getColumn
                       _getFullValue
                      _getGenericKey
 ---------------------------------------------------------------------------------
 (3) _getFullValue                                         5     5      0      75
                                              5 COMRAM     5     5      0
 ---------------------------------------------------------------------------------
 (1) _initKeypad                                           0     0      0       0
                         _TiGetTimer
 ---------------------------------------------------------------------------------
 (1) _TiInitTimer                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SMSMotor                                             2     2      0     339
                                             12 COMRAM     2     2      0
                          _TiGetTics
                        _TiResetTics
                          _getColumn
                      _getGenericKey
 ---------------------------------------------------------------------------------
 (3) _getGenericKey                                        3     2      1     272
                                              5 COMRAM     3     2      1
                          _getColumn (ARG)
 ---------------------------------------------------------------------------------
 (3) _getColumn                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _LcInit                                               4     3      1    1707
                                             17 COMRAM     4     3      1
                            _CantaIR
                 _EscriuPrimeraOrdre
                             _Espera
                         _TiGetTimer
                        _WaitForBusy
 ---------------------------------------------------------------------------------
 (4) _WaitForBusy                                          1     1      0      90
                                             12 COMRAM     1     1      0
                          _TiGetTics
                        _TiResetTics
 ---------------------------------------------------------------------------------
 (2) _TiGetTimer                                           1     1      0       0
                                              5 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _Espera                                               5     1      4    1171
                                             12 COMRAM     5     1      4
                          _TiGetTics
                        _TiResetTics
 ---------------------------------------------------------------------------------
 (2) _EscriuPrimeraOrdre                                   2     2      0      60
                                              5 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (5) _CantaIR                                              1     1      0     220
                                              7 COMRAM     1     1      0
                      _CantaPartAlta
                     _CantaPartBaixa
 ---------------------------------------------------------------------------------
 (6) _CantaPartBaixa                                       2     2      0      88
                                              5 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (6) _CantaPartAlta                                        2     2      0      88
                                              5 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _KeypadMotor                                          2     2      0      67
                                             12 COMRAM     2     2      0
                          _TiGetTics
                        _TiResetTics
 ---------------------------------------------------------------------------------
 (5) _TiResetTics                                          1     1      0      22
                                              5 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (5) _TiGetTics                                            7     5      2      45
                                              5 COMRAM     7     5      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _RSI_High                                             4     4      0       0
                                              1 COMRAM     4     4      0
                        __TiRSITimer
 ---------------------------------------------------------------------------------
 (8) __TiRSITimer                                          1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _KeypadMotor
     _TiGetTics
     _TiResetTics
   _LcInit
     _CantaIR
       _CantaPartAlta
       _CantaPartBaixa
     _EscriuPrimeraOrdre
     _Espera
       _TiGetTics
       _TiResetTics
     _TiGetTimer
     _WaitForBusy
       _TiGetTics
       _TiResetTics
   _SMSMotor
     _TiGetTics
     _TiResetTics
     _getColumn
     _getGenericKey
       _getColumn (ARG)
   _TiInitTimer
   _initKeypad
     _TiGetTimer
   _menuMotor
     _KeGetCharValue
       _getColumn
       _getFullValue
       _getGenericKey
     _KeGetGenericValue
       _getColumn
       _getGenericKey
     _LcCursorOn
       _CantaIR
       _WaitForBusy
     _LcGotoXY
       _CantaIR
       _WaitForBusy
     _LcPutChar
       _CantaData
         _CantaPartAlta
         _CantaPartBaixa
       _LcGotoXY
       _WaitForBusy
     _displayMenu
       _LcGotoXY
       _LcPutChar
     _getPresses
     _isPressed

 _RSI_High (ROOT)
   __TiRSITimer

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             1FF      0       0      17        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      4       4       5        3.1%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     18      79       1       96.0%
BITBIGSFRlh         3A      0       0      11        0.0%
BITBIGSFRhlhh       19      0       0       9        0.0%
BITBIGSFRhh          D      0       0       8        0.0%
BITBIGSFRllhlh       6      0       0      13        0.0%
BITBIGSFRllhh        6      0       0      12        0.0%
BITBIGSFRhll         4      0       0      10        0.0%
BITBIGSFRllhll       1      0       0      14        0.0%
BITBIGSFRlll         1      0       0      15        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      7D      16        0.0%
DATA                 0      0      7D       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.36 build 20220127204148 
Symbol Table                                                                                   Sat Jun 04 15:01:15 2022

         TiResetTics@Handle 0066                ?_displayMenu 0077                          PL2 0522  
                        PL4 0852                          PL6 09E4                          PL8 06A2  
                       PL10 0870                         PL20 0982                         PL12 06AC  
                       PL30 0990                         PL22 06CA                         PL14 06B8  
                       PL40 091A                         PL32 07BE                         PL24 074A  
                       PL16 044E                         PL42 0376                         PL34 0758  
                       PL26 06D2                         PL18 0AD6                         PL44 0462  
                       PL36 06DE                         PL28 045A                         PL38 0824  
                       l130 0268                         l140 02C0                         l134 0288  
                       l137 02A4                         l161 061E                         l148 030A  
                       l173 0B06                         l158 05C4                         l270 058A  
                       l263 0550                         l259 053E                         u410 06F8  
                       u250 083A                         u430 070E                         u450 0722  
                       u428 06FA                         u470 073A                         u448 0710  
                       u468 0724                         u488 073C                         u960 07D4  
                       u980 07EA                         u978 07D6                         u998 07EC  
                       _row 005F            ??_CantaPartBaixa 0066                         wreg 000FE8  
                      l2003 062C                        l2011 063C                        l2101 0348  
                      l2201 0670                        l1235 084C                        l2203 0674  
                      l2029 0282                        l2063 02DA                        l1239 084E  
                      l2207 067A                        l2217 069A                        l2209 067E  
                      l2225 037E                        l2067 02E4                        l2059 02D6  
                      l1283 09CA                        l1291 09D4                        l2077 0304  
                      l2261 03F6                        l2245 03C0                        l2237 03A2  
                      l2087 0320                        l2255 03E2                        l2247 03C6  
                      l2097 0346                        l1393 0A32                        l2275 041E  
                      l2267 0402                        l2259 03F2                        l2283 0432  
                      l1397 0A3A                        l2293 0A7C                        l1745 0936  
                      l1771 0532                        l1781 055E                        l1845 08AA  
                      l1767 095C                        l1935 0488                        l1775 0542  
                      l1791 0592                        l1863 08D2                        l1785 056C  
                      l1793 05AC                        l1857 08C4                        l1885 0A90  
                      l1991 0610                        l1975 05E4                        l1995 0616  
                      l1997 0618                        l1999 0624                        u1000 07FE  
                      u1020 0816                        u1100 07B0                        u1040 076E  
                      u1018 0800                        u1060 0784                        u1038 0818  
                      u1118 07B2                        u1080 0798                        u1058 0770  
                      u1330 0520                        u1078 0786                        _LATC 000F8B  
                      u1520 02FA                        u1098 079A                        u1590 0336  
                      i2l57 0914                        _Rows 0056                        _main 0A6A  
                      fsr2h 000FDA                        indf2 000FDF                        fsr2l 000FD9  
                _LcCursorOn 0B26                        btemp 007A                        prodh 000FF4  
                      prodl 000FF3                        start 0032             __end_of_CantaIR 0AC6  
             LcInit@columns 0072                ___param_bank 000000               _isPressed$554 0066  
               Espera@Timer 006D                       ?_main 0061               ??_TiInitTimer 0066  
                     _T0CON 000FD5                       _TABLE 020D               ??_KeypadMotor 006D  
                     _TMR0H 000FD7                       _TMR0L 000FD6                       _Timer 004C  
          __end_of_SMSTABLE 024F                       _state 0058            __end_of_RSI_High 0032  
          __end_of_SMSMotor 0656                       tablat 000FF5               ??_TiResetTics 0066  
                     ttemp5 007B                       ttemp6 007E                       ttemp7 0082  
                     status 000FD8                       wtemp8 007B            __end_of_LcGotoXY 05C2  
             ??__TiRSITimer 0061                  _TiGetTimer 09C6     EscriuPrimeraOrdre@ordre 0067  
           __initialization 099A                __end_of_main 0A8A        __end_of_getFullValue 0852  
                    ??_main 0079               __activetblptr 000002           __end_of_LOGINMENU 0265  
       __end_of_TiInitTimer 0A44         __end_of_KeypadMotor 0376                   ??_CantaIR 0068  
                    i2l1381 0910                      i2l1373 08F2                      i2l1377 08FA  
                    _LCDcol 0051              LcGotoXY@Fisics 0073              LcGotoXY@Column 0075  
                    _LCDrow 0052               ??_WaitForBusy 006D                 ?_LcCursorOn 0061  
                    _LcInit 0468                      _Espera 0A8A                _LcGotoXY$761 0071  
                    _RowAct 0054         __end_of_TiResetTics 0AD6                      _h_Tics 004E  
       __end_of__TiRSITimer 091A                      clear_0 09B2                      isa$std 000001  
              __pdataCOMRAM 0079                __mediumconst 0000       __end_of_getGenericKey 0AF8  
                    tblptrh 000FF7                      tblptrl 000FF6                      tblptru 000FF8  
         __end_of_CantaData 0982                  __accesstop 0080     __end_of__initialization 09B8  
         __end_of_LcPutChar 08DC         getGenericKey@column 0066               ___rparam_used 000001  
             __end_of_TABLE 0219                 ?_TiGetTimer 0061              __pcstackCOMRAM 0061  
       __end_of_WaitForBusy 0962                  __end_ofPL2 052E                  __end_ofPL4 0870  
                __end_ofPL6 09F2                  __end_ofPL8 06AC                   ?_RSI_High 0061  
                 ?_SMSMotor 0061           __end_of_TiGetTics 0A6A                 _TiInitTimer 0A1C  
               _KeypadMotor 0266                   ?_LcGotoXY 006E                 _TiResetTics 0AC6  
                   ?_LcInit 0072               _CantaPartAlta 07C8                     ?_Espera 006D  
               __TiRSITimer 08DC                  ??_RSI_High 0062                  ??_SMSMotor 006D  
                _getPresses 0B3A        __end_of_LOGREGSCREEN 020D                     LcInit@i 0074  
                ??_LcGotoXY 006F                _getFullValue 082E                     _CantaIR 0AAA  
               _WaitForBusy 0924              ?_CantaPartAlta 0061                     _Columns 0055  
         __end_of_getColumn 0B3A                     __Hparam 0000                     __Lparam 0000  
                _initKeypad 09F2            getGenericKey@row 0068                __psmallconst 0200  
                _currentKey 005C           __end_of_isPressed 0B0A                     __pcinit 099A  
                   __ramtop 0200                     __ptext0 0A6A                     __ptext1 037C  
                   __ptext2 0AF8                     __ptext3 0B3A                     __ptext4 0656  
                   __ptext5 0888                     __ptext6 052E                     __ptext7 0962  
                   __ptext8 0B26                     __ptext9 0B1A                   _T0CONbits 000FD5  
                 CantaIR@IR 0068                     _counter 0060              displayMenu@row 0077  
         __end_of_menuMotor 044E                     _pressed 005A             WaitForBusy@Busy 006D  
      end_of_initialization 09B8                   _LOGINMENU 024F               __Lmediumconst 0000  
           TiGetTics@Handle 006A                ??_LcCursorOn 006E                  _numPresses 0059  
           TiGetTics@actual 006B                     postdec2 000FDD                     postinc0 000FEE  
                   postinc2 000FDE                   _PORTBbits 000F81                   _PORTDbits 000F83  
               ?_getPresses 0061           _KeGetGenericValue 0B1A          __end_of_LcCursorOn 0B30  
        ?_KeGetGenericValue 0061                   _TRISBbits 000F93                   _TRISCbits 000F94  
                 _TRISDbits 000F95         getFullValue@generic 006A         ??_KeGetGenericValue 0069  
           ??_CantaPartAlta 0066                   _CantaData 0962                ??_TiGetTimer 0066  
            __end_of_LcInit 0522                   _LcPutChar 0888              __end_of_Espera 0AAA  
               ?_initKeypad 0061              _KeGetCharValue 0B0A               ??_displayMenu 0080  
__end_of_EscriuPrimeraOrdre 074A   __end_of_KeGetGenericValue 0B26               __pidataCOMRAM 0B3E  
                 _ColumnAct 0053                ?_TiInitTimer 0061                ?_KeypadMotor 0061  
               __end_ofPL10 0888                 __end_ofPL20 0990                 __end_ofPL12 06B8  
               __end_ofPL30 099A                 __end_ofPL22 06D2                 __end_ofPL14 06CA  
               __end_ofPL40 0924                 __end_ofPL32 07C8                 __end_ofPL24 0758  
               __end_ofPL16 045A                 __end_ofPL42 037C                 __end_ofPL34 0762  
               __end_ofPL26 06DE                 __end_ofPL18 0AE2                 __end_ofPL44 0468  
               __end_ofPL36 06E6                 __end_ofPL28 0462                 __end_ofPL38 082E  
       start_initialization 099A                   _TiGetTics 0A44          __end_of_TiGetTimer 09E4  
       displayMenu@menuMode 0078                ?_TiResetTics 0061                  ?_CantaData 0061  
                  ??_LcInit 0073                _LOGREGSCREEN 0201      __end_of_KeGetCharValue 0B1A  
              ?__TiRSITimer 0061                    ??_Espera 0071                  ?_LcPutChar 0061  
       __end_of_displayMenu 06A2                 __pbssCOMRAM 0001               __pcstackBANK0 0080  
                ?_TiGetTics 0066                    ?_CantaIR 0061              _CantaPartBaixa 0762  
              ?_WaitForBusy 0061             ?_KeGetCharValue 0061                   __pintcode 0008  
                 _getColumn 0B30                   _available 0079             CantaPartBaixa@c 0067  
               __smallconst 0200                   _isPressed 0AF8               _getGenericKey 0AE2  
                 _menuMotor 037C      __end_of_CantaPartBaixa 07BE                 ??_CantaData 0068  
                  _LATBbits 000F8A                    _LATDbits 000F8C                 ??_LcPutChar 0076  
                  _RCONbits 000FD0                  ?_getColumn 0061                   _timer_SMS 005D  
               _displayMenu 0656                    _SMSTABLE 0219                    _RSI_High 0008  
              ??_getPresses 0066                    _SMSMotor 05C2                  ?_isPressed 0061  
                  Espera@ms 006F                    _LcGotoXY 052E                 ??_TiGetTics 0068  
            ?_getGenericKey 0066                 LcGotoXY@Row 006E                  ?_menuMotor 0061  
               _INTCON2bits 000FF1             ?_CantaPartBaixa 0061              menuMotor@state 0050  
        __end_of_getPresses 0B3E                    __Hrparam 0000                    __Lrparam 0000  
              ??_initKeypad 0067                    __ptext10 0B0A                    __ptext11 082E  
        _EscriuPrimeraOrdre 06E6                    __ptext20 0A8A                    __ptext12 09F2  
                  __ptext21 06E6                    __ptext13 0A1C                    __ptext22 0AAA  
                  __ptext14 05C2                    __ptext23 0762                    __ptext15 0AE2  
                  __ptext24 07C8                    __ptext16 0B30                    __ptext25 0266  
                  __ptext17 0468                    __ptext26 0AC6                    __ptext18 0924  
                  __ptext27 0A44                    __ptext19 09C6                    __ptext29 08DC  
            CantaPartAlta@c 0067          __end_of_initKeypad 0A1C                    _s_Timers 0001  
       ?_EscriuPrimeraOrdre 0061       __end_of_CantaPartAlta 0824               CantaData@Data 0068  
               ??_getColumn 0066                    isa$xinst 000000                    _previous 005B  
                  int$flags 007A                    _stateSMS 0057        ??_EscriuPrimeraOrdre 0066  
                LcInit@rows 0073             ??_getGenericKey 0067                 ??_isPressed 0066  
                _INTCONbits 000FF2                 ??_menuMotor 0082               ?_getFullValue 0061  
                  intlevel2 0000            ??_KeGetCharValue 006B                _timerBounces 005E  
                LcPutChar@c 0076              ??_getFullValue 0066  
